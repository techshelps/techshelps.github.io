<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwStartIo Routine</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>HwStartIo Routine </H2><P>As its name suggests, a HwStartIo routine is the entry point for incoming requests to peripheral devices on the HBA-driven bus(es). HwStartIo is called with pointers to an SRB and to the miniport's device extension for per-HBA state. </P>
<P>If the miniport's DriverEntry routine also requested that memory be allocated for logical unit extensions (see <I>DriverEntry Routine</I>), the HwStartIo routine calls <B>ScsiPortGetLogicalUnit</B> with the input device extension pointer and the <B>PathId</B>, <B>TargetId</B>, and <B>Lun</B> values from the input SRB. </P>
<P>If the DriverEntry routine requested that memory be allocated for SRB extensions, the <B>SrbExtension</B> field in each SRB contains a pointer to the miniport's per-request storage area. Note that a miniport driver must request that memory be allocated for <B>SrbExtension</B>s if it maintains per-request state information. It cannot use an SRB for this purpose. In particular, a miniport driver can write values into SRBs <I>only</I> for the following purposes and <I>only</I> in the following fields: </P>
<UL><LI>     To return required status about each operation in the <B>SrbStatus</B> and <B>ScsiStatus</B> fields </LI><LI>     If an underrun occurs, to update the <B>DataTransferLength</B> field </LI><LI>     If it supports auto request sense and transfers request-sense information, to update the <B>SenseInfoBufferLength</B> </LI></UL><P></P>
<P>After the higher-level SCSI class drivers have loaded, most of the SRBs sent to the HwStartIo routine have the <B>Function</B> field set to SRB_FUNCTION_EXECUTE_SCSI. On receipt of such a request, the StartIo routine does the following: </P>
<UL><LI>     Gets and/or sets up whatever context the miniport driver maintains in its device, logical unit, and/or SRB extensions 
<P>For example, a miniport driver might set up a logical unit extension with pointers to the SRB itself and the SRB DataBuffer pointer, the SRB DataTransferLength value, and a driver-defined value (or CDB SCSIOP_xxx value) indicating the operation to be carried out on the HBA. </P></LI><LI>     Calls an internal routine to program the HBA, as partially directed by the SRB <B>Flags</B>, for the requested operation 
<P>For a device I/O operation, such an internal routine generally selects the target device and sends the CDB over the bus to the target logical unit. </P></LI></UL><P></P>
<P>If the miniport driver uses system DMA, it must call <B>ScsiPortIoMapTransfer</B> <I>before</I> programming the HBA to transfer data. <B>ScsiPortIoMapTransfer</B> sets up the system DMA controller and calls the miniport's HwDmaStarted routine, described in <I>HwDmaStarted Routine</I>, next. </P>
<P>A HwStartIo routine is also responsible for handling incoming SRBs with the <B>Function</B> field set to SRB_FUNCTION_ABORT_COMMAND. For an abort request, the miniport driver might need to verify that the given SRB has not been aborted already by calling <B>ScsiPortGetSrb</B> for the target logical unit and comparing the returned pointer to the current SRB's <B>NextSrb</B> value. If they are unequal, the current SRB has already been aborted, and the miniport driver should do the following: </P>
<UL><LI>     Set the input SRB's <B>ScsiStatus</B> to SRB_STATUS_ABORT_FAILED. </LI><LI>     Call <B>ScsiPortNotification</B> with the <B>NotificationType</B> <B>RequestComplete</B> and with the input SRB. </LI><LI>     Call <B>ScsiPortNotification</B> again with the <B>NotificationType</B> <B>NextRequest</B>, or with <B>NextLuRequest</B> if the HBA supports tagged queueing or multiple requests per logical unit. </LI></UL><P></P>
<P>Otherwise, the HwStartIo routine does the following: </P>
<UL><LI>     Sets up context for the request in its device, logical unit, and/or SRB extensions </LI><LI>     Programs the HBA to abort the given request </LI></UL><P></P>
<P>The port driver always sends its own reset-bus requests directly to the miniport's HwResetBus routine, described in <I>HwResetBus Routine</I>. However, it is possible for the HwStartIo routine to be called with an SRB in which the <B>Function</B> field is set to SRB_FUNCTION_RESET_BUS if a SCSI class driver requests this operation. The StartIo routine can simply call the HwResetBus routine to satisfy an incoming reset request. </P>
<P>If the HBA caches data internally, as indicated when the HwFindAdapter routine (see <I>HwFindAdapter Routines</I>) set up the PORT_CONFIGURATION_INFORMATION, the HwStartIo routine must support the SRB_FUNCTION_FLUSH and SRB_FUNCTION_SHUTDOWN requests. An SRB with its <B>Function</B> field set to SRB_FUNCTION_FLUSH tells the miniport driver to transfer data cached in the HBA, usually to a disk. The miniport should hold on to the flush request until all cached data has been transferred and, then, complete the flush request. (Such a flush request might originate when an application closes a file or the application itself is terminated.) </P>
<P>An SRB with its <B>Function</B> field set to SRB_FUNCTION_SHUTDOWN tells the miniport driver to complete transferring data, including flushing all cached data, out to the target device. The miniport driver should hold on to the shutdown request until no data remains in the HBA's internal cache for the target logical unit and, then, complete the shutdown request. Note that the miniport can be called with more than one shutdown request, possibly for the same LU or with several shutdown requests for different LUs, before the system itself is actually shut down. </P>
<P>Whether a miniport driver handles SRB_FUNCTION_IO_CONTROL requests depends on whether the HBA is to provide dedicated support for an application. Supporting this request allows a set of privately defined device I/O control requests to be sent directly to the miniport driver. For SRBs with the <B>Function</B> field set to SRB_FUNCTION_IO_CONTROL, the <B>DataBuffer</B> field contains a pointer to a system-defined SRB_IO_CONTROL structure containing the driver-defined and application-specified <B>ControlCode</B>. Note that system-defined device I/O control requests sent to SCSI class drivers are mapped to SRBs with the <B>Function</B> field set to SRB_FUNCTION_EXECUTE_SCSI. </P>
<P>Every HwStartIo routine must handle the receipt of an unsupported SRB_FUNCTION_<I>xxx</I>, as follows: </P>
<P>    1    Set the input SRB's <B>SrbStatus</B> to SRB_STATUS_INVALID_REQUEST. </P>
<P>    2    Call <B>ScsiPortNotification</B> with the <B>NotificationType</B> <B>RequestComplete</B> and with the input SRB. </P>
<P>    3    Call <B>ScsiPortNotification</B> again with the <B>NotificationType</B> <B>NextRequest</B>, or with <B>NextLuRequest</B> if the HBA supports tagged queueing or multiple requests per logical unit. </P>
<P></P>
<P>Every HwStartIo routine must return a Boolean value, indicating whether the input request was processed or should be resubmitted later (FALSE). However, the miniport eventually must call <B>ScsiPortNotification</B> twice for each SRB input to its StartIo routine: first, to complete the request (<I>NotificationType</I> <B>RequestComplete</B>) and, second, to tell the port driver to call the StartIo routine again with the next SRB (<I>NotificationType</I> <B>NextRequest</B> or <B>NextLuRequest</B>). </P>
<P>The HwStartIo routine of a miniport driver that manages its HBA exclusively by polling calls <B>ScsiPortNotification</B> with the <I>NotificationType</I> <B>RequestTimerCall</B> and a pointer to its HwTimer routine. For more information about the HwTimer routine, see <I>HwTimer Routine</I>. </P>
<P>The following SRB <B>Function</B> values are defined for use in future versions: </P>
<UL><LI>     SRB_FUNCTION_RECEIVE_EVENT </LI><LI>     SRB_FUNCTION_RELEASE_RECOVERY </LI><LI>     SRB_FUNCTION_RESET_DEVICE </LI><LI>     SRB_FUNCTION_TERMINATE_IO </LI></UL><P></P>
<P>The port driver processes requests with the following SRB <B>Function</B> values without calling the miniport driver: </P>
<UL><LI>     SRB_FUNCTION_CLAIM_DEVICE </LI><LI>     SRB_FUNCTION_RELEASE_QUEUE </LI><LI>     SRB_FUNCTION_FLUSH_QUEUE </LI><LI>     SRB_FUNCTION_ATTACH_DEVICE </LI><LI>     SRB_FUNCTION_RELEASE_DEVICE </LI></UL><P></P>
<P>Miniport driver designers can assume that their miniports will <I>never</I> be sent an SRB with any of the immediately preceding <B>Function</B> values. The port driver handles these requests from SCSI class and filter drivers to protect these higher-level SCSI drivers from having to access any HBA-specific (or miniport-specific) state information in order to find their devices or cancel queued requests. This ensures that SCSI class and filter drivers have no dependencies on any particular model of HBA. </P>
<P>For more information about SRBs and the set of system-defined SRB_FUNCTION_<I>xxx</I> values, see the <I>Introduction to SCSI Port Driver Services Reference</I>. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Allocate_PM_Call_Back</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Allocate_PM_Call_Back </H3><P><BR></P>
<PRE>include vmm.inc

mov     edx, RefData            ; reference data (any doubleword)
mov     esi, OFFSET32 Callback  ; callback function to call
VMMcall Allocate_PM_Call_Back

jc      error
mov     [CallbackAddr], eax     ; selector:offset for callback
</PRE>
<P>Registers a callback function that 16-bit protected-mode applications can call. Virtual devices use this service to provide an interface that is available to device drivers and applications in a VM. Uses EAX, Flags. </P>
<UL><LI>     Returns with the carry flag clear if successful, or set otherwise. If successful, the EAX register contains a selector:offset address that can be called (far call) from within a protected-mode VM. Note that the selector:offset is not callable from a Win32 program. A Win32 program must use the DeviceIoControl function to communicate with a VxD. </LI></UL><P></P>
<P><I>RefData</I> </P>
<P>Reference data to be passed to the callback procedure. Can be any 32-bit value, but is typically the address of a driver-defined structure. </P>
<P><I>Callback</I> </P>
<P>Address of the callback procedure. For more information about the callback procedure, see below. </P>
<P>The system calls the callback procedure as follows: </P>
<P><BR></P>
<PRE>mov     ebx, VM             ; current VM handle
mov     edi, hCurThread     ; current thread handle
mov     edx, RefData        ; reference data
mov     ebp, OFFSET32 crs   ; points to Client_Reg_Struc
call    [Callback]
</PRE>
<P>The <I>VM</I> parameter is a handle identifying the current virtual machine. The <I>RefData</I> parameter is the value supplied when the callback procedure was installed, and <I>crs</I> points to a <B>Client_Reg_Struc</B> structure containing the register values for the virtual machine at the time it called the PM callback address. The callback may read and modify the client registers; any changes made will be seen by the calling application when control returns to it. </P>
<P>See also <B>Allocate_V86_Call_Back</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Two-way Communication</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Two-way Communication </H3><P>Two-way communication occurs when a VxD receives information from and sends information to a Windows application. A 16-bit application can send information to a VxD by calling the protected-mode API procedure for the VxD. Use Get Device Entry Point Address (Interrupt 2Fh Function 1684h) to retrieve the address of this procedure. A Win32 application can use the <B>DeviceIOControl</B> function to communicate with a VxD. </P>
<P>A VxD can send information to an application by using a variety of shell services. For example, a VxD can use the services associated with appy time events, such as <B>_SHELL_CallDll</B>, to call a DLL and pass it data. A VxD can also use services such as <B>_SHELL_BroadcastSystemMessage</B> and <B>_SHELL_PostMessage</B>, to post messages to the queues of one or more Windows-based applications. </P>
<P>The <B>_SHELL_BroadcastSystemMessage</B> service is a convenient way to send a window message to a list of recipient windows. A VxD can also intercept these broadcast messages by installing a callback procedure using the <B>_SHELL_HookSystemBroadcast</B> service. The system calls the procedure whenever the <B>_SHELL_BroadcastSystemMessage</B> is called. The <B>_SHELL_UnhookSystemBroadcast</B> service removes the callback procedure. </P>
<P>The <B>_SHELL_PostMessage</B> service calls the Windows <B>PostMessage</B> function. If a VxD calls the <B>_SHELL_PostMessage</B> service when the current VM is <I>not</I> the system VM, the system schedules the message and does not actually post the message until the system VM receives CPU time. If the current VM is the system VM, the system may call the <B>PostMessage</B> function immediately. </P>
<P>When the call to <B>PostMessage</B> is actually made, the system notifies the VxD of the message result by calling a callback procedure specified by the VxD when it called <B>_SHELL_PostMessage</B>. The VxD must be prepared for failure at two points: immediate failure returned by <B>_SHELL_PostMessage</B> and eventual failure passed to the callback procedure. </P>
<P>If the current VM is the system VM, the system may call the callback procedure before <B>_SHELL_PostMessage</B> returns. To prevent this, use the SPM_UM_AlwaysSchedule value in the <I>uMsg</I> parameter. </P>
<P>Do not make multiple, successive calls to <B>_SHELL_PostMessage</B>. This can fill up the message queue of the window and exhaust available memory. </P>
<P>Do not block the system VM while waiting for the <B>PostMessage</B> function callback. This will deadlock the system. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>mciDriverNotify</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>mciDriverNotify </H3><P><BR></P>
<PRE>BOOL WINAPI mciDriverNotify(HANDLE hCallback, UINT uDeviceID, 
    UINT uStatus)
</PRE>
<P>This function is used by a driver to post a notification message. MCI devices use this function only when the MCI_NOTIFY flag is used with an MCI command message. </P>
<UL><LI>     Returns TRUE if a notification was successfully sent. </LI></UL><P></P>
<P><I>hCallback</I> </P>
<P>Specifies the handle of the window to notify. </P>
<P><I>uDeviceID</I> </P>
<P>Specifies the device ID which triggered the callback. </P>
<P><I>uStatus</I> </P>
<P>Specifies the status of the callback. Status values include: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>MCI_NOTIFY_ABORTED </P></TD><TD VALIGN="TOP"><P>Specifies that the device received a command that prevented the current conditions for initiating the callback from being met. If a new command interrupts the current command and it also requests notification, send this message and not MCI_NOTIFY_SUPERSEDED. </P></TD></TR><TR><TD VALIGN="TOP"><P>MCI_NOTIFY_SUCCESSFUL </P></TD><TD VALIGN="TOP"><P>Specifies that the conditions initiating the callback have been met. </P></TD></TR><TR><TD VALIGN="TOP"><P>MCI_NOTIFY_SUPERSEDED </P></TD><TD VALIGN="TOP"><P>Specifies that the device received another command with the MCI_NOTIFY flag set and the current conditions for initiating the callback have been superseded. </P></TD></TR><TR><TD VALIGN="TOP"><P>MCI_NOTIFY_FAILURE </P></TD><TD VALIGN="TOP"><P>Specifies that a device error occurred while the device was executing the command. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>This function is callable at interrupt time. </P>
<P>A device sends MCI_NOTIFY_SUCCESSFUL when the action for a command finishes. For example, a CD audio device uses this flag for notification for MCI_PLAY when the device finishes playing. The MCI_PLAY command completes successfully only when it reaches the specified end position or reaches the end of the media. Similarly, MCI_SEEK and MCI_RECORD do not return MCI_NOTIFY_SUCCESSFUL until they reach the specified end position or reach the end of the media. </P>
<P>A device sends MCI_NOTIFY_ABORTED only when it receives a command that prevents it from meeting the notification conditions. For example, the command MCI_PLAY would not abort notification for a previous play command provided that the new command does not change the play direction or change the ending position for the play command with an active notify. The MCI_RECORD and MCI_SEEK commands behave similarly. </P>
<P>Do not send MCI_NOTIFY_ABORTED when MCI_PLAY or MCI_RECORD is paused with MCI_PAUSE. The MCI_RESUME command delays completion of MCI_PLAY and MCI_RECORD but does not cancel the commands. The MCI_RESUME command will let them continue to meet the callback conditions. </P>
<P>If a device cannot execute a command, set the error return for the message but do not send a notification message. </P>
<P></P>
<P></P></FONT></BODY></HTML>

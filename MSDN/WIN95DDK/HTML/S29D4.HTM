<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Full Debugging of a Modem INF File Using Modem Event Logs</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Full Debugging of a Modem INF File Using Modem Event Logs </H3><P>Running the MCT can usually provide a gross pass/fail result. However, subtle errors, such as a response string missing from your INF file, can sneak through MCT validation. Examining a debug log of any MCT or dialout session is important to ensure INF robustness and accuracy. </P>
<H4><A NAME="sec0"></A>Setting Up a Modem Event Logging Session </H4><P>The Modem Development Kit provides two executables, LOGGER.VXD and LOGWIN.EXE, which enable you to produce logs in real-time of the events during an MCT run or dialout session. You can display the event log in a window on the screen and/or save the log in a file (named MODEMLOG.TXT) in the WINDOWS subdirectory. </P>
<P></P>
<P><B>IMPORTANT: </B></P>
<P>Before any modem event logs can be produced, LOGGER.VXD must be copied from the MDK to your WINDOWS\SYSTEM directory. </P>
<P></P>
<P>To produce the modem event logging information, you must: </P>
<P>    1.    Make sure your modem is enabled; for example, an external modem must be powered on and connected to a communications port. </P>
<P>    2.    Enable event logging in the Modem Control Panel. </P>
<P>    3.    Start up LOGWIN.EXE. </P>
<P>    4.    Begin your MCT or modem dialout session. </P>
<P></P>
<P>The procedure for enabling event logging, starting LOGWIN.EXE, and starting an MCT session is given in more detail below: </P>
<P>    1.    Click the Start button, point to Settings, and then click the Control Panel. </P>
<P>    2.    Double-click the Modems icon in the Control Panel. </P>
<P>    3.    In the Modems Properties dialog, select the General tab and click the Properties button. </P>
<P>    4.    When a Properties dialog for your modem appears, select the Connection tab and click the Advanced button. </P>
<P>    5.    In the Advanced Connection Settings dialog, check the option Record a Log File and click OK on all the open dialogs. </P>
<P>    6.    Click the Start button and select the Run option. </P>
<P>    7.    Use the Run dialog to browse for LOGWIN.EXE and then run it. </P>
<P>    8.    Begin your MCT or modem dialout session. The modem event log data will appear in the LOGWIN.EXE window on-screen. The same information is also always recorded in the file MODEMLOG.TXT in your WINDOWS subdirectory. </P>
<P></P>
<P></P>
<P><B>NOTE: </B></P>
<P>If LOGWIN.EXE is not running when you start an MCT or modem dialout session, no log information will appear on the screen and no log information will be written into MODEMLOG.TXT. </P>
<P></P>
<H4><A NAME="sec1"></A>Using the Terminal Application as a Debugging Aid </H4><P>You can use TERMINAL.EXE from Windows 3.1 for simple init and AT command debugging. This is useful if a modem event log file indicates an error immediately after a specific init or command. </P>
<P>    1.    Copy the program TERMINAL.EXE from Windows 3.1 to your computer (if not already present). </P>
<P>    2.    Close MCT if it is running. </P>
<P>    3.    Set up Terminal to access the modem. </P>
<P>    4.    Issue various AT commands until you find one or more commands which do not produce an OK response in Terminal. </P>
<P>    5.    Modify these commands in your INF, or remove them from the INF entirely. </P>
<P>    6.    Uninstall the modem from the Control Panel and reinstall it again so that the newly modified INF is in use. </P>
<P>    7.    Rerun the MCT. </P>
<P></P>
<P>Another debugging shortcut is to cut and paste, via the Windows clipboard, init strings from an INF into Terminal and then connect to a slave modem to see what verbose or numeric responses you receive. </P>
<H4><A NAME="sec2"></A>Interpreting Modem Event Logs </H4><P>Two sample modem event logs produced by LOGWIN.EXE are shown below, one for a data modem session and the other for a voice modem session. In order to interpret the event logs, you need to understand the following about how LOGWIN.EXE and Unimodem/V work together to produce the logs. </P>
<P>When Unimodem/V receives a DLE from the modem, the DLE is translated to a standard event. Below is the table that maps the translated value to the event. The modem log displays the actual DLE received and it's translated value. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Translated DLE value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>DTMF 0 </P></TD></TR><TR><TD VALIGN="TOP"><P>1 </P></TD><TD VALIGN="TOP"><P>DTMF 1 </P></TD></TR><TR><TD VALIGN="TOP"><P>2 </P></TD><TD VALIGN="TOP"><P>DTMF 2 </P></TD></TR><TR><TD VALIGN="TOP"><P>3 </P></TD><TD VALIGN="TOP"><P>DTMF 3 </P></TD></TR><TR><TD VALIGN="TOP"><P>4 </P></TD><TD VALIGN="TOP"><P>DTMF 4 </P></TD></TR><TR><TD VALIGN="TOP"><P>5 </P></TD><TD VALIGN="TOP"><P>DTMF 5 </P></TD></TR><TR><TD VALIGN="TOP"><P>6 </P></TD><TD VALIGN="TOP"><P>DTMF 6 </P></TD></TR><TR><TD VALIGN="TOP"><P>7 </P></TD><TD VALIGN="TOP"><P>DTMF 7 </P></TD></TR><TR><TD VALIGN="TOP"><P>8 </P></TD><TD VALIGN="TOP"><P>DTMF 8 </P></TD></TR><TR><TD VALIGN="TOP"><P>9 </P></TD><TD VALIGN="TOP"><P>DTMF 9 </P></TD></TR><TR><TD VALIGN="TOP"><P>10 </P></TD><TD VALIGN="TOP"><P>DTMF A </P></TD></TR><TR><TD VALIGN="TOP"><P>11 </P></TD><TD VALIGN="TOP"><P>DTMF B </P></TD></TR><TR><TD VALIGN="TOP"><P>12 </P></TD><TD VALIGN="TOP"><P>DTMF C </P></TD></TR><TR><TD VALIGN="TOP"><P>13 </P></TD><TD VALIGN="TOP"><P>DTMF D </P></TD></TR><TR><TD VALIGN="TOP"><P>14 </P></TD><TD VALIGN="TOP"><P>DTMF * </P></TD></TR><TR><TD VALIGN="TOP"><P>15 </P></TD><TD VALIGN="TOP"><P>DTMF # </P></TD></TR><TR><TD VALIGN="TOP"><P>16 </P></TD><TD VALIGN="TOP"><P>DTMF Start </P></TD></TR><TR><TD VALIGN="TOP"><P>17 </P></TD><TD VALIGN="TOP"><P>DTMF End </P></TD></TR><TR><TD VALIGN="TOP"><P>32 </P></TD><TD VALIGN="TOP"><P>End of Transmit </P></TD></TR><TR><TD VALIGN="TOP"><P>33 </P></TD><TD VALIGN="TOP"><P>Handset off hook </P></TD></TR><TR><TD VALIGN="TOP"><P>34 </P></TD><TD VALIGN="TOP"><P>Handset onhook </P></TD></TR><TR><TD VALIGN="TOP"><P>35 </P></TD><TD VALIGN="TOP"><P>Ring </P></TD></TR><TR><TD VALIGN="TOP"><P>36 </P></TD><TD VALIGN="TOP"><P>Ringback </P></TD></TR><TR><TD VALIGN="TOP"><P>37 </P></TD><TD VALIGN="TOP"><P>Answer tone (CCITT - V.25/T.30 2100 Hz) </P></TD></TR><TR><TD VALIGN="TOP"><P>38 </P></TD><TD VALIGN="TOP"><P>Busy </P></TD></TR><TR><TD VALIGN="TOP"><P>39 </P></TD><TD VALIGN="TOP"><P>Fax CNG Tone </P></TD></TR><TR><TD VALIGN="TOP"><P>40 </P></TD><TD VALIGN="TOP"><P>Dialtone </P></TD></TR><TR><TD VALIGN="TOP"><P>41 </P></TD><TD VALIGN="TOP"><P>Silence </P></TD></TR><TR><TD VALIGN="TOP"><P>42 </P></TD><TD VALIGN="TOP"><P>Quiet </P></TD></TR><TR><TD VALIGN="TOP"><P>43 </P></TD><TD VALIGN="TOP"><P>Data calling tone (V.25 1300 Hz tone) </P></TD></TR><TR><TD VALIGN="TOP"><P>44 </P></TD><TD VALIGN="TOP"><P>Bell answer tone (2225 Hz tone) </P></TD></TR><TR><TD VALIGN="TOP"><P>255 </P></TD><TD VALIGN="TOP"><P>Don't care - Unimodem ignores DLE </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec3"></A>Sample Data Modem Event Log </H4><P>Following is a sample data modem event log, with annotations added to the logged events. </P>
<P><BR></P>
<PRE>05:02:55 05-25-1994 - TI V.32bis-V.17 Internal in use.
05:02:55 05-25-1994 - Modem type: TI V.32bis-V.17 Internal
</PRE>
<P>An application has called TAPI to open this modem's line handle. UNIMODEM.TSP called the Win32 function CreateFile("TI V.32bis-V.17 Internal"...) to open a file handle to UNIMODEM.VXD for this modem. </P>
<P><BR></P>
<PRE>05:02:56 05-25-1994 - 38400,N,8,1
</PRE>
<P>Unimodem has called VCOMM to open the correct serial port for this modem, and set its default COM port settings. </P>
<P><BR></P>
<PRE>05:02:56 05-25-1994 - Initializing modem.
05:02:56 05-25-1994 - Send: AT
</PRE>
<P>Unimodem sends an "AT" to initialize the modem's autobaud setting. </P>
<P><BR></P>
<PRE>05:02:57 05-25-1994 - Recv: ATfOK
05:02:57 05-25-1994 - Interpreted response: Ok
</PRE>
<P>The "ATcr" is echoed back by the modem, along with an "OK" response code. Unimodem discards the echoed command, and correctly interprets the OK response. </P>
<P><BR></P>
<PRE>05:02:57 05-25-1994 - Send: AT &amp;F0 
05:02:59 05-25-1994 - Recv: AT &amp;F0 fOK
05:02:59 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem sends the first Init string specified in the INF, discards the echoed command, and interprets the OK response correctly. </P>
<P><BR></P>
<PRE>05:02:59 05-25-1994 - Send: AT E0 Q0 V0 W1 T L2 M1 &amp;C1 
05:03:01 05-25-1994 - Recv: AT E0 Q0 V0 W1 T L2 M1 &amp;C1 0
05:03:01 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem sends the second Init string from the INF. The command is echoed back, but notice that numeric response codes are now in use. </P>
<P><BR></P>
<PRE>05:03:01 05-25-1994 - Send: AT &amp;D2 &amp;S0 X4 %C1 \J0 \N7 \Q3 \V1 \T0 
05:03:03 05-25-1994 - Recv: 0
05:03:03 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem successfully sends the third Init string from the INF. Note that this command was not echoed back by the modem. </P>
<P><BR></P>
<PRE>05:03:03 05-25-1994 - Send: ATS7=50\T0L2M1%C1\N7\Q3B1X4
05:03:04 05-25-1994 - Recv: 0
05:03:04 05-25-1994 - Interpreted response: Ok
</PRE>
<P>This is the dynamic initialization stage. Unimodem sent a string to configure the modem to settings requested by the user and/or application. The command string is built dynamically based on registry keys, originally specified by "Settings" values in the INF file. </P>
<P><BR></P>
<PRE>05:03:04 05-25-1994 - Dialing ''.
05:03:04 05-25-1994 - Send: ATX4
05:03:06 05-25-1994 - Recv: 0
05:03:07 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem first sets dial tone detection on. </P>
<P><BR></P>
<PRE>05:03:07 05-25-1994 - Send: ATDT;
05:03:09 05-25-1994 - Recv: 0
05:03:09 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem takes the modem off-hook. </P>
<P><BR></P>
<PRE>05:03:09 05-25-1994 - Dialing '9242 9992'.
05:03:09 05-25-1994 - Send: ATX4
05:03:11 05-25-1994 - Recv: 0
05:03:11 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem sets dial tone detection on again (probably a bug). </P>
<P><BR></P>
<PRE>05:03:11 05-25-1994 - Send: ATDT9242 9992;
05:03:15 05-25-1994 - Recv: 0
05:03:15 05-25-1994 - Interpreted response: Ok
</PRE>
<P>Unimodem dials the phone number provided by the application via a TAPI lineMakeCall function. </P>
<P><BR></P>
<PRE>05:03:15 05-25-1994 - Originating the call.
05:03:15 05-25-1994 - Send: ATX3D
</PRE>
<P>Unimodem originals the call. Note that 'X3' is included because this modem will not work correctly without it. Some modems do not require this. </P>
<P><BR></P>
<PRE>05:03:30 05-25-1994 - Recv: 527769
05:03:30 05-25-1994 - Interpreted response: Ignore
</PRE>
<P>"Ignore" is misleading. Here, Unimodem recognized "52" as a call progress response code. </P>
<P><BR></P>
<PRE>05:03:30 05-25-1994 - Recv: 7769
05:03:30 05-25-1994 - Interpreted response: Ignore
</PRE>
<P>Unimodem recognized "77" as a call progress response code. </P>
<P><BR></P>
<PRE>05:03:30 05-25-1994 - Recv: 69
05:03:30 05-25-1994 - Interpreted response: Connect
</PRE>
<P>Unimodem recognized "69" as indication of a connection. </P>
<P><BR></P>
<PRE>05:03:30 05-25-1994 - Connection established at 14400bps.
05:03:30 05-25-1994 - Error-control activated.
05:03:30 05-25-1994 - No data compression, or modem does not support compression reporting.
</PRE>
<P>Unimodem knows that this is a 14400 call with error compression but no data compression, based on the "527769" response codes. </P>
<P>The call is now in progress, in use by the application. </P>
<P><BR></P>
<PRE>05:03:41 05-25-1994 - Remote modem hung up.
</PRE>
<P>Unimodem detected carrier loss. The call was disconnected by the other computer. This output would appear different if Unimodem had been called to disconnect. </P>
<P><BR></P>
<PRE>05:03:41 05-25-1994 - Hanging up the modem.
</PRE>
<P>Unimodem dropped DTR to cause the modem to hang up. </P>
<P><BR></P>
<PRE>05:03:41 05-25-1994 - TI V.32bis-V.17 Internal closed.
</PRE>
<P>UNIMODEM.TSP closed its Win32 file handle to the modem. </P>
<H4><A NAME="sec4"></A>Sample Voice Modem Event Log </H4><P>Following is a sample voice modem event log, with annotations added to the logged events. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:28.64 - Microsoft Voice Modem in use.

&lt;p&gt;11-08-1995 14:49:28.69 - Modem type: Microsoft Voice Modem
</PRE>
<P>An application has called TAPI to open this modem's line handle. UNIMODEM.TSP called the Win32 function CreateFile("Microsoft Voice Modem"...) to open a file handle to UNIMODEM.VXD for this modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:28.95 - 19200,N,8,1
</PRE>
<P>Unimodem has called VCOMM to open the correct serial port for this modem, and set its default COM port settings. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:29.52 - Initializing modem.
11-08-1995 14:49:29.52 - Send: AT
11-08-1995 14:49:29.52 - Recv: AT
11-08-1995 14:49:29.67 - Recv: OK
11-08-1995 14:49:29.67 - Interpreted response: Ok
11-08-1995 14:49:29.67 - Send: AT &amp;F E0 V1 &amp;D2 &amp;C1 W2 S95=47
11-08-1995 14:49:29.68 - Recv: AT &amp;F E0 V1 &amp;D2 &amp;C1 W2 S95=47
11-08-1995 14:49:29.82 - Recv: OK
11-08-1995 14:49:29.82 - Interpreted response: Ok
11-08-1995 14:49:29.82 - Send: ATS7=60S30=0L1M1\N3%C3&amp;K3B0 N1X4
11-08-1995 14:49:29.98 - Recv: OK
11-08-1995 14:49:29.98 - Interpreted response: Ok
11-08-1995 14:49:29.98 - Waiting for a call.
</PRE>
<P>Normal data init process. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:29.98 - Send: at#cid=1
11-08-1995 14:49:30.14 - Recv: OK
11-08-1995 14:49:30.14 - Interpreted response: Ok
</PRE>
<P>EnableCallerID commands sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:30.14 - Send: at-sdr=7
11-08-1995 14:49:30.27 - Recv: OK
11-08-1995 14:49:30.27 - Interpreted response: Ok
</PRE>
<P>EnableDistinctiveRing commands sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:30.27 - Send: ATS0=0
11-08-1995 14:49:30.41 - Recv: OK
11-08-1995 14:49:30.41 - Interpreted response: Ok
</PRE>
<P>Monitoring command sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:44.25 - Recv: RING1
11-08-1995 14:49:44.25 - Interpreted response: Distinctive Ring A
</PRE>
<P>Incoming ring. Since distinctive ringing is enabled, distinctive ring is reported. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:46.90 - Answering the voice call.
11-08-1995 14:49:46.90 - Send: at#cls=8
11-08-1995 14:49:47.16 - Recv: OK
11-08-1995 14:49:47.16 - Interpreted response: Ok
11-08-1995 14:49:47.16 - Send: at#vls=0
11-08-1995 14:49:47.31 - Recv: OK
11-08-1995 14:49:47.31 - Interpreted response: Ok
11-08-1995 14:49:47.31 - Send: at#vbt=1
11-08-1995 14:49:47.45 - Recv: OK
11-08-1995 14:49:47.45 - Interpreted response: Ok
11-08-1995 14:49:47.45 - Send: at#vsr=7200
11-08-1995 14:49:47.59 - Recv: OK
11-08-1995 14:49:47.59 - Interpreted response: Ok
11-08-1995 14:49:47.59 - Send: at#vbs=4
11-08-1995 14:49:47.73 - Recv: OK
11-08-1995 14:49:47.74 - Interpreted response: Ok
11-08-1995 14:49:47.74 - Send: ats30=60
11-08-1995 14:49:47.88 - Recv: OK
11-08-1995 14:49:47.88 - Interpreted response: Ok
11-08-1995 14:49:47.88 - Send: ata
</PRE>
<P>VoiceAnswer commands sent to modem. This happens in response to the TAPI function lineAnswer. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.11 - Recv: VCON
11-08-1995 14:49:48.11 - Interpreted response: Ok
</PRE>
<P>Voice connect response. The voice connect response is normally mapped to an OK response. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.11 - Issuing Speakerphone command.
11-08-1995 14:49:48.11 - Send: at#vls=6
11-08-1995 14:49:48.26 - Recv: OK
11-08-1995 14:49:48.26 - Interpreted response: Ok
</PRE>
<P>SpeakerphoneEnable commands sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.26 - Send: at#vls=6
11-08-1995 14:49:48.41 - Recv: OK
11-08-1995 14:49:48.41 - Interpreted response: Ok
11-08-1995 14:49:48.41 - Send: at#spk=0,,,
11-08-1995 14:49:48.55 - Recv: OK
11-08-1995 14:49:48.55 - Interpreted response: Ok
</PRE>
<P>SpeakerphoneMute commands sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.55 - Send: at#vls=6
11-08-1995 14:49:48.69 - Recv: OK
11-08-1995 14:49:48.69 - Interpreted response: Ok
11-08-1995 14:49:48.69 - Send: at#spk=,0,3
11-08-1995 14:49:48.84 - Recv: OK
11-08-1995 14:49:48.84 - Interpreted response: Ok
</PRE>
<P>SpeakerphoneSetVolumeGain commands sent to modem </P>
<P>The above commands (SpeakerphoneEnable, SpeakerphoneMute, and SpeakerphoneSetVolumeGain) are sent in response to the TAPI call phoneSetHookSwitch(hPhone, PHONESHOOKSWITCHDEV_SPEAKER, PHONEHOOKSWITCHMODE_SPEAKER), which takes the speakerphone off hook, and mutes it. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.84 - Voice Modem Wave Open.
</PRE>
<P>waveOutOpen/waveInOpen called </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.85 - Setting wave format.
11-08-1995 14:49:48.85 - Send: at#vls=0
11-08-1995 14:49:48.99 - Recv: OK
11-08-1995 14:49:48.99 - Interpreted response: Ok
</PRE>
<P>LineSetPlayFormat commands sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:48.99 - Starting wave play/record.
11-08-1995 14:49:48.99 - Send: at#vtx
11-08-1995 14:49:49.17 - Recv: CONNECT
11-08-1995 14:49:49.17 - Interpreted response: Connect
</PRE>
<P>StartPlay commands sent to modem. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:49.40 - Received DLE Raw=117, Translated=255.
</PRE>
<P>DLE received from modem. The Raw value is the actual value received, and the Translated value is the value Unimodem has mapped it to. See the DLE translation table in <I>Interpreting Modem Event Logs</I>. In this example, the DLE is translated to 255, which means that Unimodem/V ignores this DLE. </P>
<P><BR></P>
<PRE>11-08-1995 14:49:54.78 - Ending wave play/record.
11-08-1995 14:49:54.78 - Voice Modem Wave Close.
</PRE>
<P>waveInClose/waveOutClose has been called. </P>
<P><BR></P>
<PRE>.
.
.
11-08-1995 14:50:41.48 - Received DLE Raw=49, Translated=1.
</PRE>
<P>DLE received from modem. This is translated to the DTMF digit 1. </P>
<P><BR></P>
<PRE>11-08-1995 14:50:41.51 - Ending wave play/record.
11-08-1995 14:50:41.51 - Voice Modem Wave Close.
</PRE>
<P>waveInClose/waveOutClose has been called. </P>
<P><BR></P>
<PRE>11-08-1995 14:50:41.94 - Received DLE Raw=35, Translated=15.
</PRE>
<P>DLE received from modem. This is translated to the DTMF digit #. </P></FONT></BODY></HTML>

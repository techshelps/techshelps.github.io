<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Starting as a VxD</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Starting as a VxD </H3><P>Running WDEB386 as a VxD requires approximately 90KB less of conventional memory than running it from the command line. Its only disadvantage is that loaded symbols aren't available until after SYS_CRITICAL_INIT. You can start the debugger as a virtual device driver by placing the following line in your CONFIG.SYS file: </P>
<P><BR></P>
<PRE>device=c:\windev\wdeb386.exe
</PRE>
<P>You must specify the full path to the WDEB386.EXE file. You can specify any command-line options on the <B>device</B> line with (for example, you can load symbol files), or you can set options by adding one or more of the following debug settings to the [386Enh] section of SYSTEM.INI: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>DebugCom=</B><I>comport</I> </P></TD><TD VALIGN="TOP"><P>Sets the communications port that the debugger uses for input and output. The <I>comport</I> can be 1, 2, 3 or 4, as described for the <B>/C</B> command line option. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DebugBaud=</B><I>baudrate</I> </P></TD><TD VALIGN="TOP"><P>Sets the baud rate for the communications port used by the debugger. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DebugCmd=</B><I>parameters</I> </P></TD><TD VALIGN="TOP"><P>Lists the debugger commands to execute as the debugger starts. This is typically used to set command-line parameters. For example, use DebugCmd=y /n /b to enable new options and to initially break into debugger at SYS_CRITICAL_INIT. Multiple commands must be separated by semicolons (;). </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DebugSym=</B><I>symbol-files</I> </P></TD><TD VALIGN="TOP"><P>Specifies the symbol file or files to load. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DebugSymCmd=</B><I>cmds</I> </P></TD><TD VALIGN="TOP"><P>Lists the debugger commands to execute immediately after all symbols have been loaded. Multiple commands must be separated by semicolons (;). </P></TD></TR><TR><TD VALIGN="TOP"><P><B>BreakInDebugVxD=</B><I>value</I> </P></TD><TD VALIGN="TOP"><P>Sets the behavior of the CTRL+C key when pressed on the debug terminal or the CTRL+ALT+SYSREQ key combination when pressed on the computer on which the debugger is running. If <I>value</I> is TRUE, pressing the key stops execution at the current instruction regardless of the privilege (ring) of the code. If FALSE, pressing the keys stops execution in ring 3 code only. The default setting if this entry is not given is TRUE. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If you have the Windows 95 Device Driver Development Kit, you can use the DDKDEBUG.BAT batch file to create a WDEBVXD.INS file that contains the statements that you need to add to the [386Enh] section of SYSTEM.INI. In particular, DDKDEBUG.BAT includes the DEBUGCMD.VXD file that provides additional debugging support. You may need to set the <B>DebugCom</B> and other options to appropriate values. </P>
<P>When you no longer want to run the debugger as a VxD, insert a semicolon before the device=WDEB386.EXE (and device=DEBUGCMD.VXD if present) entry in the SYSTEM.INI file. Any debug options settings you added to the file do not need a semicolon; they will be ignored on subsequent loads of Windows 95. </P></FONT></BODY></HTML>

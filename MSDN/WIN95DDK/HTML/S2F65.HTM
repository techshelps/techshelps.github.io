<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>I/O Request Timeout</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>I/O Request Timeout </H3><P>Each <B>IOP</B> has an <B>IOP_timer</B> member that the IOS initially sets to 15 seconds. On each subsequent timer interrupt (approximately one per second), the IOS decrements by one second the corresponding <B>IOP_timer</B> member in each outstanding <B>IOP</B>. If the <B>IOP_timer</B> member in any <B>IOP</B> becomes zero before the packet is freed, the IOS sends the <B>AEP_TIMEOUT</B> command to the asynchronous event routines for all drivers. </P>
<P>In this case, the IOS sets the <B>AEP_i_t_o_iop</B> member to the address of the affected <B>IOP</B>. If a driver has already processed this <B>IOP</B>, that driver sets the <B>AEP_result</B> member to zero; otherwise, it sets the member to non-zero. If a driver has processed the request but the adapter has failed to respond, the driver can correct the problem, such as resetting the adapter. If a driver is queuing the request and has not yet processed the request, it can simply reset the <B>IOP_timer</B> member with the value in the <B>IOP_orig_timer</B> field. </P>
<P>See also <B>AEP</B>, <B>IOP</B> </P></FONT></BODY></HTML>

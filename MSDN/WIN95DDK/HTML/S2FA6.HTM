<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Execute SCSI I/O Command</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Execute SCSI I/O Command </H3><P>Prototype: DWORD SendASPI32Command(lpSRB) </P>
<P>Declaration: LPSRB lpSRB; </P>
<P>The SendASPI32Command function with command code SC_EXEC_SCSI_CMD is used to execute a SCSI I/O command. Once an ASPI client has initialized, virtually all I/O is performed with this command. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Parameter </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>lpSRB </P></TD><TD VALIGN="TOP"><P>Points to the following SCSI request block </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><BR></P>
<PRE>typedef struct {

 BYTE  SRB_Cmd;      // ASPI command code = SC_EXEC_SCSI_CMD
 BYTE  SRB_Status;     // ASPI command status byte
 BYTE  SRB_HaId;      // ASPI host adapter number
 BYTE  SRB_Flags;     // ASPI request flags
 DWORD  SRB_Hdr_Rsvd;    // Reserved
 BYTE  SRB_Target;     // Target's SCSI ID
 BYTE  SRB_Lun;      // Target's LUN number
 WORD  SRB_Rsvd1;     // Reserved for Alignment
 DWORD  SRB_BufLen;     // Data Allocation Length
 BYTE  *SRB_BufPointer;    // Data Buffer Point
 BYTE  SRB_SenseLen;    // Sense Allocation Length
 BYTE  SRB_CDBLen;     // CDB Length
 BYTE  SRB_HaStat;     // Host Adapter Status
 BYTE  SRB_TargStat;    // Target Status
 void  (*SRB_PostProc)();   // Post routine
 void  *SRB_Rsvd2;     // Reserved
 BYTE  SRB_Rsvd3[16];    // Reserved for expansion
 BYTE  CDBByte[16];     // SCSI CDB
 BYTE  SenseArea[SENSE_LEN+2]; // Request Sense buffer

} SRB_ExecSCSICmd, *PSRB_ExecSCSICmd;
</PRE>
<P>Table 4-6. Execute SCSI I/O Command </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Member </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_Cmd </P></TD><TD VALIGN="TOP"><P>[IN] This field must contain SC_EXEC_SCSI_CMD. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_Status </P></TD><TD VALIGN="TOP"><P>[OUT]This field returns one of the following statuses: </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="120pt" VALIGN="TOP"><COL WIDTH="120pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>SS_PENDING </P></TD><TD VALIGN="TOP"><P>SCSI request is in progress. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_COMP </P></TD><TD VALIGN="TOP"><P>SCSI/ASPI request has completed without error. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_ABORTED </P></TD><TD VALIGN="TOP"><P>SCSI command has been aborted. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_ABORT_FAIL </P></TD><TD VALIGN="TOP"><P>SCSI command abort failed. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_ERR </P></TD><TD VALIGN="TOP"><P>SCSI command completed with an error. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_INVALID_SRB </P></TD><TD VALIGN="TOP"><P>One or more parameters in the SCSI Request Block (SRB) are set incorrectly. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_INVALID_PATH_ID </P></TD><TD VALIGN="TOP"><P>SCSI ID and LUN are invalid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_BUFFER_TO_BIG </P></TD><TD VALIGN="TOP"><P>The ASPI manager cannot handle the given transfer size. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_BUFFER_ALIGN </P></TD><TD VALIGN="TOP"><P>The ASPI manager cannot handle the alignment on this buffer. You must force the buffer into the alignment specified by the alignment mask returned as part of the SC_HA_INQUIRY command. </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_SECURITY_VIOLATION </P></TD><TD VALIGN="TOP"><P>The application does not have the security privileges needed to perform the operation for the device. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_HaId </P></TD><TD VALIGN="TOP"><P>[IN] This field specifies which installed host adapter the request is intended for. Host adapter numbers are always assigned by the SCSI manager layer beginning with zero. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_Flags </P></TD><TD VALIGN="TOP"><P>[IN] The SRB flags field is defined as follows: </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="120pt" VALIGN="TOP"><COL WIDTH="120pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>SRB_DIR_IN </P></TD><TD VALIGN="TOP"><P>Data transfer from SCSI target to host. Mutually exclusive with SRB_DIR_OUT. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_DIR_OUT </P></TD><TD VALIGN="TOP"><P>Transfer from host to SCSI target. Mutually exclusive with SRB_DIR_IN. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_EVENT_NOTIFY </P></TD><TD VALIGN="TOP"><P>Enable ASPI command event notification. This flag and the SRB_POSTING flag are mutually exclusive. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_POSTING </P></TD><TD VALIGN="TOP"><P>Enable ASPI command completion posting. This flag and the SRB_EVENT_NOTIFY flag are mutually exclusive. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_ENABLE_RESIDUAL COUNT </P></TD><TD VALIGN="TOP"><P>Enables reporting of residual byte count. This bit is only significant if the host adapter reports support for residual byte count from the SC_HA_INQUIRY command. Whenever a data underrun occurs, the SRB_BufLen field is updated to reflect the remaining bytes to transfer. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_Hdr_Rsvd </P></TD><TD VALIGN="TOP"><P>Reserved = 0 </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_Target </P></TD><TD VALIGN="TOP"><P>[IN] SCSI ID of target device. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_Lun </P></TD><TD VALIGN="TOP"><P>[IN] Logical Unit Number (LUN) of device. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_BufLen </P></TD><TD VALIGN="TOP"><P>[IN] This field indicates the number of bytes to be transferred. If the SCSI command to be executed does not transfer data (e.g., Test Unit Ready, Rewind, etc.), this field must be set to zero. If residual byte length is supported and selected, this field is returned with the residual number of bytes (usually 0). </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_BufPointer </P></TD><TD VALIGN="TOP"><P>[IN] This field is a pointer to the data buffer. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_SenseLen </P></TD><TD VALIGN="TOP"><P>[IN] This field indicates the number of bytes allocated at the end of the SRB for sense data. A request sense is automatically generated if a check condition is presented at the end of a SCSI command. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_CDBLen </P></TD><TD VALIGN="TOP"><P>[IN] This field establishes the length, in bytes, of the SCSI Command Descriptor Block (CDB). This value is typically 6 or 10. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_HaStat </P></TD><TD VALIGN="TOP"><P>[OUT] Upon completion of the SCSI command, the ASPI manager sets this field with the host adapter status as follows: </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="120pt" VALIGN="TOP"><COL WIDTH="120pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>HASTAT_OK </P></TD><TD VALIGN="TOP"><P>Host adapter did not detect an error. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_TIMEOUT </P></TD><TD VALIGN="TOP"><P>The time allocated for the transaction ran out. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_COMMAND_TIMEOUT </P></TD><TD VALIGN="TOP"><P>SRB expired while waiting to be processed. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_SEL_TO </P></TD><TD VALIGN="TOP"><P>Selection of target timed out. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_MESSAGE_REJECT </P></TD><TD VALIGN="TOP"><P>While processing SRB, the adapter received a MESSAGE REJECT. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_BUS_RESET </P></TD><TD VALIGN="TOP"><P>A bus reset was detected. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_PARITY_ERROR </P></TD><TD VALIGN="TOP"><P>A parity error was detected. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_REQUEST_SENSE_FAILED </P></TD><TD VALIGN="TOP"><P>The adapter failed in issuing a Request Sense after a check condition was reported by the target device. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_DO_DU </P></TD><TD VALIGN="TOP"><P>Data overrun/underrun. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_BUS_FREE </P></TD><TD VALIGN="TOP"><P>Unexpected Bus Free. </P></TD></TR><TR><TD VALIGN="TOP"><P>HASTAT_PHASE_ERR </P></TD><TD VALIGN="TOP"><P>Target Bus phase sequence failure. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_TargStat </P></TD><TD VALIGN="TOP"><P>[OUT] Upon completion of the SCSI command, the ASPI manager will record the specific status returned by the SCSI target: </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="120pt" VALIGN="TOP"><COL WIDTH="120pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>STATUS_GOOD </P></TD><TD VALIGN="TOP"><P>No target status. </P></TD></TR><TR><TD VALIGN="TOP"><P>STATUS_CHKCOND </P></TD><TD VALIGN="TOP"><P>Check status (sense data is in SenseArea). </P></TD></TR><TR><TD VALIGN="TOP"><P>STATUS_BUSY </P></TD><TD VALIGN="TOP"><P>Specified Target/LUN is busy. </P></TD></TR><TR><TD VALIGN="TOP"><P>STATUS_RESCONF </P></TD><TD VALIGN="TOP"><P>Reservation conflict. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_PostProc </P></TD><TD VALIGN="TOP"><P>[IN] If posting is enabled (SRB_POSTING flag), this field contains a pointer to a function. ASPI for Win32 calls this function upon completion of an ASPI request. If event notification is enabled (SRB_EVENT_NOTIFY flag), this field contains a handle to an event. ASPI for Win32 signals this event upon completion of an ASPI request. </P></TD></TR><TR><TD VALIGN="TOP"><P>CDBByte[..] </P></TD><TD VALIGN="TOP"><P>[IN] This field contains the CDB as defined by the target's SCSI command set. The length of the SCSI CDB is specified in the SRB_CDBLen field. </P></TD></TR><TR><TD VALIGN="TOP"><P>SenseArea[..] </P></TD><TD VALIGN="TOP"><P>[OUT] The SenseArea is filled with the sense data on a check condition. The maximum length of this field is specified in the SRB_SenseLen field. Note that the target can return fewer than the number of sense bytes requested. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Table 4-7. Return Values from Execute SCSI I/O Command </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="240pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>SS_PENDING </P></TD><TD VALIGN="TOP"><P>SCSI request is in progress. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>Example</B> </P>
<P>This example sends a SCSI Inquiry command to host adapter #0, target #0, LUN #0. </P>
<P><BR></P>
<PRE> SRB_ExecSCSICmd MySRB;
 DWORD ASPIStatus;
 char InquiryBuffer[32];   
  .
  .
  .
 MySRB.SRB_Header    = SC_EXEC_SCSI_CMD;
 MySRB.SRB_HaId    = 0;
 MySRB.SRB_Flags    = SRB_DIR_IN | SRB_POSTING;
 MySRB.SRB_Hdr_Rsvd   = 0;
 MySRB.SRB_Target    = 0;
 MySRB.SRB_Lun    = 0;
 MySRB.SRB_BufLen    = 32;
 MySRB.SRB_SenseLen   = SENSE_LEN;
 MySRB.SRB_BufPointer  = InquiryBuffer;
 MySRB.SRB_CDBLen    = 6;
 MySRB.RB_PostProc   = PostProcedure;
 MySRB.CDBByte[0]    = SCSI_INQUIRY;
 MySRB.CDBByte[1]    = 0;
 MySRB.CDBByte[2]    = 0;
 MySRB.CDBByte[3]    = 0;
 MySRB.CDBByte[4]    = 32;
 MySRB.CDBByte[5]    = 0; 
  .
 /***************************************************/
 /* Make sure all other reserved fields are zeroed
 /* before passing the SRB to ASPI for Win32
 /***************************************************/
  .
 ASPIStatus = SendASPI32Command ( (LPSRB) &amp;MySRB );
  .
  .
</PRE></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FS_DeleteFile</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>FS_DeleteFile </H3><P><BR></P>
<PRE>FS_DeleteFile(
 PIOREQ pir
 )
</PRE>
<P>A file is deleted through <B>FS_DeleteFile</B>. This routine handles the Win32 function: DeleteFile(); and INT 21h functions: 13h, and 41h. </P>
<P><I>ir_ppath</I> </P>
<P>Supplies a pointer to the canonicalized unicode pathname to delete. Wildcards are allowed on the filename specification. </P>
<P><I>ir_rh</I> </P>
<P>Supplies handle to disk volume or network resource which contains the file. </P>
<P><I>ir_attr</I> </P>
<P>Supplies must-match and search attributes. Path parsing flags are also provided as advisory information for the FSDs. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Search Attribute Values:</B> </P>
<P>Any combination of the following attributes may be specified, causing those files to be included with normal files in the search. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_HIDDEN</B> </P></TD><TD VALIGN="TOP"><P>Include hidden file in search. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_SYSTEM</B> </P></TD><TD VALIGN="TOP"><P>Include system file in search. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_DIRECTORY</B> </P></TD><TD VALIGN="TOP"><P>Include subdirectories in search. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_VOLUMELABEL</B> </P></TD><TD VALIGN="TOP"><P>Search for volume label. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Must-Match Attribute Values:</B> </P>
<P>The must-match attributes can be any of the following attributes. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_READONLY</B> </P></TD><TD VALIGN="TOP"><P>Match read-only files. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_HIDDEN</B> </P></TD><TD VALIGN="TOP"><P>Match hidden files. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_SYSTEM</B> </P></TD><TD VALIGN="TOP"><P>Match system files. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_DIRECTORY</B> </P></TD><TD VALIGN="TOP"><P>Match subdirectories. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_ARCHIVE</B> </P></TD><TD VALIGN="TOP"><P>Match archived files. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_VOLUMELABEL</B> </P></TD><TD VALIGN="TOP"><P>Match volume label. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Path Parsing Flags:</B> </P>
<P>The following path parsing flags are passed in. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_WILDCARDS</B> </P></TD><TD VALIGN="TOP"><P>Wildcard characters present in pathname. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_HAS_STAR</B> </P></TD><TD VALIGN="TOP"><P>Path has the asterisk as a wildcard character. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_LONG_PATH</B> </P></TD><TD VALIGN="TOP"><P>Path has a longname component. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_KEEP_CASE</B> </P></TD><TD VALIGN="TOP"><P>Preserve the case of the filename passed in when storing on disk. This also implies that this call should use longname semantics for its processing. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_HAS_DOT</B> </P></TD><TD VALIGN="TOP"><P>Filename component has a dot in its name. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_IS_LFN</B> </P></TD><TD VALIGN="TOP"><P>Filename component is a longname. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_uFname</I> </P>
<P>Pointer to the case-preserved filename component in unicode. </P>
<P><I>ir_upath</I> </P>
<P>Pointer to the unparsed user pathname in unicode. </P>
<P><I>ir_user</I> </P>
<P>Supplies user id for this request. </P>
<P><I>ir_pid</I> </P>
<P>Supplies process id for this request. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>     <I>ir_error</I> </P></TD><TD VALIGN="TOP"><P>Returns status of the operation ( 0 if no error, errorcode otherwise ). </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P>If an FSD does not support long filenames on a volume and it gets a path that contains longnames, it should fail the call. The FSD should not attempt to truncate the pathname because there is a possibility of deleting the wrong file. Any truncation that needs to be done will be done by the IFS manager before the FSD is called. If an FSD does not support a wildcard delete, it must return an ERROR_INVALID_FUNCTION. The IFS manager watches for this errorcode and then proceeds to split the wildcard delete into a sequence of Find and Delete operations on non-wildcard filenames. </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RawClusterInfo</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>RawClusterInfo </H3><P><BR></P>
<PRE>RawClusterInfo STRUC
    rci_pdata      dd  ?  ; Pointer to raw cluster data buffer
    rci_isecstart  dd  ?  ; Starting sector in sector heap
    rci_ifat       dw  ?  ; FAT index
    rci_csec       db  ?  ; Count of raw sectors
    rci_flags      db  ?  ; Flags
    rci_reserved   dd  0  ; Reserved
RawClusterInfo ENDS
</PRE>
<P>Contains information used by the raw cluster I/O IOCTLs. All pointers are flat model pointers. The same structure is used for both reads and writes, but the fields are treated somewhat differently. </P>
<P><B>rci_pdata</B> </P>
<P>Address of the buffer from which data is written or into which data is read. The size of the buffer, in sectors, is specified by <B>rci_csec</B>. The client must always specify a flat address regardless of the client's mode of execution. (For an MS-DOS program, the flat adddress is simply <I>segment</I>*16 + <I>offset</I>.) The data read or written is raw data; no compression or decompression is applied to the data. Reads return the data as it appears on the disk; writes do not modify the data before writing it to the disk. The address passed in <B>rci_pdata</B> may be valid only in the context of the client thread. For example, for V86 or Win32 clients. </P>
<P><B>rci_isecstart</B> </P>
<P>Starting sector of the cluster specified by <B>rci_imdfat</B>. On reads, this field is ignored on input and filled with the value from the MDFAT entry before returning to the client. On writes, this field specifies the starting sector at which to write the cluster. A set of writes fails if any of the target sectors are not free, or if any of the target extents overlap. </P>
<P><B>rci_ifat</B> </P>
<P>FAT index of the target cluster. </P>
<P><B>rci_csec</B> </P>
<P>Count of sectors that the cluster actually occupies on the disk. On reads, if the actual size of the cluster does not exactly match this value, the read is cancelled. </P>
<P><B>rci_flags</B> </P>
<P>Receives the values of the specified flags in the MDFAT entry to the client. On writes, this field specifies the settings of the flags for the cluster to be written. Setting RCFMARK on a write to a CVF whose version is less than 3.0 has no effect. The mark bit is intended for the use of the off-line recompressor to prevent it from trying to recompress clusters it either successfully or unsuccessfully recompressed the last time it ran. Raw write is the only means by which this bit can be set, and normal writes to a cluster clear the bit. </P>
<P>The rci_flags field can a combination of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>RCFMARK (01h) </P></TD><TD VALIGN="TOP"><P>Marked cluster </P></TD></TR><TR><TD VALIGN="TOP"><P>RCFFRAG (02h) </P></TD><TD VALIGN="TOP"><P>Fragmented cluster </P></TD></TR><TR><TD VALIGN="TOP"><P>RCFUNCOMP (04h) </P></TD><TD VALIGN="TOP"><P>Uncompressed cluster </P></TD></TR><TR><TD VALIGN="TOP"><P>RCFALLOC (08h) </P></TD><TD VALIGN="TOP"><P>Allocated cluster </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>rci_reserved</B> </P>
<P>Reserved. </P>
<P></P>
<P></P></FONT></BODY></HTML>

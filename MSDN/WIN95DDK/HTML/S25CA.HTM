<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Breaking into the Debugger</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Breaking into the Debugger </H3><P>To execute debugging commands, you need to break into the debugger and have it display its command prompt. </P>
<P>You can automatically break into the debugger as Windows starts by specifying <B>/B</B> option on the WDEB386 command line or in a <B>y</B> command with the <B>DebugCmd</B> setting in the SYSTEM.INI file. The debugger stops execution just after loading VxDs and just prior to initialization. </P>
<P>To break into the debugger at any time interrupts are not disabled, press the CTRL+C key combination on the debugging terminal. Alternately, press the CTRL+ALT+SYSRQ key combination on the computer running the debugger. This stops execution at the next convenient location in ring 0 or ring 3 code. </P>
<P>To break into the debugger when interrupts are disabled, you use hardware to generate a nonmaskable interrupt (NMI). This usually means having an external "STOP" button connected to a debugging card installed in computer running the debugger. Some machines may have the capability of connecting a front panel button to the NMI line on the machine bus. In any case, using NMI has the advantage of being able to break into a machine that has hung with interrupts disabled. (You can disable the breaking on nonmaskable interrupts by using the <B>v2</B> command.) </P>
<P>You can have your application, DLL, or VxD break into the debugger by adding an <B>int 1</B> or <B>int 3</B> instruction or a call to the <B>DebugBreak</B> function to your code. The <B>int 1</B> instruction produces an "Unexpected trace interrupt" message and stops on the instruction after the <B>int 1</B>. This message does not indicate an error condition and can be ignored. An <B>int 3</B> will break directly on the <B>int</B> instruction and not produce the message. The <B>int 3</B> is used in system components to stop execution on an error. </P>
<P>Once an <B>int</B> instruction is hit, you can remove it by using the <B>z</B> (Zap) command. This command replaces the <B>int</B> instruction with a <B>nop</B> instruction. For programmers developing virtual device drivers (VxDs), the <B>Debug_Out</B> macro is available to send an ASCII string to the debug terminal and execute an <B>int 1</B>, which will break to the debugger. </P>
<P>Once you have broken into the debugger, you can set additional breakpoints by using the <B>bp</B> or <B>br </B>command. For example, the following command sets a breakpoint at beginning of the function _MyEntryPoint: </P>
<P><BR></P>
<PRE>bp _MyEntryPoint
</PRE>
<P>The system also breaks into the debugger if an application or DLL causes a general protection fault (GPF) by attempting to read or write memory with a bad selector, beyond a selector limit, or with a selector set to 0. The debugger receives control immediately if it traps interrupt vector 0Dh (the default setting). If you disable this trap (by using the <B>vs</B> command), Windows first displays a dialog box notifying the user of a problem. The user can click the Debug button to pass control to the debugger at the instruction that caused the fault. </P></FONT></BODY></HTML>

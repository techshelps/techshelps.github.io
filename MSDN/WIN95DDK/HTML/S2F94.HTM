<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwEnableInterruptsCallback Routine</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>HwEnableInterruptsCallback Routine </H2><P>A HwEnableInterruptsCallback routine finishes processing a polled I/O operation without inhibiting I/O operations for other devices in the machine. When the HwEnableInterruptsCallback routine gets control, all system device interrupts are enabled except from the HBA. In other words, the miniport's HwInterrupt routine cannot be called and cannot disturb the context data it set up about the current operation while the HwEnableInterruptsCallback routine is running. </P>
<P>A HwEnableInterruptsCallback routine should do the following: </P>
<P>    1    Use the context that was set up for the operation in the input device extension to complete processing of the request that caused the interrupt. </P>
<P>    2    Call <B>ScsiPortNotification</B> with a pointer to the device extension, the <B>NotificationType</B> <B>CallDisableInterrupts</B>, and the miniport's HwDisableInterruptsCallback routine, described in <I>HwDisableInterruptsCallback Routine</I>. </P>
<P>    3    Return control. </P>
<P></P>
<P><B>ScsiPortNotification</B> calls the HwDisableInterruptsCallback routine with a subset of the system device interrupts disabled: that is, no device interrupt with a system-assigned hardware priority (IRQL) less than or equal to the HBA's can interrupt. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FONTINFO</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>FONTINFO </H3><P><BR></P>
<PRE>typedef struct tagFONTINFO {
    short dfType;
    short dfPoints;
    short dfVertRes;
    short dfHorizRes;
    short dfAscent;
    short dfInternalLeading;
    short dfExternalLeading;
    BYTE dfItalic;
    BYTE dfUnderline;
    BYTE dfStrikeOut;
    short dfWeight;
    BYTE dfCharSet;
    short dfPixWidth;
    short dfPixHeight;
    BYTE dfPitchAndFamily;
    short dfAvgWidth;
    short dfMaxWidth;
    BYTE dfFirstChar;
    BYTE dfLastChar;
    BYTE dfDefaultChar;
    BYTE dfBreakChar;
    short dfWidthBytes;
    unsigned long  dfDevice;
    unsigned long  dfFace;
    unsigned long  dfBitsPointer;
    unsigned long  dfBitsOffset;
    BYTE dfReserved;
    long  dfFlags;        // Windows 3.x fonts only
    short dfAspace;       // Windows 3.x fonts only
    short dfBspace;       // Windows 3.x fonts only
    short dfCspace;       // Windows 3.x fonts only
    long  dfReserved;     // reserved; do not use.
    long  dfReserved1[4]; // reserved; do not use.
} FONTINFO;
</PRE>
<P>Contains information about a physical font. Depending on whether the font is realized by GDI or by a device driver, the <B>FONTINFO</B> structure may be immediately followed by a character-width table and by font bitmap or vector information. </P>
<P>The <B>FONTINFO</B> structure contains optional members (<B>dfFlags</B> through <B>dfReserved1</B>) that are present only if the font has been designed for Windows versions 3.<I>x</I>. If GDI realizes a font for a driver, the font's corresponding <B>FONTINFO</B> structure will not include these optional members unless the RC_BIGFONT bit is set in the <B>dpRaster</B> member of the driver's <B>GDIINFO</B> structure. </P>
<P><B>dfType</B> </P>
<P>Font type. The low-order byte, reserved for exclusive GDI use, is a combination of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>PF_RASTER_TYPE (0x0000) </P></TD><TD VALIGN="TOP"><P>Font is a raster font. </P></TD></TR><TR><TD VALIGN="TOP"><P>PF_VECTOR_TYPE (0x0001) </P></TD><TD VALIGN="TOP"><P>Font is a vector font. </P></TD></TR><TR><TD VALIGN="TOP"><P>PF_BITS_IS_ADDRESS (0x0004) </P></TD><TD VALIGN="TOP"><P>The <B>dfBitsOffset</B> member specifies the absolute memory address of the font bitmap or vector information. </P></TD></TR><TR><TD VALIGN="TOP"><P>PF_DEVICE_REALIZED (0x0080) </P></TD><TD VALIGN="TOP"><P>Font has been realized by the device driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>PF_GLYPH_INDEX (0x0020h) </P></TD><TD VALIGN="TOP"><P>Font is a large (two bytes) character set font. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>All other values in the low-order byte are reserved. In particular, the value 0x0008 in the <B>dfType</B> member is reserved for use with Asian fonts. </P>
<P>The high-order byte is reserved for device use. GDI never inspects the high byte. If GDI realizes the font, it sets this byte to zero. If the device driver realizes the font, it can set this byte to any value. </P>
<P><B>dfPoints</B> </P>
<P>Point size at which the character looks the best. </P>
<P><B>dfVertRes</B> </P>
<P>Vertical resolution, in DPI, at which this character set was digitized. </P>
<P><B>dfHorizRes</B> </P>
<P>Horizontal resolution, in DPI, at which this character set was digitized. </P>
<P><B>dfAscent</B> </P>
<P>Distance from the top of a character definition cell to the baseline of the typographical font. This value is useful for aligning the baseline of fonts of different heights. </P>
<P><B>dfInternalLeading</B> </P>
<P>Amount of leading inside the bounds set by the <B>dfPixHeight</B> member. Accent marks may occur in this area. </P>
<P><B>dfExternalLeading</B> </P>
<P>Amount of extra leading that the designer requests the application add between rows. Because this area is outside of the font proper, it contains no marks and will not be altered by text output calls in either the OPAQUE or TRANSPARENT mode. </P>
<P><B>dfItalic</B> </P>
<P>Italic flag that specifies whether the character-definition data represents an italic font. The low-order bit is 1 if the flag is set. All other bits are zero. </P>
<P><B>dfUnderline</B> </P>
<P>Underline flag that specified whether the character-definition data represents an underlined font. The low-order bit is 1 if the flag is set. All other bits are zero. </P>
<P><B>dfStrikeOut</B> </P>
<P>Strikeout flag that specifies whether the character definition data represents a struck-out font. The low-order bit is 1 if the flag is set. All other bits are zero. </P>
<P><B>dfWeight</B> </P>
<P>Weight of the characters in the character-definition data, on a scale from 1–1000. A value of 400 specifies regular weight type; 700 is bold; and so on. </P>
<P><B>dfCharSet</B> </P>
<P>Character set defined by this font. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>ANSI character set </P></TD></TR><TR><TD VALIGN="TOP"><P>2 </P></TD><TD VALIGN="TOP"><P>Symbol character set </P></TD></TR><TR><TD VALIGN="TOP"><P>255 </P></TD><TD VALIGN="TOP"><P>OEM hardware font </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Character set values that support international versions of the operating system are also permitted. </P>
<P><B>dfPixWidth</B> </P>
<P>Width of all characters in the font. </P>
<P>For vector fonts, the <B>dfPixWidth</B> member is the width of the grid on which the font was digitized. </P>
<P>For raster fonts, <B>dfPixWidth</B> is the width, in pixels, of each character bitmap. If that member is zero, the font has variable-width characters and these widths are specified in the character-width table immediately following this structure. </P>
<P><B>dfPixHeight</B> </P>
<P>Height of all characters in the font. </P>
<P>For vector fonts, the <B>dfPixHeight</B> member is the height of the grid on which the font was digitized. </P>
<P>For raster fonts, <B>dfPixHeight</B> is the height, in scan lines, of each character bitmap. </P>
<P><B>dfPitchAndFamily</B> </P>
<P>Pitch and font family. The pitch specifies whether the characters in the font have the same width or variable widths. The font family indicates, in a general way, the look of a font. </P>
<P>The <B>dfPitchAndFamily</B> member can be a combination of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>0x01 </P></TD><TD VALIGN="TOP"><P>Variable-pitch font. If this value is not given, the font is fixed pitch. </P></TD></TR><TR><TD VALIGN="TOP"><P>FF_ROMAN (0x10) </P></TD><TD VALIGN="TOP"><P>Proportionally spaced fonts with serifs. </P></TD></TR><TR><TD VALIGN="TOP"><P>FF_SWISS (0x20) </P></TD><TD VALIGN="TOP"><P>Proportionally spaced fonts without serifs. </P></TD></TR><TR><TD VALIGN="TOP"><P>FF_MODERN (0x30) </P></TD><TD VALIGN="TOP"><P>Fixed-pitch fonts. </P></TD></TR><TR><TD VALIGN="TOP"><P>FF_SCRIPT (0x40) </P></TD><TD VALIGN="TOP"><P>Cursive or script fonts. </P></TD></TR><TR><TD VALIGN="TOP"><P>FF_DECORATIVE (0x50) </P></TD><TD VALIGN="TOP"><P>Novelty fonts. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If the high-order 4 bits are set to FF_DONTCARE (0x00), the font does not belong to a specific family. </P>
<P><B>dfAvgWidth</B> </P>
<P>Width of characters in the font. For fixed-pitch fonts, this value is the same as <B>dfPixWidth</B>. For variable-pitched fonts, this is the width of the uppercase character "X." </P>
<P><B>dfMaxWidth</B> </P>
<P>Maximum pixel-width of any character in the font. For fixed-pitch fonts, this is simply <B>dfPixWidth</B>. </P>
<P><B>dfFirstChar</B> </P>
<P>First-character code defined by this font. Character definitions are stored only for the characters actually present in a font, so this member should be used when calculating indices into the character-width table following this structure. </P>
<P><B>dfLastChar</B> </P>
<P>Last-character code defined by this font. Note that all the characters with codes between the <B>dfFirstChar</B> and <B>dfLastChar</B> member must be present in the character-width table. </P>
<P><B>dfDefaultChar</B> </P>
<P>Default character. A device driver uses this character as a substitute for any character in a string that is out of the range of the <B>dfFirstChar</B> through <B>dfLastChar</B> members. The character is given relative to <B>dfFirstChar</B> so that the actual value of the default character is the sum of <B>dfDefaultChar</B> and <B>dfFirstChar</B>. Ideally, the <B>dfDefaultChar</B> member should be a visible character in the current font--for example, a period (.). </P>
<P><B>dfBreakChar</B> </P>
<P>Word-break character. Applications use this character to separate words when wrapping or justifying lines of text. The character is given relative to <B>dfFirstChar</B> so that the actual value of the word-break character is the sum of the <B>dfBreakChar</B> and <B>dfFirstChar</B> members. In many fonts, <B>dfBreakChar</B> is zero and <B>dfFirstChar</B> is 32. This means that the word-break character value is 32, an ASCII space. </P>
<P><B>dfWidthBytes</B> </P>
<P>Number of bytes in each row of the font bitmap (raster fonts). This field is not used for vector fonts. The <B>dfWidthBytes</B> member is always an even quantity so that rows of the bitmap start on 16-bit boundaries. </P>
<P><B>dfDevice</B> </P>
<P>Offset from the beginning of the segment that contains the <B>FONTINFO</B> structure to the null-terminated ASCII string that specifies the device name. For a generic font, this value is NULL. </P>
<P><B>dfFace</B> </P>
<P>Offset from the beginning of the segment that contains the <B>FONTINFO</B> structure to the null-terminated ASCII string that specifies the name of the font face. </P>
<P><B>dfBitsPointer</B> </P>
<P>Absolute machine address of the bitmap. This member is set by GDI. The <B>dfBitsPointer</B> member is guaranteed to be even. </P>
<P><B>dfBitsOffset</B> </P>
<P>Offset from the beginning of the segment that contains the <B>FONTINFO</B> structure to the beginning of the bitmap information. </P>
<P>If the PF_BITS_IS_ADDRESS bit is set in <B>dfType</B>, <B>dfBitsOffset</B> is an absolute address of the bitmap or vector information. For example, this bit is set if the font bitmap or vector information is in ROM. </P>
<P>For raster fonts, <B>dfBitsOffset</B> points to a sequence of bytes that make up the bitmaps for each character in the font. </P>
<P>For vector fonts, <B>dfBitsOffset</B> points to a string of bytes or words (depending on the size of the grid on which the font was digitized) that specifies the strokes for each character of the font. The <B>dfBitsOffset</B> member must be even. </P>
<P><B>dfReserved</B> </P>
<P>Reserved; do not use. This member is present only for raster fonts. In Windows 2.<I>x</I> fonts, this member ensures that the character-width table (which immediately follows this member) starts on a 16-bit boundary. </P>
<P><B>dfFlags</B> </P>
<P>Format of the font bitmap information. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>FSF_FIXED (0x0001) </P></TD><TD VALIGN="TOP"><P>Font is fixed pitch. </P></TD></TR><TR><TD VALIGN="TOP"><P>FSF_PROPORTIONAL (0x0002) </P></TD><TD VALIGN="TOP"><P>Font is proportional pitch </P></TD></TR><TR><TD VALIGN="TOP"><P>FSF_ABCFIXED (0x0004) </P></TD><TD VALIGN="TOP"><P>Font is an ABC fixed font. The advance width for each character in the font is the sum of the <B>dfAspace</B>, <B>dfBspace</B>, and <B>dfCspace</B> members. </P></TD></TR><TR><TD VALIGN="TOP"><P>FSF_ABCPROPORTIONAL (0x0008) </P></TD><TD VALIGN="TOP"><P>Font is an ABC proportional font. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>This member is present only for Windows 3.<I>x</I> fonts. </P>
<P><B>dfAspace</B> </P>
<P>Global A space, if any. This member is the distance from the current position to the left edge of the bitmap. This member is present only for Windows 3.<I>x</I> fonts. </P>
<P><B>dfBspace</B> </P>
<P>Global B space, if any. This member is the width of the character. This member is present only for Windows 3.<I>x</I> fonts. </P>
<P><B>dfCspace</B> </P>
<P>Global C space, if any. This member is the distance from the right edge of the bitmap to the new current position. This member is present only for Windows 3.<I>x</I> fonts. </P>
<P><B>dfReserved</B> </P>
<P>This member is not used. This member is present only for Windows 3.<I>x</I> fonts. </P>
<P><B>dfReserved1</B> </P>
<P>This member is not used. This member is present only for Windows 3.<I>x</I> fonts. </P>
<P>The <B>FONTINFO</B> structure may be immediately followed by one or more of the following items: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Item </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Character-width table </P></TD><TD VALIGN="TOP"><P>Specifies the widths of each character as well as specifies the offset to the corresponding bitmap or vector information. </P></TD></TR><TR><TD VALIGN="TOP"><P>Bitmaps </P></TD><TD VALIGN="TOP"><P>Specifies the bits defining the shape of the characters in a raster font. The size of this item is whatever length the total bitmaps occupy. Each row of a raster bitmap must start on a 16-bit boundary, which means that the end of each row must be padded to an even length. </P></TD></TR><TR><TD VALIGN="TOP"><P>Vectors </P></TD><TD VALIGN="TOP"><P>Specifies the set of coordinates that define the shape of the characters in a vector font. </P></TD></TR><TR><TD VALIGN="TOP"><P>Font name </P></TD><TD VALIGN="TOP"><P>Specifies a null-terminated ASCII character string that identifies the name of the font. The size of this field is the length of the string plus a terminating null character. </P></TD></TR><TR><TD VALIGN="TOP"><P>Device name </P></TD><TD VALIGN="TOP"><P>Specifies a null-terminated ASCII character string that specifies the name of the device if this font file is for a specific device. The size of this field is the length of the string plus a terminating null character. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>All device drivers must support Windows 2.<I>x</I> fonts. If a device driver supports Windows 3.<I>x</I> fonts, it must set the RC_BIGFONT bit in the <B>dpRaster</B> member of its <B>GDIINFO</B> structure. Printer drivers can call the <B>GetDeviceCaps</B> function (GDI.80), and check for the RC_BIGFONT bit in the raster capabilities to determine whether the display driver uses Windows 3.<I>x</I> fonts. </P>
<P>When a device driver realizes a font by using the <B>RealizeObject</B> function, the <B>dfFace</B> and <B>dfDevice</B> members must point to valid character strings that contains the font and device names. Windows 2.x Fonts </P>
<P>For Windows 2.<I>x</I> fonts, the character-width table is either an array of integer values or an array of glyph-entry structures. The number of elements in the array is equal to: </P>
<P><BR></P>
<PRE>dfLastChar - dfFirstChar + 2
</PRE>
<P>That is, there is always one more element than the number of characters in the font. The extra entry is available for storing the size, in bytes, of the last character in a vector font. Although this extra entry applies only to vector fonts, it is present for all fonts. </P>
<P>For fixed-pitch vector fonts, the character-width table is an array of integer values. In this case, each element of the array is an offset (relative to the start of the segment that contains the <B>FONTINFO</B> structure) to the first byte or 16 bits of vector information for the given character. The number of bytes or words for a particular character is calculated by subtracting its character-width table entry from the entry for the next character. </P>
<P>For variable-pitch vector fonts, the character width table is an array of <B>VECTORGLYPHENTRY</B> structures. The <B>VECTORGLYPHENTRY</B> structure has the following form: </P>
<P><BR></P>
<PRE>typedef struct tagVECTORGLYPHENTRY {
    short vgeOffset;  // offset to vectors relative to segment start
    short vgeWidth;   // width of character in pixels 
} VECTORGLYPHENTRY;
</PRE>
<P>The <B>vgeOffset</B> member specifies the offset (relative to the start of the segment that contains the <B>FONTINFO</B> structure) to the first byte or 16 bits of vector information for the given character. The <B>vgeWidth</B> member specifies the width for the character. </P>
<P>For raster fonts, the character-width table is an array of <B>RASTERGLYPHENTRY</B> structures. </P>
<P>The <B>rgeWidth</B> member specifies the width, in pixels, of the bitmap for the given character. The member also specifies the advance width for the given character. The <B>rgeOffset</B> member specifies the offset (relative to the start of the segment that contains the <B>FONTINFO</B> structure) to the first byte of bitmap information for the character. </P>
<P>Windows 2.<I>x</I> fonts cannot exceed 64K. Windows 3.x Fonts </P>
<P>Windows 3.<I>x</I> fonts are primarily designed for use on systems with sufficient memory and a microprocessor (such as an 80386) that has instructions using 32-bit address offsets. </P>
<P>For Windows 3.<I>x</I> fonts, the format of the character-width table is dependent on the value of the <B>dfFlags</B> member. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>DFF_FIXED </P></TD><TD VALIGN="TOP"><P>Array of <B>RASTERGLYPHENTRY</B> structures. </P></TD></TR><TR><TD VALIGN="TOP"><P>DFF_PROPORTIONAL </P></TD><TD VALIGN="TOP"><P>Array of <B>RASTERGLYPHENTRY</B> structures. </P></TD></TR><TR><TD VALIGN="TOP"><P>DFF_ABCFIXED </P></TD><TD VALIGN="TOP"><P>Array of <B>ABCGLYPHENTRY</B> structures. </P></TD></TR><TR><TD VALIGN="TOP"><P>DFF_ABCPROPORTIONAL </P></TD><TD VALIGN="TOP"><P>Array of <B>ABCGLYPHENTRY</B> structures. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Windows presently supports only the DFF_FIXED and DFF_PROPORTIONAL values. </P>
<P>The <B>rgeWidth</B> member of the <B>VECTORGLYPHENTRY</B> structure specifies the width, in pixels, of the bitmap for the given character. The member also specifies the width for the character. The <B>rgeOffset</B> member specifies the offset (relative to the start of the segment that contains the <B>FONTINFO</B> structure) to the first byte of bitmap information for the character. </P>
<P>The <B>ABCGLYPHENTRY</B> structure has the following form: </P>
<P><BR></P>
<PRE>typedef struct tagABCGLYPHENTRY {
    short ageWidth;   // width of character bitmap, in pixels
    long  ageOffset;  // pointer to the bits
    FIXED ageAspace;  // A space, in fractional pixels (16.16)
    FIXED ageBspace;  // B space, in fractional pixels (16.16)
    FIXED ageCspace;  // C space, in fractional pixels (16.16)
} ABCGLYPHENTRY;
</PRE>
<P>The <B>ageWidth</B> member specifies the width, in pixels, of the bitmap for the given character. The <B>ageOffset</B> member specifies the offset (relative to the start of the segment that contains the <B>FONTINFO</B> structure) to the first byte of bitmap information for the character. The sum of the <B>ageAspace</B>, <B>ageBspace</B>, and <B>ageCspace</B> members specify the width of the character. </P>
<P>Windows 3.<I>x</I> fonts can exceed 64K. </P>
<P>See also <B>GDIINFO</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

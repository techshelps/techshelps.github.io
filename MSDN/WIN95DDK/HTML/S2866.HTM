<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIB_ExtTextOut</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>DIB_ExtTextOut </H3><P><BR></P>
<PRE>DWORD DIB_ExtTextOut(LPPDEVICE lpDestDev, WORD wDestXOrg, 
    WORD wDestYOrg, LPRECT lpClipRect, LPSZ lpString, int wCount, 
    LPFONTINFO lpFontInfo, LPDRAWMODE lpDrawMode, 
    LPTEXTXFORM lpTextXForm, LPSHORT lpCharWidths, 
    LPRECT lpOpaqueRect, WORD wOptions);
</PRE>
<P>Writes text strings by converting characters in a given string into raster, vector, or outline glyphs and copying the glyphs to the given device or bitmap. Depending on the value of its parameters, <B>DIB_ExtTextOut</B> also computes the x- and y-extents of the bounding rectangle of the displayed string, clips the text to fit a given clipping rectangle, fills a given rectangle with the specified background color before copying glyphs, and overrides the default spacing of the glyphs using values specified in an array of character widths. </P>
<UL><LI>     Returns any of the following values: </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>x<I>-</I> and y<I>-</I>extents of string's bounding rectangle </P></TD><TD VALIGN="TOP"><P><I>wCount</I> was negative and the function succeeded. The x-extent is in the low-order 16 bits and the y-extent is in the high-order 16 bits. </P></TD></TR><TR><TD VALIGN="TOP"><P>x-extent is 0x7FFF and y-extent is <I>wDestXOrg</I> </P></TD><TD VALIGN="TOP"><P><I>wCount</I> was negative; the function failed because the x-extent was too large. </P></TD></TR><TR><TD VALIGN="TOP"><P>TRUE </P></TD><TD VALIGN="TOP"><P><I>wCount </I>was zero and the specified rectangle was filled with the background color. </P></TD></TR><TR><TD VALIGN="TOP"><P>TRUE </P></TD><TD VALIGN="TOP"><P><I>wCount </I>was positive and the text was output successfully. </P></TD></TR><TR><TD VALIGN="TOP"><P>0x80000000L </P></TD><TD VALIGN="TOP"><P>An error occurred; no output was generated. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><I>lpDestDev</I> </P>
<P>Address of a <B>PDEVICE</B> or <B>PBITMAP</B> structure specifying the device or bitmap to receive the text output. </P>
<P><I>wDestXOrg</I> and <I>wDestYOrg</I> </P>
<P>The x- and y-coordinates (in device units) of the starting point for the string. </P>
<P><I>lpClipRect</I> </P>
<P>Address of a <B>RECT</B> structure specifying the clipping rectangle. </P>
<P><I>lpString</I> </P>
<P>Address of a null-terminated string specifying the characters to display. </P>
<P><I>wCount</I> </P>
<P>Specifies which action to carry out. It can be one of the following values. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Negative </P></TD><TD VALIGN="TOP"><P>Compute the x- and y-extents of the smallest rectangle that completely encloses the displayed string, but do not generate output. In this case, the absolute value of <I>wCount</I> specifies the number of characters in the string. The function uses the current font, text justification, and other factors to compute the bounding rectangle, but does not apply the clipping rectangle. The function must update the <B>BreakErr</B> member of the <B>DRAWMODE</B> structure specified by the <I>lpDrawMode</I> parameter. </P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>Fill the rectangle specified by <I>lpOpaqueRect</I> but only if <I>wOptions</I> is ETO_OPAQUE. In this case, the function does not generate text output. </P></TD></TR><TR><TD VALIGN="TOP"><P>Positive </P></TD><TD VALIGN="TOP"><P>Draw the characters in the string. <I>wCount</I> specifies the number of characters to draw. The function uses the current font, text justification, escapement, rotation, and other factors to draw the characters, and it applies the clipping and opaque rectangles if specified. If the function modifies the <B>BreakErr</B> member of the <B>DRAWMODE</B> structure specified by the <I>lpDrawMode</I> parameter, it must restore the member to its original value. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>lpFontInfo</I> </P>
<P>Address of a <B>FONTINFO</B> structure specifying the physical font to use. </P>
<P><I>lpDrawMode</I> </P>
<P>Address of a <B>DRAWMODE</B> structure specifying the current text color, background mode, background color, text justification, and character spacing. </P>
<P><I>lpTextXForm</I> </P>
<P>Address of a <B>TEXTXFORM</B> structure specifying additional information about the appearance of the characters when drawn. </P>
<P><I>lpCharWidths</I> </P>
<P>Address of an array of character widths. If this parameter is not NULL, each element in the array is the advance width (in device units) of the corresponding character in the string. The function uses these widths (instead of the default character widths) to compute the position of the next character in the string. There must be one advance width for each character in the string. </P>
<P><I>lpOpaqueRect</I> </P>
<P>Address of a <B>RECT</B> structure specifying the opaquing rectangle. This parameter can be NULL. </P>
<P><I>wOptions</I> </P>
<P>Action to carry out. It can be a combination of the following values. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>ETO_OPAQUE (2) </P></TD><TD VALIGN="TOP"><P>Fills the rectangle specified by the <I>lpOpaqueRect</I> parameter (and clipped to the <I>lpClipRect</I> parameter) with the background color specified by the <I>lpDrawMode</I> parameter. The function fills the rectangle regardless of the whether <I>lpDrawMode</I> specifies opaque or transparent background mode. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_CLIPPED (4) </P></TD><TD VALIGN="TOP"><P>Creates a new clipping rectangle by intersecting the rectangles specified by <I>lpOpaqueRect</I> and <I>lpClipRect</I>. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_GLYPH_INDEX </P></TD><TD VALIGN="TOP"><P>For fonts in the format defined by the <B>FONTINFO</B> structure, if this flag is set, <I>lpString</I> points to a word array of glyph indexes into the character offset table. For fonts in the format defined by the <B>FONTINFO</B> structure, if this flag is clear, <I>lpString</I> points to a byte array and the index to the glyph in the character offset table must be computed by subtracting the index of the first character in the table. For fonts in the format defined by the <B>NewFontSeg</B> structure, if this flag is set, <I>lpString</I> points to a word array of glyph indexes into the character offset table. For fonts in the format defined by the <B>NewFontSeg</B> structure, if this flag is clear, <I>lpString</I> points to a byte array of glyph indexes into the character offset table. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_BYTE_PACKED </P></TD><TD VALIGN="TOP"><P>Indicates the font is in the format defined by the <B>NewFontSeg</B> structure. The glyphs are byte-packed, meaning they are stored in rows where each row is padded out to a byte boundary. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_BIT_PACKED </P></TD><TD VALIGN="TOP"><P>Indicates the font is in the format defined by the <B>NewFontSeg</B> structure. The glyphs are bit-packed, meaning they are stored in rows with no padding. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_LEVEL_MODE </P></TD><TD VALIGN="TOP"><P>Indicates that the background mode specified in <I>lpDrawMode -&gt;bkMode </I>is set to one of the blending levels used for anti-aliasing and is neither transparent or opaque. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The export ordinal for this function is 14. </P>
<P>See also <B>DIB_ExtTextOutExt</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEVICE_INFO</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>DEVICE_INFO </H3><P><BR></P>
<PRE>typedef struct {
    UINT cbSize;
    struct _DEVICE_INFO FAR *lpNextDi;
    char szDescription[LINE_LEN];
    DWORD dnDevnode;
    HKEY hRegKey;
    char szRegSubkey[MAX_DEVNODE_ID_LEN];
    char szClassName[MAX_CLASS_NAME_LEN];
    DWORD Flags;
    HWND hwndParent;
    LPDRIVER_NODE lpCompatDrvList;
    LPDRIVER_NODE lpClassDrvList;
    LPDRIVER_NODE lpSelectedDriver;
    ATOM atDriverPath;
    ATOM atTempInfFile;
    HINSTANCE hinstClassInstaller;
    HINSTANCE hinstClassPropProvidor;
    HINSTANCE hinstDevicePropProvidor;
    HINSTANCE hinstBasicPropProvidor;
    FARPROC fpClassInstaller;
    FARPROC fpClassEnumPropPages;
    FARPROC fpDeviceEnumPropPages;
    FARPROC fpEnumBasicProperties;
    DWORD dwSetupReserved;
    DWORD dwClassInstallReserved;
    GENCALLBACKPROC gicpGenInstallCallBack;
    LPARAM gicplParam;
    UINT InfType;
    HINSTANCE hinstPrivateProblemHandler;
    FARPROC fpPrivateProblemHandler;
    LPARAM lpClassInstallParams;
    struct _DEVICE_INFO FAR *lpdiChildList;
    DWORD dwFlagsEx;
    LPDRIVER_INFO lpCompatDrvInfoList;
    LPDRIVER_INFO lpClassDrvInfoList;
} DEVICE_INFO;
</PRE>
<P>This is the basic data structure for most Device installation APIs. A DEVICE_INFO represents a device that is being installed on the system, or an installed device that is being modified in some way. </P>
<P><B>cbSize</B> </P>
<P>Size of the DEVICE_INFO struct. </P>
<P><B>*lpNextDi</B> </P>
<P>Pointer to the next DEVICE_INFO struct in a linked list. </P>
<P><B>szDescription[LINE_LEN]</B> </P>
<P>Buffer containing the description of the device. </P>
<P><B>dnDevnode</B> </P>
<P>If set, this contains the address of the DevNode associated with the device. </P>
<P><B>hRegKey</B> </P>
<P>An opened registry key that contains the device's registry subkey. This is usually HKEY_LOCAL_MACHINE. </P>
<P><B>szRegSubkey[MAX_DEVNODE_ID_LEN]</B> </P>
<P>Buffer containing the device's hardware registry subkey. This is key is rooted in hRegKey, and is ususally some place in the \ENUM branch. </P>
<P><B>szClassName[MAX_CLASS_NAME_LEN]</B> </P>
<P>Buffer containing the device's class name. </P>
<P><B>Flags</B> </P>
<P>Flags for controlling installation and U/I functions. Some flags can be set prior to calling device installer APIs, and other are set automatically during the processing of some APIs. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>DI_SHOWOEM </P></TD><TD VALIGN="TOP"><P>Set if OEM disk support should be allowed </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_SHOWCOMPAT </P></TD><TD VALIGN="TOP"><P>Will be set if only a compatible driver list is being displayed by DiSelectDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_SHOWCLASS </P></TD><TD VALIGN="TOP"><P>Will be set if only a Class driver list is is being displayed by DiSelectDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_SHOWALL </P></TD><TD VALIGN="TOP"><P>Will be set if both a compatible driver list and a class driver list are being shown by DiSelectDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NOVCP </P></TD><TD VALIGN="TOP"><P>Set if no VCP (Virtual Copy Procedure) is desired during DiInstallDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_DIDCOMPAT </P></TD><TD VALIGN="TOP"><P>Will be set if DiBuildCompatDrvList has been done, and lpCompatDrvList points to this device's compatible driver list. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_DIDCLASS </P></TD><TD VALIGN="TOP"><P>Will be set if DiBuildClassDrvList has been done, and lpClassDrvList points to this device's class driver list. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_AUTOASSIGNRES </P></TD><TD VALIGN="TOP"><P>Unused. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NEEDRESTART </P></TD><TD VALIGN="TOP"><P>Will be set if the device requires a restart of Windows after installation or a state change. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NEEDREBOOT </P></TD><TD VALIGN="TOP"><P>Will be set if the device requires a reboot of the machine after installation or a state change. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NOBROWSE </P></TD><TD VALIGN="TOP"><P>Set to diable browsing when selecting an OEM disk path. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_MULTMFGS </P></TD><TD VALIGN="TOP"><P>Will be set if a class driver list, or class info list contains multiple manufactures. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_DISABLED </P></TD><TD VALIGN="TOP"><P>Unused. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_GENERALPAGE_ADDED </P></TD><TD VALIGN="TOP"><P>Set by a property page provider if a general properties page has been added to the device's property sheet. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_RESOURCEPAGE_ADDED </P></TD><TD VALIGN="TOP"><P>Set by a property page provider if a resource properties page has been added to the device's property sheet. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_PROPERTIES_CHANGE </P></TD><TD VALIGN="TOP"><P>Set if a device's properties have been changed and require an update of the Device Manager's U/I. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_INF_IS_SORTED </P></TD><TD VALIGN="TOP"><P>Set if the INF containing drivers for this device is in sorted order. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_ENUMSINGLEINF </P></TD><TD VALIGN="TOP"><P>Set if DiBuildCompatDrvList and DiBuildlassDrvList should only search the INF file specificed by atDriverPath. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_DONOTCALLCONFIGMG </P></TD><TD VALIGN="TOP"><P>Set if the configuration manager should not be called during DiInstallDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_INSTALLDISABLED </P></TD><TD VALIGN="TOP"><P>Set if the device should be installed in a disabled state by default. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_CLASSONLY </P></TD><TD VALIGN="TOP"><P>Set if this DEVICE_INFO struct contains only a class name. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_CLASSINSTALLPARAMS </P></TD><TD VALIGN="TOP"><P>Set if the lpClassIntallParams field points to a class install parameter block. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NODI_DEFAULTACTION </P></TD><TD VALIGN="TOP"><P>Set if DiCallClassInstaller should not perform any default action if the class installer return ERR_DI_DO_DEFAULT, or there is not class installer. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_QUIETINSTALL </P></TD><TD VALIGN="TOP"><P>Set if device install API should be as silent as possible using default choices whereever possible. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NOFILECOPY </P></TD><TD VALIGN="TOP"><P>Set if DiInstallDevice should skip file copying. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FORCECOPY </P></TD><TD VALIGN="TOP"><P>Set if DiInstallDevice should always copy file, even if they are present on the system. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_DRIVERPAGE_ADDED </P></TD><TD VALIGN="TOP"><P>Set by a property page provider if a driver properties page has been added to the device's property sheet. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_USECI_SELECTSTRINGS </P></TD><TD VALIGN="TOP"><P>Set if class installer provided strings should be used during DiSelectDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_OVERRIDE_INFFLAGS </P></TD><TD VALIGN="TOP"><P>Unused. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_PROPS_NOCHANGEUSAGE </P></TD><TD VALIGN="TOP"><P>Set if there should be no Enable/Disable capability on the device's general property page. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NOSELECTICONS </P></TD><TD VALIGN="TOP"><P>Set if no small icons should be used during DiSelectDevice. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_NOWRITE_IDS </P></TD><TD VALIGN="TOP"><P>Set if DiInstallDevice should not write the device's hardware and compatible IDs to the registry. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>hwndParent</B> </P>
<P>Window handle that will own U/I dialogs related to this device. </P>
<P><B>lpCompatDrvList</B> </P>
<P>Pointer to a linked list of DRIVER_NODES representing the compatible drivers for this device. </P>
<P><B>lpClassDrvList</B> </P>
<P>Pointer to a linked list of DRIVER_NODES representing all drivers of this device's class. </P>
<P><B>lpSelectedDriver</B> </P>
<P>Pointer to a single DRIVER_NODE that has been selected as the driver for this device. </P>
<P><B>atDriverPath</B> </P>
<P>Global ATOM containing the path to this device's INF file. This is set only of the driver came from an OEM INF file. This will be 0 if the INF is a standard Windows INF file. </P>
<P><B>atTempInfFile</B> </P>
<P>Global ATOM containing the name of a temporary INF file for this device's drivers. This is set if the drivers came from an old style INF file and have been converted. </P>
<P><B>hinstClassInstaller</B> </P>
<P>Class installer module instance. </P>
<P><B>hinstClassPropProvidor</B> </P>
<P>Class Property Providor module instance. </P>
<P><B>hinstDevicePropProvidor</B> </P>
<P>Device Property Providor module instance. </P>
<P><B>hinstBasicPropProvidor</B> </P>
<P>Basic Property Providor module instance. </P>
<P><B>fpClassInstaller</B> </P>
<P>Procedure address of class install function. </P>
<P><B>fpClassEnumPropPages</B> </P>
<P>Procedure address of the Class property provider page enumeration function. </P>
<P><B>fpDeviceEnumPropPages</B> </P>
<P>Procedure address of the Device property provider page enumeration function. </P>
<P><B>fpEnumBasicProperties</B> </P>
<P>Procedure address of the Basic device property provider page enumeration function. </P>
<P><B>dwSetupReserved</B> </P>
<P>Reserved for use by Setup. </P>
<P><B>dwClassInstallReserved</B> </P>
<P>Reserved for use by Class Installers. </P>
<P><B>gicpGenInstallCallBack</B> </P>
<P>Procedure address of a GenInstall call back function. This would be set if the class installer wanted to handle GenInstall callbacks during DiInstallDevice. </P>
<P><B>gicplParam</B> </P>
<P>lParam for the GenInstall Callback. </P>
<P><B>InfType</B> </P>
<P>The type of INF file being used. This will be INFTYPE_TEXT or INFTYPE_EXECUTABLE. </P>
<P><B>hinstPrivateProblemHandler</B> </P>
<P>Module handle for the device's private problem procedure. </P>
<P><B>fpPrivateProblemHandler</B> </P>
<P>Procedure address of the device's private problem handler. </P>
<P><B>lpClassInstallParams</B> </P>
<P>Pointer to a class install parameter block. Class installer parameters are specific to the class install functions. </P>
<P><B>*lpdiChildList</B> </P>
<P>Pointer to a linked list of DRIVER_INFO structs representing children of this device. </P>
<P><B>dwFlagsEx</B> </P>
<P>Additional control flags. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_USEOLDINFSEARCH </P></TD><TD VALIGN="TOP"><P>Set if INF Search functions should not use indexed searching. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_AUTOSELECTRANK0 </P></TD><TD VALIGN="TOP"><P>Set if DiSelectDevice should automatically select rank 0 match drivers. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_CI_FAILED </P></TD><TD VALIGN="TOP"><P>Will be set internally if there was a failure to load or call a class installer. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_FILTERCLASSES </P></TD><TD VALIGN="TOP"><P>If set, DiBuildClassDrvList will check for Class inclusion filters. This means devices will not be included in the list, if their class is marked as a NoInstallClass class. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_SETFAILEDINSTALL </P></TD><TD VALIGN="TOP"><P>If set, then if DiInstallDevice installs a NULL driver, it will also set the FAILEDINSTALL config flag </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_DEVICECHANGE </P></TD><TD VALIGN="TOP"><P>If set, the device manager will rebuild its tree of devices after the device property sheet is closed. </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_ALWAYSWRITEIDS </P></TD><TD VALIGN="TOP"><P>If set, and the flag, DI_NOWRITE_ID is clear (i.e., that flag takes higher precedence) then always write Hardware and Compat ids, even if they already exist </P></TD></TR><TR><TD VALIGN="TOP"><P>DI_FLAGSEX_ALLOWEXCLUDEDDRVS </P></TD><TD VALIGN="TOP"><P>If set, DiSelectDevice will display drivers that have the Exlude From Select state </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>lpCompatDrvInfoList</B> </P>
<P>Pointer to a linked list of DRIVER_INFO structs that are compatible with this device. </P>
<P><B>lpClassDrvInfoList</B> </P>
<P>Pointer to a linked list of DRIVER_INFO structs representing all drivers for this device's class. </P>
<P></P>
<P></P></FONT></BODY></HTML>

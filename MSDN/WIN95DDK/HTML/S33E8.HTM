<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Begin_Control_Dispatch</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Begin_Control_Dispatch </H3><P><BR></P>
<PRE>include vmm.inc

Begin_Control_Dispatch DeviceName
</PRE>
<P>Builds a table for dispatching messages passed to the control procedure for the specified virtual device. This macro is used in conjunction with the <B>Control_Dispatch</B> and <B>End_Control_Dispatch</B> macros. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>DeviceName</I> </P>
<P>Name of the virtual device. The macro uses this parameter to construct the label for the control procedure (appends <B>_Control</B> to the end of this name). This control procedure label must also be specified in the <B>Declare_Virtual_Device</B> macro. </P>
<P>The <B>Control_Dispatch</B> macro can be used without <B>Begin_Control_Dispatch</B>, but then it the programmer's responsibility to declare a procedure in locked code (VxD_LOCKED_CODE_SEG), and clear the carry flag for any unprocessed messages. The advantage in using <B>Begin_Control_Dispatch</B> macro is when a large number of messages are processed by a device. The macro builds a jump table which usually requires less code than the sequence of compare and jump instructions that are generated when <B>Control_Dispatch</B> is used alone. </P>
<P>The following example builds a complete dispatch table for the virtual device named MyDevice: </P>
<P><BR></P>
<PRE>Begin_Control_Dispatch MyDevice
Control_Dispatch  Device_Init, MyDeviceInitProcedure
Control_Dispatch  Sys_VM_Init, MyDeviceSysInitProcedure
Control_Dispatch  Create_VM,   MyDeviceCreateVMProcedure
End_Control_Dispatch MyDevice
</PRE>
<P>An alternative method for writing the control procedure is as follows: </P>
<P><BR></P>
<PRE>BeginProc MyDevice_Control
Control_Dispatch  Device_Init, MyDeviceInitProcedure
Control_Dispatch  Sys_VM_Init, MyDeviceSysInitProcedure
Control_Dispatch  Create_VM,   MyDeviceCreateVMProcedure
clc                                              ; Don't forget
ret                                              ; these two lines!
EndProc MyDevice_Control
</PRE>
<P>If you use the CallType variant of the <B>Control_Dispatch</B> macro, you may not use the <B>Begin_Control_Dispatch</B> macro; you must use this alternative method. </P>
<P>See also <B>Control_Dispatch</B>, <B>Declare_Virtual_Device</B>, <B>End_Control_Dispatch</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Default Interrupt Handling</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Default Interrupt Handling </H3><P>The VPICD emulates the functions of the programmable interrupt controller (PIC). This entails reflecting interrupts into virtual machines and simulating I/O, such as recognizing when a virtual machine issues an end of interrupt (EOI). When VPICD initializes, it sets up a default interrupt handler for every interrupt request (IRQ). These handlers determine which virtual machine an interrupt should be reflected into, and they arbitrate conflicts between virtual machines that attempt to unmask the same interrupt. </P>
<P>An interrupt that is unmasked when Windows is started is considered a global interrupt. A global interrupt will always be reflected into the currently executing virtual machine, and any virtual machine can mask or unmask the IRQ. If a virtual machine unmasks an IRQ that was masked when Windows was started, it owns that IRQ. All interrupts for owned IRQs are reflected to the owner. If another virtual machine attempts to unmask the interrupt, the second virtual machine is terminated, and Windows may direct the user to restart the computer. </P>
<P>If another virtual device virtualizes an IRQ, it is up to that device to determine which virtual machines receive interrupts and arbitrate conflicts. Once an IRQ is virtualized, the VPICD no longer provides default handling for that IRQ. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NDI Object Registrations</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>NDI Object Registrations </H3><P>NETDI gets all of the driver-specific information for a driver or network component (referred to generically as NDI objects) either from the registry section for the driver or from a custom NDI installer procedure. The registry section for the object is initially populated based on the driver install section in the INF file. </P>
<H4><A NAME="sec0"></A>General Driver Information </H4>
<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>(null) </P></TD><TD VALIGN="TOP"><P>DriverDesc </P></TD><TD VALIGN="TOP"><P><I>driver description</I> </P></TD><TD VALIGN="TOP"><P>A string that describes the driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>(null) </P></TD><TD VALIGN="TOP"><P>DevLoader </P></TD><TD VALIGN="TOP"><P>*ndis </P></TD><TD VALIGN="TOP"><P>A VxD that is the device loader for this node. The driver should be "*ndis" unless your device has a different device loader. </P></TD></TR><TR><TD VALIGN="TOP"><P> (null) </P></TD><TD VALIGN="TOP"><P>DeviceVxD </P></TD><TD VALIGN="TOP"><P><I>driver list</I> </P></TD><TD VALIGN="TOP"><P>A comma-separated list of VxDs. The drivers are loaded in the order listed. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec1"></A>NDI Registration parameters </H4>
<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="100pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>DeviceID </P></TD><TD VALIGN="TOP"><P><I>device ID</I> </P></TD><TD VALIGN="TOP"><P>The device ID for this driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>NdiInstaller </P></TD><TD VALIGN="TOP"><P><I>dllname</I>,<I>procname</I> </P></TD><TD VALIGN="TOP"><P>The custom NDI procedure for this driver. The dllname is required; the default procname is NdiInstaller if none is specified. Note, this DLL must be copied in the registration section rather than the install section. (See below) </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>InfFile </P></TD><TD VALIGN="TOP"><P><I>filename</I> </P></TD><TD VALIGN="TOP"><P>The <B>InfFile</B> value is maintained by NETDI and should not be specified in the INF file. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>InfSection </P></TD><TD VALIGN="TOP"><P><I>section name</I> </P></TD><TD VALIGN="TOP"><P>The <B>InfSection</B> value is maintained by NETDI and should not be specified in the INF file. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>InstallInf </P></TD><TD VALIGN="TOP"><P><I>list of INFs</I> </P></TD><TD VALIGN="TOP"><P>The list of INF files to add to the INF database when this component is selected. These INFs must be copied in the registration section. See Referring to other INFs below. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If your component requires a custom NDI procedure DLL, this DLL must be copied before any of the other files are copied. This allows the DLL to display any custom UI before the user clicks the OK button in the Network Control Panel to cause NETDI to save the configuration. Furthermore, INF files that are not included with Windows 95 should copy themselves to the hard disk. To do this, copy the DLL and INFs by using a CopyFiles command in your registration section, as shown in the following example: </P>
<P><BR></P>
<PRE>[MYDEVICE.ndi]
AddReg=MYDEVICE.ndi.addreg
CopyFiles=MYDEVICE.ndi.copyfiles,MYDEVICE.inf.copyfiles

[MYDEVICE.ndi.addreg]
HKR,Ndi,DeviceID,,MYDEVICE
HKR,Ndi,Installer,,"MyNDI.DLL,MyNDIProc"
; ...other registration info...
HKR,Ndi\Install,,,"MYDEVICE.Install"
[MYDEVICE.ndi.copyfiles]
MyNDI.DLL
[MYDEVICE.inf.copyfiles]
MyNDI.INF

[MYDEVICE.Install]
AddReg=MYDEVICE.Install.addreg
CopyFiles=MYDEVICE.Install.copyfiles

[MYDEVICE.Install.addreg]
; Registry keys needed to start this component
[MYDEVICE.Install.copyfiles]

[DestinationDirs]
MYDEVICE.ndi.copyfiles = 11 ; System directory
MYDEVICE.inf.coypfiles = 17 ; INF directory
</PRE>
<H4><A NAME="sec2"></A>Files needed by component.PCMCIA and Plug and Play drivers </H4><P>Any network card that has a hardware enumerator (PCMCIA, EISA, PCI, ISAPNP, and so on) must have a special parameter set in the registration section to indicate that the card is a PnP card. The registration section for these cards should have a <B>CardType</B> parameter to indicate what the type of the card is: </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>CardType </P></TD><TD VALIGN="TOP"><P><I>cardtype</I> </P></TD><TD VALIGN="TOP"><P>The type of the card: </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>PCMCIA - for PCMCIA cards </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>PNP - for PnP cards (as defined above) </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>LEGACY - for other cards (default) </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Note: Cardtype=PCMCIA implies PNP. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec3"></A>Install section parameters </H4><P>Statically loaded VxDs must also be stored in the <B>HKLM\System\CurrentControlSet\Services\VxD\</B><I>VXDNAME</I> key, where <I>VXDNAME</I> is the name of the driver (usually the base name of the VxD file). Under this key, the following value must be set: </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>(null) </P></TD><TD VALIGN="TOP"><P>StaticVxD </P></TD><TD VALIGN="TOP"><P>/<I>driver list</I>/ </P></TD><TD VALIGN="TOP"><P>A comma-separated list of VxDs that are loaded statically by the Configuration Manager. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec4"></A>Help text </H4><P>The Network Control Panel has an area on the bottom of the Configuration tab used to give the user a description of the selected object. By default, when the user selects an object, the help area simply displays a description of the class of the selected device. You can override this default and have the Network Control Panel display text specific to your device when the user selects it. This text is specified in the HelpText parameter: </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi </P></TD><TD VALIGN="TOP"><P>HelpText </P></TD><TD VALIGN="TOP"><P><I>text to appear</I> </P></TD><TD VALIGN="TOP"><P>This specifies the string to appear in the help text box when the user selects this device. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>This help text should be written to describe how the selected object benefits the user (such as, what can the user do with the object). For example, the help text for a client should not just say what the client is, but what it allows the user to connect to. </P>
<H4><A NAME="sec5"></A>Driver Interface Rules </H4><P>NETDI uses upper and lower interfaces to describe the possible relations between the layered drivers in the network system. The lower interface is the software or hardware interface that the driver talks to. For example, a network adapter driver might talk to "ethernet" or "tokenring." The upper interface is the software interface that the driver provides. For example, an NDIS 3.1 network adapter driver provides "ndis3" as an upper interface; an NDIS 3.1 transport driver has "ndis3" as a lower interface and might provide "netbios" or "ipx" as its upper interface. </P>
<P>The following interface names are predefined to cover the most common interfaces; however, any string of alphanumeric characters is a legal interface name. This allows you to create private interfaces between components. When defining your own interface, include the manufacturer name in the interface name to avoid conflicts with other vendors. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>ethernet</I> </P></TD><TD VALIGN="TOP"><P>lower edge for an ethernet network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>tokenring</I> </P></TD><TD VALIGN="TOP"><P>lower edge for a token ring network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>serial</I> </P></TD><TD VALIGN="TOP"><P>lower edge for a serial network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>fddi</I> </P></TD><TD VALIGN="TOP"><P>lower edge for an FDDI network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>baseband</I> </P></TD><TD VALIGN="TOP"><P>lower edge for a baseband network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>broadband</I> </P>
<P></P></TD><TD VALIGN="TOP"><P>lower edge for a broadband network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>arcnet</I> </P></TD><TD VALIGN="TOP"><P>lower edge for an ARCNET network adapter </P></TD></TR><TR><TD VALIGN="TOP"><P><I>odi</I> </P></TD><TD VALIGN="TOP"><P>ODI </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ndis2</I> </P></TD><TD VALIGN="TOP"><P>NDIS 2.1 </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ndis3</I> </P></TD><TD VALIGN="TOP"><P>NDIS 3.X </P></TD></TR><TR><TD VALIGN="TOP"><P><I>netbios</I> </P></TD><TD VALIGN="TOP"><P>NetBIOS </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ipx</I> </P></TD><TD VALIGN="TOP"><P>IPX </P></TD></TR><TR><TD VALIGN="TOP"><P>tdi </P></TD><TD VALIGN="TOP"><P>TDI interface to TCP/IP </P></TD></TR><TR><TD VALIGN="TOP"><P><I>winsock</I> </P></TD><TD VALIGN="TOP"><P>the Windows Sockets interface </P></TD></TR><TR><TD VALIGN="TOP"><P><I>winnet31</I> </P></TD><TD VALIGN="TOP"><P>upper edge for a Windows 3.1 compatible WinNet driver </P></TD></TR><TR><TD VALIGN="TOP"><P><I>multinet31 </I></P></TD><TD VALIGN="TOP"><P>upper edge for a Windows for Workgroups multi-network compatible WinNet driver </P></TD></TR><TR><TD VALIGN="TOP"><P><I>winnet4</I> </P></TD><TD VALIGN="TOP"><P>upper edge for a Window 4.0 network provider </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>NETDI matches the upper and lower interfaces of drivers to validate bindings between drivers. In addition, NETDI also checks for other required or excluded interfaces down the chain of bound driver and in the entire network subsystem. If an object has a lower edge that does not match the upper edge of any of the installed components, NETDI will attempt to install a component that does match the interface. For example, the Client for Windows Networks has a lower edge of NetBIOS. If the user tries to install this client without a NetBIOS protocol, NETDI will automatically install a protocol to match the required interface. In this case it would install NetBEUI. </P>
<P>The following list shows the registry entries for specifying interfaces requirements for a network driver. An <I>interface list</I> is a comma-separated list of interface names, for example, "ndis2, ndis3, odi". </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Interfaces </P></TD><TD VALIGN="TOP"><P>DefUpper </P></TD><TD VALIGN="TOP"><P><I>interface list</I> </P></TD><TD VALIGN="TOP"><P>These are the currently available upper interfaces. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Interfaces </P></TD><TD VALIGN="TOP"><P>DefLower </P></TD><TD VALIGN="TOP"><P><I>interface list</I> </P></TD><TD VALIGN="TOP"><P>These are the currently available lower interfaces. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Interfaces </P></TD><TD VALIGN="TOP"><P>UpperRange </P></TD><TD VALIGN="TOP"><P><I>interface list</I> </P></TD><TD VALIGN="TOP"><P>These are all possible upper interfaces. This value is maintained by NETDI and should not be set in an INF file. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Interfaces </P></TD><TD VALIGN="TOP"><P>LowerRange </P></TD><TD VALIGN="TOP"><P><I>interface list</I> </P></TD><TD VALIGN="TOP"><P>These are all possible lower interfaces. This value is maintained by NETDI and should not be set in an INF file. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Interfaces </P></TD><TD VALIGN="TOP"><P>RequireAny </P></TD><TD VALIGN="TOP"><P><I>interface list</I> </P></TD><TD VALIGN="TOP"><P>The driver requires that any driver in the system supports this interface. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Interfaces </P></TD><TD VALIGN="TOP"><P>ExcludeAny </P></TD><TD VALIGN="TOP"><P><I>interface list</I> </P></TD><TD VALIGN="TOP"><P>The driver requires that no driver in the system supports this interface. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The current upper and lower interfaces are queried in an NDI procedure by sending the appropriate NDI_GET_UPPER_INTERFACES and NDI_GET_LOWER_INTERFACES messages. The default NDI procedure reads the interface list from the registry. A custom NDI procedure can therefore enable or disable interfaces by returning a different interface list. </P>
<H4><A NAME="sec6"></A>Device Compatibility Rules </H4><P>A driver can specify compatibility or incompatibility with other drivers in the system by specifying lists of device IDs. These can specify required or excluded devices. The following list shows the registry entries for specifying compatibility with other devices. A <I>device</I> is a Plug and Play device ID; a <I>device list</I> is a comma-separated list of device IDs. (Note that for non-hardware devices, the Plug and Play device ID is either the NDIS logical driver name or the base file name of the VxD or driver.) </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Compatibility </P></TD><TD VALIGN="TOP"><P>RequireAll </P></TD><TD VALIGN="TOP"><P><I>device list</I> </P></TD><TD VALIGN="TOP"><P>All of the devices in <I>device list</I> must be present in the network system. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Compatibility </P></TD><TD VALIGN="TOP"><P>RequireAny </P></TD><TD VALIGN="TOP"><P><I>device list</I> </P></TD><TD VALIGN="TOP"><P>At least one of the devices in <I>device list</I> must be present in the network system. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Compatibility </P></TD><TD VALIGN="TOP"><P>ExcludeAll </P></TD><TD VALIGN="TOP"><P><I>device list</I> </P></TD><TD VALIGN="TOP"><P>None of the device in <I>device list</I> can be present in the network system. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec7"></A>Referring to other INFs </H4><P>Using the Ndi\Compatibility keys described above, it is possible for an INF to install other devices. These devices may be described in other INFs. To accomplish this, an INF must do the following: </P>
<UL><LI>     Copy any other INFs that have devices that are referenced. This must be done in the registration section of the INF. (Note: all INFs must be distributed in the same directory) </LI><LI>     Add the InstallInf key to the registry to have the other INFs added to the INF database. </LI></UL><P></P>
<P>For example, if MYDEVICE in Myndi.inf required OTHERDEVICE in Other.inf, MYNDI should look like the following: </P>
<P><BR></P>
<PRE>[MYDEVICE.ndi]
AddReg=MYDEVICE.ndi.addreg
CopyFiles=MYDEVICE.ndi.copyfiles,MYDEVICE.inf.copyfiles

[MYDEVICE.ndi.addreg]
HKR,Ndi,DeviceID,,MYDEVICE
HKR,Ndi,InstallInf,,"OTHER.INF"
; ...other registration info...
HKR,Ndi\Install,,,"MYDEVICE.Install"
[MYDEVICE.inf.copyfiles]
MyNDI.INF
OTHER.INF

[MYDEVICE.Install]
AddReg=MYDEVICE.Install.addreg
CopyFiles=MYDEVICE.Install.copyfiles

[MYDEVICE.Install.addreg]
; Registry keys needed to start this component
[MYDEVICE.Install.copyfiles]

[DestinationDirs]
MYDEVICE.inf.copyfiles = 17 ; INF directory
</PRE>
<H4><A NAME="sec8"></A>Install and Remove Information </H4><P>When the driver is actually to be installed or removed, NETDI uses this information to tell which sections from the drivers INF files to execute. The install and remove entries can specify a base section that gets executed unconditionally whenever the driver is added or removed. The unconditional entries use the NULL value name. In addition, one can also specify interface-specific install and remove sections so only files or registrations that are a needed for the given upper interface are installed. </P>
<P>When installing, NETDI executes the base (null) section first, and then any interface-specific sections. When removing, NETDI executes interface-specific sections first and executes the base (null) section last. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Install </P></TD><TD VALIGN="TOP"><P>(null) </P></TD><TD VALIGN="TOP"><P><I>section name</I> </P></TD><TD VALIGN="TOP"><P>Specifies the section name to execute for installing the driver. If this value exists, it is executed for all interfaces. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Install </P></TD><TD VALIGN="TOP"><P><I>interface name</I> </P></TD><TD VALIGN="TOP"><P><I>section name</I> </P></TD><TD VALIGN="TOP"><P>Specifies the section name to execute for installing the driver. It is only executed if <I>interface name</I> is among the current upper interfaces for the driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Remove </P></TD><TD VALIGN="TOP"><P>(null) </P></TD><TD VALIGN="TOP"><P><I>section name</I> </P></TD><TD VALIGN="TOP"><P>Specifies the section name to execute for removing the driver. If this value exists, it is executed for all interfaces. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Remove </P></TD><TD VALIGN="TOP"><P><I>interface name</I> </P></TD><TD VALIGN="TOP"><P><I>section name</I> </P></TD><TD VALIGN="TOP"><P>Specifies the section name to execute for installing the driver. It is only executed if <I>interface name</I> is among the current upper interfaces for the driver. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec9"></A>Hardware Resources </H4><P>For NDIS3 network adapter drivers, hardware resources for the card memory base address, base I/O address, DMA channel, and IRQ level are specified by a Logical Configuration entry in the INF file. These Logical Configuration entries are documented in the Windows 95 Device Information Files specification. </P>
<P>NDIS2 network adapter drivers store hardware resources in the parameters section (described below). The parameter key must be the same as the one used in Protocol.ini. </P>
<P>Note: On computers, IRQ2 and IRQ9 are really the same. For this reason PnP always refers to IRQ2 as IRQ9. If the network adapter driver requires that a 2 be passed to it for IRQ2, it must set the IRQ2 parameter flag (described in the next section). </P>
<H4><A NAME="sec10"></A>Driver Parameters </H4><P>You can specify any number of software parameters to be saved under the driver's registry key. For NDIS2 drivers, these are also saved in PROTOCOL.INI. The parameter descriptions are saved under the "Ndi\params" subkey; their current values are saved at the root of the driver key. For NDIS drivers, the NDIS wrapper can read these parameters from the root of the driver key and report them back to the driver. The user views and edits the parameters from the "Advanced" property sheet page provided by NETDI. Parameters can be numeric (<B>int</B><I>, </I><B>long</B><I>, </I><B>word</B><I>, </I><B>dword</B>), or text (<B>edit</B><I>, </I><B>enum</B><I>)</I>. For numeric types, you can specify the minimum, maximum and, optionally, the interval value. For the <B>enum</B> type, you must specify a list of values and descriptions. For the <B>edit</B> type, you can specify certain edit control options: maximum length, OEM-text compatibility, and upper case. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="57pt" VALIGN="TOP"><COL WIDTH="93pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>ParamDesc </P></TD><TD VALIGN="TOP"><P><I>string</I> </P></TD><TD VALIGN="TOP"><P>Specifies the parameter description that will be shown in the "Advanced" dialog. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>Type </P></TD><TD VALIGN="TOP"><P><I>type</I> </P></TD><TD VALIGN="TOP"><P>The parameter type. Can be: <B>int</B><I>, </I><B>long</B><I>, </I><B>word</B><I>, </I><B>dword</B><I>,</I> enum<I>, </I><B>edit</B><I>. </I>The type is <B>edit</B> if <I>type</I> is not specified. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>Default </P></TD><TD VALIGN="TOP"><P><I>default value</I> </P></TD><TD VALIGN="TOP"><P>Specifies the default value if no current value is specified. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>Optional </P></TD><TD VALIGN="TOP"><P><I>0</I>|<I>1</I> </P></TD><TD VALIGN="TOP"><P>Marks the parameter as optional. An optional parameter can have no current value. The user can mark it as "Not Present" in the "Advanced" dialog. If <B>Optional </B>is not specified, the user must use the default value or supply a value the parameter. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Range information for numeric types </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="108pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>Min </P></TD><TD VALIGN="TOP"><P><I>numeric value</I> </P></TD><TD VALIGN="TOP"><P>The minimum value. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>Max </P></TD><TD VALIGN="TOP"><P><I>numeric value</I> </P></TD><TD VALIGN="TOP"><P>The maximum value. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>Step </P></TD><TD VALIGN="TOP"><P><I>numeric value</I> </P></TD><TD VALIGN="TOP"><P>The step between valid value, based from the minimum value. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P><I>Base</I> </P></TD><TD VALIGN="TOP"><P><I>10</I>|<I>16</I> </P></TD><TD VALIGN="TOP"><P>Display and save values as decimal or hexadecimal. 10 if not specified. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Range information for enum types </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="108pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I>\Enum value </P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P><I>description</I> </P></TD><TD VALIGN="TOP"><P>A multiple value key. The value name is saved as the parameter value in the registry. The RHS value is shown to the user in dropdown listbox as the parameter value description. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Hardware resource parameters for NDIS2 network card drivers: </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="108pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>resc </P></TD><TD VALIGN="TOP"><P>BYTE:<I>1</I>-<I>4</I> </P></TD><TD VALIGN="TOP"><P>This binary value is required for all hardware resource parameters. It indicates what type of hardware resource the parameter represents: </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>1 - Memory address </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>2 - I/O Address </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>3 - DMA channel </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>4 - IRQ </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Use the following parameter to tell NETDI to store the parameter in some other location in the registry. Note, for this parameter, this will be the only value listed under Ndi\Params. The rest of the above parameters must be located in the desired registry key. (See the <B>sessions</B> parameter for NETBEUI listed in the example above.) </P>
<P>Storing parameters in an arbitrary registry location: </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="93pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>location </P></TD><TD VALIGN="TOP"><P><I>registry key</I> </P></TD><TD VALIGN="TOP"><P>This tells NETDI what arbitrary registry key to store the value of this parameter. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Parameter flags: </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="93pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Ndi\Params\<I>ParamKey</I> </P></TD><TD VALIGN="TOP"><P>flag </P></TD><TD VALIGN="TOP"><P>BYTE:<I>value</I> </P></TD><TD VALIGN="TOP"><P>This binary <B>DWORD</B> value specifies flags for the parameter. The <B>value</B> is created by bitwise ORing the desired flags: </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>0x10 - Used by NDIS2 only </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>0x20 - Used by NDIS3 only </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>0x40 - Card uses IRQ 2 </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>0x08 - Required parameter (UI will force the user to set this value). </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Note: This parameter is written in the INF file as a <B>DWORD</B> using Intel(r) byte ordering. For example, 0x30 would be written in the INF file as "30,00,00,00". </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec11"></A>Text file processing </H4><P>NETDI has the ability to search text files such as Autoexec.bat and Config.sys and insert or remove lines from them. It does this by using the following registry values in the registration section of your INF. The key name under the <B>Ndi</B> key is the name of the file to process. Each line to insert in this file is given a name (specified in the KeyOrder) value. For each line, you can insert or replace text in the file. Replacing a line with a null string effectively deletes the line. </P>
<P>NETDI executes these operations when it is committing changes to the disk. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="64pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\<I>filename</I>\Order </P></TD><TD VALIGN="TOP"><P>KeyOrder </P></TD><TD VALIGN="TOP"><P><I>list of line names</I> </P></TD><TD VALIGN="TOP"><P>This is a list of names (subkeys under Ndi\<I>filename</I>) to process and the order to process the lines in. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\<I>filename</I>\<I>name</I> </P></TD><TD VALIGN="TOP"><P>Line </P></TD><TD VALIGN="TOP"><P><I>line to insert</I> </P></TD><TD VALIGN="TOP"><P>This string is the line to insert according to the specified search rules. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\<I>filename</I>\<I>name</I> </P></TD><TD VALIGN="TOP"><P>Search </P></TD><TD VALIGN="TOP"><P><I>search pattern</I> </P></TD><TD VALIGN="TOP"><P>The pattern to search in the file. <B>Line</B> will be placed before or after this line (determined by <B>Position</B> below) For example, "*ndis*" searches for any line with "ndis" in it. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\<I>filename</I>\<I>name</I> </P></TD><TD VALIGN="TOP"><P>Replace </P></TD><TD VALIGN="TOP"><P><I>replace string</I> </P></TD><TD VALIGN="TOP"><P>Text to replace in the found line. For example, to replace "net start" with "net stop", set <B>Search</B> to "*net start*" and <B>Replace</B> to "*net stop*". </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\<I>filename</I>\<I>name</I> </P></TD><TD VALIGN="TOP"><P>Skip </P></TD><TD VALIGN="TOP"><P><I>search pattern</I> </P></TD><TD VALIGN="TOP"><P>Do not process lines that match this pattern. </P></TD></TR><TR><TD VALIGN="TOP"><P>Ndi\<I>filename</I>\<I>name</I> </P></TD><TD VALIGN="TOP"><P>Position </P></TD><TD VALIGN="TOP"><P><B>DWORD</B>:<I>position</I> </P></TD><TD VALIGN="TOP"><P>Where to place the string in <B>Line</B> relative to the line found by the <B>Search</B> parameter: </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>0 - insert at top of file or before the line </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>1 - insert at end of file or after the line </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec12"></A>NDIS 3 Driver Information </H4><P>The NDIS 3 wrapper uses this information to load and bind NDIS 3.<I>x</I> drivers. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="108pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS </P></TD><TD VALIGN="TOP"><P>LogDriverName </P></TD><TD VALIGN="TOP"><P><I>driver name</I> </P></TD><TD VALIGN="TOP"><P>The NDIS 3 driver's logical driver name. </P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS </P></TD><TD VALIGN="TOP"><P>MajorNdisVersion </P></TD><TD VALIGN="TOP"><P>BYTE:<I>major</I> </P></TD><TD VALIGN="TOP"><P>The NDIS major driver version. It is a byte HEX value: "03" for NDIS 3.X. (Not applicable for NDIS 2.X drivers.) </P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS </P></TD><TD VALIGN="TOP"><P>MinorNdisVersion </P></TD><TD VALIGN="TOP"><P>BYTE:<I>minor</I> </P></TD><TD VALIGN="TOP"><P>The NDIS driver version. It is a byte HEX value: "0A" for NDIS 3.1, "00" for NDIS 3.0. (Not applicable for NDIS 2 drivers.) </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec13"></A>NDIS 2 DriverInformation </H4><P>The device loader and NDIS 3 wrapper use this information to check if the real-mode NDIS 2 driver is in memory and to load the appropriate mapper if necessary. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS/NDIS2 </P></TD><TD VALIGN="TOP"><P>DriverName </P></TD><TD VALIGN="TOP"><P><I>driver name</I> </P></TD><TD VALIGN="TOP"><P>The NDIS 2 driver's base DriverName. </P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS/NDIS2 </P></TD><TD VALIGN="TOP"><P>AdapterName </P></TD><TD VALIGN="TOP"><P><I>adapter name</I> </P></TD><TD VALIGN="TOP"><P>The NDIS 2 actual adapter name and Protocol.ini section name. The AdapterName changes for multiple instances of the adapter. </P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS/NDIS2 </P></TD><TD VALIGN="TOP"><P>FileName </P></TD><TD VALIGN="TOP"><P><I>driver file name</I> </P></TD><TD VALIGN="TOP"><P>The name of the NDIS 2 driver. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Note: NETDI automatically copies the file specified in <B>FileName</B>, therefore it is not necessary to explicitly copy the file in a CopyFiles section in the INF file. You only need a CopyFiles section for NDIS2 if you have additional support files for your driver. </P>
<H4><A NAME="sec14"></A>ODI Driver Information </H4><P>The device loader and NDIS 3 wrapper use this information to check if the real-mode ODI driver is in memory and to load the appropriate mapper if necessary. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Driver Sub Key </B></P></TD><TD VALIGN="TOP"><P><B>Value Name </B></P></TD><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS/ODI </P></TD><TD VALIGN="TOP"><P>DriverName </P></TD><TD VALIGN="TOP"><P><I>LinkDriver name</I> </P></TD><TD VALIGN="TOP"><P>The ODI driver's LinkDriver name and the NET.CFG section name. This can be a comma separated list of driver names if more than one MLID can support this card. If Setup finds one of these MLIDs loaded, it will use that MLID rather than the one specified in <B>FileName</B> below. </P></TD></TR><TR><TD VALIGN="TOP"><P>NDIS/ODI </P></TD><TD VALIGN="TOP"><P>FileName </P></TD><TD VALIGN="TOP"><P><I>driver file name</I> </P></TD><TD VALIGN="TOP"><P>The name of the primary ODI driver. (not a list) </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Note: NETDI automatically copies the file specified in <B>FileName</B>, therefore it is not necessary to explicitly copy the file in a <B>CopyFiles</B> section in the INF file. You only need a <B>CopyFiles</B> section for ODI if you have additional support files for your driver. </P>
<H4><A NAME="sec15"></A>Other notes for network card drivers </H4><P>Since they specify information for hardware devices, INF files for network cards also need all the other information a standard PnP INF file needs. This includes using approved PnP device IDs and having LogConfig sections for non-PnP cards. LogConfig sections are not needed for PCMCIA, EISA, MCA, and PCI devices. </P></FONT></BODY></HTML>

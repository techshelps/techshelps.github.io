<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cursor Support</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Cursor Support </H3><P>Minidrivers for display adapters that do not support a hardware cursor can use the DIB engine cursor functions to set, move, and manage a software cursor. There is one DIB engine cursor function for each of the cursor functions a driver is required to export. In most cases, the driver simply passes the parameters received by its cursor function to the corresponding DIB engine function, adding the driver's <B>PDEVICE</B> as the first parameter. The following table maps the DIB engine cursor functions to the corresponding GDI cursor functions: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Call this </B></P></TD><TD VALIGN="TOP"><P><B>From </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIB_SetCursorExt</B> </P></TD><TD VALIGN="TOP"><P><B>SetCursor</B> </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIB_CheckCursorExt</B> </P></TD><TD VALIGN="TOP"><P><B>CheckCursor</B> </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIB_MoveCursorExt</B> </P></TD><TD VALIGN="TOP"><P><B>MoveCursor</B> </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIB_Inquire</B> </P></TD><TD VALIGN="TOP"><P><B>InquireCursor</B> </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec0"></A>Color Cursors </H4><P>The DIB Engine's software cursor supports color cursors. A color cursor consists of a monochrome AND mask followed by an XOR device dependent bitmap. For example, on an 8 bpp display, the color cursor passed to the display driver on the <B>SetCursor</B> call would look like: </P>
<P><BR></P>
<PRE>csHotX        DW    ?
csHotY        DW    ?
csWidth       DW    ?
csHeight      DW    ?
csWidthBytes  DW    ?
csColor       DW    ?            ; 0101h = mono, 0801h = 8bpp, etc.
csANDBits     DB    4*8 dup (?)  ; 32x32 bit mask = 4 bytes/row 
                                 ; with 8 rows
csXORBitS     DB    32*8 dup (?)    ; 32x32 pixels = 32 bytes/row 
                                 ; with 8 rows
</PRE>
<P>Note that the device dependent portion of the cursor is still XORed onto the screen. </P>
<P>A driver informs the system that it is color-cursor capable by setting the C1_COLORCURSOR bit in the <B>dpCaps1</B> field of the <B>GDIINFO</B> structure passed back to GDI <B>Enable</B> is called to get the capability bits. The DIB engine does not set this bit even though it supports color cursors. Minidrivers must set this bit explicitly. </P>
<P>If the driver does not set this bit, it will never be passed a color cursor. If the driver sets this bit, it can receive either monochrome or color cursors. </P>
<P>Most minidrivers should just let the DIB Engine's software cursor code handle the drawing of the color cursor. This presents special problems for drivers that have hardware monochrome cursors. A driver has to dynamically "turn off" its hardware cursor and "turn on" the DIB Engine's software cursor. </P>
<H4><A NAME="sec1"></A>Animated Cursors </H4><P>There is little driver involvement to support animated cursors. If the driver sets the C1_COLORCURSOR bit in the <B>dpCaps1</B> field of the <B>GDIINFO</B> structure, this also implies that the driver can handle an animated cursor. Windows 95 implements cursor animation by calling <B>SetCursor</B> with a new image at a set time interval. To handle cursor animation, a driver needs to insure that: </P>
<UL><LI>     <B>SetCursor</B> does not flicker. </LI><LI>     <B>SetCursor</B> can be called at an asynchronous time. </LI></UL><P></P>
<P>With previous versions of Windows, <B>SetCursor</B> could not interrupt M<B>oveCursor</B> or <B>CheckCursor</B>. This is no longer the case for animated cursors. <B>SetCursor</B> can now fail and return a 0 in the AX register. This is useful if, for example, the cursor is "busy" and the image cannot be changed. </P>
<H4><A NAME="sec2"></A>Mouse Trails </H4><P>The DIB Engine's software cursor supports mouse trails. To use this, a driver needs to make sure that it chains escape calls to the DIB Engine to allow activation and deactivation of mouse trails. In addition, drivers with hardware cursors need to know when to shift to the DIB Engine's cursor to make mouse trails visible. This is done by hooking the mouse trail escape call. On the mouse trails escape, the driver may need to switch from hardware to software cursor. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DeviceBitmapBits</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>DeviceBitmapBits </H3><P><BR></P>
<PRE>void DeviceBitmapBits(LPPDEVICE lpBitmap, WORD fGet, WORD iStart, 
    WORD cScans, LPSTR lpDIBits, LPBITMAPINFO lpBitmapInfo, 
    LPDRAWMODE lpDrawMode, LPINT lpTranslate);
</PRE>
<P>Either copies DIB to a device-specific bitmap or copies a device-specific bitmap to a DIB. The <I>fGet</I> parameter specifies which operation to carry out. </P>
<UL><LI>     Returns one of these values: </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>&gt;0 </P></TD><TD VALIGN="TOP"><P>Number of scanlines set or retrieved. </P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>Error. </P></TD></TR><TR><TD VALIGN="TOP"><P>-1 </P></TD><TD VALIGN="TOP"><P>Bits cannot be set or retrieved. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><I>lpBitmap</I> </P>
<P>Address of a <B>PBITMAP</B> structure that specifies a device-specific memory bitmap. </P>
<P><I>fGet</I> </P>
<P>Flag that specifies whether the function sets or retrieves bitmap bits. If this parameter is zero, the function sets the bits; if the parameter is 1, the function retrieves the bits. </P>
<P><I>iStart</I> </P>
<P>Starting scan number. </P>
<P><I>cScans</I> </P>
<P>Number of scans to set or retrieve. </P>
<P><I>lpDIBits</I> </P>
<P>Address of a buffer that contains or receives the bitmaps bits. If the <I>fGet</I> parameter is zero, the function copies data from the buffer into the bitmap; if <I>fGet</I> is 1, the function copies the bits to the buffer from the bitmap. If this parameter is NULL, the function fills the <B>biSizeImage</B> member in the <B>BITMAPINFO</B> structure pointed to by the <I>lpBitmapInfo</I> parameter, but does not copy bitmap bits. </P>
<P><I>lpBitmapInfo</I> </P>
<P>Address of a <B>BITMAPINFO</B> structure that specifies the dimensions and format of the DIB. </P>
<P>The function must check the <B>biPlanes</B> and the <B>biBitCount</B> members. If <B>biPlanes</B> is not 1 or <B>biBitCount</B> is not 1, 4, 8, or 24, the function returns an error value. </P>
<P>The function compares the widths of the device-specific bitmap and the DIB. If the widths are not equal, the function clips to the smaller of the two bitmaps. </P>
<P>If the RLE_FORMAT_4 or RLE_FORMAT_8 values are set in the <B>biCompression</B> member of the <B>BITMAPINFO</B> structure, the DIB is in RLE format. In this case, the function must encode each scan line as it copies the scan line data to the buffer pointed to by <I>lpDIBits</I> or the function must decode the data as it retrieves it from the buffer. </P>
<P><I>lpDrawMode</I> </P>
<P>Address of a <B>DRAWMODE</B> structure that specifies the text (foreground) and background colors to use if color conversion is required. </P>
<P><I>lpTranslate</I> </P>
<P>Address of an array of color translation values for converting palette colors to actual device colors. This parameter is ignored by devices that do not use color palettes. </P>
<P>The export ordinal for this function is 19. </P>
<P>A graphics driver must export a <B>DeviceBitmapBits</B> function if the RC_DI_BITMAP value is set in the <B>dpRaster</B> member of the driver's <B>GDIINFO</B> structure. </P>
<P>Depending on the operation specified by the <I>fGet</I> parameter, <B>DeviceBitmapBits</B> either converts the bits pointed to by <I>lpDIBits</I> to the format required by the bitmap specified by the <I>lpBitmap</I> parameter or converts the bits pointed to by <I>lpDIBits</I> to the format required by <I>lpBitmap</I>. To convert the bits, the function computes the width and height of the bitmap to copy, determines if color conversion is necessary, and prepares for scan lines that cross the 64K boundaries. </P>
<P><B>DeviceBitmapBits</B> checks the color formats of the bitmap specified by <I>lpBitmap</I> and the DIB specified by <I>lpBitmapInfo</I>. If the color formats are not the same, the function must convert the bitmap pixels to the same format as the destination. For example, if the function copies a DIB to a monochrome bitmap, the function must convert color pixels to monochrome. In this case, <B>DeviceBitmapBits</B> converts all pixels that match the background color (as specified by the <I>lpDrawMode</I> parameter) to white (1), and converts all other pixels to black (0). </P>
<P>To prepare for color conversion when <I>fGet</I> is zero, the function maps color-table information (if any) provided in the <B>BITMAPINFO</B> structure to the device-specific colors. If the <B>biClrUsed</B> member is zero, the function must use a default color table. The size of the default table depends on the number of bits per pixel (that is, 16 colors for 4 bits-per-pixel, 256 colors for 8 bits-per-pixel, and so on). However, if <B>biClrUsed</B> is nonzero, the member specifies the size of the table; this size cannot be more than the default size. Because the default color table for a bitmap having 24 bits per pixel is exceptionally large, the function carries out the color mapping as it converts the bits rather than generating a table. </P>
<P>To prepare for color conversion when <I>fGet</I> is 1, the function creates the logical-color table and copies it to the <B>BITMAPINFO</B> structure. If the device driver does not support a color palette, the function fills the logical-color table with whatever color it supports and use the corresponding indices in the bitmap. It must also set the number of colors it is using in the <B>biClrUsed</B> member of the <B>BITMAPINFO</B> structure. For example, if the display device is a 4-plane device (16 colors) but the request is for a DIB that has 8 bits-per-pixel (256 colors), the function can specify just 16 colors and set the <B>biClrUsed</B> member to 16, or it can set remaining colors (entries 16 through 255) to zero and set the <B>biClrUsed</B> member to zero. </P>
<P>See also <B>PBITMAP</B>, <B>BITMAPINFO</B>, <B>DRAWMODE</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

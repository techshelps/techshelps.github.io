<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Video Compression and Decompression Messages</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Video Compression and Decompression Messages </H3><P>This driver specific messages for video compression and decompression drivers are covered by the three basic operations of these drivers: video compression, video decompression using the client-application, and video decompression directly to video hardware. Because video compression and decompression drivers typically use AVI files and bitmaps, this section includes a brief overview of the AVI RIFF format, the BITMAPINFO data structure, and the BITMAPINFOHEADER data structure. </P>
<H4><A NAME="sec0"></A>About the AVI File Format </H4><P>Many of the video compression and decompression messages rely on information embedded in the AVI RIFF file. Drivers do not typically access this information directly. They rely on the client-application to read and write the AVI file and maintain the RIFF file structure. While your driver should not have to manipulate an AVI file, understanding its structure helps identify the purpose of the information your driver will supply and receive. </P>
<P>AVI files have the following general structure: </P>
<P><BR></P>
<PRE>RIFF('AVI'
    LIST('hdrl'
        avih(&lt;&lt;MainAVIHeader&gt;&gt;)
         LIST ('strl'
            strh(&lt;&lt;Stream header&gt;&gt;)
            strf(&lt;&lt;Stream format&gt;&gt;)
            strd(&lt;&lt;Stream data&gt;&gt;)
            strn(&lt;&lt;Stream name&gt;&gt;)
        )
    )

    LIST('movi'
     '00??'(&lt;&lt;driver Data&gt;&gt;)
        .
        .
        .
    '00??'(&lt;&lt;driver Data&gt;&gt;)
    )
   ' idx1'(&lt;&lt;AVIIndex&gt;&gt;)
)
</PRE>
<P>The following table summarizes the entries in the AVI file: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>RIFF Chunk </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>RIFF 'AVI ' </P></TD><TD VALIGN="TOP"><P>Identifies the file as AVI RIFF file. </P></TD></TR><TR><TD VALIGN="TOP"><P>LIST 'hdrl' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing subchunks that define the format of the data. </P></TD></TR><TR><TD VALIGN="TOP"><P>'avih' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing general information about the file. This includes the number of streams and the width and height of the AVI sequence. </P></TD></TR><TR><TD VALIGN="TOP"><P>LIST 'strl' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing subchunks that describe the streams in a file. This chunk exists for each stream. </P></TD></TR><TR><TD VALIGN="TOP"><P>'strh' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing a stream header. This includes the type of stream. </P></TD></TR><TR><TD VALIGN="TOP"><P>'strf' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk describing the format of the data in the stream. For video streams, the information in this chunk is a BITMAPINFO structure. It includes palette information if appropriate. </P></TD></TR><TR><TD VALIGN="TOP"><P>'strd' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing information used by compressor and decompressors. For video compressors and decompressors, this includes the state formation. </P></TD></TR><TR><TD VALIGN="TOP"><P>'strn' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing a zero-terminated string specifying the name of the stream. </P></TD></TR><TR><TD VALIGN="TOP"><P>LIST 'movi ' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing subchunks used for the audio and video data. </P></TD></TR><TR><TD VALIGN="TOP"><P>'00??' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing the audio or video data. For this example, both the zeros (00) and the question marks (??) are used as place holders. The zeros are replaced by stream numbers. The question marks are replaced by codes indicating the type of data in the chunk. For example, a stream for a compressed DIB might use '01dc'. </P></TD></TR><TR><TD VALIGN="TOP"><P>'idx1' </P></TD><TD VALIGN="TOP"><P>Identifies a chunk containing the file index. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Video compression and decompression drivers operate on the information in the 'strf', 'strd', and 'oo??' chunks. </P>
<H4><A NAME="sec1"></A>Identifying Compression Formats </H4><P>The BITMAPINFO data structure defined by Windows is used with many of the compression and decompression messages to pass information about the bitmaps being compressed and decompressed. This structure has the following members: </P>
<P><BR></P>
<PRE>typedef struct tagBITMAPINFO {
     BITMAPINFOHEADER bmiHeader;  // BITMAPINFOHEADER data
     RGBQUAD bmiColors[];         // Color table
 } BITMAPINFO;
</PRE>
<P>The <B>bmiColors</B> member is used for the color table. The BITMAPINFOHEADER data defined for the <B>bmiHeader</B> member is used to pass information about the format of the bitmaps being compressed and decompressed. This structure has the following members: </P>
<P><BR></P>
<PRE>typedef struct tagBITMAPINFOHEADER {
     DWORD biSize;           // Structure size
     LONG  biWidth;          // Width of the bitmap
     LONG  biHeight;         // Heifht of the bitmap
     WORD  biPlanes;         // Planes of the target device
     WORD  biBitCount;       // Number of bits per pixel
     DWORD biCompression;    // Compression type
     DWORD biSizeImage;      // Bytes contained in the image
     LONG  biXPelsPerMeter;  // Horizontal resolution
     LONG  biYPelsPerMeter;  // Vertical resolutioni
     DWORD biClrUsed;        // Number of color indexes
     DWORD biClrImportant;   // Number of important colors
 } BITMAPINFOHEADER;
</PRE>
<P>The <B>biCompression</B> member specifies the type of compression used or requested. Windows defines the following compression formats: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Format </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>BI_RGB </P></TD><TD VALIGN="TOP"><P>Specifies the bitmap is not compressed. </P></TD></TR><TR><TD VALIGN="TOP"><P>BI_RLE8 </P></TD><TD VALIGN="TOP"><P>Specifies a run-length encoded format for bitmaps with 8 bits per pixel. </P></TD></TR><TR><TD VALIGN="TOP"><P>BI_RLE4 </P></TD><TD VALIGN="TOP"><P>Specifies a run-length encoded format for bitmaps with 4 bits per pixel. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Video for Windows extends the BI_RGB format to include 16 and 32 bits per pixel bitmap formats. These formats do not use a color table. They embed the colors in the WORD or DWORD representing each pixel. </P>
<P>The 16 bit BI_RGB format is identified by setting <B>biCompression</B> to BI_RGB and setting <B>biBitCount</B> to 16. For this format, each pixel is represented by a 16-bit RGB color value. The high-bit of this value is zero. The remaining bits are divided into 3 groups of 5-bits to represent the red, green, and blue color values. </P>
<P>The 32 bit BI_RGB format is identified by setting <B>biCompression</B> to BI_RGB and setting <B>biBitCount</B> to 32. For this format, each pixel is represented by a 32 bit (4 byte) RGB color value. One byte is used for each red, green, and blue color value. The fourth byte is set to zero. </P>
<P>Your driver should support the BI_RGB format for 8 bit per pixel bitmaps. If practical, it should also support this format for 16, 24, and 32 bits per pixel bitmaps. </P>
<P>In addition to the new BI_RGB formats, the BI_BITFIELD format adds new compression capabilities. This format specifies a bitmap is not compressed and color masks are defined in the <B>bmiColors</B> member of the BITMAPINFO data structure. The first DWORD in the <B>bmiColors</B> member is the red mask, the second DWORD is the green mask, and the third DWORD is the blue mask. </P>
<P>Your driver can also extend the format set by defining custom formats. Custom formats use a four character code for the format in the <B>biCompression</B> member in place of the standard constants. Your driver can use a custom format to support a unique or nonstandard compression type. When you define a custom format, you can specify values other than 1, 4, 8, 16, 24, or 32 for the <B>biBitCount</B> member. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Time Stamping MIDI Input</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Time Stamping MIDI Input </H3><P>MIDI input drivers must time-stamp incoming MIDI events. The time stamp is the number of milliseconds since MIDI input was started. </P>
<P>The MIDM_START message resets time stamps to zero. When your <B>midMessage</B> entry-point function receives a MIDM_START message, use <B>timeGetTime</B> to get a reference time stamp. Then, each time you receive an incoming MIDI event, call <B>timeGetTime</B> to get the current system time. Subtract the reference time stamp from the current system time to get a time stamp for the MIDI event. For multi-byte MIDI events, the time stamp specifies when the first byte (the MIDI status byte) was received. </P>
<P></P>
<P><B>Note </B></P>
<P>If the target hardware supports time stamping, you can use its capabilities to generate time stamps more efficiently than calling the timeGetTime function. However, time stamps must still specify the time in milliseconds since MIDI input was started with the MIDM_START message. </P>
<P></P></FONT></BODY></HTML>

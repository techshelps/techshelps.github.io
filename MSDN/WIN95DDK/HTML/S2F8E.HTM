<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwFindAdapter Routines</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>HwFindAdapter Routines </H2><P>The port driver fills in as much PORT_CONFIGURATION_INFORMATION as it can from the miniport's returned HW_INITIALIZATION_DATA and from the registry before calling a HwFindAdapter routine with a pointer to the configuration information buffer. In particular, the port driver always sets the following: </P>
<UL><LI>     <B>Length</B> to <B>sizeof</B>(PORT_CONFIGURATION_INFORMATION) </LI><LI>     <B>AdapterInterfaceType</B> to the miniport's HW_INITIALIZATION_DATA specification </LI><LI>     <B>InterruptMode</B> to <B>LevelSensitive</B> if the <B>AdapterInterfaceType</B> is set to <B>MicroChannel</B>; otherwise, set to <B>Latched</B> </LI></UL><P></P>
<P>If the miniport has no HwInterrupt routine and, therefore, set this entry point to NULL in the HW_INITIALIZATION_DATA, this field is irrelevant. </P>
<UL><LI>     <B>AtdiskPrimaryClaimed</B> to TRUE if a previously loaded driver is using the I/O port range 0x1F0 to 0x1FF </LI><LI>     <B>AtdiskSecondaryClaimed</B> to TRUE if a previously loaded driver is using the I/O port range 0x170 to 0x17F </LI><LI>     <B>NumberOfAccessRanges</B> to the miniport's HW_INITIALIZATION_DATA specification </LI></UL><P></P>
<P>The port driver also attempts to fill in the following fields with values from the registry: </P>
<UL><LI>     <B>SystemIoBusNumber</B> set to zero if there is only one bus of a particular type in the machine 
<P>Otherwise, the miniport's HwFindAdapter routine can be called for each bus of the given AdapterInterfaceType with an updated value for SystemIoBusNumber, or this value can be set to a value from the registry if the system detects an HBA on a particular bus. </P></LI><LI>     <B>AccessRanges</B> elements, set with the <B>RangeStart</B> and <B>RangeLength</B> of each element, as well as whether each element is a <B>RangeInMemory</B> 
<P>RangeInMemory set to FALSE indicates a range of ports in I/O space, rather than a memory-mapped range. </P></LI><LI>     <B>BusInterruptLevel</B> or <B>BusInterruptVector</B> </LI></UL><P></P>
<P>This field is irrelevant if the miniport has no HwInterrupt routine. </P>
<UL><LI>     <B>DmaChannel</B> or <B>DmaPort</B> if the HBA uses system DMA 
<P>If the HBA is a busmaster or uses PIO, these fields in the PORT_CONFIGURATION_INFORMATION are irrelevant. </P></LI><LI>     <B>InitiatorBusId</B> </LI></UL><P></P>
<P>A HwFindAdapter routine calls <B>ScsiGetBusData</B> and examines the returned bus-type-specific configuration information, such as POS data or EISA configuration data, for a supported HBA. If the input PORT_CONFIGURATION_INFORMATION <B>AccessRanges</B> elements have been filled in from the registry, the HwFindAdapter routine should use these addresses and should not scan for adapters at other locations. </P>
<P>If HwFindAdapter cannot find an HBA it supports, it should set <I>Again</I> to FALSE and return SP_RETURN_NOT_FOUND. If the HwFindAdapter routine finds a supported HBA but the input PORT_CONFIGURATION_INFORMATION has invalid data (such as an invalid <B>DmaChannel</B> or <B>BusInterruptLevel</B> on an EISA bus), it should set <I>Again</I> to FALSE and return SP_RETURN_BAD_CONFIG. </P>
<P>Note that setting <I>Again</I> to FALSE and returning control with SP_RETURN_NOT_FOUND or SP_RETURN_BAD_CONFIG indicates that a given I/O bus, identified by the <B>SystemIoBusNumber</B> in the input PORT_CONFIGURATION_INFORMATION buffer, has no HBAs connected that the miniport driver can support. It does not prevent the port driver from calling HwFindAdapter again with updated PORT_CONFIGURATION_INFORMATION to scan another I/O bus for HBA(s) if the machine has additional buses of the same <B>AdapterInterfaceType</B>. </P>
<P>When the HwFindAdapter routine finds an HBA it can support, this routine must fill in pertinent fields, as appropriate for its HBA and the given <B>AdapterInterfaceType</B>, in the input PORT_CONFIGURATION_INFORMATION buffer. Every miniport driver must fill in the <B>AccessRanges</B> information, converting each <B>AccessRanges</B> element's <B>RangeStart</B> value with <B>ScsiPortConvertUlongToPhysicalAddress</B>. </P>
<P>For an "AT-compatible" HBA, the HwFindAdapter routine should check the input <B>Atdisk..Claimed</B> fields and attempt to claim an "AT" range by resetting the value to TRUE. </P>
<P>The HwFindAdapter routine can set <I>Again</I> to TRUE to indicate it should be called again <I>with exactly the same configuration information</I> if another of its HBAs might be connected on the same I/O bus. For a supported HBA, the HwFindAdapter routine returns SP_RETURN_FOUND. </P>
<P>If the PORT_CONFIGURATION_INFORMATION buffer input to the HwFindAdapter routine has no configuration information from the registry, HwFindAdapter can set driver-defined default values for <B>AccessRanges</B> elements, <B>InterruptLevel</B> or <B>BusInterruptVector</B>, <B>DmaChannel</B> or <B>DmaPort</B> if the HBA uses system DMA, and <B>InitiatorBusId</B>, and, then, call <B>ScsiPortGetBusData</B> and examine the returned configuration information for a supported HBA on the I/O bus. </P>
<P>Certain <B>ScsiPort</B><I>Xxx</I> routines can be called <I>only</I> from the miniport driver's HwFindAdapter routine(s), in particular, the following: </P>
<UL><LI>     <B>ScsiPortGetBusData</B> to get BUS_DATA_TYPE-specific configuration information </LI><LI>     <B>ScsiPortGetDeviceBase</B> to map the (bus-relative) base physical address range for an HBA to a system address range that the driver can use to communicate with the HBA by calling the <B>ScsiPortReadXxx</B> and <B>ScsiPortWriteXxx</B> routines </LI><LI>     <B>ScsiPortFreeDeviceBase</B> to release such a mapped range if HwFindAdapter does not find an HBA it can support on a given I/O bus (as indicated by the PORT_CONFIGURATION_INFORMATION <B>SystemIoBusNumber</B> value) </LI><LI>     <B>ScsiPortGetUncachedExtension</B> to allocate a DMA buffer shared between the system and a busmaster HBA </LI></UL><P></P>
<P>For more information about the PORT_CONFIGURATION_INFORMATION structure and these <B>ScsiPort</B><I>Xxx</I> routines, see the <I>Introduction to SCSI Port Driver Services Reference</I>. </P>
<P>When a miniport driver's HwFindAdapter routine returns control, <B>ScsiPortInitialize</B> returns to the DriverEntry routine if the call(s) to HwFindAdapter indicated that the miniport driver could not support an HBA. Otherwise, <B>ScsiPortInitialize</B> claims resources in the registry, sets up necessary system objects (such as interrupt and adapter objects) on behalf of the miniport driver, and calls the miniport's HwInitialize routine, described in <I>HwInitialize Routine</I>. </P>
<P>In addition to the values it sets in the PORT_CONFIGURATION_INFORMATION buffer, <B>ScsiPortInitialize</B> also checks the registry for user-set values that disable any or all of the following: </P>
<UL><LI>     Synchronous transfers on the HBA </LI></UL><P></P>
<P>The port driver ORs the default <B>SrbFlags</B> that it maintains for the HBA with SRB_FLAGS_DISABLE_SYNCH_TRANSFER. </P>
<UL><LI>     Bus-disconnect operations on the HBA </LI></UL><P></P>
<P>The port driver ORs the default <B>SrbFlags</B> with SRB_FLAGS_DISABLE_DISCONNECT. </P>
<UL><LI>     Tagged queueing </LI></UL><P></P>
<P>The port driver sets the <B>TaggedQueuing</B> Boolean that it maintains for the HBA to FALSE. </P>
<UL><LI>     Internal queueing of requests on the HBA </LI></UL><P></P>
<P>The port driver sets the <B>MultipleRequestPerLu</B> Boolean that it maintains about the HBA to FALSE. </P>
<P>If any of the immediately preceding "disable" values are in the registry, it overrides whatever the HwFindAdapter routine sets in the PORT_CONFIGURATION_INFORMATION buffer. Note that temporarily disabling synchronous transfers, bus-disconnect operations, tagged queueing, and HBA internal request queueing can simplify using a debugger to trace request handling in a miniport driver that is under development. </P>
<P>Note also that the port driver uses the PORT_CONFIGURATION_INFORMATION values provided by a miniport's HwFindAdapter routine and/or in the registry to fill in the IO_SCSI_CAPABILITIES data for use by SCSI class drivers. </P></FONT></BODY></HTML>

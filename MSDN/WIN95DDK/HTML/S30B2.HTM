<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FS_OpenFile</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>FS_OpenFile </H3><P><BR></P>
<PRE>FS_OpenFile(
 PIOREQ pir
 )
</PRE>
<P>All file open and create operations are handled through <B>FS_OpenFile</B>. This routine handles the Win32 functions: OpenFile(), and CreateFile(); and INT 21h functions: 0Fh, 16h, 3Ch, 3Dh, 5Ah, 5Bh, 6Ch and 716Ch. </P>
<P><I>ir_ppath</I> </P>
<P>Supplies a pointer to the canonicalized unicode pathname to the file that is to be opened. Wildcards are not allowed on the pathname. </P>
<P>If <I>ir_ppath</I> is NULL, it indicates that this is a special kind of open where there is no path available, only cluster and directory information is available. This special kind of open is issued by the IFS manager when it is taking over a file handle left open by a TSR before booting into Windows. For such files, the IFS manager extracts the information from DOS about the cluster number and the directory position for the open file. The FSD needs to locate the file given this information. A pointer to a structure containing this information is passed in <I>ir_uFName</I>. Note that this kind of open can be issued only on FAT filesystems because the only native system supported by MS-DOS is the FAT filesystem. </P>
<P><I>ir_rh</I> </P>
<P>Supplies handle to disk volume or network resource where the file is to be opened. </P>
<P><I>ir_sfn</I> </P>
<P>Supplies system file number. </P>
<P><I>ir_flags</I> </P>
<P>Supplies desired access &amp; sharing mode info. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Desired Access Values:</B> </P>
<P>One of the following values may be specified. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACCESS_READONLY</B> </P></TD><TD VALIGN="TOP"><P>Open for read-only access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACCESS_WRITEONLY</B> </P></TD><TD VALIGN="TOP"><P>Open for write-only access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACCESS_READWRITE</B> </P></TD><TD VALIGN="TOP"><P>Open for read and write access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACCESS_EXECUTE</B> </P></TD><TD VALIGN="TOP"><P>Open for execute access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Sharing Mode Values:</B> </P>
<P>This defines the file access granted to other processes. One of the following modes may be specified. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>SHARE_COMPATIBILITY</B> </P></TD><TD VALIGN="TOP"><P>Open in compatibility mode. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>SHARE_DENYREADWRITE</B> </P></TD><TD VALIGN="TOP"><P>Open for exclusive access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>SHARE_DENYWRITE</B> </P></TD><TD VALIGN="TOP"><P>Open allowing read-only access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>SHARE_DENYREAD</B> </P></TD><TD VALIGN="TOP"><P>Open allowing write-only access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>SHARE_DENYNONE</B> </P></TD><TD VALIGN="TOP"><P>Open allowing other processes access. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>SHARE_FCB</B> </P></TD><TD VALIGN="TOP"><P>Open in the special FCB mode. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_options</I> </P>
<P>Supplies the open action to take if file exists or not. Also supplies some special options that are independent of the open action. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Open Action Values:</B> </P>
<P>One of the following actions or a combination of actions may be specified. Specifies the action to take if the file exists or not exists. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_CREATENEW</B> </P></TD><TD VALIGN="TOP"><P>Create a new file. Fail if the file already exists. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_CREATEALWAYS</B> </P></TD><TD VALIGN="TOP"><P>Create a new file. If the file already exists open it and set its new length and attributes. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_OPENEXISTING</B> </P></TD><TD VALIGN="TOP"><P>Open an existing file. Fail if the file does not exist. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_OPENALWAYS</B> </P></TD><TD VALIGN="TOP"><P>Open an existing file. If the file does not exist, create a new file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_REPLACEEXISTING</B> </P></TD><TD VALIGN="TOP"><P>Open an existing file and set its new length. Fail if the file does not exists. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Special Options:</B> </P>
<P>The following special options can also be passed in on this api. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>OPEN_FLAGS_COMMIT</B> </P></TD><TD VALIGN="TOP"><P>The file should be opened in writethrough mode i.e all data should be written synchronously to the disk. The data can be cached, but no dirty data should remain in the cache across calls to write to the file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>OPEN_FLAGS_NO_CACHE</B> </P></TD><TD VALIGN="TOP"><P>Read/write operations to this file should not be cached. There should be no data kept in the cache for this file. This also means that the filesystem should not do read-aheads and other optimizing techniques on this file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>OPEN_FLAGS_NO_COMPRESS</B> </P></TD><TD VALIGN="TOP"><P>The file should not be compressed when it is created or changed. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>OPEN_FLAGS_ALIAS_HINT</B> </P></TD><TD VALIGN="TOP"><P>This is valid only on a create operation. The caller can pass in a number from 0 to 65535 to be used as a hint by the FSD for the numeric tail if it is auto-generating names. If the FSD does not auto-generate names, this flag should be ignored. This is purely an advisory option. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>R0_SWAPPER_CALL</B> </P></TD><TD VALIGN="TOP"><P>This operation is on the swap file. The swap file needs special handling as has already been discussed in section 8.3.4. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_attr</I> </P>
<P>Supplies new file attribute for create operations. These attributes should be ignored when an existing file is opened or truncated. It also supplies advisory path parsing flags. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Attribute Values:</B> </P>
<P>Any combination of the following attributes may be specified or returned. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_READONLY</B> </P></TD><TD VALIGN="TOP"><P>Read-Only file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_HIDDEN</B> </P></TD><TD VALIGN="TOP"><P>Hidden file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_SYSTEM</B> </P></TD><TD VALIGN="TOP"><P>System file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_DIRECTORY</B> </P></TD><TD VALIGN="TOP"><P>Subdirectory. </P>
<P>The following attribute will only be specified by itself. It will not be combined with any of the other attributes. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_VOLUMELABEL</B> </P></TD><TD VALIGN="TOP"><P>Volume label. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Path Parsing Flags:</B> </P>
<P>The following path parsing flags are passed in. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_LONG_PATH</B> </P></TD><TD VALIGN="TOP"><P>Path has a longname component. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_KEEP_CASE</B> </P></TD><TD VALIGN="TOP"><P>Preserve the case of the filename passed in when storing on disk. This also implies that this call should use longname semantics for its processing. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_HAS_DOT</B> </P></TD><TD VALIGN="TOP"><P>Filename component has a dot in its name. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_FLAG_IS_LFN</B> </P></TD><TD VALIGN="TOP"><P>Filename component is a longname. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_uFName</I> </P>
<P>Pointer to the case-preserved filename component in unicode if ir_ppath is a valid pointer. If ir_ppath is NULL, then this field contains a pointer to an open information structure SFTOpenInfo as described below. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>SFTOpenInfo Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>soi_dirclus</I> </P></TD><TD VALIGN="TOP"><P>Supplies the logical cluster number of the directory cluster for the open file. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>soi_dirind</I> </P></TD><TD VALIGN="TOP"><P>Supplies the index of the directory entry of the open file in the directory cluster pointed at by soi_dirclus. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>soi_dirname</I> </P>
<P>Supplies the 11-character name of the open file in FCB format. </P>
<P><I>ir_upath</I> </P>
<P>Pointer to the unparsed user pathname in unicode. </P>
<P><I>ir_hfunc</I> </P>
<P>Supplies a pointer to a function pointer structure. </P>
<P><I>ir_ptuninfo</I> </P>
<P>Supplies a pointer to a tunnelling structure. A NULL pointer is passed in this field if there is no tunnelling information. The tunnelling structure is described below. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Tunnelling Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>tuni_bfContents</I> </P></TD><TD VALIGN="TOP"><P>Specifies flags for the tunnelling information passed in. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Tunnelling Info Flag Values:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>TUNI_CONTAINS_ALTNAME</B> </P></TD><TD VALIGN="TOP"><P>Alternate unicode name is available in structure. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>TUNI_CONTAINS_CREATIONT</B> </P></TD><TD VALIGN="TOP"><P>Creation time for file available. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>TUNI_CONTAINS_LASTACCESST</B> </P></TD><TD VALIGN="TOP"><P>Last access time for file available. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>TUNI_CONTAINS_LASTWRITET</B> </P></TD><TD VALIGN="TOP"><P>Last modification time for file available. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>tuni_pAltName</I> </P>
<P>Supplies the alternate name in unicode that should be used for this file. </P>
<P><I>tuni_ftCreationTime</I> </P>
<P>Supplies the creation time in the Win32 FileTime structure format specified below. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Win32 FileTime Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>dwLowDateTime</I> </P></TD><TD VALIGN="TOP"><P>Supplies the low double word of the time in Win32 format. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>dwHighDateTime</I> </P></TD><TD VALIGN="TOP"><P>Supplies the low double word of the time in Win32 format. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>tuni_ftLastAccessTime</I> </P>
<P>Supplies the last access time in the Win32 FileTime structure format described above. </P>
<P><I>tuni_ftLastWriteTime</I> </P>
<P>Supplies the last modification time in the Win32 FileTime structure format described above. </P>
<P><I>ir_pos</I> </P>
<P>Supplies the pointer to the list of file record locks returned previously on FS_CloseFile when a volume lock is in progress. This parameter is NULL if there were no file record locks active on the file at the time it was closed. If the OPEN_FLAGS_ALIAS_HINT flag is set, this field supplies the hint value to be used for the numeric tail. FSDs should first check for the OPEN_FLAGS_ALIAS_HINT flag. If it is set, this field provides the hint value. If not set, this field supplies the pointer to the lock list. </P>
<P><I>ir_fh</I> </P>
<P>Supplies the FSD file handle associated with this file before the file was closed. This parameter should be used only if there were file record locks active on the file i.e. ir_pos is non-NULL. This parameter is passed in to the FSD so that it can identify the lock corresponding to the handle that is being reopened and keep its data structures consistent. Volume locking is described in detail in the volume locking specification. </P>
<P><I>ir_user</I> </P>
<P>Supplies user id for this request. </P>
<P><I>ir_pid</I> </P>
<P>Supplies process id for this request. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>     <I>ir_error</I> </P></TD><TD VALIGN="TOP"><P>Returns status of the operation ( 0 if no error, errorcode otherwise ). </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_fh</I> </P></TD><TD VALIGN="TOP"><P>Returns the FSD file handle identifying the opened file. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_dostime</I> </P></TD><TD VALIGN="TOP"><P>Returns the file modification date and time (in DOS format). </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_hfunc</I> </P></TD><TD VALIGN="TOP"><P>Returns a filled in function pointer structure. The structure is filled in as follows: </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Function Pointer Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>hf_read</I> </P></TD><TD VALIGN="TOP"><P>Returns pointer to FS_ReadFile function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hf_write</I> </P></TD><TD VALIGN="TOP"><P>Returns pointer to FS_WriteFile function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hf_misc</I> </P></TD><TD VALIGN="TOP"><P>Returns a pointer to a function table structure, in the FSD, containing a list of the remaining FSD handle based file I/O entry points. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Function Table Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_version</I> </P></TD><TD VALIGN="TOP"><P>IFS version number. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_revision</I> </P></TD><TD VALIGN="TOP"><P>IFS interface revision number. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_size</I> </P></TD><TD VALIGN="TOP"><P>Number of function entry points in table. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[NUM_HNDLMISC]</I> </P></TD><TD VALIGN="TOP"><P>Returns an array of pointers to the handle-based functions as described below: </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_SEEK]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_SeekFile function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_CLOSE]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_CloseFile function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_COMMIT]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_CommitFile function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_FILELOCKS]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_LockFile function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_FILETIMES]</I> </P>
<P></P></TD><TD VALIGN="TOP"><P>Pointer to FS_FileTime function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_PIPEREQUEST]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_NamedPipeUNCRequest function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_HANDLEINFO]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_NamedPipeHandleInfo function. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>hm_func[HM_ENUMHANDLE]</I> </P></TD><TD VALIGN="TOP"><P>Pointer to FS_EnumerateHandle function. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>ir_options</I> </P></TD><TD VALIGN="TOP"><P>Returns the action performed by the FSD. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Return Action Values:</B> </P>
<P>One of the following actions may be returned. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_OPENED</B> </P></TD><TD VALIGN="TOP"><P>An existing file has been opened. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_CREATED</B> </P></TD><TD VALIGN="TOP"><P>A new file has been created. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ACTION_REPLACED</B> </P></TD><TD VALIGN="TOP"><P>An existing file has been truncated. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>ir_size</I> </P></TD><TD VALIGN="TOP"><P>Returns the file size when an existing file is opened. The size is currently placed in the SFT in the DOS data structures. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_attr</I> </P></TD><TD VALIGN="TOP"><P>Returns the file attribute (state for named pipes). </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Return Attribute Values:</B> </P>
<P>Any combination of the following attributes may be returned. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_READONLY</B> </P></TD><TD VALIGN="TOP"><P>Read-Only file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_HIDDEN</B> </P></TD><TD VALIGN="TOP"><P>Hidden file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_SYSTEM</B> </P></TD><TD VALIGN="TOP"><P>System file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_DIRECTORY</B> </P></TD><TD VALIGN="TOP"><P>Subdirectory. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_ARCHIVE</B> </P></TD><TD VALIGN="TOP"><P>Archive file. </P>
<P>This attribute cannot be returned in combination with other attributes. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>FILE_ATTRIBUTE_VOLUMELABEL</B> </P></TD><TD VALIGN="TOP"><P>Volume label. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P>If an FS does not support long filenames on a volume and it gets a LFN api call on that volume, it should fail the call. Tunnelling is described separately in another section. Tunnelling is supported only on local drives, so network FSDs do not need to honour the tunnelling information. </P>
<P></P>
<P></P></FONT></BODY></HTML>

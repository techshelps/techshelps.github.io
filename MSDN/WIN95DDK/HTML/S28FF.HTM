<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 3. Building Your Version of OEMDONGL.VXD</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Step 3. Building Your Version of OEMDONGL.VXD </H3><P>When you are comfortable with the changes you have made to the OEMDONGL.C source code, it is time to build your version of OEMDONGL.VXD. A MAKEFILE in the DDK subdirectory contains all the directives the compiler, assembler, and linker need to create OEMDONGL.VXD. Before you run the MAKEFILE, you have to match it to your the build environment by carrying out the steps below. </P>
<H4><A NAME="sec0"></A>A. Editing the MAKEFILE </H4><P>First, check the lines in the MAKEFILE that define the build environment to make sure the variable settings match your build environment. The lines of the MAKEFILE you must check are right at the beginning of the MAKEFILE and are shown below: </P>
<P><BR></P>
<PRE>#Change the following variables for your environment
####################################################
CC=..\..\..\..\dev\tools\c932\bin\cl.exe
LINK=..\..\..\..\dev\tools\c932\bin\link.exe
MASM=..\..\..\..\dev\tools\masm611c\mlx
DDKLIB=..\..\..\..\dev\ddk\lib
DDKINCLUDE=..\..\..\..\dev\ddk\inc
H2INC=..\..\..\..\dev\tools\common\h2inc.exe
MAPSYM=..\..\..\..\..\dev\tools\common\mapsym
</PRE>
<P>You may have to edit one or more of these seven lines in order to match the paths in your build environment. </P>
<H4><A NAME="sec1"></A>B. Renaming the VxD by Editing the MAKEFILE and CVXDCTRL.ASM </H4><P>You may also want to edit the MAKEFILE in order to name your VxD something other than OEMDONGL.VXD. Using the REDEYE-88 project as an example again, you would replace all the instances of the case-insensitive string "OEMDONGL" in the MAKEFILE with "RED88" if you wanted the VxD executable file to be named RED88.VXD. </P>
<P>If you edit the MAKEFILE to name the VxD the MAKEFILE produces to something other than OEMDONGL.VXD, then you must also edit the VxD wrapper source code in CVXDCTRL.ASM to reflect that name change. Using the REDEYE-88 example again, you would replace all instances of the case-insensitive string "OEMDONGL" in CVXDCTRL.ASM with "RED88." </P>
<H4><A NAME="sec2"></A>C. Running the MAKEFILE </H4><P>When you are sure the MAKEFILE matches your build environment and the VxD will have the name you want, you can build your VxD. To build a retail version of your VxD, change the current directory to the DDK subdirectory and then enter the command </P>
<P><BR></P>
<PRE>nmake retail 
</PRE>
<P>To build a debug version of your VxD, change the current directory to the DDK subdirectory and then enter the command </P>
<P><BR></P>
<PRE>    nmake debug 
</PRE>
<P>You can also build a debug version by simply using the command </P>
<P><BR></P>
<PRE>    nmake
</PRE>
<P>To build both a retail and debug version, use the command </P>
<P><BR></P>
<PRE>    nmake all
</PRE>
<H4><A NAME="sec3"></A>D. Testing Your VxD </H4><P>Creating an installation diskette that includes your VxD is described in <I>Creating an Installation Diskette and Installing the IR Communications Software</I>. </P>
<P>After you complete this step, you can use the installation diskette to install IR Communications for Windows 95 on one or more Windows 95 computers and try it out. </P></FONT></BODY></HTML>

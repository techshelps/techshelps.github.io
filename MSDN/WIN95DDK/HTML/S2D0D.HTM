<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What are the differences between NDIS 3.0 and 3.1?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>What are the differences between NDIS 3.0 and 3.1? </H3><P>From the Windows NT network documentation: From a NIC driver perspective, there is no difference between a well written NDIS 3.0 driver and an NDIS 3.1 driver for Windows 95. Sources from a driver compiled to run under Windows for Workgroups 3.11 can simply be recompiled under the Windows 95 DDK to take advantage of NDIS 3.1 functionality. There are no new driver functions in NDIS 3.1. </P>
<P>NDIS 3.1 means the following for Windows 95: </P>
<UL><LI>     NIC drivers are dynamically loadable and unloadable. </LI><LI>     NIC drivers use STD calling convention, as does Windows NT. </LI><LI>     NDIS 3.1 allows pageable code (all code marked previously as INIT should be made pageable instead). </LI><LI>     Windows NT miniport NIC drivers can be used on Windows 95. </LI></UL><P></P>
<P>If your NDIS 3.0 NIC driver uses standard macro definitions from the samples, these macros have been redefined to fit the NDIS 3.1 dynamic loading/unloading scenario. </P>
<P>You should make all noncritical code pageable (typically INIT and removal/unload code). </P>
<P>In NDIS 3.0, the protocol loads first, and all adapters are bound to the protocols. In Windows 95, the adapter is detected and opened by the Configuration Manager and the NDIS interface library (wrapper) first, and protocols are bound to the available adapters. As a result, <B>NdisOpenAdapter</B> is no longer called from within <B>NdisAddAdapter</B>, so you should ensure no local variables are used to pass data between these two functions. </P></FONT></BODY></HTML>

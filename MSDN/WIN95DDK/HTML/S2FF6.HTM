<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DriveSpace Programming Interface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>DriveSpace Programming Interface </H3><P>Microsoft MS-DOS version 6.<I>x</I> introduced the DriveSpace file system, which increases the storage capacity of disk drives by compressing data written to the drive. DriveSpace includes a programming interface that lets disk utility programs examine and manage disk drives containing compressed data. The DriveSpace programming interface is described in the MS-DOS Programmer's Reference for version 6.<I>x</I>. This section describes addional IOCTL functions that have been added to the DriveSpace programming interface for Windows 95. </P>
<H4><A NAME="sec0"></A>Raw I/O IOCTL Functions </H4><P>A client application can use the DriveSpace IOCTL functions (Interrupt 21h Function 4404h) to read and write raw data to a compressed volume. The following new IOCTL functions are provided: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Function letter </B></P></TD><TD VALIGN="TOP"><P><B>Action </B></P></TD></TR><TR><TD VALIGN="TOP"><P>r </P></TD><TD VALIGN="TOP"><P><B>DSRawRead</B> </P></TD></TR><TR><TD VALIGN="TOP"><P>w </P></TD><TD VALIGN="TOP"><P><B>DSRawWrite</B> </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>See also <B>DSRawRead</B>, <B>DSRawWrite</B> </P>
<H4><A NAME="sec1"></A>Raw I/O IOCTL Data Packet </H4><P>To perform a raw I/O operation, a client application passes a data packet consisting of a header defined by the <B>DSHDR</B> and <B>DSRAWIO</B> structures, followed by an array of <B>RawClusterInfo</B> structures that describe a set of clusters on which to operate. The IOCTL function returns a failure status in the <B>dspResult</B> field of the <B>DSHDR</B> structure if a normal write (that is, any write other than a raw write IOCTL) to the drive has occurred since the most recent previous raw I/O IOCTL. The failure status tells DEFRAG.EXE that its knowledge of the state of the drive may no longer be valid. </P>
<P>See also <B>DSHDR</B>, <B>DSRAWIO</B>, <B>RawClusterInfo</B> </P>
<H4><A NAME="sec2"></A>Reading Fragmented Clusters </H4><P>To read a fragmented cluster, the client must know how many sectors, including the fragment header, that the cluster consumes. Because the MDFAT entry gives only the size of the first fragment, the client must either read the fragment header and compute the total sector count, or issue a raw read IOCTL in which the <B>rci_data</B> field of the <B>RawClusterInfo</B> structure is NULL. Raw reads where the <B>rci_pdata</B> field is NULL return no raw data, but they do fill in the other fields in the <B>RawClusterInfo</B> structure. When a fragmented cluster is actually read, the fragmented header is stripped from the data that is returned; that is, the first byte in the data buffer contains the first byte of the cluster's raw data. </P>
<P>See also <B>RawClusterInfo</B> </P>
<H4><A NAME="sec3"></A>Writing Fragmented Clusters </H4><P>On version 3.0 CVFs, a client application can use the raw write IOCTL to write a fragmented cluster. To accomplish this, RCFFRAG must be set in the <B>rci_flags</B> field of the <B>RawClusterInfo</B> structure. In addition, the first sector of the data to be written must contain the fragment header exactly as it should appear on this disk. This means that a compressed cluster's data begins immediately following the fragment header in the first sector. An uncompressed cluster's data begins in the second sector of the data. The remainder of the first sector after the fragment header is usually padded with the DWORD value 45544550h. The <B>FRAGHDR</B> structure defines the format of the fragment header: </P>
<P>See also <B>FRAGHDR</B>, <B>RawClusterInfo</B> </P></FONT></BODY></HTML>

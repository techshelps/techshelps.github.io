<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>API Translation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>API Translation </H3><P>API translation is required for any V86-mode API function that takes a pointer as a parameter; functions that take no parameters or receive value parameters need no translation. By default, Windows reflects interrupts into V86 mode without translation, so functions that need translation must be intercepted by a virtual device. For example, the virtual MS-DOS manager intercepts Interrupt 21h to translate for calls to MS-DOS system functions such as Read File or Device and Load and Execute Program. </P>
<P>Most virtual devices use the <B>V86MMGR_Xlat_API</B> service to translate function parameters. If a function takes a pointer, this service changes the pointer to an address in the translation copy buffer (in the V86 address space), and copies the corresponding data to that address. </P>
<P>Unfortunately, some API functions are too complex to be translated by the <B>V86MMGR_Xlat_API</B> service. For example, the service cannot translate functions that take pointers to structures that contain more pointers. In such cases, the virtual device must provide custom translations to convert all pointers and copy all corresponding data. Another example is a function that uses a buffer that is larger than the current translation copy buffer. The virtual device can customize the translation by dividing the call into several operations using a smaller buffer. </P>
<P>A virtual device that translates calls to API functions must install a protected-mode interrupt handler to carry out the translations. The interrupt handler must be the last handler in the protected-mode interrupt chain, therefore the virtual device must install it using the <B>Set_PM_Int_Vector</B> service when processing either the <B>Sys_Critical_Init</B> or <B>Device_Init</B> message. The handler must be fully initialized before the system begins sending the <B>Init_Complete</B> message. This allows virtual devices to use the <B>Exec_VxD_Int</B> service while processing the message. None of the V86MMGR translation services, except for <B>V86MMGR_Set_Mapping_Info</B>, should be called during the <B>Sys_Critical_Init</B> or <B>Device_Init</B> messages. Only one virtual device should translate a given API function call. </P>
<P>In many cases, a virtual device combines use of the <B>V86MMGR_Xlat_API</B> service with custom translations. The virtual device typically uses the <B>Xlat_API_Jmp_To_Proc</B> macro with the service to identify functions that need custom translation. </P>
<P>Virtual devices must adjust V86 segment registers when translating functions. To do so, a virtual device can modify the alternate client registers (such as <B>Client_Alt_DS</B>) when the virtual machine status is executing in protected-mode (the <B>CB_VM_Status</B> field in the control block specifies VMStat_Pm_Exec). When in protected-mode, these registers contain the V86 segment registers and stack pointer. They will contain the protected-mode segment registers and stack pointer when the virtual machine is in V86-mode execution. </P></FONT></BODY></HTML>

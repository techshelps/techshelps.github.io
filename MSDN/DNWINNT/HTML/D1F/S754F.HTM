<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providers and the Provider Interface Layer</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Providers and the Provider Interface Layer</H3><P>For each additional type of network (NetWare, VINES, or some other), you must install a component called a <I>provider</I>. The provider is the component that allows a Windows&nbsp;NT computer to communicate with the network. Windows&nbsp;NT includes a provider for the Windows&nbsp;NT network. It also includes the Client Service for NetWare with Windows NT Workstation and the Gateway Service for NetWare with Windows NT Server, with which a Windows NT computer can connect as a client to a NetWare network. Other provider DLLs are supplied by the appropriate network vendors.</P>
<P>From the application viewpoint, there are two sets of commands that can cause network traffic—uniform naming convention (UNC) commands and WNet commands. </P>
<P>UNC is a method of identifying a shared resource on a network. UNC names start with two backslashes followed by the server name. All other fields in the name are separated by a single backslash. Although it's enough to simply specify the servername to list a server's shared resources, a full UNC name is in this form:</P>
<P><BR></P>
<pre><code><BR>\\server\share\subdirectory\filename</code></pre>
<P>WNet is part of the Win32&reg; API and is specifically designed to allow applications on Windows&nbsp;NT workstations to connect to multiple networks, browse the resources of computers on those networks, and transfer data between computers of various networks. File Manager, for example, uses the WNet interface to provide its network browsing and connection facilities.</P>
<P>As shown in Figure 1.10, the provider layer spans the line between kernel and user modes to manage commands that may cause network traffic. The provider layer also includes two components to route UNC and WNet requests to the appropriate provider:</P>
<UL><LI>The Multiple UNC Provider (MUP) receives UNC commands and locates the redirector that can make a connection to the UNC name. </LI><LI>The Multiple Provider Router (MPR) receives WNet commands and passes the request to each redirector in turn until one is found that can satisfy the request. </LI></UL><P><img src="XRGJ10.gif"></P>
<P>Figure 1.10    Provider Interface Components </P>
<P><B>Note    </B>I/O calls, such as Open, can contain both an UNC name and WNet calls.</P>
<H4><A NAME="sec0"></A>Multiple UNC Provider </H4><P>The MUP is a kernel-mode component whose job is to locate UNC names. When an application sends a command containing UNC names, MUP routes each UNC name to one of the registered UNC providers, including LanmanWorkstation and any others that may be installed. When a provider indicates that it can communicate with the server, MUP sends the remainder of the command to the provider.</P>
<P>When applications make I/O calls that contain UNC names, the MUP directs them to the appropriate redirector file system driver. The call is routed to its redirector based on the handle on the I/O call. </P>
<H4><A NAME="sec1"></A>Multiple Provider Router</H4><P>Through the MPR, Windows&nbsp;NT provides an open interface that enables consistent access to third-party network file systems. The key to the MPR is that all file systems, regardless of type and physical location, are accessible through the same set of file system APIs. </P>
<P>Applications, including File Manager, make file system requests through the Windows&nbsp;NT Win32 API. The MPR ensures that requests are directed to the proper file system. Local file requests are sent to the local disk, remote requests to Windows-based servers are sent to the proper server by the Windows redirector, requests to NetWare-based servers are handled by the NetWare Client for Windows&nbsp;NT and sent to the NetWare server, and so on. </P>
<P>Because applications access all types of files through a single set of APIs, any application can access any kind of server without affecting the user.</P></FONT></BODY></HTML>

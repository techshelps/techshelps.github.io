<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIB II Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>MIB II Objects</H3><P>This MIB is defined in RFC 1213. Windows&nbsp;NT does not implement the egp and snmp parameters, so they are not included in this appendix. No information is included in this appendix for the Transmission group because RFC 1213 has no objects for the group.</P>
<H4><A NAME="sec0"></A>System Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.system (1.3.6.1.2.1.1)</P>
<P CLASS="term1">sysDescr {system 1}</P>
<P CLASS="dt1">A textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software. It is mandatory that this only contain printable ASCII characters.<BR>SYNTAX DisplayString (SIZE (0..255))<BR>ACCESS  read-only</P>
<P CLASS="term1">sysObjectID {system 2}</P>
<P CLASS="dt1">The vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining "what kind of box" is being managed. For example, if vendor "Flintstones, Inc." was assigned the subtree 1.3.6.1.4.1.4242, the vendor could assign the identifier 1.3.6.1.4.1.4242.1.1 to its "Fred Router."<BR>SYNTAX OBJECT IDENTIFIER <BR>ACCESS  read-only</P>
<P CLASS="term1">sysUpTime {system 3}</P>
<P CLASS="dt1">The time (in hundredths of a second) since the network management portion of the system was last re-initialized. <BR>SYNTAX TimeTicks<BR>ACCESS  read-only</P>
<P CLASS="term1">sysContact {system 4}</P>
<P CLASS="dt1">The textual identification of the contact person for this managed node, together with information on how to contact this person.<BR>SYNTAX DisplayString (SIZE (0..255))<BR>ACCESS  read-write</P>
<P CLASS="term1">sysName {system 5}</P>
<P CLASS="dt1">An administratively-assigned name for this managed node.  By convention, this is the node's fully-qualified domain name.<BR>SYNTAX DisplayString (SIZE (0..255))<BR>ACCESS  read-write</P>
<P CLASS="term1">sysLocation {system 6}</P>
<P CLASS="dt1">The physical location of this node (for example, "telephone closet, 3rd floor").<BR>SYNTAX DisplayString (SIZE (0..255))<BR>ACCESS  read-write</P>
<P CLASS="term1">sysServices {system 7}</P>
<P CLASS="dt1">A value that indicates the set of services that this entity primarily offers.</P>
<P CLASS="dt1">The value is a sum. This sum initially takes the value zero. For each layer, L, in the range 1 through 7, for which this node performs transactions, 2 raised to (L–1) is added to the sum. For example, a node that performs primarily routing functions would have a value of 4 (2^(3–1)). In contrast, a node that is a host offering application services would have a value of 72 (2^(4–1) + 2^(7–1)). </P>
<P CLASS="dt1">In the context of the Internet suite of protocols, values should be calculated as follows:</P>
<P CLASS="dt1">    1    physical (such as repeaters)<BR>    2    datalink/subnetwork (for example, bridges)<BR>    3    internet (such as IP gateways)<BR>    4    end-to-end (such as IP hosts)<BR>    5    session (for systems including OSI protocols)<BR>    6    presentation (for systems including OSI protocols)<BR>    7    applications (for example, mail relays)</P>
<P CLASS="dt1">SYNTAX INTEGER (0..127)<BR>ACCESS  read-only</P>
<H4><A NAME="sec1"></A>Interfaces Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.interfaces   (1.3.6.1.2.1.2)</P>
<P CLASS="term1">ifNumber {interfaces 1}</P>
<P CLASS="dt1">The number of network interfaces (regardless of their current state) present on this system.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">ifTable {interfaces 2}</P>
<P CLASS="dt1">A list of interface entries. The number of entries is given by the value of ifNumber.</P>
<P CLASS="dt1">The Interfaces table contains information on the entity's interfaces. Each interface is thought of as being attached to a "subnetwork." This term should not be confused with "subnet," which refers to an addressing partitioning scheme used in the Internet suite of protocols.</P>
<P CLASS="dt1">SYNTAX SEQUENCE OF IfEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ifEntry {ifTable 1}</P>
<P CLASS="dt1">An interface entry containing objects at the subnetwork layer and below for a particular interface.<BR>SYNTAX IfEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ifIndex {ifEntry 1}</P>
<P CLASS="dt1">A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">ifDescr {ifEntry 2}</P>
<P CLASS="dt1">A textual string containing information about the interface. This string should include the name of the manufacturer, the product name, and the version of the hardware interface.<BR>SYNTAX DisplayString (SIZE (0..255))<BR>ACCESS  read-only</P>
<P CLASS="term1">ifType {ifEntry 3}</P>
<P CLASS="dt1">The type of interface, distinguished according to the physical/link protocol(s) immediately "below" the network layer in the protocol stack.<BR>SYNTAX INTEGER {<BR>     other(1),                                none of the following<BR>     regular1822(2),<BR>     hdh1822(3),<BR>     ddn-x25(4),<BR>     rfc877-x25(5),<BR>     ethernet-csmacd(6),<BR>     iso88023-csmacd(7),<BR>     iso88024-tokenBus(8),<BR>     iso88025-tokenRing(9),<BR>     iso88026-man(10),<BR>     starLan(11),<BR>     proteon-10Mbit(12),<BR>     proteon-80Mbit(13),<BR>     hyperchannel(14),<BR>     fddi(15),<BR>     lapb(16),<BR>     sdlc(17),<BR>     ds1(18),                                 T-1<BR>     e1(19),                                european equiv. of T-1<BR>     basicISDN(20),<BR>     primaryISDN(21),               proprietary serial<BR>     propPointToPointSerial(22),<BR>     ppp(23),<BR>     softwareLoopback(24),<BR>     eon(25),                                CLNP over IP [11]<BR>     ethernet-3Mbit(26),<BR>     nsip(27),                            XNS over IP<BR>     slip(28),                            generic SLIP<BR>     ultra(29),                           ULTRA technologies<BR>     ds3(30),                                T-3<BR>     sip(31),                                SMDS<BR>     frame-relay(32)<BR>     }<BR>ACCESS  read-only</P>
<P CLASS="term1">ifMtu {ifEntry 4}</P>
<P CLASS="dt1">The size of the largest datagram that can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">ifSpeed {ifEntry 5}</P>
<P CLASS="dt1">An estimate of the interface's current bandwidth in bits per second. For interfaces that do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.<BR>SYNTAX Gauge<BR>ACCESS  read-only</P>
<P CLASS="term1">ifPhysAddress {ifEntry 6}</P>
<P CLASS="dt1">The interface's address at the protocol layer immediately "below" the network layer in the protocol stack. For interfaces that do not have such an address (such as a serial line), this object should contain an octet string of zero length.<BR>SYNTAX PhysAddress<BR>ACCESS  read-only</P>
<P CLASS="term1">ifAdminStatus {ifEntry 7}</P>
<P CLASS="dt1">The desired state of the interface. The testing (3) state indicates that no operational packets can be passed.<BR>SYNTAX INTEGER {<BR>     up(1),            ready to pass packets<BR>     down(2),<BR>     testing(3)      in some test mode<BR>     }<BR>ACCESS  read-write</P>
<P CLASS="term1">ifOperStatus {ifEntry 8}</P>
<P CLASS="dt1">The current operational state of the interface. The testing (3) state indicates that no operational packets can be passed.<BR>SYNTAX INTEGER {<BR>     up(1),            ready to pass packets<BR>     down(2),<BR>     testing(3)       in some test mode<BR>     }<BR>ACCESS  read-only</P>
<P CLASS="term1">ifLastChange {ifEntry 9}</P>
<P CLASS="dt1">The value of sysUpTime at the time the interface entered its current operational state.  If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.<BR>SYNTAX TimeTicks<BR>ACCESS  read-only</P>
<P CLASS="term1">ifInOctets {ifEntry 10}</P>
<P CLASS="dt1">The total number of octets received on the interface, including framing characters. <BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifInUcastPkts {ifEntry 11}</P>
<P CLASS="dt1">The number of subnetwork-unicast packets delivered to a higher-layer protocol. <BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifInNUcastPkts {ifEntry 12}</P>
<P CLASS="dt1">The number of non-unicast (that is, subnetwork-broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifInDiscards {ifEntry 13}</P>
<P CLASS="dt1">The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifInErrors {ifEntry 14}</P>
<P CLASS="dt1">The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifInUnknownProtos {ifEntry 15}</P>
<P CLASS="dt1">The number of packets received via the interface that were discarded because of an unknown or unsupported protocol.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifOutOctets {ifEntry 16}</P>
<P CLASS="dt1">The total number of octets transmitted out of the interface, including framing characters.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifOutUcastPkts {ifEntry 17}</P>
<P CLASS="dt1">The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifOutNUcastPkts {ifEntry 18}</P>
<P CLASS="dt1">The total number of packets that higher-level protocols requested be transmitted to a non-unicast (that is, a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifOutDiscards {ifEntry 19}</P>
<P CLASS="dt1">The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifOutErrors {ifEntry 20}</P>
<P CLASS="dt1">The number of outbound packets that could not be transmitted because of errors.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ifOutQLen {ifEntry 21}</P>
<P CLASS="dt1">The length of the output packet queue (in packets).<BR>SYNTAX Gauge<BR>ACCESS  read-only</P>
<P CLASS="term1">ifSpecific {ifEntry 22}</P>
<P CLASS="dt1">A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT IDENTIFIER {0 0}, which is a syntactically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.<BR>SYNTAX OBJECT IDENTIFIER<BR>ACCESS  read-only</P>
<H4><A NAME="sec2"></A>Address Translation Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.at    (1.3.6.1.2.1.3)</P>
<P>Implementation of the Address Translation group is mandatory for all systems. However, this group is deprecated by MIB-II. That is, it is being included solely for compatibility with MIB-I nodes, and will most likely be excluded from MIB-III nodes. From MIB-II and onwards, each network protocol group contains its own address translation tables. </P>
<P CLASS="term1">atTable {at 1}</P>
<P CLASS="dt1">The Address Translation tables contain the NetworkAddress to physical address equivalences. Some interfaces do not use translation tables for determining address equivalences (for example, DDN-X.25 has an algorithmic method); if all interfaces are of this type, then the Address Translation table is empty—that is, it has zero entries.<BR>SYNTAX SEQUENCE OF AtEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">atEntry {atTable 1}</P>
<P CLASS="dt1">Each entry contains one NetworkAddress to physical address equivalence.<BR>SYNTAX AtEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">atIfIndex {atEntry 1}</P>
<P CLASS="dt1">The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">atPhysAddress {atEntry 2}</P>
<P CLASS="dt1">The media-dependent physical address. Setting this object to a null string (one of zero length) has the effect of invalidating the corresponding entry in the atTable object. That is, it effectively disassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant atPhysAddress object.<BR>SYNTAX PhysAddress<BR>ACCESS  read-write</P>
<P CLASS="term1">atNetAddress {atEntry 3}</P>
<P CLASS="dt1">The NetworkAddress (for example, the IP address) corresponding to the media-dependent physical address.<BR>SYNTAX NetworkAddress<BR>ACCESS  read-write</P>
<H4><A NAME="sec3"></A>IP Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.ip    (1.3.6.1.2.1.4)</P>
<P CLASS="term1">ipForwarding {ip 1}</P>
<P CLASS="dt1">The indication of whether this entity is acting as an IP gateway in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP gateways forward datagrams, but IP hosts do not (except those source-routed via the host). For some managed nodes, this object may take on only a subset of the values possible. Accordingly, it is appropriate for an agent to return a "badValue" response if a management station attempts to change this object to an inappropriate value.<BR>SYNTAX INTEGER {<BR>     forwarding(1),                  acting as a gateway<BR>     not-forwarding(2)            NOT acting as a gateway<BR>     }<BR>ACCESS read-write<BR>STATUS  mandatory</P>
<P CLASS="term1">ipDefaultTTL {ip 2}</P>
<P CLASS="dt1">The default value inserted into the Time-To-Live field of the IP header of datagrams originated at this entity whenever a TTL value is not supplied by the transport layer protocol.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipInReceives {ip 3}</P>
<P CLASS="dt1">The total number of input datagrams received from interfaces, including those received in error.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipInHdrErrors {ip 4}</P>
<P CLASS="dt1">The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipInAddrErrors {ip 5}</P>
<P CLASS="dt1">The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (for example, 0.0.0.0) and addresses of unsupported Classes (such as Class E). For entities that are not IP gateways and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipForwDatagrams {ip 6}</P>
<P CLASS="dt1">The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities that do not act as IP gateways, this counter will include only those packets that were Source-Routed via this entity, and the Source-Route option processing was successful.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipInUnknownProtos {ip 7}</P>
<P CLASS="dt1">The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipInDiscards {ip 8}</P>
<P CLASS="dt1">The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but that were discarded (for example, for lack of buffer space). This counter does not include any datagrams discarded while awaiting reassembly.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipInDelivers {ip 9}</P>
<P CLASS="dt1">The total number of input datagrams successfully delivered to IP user-protocols (including ICMP).<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipOutRequests {ip 10}</P>
<P CLASS="dt1">The total number of IP datagrams that local IP user-protocols (including ICMP) supplied to IP in requests for transmission. This counter does not include any datagrams counted in ipForwDatagrams.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipOutDiscards {ip 11}</P>
<P CLASS="dt1">The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but that were discarded (for example, for lack of buffer space). This counter includes datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipOutNoRoutes {ip 12}</P>
<P CLASS="dt1">The number of IP datagrams discarded because no route could be found to transmit them to their destination. This counter includes any packets counted in ipForwDatagrams that meet this "no-route" criterion, which includes any datagrams that a host cannot route because all of its default gateways are down.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipReasmTimeout {ip 13}</P>
<P CLASS="dt1">The maximum number of seconds that received fragments are held while they are awaiting reassembly at this entity.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">ipReasmReqds {ip 14}</P>
<P CLASS="dt1">The number of IP fragments received that needed to be reassembled at this entity.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipReasmOKs {ip 15}</P>
<P CLASS="dt1">The number of IP datagrams successfully reassembled.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipReasmFails {ip 16}</P>
<P CLASS="dt1">The number of failures detected by the IP reassembly algorithm (for whatever reason, such as timed out or errors). This is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipFragOKs {ip 17}</P>
<P CLASS="dt1">The number of IP datagrams that have been successfully fragmented at this entity.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipFragFails {ip 18}</P>
<P CLASS="dt1">The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be (for example, because their Don't Fragment flag was set).<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipFragCreates {ip 19}</P>
<P CLASS="dt1">The number of IP datagram fragments that have been generated as a result of fragmentation at this entity.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">ipAddrTable {ip 20}</P>
<P CLASS="dt1">The table of addressing information relevant to this entity's IP addresses.<BR>SYNTAX SEQUENCE OF IpAddrEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ipAddrEntry {ipAddrTable 1}</P>
<P CLASS="dt1">The addressing information for one of this entity's IP addresses.<BR>SYNTAX IpAddrEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ipAdEntAddr {ipAddrEntry 1}</P>
<P CLASS="dt1">The IP address to which this entry's addressing information pertains.<BR>SYNTAX IpAddress<BR>ACCESS  read-only</P>
<P CLASS="term1">ipAdEntIfIndex {ipAddrEntry 2}</P>
<P CLASS="dt1">The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">ipAdEntNetMask {ipAddrEntry 3}</P>
<P CLASS="dt1">The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.<BR>SYNTAX IpAddress<BR>ACCESS  read-only</P>
<P CLASS="term1">ipAdEntBcastAddr {ipAddrEntry 4}</P>
<P CLASS="dt1">The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">ipAdEntReasmMaxSize {ipAddrEntry 5}</P>
<P CLASS="dt1">The size of the largest IP datagram that this entity can reassemble from incoming IP fragmented datagrams received on this interface.<BR>SYNTAX INTEGER (0..65535)<BR>ACCESS  read-only</P>
<P CLASS="term1">ipRouteTable {ip 21}</P>
<P CLASS="dt1">This entity's IP Routing table.<BR>SYNTAX SEQUENCE OF IpRouteEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ipRouteEntry {ipRouteTable 1}</P>
<P CLASS="dt1">A route to a particular destination.<BR>SYNTAX IpRouteEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ipRouteDest {ipRouteEntry 1}</P>
<P CLASS="dt1">The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table-access mechanisms defined by the network management protocol in use.<BR>SYNTAX IpAddress<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteIfIndex {ipRouteEntry 2}</P>
<P CLASS="dt1">The index value that uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteMetric1 {ipRouteEntry 3}</P>
<P CLASS="dt1">The primary routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteMetric2 {ipRouteEntry 4}</P>
<P CLASS="dt1">An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteMetric3 {ipRouteEntry 5}</P>
<P CLASS="dt1">An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteMetric4 {ipRouteEntry 6}</P>
<P CLASS="dt1">An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteNextHop {ipRouteEntry 7}</P>
<P CLASS="dt1">The IP address of the next hop of this route. (In the case of a route bound to an interface that is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)<BR>SYNTAX IpAddress<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteType {ipRouteEntry 8}</P>
<P CLASS="dt1">The type of route. The values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the IP architecture. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipRouteTable object. That is, it effectively disassociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipRouteType object.<BR>SYNTAX INTEGER {<BR>     other(1),                none of the following<BR>     invalid(2),           an invalidated route<BR>     direct(3),                route to directly connected (sub-)network<BR>     indirect(4)           route to a non-local host/network/sub-network<BR>     }<BR>ACCESS read-write </P>
<P CLASS="term1">ipRouteProto {ipRouteEntry 9}</P>
<P CLASS="dt1">The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.<BR>SYNTAX INTEGER {<BR>     other(1),            none of the following<BR>     local(2),           non-protocol information, such as manually configured entries<BR>     netmgmt(3),     set via a network management protocol<BR>     icmp(4),           obtained via ICMP, for example, Redirect;<BR>                         the remaining values are all gateway routing protocols<BR>     egp(5),<BR>     ggp(6),<BR>     hello(7),<BR>     rip(8),<BR>     is-is(9),<BR>     es-is(10),<BR>     ciscoIgrp(11),<BR>     bbnSpfIgp(12),<BR>     ospf(13),<BR>     bgp(14)<BR>     }<BR>ACCESS  read-only</P>
<P CLASS="term1">ipRouteAge {ipRouteEntry 10}</P>
<P CLASS="dt1">The number of seconds since this route was last updated or otherwise determined to be correct. No semantics of "too old" can be implied except through knowledge of the routing protocol by which the route was learned.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteMask {ipRouteEntry 11}</P>
<P CLASS="dt1">Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ipRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the ipRouteMask by determining whether the value of the correspondent ipRouteDest field belongs to a class A, B, or C network, and then using the corresponding mask.</P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="65pt" VALIGN="TOP"><COL WIDTH="5pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>network</B></P></TD><TD COLSPAN="2" VALIGN="TOP"><P><B>mask</B></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>class A</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>255.0.0.0</P></TD></TR><TR><TD VALIGN="TOP"><P>class B</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>255.255.0.0</P></TD></TR><TR><TD VALIGN="TOP"><P>class C</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>255.255.255.0</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P CLASS="dt1">If the value of the ipRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. All IP routing subsystems implicitly use this mechanism.<BR>SYNTAX IpAddress<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRouteMetric5 {ipRouteEntry 12}</P>
<P CLASS="dt1">An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.<BR>SYNTAX INTEGER<BR>ACCESS read-write</P>
<P CLASS="term1">ipRouteInfo {ipRouteEntry 13}</P>
<P CLASS="dt1">A reference to MIB definitions specific to the particular routing protocol that is responsible for this route, as determined by the value specified in the route's ipRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER {0 0}, which is a syntactically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.<BR>SYNTAX OBJECT IDENTIFIER<BR>ACCESS  read-only</P>
<P CLASS="term1">ipNetToMediaTable {ip 22}</P>
<P CLASS="dt1">The IP Address Translation table used for mapping from IP addresses to physical addresses. <BR>SYNTAX SEQUENCE OF IpNetToMediaEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ipNetToMediaEntry {ipNetToMediaTable 1}</P>
<P CLASS="dt1">Each entry contains one IpAddress to "physical" address equivalence.<BR>SYNTAX IpNetToMediaEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">ipNetToMediaIfIndex {ipNetToMediaEntry 1}</P>
<P CLASS="dt1">The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.<BR>SYNTAX INTEGER<BR>ACCESS  read-write</P>
<P CLASS="term1">ipNetToMediaPhysAddress {ipNetToMediaEntry 2}</P>
<P CLASS="dt1">The media-dependent physical address.<BR>SYNTAX PhysAddress<BR>ACCESS  read-write</P>
<P CLASS="term1">ipNetToMediaNetAddress {ipNetToMediaEntry 3}</P>
<P CLASS="dt1">The IpAddress corresponding to the media-dependent physical address.<BR>SYNTAX IpAddress<BR>ACCESS  read-write</P>
<P CLASS="term1">ipNetToMediaType {ipNetToMediaEntry 4}</P>
<P CLASS="dt1">The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipNetToMediaTable. That is, it effectively disassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipNetToMediaType object. <BR>SYNTAX INTEGER {<BR>     other(1),                 none of the following<BR>     invalid(2),             an invalidated mapping<BR>     dynamic(3),<BR>     static(4)<BR>     }<BR>ACCESS  read-write</P>
<P CLASS="term1">ipRoutingDiscards {ip 23}</P>
<P CLASS="dt1">The number of routing entries that were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free up buffer space for other routing entries.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<H4><A NAME="sec4"></A>ICMP Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.icmp    (1.3.6.1.2.1.5)</P>
<P CLASS="term1">icmpInMsgs {icmp 1}</P>
<P CLASS="dt1">The total number of ICMP messages that the entity received. Note that this counter includes all those counted by icmpInErrors.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInErrors {icmp 2}</P>
<P CLASS="dt1">The number of ICMP messages that the entity received but determined as having ICMP-specific errors (bad ICMP checksums, bad length, etc.).<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInDestUnreachs {icmp 3}</P>
<P CLASS="dt1">The number of ICMP Destination Unreachable messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInTimeExcds {icmp 4}</P>
<P CLASS="dt1">The number of ICMP Time Exceeded messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInParmProbs {icmp 5}</P>
<P CLASS="dt1">The number of ICMP Parameter Problem messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInSrcQuenchs {icmp 6} </P>
<P CLASS="dt1">The number of ICMP Source Quench messages received.<BR>SYNTAX Counter <BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInRedirects {icmp 7}</P>
<P CLASS="dt1">The number of ICMP Redirect messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInEchos {icmp 8}</P>
<P CLASS="dt1">The number of ICMP Echo (request) messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInEchoReps {icmp 9}</P>
<P CLASS="dt1">The number of ICMP Echo Reply messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInTimestamps {icmp 10}</P>
<P CLASS="dt1">The number of ICMP Timestamp (request) messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInTimestampReps {icmp 11}</P>
<P CLASS="dt1">The number of ICMP Timestamp Reply messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInAddrMasks {icmp 12}</P>
<P CLASS="dt1">The number of ICMP Address Mask Request messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpInAddrMaskReps {icmp 13}</P>
<P CLASS="dt1">The number of ICMP Address Mask Reply messages received.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutMsgs {icmp 14}</P>
<P CLASS="dt1">The total number of ICMP messages that this entity attempted to send. This counter includes all those messages counted by icmpOutErrors.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutErrors {icmp 15}</P>
<P CLASS="dt1">The number of ICMP messages that this entity did not send due to problems discovered within ICMP such as a lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram. In some implementations there may be no types of error that contribute to this counter's value.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutDestUnreachs {icmp 16}</P>
<P CLASS="dt1">The number of ICMP Destination Unreachable messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutTimeExcds {icmp 17}</P>
<P CLASS="dt1">The number of ICMP Time Exceeded messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutParmProbs {icmp 18}</P>
<P CLASS="dt1">The number of ICMP Parameter Problem messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutSrcQuenchs {icmp 19}</P>
<P CLASS="dt1">The number of ICMP Source Quench messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutRedirects {icmp 20}</P>
<P CLASS="dt1">The number of ICMP Redirect messages sent. For a host, this object will always be zero, since hosts do not send redirects.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutEchos {icmp 21}</P>
<P CLASS="dt1">The number of ICMP Echo (request) messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutEchoReps {icmp 22}</P>
<P CLASS="dt1">The number of ICMP Echo Reply messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutTimestamps {icmp 23}</P>
<P CLASS="dt1">The number of ICMP Timestamp (request) messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutTimestampReps {icmp 24}</P>
<P CLASS="dt1">The number of ICMP Timestamp Reply messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutAddrMasks {icmp 25}</P>
<P CLASS="dt1">The number of ICMP Address Mask Request messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">icmpOutAddrMaskReps {icmp 26}</P>
<P CLASS="dt1">The number of ICMP Address Mask Reply messages sent.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<H4><A NAME="sec5"></A>TCP Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.tcp    (1.3.6.1.2.1.6)</P>
<P>Instances of object types that represent information about a particular TCP connection are transient; they persist only as long as the connection in question.</P>
<P CLASS="term1">tcpRtoAlgorithm {tcp 1}</P>
<P CLASS="dt1">The algorithm used to determine the timeout value used for retransmitting unacknowledged octets.<BR>SYNTAX INTEGER {<BR>     other(1),                    none of the following<BR>     constant(2),                a constant rto<BR>     rsre(3),                      MIL-STD-1778, Appendix B<BR>     vanj(4)                       Van Jacobson's algorithm [10]<BR>     }<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpRtoMin {tcp 2}</P>
<P CLASS="dt1">The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the LBOUND quantity described in RFC 793. <BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpRtoMax {tcp 3}</P>
<P CLASS="dt1">The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the UBOUND quantity described in RFC 793.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpMaxConn {tcp 4}</P>
<P CLASS="dt1">The limit on the total number of TCP connections that the entity can support. In entities where the maximum number of connections is dynamic, this object should contain the value -1.<BR>SYNTAX INTEGER<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpActiveOpens {tcp 5}</P>
<P CLASS="dt1">The number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpPassiveOpens {tcp 6}</P>
<P CLASS="dt1">The number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpAttemptFails {tcp 7}</P>
<P CLASS="dt1">The number of times TCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpEstabResets {tcp 8}</P>
<P CLASS="dt1">The number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpCurrEstab {tcp 9}</P>
<P CLASS="dt1">The number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.<BR>SYNTAX Gauge<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpInSegs {tcp 10}</P>
<P CLASS="dt1">The total number of segments received, including those received in error. This count includes segments received on currently established connections.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpOutSegs {tcp 11}</P>
<P CLASS="dt1">The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpRetransSegs {tcp 12}</P>
<P CLASS="dt1">The total number of segments retransmitted—that is, the number of TCP segments transmitted containing one or more previously transmitted octets.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpConnTable {tcp 13}</P>
<P CLASS="dt1">A table containing TCP connection-specific information.<BR>SYNTAX SEQUENCE OF TcpConnEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">tcpConnEntry {tcpConnTable 1}</P>
<P CLASS="dt1">Information about a particular current TCP connection. An object of this type is transient—it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.<BR>SYNTAX TcpConnEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">tcpConnState {tcpConnEntry 1}</P>
<P CLASS="dt1">The state of this TCP connection.</P>
<P CLASS="dt1">The only value that may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a "badValue" response if a management station attempts to set this object to any other value.</P>
<P CLASS="dt1">If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection.</P>
<P CLASS="dt1">As an implementation-specific option, an RST segment may be sent from the managed node to the other TCP endpoint. (However, RST segments are not sent reliably.)</P>
<P CLASS="dt1">SYNTAX INTEGER {<BR>     closed(1),<BR>     listen(2),<BR>     synSent(3),<BR>     synReceived(4),<BR>     established(5),<BR>     finWait1(6),<BR>     finWait2(7),<BR>     closeWait(8),<BR>     lastAck(9),<BR>     closing(10),<BR>     timeWait(11),<BR>     deleteTCB(12)<BR>}<BR>ACCESS  read-write</P>
<P CLASS="term1">tcpConnLocalAddress {tcpConnEntry 2}</P>
<P CLASS="dt1">The local IP address for this TCP connection. In the case of a connection in the LISTEN state that is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.<BR>SYNTAX IpAddress<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpConnLocalPort {tcpConnEntry 3}</P>
<P CLASS="dt1">The local port number for this TCP connection.<BR>SYNTAX INTEGER (0..65535)<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpConnRemAddress {tcpConnEntry 4}</P>
<P CLASS="dt1">The remote IP address for this TCP connection.<BR>SYNTAX IpAddress<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpConnRemPort {tcpConnEntry 5}</P>
<P CLASS="dt1">The remote port number for this TCP connection.<BR>SYNTAX INTEGER (0..65535)<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpInErrs {tcp 14}</P>
<P CLASS="dt1">The total number of segments received in error (such as, bad TCP checksums).<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">tcpOutRsts {tcp 15}</P>
<P CLASS="dt1">The number of TCP segments sent containing the RST flag.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<H4><A NAME="sec6"></A>UDP Parameters </H4><P>The object name and object identifier for this group is:<BR>     iso.org.dod.internet.mgmt.mib-2.udp    (1.3.6.1.2.1.6)</P>
<P CLASS="term1">udpInDatagrams  {udp 1}</P>
<P CLASS="dt1">The total number of UDP datagrams delivered to UDP users.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">udpNoPorts {udp 2}</P>
<P CLASS="dt1">The total number of received UDP datagrams for which there was no application at the destination port.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">udpInErrors {udp 3}</P>
<P CLASS="dt1">The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">udpOutDatagrams  {udp 4}</P>
<P CLASS="dt1">The total number of UDP datagrams sent from this entity.<BR>SYNTAX Counter<BR>ACCESS  read-only</P>
<P CLASS="term1">udpTable {udp 5}</P>
<P CLASS="dt1">A table containing UDP listener information.<BR>SYNTAX SEQUENCE OF UdpEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">udpEntry {udpTable 1}</P>
<P CLASS="dt1">Information about a particular current UDP listener.<BR>SYNTAX UdpEntry<BR>ACCESS  not-accessible</P>
<P CLASS="term1">udpLocalAddress {udpEntry 1}</P>
<P CLASS="dt1">The local IP address for this UDP listener. In the case of a UDP listener that is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used.<BR>SYNTAX IpAddress<BR>ACCESS  read-only</P>
<P CLASS="term1">udpLocalPort {udpEntry 2}</P>
<P CLASS="dt1">The local port number for this UDP listener.<BR>SYNTAX INTEGER (0..65535)<BR>ACCESS  read-only</P>
<P></P></FONT></BODY></HTML>

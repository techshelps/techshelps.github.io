<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DUMPCHK.EXE</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>DUMPCHK.EXE</H3><P>DUMPCHK.EXE is a command-line utility that you can  use to verify that a dump file has been created correctly. DUMPCHK does not require access to symbols.</P>
<P>DUMPCHK has the following command line parameters:</P>
<P CLASS="syn"><B>dumpchk</B> <I>[options] CrashDumpFile</I></P>
<P>where the options are as follows:</P>
<P CLASS="term1"><B>-?</B></P>
<P CLASS="dt1">Displays the command syntax.</P>
<P CLASS="term1"><B>-p</B></P>
<P CLASS="dt1">Prints the header only (with no validation).</P>
<P CLASS="term1"><B>-v</B></P>
<P CLASS="dt1">Specifies verbose mode.</P>
<P CLASS="term1"><B>-q</B></P>
<P CLASS="dt1">Performs a quick test.</P>
<P></P>
<P>DUMPCHK displays some basic information from the dump file and then verifies all the virtual and physical addresses in the memory dump. If any errors are found in the dump file, it reports them. The following is an example of the output of a DUMPCHK command: </P>
<P><BR></P>
<pre><code>Filename . . . . . . .memory.dmp
Signature. . . . . . .PAGE
ValidDump. . . . . . .DUMP
MajorVersion . . . . .free system
MinorVersion . . . . .807
DirectoryTableBase . .0x00030000
PfnDataBase. . . . . .0xffb7e000
PsLoadedModuleList . .0x80196d40
PsActiveProcessHead. .0x80196c38
MachineImageType . . .i386
NumberProcessors . . .1
BugCheckCode . . . . .0xc000021a
BugCheckParameter1 . .0xe17b7b68
BugCheckParameter2 . .0xc0000005
BugCheckParameter3 . .0x00000000
BugCheckParameter4 . .0x00000000

ExceptionCode. . . . .0x80000003
ExceptionFlags . . . .0x00000001
ExceptionAddress . . .0x8015f015

NumberOfRuns . . . . .0x3
NumberOfPages. . . . .0x3f9e
Run #1
  BasePage . . . . . .0x1
  PageCount. . . . . .0x9e
Run #2
  BasePage . . . . . .0x100
  PageCount. . . . . .0xec0
Run #3
  BasePage . . . . . .0x1000
  PageCount. . . . . .0x3040

**************
**************--&gt; Validating the integrity of the PsLoadedModuleList
**************

**************
**************--&gt; Performing a complete check (^C to end)
**************
**************
**************--&gt; Validating all physical addresses
**************
**************
**************--&gt; Validating all virtual addresses
**************</code></pre>
<P>In this example, the most important information (from a debugging standpoint) is the following:</P>
<P><BR></P>
<pre><code>MajorVersion . . . . .free system
MinorVersion . . . . .807
MachineImageType . . .i386
NumberProcessors . . .1
BugCheckCode . . . . .0xc000021a
BugCheckParameter1 . .0xe17b7b68
BugCheckParameter2 . .0xc0000005
BugCheckParameter3 . .0x00000000
BugCheckParameter4 . .0x00000000
</code></pre>
<P>This information can be used to determine what STOP error occurred and, to a certain extent, what version of Windows&nbsp;NT was in use. </P></FONT></BODY></HTML>

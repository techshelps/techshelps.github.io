<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Starting the Debugger</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Starting the Debugger</H3><P>The Kernel debuggers are started from the command line, using the name of the executable as the command. They support the following command-line options:</P>
<P CLASS="term1"><B>-b</B></P>
<P CLASS="dt1">Causes the debugger to stop execution on target computer as soon as possible, by causing a debug breakpoint (INT 3).</P>
<P CLASS="term1"><B>-c</B></P>
<P CLASS="dt1">Causes the debugger to request a resync on connect. Resynchronization ensures that the host and target computers are communicating in sequence.</P>
<P CLASS="term1"><B>-m</B></P>
<P CLASS="dt1">Causes the debugger to monitor modem control lines. The debugger is only active when the CD (carrier detect) line is active; otherwise, the debugger is in terminal mode.</P>
<P CLASS="term1"><B>-n</B></P>
<P CLASS="dt1">Causes symbols to be loaded immediately, rather than in a deferred mode.</P>
<P CLASS="term1"><B>-v</B></P>
<P CLASS="dt1">Verbose mode; displays more information about such things as when symbols are loaded. </P>
<P CLASS="term1"><B>-x</B></P>
<P CLASS="dt1">Causes the debugger to break in when an exception first occurs, rather than letting the application or module that caused the exception deal with it.</P>
<P></P>
<P>The most commonly used switches are <B>-v</B> (verbose) and <B>-m</B> (for modem debugging). </P>
<P>Generally, the best way to start the debugger is to create a batch file with the necessary commands to set the environment variables followed by the command to start the correct KD debugger.  </P>
<P>If the host computer is on a network, you might choose to use the REMOTE.EXE utility included with the <I>Windows&nbsp;NT Resource Kit</I> to start the debugger. REMOTE.EXE is a server/client utility that provides remote network access via named pipes to applications that use STDIN and STDOUT for input and output. This allows users at other computers on the network to connect to your Kernel debugging session and either view the debugging information or enter commands themselves. The syntax for starting the server end of the remote session is as follows:</P>
<P CLASS="syn"><B>remote /s</B> "<I>command</I>" <I>Unique_Id</I> [<B>/f</B> <I>foreground_color</I>|<B>/b</B> <I>background_color</I>]</P>
<P>For example:</P>
<P><BR></P>
<pre><code>REMOTE /S "i386kd -v" debug
</code></pre>
<P>The server session is ended with <B>@K</B>.</P>
<P>To interact with this session from some other computer, use the <B>remote /c </B>command. The syntax of this command is as follows:</P>
<P CLASS="syn"><B>remote /c</B> <I>ServerName</I> <I>Unique_Id</I> [/<B>l</B> <I>lines_to_get</I>|/<B>f</B> <I>foreground_color</I>|/<B>b</B> <I>background_color</I>]</P>
<P>To exit from the remote session, leaving the debugger running on the remote system, use <B>@Q</B>.</P>
<P>For example, if a session with id <B>debug</B> had been started on the computer \\Server1 by using the <B>remote /s</B> command, you could connect to it with the command</P>
<P><BR></P>
<pre><code>REMOTE /C server1 debug
</code></pre>
<P>For more information on using the remote command, see the RKTOOLS. HLP file on the <I>Windows&nbsp;NT Resource Kit</I> CD. </P>
<H4><A NAME="sec0"></A>Examples</H4><P>Let us suppose the following:</P>
<UL><LI> <FONT FACE="symbol">•</FONT>    Debugging needs to take place over a null modem serial cable on COM2.</LI><LI> <FONT FACE="symbol">•</FONT>    The symbols are on a CD on the E drive.</LI><LI> <FONT FACE="symbol">•</FONT>    A log file called DEBUG.LOG is to be created in C:\TEMP. </LI></UL><P></P>
<P>A sample batch file might be as follows:</P>
<P><BR></P>
<pre><code>REM Local debugging batch file
set _NT_DEBUG_PORT=com2
set _NT_DEBUG_BAUD_RATE=19200
set _NT_SYMBOL_PATH=e:\support\debug\i386\symbols
SET _NT_LOG_FILE_OPEN=c:\temp\debug.log
remote /s "i386kd -v" debug
</code></pre>
<P>The last line of the batch file uses the REMOTE utility to start the debugger. This lets people on Windows&nbsp;NT computers who are networked to the host computer (and who have a copy of REMOTE.EXE) connect to the debug session using the following command:</P>
<P CLASS="syn"><B>remote /c</B> <I>computername</I> <B>debug</B></P>
<P>where <I>computername</I> is the name of the host computer. </P>
<P>To allow remote debugging, begin with the batch file in the previous example, change the baud rate to 9600, and add the <B>-m</B> switch to the last line. The result is as follows: </P>
<P><BR></P>
<pre><code>REM remote debugging batch file
set _NT_DEBUG_PORT=com2
set _NT_DEBUG_BAUD_RATE=9600
set _NT_SYMBOL_PATH=e:\support\debug\i386\symbols
SET _NT_LOG_FILE_OPEN=c:\temp\debug.log
remote /s "i386kd -v -m" debug
</code></pre>
<P>The batch file should be executed from the directory that contains the debugger files.</P>
<P>When you start the debugger, one of two screens appears, depending upon whether you are doing local debugging or remote debugging. </P>
<P>When doing local debugging, the following screen appears:</P>
<P><BR></P>
<pre><code>**************************************
***********     REMOTE    ************
***********     SERVER    ************
**************************************
To Connect: Remote /C BANSIDHE debug

Microsoft(R) Windows&nbsp;NT Kernel Debugger
Version 3.5
(C) 1991-1994 Microsoft Corp.

Symbol search path is:
KD: waiting to connect...
</code></pre>
<P>Once at this screen, you can use ctrl+c to break in to the target computer, if it is still running. If the target is currently stopped at a blue screen, you will most likely break in automatically. If you have any problems, try using a ctrl+r to force a resync between the host and target computers. </P>
<P>If you are doing remote debugging, the same screen appears, with the following extra line:</P>
<P><BR></P>
<pre><code>KD: No carrier detect - in terminal mode
</code></pre>
<P>In this case, the debugger is in terminal mode, and you can issue any of the standard AT commands to your modem. Begin by sending commands to disable hardware compression, flow control, and error correction. These commands will vary from modem to modem, so consult your modem documentation. Once you connect to the target system and have a carrier detect signal, you are returned to the debugger. </P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Manager</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Object Manager</H3><P>Objects are run-time instances of a particular object type that can be manipulated by an operating system process. An <I>object type</I> includes a system-defined data type, a list of operations that can be performed upon it (such as wait, create, or cancel), and a set of object attributes. <I>Object Manager</I> is the part of the Windows&nbsp;NT Executive that provides uniform rules for retention, naming, and security of objects. </P>
<P>Before a process can manipulate a Windows&nbsp;NT object, it must first acquire a handle to the object. An <I>object handle</I> includes access control information and a pointer to the object itself. All object handles are created through the Object Manager.</P>
<P><B>Note</B>   Thus, the same routines that are used to create a file handle can be used to create an object handle. </P>
<P>Like other Windows&nbsp;NT components, the Object Manager is extensible so that new object types can be defined as technology grows and changes.</P>
<P>In addition, the Object Manager manages the global <I>namespace</I> for Windows&nbsp;NT and tracks the creation and use of objects by any process. This namespace is used to access all named objects that are contained in the local computer environment. Some of the objects that can have names include the following:</P>
<UL><LI>     Directory objects</LI><LI>     Object type objects</LI><LI>     Symbolic link objects</LI><LI>     Semaphore and event objects</LI><LI>     Process and thread objects</LI><LI>     Section and segment objects</LI><LI>     Port objects</LI><LI>     File objects</LI></UL><P>The object name space is modeled after a hierarchical file system, where directory names in a path are separated by a backslash (\). You can see object names in this form, for example, when you double-click entries in the Event Viewer log, as shown in the following illustration.</P>
<P><img src="XRGA03.gif"></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Subjects and Impersonation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Subjects and Impersonation</H3><P>One objective of the Windows&nbsp;NT security model is to ensure that the programs that a user runs have no more access to objects than the user does. That is, if a user is granted only read access to a file, then when he or she runs a program, that program cannot write to the file. The program, like the user, is granted only read permission. </P>
<P>A <I>subject</I> is the combination of the user's access token plus the program acting on the user's behalf. Windows&nbsp;NT uses subjects to track and manage permissions for the programs each user runs. </P>
<P>When a program or process runs on the user's behalf, it is said to be running in the s<I>ecurity context</I> of that user. The security context controls what access the subject has to objects or system services. </P>
<P>To accommodate the client-server model of Windows&nbsp;NT, there are two classes of subjects within the Windows&nbsp;NT security architecture:</P>
<UL><LI>     A <I>simple subject</I> is a process that was assigned a security context when the corresponding user logged on. It is not acting in the capacity of a protected server, which may have other subjects as clients.</LI><LI>     A <I>server subject</I> is a process implemented as a protected server (such as the Win32 subsystem), and it does have other subjects as clients. In this role, a server subject typically has the security context of those clients available for use when acting on their behalf.</LI></UL><P>In general, when a subject calls an object service through a protected subsystem, the subject's token is used within the service to determine who made the call and to decide whether the caller has sufficient access authority to perform the requested action.</P>
<P>Windows&nbsp;NT allows one process to take on the security attributes of another through a technique called <I>impersonation</I>. For example, a server process typically impersonates a client process to complete a task involving objects to which the server does not normally have access.</P>
<P>In the scenario shown in Figure 2.5, a client is accessing an object on a Windows&nbsp;NT server.</P>
<P><img src="XRGU06.gif"></P>
<P>Figure 2.4    Server Subject Security Context</P>
<P>The first thread in the process is a control thread. It is waiting to receive RPC  calls via a named pipe. This thread is not impersonating another process, so any access validation to which Thread 1 is subjected will be carried out against the process's primary token. </P>
<P>The second thread in the process is currently handling a call from a client. This thread handles the client's call by temporarily using the client's access token to run with that client's access permissions (that is, the client's security context). While impersonating the client, any access validation to which Thread 2 is subjected is carried out in the security context of the client. </P>
<P>The third thread in this scenario is an idle worker thread that is not impersonating any other process.</P>
<P>The following illustration shows an audited event in which impersonation was used. (Use the Event Viewer to see this type of information for your system.) Here, information for both the primary user and client user is recorded in the security log.</P>
<P><img src="XRGU07.gif"></P></FONT></BODY></HTML>

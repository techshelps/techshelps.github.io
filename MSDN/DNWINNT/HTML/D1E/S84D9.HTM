<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NetRules Subkey Entries</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>NetRules Subkey Entries</H3><P>During network reconfiguration (that is, when you use the Network icon in Control Panel to make changes), the system reads the values stored in the NetRules subkeys for information used to bind the network components. The Registry path for these value entries is the following:</P>
<UL><LI>     For adapter card drivers and network services, where the <I>driverName</I> subkey is the name of the network card's driver, as defined by the system:
<P>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft<BR>    \driverName\CurrentVersion\NetRules</P></LI><LI>     For network adapter cards, where the <I>netcard#</I> subkey is a number, beginning with 01 for the first network adapter:
<P>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows&nbsp;NT\CurrentVersion<BR>    \NetworkCards\netcard#\NetRules</P></LI></UL><P><B>Bindable     REG_MULTI_SZ    </B><I>fromClass toClass  Yes|No  Yes|No  value</I></P>
<P>Defines a possible binding and its constraints. For example:</P>
<P><BR></P>
<pre><code>   bindable = ndisDriver ndisAdapter non exclusive 100</code></pre>
<P>This example specifies that components of class "ndisDriver" can be bound to those of class "ndisAdapter." For the other fields in this example:</P>
<UL><LI>     Non indicates that the component of class ndisDriver can accept other bindings</LI><LI>     Exclusive indicates that the component of class ndisAdapter cannot accept other bindings</LI><LI>     100 indicates the relative importance (weight) of this binding; that is, in cases of competition, it will be discarded in favor of other bindings whose weight is greater.</LI></UL><P>Because this value entry is a REG_MULTI_SZ, as many criteria for binding as necessary can be defined by a single component.</P>
<P>This value entry is optional, because there are a few predefined binding rules, and binding rules defined anywhere in the system apply to all network component classes.</P>
<P><B>Bindform     REG_SZ</B><B>   </B><I>ObjectName  Yes|No Yes|No  [container|simple|streams]</I></P>
<P>The <I>ObjectName</I> field contains the name (or name prefix) by which the component is identified by the system. This value must be the same as the name in the related CurrentControlSet\Services subkey. Names for adapters are created by the system and override the <B>Bindform</B> setting.</P>
<P>The first Yes|No pair indicates whether the component is to receive binding information directly in its Linkage subkey. The second Yes|No pair indicates whether the device name is supposed to appear in generated binding strings. </P>
<P>The final optional value in this entry indicates how binding device names are constructed. This value is required for software components.</P>
<P><B>Class    REG_MULTI_SZ    </B><I>NewClassName  OldClassName|basic  [Ye</I><B>s</B><I>|No]</I></P>
<P>Allows a component to define a new class. As many new classes as necessary can be defined by any component.</P>
<P><B>Note</B>   These classes are not related to the OLE and DDE classes defined under HKEY_LOCAL_MACHINE\SOFTWARE\Classes.</P>
<P>Class names do not need to be defined within any particular component. The system adds the new definition to its database without regard to origin. The order of <B>Class</B> entries is irrelevant. However, results are indeterminate if classes are referred to that are not defined anywhere in the system.</P>
<P>This entry is optional, because there are a few predefined classes, and class definitions made anywhere in the system apply to all network components. Because any network component can define new classes, be careful that the names used are unique within all possible installable network components. The following shows the predefined class names in the first release of Windows&nbsp;NT. This list, of course, cannot be exhaustive.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="198pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Predefined class</P></TD><TD VALIGN="TOP"><P>Adapter card type</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>ee16Driver; ee16Adapter</P></TD><TD VALIGN="TOP"><P>Intel EtherExpress 16 LAN adapter </P></TD></TR><TR><TD VALIGN="TOP"><P>elnkiiAdapter; elinkiiDriver</P></TD><TD VALIGN="TOP"><P>3Com Etherlink II&reg; adapter</P></TD></TR><TR><TD VALIGN="TOP"><P>ibmtokDriver; ibmtokAdapter</P></TD><TD VALIGN="TOP"><P>IBM Token Ring adapter </P></TD></TR><TR><TD VALIGN="TOP"><P>lanceDriver; dec101Adapter</P></TD><TD VALIGN="TOP"><P>DEC Lance adapter </P></TD></TR><TR><TD VALIGN="TOP"><P>lt200Driver; lt200Adapter </P></TD><TD VALIGN="TOP"><P>Daystar Digital LocalTalk adapter </P></TD></TR><TR><TD VALIGN="TOP"><P>ne2000Driver; ne2000Adapter</P></TD><TD VALIGN="TOP"><P>Novell NE2000 adapter </P></TD></TR><TR><TD VALIGN="TOP"><P>proteonDriver; p1390Adapter</P></TD><TD VALIGN="TOP"><P>Proteon adapter </P></TD></TR><TR><TD VALIGN="TOP"><P>ubDriver; ubAdapter</P></TD><TD VALIGN="TOP"><P>Ungermann-Bass Ethernet NIUpc adapter</P></TD></TR><TR><TD VALIGN="TOP"><P>wdlanDriver; smcisaAdapter</P></TD><TD VALIGN="TOP"><P>SMC&reg; (WD) adapter </P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The final optional value indicates whether this class is a "logical end-point" for the bindings protocol; the default value is No.</P>
<P><B>Hidden     REG_DWORD     </B><I>0 or 1</I></P>
<P>Suppresses the display of the component (adapter or network software) in the Network dialog box in Control Panel.</P>
<P>Usually, all networking components discovered in the Registry are displayed in the two list boxes in the Network dialog box in Control Panel. Setting this value to 1 prevents the item from being displayed, which means it cannot be configured or removed by the user.</P>
<P><B>Interface    REG_MULTI_SZ  </B></P>
<P>Allows a single component to make available more than one type of capability to other components in the system. The format for this value is:</P>
<P><BR></P>
<pre><code>   Interface = <I>interfaceName upperClass "objectName" namingMethod</I></code></pre>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="260pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Value</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><I>interfaceName</I> </P></TD><TD VALIGN="TOP"><P>The tokenized name of the secondary interface.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>upperClass</I></P></TD><TD VALIGN="TOP"><P>The class to which the interface belongs. (<I>LowerClass</I> is the same as the primary interface.)</P></TD></TR><TR><TD VALIGN="TOP"><P><I>objectName</I></P></TD><TD VALIGN="TOP"><P>The Windows&nbsp;NT device name to be created.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>namingMethod</I></P></TD><TD VALIGN="TOP"><P>Determines how the bindings appear.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Review      REG_DWORD    </B><I> 0 or 1</I></P>
<P>Indicates whether a component requests bindings review. If set to 1 (or nonzero), the system reinvokes this component's .INF file after bindings have been changed. This allows network components to modify the binding information or request additional information from administrators about the new or altered connections.</P>
<P><B>Type     REG_SZ     </B><I>component className  [lowerClass]</I></P>
<P>Defines the type of the component in terms of abstract network component classes. If the optional lower class name is absent, the first (or upper level) class type name is used for both its upper and lower classes.</P>
<P>This value is required for network software and network adapter cards.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="262pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Component type</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Adapter</P></TD><TD VALIGN="TOP"><P>A piece of hardware</P></TD></TR><TR><TD VALIGN="TOP"><P>Driver</P></TD><TD VALIGN="TOP"><P>A software component associated directly with a piece of hardware</P></TD></TR><TR><TD VALIGN="TOP"><P>Transport</P></TD><TD VALIGN="TOP"><P>A software component used by services</P></TD></TR><TR><TD VALIGN="TOP"><P>Service</P></TD><TD VALIGN="TOP"><P>A software component providing capability directly to user applications</P></TD></TR><TR><TD VALIGN="TOP"><P>Basic</P></TD><TD VALIGN="TOP"><P>A token used to represent a fundamental class name (that is, a class with no parent)</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Use     REG_SZ     </B><I>service</I><B>|</B><I>driver</I><B>|</B><I>transport</I><B>|</B><I>adapter  [Yes</I><B>|</B><I>No]  [Yes</I><B>|</B><I>No]</I></P>
<P>Defines the role played by the component. If this entry is absent, the value of Service is assumed. This value entry only appears for software items. </P>
<P>A hardware device is automatically assumed to be an adapter. Each network component may identify itself as a driver, transport, or service to clarify its role. This distinction is as follows (note the lowercase for the values):</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="260pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Value</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>driver</P></TD><TD VALIGN="TOP"><P>Exists only to support one or more adapters. If no bindings are generated (or permitted by the user) that include a particular driver, that driver is not loaded. However, no error is generated, since no "denial of service" has occurred. </P></TD></TR><TR><TD VALIGN="TOP"><P>service </P></TD><TD VALIGN="TOP"><P>Provides end-user functionality, and every attempt is made to support its operation. An EventLog entry is generated if a service is present in the system for which there is no available transport (the number of possible bindings is zero).</P></TD></TR><TR><TD VALIGN="TOP"><P>transport</P></TD><TD VALIGN="TOP"><P>Exists only to support services. Like a driver, it is not loaded unless necessary.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The final two Yes|No values in this entry are optional; if present; each must be either Yes or No. The first value indicates whether driver group names are used instead of specific driver dependencies. The second value indicates whether transport group names are used instead of specific transport dependencies. These values cause the system to generate references to dependencies based upon their group names, not by their specific service names. </P>
<P>For example, the LanmanServer is marked as Yes Yes; this means that its transport and driver dependencies are at the group level; so LanmanServer will be loaded if any one of its transport dependencies and any one of its driver dependencies successfully load.</P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>I/O Architecture</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>I/O Architecture</H3><H4><A NAME="sec0"></A>Device Drivers</H4><P>Existing private OS/2 device drivers will not be supported in the OS/2 subsystem directly, but must be rewritten for the Windows&nbsp;NT device driver model. In this context, <I>private device driver</I> means a driver that a particular application requires but that is not included in the OS/2 operating system itself.</P>
<P>Examples of such drivers include those that provide custom support for security, fax, MIDI, or 3270 communication cards. Once an OS/2 device driver has been rewritten for the Windows&nbsp;NT model, however, an OS/2 application can communicate with that device driver using the same OS/2 API, <B>DosDevIoctl</B>; no changes will be required within the application itself. Additionally, support exists for the native device drivers included with Windows&nbsp;NT, such as the display, printer, disk, communications, keyboard, and mouse devices.</P>
<P>For example, suppose that a corporation has written a custom device driver to control a security card. The OS/2 device driver for this card uses an internal name, SECDEV, and an entry for this device driver appears in the CONFIG.SYS file. In OS/2, the operating system reads the CONFIG.SYS file and adds SECDEV to the device driver list. When an application calls the OS/2 API, <B>DosOpen</B>, this list is searched first. The OS/2 subsystem will read this file during initialization and add symbolic links that will allow the OS/2 application to call the Windows&nbsp;NT device driver from the subsystem. For information about how to set the CONFIG.SYS file for the OS/2 subsystem to load a Windows&nbsp;NT device driver, see "OS/2 Configuration" later in this chapter.</P>
<P>The OS/2 application code, as opposed to the device driver code, can still load and run in a binary-compatible manner because the device-specific parameters passed by <B>DosDevIoctl</B>(2) APIs are just PVOID buffers. Of course, the new Windows&nbsp;NT version of the ported device driver would have to be made sscompatible with the original by accepting the same set of parameters within the buffers. Other related OS/2 APIs, such as <B>DosOpen</B>, are supported compatibly, just as they are for supporting native Windows&nbsp;NT system device drivers such as the communications device, the keyboard, and the screen.</P>
<H4><A NAME="sec1"></A>File System Name Space</H4><P>OS/2 HPFS supports long names. The OS/2 subsystem supports long names and extended attributes. The subsystem treats an NTFS volume as an HPFS volume. (It does not utilize or expose recoverability and C2 security functions).</P>
<H4><A NAME="sec2"></A>Network Connectivity</H4><P>The OS/2 subsystem implements many LAN Manager APIs. It also implements NetBIOS (both version 2<I>.x</I> and version 3.0 functionality), named pipes, and mail slotsss.</P>
<P>The OS/2 subsystem maintains remote drives compatible with OS/2. With these, any OS/2 application can use redirected drives transparently with the file I/O APIs. Uniform naming convention (UNC) naming is supported as well. Redirected drives of various network operating systems can be used, provided that the related Win32 Windows&nbsp;NT device drivers (redirectors) have been installed.</P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Custom Commands</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Custom Commands</H3><P>You can add custom functions to your Mail menus with custom commands. A custom command is one that you add to a menu to perform a unique function tailored to your needs.</P>
<P>There is a second type of custom command not associated with any menu, but which can be set to run whenever the user starts Mail, exits Mail, or receives a new message.</P>
<P>A custom command is implemented as a dynamic-link library (DLL). Any executable code — including batch files or applications — can be run from a custom command. Here are some examples of how custom commands can  be used to tailor Mail for specific needs:</P>
<UL><LI>     Display a window that contains information specific to where the user works, such as a parts list or a list of stock quotes.</LI><LI>     Query a database without leaving Mail.</LI><LI>     Launch another application and open a specific file. For example, users can create a command to open a MEMOS.TXT file in the Windows Notepad application.</LI></UL><H4><A NAME="sec0"></A>Installing Custom Commands</H4><P>You can install custom commands on the local computer for use by a single user or centrally on the postoffice to be shared by all users. Installing the command on the postoffice eases installation and administrative tasks, and saves space on other users' hard disks.</P>
<P>Once installed, these custom commands can appear to users as built-in features. You can install up to 1000 custom commands in Mail. If you install several custom commands, you can add separator bars between groups of commands to help organize the menu's appearance. </P>
<P>To install custom commands for a user on an individual computer, you need to modify the Registry on that computer for each custom command and supply  the appropriate DLLs. To install custom commands for everyone who uses a postoffice, you need to modify the Registry for each user, modify the SHARED32.INI file on the postoffice computer, and add the DLLs to the postoffice computer.</P>
<P><B>Note</B>   Typically, the Setup program that installs the custom commands automatically modifies entries in your computer's Registry and in the postoffice computer's SHARED32.INI file. The information in the following sections is for your reference if you need to make the modifications yourself.</P>
<H4><A NAME="sec1"></A>Starting Separate Applications</H4><P>Mail expects that a custom command will be implemented as a DLL. A custom command can launch an application. The DLL can pass information about the command to the application when it starts.</P>
<P>Although Mail always calls a DLL, the DLL can pass information to an application by using Windows dynamic data exchange (DDE), command-line parameters, or a disk file. If the called application is already running, the DLL transfers information most efficiently using DDE. If the DLL uses a disk file, care should be taken so that multiple temporary files are not added to the user's disk. The application that implements the custom command runs independently  of Mail.</P>
<H4><A NAME="sec2"></A>Installing a Custom Command for a Single User</H4><P>To install a custom command for a single user on an individual computer, follow these steps:</P>
<OL><LI>    Copy the DLL for the custom command to the <I>SystemRoot</I>\SYSTEM32 directory of your hard drive.</LI><LI>    Add a custom command entry to the Registry on your computer in HKEY_CURRENT_USER\Software\Microsoft\Mail\Custom&nbsp;Commands.  For information on how to do this, see "Custom Command Entries for Mail" in Chapter&nbsp;14, "Registry Value Entries."</LI><LI>    Quit Mail if it is running, and then restart it. Mail reads your Registry and adds the custom command.</LI></OL><H4><A NAME="sec3"></A>Installing a Custom Command on the Postoffice</H4><P>If you have a custom command that you want to make available to multiple users, you can install the command on the postoffice instead of in each user's Registry. When you create a new custom command, you must include a <B>SharedExtensionsDir</B> entry in this key in each user's Registry:</P>
<P><BR></P>
<pre><code>HKEY_CURRENT_USER\Software\Microsoft\Mail\Microsoft Mail</code></pre>
<P>This entry instructs Mail to check the server's SHARED32.INI file for custom command entries.</P>
<P>Mail finds the <B>SharedExtensionsDir</B> entry in the user's Registry, then reads entries for custom commands in SHARED32.INI before returning to the user's Registry to read any custom command entries there.</P>
<P>For example in Figure 8.4, Mail reads the <B>SharedExtensionsDir</B> entry in the user's Registry first. Then it reads the entries in the <B>[Custom&nbsp;Commands]</B> section of SHARED32.INI (in this case, the lines labeled <B>tagA=</B> and <B>tagB=</B>). After reading all of the custom command entries in SHARED32.INI, Mail reads entries in the key of the user's Registry (in this case, the entries labeled <B>tag1</B> and <B>tag2</B>):</P>
<P><BR></P>
<pre><code>HKEY_CURRENT_USER\Software\Microsoft\Mail\Custom Commands</code></pre>
<P><img src="XRGD03.gif"></P>
<P>Figure 8.4    File Interaction with Shared Custom Commands</P>
<P>The directory on the postoffice share specified by <B>SharedExtensionsDir</B> in the Registry<B> </B>contains the SHARED32.INI file as well as the DLLs that implement shared custom commands. </P>
<P>Mail can check a server for custom commands and custom messages in the following ways:</P>
<UL><LI>     When you use a dynamic connection to the postoffice</LI><LI>     When you manually connect to the postoffice before starting Mail</LI></UL><P>The syntax you use with the <B>SharedExtensionsDir</B> entry in the Registry reflects the way you choose to connect. The <B>SharedExtensionsDir</B> entry uses the following syntax:</P>
<P><B>SharedExtensionsDir:REG_SZ:\\</B><I>server</I><B>\</B><I>share</I><B>\</B><I>pathname</I> [<I>password</I>]</P>
<P>– Or –</P>
<P><B>SharedExtensionsDir:REG_SZ:</B><I>pathname</I></P>
<P>When you want to dynamically connect to the server's shared disk, use the <B>\\</B><I>server</I><B>\</B><I>share</I><B>\</B><I>pathname</I> option with <B>SharedExtensionsDir</B>. Use the <I>pathname</I> option with <B>SharedExtensionsDir</B> to point to a manual connection to the server's shared disk.</P>
<P>To install a shared custom command, follow these steps:</P>
<OL><LI>    Create a shared Mail extensions directory on the postoffice.</LI><LI>    Copy the custom command DLL to the shared extensions directory.</LI><LI>    A sample SHARED32.INI file is included on the <I>Windows&nbsp;NT Resource Guide </I>disks. Copy this file to the shared extensions directory.</LI><LI>    Add custom command entries to the <B>[Custom&nbsp;Commands] </B>section of the SHARED32.INI file on the postoffice, using the following syntax:
<P><B>tag=</B><I>Mail version</I><B><I>;</I></B><I> menu; name</I><B><I>;</I></B><I> position</I><B><I>;</I></B><I> DLL name</I><B><I>;</I></B><I> command</I><B><I>;</I></B><I> <BR>event map</I><B><I>;</I></B><I> status text</I><B><I>;</I></B><I> Help file</I><B><I>;</I></B><I> Help context</I></P></LI></OL><P></P>
<P><B>Note   </B>The custom command entries should be a single command line in the SHARED32.INI file. Don't add any carriage returns even if line-wrapping occurs.</P>
<P>Values are defined in the following table.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="313pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Value</P></TD><TD VALIGN="TOP"><P>Definition</P></TD></TR><TR><TD VALIGN="TOP"><P><I>tag</I></P></TD><TD VALIGN="TOP"><P>The descriptive identifier for the command.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>version</I></P></TD><TD VALIGN="TOP"><P>The version of Mail in which the custom command is compatible.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>menu</I></P></TD><TD VALIGN="TOP"><P>Indicates the menu where the custom command is to be added, such as File or Help.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>name</I></P></TD><TD VALIGN="TOP"><P>The command name that is to appear on the menu. You may include an ampersand (&amp;) just before the letter that is to serve as an ALT+ key accelerator.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>position</I></P></TD><TD VALIGN="TOP"><P>The zero-relative position within its menu where the command is to appear. A value of <B>-1</B> places the command at the end of the menu.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>DLL name</I></P></TD><TD VALIGN="TOP"><P>Name or path of the DLL where the custom command resides. This entry can optionally be followed by a comma and the ordinal of the entry point to call (default is ,<B>1</B>).</P></TD></TR><TR><TD VALIGN="TOP"><P><I>command</I></P></TD><TD VALIGN="TOP"><P>The command string passed as one of the parameters to the DLL entry point for the command.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>event map</I></P></TD><TD VALIGN="TOP"><P>A sequence of up to 16 digits identifying the Mail events that the custom command supports. Each can be <B>0</B> or <B>1</B> to indicate if the DLL is to be called for a specific event. Currently, three events are defined; the rest are reserved and must be zero (or this whole section can be empty):</P>
<P>The first digit means Mail startup.<BR>The second digit means Mail exit.<BR>The third digit means the arrival of a new message.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>status text</I></P></TD><TD VALIGN="TOP"><P>Text to be displayed in the Mail status bar when the user moves the cursor to the command in the menu.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Help file</I></P></TD><TD VALIGN="TOP"><P>The Windows&nbsp;NT Help file to be invoked when the user presses F1 while the command is selected. The specified filename is passed to the Windows&nbsp;NT Help program. (This is an optional value.)</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Help context</I></P></TD><TD VALIGN="TOP"><P>Passed to the Windows&nbsp;NT Help program along with the Help file name. Use <B>-1</B> (Help file index) if there is no specific entry in the Help file for this command. (This is an optional value.)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>There is one special token that may appear within certain fields:</P></TD></TR><TR><TD VALIGN="TOP"><P><B>&lt;ExtsDir&gt;</B></P></TD><TD VALIGN="TOP"><P>Expands to the value of <B>SharedExtensionsDir</B> in the user's Registry. Used to refer to DLLs that are installed in a shared extensions directory on the network. Valid for the DLL name, command, and Help file subfields.</P></TD></TR></TBODY></TABLE>
<P><BR></P><OL start=5><LI>    In the Registry on your computer, add a <B>SharedExtensionsDir</B> entry to reference the shared extensions directory in the following key:
<P>HKEY_CURRENT_USER\Software\Microsoft\Mail\Microsoft Mail</P>

<P>For information about <B>SharedExtensionsDir</B>, see "Microsoft Mail Entries" in Chapter&nbsp;14, "Registry Value Entries."</P></LI><LI>    If you have chosen the manual connection method, make the necessary network connection using File Manager.</LI><LI>    Quit Mail if it is running, and then restart it.
<P>Mail rereads your Registry and adds the shared custom command to the specified menu.</P></LI><LI>    Test the shared custom command.</LI><LI>    When the custom command works successfully on your computer, modify each user's Registry to have access to the shared extensions directory. (See step&nbsp;5.)</LI></OL></FONT></BODY></HTML>

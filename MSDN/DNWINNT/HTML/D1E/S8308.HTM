<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Local Procedure Call Facility</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Local Procedure Call Facility</H3><P>Applications and environment subsystems have a client-server relationship. That is, the client (an application) makes calls to the environment server (a subsystem) to satisfy a request for some type of system services. To allow for a client-server relationship between applications and environment subsystems, Windows&nbsp;NT provides a communication mechanism between them. The Executive implements a message-passing facility called a <I>Local Procedure Call</I> (LPC) facility. It works very much like the Remote Procedure Call (RPC) facility used for networked processing (described in Chapter 1, "Windows&nbsp;NT Networking Architecture," in the <I>Networking Guide</I>). However, the LPC facility is optimized for two processes running on the same computer.</P>
<P>Applications communicate with environment subsystems by passing messages via the LPC facility. The message-passing process is hidden from the client applications by function <I>stubs</I> (nonexecutable placeholders used by calls from the server environment) provided in the form of special dynamic-link libraries (DLLs), as illustrated by Figure 1.5.</P>
<P><img src="XRGA06.gif"></P>
<P>Figure 1.5    Interaction with the Local Procedure Call Facility</P>
<P>When an application makes an application program interface (API) call to an environment subsystem, the stub in the client (application) process packages the parameters for the call and sends them to a server (subsystem) process that implements the call. It is the LPC facility that allows the stub procedure to pass the data to the server process and wait for a response.</P>
<P>For example, consider how this process works in the Win32 subsystem. When a Win32 application is loaded to run, it is linked to a DLL that contains stubs for all of the functions in Win32 API. When the application calls a Win32 function (in this example, the <B>CreateWindow</B> Win32 function) the call is processed as follows: </P>
<OL><LI>   The <B>CreateWindow() </B>stub function in the DLL is called by the client Win32 application.</LI><LI>    The stub function constructs a message that contains all of the data needed to create a window and sends the message to the Win32 server process (that is, the Win32 subsystem).</LI><LI>    The Win32 subsystem receives the message and calls the real <B>CreateWindow()</B> function. The window is created.</LI><LI>    The Win32 subsystem sends a message containing the results of the <B>CreateWindow()</B> function back to the stub function in the DLL.</LI><LI>    The stub function unpacks the server message from the subsystem and returns the results to the client Win32 application.</LI></OL><P>From the application's perspective, the <B>CreateWindow() </B>function in the DLL created the window. The application does not know that the work was actually performed by the Win32 server process (the Win32 subsystem), that a message was sent to make it happen, or even that the Win32 server process exists. It does not know that the subsystem called one or more Executive system servers to support its call to <B>CreateWindow</B>.</P></FONT></BODY></HTML>

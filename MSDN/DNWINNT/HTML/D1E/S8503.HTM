<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NetLogon Service Entries</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>NetLogon Service Entries</H3><P>The Registry path for the parameters for the NetLogon service is the following:</P>
<P><BR></P>
<pre><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters</code></pre>
<P><B>Note</B>   The NetLogon share name should also be in the path for logon scripts.</P>
<P><B>ChangeLogSize     REG_DWORD</B><I>     64K to 4 MB</I></P>
<P>Defines the size (in bytes) of the change log. The change log exists both in memory and on disk, %SystemRoot%\netlogon.chg. Since this parameter setting does not degrade system performance, it is advisable to leave it at the 0x4000000 (4 MB) setting, rather than returning it to the 64K default setting. The 4 MB setting ensures that the domain's database will not be completely replicated when large changes are made in the future.</P>
<P><B>ChangeLogSize</B> should be the same on all BDCs to ensure that when a BDC is promoted to a PDC, it will have that same <B>ChangeLogSize</B> value.</P>
<P>Default:  64K</P>
<P>The minimum (and typical) size of an entry is 32 bytes. Therefore, a 64K change log holds about 2000 changes.</P>
<P><B>MaximumMailslotMessages     REG_DWORD</B><I>     1 to 0xffffffff messages</I></P>
<P>Specifies the maximum number of mailslot messages that will be queued to the Netlogon service. Even though the Netlogon service is designed to process incoming mailslot messages immediately, it can get backed up processing requests on a heavily loaded system. Each mailslot message consumes about 1500 bytes of non-paged pool until it is processed. By setting this parameter low, you can govern the maximum amount of non-paged pool that can be consumed. If this parameter is set too low, Netlogon may miss important incoming mailslot messages.</P>
<P>Default:  500</P>
<P><B>MaximumMailslotTimeout     REG_DWORD</B><I>     5 to 0xffffffff seconds</I></P>
<P>Specifies the maximum acceptable age (in seconds) of an incoming mailslot message. If Netlogon receives a mailslot messages that arrived longer ago than this, it ignores the message. This allows Netlogon to process messages that are more recent. If this parameter is set too low, Netlogon will ignore important incoming mailslot messages. Ideally, Netlogon processes each mailslot message in a fraction of a second. This parameter is only significant if the Windows&nbsp;NT server is overloaded.</P>
<P>Default:  10</P>
<P><B>MailslotDuplicateTimeout     REG_DWORD</B><I>     0 to 5 seconds</I></P>
<P>Specifies the interval (in seconds) over which duplicate incoming mailslot messages will be ignored. Netlogon compares each mailslot message received with the previous mailslot message received. If the previous message was received within this many seconds and the messages are identical, this message will be ignored. Set this parameter to 0 to disable this feature. You should disable this feature if your network is configured such that this machine can see certain incoming mailslot messages but cannot respond to them. For instance, a DC may be separated from a Windows&nbsp;NT workstation by a bridge/router. The bridge/router might filter outgoing NBF broadcasts, but allow an incoming one. As such, Netlogon might respond to an NBF mailslot message (only to be filtered out by the bridge/router) and not respond to a subsequent NBT mailslot message. Disabling this feature (or preferably reconfiguring the bridge/router) solves this problem. If you set this parameter too high, Netlogon will ignore retry attempts from a client.</P>
<P>Default:  2</P>
<P><B>Pulse     REG_DWORD</B><I>     60 to 3600 seconds</I></P>
<P>Defines the typical pulse frequency (in seconds). All SAM/LSA changes made within this time are collected together. After this time, a pulse is sent to each BDC needing the changes. No pulse is sent to a BDC that is up to date.</P>
<P>When this value is not specified in the Registry, NetLogon determines optimal values depending on the domain controller's load.</P>
<P>Default:  300 (5 minutes)</P>
<P><B>PulseConcurrency     REG_DWORD</B><I>     1 to 500 pulses</I></P>
<P>Defines the maximum number of simultaneous pulses the Primary Domain Controller (PDC) will send to Backup Domain Controllers (BDCs). Netlogon sends pulses to individual BDCs. The BDCs respond asking for any database changes. To control the maximum load these responses place on the PDC, the PDC will only have <B>PulseConcurrency</B> pulses "pending" at once. The PDC should be sufficiently powerful to support this many concurrent replication RPC calls. Increasing <B>PulseConcurrency</B> increases the load on the PDC. Decreasing <B>PulseConcurrency</B> increases the time it takes for a domain with a large number of BDCs to get a SAM/LSA change to all of the BDCs.</P>
<P>Default:  20</P>
<P><B>PulseMaximum     REG_DWORD</B><I>     60 to 86,400 seconds</I></P>
<P>Defines the maximum pulse frequency (in seconds). Every BDC will be sent at least one pulse at this frequency regardless of whether its database is up to date.</P>
<P>Default:  7200 (2 hours)</P>
<P><B>PulseTimeout1     REG_DWORD</B><I>     1 to 120 seconds</I></P>
<P>Defines how long (in seconds) the PDC waits for a non-responsive BDC. When a BDC is sent a pulse, it must respond within this time period. If not, the BDC is considered to be non-responsive. A non-responsive BDC is not counted against the <B>PulseConcurrency</B> limit allowing the PDC to send a pulse to another BDC in the domain. If this number is too large, a domain with a large number of non-responsive BDCs will take a long time to complete a partial replication. If this number is too small, a slow BDC may be falsely accused of being non-responsive. When the BDC finally does respond, it will partial replicate from the PDC unduly increasing the load on the PDC.</P>
<P>Default:  5</P>
<P><B>PulseTimeout2     REG_DWORD</B><I>     60 to 3600 seconds</I></P>
<P>Defines how long (in seconds) a PDC waits for a BDC to complete partial replication. Even though a BDC initially responds to a pulse (as described for <B>PulseTimeout1</B>), it must continue making replication progress or the BDC will be considered non-responsive. Each time the BDC calls the PDC, the BDC is given another <B>PulseTimeout2</B> seconds to be considered responsive. If this number is too large, a slow BDC (or one that has its replication rate artificially governed) will consume one of the <B>PulseConcurrency</B> slots. If this number is too small, the load on the PDC will be unduly increased because of the large number of BDCs doing a partial sync.</P>
<P></P>
<P><B>Note   </B>This parameter only affects the cases where a BDC cannot retrieve all the changes to the SAM/LSA database in a single RPC call. This will only happen if a large number of changes are made to the database.</P>
<P>Default:  300 (5 minutes)</P>
<P><B>Randomize     REG_DWORD</B><I>     0 to 120 seconds</I></P>
<P>Specifies the BDC back off period (in seconds). When the BDC receives a pulse, it will back off between zero and <B>Randomize</B> seconds before calling the PDC. The pulse is sent to individual BDCs, so this parameter should be small. <B>Randomize</B> should be smaller than <B>PulseTimeout1</B>. Consider that the time to replicate a SAM/LSA change to all the BDCs in a domain will be greater than:</P>
<P><BR></P>
<pre><code>   [(Randomize/2) * NumberOfBdcsInDomain] / PulseConcurrency</code></pre>
<P>When this value is not specified in the Registry, NetLogon determines optimal values depending on the domain controller's load.</P>
<P>Default:  1</P>
<P><B>ReplicationGovernor     REG_DWORD</B><I>     0 to 100 percent</I></P>
<P>Defines both the size of the data transferred on each call to the PDC and the frequency of those calls. For instance, setting <B>ReplicationGovernor</B> to 50% will use a 64K buffer rather than a 128K buffer and will only have a replication call outstanding on the net a maximum of 50% of the time. Do not set the <B>ReplicationGovernor</B> too low, or replication may never complete. A value of 0 will cause Netlogon to <I>never </I>replicate. The SAM/LSA database will be allowed to get completely out of sync. </P>
<P>BDCs can be configured for the variances of WAN types. <B>ReplicationGovernor</B> allows the administrator to control the partial synchronization parameters. This parameter must be set individually on each BDC. </P>
<P></P>
<P><B>Note   </B>It is also possible to configure different replication rates at different times of the day using a script file with the AT command (for example, net stop netlogon, regini scriptfile, net start netlogon). The script file contains the path to the <B>RegistrationGovernor</B> parameter and the new Registry entries. REGINI.EXE is part of the Windows&nbsp;NT Resource Kit.</P>
<P>Default:  100</P>
<P><B>Scripts     REG_SZ</B><I>     Pathname</I></P>
<P>Specifies the fully qualified path name to where logon scripts reside. This value can be set using the Services icon in Control Panel or the Server Manager. </P>
<P>Default:  NULL</P>
<P><B>Update     REG_SZ     </B><I>Yes or No</I></P>
<P>When this value is set to Yes, NetLogon fully synchronizes the database each time it starts. </P>
<P>Default:  No</P></FONT></BODY></HTML>

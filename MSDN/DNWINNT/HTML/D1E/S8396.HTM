<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Careful-write File Systems</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Careful-write File Systems</H3><P>A <I>careful-write file system</I> is designed around the idea that it is important to keep the volume structure consistent. An example of a careful-write file system is FAT on MS-DOS.</P>
<P>A careful-write file system works in the following manner. When it's modifying the volume structure, it orders the disk writes. Most volume updates are made one at a time. Disk writes for each update are ordered so that if the system failed between two disk writes, the volume would be left in an understandable state with the possibility of an "expected" inconsistency. The disk remains usable. Running utilities such as <B>chkdsk</B> is rarely needed for a careful-write file system. (On FAT, for example, <B>chkdsk</B> is needed only to recover from system failure and provides a way to restore file system consistency quickly.)</P>
<P>The disadvantage of careful-write file systems is that serialized writes can be slow. This is because the first disk write must be completed and committed before the second disk write can begin, and so on. On a powerful computer, this is not the most efficient use of processing power.</P></FONT></BODY></HTML>

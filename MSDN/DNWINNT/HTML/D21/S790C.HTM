<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving Performance Data</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Retrieving Performance Data</H2><P>Performance counters in Windows&nbsp;NT always increment and are never cleared. The basic mission of a performance monitor in Windows&nbsp;NT is to take a snapshot of the performance counters at the beginning of a time interval, and then take another snapshot at the end of the interval. Find the difference between the values in the first and second snapshots for each counter, and voilà, performance data! </P>
<P>When your custom monitor application is ready to retrieve some performance data, how it does so depends on whether you are monitoring the local computer or a remote computer.</P>
<P>Your first call will open the key for you. To obtain performance data from the local system, use the RegQueryValueEx function, with the HKEY_PERFORMANCE _DATA key. You don't need to open the HKEY_PERFORMANCE_DATA handle or use the RegOpenKey function, but be sure to use RegCloseKey to close the handle when it has finished running. By closing the key when you are finished,  you allow the software being monitored to be installed or removed. A software component cannot be installed or removed while it is being monitored. Figure 12.1 shows how Performance Monitor obtains data from the local computer.</P>
<P><img src="XOPZ15.gif"></P>
<P>Figure 12.1    How Performance Monitor collects performance data</P>
<P>To obtain performance information from a remote system, your monitor should  first use the RegConnectRegistry function with the computer name of the remote system and the HKEY_PERFORMANCE_DATA key. This function retrieves a key representing the performance data for the remote system. Then, to retrieve  the data, you call RegQueryValueEx using the key you obtained in the RegConnectRegistry call, rather than the HKEY_PERFORMANCE_DATA key. </P>
<P><img src="XOPZ25.gif"></P>
<P>Figure 12.2    How to obtain performance data</P>
<P>Although you use the register-querying function RegQueryValueEx to collect performance data, the performance data does not come from the Registry database. Instead, calling this function with <B>t</B>he appropriate key<B> </B>causes the system to collect the data from the appropriate system object managers. The Registry knows that delegating work to others is a useful skill.</P>
<P>When using the RegQueryValueEx function, your monitor must use the <I>lpcbData</I> parameter to specify a byte count of the amount of data to retrieve. Estimating this amount can be tricky. The amount of data varies between systems because of different configurations, and even different requests on the same system will vary because of differing amounts of system activity (such as the number of current threads).</P>
<P>If a RegQueryValueEx call does not provide enough space, the return value will be ERROR_MORE_DATA. To solve this, your application should include a retry loop in which it passes increasing amounts of buffer space until it no longer gets the error. Then, the application should use the successful buffer size as the starting point for subsequent calls to RegQueryValueEx.</P></FONT></BODY></HTML>

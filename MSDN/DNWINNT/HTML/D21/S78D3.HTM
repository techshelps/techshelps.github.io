<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Detecting Network Bottlenecks</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Detecting Network Bottlenecks</H1><P>When Pandora opened her box, the first form of Chaos to emerge was the computer network. To begin with you've got your client and your server, or possibly hundreds or thousands of them. To this you add the transmission media, the network adapter cards, and possibly multiple network protocols. Inside this complex mixture of equipment and logic lurks the bottleneck.</P>
<P>One good thing about searching for network bottlenecks is that everything we have covered in the previous chapters of this book still applies. A server that has a disk bottleneck because memory is too tight is still a computer that has a disk bottleneck because memory is too tight. The fact that it is a server just makes it more annoying because more people are affected. So what you've learned thus far is not wasted, we just have to add a bit more knowledge. We need to look at the counters that reflect on network traffic and gain some understanding of their capacities under various configurations. Only then can we submit our application for the Nobel Prize for Bottleneck Detection.</P>
<P>We are limiting the scope of this chapter so it does not become a book in itself (which it easily could be). We want to cover the principles and techniques of network bottleneck detection for a few common cases so that you will be able to apply these techniques in your own case. For example, we won't be trying to cover wide-area networks (WANs). The analysis of WANs is much the same as the analysis of local-area networks (LANs), although the choice of a protocol's <I>window sizes</I> (the number of packets within which a response is expected) is a crucial determinant of performance when crossing from LANs to lower-bandwidth WANs.</P>
<P>The most common transmission media of LANs are Ethernet and token ring. We'll only look at Ethernet here but the principles also apply to token ring.</P>
<P>In Appendix B we list the Configuration Registry parameters that control many details of how the network runs. These are only provided for reference. In general you will never have to change these values. If you suspect you might want to adjust a value listed there, we urge you to experiment with your configuration using the techniques and tools presented here. </P>
<P>Windows&nbsp;NT ships with a number of protocols. The ones with counters in Performance Monitor include NetBEUI, TCP/IP, AppleTalk, and a Novell&reg; NetWare&reg;-compatible protocol providing NWLink IPX/SPX capabilities. Mostly we'll be using NetBEUI for illustration but we'll glance briefly at the counters used by TCP/IP and NWLink. You may even be using a protocol that had extended object counters added into Performance Monitor when it was installed. If so, you will undoubtedly find that the guidelines discussed here apply to your situation.</P>
<P>We also cannot possibly discuss all the counters in all the network protocols. We will try to expose the essential counters. Then you will be able to solve the important problems, and become familiar with the other counters over time as they vary in your environment. </P></FONT></BODY></HTML>

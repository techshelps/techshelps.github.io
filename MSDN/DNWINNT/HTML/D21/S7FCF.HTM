<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Who Started All These Processes?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Who Started All These Processes?</H3><P>Maybe you thought all you wanted to do was run a program, but Windows&nbsp;NT starts many processes as a normal matter of doing business. Few of these ever become a system bottleneck because all they do is provide numerous housekeeping and bookkeeping functions in the background. Figure 3.38 shows the number of each of several important object types, as counted in the Object object.</P>
<P><img src="XOPC38.gif"></P>
<P>Figure 3.38    Object counts on a Windows&nbsp;NT system</P>
<P>Here's a brief introduction to those objects not already mentioned. <I>Event objects</I> are used by Windows&nbsp;NT and its applications to synchronize operations by permitting a thread to suspend execution until an anticipated event occurs, such as the completion of an asynchronous file operation. <I>Mutex objects</I> are used to assure that only one thread is executing a particular piece of code at a time, such as updating a common data structure. <I>Section objects</I> are areas of memory that can be viewed as a contiguous sequence of addresses. A s<I>emaphore object</I> grants a limited number of threads concurrent access to a shared resource, such as a buffer pool with limited entries; if more threads than the specified limit try to access the resource, they are automatically suspended until a resource becomes available. If these objects are given a name when they are created, they can be shared by multiple processes.</P>
<P>Object counts are important because each object takes space in nonpaged memory, which we'll talk about more in Chapter 5, "Detecting Memory Bottlenecks." Also, we unfortunately don't have a counter for Open File objects. However, the Server object does have an Files Open counter, and we have a tool which monitors application file activity. We'll discuss that tool in Chapter 10, "Tuning Windows&nbsp;NT Applications."</P>
<P>There are 14 processes and 88 threads in Figure 3.38. That's just about as few as you can get, because this snapshot is taken on a laptop that is not connected to a network. One of these processes is Performance Monitor, so let's be sure we understand who the others are, and what role they play in the operation of Windows&nbsp;NT.</P>
<P>Table 3.3    Processes in Windows&nbsp;NT with No Network Connection</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Process name</P></TD><TD VALIGN="TOP"><P>Function</P></TD></TR><TR><TD VALIGN="TOP"><P>clipsrv</P></TD><TD VALIGN="TOP"><P>Clipbook Server</P></TD></TR><TR><TD VALIGN="TOP"><P>csrss</P></TD><TD VALIGN="TOP"><P>Client Server Runtime Subsystem, handles windows and graphics functions for all subsystems</P></TD></TR><TR><TD VALIGN="TOP"><P>EventLog</P></TD><TD VALIGN="TOP"><P>Fields all requests to enter events into the system event log</P></TD></TR><TR><TD VALIGN="TOP"><P>Idle</P></TD><TD VALIGN="TOP"><P>Provides an idle thread for each processor that gets control when the processor is not executing programs</P></TD></TR><TR><TD VALIGN="TOP"><P>lsass</P></TD><TD VALIGN="TOP"><P>Local Security Administration Subsystem, handles certain security administration functions on the local computer</P></TD></TR><TR><TD VALIGN="TOP"><P>nddeagnt</P></TD><TD VALIGN="TOP"><P>Network DDE Agent, handles requests for network DDE services</P></TD></TR><TR><TD VALIGN="TOP"><P>netdde</P></TD><TD VALIGN="TOP"><P>Handles requests for network DDE data </P></TD></TR><TR><TD VALIGN="TOP"><P>progman</P></TD><TD VALIGN="TOP"><P>Program Manager handles application startup, switching, and termination functions</P></TD></TR><TR><TD VALIGN="TOP"><P>screg</P></TD><TD VALIGN="TOP"><P>Service Controller/Registry, handles network API service control functions and remote Registry requests</P></TD></TR><TR><TD VALIGN="TOP"><P>spoolss</P></TD><TD VALIGN="TOP"><P>Spooler Subsystem handles despooling of printer data from disk to printer</P></TD></TR><TR><TD VALIGN="TOP"><P>System</P></TD><TD VALIGN="TOP"><P>Contains system threads that handle lazy writing by the file system cache, virtual memory modified page writing, working set trimming, and similar system functions</P></TD></TR><TR><TD VALIGN="TOP"><P>winlogon</P></TD><TD VALIGN="TOP"><P>Handles logon and logoff of users and remote Performance Monitor data requests</P></TD></TR></TBODY></TABLE>
<P>|<P><BR></P><P>When connected to a network there are additional processes. The number varies from system to system. </P></FONT></BODY></HTML>

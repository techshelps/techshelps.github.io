<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How the Performance Data Is Structured</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>How the Performance Data Is Structured</H3><P>By now you must be wondering how the data is structured. We have a nifty table  at the end of this section detailing the contents of each of the performance data structures, and the structures are defined in excruciating detail in the WINPERF.H header file supplied with the Windows&nbsp;NT SDK.</P>
<P>The structure of the data retrieved by RegQueryValueEx begins with a single header structure, PERF_DATA_BLOCK. The PERF_DATA_BLOCK structure is followed by the data for the various object types returning data. For each object type defined on the system there is a PERF_OBJECT_TYPE structure and the accompanying data for that object.</P>
<P><img src="XOPZ08.gif"></P>
<P>Figure 12.3    Basic structure of performance data</P>
<P>The PERF_DATA_BLOCK structure describes the system and the performance data. Each PERF_OBJECT_TYPE structure describes the performance data for one type of object.</P>
<P>Following the PERF_OBJECT_TYPE structure for each object is a list of PERF_COUNTER_DEFINITION structures, one for each counter defined  for the object.</P>
<P>How the performance data for each object is structured depends on whether  the object has instances. You'll remember from earlier in this book that some objects, such as memory, do not have instances. Objects such as thread, disk, and processor do have one or more instances. For example, each thread in the system is an instance of the thread object type.</P>
<P>For an object with no instances, the data following the PERF_COUNTER_DEFINITION structures consists of a single PERF_COUNTER_BLOCK structure, followed by the data for each  counter. </P>
<P><img src="XOPZ09.gif"></P>
<P>Figure 12.4    Performance data structure of an object with no instances</P>
<P>For an object type with one or more instances, the list of counter definitions is followed by a PERF_INSTANCE_DEFINITION structure and a PERF_COUNTER_BLOCK structure for each instance.</P>
<P><img src="XOPZ10.gif"></P>
<P>Figure 12.5    Performance data structure of an object with one or more instances</P>
<P>Table 12.1    Performance Data Structures</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="180pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Data structure</P></TD><TD VALIGN="TOP"><P>Contents</P></TD></TR><TR><TD VALIGN="TOP"><P>PERF_DATA_BLOCK</P></TD><TD VALIGN="TOP"><P>Length of the entire data block, including all objects and their counters.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Offset to the Unicode system name and its length.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Time stamp.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Size of entire data structure.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Number of object type definitions contained in this data.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Offset of the first object type definition.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>PERF_OBJECT_TYPE</P></TD><TD VALIGN="TOP"><P>Size of the structure and the accompanying data for this object type.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Number of counters defined for the object type.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Number of instances of this object type.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Parent of this object (if any).</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Level of expertise required by the user to understand this object's data.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Offsets to the first definition counter under this object, and to the next PERF_OBJECT_TYPE structure.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Indexes to the object name and Explain text in the title database. </P></TD></TR><TR><TD VALIGN="TOP"><P>PERF_COUNTER_DEFINITION</P></TD><TD VALIGN="TOP"><P>Type of counter.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Offset to the counter and its size.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>The level of expertise required by the user to understand this counter.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Indexes to counter name and Explain text.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>PERF_COUNTER_BLOCK</P></TD><TD VALIGN="TOP"><P>Length of the PERF_COUNTER_BLOCK structure and the data that follows it.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>PERF_INSTANCE_DEFINITION</P></TD><TD VALIGN="TOP"><P>Offset to instance name, and its length.</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Index to parent instance (if any).</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Unique identifier (if any).</P></TD></TR></TBODY></TABLE>
<P>|<P><BR></P></FONT></BODY></HTML>

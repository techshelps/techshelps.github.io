<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Monitoring Within an Application</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Monitoring Within an Application</H2><P>Now that you know what is involved in writing a performance monitor, you may want to measure your own application to get some understanding of how it is operating. You can display the data when your application quits. </P>
<P>One thing you can do is simply run the <B>ntimer</B> command included on the floppy disk provided with this book. Typing the following will start the application you want to time, and then when the application ends, it prints basic execution statistics of elapsed, user, and kernel time in the application process.</P>
<P><B>ntimer</B> <I>application</I></P>
<P>For looking inside your application, the high resolution performance timer on the system is read using the QueryPerformanceCounter API call. This returns a 64-bit counter that contains the current count. The resolution of this counter varies from one system to the next. You can use the QueryPerformanceFrequency call to get this frequency on the system you are running on. Peruse the API documentation for the details. </P>
<P>A couple of other calls may also be handy for you. These are GetProcessTimes and GetThreadTimes. These return the same information printed by the <B>ntimer</B> utility. Realize that these timers are all subject to the granularity of the system clock. Even though the values returned are in 100-nanosecond units, the system clocks on the 486 and MIPS tick at 10-millisecond intervals, and on the MIPS at 10-millisecond intervals. So calling these more frequently within a program will not yield accurate results. Beware misleading advertising!</P>
<P></P></FONT></BODY></HTML>

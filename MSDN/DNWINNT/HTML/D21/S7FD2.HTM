<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making Sure Disk Performance Statistics Are Collected</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Making Sure Disk Performance Statistics Are Collected</H2><P>First let's review the important point we covered briefly in Chapter 2:  you must run the <B>diskperf </B>utility to activate disk performance statistics on your computer. To activate disk performance statistics on the local computer, type the following, and shut down and restart the computer.</P>
<P><B>diskperf -y</B></P>
<P>To activate disk performance statistics on a remote computer, specify the computer name when you start <B>diskperf</B>; for example, to collect statistics on a computer named AARDVARK, you would type:</P>
<P><B>diskperf -y \\aardvark</B></P>
<P>After typing this, you must restart the remote computer before disk statistics are collected.</P>
<P>You must be a member of the Administrators local group on a computer to run <B>diskperf</B> on it.</P>
<P>The <B>diskperf </B>utility installs the disk performance statistics driver, DISKPERF.SYS, in the I/O Manager's disk driver stack. See Figure 4.1, showing the stack with the disk performance statistics driver installed.</P>
<P><img src="XOPZ19.gif"></P>
<P>Figure 4.1    Disk driver stack with disk performance driver installed</P>
<P>The reason we put you through the bother of installing <B>diskperf</B> manually is because it causes a little performance-degrading overhead that you may not always want. Let's use Response Probe to do a quick experiment to see if it's worth it.</P>
<H4><B>Note</B>   By the way, be sure when doing these experiments to let your Windows NT computer settle for a while after logging on. Various background startup activities can interfere with your experiment. You might also want to disconnect the network if it is not involved in the experiment. Network drivers may respond to network events even if they are not directed to your computer.</P>
<P>By setting the FILEACCESSMODE parameter in Response Probe to UNBUFFER, we are guaranteed to bypass the cache and go directly to disk. (For more information about Response Probe and its parameters, see Appendix C, "Using Response Probe.") We'll set up Response Probe to do 100 reads of 512 bytes from a file. We want to transfer a small amount of data because we want to see the maximum distortion caused by the <B>diskperf</B> overhead. Unbuffered access to disk must be a multiple of a sector in size, so 512 is as small as we can go.</P>
<P>We'll use a file that is 100K in length. To create the file, we'll use the <B>createfil</B> utility, which is on the floppy disk provided with this book. To create a 100K file with the name FILENAME.EXT, type:</P>
<P><B>createfil filename.ext 100</B></P>
<P>We'll set the Response Probe FILESEEK to a mean of 100 and a standard deviation of 30. Because this is in units of 512-byte records, it means our accesses will be normally distributed around a point near the middle of the file. It is a property of normal distributions that about 99% of the access will be within plus-or-minus 3 standard deviations, so we should get a nice bell-shaped distribution of accesses across the length of the file. (For more information about using bell-shaped distributions in Response Probe experiments, see Appendix C of this book.)</P>
<P>On our 486 computer with a 50 MHz clock, we get consistent average times from Response Probe of 1666 milliseconds for the 100 reads, or 16.66 milliseconds/read, with <B>diskperf</B> enabled. This is probably close to the rotation time of the disk. The standard deviation of the response time to the 100 reads is 1 millisecond, so this is a very repeatable experiment. With <B>diskperf </B>disabled, we get the same number:  1666 milliseconds. There's no visible degradation in performance! So why did we make <B>diskperf</B> optional? Because if you do this same experiment on an 386 20 MHz computer, you see a degradation in disk performance of about 1.5%. On a 386/25SX laptop computer we observe a 0.9% (nine-tenths of 1%) degradation in disk throughput. Because we don't know what sort of system you are going to place Windows NT on, we prefer that you elect whether to collect disk performance statistics, rather than force you to do so by default. </P></FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performance Counter Definitions</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">

<form name="x">
    <p><object
    classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016"
    align="baseline" border="0" width="50" height="50" name="iv"></object></p>
</form>

<H2>Performance Counter Definitions</h2>

<P>The performance counters returned by Windows&nbsp;NT
each have a type definition that determines how a performance
monitor is supposed to use the counter to display data to the
user. </p>

<P>The Counter Type words are divided into a number of
fields, each of which defines a particular attribute of the
counter. Each field can contain one of several values. Most
values are mutually exclusive in their fields, with the exception
that the values for the Calculation Modifiers field can be
combined. The fields are later or'd into several basic counter
types currently in use in Windows&nbsp;NT.</p>

<P>First, we'll list the Fields and their possible
values and definitions in Table 12.3. To do this clearly we need
a little nomenclature. We assume data is available for two points
in time, Time 0 (T0) and Time 1 (T1). Time 1 comes after Time 0. (Time
units depend on the counter definition as described below.)</p>

<P>The counter value at T0 we'll call C0, and at T1 we
call the value C1. Some counters are computed using the counter
and the one that follows it in the counter block, which is
usually a base of some kind. Call these values B0 and B1
respectively.</p>

<P>DeltaT = T1 - T0.</p>

<P>DeltaC = C1 - C0.</p>

<P>DeltaB = B1 - B0.</p>

<p>Table 12.3 Counter Type Field Definitions</p>

<table border="0" cellpadding="7" cols="3">
    <tr>
        <td valign="top">Field name</td>
        <td valign="top">Value name</td>
        <td valign="top">Definition</td>
    </tr>
    <tr>
        <td valign="top">Size</td>
        <td valign="top">PERF_SIZE_DWORD</td>
        <td valign="top">4 bytes long.</td>
    </tr>
    <tr>
        <td valign="top">Size</td>
        <td valign="top">PERF_SIZE_LARGE</td>
        <td valign="top">8 bytes long.</td>
    </tr>
    <tr>
        <td valign="top">Size</td>
        <td valign="top">PERF_SIZE_ZERO</td>
        <td valign="top">Size is in CounterLength field of COUNTER_DEFINITION
        structure.</td>
    </tr>
    <tr>
        <td valign="top">Size</td>
        <td valign="top">PERF_SIZE_VARIABLE_LEN</td>
        <td valign="top">Size is in first DWORD of data.</td>
    </tr>
    <tr>
        <td valign="top">Type</td>
        <td valign="top">PERF_TYPE_NUMBER</td>
        <td valign="top">A number (not a counter).</td>
    </tr>
    <tr>
        <td valign="top">Type</td>
        <td valign="top">PERF_TYPE_COUNTER</td>
        <td valign="top">An increasing numeric value.</td>
    </tr>
    <tr>
        <td valign="top">Type</td>
        <td valign="top">PERF_TYPE_TEXT</td>
        <td valign="top">A text field.</td>
    </tr>
    <tr>
        <td valign="top">Type</td>
        <td valign="top">PERF_TYPE_ZERO</td>
        <td valign="top">Display a zero always.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_NUMBER</td>
        <td valign="top">PERF_NUMBER_HEX</td>
        <td valign="top">Display as hexadecimal number.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_NUMBER</td>
        <td valign="top">PERF_NUMBER_DECIMAL</td>
        <td valign="top">Display as decimal number.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_NUMBER</td>
        <td valign="top">PERF_NUMBER_DEC_1000</td>
        <td valign="top">Display as decimal number/1000.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_VALUE</td>
        <td valign="top">Display DeltaC.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_RATE</td>
        <td valign="top">Display DeltaC/DeltaT.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_FRACTION</td>
        <td valign="top">Display DeltaC/DeltaB.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_BASE</td>
        <td valign="top">Don't display, just use in calculating other counter.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_ELAPSED</td>
        <td valign="top">Display T1 - C1, meaning subtract counter from current
        time.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_QUEUELEN</td>
        <td valign="top">Space-Time product of queue length. <br>
        (C1 + (T1 * B1))/DeltaT</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_COUNTER</td>
        <td valign="top">PERF_COUNTER_HISTOGRAM</td>
        <td valign="top">Counter begins or ends a histogram.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_TEXT</td>
        <td valign="top">PERF_TEXT_UNICODE</td>
        <td valign="top">Text is Unicode.</td>
    </tr>
    <tr>
        <td valign="top">SubType of Type <br>
        PERF_TYPE_TEXT</td>
        <td valign="top">PERF_TEXT_ASCII</td>
        <td valign="top">ASCII using CodePage as defined by PERF_OBJECT_TYPE.CodePage.</td>
    </tr>
    <tr>
        <td valign="top">Timer Subtype</td>
        <td valign="top">PERF_TIMER_TICK</td>
        <td valign="top">Uses frequency in PERF_DATA_BLOCK.PerfFreq.</td>
    </tr>
    <tr>
        <td valign="top">Timer Subtype</td>
        <td valign="top">PERF_TIMER_100NS</td>
        <td valign="top">Time is in units of 100 nanoseconds.</td>
    </tr>
    <tr>
        <td valign="top">Timer Subtype</td>
        <td valign="top">PERF_OBJECT_TIMER</td>
        <td valign="top">Time is in units defined in PERF_OBJECT_TYPE.PerfFreq.</td>
    </tr>
    <tr>
        <td valign="top">Calculation Modifiers</td>
        <td valign="top">PERF_DELTA_COUNTER</td>
        <td valign="top">Compute difference first: DeltaC.</td>
    </tr>
    <tr>
        <td valign="top">Calculation Modifiers</td>
        <td valign="top">PERF_DELTA_BASE</td>
        <td valign="top">Compute the base difference: DeltaB.</td>
    </tr>
    <tr>
        <td valign="top">Calculation Modifiers</td>
        <td valign="top">PERF_INVERSE_COUNTER</td>
        <td valign="top">After computing, subtract resulting fraction from
        1.</td>
    </tr>
    <tr>
        <td valign="top">Calculation Modifiers</td>
        <td valign="top">PERF_MULTI_COUNTER</td>
        <td valign="top">Sum of multiple instances. Divide by number
        of instances (in B1) after computing to get average.</td>
    </tr>
    <tr>
        <td valign="top">Display</td>
        <td valign="top">PERF_DISPLAY_NO_SUFFIX</td>
        <td valign="top">No suffix.</td>
    </tr>
    <tr>
        <td valign="top">Display</td>
        <td valign="top">PERF_DISPLAY_PER_SEC</td>
        <td valign="top">&quot;/second&quot;</td>
    </tr>
    <tr>
        <td valign="top">Display</td>
        <td valign="top">PERF_DISPLAY_PERCENT</td>
        <td valign="top">&quot;%&quot;</td>
    </tr>
    <tr>
        <td valign="top">Display</td>
        <td valign="top">PERF_DISPLAY_SECONDS</td>
        <td valign="top">&quot;seconds&quot;</td>
    </tr>
    <tr>
        <td valign="top">Display</td>
        <td valign="top">PERF_DISPLAY_NOSHOW</td>
        <td valign="top">Don't display the value at all.</td>
    </tr>
</table>

<P>In the next table we define a number of pre-existing
counter types used in counter definitions. These are combinations
of the above flags. Currently, Performance Monitor supports only
the counter types defined in Table 12.4, except for PERF_COUNTER_TEXT
and PERF_COUNTER_QUEUELEN_TYPE.</p>

<p>Table 12.4 Predefined Counter Types and How to Display Them</p>

<table border="0" cellpadding="7" cols="6">
    <tr>
        <td valign="top" colspan="2">Counter type name</td>
        <td valign="top" colspan="3">Composition</td>
        <td valign="top" colspan="4">Definition/computation</td>
    </tr>
    <tr>
        <td valign="top" colspan="2">PERF_COUNTER_COUNTER</td>
        <td valign="top" colspan="3">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER
        | PERF_DISPLAY_PER_SEC</td>
        <td valign="top" colspan="4">32-bit rate of counts.<p>DeltaC
        / DeltaT </p>
        <p>The most common sort of counter.</p>
        </td>
    </tr>
    <tr>
        <td valign="top" colspan="2">PERF_COUNTER_TIMER</td>
        <td valign="top" colspan="3">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER
        | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="4">64-bit Timer.<p>(DeltaC /
        DeltaT) * 100</p>
        <p>The most common sort of timer.</p>
        </td>
    </tr>
    <tr>
        <td valign="top" colspan="2">PERF_COUNTER_QUEUELEN_TYPE </td>
        <td valign="top" colspan="3">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_QUEUELEN | PERF_TIMER_TICK | PERF_DELTA_COUNTER
        | PERF_DISPLAY_NO_SUFFIX</td>
        <td valign="top" colspan="4">Space-Time product of queue
        length. <p>(C1 + (T1 * B1))/DeltaT</p>
        <p>Not used in the current release of Windows&nbsp;NT.</p>
        </td>
    </tr>
    <tr>
        <td valign="top" colspan="2">PERF_COUNTER_BULK_COUNT</td>
        <td valign="top" colspan="3">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER
        | PERF_DISPLAY_PER_SEC</td>
        <td valign="top" colspan="4">64-bit rate of count. Used
        to count byte transmission rates.<p>DeltaC / DeltaT</p>
        </td>
    </tr>
    <tr>
        <td valign="top" colspan="2">PERF_COUNTER_TEXT</td>
        <td valign="top" colspan="3">PERF_SIZE_VARIABLE_LEN | PERF_TYPE_TEXT
        | PERF_TEXT_UNICODE | PERF_DISPLAY_NO_SUFFIX</td>
        <td valign="top" colspan="4">Indicates the counter is not
        a counter but rather Unicode text.<p>Display as text.</p>
        </td>
    </tr>
    <tr>
        <td valign="top" colspan="2">PERF_COUNTER_RAWCOUNT </td>
        <td valign="top" colspan="3">PERF_SIZE_DWORD | PERF_TYPE_NUMBER
        | PERF_NUMBER_DECIMAL | PERF_DISPLAY_NO_SUFFIX</td>
        <td valign="top" colspan="4">A raw count that should not
        be averaged.<p>Used for instantaneous counts.</p>
        <p>Display B1.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_SAMPLE_FRACTION</td>
        <td valign="top" colspan="2">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_FRACTION | PERF_DELTA_COUNTER | PERF_DELTA_BASE
        | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">A count that is either 1 or
        0 on each sampling interrupt.<p>Display as percentage.</p>
        <p>(DeltaC / DeltaB) * 100</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_SAMPLE_COUNTER</td>
        <td valign="top" colspan="2">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER
        | PERF_DISPLAY_NO_SUFFIX</td>
        <td valign="top" colspan="3">A count that is sampled on each
        sampling interrupt.<p>Display without a suffix.</p>
        <p>DeltaC/DeltaB</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_COUNTER_NODATA</td>
        <td valign="top" colspan="2">PERF_SIZE_ZERO | PERF_DISPLAY_NOSHOW</td>
        <td valign="top" colspan="3">This is not to be displayed.</td>
    </tr>
    <tr>
        <td valign="top">PERF_COUNTER_TIMER_INV</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER
        | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">This is used to show how busy
        the processor is, but it is really time in the idle process. </td>
    </tr>
    <tr>
        <td valign="top">PERF_SAMPLE_BASE</td>
        <td valign="top" colspan="2">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW </td>
        <td valign="top" colspan="3">The divisor for a sample (previous
        counter).<p>Check that this is &gt; 0 before dividing!</p>
        <p>Don't display.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_AVERAGE_TIMER</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_FRACTION | PERF_DISPLAY_SECONDS</td>
        <td valign="top" colspan="3">A timer which, when divided
        by a base, yields a time per operation. </td>
    </tr>
    <tr>
        <td valign="top">PERF_AVERAGE_BASE</td>
        <td valign="top" colspan="2">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW</td>
        <td valign="top" colspan="3">Used as the denominator in the
        computation of time or count averages.<p>Do not display.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_AVERAGE_BULK</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_FRACTION | PERF_DISPLAY_NO_SUFFIX</td>
        <td valign="top" colspan="3">A 64-bit count which when divided
        (typically) by the number of operations gives (typically)
        the bytes/operation.<p>DeltaC / DeltaB</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_100NSEC_TIMER</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_DELTA_COUNTER
        | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">64-bit timer in 100 nanosecond
        units.<p>(DeltaC / DeltaT) * 100</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_100NSEC_TIMER_INV</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_DELTA_COUNTER
        | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">64-bit timer inverse, that
        is, we measure idle time, then display <br>
        (1-(idle time))<p>(1 - (DeltaC / DeltaT)) * 100</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_COUNTER_MULTI_TIMER</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_DELTA_COUNTER | PERF_TIMER_TICK
        | PERF_MULTI_COUNTER | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">Timer for multiple instances,
        so sum of result can exceed 100%. Number of instances is
        in the next counter.<p>100 * (DeltaC / DeltaT) / B1 </p>
        <p>Display as percentage.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_COUNTER_MULTI_TIMER_INV</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_RATE | PERF_DELTA_COUNTER | PERF_MULTI_COUNTER
        | PERF_TIMER_TICK | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">Display inverse of timer for multiple
        instances.<p>100 * (1 - ((DeltaC / DeltaT) / B1))</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_COUNTER_MULTI_BASE</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_BASE | PERF_MULTI_COUNTER | PERF_DISPLAY_NOSHOW</td>
        <td valign="top" colspan="3">Base for _MULTI_ counters.<p>Do
        not display.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_100NSEC_MULTI_TIMER</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_DELTA_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS
        | PERF_MULTI_COUNTER | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">Timer for multiple instances,
        so sum of result can exceed 100%. Number of instances is
        in the next counter.<p>100 * (DeltaC / DeltaT) / B1 </p>
        <p>Display as percentage.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_100NSEC_MULTI_TIMER_INV </td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_DELTA_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS
        | PERF_MULTI_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">Display inverse of timer for multiple
        instances.<p>100 * (1 - ((DeltaC / DeltaT) / B1))</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_RAW_FRACTION</td>
        <td valign="top" colspan="2">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_FRACTION | PERF_DISPLAY_PERCENT</td>
        <td valign="top" colspan="3">Fraction of next counter, display
        as a percentage.<p>(C/B) * 100</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_RAW_BASE</td>
        <td valign="top" colspan="2">PERF_SIZE_DWORD | PERF_TYPE_COUNTER
        | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW</td>
        <td valign="top" colspan="3">Used as a base for the preceding
        counter.<p>Do not display.</p>
        </td>
    </tr>
    <tr>
        <td valign="top">PERF_ELAPSED_TIME</td>
        <td valign="top" colspan="2">PERF_SIZE_LARGE | PERF_TYPE_COUNTER
        | PERF_COUNTER_ELAPSED | PERF_OBJECT_TIMER | PERF_DISPLAY_SECONDS</td>
        <td valign="top" colspan="3">The data collected in this counter
        is actually the start time of the item being measured.
        For display, this data is subtracted from the snapshot
        time to yield the elapsed time (the difference between
        the two). In the definition to the left, the PerfTime
        field of the PERF_OBJECT_TYPE contains the sample time as indicated
        by the PERF_OBJECT_TIMER bit and the difference is scaled
        by the PerfFreq of the PERF_OBJECT_TYPE to convert the
        time units into seconds.</td>
    </tr>
</TBODY></table>

<P>|<P><br>
</p>

<P>Whew! Okay, now you know how to compute and display
all the different types of counters that come back from the call
to the Configuration Registry when you specify
HKEY_PERFORMANCE_DATA as the key. Hey, we said you'd be stimulating
at parties, didn't we? Now get to work on that monitor! </p>
</FONT></BODY>
</html>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the I/O Profiler</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Using the I/O Profiler</H3><P>The File I/O and Synchronization Win32 API Profiler (FIOSAP) is an outgrowth of WAP designed to profile applications that possibly have multiple concurrent threads. The Windows&nbsp;NT File I/O and Synchronization APIs are contained in the KERNEL32.DLL. The profiler is in the form of a single FERNEL32.DLL, corresponding to the KERNEL32 DLL. This DLL sits between an application and KERNEL32.DLL, intercepts file I/O and synchronization API calls to KERNEL32.DLL, and then makes and times a call to the actual API. It also collects various statistics useful in monitoring the overall file, event, mutex and semaphore activity of the application(s).</P>
<P>FERNEL32.DLL reports the number of operations, total time and average time in each operation, as well as the additional statistics for some of these operations. The following list shows exactly what additional operations are measured. Times are expressed in microseconds.</P>
<UL><LI>     Statistics summed over all operations on all files</LI><LI>     Open file operations</LI><LI>     Create file operations</LI><LI>     Write file operations

<UL><LI>     Total number of bytes written</LI><LI>     Average number of bytes written per operation</LI><LI>     Standard deviation of the number of bytes written per operation</LI></UL></LI><LI>     Read file operations

<UL><LI>     Total number of bytes read</LI><LI>     Average number of bytes read per operation</LI><LI>     Standard deviation of the number of bytes read per operation</LI></UL></LI><LI>     Flush file buffers operations</LI><LI>     Set file pointer operations</LI><LI>     Get file information operations</LI><LI>     Lock and unlock file operations

<UL><LI>     Total number of bytes locked</LI><LI>     Average number of bytes locked</LI><LI>     Standard deviation of the number of bytes locked</LI></UL></LI><LI>     Set end of file operations</LI><LI>     Close file operations</LI></UL><P>The profiling DLL also records the following information for each synchronization (event, mutex, or semaphore object) handle that the process uses:</P>
<UL><LI>     Statistics summed over all operations on all semaphores, all events, and all mutexes</LI><LI>     Open operations</LI><LI>     Create operations</LI><LI>     Release operations (only for mutex and semaphore objects)</LI><LI>     Set event operations (only for event objects)</LI><LI>     Reset event operations (only for event objects)</LI><LI>     Pulse event operations (only for event objects)</LI><LI>     Wait operations (the statistics are kept separately for Single, Multiple-All, and Multiple-Any Wait operations)</LI><LI>     Close file operations</LI></UL><P>To profile a list of applications with FIOSAP, type:</P>
<P><B>apf32cvt fernel32</B> <I>&lt;app list&gt;</I></P>
<P>where <I>&lt;app list&gt;</I> is a list of one or more names of the executable applications or DLLs that are to be profiled during the profiling run. As with WAP, <I>&lt;app list&gt;</I> must be the last argument to <B>apf32cvt</B>. For the Zapdata application we are looking at in this example, we type:</P>
<P><B>apf32cvt fernel32 zapdata.exe</B></P>
<P>In the next two figures we show part of the results of the run of FIOSAP on Zapdata.</P>
<P><img src="XOPJ16.gif"></P>
<P>Figure 10.16    Partial FIOSAP file statistics on the Zapdata application</P>
<P><img src="XOPJ17.gif"></P>
<P>Figure 10.17    Partial FIOSAP event and semaphore statistics on the Zapdata application</P>
<P>Data from FIOSAP is written to FERNEL32.END,<I> </I>in the working directory of the application. FIOSAP will write data from concurrent multiple threads to the same data file, and there is no method for separating the data based upon threads. However, FIOSAP will write data from concurrent multiple processes to different data files, as long as the profiled concurrent processes have different working directories. If you have two concurrent processes with the same working directory, the data for one of them will be lost.</P>
<P>So now, if you have an application and you want to know what it is waiting for when it is not burning up the processor, you know just what to do.</P></FONT></BODY></HTML>

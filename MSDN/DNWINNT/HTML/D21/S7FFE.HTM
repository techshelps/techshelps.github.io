<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Collecting WAP Data</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Collecting WAP Data</H3><P>If you want to collect profile data while an application is running, you must start <B>apf32dmp</B> before you start the application, and it must remain running throughout the execution of the application. The <B>apf32dmp</B><I> </I>utility<I> </I>also provides a means to collect data during selected phases of the profiling run (see below). The application may now be executed normally. Profiling will begin as soon as the application is started.</P>
<P>When you stop <B>apf32dmp</B>, it writes the profiling data to ASCII files. The data is written to <I>DLLNAME.</I>END, where <I>DLLNAME</I> is the name of the system DLL that is being profiled. For example, KERNEL32.END would contain data from the last profiling run of KERNEL32.DLL. After each run, you should rename the .END data files so that they aren't overwritten with the data from the next run.</P>
<P>Data from concurrent processes and threads is written to the same data file, and there is no method for separating that data. If you need separate data on different processes, profile them individually in separate runs. If you need separate data on different threads, use the CAP tool discussed later in this chapter. </P>
<P>The program <B>apf32dmp</B> also allows data to be dumped to a file or cleared from memory at any time during the profiling run. By default, the data is dumped to a file but not cleared from memory. If you choose both options, the data is first dumped and then cleared. If you clear any data without first dumping it to a file, the data will be lost. Then you'll get to do the experiment again. Some fun, huh?</P>
<P>To specify whether data is dumped to a file or cleared, choose the option you want in the <B>apf32dmp</B> dialog box.</P>
<P>The utility data dumps to a file <I>DLLNAME.EXT</I>, where <I>DLLNAME</I> is the name of the system DLL being profiled, and <I>.EXT</I> is a file extension you define. By default, this extension is .WAP, but you may change it if you want. (Do not use the extension .END, as the profiler uses this extension.) <I>DLLNAME.EXT</I> is placed in the working directory of <B>apf32dmp</B>. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Working Set Tuner</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Using the Working Set Tuner</H2><P>Using the Working Set Tuner is similar to using CAP, from which it is derived. You must first recompile your application with the <B>-Gh</B> and <B>-Zd</B> switches. Then, you link it using the WST.LIB and the linker options <B>debugtype:coff</B> and <B>debug:full</B>. This prepares your executable's C routines to be prepped for the working set tuner. </P>
<P>To run the Working Set Tuner, you first create a WST directory in the root of your C drive. Into C:\WST you place a WST.INI file. This file contains three required section headers:</P>
<UL><LI>     [EXES]  Names of applications to be tuned, each on a separate line.</LI><LI>     [PATCH IMPORTS]  This section must be here but must be blank.</LI><LI>     [TIME INTERVAL]  The snapshot time interval in milliseconds. If left blank, 1000 is used.</LI></UL><P>In our case WST.INI looked like this:</P>
<P>|<P><BR></P>
<pre><code>[EXES]
sol.exe
[PATCH IMPORTS]
[TIME INTERVAL]</code></pre>
<P>Before you take a measurement you must place the WST.DLL<I> </I>measurement library on your path.</P>
<P>You use the <B>wstdump</B> utility to specify which portion of your application's operation is tuned. As with the other measurement control utilities, you can clear and dump the counters at any time. When the application ends, these data files are dumped automatically. Dumping the data always places it into the C:\WST directory in files with names of the form<I> modulename.</I>WSP and <I>modulename.</I>TMI<I>. </I>If you dump data multiple times, the file extensions from each dump will be modified to .W<I>??</I> and .T<I>??</I>, where <I>??</I> is a hexadecimal number between 0x01 and 0xFF inclusive.</P>
<P>You can concatenate the data from multiple scenarios using the <B>wtscat</B> utility. It produces composite .WSP and .TMI files after renaming the original ones to .WXX and .TXX. The weight of the files in the concatenated result depends on the length of each experiment, or more accurately—because you might have varied the time interval—on the number of snapshots in each. The bits for each function from the multiple files are concatenated, not or'd together.</P>
<P>When you are done with the measurement, you produce the packing list with the <B>wstune</B> utility:</P>
<P><B>wstune /o</B> <I>modulename</I>.<B>wsp</B></P>
<P>The principal result of <B>wstune</B> is a <I>modulename.</I>PRF file, which you use when you recompile your application. You will link with the <B>order:</B><I>modulename</I><B>.prf </B>directive. The <B>wstune</B> utility also produces a .DT file showing the tuned order of functions with the bitstrings, and a .DN file showing the unordered functions and, at the bottom, a count of how many pages were touched in the unordered case.</P>
<P>To implement the working set improvements, recompile your application using the <B>-Gy</B> compiler option. This option assures the linker knows the location of the start and end of each function. Then you can link the application using the linker option by typing:</P>
<P><B>-order@</B><I>modulename</I><B>.prf</B></P>
<P>That's all there is to it. Next to Performance Monitor, the Working Set Tuner is our favorite tool.</P></FONT></BODY></HTML>

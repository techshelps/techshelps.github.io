<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bottleneck Defined</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Bottleneck Defined</H2><P>Think of an <I>interaction </I>as a unit of work on the system. This could be a user interaction with an application, a reading of a file from a network server, or a sending of e-mail across the network. It is best if you define this action yourself, because you know what your computer is being used to accomplish. (Well, maybe you don't. But we certainly<I> </I>don't know.) If we know just a few things about this interaction, there are a lot of things we can say about the performance limitations of the system.</P>
<P>The first thing we want to know is the total time the interaction uses on each unit of hardware on the computer. Call this the <I>demand </I>for the device, and measure it in seconds. </P>
<P>If <I>demand(processor)</I> is the processor time used by the interaction, and <I>demand(disk) </I>is the disk time used by the interaction, we can invent a natural law called the Consistency  Law that states: </P>
<P><I>util(processor) / util(disk) = demand(processor) / demand(disk)</I></P>
<P>where <I>util(device)</I> is the utilization of the device (either the disk or the processor in this case). <I>Util(device)</I> is a number from 0 to 1 which is generally expressed as a percentage from 0 to 100%. This tells us that the devices will be busy in relation to the demand for them. A consequence of this law is that a device may not necessarily be at maximum utilization in order for a system to be achieving maximum <I>throughput</I>, defined as interactions per second.</P>
<P>If a device can achieve utilization of 1 (for reasons why a device may not be able to achieve utilization of 1, see the discussion of sequencing<I> </I>in Chapter 7), the maximum throughput for that device is:</P>
<P><I>max throughput(device) =  1 / demand(device)</I></P>
<P>Clearly, the device with the smallest <I>max throughput</I> in the system for this interaction will determine the maximum throughput the system can achieve. This device is the bottleneck<I>. </I>Notice that making any other device faster can never yield more throughput; it can only make the faster device have lower utilization. This is why it is so important to discover the bottleneck in a system before signing the purchase order for new hardware!</P>
<P>For example, suppose that an interaction requires .3 seconds of processor time and .5 seconds of disk time, and no other device time. The processor can handle 3.3 interactions per second, while the disk can handle 2 interactions per second. So the overall system can handle only 2 interactions per second, at which point the disk will be <I>saturated</I> (utilization = 1)<I>. </I>By the Consistency Law, the utilization of the processor at that point is .3/.5 = .6, or 60%. Pretty cool, huh? </P>
<P>This gives rise to a general observation known as the Throughput Law, which says that for all devices, the overall throughput of the system is measured by the following:</P>
<P><I>throughput = util(device) / demand(device)</I></P>
<P>For certain devices, it is useful to define the demand for the device in terms of the number of times the device is used by the interaction, and the average amount of time the device is used on each visit, known in queuing theory as the <I>service </I>time of the device:</P>
<P><I>demand(device)  =  visits(device) * service(device)</I></P>
<P>Windows&nbsp;NT Performance Monitor is based on these simple yet powerful principles. For each device, it counts and displays such basic elements as the utilization, visits, and service time. Sometimes it displays only some of these values and you can easily compute the others. This is done in those cases when we must leave it to you to define what constitutes an interaction on your system. </P>
<P>But we also use a simple trick. Because we don't know what your interaction is, we define the default interaction on the system as whatever took place during the last second. With this definition of interaction, <I>demand(device) </I>expressed as a fraction of a second is the same numerically as <I>util(device) </I>expressed as a number from 0 to 1. So if you don't care to define your interaction too precisely, you can use our default definition and get meaningful results.</P>
<P>Soon, you will easily be able to toss these simple formulas around. Your friends will be amazed.</P></FONT></BODY></HTML>

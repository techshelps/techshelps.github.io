<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Memory Object</H2><H3><A NAME="sec0"></A>Object: Memory     Index:004 <I>        Novice</I></H3><P>The Memory object type includes those counters that describe the behavior of both real and virtual memory on the computer. Real memory is allocated in units of pages. Virtual memory may exceed real memory in size, causing page traffic as virtual pages are moved between disk and real memory.</P>
<H3><A NAME="sec1"></A>Available Bytes<I>     Expert</I></H3><P>Available Bytes displays the size of the virtual memory currently on the Zeroed, Free, and Standby lists. Zeroed and Free memory is ready for use, with Zeroed memory cleared to zeros. Standby memory is memory removed from a process's Working Set but still available. Notice that this is an instantaneous count, not an average over the time interval.</P>
<P>Index: 024     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec2"></A>Cache Bytes<I>     Advanced</I></H3><P>Cache Bytes measures the number of bytes currently in use by the system Cache. The system Cache is used to buffer data retrieved from disk or LAN. The system Cache uses memory not in use by active processes in the computer.</P>
<P>Index: 818     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec3"></A>Cache Bytes Peak<I>     Advanced</I></H3><P>Cache Bytes Peak measures the maximum number of bytes used by the system Cache. The system Cache is used to buffer data retrieved from disk or LAN. The system Cache uses memory not in use by active processes in the computer.</P>
<P>Index: 820     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec4"></A>Cache Faults/sec<I>     Wizard</I></H3><P>Cache Faults occur whenever the Cache manager does not find a file's page in the immediate Cache and must ask the memory manager to locate the page elsewhere in memory or on the disk so that it can be loaded into the immediate Cache.</P>
<P>Index: 036     Default Scale: 0.1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec5"></A>Commit Limit<I>     Wizard</I></H3><P>Commit Limit is the size (in bytes) of virtual memory that can be committed without having to extend the paging file(s). If the paging file(s) can be extended, this is a soft limit.</P>
<P>Index: 030     Default Scale: 0.000001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec6"></A>Committed Bytes<I>     Expert</I></H3><P>Committed Bytes displays the size of virtual memory (in bytes) that has been Committed (as opposed to simply reserved). Committed memory must have backing (that is, disk) storage available, or must be assured never to need disk storage (because main memory is large enough to hold it). Notice that this is an instantaneous count, not an average over the time interval.</P>
<P>Index: 026     Default Scale: 0.000001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec7"></A>Demand Zero Faults/sec<I>     Wizard</I></H3><P>Demand Zero Faults are the number of page faults for pages that must be filled with zeros before the fault is satisfied. If the Zeroed list is not empty, the fault can be resolved by removing a page from the Zeroed list.</P>
<P>Index: 038     Default Scale: 0.1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec8"></A>Free System Page Table Entries<I>     Wizard</I></H3><P>The number of Page Table Entries not currently in use by the system.</P>
<P>Index: 678     Default Scale: 0.01</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec9"></A>Page Faults/sec<I>     Novice</I></H3><P>Page Faults/sec is a count of the Page Faults in the processor. A page fault occurs when a process refers to a virtual memory page that is not in its Working Set in main memory. A Page Fault will not cause the page to be fetched from disk if that page is on the standby list, and hence already in main memory, or if it is in use by another process with whom the page is shared.</P>
<P>Index: 028     Default Scale: 0.1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec10"></A>Page Reads/sec<I>     Expert</I></H3><P>Page Reads/sec is the number of times the disk was read to retrieve pages of virtual memory necessary to resolve page faults. Multiple pages can be read during a disk read operation.</P>
<P>Index: 042     Default Scale: 1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec11"></A>Page Writes/sec<I>     Expert</I></H3><P>Page Writes/sec is a count of the number of times pages have been written to the disk because they were changed since last retrieved. Each such write operation may transfer a number of pages.</P>
<P>Index: 050     Default Scale: 1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec12"></A>Pages Input/sec<I>     Novice</I></H3><P>Pages Input/sec is the number of pages read from the disk to resolve memory references to pages that were not in memory at the time of the reference. This counter includes paging traffic on behalf of the system Cache to access file data for applications. This is an important counter to observe if you are concerned about excessive memory pressure (that is, thrashing), and the excessive paging that may result.</P>
<P>Index: 822     Default Scale: 1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec13"></A>Pages Output/sec<I>     Advanced</I></H3><P>Pages Output/sec is a count of the number of pages that are written to disk because the pages have been modified in main memory.</P>
<P>Index: 048     Default Scale: 1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec14"></A>Pages/sec<I>     Novice</I></H3><P>Pages/sec is the number of pages read from the disk or written to the disk to resolve memory references to pages that were not in memory at the time of the reference. This is the sum of Pages Input/sec and Pages Output/sec. This counter includes paging traffic on behalf of the system Cache to access file data for applications. This is the primary counter to observe if you are concerned about excessive memory pressure (that is, thrashing), and the excessive paging that may result.</P>
<P>Index: 040     Default Scale: 1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec15"></A>Pool Nonpaged Allocs<I>     Wizard</I></H3><P>Pool Nonpaged Allocs is the number of calls to allocate space in the system Nonpaged Pool. Nonpaged Pool is a system memory area where space is acquired by operating system components as they accomplish their appointed tasks. Nonpaged Pool pages cannot be paged out to the paging file, but instead remain in main memory as long as they are allocated.</P>
<P>Index: 064     Default Scale: 0.01</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec16"></A>Pool Nonpaged Bytes<I>     Advanced</I></H3><P>Pool Nonpaged Bytes is the number of bytes in the Nonpaged Pool, a system memory area where space is acquired by operating system components as they accomplish their appointed tasks. Nonpaged Pool pages cannot be paged out to the paging file, but instead remain in main memory as long as they are allocated.</P>
<P>Index: 058     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec17"></A>Pool Paged Allocs<I>     Wizard</I></H3><P>Pool Paged Allocs is the number of calls to allocate space in the system Paged Pool. Paged Pool is a system memory area where space is acquired by operating system components as they accomplish their appointed tasks. Paged Pool pages can be paged out to the paging file when not accessed by the system for sustained periods of time.</P>
<P>Index: 060     Default Scale: 0.01</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec18"></A>Pool Paged Bytes<I>     Advanced</I></H3><P>Pool Paged Bytes is the number of bytes in the Paged Pool, a system memory area where space is acquired by operating system components as they accomplish their appointed tasks. Paged Pool pages can be paged out to the paging file when not accessed by the system for sustained periods of time.</P>
<P>Index: 056     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec19"></A>Pool Paged Resident Bytes     Advanced</H3><P>Pool Paged Resident Bytes is the size of paged Pool resident in core memory. This is the actual cost of the paged Pool allocation, since this is actively in use and using real physical memory.</P>
<P>Index: 066     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec20"></A>System Cache Resident Bytes     Advanced</H3><P>System Cache Resident Bytes is the number of bytes currently resident in the global disk cache.</P>
<P>Index: 076     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec21"></A>System Code Resident Bytes     Advanced</H3><P>System Code Resident Bytes is the number of bytes of System Code Total Bytes currently resident in core memory. This is the code working set of the pagable executive. In addition to this, there is another ~300k bytes of non-paged kernel code.</P>
<P>Index: 070     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec22"></A>System Code Total Bytes     Advanced</H3><P>System Code Total Bytes is the number of bytes of pagable pages in ntoskrnl.exe, hal.dll, and the boot drivers and file systems loaded by ntldr/osloader.</P>
<P>Index: 068     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec23"></A>System Driver Resident Bytes     Advanced</H3><P>System Driver Resident Bytes is the number of bytes of System Driver Total Bytes currently resident in core memory. This number is the code working set of the pagable drivers. In addition to this, there is another ~700k bytes of non-paged driver code.</P>
<P>Index: 074     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec24"></A>System Driver Total Bytes     Advanced</H3><P>System Driver Total Bytes is the number of bytes of pagable pages in all other loaded device drivers.</P>
<P>Index: 072     Default Scale: 0.00001</P>
<P>Counter Type: PERF_COUNTER_RAWCOUNT     Counter Size: 4 bytes</P>
<H3><A NAME="sec25"></A>Transition Faults/sec<I>     Wizard</I></H3><P>Transition Faults/sec is the number of page faults resolved by recovering pages that were in transition, that is, being written to disk at the time of the page fault. The pages were recovered without additional disk activity.</P>
<P>Index: 034     Default Scale: 0.1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P>
<H3><A NAME="sec26"></A>Write Copies/sec<I>     Wizard</I></H3><P>Write Copies/sec is the number of page faults that have been satisfied by making a copy of a page when an attempt to write to the page is made. This is an economical way of sharing data since the copy of the page is only made on an attempt to write to the page; otherwise, the page is shared.</P>
<P>Index: 032     Default Scale: 1</P>
<P>Counter Type: PERF_COUNTER_COUNTER     Counter Size: 4 bytes</P></FONT></BODY></HTML>

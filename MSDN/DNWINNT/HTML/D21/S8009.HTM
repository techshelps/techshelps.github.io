<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Symbolic Debugger wt Command</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The Symbolic Debugger wt Command </H3><P>Finally, we'd like to point out that there is a special cool performance feature in the Windows&nbsp;NT symbolic debugger. The <B>wt </B>command can be used to trace calls in a program and the number of instructions between them. Just type <B>wt</B> and watch those instructions fly!</P>
<P><img src="XOPJ11.gif"></P>
<P>Figure 10.22    Windbg wt command of a portion of the Solitaire cascade</P>
<P>This is a tool that lets you get right down to the details of what is happening in your code without the burden of tracing every instruction. In a way it gives you the same information as CAP, though far less quickly. But it avoids the recompile that CAP requires, and sometimes you just want to take a quick look at a small issue. That's when <B>wt</B> is a diamond in the rough. It can help to have those same system DLLs with debugging symbols that CAP uses. Go get them and have at it.</P></FONT></BODY></HTML>

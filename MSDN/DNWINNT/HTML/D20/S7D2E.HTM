<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STOP Messages Caused by a Software Trap</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>STOP Messages Caused by a Software Trap</H3><P>Another group of STOP messages is caused by a software condition detected by the processor. This condition, called a software trap, happens when a processor detects a problem in an executing instruction from which the processor will not continue. For instance, a processor will not carry out an instruction that contains invalid operands.</P>
<P>When you get a STOP message that is caused by a software trap, follow the steps given in "Remaining STOP Messages," later in this chapter.</P>
<P>The following is an example of the first line of the STOP message that is displayed for all software traps:</P>
<P><BR></P>
<pre><code>*** STOP: 0x0000007F (0x0000000<I>n</I>, 00000000, 00000000, 00000000)
UNEXPECTED_KERNEL_MODE_TRAP</code></pre>
<P>The first parameter (shown as 0x0000000<I>n</I> in the example) in the message parameter list indicates which of twelve possible traps has occurred. For instance, in the case of an instruction that contains invalid operands, the message will appear as follows:</P>
<P><BR></P>
<pre><code>*** STOP: 0x0000007F (0x00000006, 00000000, 00000000, 00000000)
UNEXPECTED_KERNEL_MODE_TRAP</code></pre>
<P>The following table shows the possible values and their meanings for that first parameter.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="112pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Parameter</P></TD><TD VALIGN="TOP"><P>Processor detected </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000000</P></TD><TD VALIGN="TOP"><P>An attempt to divide by zero.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000001</P></TD><TD VALIGN="TOP"><P>A system-debugger call.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000003</P></TD><TD VALIGN="TOP"><P>A debugger breakpoint.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000004</P></TD><TD VALIGN="TOP"><P>An arithmetic operation overflow.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000005</P></TD><TD VALIGN="TOP"><P>An array index that exceeds the array bounds.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000006</P></TD><TD VALIGN="TOP"><P>Invalid operands in an instruction or an attempt to execute a protected-mode instruction while running in real mode.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000007</P></TD><TD VALIGN="TOP"><P>A hardware coprocessor instruction, with no coprocessor present.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x00000008</P></TD><TD VALIGN="TOP"><P>An error while processing an error (also known as a "double fault").</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0000000A</P></TD><TD VALIGN="TOP"><P>A corrupt Task State Segment.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0000000B</P></TD><TD VALIGN="TOP"><P>An access to a memory segment that was not present.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0000000C</P></TD><TD VALIGN="TOP"><P>An access to memory beyond the limits of a stack.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0000000D</P></TD><TD VALIGN="TOP"><P>An exception not covered by some other exception (also known as a "general protection fault").</P></TD></TR></TBODY></TABLE>
<P><BR></P></FONT></BODY></HTML>

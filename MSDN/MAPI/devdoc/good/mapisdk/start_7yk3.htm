<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a New Interprocess (IPC) Message Class</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_creating_a_new_interprocess_ipc_message_class"></a>Creating a New Interprocess (IPC) Message Class</h1>
<p>
Structured messages can be sent and read between programs, or between programs and users. By using MAPI properties to structure message content, you avoid writing code to parse message text or a binary attachment.</p>
<h4>Design Tasks</h4>
<ol>
<li>
Decide whether yours is an interpersonal messaging (IPM) application or a type of interprocess communication (IPC) application. There is an enormous variety of applications; following is a basic list of types and examples. For more information about IPM applications, see <a href="start_24hf.htm">Creating a New Interpersonal (IPM) Message Class</a>.<ul>
<li>
Person-to-person. A person initiates the exchange of messages, and another person responds. Examples include traditional e-mail as well as more structured exchanges such as document routing or expense approval.</li>
<li>
Person-to-machine. A person initiates the exchange of messages, and a machine responds. Examples include submitting a database query by e-mail and subscribing to a mailing list.</li>
<li>
Machine-to-person. A machine initiates the exchange of messages, and a person responds. Examples include news feeds and other types of document distribution, and opinion surveys.</li>
<li>
Machine-to-machine. A machine initiates the exchange of messages and another machine responds. Examples include link heartbeat monitoring, directory and database replication.</li>
<li>
A more complex pattern with both people and machines in the route.</li>
<li>
A more complex pattern where, instead of being transmitted, the message may be posted directly into a public folder or bulletin board forum supported by a message store, for consumption by other readers, an administrator, or a software agent.</li>
</ul>
<p>
Logically, person-to-person applications, machine-to-person applications, and applications that post to public forums should be designated IPM, while person-to-machine and machine-to-machine applications are IPC message classes. The only real difference is that IPM messages in a message store are visible to messaging clients, while IPC messages usually are not. Anything that requires a person to respond must use an IPM message class. Applications involving a more complex pattern including people and machines often involve a mix of IPM and IPC messages.
</li>
<li>
Decide whether to use Simple MAPI, CMC, MAPI, or the Active Messaging Library. See <a href="intro_3lph.htm">Selecting a Client Interface</a>.</li>
<li>
Decide whether your application can use the same profile as the messaging client or whether you must create one. See <a href="start_1ihx.htm">Creating and Configuring a Profile</a>.</li>
<li>
Choose the message class name, beginning it with IPM. or IPC. according to the guidelines established previously.</li>
<li>
Define properties specific to the message class. Decide whether to use named properties or properties from the 0x6800-0x7fff range. See <a href="property_25bn.htm">About Property Identifiers</a> and <a href="property_2jw3.htm">Named Properties</a>. Properties that contain e-mail addresses should be stored in a special way to provide for translation when changing messaging domains. See <a href="extend_2goj.htm">Sending Across Messaging Domains</a>.<p>
One difference between IPM and IPC applications is that machines are much less tolerant of variations in message format than people are. Compatibility with messaging clients that can view only message text is often required for IPM applications, but IPC applications typically use MAPI properties to structure information in their messages and require MAPI everywhere. Nevertheless, for machine-to-person applications it may be necessary to duplicate some or all of the properties in the message text for compatibility with messaging clients that can view only message text.
</li>
<li>
Define the commands — called "verbs" in MAPI — specific to your message class, and choose which standard verbs to implement.  </li>
<li>
Decide how to handle sent messages and reports. It is usually not appropriate for IPC applications to save outbound messages in the IPM Sent Items folder, but the application may need to save outbound messages in a hidden folder for tracking purposes. See <a href="extend_8l0z.htm">Hidden Folders</a>.</li>
</ol>
<h4>Implementation Tasks</h4>
<ol>
<li>
Load the selected interface DLL and the entry points you will need. See one of the following topics, depending upon which interface you have selected.<ul>
<li>
For Simple MAPI, see <a href="smapi_24fo.htm">Initializing a Simple MAPI Client</a>.</li>
<li>
For CMC, see <a href="cmc_9wa6.htm">Starting a CMC Session</a>.</li>
<li>
For MAPI, see <a href="consider_49k9.htm">Initializing MAPI</a> and <a href="consider_8prd.htm">Initializing OLE for Use with MAPI</a>.</li>
<li>
For the Active Messaging Library, no explicit load step is necessary; simply instantiate one of the top-level objects, MAPI.Session or MAPI.Message.</li>
</ul>
</li>
<li>
Log on to MAPI. IPM message classes should use the messaging client's session if available. IPC applications may need to use a specific profile they've created themselves.<ul>
<li>
For Simple MAPI, see <a href="smapi_0sku.htm">Starting a Simple MAPI Session</a> and related topics.</li>
<li>
For CMC, see <a href="cmc_9wa6.htm">Starting a CMC Session</a>.</li>
<li>
For MAPI, see <a href="consider_9iy6.htm">Logging On</a>.</li>
<li>
For the Active Messaging Library, see <a href="consider_1u93.htm">Session Handling</a>.</li>
</ul>
</li>
<li>
For MAPI only, access the default message store. See <a href="consider_4wqa.htm">Opening a Folder</a>. </li>
<li>
Create folders and receive folder mappings for your message class. For an IPC application the folders should be children of the message store's root folder, not of the IPM subtree. Include receive folder mappings for reports associated with your message class, if necessary. These steps can only be done using MAPI; if you have chosen a different interface, you can still write this code using MAPI and put it in your installation program.<ol type=a>
<li>
Open the root folder by calling the <a href="inter031_3se1.htm"><b>IMsgStore::OpenEntry</b></a> method with a null entry identifier.</li>
<li>
Call the <a href="inter013_9tpu.htm"><b>IMAPIFolder::CreateFolder</b></a> method to create the folder.</li>
<li>
Call the <a href="inter031_95ma.htm"><b>IMsgStore::SetReceiveFolder</b></a> method to establish a receive folder mapping for your message class. Several message classes can use the same receive folder; when processing incoming messages, you can restrict the folder's contents table on the <a href="propa_0ecz.htm">PR_MESSAGE_CLASS</a> property to isolate the messages you're interested in.</li>
<li>
Locate your folder. The most efficient way to find your folder once you've created it is a receive folder mapping. Even if you don't intend for the folder to receive messages, you can map it to a string that is not used as a message class. Named properties on the store object — the most obvious alternative — are not always supported by message store providers, and MAPI does not define a range of message store properties for application use.</li>
</ol>
</li>
<li>
Open the send and receive folders for your message class. <ul>
<li>
For Simple MAPI, this step is not necessary. Simply specify the message class in your call to the <a href="smapiref_9e5w.htm"><b>MAPIFindNext</b></a> function.</li>
<li>
For CMC, this step is not necessary. Simply specify the message class in your call to the <a href="cmcref_8x10.htm"><b>cmc_list</b></a> function.</li>
<li>
For MAPI, see <a href="consider_4wqa.htm">Opening a Folder</a>, and note the following.<p>
To open the receive folder: 
</li>
</ul>
<ol>
<li>
Call the <a href="inter031_7acy.htm"><b>IMsgStore::GetReceiveFolder</b></a> method.</li>
<li>
Pass the entry identifier returned to the <a href="inter031_3se1.htm"><b>IMsgStore::OpenEntry</b></a> method.<p>
To open the Outbox (send folder) for IPM only: 
</li>
<li value=1>
Call the message store's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve the <a href="propa_9q90.htm">PR_IPM_OUTBOX_ENTRYID</a> property.</li>
<li>
Pass the entry identifier to the <b>IMsgStore::OpenEntry</b> method.</li>
</ol>
<ul>
<li>
For the Active Messaging Library, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_olemsg_accessing_folders">
</object><a href=JavaScript:alink_1.Click()>Accessing Folders</a> and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_olemsg_infostores_collection_object">
</object><a href=JavaScript:alink_2.Click()>InfoStores Collection Object</a>.</li>
</ul>
</li>
<li>
Send outgoing messages.<p>
Remember to handle the disposition of submitted messages. IPM message classes should honor common IPM client options for disposition of sent messages and the message store's <a href="propa_1e78.htm">PR_IPM_SENTMAIL_ENTRYID</a> property.
<ul>
<li>
For MAPI, see <a href="consider_7eed.htm">Processing a Sent Message</a> and related topics.</li>
<li>
For Simple MAPI, see <a href="smapi_0295.htm">Sending Messages with Simple MAPI</a>.</li>
<li>
For CMC, see <a href="cmc_90gz.htm">Sending Messages with CMC</a>.</li>
<li>
For the Active Messaging Library, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_olemsg_creating_and_sending_a_message">
</object><a href=JavaScript:alink_3.Click()>Creating and Sending a Message</a>.</li>
</ul>
</li>
<li>
Handle incoming messages.<ul>
<li>
For Simple MAPI, call the <a href="smapiref_9e5w.htm"><b>MAPIFindNext</b></a> function in a loop, specifying your message class.</li>
<li>
For CMC, call the <a href="cmcref_8x10.htm"><b>cmc_list</b></a> and <a href="cmcref_2944.htm"><b>cmc_read</b></a> functions in a loop, specifying your message class to <b>cmc_read</b>.</li>
<li>
For MAPI, use the following steps: </li>
</ul>
<ol>
<li>
Open the contents table on the receive folder, using the <a href="inter011_0sx1.htm"><b>IMAPIContainer::GetContentsTable</b></a> method.</li>
<li>
Register for notification of new mail, using the <a href="inter031_43l1.htm"><b>IMsgStore::Advise</b></a> method, the <i>fnevNewMail</i> event, and a null entry identifier. Do this before retrieving any messages to avoid a race condition that would result in missing messages.</li>
<li>
Create a property restriction to match <a href="propa_0ecz.htm">PR_MESSAGE_CLASS</a> with your message class and apply it to the contents table by calling <a href="inter026_43lg.htm"><b>IMAPITable::Restrict</b></a>. Consider also limiting your contents table view to unread messages by creating a bitmask restriction with the MSGFLAG_UNREAD flag as the mask for the <a href="propa_95wz.htm">PR_MESSAGE_FLAGS</a> property. See <a href="tables_0qyb.htm">About Restrictions</a>.</li>
<li>
Retrieve all the messages from the table, using the <a href="function_0dgz.htm"><b>HrQueryAllRows</b></a> function or the <a href="inter026_7wkz.htm"><b>IMAPITable::QueryRows</b></a> method, and process them.</li>
<li>
Rely on new mail notifications to advise you of further incoming messages. Your notification handler should check the <b>lpszMessageClass</b> member of the <a href="structyp_51ny.htm"><b>NEWMAIL_NOTIFICATION</b></a> structure and ignore any messages that are not of your class.</li>
</ol>
<ul>
<li>
For the Active Messaging Library, access the Messages collection of your receive folder, and use the <b>GetFirst</b> and <b>GetNext</b> methods to retrieve the messages.</li>
</ul>
</li>
<li>
For each user of your application, make the .EXE file and any auxiliary files available.</li>
</ol>
<h4>About Sample Source Code</h4>
<p>
See the following topic:</p>
<p class=indent1>
<a href="start_5epa.htm">Sample Timecard Application</a></p>
<p>&nbsp;</p></body>
</HTML>

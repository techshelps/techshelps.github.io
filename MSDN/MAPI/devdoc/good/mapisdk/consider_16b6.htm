<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Selecting a Receive Folder</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_selecting_a_receive_folder"></a>Selecting a Receive Folder</h2>
<p>
A receive folder is where incoming messages of a particular class are placed. For IPM and related report messages, MAPI assigns the Inbox as the default receive folder. For IPC and related report messages, MAPI assigns the root folder of the message store as the default receive folder. You can change these assignments or make additional assignments for other message classes. Making explicit receive folder assignments for your client's supported message classes is optional.</p>
<p>
When an incoming message class does not have an assigned receive folder, the message store provider automatically uses the receive folder for the class that matches the longest possible prefix of the incoming class. For example, if your client receives a message of class IPM.Note.MyDocument and the only receive folder that has been established is the Inbox for IPM messages, this message will be placed in the Inbox because IPM.Note.MyDocument derives from the base class IPM.</p>
<p>
When you are assigning a receive folder for IPC messages, never use a folder from the IPM subtree. These folders should be reserved for IPM messages only. Use instead a folder that is contained within the message store's root folder. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a receive folder for an IPM message class</h5>
<ol>
<li>
Call the message store's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve the <a href="propa_7tb8.htm">PR_IPM_SUBTREE_ENTRYID</a> property. </li>
<li>
Call <a href="inter031_3se1.htm"><b>IMsgStore::OpenEntry</b></a> with PR_IPM_SUBTREE_ENTRYID as the entry identifier to open the root folder of the IPM subtree in the message store.</li>
<li>
Call <a href="inter013_9tpu.htm"><b>IMAPIFolder::CreateFolder</b></a> to create the receive folder.</li>
<li>
Call <a href="inter031_95ma.htm"><b>IMsgStore::SetReceiveFolder</b></a> to map the new folder to your IPM message class. </li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a receive folder for an IPC message class</h5>
<ol>
<li>
Call <a href="inter031_3se1.htm"><b>IMsgStore::OpenEntry</b></a> with a null entry identifier to open the root folder of the message store.</li>
<li>
Call <a href="inter013_9tpu.htm"><b>IMAPIFolder::CreateFolder</b></a> to create the receive folder.</li>
<li>
Call <a href="inter031_95ma.htm"><b>IMsgStore::SetReceiveFolder</b></a> to map the new folder to your IPC message class. </li>
</ol>
<p>
Assign the receive folder that you use for messages for related report messages. For example, if your client receives IPM.Note messages, set up one receive folder for future IPM.Note messages and the same receive folder for future Report.IPM.Note messages.</p>
<p>
<b>Note</b>  Use the <b>IMsgStore::SetReceiveFolder </b>method for more than establishing a receive folder association with messages of a particular class. The character string passed to <b>SetReceiveFolder</b> does not necessarily need to represent a message class. For example, you can map a folder to a character string, making it easier to find the folder when necessary. The most obvious alternative for associating folders to strings is to use message store named properties, an approach that is not recommended because MAPI does not define a range of message store properties for use by clients, and message store providers do not always support named properties.</p>
<p>&nbsp;</p></body>
</HTML>

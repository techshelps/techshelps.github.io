<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMSLogon::Advise</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imslogon_advise"></a>IMSLogon::Advise</h2>
<p>
The <b>IMSLogon::Advise</b> method registers a object with a message store provider for notifications about changes within the message store. The message store will then send notifications about changes to the registered object.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter032_5032.htm"><b>IMSLogon : IUnknown</b></a>.</p>
<pre><code><b>HRESULT Advise(
  ULONG</b><i> cbEntryID</i><b>,</b>                 
<b>  LPENTRYID</b><i> lpEntryID</i><b>,</b>             
<b>  ULONG</b><i> ulEventMask</i><b>,</b>               
<b>  LPMAPIADVISESINK</b><i> lpAdviseSink</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpulConnection       </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cbEntryID</i></dt>
<dd>
[in] Size, in bytes, of the entry identifier pointed to by the <i>lpEntryID</i> parameter.</dd>
<dt>
<i>lpEntryID</i></dt>
<dd>
[in] Pointer to the entry identifier of the object about which notifications should be generated. This object can be a folder, a message, or any other object in the message store. Alternatively, if MAPI sets the <i>cbEntryID</i> parameter to zero and passes NULL for <i>lpEntryID</i>, the advise sink provides notifications about changes to the entire message store.</dd>
<dt>
<i>ulEventMask</i></dt>
<dd>
[in] Event mask of the types of notification events occurring for the object about which MAPI will generate notifications. The mask filters specific cases. Each event type has a structure associated with it that holds additional information about the event. The following table lists the possible event types along with their corresponding structures.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Notification event type</th>
<th align=left width=56%>Corresponding structure</th>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevCriticalError</code></pre>
</td>
<td width=56%><a href="structyp_9epa.htm"><b>ERROR_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevNewMail</code></pre>
</td>
<td width=56%><a href="structyp_51ny.htm"><b>NEWMAIL_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevObjectCreated</code></pre>
</td>
<td width=56%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevObjectDeleted</code></pre>
</td>
<td width=56%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevObjectModified</code></pre>
</td>
<td width=56%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevObjectCopied</code></pre>
</td>
<td width=56%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevObjectMoved</code></pre>
</td>
<td width=56%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevSearchComplete</code></pre>
</td>
<td width=56%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=44%><pre><code>fnevStatusObjectModified</code></pre>
</td>
<td width=56%><a href="structyp_9acu.htm"><b>STATUS_OBJECT_NOTIFICATION</b></a></td>
</tr>
</table><br>

</dd>
<dt>
<i>lpAdviseSink</i></dt>
<dd>
[in] Pointer to an advise sink object to be called when an event occurs for the session object about which notification has been requested. This advise sink object must already exist.</dd>
<dt>
<i>lpulConnection</i></dt>
<dd>
[out] Pointer to a variable that upon a successful return holds the connection number for the notification registration. The connection number must be nonzero.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The call succeeded and has returned the expected value or values.</dd>
<dt>
MAPI_E_NO_SUPPORT</dt>
<dd>
The operation is not supported by MAPI or by one or more service providers.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Message store providers implement the <b>IMSLogon::Advise</b> method to register an object for notification callbacks. Whenever a change occurs to the indicated object, the provider checks to see what event mask bit was set in the <i>ulEventMask</i> parameter and thus what type of change occurred. If a bit is set, then the provider calls the <a href="inter010_4y2h.htm"><b>IMAPIAdviseSink::OnNotify</b></a> method for the advise sink object indicated by the <i>lpAdviseSink</i> parameter to report the event. Data passed in the notification structure to the <b>OnNotify </b>routine describes the event.</p>
<p>
The call to <b>OnNotify </b>can occur during the call that changes the object, or at any following time. On systems that support multiple threads of execution, the call to <b>OnNotify </b>can occur on any thread. For a way to turn a call to <b>OnNotify </b>that might happen at an inopportune time into one that is safer to handle, a client application should use the <a href="function_1fxn.htm"><b>HrThisThreadAdviseSink</b></a> function. </p>
<p>
To provide notifications, the message store provider implementing <b>Advise</b> needs to keep a copy of the pointer to the <i>lpAdviseSink</i> advise sink object; to do so, it calls the <b>IUnknown::AddRef</b> method for the advise sink to maintain its object pointer until notification registration is canceled with a call to the <a href="inter032_46cl.htm"><b>IMSLogon::Unadvise</b></a> method. The <b>Advise</b> implementation should assign a connection number to the notification registration and call <b>AddRef</b> on this connection number before returning it in the <i>lpulConnection</i> parameter. Service providers can release the advise sink object before the registration is canceled, but they must not release the connection number until <b>Unadvise</b> has been called. </p>
<p>
After a call to <b>Advise</b> has succeeded and before<b> Unadvise</b> has been called, providers must be prepared for the advise sink object to be released. A provider should therefore release its advise sink object after <b>Advise</b> returns unless it has a specific long-term use for it. </p>
<p>
For more information about the notification process, see <a href="extend_8fvt.htm">Event Notification in MAPI</a>. </p>
<h4>See Also</h4>
<p>
<a href="function_1fxn.htm"><b>HrThisThreadAdviseSink</b></a>, <a href="inter010_4y2h.htm"><b>IMAPIAdviseSink::OnNotify</b></a>, <a href="inter032_46cl.htm"><b>IMSLogon::Unadvise</b></a>, <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a></p>
<p>&nbsp;</p></body>
</HTML>

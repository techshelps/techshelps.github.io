<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPISupport::DoCopyProps</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapisupport_docopyprops"></a>IMAPISupport::DoCopyProps</h2>
<p>
The <b>IMAPISupport::DoCopyProps</b> method copies or moves one or more properties of an object to another object.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter025_8uge.htm"><b>IMAPISupport : IUnknown</b></a>.</p>
<pre><code><b>HRESULT DoCopyProps(
  LPCIID</b><i> lpSrcInterface</i><b>,</b>                 
<b>  LPVOID</b><i> lpSrcObj</i><b>,</b>                       
<b>  LPSPropTagArray</b><i> lpIncludeProps</i><b>,</b>        
<b>  ULONG</b><i> ulUIParam</i><b>,</b>                       
<b>  LPMAPIPROGRESS</b><i> lpProgress</i><b>,</b>             
<b>  LPCIID</b><i> lpDestInterface</i><b>,</b>                
<b>  LPVOID</b><i> lpDestObj</i><b>,</b>                      
<b>  ULONG</b><i> ulFlags</i><b>,</b>                         
<b>  LPSPropProblemArray FAR *</b><i> lppProblems  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpSrcInterface</i></dt>
<dd>
[in] Pointer to the interface identifier (IID) representing the interface to be used to access the object with the properties to be copied or moved.</dd>
<dt>
<i>lpSrcObj</i></dt>
<dd>
[in] Pointer to the object with the properties to be copied or moved.</dd>
<dt>
<i>lpIncludeProps</i></dt>
<dd>
[in] Pointer to an <a href="structyp_23i1.htm"><b>SPropTagArray</b></a><b> </b>structure holding a counted array of property tags indicating the properties to copy or move. The <i>lpIncludeProps </i>parameter cannot be NULL.</dd>
<dt>
<i>ulUIParam</i></dt>
<dd>
[in] Handle of the parent window for the progress indicator.</dd>
<dt>
<i>lpProgress</i></dt>
</dl>
<p>
[in] Pointer to an implementation of a progress indicator. If NULL is passed in the <i>lpProgress</i> parameter, the progress indicator is displayed using the MAPI implementation. The <i>lpProgress</i> parameter is ignored unless the MAPI_DIALOG flag is set in the <i>ulFlags</i> parameter.
<dl>
<dt>
<i>lpDestInterface</i></dt>
<dd>
[in] Pointer to the interface identifier representing the interface to be used to access the object to receive the properties that are copied or moved.</dd>
<dt>
<i>lpDestObj</i></dt>
<dd>
[in] Pointer to the object to receive the copied or moved properties.</dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls how the copy or move operation is performed. The following flags can be set:
<dl>
<dt>
MAPI_DIALOG</dt>
<dd>
Allows the display of a progress indicator.</dd>
<dt>
MAPI_MOVE</dt>
</dl>
</dd>
</dl>
<p>
<b>DoCopyProps</b> should perform a move operation rather than a copy operation. When this flag is not set, <b>DoCopyProps</b> performs a copy operation.
<dl>
<dt>
MAPI_NOREPLACE</dt>
<dd>
Existing properties in the destination object should not be overwritten. When this flag is not set, <b>DoCopyProps</b> overwrites existing properties.
</dd>
<dt>
<i>lppProblems</i></dt>
</dl>
<p>
[in, out] On input, can be NULL, indicating no need for error information, or a pointer to a pointer to an <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a> structure. If <i>lppProblems</i> is a valid pointer on input, <b>DoCopyProps</b> returns detailed information about errors in copying one or more properties.</p>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
Properties have been successfully copied or moved.</dd>
<dt>
MAPI_E_COLLISION</dt>
<dd>
A property to be copied or moved already exists in the destination object and the MAPI_NOREPLACE flag is set. </dd>
<dt>
MAPI_E_FOLDER_CYCLE</dt>
<dd>
The source object directly or indirectly contains the destination object. Significant work might have been performed before this condition was discovered, so the source and destination objects might be partially modified. </dd>
<dt>
MAPI_E_INTERFACE_NOT_SUPPORTED</dt>
</dl>
<p>
The interface identified by the <i>lpSrcInterface</i> parameter is not supported by the source object or the interface identified by the <i>lpDestInterface</i> parameter is not supported by the destination object. 
<dl>
<dt>
MAPI_E_NO_ACCESS</dt>
</dl>
<p>
An attempt was made to access an object for which the caller has insufficient permissions. This error is returned if the destination object is the same as the source object.</p>
<p>
The following values can be returned in the <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a> structure,<b> </b>but not as return values for <b>DoCopyProps</b>. These errors apply to a single property:
<dl>
<dt>
MAPI_E_BAD_CHARWIDTH</dt>
<dd>
Either the MAPI_UNICODE flag was set and <b>DoCopyProps</b> does not support Unicode, or MAPI_UNICODE was not set and <b>DoCopyProps</b> only supports Unicode.</dd>
<dt>
MAPI_E_COMPUTED</dt>
</dl>
<p>
The property cannot be modified by the caller because it is a read-only property, computed by the owner of the destination object. This error is not severe; the caller should allow the copy operation to continue.
<dl>
<dt>
MAPI_E_INVALID_TYPE</dt>
<dd>
The property type is invalid.</dd>
<dt>
MAPI_E_UNEXPECTED_TYPE</dt>
<dd>
The property type is not the type expected by the caller.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPISupport::DoCopyProps</b> method is implemented for message store provider support objects. Message store providers can call <b>DoCopyProps</b> to implement <a href="inter022_406r.htm"><b>IMAPIProp::CopyProps</b></a><b> </b>for their folders and messages. <b>IMAPISupport::DoCopyProps</b> copies or moves the properties identified in the property tag array pointed to by <i>lpIncludeProps</i> that are present in the object pointed to by <i>lpSrcObj</i>. </p>
<h4>Notes to Callers</h4>
<p>
When copying properties between like objects, such as between two messages, the <i>lpSrcInterface</i> and <i>lpDestInterface</i> parameters must contain the same interface identifier and the <i>lpSrcObj</i> and <i>lpDestObj</i> parameters must point to objects of the same type. If <i>lpDestInterface</i> is set to NULL, then <b>DoCopyProps</b> returns MAPI_E_INVALID_PARAMETER. If you set <i>lpDestInterface</i> to an acceptable interface identifier, but set <i>lpDestObj</i> to an invalid pointer, the results are unpredictable. Most likely your provider will fail.</p>
<p>
Set the MAPI_NOREPLACE flag if you do not want any of the properties in the destination object to be overwritten. Properties in the destination object that exist in the source object and are not overwritten are not deleted or modified.</p>
<p>
To copy a message's recipient list, include the <a href="propa_1zw3.htm">PR_MESSAGE_RECIPIENTS</a> property in the property tag array pointed to by <i>lpIncludeProps</i>. To copy the message's attachments, include the <a href="propa_2c1f.htm">PR_MESSAGE_ATTACHMENTS</a> property. </p>
<p>
To copy a folder or address book container's hierarchy or contents table, include <a href="propa_13sp.htm">PR_CONTAINER_HIERARCHY</a> or <a href="propa_4df7.htm">PR_CONTAINER_CONTENTS</a> in the property tag array. To include a folder's associated contents table, include the <a href="propa_8v03.htm">PR_FOLDER_ASSOCIATED_CONTENTS</a> property in the array.</p>
<p>
If subfolders are copied or moved, their contents are copied or moved in their entirety, regardless of the use of properties indicated by the <b>SPropTagArray</b> structure. </p>
<p>
<b>DoCopyProps</b> reports global errors — errors that occur with the operation as a whole — and individual errors — errors that occur with one or more of the properties. These individual errors are placed in an <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a> structure. You can suppress error reporting at the property level by passing NULL for the property problem array structure parameter rather than a valid pointer. </p>
<p>
If you want to receive information about errors, pass a valid <b>SPropProblemArray</b> structure pointer in the <i>lppProblems</i> parameter. When <b>DoCopyProps</b> returns S_OK, check for possible errors with individual properties in the structure. When <b>DoCopyProps</b> returns an error, no information is returned in the <b>SPropProblemArray</b> structure. Instead, call <a href="inter025_7q5u.htm"><b>IMAPISupport::GetLastError</b></a> to retrieve detailed error information. </p>
<p>
If <b>DoCopyProps</b> returns S_OK, free the returned <b>SPropProblemArray</b> structure by calling the <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> function.</p>
<h4>See Also</h4>
<p>
<a href="inter025_0h4j.htm"><b>IMAPISupport::CopyMessages</b></a>, <a href="#_mapi1book_imapisupport_docopyprops"><b>IMAPISupport::DoCopyProps</b></a>, <a href="inter025_2zcf.htm"><b>IMAPISupport::DoCopyTo</b></a>, <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a>, <a href="structyp_23i1.htm"><b>SPropTagArray</b></a></p>
<p>&nbsp;</p></body>
</HTML>

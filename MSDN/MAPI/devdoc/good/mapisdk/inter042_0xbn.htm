<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IXPLogon::AddressTypes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_ixplogon_addresstypes"></a>IXPLogon::AddressTypes</h2>
<p>
The <b>IXPLogon::AddressTypes</b> method returns the types of recipients that the transport provider handles.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter042_2u9a.htm"><b>IXPLogon : IUnknown</b></a>.</p>
<pre><code><b>HRESULT AddressTypes(
  ULONG FAR *</b><i> lpulFlags</i><b>,</b>                   
<b>  ULONG FAR *</b><i> lpcAdrType</i><b>,</b>                  
<b>  LPTSTR FAR * FAR *</b><i> lpppszAdrTypeArray</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpcMAPIUID</i><b>,</b>                  
<b>  LPUID FAR * FAR *</b><i> lpppUIDArray           </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpulFlags</i></dt>
<dd>
[out] Bitmask of flags that controls the type of the returned strings. The following flag can be set:
<dl>
<dt>
MAPI_UNICODE</dt>
<dd>
The returned strings are in Unicode format. If the MAPI_UNICODE flag is not set, the strings are in ANSI format.</dd>
</dl>
</dd>
<dt>
<i>lpcAdrType</i></dt>
<dd>
[out] Pointer to the count of entries in the array pointed to by the <i>lpppszAdrTypeArray</i> parameter.</dd>
<dt>
<i>lpppszAdrTypeArray</i></dt>
<dd>
[out] Pointer to a pointer to an array of strings that identify recipient types.</dd>
<dt>
<i>lpcMAPIUID</i></dt>
<dd>
[out] Pointer to a count of entries in the array pointed to by the <i>lpppUIDArray</i> parameter.</dd>
<dt>
<i>lpppUIDArray</i></dt>
<dd>
[out] Pointer to a pointer to an array of pointers to <a href="structyp_3p9g.htm"><b>MAPIUID</b></a><b> </b>structures that identify recipient types.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The transport provider has successfully indicated the types of recipient that it can handle.
</dd>
</dl>
<h4>Notes to Implementers</h4>
<p>
The MAPI spooler calls the <b>IXPLogon::AddressTypes</b> method immediately after a transport provider returns from a call to the <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a> method so the transport provider can indicate what types of recipients it handles. To indicate this, the transport provider should pass back in the <i>lpppszAdrTypeArray</i> parameter a pointer to an array of pointers to strings, or pass back in the <i>lpppUIDArray </i>parameter a pointer to an array of pointers to <b>MAPIUID </b>structures, or pass values in both parameters.</p>
<p>
These two arrays are used for different identification processes. MAPI and the MAPI spooler use the <a href="structyp_3p9g.htm"><b>MAPIUID</b></a> structures in the <i>lpppUIDArray</i> array to identify those recipient entry identifiers that are directly handled by the transport provider or by the messaging system to which the transport provider connects. Neither MAPI nor the MAPI spooler performs expansion of addresses with entry identifiers contained in any of these <b>MAPIUID </b>structures; these structures are only used for recipient type identification.</p>
<p>
The MAPI spooler uses each of the strings in the <i>lpppszAdrTypeArray</i> parameter for a comparison test when deciding which transport provider should handle which recipients for an outbound message. If a message recipient's <a href="propa_4gkl.htm">PR_ADDRTYPE</a> property exactly matches a string identifying one of the messaging address types supplied by the transport provider, the provider can deliver the message to that recipient.</p>
<p>
In the event multiple transport providers can handle the same type of recipient, MAPI selects a transport provider based on the transport priority order indicated in the client application's profile. To determine which transport provider to use, the MAPI spooler scans all provider-specified <b>MAPIUID </b>structures in priority order, then all provider-specified address type values in priority order. The first transport provider to match a particular recipient in this scan gets the first opportunity to handle this recipient. If that provider does not handle the recipient, the MAPI spooler continues the scan so as to find a transport provider for any recipient not yet handled. The scan continues until no further matches are found, at which point a nondelivery report is generated for any recipient that was not handled.</p>
<p>
If the provider always supports a particular set of recipient types, the address type and <b>MAPIUID</b> arrays passed by the transport provider can be static. If the transport provider dynamically constructs these arrays, it can use the support object that was passed in the call to <b>TransportLogon</b> directly previous to allocate memory, although this is not strictly necessary.</p>
<p>
The memory used for the address type and <b>MAPIUID</b> arrays should remain allocated until the final call to the <a href="inter042_4spy.htm"><b>IXPLogon::TransportLogoff</b></a> method is performed, at which time the transport provider can free the memory if necessary. The contents of these arrays should not be altered by the transport provider after returning from the <b>TransportLogoff</b> call.</p>
<p>
A transport provider that can handle any type of recipient can return NULL in <i>lpppszAdrTypeArray</i>. Transport providers for LAN-based messaging systems that use a central server to deliver outgoing messages to various foreign message systems commonly do this. Such a transport provider should be installed last in the MAPI and MAPI spooler priority order of transport providers within the profile.</p>
<p>
A transport provider that does not support outbound messages dispatched to it based on address type should return a single zero-length string in <i>lpppszAdrTypeArray</i>. If a transport provider supports no recipient types, it should pass NULL for the <b>MAPIUID</b> structure and an empty string for the address type. Transport providers of this type are most commonly used as a vehicle for installing a message preprocessor.  See <a href="hookppr_4to2.htm">Developing a Hook Provider or Preprocessor</a>.</p>
<p>
For more information on working with address types, see <a href="smapi_5vft.htm">Displaying and Editing Addresses with Simple MAPI</a><i>. </i></p>
<h4>See Also</h4>
<p>
<a href="inter042_4spy.htm"><b>IXPLogon::TransportLogoff</b></a>, <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a>, <a href="structyp_3p9g.htm"><b>MAPIUID</b></a></p>
<p>&nbsp;</p></body>
</HTML>

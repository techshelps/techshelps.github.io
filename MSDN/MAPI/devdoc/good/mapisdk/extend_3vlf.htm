<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Message Properties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_about_message_properties"></a>About Message Properties</h2>
<p>
MAPI divides message properties into three types:
<ul>
<li>
Message content properties</li>
<li>
Message transmission, or envelope, properties</li>
<li>
Message recipient properties</li>
</ul>
<p>
Message content properties describe the text of a message. Every message class has its own set of content properties. MAPI defines content properties for note and report messages; it is up to the clients and message store providers that handle these classes of messages to set the properties appropriately for their implementations. <a href="propa_9lvd.htm">PR_BODY</a> and <a href="propb_7vhg.htm">PR_RTF_COMPRESSED</a> are examples of content properties for note messages. PR_BODY contains the unformatted contents of a note while PR_RTF_COMPRESSED contains the compressed version of a note's formatted contents. </p>
<p>
For new message classes, clients can define content-specific properties in one of two ways:
<ul>
<li>
Using property identifiers within the 0x6800 through 0x7BFF range.</li>
<li>
Using named properties which have identifiers that fall in the 0x8000 through 0xFFFE range.</li>
</ul>
<p>
The identifier range for custom message class content properties is available to any client creating a custom message class. Therefore, one property identifier in this range can be used for multiple message classes. Users of properties in this range cannot make assumptions as to the behavior of the properties. </p>
<p>
With named properties, clients create a name for each new property that is made up of a property set and either a character string or a numeric value and associate it with an identifier in the named property range. Users of named properties access them by name or identifier through the <b>IMAPIProp</b> methods <a href="inter022_49f7.htm"><b>GetIDsFromNames</b></a> and <a href="inter022_7ib7.htm"><b>GetNamesFromIDs</b></a>.</p>
<p>
Envelope properties provide information used to transmit a message from one recipient to another. As with message content properties, it is possible for clients or service providers to define their own envelope properties to supplement those defined by MAPI. Clients and transport providers set the envelope properties defined by MAPI based on the definition that MAPI provides. Transport providers that implement special features can define their own envelope properties to expose those features to clients. MAPI sets aside a range of property identifiers that can be used for these special provider-defined properties. Transport providers typically implement a special property page to display these properties and allow clients to edit them. <a href="propb_3c8k.htm">PR_SUBJECT</a> and <a href="propa_0ecz.htm">PR_MESSAGE_CLASS</a> are examples of envelope properties.</p>
<p>
Recipient properties describe the destination for a sent message. A recipient can be a messaging user, distribution list, or a machine. Recipient properties are defined by MAPI and set by service providers. Some recipient properties are supported by address book providers for their messaging user and distribution list objects; other recipient properties are supported by clients, message store providers, or transport providers. For example, all recipients require an address and an address type; these are properties maintained by an address book provider when the recipient is stored in one of its containers. Recipients also have a type, <a href="propb_0n6t.htm">PR_RECIPIENT_TYPE</a>, which identifies a recipient as either a primary, carbon copy, or blind carbon copy recipient.</p>
<p>
Many message properties are optional, meaning that clients cannot expect them to be available or set to valid values. Some message properties are required but available only when a message is in a particular state. For example, a newly created message is not required to have an entry identifier until after the message has been saved and is not required to have a message class until the message is ready to be submitted. Clients should always be prepared to handle the situation where a requested property is unavailable by checking the results of their <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> and<b> <a href="inter022_15vd.htm">IMAPIProp::OpenProperty</a></b> calls and by having default values ready as a backup. </p>
<p>
Most message properties that are set by service providers are read-only to clients. </p>
<p>
For a list of the most commonly used message properties, see <a href="groups_3veb.htm">Message Properties</a>.</p>
<p>&nbsp;</p></body>
</HTML>

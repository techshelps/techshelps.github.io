<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>cmc_query_configuration</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_cmc_query_configuration"></a>cmc_query_configuration</h2>
<p>
The <b>cmc_query_configuration</b> function determines configuration information for the installed CMC implementation. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>XCMC.H</td>
</tr>
</table><br>
<pre><code><b>CMC_return_code cmc_query_configuration (
  CMC_session_id</b><i> session</i><b>,</b>                
<b>  CMC_enum</b><i> item</i><b>,</b>                         
<b>  CMC_buffer</b><i> reference</i><b>,</b>                  
<b>  CMC_extension FAR *</b><i> config_extensions  </i>
<b>)</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>session </i></dt>
<dd>
[in] Opaque session handle that represents a MAPI session object indicating a session with a message service. If this parameter is set to zero, there is no session and the <b>cmc_query_configuration</b> function returns the default logon information to the buffer indicated by the <i>reference</i> parameter. If the <i>session</i> parameter is set to a nonzero value, <b>cmc_query_configuration</b> returns configuration information as determined by the session. If the value provided for the <i>session</i> parameter is invalid, <b>cmc_query_configuration</b> returns <small>cmc_e_invalid_session_id</small>.</dd>
<dt>
<i>item</i></dt>
<dd>
[in] Enumerated variable that identifies the configuration information required by the client application. The <b>cmc_query_configuration</b> function will write different values to the buffer or pointer that the <i>reference</i> parameter points to depending on the value of the <i>item </i>parameter. The caller must allocate this buffer or pointer before calling <b>cmc_query_configuration</b>. Possible <i>item</i> values are:
<dl>
<dt>
CMC_CONFIG_CHARACTER_SET</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a <a href="cmcref_8iwi.htm"><b>CMC_object_identifier</b></a> structure array. The <b>cmc_query_configuration </b>function writes a pointer to the array of <b>CMC_object_identifier </b>structures that indicate the character sets supported by the current CMC implementation to the location pointed at by the <i>reference</i> parameter. The <b>cmc_query_configuration </b>function ends the array with a null <b>CMC_object_identifier</b> structure.
<p>
The first object identifier in the array is the default character set used if the calling client application or service provider does not specify one explicitly. The calling client or provider uses one of these object identifiers at logon to specify that the implementation use a different character set than the default. This array should be freed with <a href="cmcref_5z51.htm"><b>cmc_free</b></a>. 
</dd>
<dt>
CMC_CONFIG_DEFAULT_SERVICE </dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_string data type. The <b>cmc_query_configuration</b> function writes a pointer to the default message service name, if available, to the location indicated by the <i>reference</i> parameter. The <b>cmc_query_configuration</b> function writes NULL to this location if no default service name is available. 
<p>
The current implementation does not set default message service names, so NULL is always written in response to CMC_CONFIG_DEFAULT_SERVICE. 
</dd>
<dt>
CMC_CONFIG_DEFAULT_USER </dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_string data type. The <b>cmc_query_configuration</b> function writes a pointer to the default user name, if available, to the location indicated by the <i>reference</i> parameter. The <b>cmc_query_configuration</b> function writes NULL to this location if no default user name is available. 
<p>
The current implementation does not set default user names, so NULL is always written in response to CMC_CONFIG_DEFAULT_USER. 
</dd>
<dt>
CMC_CONFIG_LINE_TERM</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_enum variable, which is set to CMC_LINE_TERM_CRLF if the line delimiter is a carriage return followed by a line feed, CMC_LINE_TERM_LF if the line delimiter is a line feed, or CMC_LINE_TERM_CR if the line delimiter is a carriage return.</dd>
<dt>
CMC_CONFIG_REQ_PASSWORD</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_enum variable, which is set to CMC_REQUIRED_NO if the password is not required to log on, CMC_REQUIRED_OPT if the password is optional to log on, or CMC_REQUIRED_YES if the password is required to log on.</dd>
<dt>
CMC_CONFIG_REQ_SERVICE</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_enum variable, which is set to CMC_REQUIRED_NO if the service name is not required to log on, CMC_REQUIRED_OPT if the service name is optional to log on, or CMC_REQUIRED_YES if the service name is required to log on.</dd>
<dt>
CMC_CONFIG_REQ_USER</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_enum variable, which is set to CMC_REQUIRED_NO if the user name is not required to log on, CMC_REQUIRED_OPT if the user name is optional to log on, or CMC_REQUIRED_YES if the user name is required to log on.</dd>
<dt>
CMC_CONFIG_SUP_COUNTED_STR</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_boolean variable, which is set to TRUE if the CMC_COUNTED_STRING_TYPE flag is supported during logon.</dd>
<dt>
CMC_CONFIG_SUP_NOMKMSGREAD</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_boolean variable, which will be set to TRUE if the <a href="cmcref_2944.htm"><b>cmc_read</b></a> function supports the CMC_DO_NOT_MARK_AS_READ flag.</dd>
<dt>
CMC_CONFIG_UI_AVAIL</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_boolean variable, which will be set to TRUE if there is a dialog box provided by the CMC implementation.</dd>
<dt>
CMC_CONFIG_VER_IMPLEM</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_uint16 variable, which is set to the version number for the implementation, multiplied by 100. For example, version 1.01 returns 101.</dd>
<dt>
CMC_CONFIG_VER_SPEC</dt>
<dd>
The <i>reference</i> parameter should be a pointer to a CMC_uint16 variable, which is set to the CMC specification version number for the implementation, multiplied by 100. For example, version 1.00 returns 100.</dd>
</dl>
</dd>
<dt>
<i>reference </i></dt>
<dd>
[out] Pointer to a buffer or pointer to which <b>cmc_query_configuration</b> writes configuration information. The value of <i>reference</i> depends on the value of <i>item</i>, as previously described.</dd>
<dt>
<i>config_extensions </i></dt>
<dd>
[in, out] Pointer to an array of <a href="cmcref_1woe.htm"><b>CMC_extension</b></a> structures specifying function extensions. On input, this array contains MAPI extensions to the standard <b>cmc_query_configuration</b> function. A value of NULL for the <i>config_extensions </i>parameter indicates that the client application has no extensions for <b>cmc_query_configuration</b> and is expecting no extensions. 
<p>
On output, <b>cmc_query_configuration</b> writes to the array new information about the query configuration operation. It writes NULL if it generates no output extensions. 

</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
CMC_E_FAILURE</dt>
<dd>
There was a general failure that does not fit the description of any other return value.</dd>
<dt>
CMC_E_INSUFFICIENT_MEMORY</dt>
<dd>
Insufficient memory was available to complete the requested operation.</dd>
<dt>
CMC_E_INVALID_ENUM</dt>
<dd>
A <b>CMC_enum</b> value was invalid.</dd>
<dt>
CMC_E_INVALID_PARAMETER</dt>
<dd>
A function parameter was invalid. Either the <i>reference</i> parameter did not point to a writeable location, or the <i>config_extensions</i> parameter was badly formed.</dd>
<dt>
CMC_E_NOT_SUPPORTED</dt>
<dd>
The current implementation does not support the operation requested.</dd>
<dt>
CMC_E_UNSUPPORTED_FUNCTION_EXT</dt>
<dd>
The current implementation does not support the function extension requested.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The client application must cast the <i>reference</i> parameter to the CMC_buffer type before calling <b>cmc_query_configuration</b>. The client application must allocate sufficient memory to contain the information passed in the <i>item</i> parameter. When this memory is no longer needed, the client should free this memory with whatever memory management routines it is using, or with a call to the <b>cmc_free </b>function if required by the previous explanation.</p>
<h4>See Also</h4>
<p>
<a href="cmcref_1woe.htm"><b>CMC_extension</b></a>,<b> <a href="cmcref_5z51.htm">cmc_free</a></b>,<b> <a href="cmcref_2944.htm">cmc_read</a></b></p>
<p>&nbsp;</p></body>
</HTML>

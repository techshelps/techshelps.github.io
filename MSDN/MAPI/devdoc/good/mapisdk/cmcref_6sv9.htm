<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMC_message</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_cmc_message"></a>CMC_message</h2>
<p>
A <b>CMC_message</b> structure contains information about a CMC message. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>XCMC.H</td>
</tr>
</table><br>
<pre><code>typedef struct { 
     CMC_message_reference     *message_reference; 
     CMC_string     message_type; 
     CMC_string subject; 
     CMC_time      time_sent; 
     CMC_string text_note; 
     CMC_recipient *recipients; 
     CMC_attachment     *attachments; 
     CMC_flags message_flags; 
     CMC_extension *message_extensions; 
} CMC_message; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>message_reference</b></dt>
<dd>
Pointer to the message reference, which is a counted string — that is, a <b>CMC_counted_string </b>structure. The message reference is a unique identifier for a message within a mailbox. </dd>
<dt>
<b>message_type</b></dt>
<dd>
Pointer to a string that identifies the type of the message. Three different string identifiers are available:
<ul>
<li>
Object identifiers, which are used for message types identified by object identifiers as defined in <i>CCITT Recommendation X.208</i>. </li>
<li>
CMC registered values, which are used for message types defined in the CMC specification.</li>
<li>
Bilaterally defined values, which are used for message types that are unregistered. CMC does not ensure that bilaterally defined values are unique. </li>
</ul>

<p>
For the complete specification of CMC message types, see "Remarks." 
</dd>
<dt>
<b>subject</b></dt>
<dd>
Pointer to a string describing the subject of the message. </dd>
<dt>
<b>time_sent</b></dt>
<dd>
The <a href="cmcref_3uw5.htm"><b>CMC_time</b></a> structure containing the date and time when the client application submits the message to the CMC implementation.</dd>
<dt>
<b>text_note</b></dt>
<dd>
Pointer to the string containing the message text. If the value of this member is NULL, there is no message text. If the CMC_MSG_TEXT_NOTE_AS_FILE flag is set for the <b>message_flags</b> member, the message text is in the first attachment to the message. For information on message text format, see "Remarks."</dd>
<dt>
<b>recipients</b></dt>
<dd>
Pointer to the first element in an array of <a href="cmcref_5cvo.htm"><b>CMC_recipient</b></a><b> </b>structures defining the message recipients.</dd>
<dt>
<b>attachments</b></dt>
<dd>
Pointer to the first element in an array of <a href="cmcref_26t0.htm"><b>CMC_attachment</b></a> structures defining the attachments to the message.</dd>
<dt>
<b>message_flags</b></dt>
<dd>
Bitmask of message flags. The following flags can be set: 
<dl>
<dt>
CMC_MSG_LAST_ELEMENT</dt>
<dd>
The last element in an array of <a href="#_mapi1book_cmc_message"><b>CMC_message</b></a> structures. The structure with this flag set must be at the end of the array. If this flag is set to zero for any structure, that structure is not the last array element.</dd>
<dt>
CMC_MSG_READ</dt>
<dd>
The message has been read. If this flag is set to zero, the message has not been read. </dd>
<dt>
CMC_MSG_TEXT_NOTE_AS_FILE</dt>
<dd>
The <b>text_note</b> member is ignored and the message text is contained in the file referred to by the first attachment. If this flag is set to zero, the message text is contained in the <b>text_note</b> member.</dd>
<dt>
CMC_MSG_UNSENT</dt>
<dd>
The client application has not sent the message, for example when the message is a draft. The sender can create such a message with the CMC_X_COM_SAVE_MESSAGE data extension. If this flag is set to zero, the client application has sent the message.</dd>
</dl>
</dd>
<dt>
<b>message_extensions</b></dt>
<dd>
Pointer to the first structure in an array of <a href="cmcref_1woe.htm"><b>CMC_extension</b></a> structures representing the message extensions.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Message types are used to distinguish between various sorts of messages that might require different processing. For example, the message type might be used by the client application to determine how to display the message or by CMC to determine how to send the message.</p>
<p>
CMC message types possible in the <b>message_type </b>member of a <a href="#_mapi1book_cmc_message"><b>CMC_message</b></a> structure can have the following formats and are case-insensitive. </p>
<pre><code>"OID: " + object_identifier 
"CMC: " + cmc_registered_value 
"BLT: " + string 
 </code></pre>
<p>
An object_identifier is a string containing a series of whitespace separated integers. See <a href="cmcref_8iwi.htm">CMC_object_identifier</a> for details.</p>
<p>
The following is a list of message types:
<dl>
<dt>
IPM</dt>
<dd>
Interpersonal message. An interpersonal message is a memo-like message containing a recipient list, an optional subject, an optional text note, and zero or more attachments. The <b>CMC_message</b> structure is optimized to accommodate a message with the registered value IPM.</dd>
<dt>
IP RN</dt>
<dd>
Read notification for an interpersonal message. A read notification indicates the recipient has opened a message.</dd>
<dt>
IP NRN</dt>
<dd>
Nonread notification for an interpersonal message. A nonread notification indicates a message has been removed from the recipient's mailbox without being opened. For instance, the service or user has discarded the message or it has been automatically forwarded to another recipient.</dd>
<dt>
DR</dt>
<dd>
Delivery report. A delivery report indicates the service was able to deliver a message to its recipient.</dd>
<dt>
NDR</dt>
<dd>
Nondelivery report. A nondelivery report indicates the message service was not able to deliver a message to its recipient.
</dd>
</dl>
<p>
Bilaterally defined values are arbitrary strings and are used to identify custom message types used by the client application.</p>
<p>
As the syntax preceding indicates, the <code>OID:</code> type identifier indicates a type identified by an object identifier, the <code>CMC:</code> type identifier indicates a type identified by a CMC registered value, and the <code>BLT:</code> type identifier indicates a type identified by a bilaterally defined value. Following are examples of valid type identifiers:</p>
<pre><code>OID: 1 2 840 113556 3 2 850 
CMC: IPM 
BLT: my special message type 
 </code></pre>
<p>
You can format type identifiers as you choose; the CMC implementation also defines a canonical type identifier format that allows a client application to easily compare type identifier strings. The CMC implementation always returns type identifiers in this format, which guarantees the following:
<ul>
<li>
All tokens are separated with a single space.</li>
<li>
The type identifiers <code>OID:</code>, <code>CMC:</code>, and <code>BLT:</code> are returned in uppercase.</li>
</ul>
<p>
The CMC specification does not define what it will do with type identifier strings that are not in this format. </p>
<p>
The formats of messages with the preceding registered values within a <a href="#_mapi1book_cmc_message"><b>CMC_message</b></a> structure depend on the messaging protocols employed by the underlying messaging system. Often, non-IPM messages take the form of a program-generated message, which follows a memo-like format similar to an IPM format but serves instead to convey information about a previously sent message.</p>
<p>
<b>Note</b>  The cmc_registered_value types correspond to X.400 message types; however, non-X.400 messaging systems can also use them. Thus, these message types are meant to apply generically and not specifically to X.400 services.</p>
<p>
Some implementations only support the interpersonal message type (CMC: IPM). Some implementations might treat messages of types other than IPM as IPM messages or might generate an error for such messages.</p>
<p>
For the <b>text_note</b> member, the format of the message text is a sequence of paragraphs, whether it is passed in memory or in a file. Each paragraph is terminated with the appropriate line terminator for the platform: CR (carriage return) for Macintosh, LF (linefeed) for UNIX, and CR/LF for MS-DOS and Windows. The CMC implementation can word-wrap long lines (paragraphs). There is no guarantee that paragraph formatting will remain constant when a message is saved and read back. For example, the <b>cmc_read</b> function can return a long paragraph as a series of shorter paragraphs.</p>
<h4>See Also</h4>
<p>
<a href="cmcref_26t0.htm"><b>CMC_attachment</b></a>, <a href="cmcref_1woe.htm"><b>CMC_extension</b></a>, <a href="cmcref_5cvo.htm"><b>CMC_recipient</b></a>, <a href="cmcref_7w10.htm"><b>cmc_send</b></a>, <a href="cmcref_3uw5.htm"><b>CMC_time</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIFolder::CreateFolder</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapifolder_createfolder"></a>IMAPIFolder::CreateFolder</h2>
<p>
The <b>IMAPIFolder::CreateFolder</b> method creates a new subfolder.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter013_9ohe.htm"><b>IMAPIFolder : IMAPIContainer</b></a>.</p>
<pre><code><b>HRESULT CreateFolder(
  ULONG</b><i> ulFolderType</i><b>,</b>         
<b>  LPTSTR</b><i> lpszFolderName</i><b>,</b>      
<b>  LPTSTR</b><i> lpszFolderComment</i><b>,</b>   
<b>  LPCIID</b><i> lpInterface</i><b>,</b>         
<b>  ULONG</b><i> ulFlags</i><b>,</b>              
<b>  LPMAPIFOLDER FAR *</b><i> lppFolder  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ulFolderType</i></dt>
<dd>
[in] The type of folder to create. One of the following values can be passed:
<dl>
<dt>
FOLDER_GENERIC</dt>
<dd>
A generic folder should be created.</dd>
<dt>
FOLDER_SEARCH</dt>
<dd>
A search-results folder should be created.</dd>
</dl>
</dd>
<dt>
<i>lpszFolderName</i></dt>
<dd>
[in] Pointer to a string containing the name for the new folder. This name is the basis for the new folder's <a href="propa_1yjp.htm">PR_DISPLAY_NAME</a> property.</dd>
<dt>
<i>lpszFolderComment</i></dt>
<dd>
[in] Pointer to a string containing a comment associated with the new folder. This string becomes the value of the new folder's <a href="propa_1m5w.htm">PR_COMMENT</a> property. If NULL is passed, the folder has no initial comment.</dd>
<dt>
<i>lpInterface</i></dt>
<dd>
[in] Pointer to the interface identifier (IID) representing the interface to be used to access the new folder. Passing NULL results in the message store provider returning the standard folder interface, <a href="inter013_9ohe.htm"><b>IMAPIFolder</b></a>. Clients must pass NULL. Other callers can set the <i>lpInterface </i>parameter to IID_IUnknown, IID_IMAPIProp, IID_IMAPIContainer, or IID_IMAPIFolder. </dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls how the folder is created. The following flags can be set:
<dl>
<dt>
MAPI_DEFERRED_ERRORS</dt>
<dd>
Allows <b>CreateFolder</b> to return successfully, possibly before the new folder is fully accessible to the calling client. If the new folder is not accessible, making a subsequent call to it can result in an error.</dd>
<dt>
MAPI_UNICODE</dt>
<dd>
The passed-in strings are in Unicode format. If the MAPI_UNICODE flag is not set, the strings are in ANSI format.</dd>
<dt>
OPEN_IF_EXISTS</dt>
<dd>
Allows the method to succeed — even if the folder named in the <i>lpszFolderName</i> parameter already exists — by opening the existing folder with that name. Note that message store providers that allow sibling folders to have the same name might fail to open an existing folder if more than one exists with the supplied name.</dd>
</dl>
</dd>
<dt>
<i>lppFolder</i></dt>
<dd>
[out] Pointer to a pointer to the newly created folder.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The new folder has been successfully created or opened, if the OPEN_IF_EXISTS flag is set.</dd>
<dt>
MAPI_E_BAD_CHARWIDTH</dt>
<dd>
Either the MAPI_UNICODE flag was set and the implementation does not support Unicode, or MAPI_UNICODE was not set and the implementation only supports Unicode.</dd>
<dt>
MAPI_E_COLLISION</dt>
<dd>
A folder with the name given in the <i>lpszFolderName</i> parameter already exists. Folder names must be unique.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPIFolder::CreateFolder</b> method creates a subfolder in the current folder and assigns an entry identifier to the new folder. </p>
<h4>Notes to Callers</h4>
<p>
When <b>CreateFolder</b> returns, be aware that the entry identifier for the new folder might not be available. Some message store providers do not make entry identifiers available until after you have called the new folder's <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> method to permanently save it. This is especially true if you have set the MAPI_DEFERRED_ERRORS flag. </p>
<p>
Be aware that some message store providers always point <i>lppFolder</i> to the folder's standard interface, regardless of the value that you pass in for the <i>lpInterface</i> parameter. Because the interface pointer that is returned might not be of the type that you expect, call the new folder's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve the <a href="propb_0okl.htm">PR_OBJECT_TYPE</a> property. If necessary, cast the pointer to a more appropriate type before making other calls.</p>
<p>
Most message store providers require the name of the new folder to be unique with respect to the names of its sibling folders. Be able to handle the MAPI_E_COLLISION error value, which is returned if this rule is not followed. </p>
<p>
To determine the entry identifier of the newly created folder, call the new folder's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve its <a href="propa_8cv8.htm">PR_ENTRYID</a> property.</p>
<h4>See Also</h4>
<p>
<a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a></p>
<p>&nbsp;</p></body>
</HTML>

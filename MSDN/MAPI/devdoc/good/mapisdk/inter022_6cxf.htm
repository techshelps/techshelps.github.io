<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIProp::SetProps</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapiprop_setprops"></a>IMAPIProp::SetProps</h2>
<p>
The <b>IMAPIProp::SetProps</b> method updates one or more properties.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter022_00tq.htm"><b>IMAPIProp : IUnknown</b></a>.</p>
<pre><code><b>HRESULT SetProps(
  ULONG</b><i> cValues</i><b>,</b>                         
<b>  LPSPropValue</b><i> lpPropArray</i><b>,</b>              
<b>  LPSPropProblemArray FAR *</b><i> lppProblems  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cValues</i></dt>
<dd>
[in] Count of property values pointed to by the <i>lpPropArray</i> parameter. The <i>cValues </i>parameter must not be zero.</dd>
<dt>
<i>lpPropArray</i></dt>
<dd>
[in] Pointer to an array of <a href="structyp_9sbp.htm"><b>SPropValue</b></a> structures holding property values to be updated.</dd>
<dt>
<i>lppProblems</i></dt>
<dd>
[in, out] On input, can be NULL, indicating no need for error information, or a pointer to a pointer to an <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a> structure. If <i>lppProblems</i> is a valid pointer on input, <b>SetProps</b> returns detailed information about errors in updating one or more properties.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The properties were successfully updated.
</dd>
</dl>
<p>
The following values can be returned in the <b>SPropProblemArray</b> structure,<b> </b>but not as return values for <b>SetProps</b>:
<dl>
<dt>
MAPI_E_BAD_CHARWIDTH</dt>
<dd>
Either the MAPI_UNICODE flag was set and the implementation does not support Unicode, or MAPI_UNICODE was not set and the implementation only supports Unicode.</dd>
<dt>
MAPI_E_COMPUTED</dt>
<dd>
The property cannot be updated because it is read-only, computed by the service provider responsible for the object.</dd>
<dt>
MAPI_E_INVALID_TYPE</dt>
<dd>
The property type is invalid.</dd>
<dt>
MAPI_E_NO_ACCESS</dt>
<dd>
An attempt was made to modify a read-only object or to access an object for which the user has insufficient permissions.</dd>
<dt>
MAPI_E_NOT_ENOUGH_MEMORY</dt>
<dd>
The property cannot be updated because it is larger than the RPC buffer size.</dd>
<dt>
MAPI_E_UNEXPECTED_TYPE</dt>
<dd>
The property type is not the type expected by the calling implementation.
</dd>
</dl>
<h4>Notes to Implementers</h4>
<p>
Ignore the PR_NULL property tag and all properties with a type of PT_ERROR; make no changes and report no problems in the <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a><b> </b>structure. </p>
<p>
Return MAPI_E_INVALID_PARAMETER if a property of type PT_OBJECT is included in the property value array. Also return this error if a multivalued property is included in the array and its <b>cValues</b> member is set to zero.</p>
<p>
If the call succeeds overall but there are problems with setting some of the properties, return S_OK and place information about the problems in the appropriate entry of the <b>SPropProblemArray</b> structure pointed to by the <i>lppProblems</i> parameter.  </p>
<h4>Notes to Callers</h4>
<p>
Depending on the service provider, you might also be able to change the property type by passing a property tag containing a different type than was previously used with a given property identifier.</p>
<p>
If you include a property tag for a property that is unsupported by the object and the implementation of <b>SetProps</b> allows the creation of new properties, the property is added to the object. Any previous value stored with the property identifier used for the new property is discarded. </p>
<p>
Note that the S_OK return value does not guarantee that all of the properties were successfully updated. Some providers cache <b>SetProps</b> calls until they receive a call that requires provider intervention, such as <b>IMAPIProp::SaveChanges</b> or <b>IMAPIProp::GetProps</b>. Therefore, it is possible to receive error values relating to the <b>SetProps</b> call with the later calls. </p>
<p>
If <b>SetProps</b> returns S_OK, check the <b>SPropProblemArray</b> structure pointed to by <i>lppProblems</i> for problems updating individual properties. If <b>SetProps</b> returns an error, do not check the property problem array. Instead, call the object's <a href="inter022_1hv6.htm"><b>IMAPIProp::GetLastError</b></a> method. </p>
<p>
When updating large properties, <b>SetProps</b> can fail and return MAPI_E_NOT_ENOUGH_MEMORY. There is no maximum size for properties, and different objects can have different limits. If you deal with potentially large properties be prepared to call <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> with IID_IStream as the interface identifier if <b>SetProps</b> returns this error value.</p>
<p>
Call the <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> function to free the <b>SPropProblemArray</b> structure.</p>
<h4>See Also</h4>
<p>
<a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a>, <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a>, <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a>, <a href="structyp_0omx.htm"><b>SPropProblemArray</b></a>, <a href="structyp_9sbp.htm"><b>SPropValue</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

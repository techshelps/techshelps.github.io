<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Encoding a Message with TNEF</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_encoding_a_message_with_tnef"></a>Encoding a Message with TNEF</h2>
<p>
When a message is submitted, the transport provider can create a file that is used to contain the message during transmission. Next, an OLE <b>IStream</b> interface is wrapped around the file. The transport provider then uses <b>ITnef</b> methods to write the message properties to the stream in a tagged format that enables the properties to be easily decoded by the receiving transport providers.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To represent an entire message in a single file</h5>
<ol>
<li>
Obtain a TNEF object by passing an <b>IStream</b> object and a message into the <a href="function_3qk8.htm"><b>OpenTnefStreamEx</b></a> function.</li>
<li>
Get a list of all defined properties for the message by calling the <a href="inter022_79v8.htm"><b>IMAPIProp::GetPropList</b></a> method.</li>
<li>
Use <b>IMAPIProp</b> methods to exclude all properties supported by the messaging system. At an appropriate time write those properties to the messaging system in the format required by the messaging system.</li>
<li>
Call <a href="inter041_267n.htm"><b>ITnef::AddProps</b></a> to encode the remaining properties, including all attachments.</li>
<li>
Call the <a href="inter041_3nvs.htm"><b>ITnef::Finish</b></a> method to encode the message into the TNEF stream after all the requested properties are added.</li>
<li>
Call the <a href="inter041_4k8p.htm"><b>ITnef::OpenTaggedBody</b></a> method to obtain the tagged message text. This tagged text is written out to the messaging system using methods from the OLE <b>IStream</b> interface.</li>
<li>
Call the <b>IUnknown::Release</b> method to release the <b>ITnef</b> object.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To process an inbound TNEF message</h5>
<ol>
<li>
Get a MAPI message object from the MAPI spooler and write message header properties into the new MAPI message.</li>
<li>
Create and initialize an <b>IStream</b> object to contain the TNEF data from the inbound message.</li>
<li>
Pass the MAPI message and the <b>IStream</b> object to the <a href="function_3qk8.htm"><b>OpenTnefStreamEx</b></a> function.</li>
<li>
Decode the information in the TNEF data by calling the <a href="inter041_44c3.htm"><b>ITnef::ExtractProps</b></a> method. It is important to note that anything decoded by <b>ExtractProps</b> will overwrite properties decoded from the incoming message's envelope. That is, extracted TNEF properties will overwrite the existing properties in a message.</li>
<li>
Process the tagged message text by calling <a href="inter041_4k8p.htm"><b>ITnef::OpenTaggedBody</b></a> and the text is parsed to recover attachment positions.</li>
<li>
Save the message by calling <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a>.</li>
<li>
Release the TNEF object by calling the <b>IUnknown::Release</b> method.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

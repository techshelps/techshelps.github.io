<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMC_attachment</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_cmc_attachment"></a>CMC_attachment</h2>
<p>
A <b>CMC_attachment</b> structure contains a CMC message attachment. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>XCMC.H</td>
</tr>
</table><br>
<pre><code>typedef struct 
{ 
     CMC_string     attach_title; 
     CMC_object_identifier attach_type; 
     CMC_string     attach_filename; 
     CMC_flags attach_flags; 
     CMC_extension FAR     *attach_extensions; 
} CMC_attachment; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>attach_title</b></dt>
<dd>
The optional title for the attachment — for example, the original filename of the attachment.</dd>
<dt>
<b>attach_type</b></dt>
<dd>
Object identifier that specifies the attachment type. Two attachment types have been defined for use by client applications: 
<dl>
<dt>
CMC_ATT_OID_BINARY</dt>
<dd>
Data in a file is treated as binary data. This attachment type is the default.</dd>
<dt>
CMC_ATT_OID_TEXT</dt>
<dd>
Data in a file is treated as a text string. This attachment type assumes that data exists in the character set for the session on input and maps to the character set for the session on output, if possible.</dd>
</dl>

<p>
A NULL value for <b>attach_type</b> indicates an attachment of an undefined type.
</dd>
<dt>
<b>attach_filename</b></dt>
<dd>
Name of the file in which attachment content is located. The location of the file depends on the CMC implementation, which ensures access by the client application. </dd>
<dt>
<b>attach_flags</b></dt>
<dd>
Bitmask of flags used to describe attachment options. The following flags can be set: 
<dl>
<dt>
CMC_ATT_APP_OWNS_FILE</dt>
<dd>
On output, the client application owns the attachment and is responsible for deleting it. This flag is ignored on input. If the flag is not set, it indicates on output that the CMC implementation owns the file and the client application can only read it.</dd>
<dt>
CMC_ATT_LAST_ELEMENT</dt>
<dd>
The last structure in an array of <b>CMC_attachment </b>structures. The structure with this flag set must be at the end of the array. If this flag is set to zero for any structure, that structure is not the last array element.</dd>
</dl>
</dd>
<dt>
<b>attach_extensions</b></dt>
<dd>
Pointer to the first element in an array of <a href="cmcref_1woe.htm"><b>CMC_extension</b></a> structures, each of which is specific to an attachment. Attachment extensions exist to support graphic representation of the attachments in a message when it is displayed. The extensions contain the character positions for the graphic representations. A pointer value of NULL indicates that no extensions are present.
</dd>
</dl>
<h4>Remarks</h4>
<p>
A <a href="cmcref_6sv9.htm"><b>CMC_message</b></a> structure, which contains information about a CMC message, contains a pointer to an array of one or more <b>CMC_attachment</b> structures defining attachments for the message, or is NULL if there are no attachments. The array elements should have the same order as the attachments in the message, and the last element in the array should have the CMC_ATT_LAST_ELEMENT flag set in its <b>attach_flags</b> member. </p>
<h4>See Also</h4>
<p>
<a href="cmcref_1woe.htm"><b>CMC_extension</b></a>, <a href="cmcref_6sv9.htm"><b>CMC_message</b></a></p>
<p>&nbsp;</p></body>
</HTML>

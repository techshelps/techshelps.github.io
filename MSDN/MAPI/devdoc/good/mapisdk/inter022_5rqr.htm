<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIProp::SaveChanges</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapiprop_savechanges"></a>IMAPIProp::SaveChanges</h2>
<p>
The <b>IMAPIProp::SaveChanges</b> method makes permanent any changes made to an object since the last save operation. </p>
<h4>Quick Info</h4>
<p>
See <a href="inter022_00tq.htm"><b>IMAPIProp : IUnknown</b></a>.</p>
<pre><code><b>HRESULT SaveChanges(
  ULONG</b><i> ulFlags  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls what happens to the object when the <b>IMAPIProp::SaveChanges</b> method is called. 
<p>
The following flags can be set:

<dl>
<dt>
FORCE_SAVE</dt>
<dd>
Changes should be written to the object, overriding any previous changes made to the object, and the object closed. Read/write access must have been set for the operation to succeed. The FORCE_SAVE flag is used after a previous call to <b>SaveChanges</b> returned MAPI_E_OBJECT_CHANGED. </dd>
<dt>
KEEP_OPEN_READONLY</dt>
<dd>
Changes should be committed and the object should be kept open for reading. No further changes will be made. </dd>
<dt>
KEEP_OPEN_READWRITE</dt>
<dd>
Changes should be committed and the object should be kept open for read/write access. This flag is usually set when the object was initially opened for read/write access. Subsequent changes to the object are allowed. </dd>
<dt>
MAPI_DEFERRED_ERRORS</dt>
<dd>
Allows <b>SaveChanges</b> to return successfully, possibly before the changes have been fully committed. 
</dd>
</dl>
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The commitment of changes has been successful.</dd>
<dt>
MAPI_E_NO_ACCESS</dt>
<dd>
<b>SaveChanges</b> cannot keep the object open for read-only access, if KEEP_OPEN_READONLY is set, or read/write access, if KEEP_OPEN_READWRITE is set. No changes are committed.</dd>
<dt>
MAPI_E_OBJECT_CHANGED</dt>
<dd>
The object has changed since it was opened.</dd>
<dt>
MAPI_E_OBJECT_DELETED</dt>
<dd>
The object has been deleted since it was opened.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPIProp::SaveChanges</b> method makes property changes permanent for objects that support the transaction model of processing, such as messages, attachments, address book containers, and messaging user objects. Objects that do not support transactions, such as folders, message stores, and profile sections, make changes permanent immediately. No call to <b>SaveChanges</b> is required.</p>
<p>
Because service providers are not required to generate an entry identifier for their objects until all properties have been saved, an object's <a href="propa_8cv8.htm">PR_ENTRYID</a> property might not be available until after its <b>SaveChanges</b> method has been called. Some providers wait until the KEEP_OPEN_READONLY flag is set on the <b>SaveChanges</b> call. KEEP_OPEN_READONLY indicates that the changes to be saved in the current call will be the last changes that will be made on the object. </p>
<p>
Some message store implementations do not show newly created messages in a folder until a client saves the message changes using <b>SaveChanges</b> and releases the message objects using the <b>IUnknown::Release</b> method. In addition, some object implementations cannot generate a <a href="propa_8cv8.htm">PR_ENTRYID</a> property for a newly created object until after <b>SaveChanges </b>has been called, and some can only do so after <b>SaveChanges</b> has been called with KEEP_OPEN_READONLY set in <i>ulFlags</i>.</p>
<h4>Notes to Implementers</h4>
<p>
If you receive the KEEP_OPEN_READONLY flag, you have the option of leaving the object's access as read/write. </p>
<p>
However, in no case can a provider leave an object in a read-only state when the KEEP_OPEN_READWRITE flag is passed.</p>
<p>
When a client is saving multiple attachments to multiple messages, it will be calling the <b>SaveChanges</b> method for every attachment and every message. Often clients will set the MAPI_DEFERRED_ERRORS for each of these calls except for the last one. You can return errors either with the last call or earlier. You can even ignore the flag. </p>
<p>
If either KEEP_OPEN_READWRITE or KEEP_OPEN_READONLY is set along with MAPI_DEFERRED_ERRORS, you can ignore the error deferment request. If MAPI_DEFERRED_ERRORS is not set in <i>ulFlags</i>, one of the previously deferred errors can be returned for the <b>SaveChanges</b> call.</p>
<p>
Whether a remote transport provider provides a functional implementation of this method is optional and will probably depend on other design choices in your implementation. If you implement this method, do so according to the documentation here. Since folder objects and status objects are not transacted, at a minimum a remote transport provider's implementation of <b>SaveChanges</b> must return S_OK without actually doing any work.</p>
<h4>Notes to Callers</h4>
<p>
If a client passes KEEP_OPEN_READONLY, then calls the <a href="inter022_6cxf.htm"><b>IMAPIProp::SetProps</b></a> method and then <b>SaveChanges</b> again, the same implementation might stop.</p>
<p>
After receiving MAPI_E_NO_ACCESS from a call where you set KEEP_OPEN_READWRITE, you will continue to have read/write access to the object. You can call <b>SaveChanges</b> again, passing either the KEEP_OPEN_READONLY flag or no flags with the KEEP_OPEN_suffix. </p>
<p>
Whether a provider supports the KEEP_OPEN_READWRITE flag depends on the provider's implementation. </p>
<p>
To indicate that the only call to be made on the object after <b>SaveChanges</b> will be<b> IUnknown::Release</b>, set no flags for the <i>ulFlags</i> parameter. An error from <b>SaveChanges</b> indicates that it could not make the pending changes permanent. Different providers handle the absence of flags on the <b>SaveChanges</b> call differently. Some treat this state as the same as KEEP_OPEN_READONLY; others interpret it as the same as KEEP_OPEN_READWRITE. Still other providers shut down the object when they receive no flags on the <b>SaveChanges</b> call. </p>
<p>
Some properties, typically computed properties, cannot be processed until you call <b>SaveChanges</b> and, in particular cases, <b>Release</b>. </p>
<p>
When making bulk changes, such as saving attachments to multiple messages, defer error processing by setting the MAPI_DEFERRED_ERRORS flag in <i>ulFlags</i>. If you are saving multiple attachments to multiple messages, make one <b>SaveChanges</b> call to each attachment and one <b>SaveChanges</b> call to each message. Set the MAPI_DEFERRED_ERRORS flag for each attachment call and for all messages except for the last one. </p>
<p>
If <b>SaveChanges</b> returns MAPI_E_OBJECT_CHANGED, check if the original object has been modified. If so, warn the user, who can either request that the changes overwrite the previous changes or save the object somewhere else. If the original object has been deleted, warn the user so that the user can be given the opportunity to save the object in an alternate location.</p>
<p>
You cannot call <b>SaveChanges</b> with the FORCE_SAVE flag on an open object that has been deleted. </p>
<p>
If <b>SaveChanges</b> returns an error, then the object whose changes were to be saved remains open, regardless of the flags set in the <i>ulFlags</i> parameter.</p>
<p>
For more information, see <a href="property_284z.htm">Saving Properties</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IXPLogon::SubmitMessage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_ixplogon_submitmessage"></a>IXPLogon::SubmitMessage</h2>
<p>
The <b>IXPLogon::SubmitMessage</b> method indicates that the MAPI spooler has a message for the transport provider to deliver.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter042_2u9a.htm"><b>IXPLogon : IUnknown</b></a>.</p>
<pre><code><b>HRESULT SubmitMessage(
  ULONG</b><i> ulFlags</i><b>,</b>            
<b>  LPMESSAGE</b><i> lpMessage</i><b>,</b>      
<b>  ULONG FAR *</b><i> lpulMsgRef</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpulReturnParm  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls how the message is submitted. The following flag can be set:
<dl>
<dt>
BEGIN_DEFERRED</dt>
<dd>
The MAPI spooler is calling a transport provider with a message that was previously deferred. The entry identifier of the message is the same as when it was deferred. The message was deferred by passing its entry identifier back to the MAPI spooler using the <a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a> method with the NOTIFY_SENTDEFERRED flag. </dd>
</dl>
</dd>
<dt>
<i>lpMessage</i></dt>
<dd>
[in] Pointer to a message object with read/write access, representing the message to deliver, which is used by the transport provider to access and manipulate that message. This object remains valid until after the transport provider returns from a subsequent call to the <a href="inter042_576t.htm"><b>IXPLogon::EndMessage</b></a> method.</dd>
<dt>
<i>lpulMsgRef</i></dt>
<dd>
[out] Pointer to a variable in which the transport provider returns the 32-bit reference value it assigned to this message. The MAPI spooler passes this reference value in subsequent calls for this message. The value is initialized to zero by the MAPI spooler before returning it to the transport provider.</dd>
<dt>
<i>lpulReturnParm</i></dt>
<dd>
[out] Pointer to a variable that corresponds to the MAPI_E_WAIT or MAPI_E_NETWORK_ERROR error value returned by <b>IXPLogon::SubmitMessage</b>. 
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The call succeeded and has returned the expected value or values.</dd>
<dt>
MAPI_E_BUSY</dt>
<dd>
The transport provider can't handle the message because it is performing another operation. A provider should use this return value to indicate that no processing occurred and that the MAPI spooler should not call <b>EndMessage</b>. The MAPI spooler tries the <b>SubmitMessage</b> call again later. </dd>
<dt>
MAPI_E_CANCEL</dt>
<dd>
Although on a previous <b>SpoolerNotify</b> call the transport provider requested the MAPI spooler resubmit the message, conditions have since changed and the message should not be resent. The MAPI spooler goes on to handle something else.</dd>
<dt>
MAPI_E_NETWORK_ERROR</dt>
<dd>
A network error prevented successful completion of the operation. The <i>lpulReturnParm</i> parameter should be set to the number of seconds before the MAPI spooler resubmits the message.</dd>
<dt>
MAPI_E_NOT_ME</dt>
<dd>
The transport provider cannot handle this message. The MAPI spooler should try to find another transport provider for it. A provider should use this return value to indicate that no processing occurred and that the MAPI spooler should not call <b>EndMessage</b>.</dd>
<dt>
MAPI_E_WAIT</dt>
<dd>
A temporary problem prevents the transport provider from handling the message. The <i>lpulReturnParm</i> parameter should be set to the number of seconds before the MAPI spooler resubmits the message.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The MAPI spooler calls the <b>IXPLogon::SubmitMessage</b> method when it has a message for the transport provider to deliver. The message is passed to the transport provider using the <i>lpMessage </i>parameter.</p>
<p>
If the provider is ready to accept the message, it should return a reference value by using the <i>lpulMsgRef</i> parameter, process the passed object, and return the appropriate value, usually <small>s_ok</small>. If the provider is not prepared to handle the transfer, it should return an error value and, optionally, another MAPI return value in <i>lpulReturnParm</i> to indicate how long the MAPI spooler should wait before resubmitting the message.</p>
<p>
A transport provider's implementation of this method can:
<ul>
<li>
Put the message into an internal queue to wait for transmission, possibly copying it to local storage, and return.</li>
<li>
Attempt to perform the actual transmission and return when the transmission has completed, either successfully or unsuccessfully.</li>
<li>
Determine whether or not to send the message after checking the resource involved. In this case, if the resource is free, the provider can lock the resource, prepare the message, and submit it. If the resource is busy, the provider can prepare the message and defer sending to a later time.</li>
</ul>
<p>
The preferred technique depends on the transport provider and the expected number of processes competing for system resources. </p>
<p>
During a <b>SubmitMessage</b> call, the transport provider controls the transfer of message data from the message object. However, the transport provider should assign a 32-bit reference value to the message, to which it returns a pointer in <i>lpulMsgRef</i>, before transferring data. It does so because at any point during the process the MAPI spooler can call the <a href="inter042_5cah.htm"><b>IXPLogon::TransportNotify</b></a> method with the NOTIFY_CANCEL_MESSAGE flag set to signal the provider it should release any open objects and stop message transfer.</p>
<p>
The transport provider should not send any nontransmittable properties of the message. When it finds such a property, it should go on to process the next one. The provider should make every effort not to display MAPI_P1 recipient information as part of the transmitted message content, using such recipient information only for addressing purposes. MAPI_P1 recipients are internally-generated recipients for use in resends, they should not be transmitted. Instead, use the other recipients for transmitting recipient information. The purpose of this arrangement is to permit resend recipients to see the exact same recipient table as the original recipients.</p>
<p>
During a <b>SubmitMessage</b> call, the MAPI spooler processes methods for objects opened during the transfer of the message and also processes any attachments. This processing can take a long time. Transport providers running on 16-bit Windows platforms should call the <a href="inter025_3pt0.htm"><b>IMAPISupport::SpoolerYield</b></a> method for the MAPI spooler frequently during this processing to release CPU time for other system tasks.</p>
<p>
All message recipients are visible in the recipient table of the message originally passed by the MAPI spooler. The transport provider should process only those recipients that it can handle based on entry identifier, address type, or both, and that do not already have their <a href="propb_92pl.htm">PR_RESPONSIBILITY</a> property set to TRUE. If PR_RESPONSIBILITY is already set to TRUE, another transport provider has handled that recipient. When the provider has completed sufficient processing of a recipient to determine whether it can handle messages for that recipient, it should set that recipient's PR_RESPONSIBILITY property to TRUE in the passed message. Usually, the provider makes this determination after message delivery is complete.</p>
<p>
Typically, the transport provider does not return from a <b>SubmitMessage</b> call until it has completed the transfer of message data. If no error is returned, the next call from the MAPI spooler to the provider is a call to the <a href="inter042_576t.htm"><b>IXPLogon::EndMessage</b></a> method.</p>
<p>
If an error is returned from <b>SubmitMessage</b>, the MAPI spooler releases the message in process without saving changes. If the transport provider requires message changes be saved, it must call the <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> method on the message before returning. </p>
<p>
In case of errors occurring because of transport problems, the MAPI spooler retains the message but delays resubmitting it to the transport provider based on the value returned in <i>lpulReturnParm</i>. The transport provider must fill in that value if its return from <b>SubmitMessage</b> is MAPI_E_WAIT or MAPI_E_NETWORK_ERROR. If a severe error condition is occurring, the transport provider must call the <a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a> method with the NOTIFY_CRITICAL_ERROR flag.</p>
<h4>See Also</h4>
<p>
<a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a>,<b> <a href="inter025_5b7d.htm">IMAPISupport::SpoolerNotify</a></b>,<b> <a href="inter025_3pt0.htm">IMAPISupport::SpoolerYield</a></b>,<b> <a href="inter042_576t.htm">IXPLogon::EndMessage</a></b>,<b> <a href="inter042_5cah.htm">IXPLogon::TransportNotify</a></b></p>
<p>&nbsp;</p></body>
</HTML>

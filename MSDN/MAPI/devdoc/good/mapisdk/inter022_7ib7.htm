<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIProp::GetNamesFromIDs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapiprop_getnamesfromids"></a>IMAPIProp::GetNamesFromIDs</h2>
<p>
The <b>IMAPIProp::GetNamesFromIDs</b> method provides the property names that correspond to one or more property identifiers. </p>
<h4>Quick Info </h4>
<p>
See <a href="inter022_00tq.htm"><b>IMAPIProp : IUnknown</b></a>. </p>
<pre><code><b>HRESULT GetNamesFromIDs(
  LPSPropTagArray FAR *</b><i> lppPropTags</i><b>,</b>   
<b>  LPGUID</b><i> lpPropSetGuid</i><b>,</b>                
<b>  ULONG</b><i> ulFlags</i><b>,</b>                       
<b>  ULONG FAR *</b><i> lpcPropNames</i><b>,</b>            
<b>  LPMAPINAMEID FAR * FAR *</b><i> lpppPropNames  </i>
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>lppPropTags </i></dt>
<dd>
[in, out] On input, can be NULL, indicating that all names should be returned; or can be a pointer to an <a href="structyp_23i1.htm"><b>SPropTagArray</b></a> structure containing an array of property tags. The <b>cValues</b> member for the property tag array cannot be zero. If <i>lppPropTags</i> is a valid pointer on input, <b>GetNamesFromIDs</b> returns names for each of the property identifiers included in the array. </dd>
<dt>
<i>lpPropSetGuid </i></dt>
<dd>
[in] Pointer to a globally unique identifier, or <a href="structyp_4x0k.htm"><b>GUID</b></a> structure, identifying a property set. The <i>lpPropSetGuid</i> parameter can point to a valid property set or contain NULL. </dd>
<dt>
<i>ulFlags </i></dt>
<dd>
[in] Bitmask of flags that indicates the type of names to be returned. The following flags can be used: 
<dl>
<dt>
MAPI_NO_IDS </dt>
<dd>
Requests that only names stored as Unicode strings be returned. </dd>
<dt>
MAPI_NO_STRINGS </dt>
<dd>
Requests that only names stored as numeric identifiers be returned. </dd>
</dl>

<p>
If both flags are set, no names will be returned. 
</dd>
<dt>
<i>lpcPropNames </i></dt>
<dd>
[out] Pointer to a count of the property name pointers in the array pointed to by <i>lpppPropNames</i>. </dd>
<dt>
<i>lpppPropNames </i></dt>
<dd>
[out] Pointer to an array of pointers to <a href="structyp_1iqs.htm"><b>MAPINAMEID</b></a> structures containing property names. 
</dd>
</dl>
<h4>Return Values </h4>
<dl>
<dt>
S_OK </dt>
<dd>
The property names were successfully returned. </dd>
<dt>
MAPI_E_NO_SUPPORT </dt>
<dd>
The object does not support named properties. </dd>
<dt>
MAPI_W_ERRORS_RETURNED </dt>
<dd>
The call succeeded overall, but names for one or more properties could not be returned. The property tags for the failing properties have a property type of PT_ERROR. When this warning is returned, the call should be handled as successful. To test for this warning, use the <b>HR_FAILED</b> macro. See <a href="extend_5k9z.htm">Using Macros for Error Handling</a>. </dd>
<dt>
MAPI_E_INVALID_PARAMETER </dt>
<dd>
The <b>cValues</b> member of one or more of the entries in the property tag array pointed to by <i>lppPropTags</i> is set to zero. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
While access to most properties is by property identifier, some properties can be accessed by name. The <a href="#_mapi1book_imapiprop_getnamesfromids"><b>IMAPIProp::GetNamesFromIDs</b></a> method can be called to:
<ul>
<li>
Retrieve names for specific property identifiers in a specific property set.</li>
<li>
Retrieve names for specific property identifiers in any property set.</li>
<li>
Retrieve names for all named properties that are included in the object's mapping.</li>
</ul>
<p>
If <i>lppPropTags</i> points to a valid property tag array with one or more property identifiers and <i>lpPropSetGuid</i> points to a valid property set, <b>GetNamesFromIDs</b> ignores the property set and the property types and returns all of the names that map to the specified identifiers. </p>
<p>
If <i>lppPropTags</i> points to a valid property tag array with one or more property identifiers and <i>lpPropSetGuid</i> is NULL, <b>GetNamesFromIDs</b> returns all of the names that map to the specified identifiers. </p>
<p>
If a specified identifier does not have a name, <b>GetNamesFromIDs</b> returns NULL in that identifier's place in the structure returned in <i>lpppPropNames</i> and also returns MAPI_W_ERRORS_RETURNED. </p>
<p>
If both <i>lpPropSetGuid</i> and <i>lppPropTags</i> are NULL, <b>GetNamesFromIDs</b> allocates a new property tag array and returns all of the names for all of the named properties for the object. </p>
<p>
When there are no names to be returned, perhaps because there are no properties in the requested property set or all of the properties are of a type excluded by the flags, <b>GetNamesFromIDs</b>:
<ul>
<li>
Returns S_OK.</li>
<li>
Allocates a new <a href="structyp_23i1.htm"><b>SPropTagArray</b></a> structure, setting the <b>cValues</b> member to 0.</li>
<li>
Sets the contents of <i>lpcPropNames</i> to zero. </li>
<li>
Sets the contents of <i>lpppPropNames</i> to NULL. </li>
</ul>
<h4>Notes to Implementers</h4>
<p>
If <i>lpPropSetGuid</i> points to a valid property set and <i>lppPropsTags</i> is NULL, the result is undefined. You can implement one of the following strategies:
<ul>
<li>
Ignore the property set and return the names for the identifiers in the property tag array.</li>
<li>
Return the names for only the identifiers in the property tag array that belong to the specified property set.</li>
<li>
Fail the call, returning MAPI_E_INVALID_PARAMETER. </li>
</ul>
<h4>Notes to Callers </h4>
<p>
To retrieve all of the named properties for an object, you must first call the object's <a href="inter022_79v8.htm"><b>IMAPIProp::GetPropList</b></a> method and then pass the returned identifiers that are above the 0x8000 range to <b>GetNamesFromIDs</b>. </p>
<p>
If you pass a valid property set but not a valid property tag array, be prepared for unpredictable results. Some implementations of <b>GetNamesFromIDs</b> ignore the property set and return the names for the identifiers in the property tag array. Some implementations return MAPI_E_INVALID_PARAMETER. Still other implementations return names for identifiers of all properties in the property set. If the property set is PS_PUBLIC_STRINGS, <b>GetNamesFromIDs</b> can return all names that were ever created. Whether or not the service provider stores a property under the identifiers associated with the public strings is immaterial. </p>
<p>
When you are finished with the property names, check the contents of the <i>lpcPropNames</i> parameter to determine if any names were returned. If so, call <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> to free the memory pointed to by <i>lppPropTags</i> and <i>lpppPropNames</i> when success is returned. One call to MAPIFreeBuffer is sufficient for each parameter; you do not need to traverse the array of pointers and free each <a href="structyp_1iqs.htm"><b>MAPINAMEID</b></a> structure individually. </p>
<p>
For more information about named properties, see <a href="property_2jw3.htm">Named Properties</a>. </p>
<h4>See Also </h4>
<p>
<a href="inter022_49f7.htm"><b>IMAPIProp::GetIDsFromNames</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

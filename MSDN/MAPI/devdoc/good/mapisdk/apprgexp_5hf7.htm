<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Character Regular Expressions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_multiple_character_regular_expressions"></a>Multiple Character Regular Expressions</h1>
<p>
Single character regular expressions can be combined into more complex regular expressions that match more than one character at a time. You can also apply modifiers to single character regular expressions to make them match more than one instance of the character or characters specified by the single character regular expression.</p>
<p>
Use the following rules to construct regular expressions from single character regular expressions:
<ul>
<li>
A single character regular expression followed by an asterisk (*) is a regular expression that matches zero or more consecutive occurrences of the single character regular expression; always as many as possible. For example, "f*" matches zero or more consecutive "f" characters.</li>
<li>
A single character regular expression followed by \{<i>m</i>\}, \{<i>m</i>,\}, or \{<i>m</i>,<i>n</i>\} is a regular expression that matches a specified number of occurrences of the single character regular expression. The values of <i>m</i> and <i>n</i> must be nonnegative integers less than 255; \{<i>m</i>\} matches exactly <i>m</i> occurrences of the single character regular expression; \{<i>m</i>,\} matches at least <i>m</i> occurrences; \{<i>m</i>,<i>n</i>\} matches any number of occurrences between <i>m</i> and <i>n</i>, inclusive. Whenever a choice exists, the regular expression matches as many occurrences as possible. For example, the regular expression "[0-9]\{1,4\}" matches any sequence of 1 to 4 digits.</li>
<li>
A concatenation of regular expressions is a regular expression that matches the concatenation of the strings matched by each component of the regular expression. For example, the regular expression "[0-9][a-z]" matches any string of two characters that starts with a digit and ends with a lowercase letter.</li>
<li>
A regular expression enclosed between the character sequences \( and \) is a sub-expression that matches whatever the original regular expression matches. The sub-expression is placed in a internal, numbered register for use later. The registers are numbered according to the pairs of \( and \) within the whole regular expression. The first pair corresponds to register 1. For example, if a string matches the regular expression "\([0-9]*\)\([a-z]*\)", register 1 will contain whatever sequence of characters matched the regular expression "[0-9]*", and register 2 will contain whatever sequence of characters matched the regular expression "[a-z]*". There may be up to 9 sub-expressions in a regular expression.</li>
<li>
The expression \<i>n</i>, where <i>n</i> is a digit from 1 through 9, matches the same string of characters stored in the internal register number <i>n</i>; that is, the same string of characters that the sub-expression corresponding to <i>n</i> originally matched. Regular expressions of the form \<i>n</i> are meaningless unless there is a sub-expression corresponding to <i>n</i>. For example, the regular expression "\([0-9]\)\1\1" matches any string which consists of the same digit three times, such as "777".</li>
<li>
A regular expression preceeded by a caret (^) must match at the beginning of the target string. A regular expression followed by a dollar sign ($) must match at the end of the target string. Both may be used in the same regular expression. For example, the regular expression "^[0-9]*$" only matches strings that consist entirely of digits.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

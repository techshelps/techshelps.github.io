<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SComparePropsRestriction</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_scomparepropsrestriction"></a>SComparePropsRestriction</h2>
<p>
The <b>SComparePropsRestriction</b> structure describes a compare property restriction, which tests two properties using a relational operator. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPIDEFS.H</td>
</tr>
</table><br>
<pre><code>typedef struct _SComparePropsRestriction 
{ 
     ULONG relop; 
     ULONG ulPropTag1; 
     ULONG ulPropTag2; 
} SComparePropsRestriction; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>relop</b></dt>
<dd>
Relational operator to use to compare the two properties. Possible values are:
<dl>
<dt>
RELOP_GE</dt>
<dd>
The comparison is made based on a greater or equal first value.</dd>
<dt>
RELOP_GT</dt>
<dd>
The comparison is made based on a greater first value.</dd>
<dt>
RELOP_LE</dt>
<dd>
The comparison is made based on a lesser or equal first value.</dd>
<dt>
RELOP_LT</dt>
<dd>
The comparison is made based on a lesser first value.</dd>
<dt>
RELOP_NE</dt>
<dd>
The comparison is made based on unequal values.</dd>
<dt>
RELOP_RE</dt>
<dd>
The comparison is made based on LIKE (regular expression) values.</dd>
<dt>
RELOP_EQ</dt>
<dd>
The comparison is made based on equal values.</dd>
</dl>
</dd>
<dt>
<b>ulPropTag1</b></dt>
<dd>
Property tag of the first property to be compared. </dd>
<dt>
<b>ulPropTag2</b></dt>
<dd>
Property tag of the second property to be compared. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
The comparison order is <i>(property tag 1) (relational operator) (property tag 2)</i>. The properties to be compared must be of the same type. Attempting to compare properties of different types causes MAPI or the service provider to return the error value MAPI_E_TOO_COMPLEX from the <b>IMAPITable</b> method to which the structure is passed as a parameter.</p>
<p>
The result of a compare property value restriction is undefined when one or both of the properties do not exist. When a client requires well-defined behavior for such a restriction and is not sure whether the property exists — for example, it is not a required column of a table — it should create an <b>AND</b> restriction to join the compare property restriction with an exist restriction. Use an <a href="structyp_7qy6.htm"><b>SExistRestriction</b></a> structure to define the exist restriction and an <a href="structyp_0v1q.htm"><b>SAndRestriction</b></a> structure to define the <b>AND</b> restriction.</p>
<p>
The properties specified in the <b>ulPropTag1</b> and <b>ulPropTag2</b> members can be multivalued if the service provider supports it. </p>
<p>
For more information on the <b>SComparePropsRestriction</b> structure and restrictions in general, see <a href="tables_0qyb.htm">About Restrictions</a>.</p>
<h4>See Also</h4>
<p>
<a href="groups_3dpv.htm">Restriction Structures</a>, <a href="structyp_6zvy.htm"><b>SBitMaskRestriction</b></a>,<b> <a href="structyp_45ny.htm">SRestriction</a></b> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing HPProviderInit for Hook Providers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mapi1book_implementing_hpproviderinit_for_hook_providers"></a>Implementing HPProviderInit for Hook Providers</h3>
<p>
The <a href="function_4y7o.htm"><b>HPProviderInit</b></a> entry point should create a message hook provider object, initialize it, and return a pointer to it in the <i>lppSpoolerHook</i> pointer parameter. Initializing the spooler hook object is usually accomplished by:
<ul>
<li>
Storing the MAPI session pointer, instance handle, and memory allocation routine pointers that are passed in by MAPI.</li>
<li>
Getting the hook provider's configuration information out of its profile section.</li>
<li>
Verifying that its configuration information is complete and correctly formatted.</li>
<li>
Connecting to any other MAPI service providers needed — such as store providers — by getting pointers to them from MAPI through the session pointer.</li>
<li>
Initializing any rules or filters that should be started when the hook provider is loaded.</li>
</ul>
<p>
For more details, see <a href="inter039_9q5q.htm"><b>ISpoolerHook : IUnknown</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

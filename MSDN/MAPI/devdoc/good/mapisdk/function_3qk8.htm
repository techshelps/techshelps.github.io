<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenTnefStreamEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_opentnefstreamex"></a>OpenTnefStreamEx</h2>
<p>
The <b>OpenTnefStreamEx</b> function creates a TNEF object that can be used to encode or decode a message object into a TNEF data stream for use by transports or gateways and message stores. This is the entry point for TNEF access. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file: </td>
<td width=52%>TNEF.H </td>
</tr>
<tr valign=top>
<td width=48%>Implemented by: </td>
<td width=52%>MAPI </td>
</tr>
<tr valign=top>
<td width=48%>Called by: </td>
<td width=52%>Transport providers </td>
</tr>
</table><br>
<pre><code><b>HRESULT OpenTnefStreamEx(
  LPVOID</b><i> lpvSupport</i><b>,</b>     
<b>  LPSTREAM</b><i> lpStreamName</i><b>,</b>   
<b>  LPTSTR</b><i> lpszStreamName</i><b>,</b>   
<b>  ULONG</b><i> ulFlags</i><b>,</b>         
<b>  LPMESSAGE</b><i> lpMessage</i><b>,</b>   
<b>  WORD</b><i> wKeyVal</i><b>,</b>          
<b>  LPADRBOOK</b><i> lpAdressBook</i><b>,</b>   
<b>  LPITNEF FAR *</b><i> lppTNEF  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpvSupport</i></dt>
<dd>
Passes a support object or passes in NULL. If NULL, the <i>lpadrbook</i> parameter should be non-null.</dd>
<dt>
<i>lpStreamName</i></dt>
<dd>
[in] Pointer to a storage stream object, such as an OLE <b>IStream</b> interface, providing a source or destination for a TNEF stream message. </dd>
<dt>
<i>lpszStreamName</i></dt>
<dd>
[in] Pointer to the name of the data stream that the TNEF object uses. If the caller has set the TNEF_ENCODE flag (<i>ulFlags</i> parameter) in its call to <b>OpenTnefStream</b>, the <i>lpszName</i> parameter must specify a non-null pointer to a non-null string consisting of any characters considered valid for naming a file. MAPI does not allow string names including the characters "[", "]", or "<b>:</b>", even if the file system permits their use. The size of the string passed for the <i>lpszName</i> parameter must not exceed the value of MAX_PATH, the maximum length of a string containing a path name.</dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags used to indicate the mode of the function. The following flags can be set:
<dl>
<dt>
TNEF_BEST_DATA</dt>
<dd>
All possible properties are mapped into their down-level attributes, but when there is a possible data loss due to the conversion to a down-level attribute, the property is also encoded in the encapsulations. Note that this will cause the duplication of information in the TNEF stream. TNEF_BEST_DATA is the default if no other modes are specified. </dd>
<dt>
TNEF_COMPATIBILITY</dt>
<dd>
Ensures backward compatibility with the Microsoft Mail 3.0 client. TNEF streams encoded with this flag will map all possible properties into their corresponding down-level attribute. This mode also causes the defaulting of some properties that are required by down-level clients.</dd>
<dt>
TNEF_DECODE</dt>
<dd>
The TNEF object on the indicated stream is opened with read-only access. The transport provider must set this flag if it wants the function to initialize the object for subsequent decoding.</dd>
<dt>
TNEF_ENCODE</dt>
<dd>
The TNEF object on the indicated stream is opened for read/write access. The transport provider must set this flag if it wants the function to initialize the object for subsequent encoding.</dd>
<dt>
TNEF_PURE</dt>
<dd>
Encodes all properties into the MAPI encapsulation blocks. Therefore, a "pure" TNEF file will consist of, at most, the attributes attMAPIProps, attAttachment, attRenddata, and attRecipTable. This mode is ideal for use when no backward compatibility is required.</dd>
</dl>
</dd>
<dt>
<i>lpMessage</i></dt>
<dd>
[in] Pointer to a message object as a destination for a decoded message with attachments or a source for an encoded message with attachments. Any properties of a destination message can be overwritten by the properties of an encoded message.</dd>
<dt>
<i>wKeyVal</i></dt>
<dd>
[in] A search key that the TNEF object uses to match attachments to the text tags inserted in the message text. This value should be relatively unique across messages. </dd>
<dt>
<i>lpAdressBook</i></dt>
<dd>
[in] Pointer to an address book object used to get addressing information for entry identifiers. </dd>
<dt>
<i>lppTNEF</i></dt>
<dd>
[out] Pointer to the new TNEF object.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The call succeeded and has returned the expected value or values.
</dd>
</dl>
<h4>Remarks </h4>
<p>
The <b>OpenTnefStreamEx</b> function is the recommended replacement for <a href="function_28ml.htm"><b>OpenTnefStream</b></a>, the original entry point for TNEF access. </p>
<p>
A TNEF object created by the <b>OpenTnefStreamEx</b> function later calls the OLE method <b>IUnknown::AddRef</b> to add references for the support object, the stream object, and the message object. The transport provider can release the references for all three objects with a single call to the OLE method <b>IUnknown::Release</b> on the TNEF object.</p>
<p>
<b>OpenTnefStreamEx</b> allocates and initializes a TNEF object for the provider to use in encoding a MAPI message into a TNEF stream message. Alternatively, this function can set up the object for the provider to use in subsequent calls to <a href="inter041_44c3.htm"><b>ITnef::ExtractProps</b></a> to decode a TNEF stream message into a MAPI message. To free the TNEF object and close the session, the transport provider must call the inherited <b>IUnknown::Release</b> method on the object.</p>
<p>
A 32-bit Windows program should call <b>OpenTnefStreamEx</b> strictly as defined in the syntax, using the name provided. However, a 16-bit Windows program can set its own name for this function using the <b>OPENTNEFSTREAM</b> function prototype. The prototype has exactly the same syntax as the formal function, except that it designates a return value of HRESULT instead of STDMETHODIMP.</p>
<p>
The base value for the <i>wKeyVal</i> parameter must not be zero and should not be the same for every call to <b>OpenTnefStreamEx</b>. Instead, use random numbers based on the system time from the run-time library's random number generator.</p>
<h4>See Also </h4>
<p>
<a href="groups_1shf.htm">Tnef Functions</a>, <a href="inter025_8uge.htm"><b>IMAPISupport : IUnknown</b></a>, <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

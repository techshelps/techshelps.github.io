<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Incorporating Formatted Text and Attachments</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_incorporating_formatted_text_and_attachments"></a>Incorporating Formatted Text and Attachments</h1>
<p>
A client application can send or receive a message that includes formatted text and attachments. Clients that want to work with formatted text must use the MAPI client interface. CMC, Simple MAPI, and the Active Messaging Library do not support formatted text in messages.</p>
<h4>Design Tasks</h4>
<ol>
<li>
Decide on a mechanism for displaying formatted text. You can use the Rich Text Format (RTF) supported by Microsoft or your own customized format. See <a href="extend_5yzt.htm">Formatted Text in MAPI</a>.</li>
<li>
Decide on the types of attachments that your client will handle. See <a href="extend_7qwj.htm">Attachments</a>.</li>
<li>
Decide if and how your client will activate and save its attachments. See <a href="consider_2fp0.htm">Creating a Message Attachment</a>.</li>
</ol>
<h4>Implementation Tasks</h4>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To send a message with formatted text</h5>
<ol>
<li>
Call the <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method to open the <a href="propb_7vhg.htm">PR_RTF_COMPRESSED</a> property, setting both the MAPI_CREATE and MAPI_MODIFY flags. MAPI_CREATE ensures that any new data replaces any old data and MAPI_MODIFY enables your client to make those replacements.</li>
<li>
Call the <a href="function_8lv1.htm"><b>WrapCompressedRTFStream</b></a> function, passing STORE_UNCOMPRESSED_RTF if the message store sets the STORE_UNCOMPRESSED_RTF bit in its <a href="propb_01t7.htm">PR_STORE_SUPPORT_MASK</a> property, to get an uncompressed version of the <a href="propb_7vhg.htm">PR_RTF_COMPRESSED</a> stream returned from <b>OpenProperty</b>.</li>
<li>
Write the message text data to the uncompressed stream returned from <b>WrapCompressedRTFStream</b>.</li>
<li>
If the message data is an attachment, write the character token "\objattph" followed by a space to the stream instead of the attachment. </li>
<li>
Set the <a href="propb_8uni.htm">PR_RENDERING_POSITION</a> property of the attachment to a value that will increase with each attachment. For example, the first attachment could be assigned 1 as its PR_RENDERING_POSITION, the second one 2, and so on. </li>
<li>
Commit and release both the uncompressed and compressed streams.</li>
<li>
If the message store does not support RTF as indicated by the absence of the STORE_RTF_OK setting in the PR_STORE_SUPPORT_MASK property, call the <a href="function_4yg3.htm"><b>RTFSync</b></a> function and pass the RTF_SYNC_RTF_CHANGED flag.</li>
</ol>
<p>
</p>
<p>
For more information, see <a href="extend_5vlf.htm">Supporting Formatted Text in Outgoing Messages: Client Responsibilities</a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To read a message with formatted text</h5>
<ol>
<li>
Call <a href="function_4yg3.htm"><b>RTFSync</b></a> to synchronize the message text with the formatting if the message store is not RTF-aware and the <a href="propb_26ar.htm">PR_RTF_IN_SYNC</a> property is missing or set to FALSE. The RTF_SYNC_BODY_CHANGED flag should be passed in the <i>ulFlags</i> parameter. Clients working with RTF-aware message stores need not make the <b>RTFSync </b>call because the message store takes care of it.</li>
<li>
Call <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> if the message has been updated.</li>
<li>
Call <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> to open the PR_RTF_COMPRESSED property.</li>
<li>
Call the <a href="function_8lv1.htm"><b>WrapCompressedRTFStream</b></a> function, passing the STORE_UNCOMPRESSED_RTF flag if the message store sets the STORE_UNCOMPRESSED_RTF flag in its <a href="propb_01t7.htm">PR_STORE_SUPPORT_MASK</a> property, to create an uncompressed version of the compressed RTF data.</li>
<li>
Display the uncompressed RTF data.</li>
</ol>
<p>
</p>
<p>
If there are attachments in the message, perform the following tasks in addition to the preceding steps:
<ol>
<li>
Before reading from the uncompressed RTF stream, sort the message's attachment table on the value of the <a href="propb_8uni.htm">PR_RENDERING_POSITION</a> property. The attachments will now be in order by how they appear in the message.</li>
<li>
As your client scans through the RTF stream, check for the token "\objattph". The character following the token is the place to put the next attachment from the sorted table. Handle attachments that have set their PR_RENDERING_POSITION property to -1 separately.</li>
</ol>
<p>
</p>
<p>
For more information, see <a href="extend_446r.htm">Supporting Formatted Text in Incoming Messages: Client Responsibilities</a>.</p>
<h4>About Sample Source Code</h4>
<p>
See the following topic:</p>
<p class=indent1>
<a href="start_0iyh.htm">Sample RTF Utility</a></p>
<p>&nbsp;</p></body>
</HTML>

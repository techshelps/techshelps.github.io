<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Message Text</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_creating_message_text"></a>Creating Message Text</h2>
<p>
Although some messages are made up of nothing more than a recipient list and a subject line, the content of most messages, specifically IPM.Note messages, includes text. <a href="glossary_4s31.htm#_mapi1book_gly_message_text">Message text</a> can be plain or formatted and is stored in two properties: <a href="propa_9lvd.htm">PR_BODY</a> and <a href="propb_7vhg.htm">PR_RTF_COMPRESSED</a>. If your client is plain text-based, set PR_BODY. If you support formatted text in the Rich Text Format (RTF), set either PR_RTF_COMPRESSED only or both PR_RTF_COMPRESSED and PR_BODY, depending on the message store provider that you are using. When an RTF-aware client is using an RTF-aware message store, it sets PR_RTF_COMPRESSED only. When an RTF-aware client is using a non-RTF-aware message store, it sets both properties.</p>
<p>
<b>Note</b>  Clients can use other types of formatted text in addition to RTF, but MAPI has not defined properties for managing types other than RTF.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To determine whether or not your message store supports Rich Text Format</h5>
<ol>
<li>
Call the message store's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve the <a href="propb_01t7.htm">PR_STORE_SUPPORT_MASK</a> property.</li>
<li>
Check for the STORE_RTF_OK bit. If STORE_RTF_OK is set, the message store provider supports RTF text. If it is not set, the message store provider supports plain text only.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To set PR_RTF_COMPRESSED</h5>
<ol>
<li>
Call the message's <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method to open the <a href="propb_7vhg.htm">PR_RTF_COMPRESSED</a> property, specifying IID_IStream as the interface identifier and setting the MAPI_CREATE flag.</li>
<li>
Call the <a href="function_8lv1.htm"><b>WrapCompressedRTFStream</b></a> function, passing the STORE_UNCOMPRESSED_RTF flag if the STORE_UNCOMPRESSED_RTF bit is set in the message store's <a href="propb_01t7.htm">PR_STORE_SUPPORT_MASK</a> property.</li>
<li>
Release the original stream by calling its<b> IUnknown::Release</b> method.</li>
<li>
Call either<b> IStream::Write</b> or <b>IStream::CopyTo</b> to write the message text to the stream returned from <b>WrapCompressedRTFStream</b>.</li>
<li>
Call the <b>Commit</b> and <b>Release</b> methods on the stream returned from the <b>OpenProperty</b> method.</li>
</ol>
<p>
At this point, if the message store provider supports RTF, you have done all that is required. You can depend on the message store provider to handle synchronizing the message content and formatting and to create the <a href="propa_9lvd.htm">PR_BODY</a> property if necessary. RTF-aware message stores call <a href="function_4yg3.htm"><b>RTFSync</b></a> to handle the synchronization. If the RTF_SYNC_BODY_CHANGED flag is set to TRUE, the provider will recompute the PR_BODY property. </p>
<p>
If your message store provider does not support RTF, you must also add non-RTF message content by setting the PR_BODY property.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To set PR_BODY</h5>
<ol>
<li>
Call the <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method to open the <a href="propa_9lvd.htm">PR_BODY</a> property with the <b>IStream</b> interface.</li>
<li>
Call <b>IStream::Write</b> to write the message text data to the stream returned from <b>OpenProperty</b>. </li>
<li>
Call the <a href="function_4yg3.htm"><b>RTFSync</b></a> function to synchronize the text with the formatting. Because this is a new message, set both the RTF_SYNC_RTF_CHANGED and RTF_SYNC_BODY_CHANGED flags to indicate that both the RTF and plain text version of the message text has changed. <b>RTFSync</b> will set several related properties that the message store provider requires, such as PR_RTF_IN_SYNC, and write them to the message.</li>
<li>
Call <b>IStream::Commit</b> and <b>IUnknown::Release</b> on the stream to commit the changes and free its memory.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

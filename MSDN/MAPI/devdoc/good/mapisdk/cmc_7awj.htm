<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using CMC Data Extensions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_using_cmc_data_extensions"></a>Using CMC Data Extensions</h1>
<p>
The data structures and functions defined by CMC can be expanded through the use of data extensions to add members to data structures and parameters to function calls.</p>
<p>
Data extensions have two roles in CMC messaging. First, they are a mechanism to provide features not common across all messaging systems. Second, they enable extension of CMC in the future while also minimizing backward-compatibility issues. Use caution when using data extensions to take advantage of features specific to a messaging system. Reliance on specific features limits the portability of your client across messaging systems; also, such features might not be preserved properly when a message passes through multiple gateways in a mixed messaging network. If you do use data extensions, your code should test for the presence of the extensions and gracefully handle the absence of the extensions. Doing so will make your client portable to other CMC implementations.</p>
<p>
Data extensions are grouped into extension sets. Extension sets have unique identifiers (defined constants) assigned to them that represent the set as a whole and that represent the individual extensions in the set. These identifiers are assigned by the <a href="glossary_4s3c.htm#_mapi1book_gly_x.400">X.400</a> API Association, which guarantees that there are no conflicts between identifiers in officially recognized extension sets. There are also provisions for allowing a CMC implementation to define its own data extensions without obtaining identifiers from the X.400 API Association. If this is done, clients that use those extensions might not be portable to other CMC implementations.</p>
<p>
The CMC common extension set contains the function and data extensions that are common to most messaging systems but are not in the CMC base specification. The common extension set is identified by the CMC_XS_COM constant. Individual extensions in the common extension set are identified by constants with names that start with CMC_X_COM. For a full list of common extensions, see <a href="cmcref_0jn7.htm">Data Extensions</a>.</p>
<p>
A generic data structure, <a href="cmcref_1woe.htm"><b>CMC_extension</b></a>, is the base from which these extensions are created. A <b>CMC_extension</b> structure consists of an <b>item_code</b> member identifying the extension, an <b>item_data</b> member containing the length of the extension data or the data itself, an <b>item_reference</b> member pointing to the location where the extension value is stored or that is NULL if there is no related item storage, and an <b>extension_flags</b> member containing a bitmask of extension flags. The <b>item_code</b> member identifies a particular extension and determines the meanings of values in the other members.</p>
<p>
Extensions that are additional parameters to a function call can be either input or output parameters. That is, an extension can be passed either as an input parameter from your client application to CMC or as an output parameter from CMC to your client. If an extension is an input parameter, allocate memory for the extension structure and any other structures associated with the extension. If an extension is an output parameter, CMC allocates the memory for the extension result, if necessary, and you must free the allocated memory with a call to the <a href="cmcref_5z51.htm"><b>cmc_free</b></a> function.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To use a data extension</h5>
<ol>
<li>
Create a <a href="cmcref_1woe.htm"><b>CMC_extension</b></a> structure and fill in the members according to the extension you want to use.</li>
<li>
Pass a pointer to that structure in a call to a CMC function which can use it. The CMC function will use the information in the extension structure to enable additional functionality beyond the functionality defined for that CMC function in the X.400 API Association's CMC specification. The exact nature of the additional functionality is described in the documentation for the extension set you are using, which should be obtained from the extension set vendor.</li>
<li>
Retrieve any return values from the members of the <b>CMC_extension</b> structure if the CMC function uses the structure to pass values back to your client.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

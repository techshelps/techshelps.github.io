<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAPIUID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_mapiuid"></a>MAPIUID</h2>
<p>
The <b>MAPIUID </b>structure is a byte-order independent version of a <b>GUID</b> structure and is used to uniquely identify a service provider. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPIDEFS.H</td>
</tr>
<tr valign=top>
<td width=48%>Related macro:</td>
<td width=52%><a href="structyp_94tg.htm"><b>IsEqualMAPIUID</b></a></td>
</tr>
</table><br>
<pre><code>typedef struct _MAPIUID 
{ 
     BYTE ab[16]; 
} MAPIUID, FAR *LPMAPIUID; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>ab</b></dt>
<dd>
An array containing a 16-byte identifier.
</dd>
</dl>
<h4>Remarks</h4>
<p>
A <b>MAPIUID</b> structure — MAPI unique identifier — is a <a href="structyp_4x0k.htm"><b>GUID</b></a> structure put into Intel® processor byte order. That is, <b>MAPIUID</b> and <b>GUID</b> structures have the same byte order when used on an Intel-processor computer. However, on a computer that uses a different byte order — for example, a Motorola®-processor computer — the <b>MAPIUID</b> has the same byte order as on the Intel machine and the <b>GUID</b> uses the byte order specific to the Motorola-processor computer. </p>
<p>
MAPI creates <b>MAPIUID </b>structures in a way that makes it extremely rare for two different items to have the same identifier. <b>MAPIUID</b> structures can be stored as binary properties or as files, without regard to the byte ordering of the computer storing or accessing the information. </p>
<p>
<b>MAPIUID</b> structures are used:
<ul>
<li>
To identify a profile section.</li>
<li>
In the entry identifiers of message store and address book objects to identify the responsible service provider.</li>
<li>
In the <a href="propb_960p.htm">PR_SEARCH_KEY</a> property of messages.</li>
</ul>
<p>
To generate a <b>MAPIUID</b> identifier for a profile section or an entry identifier, service providers call the Microsoft utility UUIDGEN.EXE. To generate a <b>MAPIUID</b> identifier for a search key, service providers call <a href="inter025_0eck.htm"><b>IMAPISupport::NewUID</b></a>.</p>
<p>
When a client transmits a message across a network, it should use a protocol or transmission format that does not change the byte order of <b>MAPIUID </b>data. </p>
<p>
For more information about how <b>MAPIUID</b> structures are used, see the following topics:</p>
<p class=indent1>
<a href="provider_57cj.htm">Registering Service Provider Unique Identifiers</a></p>
<p class=indent1>
<a href="hookppr_2vxu.htm">Registering a Preprocessor</a></p>
<p class=indent1>
<a href="consider_2baq.htm">Setting Transport Order</a></p>
<h4>See Also</h4>
<p>
<a href="groups_1iyb.htm">ID Structures</a>, <a href="structyp_4x0k.htm"><b>GUID</b></a>,<b> <a href="inter023_4ofi.htm">IMAPISession::OpenProfileSection</a></b>, <a href="inter025_0eck.htm"><b>IMAPISupport::NewUID</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

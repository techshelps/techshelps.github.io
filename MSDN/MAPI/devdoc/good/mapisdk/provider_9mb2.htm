<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Supporting Object Access and Comparison</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_supporting_object_access_and_comparison"></a>Supporting Object Access and Comparison</h1>
<p>
Service providers can use the following two methods to open and compare objects belonging to their provider or to other providers:</p>
<p class=indent1>
<a href="inter025_4rnd.htm"><b>IMAPISupport::OpenEntry</b></a></p>
<p class=indent1>
<a href="inter025_34s3.htm"><b>IMAPISupport::CompareEntryIDs</b></a></p>
<p>
Like <b>IMAPISession::OpenEntry</b> for clients, providers can use their support object's <b>OpenEntry</b> method to access any object as long they know the object's entry identifier. Unlike the session method, the support method requires that you specify a valid entry identifier in the <i>lpEntryID</i> parameter. It cannot be NULL. </p>
<p>
To illustrate how a transport provider might use <b>IMAPISupport::OpenEntry</b>, consider the following scenario. The transport provider has received a message formatted in Rich Text Format and does not know if the target recipient can handle this format. Before delivering the message, the transport provider needs to:
<ol>
<li>
Call the message's <a href="inter029_9zhh.htm"><b>IMessage::GetRecipientTable</b></a> method to access the recipient table and the recipient's entry identifier, its <a href="propa_8cv8.htm">PR_ENTRYID</a> property.</li>
<li>
Pass the entry identifier to <a href="inter025_4rnd.htm"><b>IMAPISupport::OpenEntry</b></a> to open the recipient, typically either a messaging user or distribution list. The <i>lpInterface</i> parameter should be set to NULL because the provider cannot know ahead of time the object type of the recipient.<p>
The support object's <b>OpenEntry</b> method calls <a href="inter023_146x.htm"><b>IMAPISession::OpenEntry</b></a> to determine the address book provider responsible for the recipient.The session object then calls the appropriate address book provider's <b>OpenEntry</b> method to open the recipient and return an interface pointer to the transport provider. 
</li>
<li>
Call the recipient's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve its <a href="propb_7wmn.htm">PR_SEND_RICH_INFO</a> property. If PR_SEND_RICH_INFO is set to TRUE, the recipient can handle formatted text. </li>
</ol>
<p>
If you have opened several objects from other providers, you may need to find out if two entry identifiers refer to the same object. For example, you may have a short-term entry identifier and a long-term entry identifier and these identifiers may or may not identify the same object. To avoid redundant processing, call the <a href="inter025_34s3.htm"><b>IMAPISupport::CompareEntryIDs</b></a> method to compare these entry identifiers. You must use this method for entry identifier comparison because entry identifiers cannot be compared directly. </p>
<p>&nbsp;</p></body>
</HTML>

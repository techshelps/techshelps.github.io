<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OPTIONDATA</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_optiondata"></a>OPTIONDATA</h2>
<p>
The <b>OPTIONDATA</b> structure describes properties supported by a transport provider.</p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPISPI.H</td>
</tr>
</table><br>
<pre><code>typedef struct _OPTIONDATA 
{ 
     ULONG           ulFlags;      
     LPGUID          lpRecipGUID;      
     LPTSTR          lpszAdrType;      
     LPTSTR          lpszDLLName;      
     ULONG           ulOrdinal; 
     ULONG           cbOptionsData; 
     LPBYTE          lpbOptionsData;      
     ULONG           cOptionsProps;      
     LPSPropValue    lpOptionsProps;      
} OPTIONDATA, FAR *LPOPTIONDATA; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>ulFlags</b></dt>
<dd>
Flags used to specify the type of option properties. One of the following flags must be set:
<dl>
<dt>
MAPI_MESSAGE</dt>
<dd>
The properties are message-specific options.</dd>
<dt>
MAPI_RECIPIENT</dt>
<dd>
The properties are recipient-specific options.</dd>
</dl>
</dd>
<dt>
<b>lpRecipGUID</b></dt>
<dd>
Pointer to a <a href="structyp_4x0k.htm"><b>GUID</b></a> structure identifying the message recipient, if the <b>ulFlags</b> member is set to MAPI_RECIPIENT. When <b>lpRecipGUID</b> points to a valid <b>GUID</b> structure, recipient options are restricted to only those recipients that have in their entry identifiers the value of <b>lpRecipGUID</b>.</dd>
<dt>
<b>lpszAdrType</b></dt>
<dd>
Pointer to an e-mail address type, if the <b>ulFlags</b> member is set to MAPI_RECIPIENT. When <b>lpszAdrType</b> points to a valid address type, recipient options are restricted to only those recipients with this address type.</dd>
<dt>
<b>lpszDLLName</b></dt>
<dd>
Pointer to the name of the DLL to be loaded. This is the DLL containing the transport provider's option callback function — the function that is called to manage the option properties.</dd>
<dt>
<b>ulOrdinal</b></dt>
<dd>
Specifies which ordinal MAPI uses to find the option callback function. </dd>
<dt>
<b>cbOptionsData</b></dt>
<dd>
Count of bytes in the data pointed to by the <b>lpbOptionsData</b> member.</dd>
<dt>
<b>lpbOptionsData</b></dt>
<dd>
Pointer to transport provider option data that is specific to the recipient or message and is passed to the option callback function.</dd>
<dt>
<b>cOptionsProps</b></dt>
<dd>
Count of properties in the array pointed to by the <b>lpOptionsProps</b> member.</dd>
<dt>
<b>lpOptionsProps</b></dt>
<dd>
Pointer to an array of <a href="structyp_9sbp.htm"><b>SPropValue</b></a><b> </b>structures, each containing the default values for the recipient or message options.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Option properties can apply to a recipient or to a message. They often relate to an address type or <b>GUID</b> supported by a transport provider. Transport providers register to support option properties when MAPI calls their <a href="inter042_8gvn.htm"><b>IXPLogon::RegisterOptions</b></a> method. </p>
<p>
<b>RegisterOptions</b> writes one or two <b>OPTIONDATA </b>structures for each supported address type, depending on whether the provider registers for both recipient and message options, recipient options only, or message options only. If a provider is registered for both option types, <b>RegisterOptions</b> writes one structure containing message option properties and one structure containing recipient option properties. </p>
<p>
Clients can retrieve the current settings for these options either interactively with a property sheet or programmatically with a property value array. To display option properties to the user, clients call <a href="inter023_9ier.htm"><b>IMAPISession::MessageOptions</b></a> or <a href="inter006_49yr.htm"><b>IAddrBook::RecipOptions</b></a>. To retrieve option properties without user intervention, clients call <a href="inter023_8rck.htm"><b>IMAPISession::QueryDefaultMessageOpt</b></a> or <a href="inter006_4igk.htm"><b>IAddrBook::QueryDefaultRecipOpt</b></a>. </p>
<p>
When a client calls <b>MessageOptions</b> or <b>RecipOptions</b>, MAPI invokes a callback function created by the transport provider that conforms to the <a href="function_5s8b.htm"><b>OPTIONCALLBACK</b></a> prototype. This function typically resides in the same DLL as the transport provider and is called to retrieve an <b>IMAPIProp</b> implementation to use with a display table for showing the message and recipient options described in the <b>OPTIONDATA</b> structures.</p>
<p>
The DLL name in the <b>lpszDLLname</b><i> </i>member should not indicate the platform when included in an <b>OPTIONDATA</b> structure that is passed in the <i>lppOptions</i> parameter to <a href="inter042_8gvn.htm"><b>IXPLogon::RegisterOptions</b></a>. </p>
<p>
For more information, see <a href="xp_48ab.htm">Implementing Message and Recipient Options with Transport Providers</a> and <a href="consider_48z7.htm">Message and Recipient Options</a>.</p>
<h4>See Also</h4>
<p>
<a href="inter042_0xbn.htm"><b>IXPLogon::AddressTypes</b></a>,<b> <a href="inter042_8gvn.htm">IXPLogon::RegisterOptions</a></b>,<b> <a href="structyp_9sbp.htm">SPropValue</a></b></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Provider One-Off Table</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_implementing_a_provider_one_off_table"></a>Implementing a Provider One-Off Table</h2>
<p>
MAPI calls your provider's<b> <a href="inter004_3x0l.htm">IABLogon::GetOneOffTable</a></b> method when the user of a client application adds a recipient to an outgoing message. Typically, the types of addresses requested are unique to your messaging system. If your provider supports recipient creation, it must supply a one-off table that exposes templates for every type of supported recipient address. If your provider does not support recipient creation, return MAPI_E_NO_SUPPORT from the <b>GetOneOffTable </b>call. </p>
<p>
MAPI will typically keep your provider's one-off table open for the lifetime of the session, releasing it only when a client calls either the subsystem's or address book's <b>IMAPIStatus::ValidateState</b> method. MAPI registers for notifications on this table so that if templates are added or deleted, these changes can be reflected to the user.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement IABLogon::GetOneOffTable</h5>
<ol>
<li>
Check the value of the flags parameter, <i>ulFlags</i>. If the MAPI_UNICODE flag is set and your provider does not support Unicode, fail and return MAPI_E_BAD_CHARWIDTH. </li>
<li>
Check if your provider's one-off table has already been created. Because one-off tables are typically static, your provider never has to go through the creation process more than once. If a table already exists, return a pointer to it. </li>
<li>
If a one-off table does not yet exist, call <b>CreateTable</b> to create one. </li>
<li>
Set the following properties for the columns in your table rows:<ul>
<li>
<a href="propa_1yjp.htm">PR_DISPLAY_NAME</a> to the name of the type of recipient that the template can create. </li>
<li>
<a href="propa_8cv8.htm">PR_ENTRYID</a> to the entry identifier for the one-off template.</li>
<li>
<a href="propa_8xk8.htm">PR_DEPTH</a> to indicate the hierarchy level in the one-off table display.</li>
<li>
<a href="propb_7e1x.htm">PR_SELECTABLE</a> to TRUE to indicate if the row represents a template and FALSE otherwise.</li>
<li>
<a href="propa_4gkl.htm">PR_ADDRTYPE</a> to the type of address created by the template.</li>
<li>
<a href="propa_7s6d.htm">PR_DISPLAY_TYPE</a> to DT_MAILUSER or another value that indicates the type of display for the template.</li>
<li>
<a href="propa_65h5.htm">PR_INSTANCE_KEY</a> to a unique binary value. </li>
</ul>
</li>
<li>
Call <a href="inter040_71rr.htm"><b>ITableData::HrModifyRow</b></a> to modify the table directly.</li>
<li>
Call<b> <a href="inter040_2y0n.htm">ITableData::HrGetView</a></b> to create an <b>IMAPITable</b> interface implementation to return to the caller.</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

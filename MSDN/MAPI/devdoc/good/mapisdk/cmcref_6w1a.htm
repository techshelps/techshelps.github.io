<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMC_X_COM_configuration</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_cmc_x_com_configuration"></a>CMC_X_COM_configuration</h2>
<p>
A <b>CMC_X_COM_configuration</b> structure contains configuration data written by the <a href="cmcref_2nu6.htm"><b>cmc_query_configuration</b></a> function for the <a href="cmcref_7aox.htm">CMC_X_COM_CONFIG_DATA</a> data extension. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>XCMCEXT.H</td>
</tr>
</table><br>
<pre><code>typedef struct { 
     CMC_uint16          ver_spec; 
     CMC_uint16          ver_implem; 
     CMC_object_identifier     *character_set; 
     CMC_enum               line_term; 
     CMC_string          default_service; 
     CMC_string          default_user; 
     CMC_enum               req_password; 
     CMC_enum               req_service; 
     CMC_enum               req_user; 
     CMC_boolean          ui_avail; 
     CMC_boolean          sup_nomkmsgread; 
     CMC_boolean          sup_counted_str; 
} CMC_X_COM_configuration; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>ver_spec</b></dt>
<dd>
A CMC specification version number.</dd>
<dt>
<b>ver_implem</b></dt>
<dd>
A CMC version number multiplied by 100. For example, version 1.00 is represented as 100.</dd>
<dt>
<b>character_set</b></dt>
<dd>
Pointer to a <a href="cmcref_8iwi.htm"><b>CMC_object_identifier</b></a> structure.</dd>
<dt>
<b>line_term</b></dt>
<dd>
Enumeration that indicates the type of line delimiter for the message text in a CMC_message. Possible values are:
<dl>
<dt>
CMC_LINE_TERM_CRLF</dt>
<dd>
The line delimiter is a carriage return followed by a line feed.</dd>
<dt>
CMC_LINE_TERM_LF</dt>
<dd>
The line delimiter is a line feed.</dd>
<dt>
CMC_LINE_TERM_CR</dt>
<dd>
The line delimiter is a carriage return.</dd>
</dl>
</dd>
<dt>
<b>default_service</b></dt>
<dd>
Pointer to a string identifying the default message service.</dd>
<dt>
<b>default_user</b></dt>
<dd>
Pointer to a string identifying the default user name of the user accessing the CMC implementation. This default can be used when prompting the user for a user name.</dd>
<dt>
<b>req_password</b></dt>
<dd>
Enumeration that indicates if a password is required to access the service. Possible values are:
<dl>
<dt>
CMC_REQUIRED_NO</dt>
<dd>
No password is required.</dd>
<dt>
CMC_REQUIRED_YES</dt>
<dd>
A password is required.</dd>
<dt>
CMC_REQUIRED_OPT</dt>
<dd>
A password is optional.</dd>
</dl>
</dd>
<dt>
<b>req_service</b></dt>
<dd>
Enumeration that indicates if the message service name is required for logon. Possible values are:
<dl>
<dt>
CMC_REQUIRED_NO</dt>
<dd>
No service name is required.</dd>
<dt>
CMC_REQUIRED_YES</dt>
<dd>
A service name is required.</dd>
<dt>
CMC_REQUIRED_OPT</dt>
<dd>
A service name is optional.</dd>
</dl>
</dd>
<dt>
<b>req_user</b></dt>
<dd>
Enumeration that indicates if the messaging user name is required for logon. Possible values are:
<dl>
<dt>
CMC_REQUIRED_NO</dt>
<dd>
No user name is required.</dd>
<dt>
CMC_REQUIRED_YES</dt>
<dd>
A user name is required.</dd>
<dt>
CMC_REQUIRED_OPT</dt>
<dd>
A user name is optional.</dd>
</dl>
</dd>
<dt>
<b>ui_avail</b></dt>
<dd>
Boolean value that is TRUE if the CMC implementation in use provides a user interface and FALSE otherwise.</dd>
<dt>
<b>sup_nomkmsgread</b></dt>
<dd>
Boolean value that indicates whether the <a href="cmcref_2944.htm"><b>cmc_read</b></a> function supports not marking messages as read. The value is TRUE if the <b>cmc_read</b> function supports the CMC_DO_NOT_MARK_AS_READ flag and FALSE otherwise.</dd>
<dt>
<b>sup_counted_str</b></dt>
<dd>
Boolean value that indicates whether the <a href="cmcref_3dbi.htm"><b>cmc_logon</b></a> function supports the use of the CMC_counted_string type. The value is TRUE if the <b>cmc_logon</b> function supports the CMC_COUNTED_STRING_TYPE flag and FALSE otherwise.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <a href="cmcref_2nu6.htm"><b>cmc_query_configuration</b></a> function writes a value into the buffer pointed to by its <i>reference</i> parameter. That value is a copy of a particular member of the CMC implementation's <b>CMC_X_COM_configuration</b> structure, depending on the value the client application passes for the <i>item</i> parameter. For example, to see whether the CMC implementation defines its own user interface for logon and error resolution, the client application should use CMC_CONFIG_UI_AVAIL as the value of <i>item</i>. When <b>cmc_query_configuration</b> returns, the CMC_buffer pointed to by <i>reference</i> will contain TRUE or FALSE to indicate whether an interface is available. The client application must ensure that the <i>reference</i> parameter points to a buffer of sufficient size to hold the type of data that the <i>item</i> parameter specifies.</p>
<h4>See Also</h4>
<p>
<a href="cmcref_5z51.htm"><b>cmc_free</b></a>, <a href="cmcref_3dbi.htm"><b>cmc_logon</b></a>, <a href="cmcref_8iwi.htm"><b>CMC_object_identifier</b></a>, <a href="cmcref_2nu6.htm"><b>cmc_query_configuration</b></a>, <a href="cmcref_2944.htm"><b>cmc_read</b></a>, <a href="cmcref_7aox.htm">CMC_X_COM_CONFIG_DATA</a></p>
<p>&nbsp;</p></body>
</HTML>

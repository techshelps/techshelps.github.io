<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying Recipient Information</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_displaying_recipient_information"></a>Displaying Recipient Information</h2>
<p>
MAPI provides a common dialog box for showing recipient details. This dialog box is modal; a modeless version is provided for in the interface but is unsupported. The details dialog box is created from a display table and an <b>IMAPIProp</b> implementation. The display table describes the appearance of the details display and the <b>IMAPIProp</b> implementation controls the data for the recipient. Your provider is responsible for supplying the display table and the <b>IMAPIProp</b> implementation for each recipient. </p>
<p>
The easiest way to create the display table is to define a <a href="structyp_7zxh.htm"><b>DTPAGE</b></a> structure and call <a href="function_5wpx.htm"><b>BuildDisplayTable</b></a>. However, some providers, specifically read-only providers that allow the creation of one-off recipients, use <b>IPropData</b>. The <b>IMAPIProp</b> implementation can be any type of property object. </p>
<p>
There are two methods for invoking this dialog box: <a href="inter006_5er7.htm"><b>IAddrBook::Details</b></a><b> </b>and <a href="inter025_5l6b.htm"><b>IMAPISupport::Details</b></a>. When your provider calls one of these methods to request details for a recipient, MAPI first opens the recipient by calling its container's <a href="inter011_02yh.htm"><b>IMAPIContainer::OpenEntry</b></a> method. Next it calls the recipient's <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a><b> </b>method to request the <a href="propa_692d.htm">PR_DETAILS_TABLE</a> property. PR_DETAILS_TABLE is the property that represents a recipient's details display table.</p>
<p>
The <a href="inter037_5prk.htm"><b>IPropData</b></a> interface can be used to monitor changes on display table controls as described in the following procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To monitor changes to a control</h5>
<ol>
<li>
Before the user gains access to the control, call <a href="inter037_1qk3.htm"><b>IPropData::HrSetObjAccess</b></a> to set the control's access to IPROP_CLEAN.</li>
<li>
Allow the user to work with the dialog box. </li>
<li>
When the user has finished, call <a href="inter037_58kz.htm"><b>IPropData::HrGetPropAccess</b></a> to retrieve the current access level of the control. </li>
<li>
If the access level is IPROP_DIRTY, the user has modified the control. Your provider should:<ul>
<li>
Call <a href="inter037_9zub.htm"><b>IPropData::HrSetPropAccess</b></a> to set the access level back to IPROP_CLEAN. </li>
<li>
Call the property data object's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve the changed property and update it by calling <a href="inter022_6cxf.htm"><b>IMAPIProp::SetProps</b></a>.</li>
</ul>
</li>
<li>
If the access level is still IPROP_CLEAN, the control has not been modified. </li>
</ol>
<p>
</p>
<p>
For more information about creating display tables, see <a href="tables_6rw3.htm">Display Tables</a>.</p>
<p>&nbsp;</p></body>
</HTML>

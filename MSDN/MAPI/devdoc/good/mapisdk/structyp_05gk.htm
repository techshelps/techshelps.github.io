<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ENTRYID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_entryid"></a>ENTRYID</h2>
<p>
The <b>ENTRYID</b> structure contains an entry identifier for a MAPI object. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPIDEFS.H</td>
</tr>
<tr valign=top>
<td width=48%>Related macros:</td>
<td width=52%><a href="structyp_8e5g.htm"><b>CbNewENTRYID</b></a><br>
<a href="structyp_1spw.htm"><b>SizedENTRYID</b></a><b> </b></td>
</tr>
</table><br>
<pre><code>typedef struct 
{ 
     BYTE        abFlags[4]; 
     BYTE        ab[MAPI_DIM]; 
} ENTRYID, FAR *LPENTRYID; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>abFlags</b></dt>
<dd>
Bitmask of flags that provide information describing the object. Only the first byte of the flags, <b>abFlags[0]</b>, may be set by the provider; the other three are reserved. These flags must not be set for permanent entry identifiers; they are only set for short-term entry identifiers. To clients, this structure is read-only. 
<p>
The following flags can be set in <b>abFlags[0]</b>: 

<dl>
<dt>
MAPI_NOTRECIP</dt>
<dd>
The entry identifier cannot be used as a recipient on a message.</dd>
<dt>
MAPI_NOTRESERVED</dt>
<dd>
Other users cannot access the entry identifier.</dd>
<dt>
MAPI_NOW</dt>
<dd>
The entry identifier cannot be used at other times.</dd>
<dt>
MAPI_SHORTTERM</dt>
<dd>
The entry identifier is short-term. All other values in this byte must be set unless other uses of the entry identifier are allowed.</dd>
<dt>
MAPI_THISSESSION</dt>
<dd>
The entry identifier cannot be used on other sessions. 
</dd>
</dl>
</dd>
<dt>
<b>ab</b></dt>
<dd>
Indicates an array of binary data used by service providers. The client application cannot use this array.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>ENTRYID</b> structure is used by message store and address book providers to construct unique identifiers for their objects. Entry identifiers are used to identify the following types of objects:</p>
<p class=indent1>
Message stores</p>
<p class=indent1>
Folders</p>
<p class=indent1>
Messages</p>
<p class=indent1>
Address book containers</p>
<p class=indent1>
Distribution lists</p>
<p class=indent1>
Messaging users</p>
<p class=indent1>
Status objects</p>
<p class=indent1>
Profile sections</p>
<p>
Each provider uses a format for the <b>ENTRYID</b> structure that makes sense for that provider.</p>
<p>
Entry identifiers cannot be compared directly because one object can be represented by two different binary values. To determine if two entry identifiers represent the same object, call the <a href="inter023_6inn.htm"><b>IMAPISession::CompareEntryIDs</b></a> method.</p>
<p>
When a client calls an object's <b>IMAPIProp::GetProps</b> method to retrieve its entry identifier, the object returns the most permanent form of the entry identifier. A client can verify that an entry identifier is long-term by checking that none of the flags are set in the first byte of the <b>abFlags</b> member.</p>
<p>
When a client accesses an entry identifier through a column in a table, most likely this entry identifier is short-term rather than long-term. Short-term entry identifiers can be used to open their corresponding objects only in the current MAPI session. A client can verify that an entry identifier is short-term by checking that all of the flags are set in the first byte of the <b>abFlags</b> member.</p>
<p>
Some entry identifiers are short-term, but have long-term use. Such an entry identifier will have one or more of the appropriate flags set in the first byte of its <b>abFlags</b> member. </p>
<p>
An <b>ENTRYID</b> structure is similar to a <a href="structyp_7wjd.htm"><b>FLATENTRY</b></a> structure. However, there are some differences:
<ul>
<li>
An <b>ENTRYID</b> structure does not store the size of the entry identifier; a <b>FLATENTRY</b> structure does.</li>
<li>
An <b>ENTRYID</b> structure stores the flag data and the rest of the entry identifier separately; a <b>FLATENTRY</b> structure stores the flag data with the rest of the entry identifier. </li>
<li>
An <b>ENTRYID</b> structure is passed as a parameter to the methods of the <a href="inter022_00tq.htm"><b>IMAPIProp</b></a> interface and to the following <b>OpenEntry</b> methods:<p>
<a href="inter004_422h.htm"><b>IABLogon::OpenEntry</b></a>
<p>
<a href="inter006_4cc9.htm"><b>IAddrBook::OpenEntry</b></a>
<p>
<a href="inter011_02yh.htm"><b>IMAPIContainer::OpenEntry</b></a>
<p>
<a href="inter023_146x.htm"><b>IMAPISession::OpenEntry</b></a>
<p>
<a href="inter025_4rnd.htm"><b>IMAPISupport::OpenEntry</b></a>
<p>
<a href="inter031_3se1.htm"><b>IMsgStore::OpenEntry</b></a>
<p>
<a href="inter032_8ry1.htm"><b>IMSLogon::OpenEntry</b></a>
</li>
<li>
An <b>ENTRYID</b> structure is used to store an entry identifier on disk. A <b>FLATENTRY</b> structure is used to store an entry identifier in a file or pass it in a stream of bytes.</li>
</ul>
<p>
Clients should always pass in naturally aligned entry identifiers. Although providers should handle arbitrarily aligned entry identifiers, clients should not expect this behavior. Failure to pass a suitable aligned entry identifier to a method can result in an alignment fault on RISC processors. </p>
<p>
The natural alignment factor, typically 8 bytes, is the largest data type supported by the CPU, and usually the same alignment factor used by the system memory allocator. A naturally aligned memory address allows the CPU to access any data type it supports at that address without generating an alignment fault. For RISC CPUs, a data type of size N bytes must usually be aligned on an even multiple of N bytes, with the address being an even multiple of N.</p>
<p>
For more information, see <a href="extend_9hpv.htm">Entry Identifiers</a>.</p>
<h4>See Also</h4>
<p>
<a href="groups_1iyb.htm">ID Structures</a>, <a href="inter025_34s3.htm"><b>IMAPISupport::CompareEntryIDs</b></a>,<b> </b><a href="propb_6lkp.htm">PR_RECORD_KEY</a></p>
<p>&nbsp;</p></body>
</HTML>

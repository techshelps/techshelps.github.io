<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IXPLogon::StartMessage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_ixplogon_startmessage"></a>IXPLogon::StartMessage</h2>
<p>
The <b>IXPLogon::StartMessage</b> method initiates the transfer of an inbound message from the transport provider to the MAPI spooler.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter042_2u9a.htm"><b>IXPLogon : IUnknown</b></a>.</p>
<pre><code><b>HRESULT StartMessage(
  ULONG</b><i> ulFlags</i><b>,</b>         
<b>  LPMESSAGE</b><i> lpMessage</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpulMsgRef </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ulFlags</i></dt>
<dd>
Reserved; must be zero.</dd>
<dt>
<i>lpMessage</i></dt>
<dd>
[in] Pointer to a message object with read/write access, representing the inbound message, which is used by the transport provider to access and manipulate that message. This object remains valid until after the transport provider returns from the call to <b>IXPLogon::StartMessage</b>.</dd>
<dt>
<i>lpulMsgRef</i></dt>
<dd>
[out] Pointer to a 32-bit reference value assigned to the message. This value is initialized to 1 by the MAPI spooler before returning it to the transport provider.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The call succeeded and has returned the expected value or values.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The MAPI spooler calls the <b>IXPLogon::StartMessage</b> method to initiate the transfer of an inbound message from the transport provider to the MAPI spooler. Before the transport provider starts to use the message pointed to by <i>lpMessage</i>, it should store a message reference in the <i>lpulMsgRef</i> parameter for potential use by a call to the<b> <a href="inter042_5cah.htm">IXPLogon::TransportNotify</a></b> method.</p>
<p>
During a <b>StartMessage</b> call, the MAPI spooler processes methods for objects opened during the transfer of the message and also processes any attachments. This processing can take a long time. Transport providers on 16-bit Windows platforms should call the <a href="inter025_3pt0.htm"><b>IMAPISupport::SpoolerYield</b></a> callback function for the MAPI spooler frequently during this processing to release CPU time for other system tasks. </p>
<p>
All recipients in the recipient table created by the transport provider for the message must contain all required addressing properties. If necessary, the provider can construct a custom recipient to represent a particular recipient. However, if the provider can produce a recipient entry that includes more information, it should do so. For example, in the case where a transport provider has enough information about an address book provider's recipient format that it can build a valid entry identifier for a recipient for that format, it should build the entry identifier.</p>
<p>
If any nontransmittable properties are received, the transport provider should not store them in the new message. However, the transport provider should store all transmittable properties it receives in the new message.</p>
<p>
If the incoming message is a delivery report or a nondelivery report and the transport provider is unable to use the <a href="inter025_7chf.htm"><b>IMAPISupport::StatusRecips</b></a> method to generate the report from the original message, the provider should itself populate the message with the appropriate properties. However, the transport provider cannot set the message's <a href="propa_8cv8.htm">PR_ENTRYID</a> property.</p>
<p>
To save the incoming message in the appropriate MAPI message store after processing, the transport provider calls the <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> method. If the transport provider doesn't have any messages to pass to the MAPI spooler, it can stop the incoming message by returning from the <b>StartMessage</b> call without calling <b>SaveChanges</b>.</p>
<p>
All objects opened by the transport provider during a <b>StartMessage</b> call should be released before returning. However, the provider should not release the message object originally passed by the MAPI spooler in the <i>lpMessage</i> parameter.</p>
<p>
If an error is returned from <b>StartMessage</b>, the message in process is released without having changes saved and is lost. The transport provider in such a case should pass the NOTIFY_CRITICAL_ERROR flag with a call to the <a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a> method and call the <a href="inter042_2fos.htm"><b>IXPLogon::Poll</b></a> method to notify the MAPI spooler that it is in a severe error condition.</p>
<p>
For more information, see <a href="xp_13n6.htm">Interacting with the MAPI Spooler</a>. </p>
<h4>See Also</h4>
<p>
<a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a>,<b> <a href="inter025_5b7d.htm">IMAPISupport::SpoolerNotify</a></b>,<b> <a href="inter025_3pt0.htm">IMAPISupport::SpoolerYield</a></b>, <a href="inter025_7chf.htm"><b>IMAPISupport::StatusRecips</b></a>,<b> <a href="inter029_9zhh.htm">IMessage::GetRecipientTable</a></b>, <a href="inter042_2fos.htm"><b>IXPLogon::Poll</b></a>, <a href="inter042_5cah.htm"><b>IXPLogon::TransportNotify</b></a></p>
<p>&nbsp;</p></body>
</HTML>

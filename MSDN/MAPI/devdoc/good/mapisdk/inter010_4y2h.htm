<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIAdviseSink::OnNotify</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapiadvisesink_onnotify"></a>IMAPIAdviseSink::OnNotify</h2>
<p>
The <b>IMAPIAdviseSink::OnNotify</b> method responds to a notification by performing one or more tasks. The tasks performed depend on the object generating the notification and type of event. </p>
<h4>Quick Info</h4>
<p>
See <a href="inter010_0fn2.htm"><b>IMAPIAdviseSink : IUnknown</b></a>.</p>
<pre><code><b>ULONG OnNotify(
  ULONG</b><i> cNotif</i><b>,</b>                   
<b>  LPNOTIFICATION</b><i> lpNotifications  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cNotif</i></dt>
<dd>
[in] Count of <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a> structures pointed to by the <i>lpNotifications </i>parameter<i>.</i></dd>
<dt>
<i>lpNotifications</i></dt>
<dd>
[in] Pointer to one or more <b>NOTIFICATION</b> structures that provide information about the events that have occurred.
</dd>
</dl>
<h4>Return Value</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The notification was processed successfully.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The notification process begins when a client or MAPI makes a call to a service provider's <b>Advise</b> method to register to receive a notification of a particular type for a particular object. One of the parameters to the <b>Advise</b> method is a pointer to an advise sink object — an object that implements <b>IMAPIAdviseSink</b>. When an event occurs to the target object that corresponds to the registered notification, the service provider, either directly or indirectly through MAPI, calls the advise sink's <b>OnNotify</b> method. </p>
<p>
The call to <b>OnNotify</b> can occur either during the MAPI call that is causing the event or at some later time. On systems that support multiple threads of execution, <b>OnNotify</b> can be called either on the same thread that was used for registration or on a different thread. Clients can insure that the <b>OnNotify</b> call is made on the same thread used to call <b>Advise</b> by creating the advise sink that they pass to <b>Advise</b> with the <a href="function_1fxn.htm"><b>HrThisThreadAdviseSink</b></a> function. </p>
<p>
The <i>lpNotifications</i> parameter points to one or more <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a><b> </b>structures — structures that describe what has changed during the event. There is a different type of <b>NOTIFICATION</b> structure for each type of event. </p>
<p>
The following table lists the values that are used to represent the possible types of events and the structures associated with each value:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Notification event type</th>
<th align=left width=53%>Corresponding structure</th>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevCriticalError</code></pre>
</td>
<td width=53%><a href="structyp_9epa.htm"><b>ERROR_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevNewMail</code></pre>
</td>
<td width=53%><a href="structyp_51ny.htm"><b>NEWMAIL_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevObjectCreated</code></pre>
</td>
<td width=53%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevObjectDeleted</code></pre>
</td>
<td width=53%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevObjectModified</code></pre>
</td>
<td width=53%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevObjectCopied</code></pre>
</td>
<td width=53%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevSearchComplete</code></pre>
</td>
<td width=53%><a href="structyp_5tm6.htm"><b>OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevTableModified</code></pre>
</td>
<td width=53%><a href="structyp_65o0.htm"><b>TABLE_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevStatusObjectModified</code></pre>
</td>
<td width=53%><a href="structyp_9acu.htm"><b>STATUS_OBJECT_NOTIFICATION</b></a></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>fnevExtended</code></pre>
</td>
<td width=53%><a href="structyp_471q.htm"><b>EXTENDED_NOTIFICATION</b></a></td>
</tr>
</table><br>
<p>
For more information about setting up and stopping notifications, see the reference entries for the <b>Advise</b> and <b>Unadvise</b> methods for any of the following interfaces: <b>IABLogon</b>, <b>IAddrBook</b>, <b>IMAPIForm</b>, <b>IMAPISession</b>, <b>IMAPITable</b>, <b>IMsgStore</b>, and <b>IMSLogon</b>. </p>
<p>
For general information about the notification process, see <a href="extend_8fvt.htm">Event Notification in MAPI</a>. </p>
<h4>Notes to Implementers</h4>
<p>
Your <b>OnNotify</b> implementation will typically consist of one or more blocks of code for each type of notification you expect to receive. Within these blocks of code, perform any tasks that you deem necessary as a response to the notification. For example, suppose you register to receive <i>fnevObjectModified</i> notifications on a folder that is included in a dialog box display. In the block of code that you include in your <b>OnNotify</b> method to handle <i>fnevObjectModified</i> notifications, you might send a Windows message to the dialog box to request an updated display.</p>
<p>
Do not modify or free the <b>NOTIFICATION</b> structure passed to <b>OnNotify</b>. The data in the structure is valid only until <b>OnNotify</b> returns.</p>
<h4>Notes to Callers</h4>
<p>
When changes occur to multiple objects, you can notify a registered advise sink in a single call to <b>OnNotify</b> or in multiple calls depending on memory constraints. This is true regardless of whether the changes are the result of one method call or several. For example, a call to <b>IMAPIFolder::CopyMessages</b> can affect multiple messages and folders. As a message store provider, you can make one call to <b>OnNotify</b> with an <i>fnevObjectModified</i> event type for the target folder or many calls, one for each of the affected messages. Similarly, if a client makes repeated calls to <b>IMAPIFolder::CreateMessage</b>, these calls can be combined into one <i>fnevObjectModified</i> event for the folder or separated into individual <i>fnevObjectCreated</i> events for each of the new messages. </p>
<p>
For more information about how and when to generate notifications, see the topics:</p>
<p>
<a href="extend_8fvt.htm">Event Notification in MAPI</a></p>
<p>
<a href="provider_2ii6.htm">Supporting Event Notification</a></p>
<h4>See Also</h4>
<p>
<a href="function_9bhn.htm"><b>HrAllocAdviseSink</b></a>, <a href="function_1fxn.htm"><b>HrThisThreadAdviseSink</b></a>, <a href="inter025_8fax.htm"><b>IMAPISupport::Notify</b></a>, <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

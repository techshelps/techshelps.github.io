<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPISupport::OpenTemplateID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapisupport_opentemplateid"></a>IMAPISupport::OpenTemplateID</h2>
<p>
The <b>IMAPISupport::OpenTemplateID</b> method opens a recipient entry in a foreign address book provider.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter025_8uge.htm"><b>IMAPISupport : IUnknown</b></a>.</p>
<pre><code><b>HRESULT OpenTemplateID(
  ULONG</b><i> cbTemplateID</i><b>,</b>                
<b>  LPENTRYID</b><i> lpTemplateID</i><b>,</b>            
<b>  ULONG</b><i> ulTemplateFlags</i><b>,</b>             
<b>  LPMAPIPROP</b><i> lpMAPIPropData</i><b>,</b>         
<b>  LPCIID</b><i> lpInterface</i><b>,</b>                
<b>  LPMAPIPROP FAR *</b><i> lppMAPIPropNew</i><b>,</b>   
<b>  LPMAPIPROP</b><i> lpMAPIPropSibling       </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cbTemplateID</i></dt>
<dd>
[in] Count of bytes in the template identifier pointed to by <i>lpTemplateID</i>. </dd>
<dt>
<i>lpTemplateID</i></dt>
<dd>
[in] Pointer to the template identifier — <a href="propb_8810.htm">PR_TEMPLATEID</a> property — of the recipient entry to be opened.</dd>
<dt>
<i>ulTemplateFlags</i></dt>
<dd>
[in] Bitmask of flags used to describe how to open the entry. The following flag can be set:
<dl>
<dt>
FILL_ENTRY</dt>
<dd>
A new entry is being created. When the foreign provider receives the subsequent <a href="inter004_5j1g.htm"><b>IABLogon::OpenTemplateID</b></a><b> </b>call from MAPI, it can control how the entry is created by modifying properties pointed to by the <i>lpMAPIPropData</i> parameter or by returning a specific interface implementation in <i>lppMAPIPropNew</i> to control how properties for the new entry are set.</dd>
</dl>
</dd>
<dt>
<i>lpMAPIPropData</i></dt>
<dd>
[in] Pointer to the interface implementation that the caller uses to access the entry. This is the implementation that the foreign provider can wrap with its own implementation and return in the <i>lppMAPIPropNew</i> parameter. The <i>lpMAPIPropData</i> parameter must point to a read/write interface implementation that derives from <a href="inter022_00tq.htm"><b>IMAPIProp</b></a> and supports the interface being requested in the <i>lpInterface</i> parameter.</dd>
<dt>
<i>lpInterface</i></dt>
<dd>
[in] Pointer to the interface identifier (IID) representing the interface to be used to access the entry. The <i>lppMAPIPropNew</i> parameter points to an interface of the type specified by <i>lpInterface</i>. Passing NULL results in the return of the standard interface for a messaging user, IID_IMailUser. </dd>
<dt>
<i>lppMAPIPropNew</i></dt>
<dd>
[out] Pointer to the interface implementation supplied by the foreign provider for accessing the entry.</dd>
<dt>
<i>lpMAPIPropSibling</i></dt>
<dd>
Reserved; must be NULL.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The binding process was successful.</dd>
<dt>
MAPI_E_UNKNOWN_ENTRYID</dt>
<dd>
The foreign address book provider doesn't exist.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPISupport::OpenTemplateID </b>method is implemented only for address book provider support objects. <b>OpenTemplateID </b>is called only by address book providers that can act as hosts for entries belonging to other address book providers, also known as foreign providers. Host providers call <b>OpenTemplateID</b> to open a foreign entry, which occurs when data in the host provider is bound to code in the foreign provider.</p>
<h4>Notes to Callers</h4>
<p>
Call <b>OpenTemplateID</b> only if you support the storage of entries with template identifiers from foreign address book providers. Such support places additional requirements on your <a href="inter003_8b21.htm"><b>IABContainer::CreateEntry</b></a> and <a href="inter004_422h.htm"><b>IABLogon::OpenEntry</b></a> implementations. See the descriptions of these methods and <a href="ab_7elu.htm">Acting as a Host Address Book Provider</a> for more information.</p>
<p>
If the <b>OpenTemplateID</b> call returns as the bound interface the same property object implementation as you passed in, you can release your reference to your property object. This is because the foreign provider has called the object's <b>AddRef</b> method to keep its own reference. If the foreign provider does not need to keep a reference to the property object, then <b>OpenTemplateID</b> will return the unbound property object. </p>
<p>
If <b>OpenTemplateID</b> fails with MAPI_E_UNKNOWN_ENTRYID, try to continue by treating the entry as read-only.</p>
<h4>See Also</h4>
<p>
<a href="inter004_5j1g.htm"><b>IABLogon::OpenTemplateID</b></a>, <a href="inter037_5prk.htm"><b>IPropData : IMAPIProp</b></a>, <a href="propb_8810.htm">PR_TEMPLATEID</a></p>
<p>&nbsp;</p></body>
</HTML>

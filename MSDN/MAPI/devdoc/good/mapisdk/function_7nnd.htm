<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSGSERVICEENTRY</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_msgserviceentry"></a>MSGSERVICEENTRY</h2>
<p>
The <b>MSGSERVICEENTRY</b> function prototype defines a message service entry point function to support message service configuration. </p>
<h4>Quick Info </h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file: </td>
<td width=52%>MAPISPI.H </td>
</tr>
<tr valign=top>
<td width=48%>Defined function implemented by: </td>
<td width=52%>Message services </td>
</tr>
<tr valign=top>
<td width=48%>Defined function called by: </td>
<td width=52%>MAPI </td>
</tr>
</table><br>
<pre><code><b>HRESULT MSGSERVICEENTRY(
  HINSTANCE</b><i> hInstance</i><b>,</b>            
<b>  LPMALLOC</b><i> lpMalloc</i><b>,</b>              
<b>  LPMAPISUP</b><i> lpMAPISup</i><b>,</b>            
<b>  ULONG</b><i> ulUIParam</i><b>,</b>                
<b>  ULONG</b><i> ulFlags</i><b>,</b>                  
<b>  ULONG</b><i> ulContext</i><b>,</b>                
<b>  ULONG</b><i> cValues</i><b>,</b>                  
<b>  LPSPropValue</b><i> lpProps</i><b>,</b>           
<b>  LPPROVIDERADMIN</b><i> lpProviderAdmin</i><b>,</b>   
<b>  LPMAPIERROR FAR *</b><i> lppMapiError  </i>
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>hInstance </i></dt>
<dd>
[in] Handle of the instance of the service provider<b> </b>DLL. The handle is typically used to retrieve resources. </dd>
<dt>
<i>lpMalloc </i></dt>
<dd>
[in] Pointer to a memory allocator object exposing the OLE <b>IMalloc</b> interface. The message service may need to use this allocation method when working with certain interfaces such as <b>IStream</b>. </dd>
<dt>
<i>lpMAPISup </i></dt>
<dd>
[in] Pointer to an <a href="inter025_8uge.htm"><b>IMAPISupport : IUnknown</b></a> interface implementation. </dd>
<dt>
<i>ulUIParam </i></dt>
<dd>
[in] An implementation-specific 32-bit value used for passing user interface information to a function or zero. In applications that run on Microsoft Windows, the <i>ulUIParam</i> parameter is the parent window handle for the configuration dialog box and is of type HWND (cast to a ULONG). A value of zero indicates that there is no parent window. </dd>
<dt>
<i>ulFlags </i></dt>
<dd>
[in] Bitmask of flags indicating options for the service entry function. The following flags can be set: 
<dl>
<dt>
MAPI_UNICODE </dt>
<dd>
The passed-in strings are in Unicode format. If the MAPI_UNICODE flag is not set, the strings are in ANSI format. </dd>
<dt>
MSG_SERVICE_UI_READ_ONLY </dt>
<dd>
The service's configuration user interface should display the current configuration but not allow the user to change it. </dd>
<dt>
SERVICE_UI_ALLOWED </dt>
<dd>
Permits a configuration dialog box to be displayed if necessary. When the SERVICE_UI_ALLOWED flag is set, the dialog box should be displayed only if the <i>lpProps</i> property value array is empty or does not contain a valid configuration. If SERVICE_UI_ALLOWED is not set, a dialog box might still be displayed if the UI_SERVICE_ALWAYS flag is set. </dd>
<dt>
UI_CURRENT_PROVIDER_FIRST </dt>
<dd>
Requests that the configuration dialog box for the active provider be displayed on top of other dialog boxes. </dd>
<dt>
UI_SERVICE_ALWAYS </dt>
<dd>
Requires the message service to display a configuration dialog box. If the UI_SERVICE_ALWAYS flag is not set, a configuration dialog box might still be displayed if the SERVICE_UI_ALLOWED flag is set and valid configuration information is not available from the <i>lpProps</i> property value array. Either SERVICE_UI_ALLOWED or UI_SERVICE_ALWAYS must be set to allow a user interface to be displayed. </dd>
</dl>
</dd>
<dt>
<i>ulContext </i></dt>
<dd>
[in] The configuration operation that MAPI is currently performing. The <i>ulContext</i> parameter will contain one of the following values: 
<dl>
<dt>
MSG_SERVICE_CONFIGURE </dt>
<dd>
Changes to the service's configuration should be made in the profile. If the UI_SERVICE_ALWAYS flag is set, the service should display its configuration dialog box. The dialog box should also be displayed if the SERVICE_UI_ALLOWED flag is set and the <i>lpProps</i> parameter is empty or does not contain valid configuration data. If <i>lpProps</i> contains valid data, no dialog box should be displayed and the service should use this data for making the configuration change. </dd>
<dt>
MSG_SERVICE_CREATE </dt>
<dd>
The service is being added to a profile. If either the UI_SERVICE_ALWAYS or SERVICE_UI_ALLOWED flag is set, the service should display its configuration dialog box. If neither flag is set, the service should fail. </dd>
<dt>
MSG_SERVICE_DELETE </dt>
<dd>
The service is being removed from a profile. After receiving this event, the service should return S_OK.<b> </b> </dd>
<dt>
MSG_SERVICE_INSTALL </dt>
<dd>
The service has been installed to the user's workstation from a network, floppy disk, or other external medium. After receiving this event, the service usually returns S_OK. </dd>
<dt>
MSG_SERVICE_PROVIDER_CREATE </dt>
<dd>
Requests that the service create an additional instance of a provider. If the service supports this operation, it should call <a href="inter038_6ppu.htm"><b>IProviderAdmin::CreateProvider</b></a>. If the service does not support this operation, it can return MAPI_E_NO_SUPPORT. </dd>
<dt>
MSG_SERVICE_PROVIDER_DELETE </dt>
<dd>
Requests that the service delete a provider instance. If the service supports this operation, it should call <a href="inter038_23w2.htm"><b>IProviderAdmin::DeleteProvider</b></a>. If the service does not support this operation, it can return MAPI_E_NO_SUPPORT. </dd>
<dt>
MSG_SERVICE_UNINSTALL </dt>
<dd>
The service is being removed. After receiving this event, the service can perform any cleanup tasks that should be done before the service ends and then return with a success value. If the user cancels the removal, the service should return MAPI_E_USER_CANCEL. </dd>
</dl>
</dd>
<dt>
<i>cValues </i></dt>
<dd>
[in] Count of property values in the array pointed to by the <i>lpProps</i> parameter. The value of the <i>cValues</i> parameter is zero if MAPI is passing no property values. </dd>
<dt>
<i>lpProps </i></dt>
<dd>
[in] Pointer to an optional array of <a href="structyp_9sbp.htm"><b>SPropValue</b></a> structures indicating values for provider-supported properties that the function will use in configuring the message service. The function only uses this parameter if the <i>ulContext</i> parameter is set to MSG_SERVICE_CONFIGURE. This parameter is commonly used to pass the path to a file for a file-based service, such as a personal address book service. If the MSG_SERVICE_CONFIGURE flag is not passed in the <i>ulFlags</i> parameter, the <i>lpProps</i> parameter must be zero. </dd>
<dt>
<i>lpProviderAdmin </i></dt>
<dd>
[in] Pointer to an <a href="inter038_7vla.htm"><b>IProviderAdmin:IUnknown</b></a> interface that the function can use to locate profile sections for a specific provider in the current message service. </dd>
<dt>
<i>lppMapiError </i></dt>
<dd>
[out] Pointer to a <a href="structyp_0qpe.htm"><b>MAPIERROR</b></a> structure. The structure is allocated with the <a href="function_8z3m.htm"><b>MAPIAllocateBuffer</b></a> function. All members are optional, although most structures will contain a valid error message string in the <i>lpszError</i> member. If the <i>lpszComponent</i> or <i>lpszError</i> members of the structure are present, their memory must eventually be freed by a single call to <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> on the base structure. 
</dd>
</dl>
<h4>Return Values </h4>
<dl>
<dt>
S_OK </dt>
<dd>
The call succeeded and has returned the expected value or values. </dd>
<dt>
MAPI_E_UNCONFIGURED </dt>
<dd>
The service provider has not been configured. </dd>
<dt>
MAPI_E_USER_CANCEL </dt>
<dd>
The user canceled the operation, typically by clicking the <b>Cancel</b> button in a dialog box. </dd>
<dt>
MAPI_E_NO_SUPPORT </dt>
<dd>
The provider either does not support changes to its objects or does not support notification of changes. </dd>
<dt>
MAPI_E_BAD_CHARWIDTH </dt>
<dd>
Either the MAPI_UNICODE flag was set and the implementation does not support Unicode, or MAPI_UNICODE was not set and the implementation only supports Unicode. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
A function defined using the <b>MSGSERVICEENTRY</b> function prototype enables message services to configure themselves or to perform other service-specific actions. The function primarily furnishes a dialog box in which the user can change settings specific to the message service. It can also support programmatic configuration by using the property value array passed in the <i>lpProps</i> parameter. Programmatic configuration is optional unless the service supports the Profile Wizard, for which it is required. </p>
<p>
MAPI calls this entry point from the Control Panel application or in response to a client application calling <a href="inter030_60th.htm"><b>IMsgServiceAdmin::CreateMsgService</b></a> or <a href="inter030_4cv9.htm"><b>IMsgServiceAdmin::ConfigureMsgService</b></a>. </p>
<p>
MAPI places no restriction on the function name that a message service uses for the <b>MSGSERVICEENTRY</b> prototype but prefers the name <b>ServiceEntry</b>. There is no restriction on the ordinal for the function, and a single provider DLL can contain more than one function. However, only one of the functions can be named <b>ServiceEntry</b>. </p>
<p>
MAPI enables a message service to use Windows 95-style property sheets for its configuration dialog boxes. The message service can use the <a href="function_5wpx.htm"><b>BuildDisplayTable</b></a> function and the <a href="inter025_9s1g.htm"><b>IMAPISupport::DoConfigPropsheet</b></a> method to simplify configuration dialog box implementation. </p>
<p>
It is possible for a user to cancel a MSG_SERVICE_UNINSTALL operation. In this case, the <b>ServiceEntry</b> function should check with the user to verify that the service should not be removed and return MAPI_E_USER_CANCEL if the service remains installed. </p>
<p>
A function based on the <b>MSGSERVICEENTRY</b> prototype returns one of the HRESULT values listed. MAPI forwards this value when responding to a client's call to <a href="inter030_4cv9.htm"><b>IMsgServiceAdmin::ConfigureMsgService</b></a>. </p>
<p>
Message services that export a service entry function must include the <a href="propb_6e5h.htm">PR_SERVICE_DLL_NAME</a> and <a href="propb_6r6t.htm">PR_SERVICE_ENTRY_NAME</a> properties in the message service section of MAPISVC.INF. </p>
<p>&nbsp;</p></body>
</HTML>

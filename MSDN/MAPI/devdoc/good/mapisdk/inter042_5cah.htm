<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IXPLogon::TransportNotify</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_ixplogon_transportnotify"></a>IXPLogon::TransportNotify</h2>
<p>
The <b>IXPLogon::TransportNotify</b> method signals the occurrence of an event about which the transport provider has requested notification.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter042_2u9a.htm"><b>IXPLogon : IUnknown</b></a>.</p>
<pre><code><b>HRESULT TransportNotify(
  ULONG FAR *</b><i> lpulFlags</i><b>,</b>   
<b>  LPVOID FAR *</b><i> lppvData  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpulFlags</i></dt>
<dd>
[in, out] Bitmask of flags that signals notification events. The following flags can be set by the MAPI spooler on input and must be returned unchanged on output:
<dl>
<dt>
NOTIFY_ABORT_DEFERRED</dt>
<dd>
Notifies the transport provider that a message for which it accepted responsibility is being deferred. Only transport providers that support deferral must support this flag. The <i>lppvData</i> parameter points to the entry identifier of the canceled message. Messages that have not been processed by the MAPI spooler can still be deferred by calling the <a href="inter031_5gac.htm"><b>IMsgStore::AbortSubmit</b></a> method.</dd>
<dt>
NOTIFY_BEGIN_INBOUND</dt>
<dd>
The MAPI spooler can now accept inbound messages for this transport provider session. The MAPI spooler regularly calls the <a href="inter042_2fos.htm"><b>IXPLogon::Poll</b></a> method if the transport provider set the flag LOGON_SP_POLL with the <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a> call at logon. Once the NOTIFY_BEGIN_INBOUND flag is set, the MAPI spooler honors the NOTIFY_NEWMAIL flag passed in the call to the <a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a> method. The status table row for the transport provider session should be updated before returning by calling the <a href="inter025_0oxj.htm"><b>IMAPISupport::ModifyStatusRow</b></a> method. NOTIFY_BEGIN_INBOUND is mutually exclusive with the NOTIFY_END_INBOUND flag.</dd>
<dt>
NOTIFY_BEGIN_INBOUND_FLUSH</dt>
<dd>
Signals the transport provider to cycle through inbound messages as quickly as possible. To comply with this notification, the transport provider should set the flag STATUS_INBOUND_FLUSH in the <a href="propb_2zj9.htm">PR_STATUS_CODE</a> property of its status table row as soon as it can, using <b>ModifyStatusRow</b>. Until the end of this inbound messaging cycle, which is when the provider determines it has downloaded all it can or when it has received an <a href="#_mapi1book_ixplogon_transportnotify"><b>IXPLogon::TransportNotify</b></a> method call with the flag NOTIFY_END_INBOUND_FLUSH set, the provider should not call the <a href="inter025_3pt0.htm"><b>IMAPISupport::SpoolerYield</b></a> method or otherwise give up cycles to the operating system in order to speed delivery of incoming messages. This is acceptable because the MAPI spooler typically only uses this notification in response to a user's request, via a client application, to deliver all messages now. At the end of the inbound flush operation, the provider should use <b>SpoolerNotify</b> to clear the STATUS_INBOUND_FLUSH flag in the PR_STATUS_CODE property of its status row.</dd>
<dt>
NOTIFY_BEGIN_OUTBOUND</dt>
<dd>
Outbound operations can now occur for this transport provider session. If there are any messages to be sent for this provider, a call to the <a href="inter042_18v9.htm"><b>IXPLogon::SubmitMessage</b></a> method follows. The status table row for this session should be updated before returning. The NOTIFY_BEGIN_OUTBOUND flag is mutually exclusive with the NOTIFY_END_OUTBOUND flag.</dd>
<dt>
NOTIFY_BEGIN_OUTBOUND_FLUSH</dt>
<dd>
Works similarly to the NOTIFY_BEGIN_INBOUND_FLUSH flag but refers to outbound messages, and the appropriate status flag is STATUS_OUTBOUND_FLUSH.</dd>
<dt>
NOTIFY_CANCEL_MESSAGE</dt>
<dd>
The MAPI spooler must cancel transfer of the message for which the <i>lppvData</i> parameter points to the 32-bit value obtained with the <b>IXPLogon::SubmitMessage</b> method call. The NOTIFY_CANCEL_MESSAGE flag can be set without the transport provider having returned from the <b>SubmitMessage</b>, <b>IXPLogon::StartMessage</b>, or <b>IXPLogon::EndMessage</b> method call associated with the message. The transport provider must return from the entry point that is handling the canceled message as soon as possible. 
<p>
For an inbound message that is currently being processed, the transport provider should save the incoming message wherever it is presently stored and deliver it again at the next convenient time. The message object data already stored for the incoming message is discarded.

<p>
If the transport provider did not update this 32-bit value at <b>StartMessage</b> or <b>SubmitMessage</b> time, it is 0 for outbound messages and 1 for inbound messages.
</dd>
<dt>
NOTIFY_END_INBOUND</dt>
<dd>
Inbound operations must cease for this transport provider session. The MAPI spooler ceases to use <b>Poll</b> and ignores NOTIFY_NEWMAIL for this session. In-process messages should be completed. The status table row for the transport session should be updated by calling <a href="inter025_0oxj.htm"><b>ModifyStatusRow</b></a> before returning. NOTIFY_END_INBOUND is mutually exclusive with NOTIFY_BEGIN_INBOUND.</dd>
<dt>
NOTIFY_END_INBOUND_FLUSH</dt>
<dd>
Notifies the transport provider to come out of inbound flush mode. The transport provider should not stop downloading, but downloading should be done in the background. The status table row for the transport session should be updated by calling <b>ModifyStatusRow</b> when the transport provider can comply with this notification.</dd>
<dt>
NOTIFY_END_OUTBOUND</dt>
<dd>
Outbound operations must cease for this transport provider session. The MAPI spooler ceases to call <b>SubmitMessage</b> and ignores the <b>SpoolerNotify</b> flag NOTIFY_READYTOSEND. If there is an outbound message currently being sent, it should not be stopped; to stop delivery of a message, use the NOTIFY_CANCEL_MESSAGE flag. The status table row for this session should be updated by calling <b>ModifyStatusRow</b> before returning. NOTIFY_END_INBOUND is mutually exclusive with NOTIFY_BEGIN_OUTBOUND.</dd>
<dt>
NOTIFY_END_OUTBOUND_FLUSH</dt>
<dd>
Works similarly to NOTIFY_END_INBOUND_FLUSH but refers to outbound messages, and the appropriate status flag is STATUS_OUTBOUND_FLUSH.</dd>
</dl>
</dd>
<dt>
<i>lppvData</i></dt>
<dd>
[out] Pointer to a pointer to event-specific data. For more information on what <i>lppvData</i> holds, see the description for the <i>lpulFlags </i>parameter.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The call succeeded and has returned the expected value or values.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The MAPI spooler calls the <b>IXPLogon::TransportNotify</b> method to signal to the transport provider the occurrence of events about which notification has been requested. These events include the MAPI spooler's requiring the cancellation of transfer for a message, the beginning or ending of inbound or outbound transport operations, and the beginning or ending of an operation to clear an inbound or outbound message queue.</p>
<p>
When the user tries to cancel a message that the transport provider has previously deferred, the MAPI spooler calls <b>TransportNotify</b> passing in both the NOTIFY_ABORT_DEFERRED and NOTIFY_CANCEL_MESSAGE flags in <i>ulFlags</i>. If the MAPI spooler is logging off and still has messages in the queue, it passes only NOTIFY_ABORT_DEFERRED in <i>ulFlags</i> when it calls <b>TransportNotify</b>.</p>
<h4>Notes to Implementers</h4>
<p>
The provider must synchronize access to its data on this call because the MAPI spooler can invoke this method from another thread of execution or from a procedure for a different window. This is most likely when the MAPI spooler signals the cancellation of a message that the transport provider has started sending.</p>
<h4>See Also</h4>
<p>
<a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a>,<b> <a href="inter025_3pt0.htm">IMAPISupport::SpoolerYield</a></b>,<b> <a href="inter031_5gac.htm">IMsgStore::AbortSubmit</a></b>, <a href="inter042_576t.htm"><b>IXPLogon::EndMessage</b></a>,<b> <a href="inter042_2fos.htm">IXPLogon::Poll</a></b>,<b> <a href="inter042_1a1x.htm">IXPLogon::StartMessage</a></b>,<b> <a href="inter042_18v9.htm">IXPLogon::SubmitMessage</a></b>, <a href="#_mapi1book_ixplogon_transportnotify"><b>IXPLogon::TransportNotify</b></a>, <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

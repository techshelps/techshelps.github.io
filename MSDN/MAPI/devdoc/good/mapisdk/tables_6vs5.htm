<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Provider Table</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_provider_table"></a>Provider Table</h1>
<p>
A provider table contains information about service providers. There are two different provider tables, both implemented by MAPI and used by clients. The first table, accessed by calling the <a href="inter030_8p5x.htm"><b>IMsgServiceAdmin::GetProviderTable</b></a> method, holds information about all of the providers for the current profile. The second table, accessed through <a href="inter038_5alh.htm"><b>IProviderAdmin::GetProviderTable</b></a>, creates a table that stores information about all of the service providers for a message service.  </p>
<p>
These two tables have another difference. The provider table available through <b>IMsgServiceAdmin::GetProviderTable</b> contains only rows that represent service providers while the table available through <b>IProviderAdmin::GetProviderTable</b> may include rows that represent additional information associated with a service provider. This extra information is added to the profile with the "Sections" keyword of MAPISVC.INF. When a provider has extra profile sections, it stores the <b>MAPIUID</b>s for these sections in the <a href="propb_9ucz.htm">PR_SERVICE_EXTRA_UIDS</a> property. PR_SERVICE_EXTRA_UIDS is saved in the message service profile section. </p>
<p>
The following properties make up the required column set in both types of provider tables:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="propa_65h5.htm">PR_INSTANCE_KEY</a></td>
<td width=52%><a href="propa_1yjp.htm">PR_DISPLAY_NAME</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="propb_9aux.htm">PR_PROVIDER_DISPLAY</a></td>
<td width=52%><a href="propb_5yud.htm">PR_PROVIDER_DLL_NAME</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="propb_80mk.htm">PR_PROVIDER_ORDINAL</a></td>
<td width=52%><a href="propb_004k.htm">PR_PROVIDER_UID</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="propb_4u5v.htm">PR_RESOURCE_FLAGS</a></td>
<td width=52%><a href="propb_0oh1.htm">PR_RESOURCE_TYPE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="propb_18yt.htm">PR_SERVICE_NAME</a></td>
<td width=52%><a href="propb_357o.htm">PR_SERVICE_UID</a></td>
</tr>
</table><br>
<p>
The provider table can be used to display the current transport order or to change it. To display the current order, build a restriction to retrieve only those rows with the <a href="propb_0oh1.htm">PR_RESOURCE_TYPE</a> property set to MAPI_TRANSPORT_PROVIDER. Then use <a href="propb_80mk.htm">PR_PROVIDER_ORDINAL</a> as a sort key to sort the table and retrieve all the rows with either the <a href="inter026_7wkz.htm"><b>IMAPITable::QueryRows</b></a> method or the <a href="function_0dgz.htm"><b>HrQueryAllRows</b></a> function.</p>
<p>
To change the transport order, apply the same restriction and retrieve the rows. Then create an array of values from the <a href="propb_004k.htm">PR_PROVIDER_UID</a> property that represents the unique identifiers for the transport providers. When the identifiers are in the desired order, pass them to the <a href="inter030_0ysy.htm"><b>IMsgServiceAdmin::MsgServiceTransportOrder</b></a> method.</p>
<p>
Once a provider table has been made accessible, it will not reflect subsequent changes, such as the addition or deletion of a provider. </p>
<p>&nbsp;</p></body>
</HTML>

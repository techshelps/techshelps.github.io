<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Reception Model</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mapi1book_message_reception_model"></a>Message Reception Model</h3>
<p>
The transport provider controls whether the MAPI spooler must poll it for incoming mail or whether it performs a callback to the MAPI spooler when new mail arrives. The transport provider sets the SP_LOGON_POLL flag when it returns from <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a> to request polling. Otherwise, the transport uses <a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a> when incoming mail is available. After learning that incoming mail is available, the MAPI spooler opens a new message and asks the transport provider to store the received message properties into the message.</p>
<p>
This process works as follows:
<ol>
<li>
Available messages are indicated by either the transport provider calling <b>IMAPISupport::SpoolerNotify</b> or by the MAPI spooler calling <a href="inter042_2fos.htm"><b>IXPLogon::Poll</b></a>.</li>
<li>
The MAPI spooler calls <a href="inter042_1a1x.htm"><b>IXPLogon::StartMessage</b></a> to initiate the process.</li>
<li>
The transport provider places a reference value in the location referenced in <b>StartMessage</b>. These reference values allow the transport provider and the MAPI spooler to keep track of which message is being processed when there are multiple messages to deliver.</li>
<li>
The transport provider stores the message data into the passed <a href="inter029_525s.htm"><b>IMessage</b></a> instance.</li>
<li>
The transport provider calls the<b> <a href="inter022_5rqr.htm">IMAPIProp::SaveChanges</a></b> method on the <b>IMessage</b> instance and returns from <b>StartMessage</b>.</li>
<li>
The MAPI spooler calls <b>IXPLogon::TransportNotify</b> if it must stop message delivery.</li>
</ol>
<p>
<b>Note</b>  If a transport provider must deliver a large number of messages and the transport provider is using <b>IMAPISupport::SpoolerNotify</b> instead of <b>IXPLogon::Poll</b>, care should be taken not to call <b>SpoolerNotify</b> too frequently in order not to deprive other transport providers of CPU time. The MAPI spooler does have logic to prevent this from happening, but in general the interval between <b>SpoolerNotify</b> calls should be longer than the time it takes your transport provider to process one message.</p>
<p>
Also, the MAPI spooler may not process an incoming message immediately. The MAPI spooler may ask the transport provider to perform other tasks before it receives the incoming message.</p>
<p>&nbsp;</p></body>
</HTML>

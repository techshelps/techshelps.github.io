<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IABLogon::OpenTemplateID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_iablogon_opentemplateid"></a>IABLogon::OpenTemplateID</h2>
<p>
The <b>IABLogon::OpenTemplateID</b> method opens a recipient entry that has data residing in a host address book provider.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter004_8ofi.htm"><b>IABLogon : IUnknown</b></a>.</p>
<pre><code><b>HRESULT OpenTemplateID(
  ULONG</b><i> cbTemplateID</i><b>,</b>                
<b>  LPENTRYID</b><i> lpTemplateID</i><b>,</b>            
<b>  ULONG</b><i> ulTemplateFlags</i><b>,</b>             
<b>  LPMAPIPROP</b><i> lpMAPIPropData</i><b>,</b>         
<b>  LPCIID</b><i> lpInterface</i><b>,</b>                
<b>  LPMAPIPROP FAR *</b><i> lppMAPIPropNew</i><b>,</b>   
<b>  LPMAPIPROP</b><i> lpMAPIPropSibling       </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cbTemplateID</i></dt>
<dd>
[in] Count of bytes in the template identifier pointed to by the <i>lpTemplateID</i> parameter.</dd>
<dt>
<i>lpTemplateID</i></dt>
<dd>
[in] Pointer to the template identifier, or <a href="propb_8810.htm">PR_TEMPLATEID</a> property, of the recipient entry to be opened.</dd>
<dt>
<i>ulTemplateFlags</i></dt>
<dd>
[in] Bitmask of flags used to indicate how to open the entry represented by the template identifier. The following flag can be set:
<dl>
<dt>
FILL_ENTRY</dt>
<dd>
The host provider is creating a new entry in its container based on the entry represented by the template identifier. <b>OpenTemplateID</b> should either perform specific initialization of the host provider's entry, using the <b>IMAPIProp</b> implementation in the <i>lpMAPIPropData</i> parameter, or return a custom <b>IMAPIProp</b> implementation in the <i>lppMAPIPropNew</i> parameter.</dd>
</dl>
</dd>
<dt>
<i>lpMAPIPropData</i></dt>
<dd>
[in] Pointer to the host provider's property object— an implementation of an interface derived from <a href="inter022_00tq.htm"><b>IMAPIProp</b></a>.</dd>
<dt>
<i>lpInterface</i></dt>
<dd>
[in] Pointer to the interface identifier (IID) representing the type of interface pointer to be returned in the <i>lppMAPIPropNew</i> parameter. Passing NULL results in the return of the standard messaging user interface, <a href="inter009_3sc0.htm"><b>IMailUser</b></a>.</dd>
<dt>
<i>lppMAPIPropNew</i></dt>
<dd>
[out] Pointer to the bound property object —an implementation of an interface derived from <b>IMAPIProp</b>.</dd>
<dt>
<i>lpMAPIPropSibling</i></dt>
<dd>
Reserved; must be NULL.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The appropriate code was successfully bound to related data in the host provider.</dd>
<dt>
MAPI_E_UNKNOWN_ENTRYID</dt>
<dd>
The template identifier passed in the <i>lpTemplateID</i> parameter is not recognized by the address book provider.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IABLogon::OpenTemplateID </b>method is implemented only by address book providers that need to maintain control over copies of their entries that exist in the containers of host providers. Providers that implement <b>OpenTemplateID</b> are known as foreign address book providers. Host providers call <a href="inter025_8aec.htm"><b>IMAPISupport::OpenTemplateID</b></a> to create a copied entry or open the copied entry, and MAPI passes on the call to <b>IABLogon::OpenTemplateID</b>. <b>IABLogon::OpenTemplateID</b> opens the entry and binds the code that controls it to data in the host provider. </p>
<p>
Rather than use an entry identifier, <b>OpenTemplateID</b> uses another property, the entry's template identifier — <a href="propb_8810.htm">PR_TEMPLATEID</a>. Template identifiers should be supported for entries whose code will need to be bound to data in a host provider.</p>
<p>
Some examples of when an address book provider should implement <b>IABLogon::OpenTemplateID</b> are:
<ul>
<li>
To periodically update the data for a copied entry so that it stays synchronized with the original.</li>
<li>
To implement functionality that the host provider cannot implement, such as dynamically populating a list box that appears in the entry's details table from data on a server.</li>
<li>
To control the interaction between properties in the host provider's entry and the original entry, such as computing <a href="propa_2t9v.htm">PR_EMAIL_ADDRESS</a> from edit controls in the details display that hold various components of the address.</li>
</ul>
<h4>Notes to Implementers</h4>
<p>
When a host provider copies or creates an entry from your provider and you supply a property object implementation through <b>IABLogon::OpenTemplateID</b>, you handle most of the calls to maintain the entry. However, because it is up to the host provider to forward these calls to you, the host provider can intercept any call and perform custom processing before forwarding the call.</p>
<p>
You should adhere to the following guidelines in your property object implementations:
<ul>
<li>
When <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> is called, determine if the request is for a computed property and if it is, handle it. Transfer all requests for noncomputed properties to the host provider. </li>
<li>
When <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> is called to open any table except the details display table, handle the request. Most tables cannot be copied accurately to the host provider. You must generate the <b>IMAPITable</b> implementation for these requested tables. The details table — <a href="propa_692d.htm">PR_DETAILS_TABLE</a> property — must be copied to the host provider, thereby allowing this provider to generate the table locally. You might want to wrap the display table implementation to generate display table notifications. </li>
<li>
When<b> <a href="inter022_6cxf.htm">IMAPIProp::SetProps</a></b> is called, the host provider can validate the data before allowing you to set the properties. You can verify that all of the necessary properties were set or computed. If an error is detected, return the appropriate error value and, if possible, a further explanation through <a href="inter022_1hv6.htm"><b>IMAPIProp::GetLastError</b></a>.</li>
<li>
When <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> is called, the host provider might want to perform processing before you save the entry. You should save any data that is affected by the changed properties, such as a new address, in the host provider's entry.</li>
</ul>
<p>
In general, make your implementation of the entry that you pass back to the host provider intercept all of the methods to perform context-specific manipulation of the relevant properties. If the FILL_ENTRY flag is passed in the <i>ulFlags</i> parameter, set all properties for the entry.</p>
<p>
If you return a new property object in the <i>lppMAPIPropNew</i> parameter, call the <b>IUnknown::AddRef</b> method of the host provider's property object to maintain a reference. All calls through the bound object — the <b>IMAPIProp</b> implementation returned in <i>lppMAPIPropNew </i>— should be routed to their corresponding method in the host property object after they are dealt with by the bound object.</p>
<p>
The property identifiers of any named properties that are passed through your bound property object are in your provider's identifier name space. Your implementation of the <a href="inter022_7ib7.htm"><b>IMAPIProp::GetNamesFromIDs</b></a> method should determine the names of the properties so that it can perform any template-specific tasks. Similarly, properties that your provider passes on to the host provider must also be in your name space. For example, if you set a named property in <b>OpenTemplateID</b>, you should use one of your identifiers for the name, creating it if necessary by calling <b>GetIDsFromNames</b>.</p>
<p>
If you do not recognize the entry identifier passed in <i>lpTemplateID</i>, return MAPI_E_UNKNOWN_ENTRYID.</p>
<p>
For more information on working with address book template identifiers, see <a href="ab_0c36.htm">Acting as a Foreign Address Book Provider</a>.</p>
<h4>See Also</h4>
<p>
<a href="inter025_8aec.htm"><b>IMAPISupport::OpenTemplateID</b></a>, <a href="inter037_5prk.htm"><b>IPropData : IMAPIProp</b></a>, <a href="propb_8810.htm">PR_TEMPLATEID</a></p>
<p>&nbsp;</p></body>
</HTML>

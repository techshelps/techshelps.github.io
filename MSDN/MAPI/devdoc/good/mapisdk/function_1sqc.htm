<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ABProviderInit</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_abproviderinit"></a>ABProviderInit</h2>
<p>
The <b>ABProviderInit</b> function initializes an address book provider for operation. </p>
<h4>Quick Info </h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file: </td>
<td width=52%>MAPISPI.H </td>
</tr>
<tr valign=top>
<td width=48%>Implemented by: </td>
<td width=52%>Address book providers </td>
</tr>
<tr valign=top>
<td width=48%>Called by: </td>
<td width=52%>MAPI </td>
</tr>
</table><br>
<pre><code><b>HRESULT ABProviderInit( 
  HINSTANCE</b><i> hInstance</i><b>,</b>             
<b>  LPMALLOC</b><i> lpMalloc</i><b>,</b>               
<b>  LPALLOCATEBUFFER</b><i> lpAllocateBuffer</i><b>,</b>   
<b>  LPALLOCATEMORE</b><i> lpAllocateMore</i><b>,</b>   
<b>  LPFREEBUFFER</b><i> lpFreeBuffer</i><b>,</b>       
<b>  ULONG</b><i> ulFlags</i><b>,</b>                   
<b>  ULONG</b><i> ulMAPIVer</i><b>,</b>                 
<b>  ULONG FAR *</b><i> lpulProviderVer</i><b>,</b>     
<b>  LPABPROVIDER FAR *</b><i> lppABProvider  </i>
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>hInstance </i></dt>
<dd>
[in] The instance of the address book provider's dynamic-link library (DLL) that MAPI used when it linked. </dd>
<dt>
<i>lpMalloc </i></dt>
<dd>
[in] Pointer to a memory allocator object exposing the OLE <b>IMalloc</b> interface. The address book provider may need to use this allocation method when working with certain interfaces such as <b>IStream</b>. </dd>
<dt>
<i>lpAllocateBuffer </i></dt>
<dd>
[in] Pointer to the <a href="function_8z3m.htm"><b>MAPIAllocateBuffer</b></a> function, to be used where required by MAPI to allocate memory. </dd>
<dt>
<i>lpAllocateMore </i></dt>
<dd>
[in] Pointer to the <a href="function_11wl.htm"><b>MAPIAllocateMore</b></a> function, to be used where required by MAPI to allocate additional memory. </dd>
<dt>
<i>lpFreeBuffer </i></dt>
<dd>
[in] Pointer to the <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> function, to be used where required by MAPI to free memory. </dd>
<dt>
<i>ulFlags </i></dt>
<dd>
[in] Bitmask of flags. The following flag can be set: 
<dl>
<dt>
MAPI_NT_SERVICE </dt>
<dd>
The provider is being loaded in the context of a Windows NT service, a special type of process without access to any user interface. </dd>
</dl>
</dd>
<dt>
<i>ulMAPIVer </i></dt>
<dd>
[in] Version number of the service provider interface (SPI) that MAPI.DLL uses. For the current version number, see the MAPISPI.H header file. </dd>
<dt>
<i>lpulProviderVer </i></dt>
<dd>
[out] Pointer to the version number of the SPI that this address book provider uses. </dd>
<dt>
<i>lppABProvider </i></dt>
<dd>
[out] Pointer to a pointer to the initialized address book provider object. 
</dd>
</dl>
<h4>Return Values </h4>
<dl>
<dt>
S_OK </dt>
<dd>
The call succeeded and has returned the expected value or values. </dd>
<dt>
MAPI_E_VERSION </dt>
<dd>
The SPI version being used by MAPI is not compatible with the SPI being used by this provider. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
MAPI calls the entry point function <b>ABProviderInit</b> to initialize an address book provider following a client logon. </p>
<h4>Notes to Implementers </h4>
<p>
An address book provider must implement <b>ABProviderInit</b> as an entry point function in the provider's DLL. The implementation must be based on the <b>ABPROVIDERINIT</b> function prototype, also specified in MAPISPI.H. MAPI defines <b>ABPROVIDERINIT</b> to use the standard MAPI initialization call type, STDMAPIINITCALLTYPE, which causes <b>ABProviderInit</b> to follow the CDECL calling convention. An advantage of CDECL is that calls can be attempted even if the number of calling parameters does not match the number of defined parameters. </p>
<p>
A provider can be initialized multiple times, as a result of appearing in several profiles in simultaneous use or of appearing more than once in the same profile. Because the provider object contains context, <b>ABProviderInit</b> must return a different provider object in <i>lppABProvider</i> for each initialization, even for multiple initializations in the same process. </p>
<p>
The address book provider should use the functions pointed to by <i>lpAllocateBuffer</i>, <i>lpAllocateMore</i>, and <i>lpFreeBuffer</i> for most memory allocation and deallocation. In particular, the provider must use these functions to allocate memory for use by client applications when calling object interfaces such as <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> and <a href="inter026_7wkz.htm"><b>IMAPITable::QueryRows</b></a>. If the provider also expects to use the OLE memory allocator, it should call the <b>IUnknown::AddRef</b> method of the allocator object pointed to by the <i>lpMalloc </i>parameter. </p>
<p>
For more information on writing <b>ABProviderInit</b>, see <a href="ab_94tq.htm">Implementing an Address Book Provider Entry Point Function</a>. For more information on entry point functions, see <a href="provider_7x9q.htm">Implementing a Service Provider Entry Point Function</a>. </p>
<h4>See Also </h4>
<p>
<a href="groups_7qb7.htm">Provider Initialization Functions</a>, <a href="function_4y7o.htm"><b>HPProviderInit</b></a>, <a href="inter005_5wdq.htm"><b>IABProvider : IUnknown</b></a>, <a href="function_7zxw.htm"><b>MSProviderInit</b></a>, <a href="function_0wc4.htm"><b>XPProviderInit</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Messages with TNEF Custom Attachment Processing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mapi1book_sending_messages_with_tnef_custom_attachment_processing"></a>Sending Messages with TNEF Custom Attachment Processing</h3>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To customize attachment processing when sending a message</h5>
<ol>
<li>
Obtain a TNEF object by passing an <b>IStream</b> object and a message into the <a href="function_3qk8.htm"><b>OpenTnefStreamEx</b></a> function.</li>
<li>
Get a list of all defined properties for the message by calling the <a href="inter022_79v8.htm"><b>IMAPIProp::GetPropList</b></a> method.</li>
<li>
Use <b>IMAPIProp</b> methods to exclude all properties supported by the messaging system. At an appropriate time write those properties to the messaging system in the format required by the messaging system.</li>
<li>
Call the <a href="inter041_267n.htm"><b>ITnef::AddProps</b></a> method to add only the properties on the message — that is, none of the properties on the attachments — by setting the TNEF_PROP_MESSAGE_ONLY flag.</li>
<li>
Call <b>ITnef::AddProps</b> with these items: the TNEF_PROP_EXCLUDE flag, a property tag array that contains the <a href="propa_6eni.htm">PR_ATTACH_DATA_BIN</a> or <a href="propa_7je2.htm">PR_ATTACH_DATA_OBJ</a> property, and an attachment identifier that specifies the attachment to be processed.</li>
<li>
Use the <b>ITnef::SetProps</b> method to add the <a href="propa_88px.htm">PR_ATTACH_TRANSPORT_NAME</a> property tag with a unique string that identifies the attachment to the messaging system if the attachment has a filename that the messaging system cannot support. For example, multiple attachments with the same original filename, or a filename that is not a valid filename for the messaging system. This string will be used with a key number when writing the attachment tags in the tagged message text to associate an attachment with its data. See, <a href="xptnef_9r78.htm">TNEF Tagged Message Text</a>.</li>
<li>
Repeat the <b>AddProps</b> and <b>SetProps</b> calls for each attachment.</li>
<li>
Call the <a href="inter041_3nvs.htm"><b>ITnef::Finish</b></a> method to encode the message into the TNEF stream after all the requested properties are added.</li>
<li>
Obtain the tagged message text by calling the <a href="inter041_4k8p.htm"><b>ITnef::OpenTaggedBody</b></a> method. This tagged text is read using methods from the <b>IStream</b> interface, encoded using the messaging system's attachment model, and written out to the messaging system.</li>
<li>
Call the <b>IUnknown::Release</b> method to release the <b>ITnef</b> object.</li>
<li>
Write the remaining attachments to the messaging system through the messaging system's attachment model.</li>
</ol>
<p>
It is highly recommended that your transport provider use the method just described to process attachments. If that is not possible, a second method for customized attachment processing is available:</p>
<p>
The transport provider ensures that the PR_ATTACH_TRANSPORT_NAME properties of all the attachments contain unique values that are valid attachment identifiers for the messaging system. The transport provider then uses a single call to <b>ITnef::AddProps</b> for each attachment, passing in the TNEF_PROP_CONTAINED flag.</p>
<p>&nbsp;</p></body>
</HTML>

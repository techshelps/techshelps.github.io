<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISpoolerHook::InboundMsgHook</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_ispoolerhook_inboundmsghook"></a>ISpoolerHook::InboundMsgHook</h2>
<p>
The <b>ISpoolerHook::InboundMsgHook</b> method is called by the MAPI spooler. The method can perform arbitrary processing on an inbound message and can change the message's delivery point from the Inbox to another folder.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter039_9q5q.htm"><b>ISpoolerHook : IUnknown</b></a>.</p>
<pre><code><b>HRESULT InboundMsgHook(
  LPMESSAGE</b><i> lpMessage</i><b>,</b>   
<b>  LPMAPIFOLDER</b><i> lpFolder</i><b>,</b>   
<b>  LPMDB</b><i> lpMDB</i><b>,</b>           
<b>  ULONG FAR *</b><i> lpulFlags</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpcbEntryID</i><b>,</b>   
<b>  LPBYTE FAR *</b><i> lppEntryID  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpMessage</i></dt>
<dd>
[in] Pointer to the message to process.</dd>
<dt>
<i>lpFolder</i></dt>
<dd>
[in] Pointer to the parent folder of the message in its message store. </dd>
<dt>
<i>lpMDB</i></dt>
<dd>
[in] Pointer to the message store containing the folder and message.</dd>
<dt>
<i>lpulFlags</i></dt>
<dd>
[out] Bitmask of flags that controls how the MAPI spooler responds to the hook for the message indicated in the <i>lpMessage</i> parameter. The following flags can be set:
<dl>
<dt>
HOOK_CANCEL</dt>
<dd>
Any subsequent hook functions should not be called for this message. If a hook closes, moves, or deletes the message, the messaging hook provider should set this flag.</dd>
<dt>
HOOK_DELETE</dt>
<dd>
The message should be deleted without being moved.</dd>
</dl>
</dd>
<dt>
<i>lpcbEntryID</i></dt>
<dd>
[in, out] Pointer to the size, in bytes, of the entry identifier pointed to by the <i>lppEntryID</i> parameter.</dd>
<dt>
<i>lppEntryID</i></dt>
<dd>
[in, out] Pointer to the pointer to the entry identifier of the destination folder, if the hook processor moves the message. This can be NULL if the hook does not move the message. 
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The call succeeded and has returned the expected value or values.
</dd>
</dl>
<h4>Notes to Implementers</h4>
<p>
Messaging hook providers implement the <b>ISpoolerHook::InboundMsgHook</b> method to process inbound messages. This processing can include rerouting a message from the default Inbox to another folder, modifying the message, or automatically deleting it. Before processing a message, a messaging hook provider should call the <b>IUnknown::QueryInterface</b> method for the message object to make sure the provider can get an interface for the message that is compatible with the provider's implementation.</p>
<p>
To modify a message, the hook processor must change the values of the message's properties. For example, if a hook processor is created to make message delivery information explicit in the body of the message, it must take information from the message's header properties and insert it somewhere in the message's <a href="propa_9lvd.htm">PR_BODY</a> or <a href="propb_7vhg.htm">PR_RTF_COMPRESSED</a> properties. The hook processor should call the <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> method after modifying the message's properties.</p>
<p>
To reroute a message, a messaging hook provider must replace the passed-in entry identifier in <i>lppEntryID</i> with the entry identifier of the new target folder. The MAPI spooler moves the message to the indicated folder for the provider, unless another hook function replaces the folder entry identifier again. If a hook requires that its operation be the final action on the message, it can set the HOOK_CANCEL flag in the <i>lpulFlags</i> parameter before returning. </p>
<p>
If a provider replaces the <i>lppEntryID</i> entry identifier, it must call the <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> function to free the original one. The entry identifier the provider stores in <i>lppEntryID</i> should be allocated using the <a href="function_8z3m.htm"><b>MAPIAllocateBuffer</b></a> function. </p>
<p>
If a messaging hook must move a message to another folder itself rather than letting the MAPI spooler move the message, it should close the message, place zero in the <i>lpcbEntryID</i> parameter, and free the <i>lppEntryID</i> entry identifier, if <i>lppEntryID</i> is not already NULL. The hook then sets <i>lppEntryID</i> to NULL and places a pointer to the message's new parent folder in <i>lpFolder</i>. Messaging hook providers that move the message must set HOOK_CANCEL in <i>lpulFlags</i>.</p>
<p>
If a hook needs to delete a message, it only needs to set both the HOOK_CANCEL and HOOK_DELETE flags in <i>lpulFlags</i>. The MAPI spooler will take care of deleting the message from the message store.</p>
<p>
The MAPI spooler calls hook providers in the order in which they are specified in the provider section of the profile, as it does transport providers. The MAPI spooler releases the messaging hook provider object at session shutdown. If a hook provider calls the <b>IUnknown::AddRef</b> method for a session at initialization, at shutdown it should call the <b>IUnknown::Release</b> method to release the session and any objects, such as message stores, it opened and maintained during the session.</p>
<p>&nbsp;</p></body>
</HTML>

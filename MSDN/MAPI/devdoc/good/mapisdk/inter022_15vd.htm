<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIProp::OpenProperty</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapiprop_openproperty"></a>IMAPIProp::OpenProperty</h2>
<p>
The <b>IMAPIProp::OpenProperty</b> method returns a pointer to an interface to be used to access a property.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter022_00tq.htm"><b>IMAPIProp : IUnknown</b></a>.</p>
<pre><code><b>HRESULT OpenProperty(
  ULONG</b><i> ulPropTag</i><b>,</b>        
<b>  LPCIID</b><i> lpiid</i><b>,</b>           
<b>  ULONG</b><i> ulInterfaceOptions</i><b>,</b>   
<b>  ULONG</b><i> ulFlags</i><b>,</b>          
<b>  LPUNKNOWN FAR *</b><i> lppUnk  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ulPropTag</i></dt>
<dd>
[in] Property tag for the property to be accessed. Both the identifier and the type must be included in the property tag.</dd>
<dt>
<i>lpiid</i></dt>
<dd>
[in] Pointer to the identifier for the interface to be used to access the property. The <i>lpiid</i> parameter must not be NULL.</dd>
<dt>
<i>ulInterfaceOptions</i></dt>
<dd>
[in] Data that relates to the interface identified by the <i>lpiid</i> parameter.</dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls access to the property. The following flags can be set:
<dl>
<dt>
MAPI_CREATE</dt>
<dd>
If the property does not exist, it should be created. If the property does exist, the current value of the property should be discarded. When a caller sets the MAPI_CREATE flag, it should also set the MAPI_MODIFY flag.</dd>
<dt>
MAPI_DEFERRED_ERRORS</dt>
<dd>
Allows <b>OpenProperty</b> to return successfully, possibly before the object is fully accessible to the caller. If the object is not accessible, making a subsequent object call can result in an error.</dd>
<dt>
MAPI_MODIFY</dt>
<dd>
Requests read/write access to the property. The default access is read-only. MAPI_MODIFY must be set when MAPI_CREATE is set.</dd>
</dl>
</dd>
<dt>
<i>lppUnk</i></dt>
<dd>
[out] Pointer to the requested interface to be used for property access.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The requested interface pointer was successfully returned.</dd>
<dt>
MAPI_E_INTERFACE_NOT_SUPPORTED</dt>
<dd>
The requested interface is not supported for this property.</dd>
<dt>
MAPI_E_NO_ACCESS</dt>
<dd>
The caller has insufficient permissions to access the property.</dd>
<dt>
MAPI_E_NO_SUPPORT</dt>
<dd>
The object cannot provide access to this property through the requested interface.</dd>
<dt>
MAPI_E_NOT_FOUND</dt>
<dd>
The requested property does not exist and MAPI_CREATE was not set in the <i>ulFlags</i> parameter.</dd>
<dt>
MAPI_E_INVALID_PARAMETER</dt>
<dd>
The property type in the tag is set to PT_UNSPECIFIED.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPIProp::OpenProperty</b> method provides access to a property through a particular interface. <b>OpenProperty</b> is an alternate to <b>GetProps</b> and <b>SetProps</b>. When either <b>GetProps</b> or <b>SetProps</b> fails because the property is too large or too complex, call <b>OpenProperty</b>. <b>OpenProperty</b> is commonly used to access properties of type PT_OBJECT.</p>
<h4>Notes to Callers</h4>
<p>
To access message attachments, open the <a href="propa_7je2.htm">PR_ATTACH_DATA_OBJ</a> property with a different interface identifier, depending on the type of attachment. The following table describes how to call <b>OpenProperty</b> for the different types of attachments:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Type of attachment</th>
<th align=left width=52%>Interface identifier to use</th>
</tr>
<tr valign=top>
<td width=48%>Binary</td>
<td width=52%>IID_IStream</td>
</tr>
<tr valign=top>
<td width=48%>String</td>
<td width=52%>IID_IStream</td>
</tr>
<tr valign=top>
<td width=48%>Message</td>
<td width=52%>IID_IMessage</td>
</tr>
<tr valign=top>
<td width=48%>OLE 2</td>
<td width=52%>IID_IStreamDocfile</td>
</tr>
</table><br>
<p>
<b>IStreamDocfile</b> is a derivative of <b>IStream</b> that is based on an OLE 2 compound file. <b>IStreamDocfile</b> is the best choice for accessing OLE 2 attachments because it involves the least amount of overhead. IID_IStreamDocFile can be used for those properties that contain data stored in structured storage accessible through the <b>IStorage</b> interface.</p>
<p>
For more information about using <b>OpenProperty</b> with attachments, see <a href="propa_7je2.htm">PR_ATTACH_DATA_OBJ</a> and <a href="consider_6hh0.htm">Opening an Attachment</a>.</p>
<p>
Do not use the <b>IStream</b> pointer that you receive to call either its <b>Seek</b> or <b>SetSize</b> method unless you use a zero position or size variable. Also, do not rely on the value of the <i>plibNewPosition </i>output parameter returned from the <b>Seek</b> call.</p>
<p>
If you call <b>OpenProperty</b> to access a property with the <b>IStream</b> interface, use only that interface to make changes to it. Do not attempt to update the property with any of the other <b>IMAPIProp</b> methods such as <b>SetProps</b> or <b>DeleteProps</b>. </p>
<p>
Do not try to open a property with <b>OpenProperty</b> more than once. The results are undefined because they can vary from provider to provider.</p>
<p>
If you need to modify the property to be opened, set the MAPI_MODIFY flag. If you are not sure if the object supports the property but think it should, set the MAPI_CREATE and MAPI_MODIFY flags. Whenever MAPI_CREATE is set, MAPI_MODIFY must also be set.</p>
<p>
You are responsible for recasting the interface pointer returned in the <i>lppUnk</i> parameter to one appropriate for the interface specified in the <i>lpiid </i>parameter. You must also use the returned pointer to call its <b>IUnknown::Release</b> method when you have finished with it. </p>
<p>
Sometimes setting the flags in the <i>ulFlags</i> parameter is not enough to indicate the type of access to the property that is required. You can place additional data such as flags in the <i>ulInterfaceOptions</i> parameter. This data is interface-dependent. Some interfaces, such as <b>IStream</b>, use it and others do not. For example, when opening a property to be modified with <b>IStream</b>, set the STGM_WRITE flag in the <i>ulInterfaceOptions</i> parameter in addition to MAPI_MODIFY. When opening a table using <b>IMAPITable</b>, you can set <i>ulInterfaceOptions</i> to MAPI_UNICODE to indicate whether or not the columns in the table that hold string properties should be in Unicode format.</p>
<h4>See Also</h4>
<p>
<a href="function_5cfh.htm"><b>HrIStorageFromStream</b></a>, <a href="inter022_37xv.htm"><b>IMAPIProp::DeleteProps</b></a>, <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a>, <a href="inter022_6cxf.htm"><b>IMAPIProp::SetProps</b></a>, <a href="inter025_8sod.htm"><b>IMAPISupport::IStorageFromStream</b></a></p>
<p>&nbsp;</p></body>
</HTML>

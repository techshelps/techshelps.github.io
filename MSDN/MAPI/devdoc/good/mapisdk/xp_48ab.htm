<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Message and Recipient Options with Transport Providers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_implementing_message_and_recipient_options_with_transport_providers"></a>Implementing Message and Recipient Options with Transport Providers</h2>
<p>
When the MAPI spooler logs on to a transport provider, it calls the transport object's <a href="inter042_8gvn.htm"><b>IXPLogon::RegisterOptions</b></a> method. This gives the transport provider a chance to inform the MAPI spooler about any message or recipient options it supports.</p>
<p>
MAPI client applications call one or more special callback functions you define in a DLL (probably in the same DLL as your transport provider) to handle any message or recipient options defined in your transport provider at the time messages are composed or submitted. The transport provider's <b>RegisterOptions</b> method defines and returns some arbitrary data to MAPI; this data is passed to the callback functions later when the client calls the <b>IMAPISession::MessageOptions</b> method. Your transport provider can use this data to indicate to the callback what sort of option is being processed.</p>
<p>
The transport provider's <b>RegisterOptions</b> method should return an array of <a href="structyp_7gtd.htm"><b>OPTIONDATA</b></a> structures describing the options supported by the transport provider. Each structure should describe one option. </p>
<p>
Depending on how your transport provider uses the <b>lpszDLLName</b> and <b>ulOrdinal</b> members of the <b>OPTIONDATA</b> structure, you can implement your callbacks as one function which handles all options (and makes use of <b>lpbOptionsData</b>) or as many functions which handle one option each (and probably do not use <b>lpbOptionsData</b>).</p>
<p>
For more information, see <a href="inter042_8gvn.htm"><b>IXPLogon::RegisterOptions</b></a>, <a href="function_5s8b.htm"><b>OPTIONCALLBACK</b></a>, and <a href="structyp_7gtd.htm"><b>OPTIONDATA</b></a>. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPISupport::Notify</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapisupport_notify"></a>IMAPISupport::Notify</h2>
<p>
The <b>IMAPISupport::Notify</b> method sends a notification of a specified event to an advise source that originally registered for the notification through <a href="inter025_56xx.htm"><b>IMAPISupport::Subscribe</b></a>.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter025_8uge.htm"><b>IMAPISupport : IUnknown</b></a>.</p>
<pre><code><b>HRESULT Notify(
  LPNOTIFKEY</b><i> lpKey</i><b>,</b>                 
<b>  ULONG</b><i> cNotification</i><b>,</b>              
<b>  LPNOTIFICATION</b><i> lpNotifications</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpulFlags             </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpKey</i></dt>
<dd>
[in] Pointer to the notification key for the advise source object. The <i>lpKey </i>parameter cannot be NULL.</dd>
<dt>
<i>cNotification</i></dt>
<dd>
[in] Count of notification structures pointed to by the <i>lpNotifications</i> parameter.</dd>
<dt>
<i>lpNotifications</i></dt>
<dd>
[in] Pointer to an array of <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a> structures describing pending notifications.</dd>
<dt>
<i>lpulFlags</i></dt>
<dd>
[in, out] Bitmask of flags that controls the notification process. On input, the following flag can be set: 
<dl>
<dt>
MAPI_UNICODE</dt>
<dd>
The strings in the notification structures pointed to by <i>lpNotifications</i> are in Unicode format. If the MAPI_UNICODE flag is not set, the strings are in ANSI format.</dd>
</dl>
</dd>
</dl>
<p>
On output, the following flag can be set by MAPI:
<dl>
<dt>
NOTIFY_CANCELED</dt>
<dd>
A callback function canceled a synchronous notification.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The notifications were successfully generated.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPISupport::Notify</b> method is implemented for all service provider support objects. Service providers call <b>Notify</b> to request that MAPI generate a notification for an advise sink that has previously registered for the notification through <a href="inter025_56xx.htm"><b>IMAPISupport::Subscribe</b></a>. </p>
<p>
<b>Notify</b> copies the structures pointed to by the <i>lpNotifications</i> parameter into memory and calls the appropriate advise sink's <a href="inter010_4y2h.htm"><b>IMAPIAdviseSink::OnNotify</b></a><b> </b>method. When finished with the notification, it releases the memory involved. The caller does not need to allocate memory; MAPI performs all necessary memory allocation. </p>
<h4>Notes to Callers</h4>
<p>
The notification key passed in the <i>lpKey</i> parameter should be identical to the key passed in <i>lpKey</i> to the <b>IMAPISupport::Subscribe</b> method. Many providers use the entry identifier of the advise source as the key, but other data, such as a file path, can be used. MAPI uses this key to find all the registrations for notifications on the identified advise source.</p>
<p>
Make sure that you set the <b>lpEntryID</b> member of the notification structure to a long-term entry identifier. </p>
<p>
If you set the NOTIFY_SYNC flag on the <b>Subscribe</b> call for any of the pending notifications, <b>Notify</b> calls the <b>IMAPIAdviseSink::OnNotify </b>method callback functions before returning. An advise sink can be created manually or by calling <a href="function_9bhn.htm"><b>HrAllocAdviseSink</b></a>. The <b>HrAllocAdviseSink</b> function allows its caller to specify a callback function that <b>Notify</b> calls as part of the notification. The callback function conforms to the <a href="function_5mp7.htm"><b>NOTIFCALLBACK</b></a> prototype. Callback functions implemented by clients always return S_OK; callback functions implemented by service providers can return CALLBACK_DISCONTINUE.</p>
<p>
If a callback function returns CALLBACK_DISCONTINUE, MAPI stops sending notifications and returns NOTIFY_CANCELED in the <b>Notify</b> method's <i>lpulFlags</i> parameter. You can assume that the process is inactive and stop generating notifications for that process. If <b>Notify</b> returns zero in <i>lpulFlags</i>, the process is still active and you should continue to send notifications as appropriate.</p>
<p>
When using synchronous notifications, be careful to avoid deadlock situations.</p>
<p>
For more information on the notification process, see <a href="extend_8fvt.htm">Event Notification in MAPI</a>. </p>
<h4>See Also</h4>
<p>
<a href="inter025_56xx.htm"><b>IMAPISupport::Subscribe</b></a>, <a href="inter025_3rhh.htm"><b>IMAPISupport::Unsubscribe</b></a>, <a href="function_5mp7.htm"><b>NOTIFCALLBACK</b></a>, <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a>, <a href="structyp_5cc9.htm"><b>NOTIFKEY</b></a>, <a href="propb_6lkp.htm">PR_RECORD_KEY</a></p>
<p>&nbsp;</p></body>
</HTML>

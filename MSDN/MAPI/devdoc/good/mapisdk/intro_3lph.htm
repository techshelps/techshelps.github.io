<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Selecting a Client Interface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_selecting_a_client_interface"></a>Selecting a Client Interface</h1>
<p>
Client application developers can choose to use one or more of the MAPI client interfaces: Simple MAPI, CMC, MAPI, and the Active Messaging Library. Consider the following factors before making a decision:
<ul>
<li>
Programming language</li>
<li>
Time constraints</li>
<li>
Resource constraints</li>
<li>
Type of client application</li>
</ul>
<p>
The language in which your client application will be written or is written is an important issue. If you are modifying an existing application, you must use a client interface that supports your application's language. If you are writing a new client application, the choice of language depends on your experience with the supported languages and any requirements for interoperability that might exist with other components. All of the client interfaces work with C and C++, whereas Visual Basic developers are limited to using the <a href="glossary_4s2p.htm#_mapi1book_gly_active_messaging_library">Active Messaging Library</a> and <a href="glossary_4s37.htm#_mapi1book_gly_simple_mapi">Simple MAPI</a>. </p>
<p>
The amount of time you need to create or modify your client application is also a consideration. A simple API such as <a href="glossary_4s37.htm#_mapi1book_gly_simple_mapi">Simple MAPI</a> or <a href="glossary_4s2r.htm#_mapi1book_gly_common_messaging_calls">CMC</a> is more appropriate if you have limited time. Resource constraints might also be an issue. To successfully develop a client application, you should have experience with messaging and the appropriate programming language.</p>
<p>
Messaging-enabled and messaging-aware client applications have different requirements than messaging-based applications. Messaging-enabled and messaging-aware applications have fewer and simpler messaging features to implement. Messaging-based applications have more complex messaging requirements because they have more direct contact with and control over the underlying messaging system services like address books, message stores, and transports. These applications often implement a wide variety of messaging features, such as rules processing, automatic forwarding, and supporting Rich Text Format. Shared group applications like schedulers and calendars, work flow and message management applications, electronic mail clients, and rules-based Inbox managers are examples of messaging-based applications. Complex messaging-based applications like these require the <a href="glossary_4s31.htm#_mapi1book_gly_mapi">MAPI</a> client interface. </p>
<p>
The <a href="glossary_4s2p.htm#_mapi1book_gly_active_messaging_library">Active Messaging Library</a> is a good choice for applications that require a moderate amount of messaging support. The Active Messaging Library is an object oriented API used primarily by Visual Basic and Visual C/C++ client application developers. It provides programmable objects that publish properties and methods which can then be managed by Visual Basic and Visual Basic for Applications programs or other Automation controllers. The Active Messaging Library is based on the capabilities provided by Automation. In terms of messaging functionality, it offers more than CMC and Simple MAPI offer, but less than MAPI offers. </p>
<p>
<a href="glossary_4s37.htm#_mapi1book_gly_simple_mapi">Simple MAPI</a> or <a href="glossary_4s2r.htm#_mapi1book_gly_common_messaging_calls">CMC</a> is the best choice for messaging-enabled and messaging-aware applications. These interfaces provide a fast and easy way to build basic applications from scratch or add messaging functionality to existing applications. </p>
<p>&nbsp;</p></body>
</HTML>

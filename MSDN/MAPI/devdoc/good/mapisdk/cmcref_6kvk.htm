<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>cmc_look_up</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_cmc_look_up"></a>cmc_look_up</h2>
<p>
The <b>cmc_look_up</b> function looks up addressing information in a directory provided by a specified service provider.</p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>XCMC.H</td>
</tr>
</table><br>
<pre><code><b>CMC_return_code cmc_look_up (
  CMC_session_id</b><i> session</i><b>,</b>                 
<b>  CMC_recipient FAR *</b><i> recipient_in</i><b>,</b>       
<b>  CMC_flags</b><i> look_up_flags</i><b>,</b>                
<b>  CMC_ui_id</b><i> ui_id</i><b>,</b>                        
<b>  CMC_uint32 FAR *</b><i> count</i><b>,</b>                 
<b>  CMC_recipient FAR * FAR *</b><i> recipient_out</i><b>,</b>   
<b>  CMC_extension FAR *</b><i> look_up_extensions  </i>
<b>)</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>session</i></dt>
<dd>
[in] Opaque session handle that represents a MAPI session object that represents a session with a message service. If the session handle is invalid, the <b>cmc_look_up</b> function returns the <small>cmc_e_invalid_session_id </small>error value. </dd>
<dt>
<i>recipient_in </i></dt>
<dd>
[in] Pointer to an array of <a href="cmcref_5cvo.htm"><b>CMC_recipient</b></a> structures containing recipient data. The <b>cmc_look_up</b> function interprets the array depending on the flags that the client application has set using the <i>look_up_flags</i> parameter. Possible interpretations are as following: 
<ul>
<li>
If the client application has set one of the flags for name resolution, <b>cmc_look_up</b> obtains the name to resolve from the name member of the first structure in the array. The function checks the corresponding name-type member to discover what resolution should be performed. The <b>cmc_look_up </b>function ignores all recipient structures except the first in the array. </li>
<li>
If the client application has set the CMC_LOOKUP_DETAILS_UI flag, the information in the array must resolve to only one recipient. If it does not, <b>cmc_look_up</b> returns C<small>mc_e_ambiguous_recipient</small>. The <b>cmc_look_up </b>function ignores all recipient structures except the first in the array.</li>
<li>
If the client application has set the CMC_LOOKUP_ADDRESSING_UI flag, <b>cmc_look_up</b> displays the recipients specified in the recipient array in the address-list dialog box.</li>
</ul>
</dd>
<dt>
<i>look_up_flags </i></dt>
<dd>
[in] Bitmask of flags. The following flags can be set:
<dl>
<dt>
CMC_COUNTED_STRING_TYPE</dt>
<dd>
The string type the calling application or provider uses for CMC interactions is a CMC_counted_string. If this flag is not set, the function treats all strings as null-terminated strings.</dd>
<dt>
CMC_ERROR_UI_ALLOWED</dt>
<dd>
Displays a dialog box on encountering recoverable errors. If this flag is not set, <b>cmc_look_up</b> does not display a dialog box and returns an error value instead.</dd>
<dt>
CMC_LOGON_UI_ALLOWED</dt>
<dd>
Displays a dialog box to prompt for logon if required. If this flag is not set, <b>cmc_look_up</b> does not display a dialog box and returns an error value if the user does not supply enough information.</dd>
<dt>
CMC_LOOKUP_ADDRESSING_UI</dt>
<dd>
Displays a dialog box to allow creation of a recipient list for addressing a message and general directory browsing. The recipient list passed to the function is the original recipient list for the dialog box. The function returns the list of recipients created by the user. This flag is optional for implementations to support.</dd>
<dt>
CMC_LOOKUP_DETAILS_UI</dt>
<dd>
Displays a details dialog box for the recipient pointed to in the <i>recipient_in</i> parameter. This dialog box only acts on the first recipient in the list. If the recipient name indicated resolves to more than one address, <b>cmc_look_up</b> does not display the details dialog box and returns <small>cmc_e_ambiguous_recipient</small>.</dd>
<dt>
CMC_LOOKUP_RESOLVE_IDENTITY</dt>
<dd>
Returns a recipient record for the identity of the current user of the message service. If no unique identity can be determined, the implementation carries out ambiguous name resolution to determine the address of the current user.</dd>
<dt>
CMC_LOOKUP_RESOLVE_PREFIX_SEARCH</dt>
<dd>
The search method should be by prefix. In a prefix search, all names matching the prefix string, beginning at the first character of the name, are considered matches. If this flag is not set, the search method should be exact-match. CMC implementations must support simple prefix searching. The availability of wildcard or substring searches is optional.</dd>
<dt>
CMC_LOOKUP_RESOLVE_UI</dt>
<dd>
Attempts to resolve ambiguous names by presenting a name-resolution dialog box to the user. If this flag is not set, resolutions that do not result in a single name return the error value CMC_E_AMBIGUOUS_RECIPIENT for message services that require names to resolve to a single address. Message services that can return multiple addresses can return a list of addresses if the <i>count</i> parameter is non-null. The <b>name_type</b> field in the <i>recipient_out</i> parameter can also be set on input as a hint to aid in resolution of the name. Some CMC implementations might not support this flag. The CMC_LOOKUP_RESOLVE_UI flag is set only when the CMC_LOOKUP_RESOLVE_PREFIX_SEARCH flag is also set.</dd>
</dl>
</dd>
<dt>
<i>ui_id</i></dt>
<dd>
[in] Handle of a dialog box for <b>cmc_look_up</b> to present to help resolve processing questions. </dd>
<dt>
<i>count </i></dt>
<dd>
[in or out] Contains a maximum name count. On input, this parameter specifies a pointer to the maximum number of names for which <b>cmc_look_up</b> can find addressing information. A value of zero indicates no maximum. 
<p>
On output, the <i>count</i> parameter specifies the location to which <b>cmc_look_up</b> writes the number of names that it actually writes to the location indicated by the <i>recipient_out</i> parameter. If no names are written, <b>cmc_look_up </b>writes zero to the <i>count</i> parameter. 
</dd>
<dt>
<i>recipient_out</i></dt>
<dd>
[out] Pointer to the location to which <b>cmc_look_up</b> writes an array of one or more <a href="cmcref_5cvo.htm"><b>CMC_recipient</b></a> structures containing addressing details for the recipients in the array passed in the <i>recipient_in</i> parameter. </dd>
<dt>
<i>look_up_extensions </i></dt>
<dd>
[in, out] Pointer to an array of <a href="cmcref_1woe.htm"><b>CMC_extension</b></a> structures specifying function extensions. On input, this array contains MAPI extensions to the standard <b>cmc_look_up</b> function. A value of NULL for the <i>look_up_extensions </i>parameter indicates that the client application has no extensions for <b>cmc_look_up</b> and is expecting no extensions. 
<p>
On output, <b>cmc_look_up</b> writes to the array new information about the lookup operation. It writes NULL if it generates no output extensions. 

</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
CMC_E_AMBIGUOUS_RECIPIENT</dt>
<dd>
The recipient name was ambiguous. Multiple matches were found.</dd>
<dt>
CMC_E_FAILURE</dt>
<dd>
There was a general failure that does not fit the description of any other return value.</dd>
<dt>
CMC_E_INSUFFICIENT_MEMORY</dt>
<dd>
Insufficient memory was available to complete the requested operation.</dd>
<dt>
CMC_E_INVALID_FLAG</dt>
<dd>
A flag set using a flags parameter was invalid.</dd>
<dt>
CMC_E_INVALID_PARAMETER</dt>
<dd>
A function parameter was invalid. </dd>
<dt>
CMC_E_INVALID_SESSION_ID</dt>
<dd>
The specified session handle is invalid or no longer valid — for example, after logging off.</dd>
<dt>
CMC_E_INVALID_UI_ID</dt>
<dd>
The specified user-interface identifier is invalid or no longer valid.</dd>
<dt>
CMC_E_LOGON_FAILURE</dt>
<dd>
The service, user name, or password specified was invalid, so logon cannot be completed.</dd>
<dt>
CMC_E_NOT_SUPPORTED</dt>
<dd>
The current implementation does not support the operation requested.</dd>
<dt>
CMC_E_RECIPIENT_NOT_FOUND</dt>
<dd>
One or more of the specified recipients were not found.</dd>
<dt>
CMC_E_UNSUPPORTED_DATA_EXT</dt>
<dd>
The current implementation does not support the data extension requested.</dd>
<dt>
CMC_E_UNSUPPORTED_FLAG</dt>
<dd>
The current implementation does not support the flag requested.</dd>
<dt>
CMC_E_UNSUPPORTED_FUNCTION_EXT</dt>
<dd>
The current implementation does not support the function extension requested.</dd>
<dt>
CMC_E_USER_CANCEL</dt>
<dd>
The operation was canceled by the user.</dd>
<dt>
CMC_E_USER_NOT_LOGGED_ON</dt>
<dd>
The user was not logged on and the CMC_LOGON_UI_ALLOWED flag was not set.
</dd>
</dl>
<h4>Remarks</h4>
<p>
A client application calls the <b>cmc_look_up</b> function to resolve a display name to a messaging address or to prompt the user to choose among multiple resolved names. A client can also use this function to display a dialog box for creation of recipient lists or to display recipient details.</p>
<p>
The <b>cmc_look_up</b> function can write multiple addresses. Before it writes addressing information, it must allocate memory for the structure array to contain the information. When this memory is no longer needed, the client application should free the entire array with a call to <a href="cmcref_5z51.htm"><b>cmc_free</b></a>. </p>
<h4>See Also</h4>
<p>
<a href="cmcref_1woe.htm"><b>CMC_extension</b></a>,<b> <a href="cmcref_5z51.htm">cmc_free</a></b>,<b> <a href="cmcref_5cvo.htm">CMC_recipient</a></b> </p>
<p>&nbsp;</p></body>
</HTML>

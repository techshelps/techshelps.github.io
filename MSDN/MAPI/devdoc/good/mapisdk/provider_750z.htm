<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Service Provider Basics</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_service_provider_basics"></a>Service Provider Basics</h1>
<p>
There are three common types of service providers: 
<ul>
<li>
Address book providers</li>
<li>
Message store providers</li>
<li>
Transport providers</li>
</ul>
<p>
Address book and message store providers have many similarities. They register a unique identifier with MAPI that they use for constructing entry identifiers for their objects. They provide a hierarchy of objects and properties that clients can access and manipulate. For their container objects, they support a hierarchy table and a contents table. They support event notification on these tables and optionally on individual objects so that clients can be informed of changes that occur during the session. When operations become lengthy, they can display a progress indicator to inform the user of the operation's status. Clients can communicate with address book and message store providers either indirectly through MAPI using the <b>IAddrBook</b> and <b>IMAPISession</b> interfaces or directly using one of the following service provider interfaces:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Address book provider interfaces</th>
<th align=left width=52%>Message store provider interfaces</th>
</tr>
<tr valign=top>
<td width=48%><a href="inter003_4gxe.htm"><b>IABContainer</b></a></td>
<td width=52%><a href="inter031_1jg0.htm"><b>IMsgStore</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="inter008_5tf6.htm"><b>IDistList</b></a></td>
<td width=52%><a href="inter013_9ohe.htm"><b>IMAPIFolder</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="inter009_3sc0.htm"><b>IMailUser</b></a></td>
<td width=52%><a href="inter029_525s.htm"><b>IMessage</b></a></td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%><a href="inter007_8aeo.htm"><b>IAttach</b></a></td>
</tr>
</table><br>
<p>
Transport providers differ from address book and message store providers in the way they communicate with MAPI and with clients. Transport providers typically wait for MAPI to prompt them for information rather than initiate communication. Unlike the other providers, transport providers do not support a variety of objects and tables that are commonly accessed by clients. However, they do support a status object, as do all service providers, and publish its properties in the status table. Whereas address book and message store providers call <a href="inter025_91no.htm"><b>IMAPISupport::SetProviderUID</b></a> to register unique identifiers for constructing their entry identifiers, transport providers call <a href="inter042_0xbn.htm"><b>IXPLogon::AddressTypes</b></a> to register unique identifiers as well as address types for assuming responsibility for the delivery of particular messages. </p>
<p>
Another type of service provider that developers can create is a messaging hook provider. Because messaging hook providers are active processes, they more closely resemble client extensions to the MAPI spooler than a type of service provider. The MAPI spooler is the only process not driven directly by client actions. Another difference between a messaging hook provider and the other types of service providers is that a messaging hook provider uses a session object instead of a support object. MAPI provides the other types of service providers with a customized support object.</p>
<p>
Your service provider should have three header files: one public header file and two internal files. Use the public header file for configuration and for documenting properties and their values. Include in one of the internal header files all the necessary public MAPI headers; this header file should be included in all of your service provider source files. Use the other internal file to define resource identifiers.</p>
<p>
Assign file names for your provider's executable files that are six characters or less in length. This is to allow a suffix to be appended to the end of the name to identify the platform. </p>
<p>
Address book, message store, and transport providers perform the following tasks:
<ul>
<li>
Supply an entry point function. For information about implementing an entry point function, see <a href="provider_7x9q.htm">Implementing a Service Provider Entry Point Function</a>.</li>
<li>
Supply a provider and logon object to handle logon and initialization. For more information about implementing these objects, see <a href="provider_0r76.htm">Starting a Service Provider</a>.</li>
<li>
If the provider belongs to a message service, supply a message service entry point function. For more information about implementing message services, see <a href="provider_6mxx.htm">Implementing a Message Service</a>.</li>
<li>
Support configuration by implementing a property sheet. For more information about property sheets, see <a href="provider_65o4.htm">Implementing a Property Sheet</a>.</li>
<li>
Implement a status object and support the status table. For an overview of status objects and the status table, see <a href="extend_7rzn.htm">Status Objects</a> and <a href="tables_1rad.htm">Status Table</a>. For more information about implementing a status object, see <a href="provider_1gz8.htm">Implementing a Status Object</a>.</li>
<li>
Handle shut down.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

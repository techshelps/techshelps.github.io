<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing MAPI Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_implementing_mapi_objects"></a>Implementing MAPI Objects</h1>
<p>
MAPI objects are implemented using C++ classes or C data structures, depending on the language and the API set a client or service provider is using. Service providers are written in C or C++ with the MAPI service provider interface; client applications can use any of the three supported languages and the four supported client interfaces. If possible, clients and service providers using the object-oriented programming interface should use C++. </p>
<p>
C++ is the preferred choice because MAPI is an object oriented technology and C++ lends itself more readily to object oriented development. The resulting code is simpler and more straightforward making it easier to maintain. Also, the MAPI documentation is written primarily for C++ developers; all of the syntax descriptions for the MAPI interface methods in the<i> MAPI Programmer's Reference</i> are in C++.</p>
<p>
When a MAPI object is implemented, a client or service provider creates code for all of the interface methods, code for any private methods that are specific to the implementation, and code to support private data members for maintaining state information. The code for the interface methods must follow the specifications published by MAPI that document expected behavior. </p>
<p>
There are many macros in the MAPIDEFS.H header file and OLE header files that clients and service providers in either language can use to help them with their definitions of MAPI objects. For example, there is a macro to define the methods of each of the MAPI interfaces. The macro to define the methods of <b>IUnknown</b> appears in MAPIDEFS.H as follows:</p>
<pre><code>#define MAPI_IUNKNOWN_METHODS(IPURE)          \
    MAPIMETHOD(QueryInterface)                \
        (THIS_ REFIID riid, LPVOID FAR * ppvObj) IPURE;    \
    MAPIMETHOD_(ULONG,AddRef)  (THIS) IPURE;               \
    MAPIMETHOD_(ULONG,Release) (THIS) IPURE;   \
  
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FLATENTRYLIST</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_flatentrylist"></a>FLATENTRYLIST</h2>
<p>
The <b>FLATENTRYLIST</b> structure contains an array of <a href="structyp_7wjd.htm"><b>FLATENTRY</b></a> structures.  </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPIDEFS.H</td>
</tr>
<tr valign=top>
<td width=48%>Related macros:</td>
<td width=52%><a href="structyp_7v3o.htm"><b>CbFLATENTRYLIST</b></a><b><br>
<a href="structyp_6wqc.htm">CbNewFLATENTRYLIST</a></b></td>
</tr>
</table><br>
<pre><code>typedef struct 
{ 
     ULONG     cEntries; 
     ULONG     cbEntries; 
     BYTE      abEntries[MAPI_DIM]; 
} FLATENTRYLIST, FAR *LPFLATENTRYLIST; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>cEntries</b></dt>
<dd>
Count of <a href="structyp_7wjd.htm"><b>FLATENTRY</b></a> structures in the array described by the <b>abEntries </b>member.</dd>
<dt>
<b>cbEntries</b></dt>
<dd>
Count of bytes in the array described by <b>abEntries</b>.</dd>
<dt>
<b>abEntries</b></dt>
<dd>
Byte array containing one or more <b>FLATENTRY</b> structures, arranged end to end.
</dd>
</dl>
<h4>Remarks</h4>
<p>
In the <b>abEntries</b> array, each <b>FLATENTRY</b> structure is aligned on a naturally aligned boundary. Extra bytes are included as padding to ensure natural alignment between any two <b>FLATENTRY </b>structures. The first <b>FLATENTRY</b> structure in the array is always aligned correctly because the offset of the <b>abEntries</b> member is 8. To compute the offset of the next structure, use the size of the first entry rounded up to the next multiple of 4. Use the <a href="structyp_6hdl.htm"><b>CbFLATENTRY</b></a> macro to compute the size of a <b>FLATENTRY</b> structure.</p>
<p>
For example, the second <b>FLATENTRY </b>structure starts at an offset made up of the offset of the first entry plus the length of the first entry rounded to the next four bytes. The length of the first entry is the length of its <b>cb</b> member plus the length of its <b>abEntry</b> member.</p>
<p>
The following code sample indicates how to compute offsets in a <b>FLATENTRYLIST</b> structure. Assume that <i>lpFlatEntry</i> is a pointer to the first structure in the list.</p>
<pre><code>(offsetof(lpFlatEntry-&gt;ab)         // for example, 4
    + lpFlatEntry-&gt;cb              // size of <i>lpFlatEntry-&gt;ab</i>
    + 4) &amp; ~3                      // round to next 4 byte boundary</code></pre>
<h4>See Also</h4>
<p>
<a href="groups_1iyb.htm">ID Structures</a>, <a href="structyp_7wjd.htm"><b>FLATENTRY</b></a>, <a href="propb_3eib.htm">PR_REPLY_RECIPIENT_ENTRIES</a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_error_handling"></a>Error Handling</h1>
<p>
Success, warning, and error values are returned using a 32-bit number known as a result handle, or <a href="structyp_4c8k.htm">HRESULT</a><i>.</i> An HRESULT is really not a handle to anything; it is merely a 32-bit value with several fields encoded in the value. A zero result indicates success and a nonzero result indicates failure.</p>
<p>
HRESULT values work differently depending on the platform your client or service provider is using. On 16-bit platforms, an HRESULT is generated from a 32-bit value known as a status code, or <a href="structyp_1eg5.htm">SCODE</a>. On 32-bit platforms, an HRESULT is the same as an SCODE; they are synonymous data types. MAPI on 32-bit platforms works solely with HRESULT values.</p>
<p>
SCODEs on 16-bit platforms are divided into four fields: a severity code, a context field, a facility field, and an error code. The format of an SCODE on a 16-bit platform is shown below; the numbers indicate bit positions.</p>
<p>
<img src="images/amapi_48.gif" border=0></p>
<p>
HRESULTs on 32-bit platforms have the following format.</p>
<p>
<img src="images/amapi_49.gif" border=0></p>
<p>
The severity code in the 16-bit SCODE and the high order bit in the HRESULT indicate whether the return value represents success or failure. If set to zero, the value indicates success. If set to 1, it indicates failure.</p>
<p>
In the 16-bit version of the SCODE, the context field is reserved as are the R, C, N, and r bits in the HRESULT.</p>
<p>
The facility field in both versions indicates the area of responsibility for the error. There are several facilities, but the vast majority of MAPI errors use FACILITY_ITF to represent interface errors. The most common facilities that are currently used are: FACILITY_NULL, FACILITY_ITF, FACILITY_DISPATCH, FACILITY_RPC, and FACILITY_STORAGE. If new facilities are necessary, Microsoft allocates them because they need to be unique. The following table describes the various facility fields.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%>Facility</th>
<th align=left width=68%>Description</th>
</tr>
<tr valign=top>
<td width=32%>FACILITY_NULL</td>
<td width=68%>For broadly applicable common status codes such as S_OK or E_OUTOF_MEMORY; the value is zero.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_ITF</td>
<td width=68%>For most status codes returned from interface methods; the value is defined by the interface. That is, two SCODE or HRESULT values with exactly the same 32-bit value returned from two different interfaces might have different meanings.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_DISPATCH</td>
<td width=68%>For late binding <b>IDispatch</b> interface errors.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_RPC</td>
<td width=68%>For status codes returned from remote procedure calls.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_STORAGE</td>
<td width=68%>For status codes returned from <b>IStorage</b> or <b>IStream</b> method calls relating to structured storage. Status codes with code (lower 16 bits) values in the range of MS-DOS error codes (that is, less than 256) have the same meaning as the corresponding MS-DOS errors.</td>
</tr>
</table><br>
<p>
The code field is a unique number that is assigned to represent the error or warning.</p>
<p>&nbsp;</p></body>
</HTML>

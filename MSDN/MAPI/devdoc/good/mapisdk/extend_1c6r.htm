<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Thread-Safe Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_using_thread_safe_objects"></a>Using Thread-Safe Objects</h2>
<p>
Client applications and service providers can assume that objects used directly or as callbacks are always thread-safe except in the following cases:
<ul>
<li>
A transport provider's status object obtained through a client call to <a href="inter023_146x.htm"><b>IMAPISession::OpenEntry</b></a> with an entry identifier from the provider's status table row.</li>
<li>
All MAPI form objects obtained through a client call to <a href="function_7liq.htm"><b>MAPIOpenFormMgr</b></a>. Form objects obey apartment model rules and clients must use them and all objects contained by them only on the thread that created them.</li>
</ul>
<p>
When a client accesses a transport provider's row in the status table that includes the entry identifier of the associated status object, the client can call <b>OpenEntry</b> with that entry identifier to open the status object. This status object is not thread-safe because transport providers run in the context of the MAPI spooler and do not maintain a separate context for their status object. The status object obeys apartment model rules and clients must use it only on the thread that created it. </p>
<p>
A client must also invoke <a href="function_6ycl.htm"><b>MAPIInitialize</b></a> on every thread before using any MAPI objects and <a href="function_6pk5.htm"><b>MAPIUninitialize</b></a> when that use is complete. These calls should be made even if the objects to be used are passed to the thread from an external source. <b>MAPIInitialize</b> and <b>MAPIUninitialize</b> can be called from anywhere except from within a Win32 <b>DLLEntryPoint</b> function, a function that is invoked by the system when processes and threads are initialized and terminated, or upon calls to the <b>LoadLibrary</b> and <b>FreeLibrary</b> functions. Clients should not need to use <b>DLLEntryPoint</b> functions because the MAPI service provider interface has its own initialization and deinitialization entry points.</p>
<p>
Indirect use objects should never be assumed to be thread-safe. Indirect use objects are returned by methods that require destination interface pointers as input parameters. Examples of such methods are <b>IMAPIProp::CopyTo</b> and <b>CopyProps</b>, <b>IMAPIFolder::CopyFolder</b> and <b>CopyMessage</b>, and <b>IMsgServiceAdmin::CopyMsgService</b>. If a service provider wants to call such an object from a thread other than the one on which it was passed, the provider is responsible for explicitly marshaling the object.</p>
<p>&nbsp;</p></body>
</HTML>

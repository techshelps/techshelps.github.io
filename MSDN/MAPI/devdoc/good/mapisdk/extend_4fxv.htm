<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Profiles</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_profiles"></a>Profiles</h1>
<p>
A profile stores information about service providers and message services that are installed on a workstation. For every session, a client at logon time selects one profile that describes the providers and services to be used. A client can choose from a collection of profiles and, if desired, establish one as the default. The default profile is the profile that is selected automatically when a client starts a session and has not explicitly specified a profile.</p>
<p>
Profiles are divided into sections and it is these sections that clients and service providers access to display profile properties to users or to make configuration changes. A profile section is a MAPI object that implements the <a href="inter036_11v4.htm"><b>IProfSect</b></a> interface, an interface that derives from <b>IMAPIProp</b> and has no additional methods. Its purpose is solely to manipulate the properties of a profile section. To retrieve an <b>IProfSect</b> pointer to a particular profile section, clients and service providers call the following methods:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>Clients can call:</td>
<td width=59%><a href="inter023_4ofi.htm"><b>IMAPISession::OpenProfileSection</b></a></td>
</tr>
<tr valign=top>
<td width=41%>Service providers can call:</td>
<td width=59%><a href="inter025_6rvy.htm"><b>IMAPISupport::OpenProfileSection</b></a></td>
</tr>
<tr valign=top>
<td width=41%>Either clients or providers can call:</td>
<td width=59%><a href="inter038_5oku.htm"><b>IProviderAdmin::OpenProfileSection</b></a></td>
</tr>
</table><br>
<p>
Profiles are organized hierarchically much like the MAPISVC.INF file. At the top of the hierarchy, there are profile sections that contain information relevant to the profile. The middle level includes sections that contain information about a particular message service and the lower level includes sections that contain information about one of the service providers in a message service. </p>
<p>
Every profile has several required properties that are stored in one or more of the sections of the profile. For example, every profile has the <a href="propb_48it.htm">PR_PROFILE_NAME</a> and <a href="propb_960p.htm">PR_SEARCH_KEY</a> properties. A profile's search key is set to the value defined in MAPIGUID.H as MUID_PROFILE_INSTANCE and is always guaranteed to be unique among all profiles. Whereas it is possible for two profiles to have the same name, it is not possible for two profiles to have the same search key. Search keys should be treated as binary data rather than data of any particular type.</p>
<p>
Message store providers are required to include their message stores' <a href="propa_1yjp.htm">PR_DISPLAY_NAME</a> property in the profile sections for the profile and for the message store provider and keep these entries synchronized. When a message store is created, the provider sets PR_DISPLAY_NAME based on the value stored in these profile sections.</p>
<p>
There are two major differences between profile sections and other objects that inherit from <b>IMAPIProp</b>:
<ul>
<li>
Profile sections do not support transactions.</li>
<li>
Profile sections do not support named properties, returning MAPI_E_NO_SUPPORT from their <a href="inter022_49f7.htm"><b>IMAPIProp::GetIDsFromNames</b></a> and <a href="inter022_7ib7.htm"><b>IMAPIProp::GetNamesFromIDs</b></a> implementations.</li>
</ul>
<p>
Because profile sections do not support transactions, any changes made with calls to <b>IMAPIProp::CopyProps</b>, <b>CopyTo</b>, or <b>SetProps</b> immediately take effect. Clients and service providers can call a profile section's <b>IMAPIProp::SaveChanges</b> method and it will succeed, but it has no affect on the profile section data. Having changes occur immediately can affect how service providers implement the property sheets that clients use to display profile properties to users. Service providers that want users to be able to postpone or undo changes must implement their property sheets with copies of profile sections rather than the real sections. With copies, users can make changes and later cancel those changes, leaving the original profile sections untouched. </p>
<p>
The order in which information appears in a profile affects how MAPI configures resources and makes assignments in a session. The following assignments are affected by profile order:
<ul>
<li>
Default message store</li>
<li>
Personal address book</li>
<li>
Default message store search path</li>
<li>
Default address book search path</li>
<li>
Transport provider order</li>
</ul>
<p>
MAPI sets the default message store to be the first message store in the profile that has the STATUS_DEFAULT_STORE flag set in its <a href="propb_4u5v.htm">PR_RESOURCE_FLAGS</a> property, indicating that it is capable of being the default store. Clients can override this setting by calling <a href="inter023_3u91.htm"><b>IMAPISession::SetDefaultStore</b></a>. </p>
<p>
MAPI sets the personal address book (PAB) to be the first container that has the AB_MODIFIABLE and AB_RECIPIENTS flags set in its <a href="propa_3m7n.htm">PR_CONTAINER_FLAGS</a> property, indicating that it can store messaging users and distribution lists. Clients can override this setting by calling <a href="inter006_6ftu.htm"><b>IAddrBook::SetPAB</b></a>.</p>
<p>
After assigning the PAB, MAPI sets the default address book directory to the first container that has not been assigned as the PAB and has the AB_RECIPIENTS flag set in its PR_CONTAINER_FLAGS property. If the PAB is the only address book container in the profile that is able to hold recipients, then it is assigned as the default directory. Clients can set this directory explicitly by calling <a href="inter006_3hki.htm"><b>IAddrBook::SetDefaultDir</b></a>.</p>
<p>
MAPI assigns the default search path for the address book to be the PAB followed by each directory that has these property settings:
<ul>
<li>
<a href="propa_7s6d.htm">PR_DISPLAY_TYPE</a> set to DT_GLOBAL.</li>
<li>
<a href="propa_3m7n.htm">PR_CONTAINER_FLAGS</a> set to AB_RECIPIENTS.</li>
<li>
PR_CONTAINER_FLAGS not set to AB_NOT_DEFAULT.</li>
</ul>
<p>
If there are no containers of type DT_GLOBAL, MAPI assigns the default path to be the PAB and the default directory. Clients can set the default path by calling <a href="inter006_86w8.htm"><b>IAddrBook::SetSearchPath</b></a>.</p>
<p>
MAPI creates a transport order for handling outgoing and incoming messages. When more than one transport provider has registered for a message of a particular type, MAPI uses this order to determine which provider should handle the message. MAPI sets the transport order to be the order in which the transport providers were added to the profile with one exception. The transports that set the STATUS_XP_PREFER_LAST flag in their PR_RESOURCE_FLAGS property are placed last in the order. Clients can set the transport order by calling <a href="inter030_0ysy.htm"><b>IMsgServiceAdmin::MsgServiceTransportOrder</b></a>.</p>
<p>
These guidelines for ordering service providers and message services might sometimes conflict. If there is a conflict, include C or C++ code to resolve the conflict. You can use the Delivery and Addressing pages of the Mail and Fax Control Panel applet to inspect a profile that you have created to determine if the providers have been configured as expected.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HPProviderInit</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_hpproviderinit"></a>HPProviderInit</h2>
<p>
The <b>HPProviderInit</b> function initializes a messaging hook provider for operation. </p>
<h4>Quick Info </h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file: </td>
<td width=52%>MAPIHOOK.H </td>
</tr>
<tr valign=top>
<td width=48%>Implemented by: </td>
<td width=52%>Messaging hook providers </td>
</tr>
<tr valign=top>
<td width=48%>Called by: </td>
<td width=52%>MAPI </td>
</tr>
</table><br>
<pre><code><b>HRESULT HPProviderInit(
  LPMAPISESSION</b><i> lpSession</i><b>,</b>         
<b>  HINSTANCE</b><i> hInstance</i><b>,</b>             
<b>  LPALLOCATEBUFFER</b><i> lpAllocateBuffer</i><b>,</b>   
<b>  LPALLOCATEMORE</b><i> lpAllocateMore</i><b>,</b>   
<b>  LPFREEBUFFER</b><i> lpFreeBuffer</i><b>,</b>       
<b>  LPMAPIUID</b><i> lpSectionUID</i><b>,</b>          
<b>  ULONG</b><i> ulFlags</i><b>,</b>                   
<b>  LPSPOOLERHOOK FAR *</b><i> lppSpoolerHook  </i>
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>lpSession </i></dt>
<dd>
[in] Pointer to the object representing the MAPI spooler session. Because the messaging hook provider runs in the spooler session, all its components must be trusted code, that is, thoroughly debugged code that does not fail or compromise the spooler's operation. The messaging hook provider should call the <b>IUnknown::AddRef</b> method on the session object. </dd>
<dt>
<i>hInstance </i></dt>
<dd>
[in] The instance of the messaging hook provider's dynamic-link library (DLL) that MAPI used when it linked. </dd>
<dt>
<i>lpAllocateBuffer </i></dt>
<dd>
[in] Pointer to the <a href="function_8z3m.htm"><b>MAPIAllocateBuffer</b></a> function, to be used where required by MAPI to allocate memory. </dd>
<dt>
<i>lpAllocateMore </i></dt>
<dd>
[in] Pointer to the <a href="function_11wl.htm"><b>MAPIAllocateMore</b></a> function, to be used where required by MAPI to allocate additional memory. </dd>
<dt>
<i>lpFreeBuffer </i></dt>
<dd>
[in] Pointer to the <a href="function_85yq.htm"><b>MAPIFreeBuffer</b></a> function, to be used where required by MAPI to free memory. </dd>
<dt>
<i>lpSectionUID </i></dt>
<dd>
[in] Pointer to the <a href="structyp_3p9g.htm"><b>MAPIUID</b></a> of the messaging hook provider's profile section. <b>HPProviderInit</b> can open this identifier using a session-level call to the <a href="inter025_6rvy.htm"><b>IMAPISupport::OpenProfileSection</b></a> method. However, because MAPI and the MAPI spooler control some properties in the session, the provider should use the range of provider-specific property identifiers for storage and retrieval of profile section properties. </dd>
<dt>
<i>ulFlags </i></dt>
<dd>
[in] Bitmask of flags used to control whether the messaging hook provider is called for incoming or outgoing messages. The following flags can be set: 
<dl>
<dt>
HOOK_INBOUND </dt>
<dd>
The messaging hook provider processes messages inbound to the MAPI spooler. </dd>
<dt>
HOOK_OUTBOUND </dt>
<dd>
The messaging hook provider processes messages outbound from the MAPI spooler. </dd>
<dt>
MAPI_NT_SERVICE </dt>
<dd>
The provider is being loaded in the context of a Windows NT service, a special type of process without access to any user interface. </dd>
</dl>
</dd>
<dt>
<i>lppSpoolerHook </i></dt>
<dd>
[out] Pointer to a pointer to the initialized messaging hook provider object. 
</dd>
</dl>
<h4>Return Values </h4>
<dl>
<dt>
S_OK </dt>
<dd>
The call succeeded and has returned the expected value or values. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
MAPI calls the entry point function <b>HPProviderInit</b> to initialize a messaging hook provider following a client logon. <b>HPProviderInit</b> is called once for each messaging hook provider specified in the client's profile. </p>
<h4>Notes to Implementers </h4>
<p>
A messaging hook provider must implement <b>HPProviderInit</b> as an entry point function in the provider's DLL. The implementation must be based on the <b>HPPROVIDERINIT</b> function prototype, also specified in MAPIHOOK.H. MAPI defines <b>HPPROVIDERINIT</b> to use the standard MAPI initialization call type, STDMAPIINITCALLTYPE, which causes <b>HPProviderInit</b> to follow the CDECL calling convention. An advantage of CDECL is that calls can be attempted even if the number of calling parameters does not match the number of defined parameters. </p>
<p>
A provider can be initialized multiple times as a result of appearing in several profiles in simultaneous use or of appearing more than once in the same profile. Because the provider object contains context, <b>HPProviderInit</b> must return a different provider object in <i>lppSpoolerHook</i> for each initialization, even for multiple initializations in the same process. </p>
<p>
The messaging hook provider should use the functions pointed to by <i>lpAllocateBuffer</i>, <i>lpAllocateMore</i>, and <i>lpFreeBuffer</i> for most memory allocation and deallocation. In particular, the provider must use these functions to allocate memory for use by client applications when calling object interfaces such as <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> and <a href="inter026_7wkz.htm"><b>IMAPITable::QueryRows</b></a>. </p>
<p>
If the provider needs to use mutex objects or critical sections, it should set them up during initialization using <b>HPProviderInit</b>. A mutex object should be owned by the message-hook provider object created by this function. </p>
<p>
For more information on writing <b>HPProviderInit</b>, see <a href="hookppr_13zn.htm">Implementing <b>HPProviderInit</b> for Hook Providers</a>. For more information on entry point functions, see <a href="provider_7x9q.htm">Implementing a Service Provider Entry Point Function</a>. </p>
<h4>See Also </h4>
<p>
<a href="groups_7qb7.htm">Provider Initialization Functions</a>, <a href="function_1sqc.htm"><b>ABProviderInit</b></a>, <a href="inter023_64ry.htm"><b>IMAPISession : IUnknown</b></a>,<b> <a href="function_7zxw.htm">MSProviderInit</a></b>, <a href="function_0wc4.htm"><b>XPProviderInit</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPropValue</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_spropvalue"></a>SPropValue</h2>
<p>
The <b>SPropValue </b>structure describes a MAPI property.</p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPIDEFS.H</td>
</tr>
<tr valign=top>
<td width=48%>Related macros:</td>
<td width=52%><a href="structyp_30it.htm"><b>CHANGE_PROP_TYPE</b></a><b><br>
<a href="structyp_00xc.htm">MVI_PROP</a><br>
<a href="structyp_0dgk.htm">PROP_ID</a><br>
<a href="structyp_4w4n.htm">PROP_TAG</a><br>
<a href="structyp_58md.htm">PROP_TYPE</a></b></td>
</tr>
</table><br>
<pre><code>typedef struct _SPropValue 
{ 
     ULONG     ulPropTag; 
     ULONG     dwAlignPad; 
     union _PV  Value; 
} SPropValue, FAR *LPSPropValue; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>ulPropTag</b></dt>
<dd>
Property tag for the property. Property tags are 32-bit unsigned integers consisting of the property's unique identifier in the high-order 16 bits and the property's type in the low-order 16 bits.</dd>
<dt>
<b>dwAlignPad</b></dt>
<dd>
Reserved for MAPI; do not use. </dd>
<dt>
<b>Value</b></dt>
<dd>
Union of data values, the specific value dictated by the property type. The following table lists for each property type, the member of the union that should be used and its associated data type.
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=43%>Property type</th>
<th align=left width=23%>Value</th>
<th align=left width=34%>Data type of Value</th>
</tr>
<tr valign=top>
<td width=43%>PT_I2 or PT_SHORT</td>
<td width=23%><b>i</b></td>
<td width=34%>short int</td>
</tr>
<tr valign=top>
<td width=43%>PT_I4 or PT_LONG (signed)</td>
<td width=23%><b>I</b></td>
<td width=34%>LONG</td>
</tr>
<tr valign=top>
<td width=43%>PT_I4 or PT_LONG (unsigned)</td>
<td width=23%><b>ul</b></td>
<td width=34%>ULONG</td>
</tr>
<tr valign=top>
<td width=43%>PT_R4 or PT_FLOAT</td>
<td width=23%><b>flt</b></td>
<td width=34%>float</td>
</tr>
<tr valign=top>
<td width=43%>PT_R8 or PT_DOUBLE</td>
<td width=23%><b>dbl</b></td>
<td width=34%>double</td>
</tr>
<tr valign=top>
<td width=43%>PT_BOOLEAN</td>
<td width=23%><b>b</b></td>
<td width=34%>unsigned short int</td>
</tr>
<tr valign=top>
<td width=43%>PT_CURRENCY</td>
<td width=23%><b>cur</b></td>
<td width=34%><a href="structyp_7int.htm"><b>CURRENCY</b></a> </td>
</tr>
<tr valign=top>
<td width=43%>PT_APPTIME</td>
<td width=23%><b>at</b></td>
<td width=34%>double</td>
</tr>
<tr valign=top>
<td width=43%>PT_SYSTIME</td>
<td width=23%><b>ft</b></td>
<td width=34%><a href="structyp_0ld1.htm"><b>FILETIME</b></a> </td>
</tr>
<tr valign=top>
<td width=43%>PT_STRING8</td>
<td width=23%><b>lpszA</b></td>
<td width=34%>LPSTR</td>
</tr>
<tr valign=top>
<td width=43%>PT_BINARY</td>
<td width=23%><b>bin</b></td>
<td width=34%>BYTE [array] </td>
</tr>
<tr valign=top>
<td width=43%>PT_UNICODE</td>
<td width=23%><b>lpszW</b></td>
<td width=34%>LPWSTR</td>
</tr>
<tr valign=top>
<td width=43%>PT_CLSID</td>
<td width=23%><b>lpguid</b></td>
<td width=34%>LPGUID </td>
</tr>
<tr valign=top>
<td width=43%>PT_I8 or PT_LONGLONG</td>
<td width=23%><b>li</b></td>
<td width=34%><b>LARGE_INTEGER</b> </td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_I2</td>
<td width=23%><b>MVi</b></td>
<td width=34%><a href="structyp_8jll.htm"><b>SShortArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_LONG</td>
<td width=23%><b>MVI</b></td>
<td width=34%><a href="structyp_30e1.htm"><b>SLongArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_R4</td>
<td width=23%><b>MVflt</b></td>
<td width=34%><a href="structyp_3fsp.htm"><b>SRealArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_DOUBLE</td>
<td width=23%><b>MVdbl</b></td>
<td width=34%><a href="structyp_25yx.htm"><b>SDoubleArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_CURRENCY</td>
<td width=23%><b>MVcur</b></td>
<td width=34%><a href="structyp_4shl.htm"><b>SCurrencyArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_APPTIME</td>
<td width=23%><b>MVat</b></td>
<td width=34%><a href="structyp_8wmx.htm"><b>SAppTimeArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_SYSTIME </td>
<td width=23%><b>MVft</b></td>
<td width=34%><a href="structyp_5bg9.htm"><b>SDateTimeArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_BINARY</td>
<td width=23%><b>MVbin</b></td>
<td width=34%><a href="structyp_5k8p.htm"><b>SBinaryArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_STRING8</td>
<td width=23%><b>MVszA</b></td>
<td width=34%><a href="structyp_1kqh.htm"><b>SLPSTRArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_UNICODE</td>
<td width=23%><b>MVszW</b></td>
<td width=34%><a href="structyp_9v09.htm"><b>SWStringArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_CLSID</td>
<td width=23%><b>MVguid</b></td>
<td width=34%><a href="structyp_801l.htm"><b>SGuidArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_MV_I8</td>
<td width=23%><b>MVli</b></td>
<td width=34%><a href="structyp_7qd5.htm"><b>SLargeIntegerArray</b></a></td>
</tr>
<tr valign=top>
<td width=43%>PT_ERROR</td>
<td width=23%><b>err</b></td>
<td width=34%><a href="structyp_1eg5.htm">SCODE</a> </td>
</tr>
<tr valign=top>
<td width=43%>PT_NULL or PT_OBJECT</td>
<td width=23%><b>x</b></td>
<td width=34%>LONG</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>ulPropTag</b> member is made up of two parts: 
<ul>
<li>
An identifier in the high-order 16 bits.</li>
<li>
A type in the low-order 16 bits.</li>
</ul>
<p>
The identifier is a numeric value within a particular range. MAPI defines ranges for identifiers to describe what the property is used for and who is responsible for maintaining it. MAPI defines constraints for each of the property tags that it supports in the MAPITAGS.H header file.</p>
<p>
The type indicates the format for the property's value. MAPI defines constants for each of the property types that it supports in the MAPIDEFS.H header file. </p>
<p>
For a complete list of the valid property ranges for identifiers and property types, see the <a href="appprop_5e0j.htm">Property Identifiers and Types</a> appendix. </p>
<p>
The <b>dwAlignPad</b> member is used as padding to ensure proper alignment on computers that require 8-byte alignment for 8-byte values. Developers who write code on such computers should use memory allocation routines that allocate the <b>SPropValue</b> arrays on 8-byte boundaries. </p>
<p>
For more information, see <a href="property_484z.htm">About Property Types</a> and <a href="property_7ktv.htm">Updating Properties</a>. </p>
<h4>See Also</h4>
<p>
<a href="groups_14fn.htm">Property Structures</a> </p>
<p>&nbsp;</p></body>
</HTML>

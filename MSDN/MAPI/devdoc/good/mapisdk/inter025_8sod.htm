<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPISupport::IStorageFromStream</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapisupport_istoragefromstream"></a>IMAPISupport::IStorageFromStream</h2>
<p>
The <b>IMAPISupport::IStorageFromStream</b> method implements a storage object to access a stream.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter025_8uge.htm"><b>IMAPISupport : IUnknown</b></a>.</p>
<pre><code><b>HRESULT IStorageFromStream(
  LPUNKNOWN</b><i> lpUnkIn</i><b>,</b>             
<b>  LPCIID</b><i> lpInterface</i><b>,</b>            
<b>  ULONG</b><i> ulFlags</i><b>,</b>                 
<b>  LPSTORAGE FAR *</b><i> lppStorageOut  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpUnkIn</i></dt>
<dd>
[in] Pointer to a stream object.</dd>
<dt>
<i>lpInterface</i></dt>
<dd>
[in] Pointer to the interface identifier (IID) that represents the interface to be used to access the stream pointed to by <i>lpUnkIn</i>. Any of the following values are valid: NULL, indicating that <b>IStream </b>should be used to access the stream, IID_IStream, or IID_ILockBytes. </dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls how the storage object is to be created relative to the stream object. By default, the storage is created with read-only access and the stream starts at position zero within the storage. The following flags can be set:
<dl>
<dt>
STGSTRM_CREATE</dt>
<dd>
A new storage object should be created for the stream object.</dd>
<dt>
STGSTRM_CURRENT</dt>
<dd>
The storage object should start at the current position of the stream.</dd>
<dt>
STGSTRM_MODIFY</dt>
<dd>
The caller should have read/write access to the returned storage object.</dd>
<dt>
STGSTRM_RESET</dt>
<dd>
The storage object should start at position zero.</dd>
</dl>
</dd>
<dt>
<i>lppStorageOut</i></dt>
<dd>
[out] Pointer to a pointer to the storage object.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The storage object was successfully created.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPISupport::IStorageFromStream</b> method is implemented for all service provider support objects. Service providers call <b>IStorageFromStream</b> to create a storage object to use for opening particular properties. Service providers that have their own implementation of <b>IStorage</b> do not need to call <b>IStorageFromStream</b>. </p>
<p>
The storage object created by <b>IStorageFromStream</b> calls the stream's <b>IUnknown::AddRef</b> method to increment its reference count and then decrements the count when the storage is released. </p>
<h4>Notes to Callers</h4>
<p>
When the <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method of one of your objects is called to open a property with the <b>IStorage </b>interface, perform the following tasks:
<ol>
<li>
Open a stream object with read/write access for the property.</li>
<li>
Internally mark the property stream as a storage object.</li>
<li>
Call <b>IStorageFromStream</b> to generate a storage object.<ol>
<li>
Return a pointer to this storage object.</li>
</ol>
</li>
</ol>
<p>
If you implement additional interfaces that use the storage object, create an object that wraps the storage object and implement a higher level <b>IUnknown::QueryInterface</b> method. </p>
<p>
Do not allow a property to be opened with the <b>IStream</b> interface if it was created with <b>IStorage</b>. Conversely, do not allow a property to be opened with the <b>IStorage</b> interface if it was created with <b>IStream</b>. </p>
<p>
With one exception, it is acceptable to use the <b>IStreamDocfile</b> interface to stream a storage object from one container to another, but the IID_IStreamDocfile interface identifier must be passed in the <b>OpenProperty</b> method's <i>lpInterface</i> parameter. </p>
<h4>See Also</h4>
<p>
<a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a></p>
<p>&nbsp;</p></body>
</HTML>

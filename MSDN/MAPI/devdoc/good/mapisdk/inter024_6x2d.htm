<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAPIStatus::ValidateState</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imapistatus_validatestate"></a>IMAPIStatus::ValidateState</h2>
<p>
The <b>IMAPIStatus::ValidateState</b> method confirms the external status information available for the MAPI resource or the service provider.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter024_22i8.htm"><b>IMAPIStatus : IMAPIProp</b></a>.</p>
<pre><code><b>HRESULT ValidateState(
  ULONG</b><i> ulUIParam</i><b>,</b>   
<b>  ULONG</b><i> ulFlags      </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ulUIParam</i></dt>
<dd>
[in] Handle of the parent window for any dialog boxes or windows this method displays.</dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags that controls the validation. The following flags can be set:
<dl>
<dt>
ABORT_XP_HEADER_OPERATION</dt>
<dd>
The user has canceled the operation, typically by clicking the <b>Cancel</b> button in the corresponding dialog box. The status object has two options:</dd>
</dl>

<ul>
<li>
Continue working on the operation</li>
<li>
Abort the operation and return MAPI_E_USER_CANCELED</li>
</ul>

<dl>
<dt>
CONFIG_CHANGED</dt>
<dd>
One or more of the status object's configuration properties has changed. Clients can set this flag to allow the MAPI spooler to dynamically correct critical transport provider failures. </dd>
<dt>
FORCE_XP_CONNECT</dt>
<dd>
The status object should perform a connection. When this flag is used with the REFRESH_XP_HEADER_CACHE or PROCESS_XP_HEADER_CACHE flag, the connection occurs without caching.</dd>
<dt>
FORCE_XP_DISCONNECT</dt>
<dd>
The status object should perform a disconnect operation. When this flag is used with the REFRESH_XP_HEADER_CACHE or PROCESS_XP_HEADER_CACHE flag, the disconnection occurs without caching.</dd>
<dt>
PROCESS_XP_HEADER_CACHE</dt>
<dd>
Entries in the header cache table should be processed, all messages marked with the MSGSTATUS_REMOTE_DOWNLOAD flag should be downloaded, and all messages marked with the MSGSTATUS_REMOTE_DELETE flag should be deleted. Messages that have both MSGSTATUS_REMOTE_DOWNLOAD and MSGSTATUS_REMOTE_DELETE set should be moved.</dd>
<dt>
REFRESH_XP_HEADER_CACHE</dt>
<dd>
For a remote transport provider, a new list of message headers should be downloaded and all flags marking message status should be cleared.</dd>
<dt>
SUPPRESS_UI</dt>
<dd>
Prevents the status object from displaying a user interface as part of the operation.
</dd>
</dl>
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The validation was successful.</dd>
<dt>
MAPI_E_BUSY</dt>
<dd>
Another operation is in progress; it should be allowed to complete, or it should be stopped, before this operation should be initiated.</dd>
<dt>
MAPI_E_NO_SUPPORT</dt>
<dd>
The status object does not support the validation method, as indicated by the absence of the STATUS_VALIDATE_STATE flag in the <a href="propb_3lkj.htm">PR_RESOURCE_METHODS</a> property.</dd>
<dt>
MAPI_E_USER_CANCEL</dt>
<dd>
The user canceled the validation operation, typically by clicking the <b>Cancel</b> button in a dialog box. This value is only returned by remote transport providers.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMAPIStatus::ValidateState</b> method checks the state of a resource associated with a status object. <b>ValidateState</b> is the only method in the <b>IMAPIStatus</b> interface that is required for all status objects.</p>
<p>
The exact behavior of this method depends on the implementation. The following table describes the implementation of each of the different types of status objects:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Status object</th>
<th align=left width=67%>ValidateState implementation</th>
</tr>
<tr valign=top>
<td width=33%>MAPI subsystem</td>
<td width=67%>Validates the state of all of the resources owned by the currently active service providers and the subsystem itself.</td>
</tr>
<tr valign=top>
<td width=33%>MAPI spooler</td>
<td width=67%>Performs a logon of all transport providers, regardless of whether they are already logged on. </td>
</tr>
<tr valign=top>
<td width=33%>MAPI address book</td>
<td width=67%>Checks the entries in its profile section.</td>
</tr>
<tr valign=top>
<td width=33%>Service provider</td>
<td width=67%>Depends on the type of provider and the flags set in the <i>ulFlags</i> parameter.</td>
</tr>
</table><br>
<h4>Notes to Implementers</h4>
<p>
The <b>ValidateState</b> method is called by remote client applications to start remote processing for various actions. This method exists primarily to set status bits to communicate with the MAPI spooler rather than to actually do any work. Typically, the transport provider sets flags in its status row which indicate to the MAPI spooler what actions need to be initiated to complete the client's request. In this model of client-transport-spooler interaction, the actions requested by the client are asynchronous, in that <b>ValidateState</b> returns before the requested actions are complete. However, actions which do not necessarily involve the underlying messaging system, or which involve a transport-specific interface, can be synchronous. The client application passes in a bitmask of flags to specify which actions the remote transport provider should take. The flags are:
<dl>
<dt>
ABORT_XP_HEADER_OPERATION</dt>
<dd>
If possible, the remote transport provider should cancel any operations involving downloading headers. To do this, the transport provider must set the following property values in the logon object's status row:
<ul>
<li>
Clear the STATUS_INBOUND_ENABLED and STATUS_INBOUND_ACTIVE bits in the <a href="propb_2zj9.htm">PR_STATUS_CODE</a> property to tell the MAPI spooler to cease the inbound flush process for this transport provider.</li>
<li>
Set the STATUS_OFFLINE bit in the PR_STATUS_CODE property.</li>
<li>
Set the <a href="propb_9gkr.htm">PR_REMOTE_VALIDATE_OK</a> property to TRUE.</li>
<li>
Set the <a href="propb_6ezr.htm">PR_STATUS_STRING</a> property to some string indicating the transport provider's status to the user.</li>
<li>
Return S_OK</li>
</ul>

<p>
However, if the operation in progress cannot be canceled, <b>ValidateState</b> should return MAPI_E_BUSY.
</dd>
<dt>
FORCE_XP_CONNECT</dt>
<dd>
A remote transport provider should never establish a connection to a shared resource, for example, a modem or COM port, outside the context of the MAPI spooler-transport interaction involved in the <b>IXPLogon::FlushQueues</b> method. If <b>ValidateState</b> is called with this flag, your transport provider should do the following:
<ul>
<li>
Set some internal status flag to indicate that the remote connection needs to be established when the <b>FlushQueues</b> method is called.</li>
<li>
Set the proper values in the status table to cause the MAPI spooler to initiate the queue flushing process.</li>
<li>
When flushing of queues has completed, release the shared resource.</li>
<li>
Clear the STATUS_OFFLINE bit in the PR_STATUS_CODE property.</li>
<li>
Return S_OK.</li>
</ul>
</dd>
<dt>
FORCE_XP_DISCONNECT</dt>
<dd>
The remote transport provider should release its connection to the messaging system resources. After doing so, it should:
<ul>
<li>
Set the STATUS_OFFLINE bit in the PR_STATUS_CODE property.</li>
<li>
Return S_OK.</li>
</ul>
</dd>
<dt>
PROCESS_XP_HEADER_CACHE</dt>
<dd>
The remote transport provider should process remote messages and upload any messages that have been deferred. To do this the transport provider must set the following property values in the logon object's status row:
<ul>
<li>
Set the PR_STATUS_STRING property to a string indicating the transport provider's status to the user.</li>
<li>
Set the STATUS_OUTBOUND_ENABLED and STATUS_OUTBOUND_ACTIVE bits in the PR_STATUS_CODE property.</li>
<li>
Set the PR_REMOTE_VALIDATE_OK property in the transport provider's status row to FALSE.</li>
<li>
If another operation is in progress (such as downloading headers) when <b>ValidateState</b> is called, <b>ValidateState</b> should return MAPI_E_BUSY.</li>
<li>
Execute the code for processing the REFRESH_XP_HEADER_CACHE flag as well to satisfy requirements of the Microsoft Exchange client.</li>
</ul>
</dd>
<dt>
REFRESH_XP_HEADER_CACHE</dt>
<dd>
The remote transport provider should retrieve any new message headers from the messaging system. To do this, the transport provider must:
<ul>
<li>
Set the PR_STATUS_STRING property to a string indicating the transport provider's status to the user.</li>
<li>
Set the STATUS_INBOUND_ENABLED and STATUS_INBOUND_ACTIVE bits in the PR_STATUS_CODE property.</li>
<li>
Clear the STATUS_OFFLINE bit in the PR_STATUS_CODE property.</li>
<li>
Set the STATUS_ONLINE bit in the PR_STATUS_CODE property.</li>
<li>
Set the PR_REMOTE_VALIDATE_OK property in the transport provider's status row to FALSE.</li>
<li>
Return MAPI_E_BUSY.</li>
</ul>
</dd>
<dt>
SHOW_XP_SESSION_UI</dt>
<dd>
If your transport provider has any pieces of user interface for processing the message headers — such as a dialog box confirming downloading of messages — then that dialog box should be displayed. Otherwise, <b>ValidateState</b> can return MAPI_E_NO_SUPPORT.
</dd>
</dl>
<p>
If any flags other than these are passed in, <b>ValidateState</b> should return MAPI_E_UNKNOWN_FLAGS.</p>
<p>
The client's call to the transport provider will often be to the <b>IMAPIStatus::ValidateState</b> method. It is important during the processing of <b>ValidateState</b> that the transport provider not perform any actions which allocate scarce system resources, such as a modem or COM port. The reason for this is because the MAPI spooler will, at times, need to flush queues on more than one transport provider. However, the client is allowed to call any transport provider's <b>ValidateState</b> method at any time. If your transport provider attempts to allocate a scarce resource during the processing of <b>ValidateState</b>, an error can result due to conflict with another transport provider that the MAPI spooler has instructed to flush its queues. If you allow all scarce resource allocations to happen under the direction of the MAPI spooler, such conflicts will be avoided. Your transport provider should support the <a href="propb_9gkr.htm">PR_REMOTE_VALIDATE_OK</a> property so that client applications can detect when your transport provider is busy or waiting for the MAPI spooler to initiate an action.</p>
<h4>Notes to Callers</h4>
<p>
Because this method can result in other calls being made that take some time, <b>ValidateState</b> can return MAPI_E_BUSY to inform you that this method is dependent upon another operation's completion and that operation is still in progress. You should wait until the pending operation has completed before attempting another task. </p>
<p>
You have the most control over your calls to transport provider status objects. You can pass one or more flags to <b>ValidateState</b> that affect the transport provider's operations. For example, if you set the flag ABORT_XP_HEADER_OPERATION, this indicates that the user has canceled the validation. Transport providers can choose to abort — returning MAPI_E_USER_CANCELED — or continue.</p>
<p>
The CONFIG_CHANGED flag can be set on a call to either the status object of a service provider or the MAPI spooler to indicate that a configuration option has been altered. You can use CONFIG_CHANGED to dynamically reconfigure a transport provider. When called on a service provider's status object, the provider responds with a call to <a href="inter025_5b7d.htm"><b>IMAPISupport::SpoolerNotify</b></a> to alert the MAPI spooler of the change. When called on the MAPI spooler's status object, the spooler calls <a href="inter042_0xbn.htm"><b>IXPLogon::AddressTypes</b></a> for each of the active transport providers and<b> <a href="inter023_9ier.htm">IMAPISession::MessageOptions</a></b>. <b>AddressTypes</b> informs the MAPI spooler of a transport's supported address types; <b>MessageOptions</b> invokes the display of a property sheet showing a transport's message option properties. Some service providers also display a progress indicator if the validation is expected to take a long time. Displaying a progress indicator is helpful, but not required.</p>
<p>
When the SUPPRESS_UI flag is set, none of the configuration property sheets can be displayed nor can any progress dialog boxes. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

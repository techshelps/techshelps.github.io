<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMC_extension</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_cmc_extension"></a>CMC_extension</h2>
<p>
A <b>CMC_extension</b> structure contains a CMC data extension for use by the CMC API functions and data structures. A CMC data extension adds parameters to functions or members to data structures.</p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>XCMC.H</td>
</tr>
</table><br>
<pre><code>typedef struct { 
     CMC_uint32 item_code; 
     CMC_uint32 item_data; 
     CMC_buffer item_reference; 
     CMC_flags extension_flags; 
} CMC_extension; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>item_code</b></dt>
<dd>
Code that uniquely identifies an extension to a function or data structure. The <b>item_code</b> member is the mechanism for specifying the extension to be invoked. The client application puts the extension code in this member before calling CMC functions that use extensions. The possible extensions are: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="cmcref_4svn.htm">CMC_X_COM_ATTACH_CHARPOS</a></td>
<td width=52%><a href="cmcref_13g0.htm">CMC_X_COM_CAN_SEND_RECIP</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="cmcref_7aox.htm">CMC_X_COM_CONFIG_DATA</a></td>
<td width=52%><a href="cmcref_3xtl.htm">CMC_X_COM_PRIORITY</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="cmcref_14f8.htm">CMC_X_COM_RECIP_ID</a></td>
<td width=52%><a href="cmcref_1z8l.htm">CMC_X_COM_SAVE_MESSAGE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="cmcref_73c5.htm">CMC_X_COM_SENT_MESSAGE</a></td>
<td width=52%><a href="cmcref_3his.htm">CMC_X_COM_SUPPORT_EXT</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="cmcref_4mck.htm">CMC_X_COM_TIME_RECEIVED</a></td>
<td width=52%><a href="cmcref_0qax.htm">CMC_X_MS_ADDRESS_UI</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="cmcref_7dy9.htm">CMC_X_MS_ATTACH_DATA</a></td>
<td width=52%><a href="cmcref_7ovn.htm">CMC_X_MS_FUNCTION_FLAGS</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="cmcref_6ctd.htm">CMC_X_MS_MESSAGE_DATA</a></td>
<td width=52%><a href="cmcref_7epf.htm">CMC_X_MS_SESSION_FLAGS</a></td>
</tr>
</table><br>


<p>
These extensions are identified by the extension identifiers CMC_XS_COM and CMC_XS_MS. For definitions of these extensions, see <a href="cmcref_0jn7.htm">Data Extensions</a>. 
</dd>
<dt>
<b>item_data</b></dt>
<dd>
Item data for the extension. Depending on the value of <b>item_code</b>,<b> </b>the <b>item_data</b> member might contain the length of the item value, the item value itself, or other information about the item. The specification of the extension describes the interpretation of this member.</dd>
<dt>
<b>item_reference</b></dt>
<dd>
The item reference for the extension. This value is a pointer to the storage location of the item value. It is NULL if there is no related item storage. The specification of the extension describes the interpretation of this member.</dd>
<dt>
<b>extension_flags</b></dt>
<dd>
Bitmask of extension flags. The following flags can be set:
<dl>
<dt>
CMC_EXT_LAST_ELEMENT</dt>
<dd>
The last structure in an array of <a href="#_mapi1book_cmc_extension"><b>CMC_extension</b></a> structures. The structure with this flag set must be at the end of the array. If this flag is set to zero for any structure, that structure is not the last array element.</dd>
<dt>
CMC_EXT_OUTPUT</dt>
<dd>
For an output extension, the extension structure contains a pointer to implementation-allocated memory that the client application must release with the <a href="cmcref_5z51.htm"><b>cmc_free</b></a> function. If this flag is set to zero, the implementation has not allocated memory for the extension that the application needs to free. This flag is always set to zero for structure extensions.</dd>
<dt>
CMC_EXT_REQUIRED</dt>
<dd>
An error value is returned if this extension cannot be supported. If this flag is set to zero, it enables the CMC implementation to provide any level of support, including no support, for the extension.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
Extensions are used to add functionality to the CMC API. For example, a client application can implement the <a href="cmcref_81im.htm"><b>cmc_act_on</b></a> function to allow saving a partially completed message in the receive folder (the Inbox) for later updating and sending. To pass the structure defining this partially completed message to CMC and receive back the resulting message reference, the client application can use the CMC_X_COM_SAVE_MESSAGE extension. </p>
<p>
An extension can be either an input extension or an output extension; that is, it can be passed either as input from a client application to CMC or as output from CMC to a client application. Whether the information contained in an extension is input or output is implied by the semantics of the particular extension in question and by the presence or absence of CMC_EXT_OUTPUT in the extension's <b>extension_flags</b> member after a call to a CMC function. For input extensions, the client application in question allocates memory for the extension structure and any other structures associated with the extension. For output extensions, storage for the extension result, if necessary, is allocated by a CMC function. </p>
<p>
For output extensions, a client application must free storage allocated by CMC with calls to the <a href="cmcref_5z51.htm"><b>cmc_free</b></a> function. For each <a href="#_mapi1book_cmc_extension"><b>CMC_extension</b></a> structure in the array, the caller must call <b>cmc_free</b> for the pointer in the <b>item_reference</b> member of the structure. </p>
<p>
CMC does not require explicit release of a data extension structure, because CMC releases such structures along with the structures that contain them. For example, CMC implicitly releases the message extension array created by the <b>cmc_read</b> function when calling <b>cmc_free</b> for the enclosing <a href="cmcref_6sv9.htm"><b>CMC_message</b></a><b> </b>structure.</p>
<h4>See Also</h4>
<p>
<a href="cmcref_81im.htm"><b>cmc_act_on</b></a>, <a href="cmcref_5z51.htm"><b>cmc_free</b></a>, <a href="cmcref_6sv9.htm"><b>CMC_message</b></a>, <a href="cmcref_2944.htm"><b>cmc_read</b></a></p>
<p>&nbsp;</p></body>
</HTML>

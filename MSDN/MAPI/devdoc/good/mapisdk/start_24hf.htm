<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a New Interpersonal (IPM) Message Class</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_creating_a_new_interpersonal_ipm_message_class"></a>Creating a New Interpersonal (IPM) Message Class</h1>
<p>
There are several ways to create a new message class used for person-to-person communication. By using MAPI properties to structure message content, you avoid writing code to parse message text or a binary attachment.</p>
<h4>Design Tasks</h4>
<ol>
<li>
Decide whether yours is an interpersonal messaging (IPM) application or a type of interprocess communication (IPC) application. There is an enormous variety of applications; following is a basic list of types and examples. For more information about IPC applications, see <a href="start_7yk3.htm">Creating a New Interprocess (IPC) Message Class</a>.<ul>
<li>
Person-to-person. A person initiates the exchange of messages, and another person responds. This includes traditional e-mail as well as more structured exchanges such as document routing or expense approval.</li>
<li>
Person-to-machine. A person initiates the exchange of messages, and a machine responds. Examples include submitting a database query by e-mail and subscribing to a mailing list.</li>
<li>
Machine-to-person. A machine initiates the exchange of messages, and a person responds. Examples include news feeds and other types of document distribution, and opinion surveys.</li>
<li>
Machine-to-machine. A machine initiates the exchange of messages, and another machine responds. Examples include link heartbeat monitoring, directory and database replication.</li>
<li>
A more complex pattern with both people and machines in the route.</li>
<li>
A more complex pattern where, instead of being transmitted, the message may be posted directly into a public folder or bulletin board forum supported by a message store for consumption by other readers, an administrator, or a software agent.</li>
</ul>
<p>
Logically, person-to-person applications, machine-to-person applications, and applications that post to public forums should be designated IPM, while person-to-machine and machine-to-machine applications are IPC message classes. The only real difference is that IPM messages in a message store are visible to messaging clients, while IPC messages usually are not. Anything that requires a person to respond must use an IPM message class. Applications involving a more complex pattern including people and machines often involve a mix of IPM and IPC messages.
</li>
<li>
Choose the message class name, beginning it with IPM. or IPC. according to the preceding guidelines.</li>
<li>
Choose the application framework for sending and reading your messages. Alternatives include:<ul>
<li>
A form. A form is a MAPI object that is integrated into messaging clients; it can create, display, print, and perform custom commands — called "verbs" in MAPI — on a particular type of message. Forms take maximum advantage of integration with the messaging client. See <a href="formsarc_26yb.htm">Forms</a>.</li>
<li>
A standalone application. This gives you the greatest control over the user interface to your messages but also requires the most work in creating and distributing your application and in making it easy for your users to find.</li>
<li>
A client extension. This is a compromise. An extension is easier for users to discover than a standalone application and in some respects easier to write than a form, but the integration with the client is less complete than with a form. See <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_advantages_of_extending_microsoft_exchange">
</object><a href=JavaScript:alink_1.Click()>Advantages of Extending Microsoft Exchange</a>.</li>
</ul>
</li>
<li>
Decide whether to use Simple MAPI, CMC, MAPI, or the Active Messaging Library. See <a href="intro_3lph.htm">Selecting a Client Interface</a>. In addition to the considerations listed there, you must think about whether that interface fits well into the application framework you have chosen. For instance, both forms and extensions must use or furnish several COM interfaces which are not easily supported by Visual Basic programs.</li>
<li>
Define properties specific to your message class. Decide whether to use named properties or properties from the 0x6800-0x7fff range. See <a href="property_25bn.htm">About Property Identifiers</a> and <a href="property_2jw3.htm">Named Properties</a>. Properties that contain e-mail addresses should be stored in a special way to provide for translation when changing messaging domains. See <a href="extend_2goj.htm">Sending Across Messaging Domains</a>.<p>
Consider the need for interoperability with messaging clients that can be only message text. It may be advisable to duplicate some or all of your message's properties in the message text if you expect the message to be read by people using such messaging clients.
</li>
<li>
Define the commands — called "verbs" in MAPI — specific to your message class, and choose which standard verbs to implement. See <a href="formsarc_51tf.htm">Form Verbs</a>.</li>
<li>
Choose a distribution mechanism. For a standalone application, this generally involves making an executable and any necessary auxiliary files available to your users. Additional steps are necessary if you are implementing a form, including which library to register it in. See <a href="formsarc_6i43.htm">Form Libraries</a>. Additional steps are also necessary if you are implementing a client extension. See <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_registering_extensions">
</object><a href=JavaScript:alink_2.Click()>Registering Extensions</a>.</li>
</ol>
<h4>Implementation Tasks</h4>
<p>
All IPM message classes should honor common IPM client options for disposition of sent messages and other features.   </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement a form</h5>
<ol>
<li>
Choose a class identifier (CLSID) for the form. You can use the tool UUIDGEN.EXE for this purpose. See <a href="intro_58it.htm">Using UUIDGEN.EXE</a>.</li>
<li>
Choose a message class name for the form. See <a href="extend_5gab.htm">Message Classes</a>.</li>
<li>
Create an .EXE file that acts as a COM server for the form, registered with the form's class identifier. It must implement the OLE interface <b>IClassFactory</b>, and the <a href="inter014_0dym.htm"><b>IMAPIForm</b></a> and <a href="inter034_24ry.htm"><b>IPersistMessage</b></a> interfaces; it may optionally implement the <a href="inter015_8l66.htm"><b>IMAPIFormAdviseSink</b></a> and <a href="inter017_6ppq.htm"><b>IMAPIFormFactory</b></a> interfaces. See <a href="formsvr_584z.htm">Implementing the <b>IClassFactory</b> Interface for Form Servers</a>. The class factory's <b>CreateInstance</b> method must return an <b>IMAPIForm</b> interface; that form object's <b>QueryInterface</b> method must be capable of returning an <b>IPersistMessage</b> interface.</li>
<li>
Create a .CFG file listing the form's class identifier, message class, properties, verbs, extensions, and so forth. See <a href="appxfile_8lv7.htm">File Format of Form Configuration Files</a>.</li>
<li>
For each user of your form, make the .EXE file and any auxiliary files available, and register the .CFG file in a form library using PDKIN.EXE, INSTFORM.EXE, or your own code. See <a href="formsarc_6i43.htm">Form Libraries</a>. If using the local form library, you must also register your .EXE file as a COM server for the form's class identifier, using REGEDIT.EXE. </li>
</ol>
<p>
For more information, see <a href="formsvr_8ws3.htm">Developing MAPI Form Servers</a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add an extension to the messaging client</h5>
<ol>
<li>
Decide which client contexts your extension should be available in, and whether your extension requires a specific message service to be available. See <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_how_extensions_work">
</object><a href=JavaScript:alink_3.Click()>How Extensions Work</a>.</li>
<li>
Create a DLL with an entry point that returns an extension object — an object that implements the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_iexchext_iunknown">
</object><a href=JavaScript:alink_4.Click()><b>IExchExt</b></a> interface and any other required interfaces. Implement the <b>IExchExt</b> interface and any other required interfaces.</li>
<li>
For each user of your extension, make the DLL and any auxiliary files available, and register your extension in the system registry or WIN.INI file. See <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_registering_extensions">
</object><a href=JavaScript:alink_5.Click()>Registering Extensions</a>.</li>
</ol>
<p>
For more information, see <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_command_extensions">
</object><a href=JavaScript:alink_6.Click()>Command Extensions</a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a standalone application using MAPI</h5>
<ol>
<li>
Verify that MAPI is installed before proceeding if your installation process does not guarantee that MAPI is installed. See <a href="intro_1qzt.htm">Installing MAPI</a>.</li>
<li>
Load and initialize the MAPI DLL. See <a href="consider_49k9.htm">Initializing MAPI</a> and <a href="consider_8prd.htm">Initializing OLE for Use with MAPI</a>.</li>
<li>
Log on to MAPI using the messaging client's session if available. See <a href="consider_9iy6.htm">Logging On</a>.</li>
<li>
Open the user's default message store, Inbox and Outbox folders. See <a href="consider_54yt.htm">Opening a Message Store</a> and <a href="consider_4wqa.htm">Opening a Folder</a>.</li>
<li>
Create and send a message using the following steps:<ol type=a>
<li>
Create a message in the Outbox folder using the <a href="inter013_7wv9.htm"><b>IMAPIFolder::CreateMessage</b></a> method.</li>
<li>
Add recipients to the message's recipient table. See <a href="extend_86b7.htm">Recipients</a>.</li>
<li>
Add the document to the message as an attachment. See <a href="extend_7qwj.htm">Attachments</a>.</li>
<li>
Optionally, add text to the message. See the <a href="propa_9lvd.htm">PR_BODY</a> property.</li>
<li>
Send the message. See <a href="extend_1zop.htm">Sending Messages with MAPI</a>.</li>
</ol>
</li>
<li>
Scan the Inbox for new messages using the following steps:<ol type=a>
<li>
Optionally, force any incoming messages to be downloaded. See <a href="inter024_8c37.htm"><b>IMAPIStatus::FlushQueues</b></a>.</li>
<li>
Open the Inbox folder's contents table.</li>
<li>
Restrict the contents table to messages of interest to your application.</li>
<li>
Optionally, register for new mail notifications on the message store object to be advised of further incoming messages.</li>
</ol>
</li>
<li>
For each user of your application, make the .EXE file and any auxiliary files available.</li>
</ol>
<h4>About Sample Source Code</h4>
<p>
See the following topics:</p>
<p class=indent1>
<a href="start_2zxp.htm">Sample Custom Sendable Form</a></p>
<p class=indent1>
<object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_sample_command_extension">
</object><a href=JavaScript:alink_7.Click()>Sample Command Extension</a></p>
<p class=indent1>
<a href="start_3bzo.htm">Sample Routing Client</a></p>
<p class=indent1>
<a href="start_5mul.htm">Sample Form</a></p>
<p class=indent1>
<a href="start_5epa.htm">Sample Timecard Application</a></p>
<p>&nbsp;</p></body>
</HTML>

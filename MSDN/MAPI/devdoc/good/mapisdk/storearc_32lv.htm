<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Loading Message Store Providers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_loading_message_store_providers"></a>Loading Message Store Providers</h1>
<p>
When a client application opens a message store, MAPI loads the message store provider's DLL into memory. After loading the DLL, a very specific sequence of method calls occurs between the message store provider and MAPI. This method call sequence enables MAPI to get top-level <a href="inter033_42pa.htm"><b>IMSProvider:IUnknown</b></a> <a href="inter032_5032.htm"><b>IMSLogon:IUnknown</b></a>, and <a href="inter031_1jg0.htm"><b>IMsgStore:IMAPIProp</b></a> objects, and allows the message store provider to get a MAPI support object. After the call sequence, the message store provider should be ready to accept logons from clients.</p>
<p>
The call sequence when a message provider DLL is loaded is:
<ol>
<li>
Client calls <a href="inter023_59id.htm"><b>IMAPISession::OpenMsgStore</b></a>.</li>
<li>
If the message store is not already open, MAPI loads the store provider's DLL and calls the DLL's <a href="function_7zxw.htm"><b>MSProviderInit</b></a> entry point. If the message store is already open, MAPI skips steps 2 and 3, then uses the existing <a href="inter033_42pa.htm"><b>IMSProvider</b></a> object to complete step 4.</li>
<li>
<b>MSProviderInit</b> creates and returns an <b>IMSProvider</b> object.</li>
<li>
MAPI calls <a href="inter033_4ze6.htm"><b>IMSProvider::Logon</b></a>, passing the client application's message store entry identifier.</li>
<li>
<b>IMSProvider::Logon</b> creates and returns an <a href="inter032_5032.htm"><b>IMSLogon</b></a> object and an <a href="inter031_1jg0.htm"><b>IMsgStore</b></a> object, then calls the <b>IUnknown::AddRef</b> method on its <b>IMAPISupport:IUnknown</b> object. If the client's message store entry identifier refers to a message store that is already open, the message store provider can return existing <b>IMSLogon</b> and <b>IMsgStore</b> objects, and does not need to call <b>AddRef</b> on its support object.</li>
<li>
If the client did not set the MAPI_NO_MAIL flag when it logged on and it did not set the MDB_NO_MAIL in step 1, then MAPI gives the message store's entry identifier to the MAPI spooler so the MAPI spooler can log on to the message store.</li>
<li>
MAPI returns the <b>IMsgStore</b> object to the client.</li>
<li>
The MAPI spooler calls <a href="inter033_36em.htm"><b>IMSProvider::SpoolerLogon</b></a>.</li>
<li>
<b>IMSProvider::SpoolerLogon</b> returns the same <b>IMSLogon</b> object and <b>IMsgStore</b> object from step 5.</li>
</ol>
<p>
<b>Note</b>  If the logon call to the message store provider fails because an incorrect password was supplied and the message store provider cannot display an interface to ask for the correct password, it should return MAPI_E_FAILONEPROVIDER from the <b>IMSProvider::Logon</b> method. This will allow clients to prompt the user for a password to try logging on to the message store provider again instead of causing MAPI to fail the provider for the entire session.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IABContainer::CreateEntry</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_iabcontainer_createentry"></a>IABContainer::CreateEntry</h2>
<p>
The <b>IABContainer::CreateEntry</b> method creates a new entry, which can be a messaging user, a distribution list, or another container.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter003_4gxe.htm"><b>IABContainer : IMAPIContainer</b></a>.</p>
<pre><code><b>HRESULT CreateEntry(
  ULONG</b><i> cbEntryID</i><b>,</b>                   
<b>  LPENTRYID</b><i> lpEntryID</i><b>,</b>               
<b>  ULONG</b><i> ulCreateFlags</i><b>,</b>               
<b>  LPMAPIPROP FAR *</b><i> lppMAPIPropEntry  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cbEntryID</i></dt>
<dd>
[in] Count of the bytes in the entry identifier pointed to by the <i>lpEntryID</i> parameter.</dd>
<dt>
<i>lpEntryID</i></dt>
<dd>
[in] Pointer to the entry identifier of a template for creating new entries of a particular type. </dd>
<dt>
<i>ulCreateFlags</i></dt>
<dd>
[in] Bitmask of flags that controls how entry creation is performed. The following flags can be set:
<dl>
<dt>
CREATE_CHECK_DUP_LOOSE</dt>
<dd>
Suggests that a loose level of duplicate entry checking should be performed. The implementation of loose duplicate entry checking is provider-specific. For example, a provider can define a loose match as any two entries having the same display name.</dd>
<dt>
CREATE_CHECK_DUP_STRICT</dt>
<dd>
Suggests that a strict level of duplicate entry checking should be performed. The implementation of strict duplicate entry checking is provider-specific. For example, a provider can define a strict match as any two entries having both the same display name and messaging address.</dd>
<dt>
CREATE_REPLACE</dt>
<dd>
A new entry should replace an existing one if it is determined that the two are duplicates.</dd>
</dl>
</dd>
<dt>
<i>lppMAPIPropEntry</i></dt>
<dd>
[out] Pointer to a pointer to the newly created entry.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The new entry was successfully created.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IABContainer::CreateEntry</b> method creates a new entry of a particular type in the container, returning a pointer to an interface implementation for further access to the entry. The new entry is created using a template that has been selected from the container's list of available templates published in its one-off table. Callers access a container's one-off table by calling its <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method and requesting the <a href="propa_6h83.htm">PR_CREATE_TEMPLATES</a> property. </p>
<h4>Notes to Implementers</h4>
<p>
All containers that support <b>IABContainer::CreateEntry</b> must be modifiable. Set your container's AB_MODIFIABLE flag in its <a href="propa_3m7n.htm">PR_CONTAINER_FLAGS</a> property to indicate that it is modifiable. </p>
<p>
Although the MAPI personal address book does not support the CREATE_REPLACE flag, MAPI recommends that you support all of the <i>ulFlags</i> flags. However, the interpretation and use of these flags is implementation-specific. That is, you can determine what the semantics of CREATE_CHECK_DUP_LOOSE and CREATE_CHECK_DUP_STRICT mean within the context of your implementation. If you cannot or do not determine whether an entry is a duplicate, always allow the entry to be created. </p>
<p>
Some providers implement strict entry checking by matching the display name, messaging address, and search key in an entry; other providers limit the match to display name and address. Loose entry checking is often implemented by checking the display name only. </p>
<h4>Notes to Host Provider Implementers</h4>
<p>
If your container can create entries from the templates of other providers, your implementation of <b>CreateEntry</b> should provide storage for some or all of the properties associated with the created entries. For example, if you provide storage for an entry's PR_DETAILS_TABLE property, you will be able to generate its details dialog box without having to depend on the foreign provider. </p>
<p>
If your container can create entries that support the <a href="propb_8810.htm">PR_TEMPLATEID</a> property, your implementation of <b>CreateEntry</b> must:
<ol>
<li>
Call <a href="inter025_8aec.htm"><b>IMAPISupport::OpenTemplateID</b></a>. <b>OpenTemplateID</b> allows the foreign provider's code for the entry to bind to the new entry being created. Foreign providers support this binding process to maintain control over entries created from their templates into the containers of host providers. </li>
<li>
Perform any necessary initialization and populate the new object with all of the properties from the entry in the foreign provider — the object returned in the <i>lppMAPIPropNew</i> parameter from <b>OpenTemplateID</b>.</li>
</ol>
<p>
If <b>OpenTemplateID</b> succeeds, copy the properties to the bound interface — the implementation pointed to by the <i>lppMAPIPropNew</i> parameter — rather than directly to the implementation pointed to by the <i>lpMAPIPropData</i> parameter. Initialize the new entry for offline use as you would any other entry from a foreign provider.</p>
<p>
If <b>OpenTemplateID</b> returns an error, <b>CreateEntry</b> should fail. Do not allow the entry to be created. Because the foreign provider can make assumptions about the data in your provider, do not create an entry with a template identifier that has not been successfully bound to the foreign provider. </p>
<h4>Notes to Callers</h4>
<p>
When <b>CreateEntry</b> returns, you may or may not be able to access the entry identifier for the new entry immediately. Some address book providers do not make it accessible until after you have called the new entry's <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> method. </p>
<p>
Although duplicate checking flags are passed as parameters to <b>CreateEntry</b>, the duplicate checking operation does not occur until <b>SaveChanges</b> is called. Therefore, related errors such as MAPI_E_COLLISION, indicating that an attempt was made to create an already existing entry, are returned by <b>SaveChanges</b> rather than <b>CreateEntry</b>.</p>
<h4>See Also</h4>
<p>
<a href="inter003_02b7.htm"><b>IABContainer::CopyEntries</b></a>,<b> <a href="inter022_15vd.htm">IMAPIProp::OpenProperty</a></b>, <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a>, <a href="propa_6h83.htm">PR_CREATE_TEMPLATES</a></p>
<p>&nbsp;</p></body>
</HTML>

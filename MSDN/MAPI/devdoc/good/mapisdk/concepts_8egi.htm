<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About the MAPI Spooler</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_about_the_mapi_spooler"></a>About the MAPI Spooler</h1>
<p>
The MAPI spooler is a separate process within the <a href="glossary_4s31.htm#_mapi1book_gly_mapi_subsystem">MAPI subsystem</a>, responsible for sending messages to and receiving messages from a <a href="glossary_4s31.htm#_mapi1book_gly_messaging_system">messaging system</a>. The MAPI spooler plays a vital role in message receipt and delivery. When a messaging system is unavailable, the MAPI spooler stores the messages and automatically forwards them at a later time. This ability to hold on to or send data when necessary is known as store and forward, a critical feature in environments where remote connections are common and network traffic is high. The MAPI spooler runs as a background process, doing much of its work when a client application is idle, thus improving the responsiveness of the client application.</p>
<p>
The MAPI spooler has additional responsibilities related to message distribution. These extra duties include:
<ul>
<li>
Keeping track of the recipient types that are handled by specific transport providers.</li>
<li>
Informing a client application when a new message has been delivered.</li>
<li>
Invoking message preprocessing and postprocessing.</li>
<li>
Generating reports that indicate that message delivery has occurred.</li>
<li>
Maintaining status on processed recipients.</li>
</ul>
<p>
The following illustration shows at a high level how a message flows from a client to the messaging system. The user of a client application sends a message to one or more <a href="glossary_4s36.htm#_mapi1book_gly_recipient">recipients</a>. The <a href="glossary_4s31.htm#_mapi1book_gly_message_store_provider">message store provider</a> initiates the sending process, formatting the message with additional information needed for transmission. </p>
<p>
The MAPI spooler receives the message if:
<ul>
<li>
The message store provider is not <a href="glossary_4s38.htm#_mapi1book_gly_tightly_coupled">tightly coupled</a> with the <a href="glossary_4s38.htm#_mapi1book_gly_transport_provider">transport provider</a> that can handle all of the recipients to whom the message is addressed.</li>
<li>
The message requires preprocessing.</li>
<li>
The message store and transport provider are tightly coupled, but they cannot handle all the recipients to whom the message is addressed.</li>
</ul>
<p>
If the MAPI spooler receives the message, it performs any required preprocessing, and delivers it to the appropriate transport provider. The transport provider gives the message to its messaging system which sends it to its intended recipient. </p>
<p>
With incoming messages, the flow is reversed. The transport provider receives a message from its messaging system and notifies the MAPI spooler. The spooler performs any necessary postprocessing and informs the message store provider that a new message has arrived. This notification causes the client to refresh its message display, enabling the user to read the new message.</p>
<p>
<img src="images/amapi_46.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Acting as a Foreign Address Book Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_acting_as_a_foreign_address_book_provider"></a>Acting as a Foreign Address Book Provider</h2>
<p>
A foreign provider is an address book provider that:
<ul>
<li>
Assigns template identifiers for its recipients.</li>
<li>
Supports the <a href="inter004_5j1g.htm"><b>IABLogon::OpenTemplateID</b></a> method.</li>
<li>
Supplies code for maintaining recipients that exist in the containers of other address book providers known as host providers. The code involves a property object, typically an <b>IMAPIProp</b> interface implementation, that wraps a property object from the host provider. </li>
</ul>
<p>
Acting as a foreign provider is an optional role; not all providers need to support template identifiers and their related code. Implement your provider as a foreign provider if you want to maintain control over recipients that host providers create using templates supplied by your provider. </p>
<p>
The format that your provider uses for its entry identifiers can also be used for its template identifiers. Template identifiers must include your provider's registered <b>MAPIUID</b> to allow MAPI to successfully bind recipients to the appropriate providers.</p>
<p>
MAPI calls your provider's <a href="inter004_5j1g.htm"><b>IABLogon::OpenTemplateID</b></a> method when a host provider calls <b>IMAPISupport::OpenTemplateID</b>. The host provider passes the template identifier of the recipient in the <i>lpTemplateID</i> parameter in its call to <b>IMAPISupport::OpenTemplateID</b>. MAPI determines that the template identifier belongs to your provider by matching the <a href="structyp_3p9g.htm"><b>MAPIUID</b></a> in the template identifier with the <b>MAPIUID</b> that your provider registered at logon time. MAPI then forwards the host provider's call to your provider through the <b>IABLogon::OpenTemplateID</b> method. </p>
<p>
The host provider also passes a pointer to its property object implementation for the recipient in the <i>lpMAPIPropData</i> parameter, an interface identifier in the <i>lpInterface</i> parameter that corresponds to the type of interface implementation passed in <i>lpMAPIPropData</i>, and an optional flag, FILL_ENTRY. Your provider is expected to return in the <i>lppMAPIPropNew</i> parameter a pointer to a property object implementation of the type specified in <i>lpInterface</i>. The returned pointer can either be to the wrapped property object implemented by your provider or to the object supplied by the host provider in <i>lpMAPIPropData</i>. Your provider should return a wrapped property object pointer when:
<ul>
<li>
The recipient's display table contains list box controls.</li>
<li>
The e-mail address for the recipient must be assembled from data in multiple display table controls.</li>
<li>
Your provider issues display table notifications.</li>
</ul>
<p>
</p>
<p>
The FILL_ENTRY flag indicates to your provider that the host provider wants all the properties of the recipient to be updated. Your provider is required to fulfill this request.</p>
<p>
When a host provider calls your provider's <b>OpenTemplateID</b> method, your provider might:
<ul>
<li>
Periodically update the data for a copied entry.</li>
<li>
Keep a copied entry synchronized with its original, such as when an address book entry is copied to the personal address book.</li>
<li>
Implement functionality that cannot be implemented by the host provider, such as dynamically populating list boxes in the copied entry's details table from data on a server.</li>
<li>
Control the interaction among properties in a copied entry or instantiated template. For example, computing PR_EMAIL_ADDRESS from other properties displayed in the details table.</li>
</ul>
<p>
</p>
<p>
The first two items are examples of tasks that do not require your provider to supply a wrapped property object — an implementation of <b>IMAPIProp</b> that is based on the host provider's implementation. Your provider can simply update the properties as necessary and return, setting the <i>lppMAPIPropNew</i> parameter to point to the pointer passed in by the host provider in the <i>lpMAPIPropData</i> parameter.</p>
<p>
The second two tasks require that your provider return to the host provider a property object that wraps the host provider's object with additional functionality, such as the ability to display a property sheet for the entry. This property object will either be a messaging user or distribution list, depending on the type of object passed in by the host provider in the <i>lpMAPIPropData</i> parameter and indicated by the interface identifier in the <i>lpInterface</i> parameter. If the <i>lpMAPIPropData</i> parameter points to a messaging user, your provider's wrapped property object must be an <b>IMailUser</b> implementation. If <i>lpMAPIPropData</i> points to a distribution list, it must be an <b>IDistList</b> implementation. </p>
<p>
Your provider's wrapped property object intercepts <b>IMAPIProp</b> method calls to perform context-specific manipulation of the host provider's recipient — the object it is wrapping. MAPI only has one requirement for wrapped property objects: all calls to <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> requesting the <a href="propa_692d.htm">PR_DETAILS_TABLE</a> property should be passed to the host provider. Your provider's implementation can use the returned table to intercept display table notifications or to add its own if necessary. </p>
<p>
The following list includes tasks that are typically implemented in the wrapped property object implemented by foreign providers:
<ul>
<li>
Preprocessing and postprocessing property values for the host recipient in <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a>.</li>
<li>
Handling details display table controls such as buttons and list boxes in <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a>.</li>
<li>
Validating or manipulating property values for the host recipient in <a href="inter022_6cxf.htm"><b>IMAPIProp::SetProps</b></a>.</li>
<li>
Computing required properties such as PR_EMAIL_ADDRESS and verifying that all of the necessary properties have been set before saving the host recipient in <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a>.</li>
</ul>
<p>
</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement IABLogon::OpenTemplateID</h5>
<ol>
<li>
Check if the template identifier passed in with the <i>lpTemplateID</i> parameter is valid and is in a format that your provider recognizes. If it is not, fail and return MAPI_E_INVALID_ENTRYID.</li>
<li>
Create an object of the type indicated by the template identifier, either a messaging user, distribution list, or one-off recipient. </li>
<li>
Call the <b>IUnknown::AddRef</b> method in the host provider's property object, the object pointed to by the <i>lpMAPIPropData</i> parameter.</li>
<li>
If the <i>ulTemplateFlags</i> parameter is set to FILL_ENTRY:<ol type=a>
<li>
If the new object is a messaging user or distribution list:</li>
</ol>
</li>
</ol>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;Retrieve all of the properties of the new object, possibly by calling its <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method.</td>
</tr>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;&nbsp;&nbsp;Call the host provider's <a href="inter022_6cxf.htm"><b>IMAPIProp::SetProps</b></a> method to copy all of the retrieved properties to the host provider's property object.</td>
</tr>
</table><br>
<ol start=2 type=a>
<li>
If the new object is a one-off recipient, call the host provider's <b>IMAPIProp::SetProps</b> method to set the following properties:</li>
</ol>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="propa_4gkl.htm">PR_ADDRTYPE</a> to the address type handled by your provider.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="propb_8810.htm">PR_TEMPLATEID</a> to the template identifier from the <i>lpTemplateID</i> and <i>cbTemplateID</i> parameters.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="propa_7s6d.htm">PR_DISPLAY_TYPE</a> to DT_MAILUSER or DT_DISTLIST, as appropriate.</td>
</tr>
</table><br>
<ol start=5>
<li>
Set the contents of the <i>lppMAPIPropNew</i> parameter to point to either your provider's new object or the property object passed in with the <i>lpMAPIPropData</i> parameter, depending on whether your provider determines a wrapped object is necessary.</li>
<li>
If a critical error occurs, such as a network failure or an out of memory condition, return the appropriate error value. This value should get propagated to the client with the appropriate <a href="structyp_0qpe.htm"><b>MAPIERROR</b></a> structure, a task performed by the host provider.</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

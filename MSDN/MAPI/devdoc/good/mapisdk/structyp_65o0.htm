<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TABLE_NOTIFICATION</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_table_notification_structyp"></a>TABLE_NOTIFICATION</h2>
<p>
The <b>TABLE_NOTIFICATION </b>structure describes a row in a table that has been affected by some type of event, such as a change or an error, causing a table notification to be generated. </p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Header file:</td>
<td width=52%>MAPIDEFS.H</td>
</tr>
</table><br>
<pre><code>typedef struct _TABLE_NOTIFICATION 
{ 
     ULONG        ulTableEvent;  
     HRESULT      hResult;  
     SPropValue   propIndex;  
     SPropValue   propPrior;  
     SRow         row;
} TABLE_NOTIFICATION; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>ulTableEvent</b></dt>
<dd>
Bitmask of flags used to represent the table event type. The following flags can be set: 
<dl>
<dt>
TABLE_CHANGED</dt>
<dd>
Indicates at a high level that something about the table has changed. The table's state is as it was before the event, meaning that all PR_INSTANCE_KEY properties, bookmarks, current positioning, and user interface selections are still valid. 
<p>
Handle this event by re-reading the entire table. Service providers that do not want to implement "rich" table notifications simply send TABLE_CHANGED events rather than more detailed events to indicate a particular type of change. 
</dd>
<dt>
TABLE_ERROR</dt>
<dd>
An error has occurred, usually during the processing of an asynchronous operation. Errors during the processing of the following methods can generate this event:
<p>
<b>IMAPITable::SortTable</b>

<p>
<b>IMAPITable::SetColumns</b>

<p>
<b>IMAPITable::Restrict</b>

<p>
After receiving a TABLE_ERROR event, a client cannot rely on the accuracy of the table contents. Also, pending notifications about other changes might be lost. 

<p>
The <b>IMAPITable::GetLastError</b> method might not provide any further information about the error because it was generated at some previous point, not necessarily from the last method call. 
</dd>
<dt>
TABLE_RELOAD</dt>
<dd>
The data in the table should be reloaded. Service providers send TABLE_RELOAD when, for example, the underlying data is stored in a database and the database is replaced. 
<p>
Handle this event by assuming that nothing about the table is still valid and by re-reading the entire table. All bookmarks, instance keys, status and positioning information are invalid.
</dd>
<dt>
TABLE_RESTRICT_DONE</dt>
<dd>
A restriction operation initiated with an <a href="inter026_43lg.htm"><b>IMAPITable::Restrict</b></a> method call has completed. </dd>
<dt>
TABLE_ROW_ADDED</dt>
<dd>
A new row has been added to the table and the corresponding object saved. TABLE_ROW_ADDED events are generated after a call to the object's <a href="inter022_5rqr.htm"><b>IMAPIProp::SaveChanges</b></a> method.</dd>
<dt>
TABLE_ROW_DELETED</dt>
<dd>
A row has been removed from the table. The <b>propPrior</b> member is set to NULL. </dd>
<dt>
TABLE_ROW_MODIFIED</dt>
<dd>
A row has been changed. The <b>row</b> member contains the affected properties for the row. Multiple TABLE_ROW_MODIFIED events are sent in the order that they appear in the table view. 
<p>
TABLE_ROW_MODIFIED events are sent after changes to the corresponding object have been committed with a call to the object's <b>IMAPIProp::SaveChanges</b> method. If the modified row is now the first row in the table, the value of the property tag in the <b>propPrior</b> member is PR_NULL.
</dd>
<dt>
TABLE_SETCOL_DONE</dt>
<dd>
A column setting operation initiated with an <a href="inter026_7x83.htm"><b>IMAPITable::SetColumns</b></a> method call has competed. </dd>
<dt>
TABLE_SORT_DONE</dt>
<dd>
A table sorting operation initiated with an <a href="inter026_3gmd.htm"><b>IMAPITable::SortTable</b></a> method call has competed. </dd>
</dl>
</dd>
<dt>
<b>hResult</b></dt>
<dd>
HRESULT value for the error that has occurred, if the <b>ulTableEvent</b> member is set to TABLE_ERROR.</dd>
<dt>
<b>propIndex</b></dt>
<dd>
<a href="structyp_9sbp.htm"><b>SPropValue</b></a> structure for the <a href="propa_65h5.htm">PR_INSTANCE_KEY</a> property of the affected row. </dd>
<dt>
<b>propPrior</b></dt>
<dd>
<b>SPropValue</b> structure for the PR_INSTANCE_KEY property of the row preceding the affected one. If the affected row is the first row in the table, <b>propPrior</b> must be set to <a href="propb_7kh8.htm">PR_NULL</a> and not zero. Zero is not a valid property tag. </dd>
<dt>
<b>row</b></dt>
<dd>
<a href="structyp_233r.htm"><b>SRow</b></a><b> </b>structure describing the affected row. This structure is filled for all table notification events. For table notification events that do not pass row data, the <b>cValues </b>member of the <b>SRow</b> structure is set to zero and the <b>lpProps </b>member<b> </b>is set to NULL. 
<p>
Because this <b>SRow</b> structure is read-only; clients must make a copy of it if they want to make modifications. The <a href="function_7cms.htm"><b>ScDupPropSet</b></a> function can be used to make the copy.

</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>TABLE_NOTIFICATION </b>structure is one of the members of the union of structures included in the <b>info</b> member of the <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a> structure. The <b>info</b> member includes a <b>TABLE_NOTIFICATION</b> structure when the <b>ulEventType</b> member of the structure is set to <i>fnevTableModified</i>.</p>
<p>
The order and type of columns in the row member reflect the order and type that was in effect at the time that the notification was generated, which is not necessarily the same as when the notification was delivered. </p>
<p>
For more information about notification, see the topics described in the following table.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Topic</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="extend_8fvt.htm">Event Notification in MAPI</a></td>
<td width=52%>General overview of notification and notification events.</td>
</tr>
<tr valign=top>
<td width=48%><a href="consider_4nw3.htm">Handling Notifications</a></td>
<td width=52%>Discussion of how clients should handle notifications.</td>
</tr>
<tr valign=top>
<td width=48%><a href="provider_2ii6.htm">Supporting Event Notification</a></td>
<td width=52%>Discussion of how service providers can use the <b>IMAPISupport</b> method to generate notifications.</td>
</tr>
</table><br>
<p>
Because table notifications are asynchronous, it is possible to receive notification of an added row after learning about the addition through another means. It is possible to receive a TABLE_ERROR event when there is an error in an <b>IMAPITable::Sort</b>, <b>IMAPITable::Restrict</b>, or <b>IMAPITable::SetColumns</b> method or when an underlying process attempts to update a table with, for example, new or modified rows. </p>
<h4>See Also</h4>
<p>
<a href="groups_00tv.htm">Notification Structures</a>, <a href="inter026_43lg.htm"><b>IMAPITable::Restrict</b></a>, <a href="inter026_7x83.htm"><b>IMAPITable::SetColumns</b></a>, <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a>, <a href="structyp_9sbp.htm"><b>SPropValue</b></a>, <a href="structyp_233r.htm"><b>SRow</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Folders for Remote Transports</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_implementing_folders_for_remote_transports"></a>Implementing Folders for Remote Transports</h2>
<p>
Since the folder that remote transport providers implement is not a fully functional MAPI folder, remote transport providers do not have to implement all the methods in the <a href="inter013_9ohe.htm"><b>IMAPIFolder</b></a> interface. You do need to implement the <a href="inter013_6pmb.htm"><b>IMAPIFolder::SetMessageStatus</b></a> method. You should derive a C++ class from the <b>IMAPIFolder</b> interface to implement the folder. Because <b>IMAPIFolder</b> inherits from the <b>IMAPIContainer</b>, <b>IMAPIProp</b>, and <b>IUnknown</b> interfaces, there are some methods from those interfaces that need to be implemented as well. Methods from those interfaces that are not listed here should be implemented as stubs which return MAPI_E_NO_SUPPORT.</p>
<p>
<b>IMAPIFolder</b> is a pure virtual interface, containing no data members or predefined methods, only method declarations. You must implement basic functionality such as a constructor and destructor, reference counting, and declaring and defining any needed member variables. Your class's declaration should include data members for the folder's contents table, a pointer to the logon object and status object (the parent objects of the folder), and a reference counter.</p>
<p>
Since the <b>IMAPIFolder</b> interface itself does not define any mechanism for filling the contents table with message headers, you will need to define custom methods to do this. The minimum implementation of this interface has read-only functionality. You will need to implement additional methods to give your implementation read/write functionality.</p>
<p>
The only method from the <b>IMAPIContainer</b> interface that must be fully implemented is <a href="inter011_0sx1.htm"><b>GetContentsTable</b></a>. The remaining methods can return MAPI_E_NO_SUPPORT.</p>
<p>
Remote transport providers must implement only four methods from the <b>IMAPIProp</b> interface in addition to the usual stubs for the other methods in this interface. The required <b>IMAPIProp</b> methods are:</p>
<p class=indent1>
<a href="inter022_1hv6.htm"><b>GetLastError</b></a></p>
<p class=indent1>
<a href="inter022_5rqr.htm"><b>SaveChanges</b></a></p>
<p class=indent1>
<a href="inter022_44c3.htm"><b>GetProps</b></a></p>
<p class=indent1>
<a href="inter022_79v8.htm"><b>GetPropList</b></a></p>
<p>
Because MAPI adheres to the OLE component object model, you must implement a few methods from <b>IUnknown</b>. </p>
<p>
The semantics of the <b>QueryInterface</b> method that your implementation should follow are described in the Platform SDK. If the interface identifier passed into <b>QueryInterface</b> is one of IID_IMAPIFolder, IID_IMAPIContainer, or IID_IMAPIProp, then a pointer to the folder object should be passed back to the caller in the parameter provided for that purpose, the reference count of the folder must be incremented, and the method should return S_OK.</p>
<p>
If the interface identifier passed in is IID_IUnknown, then a pointer to the transport provider's status object should be returned, according to the OLE common object model (COM) rules, and the status object's <b>AddRef</b> method should be called before <b>QueryInterface</b> returns S_OK.</p>
<p>
If the interface identifier is anything else, <b>QueryInterface</b> should return MAPI_E_INTERFACE_NOT_SUPPORTED.</p>
<p>
Your implementation of <b>IUnknown::Release</b> should do the following things:
<ul>
<li>
Decrement the reference count for the folder.</li>
<li>
If there are no remaining external references to the object — that is, the folder object contains its only remaining reference — and the transport provider caches the folder's contents table, this is the time to save the contents table to whatever external resource is appropriate.</li>
<li>
If the reference count is zero, the folder should delete itself.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

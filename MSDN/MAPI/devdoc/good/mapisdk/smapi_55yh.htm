<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Attachments with Simple MAPI</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_handling_attachments_with_simple_mapi"></a>Handling Attachments with Simple MAPI</h1>
<p>
Simple MAPI handles attachments by means of an array of <a href="smapiref_671b.htm"><b>MapiFileDesc</b></a> structures pointed to by the <b>lpFiles</b> member of a <a href="smapiref_6n1b.htm"><b>MapiMessage</b></a> structure. The <b>nFileCount</b> member of the <b>MapiMessage</b> structure indicates the length of the array, with a value of 0 indicating there are no attachments. All Simple MAPI attachments are returned by means of temporary files.</p>
<p>
Simple MAPI recognizes three types of attachments: data files, editable OLE objects, and static OLE objects. Use the values of the <b>flFlags</b> and <b>lpszFileName</b> members of a <b>MapiFileDesc</b> structure to determine the type of attachment it describes. OLE 2 attachments are identified by the .STG extension in the <b>lpszFileName</b> member. OLE 1 attachments are identified by the MAPI_OLE flag in the <b>flFlags</b> member. OLE 1 compliant clients which receive OLE 2 attachments can convert them by handling the OLE <b>IStorage</b> interface themselves or by using an OLE server to convert them to OLE 1. Embedded messages are data files that have the .MSG extension in the <b>lpszFileName</b> member.</p>
<p>
Each attachment has an <b>nPosition</b> member that stores its position within the message. The position is an index into the message's <b>lpszNoteText</b> member — which can be treated as an array of characters. The attachment will appear at the character at its position in the message; that is, the attachment will be rendered instead of the character <b>lpszNoteText[nPosition]</b>. The special value <b>-1 </b>(<b>0xFFFFFFFF</b>) indicates that the attachment is not rendered in this way; in this case, the client receiving the message is responsible for providing the user with a way of accessing the attachment. Note that the position is a character position within the text note, not a byte offset into the text note. This is an important distinction when double byte character sets are in use.</p>
<p>
<b>Note</b>  The attachment should be rendered <i>instead</i> of the character stored in <b>lpszNoteText[nPosition]</b>. The actual value of <b>lpszNoteText[nPosition]</b> should be completely immaterial to the way the message is displayed to the user.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add attachments to a message</h5>
<ol>
<li>
Allocate an array of <a href="smapiref_671b.htm"><b>MapiFileDesc</b></a> structures, one for each attachment.</li>
<li>
Set the members of each array element to values appropriate for the data files or OLE objects that are being attached.</li>
<li>
Set the message's <b>nFileCount</b> member to the number of attachments.</li>
<li>
Set the message's <b>lpFiles</b> member to the address of the first element of the array of <b>MapiFileDesc</b> structures.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To handle attachments in a message your client has received</h5>
<ol>
<li>
Scan the attachments in the array of <a href="smapiref_671b.htm"><b>MapiFileDesc</b></a> structures and note their character positions.</li>
<li>
When displaying the message text for the user, place graphic representations of data file attachments or OLE objects at the appropriate positions.</li>
<li>
Provide a mechanism for the user to interact with the attachments. You might choose to implement a point-and-click interface, or allow users to select actions such as saving and opening from a menu.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Status Table and Status Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_using_the_status_table_and_status_objects"></a>Using the Status Table and Status Objects</h2>
<p>
MAPI provides a table with information about the status of the MAPI subsystem, MAPI spooler, address book, or a particular service provider. You can access this table by calling <a href="inter023_04md.htm"><b>IMAPISession::GetStatusTable</b></a>. </p>
<p>
Each row in the status table represents a status object implemented by MAPI or a service provider. You can use a status object to display a provider's configuration property sheet, to change a provider password, to upload or download messages, and to communicate with a particular transport provider. </p>
<p>
There are two ways to access a status object:
<ul>
<li>
Through the status table</li>
<li>
Through a logon object's <b>OpenStatusEntry</b> method</li>
</ul>
<p>
Because logon objects are unavailable to clients, you must use the status table to access status objects. The status table approach is indirect, requiring a few calls before the status object is opened and a pointer to its <b>IMAPIStatus</b> implementation returned. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To use the status table to open a status object</h5>
<ol>
<li>
Call <b>IMAPIStatus::GetStatusTable</b> to retrieve an <b>IMAPITable</b> pointer. </li>
<li>
Call the status table's <a href="inter026_7x83.htm"><b>IMAPITable::SetColumns</b></a> method to limit the column set to <a href="propa_8cv8.htm">PR_ENTRYID</a>, <a href="propb_0oh1.htm">PR_RESOURCE_TYPE</a>, and <a href="propa_1yjp.htm">PR_DISPLAY_NAME</a>.</li>
<li>
Limit the table view to a particular status object. For MAPI implementations, a client can define a property restriction using <a href="propb_0oh1.htm">PR_RESOURCE_TYPE</a>. For service provider implementations, a client can restrict on <a href="propb_9aux.htm">PR_PROVIDER_DISPLAY</a>, the name of the provider, or on <a href="propb_5yud.htm">PR_PROVIDER_DLL_NAME</a>, the name of the provider DLL file.</li>
<li>
Call <a href="inter026_43lg.htm"><b>IMAPITable::Restrict</b></a> to set the restriction.</li>
<li>
Call <a href="function_0dgz.htm"><b>HrQueryAllRows</b></a>, passing in the <a href="structyp_6fxq.htm"><b>SPropertyRestriction</b></a> structure, to retrieve the row that represents the status of the provider.</li>
<li>
Call <a href="inter023_146x.htm"><b>IMAPISession::OpenEntry</b></a>, specifying the entry identifier from the status table row, to open the status object and retrieve an <b>IMAPIStatus</b> pointer.</li>
</ol>
<p>
To display a property sheet, call the status object's <a href="inter024_138n.htm"><b>IMAPIStatus::SettingsDialog</b></a> method for the target provider. <b>SettingsDialog</b> displays a property sheet for viewing and in some cases, changing the configuration properties of a provider.</p>
<p>
To communicate with a transport provider, call its status object's <a href="inter024_6x2d.htm"><b>IMAPIStatus::ValidateState</b></a> method. <b>ValidateState</b> can reconfigure a transport provider, prevent the provider from displaying a user interface, and control a session that involves downloading message headers from a remote server, depending on the flags that you pass in. For example, to cancel the downloading of remote headers, pass the ABORT_XP_HEADER_OPERATION flag to <b>ValidateState</b>. To connect or disconnect from the remote server, pass FORCE_XP_CONNECT or FORCE_XP_DISCONNECT. To reconfigure the provider, pass CONFIG_CHANGED. </p>
<p>
Clients that implement sending or receiving of messages on demand call either a transport provider's or the MAPI spooler's <a href="inter024_8c37.htm"><b>IMAPIStatus::FlushQueues</b></a> method. You can pass three flags into the method: FLUSH_UPLOAD, FLUSH_DOWNLOAD, and FLUSH_FORCE. FLUSH_UPLOAD instructs the provider or the MAPI spooler to send any messages waiting in the output queue while FLUSH_DOWNLOAD instructs the provider or the MAPI spooler to receive any incoming messages. FLUSH_FORCE can be set with either of the other flags to cause the status object to perform the flush regardless of the timing.</p>
<p>
Do not expect to be able to call <b>SettingsDialog</b> or <b>ChangePassword</b> on any of the MAPI subsystem, MAPI spooler, or address book status objects. Both the subsystem and address book status objects only support <b>ValidateState</b>; the MAPI spooler status object supports <b>FlushQueues </b>in addition to <b>ValidateState</b>.</p>
<p>
For more information, see <a href="tables_1rad.htm">Status Table</a> and <a href="extend_7rzn.htm">Status Objects</a>.</p>
<p>&nbsp;</p></body>
</HTML>

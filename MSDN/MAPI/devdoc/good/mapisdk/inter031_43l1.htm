<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMsgStore::Advise</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_imsgstore_advise"></a>IMsgStore::Advise</h2>
<p>
The <b>IMsgStore::Advise</b> method registers to receive notification of specified events affecting the message store.</p>
<h4>Quick Info</h4>
<p>
See <a href="inter031_1jg0.htm"><b>IMsgStore : IMAPIProp</b></a>.</p>
<pre><code><b>HRESULT Advise(
  ULONG</b><i> cbEntryID</i><b>,</b>                 
<b>  LPENTRYID</b><i> lpEntryID</i><b>,</b>             
<b>  ULONG</b><i> ulEventMask</i><b>,</b>               
<b>  LPMAPIADVISESINK</b><i> lpAdviseSink</i><b>,</b>   
<b>  ULONG FAR *</b><i> lpulConnection       </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cbEntryID</i></dt>
<dd>
[in] Count of bytes in the entry identifier pointed to by the <i>lpEntryID</i> parameter.</dd>
<dt>
<i>lpEntryID</i></dt>
<dd>
[in] Pointer to the entry identifier of the folder or message about which notifications should be generated, or NULL. If <i>lpEntryID</i> is set to NULL, <b>Advise</b> registers for notifications on the entire message store. </dd>
<dt>
<i>ulEventMask</i></dt>
<dd>
[in] A mask of values indicating the types of notification events that the caller is interested in and should be included in the registration. There is a corresponding <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a> structure associated with each type of event that holds information about the event.
<p>
The following are valid values for the <i>ulEventMask</i> parameter:

<dl>
<dt>
<i>fnevCriticalError</i></dt>
<dd>
Registers for notifications about severe errors, such as insufficient memory.</dd>
<dt>
<i>fnevExtended</i></dt>
<dd>
Registers for notifications about events specific to the particular message store provider.</dd>
<dt>
<i>fnevNewMail</i></dt>
<dd>
Registers for notifications about the arrival of new messages. </dd>
<dt>
<i>fnevObjectCreated</i></dt>
<dd>
Registers for notifications about the creation of a new folder or message.</dd>
<dt>
<i>fnevObjectCopied</i></dt>
<dd>
Registers for notifications about a folder or message being copied.</dd>
<dt>
<i>fnevObjectDeleted</i></dt>
<dd>
Registers for notifications about a folder or message being deleted.</dd>
<dt>
<i>fnevObjectModified</i></dt>
<dd>
Registers for notifications about a folder or message being modified.</dd>
<dt>
<i>fnevObjectMoved</i></dt>
<dd>
Registers for notifications about a folder or message being moved.</dd>
<dt>
<i>fnevSearchComplete</i></dt>
<dd>
Registers for notifications about the completion of a search operation.</dd>
</dl>
</dd>
<dt>
<i>lpAdviseSink</i></dt>
<dd>
[in] Pointer to an advise sink object to receive the subsequent notifications. This advise sink object must have already been allocated.</dd>
<dt>
<i>lpulConnection</i></dt>
<dd>
[out] Pointer to a nonzero number that represents the connection between the caller's advise sink object and the session. </dd>
<dt>
<i>lpAdviseSink</i></dt>
<dd>
[in] Pointer to an advise sink object to receive the subsequent notifications. This advise sink object must have already been allocated. </dd>
<dt>
<i>lpulConnection</i></dt>
<dd>
[out] Pointer to a nonzero connection number representing the connection between the caller's advise sink object and the message store.
</dd>
</dl>
<h4>Return Value</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The registration was successful.</dd>
<dt>
MAPI_E_NO_SUPPORT</dt>
<dd>
The message store provider does not support registration for notification through the message store.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>IMsgStore::Advise</b> method establishes a connection between the caller's advise sink object and either the message store or an object in the message store. This connection is used to send notifications to the advise sink when one or more events as specified in the <i>ulEventMask</i> parameter occur to the advise source object. When <i>lpEntryID</i> points to a valid entry identifier, the advise source is the object identified by this entry identifier. When <i>lpEntryID</i> is NULL, the advise source is the message store.</p>
<p>
To send a notification, either the message store provider or MAPI calls the registered advise sink's <a href="inter010_4y2h.htm"><b>IMAPIAdviseSink::OnNotify</b></a> method. One of the parameters to <b>OnNotify</b>, a notification structure, contains information that describes the specific event.</p>
<h4>Notes to Implementers</h4>
<p>
You can support notification with or without help from MAPI. MAPI has three support object methods for helping service providers implement notification: <a href="inter025_56xx.htm"><b>IMAPISupport::Subscribe</b></a>, <a href="inter025_3rhh.htm"><b>IMAPISupport::Unsubscribe</b></a>, and <a href="inter025_8fax.htm"><b>IMAPISupport::Notify</b></a>. If you elect to use the MAPI support methods, call <b>Subscribe</b> when your <b>Advise</b> method is called and release the <i>lpAdviseSink</i> pointer.</p>
<p>
If you elect to support notification yourself, call the <b>IUnknown::AddRef</b> method of the advise sink represented by the <i>lpAdviseSink</i> parameter to keep a copy of this pointer. Maintain this copy until your <a href="inter031_9esl.htm"><b>IMsgStore::Unadvise</b></a> method is called to cancel the registration. </p>
<p>
Regardless of how you support notification, assign a nonzero connection number to the notification registration and return it in the <i>lpulConnection</i> parameter. Do not release this connection number until <b>Unadvise</b> has been called and has completed.</p>
<h4>Notes to Callers</h4>
<p>
On systems that support multiple threads of execution, the call to <b>OnNotify </b>can also occur on any thread at any time. If you must be assured that notifications only occur at a particular time on a particular thread, call <a href="function_1fxn.htm"><b>HrThisThreadAdviseSink</b></a> to generate the advise sink object that you pass to <b>Advise</b>. </p>
<p>
After a call to <b>Advise</b> has succeeded and before<b> Unadvise</b> has been called to cancel the registration, be prepared for the advise sink object to be released. It is wise to release your advise sink object after <b>Advise</b> returns unless you have a specific long-term use for it. </p>
<p>
For an overview of the notification process, see <a href="extend_8fvt.htm">Event Notification in MAPI</a>. </p>
<p>
For more information on handling notifications, see <a href="consider_4nw3.htm">Handling Notifications</a>. </p>
<h4>See Also</h4>
<p>
<a href="function_1fxn.htm"><b>HrThisThreadAdviseSink</b></a>, <a href="inter010_4y2h.htm"><b>IMAPIAdviseSink::OnNotify</b></a>, <a href="inter031_9esl.htm"><b>IMsgStore::Unadvise</b></a>, <a href="structyp_5dbi.htm"><b>NOTIFICATION</b></a></p>
<p>&nbsp;</p></body>
</HTML>

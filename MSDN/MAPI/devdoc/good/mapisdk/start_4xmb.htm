<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Message Filtering to Manage Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_using_message_filtering_to_manage_messages"></a>Using Message Filtering to Manage Messages</h1>
<p>
The MAPI spooler makes calls to two different types of extensions by which code can be inserted in the message transmission process. These extensions — known as preprocessors and spooler hooks — can be used for a wide variety of purposes including altering the recipient list or content of an outbound message, archiving outbound messages in local storage or on a central server, directing inbound messages to a particular folder based on arbitrary criteria, and responding automatically to inbound messages.</p>
<h4>Design Tasks</h4>
<ol>
<li>
Decide whether to use a preprocessor or a spooler hook.<p>
A preprocessor is called for outbound messages only. It may choose to be called for all messages, or for messages that have recipients of a particular type. Those recipients can be selected based on the address type (<a href="propa_4gkl.htm">PR_ADDRTYPE</a>), on the <a href="structyp_3p9g.htm"><b>MAPIUID</b></a> which qualifies the recipient's entry identifier, or both. See <a href="inter025_53qq.htm"><b>IMAPISupport::RegisterPreprocessor</b></a>. 
<p>
A preprocessor can create new messages based on the input message, returning them through its <i>lpppMessage</i> parameter. In no case should the input message be placed in the <i>lpppMessage</i> parameter. If a preprocessor does not want the input message to be sent, it should delete all the recipients and set the <a href="propa_57zo.htm">PR_DELETE_AFTER_SUBMIT</a> property; the input message should not be deleted using message store calls. 
<p>
A spooler hook may choose to be called for all inbound messages, all outbound messages, or both, by setting the HOOK_INBOUND flag, the HOOK_OUTBOUND flag, or both in its <a href="propb_4u5v.htm">PR_RESOURCE_FLAGS</a> property on the provider profile section in MAPISVC.INF. See <a href="appxfile_723q.htm">File Format of MAPISVC.INF</a>.
<p>
To delete an inbound or outbound message, a hook should set the HOOK_DELETE flag in its <i>lpulFlags</i> parameter. It should not use message store calls to delete the message presented to it through its interface; it may use message store calls to create, modify, or delete other messages. A hook can prevent processing of a message by other hooks, including the default hook that processes receive folder settings, by setting the HOOK_CANCEL flag in <i>lpulFlags</i>. 
<p>
When working with a tightly coupled message store and transport, the store itself can transmit a message that is not destined for any spooler-based transports. Whether preprocessors and hooks are called in this situation depends upon the message store implementation. Microsoft Exchange Server, for example, calls preprocessors on outbound messages but does not call either inbound or outbound spooler hooks. See <a href="extend_1zop.htm">Sending Messages with MAPI</a>. 
<p>
On an outbound message, hooks and preprocessors participate in a complicated sequence of events. The following steps involve hooks and preprocessors.
<ol type=a>
<li>
The <a href="function_82lh.htm"><b>PreprocessMessage</b></a> entry point of each preprocessor is called before any transport provider handles the message. It can update the recipient list, alter message content, or even create additional messages. The order in which preprocessors are called is the same as the order in which the transports that registered them are called to handle outbound messages. See <a href="start_1ihx.htm">Creating and Configuring a Profile</a>.</li>
<li>
Transport providers are called to transmit the message. If any transport defers message processing, no hooks are called until the deferred processing is complete.</li>
<li>
The <a href="function_7gq7.htm"><b>RemovePreprocessInfo</b></a> entry point of each preprocessor is called after all transports have handled the message. </li>
<li>
The <a href="inter039_6yi3.htm"><b>ISpoolerHook::OutboundMsgHook</b></a> method is called for each hook that sets the HOOK_OUTBOUND flag in the <a href="propb_4u5v.htm">PR_RESOURCE_FLAGS</a> property. The order in which hooks are called is the same as the order in which they were installed in the profile; it does not follow the transport order because a hook does not necessarily have an associated transport provider.</li>
</ol>
<p>
For inbound messages, preprocessors are not called. Hooks are called as follows:
<ol type=a>
<li>
The receiving transport provider completes its work.</li>
<li>
The <a href="inter039_0mcr.htm"><b>ISpoolerHook::InboundMsgHook</b></a> method is called for each hook that sets the HOOK_INBOUND flag in the PR_RESOURCE_FLAGS property. The order in which hooks are called is the same as the order in which they were installed in the profile; it does not follow the transport order because a hook does not have an associated transport provider.</li>
<li>
For inbound messages, the receive folder assignment is honored only if a hook has not moved the message to another folder. Conceptually, the MAPI spooler implements an internal hook which is always called last and only if no previous hook returns the HOOK_CANCEL flag; it finds the receive folder based on the message's <a href="propa_0ecz.htm">PR_MESSAGE_CLASS</a> property and places the message in that folder. See <a href="inter031_7acy.htm"><b>IMsgStore::GetReceiveFolder</b></a>.</li>
</ol>
</li>
<li>
Define configuration parameters and understand how your hook or preprocessor is to be installed. A spooler hook is a distinct service provider type and is added to the user's profile as part of a message service, either alone or together with other related service providers. Any configuration parameters are normally stored in the profile and edited using the property pages for the message service. A preprocessor is not a distinct service provider type; it must be registered by a transport provider. If necessary, a minimal transport provider can be created for this purpose alone.</li>
</ol>
<h4>Implementation Tasks</h4>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement a preprocessor</h5>
<ul>
<li>
Create a DLL containing the <a href="function_82lh.htm"><b>PreprocessMessage</b></a> and <a href="function_7gq7.htm"><b>RemovePreprocessInfo</b></a> entry points. It is strongly recommended, though not required, that all the code and entry points listed here be implemented in the same DLL; this minimizes the delay in loading MAPI applications.</li>
<li>
Call the <a href="inter025_53qq.htm"><b>IMAPISupport::RegisterPreprocessor</b></a> method in a transport provider.</li>
<li>
Create a transport provider entry point, and the remainder of a minimal transport, if there is no existing transport. The minimal transport should initialize as recommended in the topic <a href="xp_1vn7.htm">Required Functionality for Transport Providers</a>. In response to the <b>IXPLogon::AddressTypes</b> call, the transport provider should return a single zero-length string in <i>lpppszAdrTypeArray</i> and NULL in <i>lpppUIDArray</i>.</li>
<li>
Create a MAPISVC.INF fragment for the transport provider and the message service that contains it. See <a href="provider_6mxx.htm">Implementing a Message Service</a>.</li>
<li>
Optionally, but strongly recommended, create a message service entry point for configuration. See <a href="provider_7x9q.htm">Implementing a Service Provider Entry Point Function</a>.</li>
<li>
Optionally, create an online Help file linked to your configuration property pages, wizard pages, or both, providing full details about all configuration options.</li>
<li>
Optionally, create a header file for custom programmatic configuration by MAPI clients.</li>
<li>
Optionally, create a service wizard entry point for interactive configuration by users. See <a href="provider_2gxa.htm">Supporting Message Service Configuration</a> and <a href="function_0gzd.htm"><b>WIZARDENTRY</b></a>.</li>
<li>
Optionally, create a .PRF file detailing configuration properties for the message service. See <a href="consider_2equ.htm">Creating a Profile with NEWPROF</a>.</li>
</ul>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement a spooler hook</h5>
<ul>
<li>
Create a DLL containing the <b>HPProviderInit</b> entry point. It is strongly recommended, though not required, that all the code and entry points listed here be implemented in the same DLL; this minimizes the delay in loading MAPI applications. See <a href="provider_7x9q.htm">Implementing a Service Provider Entry Point Function</a>.</li>
<li>
Create a MAPISVC.INF fragment for the hook provider and the message service that contains it. See <a href="provider_6mxx.htm">Implementing a Message Service</a>.</li>
<li>
Optionally, but strongly recommended, create a message service entry point for configuration. See <a href="provider_7x9q.htm">Implementing a Service Provider Entry Point Function</a>.</li>
<li>
Optionally, create a header file for custom programmatic configuration by MAPI clients.</li>
<li>
Optionally, create a service wizard entry point for interactive configuration by users. See <a href="provider_2gxa.htm">Supporting Message Service Configuration</a> and <a href="function_0gzd.htm"><b>WIZARDENTRY</b></a>.</li>
<li>
Optionally, create an online Help file linked to your configuration property pages, wizard pages, or both, providing full details about all configuration options.</li>
<li>
Optionally, create a .PRF file detailing configuration properties for the message service. See <a href="consider_2equ.htm">Creating a Profile with NEWPROF</a>. </li>
</ul>
<h4>About Sample Source Code</h4>
<p>
See the following topics:</p>
<p class=indent1>
<a href="start_7tpu.htm">Sample Transport Provider</a></p>
<p class=indent1>
<a href="start_0n8y.htm">Sample Messaging Hook Provider</a></p>
<p>&nbsp;</p></body>
</HTML>

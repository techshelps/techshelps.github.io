<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Restriction Code</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mapi1book_sample_restriction_code"></a>Sample Restriction Code</h3>
<p>
The following sample code shows how to create a restriction that filters out all messages that do not contain the word "volleyball" in the subject line and were not sent to Sue from Sam. A tree of <a href="structyp_45ny.htm"><b>SRestriction</b></a> structures is required, with the top node being an <b>AND</b> restriction implemented with an <a href="structyp_0v1q.htm"><b>SAndRestriction</b></a> structure. The three restrictions that are joined by the <b>AND</b> operation are a subobject restriction that searches for messages sent to Sue, a content restriction that searches for messages from Sam, and another <b>AND</b> restriction that searches for messages that have a subject containing "volleyball." Because PR_SUBJECT is not a required property, an exist restriction must be included.</p>
<p>
This code uses dynamic allocation and initialization; it is possible to allocate and initialize statically as well. In the interest of brevity, the error checking that must occur following the allocation calls is not included in the sample. </p>
<pre><code>HRESULT BuildRestriction (LPTSTR pszSent, LPTSTR pszFrom, 
                                LPTSTR pszSubjectText);
{
    LPSRestriction pRest, pAndRes, pObjRes, pSubjAndRes;
    LPSPropValue pRecip, pSender, pSubject;
    HRESULT hResult;
    ULONG ulResCount = 3, ulSubjCount = 2

    // Allocate and build <b>AND</b> restriction to join criteria
    hResult = MAPIAllocateMore (sizeof(SRestriction)*ulResCount, pRest, 
            (LPVOID *)&amp;pAndRes);
    pRest-&gt;rt = RES_AND;
    pRest-&gt;res.resAnd.cRes = ulResCount;
    pRest-&gt;res.resAnd.lpRes = pAndRes;

    // Allocate and build subobject restriction to search recipient list
    hResult = MAPIAllocateMore (sizeof(SRestriction), pRest, 
            (LPVOID *)&amp;pObjRes);
    pAndRes[0].rt = RES_SUBRESTRICTION;
    pAndRes[0].res.resSub.ulSubObject = PR_MESSAGE_RECIPIENTS;
    pAndRes[0].res.resSub.lpRes = pObjRes;

    // Allocate and build content restriction to look for recipient
    hResult = MAPIAllocateMore (sizeof(SPropValue), pRest, 
            (LPVOID *)&amp;pRecip);
    pObjRes-&gt;rt = RES_CONTENT;
    pObjRes-&gt;res.resContent.ulFuzzyLevel = 
            FL_FULLSTRING | FL_IGNORECASE;
    pObjRes-&gt;res.resContent.ulPropTag = pRecip-&gt;ulPropTag = 
            PR_DISPLAY_NAME;
    pObjRes-&gt;res.resContent.lpProp = pRecip;
    pRecip-&gt;Value.LPSZ = pszSent;              // pszSent set to Sue
    

    // Allocate and build content restriction to look for sender
    hResult = MAPIAllocateMore (sizeof(SPropValue), pRest, 
            (LPVOID *)&amp;pSend);
    pAndRes[1].rt = RES_CONTENT;
    pAndRes[1].res.resContent.ulFuzzyLevel = 
            FL_FULLSTRING | FL_IGNORECASE;
    pAndRes[1].res.resContent.ulPropTag = pSend-&gt;ulPropTag = 
            PR_SENDER_NAME;
    pAndRes[1].res.resContent.lpProp = pSend;
    pSend-&gt;Value.LPSZ = pszName;                    // pszName set to Sam

    // Allocate and build <b>AND</b> restriction to look for subject
    hResult = MAPIAllocateMore (sizeof(SRestriction)*ulSubjCount, pRest, 
            (LPVOID *)&amp;pSubjAndRes);
    pRest-&gt;rt = RES_AND;
    pRest-&gt;res.resAnd.cRes = ulResCount;
    pRest-&gt;res.resAnd.lpRes = pAndRes;

    // Create an <b>AND</b> restriction to search for subject
    hResult = MAPIAllocateMore (sizeof(SPropValue), pRest, 
            (LPVOID *)&amp;pSubjAndRes);
    pAndRes[2].rt = RES_AND;
    pAndRes[2].res.resAnd.cRes = ulSubjCount;
    pAndRes[2].res.resAnd.lpRes = pSubjAndRes;

    // Exist restriction to check that PR_SUBJECT exists
    hResult = MAPIAllocateMore (sizeof(SPropValue), pRest, 
            (LPVOID *)&amp;pSubj);
    pSubjAndRes[0].rt = RES_EXIST;
    pSubjAndRes[0].res.resExist.ulReserved1 = 0;
    pSubjAndRes[0].res.resExist.ulReserved2 = 0;
    pSubjAndRes[0].res.resExist.ulPropTag = PR_SUBJECT;

    // Content restriction to check for "volleyball" in subject
    hResult = MAPIAllocateMore (sizeof(SPropValue), pRest, 
            (LPVOID *)&amp;pSubj);
    pSubjAndRes[1].res.resContent.ulFuzzyLevel = 
            FL_SUBSTRING | FL_IGNORECASE;
    pSubjAndRes[1].res.resContent.ulPropTag = pSubj-&gt;ulPropTag = 
            PR_SUBJECT;
    pSubjAndRes[1].res.resContent.lpProp = pSubj;
    pSubj-&gt;Value.LPSZ = pszSubjectText;            

    return hResult;
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

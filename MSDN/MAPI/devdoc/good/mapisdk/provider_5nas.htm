<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Logon Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mapi1book_implementing_a_logon_object"></a>Implementing a Logon Object</h3>
<p>
Every address book, message store, and transport provider instantiates a logon object as part of its implementation of <a href="inter005_8nqm.htm"><b>IABProvider::Logon</b></a>, <a href="inter033_4ze6.htm"><b>IMSProvider::Logon</b></a>, or <a href="inter043_2r72.htm"><b>IXPProvider::TransportLogon</b></a>. Logon objects implement methods that help MAPI service client requests. Depending on your type of service provider, your logon object will support the following interface.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Logon object interface</th>
<th align=left width=52%>Service provider</th>
</tr>
<tr valign=top>
<td width=48%><a href="inter004_8ofi.htm"><b>IABLogon</b></a></td>
<td width=52%>Address book provider</td>
</tr>
<tr valign=top>
<td width=48%><a href="inter032_5032.htm"><b>IMSLogon</b></a></td>
<td width=52%>Message store provider</td>
</tr>
<tr valign=top>
<td width=48%><a href="inter042_2u9a.htm"><b>IXPLogon</b></a></td>
<td width=52%>Transport provider</td>
</tr>
</table><br>
<p>
Address book and message store providers implement these features in their logon objects:
<ul>
<li>
Support for event notification (<b>Advise</b> and <b>Unadvise</b> methods). For an overview of event notification, see <a href="extend_8fvt.htm">Event Notification in MAPI</a>. For information about supporting notification in your logon object, see <a href="provider_2ii6.htm">Supporting Event Notification</a>. </li>
<li>
Entry identifier comparison (<b>CompareEntryIDs</b> method). For general information about entry identifiers, see <a href="extend_9hpv.htm">Entry Identifiers</a>. For information about comparing entry identifiers in your logon object's <b>CompareEntryIDs</b> method, see <a href="provider_9mb2.htm">Supporting Object Access and Comparison</a>.</li>
<li>
Access to additional error information (<b>GetLastError</b> method). For more information about handling errors in MAPI, see <a href="extend_28dj.htm">Error Handling</a>. </li>
<li>
Access to objects implemented by the service provider (<b>OpenEntry</b> method). For more information, see <a href="provider_9mb2.htm">Supporting Object Access and Comparison</a>.</li>
<li>
Access to a status object (<b>OpenStatusEntry</b> method). For general information about status objects, see <a href="extend_7rzn.htm">Status Objects</a>. For specific information about implementing a status object, see <a href="provider_1gz8.htm">Implementing a Status Object</a>.</li>
<li>
Logoff (<b>Logoff</b> method). For more information, see <a href="provider_4ks2.htm">Shutting Down a Service Provider</a>.</li>
</ul>
<p>
If your provider is an address book provider, you will also implement these methods and associated features:
<ul>
<li>
<b>GetOneOffTable </b>to provide a listing of the templates that you support for creating new recipients. For more information, see <a href="tables_81pv.htm">One Off Tables</a> or <a href="ab_4m05.htm">Implementing a Provider One Off Table</a>.</li>
<li>
<b>OpenTemplateID</b> to provide access to the implementation of a recipient whose data resides in a host address book provider. For more information, see <a href="ab_0c36.htm">Acting as a Foreign Address Book Provider</a>. </li>
<li>
<b>PrepareRecips</b> to insure that the appropriate properties are available for all of the recipients in a recipient list. For more information, see <a href="inter004_4dpv.htm"><b>IABLogon::PrepareRecips</b></a>. </li>
</ul>
<p>
A transport provider's logon object, which implements <a href="inter042_2u9a.htm"><b>IXPLogon</b></a>, is quite different from the logon objects implemented by the other types of service providers. It has only two features in common with the other logon objects: access to a status object through the <b>OpenStatusEntry</b> method and a logoff operation through the <b>TransportLogoff</b> method. Transport providers implement the following unique features in their logon objects:
<ul>
<li>
Registration for address types (<b>AddressTypes</b> method) and message options (<b>RegisterOptions</b> method). For more information about registering an address type, see <a href="hookppr_2xpu.htm">Creating a Minimal Transport Provider</a> or <a href="xp_87fw.htm">Transport Provider-MAPI Spooler Operational Model</a>. For more information about registering message options, see <a href="xp_48ab.htm">Implementing Message and Recipient Options with Transport Providers</a>.</li>
<li>
Control of message transmission (<b>StartMessage</b>, <b>EndMessage</b> and <b>SubmitMessage</b> methods). For more information, see <a href="xp_38h8.htm">Message Reception Model</a>, <a href="xp_13n6.htm">Interacting with the MAPI Spooler</a>, and <a href="xp_1ru4.htm">Message Submission Model</a>.</li>
<li>
Internal state validation (<b>ValidateState</b> method). </li>
<li>
Ability to download or upload messages on demand (<b>FlushQueues</b> method). For more information, see <a href="xp_8h0k.htm">Implementing the <b>FlushQueues</b> Method</a>.</li>
<li>
Ability to query for pending messages (<b>Poll</b> method). For more information, see <a href="xp_38h8.htm">Message Reception Model</a>.</li>
<li>
Idle state detection (<b>Idle</b> method).</li>
<li>
Interaction with the MAPI spooler (<b>TransportNotify</b> method).</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

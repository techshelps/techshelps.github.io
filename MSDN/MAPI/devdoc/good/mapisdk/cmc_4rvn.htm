<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About CMC</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_about_cmc"></a>About CMC</h1>
<p>
The Common Messaging Calls (CMC) client interface is a set of ten functions that enables you to add simple messaging capabilities to your client applications quickly. For example, your client can send a message with a single CMC function call and receive a message with two CMC function calls.</p>
<p>
Because CMC is built on top of the core <a href="glossary_4s31.htm#_mapi1book_gly_mapi_subsystem">MAPI subsystem</a>, it shares the advantage of messaging system independence. The CMC API is especially valuable because it is also independent of the operating system and the underlying hardware used by the messaging system, providing a common messaging interface that can be used in virtually any environment. The CMC API is therefore a good choice for a messaging API when your client must run on multiple platforms and provide simple messaging functionality on each of these platforms.</p>
<p>
Because CMC isolates clients from the complexities of MAPI, service providers, networking, and any other mechanisms which implement messaging, the remainder of this document will use the term "messaging system" to mean all of those things taken together. As far as a CMC client is concerned, the implementation layer underneath CMC is the messaging system that the client is using.</p>
<p>
Although the Microsoft CMC implementation is built on top of a MAPI implementation, it is important to note that other implementations of CMC from other vendors might not be. In this document, "CMC" and "CMC implementation" mean "Microsoft's implementation of the CMC API using the MAPI API."</p>
<p>
The CMC API was developed in conjunction with the X.400 API Association (<a href="glossary_4s3c.htm#_mapi1book_gly_xapia">XAPIA</a>) standards organization and a group of e-mail vendors and users. It is supported on Microsoft Windows, MS-DOS, OS/2, Macintosh, and UNIX platforms. Because CMC is supported on several different platforms, a client application written to the CMC standard can be ported to other platforms. In contrast, MAPI is a Windows-only standard. </p>
<p>
The CMC API supports three principal tasks: sending messages, retrieving messages, and looking up addressing information.</p>
<p>
Note that these tasks do not have to be performed in isolation from each other. You can establish a session once with a call to the <a href="cmcref_3dbi.htm"><b>cmc_logon</b></a> function and use the resulting CMC session for the duration of the user's interaction with the application. During that time, you can make many CMC calls to perform messaging tasks such as send messages, receive them, and make address book queries.</p>
<p>
The CMC API works as a layer between a messaging-enabled application and the messaging system. The messaging system can support multiple messaging protocols, each using different messaging formats and protocols, for example, <a href="glossary_4s3c.htm#_mapi1book_gly_x.400">X.400</a>, RFC 822, and <a href="glossary_4s37.htm#_mapi1book_gly_simple_mail_transfer_protocol">Simple Mail Transfer Protocol</a>. The design of the CMC interface specifies that its functions be independent of the messaging protocols. However, the API does enable developers to use extensions to invoke protocol-specific functions. For more information, see <a href="cmc_7awj.htm">Using CMC Data Extensions</a>.</p>
<p>
An address book, a submission queue, and a receiving Inbox are the three messaging system components in the CMC API model. </p>
<p>
<img src="images/amapi_08.gif" border=0></p>
<p>
Using the address book, the messaging-enabled application can look up information about users of connected messaging systems and can resolve users' names to actual addresses. Some messaging systems can also provide an interface enabling users to create recipient lists for messages or find out details about specific recipients.</p>
<p>
The CMC implementation assigns a submission queue for each messaging-enabled application. By doing so, CMC provides each application with synchronous submission of messages to the underlying messaging system; once a call to send a message has returned, the calling application is guaranteed that the submission process has completed (although no guarantee is made about whether the message was successfully delivered). When the call has returned, the CMC implementation has all further responsibility for submitting the message to the underlying messaging system. </p>
<p>
On the receiving side, an Inbox receives all messages for a user. The messaging system maintains Inboxes on behalf of messaging users. These Inboxes are accessible to users of messaging-enabled applications who have the proper permissions. With the CMC API, you can retrieve summaries of the contents of an Inbox, along with identifiers for the particular messages summarized. You can use these identifiers to select and retrieve individual messages.</p>
<p>
The CMC API uses a fixed set of API functions, data structures, and data types. The API functions are the functions that your client calls to carry out messaging tasks. The data structures<i> </i>are the groupings of information that your client must provide to the CMC APIs, and are sometimes returned by the CMC APIs. The data types<i> </i>are basic elements that comprise the data structures. They each have a specific range of values and specific memory storage characteristics (for example, Boolean and floating point) and can have specific operations performed on them. For reference information, see <a href="cmcref_64tv.htm">Functions</a>, <a href="cmcref_75ir.htm">Structures and Data Types</a>, and <a href="cmcref_0jn7.htm">Data Extensions</a>.</p>
<p>&nbsp;</p></body>
</HTML>

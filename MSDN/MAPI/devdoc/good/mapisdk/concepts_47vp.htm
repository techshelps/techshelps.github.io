<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About the MAPI Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_about_the_mapi_architecture"></a>About the MAPI Architecture</h1>
<p>
MAPI defines a modular architecture, as shown in the following illustration. </p>
<p>
<img src="images/amapi_43.gif" border=0></p>
<p>
There are basically three types of <a href="glossary_4s2r.htm#_mapi1book_gly_client_application">client applications</a>: messaging-aware, messaging-enabled, and messaging-based. These applications are known as client applications because they are clients of the <a href="glossary_4s31.htm#_mapi1book_gly_mapi_subsystem">MAPI subsystem</a>. Messaging-aware and messaging-enabled applications are typically applications not primarily focused on messaging; these are word processing or spreadsheet applications — for example — that incorporate messaging as an added feature. Messaging-based applications employ messaging as a central part of their processing and offer extensive messaging features, such as the exchange of information of various types in various formats and the ability to save and organize the information locally. Electronic mail, scheduling, and work flow applications are examples of messaging-based applications.</p>
<p>
The MAPI subsystem is made up of the MAPI spooler, a common user interface, and the programming interfaces. The <a href="glossary_4s31.htm#_mapi1book_gly_mapi_spooler">MAPI spooler</a> is a separate process responsible for sending messages to and receiving messages from a messaging system. The common user interface is a set of dialog boxes that gives client applications a consistent look and users a consistent way to work.</p>
<p>
MAPI has programming interfaces that are used by the MAPI subsystem, by client application writers, and by service provider writers. The main programming interface is an object-based interface known as the MAPI programming interface. Based on the OLE Component Object Model, the MAPI programming interface is used by the MAPI subsystem and by messaging-based client applications and service providers written in C or C++. </p>
<p>
Client application writers have a choice of three other interfaces:
<ul>
<li>
<a href="glossary_4s37.htm#_mapi1book_gly_simple_mapi">Simple MAPI</a>. An API function-based client interface for applications written in C, Microsoft Visual C++, or Microsoft Visual Basic.</li>
<li>
<a href="glossary_4s2r.htm#_mapi1book_gly_common_messaging_calls">Common Messaging Calls</a> (CMC). An API function-based client interface for applications written in C or C++.</li>
<li>
<a href="glossary_4s2p.htm#_mapi1book_gly_active_messaging_library">Active Messaging Library</a>. An object-based client interface for applications written in C, C++, Visual Basic, or Visual Basic for Applications.</li>
</ul>
<p>
</p>
<p>
The Simple MAPI, CMC, and Active Messaging Library client interfaces are primarily for messaging-aware and messaging-enabled client applications. These interfaces are less complex; applications that require fewer messaging features can use Simple MAPI, CMC, or the Active Messaging Library to implement these features quickly and easily. </p>
<p>
Client application writers have the option of making MAPI calls either directly through the MAPI programming interface or indirectly through one of these three client-only interfaces. Messaging can be implemented with a single MAPI client interface or a combination of interfaces. A single application can make calls to methods or functions belonging to any of the interfaces.</p>
<p>
The service provider programming interface is the part of the object-based MAPI programming interface that applies specifically to <a href="glossary_4s37.htm#_mapi1book_gly_service_provider">service providers</a>. Service providers, positioned between the MAPI subsystem and the underlying messaging systems, translate requests from MAPI-compliant client applications into tasks a specific messaging system can understand. When tasks are complete, the service providers translate again, converting status and information that is messaging system-specific into a MAPI format. As with client applications, there are different types of service providers. Each type handles a different messaging system service. The address book provider, for example, works with directory information while the transport provider handles message transmission and reception. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Multiple Client Interfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_using_multiple_client_interfaces"></a>Using Multiple Client Interfaces</h2>
<p>
Most client applications will use one client API — either the <a href="glossary_4s2p.htm#_mapi1book_gly_active_messaging_library">Active Messaging Library</a>, <a href="glossary_4s37.htm#_mapi1book_gly_simple_mapi">Simple MAPI</a>, <a href="glossary_4s2r.htm#_mapi1book_gly_common_messaging_calls">CMC</a> or <a href="glossary_4s31.htm#_mapi1book_gly_mapi">MAPI</a>. However, some clients will need to take advantage of what more than one client API has to offer. These clients should use MAPI for some tasks and a simpler API for others. The MAPI architecture allows client applications to do this fairly easily by providing several API functions for converting between the environments.</p>
<p>
One common conversion task involves identifiers. Identifiers are used throughout MAPI to uniquely represent a component, such as a message or a service provider. MAPI uses a binary structure called an <a href="glossary_4s2t.htm#_mapi1book_gly_entry_identifier">entry identifier</a>; the Active Messaging Library uses a hexadecimal entry identifier, Simple MAPI uses a string called a message identifier, and CMC uses a string called a message reference. Identifiers can be simple or compound. Compound identifiers are supported by some message stores and are used with messages. They have two parts: one part that contains the record key of the message store and another part that contains the entry identifier of the message.</p>
<p>
MAPI only provides the means to convert between MAPI entry identifiers and all other identifiers. It does not provide the means for converting between Simple MAPI and CMC, Simple MAPI and the Active Messaging Library, or CMC and the Active Messaging Library.</p>
<p>
The following API functions are used to translate identifiers used by the different client API sets:</p>
<p class=indent1>
<a href="function_2mgo.htm"><b>FBinFromHex</b></a></p>
<p class=indent1>
<a href="function_9k4u.htm"><b>HexFromBin</b></a></p>
<p class=indent1>
<a href="function_7s4k.htm"><b>HrSzFromEntryID</b></a></p>
<p class=indent1>
<a href="function_1by2.htm"><b>HrEntryIDFromSz</b></a></p>
<p class=indent1>
<a href="function_1hk4.htm"><b>HrComposeEID</b></a></p>
<p class=indent1>
<a href="function_9r1g.htm"><b>HrDecomposeEID</b></a></p>
<p class=indent1>
<a href="function_74pw.htm"><b>HrComposeMsgID</b></a></p>
<p class=indent1>
<a href="function_3wv8.htm"><b>HrDecomposeMsgID</b></a></p>
<p>
The<b> FBinFromHex </b>and<b> HexFromBin</b> functions are used to translate the binary entry identifiers used in the MAPI programming interface and the hexadecimal entry identifiers used in the Active Messaging Library.</p>
<p>
The <b>HrEntryIDFromSz</b> function creates a MAPI entry identifier from a Simple MAPI string identifier and the <b>HrSzFromEntryID</b> function performs the opposite operation, producing a Simple MAPI string identifier from a MAPI entry identifier. </p>
<p>
The <b>HrComposeMsgID </b>function also creates a Simple MAPI identifer. However, <b>HrComposeMsgID</b> creates a <a href="glossary_4s2r.htm#_mapi1book_gly_compound_entry_identifier">compound entry identifier</a>, or identifier that can be used by Simple MAPI clients to open a nondefault message store. Compound entry identifiers for messages are built from the record key of the message store and the message's entry identifier. A message store's record key is a unique binary value that can be used for comparison. Calling <b>HrComposeMsgID</b> enables Simple MAPI clients to create the identifiers necessary for working with multiple message stores.</p>
<p>
The <b>HrComposeEID</b> function is similar to <b>HrComposeMsgID</b> because it is also used for creating compound entry identifiers. However, whereas <b>HrComposeMsgID</b> is primarily for Simple MAPI clients, <b>HrComposeEID</b> is for CMC clients. Callers of <b>HrComposeEID</b> pass a <a href="glossary_4s37.htm#_mapi1book_gly_session">session</a> pointer, a message store record key, and the entry identifier of an object. <b>HrComposeEID</b> produces a MAPI entry identifier based on both the record key and entry identifier, if possible, or only the entry identifier if the record key is not available. </p>
<p>
<b>HrDecomposeEID</b> separates a compound entry identifier into its parts: a message store record key and an entry identifier that represents a MAPI object. Use <b>HrDecomposeEID</b> with care; it is an expensive call. Both <b>HrComposeEID</b> and <b>HrDecomposeEID</b> can handle binary message identifiers that require string versions. </p>
<p>
Because <b>HrComposeEID</b>, <b>HrComposeMsgID</b>, <b>HrDecomposeEID</b>, and <b>HrDecomposeMsgID</b> all require a MAPI session pointer as input, client applications that are not started with the MAPI logon function, <b>MAPILogonEx</b>, must translate the current <a href="glossary_4s37.htm#_mapi1book_gly_session_handle">session handle</a> into a MAPI session before calling any of these functions. <b>HrEntryIDFromSz</b>, a function that does not require a session pointer, can also be used to create a compound entry identifier. However, subsequent uses of this entry identifier can fail. If possible, clients should use the <b>HrComposeMsgID</b> or <b>HrComposeEID</b> function instead. </p>
<p>
Converting session types is possible with one of two API functions: <a href="function_5fhf.htm"><b>ScMAPIXFromCMC</b></a><b> </b>or<b> <a href="function_571l.htm">ScMAPIXFromSMAPI</a></b>. To convert CMC sessions into MAPI sessions, use <b>ScMAPIXFromCMC</b>. To convert Simple MAPI sessions, use <b>ScMAPIXFromSMAPI</b>. Both functions take the current session handle as input and return a pointer to a MAPI session object. </p>
<p>
When using multiple client APIs, exercise caution in interpreting return values. Client APIs do not share the same set of return values, nor do they return the same type of values. For example, Simple MAPI and CMC functions return unique sets of unsigned long values whereas MAPI functions and methods return values that are of type HRESULT. In all cases, zero means a successful result. </p>
<p>
The unsigned long values and the HRESULT values are based on a numeric code which, in many cases, is the same for all caller types. However, there are a few cases where the values are different. The following table lists the differences between the values returned by Simple MAPI and MAPI.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Simple MAPI return value</th>
<th align=left width=54%>MAPI return value</th>
</tr>
<tr valign=top>
<td width=46%>MAPI_E_NOT_SUPPORTED</td>
<td width=54%>MAPI_E_NO_SUPPORT<br>
MAPI_E_INTERFACE_NOT_SUPPORTED<br>
MAPI_E_INVALID_PARAMETER<br>
MAPI_E_VERSION</td>
</tr>
<tr valign=top>
<td width=46%>MAPI_E_DISK_FULL</td>
<td width=54%>MAPI_E_NOT_ENOUGH_DISK</td>
</tr>
<tr valign=top>
<td width=46%>MAPI_E_NETWORK_FAILURE</td>
<td width=54%>MAPI_E_NETWORK_ERROR</td>
</tr>
<tr valign=top>
<td width=46%>MAPI_E_USER_ABORT</td>
<td width=54%>MAPI_E_USER_CANCEL</td>
</tr>
<tr valign=top>
<td width=46%>MAPI_E_ACCESS_DENIED</td>
<td width=54%>MAPI_E_NO_ACCESS</td>
</tr>
<tr valign=top>
<td width=46%>MAPI_E_AMBIGUOUS_RECIPIENT</td>
<td width=54%>MAPI_E_AMBIGUOUS_RECIP</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Macros for Error Handling</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_using_macros_for_error_handling"></a>Using Macros for Error Handling</h2>
<p>
There are several macros for making it easier to work with SCODE values on 16-bit platforms and HRESULT values on both 16- and 32-bit platforms. Some of the macros and functions below provide conversion between the two datatypes and can be used in client and service provider code that:
<ul>
<li>
Runs only on 16-bit platforms.</li>
<li>
Runs on both 16-bit and 32-bit platforms.</li>
<li>
Is 16-bit code being ported to 32-bit platforms.</li>
</ul>
<p>
For 32-bit environments, these datatype conversion macros exist to provide compatibility and to ease the porting effort. </p>
<p>
There are two sets of macros that test for failure or success: HR_SUCCEEDED and HR_FAILED and SUCCEEDED and FAILED. </p>
<p>
On 32-bit platforms, because SUCCEEDED is the same as HR_SUCCEEDED and FAILED is the same as HR_FAILED, developers that want to write cross-platform clients or service providers are the only ones that need to distinguish between an HRESULT and an SCODE. </p>
<p>
In this case, use the <b>ResultFromScode</b> macro to set the HRESULT variable to the corresponding HRESULT value for S_OK.</p>
<p>
<b>Warning</b>  The macro SCODE_FACILITY retrieves twelve bits from the SCODE in its Win16 implementation when it should only retrieve four. This can cause false negative results to occur when comparing the facility retrieved from a particular SCODE against predefined facility values. Programmers writing cross-platform code need to be aware of this problem.</p>
<p>
Commonly used macros are briefly described in the following table.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Macro</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%><b>GetScode</b></td>
<td width=67%>Converts an HRESULT into an SCODE.</td>
</tr>
<tr valign=top>
<td width=33%><b>ResultFromScode</b></td>
<td width=67%>Converts an SCODE into an HRESULT.</td>
</tr>
<tr valign=top>
<td width=33%><b>MAKE_SCODE</b></td>
<td width=67%>Constructs an SCODE from its components.</td>
</tr>
<tr valign=top>
<td width=33%><b>MAKE_HRESULT</b></td>
<td width=67%>Constructs an HRESULT from its components.</td>
</tr>
<tr valign=top>
<td width=33%><b>HR_SUCCEEDED</b></td>
<td width=67%>Tests an HRESULT for a success or warning condition.</td>
</tr>
<tr valign=top>
<td width=33%><b>HR_FAILED</b></td>
<td width=67%>Tests an HRESULT for an error condition.</td>
</tr>
<tr valign=top>
<td width=33%><b>HRESULT_CODE</b></td>
<td width=67%>Extracts the error code part of the HRESULT.</td>
</tr>
<tr valign=top>
<td width=33%><b>HRESULT_FACILITY</b></td>
<td width=67%>Extracts the facility from the HRESULT.</td>
</tr>
<tr valign=top>
<td width=33%><b>HRESULT_SEVERITY</b></td>
<td width=67%>Extracts the severity bit from the SEVERITY.</td>
</tr>
<tr valign=top>
<td width=33%><b>SCODE_CODE</b></td>
<td width=67%>Extracts the error code part of the SCODE.</td>
</tr>
<tr valign=top>
<td width=33%><b>SCODE_FACILITY</b></td>
<td width=67%>Extracts the facility from the SCODE.</td>
</tr>
<tr valign=top>
<td width=33%><b>SCODE_SEVERITY</b></td>
<td width=67%>Extracts the severity field from the SCODE.</td>
</tr>
<tr valign=top>
<td width=33%><b>SUCCEEDED</b></td>
<td width=67%>Tests an SCODE for a success or warning condition.</td>
</tr>
<tr valign=top>
<td width=33%><b>FAILED</b></td>
<td width=67%>Tests an SCODE for an error condition.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

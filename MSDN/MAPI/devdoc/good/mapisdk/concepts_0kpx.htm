<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Concepts and Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_concepts_and_architecture"></a>Concepts and Architecture</h1>
<p>
As business becomes more competitive, the success of an organization increasingly depends on how quickly, smoothly, and efficiently people within that organization work together. The key to a successful organization is how well that organization manages and distributes information. Networking is an important part of teamwork because it enables fast and efficient information exchange. But networking is only part of the solution; organizations must also keep track of the information and manage its distribution. Electronic messaging systems provide these capabilities. </p>
<p>
Electronic messaging has become critically important to enterprise computing. In fact, many organizations are looking to their electronic messaging systems to take on the role of a central communications backbone, used not only for electronic-mail (e-mail) messages, but to integrate all types of information. Electronic messaging provides a way for users in organizations to retrieve information from a variety of sources, to exchange information automatically, and to store, filter, and organize the information locally or across a network.</p>
<p>
Today, powerful enterprise-wide workgroup applications that manage group scheduling, forms routing, order processing, and project management are built on electronic messaging systems. Hundreds of different messaging systems are offered by different vendors, and a wide range of applications have been built to use them. But each of these messaging systems has a different programming interface, making an extensive development effort necessary to enable an application to interact with more than one system.</p>
<p>
To solve this problem, Microsoft, along with more than 100 independent software vendors (ISVs), messaging system suppliers, corporate developers, and consultants from around the world, has created the Messaging Application Programming Interface (MAPI). MAPI is a messaging architecture that enables multiple applications to interact with multiple messaging systems seamlessly across a variety of hardware platforms. </p>
<p>
<a href="glossary_4s31.htm#_mapi1book_gly_mapi">MAPI</a> is made up of a set of common application programming interfaces and a dynamic-link library (DLL) component. The interfaces are used to create and access diverse messaging applications and messaging systems, offering a uniform environment for development and use and providing true independence for both. The DLL contains the MAPI subsystem, which manages the interaction between front-end messaging applications and back-end messaging systems and provides a common user interface for frequent tasks. The <a href="glossary_4s31.htm#_mapi1book_gly_mapi_subsystem">MAPI subsystem</a> acts as a central clearinghouse to unify the various messaging systems and shield clients from their differences.</p>
<p>&nbsp;</p></body>
</HTML>

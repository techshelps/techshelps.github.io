<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About the MAPI Subsystem</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_about_the_mapi_subsystem"></a>About the MAPI Subsystem</h1>
<p>
The <a href="glossary_4s31.htm#_mapi1book_gly_mapi_subsystem">MAPI subsystem</a> consists of the following parts:
<ul>
<li>
Client and service provider programming interfaces</li>
<li>
MAPI spooler</li>
<li>
Common user interface</li>
</ul>
<p>
The MAPI programming interface is based on a powerful, object-oriented interface that subscribes to the OLE Component Object Model, a model for object interaction. MAPI defines a set of objects that share structure and behavior, enabling developers to create and use objects in a consistent manner. There is a large feature set available, enabling client developers, for example, to provide their users with access to message or recipient properties and customized views of message and address book information. Although all types of client applications can use the object-oriented MAPI interface, typically only messaging-based applications and service providers need its power and complexity. A simpler, more restrictive API is usually sufficient for messaging-aware and messaging-enabled applications.</p>
<p>
To support a wider audience of client application developers, there are three other API sets on top of MAPI: Common Messaging Calls (CMC), Simple MAPI, and the Active Messaging Library. Simpler to use and understand, these API sets provide messaging functionality through either C standard function calls or Visual Basic. Client application developers can choose the API that is most suitable for their needs. </p>
<p>
The following table describes each of the interfaces available to client applications.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Client interface</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="glossary_4s37.htm#_mapi1book_gly_simple_mapi">Simple MAPI</a></td>
<td width=52%>Supports existing messaging-enabled and messaging-aware applications. For C, C++, or Visual Basic client applications.</td>
</tr>
<tr valign=top>
<td width=48%><a href="glossary_4s2r.htm#_mapi1book_gly_common_messaging_calls">CMC</a></td>
<td width=52%>Supports cross-platform applications written in C or C++.</td>
</tr>
<tr valign=top>
<td width=48%><a href="glossary_4s2p.htm#_mapi1book_gly_active_messaging_library">Active Messaging Library</a></td>
<td width=52%>Supports Automation controllers written in C, C++, Visual Basic, or Visual Basic for Applications.</td>
</tr>
<tr valign=top>
<td width=48%><a href="glossary_4s31.htm#_mapi1book_gly_mapi">MAPI</a></td>
<td width=52%>Supports full-featured client applications and service providers written in C or C++.</td>
</tr>
</table><br>
<p>
The following illustration shows how Simple MAPI, CMC, and the Active Messaging Library are layered between MAPI and client applications. Messaging-based clients call directly into MAPI while messaging-aware and messaging-enabled clients call into Simple MAPI, the Active Messaging Library or CMC. Calls to these higher level APIs are forwarded to MAPI. </p>
<p>
<img src="images/amapi_45.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

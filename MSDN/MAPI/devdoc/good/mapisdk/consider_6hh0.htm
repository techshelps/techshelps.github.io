<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Opening an Attachment</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_opening_an_attachment"></a>Opening an Attachment</h2>
<p>
Opening an attachment involves displaying its data. For example, when a file attachment is opened, the contents of the file are displayed. Whereas messages and folders are opened using their entry identifiers, attachments are opened using their attachment numbers — <a href="propa_0p4d.htm">PR_ATTACH_NUM</a> properties. Attachment numbers are available through a message's attachment table.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To open all attachments in a message</h5>
<ol>
<li>
Call the message's <a href="inter029_24it.htm"><b>IMessage::GetAttachmentTable</b></a> method to access its attachment table.</li>
<li>
Call <a href="function_0dgz.htm"><b>HrQueryAllRows</b></a> to retrieve all the rows in the table. </li>
<li>
For each row:<ol type=a>
<li>
Open the attachment by passing the attachment number represented in the PR_ATTACH_NUM column in a call to the message's <a href="inter029_7qco.htm"><b>IMessage::OpenAttach</b></a> method. <b>OpenAttach</b> returns a pointer to an <b>IAttach</b> implementation that provides access to attachment properties. </li>
<li>
Call the attachment's <a href="inter022_44c3.htm"><b>IMAPIProp::GetProps</b></a> method to retrieve its <a href="propa_7o6c.htm">PR_ATTACH_METHOD</a> property.</li>
<li>
If PR_ATTACH_METHOD is set to ATTACH_BY_REF_ONLY, call <b>IMAPIProp::GetProps</b> to retrieve the <a href="propa_0011.htm">PR_ATTACH_PATHNAME</a> property.</li>
<li>
If PR_ATTACH_METHOD is set to ATTACH_BY_VALUE, call <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> to open the <a href="propa_6eni.htm">PR_ATTACH_DATA_BIN</a> property with the <b>IStream</b> interface. See the sample code following this procedure.</li>
<li>
If PR_ATTACH_METHOD is set to ATTACH_OLE and the attachment is an OLE 2 object:</li>
</ol>
</li>
</ol>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;Call <b>IMAPIProp::OpenProperty</b> to open the <a href="propa_7je2.htm">PR_ATTACH_DATA_OBJ</a> property with the <b>IStreamDocfile</b> interface. Attempt to use this interface because it is an implementation of <b>IStream</b> guaranteed to work with structured storage with the least amount of overhead.</td>
</tr>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;&nbsp;&nbsp;If the <b>OpenProperty</b> call fails, call it again to retrieve the PR_ATTACH_DATA_BIN property with the <b>IStreamDocfile</b> interface.</td>
</tr>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;&nbsp;&nbsp;If this second <b>OpenProperty</b> call fails, try again to call <b>OpenProperty</b> to retrieve PR_ATTACH_DATA_OBJ. However, rather than specifying <b>IStreamDocfile</b>, specify the <b>IStorage</b> interface.</td>
</tr>
</table><br>
<ol start=6 type=a>
<li>
If PR_ATTACH_METHOD is set to ATTACH_EMBEDDED_MSG, it is not unusual for the value of PR_ATTACH_DATA_OBJ to contain an error. This is because you and the table implementer have no way to agree on the type of object to return. To retrieve a pointer to the attached message, open the attachment using <a href="inter029_7qco.htm"><b>IMessage::OpenAttach</b></a>. Then access the attachment data by calling its <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method. </li>
</ol>
<p>
You can request that an attachment is opened in read/write or read-only mode. Read-only is the default mode, and many message store providers open all attachments in this mode regardless of what clients request. Pass the MAPI_BEST_ACCESS flag to request that the message store provider grant the highest level of access it can and then retrieve the open attachment's <a href="propa_4w8c.htm">PR_ACCESS_LEVEL</a> property to determine the level of access that was actually granted.</p>
<p>
The following example shows how to open the data in an attachment's <a href="propa_6eni.htm">PR_ATTACH_DATA_BIN</a> property. It allocates pointers to two streams: one for the file and one for the attachment. The <a href="function_8xyd.htm"><b>OpenStreamOnFile</b></a> function opens the file stream in read-only mode. The call to the attachment's <a href="inter022_15vd.htm"><b>IMAPIProp::OpenProperty</b></a> method opens the attachment stream in read/write mode. The code then copies from the file stream to the attachment stream and releases both streams.</p>
<pre><code>LPSTREAM pStreamFile, pStreamAtt;
HRESULT hr;

hr = OpenStreamOnFile (MAPIAllocateBuffer, MAPIFreeBuffer,
                       STGM_READ, "myfile.doc", NULL, &amp;pStreamFile);
if (HR_SUCCEEDED(hr))
{
    // Open the destination stream in the attachment object
    hr = pAttach-&gt;OpenProperty (PR_ATTACH_DATA_BIN,
                                &amp;IID_IStream,
                                0,
                                MAPI_MODIFY | MAPI_CREATE,
                                (LPUNKNOWN *)&amp;pStreamAtt);
    if (HR_SUCCEEDED(hr))
    {
        STATSTG StatInfo;
        pStreamFile-&gt;Stat (&amp;StatInfo, STATFLAG_NONAME);
        hResult = pStreamFile-&gt;CopyTo (pStreamAtt, StatInfo.cbSize, 
                                       NULL, NULL);
        pStreamAtt-&gt;Release();
    }
    pStreamFile-&gt;Release();
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

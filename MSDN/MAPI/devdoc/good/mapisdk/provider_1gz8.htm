<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Status Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_implementing_a_status_object"></a>Implementing a Status Object</h1>
<p>
All service providers are required to implement a status object and furnish properties from it to the session status table. You can include one or more rows in the status table, depending on the number of resources that you control. A transport provider, for instance, should create a row in the status table for each message queue it manages. When changes occur, the appropriate status table row must be updated. Status objects are implemented to provide access both to the information included in the status table and to additional information not included in the table.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement a status object</h5>
<ol>
<li>
Implement the <b>OpenStatusEntry</b> method of your logon object. When clients want to open your status object, they call <a href="inter023_146x.htm"><b>IMAPISession::OpenEntry</b></a>. MAPI fulfills the open request by calling your provider's <b>OpenStatusEntry</b> method, causing your provider to open its status object and return to the client a pointer to its <b>IMAPIStatus</b> implementation.<p>
In your <b>OpenStatusEntry</b> implementation:
<ol type=a>
<li>
Perform the following tasks if your logon object has not yet created a status object:<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><ol>
<li>
Call the support object's<b> <a href="inter025_6rvy.htm">IMAPISupport::OpenProfileSection</a></b> method to access your provider's profile section.</li>
</ol>
</td>
</tr>
<tr valign=top>
<td width=100%><ol start=2>
<li>
Create a new status object. </li>
</ol>
</td>
</tr>
<tr valign=top>
<td width=100%><ol start=3>
<li>
Store a reference to the profile section in your provider's status object and call the profile section's <b>IUnknown::AddRef</b> method to increment its reference count.</li>
</ol>
</td>
</tr>
<tr valign=top>
<td width=100%><ol start=4>
<li>
Store a reference to the logon object in your provider's status object and call the logon object's <b>IUnknown::AddRef</b> method to increment its reference count.</li>
</ol>
</td>
</tr>
<tr valign=top>
<td width=100%><ol start=5>
<li>
Store a reference to the status object in your provider's logon object.</li>
</ol>
</td>
</tr>
</table><br>
</li>
<li>
Call the status object's <b>IUnknown::AddRef</b> method to increment its reference count in the logon object.</li>
<li>
Set the status object's <a href="propb_0okl.htm">PR_OBJECT_TYPE</a> property to MAPI_STATUS.</li>
<li>
Set the <i>lppMAPIStatus</i> output parameter to point to the status object and return.</li>
<li>
Check the <i>ulFlags</i> input parameter. If it is set to MAPI_MODIFY and your provider supports read/write access to its status object, return a writeable object. However, if your provider does not support read/write access to its status object, do not fail. Return a status object that is read-only. Clients expecting to receive read/write status objects should verify that read/write access has been granted before attempting to make any changes.</li>
</ol>
<p>

</li>
<li>
Set all of the required status object and status table properties. The properties that you include in your status table row should be available through your status object, except for the properties calculated by MAPI. The required properties are:<p>
<a href="propa_1yjp.htm">PR_DISPLAY_NAME</a>
<p>
<a href="propb_5yud.htm">PR_PROVIDER_DLL_NAME</a>
<p>
<a href="propb_9aux.htm">PR_PROVIDER_DISPLAY</a>
<p>
<a href="propb_0oh1.htm">PR_RESOURCE_TYPE</a>
<p>
<a href="propb_3lkj.htm">PR_RESOURCE_METHODS</a>
<p>
<a href="propb_4u5v.htm">PR_RESOURCE_FLAGS</a>
<p>
<a href="propb_2zj9.htm">PR_STATUS_CODE</a>
</li>
<li>
Implement the <a href="inter024_22i8.htm"><b>IMAPIStatus</b></a> methods that are appropriate for your provider. Depending on your provider, you do not need to implement all of the four methods in <b>IMAPIStatus</b>. Every provider should implement a read-only version of the methods of the <a href="inter022_00tq.htm"><b>IMAPIProp</b></a> interface and the <a href="inter024_6x2d.htm"><b>IMAPIStatus::ValidateState</b></a> method. Transport providers are strongly recommended to also implement <a href="inter024_8c37.htm"><b>FlushQueues</b></a> and all providers are encouraged to support <a href="inter024_138n.htm"><b>SettingsDialog</b></a>. However, support for <a href="inter024_3dno.htm"><b>ChangePassword</b></a> is optional. Only service providers that require passwords and want to allow users to change them programmatically need to implement this method.<p>
For every method that you support, set the corresponding bit in the <a href="propb_3lkj.htm">PR_RESOURCE_METHODS</a> property. For example, if you support <b>ValidateState</b> and <b>SettingsDialog</b> only, set PR_RESOURCE_METHODS to:
</li>
</ol>
<pre><code>STATUS_VALIDATE_STATE | STATUS_SETTINGS_DIALOG</code></pre>
<p class=indent1>
Clients should check the value of PR_RESOURCE_METHODS before attempting to call your status object. Handle calls to any of your unsupported methods by returning MAPI_E_NO_SUPPORT.</p>
<ol>
<li>
Call <a href="inter025_0oxj.htm"><b>IMAPISupport::ModifyStatusRow</b></a> during logon to add your row or rows to the status table. Pass a property value array containing the column information for the row and zero for the <i>ulFlags</i> parameter. If at some point later in the session your provider's status changes and it becomes necessary to update the column information, call <b>ModifyStatusRow</b> again with the STATUSROW_UPDATE flag set. </li>
</ol>
<p>
For an overview of status objects, see <a href="extend_7rzn.htm">Status Objects</a>.</p>
<p>&nbsp;</p></body>
</HTML>

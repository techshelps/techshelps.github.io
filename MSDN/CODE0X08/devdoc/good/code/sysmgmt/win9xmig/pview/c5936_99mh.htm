<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POOLMEM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5939"></a>POOLMEM.H</h2>
<pre><code>#ifndef POOLMEM_H <br>#define POOLMEM_H <br> <br>#define STRICT <br>#define LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;assert.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;mbstring.h&gt; <br> <br> <br>typedef LPVOID POOLHANDLE; <br> <br> <br>#define POOLMEMORYBLOCKSIZE 8192 <br> <br> <br> <br>POOLHANDLE WINAPI PoolMemInitPool (); <br>VOID       WINAPI PoolMemDestroyPool (IN POOLHANDLE Handle); <br>LPVOID     WINAPI PoolMemGetAlignedMemory(IN POOLHANDLE Handle, IN DWORD Size, IN DWORD AlignSize); <br> <br> <br>#define PoolMemCreateString(h,x)        ((LPTSTR) PoolMemGetAlignedMemory((h),(x)*sizeof(TCHAR))) <br>#define PoolMemCreateDword(h)           ((PDWORD) PoolMemGetMemory((h),sizeof(DWORD))) <br> <br> <br>__inline <br>LPVOID  <br>PoolMemGetMemory ( <br>    IN POOLHANDLE Handle, <br>    IN DWORD      Size <br>    )  <br>{ <br> <br>    return PoolMemGetAlignedMemory(Handle,Size,0); <br> <br>} <br> <br>__inline <br>LPTSTR  <br>PoolMemCreateStringA (  <br>    IN POOLHANDLE Handle, <br>    IN DWORD      Size <br>    )  <br>{ <br>    return (LPSTR) PoolMemGetAlignedMemory(Handle,Size * sizeof(CHAR),sizeof(CHAR)); <br>} <br> <br>__inline <br>LPWSTR  <br>PoolMemCreateStringW ( <br>    IN POOLHANDLE Handle, <br>    IN DWORD      Size <br>    )  <br>{ <br>    return (LPWSTR) PoolMemGetAlignedMemory(Handle,Size * sizeof(WCHAR),sizeof(WCHAR)); <br>} <br> <br> <br>__inline <br>PTSTR  <br>PoolMemDuplicateStringA ( <br>    IN POOLHANDLE    Handle, <br>    IN LPCSTR       StringToCopy <br>    ) <br> <br>{ <br> <br>     <br>    DWORD   stringLength; <br>    PSTR    rString; <br> <br>    assert(StringToCopy); <br> <br>    stringLength = (DWORD) _mbschr(StringToCopy,0) - (DWORD) StringToCopy + 1; <br>    rString      = PoolMemGetAlignedMemory(Handle,stringLength,sizeof(CHAR)); <br> <br>    if (rString) { <br> <br>        _mbscpy(rString,StringToCopy); <br>    } <br> <br>    return rString; <br>} <br> <br> <br>__inline <br>PWSTR  <br>PoolMemDuplicateStringW ( <br>    IN POOLHANDLE    Handle, <br>    IN LPCWSTR       StringToCopy <br>    ) <br> <br>{ <br> <br>     <br>    DWORD    stringLength; <br>    PWSTR    rString; <br> <br>    assert(StringToCopy); <br> <br>    stringLength = ((wcslen(StringToCopy)+1)*sizeof(WCHAR)); <br>    rString      = PoolMemGetAlignedMemory(Handle,stringLength,sizeof(WCHAR)); <br> <br>    if (rString) { <br> <br>        wcscpy(rString,StringToCopy); <br>    } <br> <br>    return rString; <br>} <br> <br> <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

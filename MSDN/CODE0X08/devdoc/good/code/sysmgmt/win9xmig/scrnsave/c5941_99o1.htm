<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATACONV.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5941"></a>DATACONV.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    dataconv.c <br> <br>Abstract: <br> <br>    This source file implements data conversion routines that know <br>    the format of Windows 95 screen saver settings and can convert <br>    them to the Windows NT format. <br> <br>Author: <br> <br>    Jim Schmidt (jimschm) 14-Apr-1997 <br> <br>Revision History: <br> <br> <br>--*/ <br> <br>#include "pch.h" <br> <br>static CHAR g_Data[MAX_PATH]; <br> <br>BOOL <br>pHasSpecialProcessing ( <br>    IN      LPCSTR ScreenSaverName <br>    ); <br> <br>BOOL <br>pTranslateBezier ( <br>    IN      HKEY RegRoot <br>    ); <br> <br>BOOL <br>pTranslateMarquee ( <br>    IN      HKEY RegRoot <br>    ); <br> <br> <br> <br>HKEY <br>pCreateControlPanelKey ( <br>    IN      HKEY RootKey, <br>    IN      LPCSTR SubKeyName, <br>    IN      BOOL CreateEmptyKey <br>    ) <br>{ <br>    CHAR FullRegKey[MAX_PATH]; <br> <br>    wsprintf (FullRegKey, S_CONTROL_PANEL_MASK, SubKeyName); <br> <br>    if (CreateEmptyKey) { <br>        RegDeleteKey (RootKey, FullRegKey); <br>    } <br> <br>    return CreateRegKey (RootKey, FullRegKey); <br>} <br> <br> <br>HKEY <br>pCreateScreenSaverKey ( <br>    IN      HKEY RegRoot,  <br>    IN      LPCSTR ScreenSaverName <br>    ) <br>{ <br>    CHAR FullScreenSaverName[MAX_PATH]; <br> <br>    wsprintf (FullScreenSaverName, S_SCRNSAVE_MASK, ScreenSaverName); <br>    return pCreateControlPanelKey (RegRoot, FullScreenSaverName, FALSE); <br>} <br> <br> <br>BOOL <br>pCopyValuesFromSettingsFileToRegistry ( <br>    IN      HKEY RegKeyRoot, <br>    IN      LPCSTR RegKeyName, <br>    IN      LPCSTR ScreenSaverName, <br>    IN      LPCSTR ValueArray[] <br>    ) <br>{ <br>    INT i; <br>    CHAR IniKeyName[MAX_PATH]; <br>    HKEY RegKey; <br>    BOOL b = TRUE; <br> <br>    // <br>    // This function takes the values stored in our settings file and <br>    // copies them to a brand new key in the NT registry. <br>    // <br>    // In the settings file, we store screen saver parameters in the <br>    // format of &lt;screen saver name len&gt;/&lt;screen saver name&gt;/&lt;parameter&gt;=&lt;value&gt;. <br>    // <br> <br>    // <br>    // Create new registry key <br>    // <br> <br>    RegKey = pCreateControlPanelKey (RegKeyRoot, RegKeyName, TRUE); <br>    if (!RegKey) { <br>        return FALSE; <br>    } <br> <br>    // <br>    // Copy values to reg key <br>    // <br> <br>    for (i = 0 ; ValueArray[i] ; i++) { <br>        if (!CreateScreenSaverParamKey (ScreenSaverName, ValueArray[i], IniKeyName)) { <br>            // fail if screen saver name is huge for some unknown reason <br>            SetupLogError (S_HUGEDATA_ERROR, LogSevWarning); <br>            b = FALSE; <br>            break; <br>        } <br> <br>        GetSettingsFileVal (IniKeyName); <br>        if (!SetRegValueString (RegKey, ValueArray[i], g_Data)) { <br>            b = FALSE; <br>            break; <br>        } <br>    } <br> <br>    CloseRegKey (RegKey); <br>    return b; <br>} <br> <br> <br>BOOL <br>TranslateGeneralSetting ( <br>    IN      HKEY RegKey, <br>    IN      LPCSTR Win9xSetting, <br>    IN      LPCSTR WinNTSetting <br>    ) <br>{ <br>    BOOL b = TRUE; <br> <br>    if (!WinNTSetting) { <br>        WinNTSetting = Win9xSetting; <br>    } else { <br>        // <br>        // Delete the Win9x setting that was copied to NT, ignore <br>        // any failures. <br>        // <br>        RegDeleteValue (RegKey, Win9xSetting); <br>    } <br> <br>    // <br>    // Obtain setting from data file <br>    // <br> <br>    if (GetSettingsFileVal (Win9xSetting)) { <br>        // <br>        // Save settings to registry <br>        // <br> <br>        b = SetRegValueString (RegKey, WinNTSetting, g_Data); <br>    } <br> <br>    return b; <br>} <br> <br> <br>typedef struct { <br>    LPCSTR Win9xName; <br>    LPCSTR WinNtName; <br>} FILE_TRANS, *PFILE_TRANS; <br> <br>FILE_TRANS g_FileNameTranslation[] = { <br>    // Win9x name                   // WinNT name (NULL=no change) <br>    "black16.scr",                  NULL, <br>    "Blank Screen.scr",             "black16.scr", <br> <br>    "ssbezier.scr",                 NULL, <br>    "Curves and Colors.scr",        "ssbezier.scr", <br> <br>    "ssstars.scr",                  NULL, <br>    "Flying Through Space.scr",     "ssstars.scr", <br> <br>    "ssmarque.scr",                 NULL, <br>    "Scrolling Marquee.scr",        "ssmarque.scr", <br> <br>    "ssmyst.scr",                   NULL, <br>    "Mystify Your Mind.scr",        "ssmyst.scr", <br> <br>    NULL, NULL <br>}; <br> <br> <br>LPCSTR <br>GetSettingsFileVal ( <br>    IN      LPCSTR Key <br>    ) <br>{ <br>    GetPrivateProfileString ( <br>        g_User,  <br>        Key,  <br>        S_EMPTY,  <br>        g_Data,  <br>        MAX_PATH,  <br>        g_SettingsFile <br>        ); <br> <br>    return g_Data[0] ? g_Data : NULL; <br>} <br> <br> <br>BOOL <br>pTranslateScrName ( <br>    IN OUT  LPSTR KeyName, <br>    OUT     LPSTR FullPath      OPTIONAL <br>    ) <br>{ <br>    int i; <br> <br>    // <br>    // Compare against translation list <br>    // <br> <br>    for (i = 0 ; g_FileNameTranslation[i].Win9xName ; i++) { <br>        if (!_mbsicmp (KeyName, g_FileNameTranslation[i].Win9xName)) { <br>            break; <br>        } <br>    } <br> <br>    // <br>    // Translate filename only if a match was found in our list <br>    // <br> <br>    if (g_FileNameTranslation[i].Win9xName) { <br> <br>        // <br>        // If WinNtName is NULL, there is no renaming necessary.  Otherwise, <br>        // use the NT name, which is always a file in system32. <br>        // <br> <br>        if (g_FileNameTranslation[i].WinNtName &amp;&amp; FullPath) { <br>            // Rebuild path <br>            GetSystemDirectory (FullPath, MAX_PATH); <br>            _mbscat (FullPath, "\\"); <br>            _mbscat (FullPath, g_FileNameTranslation[i].WinNtName); <br>        } <br> <br>        _mbscpy (KeyName, g_FileNameTranslation[i].WinNtName); <br>    } <br>    else if (FullPath) { <br>        FullPath[0] = 0; <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>BOOL <br>SaveScrName ( <br>    IN      HKEY RegKey,  <br>    IN      LPCSTR KeyName <br>    ) <br>{ <br>    LPSTR p; <br>    CHAR FullPath[MAX_PATH]; <br>    CHAR ShortName[MAX_PATH]; <br> <br>    // <br>    // The Windows 95 screen saver names are different than <br>    // Windows NT. <br>    // <br> <br>    if (!GetSettingsFileVal (KeyName)) { <br>        // Unexpected: .SCR name does not exist in our file <br>        return TRUE; <br>    } <br> <br>    // <br>    // Locate the screen saver name within the full path <br>    // <br> <br>    p = _mbsrchr (g_Data, '\\'); <br>    if (!p) { <br>        p = g_Data; <br>    } else { <br>        p = _mbsinc (p); <br>    } <br> <br>    // <br>    // Translate it if necessary <br>    // <br> <br>    if (!pTranslateScrName (p, FullPath)) { <br>        return FALSE; <br>    } <br> <br>    if (!FullPath[0]) { <br>        // <br>        // No change was made, so copy original path to FullPath <br>        // <br>         <br>        _mbscpy (FullPath, g_Data); <br>    } <br> <br>    // <br>    // Screen savers are always stored in short filename format <br>    // <br> <br>    GetShortPathName (FullPath, ShortName, MAX_PATH); <br> <br>    return SetRegValueString (RegKey, KeyName, ShortName); <br>} <br> <br>INT <br>GetHexDigit ( <br>    IN      CHAR c <br>    ) <br>{ <br>    if (c &gt;= '0' &amp;&amp; c &lt;= '9') { <br>        return c - '0'; <br>    } <br> <br>    c = tolower (c); <br>    if (c &gt;= 'a' &amp;&amp; c &lt;= 'f') { <br>        return c - 'a' + 10; <br>    } <br> <br>    return -1; <br>} <br> <br>BYTE <br>GetNextHexByte ( <br>    IN      LPCSTR HexString, <br>    OUT     LPCSTR *HexStringReturn <br>    ) <br>{ <br>    INT a, b; <br> <br>    a = GetHexDigit (HexString[0]); <br>    b = GetHexDigit (HexString[1]); <br> <br>    if (a == -1 || b == -1) { <br>        *HexStringReturn = NULL; <br>        return 0; <br>    } <br> <br>    *HexStringReturn = &amp;(HexString[2]); <br> <br>    return a * 16 + b; <br>} <br> <br>BOOL <br>GetNextDword ( <br>    IN      LPCSTR HexString, <br>    OUT     LPCSTR *HexStringReturn, <br>    OUT     PDWORD ValuePtr <br>    ) <br>{ <br>    INT i; <br>    BYTE NextByte; <br> <br>    *ValuePtr = 0; <br> <br>    for (i = 0 ; i &lt; 4 ; i++) { <br>        NextByte = GetNextHexByte (HexString, &amp;HexString); <br>        if (!HexString) { <br>            return FALSE; <br>        } <br> <br>        *ValuePtr = ((*ValuePtr) &lt;&lt; 8) | NextByte; <br>    } <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>VerifyBezierChecksum ( <br>    IN      LPCSTR HexString <br>    ) <br>{ <br>    BYTE Checksum = 0; <br>    INT Len; <br> <br>    Len = _mbslen (HexString); <br>    Len -= 2; <br> <br>    if (Len &lt; 1) { <br>        return FALSE; <br>    } <br> <br>    while (Len &gt; 0) { <br>        Checksum += GetNextHexByte (HexString, &amp;HexString); <br>        if (!HexString) { <br>            return FALSE; <br>        } <br>    } <br> <br>    if (Checksum != GetNextHexByte (HexString, &amp;HexString)) { <br>        return FALSE; <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>BOOL <br>CopyUntranslatedSettings ( <br>    IN      HKEY RegRoot <br>    ) <br>{ <br>    LPSTR KeyBuffer; <br>    DWORD KeyBufferSize; <br>    LPSTR p; <br>    CHAR ScreenSaverName[MAX_PATH]; <br>    CHAR ValueName[MAX_PATH]; <br>    HKEY Key; <br> <br>    // <br>    // Enumerate each entry in our private settings file for the user <br>    // <br> <br>    KeyBufferSize = 32768; <br>    KeyBuffer = (LPSTR) HeapAlloc (g_hHeap, 0, KeyBufferSize); <br>    if (!KeyBuffer) { <br>        return FALSE; <br>    } <br> <br>    // <br>    // Get all keys in the user's section <br>    // <br> <br>    GetPrivateProfileString ( <br>        g_User, <br>        NULL, <br>        S_DOUBLE_EMPTY, <br>        KeyBuffer, <br>        KeyBufferSize, <br>        g_SettingsFile <br>        ); <br> <br>    for (p = KeyBuffer ; *p ; p = _mbschr (p, 0) + 1) { <br>        // <br>        // Process only if key is encoded <br>        // <br> <br>        if (!DecodeScreenSaverParamKey (p, ScreenSaverName, ValueName)) { <br>            continue; <br>        } <br> <br>        // <br>        // Key is encoded, so perform migration! <br>        // <br> <br>        pTranslateScrName (ScreenSaverName, NULL); <br> <br>        // <br>        // Skip screen savers that have special processing <br>        // <br> <br>        if (pHasSpecialProcessing (ScreenSaverName)) { <br>            continue; <br>        } <br> <br>        // <br>        // Save the value to the registry <br>        // <br> <br>        GetSettingsFileVal (p); <br> <br>        Key = pCreateScreenSaverKey (RegRoot, ScreenSaverName); <br>        if (Key) { <br>            if (SetRegValueString (Key, ValueName, g_Data)) <br>            { <br>                CHAR DebugMsg[MAX_PATH*2]; <br>                wsprintf (DebugMsg, "Saved %s=%s\r\n", ValueName, g_Data); <br>                SetupLogError (DebugMsg, LogSevInformation); <br>            } else { <br>                CHAR DebugMsg[MAX_PATH*2]; <br>                wsprintf (DebugMsg, "Could not save %s=%s\r\n", ValueName, g_Data); <br>                SetupLogError (DebugMsg, LogSevError); <br>            } <br> <br>            CloseRegKey (Key); <br>        } <br>    } <br> <br>    HeapFree (g_hHeap, 0, KeyBuffer); <br> <br>    return TRUE; <br>} <br> <br> <br>BOOL <br>pHasSpecialProcessing ( <br>    IN      LPCSTR ScreenSaverName <br>    ) <br>{ <br>    // <br>    // Return TRUE if we are doing something special for the <br>    // named screen saver. <br>    // <br> <br>    if (!_mbsicmp (ScreenSaverName, S_BEZIER) || <br>        !_mbsicmp (ScreenSaverName, S_MARQUEE) <br>        ) { <br>        return TRUE; <br>    } <br> <br>    return FALSE; <br>} <br> <br> <br>BOOL <br>TranslateScreenSavers ( <br>    IN      HKEY RegRoot <br>    ) <br>{ <br>    BOOL b = TRUE; <br> <br>    b &amp;= pTranslateBezier (RegRoot); <br>    b &amp;= pTranslateMarquee (RegRoot); <br> <br>    return b; <br>} <br> <br> <br>BOOL <br>pTranslateBezier ( <br>    IN      HKEY RegRoot <br>    ) <br>{ <br>    DWORD Value; <br>    CHAR StrValue[32]; <br>    LPCSTR p; <br>    HKEY RegKey; <br>    BOOL b; <br> <br>    // <br>    // NT's Bezier has three settings: <br>    // <br>    // Length (REG_SZ)      = Curve Count on Win9x <br>    // LineSpeed (REG_SZ)   = Speed on Win9x <br>    // Width (REG_SZ)       = Density on Win9x <br>    // <br>    // Win9x's Bezier has a big string of hex in the following format: <br>    //  <br>    // Clear Screen Flag (DWORD) <br>    // Random Colors Flag (DWORD) <br>    // Curve Count (DWORD) <br>    // Line Count (DWORD) <br>    // Density (DWORD) <br>    // Speed (DWORD) <br>    // Current Color (DWORD RGB) <br>    // Checksum (BYTE) <br>    // <br> <br>    // <br>    // Verify structure <br>    // <br> <br>    GetSettingsFileVal (S_BEZIER_SETTINGS); <br> <br>    if (!VerifyBezierChecksum (g_Data)) { <br>        return TRUE; <br>    } <br> <br>    // <br>    // Open reg key <br>    // <br> <br>    RegKey = pCreateControlPanelKey (RegRoot, S_BEZIER_SETTINGS, TRUE); <br>    if (!RegKey) { <br>        return FALSE; <br>    } <br> <br>    p = g_Data; <br> <br>    // Get clear screen flag (but ignore it) <br>    b = GetNextDword (p, &amp;p, &amp;Value); <br> <br>    // Get random colors flag (but ignore it) <br>    if (b) { <br>        b = GetNextDword (p, &amp;p, &amp;Value); <br>    } <br> <br>    // <br>    // Get curve count <br>    // <br> <br>    if (b) { <br>        b = GetNextDword (p, &amp;p, &amp;Value); <br>    } <br> <br>    if (b) { <br>        wsprintf (StrValue, "%u", Value); <br>        b = SetRegValueString (RegKey, S_LENGTH, StrValue); <br>    } <br> <br>    // Get line count (but ignore it) <br>    if (b) { <br>        b = GetNextDword (p, &amp;p, &amp;Value); <br>    } <br> <br>    // <br>    // Get density <br>    // <br> <br>    if (b) { <br>        b = GetNextDword (p, &amp;p, &amp;Value); <br>    } <br> <br>    if (b) { <br>        wsprintf (StrValue, "%u", Value); <br>        b = SetRegValueString (RegKey, S_WIDTH, StrValue); <br>    } <br> <br>    // <br>    // Get speed <br>    // <br> <br>    if (b) { <br>        b = GetNextDword (p, &amp;p, &amp;Value); <br>    } <br> <br>    if (b) { <br>        wsprintf (StrValue, "%u", Value); <br>        b = SetRegValueString (RegKey, S_LINESPEED, StrValue); <br>    } <br> <br>    CloseRegKey (RegKey); <br> <br>    if (!b) { <br>        SetupLogError (S_BEZIER_DATA_ERROR, LogSevError); <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>LPCSTR g_MarqueeValues[] = { <br>    S_BACKGROUND_COLOR, <br>    S_CHARSET, <br>    S_FONT, <br>    S_MODE, <br>    S_SIZE, <br>    S_SPEED, <br>    S_TEXT, <br>    S_TEXTCOLOR, <br>    NULL <br>}; <br> <br> <br>BOOL <br>pTranslateMarquee ( <br>    IN      HKEY RegRoot <br>    ) <br>{ <br>    BOOL b; <br> <br>    // <br>    // Marquee has the same settings on Win9x and NT.  They just need <br>    // to be copied from the control.ini file to the NT registry. <br>    // <br> <br>    b = pCopyValuesFromSettingsFileToRegistry ( <br>                RegRoot, <br>                S_MARQUEE_SETTINGS,  <br>                S_MARQUEE, <br>                g_MarqueeValues <br>                ); <br> <br>    // <br>    // We need to divide the speed by two to be compatible <br>    // <br> <br>    if (b) { <br>        HKEY MarqueeKey; <br>        LPCSTR Value; <br>        CHAR NewValue[32]; <br> <br>        // Read the setting we just wrote in the registry <br>        MarqueeKey = pCreateControlPanelKey (RegRoot, S_MARQUEE_SETTINGS, FALSE); <br> <br>        if (MarqueeKey) { <br>            Value = GetRegValueString (MarqueeKey, S_SPEED); <br>            if (Value) { <br>                // Write speed divided by two <br>                wsprintf (NewValue, "%i", atoi (Value) / 2); <br>                SetRegValueString (MarqueeKey, S_SPEED, NewValue); <br>            } <br> <br>            CloseRegKey (MarqueeKey); <br>        } <br>    } <br> <br>    return b; <br>} <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

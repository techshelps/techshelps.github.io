<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSIMERG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5844"></a>MSIMERG.CPP</h2>
<pre><code>#pragma message("Merge Database Utility.  Copyright 1997 - 1998 Microsoft Corp.") <br>#if 0  // makefile definitions, to build: %vcbin%\nmake -fMsiMerg.cpp <br>DESCRIPTION = Merge Database Utility <br>MODULENAME = MsiMerg <br>SUBSYSTEM = console <br>FILEVERSION = Msi <br>LINKLIBS = OLE32.lib <br>!include &lt;MsiTool.Mak&gt; <br>!if 0  #nmake skips the rest of this file <br>#endif // end of makefile definitions <br> <br>#define W32DOWS_LEAN_AND_MEAN  // faster compile <br>#define W32 <br>#define MSI <br> <br>#include &lt;windows.h&gt; <br>#ifndef RC_INVOKED    // start of source code <br>#include &lt;tchar.h&gt;    // define UNICODE=1 on nmake command line to build UNICODE <br>#include "MsiQuery.h" // MSI API <br> <br>//________________________________________________________________________________ <br>// <br>// Constants and globals <br>//________________________________________________________________________________ <br> <br>const TCHAR szHelp[] = TEXT("Msi Merge Tool --- Merge Two Databases\n\nMsiMerg(d).exe {base db} {ref db}\n"); <br>const TCHAR szTable[] = TEXT("_MergeErrors"); <br> <br>const int cchDisplayBuf = 4096; <br>HANDLE g_hStdOut; <br>TCHAR g_rgchBuffer[4096]; <br> <br>//________________________________________________________________________________ <br>// <br>// Function prototypes <br>//________________________________________________________________________________ <br> <br>void Display(LPCTSTR szMessage); <br>void ErrorExit(UINT iError, LPCTSTR szMessage); <br>void CheckError(UINT iError, LPCTSTR szMessage); <br>void Merge(TCHAR* szBaseDb, TCHAR* szRefDb); <br> <br>//_____________________________________________________________________________________________________ <br>// <br>// main  <br>//_____________________________________________________________________________________________________ <br> <br>extern "C" int __cdecl _tmain(int argc, TCHAR* argv[]) <br>{ <br>// Determine handle <br>g_hStdOut = ::GetStdHandle(STD_OUTPUT_HANDLE); <br>if (g_hStdOut == INVALID_HANDLE_VALUE) <br>g_hStdOut = 0;  // non-zero if stdout redirected or piped <br> <br>if (argc == 2 &amp;&amp; ((_tcscmp(argv[1], TEXT("-?")) == 0) || (_tcscmp(argv[1], TEXT("/?")) == 0))) <br>ErrorExit( 0, szHelp); <br> <br>// Check for enough arguments and valid options <br>CheckError(argc != 3, TEXT("msimerg(d).exe {base db} {ref db}")); <br>Merge(argv[1], argv[2]); <br>ErrorExit(0, TEXT("Done")); <br>return 0; <br>} <br> <br> <br>//________________________________________________________________________________ <br>// <br>// Merge function <br>//    Merge(...); <br>//________________________________________________________________________________ <br> <br>void Merge(TCHAR* szBaseDb, TCHAR* szRefDb) <br>{ <br>PMSIHANDLE hBaseDb = 0; <br>PMSIHANDLE hRefDb = 0; <br> <br>CheckError(MSI::MsiOpenDatabase(szBaseDb, MSIDBOPEN_TRANSACT, &amp;hBaseDb), TEXT("Error Opening Base Database")); <br>CheckError(MSI::MsiOpenDatabase(szRefDb, MSIDBOPEN_READONLY, &amp;hRefDb), TEXT("Error Opening Reference Databaes")); <br>UINT uiError = MSI::MsiDatabaseMerge(hBaseDb, hRefDb, szTable); <br>CheckError(MSI::MsiDatabaseCommit(hBaseDb), TEXT("Error Saving Database")); <br>CheckError(uiError, TEXT("Error Merging Database, Check _MergeErrors Table for Merge conflicts")); <br>} <br> <br>//________________________________________________________________________________ <br>// <br>// Error handling and Display functions: <br>//    Display(...); <br>//   ErrorExit(...); <br>//    CheckError(...); <br>// <br>//________________________________________________________________________________ <br> <br>void Display(LPCTSTR szMessage) <br>{ <br>if (szMessage) <br>{ <br>int cbOut = _tcsclen(szMessage);; <br>if (g_hStdOut) <br>{ <br>#ifdef UNICODE <br>char rgchTemp[cchDisplayBuf]; <br>if (W32::GetFileType(g_hStdOut) == FILE_TYPE_CHAR) <br>{ <br>W32::WideCharToMultiByte(CP_ACP, 0, szMessage, cbOut, rgchTemp, sizeof(rgchTemp), 0, 0); <br>szMessage = (LPCWSTR)rgchTemp; <br>} <br>else <br>cbOut *= 2;   // write Unicode if not console device <br>#endif <br>DWORD cbWritten; <br>W32::WriteFile(g_hStdOut, szMessage, cbOut, &amp;cbWritten, 0); <br>} <br>else <br>W32::MessageBox(0, szMessage, W32::GetCommandLine(), MB_OK); <br>} <br>} <br> <br> <br>void ErrorExit(UINT iError, LPCTSTR szMessage) <br>{ <br>if (szMessage) <br>{ <br>int cbOut; <br>TCHAR szBuffer[256];  // errors only, not used for display output <br>if (iError == 0) <br>cbOut = lstrlen(szMessage); <br>else <br>{ <br>LPCTSTR szTemplate = (iError &amp; 0x80000000L) <br>? TEXT("Error 0x%X. %s\n") <br>: TEXT("Error %i. %s\n"); <br>cbOut = wsprintf(szBuffer, szTemplate, iError, szMessage); <br>szMessage = szBuffer; <br>} <br>if (g_hStdOut) <br>{ <br>#ifdef UNICODE <br>char rgchTemp[cchDisplayBuf]; <br>if (W32::GetFileType(g_hStdOut) == FILE_TYPE_CHAR) <br>{ <br>W32::WideCharToMultiByte(CP_ACP, 0, szMessage, cbOut, rgchTemp, sizeof(rgchTemp), 0, 0); <br>szMessage = (LPCWSTR)rgchTemp; <br>} <br>else <br>cbOut *= 2;   // write Unicode if not console device <br>#endif // UNICODE <br>DWORD cbWritten; <br>W32::WriteFile(g_hStdOut, szMessage, cbOut, &amp;cbWritten, 0); <br>} <br>else <br>W32::MessageBox(0, szMessage, W32::GetCommandLine(), MB_OK); <br>} <br>MSI::MsiCloseAllHandles(); <br>W32::ExitProcess(szMessage != 0); <br>} <br> <br>void CheckError(UINT iError, LPCTSTR szMessage) <br>{ <br>if (iError != ERROR_SUCCESS) <br>ErrorExit(iError, szMessage); <br>} <br> <br>#else // RC_INVOKED, end of source code, start of resources <br>#endif // RC_INVOKED <br>#if 0  <br>!endif // makefile terminator <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

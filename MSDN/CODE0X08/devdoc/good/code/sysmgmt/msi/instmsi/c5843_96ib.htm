<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INITMSI.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5843"></a>INITMSI.CPP</h2>
<pre><code>// initmsi.cpp: MSI initialisation functions for msispy <br>#include "initmsi.h" <br>#include "resource.h" <br>#include "propshts.h" <br>#include "stdio.h" <br> <br>// hard-coded component GUIDs and feature Names <br>TCHARg_szEXEComponentCode[MAX_GUID+1]= TEXT("{5CB2D5F1-19DD-11d1-9A9D-006097C4E489}"); <br>TCHARg_szDLLComponentCode[MAX_GUID+1]= TEXT("{5CB2D5F0-19DD-11d1-9A9D-006097C4E489}"); <br>TCHARg_szIntlDLLComponentCode[MAX_GUID+1]= TEXT("{B62B2CE0-1A98-11d1-9A9E-006097C4E489}"); <br>TCHARg_szHelpComponentCode[MAX_GUID+1]= TEXT("{1F7586D0-20B1-11d1-9AB3-006097C4E489}");  <br>TCHARg_szMyProductCode[MAX_GUID+1]= TEXT("");// will be obtained at runtime <br>TCHARg_szDLLFeatureName[]= TEXT("SystemInterface"); <br>TCHARg_szEXEFeatureName[]= TEXT("UserInterface"); <br>TCHARg_szDefaultQualifier[]= TEXT("0"); <br>LCIDg_lcidCurrentLocale; <br>TCHARg_szHelpFilePath[MAX_PATH+1]= TEXT(""); <br> <br>externMSISPYSTRUCTvmInfo; <br> <br>// This message is displayed if the (localised) resource DLL could not be loaded.  <br>// This string will always appear in English regardless of the User/System LCID. <br> <br>#define ERRORMESSAGE_UNABLETOLOADDLLTEXT("Msispy was unable to load the resource file.\nComponent Code: %s\nError Code: %d") <br>#defineERRORCAPTION_UNABLETOLOADDLLTEXT("Msispy: Fatal Error") <br> <br> <br>// ------------------------------------------------------------------------------------------- <br>// FindComponent() <br>//Locates and provides the required component calling MsiProvideQualifiedComponent, <br>//using the global LCID (g_lcidCurrentLocale) as the qualifier. If that fails, it <br>//tries just the primary lang-ID of g_lcidCurrentLocale. If that fails as well, <br>//it tries the default qualifier (g_szDefaultQualifier). Finally if this fails as <br>//well it returns the error code of this attempt, else it returns ERROR_SUCCESS <br>// The path to the component is returned in szPath <br> <br>UINT FindComponent( <br>  LPCTSTRszComponentCode,// GUID of the component to Provide <br>  LPTSTRszPath,//Buffer for returned path <br>  DWORD*pcchPath//size of buffer <br>  )  <br>{ <br>DWORDcchPathInitial = *pcchPath; <br>lstrcpy(szPath, TEXT(""));// set [out] variable to known value <br> <br>TCHARszQualifier[MAX_PATH+1]; <br>UINTiResult; <br>for (UINT iCount = 0; 3 &gt; iCount ; iCount++)  <br>{ <br>switch (iCount)  <br>{ <br>case 0: <br>//Try the full Language ID <br>wsprintf(szQualifier, TEXT("%4.4x"), LANGIDFROMLCID(g_lcidCurrentLocale)); <br>break; <br> <br>case 1: <br>// Full language ID failed, try primary Language ID <br>wsprintf(szQualifier, TEXT("%2.2x"), PRIMARYLANGID(LANGIDFROMLCID(g_lcidCurrentLocale))); <br>break; <br> <br>case 2: <br>// language IDs failed, try the default qualifier <br>lstrcpy(szQualifier, g_szDefaultQualifier); <br>break; <br>} <br> <br>*pcchPath = cchPathInitial; <br>iResult = MsiProvideQualifiedComponent(szComponentCode, szQualifier, 0, szPath, pcchPath); <br> <br>switch (iResult)  <br>{ <br>case ERROR_SUCCESS: <br>case ERROR_INSTALL_USEREXIT: <br>case ERROR_INSTALL_FAILURE: <br>return iResult; <br>} <br>} <br> <br>// ProvideQualifiedComponent failed  <br>return iResult; <br>} <br> <br> <br>// ------------------------------------------------------------------------------------------- <br>// fInitMSI() <br>//Function to fault in resource DLL and initialise MSI related items <br>//Returns TRUE if the MSI initialisation succeeded, FALSE if there  <br>//was a fatal error. <br>//When the function returns, hResourceInstance points to the hInstance  <br>//of the resource DLL if the DLL was loaded successfully <br> <br>BOOL fInitMSI(HINSTANCE *hResourceInstance)  <br>{ <br> <br>// set [out] variable to known value <br>*hResourceInstance = 0; <br> <br>g_lcidCurrentLocale = GetUserDefaultLCID(); <br>// Get the product-code of the product using this component. <br>// The product-code is not hard-coded in because a component may be <br>// shared by multiple products. <br>MsiGetProductCode(g_szEXEComponentCode, g_szMyProductCode); <br> <br>TCHARszIntlDLLPath[MAX_PATH+1]; <br>DWORDcchIntlDLLPath = MAX_PATH+1; <br>UINTiResult; <br> <br>// Try finding the resource DLL- if unsuccessful, inform user and exit <br>if (ERROR_SUCCESS != (iResult = FindComponent(g_szIntlDLLComponentCode, szIntlDLLPath, &amp;cchIntlDLLPath))) <br>{ <br>TCHARszErrorMessage[MAX_MESSAGE+1]; <br>wsprintf(szErrorMessage, ERRORMESSAGE_UNABLETOLOADDLL, g_szIntlDLLComponentCode, iResult); <br> <br>TCHARszErrorCaption[MAX_HEADER+1]; <br>wsprintf(szErrorCaption, ERRORCAPTION_UNABLETOLOADDLL); <br> <br>MessageBox(NULL, szErrorMessage, szErrorCaption, MB_ICONSTOP|MB_OK); <br>return FALSE; <br>} <br> <br> <br>// Load the international DLL <br>*hResourceInstance = W32::LoadLibrary(szIntlDLLPath); <br> <br> <br>// Check if the SystemInterface feature is available for use. If not, <br>// call SwitchMode to gray out features that depend on it and inform <br>// user. <br>if (MsiQueryFeatureState(g_szMyProductCode, g_szDLLFeatureName) == INSTALLSTATE_UNKNOWN)  <br>{ <br>// Switch to Degraded Mode [grays out features that depend on SystemInterface feature] <br>SwitchMode(MODE_DEGRADED); <br> <br>TCHARszRestrMsg[MAX_MESSAGE+1]; <br>LoadString(*hResourceInstance, IDS_STARTUPRESTRICTEDMSG, szRestrMsg, MAX_MESSAGE+1); <br> <br>TCHARszRestrCaption[MAX_HEADER+1]; <br>LoadString(*hResourceInstance, IDS_STARTUPRESTRICTEDCPN, szRestrCaption, MAX_HEADER+1); <br> <br>// Inform user that Msispy is now in "Restricted Mode" <br>MessageBox(NULL, szRestrMsg, szRestrCaption, MB_OK|MB_ICONEXCLAMATION); <br>} <br>else  <br>SwitchMode(MODE_NORMAL); <br> <br> <br>// Prepare to use the UserInterface feature: check its current state and increase usage count. <br>INSTALLSTATE iEXEFeatureState = MsiUseFeature(g_szMyProductCode, g_szEXEFeatureName); <br> <br>// If feature is not currently usable, try fixing it <br>switch (iEXEFeatureState)  <br>{ <br>case INSTALLSTATE_DEFAULT: <br>case INSTALLSTATE_LOCAL: <br>case INSTALLSTATE_SOURCE: <br> <br>// feature is installed and usable <br>return TRUE; <br> <br>case INSTALLSTATE_ABSENT: <br> <br>// feature isn't installed, try installing it <br>if (MsiConfigureFeature(g_szMyProductCode, g_szEXEFeatureName, INSTALLSTATE_LOCAL) != ERROR_SUCCESS) <br>return FALSE;// installation failed <br>break; <br> <br>default: <br>  <br>// feature is busted- try fixing it <br>if (MsiReinstallFeature(g_szMyProductCode, g_szEXEFeatureName,  <br>REINSTALLMODE_REPAIR  <br>+ REINSTALLMODE_FILEEQUALVERSION <br>+ REINSTALLMODE_MACHINEDATA  <br>+ REINSTALLMODE_USERDATA <br>+ REINSTALLMODE_SHORTCUT) != ERROR_SUCCESS) <br>return FALSE;// we couldn't fix it <br>break; <br>} <br> <br>return TRUE; <br>} <br> <br> <br>// ------------------------------------------------------------------------------------------- <br>// fHandleHelp() <br>//  Creates a new process to bring up the help <br>//Uses FindComponent to load the appropriate help file (based on g_lcidCurrentLocale) <br> <br>BOOL fHandleHelp(HINSTANCE hResourceInstance)  <br>{ <br>DWORDcchHelpFilePath= MAX_PATH+1; <br>UINTiResult= 0; <br> <br>if (ERROR_SUCCESS != (iResult = FindComponent(g_szHelpComponentCode, g_szHelpFilePath, &amp;cchHelpFilePath)))  <br>{ <br>// we couldn't find the help file <br>TCHAR szErrorMsg[MAX_MESSAGE+1]; <br>TCHAR szErrorCpn[MAX_HEADER+1]; <br>LoadString(hResourceInstance, IDS_NOHELPMSG, szErrorMsg, MAX_MESSAGE+1); <br>LoadString(hResourceInstance, IDS_NOHELPCPN, szErrorCpn, MAX_HEADER+1); <br> <br>MessageBox(NULL, szErrorMsg, szErrorCpn, MB_OK|MB_ICONEXCLAMATION); <br>return FALSE; <br>} <br> <br>//MsiUseFeature(g_szMyProductCode, g_szHelpFeatureName); <br> <br>// Launch WinHelp to handle help <br>return WinHelp(vmInfo.hwndParent, g_szHelpFilePath, HELP_FINDER, 0); <br> <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

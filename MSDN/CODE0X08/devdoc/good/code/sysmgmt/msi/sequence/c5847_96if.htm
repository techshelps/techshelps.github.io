<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SEQUENCE.BAS</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5847"></a>SEQUENCE.BAS</h2>
<pre><code>' Sample script for sequencing an installation from outside MSI - test code only, hardwired paths <br>' Requires AutoApi.DLL to be self-registered (use REGSVR32 AutoApi.DLL) <br>Sub SingleStep() <br>   Dim Engine As Object, ActionView As Object <br>   Dim Sequence As Integer, Action As String, Condition As String <br>   Dim Test As Integer, Result As Integer <br>   Dim ExitAction As String, ErrorAction As String, CancelAction As String <br>   Set MsiAuto = CreateObject("Msi.ApiAutomation") <br>   MsiAuto.UILevel = 5 'Full UI (no enums yet) <br>   MsiAuto.EnableLog "warped", "C:\temp\step.log" <br>   Set Engine = MsiAuto.OpenPackage("C:\msi\testdb\testdb.msi") <br>'  Engine.Property("SOURCEDIR") = "C:\msi\testdb"  ' needed if source location different than database <br>   Set Database = Engine.Database <br>   Set ActionView = Database.OpenView("SELECT Action,Condition,Sequence FROM InstallSequence ORDER BY Sequence") <br>   ActionView.Execute <br>   Do <br>      Set Record = ActionView.Fetch <br>      If Record Is Nothing Then Exit Do <br>      Sequence = Record.IntegerData(3) <br>      Action = Record.StringData(1) <br>      Condition = Record.StringData(2) <br>      If Sequence &lt;= 0 Then <br>         Debug.Print Sequence; " Action = "; Action; "  (exit dialog)" <br>         If (Sequence = -1) Then ExitAction = Action <br>         If (Sequence = -2) Then CancelActon = Action <br>         If (Sequence = -3) Then ErrorAction = Action <br>      Else <br>         Test = Engine.EvaluateCondition(Condition) <br>         Debug.Print Sequence; " Action = "; Action; "  Condition:"; Test; <br>         If Test = iecError Then Debug.Print "Invalid Expression"; Condition <br>         If Test &lt;&gt; iecFalse Then <br>            Result = Engine.DoAction(Action) <br>            Debug.Print "  Result: "; Result <br>            If Result &lt;&gt; iesSuccess And Result &lt;&gt; iesNoAction Then Exit Do <br>         Else <br>            Debug.Print "(not called)" <br>         End If <br>      End If <br>   Loop <br>   If Result = iesSuccess Then Engine.DoAction (ExitAction) <br>   If Result = iesFailure Then Engine.DoAction (ErrorAction) <br>   If Result = iesUserExit Then Engine.DoAction (CancelAction) <br>   Debug.Print "Sequence completed" <br>End Sub <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

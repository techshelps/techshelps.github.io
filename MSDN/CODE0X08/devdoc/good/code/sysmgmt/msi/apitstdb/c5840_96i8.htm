<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APITSTDB.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5840"></a>APITSTDB.CPP</h2>
<pre><code>#pragma message("Test of Msi External Database Access - Resequences InstallSequence table.  Copyright 1997 - 1998 Microsoft Corp.") <br>#if 0  // makefile definitions, to build: %vcbin%\nmake -fApiTstDb.cpp <br>DESCRIPTION = Test of Msi external database access <br>MODULENAME = ApiTstDb <br>SUBSYSTEM = console <br>FILEVERSION = 0.20 <br>!include &lt;MsiTool.Mak&gt; <br>!if 0  #nmake skips the rest of this file <br>#endif // end of makefile definitions <br> <br>// test of external database access <br>#define WINDOWS_LEAN_AND_MEAN  // faster compile <br>#include &lt;windows.h&gt; <br>#ifndef RC_INVOKED    // start of source code <br>#include &lt;stdio.h&gt;   // printf/wprintf <br>#include &lt;tchar.h&gt;   // define UNICODE=1 on nmake command line to build UNICODE <br>#include "MsiQuery.h" <br> <br>// routine to check return status for ERROR_SUCCESS, and throw exception if not <br>TCHAR*  g_szErrorContext = 0; <br>void CheckMsi(UINT iStat, TCHAR* szContext) <br>{ <br>if (iStat != ERROR_SUCCESS) <br>{ <br>g_szErrorContext = szContext; <br>throw iStat; <br>} <br>} <br> <br>void SmoothSequence(MSIHANDLE hDatabase, int iSpacing) <br>{ <br>PMSIHANDLE hView; <br>CheckMsi(MsiDatabaseOpenView(hDatabase, TEXT("SELECT Action, Sequence FROM InstallSequence ORDER BY Sequence"),&amp;hView),TEXT("OpenView")); <br>CheckMsi(MsiViewExecute(hView, 0), TEXT("Execute View")); <br>int iLast = 0; <br>for (;;) <br>{ <br>PMSIHANDLE hRecord; <br>UINT iStat = MsiViewFetch(hView, &amp;hRecord); <br>if (iStat == ERROR_NO_MORE_ITEMS) <br>break; <br>CheckMsi(iStat, TEXT("Fetch")); <br>TCHAR szAction[60]; <br>int iSequence, iNew; <br>DWORD cchAction = sizeof(szAction)/sizeof(TCHAR); <br>MsiRecordGetString(hRecord, 1, szAction, &amp;cchAction); <br>iSequence = MsiRecordGetInteger(hRecord, 2); <br>if (iSequence &gt; 0) <br>{ <br>iLast += iSpacing; <br>iNew = iLast; <br>CheckMsi(MsiRecordSetInteger(hRecord, 2, iNew), TEXT("SetInteger")); <br>CheckMsi(MsiViewModify(hView, MSIMODIFY_UPDATE, hRecord), TEXT("UpdateView")); <br>} <br>else <br>iNew = iSequence; <br>_tprintf(TEXT("%3i %3i  %s\n"), iSequence, iNew, szAction); <br>} <br>} <br> <br>extern "C" int __cdecl _tmain(int argc, TCHAR* argv[]) <br>{ <br>if (argc &lt; 2) <br>{ <br>_tprintf(TEXT("Usage: ApiTstDb {database path} [{sequence spacing}]")); <br>return 1; <br>} <br>int iSpacing = 10; <br>if (argc &gt;= 3) <br>{ <br>int i = _ttoi(argv[2]); <br>if (i &gt; 0) <br>iSpacing = i; <br>} <br>try <br>{ <br>PMSIHANDLE hDatabase; <br>CheckMsi(MsiOpenDatabase(argv[1], MSIDBOPEN_TRANSACT, &amp;hDatabase),TEXT("OpenDatabase")); <br>SmoothSequence(hDatabase, iSpacing); <br>MsiDatabaseCommit(hDatabase); <br>TCHAR rgchBuf[MAX_PATH]; <br>GetTempPath(MAX_PATH, rgchBuf); <br>CheckMsi(MsiDatabaseExport(hDatabase, TEXT("InstallSequence"), rgchBuf, TEXT("InstallSequence.idt")),TEXT("ExportTable")); <br>} <br>catch (UINT iError) <br>{ <br>_tprintf(TEXT("%s error %i"), g_szErrorContext, iError); <br>return 1; <br>} <br>int iOpenHandles = MsiCloseAllHandles();  // diagnostic check only <br>if (iOpenHandles != 0) <br>_tprintf(TEXT("%i Handle(s) not closed"), iOpenHandles); <br>return 0; <br>} <br> <br>#else // RC_INVOKED, end of source code, start of resources <br>// resource definition go here <br>#endif // RC_INVOKED <br>#if 0  <br>!endif // makefile terminator <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

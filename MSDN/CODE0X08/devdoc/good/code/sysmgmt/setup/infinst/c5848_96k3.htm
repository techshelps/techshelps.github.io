<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSTWIZ.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5853"></a>INSTWIZ.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1994 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>// <br>// <br>//  This wizard code is adapted from the mstools\win32\wizard <br>//  sample, refer to the wizard sample and the online help for  <br>//  more information about wizards and property pages <br>// <br>// <br>//  Functions: <br>//      CreateWizard(HWND, HINSTANCE) - starts the wizard <br>//    FillInPropertyPage() - Fills in a PROPSHEETPAGE structure <br>// <br>//    Welcome(),License(),YourInfo(),Install_Type(),Install_Destination(), <br>//      Custom_Options(),Install() <br>//           - Process the respective Install pages <br>// <br>// <br> <br>#include &lt;windows.h&gt; <br>#include "instwiz.h" <br>#include "infinst.h" <br> <br>// global license flag <br>BOOL gLicenseAccepted = FALSE; <br> <br>// <br>// <br>//    FUNCTION: CreateWizard(HWND) <br>// <br>//    PURPOSE: Create the Install control.  <br>// <br>//   COMMENTS: <br>//     <br>//      This function creates the install property sheet. <br>// <br>int CreateWizard(HWND hwndOwner, HINSTANCE hInst) <br>{ <br>    PROPSHEETPAGE psp[NUM_PAGES]; <br>    PROPSHEETHEADER psh; <br> <br>    FillInPropertyPage( &amp;psp[0], IDD_WELCOME, TEXT("Welcome"), Welcome); <br>    //FillInPropertyPage( &amp;psp[1], IDD_LICENSE, TEXT("Software License Agreement"), License); <br>    FillInPropertyPage( &amp;psp[1], IDD_INFO, TEXT("Your Information"), YourInfo); <br>    FillInPropertyPage( &amp;psp[2], IDD_INSTALL_TYPE, TEXT("Installation Type"), Install_Type); <br>    FillInPropertyPage( &amp;psp[3], IDD_INSTALL_DESTINATION, TEXT("Installation Location"), Install_Destination); <br>    FillInPropertyPage( &amp;psp[4], IDD_CUSTOM_OPTIONS, TEXT("Custom Installation Options"), Custom_Options); <br>    FillInPropertyPage( &amp;psp[5], IDD_INSTALL, TEXT("Finish Installation"), Install); <br>                    <br>    psh.dwSize = sizeof(PROPSHEETHEADER); <br>    psh.dwFlags = PSH_PROPSHEETPAGE | PSH_WIZARD | PSH_NOAPPLYNOW; <br>    psh.hwndParent = hwndOwner; <br>    psh.pszCaption = (LPSTR) TEXT("Product Install"); <br>    psh.nPages = sizeof(psp) / sizeof(PROPSHEETPAGE); <br>    psh.nStartPage = 0; <br>    psh.ppsp = (LPCPROPSHEETPAGE) &amp;psp; <br> <br>    return (PropertySheet(&amp;psh)); <br>} <br> <br> <br>// <br>// <br>//  FUNCTION: FillInPropertyPage(PROPSHEETPAGE *, int, LPSTR, LPFN)  <br>// <br>//  PURPOSE: Fills in the given PROPSHEETPAGE structure  <br>// <br>//  COMMENTS: <br>// <br>//      This function fills in a PROPSHEETPAGE structure with the <br>//      information the system needs to create the page. <br>//  <br>void FillInPropertyPage( PROPSHEETPAGE* psp, int idDlg, LPSTR pszProc, DLGPROC pfnDlgProc) <br>{ <br>    psp-&gt;dwSize = sizeof(PROPSHEETPAGE); <br>    psp-&gt;dwFlags = 0; <br>    psp-&gt;hInstance = setupInfo.hInst; <br>    psp-&gt;pszTemplate = MAKEINTRESOURCE(idDlg); <br>    psp-&gt;pszIcon = NULL; <br>    psp-&gt;pfnDlgProc = pfnDlgProc; <br>    psp-&gt;pszTitle = pszProc; <br>    psp-&gt;lParam = 0; <br> <br>} <br> <br>////////////////////////////////////////// <br>// <br>// Wizard procs <br>// <br>////////////////////////////////////////// <br> <br>// <br>//  FUNCTION: Welcome (HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Welcome" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>//    WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY Welcome( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>    setupInfo.iWelcome = 0; <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     <br>    case WM_NOTIFY: <br>        switch (((NMHDR FAR *) lParam)-&gt;code)  <br>        { <br> <br>      case PSN_KILLACTIVE: <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    return 1; <br>    break; <br> <br>    case PSN_RESET: <br>    // rest to the original values <br>    setupInfo.iWelcome = 0; <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     case PSN_SETACTIVE: <br>     PropSheet_SetWizButtons(GetParent(hDlg),  PSWIZB_NEXT); <br>    SendMessage(GetDlgItem(hDlg,0x3024 ), BM_SETSTYLE, <br>                                                   (WPARAM)BS_PUSHBUTTON, MAKELONG(FALSE, 0)); <br>    break; <br> <br>                case PSN_WIZNEXT: <br>                    // <br>                    // If they haven't accepted the license  <br>                    // take them there, otherwise proceed with the wizard <br>                    // <br>                    if (TRUE != gLicenseAccepted)  <br>                    { <br>                        int nUserResponse; <br>                         <br>                        // Ask them to accept the license <br>                        nUserResponse = DialogBox <br>                            (setupInfo.hInst, <br>                             MAKEINTRESOURCE(IDD_LICENSE), <br>                             hDlg, <br>                             (DLGPROC) License); <br>                         <br>                        if (IDC_LICENSE_ACCEPT == nUserResponse)  <br>                        { <br>                            // They agreed, now we won't show them the <br>                            // license again <br>                            gLicenseAccepted = TRUE; <br>                        }  <br>                        else <br>                        { <br>                            // the user just cancelled the install <br>                            // by declining the license agreement <br>                            // you could put dialog box here <br>                            // making sure they realize that this will <br>                            // cancel the installation <br>                            PostQuitMessage(0); <br>                            return 1; <br>                        } <br>                    } <br> <br>                    break; <br> <br>                    default: <br>                        return FALSE; <br> <br>        } <br>    break; <br> <br>    default: <br>    return FALSE; <br>    } <br>    return TRUE;    <br>} <br> <br>// <br>//  FUNCTION: License (HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "License Agreement" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>//    WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY License( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>            { <br>                //Read in License fiel <br>                char szLicenseFile[MAX_PATH], ReturnTextBuffer[MAX_PATH];  <br> <br>                LPSTR lpszLicenseFile = (char *) &amp;szLicenseFile ; <br>                LPSTR lpszLicenseText; <br>                 <br>                HWND hEditCtl; <br>                HANDLE hFile; <br> <br>                DWORD NumberOfBytesRead, dwFileSize; <br> <br>                // <br>                // Determine where we are installing from <br>                // and specific the license file there <br>                // <br>                GetModuleFileName(NULL, szLicenseFile, _MAX_PATH); <br>                *(strrchr(szLicenseFile, '\\') + 1) = '\0';        // Strip setup.exe off path <br>                 <br>                strcat(szLicenseFile,TEXT("license.txt")); <br> <br>                // Open License file <br>                hFile = CreateFile( <br>                                   lpszLicenseFile,       // pointer to name of the file  <br>                                   GENERIC_READ,          // access (read-write) mode  <br>                                   FILE_SHARE_READ,       // share mode  <br>                                   NULL,                  // pointer to security descriptor  <br>                                   OPEN_EXISTING,         // how to create  <br>                                   FILE_ATTRIBUTE_NORMAL, // file attributes  <br>                                   NULL);                 // handle to file with attributes to copy   <br>                 <br>                    if(INVALID_HANDLE_VALUE == hFile) <br>                    { <br>                        wsprintf(ReturnTextBuffer, "Error accessing file: %s", szLicenseFile); <br> <br>                        MessageBox(hDlg, ReturnTextBuffer,  <br>                                   "Sample Installation Critical Error", 0); <br> <br>                        //install cannot proceed so go away <br>                       <br>                        PostQuitMessage(0); <br>                        return FALSE; <br>                    } <br> <br>                    // Read License file into string <br>                    // setup memory <br>                    dwFileSize = GetFileSize (hFile, NULL) ; <br> <br>                    lpszLicenseText = malloc ((dwFileSize + 1)); <br>                     <br>                    if(NULL == lpszLicenseText) <br>                    { <br>                        wsprintf(ReturnTextBuffer, "Error allocating memory for license text."); <br>                CloseHandle(hFile); <br> <br>                        MessageBox(hDlg, ReturnTextBuffer,  <br>                            "Sample Installation Critical Error", 0); <br> <br>                        //install cannot proceed so go away <br>                         <br>                        free(lpszLicenseText); <br>                        PostQuitMessage(0); <br>                        return FALSE; <br>                    } <br> <br>                    //read file <br>                    if (!ReadFile(hFile,    // handle of file to read  <br>                                  lpszLicenseText,    // address of buffer that receives data   <br>                                  dwFileSize,    // number of bytes to read  <br>                                  &amp;NumberOfBytesRead,    // address of number of bytes read  <br>                                  NULL))                // address of structure for data  <br>                    { <br>                        wsprintf(ReturnTextBuffer, "Error reading license file: %s", szLicenseFile); <br> <br>                        // clean up <br>                        free(lpszLicenseText); <br>                        CloseHandle(hFile); <br>                         <br>                        MessageBox(hDlg, "Sample Installation Critical Error",  <br>                                   ReturnTextBuffer, 0); <br> <br>                        //install cannot proceed so go away <br> <br>                        PostMessage(hDlg, WM_DESTROY, 0, 0 ); <br>                        return FALSE; <br>                    } <br>                   <br>                //Done with file <br>                CloseHandle(hFile); <br>                hFile = NULL; <br>                                     <br>                // Be sure the file string is null terminated <br>                lpszLicenseText[dwFileSize] = '\0'; <br>                     <br>                SetDlgItemText(hDlg, LICENSE_TEXT, lpszLicenseText); <br>        <br>                //set focus to license text <br>                hEditCtl = GetDlgItem(hDlg, LICENSE_TEXT); <br>                SetFocus(hEditCtl); <br> <br>                // the control now has the text <br>                // so free the memory <br>                free(lpszLicenseText); <br>                return(FALSE); <br>            } <br> <br>            break; <br> <br>        case WM_COMMAND: <br>            // <br>            // LOWORD added for portability <br>            // <br>            switch(LOWORD(wParam)) { <br>            case IDC_LICENSE_ACCEPT: <br>                EndDialog(hDlg, IDC_LICENSE_ACCEPT); <br>                return 0; <br>            case IDC_LICENSE_DECLINE: <br>                EndDialog(hDlg, IDC_LICENSE_DECLINE); <br>                return 0; <br>            } <br>            break; <br>        } <br>    return(FALSE); <br> <br>    UNREFERENCED_PARAMETER(lParam); <br>} <br> <br>// <br>//  FUNCTION: YourInfo(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Your Information" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>// <br>BOOL APIENTRY YourInfo( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>    break; <br> <br>    case WM_NOTIFY: <br>        switch (((NMHDR FAR *) lParam)-&gt;code)  <br>        { <br> <br>      case PSN_KILLACTIVE: <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    return 1; <br>    break; <br> <br>    case PSN_RESET: <br>    // reset to the blank values <br>    lstrcpy(setupInfo.pszUserName, TEXT("")); <br>    lstrcpy(setupInfo.pszCompany,TEXT("")); <br>    lstrcpy(setupInfo.pszProductIdString, TEXT("")); <br>    lstrcpy(setupInfo.pszEmailAddress, TEXT("")); <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     case PSN_SETACTIVE: <br>        PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK |PSWIZB_NEXT); <br>    SendMessage(GetDlgItem(hDlg,0x3024 ), BM_SETSTYLE, (WPARAM)BS_PUSHBUTTON, MAKELONG(FALSE, 0)); <br>    //SendMessage(GetParent(hDlg), DM_SETDEFID, (WPARAM)IDC_BUTTON1, 0); <br>    SendMessage(GetDlgItem(hDlg, IDE_NAME),  <br>                                     WM_SETTEXT, 0, (LPARAM)setupInfo.pszUserName); <br>    SendMessage(GetDlgItem(hDlg, IDE_COMPANY),  <br>                                     WM_SETTEXT, 0, (LPARAM)setupInfo.pszCompany); <br>    SendMessage(GetDlgItem(hDlg, IDE_PRODUCT_ID),  <br>                                     WM_SETTEXT, 0, (LPARAM)setupInfo.pszProductIdString); <br>    SendMessage(GetDlgItem(hDlg, IDE_EMAIL),  <br>                                     WM_SETTEXT, 0, (LPARAM)setupInfo.pszEmailAddress); <br>    break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>    // the Next button was pressed <br>     SendDlgItemMessage(hDlg, IDE_NAME, WM_GETTEXT,  <br>                                    (WPARAM)MAX_PATH, (LPARAM) setupInfo.pszUserName); <br>    SendDlgItemMessage(hDlg, IDE_COMPANY, WM_GETTEXT,  <br>                                    (WPARAM)MAX_PATH, (LPARAM)setupInfo.pszCompany); <br>    SendDlgItemMessage(hDlg, IDE_PRODUCT_ID, WM_GETTEXT,  <br>                                    (WPARAM)MAX_PATH, (LPARAM)setupInfo.pszProductIdString); <br>    SendDlgItemMessage(hDlg, IDE_EMAIL, WM_GETTEXT,  <br>                                    (WPARAM)MAX_PATH, (LPARAM)setupInfo.pszEmailAddress); <br>                    break; <br> <br>    default: <br>    return FALSE; <br> <br>        } <br>    break; <br> <br>    default: <br>    return FALSE; <br>    } <br>    return TRUE;    <br>} <br> <br>// <br>//  FUNCTION: Install_Type (HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Install_Type" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>//    WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY Install_Type( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>            // pick normal as the default <br>            setupInfo.iInstall_Type = IDC_INSTALL_TYPE_NORMAL; <br>            CheckRadioButton( hDlg, IDC_INSTALL_TYPE_NORMAL, IDC_INSTALL_TYPE_UNINSTALL,  <br>            IDC_INSTALL_TYPE_NORMAL); <br>            setupInfo.iCustom_Options1 = 1; <br>            setupInfo.iCustom_Options2 = 1; <br>            setupInfo.iCustom_Options3 = 0; <br>            setupInfo.iCustom_Options4 = 1; <br>            break; <br> <br>    case WM_COMMAND: <br>            if (HIWORD(wParam) == BN_CLICKED) <br>            { <br>                setupInfo.iInstall_Type = LOWORD(wParam); <br>                CheckRadioButton( hDlg, IDC_INSTALL_TYPE_NORMAL, IDC_INSTALL_TYPE_UNINSTALL, LOWORD(wParam)); <br>         <br>                //TODO: you could change the wizard at this <br>                // point with add and remove page. <br>                // We will just set the options of custom options <br>                // for simplicity  <br>                 <br>                // change the NEXT to FINISH if they want to uninstall <br>                if (IDC_INSTALL_TYPE_UNINSTALL == LOWORD(wParam)) <br>                { <br>                    //TODO: could check that the product is indeed <br>                    // installed and if not, don't let them select <br>                    // it--you could grey out the selection or  <br>                    // you could just uninstall even though <br>                    // it won't do anything <br>                    PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_FINISH); <br>                } <br>                else <br>                { <br>                    PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_NEXT); <br>                } <br>                 <br>                // add in options according to what was seleced <br>                switch LOWORD(wParam) <br>                { <br>                case IDC_INSTALL_TYPE_CUSTOM: <br>                    // first reset options to off <br>                    setupInfo.iCustom_Options1 = 0; <br>                    setupInfo.iCustom_Options2 = 0; <br>                    setupInfo.iCustom_Options3 = 0; <br>                    setupInfo.iCustom_Options4 = 0; <br>                    break; <br>                case IDC_INSTALL_TYPE_NORMAL: <br>                    setupInfo.iCustom_Options1 = 1; <br>                    setupInfo.iCustom_Options2 = 1; <br>                    setupInfo.iCustom_Options3 = 0; <br>                    setupInfo.iCustom_Options4 = 1; <br>                    break; <br>                case IDC_INSTALL_TYPE_MIN: <br>                    setupInfo.iCustom_Options1 = 1; <br>                    setupInfo.iCustom_Options2 = 1; <br>                    setupInfo.iCustom_Options3 = 0; <br>                    setupInfo.iCustom_Options4 = 0; <br>                    break; <br>                default: <br>                    break;  <br>                } <br>            } <br> <br>    break; <br>     <br>    case WM_NOTIFY: <br>        switch (((NMHDR FAR *) lParam)-&gt;code)  <br>        { <br> <br>      case PSN_KILLACTIVE: <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    return 1; <br>    break; <br> <br>    case PSN_RESET: <br>    // rest to the original values <br>    setupInfo.iInstall_Type = 0; <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     case PSN_SETACTIVE: <br>                               //if they have selected an install type, be sure <br>                               //it is checked <br>                               if (setupInfo.iInstall_Type) <br>    SendMessage(GetDlgItem(hDlg, setupInfo.iInstall_Type), <br>                                            BM_SETCHECK, 1, 0L); <br> <br>                               // Set the correct button NEXT or FINISH <br>                               if (IDC_INSTALL_TYPE_UNINSTALL == setupInfo.iInstall_Type) <br>                               { <br>                                   //TODO: could check that the product is indeed <br>                                   // installed and if not, don't let them select <br>                                   // it--you could grey out the selection or  <br>                                   // you could just uninstall even though <br>                                   // it won't do anything <br>                                   PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_FINISH); <br>                               } <br>                               else <br>                               { <br>                                   PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_NEXT); <br>                               } <br>break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>                    break; <br> <br>                case PSN_WIZFINISH: <br>                    // They finished the wizard, now do <br>                    // what they said <br>                    break; <br> <br>                default: <br>                    return FALSE; <br> <br>        } <br>    break; <br> <br>    default: <br>    return FALSE; <br>    } <br>    return TRUE;    <br>} <br>// <br>//  FUNCTION: Install_Destination(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Install Destination" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>// <br>BOOL APIENTRY Install_Destination( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>    //lstrcpy(setupInfo.pszDestPath, TEXT("")); <br>    break; <br> <br>    case WM_NOTIFY: <br>        switch (((NMHDR FAR *) lParam)-&gt;code)  <br>        { <br>                //TODO: Add code here to check that the user entered <br>                //      path is valid and show the user disk space available <br>                //      You can also have more on disk space on the  <br>                //      customer options page.   <br>                //      So this sample does NOT verify the path and disk space <br>                //      requirements.  Note the setupapi functions will gracefully <br>                //      let the user know there is no disk space avail--at which <br>                //      time the user can go clean up some space or cancel the install <br> <br>      case PSN_KILLACTIVE: <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    return 1; <br>    break; <br> <br>    case PSN_RESET: <br>    // reset to the original values <br>    lstrcpy(setupInfo.pszDestPath, TEXT("")); <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     case PSN_SETACTIVE: <br>        PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK |PSWIZB_NEXT); <br>    SendMessage(GetDlgItem(hDlg,0x3024 ), BM_SETSTYLE, (WPARAM)BS_PUSHBUTTON, MAKELONG(FALSE, 0)); <br>    SendMessage(GetDlgItem(hDlg, IDE_PATH), WM_SETTEXT, 0, (LPARAM)setupInfo.pszDestPath); <br>    break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>    // the Next button was pressed <br>     SendDlgItemMessage(hDlg, IDE_PATH, WM_GETTEXT, (WPARAM)MAX_PATH, (LPARAM) setupInfo.pszDestPath); <br>         break; <br> <br>    default: <br>    return FALSE; <br> <br>        } <br>    break; <br> <br>    default: <br>    return FALSE; <br>    } <br>    return TRUE;    <br>} <br>// <br>//  FUNCTION: Custom_Options (HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Custom options" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>//    WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY Custom_Options( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>            // these are initialized via the install type page <br>            // so we don't need to initialize anything <br>    break; <br> <br>    case WM_COMMAND: <br>    if (HIWORD(wParam) == BN_CLICKED) <br>    { <br>                    if (LOWORD(wParam) == IDC_CUSTOM_OPTION1) { <br>                        if (setupInfo.iCustom_Options1) { <br>                             setupInfo.iCustom_Options1 = 0; <br>                         } else { <br>                             setupInfo.iCustom_Options1 = 1; <br>                         } <br>                     } <br> <br>                     if (LOWORD(wParam) == IDC_CUSTOM_OPTION2) { <br>                         if (setupInfo.iCustom_Options2) { <br>                              setupInfo.iCustom_Options2 = 0; <br>                          } else { <br>                              setupInfo.iCustom_Options2 = 1; <br>                          } <br>                      } <br> <br>           if (LOWORD(wParam) == IDC_CUSTOM_OPTION3) { <br>                         if (setupInfo.iCustom_Options3) { <br>                              setupInfo.iCustom_Options3 = 0; <br>                         } else { <br>                              setupInfo.iCustom_Options3 = 1; <br>                         } <br>                      } <br> <br>          if (LOWORD(wParam) == IDC_CUSTOM_OPTION4) { <br>                          if (setupInfo.iCustom_Options4) { <br>                               setupInfo.iCustom_Options4 = 0; <br>                          } else { <br>                               setupInfo.iCustom_Options4 = 1; <br>                      } <br>                   } <br>    } <br>    break; <br>     <br>    case WM_NOTIFY: <br>        switch (((NMHDR FAR *) lParam)-&gt;code)  <br>        { <br> <br>      case PSN_KILLACTIVE: <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    return 1; <br>    break; <br> <br>    case PSN_RESET: <br>    // rest to the original values <br>    setupInfo.iCustom_Options1 = 0; <br>    setupInfo.iCustom_Options2 = 0; <br>    setupInfo.iCustom_Options3 = 0; <br>    setupInfo.iCustom_Options4 = 0; <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     case PSN_SETACTIVE: <br>    CheckDlgButton (hDlg, IDC_CUSTOM_OPTION1,  <br>                        setupInfo.iCustom_Options1); <br>    CheckDlgButton (hDlg, IDC_CUSTOM_OPTION2,  <br>                        setupInfo.iCustom_Options2); <br>    CheckDlgButton (hDlg, IDC_CUSTOM_OPTION3,  <br>                        setupInfo.iCustom_Options3); <br>    CheckDlgButton (hDlg, IDC_CUSTOM_OPTION4, <br>                        setupInfo.iCustom_Options4); <br>     PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_NEXT); <br>    break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>                    break; <br> <br>                default: <br>                    return FALSE; <br> <br>        } <br>    break; <br> <br>    default: <br>    return FALSE; <br>    } <br>    return TRUE;    <br>} <br>// <br>//  FUNCTION: Install(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Installation" page  <br>// <br>//  MESSAGES: <br>//     <br>//    WM_INITDIALOG - intializes the page <br>//    WM_NOTIFY - processes the notifications sent to the page <br>//    WM_COMMAND - saves the id of the choice selected <br>// <br>// <br>BOOL APIENTRY Install( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br> <br>    switch (message) <br>    { <br>    case WM_INITDIALOG: <br>    setupInfo.iInstall = 0; <br>    break; <br> <br>    case WM_NOTIFY: <br>        switch (((NMHDR FAR *) lParam)-&gt;code)  <br>        { <br>      case PSN_KILLACTIVE: <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    return 1; <br>    break; <br> <br>    case PSN_RESET: <br>    // rest to the original values <br>    setupInfo.iInstall = 0; <br>               SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>    break; <br> <br>     case PSN_SETACTIVE: <br>    PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_FINISH); <br>    break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br> <br>                case PSN_WIZFINISH: <br>                    // They finished the wizard, now do <br>                    // what they said <br>                    break; <br> <br>                default: <br>                    return FALSE; <br>        } <br>    break; <br> <br>    default: <br>    return FALSE; <br>    } <br>    return TRUE;    <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

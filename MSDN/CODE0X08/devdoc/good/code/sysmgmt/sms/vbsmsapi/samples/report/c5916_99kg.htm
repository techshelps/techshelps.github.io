<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MACHGRP.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5920"></a>MACHGRP.FRM</h2>
<pre><code>VERSION 4.00 <br>Begin VB.Form frmMachineGrpReport  <br>   Appearance      =   0  'Flat <br>   BackColor       =   &amp;H80000005&amp; <br>   Caption         =   "Machine Group Report" <br>   ClientHeight    =   4215 <br>   ClientLeft      =   1560 <br>   ClientTop       =   2610 <br>   ClientWidth     =   8505 <br>   BeginProperty Font  <br>      name            =   "MS Sans Serif" <br>      charset         =   1 <br>      weight          =   700 <br>      size            =   8.25 <br>      underline       =   0   'False <br>      italic          =   0   'False <br>      strikethrough   =   0   'False <br>   EndProperty <br>   ForeColor       =   &amp;H80000008&amp; <br>   Height          =   4620 <br>   Icon            =   "MACHGRP.frx":0000 <br>   Left            =   1500 <br>   LinkTopic       =   "Form1" <br>   MDIChild        =   -1  'True <br>   ScaleHeight     =   4215 <br>   ScaleWidth      =   8505 <br>   Top             =   2265 <br>   Width           =   8625 <br>   Begin VB.CommandButton cmdSave  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Save" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   4 <br>      TabStop         =   0   'False <br>      Top             =   2580 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdSaveAs  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Save As" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   3 <br>      TabStop         =   0   'False <br>      Top             =   2880 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CheckBox chkDirty  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Dirty Bit" <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   195 <br>      Left            =   4440 <br>      TabIndex        =   2 <br>      TabStop         =   0   'False <br>      Top             =   3540 <br>      Visible         =   0   'False <br>      Width           =   1155 <br>   End <br>   Begin VB.CommandButton cmdPrintPreview  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Print Preview" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   1 <br>      TabStop         =   0   'False <br>      Top             =   3480 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdPrint  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Print" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   0 <br>      TabStop         =   0   'False <br>      Top             =   3180 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdAbort  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Abort" <br>      Height          =   315 <br>      Left            =   4440 <br>      TabIndex        =   7 <br>      TabStop         =   0   'False <br>      Top             =   3180 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdInitialize  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Initialize" <br>      Height          =   315 <br>      Left            =   4440 <br>      TabIndex        =   8 <br>      TabStop         =   0   'False <br>      Top             =   2880 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdExport  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Export" <br>      Height          =   315 <br>      Left            =   4440 <br>      TabIndex        =   6 <br>      TabStop         =   0   'False <br>      Top             =   2580 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin Crystal.CrystalReport CrystalReport  <br>      Left            =   840 <br>      Top             =   960 <br>      _ExtentX        =   741 <br>      _ExtentY        =   741 <br>      _StockProps     =   0 <br>      ReportFileName  =   "" <br>      Destination     =   0 <br>      WindowLeft      =   100 <br>      WindowTop       =   100 <br>      WindowWidth     =   480 <br>      WindowHeight    =   300 <br>      WindowTitle     =   "" <br>      WindowBorderStyle=   2 <br>      WindowControlBox=   -1  'True <br>      WindowMaxButton =   -1  'True <br>      WindowMinButton =   -1  'True <br>      CopiesToPrinter =   1 <br>      PrintFileName   =   "" <br>      PrintFileType   =   2 <br>      SelectionFormula=   "" <br>      GroupSelectionFormula=   "" <br>      Connect         =   "" <br>      UserName        =   "" <br>      ReportSource    =   0 <br>      BoundReportHeading=   "" <br>      BoundReportFooter=   -1  'True <br>   End <br>   Begin MSComDlg.CommonDialog CommonDialog  <br>      Left            =   360 <br>      Top             =   960 <br>      _ExtentX        =   847 <br>      _ExtentY        =   847 <br>      _StockProps     =   0 <br>   End <br>   Begin MSOutl.Outline olnData  <br>      Height          =   750 <br>      Left            =   2340 <br>      TabIndex        =   9 <br>      Top             =   240 <br>      Width           =   1500 <br>      _Version        =   65536 <br>      _ExtentX        =   2646 <br>      _ExtentY        =   1323 <br>      _StockProps     =   77 <br>      BorderStyle     =   0 <br>      Style           =   5 <br>   End <br>   Begin VB.Label lblFileSpec  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "File Specification" <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   195 <br>      Left            =   5940 <br>      TabIndex        =   5 <br>      Top             =   3540 <br>      Visible         =   0   'False <br>      Width           =   2175 <br>   End <br>End <br>Attribute VB_Name = "frmMachineGrpReport" <br>Attribute VB_Creatable = False <br>Attribute VB_Exposed = False <br>Option Explicit <br> <br>'//**************************************************************************** <br>'// <br>'//  Copyright (c) 1995, Microsoft Corporation <br>'// <br>'//  File:  MACHGRP.FRM <br>'// <br>'//  History: <br>'// <br>'//      Gary Fuehrer, SEA   5/9/95      Created. <br>'// <br>'//**************************************************************************** <br> <br>Dim hConnect&amp; <br>Dim ReportTempSpec$ <br>Dim NewNumber% <br>Dim db As Database <br>Dim dbt As Database <br> <br>Dim MachineGroupID$ <br>Dim PropertyList$() <br>Dim PropertyCount% <br>Dim bFilterProperties% <br> <br>'Some relavent names for the outline control pictures <br>Const MSOUTLINE_PICTURE_GROUP = MSOUTLINE_PICTURE_CLOSED <br>Const MSOUTLINE_PICTURE_MACHINE = MSOUTLINE_PICTURE_OPEN <br>Const MSOUTLINE_PICTURE_PROPERTY = MSOUTLINE_PICTURE_LEAF <br> <br>'State flags <br>Dim bGetData%  'If True, getting machine data from SMS. <br>Dim bReadData% 'If True, reading machine data from file. <br> <br>Private Sub chkDirty_Click() <br>    UpdateCaption <br>End Sub <br> <br>Private Sub cmdAbort_Click() <br>    'Handle user abort of current lengthy operation <br>    If bGetData% Then <br>        If MsgBox("Do you want to stop gathering machine data?" + Chr$(10) + Chr$(10) + "Click Yes to abort, No to continue.", MB_YESNO + MB_ICONQUESTION, Caption) = IDYES Then <br>            bGetData% = False <br>        End If <br>    ElseIf bReadData% Then <br>        If MsgBox("Do you want to stop reading machine data?" + Chr$(10) + Chr$(10) + "Click Yes to abort, No to continue.", MB_YESNO + MB_ICONQUESTION, Caption) = IDYES Then <br>            bReadData% = False <br>        End If <br>    End If <br>End Sub <br> <br>Private Sub cmdExport_Click() <br>    Dim FileSpec$, nPos%, Resp%, FileKilled% <br> <br>    'Build suggested file spec <br>    If lblFileSpec &gt; "" Then <br>        nPos% = InStr(lblFileSpec, ".") - 1 <br>        If nPos% &lt; 0 Then nPos% = Len(lblFileSpec) <br>        FileSpec$ = left$(lblFileSpec, nPos) + ".TXT" <br>    Else: FileSpec$ = "*.TXT" <br>    End If <br> <br>    'Get from the user the print file name <br>    FileSpec$ = GetSaveAsFileSpec$(FileSpec$, "ASCII Text (*.TXT) |*.TXT |All Files (*.*) |*.*") <br>    If FileSpec$ &lt;= "" Then Exit Sub <br> <br>    'See if we need to delete existing file <br>    '(Crystal Reports can't overwrite an existing file) <br>    If Dir$(FileSpec$) &gt; "" Then <br>        FileKilled% = 0 <br>        Do <br>            On Error Resume Next <br>            Kill FileSpec <br>            If Err &gt; 0 Then <br>                Resp% = MsgBox("An error occured writing to file " + FileSpec$ + ":" + Chr$(10) + Error$ + Chr$(10) + Chr$(10) + "Do you want to try again?", MB_RETRYCANCEL Or MB_ICONQUESTION, Caption) <br>                If Resp% = IDCANCEL Then Exit Sub <br>            Else: FileKilled% = True <br>            End If <br>        Loop Until FileKilled% <br>    End If <br> <br>    'Set the print file name and type <br>    CrystalReport.PrintFileName = CommonDialog.filename <br>    CrystalReport.PrintFileType = 2 'ASCII text <br> <br>    'Export report code <br>    PrintDoc CRW_PRINT_TO_FILE <br>End Sub <br> <br>Private Sub cmdInitialize_Click() <br>    If lblFileSpec &gt; "" Then <br>        'Flag that we are in data reading mode <br>        bReadData% = True <br>        ReadMachineData -1 <br>        bReadData% = False <br>    Else <br>        'Flag that we are in gathering data mode <br>        bGetData% = True <br>        GetMachineGroups <br>        bGetData% = False <br>    End If <br>End Sub <br> <br>Private Sub cmdPrint_Click() <br>    'See if we need the print dialog <br>    If gbNeedPrintDialog% = True Then <br>        'Put up the print dialog <br>        CommonDialog.Flags = PD_NOSELECTION Or PD_NOPAGENUMS Or PD_HIDEPRINTTOFILE <br>        CommonDialog.Copies = 1 <br>        CommonDialog.CancelError = True <br>        On Error Resume Next <br>        CommonDialog.Action = DLG_PRINT <br>        If Err = CDERR_CANCEL Then Exit Sub <br>        If Err &gt; 0 Then <br>            MsgBox "An unexpected error occured:" + Chr$(10) + Chr$(10) + Error$, MB_OK Or MB_ICONEXCLAMATION, Caption <br>            Exit Sub <br>        End If <br>        On Error GoTo 0 <br> <br>        'Handle user printer settings <br>        CrystalReport.CopiesToPrinter = CommonDialog.Copies <br>    Else <br>        'Supply printer default settings <br>        CrystalReport.CopiesToPrinter = 1 <br>    End If <br> <br>    'Print document <br>    PrintDoc CRW_PRINT_TO_PRINTER <br>End Sub <br> <br>Private Sub cmdPrintPreview_Click() <br>    'Print Preview document <br>    PrintDoc CRW_PRINT_TO_WINDOW <br>End Sub <br> <br>Private Sub cmdSave_Click() <br>    'See if we need to do a Save or a Save As <br>    If lblFileSpec &gt; "" Then <br>        SaveDoc lblFileSpec <br>    Else: cmdSaveAs_Click <br>    End If <br>End Sub <br> <br>Private Sub cmdSaveAs_Click() <br>    Dim NewFileSpec$ <br> <br>    NewFileSpec$ = GetSaveAsFileSpec$(lblFileSpec, "Access 1.0 (*.MDB) |*.MDB |All Files (*.*) |*.*") <br>    If NewFileSpec$ &lt;= "" Then Exit Sub <br> <br>    SaveDoc NewFileSpec$ <br>End Sub <br> <br>Private Sub Form_Load() <br>    Dim i% <br> <br>    'Position outline control (will be resized in Form Resize) <br>    olnData.left = 0 <br>    olnData.top = 0 <br> <br>    chkDirty = False <br> <br>    'Get local copy of parameters <br>    MachineGroupID$ = InitMachineGroupID$ <br>    NewNumber% = InitReportNewNumber% <br>    hConnect&amp; = InitReporthConnect&amp; <br>    lblFileSpec = InitReportFileSpec$ <br>    ReportTempSpec$ = InitReportTempSpec$ <br>    bFilterProperties% = InitMachineGroupIsFiltered% <br>    PropertyCount% = InitMachineGroupPropertyCount% <br>    ReDim PropertyList$(0 To PropertyCount%) <br>    For i% = 0 To PropertyCount% - 1 <br>        PropertyList$(i%) = InitMachineGroupProperties$(i%) <br>    Next i% <br> <br>    Set dbt = OpenDatabase(ReportTempSpec$, True) <br>    If lblFileSpec &gt; "" Then Set db = OpenDatabase(lblFileSpec, True, True) <br>End Sub <br> <br>Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer) <br>    Dim Resp%, FileSpec$ <br> <br>    'Make sure we're not in the middle of something <br>    If bGetData% Or bReadData% Then <br>        cmdAbort_Click <br>        Cancel = True <br>        Exit Sub <br>    End If <br> <br>    'Give the user a chance to save document <br>    If chkDirty Then <br>        Resp% = MsgBox("This report has been modified. Save data before closing?", MB_YESNOCANCEL Or MB_ICONQUESTION, Caption) <br>        If Resp% = IDYES Then <br>            cmdSave_Click <br>            If chkDirty Then Cancel = True <br>        ElseIf Resp% = IDCANCEL Then: Cancel = True <br>        End If <br>    End If <br>End Sub <br> <br>Private Sub Form_Resize() <br>    Static OldWidth, OldHeight <br>    Dim r As Rect, HBorderPixels%, VBorderPixels% <br> <br>    'See if we're minimized <br>    If WindowState = MINIMIZED Then Exit Sub <br> <br>    'Get client size of form (already in pixels, I find) <br>    GetClientRect hwnd, r <br>    HBorderPixels% = Width / X_PIX_SIZE - r.right <br>    VBorderPixels% = Height / Y_PIX_SIZE - r.bottom <br> <br>    If OldWidth &lt;&gt; Width And Width - X_PIX_SIZE * HBorderPixels% &gt; olnData.left Then <br>        olnData.Width = Width - X_PIX_SIZE * HBorderPixels% - olnData.left <br> <br>        OldWidth = Width <br>    End If <br> <br>    If OldHeight &lt;&gt; Height And Height - Y_PIX_SIZE * VBorderPixels% &gt; olnData.top Then <br>        olnData.Height = Height - Y_PIX_SIZE * VBorderPixels% - olnData.top <br> <br>        OldHeight = Height <br>    End If <br>End Sub <br> <br>Private Sub Form_Unload(Cancel As Integer) <br>    dbt.Close <br>    If Not db Is Nothing Then db.Close <br> <br>    'Kill temp file <br>    On Error Resume Next <br>    Kill ReportTempSpec$ <br>    On Error GoTo 0 <br> <br>    FreeReportWindow Me <br>End Sub <br> <br>Private Function GetAttributeValue%(db As Database, sScalar As SCALAR, GroupID&amp;, MachineID&amp;, PropertyID&amp;, PropertyIndex%) <br>    Dim Attrib As AttributeRec, AttributeID&amp; <br>    Dim lRet&amp; <br> <br>    'Add item to database <br>    AttributeID&amp; = AddAttribute&amp;(db, sScalar.pszName, "") <br>    If AttributeID&amp; &gt; 0 Then <br>        'Insert entry into database <br>        Attrib.MachineGroupID&amp; = GroupID&amp; <br>        Attrib.MachineID&amp; = MachineID&amp; <br>        Attrib.PropertyID&amp; = PropertyID&amp; <br>        Attrib.PropertyNum% = PropertyIndex% <br>        Attrib.AttributeID&amp; = AttributeID&amp; <br>        Attrib.Value$ = MakeNiceForCrystalReports$(sScalar.pszValue) <br>        If InsertAttribute&amp;(db, Attrib) = 1 Then <br>            GetAttributeValue% = IDOK <br>        Else: GetAttributeValue% = MsgBox("Database Error:" + Chr$(10) + Chr$(10) + Error$, MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        End If <br>    Else: GetAttributeValue% = MsgBox("Database Error:" + Chr$(10) + Chr$(10) + Error$, MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>    End If <br>End Function <br> <br>Private Function GetItemID%(Attrib As AttributeRec, ByVal ListIndex%) <br>    Dim Indent% <br> <br>    'Default return value 0 (nothing at list index) <br>    GetItemID% = 0 <br>    If ListIndex% &lt; 0 Or ListIndex% &gt;= olnData.ListCount Then Exit Function <br> <br>    Indent% = olnData.Indent(ListIndex%) <br>    GetItemID% = Indent% + 1 <br> <br>    If Indent% &gt; 0 Then <br>        Attrib.MachineID = olnData.ItemData(ListIndex%) <br>        Do <br>            ListIndex% = ListIndex% - 1 <br>        Loop Until olnData.Indent(ListIndex%) &lt; Indent% <br>        Indent% = Indent% - 1 <br>    End If <br> <br>    Attrib.MachineGroupID = olnData.ItemData(ListIndex%) <br>End Function <br> <br>Private Sub GetMachineGroups() <br>    Dim hContainer&amp;, hSubFolder&amp;, hFilter&amp; <br>    Dim sScalar As SCALAR, sToken As TOKEN <br>    Dim lRet&amp;, Resp%, PropertyIndex% <br> <br>    lRet&amp; = SmsOpenContainer&amp;(C_MACHINEGROUP, hConnect&amp;, hContainer&amp;) <br>    If lRet&amp; &lt;&gt; SMS_OK Then <br>        MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>        Exit Sub <br>    End If <br> <br>    'See if we need to filter certain properties <br>    If bFilterProperties% And PropertyCount% &gt; 0 Then <br>        'Create a machine property filter <br>        lRet&amp; = SmsCreateFilter&amp;(GROUP_FILTER, hConnect&amp;, hFilter) <br>        If lRet&amp; &lt;&gt; SMS_OK Then <br>            MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>            GoTo GetMachineGroupsCleanup <br>        End If <br> <br>        'Add the desired properties into the filter as tokens <br>        sToken.szName = "GroupClass" <br>        sToken.dwOp = QOP_STR_EQ <br>        For PropertyIndex% = 0 To PropertyCount% - 1 <br>            sToken.szValue = PropertyList$(PropertyIndex%) <br>            lRet&amp; = SmsAddToken&amp;(hFilter, OP_OR, sToken, AT_END) <br>            If lRet&amp; &lt;&gt; SMS_OK Then <br>                MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>                GoTo GetMachineGroupsCleanup <br>            End If <br>        Next PropertyIndex% <br> <br>        'Set the property filter into the machine group container <br>        lRet&amp; = SmsSetFilter&amp;(hContainer&amp;, hFilter&amp;) <br>        If lRet&amp; &lt;&gt; SMS_OK Then <br>            MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>            GoTo GetMachineGroupsCleanup <br>        End If <br>    End If <br> <br>    'Populate the machine group container <br>    lRet&amp; = SmsPopulate&amp;(hContainer&amp;, POP_SYNC, ByVal 0&amp;) <br>    If lRet&amp; &lt;&gt; SMS_OK And lRet&amp; &lt;&gt; SMS_EMPTY Then <br>        MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>        GoTo GetMachineGroupsCleanup <br>    End If <br> <br>    'List the machine groups in this container <br>    Resp% = IDOK <br>    lRet&amp; = SmsGetNextFolder&amp;(hContainer&amp;, F_ANY, hSubFolder&amp;) <br>    Do While lRet&amp; = SMS_OK <br>        'Get subfolders <br>        Resp% = GetMachines%(dbt, hSubFolder&amp;, CInt(olnData.ListCount)) <br> <br>        'See if the user canceled <br>        If Not bGetData% Then Resp% = IDABORT <br> <br>        'Check the user response <br>        Select Case Resp% <br>            Case IDOK, IDIGNORE <br>                lRet&amp; = SmsCloseFolder&amp;(hSubFolder&amp;) <br>                lRet&amp; = SmsGetNextFolder&amp;(hContainer&amp;, F_ANY, hSubFolder&amp;) <br>                Resp% = IDOK <br>            Case IDABORT <br>                lRet&amp; = SmsCloseFolder&amp;(hSubFolder&amp;) <br>                lRet&amp; = SMS_NO_MORE_DATA <br>            Case IDRETRY <br>                lRet&amp; = SMS_OK <br>        End Select <br>    Loop <br>    If lRet&amp; &lt;&gt; SMS_NO_MORE_DATA Then <br>        MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>    End If <br>         <br>GetMachineGroupsCleanup: <br>    If hFilter Then lRet&amp; = SmsCloseFilter&amp;(hFilter&amp;) <br>    lRet&amp; = SmsCloseContainer&amp;(hContainer&amp;) <br>    chkDirty = CHECKED <br>End Sub <br> <br>Private Function GetMachineProperties%(db As Database, ByVal hFolder&amp;, ParentListIndex%, GroupID&amp;) <br>    Dim hSubFolder&amp;, TypeName$, FolderType&amp; <br>    Dim sScalar As SCALAR, MachineID&amp;, Machine$, MachineName$ <br>    Dim ListIndex%, bGetDataOld%, PropertyIndex% <br>    Dim lRet&amp;, Resp%, Index%, OldStatBarMsg$ <br> <br>    'Default return value IDOK (Entry added) <br>    GetMachineProperties% = IDOK <br> <br>    'Location of next item to add to outline control <br>    ListIndex% = olnData.ListCount <br> <br>    'Get this folder's type (expect Machine) <br>    lRet&amp; = SmsGetFolderType&amp;(hFolder&amp;, FolderType&amp;, TypeName$) <br>    If lRet&amp; &lt;&gt; SMS_OK Then <br>        GetMachineProperties% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        Exit Function <br>    End If <br> <br>    Select Case TypeName$ <br>        Case "Machine" <br>            lRet&amp; = SmsGetFolderID&amp;(hFolder&amp;, Machine$) <br>            If lRet&amp; &lt;&gt; SMS_OK Then <br>                GetMachineProperties% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>                Exit Function <br>            End If <br> <br>            'Machine Name not available. Use Machine ID string <br>            MachineName$ = Machine$ <br> <br>        Case Else <br>            Exit Function <br>    End Select <br> <br>    DoEvents <br> <br>    'Check to see if the user wants to cancel <br>    If bGetData% Then <br>        'Add item to database <br>        MachineID&amp; = AddMachine&amp;(db, Machine$, MachineName$) <br>        If MachineID&amp; &gt; 0 Then <br>            'Add item to outline control <br>            olnData.AddItem MachineName$, ListIndex% <br>            olnData.Indent(ListIndex%) = 1 <br>            olnData.PictureType(ListIndex%) = MSOUTLINE_PICTURE_MACHINE <br>            olnData.ItemData(ListIndex%) = MachineID&amp; <br>            If olnData.IsItemVisible(ParentListIndex%) And Not olnData.Expand(ParentListIndex%) Then <br>                olnData.Expand(ParentListIndex%) = True <br>            End If <br>            If olnData.ListIndex = ListIndex% - 1 Then <br>                olnData.ListIndex = ListIndex% <br>            End If <br>            olnData.Refresh <br>            Resp% = IDOK <br>        Else: Resp% = MsgBox("Database Error:" + Chr$(10) + Chr$(10) + Error$, MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        End If <br>    Else: Resp% = IDABORT <br>    End If <br> <br>    'Preserve current status bar message <br>    OldStatBarMsg$ = GetStatBarMsg$() <br> <br>    'Make sure everything is OK and get first subfolder <br>    If Resp% = IDOK Then <br>        lRet&amp; = SmsGetNextFolder&amp;(hFolder&amp;, F_ANY, hSubFolder&amp;) <br>    Else: lRet&amp; = SMS_NO_MORE_DATA <br>    End If <br> <br>    'List the properties in this machine folder <br>    PropertyIndex% = 0 <br>    Do While lRet&amp; = SMS_OK <br>        'Get subfolders <br>        Resp% = GetPropertyAttributes%(db, hSubFolder&amp;, ListIndex%, GroupID&amp;, MachineID&amp;, PropertyIndex%) <br> <br>        'See if user canceled <br>        If Not bGetData% Then Resp% = IDABORT <br> <br>        'Check the user response <br>        Select Case Resp% <br>            Case IDOK, IDIGNORE <br>                lRet&amp; = SmsCloseFolder&amp;(hSubFolder&amp;) <br>                lRet&amp; = SmsGetNextFolder&amp;(hFolder&amp;, F_ANY, hSubFolder&amp;) <br>                PropertyIndex% = PropertyIndex% + 1 <br>                Resp% = IDOK <br>            Case IDABORT <br>                lRet&amp; = SmsCloseFolder&amp;(hSubFolder&amp;) <br>                lRet&amp; = SMS_NO_MORE_DATA <br>            Case IDRETRY <br>                lRet&amp; = SMS_OK <br>        End Select <br>    Loop <br>    If lRet&amp; &lt;&gt; SMS_NO_MORE_DATA Then <br>        MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>    End If <br> <br>    'Restore status bar message and menu caption <br>    SetStatBarMsg OldStatBarMsg$ <br> <br>    'Set the return value (either IDABORT or IDOK) <br>    GetMachineProperties% = Resp% <br>End Function <br> <br>Private Function GetMachines%(db As Database, ByVal hFolder&amp;, ParentListIndex%) <br>    Dim hSubFolder&amp;, TypeName$, FolderType&amp; <br>    Dim sScalar As SCALAR, GroupID&amp;, Group$, GroupName$ <br>    Dim ListIndex%, bGetDataOld% <br>    Dim lRet&amp;, Resp%, Index% <br> <br>    'Default return value IDOK (Entry added) <br>    GetMachines% = IDOK <br> <br>    'Location of next item to add to outline control <br>    ListIndex% = olnData.ListCount <br> <br>    'Get this folder's type (expect Machine Group) <br>    lRet&amp; = SmsGetFolderType&amp;(hFolder&amp;, FolderType&amp;, TypeName$) <br>    If lRet&amp; &lt;&gt; SMS_OK Then <br>        GetMachines% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        Exit Function <br>    End If <br> <br>    Select Case TypeName$ <br>        Case "Machine Group" <br>            lRet&amp; = SmsGetFolderID&amp;(hFolder&amp;, Group$) <br>            If lRet&amp; &lt;&gt; SMS_OK Then <br>                GetMachines% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>                Exit Function <br>            End If <br> <br>            lRet&amp; = SmsGetScalarByName&amp;(hFolder&amp;, "Name", sScalar) <br>            If lRet&amp; &lt;&gt; SMS_OK Then <br>                GetMachines% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>                Exit Function <br>            End If <br>            GroupName$ = sScalar.pszValue <br> <br>            'See if this is the choosen group <br>            If Group$ &lt;&gt; MachineGroupID$ Then Exit Function <br> <br>        Case Else <br>            Exit Function <br>    End Select <br> <br>    DoEvents <br> <br>    'Check to see if the user wants to cancel <br>    If bGetData% Then <br>        'Add item to database <br>        GroupID&amp; = AddMachineGroup&amp;(db, Group$, GroupName$) <br>        If GroupID&amp; &gt; 0 Then <br>            'Add item to outline control <br>            olnData.AddItem GroupName$, ListIndex% <br>            olnData.Indent(ListIndex%) = 0 <br>            olnData.PictureType(ListIndex%) = MSOUTLINE_PICTURE_GROUP <br>            olnData.ItemData(ListIndex%) = GroupID&amp; <br>            If olnData.IsItemVisible(ParentListIndex%) And Not olnData.Expand(ParentListIndex%) Then <br>                olnData.Expand(ParentListIndex%) = True <br>            End If <br>            If olnData.ListIndex = ListIndex% - 1 Then <br>                olnData.ListIndex = ListIndex% <br>            End If <br>            olnData.Refresh <br>            Resp% = IDOK <br>        Else: Resp% = MsgBox("Database Error:" + Chr$(10) + Chr$(10) + Error$, MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        End If <br>    Else: Resp% = IDABORT <br>    End If <br> <br>    'Make sure everything is OK and get first subfolder <br>    If Resp% = IDOK Then <br>        lRet&amp; = SmsGetNextFolder&amp;(hFolder&amp;, F_ANY, hSubFolder&amp;) <br>    Else: lRet&amp; = SMS_NO_MORE_DATA <br>    End If <br> <br>    'List the machines in this machine group folder <br>    Do While lRet&amp; = SMS_OK <br>        'Get subfolders <br>        Resp% = GetMachineProperties%(db, hSubFolder&amp;, ListIndex%, GroupID&amp;) <br> <br>        'See if user canceled <br>        If Not bGetData% Then Resp% = IDABORT <br> <br>        'Check the user response <br>        Select Case Resp% <br>            Case IDOK, IDIGNORE <br>                lRet&amp; = SmsCloseFolder&amp;(hSubFolder&amp;) <br>                lRet&amp; = SmsGetNextFolder&amp;(hFolder&amp;, F_ANY, hSubFolder&amp;) <br>                Resp% = IDOK <br>            Case IDABORT <br>                lRet&amp; = SmsCloseFolder&amp;(hSubFolder&amp;) <br>                lRet&amp; = SMS_NO_MORE_DATA <br>            Case IDRETRY <br>                lRet&amp; = SMS_OK <br>        End Select <br>    Loop <br>    If lRet&amp; &lt;&gt; SMS_NO_MORE_DATA Then <br>        MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>    End If <br> <br>    'If we're done with the item, collapse it <br>    If Resp% = IDOK Then <br>        If (olnData.ListIndex &lt;= ListIndex% Or olnData.ListIndex = olnData.ListCount - 1) And olnData.HasSubItems(ListIndex%) Then <br>            'Preserve flag and allow Collapse to remove nodes <br>            bGetDataOld% = bGetData% <br>            bGetData% = False <br> <br>            'Collapse the site now that its done <br>            olnData_Collapse ListIndex% <br> <br>            'Restore flag <br>            bGetData% = bGetDataOld% <br>        End If <br>    End If <br> <br>    'Set the return value (either IDABORT or IDOK) <br>    GetMachines% = Resp% <br>End Function <br> <br>Private Function GetPropertyAttributes%(db As Database, ByVal hFolder&amp;, ParentListIndex%, GroupID&amp;, MachineID&amp;, PropertyIndex%) <br>    Dim TypeName$, FolderType&amp; <br>    Dim sScalar As SCALAR, PropertyID&amp;, Property$, PropertyName$ <br>    Dim ListIndex%, bGetDataOld% <br>    Dim Pos1%, Pos2% <br>    Dim lRet&amp;, Resp%, Index% <br> <br>    'Default return value IDOK (Entry added) <br>    GetPropertyAttributes% = IDOK <br> <br>    'Location of next item to add to outline control <br>    ListIndex% = olnData.ListCount <br> <br>    'Get this folder's type (expect Group) <br>    lRet&amp; = SmsGetFolderType&amp;(hFolder&amp;, FolderType&amp;, TypeName$) <br>    If lRet&amp; &lt;&gt; SMS_OK Then <br>        GetPropertyAttributes% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        Exit Function <br>    End If <br> <br>    Select Case TypeName$ <br>        Case "Group" <br>            lRet&amp; = SmsGetFolderID&amp;(hFolder&amp;, Property$) <br>            If lRet&amp; &lt;&gt; SMS_OK Then <br>                GetPropertyAttributes% = MsgBox("SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>                Exit Function <br>            End If <br> <br>            'Property Name not available. Use part of Property ID string. <br>            Pos1% = InStr(Property$, "|") <br>            Pos2% = InStr(Pos1% + 1, Property$, "|") <br>            If Pos2% &lt;= 0 Then Pos2% = Len(Property$) <br>            PropertyName$ = LCase$(Mid$(Property$, Pos1% + 1, Pos2% - Pos1% - 1)) <br> <br>        Case Else <br>            Exit Function <br>    End Select <br> <br>    DoEvents <br> <br>    'Check to see if the user wants to cancel <br>    If bGetData% Then <br>        'Add item to database <br>        PropertyID&amp; = AddProperty&amp;(db, Property$, PropertyName$) <br>        If PropertyID&amp; &gt; 0 Then <br>            SetStatBarMsg olnData.List(ParentListIndex%) + " " + PropertyName$ <br>            Resp% = IDOK <br>        Else: Resp% = MsgBox("Database Error:" + Chr$(10) + Chr$(10) + Error$, MB_ICONEXCLAMATION + MB_ABORTRETRYIGNORE, Caption) <br>        End If <br>    Else: Resp% = IDABORT <br>    End If <br> <br>    'Make sure everything is OK and get first subfolder <br>    If Resp% = IDOK Then <br>        lRet&amp; = SmsGetNextScalar&amp;(hFolder&amp;, sScalar) <br>    Else: lRet&amp; = SMS_NO_MORE_DATA <br>    End If <br> <br>    'List the attributes in this property folder <br>    Do While lRet&amp; = SMS_OK <br>        'Get Scalar <br>        Resp% = GetAttributeValue%(db, sScalar, GroupID&amp;, MachineID&amp;, PropertyID&amp;, PropertyIndex%) <br> <br>        'See if user canceled <br>        If Not bGetData% Then Resp% = IDABORT <br> <br>        'Check the user response <br>        Select Case Resp% <br>            Case IDOK, IDIGNORE <br>                lRet&amp; = SmsGetNextScalar&amp;(hFolder&amp;, sScalar) <br>                Resp% = IDOK <br>            Case IDABORT <br>                lRet&amp; = SMS_NO_MORE_DATA <br>            Case IDRETRY <br>                lRet&amp; = SMS_OK <br>        End Select <br>    Loop <br>    If lRet&amp; &lt;&gt; SMS_NO_MORE_DATA Then <br>        MsgBox "SMS Error:" + Chr$(10) + Chr$(10) + SMSError$(lRet&amp;), MB_ICONEXCLAMATION + MB_OK, Caption <br>    End If <br> <br>    'Set the return value (either IDABORT or IDOK) <br>    GetPropertyAttributes% = Resp% <br>End Function <br> <br>Private Function GetSaveAsFileSpec$(ByVal InitFileSpec$, Filter$) <br>    'Default return value empty (User canceled) </code></pre>
<p>
</p>
<pre><code>GetSaveAsFileSpec$ = "" <br> <br>    CommonDialog.CancelError = True <br>    CommonDialog.filename = InitFileSpec$ <br>    CommonDialog.Filter = Filter$ <br>    CommonDialog.FilterIndex = 1 <br>    CommonDialog.Flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST Or OFN_HIDEREADONLY <br>    On Error Resume Next <br>    CommonDialog.Action = DLG_FILE_SAVE <br>    If Err = CDERR_CANCEL Then Exit Function <br>    If Err &gt; 0 Then <br>        MsgBox "An unexpected error occured:" + Chr$(10) + Error$, MB_OK Or MB_ICONEXCLAMATION, Caption <br>        Exit Function <br>    End If <br>    On Error GoTo 0 <br> <br>    GetSaveAsFileSpec$ = CommonDialog.filename <br>End Function <br> <br>Private Sub lblFileSpec_Change() <br>    UpdateCaption <br>End Sub <br> <br>Private Sub olnData_Click() <br>    ' <br>End Sub <br> <br>Private Sub olnData_Collapse(ListIndex As Integer) <br>    If Not bGetData% And Not bReadData% Then <br>        Do While olnData.HasSubItems(ListIndex%) <br>            olnData_Collapse ListIndex% + 1 <br>            olnData.RemoveItem ListIndex% + 1 <br>        Loop <br>    End If <br>End Sub <br> <br>Private Sub olnData_DblClick() <br>    If olnData.HasSubItems(olnData.ListIndex) Then <br>        olnData_Collapse CInt(olnData.ListIndex) <br>    Else: olnData_Expand CInt(olnData.ListIndex) <br>    End If <br>End Sub <br> <br>Private Sub olnData_Expand(ListIndex As Integer) <br>    Dim Attrib As AttributeRec <br>    Static bExpanded% <br> <br>    'Prevent infinite recursion <br>    If bExpanded% Then Exit Sub <br> <br>    If Not bReadData% Then <br>        If Not olnData.HasSubItems(ListIndex) Then <br>            bReadData% = True <br>            ReadMachineData ListIndex <br>            bReadData% = False <br>        End If <br> <br>        'Expand the node to show children <br>        If olnData.HasSubItems(ListIndex) Then <br>            bExpanded% = True <br>            olnData.Expand(ListIndex) = True <br>            bExpanded% = False <br>        End If <br>    End If <br>End Sub <br> <br>Private Sub olnData_PictureClick(ListIndex As Integer) <br>    olnData.ListIndex = ListIndex <br>    olnData.Refresh <br>    olnData_Click <br>End Sub <br> <br>Private Sub olnData_PictureDblClick(ListIndex As Integer) <br>    olnData_PictureClick ListIndex <br>    olnData_DblClick <br>End Sub <br> <br>Private Sub PrintDoc(Destination%) <br>    CrystalReport.WindowTitle = Caption <br>    CrystalReport.Destination = Destination% <br>    CrystalReport.WindowParentHandle = 0 <br>    CrystalReport.DataFiles(0) = ReportTempSpec$ <br>    CrystalReport.ReportFileName = App.Path + "\MACHGRP.RPT" <br> <br>    'Print the report <br>    CrystalReport.Action = 1 <br>End Sub <br> <br>Private Sub ReadMachineData(ParentListIndex%) <br>    Dim ListIndex%, TooMany%, DBError% <br>    Dim Attrib As AttributeRec, IDLookup As IDLookupRec <br>    Dim Windex%, OldStatBarMsg$, ErrStr$ <br> <br>    TooMany = False <br>    Select Case GetItemID%(Attrib, ParentListIndex%) <br>        Case 0 'Empty list: Get all machine groups <br>            If GetMachineGroup%(dbt, IDLookup) = False Then <br>                MsgBox "Error accessing database" <br>                Exit Sub <br>            End If <br> <br>            ListIndex% = ParentListIndex% + 1 <br>            If DBError% Then <br>                MsgBox "Error accessing database" <br>                Exit Sub <br>            ElseIf olnData.ListCount &gt;= MAX_OUTLINE_ENTRIES Then <br>                TooMany% = True <br>            Else <br>                olnData.AddItem IDLookup.StrName$, ListIndex% <br>                olnData.Indent(ListIndex%) = 0 <br>                olnData.PictureType(ListIndex%) = MSOUTLINE_PICTURE_GROUP <br>                olnData.ItemData(ListIndex%) = IDLookup.ID&amp; <br>                ListIndex% = ListIndex% + 1 <br>         <br>                'DoEvents 'Turned off because its too slow! <br>                            'Turn back on to check for user cancel <br>            End If <br>        Case 1 'Machine Group: Get machines in group <br>            If QueryMachines%(dbt, Attrib) = False Then <br>                MsgBox "Error accessing database" <br>                Exit Sub <br>            End If <br> <br>            ListIndex% = ParentListIndex% + 1 <br>            Do While FetchMachines%(IDLookup, Not bReadData% Or TooMany%, DBError%) <br>                If DBError% Then <br>                    MsgBox "Error accessing database" <br>                    Exit Sub <br>                ElseIf olnData.ListCount &gt;= MAX_OUTLINE_ENTRIES Then <br>                    TooMany% = True <br>                Else <br>                    olnData.AddItem IDLookup.StrName$, ListIndex% <br>                    olnData.Indent(ListIndex%) = 1 <br>                    olnData.PictureType(ListIndex%) = MSOUTLINE_PICTURE_MACHINE <br>                    olnData.ItemData(ListIndex%) = IDLookup.ID&amp; <br>                    ListIndex% = ListIndex% + 1 <br>             <br>                    'DoEvents 'Turned off because its too slow! <br>                              'Turn back on to check for user cancel <br>                End If <br>            Loop <br>        Case 2 'Machine: Get properties of machine <br>            'Indicate in status bar what's going on <br>            OldStatBarMsg$ = GetStatBarMsg$() <br>            SetStatBarMsg "Opening Machine Properties..." <br> <br>            'Create new document window <br>            Windex% = NewMachineReportWindow%(hConnect&amp;, "", dbt, Attrib, ErrStr$) <br> <br>            'If window created OK then initialize it <br>            If Windex% &lt;= 0 Then <br>                MsgBox "Error opening machine properties " + CommonDialog.filename + ":" + Chr$(10) + Chr$(10) + ErrStr$, MB_OK Or MB_ICONEXCLAMATION, Screen.ActiveForm.Caption <br>            Else: ReportWindow(Windex%).cmdInitialize = True <br>            End If <br>         <br>            'Restore status bar message and menu caption <br>            SetStatBarMsg OldStatBarMsg$ <br>            Windex% = 0 <br>    End Select <br> <br>    If TooMany% Then <br>        MsgBox "No more machines and properties can be displayed in this window until some are collapsed." <br>    End If <br>End Sub <br> <br>Private Sub SaveDoc(ByVal FileSpec$) <br>    Dim ReportSaved%, Resp% <br> <br>    'Temporarily close the database and temp database <br>    dbt.Close <br>    If Not db Is Nothing Then db.Close <br> <br>    ReportSaved% = False <br>    Do <br>        On Error Resume Next <br>        FileCopy ReportTempSpec$, FileSpec$ <br>        If Err &gt; 0 Then <br>            Resp% = MsgBox("An error occured trying to save " + FileSpec$ + ":" + Chr$(10) + Error$ + Chr$(10) + Chr$(10) + "Do you want to try again?", MB_OKCANCEL Or MB_ICONQUESTION, Caption) <br>            If Resp% = IDCANCEL Then Exit Do <br>        Else: ReportSaved% = True <br>        End If <br>    Loop Until ReportSaved% <br> <br>    'Re-open the database and temp database <br>    Set dbt = OpenDatabase(ReportTempSpec$, True) <br>    Set db = OpenDatabase(FileSpec$, True, True) <br> <br>    If ReportSaved% Then <br>        lblFileSpec = FileSpec$ <br>        chkDirty = False <br>    End If <br>End Sub <br> <br>Private Sub UpdateCaption() <br>    Dim NewCaption$ <br> <br>    If lblFileSpec &gt; "" Then <br>        NewCaption$ = lblFileSpec <br>    Else: NewCaption$ = "New Machine Group Report " + CStr(NewNumber) <br>    End If <br> <br>    If chkDirty Then NewCaption$ = NewCaption$ + "*" <br> <br>    Caption = NewCaption$ <br>End Sub <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

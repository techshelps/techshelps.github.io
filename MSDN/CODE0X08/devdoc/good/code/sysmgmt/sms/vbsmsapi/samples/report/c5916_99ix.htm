<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MACHGRP.BAS</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5919"></a>MACHGRP.BAS</h2>
<pre><code>Attribute VB_Name = "MACHGRP" <br>Option Explicit <br> <br>'//**************************************************************************** <br>'// <br>'//  Copyright (c) 1995, Microsoft Corporation <br>'// <br>'//  File:  MACHGRP.BAS <br>'// <br>'//  History: <br>'// <br>'//      Gary Fuehrer, SEA   5/9/95      Created. <br>'// <br>'//**************************************************************************** <br> <br>Type IDLookupRec <br>    ID As Long <br>    StrID As String <br>    StrName As String <br>End Type <br> <br>Type AttributeRec <br>    MachineGroupID As Long <br>    MachineID As Long <br>    PropertyID As Long <br>    PropertyNum As Integer <br>    AttributeID As Long <br>    Value As String <br>End Type <br> <br>'For use by frmMachineGrpReport ONLY <br>Global InitMachineGroupID$ <br>Global InitMachineGroupProperties$() <br>Global InitMachineGroupPropertyCount% <br>Global InitMachineGroupIsFiltered% <br> <br>'For use by QueryMachineGroups%() and FetchMachineGroups%() ONLY <br>Dim dyQueryMachineGroups As Recordset <br> <br>'For use by QueryMachines%() and FetchMachines%() ONLY <br>Dim dyQueryMachines As Recordset <br> <br>Function AddAttribute&amp;(db As Database, Attrib$, AttributeName$) <br>    Dim IDLookup As IDLookupRec, Count% <br> <br>    ' Default return value zero (Failed) <br>    AddAttribute&amp; = 0 <br> <br>    IDLookup.StrID$ = Attrib$ <br>    IDLookup.StrName$ = AttributeName$ <br>    Count% = FindAttributeID%(db, "AttributeIDs", IDLookup) <br>    If Count% = 0 Then <br>        IDLookup.ID&amp; = GetUniqueID&amp;() <br>        If InsertAttributeID&amp;(db, "AttributeIDs", IDLookup) = 1 Then AddAttribute&amp; = IDLookup.ID&amp; <br>    ElseIf Count% = 1 Then <br>        AddAttribute&amp; = IDLookup.ID&amp; <br>    End If <br>End Function <br> <br>Function AddMachine&amp;(db As Database, Machine$, MachineName$) <br>    Dim IDLookup As IDLookupRec, Count% <br> <br>    ' Default return value zero (Failed) <br>    AddMachine&amp; = 0 <br> <br>    IDLookup.StrID$ = Machine$ <br>    IDLookup.StrName$ = MachineName$ <br>    Count% = FindMachineID%(db, "MachineIDs", IDLookup) <br>    If Count% = 0 Then <br>        IDLookup.ID&amp; = GetUniqueID&amp;() <br>        If InsertMachineID&amp;(db, "MachineIDs", IDLookup) = 1 Then AddMachine&amp; = IDLookup.ID&amp; <br>    ElseIf Count% = 1 Then <br>        AddMachine&amp; = IDLookup.ID&amp; <br>    End If <br>End Function <br> <br>Function AddMachineGroup&amp;(db As Database, Group$, GroupName$) <br>    Dim IDLookup As IDLookupRec, Count% <br> <br>    ' Default return value zero (Failed) <br>    AddMachineGroup&amp; = 0 <br> <br>    IDLookup.StrID$ = Group$ <br>    IDLookup.StrName$ = GroupName$ <br>    Count% = FindMachineGroupID%(db, "MachineGroupID", IDLookup) <br>    If Count% = 0 Then <br>        IDLookup.ID&amp; = GetUniqueID&amp;() <br>        If InsertMachineGroupID&amp;(db, "MachineGroupID", IDLookup) = 1 Then AddMachineGroup&amp; = IDLookup.ID&amp; <br>    ElseIf Count% = 1 Then <br>        AddMachineGroup&amp; = IDLookup.ID&amp; <br>    End If <br>End Function <br> <br>Function AddProperty&amp;(db As Database, Property$, PropertyName$) <br>    Dim IDLookup As IDLookupRec, Count% <br> <br>    ' Default return value zero (Failed) <br>    AddProperty&amp; = 0 <br> <br>    IDLookup.StrID$ = Property$ <br>    IDLookup.StrName$ = PropertyName$ <br>    Count% = FindPropertyID%(db, "PropertyIDs", IDLookup) <br>    If Count% = 0 Then <br>        IDLookup.ID&amp; = GetUniqueID&amp;() <br>        If InsertPropertyID&amp;(db, "PropertyIDs", IDLookup) = 1 Then AddProperty&amp; = IDLookup.ID&amp; <br>    ElseIf Count% = 1 Then <br>        AddProperty&amp; = IDLookup.ID&amp; <br>    End If <br>End Function <br> <br>Function FetchMachineGroups%(IDLookup As IDLookupRec, Flush%, DBError%) <br>'   Fetches another Machine Group from the dyQueryMachineGroups dynaset <br>'Parameters: <br>'   IDLookup - Filled in with next machine name and ID. <br>'   Flush% - Usually False. If True, the fetch is ended. <br>'   DBError% - Returns True when DB error occures. <br>'Return Value: <br>'   True if another record fetched, else False (no more) <br> <br>    DBError% = True <br>    FetchMachineGroups% = False <br> <br>    If dyQueryMachineGroups.EOF Or Flush% Then <br>        dyQueryMachineGroups.Close <br>    Else <br>        ' Populate the site record from the dyQueryMachineGroups <br>        ' dynaset and find the next record <br>        IDLookup.ID&amp; = dyQueryMachineGroups("ID") <br>        If IsNull(dyQueryMachineGroups("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyQueryMachineGroups("StrID")) <br>        End If <br>        If IsNull(dyQueryMachineGroups("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyQueryMachineGroups("StrName")) <br>        End If <br> <br>        On Error Resume Next <br>        dyQueryMachineGroups.MoveNext <br>        If Err &gt; 0 Then Exit Function <br>        On Error GoTo 0 <br> <br>        FetchMachineGroups% = True <br>    End If <br> <br>    DBError% = False <br>End Function <br> <br>Function FetchMachines%(IDLookup As IDLookupRec, Flush%, DBError%) <br>'   Fetches another Machine from the dyQueryMachines dynaset <br>'Parameters: <br>'   IDLookup - Filled in with next machine name and ID. <br>'   Flush% - Usually False. If True, the fetch is ended. <br>'   DBError% - Returns True when DB error occures. <br>'Return Value: <br>'   True if another record fetched, else False (no more) <br> <br>    DBError% = True <br>    FetchMachines% = False <br> <br>    If dyQueryMachines.EOF Or Flush% Then <br>        dyQueryMachines.Close <br>    Else <br>        ' Populate the site record from the dyQueryMachines <br>        ' dynaset and find the next record <br>        IDLookup.ID&amp; = dyQueryMachines("ID") <br>        If IsNull(dyQueryMachines("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyQueryMachines("StrID")) <br>        End If <br>        If IsNull(dyQueryMachines("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyQueryMachines("StrName")) <br>        End If <br> <br>        On Error Resume Next <br>        dyQueryMachines.MoveNext <br>        If Err &gt; 0 Then Exit Function <br>        On Error GoTo 0 <br> <br>        FetchMachines% = True <br>    End If <br> <br>    DBError% = False <br>End Function <br> <br>Function FindAttributeID%(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef, dyIDLookup As Recordset <br> <br>    'Set default return value -1 (Database error) <br>    FindAttributeID% = -1 <br> <br>    'Build query <br>    Set qy = db.QueryDefs("FindAttributeID") <br>    qy![INPUT StrID] = IDLookup.StrID$ <br> <br>    'Perform query <br>    On Error Resume Next <br>    Set dyIDLookup = qy.OpenRecordset(dbOpenDynaset, dbReadOnly) <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    ' Populate the site record <br>    If Not dyIDLookup.EOF Then <br>        IDLookup.ID&amp; = dyIDLookup("ID") <br>        If IsNull(dyIDLookup("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyIDLookup("StrID")) <br>        End If <br>        If IsNull(dyIDLookup("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyIDLookup("StrName")) <br>        End If <br>    End If <br> <br>    ' Return the record count <br>    FindAttributeID% = dyIDLookup.RecordCount <br>End Function <br> <br>Function FindMachineGroupID%(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef, dyIDLookup As Recordset <br> <br>    'Set default return value -1 (Database error) <br>    FindMachineGroupID% = -1 <br> <br>    'Build query <br>    Set qy = db.QueryDefs("FindMachineGroupID") <br>    qy![INPUT StrID] = IDLookup.StrID$ <br> <br>    'Perform query <br>    On Error Resume Next <br>    Set dyIDLookup = qy.OpenRecordset(dbOpenDynaset, dbReadOnly) <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    ' Populate the site record <br>    If Not dyIDLookup.EOF Then <br>        IDLookup.ID&amp; = dyIDLookup("ID") <br>        If IsNull(dyIDLookup("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyIDLookup("StrID")) <br>        End If <br>        If IsNull(dyIDLookup("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyIDLookup("StrName")) <br>        End If <br>    End If <br> <br>    ' Return the record count <br>    FindMachineGroupID% = dyIDLookup.RecordCount <br>End Function <br> <br>Function FindMachineID%(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef, dyIDLookup As Recordset <br> <br>    'Set default return value -1 (Database error) <br>    FindMachineID% = -1 <br> <br>    'Build query <br>    Set qy = db.QueryDefs("FindMachineID") <br>    qy![INPUT StrID] = IDLookup.StrID$ <br> <br>    'Perform query <br>    On Error Resume Next <br>    Set dyIDLookup = qy.OpenRecordset(dbOpenDynaset, dbReadOnly) <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    ' Populate the site record <br>    If Not dyIDLookup.EOF Then <br>        IDLookup.ID&amp; = dyIDLookup("ID") <br>        If IsNull(dyIDLookup("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyIDLookup("StrID")) <br>        End If <br>        If IsNull(dyIDLookup("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyIDLookup("StrName")) <br>        End If <br>    End If <br> <br>    ' Return the record count <br>    FindMachineID% = dyIDLookup.RecordCount <br>End Function <br> <br>Function FindPropertyID%(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef, dyIDLookup As Recordset <br> <br>    'Set default return value -1 (Database error) <br>    FindPropertyID% = -1 <br> <br>    'Build query <br>    Set qy = db.QueryDefs("FindPropertyID") <br>    qy![INPUT StrID] = IDLookup.StrID$ <br> <br>    'Perform query <br>    On Error Resume Next <br>    Set dyIDLookup = qy.OpenRecordset(dbOpenDynaset, dbReadOnly) <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    ' Populate the site record <br>    If Not dyIDLookup.EOF Then <br>        IDLookup.ID&amp; = dyIDLookup("ID") <br>        If IsNull(dyIDLookup("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyIDLookup("StrID")) <br>        End If <br>        If IsNull(dyIDLookup("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyIDLookup("StrName")) <br>        End If <br>    End If <br> <br>    ' Return the record count <br>    FindPropertyID% = dyIDLookup.RecordCount <br>End Function <br> <br>Function GetMachineGroup%(db As Database, IDLookup As IDLookupRec) <br>    Dim Sql$ <br>    Dim dyIDLookup As Recordset <br> <br>    'Set default return value False (Database error) <br>    GetMachineGroup% = False <br> <br>    Sql$ = "SELECT ID, StrID, StrName FROM [MachineGroupID]" <br> <br>    ' If an error occurs exit the function <br>    On Error Resume Next <br>    Set dyIDLookup = db.OpenRecordset(Sql$, dbOpenDynaset) <br>    If Err &gt; 0 Then Exit Function <br>    On Error GoTo 0 <br> <br>    ' Populate the site record <br>    If Not dyIDLookup.EOF Then <br>        IDLookup.ID&amp; = dyIDLookup("ID") <br>        If IsNull(dyIDLookup("StrID")) Then <br>            IDLookup.StrID$ = "" <br>        Else: IDLookup.StrID$ = Trim$(dyIDLookup("StrID")) <br>        End If <br>        If IsNull(dyIDLookup("StrName")) Then <br>            IDLookup.StrName$ = "" <br>        Else: IDLookup.StrName$ = Trim$(dyIDLookup("StrName")) <br>        End If <br>    End If <br> <br>    ' Return the record count <br>    GetMachineGroup% = True <br>End Function <br> <br>Function GetUniqueID&amp;() <br>    Static UniqueID&amp; <br> <br>    UniqueID&amp; = UniqueID&amp; + 1 <br>    GetUniqueID&amp; = UniqueID&amp; <br>End Function <br> <br>Function InsertAttribute&amp;(db As Database, Attrib As AttributeRec) <br>'   Inserts the attribute record into the given data base <br>'Parameters <br>'   db     - The database used for the query <br>'   Attrib - The attribute record <br>'Return Value: <br>'   The number of records inserted <br> <br>    Dim qy As QueryDef <br> <br>    ' Default return value False (Failed) <br>    InsertAttribute&amp; = -1 <br> <br>    ' Build the insert statement <br>    Set qy = db.QueryDefs("InsertAttribute") <br>    qy![INPUT MachineID] = Attrib.MachineID&amp; <br>    qy![INPUT PropertyID] = Attrib.PropertyID&amp; <br>    qy![INPUT PropertyNum] = Attrib.PropertyNum% <br>    qy![INPUT AttributeID] = Attrib.AttributeID&amp; <br>    qy![INPUT Value] = Attrib.Value$ <br> <br>    'Try to insert the record <br>    On Error Resume Next <br>    qy.Execute <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    'Return insert count <br>    InsertAttribute&amp; = 1 <br>End Function <br> <br>Function InsertAttributeID&amp;(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef <br> <br>    ' Default return value False (Failed) <br>    InsertAttributeID&amp; = -1 <br> <br>    ' Build the insert statement <br>    Set qy = db.QueryDefs("InsertAttributeID") <br>    qy![INPUT ID] = IDLookup.ID&amp; <br>    qy![INPUT StrID] = IDLookup.StrID$ <br>    qy![INPUT StrName] = IDLookup.StrName$ <br> <br>    'Try to insert the record <br>    On Error Resume Next <br>    qy.Execute <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    'Return insert count <br>    InsertAttributeID&amp; = 1 <br>End Function <br> <br>Function InsertMachineGroupID&amp;(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef <br> <br>    ' Default return value False (Failed) <br>    InsertMachineGroupID&amp; = -1 <br> <br>    ' Build the insert statement <br>    Set qy = db.QueryDefs("InsertMachineGroupID") <br>    qy![INPUT ID] = IDLookup.ID&amp; <br>    qy![INPUT StrID] = IDLookup.StrID$ <br>    qy![INPUT StrName] = IDLookup.StrName$ <br> <br>    'Try to insert the record <br>    On Error Resume Next <br>    qy.Execute <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    'Return insert count <br>    InsertMachineGroupID&amp; = 1 <br>End Function <br> <br>Function InsertMachineID&amp;(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef <br> <br>    ' Default return value False (Failed) <br>    InsertMachineID&amp; = -1 <br> <br>    ' Build the insert statement <br>    Set qy = db.QueryDefs("InsertMachineID") <br>    qy![INPUT ID] = IDLookup.ID&amp; <br>    qy![INPUT StrID] = IDLookup.StrID$ <br>    qy![INPUT StrName] = IDLookup.StrName$ <br> <br>    'Try to insert the record <br>    On Error Resume Next <br>    qy.Execute <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    'Return insert count <br>    InsertMachineID&amp; = 1 <br>End Function <br> <br>Function InsertPropertyID&amp;(db As Database, TableName$, IDLookup As IDLookupRec) <br>    Dim qy As QueryDef <br> <br>    ' Default return value False (Failed) <br>    InsertPropertyID&amp; = -1 <br> <br>    ' Build the insert statement <br>    Set qy = db.QueryDefs("InsertPropertyID") <br>    qy![INPUT ID] = IDLookup.ID&amp; <br>    qy![INPUT StrID] = IDLookup.StrID$ <br>    qy![INPUT StrName] = IDLookup.StrName$ <br> <br>    'Try to insert the record <br>    On Error Resume Next <br>    qy.Execute <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    'Return insert count <br>    InsertPropertyID&amp; = 1 <br>End Function <br> <br>Function MakeNiceForCrystalReports$(ByVal s$) <br>    Dim nPos% <br> <br>    If Len(s$) &gt; 32 Then <br>        'Maybe a path environment variable. Add spaces after semicolons <br>        nPos% = InStr(s$, ";") <br>        Do While nPos% &gt; 0 <br>            s$ = left$(s$, nPos%) + " " + Mid$(s$, nPos% + 1) <br>            nPos% = InStr(nPos% + 1, s$, ";") <br>        Loop <br>    End If <br>    MakeNiceForCrystalReports$ = s$ <br>End Function <br> <br>Function NewMachineGrpDatabase%(db As Database, ErrStr$) <br>    Dim td As TableDef, qy As QueryDef, fd As Field, ix As Index <br> <br>    'Default return value False (Failed) <br>    NewMachineGrpDatabase% = False <br> <br>    On Error GoTo NewMachineGrpDatabaseErr <br> <br>    Set td = New TableDef <br>    td.Name = "MachineGroupID" <br> <br>        'Fields <br>        Set fd = New Field <br>        fd.Name = "ID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrID" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrName" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        'Index <br>        Set ix = New Index <br>        ix.Name = "Key" <br>        ix.Primary = True <br>        ix.Unique = True <br>        ix.Fields = "ID" <br>        td.Indexes.Append ix <br> <br>    db.TableDefs.Append td <br> <br>    Set td = New TableDef <br>    td.Name = "MachineIDs" <br> <br>        'Fields <br>        Set fd = New Field <br>        fd.Name = "ID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrID" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrName" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        'Index <br>        Set ix = New Index <br>        ix.Name = "Key" <br>        ix.Primary = True <br>        ix.Unique = True <br>        ix.Fields = "ID" <br>        td.Indexes.Append ix <br> <br>    db.TableDefs.Append td <br> <br>    Set td = New TableDef <br>    td.Name = "PropertyIDs" <br> <br>        'Fields <br>        Set fd = New Field <br>        fd.Name = "ID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrID" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrName" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        'Index <br>        Set ix = New Index <br>        ix.Name = "Key" <br>        ix.Primary = True <br>        ix.Unique = True <br>        ix.Fields = "ID" <br>        td.Indexes.Append ix <br> <br>    db.TableDefs.Append td <br> <br>    Set td = New TableDef <br>    td.Name = "AttributeIDs" <br> <br>        'Fields <br>        Set fd = New Field <br>        fd.Name = "ID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrID" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "StrName" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        'Index <br>        Set ix = New Index <br>        ix.Name = "Key" <br>        ix.Primary = True <br>        ix.Unique = True <br>        ix.Fields = "ID" <br>        td.Indexes.Append ix <br> <br>    db.TableDefs.Append td <br> <br>    Set td = New TableDef <br>    td.Name = "Attributes" <br> <br>        'Fields <br>        Set fd = New Field <br>        fd.Name = "MachineID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "PropertyID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "PropertyNum" <br>        fd.Type = DB_INTEGER <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "AttributeID" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "Value" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        'Index <br>        Set ix = New Index <br>        ix.Name = "SortKey" <br>        ix.Primary = True <br>        ix.Unique = True <br>        ix.Fields = "MachineID;PropertyID;PropertyNum;AttributeID" <br>        td.Indexes.Append ix <br> <br>    db.TableDefs.Append td <br> <br>    'Make QueryDefs for common insert queries and selects <br>    Set qy = db.CreateQueryDef("InsertAttribute", "PARAMETERS [INPUT MachineID] Long, [INPUT PropertyID] Long, [INPUT PropertyNum] Short, [INPUT AttributeID] Long, [INPUT Value] Text; INSERT INTO [Attributes] (MachineID, PropertyID, PropertyNum, AttributeID, [Value]) SELECT [INPUT MachineID] As MachineID, [INPUT PropertyID] As PropertyID, [INPUT PropertyNum] As PropertyNum, [INPUT AttributeID] As AttributeID, '|[INPUT Value]|' As [Value]") <br> <br>    Set qy = db.CreateQueryDef("InsertMachineGroupID", "PARAMETERS [INPUT ID] Long, [INPUT StrID] Text, [INPUT StrName] Text; INSERT INTO MachineGroupID (ID, StrID, StrName) SELECT [INPUT ID] As ID, '|[INPUT StrID]|' As StrID, '|[INPUT StrName]|' As StrName") <br>    Set qy = db.CreateQueryDef("InsertMachineID", "PARAMETERS [INPUT ID] Long, [INPUT StrID] Text, [INPUT StrName] Text; INSERT INTO MachineIDs (ID, StrID, StrName) SELECT [INPUT ID] As ID, '|[INPUT StrID]|' As StrID, '|[INPUT StrName]|' As StrName") <br>    Set qy = db.CreateQueryDef("InsertPropertyID", "PARAMETERS [INPUT ID] Long, [INPUT StrID] Text, [INPUT StrName] Text; INSERT INTO PropertyIDs (ID, StrID, StrName) SELECT [INPUT ID] As ID, '|[INPUT StrID]|' As StrID, '|[INPUT StrName]|' As StrName") <br>    Set qy = db.CreateQueryDef("InsertAttributeID", "PARAMETERS [INPUT ID] Long, [INPUT StrID] Text, [INPUT StrName] Text; INSERT INTO AttributeIDs (ID, StrID, StrName) SELECT [INPUT ID] As ID, '|[INPUT StrID]|' As StrID, '|[INPUT StrName]|' As StrName") <br> <br>    Set qy = db.CreateQueryDef("FindMachineGroupID", "PARAMETERS [INPUT StrID] Text; SELECT ID, StrID, StrName FROM MachineGroupID WHERE StrID = '|[INPUT StrID]|'") <br>    Set qy = db.CreateQueryDef("FindMachineID", "PARAMETERS [INPUT StrID] Text; SELECT ID, StrID, StrName FROM MachineIDs WHERE StrID = '|[INPUT StrID]|'") <br>    Set qy = db.CreateQueryDef("FindPropertyID", "PARAMETERS [INPUT StrID] Text; SELECT ID, StrID, StrName FROM PropertyIDs WHERE StrID = '|[INPUT StrID]|'") <br>    Set qy = db.CreateQueryDef("FindAttributeID", "PARAMETERS [INPUT StrID] Text; SELECT ID, StrID, StrName FROM AttributeIDs WHERE StrID = '|[INPUT StrID]|'") <br> <br>    'Return success <br>    NewMachineGrpDatabase% = True <br>    Exit Function <br> <br>NewMachineGrpDatabaseErr: <br>    ErrStr$ = Error$ <br>    Exit Function <br>End Function <br> <br>Function NewMachineGrpReportWindow%(hConnect&amp;, ByVal FileSpec$, ErrStr$) <br>    Dim i%, Ret&amp;, TempPath$, TempSpec$, frm As Form, MachineGroupID$ <br>    Dim db As Database, td As TableDef, fd As Field, ix As Index <br>    Dim Resp% <br> <br>    'Default return value zero (Failed) <br>    NewMachineGrpReportWindow% = 0 <br> <br>    'Allocate space for returned string <br>    TempSpec$ = String$(256, 0) <br> <br>    'Get a temp file name <br>    TempPath$ = Environ$("TEMP") <br>    Ret&amp; = GetTempFileName(TempPath$, "MDB", 0, TempSpec$) <br>    ErrStr$ = "Could not get a temporary file name for the new report." <br>    If (Ret&amp; = 0) Then Exit Function <br> <br>    'Clean up return string of null terminator <br>    i% = InStr(TempSpec$, Chr$(0)) <br>    If i% = 0 Then i% = Len(TempSpec$) + 1 <br>    TempSpec$ = left$(TempSpec$, i% - 1) <br> <br>    'Create a temporary document file <br>    On Error GoTo NewMachineGrpReportWindowErr <br>    If FileSpec$ &gt; "" Then <br>        'File Open: so copy the file the user selected <br>        ErrStr$ = "Could not create a temporary copy of " + FileSpec$ + ".+" <br>        FileCopy FileSpec$, TempSpec$ <br>        Resp% = True <br>    Else <br>        'File New: so create a new empty document HERE <br>        ErrStr$ = "Could not create a temporary file for the new report." <br>        Kill TempSpec$ <br>        Set db = CreateDatabase(TempSpec$, DB_LANG_GENERAL) <br>        i% = NewMachineGrpDatabase%(db, ErrStr$) <br>        db.Close <br>        If Not i% Then GoTo NewMachineGrpReportWindowErr <br> <br>        'Let the user pick the machine groups <br>        Resp% = PickMachineGroups%(hConnect&amp;, db, MachineGroupID$) <br>        If Resp% Then <br>            Resp% = PickProperties%(hConnect&amp;, MachineGroupID$, InitMachineGroupIsFiltered%, InitMachineGroupProperties$(), InitMachineGroupPropertyCount%) <br>        End If <br>    End If <br>    On Error GoTo 0 <br> <br>    If Resp% Then <br>        'Pass the new document the file name to use <br>        InitMachineGroupID$ = MachineGroupID$ <br>        InitReporthConnect&amp; = hConnect&amp; <br>        InitReportFileSpec$ = FileSpec$ <br>        InitReportTempSpec$ = TempSpec$ <br>        If InitReportFileSpec$ &lt;= "" Then InitReportNewNumber% = InitReportNewNumber% + 1 <br> <br>        'Create a new document window <br>        On Error GoTo NewMachineGrpReportWindowErr <br>        ErrStr$ = "Could not create site report document window." <br>        Set frm = New frmMachineGrpReport <br>        Load frm <br>        On Error GoTo 0 <br> <br>        'Register document window with MDI <br>        i% = RegisterReportWindow%(frm, ErrStr$) <br>        If i% &lt;= 0 Then GoTo NewMachineGrpReportWindowErr <br> <br>        'Show the document window <br>        frm.Show <br>        NewMachineGrpReportWindow% = i% <br>    Else <br>        'User canceled <br>        Kill TempSpec$ <br>        NewMachineGrpReportWindow% = -1 <br>    End If <br> <br>    Exit Function <br> <br>NewMachineGrpReportWindowErr: <br>    On Error Resume Next <br>    If Not frm Is Nothing Then Unload frm <br>    Kill TempSpec$ <br>    Exit Function <br>End Function <br> <br>Function QueryMachineGroups%(db As Database, Attrib As AttributeRec) <br>'   Queries the Attribute table for all machine groups and creates <br>'   a dynaset (dyQueryMachineGroups) used by FetchMachineGroups() <br>'Parameters <br>'   db - The database used for the query <br>'   Attrib - Not used.  All machine groups are fetched. <br>'Return Value: <br>'   True if no error, else False <br> <br>    Dim Sql$, Where$ <br> <br>    'Default return value False (Database Error) <br>    QueryMachineGroups% = False <br> <br>    ' Build the SQL statement <br>    Sql$ = "SELECT DISTINCT ID, StrID, StrName FROM MachineGroupIDs, Attributes" <br>     <br>    'Build the Where clause <br>    Where$ = " WHERE MachineGroupID = ID" <br> <br>    'Append the where clause onto query string <br>    Sql$ = Sql$ + Where$ <br> <br>    'Perform the query <br>    On Error Resume Next <br>    Set dyQueryMachineGroups = db.OpenRecordset(Sql$, dbOpenDynaset) <br>    If Err &gt; 0 Then Exit Function <br>    On Error GoTo 0 <br> <br>    'Every thing is ok <br>    QueryMachineGroups% = True <br>End Function <br> <br>Function QueryMachines%(db As Database, Attrib As AttributeRec) <br>'   Queries the Attribute table and creates <br>'   a dynaset (dyQueryMachines) used by FetchMachines() <br>'Parameters <br>'   db - The database used for the query <br>'   Attrib - The machines to fetch are indicated by the following fields <br>'       MachineGroupID&amp; - Specifies the Machine Group <br>'Return Value: <br>'   True if no error, else False <br> <br>    Dim Sql$, Where$ <br> <br>    'Default return value False (Database Error) <br>    QueryMachines% = False <br> <br>    ' Build the SQL statement <br>    Sql$ = "SELECT DISTINCT ID, StrID, StrName FROM MachineIDs, Attributes" <br>     <br>    'Build the Where clause <br>    Where$ = " WHERE MachineID = ID" <br> <br>    'Append the where clause onto query string <br>    Sql$ = Sql$ + Where$ <br> <br>    'Perform the query <br>    On Error Resume Next <br>    Set dyQueryMachines = db.OpenRecordset(Sql$, dbOpenDynaset) <br>    If Err &gt; 0 Then Exit Function <br>    On Error GoTo 0 <br> <br>    'Every thing is ok <br>    QueryMachines% = True <br>End Function <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

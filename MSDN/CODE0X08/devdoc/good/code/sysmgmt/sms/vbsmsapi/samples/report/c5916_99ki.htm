<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MACHINE.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5922"></a>MACHINE.FRM</h2>
<pre><code>VERSION 4.00 <br>Begin VB.Form frmMachineReport  <br>   Appearance      =   0  'Flat <br>   BackColor       =   &amp;H80000005&amp; <br>   Caption         =   "Machine Report" <br>   ClientHeight    =   4215 <br>   ClientLeft      =   1560 <br>   ClientTop       =   2610 <br>   ClientWidth     =   8505 <br>   BeginProperty Font  <br>      name            =   "MS Sans Serif" <br>      charset         =   1 <br>      weight          =   700 <br>      size            =   8.25 <br>      underline       =   0   'False <br>      italic          =   0   'False <br>      strikethrough   =   0   'False <br>   EndProperty <br>   ForeColor       =   &amp;H80000008&amp; <br>   Height          =   4620 <br>   Icon            =   "MACHINE.frx":0000 <br>   Left            =   1500 <br>   LinkTopic       =   "Form1" <br>   MDIChild        =   -1  'True <br>   ScaleHeight     =   4215 <br>   ScaleWidth      =   8505 <br>   Top             =   2265 <br>   Width           =   8625 <br>   Begin VB.PictureBox picSeperator  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   2475 <br>      Left            =   4200 <br>      MousePointer    =   9  'Size W E <br>      ScaleHeight     =   2445 <br>      ScaleWidth      =   45 <br>      TabIndex        =   12 <br>      Top             =   -15 <br>      Width           =   75 <br>   End <br>   Begin VB.PictureBox picRightView  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      BorderStyle     =   0  'None <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   2535 <br>      Left            =   4275 <br>      ScaleHeight     =   2535 <br>      ScaleWidth      =   4200 <br>      TabIndex        =   9 <br>      Top             =   0 <br>      Width           =   4200 <br>      Begin Threed.SSPanel pnlTableHeader  <br>         Height          =   270 <br>         Left            =   0 <br>         TabIndex        =   11 <br>         Top             =   0 <br>         Width           =   1500 <br>         _Version        =   65536 <br>         _ExtentX        =   2646 <br>         _ExtentY        =   476 <br>         _StockProps     =   15 <br>         Caption         =   "Table Header" <br>         BackColor       =   -2147483633 <br>         BevelWidth      =   2 <br>         BorderWidth     =   0 <br>      End <br>      Begin MSGrid.Grid grdTable  <br>         Height          =   750 <br>         Left            =   0 <br>         TabIndex        =   10 <br>         Top             =   240 <br>         Width           =   1500 <br>         _Version        =   65536 <br>         _ExtentX        =   2646 <br>         _ExtentY        =   1323 <br>         _StockProps     =   77 <br>         BorderStyle     =   0 <br>         FixedCols       =   0 <br>      End <br>   End <br>   Begin VB.PictureBox picLeftView  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      BorderStyle     =   0  'None <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   2535 <br>      Left            =   0 <br>      ScaleHeight     =   2535 <br>      ScaleWidth      =   4215 <br>      TabIndex        =   13 <br>      Top             =   0 <br>      Width           =   4215 <br>      Begin Threed.SSPanel pnlPropertyHeader  <br>         Height          =   270 <br>         Left            =   0 <br>         TabIndex        =   15 <br>         Top             =   0 <br>         Width           =   1500 <br>         _Version        =   65536 <br>         _ExtentX        =   2646 <br>         _ExtentY        =   476 <br>         _StockProps     =   15 <br>         Caption         =   "Properties" <br>         BackColor       =   -2147483633 <br>         BevelWidth      =   2 <br>         BorderWidth     =   0 <br>      End <br>      Begin MSOutl.Outline olnData  <br>         Height          =   750 <br>         Left            =   0 <br>         TabIndex        =   14 <br>         Top             =   240 <br>         Width           =   1500 <br>         _Version        =   65536 <br>         _ExtentX        =   2646 <br>         _ExtentY        =   1323 <br>         _StockProps     =   77 <br>         BorderStyle     =   0 <br>         Style           =   5 <br>      End <br>   End <br>   Begin VB.CommandButton cmdSave  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Save" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   4 <br>      TabStop         =   0   'False <br>      Top             =   2580 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdSaveAs  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Save As" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   3 <br>      TabStop         =   0   'False <br>      Top             =   2880 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CheckBox chkDirty  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Dirty Bit" <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   195 <br>      Left            =   4440 <br>      TabIndex        =   2 <br>      TabStop         =   0   'False <br>      Top             =   3540 <br>      Visible         =   0   'False <br>      Width           =   1155 <br>   End <br>   Begin VB.CommandButton cmdPrintPreview  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Print Preview" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   1 <br>      TabStop         =   0   'False <br>      Top             =   3480 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdPrint  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Print" <br>      Height          =   315 <br>      Left            =   480 <br>      TabIndex        =   0 <br>      TabStop         =   0   'False <br>      Top             =   3180 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdAbort  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Abort" <br>      Height          =   315 <br>      Left            =   4440 <br>      TabIndex        =   7 <br>      TabStop         =   0   'False <br>      Top             =   3180 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdInitialize  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Initialize" <br>      Height          =   315 <br>      Left            =   4440 <br>      TabIndex        =   8 <br>      TabStop         =   0   'False <br>      Top             =   2880 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin VB.CommandButton cmdExport  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "Export" <br>      Height          =   315 <br>      Left            =   4440 <br>      TabIndex        =   6 <br>      TabStop         =   0   'False <br>      Top             =   2580 <br>      Visible         =   0   'False <br>      Width           =   3735 <br>   End <br>   Begin Crystal.CrystalReport CrystalReport  <br>      Left            =   0 <br>      Top             =   3120 <br>      _ExtentX        =   741 <br>      _ExtentY        =   741 <br>      _StockProps     =   0 <br>      ReportFileName  =   "" <br>      Destination     =   0 <br>      WindowLeft      =   100 <br>      WindowTop       =   100 <br>      WindowWidth     =   480 <br>      WindowHeight    =   300 <br>      WindowTitle     =   "" <br>      WindowBorderStyle=   2 <br>      WindowControlBox=   -1  'True <br>      WindowMaxButton =   -1  'True <br>      WindowMinButton =   -1  'True <br>      CopiesToPrinter =   1 <br>      PrintFileName   =   "" <br>      PrintFileType   =   2 <br>      SelectionFormula=   "" <br>      GroupSelectionFormula=   "" <br>      Connect         =   "" <br>      UserName        =   "" <br>      ReportSource    =   0 <br>      BoundReportHeading=   "" <br>      BoundReportFooter=   -1  'True <br>   End <br>   Begin MSComDlg.CommonDialog CommonDialog  <br>      Left            =   0 <br>      Top             =   2640 <br>      _ExtentX        =   847 <br>      _ExtentY        =   847 <br>      _StockProps     =   0 <br>   End <br>   Begin VB.Label lblFileSpec  <br>      Appearance      =   0  'Flat <br>      BackColor       =   &amp;H80000005&amp; <br>      Caption         =   "File Specification" <br>      ForeColor       =   &amp;H80000008&amp; <br>      Height          =   195 <br>      Left            =   5940 <br>      TabIndex        =   5 <br>      Top             =   3540 <br>      Visible         =   0   'False <br>      Width           =   2175 <br>   End <br>End <br>Attribute VB_Name = "frmMachineReport" <br>Attribute VB_Creatable = False <br>Attribute VB_Exposed = False <br>Option Explicit <br> <br>'//**************************************************************************** <br>'// <br>'//  Copyright (c) 1995, Microsoft Corporation <br>'// <br>'//  File:  MACHINE.FRM <br>'// <br>'//  History: <br>'// <br>'//      Gary Fuehrer, SEA   5/9/95      Created. <br>'// <br>'//**************************************************************************** <br> <br>Dim hConnect&amp; <br>Dim ReportTempSpec$ <br>Dim NewNumber% <br>Dim db As Database <br>Dim dbt As Database <br> <br>'Current machine name and ID <br>Dim Machine As IDLookupRec <br> <br>'Currently selected item <br>Dim SelectedProperty% <br> <br>'Some relavent names for the outline control pictures <br>Const MSOUTLINE_PICTURE_MACHINE = MSOUTLINE_PICTURE_CLOSED <br>Const MSOUTLINE_PICTURE_PROPERTY = MSOUTLINE_PICTURE_OPEN <br> <br>'Seperator dragging state and cursor offset <br>Dim SeperatorDragging% <br>Dim SeperatorDragOffset% <br> <br>'State flags <br>Dim bReadData% 'If True, reading property data from file. <br> <br>Private Sub chkDirty_Click() <br>    UpdateCaption <br>End Sub <br> <br>Private Sub cmdAbort_Click() <br>    'Handle user abort of current lengthy operation <br>    If bReadData% Then <br>        If MsgBox("Do you want to stop reading machine data?" + Chr$(10) + Chr$(10) + "Click Yes to abort, No to continue.", MB_YESNO + MB_ICONQUESTION, Caption) = IDYES Then <br>            bReadData% = False <br>        End If <br>    End If <br>End Sub <br> <br>Private Sub cmdExport_Click() <br>    Dim FileSpec$, nPos%, Resp%, FileKilled% <br> <br>    'Build suggested file spec <br>    If lblFileSpec &gt; "" Then <br>        nPos% = InStr(lblFileSpec, ".") - 1 <br>        If nPos% &lt; 0 Then nPos% = Len(lblFileSpec) <br>        FileSpec$ = left$(lblFileSpec, nPos) + ".TXT" <br>    Else: FileSpec$ = "*.TXT" <br>    End If <br> <br>    'Get from the user the print file name <br>    FileSpec$ = GetSaveAsFileSpec$(FileSpec$, "ASCII Text (*.TXT) |*.TXT |All Files (*.*) |*.*") <br>    If FileSpec$ &lt;= "" Then Exit Sub <br> <br>    'See if we need to delete existing file <br>    '(Crystal Reports can't overwrite an existing file) <br>    If Dir$(FileSpec$) &gt; "" Then <br>        FileKilled% = 0 <br>        Do <br>            On Error Resume Next <br>            Kill FileSpec <br>            If Err &gt; 0 Then <br>                Resp% = MsgBox("An error occured writing to file " + FileSpec$ + ":" + Chr$(10) + Error$ + Chr$(10) + Chr$(10) + "Do you want to try again?", MB_RETRYCANCEL Or MB_ICONQUESTION, Caption) <br>                If Resp% = IDCANCEL Then Exit Sub <br>            Else: FileKilled% = True <br>            End If <br>        Loop Until FileKilled% <br>    End If <br> <br>    'Set the print file name and type <br>    CrystalReport.PrintFileName = CommonDialog.filename <br>    CrystalReport.PrintFileType = 2 'ASCII text <br> <br>    'Export report code <br>    PrintDoc CRW_PRINT_TO_FILE <br>End Sub <br> <br>Private Sub cmdInitialize_Click() <br>    'Size the grid columns <br>    If picRightView.Width &gt; grdTable.ColWidth(0) + X_PIX_SIZE Then <br>        grdTable.ColWidth(1) = picRightView.Width - grdTable.ColWidth(0) - X_PIX_SIZE <br>    End If <br> <br>    If GetMachine%(dbt, Machine) Then <br>        'Add a root item to represent this machine <br>        olnData.AddItem Machine.StrName$, 0 <br>        olnData.Indent(0) = 0 <br>        olnData.PictureType(0) = MSOUTLINE_PICTURE_MACHINE <br>        olnData.ItemData(0) = Machine.ID&amp; <br> <br>        'Flag that we are in data reading mode <br>        bReadData% = True <br>        ReadMachineProperties 0 <br>        bReadData% = False <br>     <br>        'Select the first property item <br>        If olnData.ListCount &gt; 1 Then olnData.ListIndex = SelectedProperty% <br>        olnData_Click <br>    End If <br>End Sub <br> <br>Private Sub cmdPrint_Click() <br>    'See if we need the print dialog <br>    If gbNeedPrintDialog% = True Then <br>        'Put up the print dialog <br>        CommonDialog.Flags = PD_NOSELECTION Or PD_NOPAGENUMS Or PD_HIDEPRINTTOFILE <br>        CommonDialog.Copies = 1 <br>        CommonDialog.CancelError = True <br>        On Error Resume Next <br>        CommonDialog.Action = DLG_PRINT <br>        If Err = CDERR_CANCEL Then Exit Sub <br>        If Err &gt; 0 Then <br>            MsgBox "An unexpected error occured:" + Chr$(10) + Chr$(10) + Error$, MB_OK Or MB_ICONEXCLAMATION, Caption <br>            Exit Sub <br>        End If <br>        On Error GoTo 0 <br> <br>        'Handle user printer settings <br>        CrystalReport.CopiesToPrinter = CommonDialog.Copies <br>    Else <br>        'Supply printer default settings <br>        CrystalReport.CopiesToPrinter = 1 <br>    End If <br> <br>    'Print document <br>    PrintDoc CRW_PRINT_TO_PRINTER <br>End Sub <br> <br>Private Sub cmdPrintPreview_Click() <br>    'Print Preview document <br>    PrintDoc CRW_PRINT_TO_WINDOW <br>End Sub <br> <br>Private Sub cmdSave_Click() <br>    'See if we need to do a Save or a Save As <br>    If lblFileSpec &gt; "" Then <br>        SaveDoc lblFileSpec <br>    Else: cmdSaveAs_Click <br>    End If <br>End Sub <br> <br>Private Sub cmdSaveAs_Click() <br>    Dim NewFileSpec$ <br> <br>    NewFileSpec$ = GetSaveAsFileSpec$(lblFileSpec, "Access 1.0 (*.MDB) |*.MDB |All Files (*.*) |*.*") <br>    If NewFileSpec$ &lt;= "" Then Exit Sub <br> <br>    SaveDoc NewFileSpec$ <br>End Sub <br> <br>Private Sub Form_Load() <br>    Dim i%, ImgTop%, TestTop%, NoMoreProperties% <br> <br>    chkDirty = False <br> <br>    NewNumber% = InitReportNewNumber% <br>    hConnect&amp; = InitReporthConnect&amp; <br>    lblFileSpec = InitReportFileSpec$ <br>    ReportTempSpec$ = InitReportTempSpec$ <br> <br>    'Position Left View and controls (will be resized later) <br>    picLeftView.left = 0 <br>    picLeftView.top = 0 <br>        pnlPropertyHeader.left = 0 <br>        pnlPropertyHeader.top = 0 <br>        olnData.left = 0 <br>        olnData.top = pnlPropertyHeader.Height <br>    picLeftView.Width = 3000 <br> <br>    'Position View Seperator (will be resized later) <br>    picSeperator.left = picLeftView.Width <br>    picSeperator.top = -Y_PIX_SIZE <br>     <br>    'Position Right View and controls (will be resized later) <br>    picRightView.left = picSeperator.left + picSeperator.Width <br>    picRightView.top = 0 <br>        pnlTableHeader.left = 0 <br>        pnlTableHeader.top = 0 <br>        grdTable.left = 0 <br>        grdTable.top = pnlTableHeader.Height <br>        grdTable.ColWidth(0) = 2500 <br> <br>    'Set column header captions <br>    grdTable.Col = 0 <br>    grdTable.Row = 0 <br>    grdTable.Text = "Attribute" <br>    grdTable.Col = 1 <br>    grdTable.Row = 0 <br>    grdTable.Text = "Value" <br> <br>    Set dbt = OpenDatabase(ReportTempSpec$, True) <br>    If lblFileSpec &gt; "" Then Set db = OpenDatabase(lblFileSpec, True, True) <br> <br>    SelectedProperty% = 1 <br>End Sub <br> <br>Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer) <br>    Dim Resp%, FileSpec$ <br>     <br>    'Make sure we're not in the middle of something <br>    If bReadData% Then <br>        cmdAbort_Click <br>        Cancel = True <br>        Exit Sub <br>    End If <br> <br>    'Give the user a chance to save document <br>    If chkDirty Then <br>        Resp% = MsgBox("This report has been modified. Save data before closing?", MB_YESNOCANCEL Or MB_ICONQUESTION, Caption) <br>        If Resp% = IDYES Then <br>            cmdSave_Click <br>            If chkDirty Then Cancel = True <br>        ElseIf Resp% = IDCANCEL Then: Cancel = True <br>        End If <br>    End If <br>End Sub <br> <br>Private Sub Form_Resize() <br>    Static OldWidth, OldHeight, OldSepLeft% <br>    Dim r As Rect, HBorderPixels%, VBorderPixels% <br> <br>    'See if we're minimized <br>    If WindowState = MINIMIZED Then Exit Sub <br> <br>    'Get client size of form (already in pixels, I find) <br>    GetClientRect hwnd, r <br>    HBorderPixels% = Width / X_PIX_SIZE - r.right <br>    VBorderPixels% = Height / Y_PIX_SIZE - r.bottom <br>     <br>    If (OldWidth &lt;&gt; Width Or OldSepLeft &lt;&gt; picSeperator.left) And Width - X_PIX_SIZE * HBorderPixels% &gt; picRightView.left Then <br>        picRightView.Width = Width - X_PIX_SIZE * HBorderPixels% - picRightView.left <br> <br>        OldWidth = Width <br>    End If <br> <br>    If OldHeight &lt;&gt; Height And Height - Y_PIX_SIZE * VBorderPixels% &gt; picLeftView.top Then <br>        picLeftView.Height = Height - Y_PIX_SIZE * VBorderPixels% - picLeftView.top <br>        picRightView.Height = Height - Y_PIX_SIZE * VBorderPixels% - picRightView.top <br>        picSeperator.Height = Height - Y_PIX_SIZE * VBorderPixels% - picSeperator.top + Y_PIX_SIZE <br> <br>        OldHeight = Height <br>        OldSepLeft = picSeperator.left <br>    End If <br>End Sub <br> <br>Private Sub Form_Unload(Cancel As Integer) <br>    dbt.Close <br>    If Not db Is Nothing Then db.Close <br> <br>    'Kill temp file <br>    On Error Resume Next <br>    Kill ReportTempSpec$ <br>    On Error GoTo 0 <br> <br>    FreeReportWindow Me <br>End Sub <br> <br>Private Function GetItemID%(Attrib As AttributeRec, ByVal ListIndex%) <br>    'Default return value 0 (nothing at list index) <br>    GetItemID% = 0 <br>    If ListIndex% &lt; 1 Or ListIndex% &gt;= olnData.ListCount Then Exit Function <br> <br>    Attrib.PropertyID = olnData.ItemData(ListIndex%) <br>    GetItemID% = 1 <br>End Function <br> <br>Private Function GetSaveAsFileSpec$(ByVal InitFileSpec$, Filter$) <br>    'Default return value empty (User canceled) <br>    GetSaveAsFileSpec$ = "" <br> <br>    CommonDialog.CancelError = True <br>    CommonDialog.filename = InitFileSpec$ <br>    CommonDialog.Filter = Filter$ <br>    CommonDialog.FilterIndex = 1 <br>    CommonDialog.Flags = OFN_OVERWRITEPROMPT Or OFN_PATHMUSTEXIST Or OFN_HIDEREADONLY <br>    On Error Resume Next <br>    CommonDialog.Action = DLG_FILE_SAVE <br>    If Err = CDERR_CANCEL Then Exit Function <br>    If Err &gt; 0 Then <br>        MsgBox "An unexpected error occured:" + Chr$(10) + Error$, MB_OK Or MB_ICONEXCLAMATION, Caption <br>        Exit Function <br>    End If <br>    On Error GoTo 0 <br> <br>    GetSaveAsFileSpec$ = CommonDialog.filename <br>End Function <br> <br>Private Sub lblFileSpec_Change() <br>    UpdateCaption <br>End Sub <br> <br>Private Sub olnData_Click() <br>    SetSelectedProperty olnData.ListIndex <br>End Sub <br> <br>Private Sub olnData_Expand(ListIndex As Integer) <br>    olnData.ListIndex = ListIndex <br>    olnData.Refresh <br>    olnData_Click <br>End Sub <br> <br>Private Sub olnData_PictureClick(ListIndex As Integer) <br>    olnData.ListIndex = ListIndex <br>    olnData.Refresh <br>    olnData_Click <br>End Sub <br> <br>Private Sub picLeftView_Resize() <br>    Static OldWidth, OldHeight <br> <br>    If OldWidth &lt;&gt; picLeftView.Width Then <br>        pnlPropertyHeader.Width = picLeftView.Width <br>        olnData.Width = picLeftView.Width <br> <br>        OldWidth = picLeftView.Width <br>    End If <br> <br>    If OldHeight &lt;&gt; picLeftView.Height Then <br>        olnData.Height = picLeftView.Height - olnData.top <br> <br>        OldHeight = picLeftView.Height <br>    End If <br>End Sub <br> <br>Private Sub picRightView_Resize() <br>    Static OldWidth, OldHeight <br>         <br>    If OldWidth &lt;&gt; picRightView.Width Then <br>        pnlTableHeader.Width = picRightView.Width <br>        grdTable.Width = picRightView.Width <br> <br>        OldWidth = picRightView.Width <br>    End If <br> <br>    If OldHeight &lt;&gt; picRightView.Height And picRightView.Height &gt; pnlTableHeader.Height Then <br>        grdTable.Height = picRightView.Height - grdTable.top <br> <br>        OldWidth = picRightView.Width <br>    End If <br>End Sub <br> <br>Private Sub picSeperator_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single) <br>    If Button And LEFT_BUTTON Then <br>        SeperatorDragging% = True <br>        SeperatorDragOffset% = X <br>    End If <br>End Sub <br> <br>Private Sub picSeperator_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single) <br>    Dim OldLeft% <br> <br>    If SeperatorDragging% And X &lt;&gt; OldLeft% And picSeperator.left + X - SeperatorDragOffset% &gt; 0 Then <br>        picSeperator.left = picSeperator.left + X - SeperatorDragOffset% <br>        picLeftView.Width = picSeperator.left <br>        picRightView.left = picSeperator.left + picSeperator.Width <br>        Form_Resize <br>    End If <br>End Sub <br> <br>Private Sub picSeperator_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single) <br>    If Button And LEFT_BUTTON Then <br>        SeperatorDragging% = False <br>    End If <br>End Sub <br> <br>Private Sub PrintDoc(Destination%) <br>    CrystalReport.WindowTitle = Caption <br>    CrystalReport.Destination = Destination% <br>    CrystalReport.WindowParentHandle = 0 <br>    CrystalReport.DataFiles(0) = ReportTempSpec$ <br>    CrystalReport.ReportFileName = App.Path + "\MACHPROP.RPT" <br> <br>    'Print the report <br>    CrystalReport.Action = 1 <br>End Sub <br> <br>Private Sub ReadMachineProperties(ParentListIndex%) <br>    Dim ListIndex%, TooMany%, DBError%, bFirstAttribute%, FirstAttributeID&amp; <br>    Dim Attrib As AttributeRec, IDLookup As IDLookupRec <br> <br>    Attrib.PropertyID = olnData.ItemData(ParentListIndex%) <br>    TooMany = False <br>    Select Case GetItemID%(Attrib, ParentListIndex%) <br>        Case 0 'Empty list: Get all machine properties <br>            If QueryProperties%(dbt, Attrib) = False Then <br>                MsgBox "Error accessing database" <br>                Exit Sub <br>            End If <br> <br>            ListIndex% = ParentListIndex% + 1 <br>            Do While FetchProperties%(IDLookup, Not bReadData% Or TooMany%, DBError%) <br>                If DBError% Then <br>                    MsgBox "Error accessing database" <br>                    Exit Sub <br>                ElseIf olnData.ListCount &gt;= MAX_OUTLINE_ENTRIES Then <br>                    TooMany% = True <br>                Else <br>                    olnData.AddItem IDLookup.StrName$, ListIndex% <br>                    olnData.Indent(ListIndex%) = 1 <br>                    olnData.PictureType(ListIndex%) = MSOUTLINE_PICTURE_PROPERTY <br>                    olnData.ItemData(ListIndex%) = IDLookup.ID&amp; <br>                    ListIndex% = ListIndex% + 1 <br> <br>                    'DoEvents 'Turned off because its too slow! <br>                              'Turn back on to check for user cancel <br>                End If <br>            Loop <br>        Case 1 'Machine Property: Update table <br>            If QueryAttributes%(dbt, Attrib) = False Then <br>                MsgBox "Error accessing database" <br>                Exit Sub <br>            End If <br> <br>            ListIndex% = 1 <br>            bFirstAttribute% = True <br>            Do While FetchAttributes%(IDLookup, Not bReadData% Or TooMany%, DBError%) <br>                If DBError% Then <br>                    MsgBox "Error accessing database" <br>                    Exit Sub <br>                ElseIf olnData.ListCount &gt;= MAX_OUTLINE_ENTRIES Then <br>                    TooMany% = True <br>                Else <br>                    If bFirstAttribute% Then <br>                        FirstAttributeID&amp; = IDLookup.ID&amp; <br>                        bFirstAttribute% = False <br>                    ElseIf IDLookup.ID&amp; = FirstAttributeID&amp; Then <br>                        'Add a blank entry to separate repeating section <br>                        grdTable.AddItem Chr$(9), ListIndex% <br>                        ListIndex% = ListIndex% + 1 <br>                    End If <br> <br>                    grdTable.AddItem IDLookup.StrID$ + Chr$(9) + IDLookup.StrName$, ListIndex% <br>                    ListIndex% = ListIndex% + 1 <br> <br>                    'DoEvents 'Turned off because its too slow! <br>                              'Turn back on to check for user cancel <br>                End If <br>            Loop <br>    End Select <br> <br>    If TooMany% Then <br>        MsgBox "No more machines and properties can be displayed in this window until some are collapsed." <br>    End If <br>End Sub <br> <br>Private Sub SaveDoc(ByVal FileSpec$) <br>    Dim ReportSaved%, Resp% <br> <br>    'Temporarily close the database and temp database <br>    dbt.Close <br>    If Not db Is Nothing Then db.Close <br> <br>    ReportSaved% = False <br>    Do <br>        On Error Resume Next <br>        FileCopy ReportTempSpec$, FileSpec$ <br>        If Err &gt; 0 Then <br>            Resp% = MsgBox("An error occured trying to save " + FileSpec$ + ":" + Chr$(10) + Error$ + Chr$(10) + Chr$(10) + "Do you want to try again?", MB_OKCANCEL Or MB_ICONQUESTION, Caption) <br>            If Resp% = IDCANCEL Then Exit Do <br>        Else: ReportSaved% = True <br>        End If <br>    Loop Until ReportSaved% <br> <br>    'Re-open the database and temp database <br>    Set dbt = OpenDatabase(ReportTempSpec$, True) <br>    Set db = OpenDatabase(FileSpec$, True, True) <br> <br>    If ReportSaved% Then <br>        lblFileSpec = FileSpec$ <br>        chkDirty = False <br>    End If <br>End Sub <br> <br>Private Sub SetSelectedProperty(ByVal Index%) <br>    Static Initialized% <br> <br>    'Prevent re-entrancy <br>    If bReadData% Then Exit Sub <br> <br>    'Don't re-select if its already selected <br>    If Initialized% And SelectedProperty% = Index% Or Index% &lt; 1 Then Exit Sub <br>    Initialized% = True <br> <br>    'Set the table header caption <br>    pnlTableHeader.Caption = olnData.List(Index%) <br> <br>    'Clear out the table <br>    Do While grdTable.Rows &gt; 2 <br>        grdTable.RemoveItem 1 <br>    Loop <br> <br>    'Update the table <br>    bReadData% = True <br>    ReadMachineProperties Index% <br>    bReadData% = False <br> <br>    'Preserve the current selection <br>    SelectedProperty% = Index% <br>End Sub <br> <br>Private Sub UpdateCaption() <br>    Dim NewCaption$ <br> <br>    If lblFileSpec &gt; "" Then <br>        NewCaption$ = lblFileSpec <br>    Else: NewCaption$ = "New Machine Report " + CStr(NewNumber) <br>    End If <br> <br>    If chkDirty Then NewCaption$ = NewCaption$ + "*" <br> <br>    Caption = NewCaption$ <br>End Sub <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

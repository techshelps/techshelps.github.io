<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECTTY.BAS</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5897"></a>OBJECTTY.BAS</h2>
<pre><code>Attribute VB_Name = "OBJECTTY" <br>Option Explicit <br>'// ************************************************************************* <br>'// <br>'//  File: OBJECTTY.H <br>'// <br>'//  Copyright (c) 1994, 1995 Microsoft Corp. <br>'// <br>'//  This is the header file for the obejctity engine. The objectity <br>'//  engine is the core of the SMS API set. <br>'// <br>'//  This file contains externally visible structures, and certain manifests <br>'//  needed by them. <br>'// <br>'// <br>'// ************************************************************************* <br>'// <br>' <br>'// ==================================================================== <br>'// <br>'//      Manifests. <br>'// <br>'// ==================================================================== <br>' <br>'typedef DWORD   SMS_STATUS;         // API return codes are all of this type. <br>'/* VB: All API's return Long  */ <br>' <br> Global Const F_ANY = 0              'Indicates any folder type <br>' <br>' <br>'// ==================================================================== <br>'//  Scalar values can be strings, integers (DWORDs), time, or binary. <br>'//NOTE: binary not yet implemented. <br>'// ==================================================================== <br> Type SCALARTYPE <br>     enum As Long <br> End Type <br>  <br> ' These are initialized in Init_SCALARTYPE_enums() <br> Global SCALAR_STRING As SCALARTYPE <br> Global SCALAR_INT As SCALARTYPE <br> Global SCALAR_TIME As SCALARTYPE <br> Global SCALAR_BINARY As SCALARTYPE <br>' <br>' <br>'// ==================================================================== <br>'//      SCALAR <br>'//  This structure is used by the application and the engine to <br>'//  communicate a scalar's details. <br>'// <br>'//  All scalars have a type (SCALARTYPE), a name (a character string), <br>'//  and a value, which is determined by the scalar's type. <br>'//  There are separate fields here for the value in all its guises. <br>'//  Additionally, if the scalar is a string or a binary, a length <br>'//  field indicates the datum's size. <br>'// <br>'//  This length field can also be set by the application when <br>'//  retrieving a scalar. In this case it indicates the size of the <br>'//  receiving buffer (string and binary). <br>'// <br>'// ==================================================================== <br> Type SCALAR <br>     scType As SCALARTYPE       '// string, int, time etc <br>     pszName As String          '// Scalar name. <br>     pszValue As String         '// Scalar value as a string. <br>     dwValue As Long            '// Scalar value as a DWORD. <br>     tValue As Long             '// Scalar value as a time. <br>     pValue() As Byte           '// Scalar as a binary. <br>     dwLen As Long              '// Size of the scalar value either as a string <br>                                '// or as a binary. <br>                                '// If a get scalar API is called with NULL <br>                                '// for the appropriate value, then the <br>                                '// length of that value is returned here. <br>     bStringEquivalence As Long <br>                                '// True if a string exists for an INT or <br>                                '// TIME scalar. String will be in pszValue. <br>     fAccess As Long            '// Access mode. <br> End Type <br>' <br>' <br>' <br>' <br>'// -------------------------------------------------------------------- <br>'// Manifests used in filter token APIs. <br>'// -------------------------------------------------------------------- <br> Global Const OTT_AT_START = -1 '// Token will be inserted at start of <br>                                '// expression. <br> Global Const OTT_AT_END = -2   '// Token will be appended to end of <br>                                '// expression. <br>' <br>' <br>' <br>' <br>'// ==================================================================== <br>'// <br>'//  Return codes from the objectity engine. <br>'// <br>'// ==================================================================== <br> Global Const OTT_OK = 0 <br> Global Const OTT_MORE_DATA = 1 <br> Global Const OTT_NO_MORE_DATA = 2 <br> Global Const OTT_FOLDER_NO_UPDATE = 3 <br> Global Const OTT_DUPLICATE_CONTAINER_ID = 4 <br> Global Const OTT_DUPLICATE_FOLDER_ID = 5 <br> Global Const OTT_DUPLICATE_FILTER_ID = 6 <br> Global Const OTT_SCALAR_NO_UPDATE = 7 <br> Global Const OTT_SCALAR_WRONG_TYPE = 8 <br> Global Const OTT_INVALID_CONTAINER_ID = 9 <br> Global Const OTT_INVALID_FOLDER_ID = 10 <br> Global Const OTT_INVALID_FILTER_ID = 11 <br>' <br> Global Const OTT_CONTAINER_NO_UPDATE = 12 <br>' <br> Global Const OTT_PARAMETER_ERROR = 13 <br> Global Const OTT_UNSUPPORTED = 14 <br> Global Const OTT_NOT_FOUND = 15 <br> Global Const OTT_PARENT_NOT_FOUND = 16 <br> Global Const OTT_CANT_DELETE = 17 <br> Global Const OTT_NEW_FOLDER = 18 <br>' <br>'// Error when attempting to multiply link a folder. <br> Global Const OTT_FOLDER_LINKED = 19 <br>' <br>'// <br>'// Filter operations. <br> Global Const OTT_RANGE_ERROR = 20 <br>' <br> Global Const OTT_DUPLICATE_FILTER = 21 <br>' <br>'// Container operations that are out of sequence. <br> Global Const OTT_CONTAINER_NOT_POPULATED = 22 <br> Global Const OTT_CONTAINER_POPULATED = 23 <br>' <br>'// Only persistent filters have scalars. <br> Global Const OTT_FILTER_NOT_PERSISTENT = 24 <br>' <br>'// Error return if the connection handle of a filter doesn't match <br>'// that of a container to which the filter is being applied. <br> Global Const OTT_INVALID_CONNECTION_HANDLE = 25 <br> <br> Global Const OTT_INVALID_FILTER_TYPE = 26 <br>' <br>'// Folder's can't be unlinked if there are multiple handles <br>'// to the same object. <br> Global Const OTT_IN_USE_BY_OTHER = 27 <br>' <br>' <br>'// The last one, user codes start from here to give <br>'// leaway for future expansion. <br>'// <br> Global Const OTT_END = 50 <br>' <br>' <br>'// ==================================================================== <br>'// <br>'//  Other manifests. <br>'// <br>'// ==================================================================== <br>' <br>'// Access rights to containers/folders/scalars. <br>'// ------------------------------------------------------------- <br> Global Const ACCESS_READ = &amp;H1 <br> Global Const ACCESS_CREATE = &amp;H2 <br> Global Const ACCESS_MODIFY = &amp;H4 <br> Global Const ACCESS_DELETE = &amp;H8 <br>' <br>'// Modification flags <br>'// ------------------ <br> Global Const MOD_UNMODIFIED = &amp;H0 <br> Global Const MOD_CREATED = &amp;H1 <br> Global Const MOD_DELETED = &amp;H2 <br> Global Const MOD_DENY_ACCESS = &amp;H4 <br>' <br>'// Tokens are ANDed or ORed into filters. <br>'// ------------------------------------------------------------- <br> Type ANDOR <br>     enum As Long <br> End Type <br>  <br> ' These are initialized in Init_ANDOR_enums() <br> Global OP_AND As ANDOR <br> Global OP_OR As ANDOR <br>' <br>'// Options for Rewind on a folder. <br>'// ------------------------------------------------------------- <br> Global Const RW_FOLDER = &amp;H80000000      '// Rewind folder lists. <br> Global Const RW_SCALAR = &amp;H40000000      '// Rewind scalar list only. <br> Global Const RW_ALL = RW_FOLDER + RW_SCALAR ' // Rewind both. <br>' <br>' <br>' <br>' <br>' <br>' <br>' <br>'// These structures are used to retrieve container and filter <br>'// information from the engine. <br>'// These are used in enumertaing containers and filters. <br>'// ------------------------------------------------------------- <br> Global Const BUFF_SIZE = 256 <br>' <br>' <br>'// An objectity is either a container or a folder. <br>'// ------------------------------------------------------------- <br> Type BASETYPE <br>     enum As Long <br> End Type <br> <br> ' These are initialized in Init_BASETYPE_enums() <br> Global T_CONTAINER As BASETYPE <br> Global T_FOLDER As BASETYPE <br>' <br>' <br>'// ==================================================================== <br>'// <br>'//  The structures. <br>'// <br>'// ==================================================================== <br>' <br>'// <br>'// NOTIFY structure. <br>'// <br>'// This struct used for async population. Enables async operation to <br>'// use either event handle or window handle/message. <br>' <br> Type NOTIFY <br>    dwFreq As Long     '// Notify after this number of rows retrieved. <br>    hEvent As Long     '// Event handle if type=POP_EVENT <br>    hwnd As Long       '// hwnd if type=POP_WINDOW <br>    uiMsg As Long      '// Message if type=POP_WINDOW <br> End Type <br>' <br>' <br>'// <br>'// TOKEN structure. <br>'// <br> Global Const TOKEN_STRING_SIZE = 4608 '// 4.5k <br>'// The manifest is this large because it can used in the package inventory <br>'// rules. In these rules we are allowed to define upto four string fields, <br>'// each of which can be 1k long. This size allows us to accommodate it all. <br>' <br> Type TOKEN <br>     tokenType As Long            '// Returns: type of token (ie USER, AND, <br>                                         '// OR, LEFT_PAREN, RIGHT_PAREN). <br>     szName As String <br>     szValue As String <br>     dwOp As Long <br>  <br>     szArchitecture As String <br>     szGroupClass As String <br>     szAttributeName As String <br>     szTokenString As String           '// Display form of the token. <br>     bIndent As Long                   '// Request display indentation. <br> End Type <br>' <br>' <br>' <br>'// <br>'// FILTER_INFO <br>'// <br>'//  This structure is used to provide the user a filter template. <br>'//  An array of these structures is returned via the SmsEnumFilters API. <br>'//  This returns information about all filters registered with the engine. <br>'// <br>'//  It is considered that the user will use this information in order to <br>'//  display information. The information that is provided here is: <br>'//  a) the type and tag of the filter, b) the fields that comprise a <br>'//  particular filter's tokens, and c) the names that should be used <br>'//  for these fields for display purposes. That is, for a GUI application, <br>'//  they provide the labels for edit controls. If a field in the structure <br>'//  is empty (ie NULL) then that field is not used for that particular <br>'//  filter. <br>'// <br>'//  As an example consider a group filter. If the developer wants to <br>'//  present, say, a dialogue box to the end user, they would use the <br>'//  following fields: szName, szValue. Looking at the template they <br>'//  will see that the strings associated with these fields are 'Name' <br>'//  and 'GroupClass'. They would thus display a dialogue box with <br>'//  two edit controls, the first labelled 'Name', the second labelled <br>'//  'GroupClass. Since these are the only two fields that are filled in <br>'//  no other fields should be presented to the user. <br>'// <br>'//NOTE: what about default values? <br>'// <br>'//  Job filter: <br>'//      szName          = 'Type' <br>'//      szValue         = 'Value' <br>'//      szOperator      = 'Operator' <br>'// <br>'//  Machine filter: <br>'//      szArchitecture  = 'Architecture' <br>'//      szGroupClass    = 'GroupClass' <br>'//      szAttributeName = 'Attribute name' <br>'//      szValue         = 'Value' <br>'//      szOperator      = 'Operator' <br>'// <br>'//  Site filter: <br>'//      szName          = 'Type' <br>'//      szValue         = 'Site code' <br>'//      szOperator      = 'Operator' <br>'// <br>'//  Group filter: <br>'//      szName          = 'Name' <br>'//      szValue         = 'GroupClass' <br>'//      szOperator      = 'Operator' <br>'// <br>'//  Architecture filter: <br>'//      szName          = 'Name' <br>'//      szValue         = 'Architecture' <br>'//      szOperator      = 'Operator' <br>'// <br>'//  Package filter: <br>'//      szName          = 'Type' <br>'//      szValue         = 'Value' <br>'//      szOperator      = 'Operator' <br>'// <br>'//  Attribute filter: <br>'//      szArchitecture  = 'Architecture' <br>'//      szGroupClass    = 'GroupClass' <br>'//      szAttributeName = 'Attribute name' <br>'// <br>'//  SiteLimit filter: <br>'//      szName          = 'Site' <br>'//      szValue         = 'Domain' <br>'// <br>'// <br> Global Const NAME_SIZE = 52 <br>' <br> Type FILTER_INFO <br>     szTag As String                 '// Filter tag (eg "Architecture filter"). <br>'     tokenType As Integer <br>     filterType As Long              '// Type number (eg ARCHITECTURE_FILTER). <br>  <br>     szName As String <br>     szValue As String <br>     szOperator As String <br>  <br>     szArchitecture As String <br>     szGroupClass As String <br>     szAttributeName As String <br> End Type <br>' <br>' <br>' <br>'// This is what the user gets as a description of a scalar. <br>'// Currently this is only used internally in objectty.cpp (RegisterObjectity). <br>'// I'll proably make this externally visible though very soon now. <br> Type SCALAR_INFO <br>     szName As String                '// Scalar's name. <br>     scType As SCALARTYPE            '// Type: SCALAR_STRING, INT, TIME etc <br>     fAccess As Long                 '// Access mode: ACCESS_READ, MODIFY etc <br> End Type <br>' <br>' <br>'// Now the C struct form of CFolderInfo. This is what we'll <br>'// return in a call to DescribeFolder(). <br>'// This is created during a call to RegisterObjectity. It is stored <br>'// in the CFolderInfo object, itself held in the Folder registry. <br>'// 29-Sep-94. Expanded to deal with Containers as well as folders. <br>' <br>' <br> Type FOLDER_INFO <br>     tObjectity As BASETYPE          '// T_CONTAINER or T_FOLDER. <br>     pszTag As String <br>     dwTag As Long <br>  <br>     ctFolders As Long <br>     FolderTags() As Long <br>  <br>     ctFilters As Long <br>     FilterTags() As Long <br>  <br>     ctScalars As Long               '// Not used by for containers. <br>     Scalars() As SCALAR_INFO        '// ditto. <br>  <br>     NewFunc As Long                 '// needs cast!! Used when registering <br>                                     '// a container. This is a pointer to <br>                                     '// the container's 'new' function. <br> End Type <br> <br> Sub Init_ANDOR_enums() <br>     OP_AND.enum = 3 <br>     OP_OR.enum = 2 <br> End Sub <br> <br> Sub Init_BASETYPE_enums() <br>     T_CONTAINER.enum = 0 <br>     T_FOLDER.enum = 1 <br> End Sub <br> <br> Sub Init_OBJECTTY() <br>     Init_SCALARTYPE_enums <br>     Init_ANDOR_enums <br>     Init_BASETYPE_enums <br> End Sub <br> <br> Sub Init_SCALARTYPE_enums() <br>     SCALAR_STRING.enum = 0 <br>     SCALAR_INT.enum = 1 <br>     SCALAR_TIME.enum = 2 <br>     SCALAR_BINARY.enum = 3 <br> End Sub <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

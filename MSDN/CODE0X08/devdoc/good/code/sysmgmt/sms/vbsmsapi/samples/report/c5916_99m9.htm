<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SITEHIER.BAS</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5931"></a>SITEHIER.BAS</h2>
<pre><code>Attribute VB_Name = "SITEHIER" <br>Option Explicit <br> <br>'//**************************************************************************** <br>'// <br>'//  Copyright (c) 1995, Microsoft Corporation <br>'// <br>'//  File:  SITEHIER.BAS <br>'// <br>'//  History: <br>'// <br>'//      Gary Fuehrer, SEA   5/9/95      Created. <br>'// <br>'//**************************************************************************** <br> <br>'These need to be the same as outline control picture types <br>'  (see SITEHIER.FRM in global declarations section) <br>Global Const SITEHIERTYPE_ROOT = MSOUTLINE_PICTURE_CLOSED <br>Global Const SITEHIERTYPE_SITE = MSOUTLINE_PICTURE_OPEN <br>Global Const SITEHIERTYPE_DOMAIN = MSOUTLINE_PICTURE_LEAF <br> <br>Type SiteRec <br>    ItemNum As Long <br>    Parent As String <br>    Code As String <br>    Type As Integer <br>    TypeName As String <br>    Depth As Integer <br>    Name As String <br>End Type <br> <br>'For use by QuerySite%() and FetchSite%() ONLY <br>Dim dyQuerySite As Recordset <br> <br>Function FetchSite%(Site As SiteRec, Flush%, DBError%) <br>'   Fetches another site record from the dyQuerySite dynaset <br>'Parameters: <br>'   Site   - Filled in with next site record. <br>'   Flush% - Usually False. If True, the fetch is ended. <br>'   DBError% - Returns True when DB error occures. <br>'Return Value: <br>'   True if another record fetched, else False (no more) <br> <br>    DBError% = True <br>    FetchSite% = False <br> <br>    If dyQuerySite.EOF Or Flush% Then <br>        dyQuerySite.Close <br>    Else <br>        ' Populate the site record from the dyQuerySite <br>        ' dynaset and find the next record <br>        Site.ItemNum&amp; = dyQuerySite("ItemNum") <br>        If IsNull(dyQuerySite("Parent")) Then <br>            Site.Parent$ = "" <br>        Else: Site.Parent$ = Trim$(dyQuerySite("Parent")) <br>        End If <br>        If IsNull(dyQuerySite("Code")) Then <br>            Site.Code$ = "" <br>        Else: Site.Code$ = Trim$(dyQuerySite("Code")) <br>        End If <br>        Site.Type% = dyQuerySite("Type") <br>        Site.TypeName$ = Trim$(dyQuerySite("TypeName")) <br>        Site.Depth% = dyQuerySite("Depth") <br>        Site.Name$ = Trim$(dyQuerySite("Name")) <br> <br>        On Error Resume Next <br>        dyQuerySite.MoveNext <br>        If Err &gt; 0 Then Exit Function <br>        On Error GoTo 0 <br> <br>        FetchSite% = True <br>    End If <br> <br>    DBError% = False <br>End Function <br> <br>Function FindSite%(db As Database, Site As SiteRec) <br>'   Finds a specific site given the ItemNum <br>'Parameters <br>'   db - The database variable <br>'   Site - The following members are used to identify the site <br>'       ItemNum&amp; <br>'Return Value: <br>'   Count of number of records found <br>'   Site - Filled with one of those found <br> <br>    Dim Sql$ <br>    Dim dySite As Recordset <br> <br>    'Set default return value -1 (Database error) <br>    FindSite% = -1 <br> <br>    Sql$ = "SELECT ItemNum, Parent, Code, Type, TypeName, Depth, Name FROM [Site Hierarchy]" <br>    Sql$ = Sql$ + " WHERE ItemNum = " + CStr(Site.ItemNum&amp;) <br> <br>    ' If an error occurs exit the function <br>    On Error Resume Next <br>    Set dySite = db.OpenRecordset(Sql$, dbOpenDynaset) <br>    If Err &gt; 0 Then Exit Function <br>    On Error GoTo 0 <br> <br>    ' Populate the site record <br>    If Not dySite.EOF Then <br>        Site.ItemNum&amp; = dySite("ItemNum") <br>        If IsNull(dySite("Parent")) Then <br>            Site.Parent$ = "" <br>        Else: Site.Parent$ = Trim$(dySite("Parent")) <br>        End If <br>        If IsNull(dySite("Code")) Then <br>            Site.Code$ = "" <br>        Else: Site.Code$ = Trim$(dySite("Code")) <br>        End If <br>        Site.Type% = dySite("Type") <br>        Site.TypeName$ = Trim$(dySite("TypeName")) <br>        Site.Depth% = dySite("Depth") <br>        Site.Name$ = Trim$(dySite("Name")) <br>    End If <br> <br>    ' Return the record count <br>    FindSite% = dySite.RecordCount <br>End Function <br> <br>Function InsertSite&amp;(db As Database, Site As SiteRec) <br>'   Inserts the Site record into the given data base <br>'Parameters <br>'   db    - The database used for the query <br>'   Site  - The Site record <br>'Return Value: <br>'   The number of records inserted <br> <br>    Dim qy As QueryDef <br> <br>    ' Default return value False (Failed) <br>    InsertSite&amp; = -1 <br> <br>    ' Build the insert statement <br>    Set qy = db.QueryDefs("InsertSite") <br>    qy![INPUT ItemNum] = Site.ItemNum&amp; <br>    qy![INPUT Parent] = Site.Parent$ <br>    qy![INPUT Code] = Site.Code$ <br>    qy![INPUT Type] = Site.Type% <br>    qy![INPUT TypeName] = Site.TypeName$ <br>    qy![INPUT Depth] = Site.Depth% <br>    qy![INPUT Name] = Site.Name$ <br> <br>    'Try to insert the record <br>    On Error Resume Next <br>    qy.Execute <br>    If Err &gt; 0 Then Exit Function <br>    qy.Close <br>    On Error GoTo 0 <br> <br>    'Return insert count <br>    InsertSite&amp; = 1 <br>End Function <br> <br>Function NewSiteHierarchyDatabase%(db As Database, ErrStr$) <br>    Dim td As TableDef, qy As QueryDef, fd As Field, ix As Index <br> <br>    'Default return value False (Failed) <br>    NewSiteHierarchyDatabase% = False <br> <br>    On Error GoTo NewMachineDatabaseErr <br>     <br>    Set td = New TableDef <br>    td.Name = "Site Hierarchy" <br> <br>        'Fields <br>        Set fd = New Field <br>        fd.Name = "ItemNum" <br>        fd.Type = DB_LONG <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "Parent" <br>        fd.Type = DB_TEXT <br>        fd.Size = 4 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "Code" <br>        fd.Type = DB_TEXT <br>        fd.Size = 4 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "Type" <br>        fd.Type = DB_INTEGER <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "TypeName" <br>        fd.Type = DB_TEXT <br>        fd.Size = 16 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "Depth" <br>        fd.Type = DB_INTEGER <br>        td.Fields.Append fd <br> <br>        Set fd = New Field <br>        fd.Name = "Name" <br>        fd.Type = DB_TEXT <br>        fd.Size = 255 <br>        fd.AllowZeroLength = True <br>        td.Fields.Append fd <br> <br>        'Indexes <br>        Set ix = New Index <br>        ix.Name = "SortKey" <br>        ix.Primary = True <br>        ix.Unique = True <br>        ix.Fields = "ItemNum" <br>        td.Indexes.Append ix <br> <br>    db.TableDefs.Append td <br> <br>    'Make QueryDefs for common insert queries and selects <br>    Set qy = db.CreateQueryDef("InsertSite", "PARAMETERS [INPUT ItemNum] Long, [INPUT Parent] Text, [INPUT Code] Text, [INPUT Type] Short, [INPUT TypeName] Text, [INPUT Depth] Short, [INPUT Name] Text; INSERT INTO [Site Hierarchy] (ItemNum, Parent, Code, Type, TypeName, Depth, Name) SELECT [INPUT ItemNum] As ItemNum, '|[INPUT Parent]|' As Parent, '|[INPUT Code]|' As Code, [INPUT Type] As Type, '|[INPUT TypeName]|' As TypeName, [INPUT Depth] As Depth, '|[INPUT Name]|' As Name") <br> <br>    'Return success <br>    NewSiteHierarchyDatabase% = True <br>    Exit Function <br> <br>NewMachineDatabaseErr: <br>    ErrStr$ = Error$ <br>    Exit Function <br>End Function <br> <br>Function NewSiteHierarchyReportWindow%(hConnect&amp;, ByVal FileSpec$, ErrStr$) <br>    Dim i%, Ret&amp;, TempPath$, TempSpec$, frm As Form <br>    Dim db As Database, td As TableDef, fd As Field, ix As Index <br> <br>    'Default return value zero (Failed) <br>    NewSiteHierarchyReportWindow% = 0 <br> <br>    'Allocate space for returned string <br>    TempSpec$ = String$(256, 0) <br> <br>    'Get a temp file name <br>    TempPath$ = Environ$("TEMP") <br>    Ret&amp; = GetTempFileName(TempPath$, "MDB", 0, TempSpec$) <br>    ErrStr$ = "Could not get a temporary file name for the new report." <br>    If (Ret&amp; = 0) Then Exit Function <br> <br>    'Clean up return string of null terminator <br>    i% = InStr(TempSpec$, Chr$(0)) <br>    If i% = 0 Then i% = Len(TempSpec$) + 1 <br>    TempSpec$ = left$(TempSpec$, i% - 1) <br> <br>    'Create a temporary document file <br>    On Error GoTo NewSiteHierarchyReportWindowErr <br>    If FileSpec$ &gt; "" Then <br>        'File Open: so copy the file the user selected <br>        ErrStr$ = "Could not create a temporary copy of " + FileSpec$ + ".+" <br>        FileCopy FileSpec$, TempSpec$ <br>    Else <br>        'File New: so create a new empty document <br>        ErrStr$ = "Could not create a temporary file for the new report." <br>        Kill TempSpec$ <br>        Set db = CreateDatabase(TempSpec$, DB_LANG_GENERAL) <br>        i% = NewSiteHierarchyDatabase%(db, ErrStr$) <br>        db.Close <br>        If Not i% Then GoTo NewSiteHierarchyReportWindowErr <br>    End If <br>    On Error GoTo 0 <br> <br>    'Pass the new document the file name to use <br>    InitReporthConnect&amp; = hConnect&amp; <br>    InitReportFileSpec$ = FileSpec$ <br>    InitReportTempSpec$ = TempSpec$ <br>    If InitReportFileSpec$ &lt;= "" Then InitReportNewNumber% = InitReportNewNumber% + 1 <br> <br>    'Create a new document window <br>    On Error GoTo NewSiteHierarchyReportWindowErr <br>    ErrStr$ = "Could not create site report document window." <br>    Set frm = New frmSiteHierarchyReport <br>    Load frm <br>    On Error GoTo 0 <br> <br>    'Register document window with MDI <br>     <br>    i% = RegisterReportWindow%(frm, ErrStr$) <br>    If i% &lt;= 0 Then GoTo NewSiteHierarchyReportWindowErr <br> <br>    'Show the document window <br>    frm.Show <br>    NewSiteHierarchyReportWindow% = i% <br>    Exit Function <br> <br>NewSiteHierarchyReportWindowErr: <br>    On Error Resume Next <br>    If Not frm Is Nothing Then Unload frm <br>    If Not db Is Nothing Then db.Close <br>    Kill TempSpec$ <br>    Exit Function <br>End Function <br> <br>Function QuerySite%(db As Database, Site As SiteRec) <br>'   Queries the Site Hierarchy table and creates <br>'   a dynaset (dyQuerySite) used by FetchSite() <br>'   ordered by path <br>'Parameters <br>'   db - The database used for the query <br>'   Site - The following are used in the where clause <br>'       .Parent$ - Specifies the parent site code <br>'       .Code$   - Specifies the item (wildcard if enpty) <br>'Return Value: <br>'   True if no error, else False <br> <br>    Dim Sql$, Where$ <br> <br>    'Default return value False (Database Error) <br>    QuerySite% = False <br> <br>    ' Build the SQL statement <br>    Sql$ = "SELECT ItemNum, Parent, Code, Type, TypeName, Depth, Name FROM [Site Hierarchy]" <br> <br>    'Build the Where clause <br>    Where$ = "" <br> <br>    'Specify the parent <br>    If Site.Parent$ &gt; "" Then <br>        Where$ = " WHERE Parent = '" + Site.Parent$ + "'" <br>    Else: Where$ = " WHERE Depth = 0" <br>    End If <br> <br>    'Optionally specify the item (Site or Domain) <br>    If Site.Code$ &gt; "" Then <br>        If Where$ &gt; "" Then <br>            Where$ = Where$ + " AND " <br>        Else: Where$ = " WHERE " <br>        End If <br>        Where$ = Where$ + "Code = '" + Site.Code$ + "'" <br>    End If <br> <br>    'Append the where clause onto query string <br>    Sql$ = Sql$ + Where$ <br> <br>    'Perform the query <br>    On Error Resume Next <br>    Set dyQuerySite = db.OpenRecordset(Sql$, dbOpenDynaset) <br>    If Err &gt; 0 Then Exit Function <br>    On Error GoTo 0 <br> <br>    'Every thing is ok <br>    QuerySite% = True <br>End Function <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

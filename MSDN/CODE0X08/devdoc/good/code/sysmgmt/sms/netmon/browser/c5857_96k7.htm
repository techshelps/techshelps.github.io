<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BROWSER.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5857"></a>BROWSER.C</h2>
<pre><code><br>//============================================================================= <br>//  MODULE: browser.c <br>// <br>//  Description: <br>//  Bloodhound parser DLL for MS Browser <br>// <br>//  Modification History <br>//  Written by Scott Jiles with help from Stevehi 6/94 <br>//  7/5/94   Fix Periodicity time to zero values when needed. <br>//  7/10/94  Fix Server Type bits. <br>// <br>//============================================================================= <br> <br>#include "browser.h" <br> <br>HPROTOCOL hBrowser = NULL; <br> <br>typedef VOID (WINAPIV *FORMATPROC)(LPPROPERTYINST); <br>VOID WINAPI HandleHostAnnounce ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleAnncReq ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleBackReq ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleLocMstrAnnc ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleBecomeBackup ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleBackResp ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleMasterAnnc ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPIV FormatPeriodicity(LPPROPERTYINST lpPropertyInst ); <br>VOID WINAPI HandleElection ( HFRAME hFrame, LPBrowserFRAME BrowserFrame, DWORD BytesLeft ); <br>VOID WINAPIV FormatUpTime(LPPROPERTYINST lpPropertyInst ); <br>VOID WINAPI HandleReset ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br>VOID WINAPI HandleWkGrpAnnc ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ); <br> <br>//============================================================================= <br>//  Labeled Browser command set. <br>//============================================================================= <br>LABELED_BYTE Commands[] = <br>{ <br>    // first name is defined in .h file.  string will be used to describe <br>    // command. <br>    { HostAnnouncement,        "Host Announcement [0x01]"}, <br>    { AnnouncementRequest,     "Announcement Request [0x02]"}, <br>    { Election,                "Election [0x08]"}, <br>    { GetBackupListReq,        "Get Backup List Request [0x09]" }, <br>    { GetBackupListResp,       "Get Backup List Response [0x0a]" }, <br>    { BecomeBackup,            "Become Backup [0x0b]" }, <br>    { WkGroupAnnouncement,     "Workgroup Announcement [0x0c]" }, <br>    { MasterAnnouncement,      "Master Announcement [0x0d]" }, <br>    { ResetBrowserState,       "Reset Browser [0x0e]" }, <br>    { LocalMasterAnnouncement, "Local Master Announcement [0x0f]" } <br>}; <br> <br>#define COMMAND_SET_SIZE    (sizeof Commands / sizeof(LABELED_BYTE)) <br> <br>SET CommandSet = { COMMAND_SET_SIZE, Commands }; <br> <br> <br>//============================================================================= <br>//  Labeled Server Type bits used in Announces. <br>//============================================================================= <br>LABELED_BIT TypeBits[] = <br>{ <br>  {0, "Not Workstation", "Workstation",}, <br>  {1, "Not Server", "Server",}, <br>  {2, "Not SQL Server", "SQL Server",}, <br>{3, "Not Domain Controller", "Domain Controller",}, <br>{4, "Not Backup Controller", "Backup Controller",}, <br>{5, "Not Time Source", "Time Source Server",}, <br>{6, "Not Apple Server", "Apple Protocol Server",}, <br>{7, "Not Novell", "Novell Server",}, <br>{8, "Not Domain Member Server", "Domain Member Server",}, <br>{9, "Not Print Queue Server", "Print Queue Server",}, <br>{10, "Not Dialin Server", "Dialin Server",}, <br>{11, "Not Xenix Server", "Xenix Server",}, <br>{12, "Not NT System", "Windows NT System",}, <br>{13, "Not WFW System", "Windows for Workgroups",}, <br>{16, "Not Potential Browser", "Potential Browser Server",}, <br>{17, "Not Backup Browser", "Backup Browser Server",}, <br>{18, "Not Master Browser", "Master Browser Server",}, <br>{19, "Not Domain Master Browser", "Domain Master Browser",}, <br>{20, "Not OSF", "OSF",}, <br>{21, "Not VMS", "VMS",}, <br>{30, "Not Local List Only", "Local List Only",}, <br>{31, "Not Domain Enum", "Domain Enum",}, <br>}; <br> <br>SET TypeSet = {sizeof(TypeBits)/sizeof(LABELED_BIT), TypeBits }; <br> <br> <br>//============================================================================= <br>//  Labeled bits for Native OS type in Election frames. <br>//============================================================================= <br>LABELED_BIT OSBits[] = <br>{ <br>  {0, "Not WFW", "Windows for Workgroups"}, <br>  {1, "Not used", "Not used"}, <br>  {2, "Not used", "Not used"}, <br>  {3, "Not used", "Not used"}, <br>  {4, "Not Windows NT Workstation", "Windows NT Workstation",}, <br>  {5, "Not Advanced Server", "Advanced Server Windows NT",}, <br>{6, "Not used", "Not used"}, <br>{7, "Not used", "Not used"}, <br>}; <br> <br>SET OSSet = {sizeof(OSBits)/sizeof(LABELED_BIT), OSBits }; <br> <br> <br>//============================================================================= <br>//  Labeled bit set for Election Desire. <br>//============================================================================= <br>LABELED_BIT DesireBits[] = <br>{ <br>  {0, "Not Backup Browse Server", "Currently Backup Browse Server"}, <br>  {1, "Not Standby Browse Server", "Standby Browser Server"}, <br>  {2, "Not Master Browser", "Currently Master Browser Server"}, <br>  {3, "Not Domain Master Browser", "Domain Master Browse Server"}, <br>{4, "Not used", "Not used"}, <br>{5, "Not WINS Client", "Transport Running WINS Client"}, <br>{6, "Not used", "Not used"}, <br>{7, "Not Advanced Server", "Windows NT Advanced Server"}, <br>}; <br> <br>SET DesireSet = {sizeof(DesireBits)/sizeof(LABELED_BIT), DesireBits }; <br> <br> <br>//============================================================================= <br>//  Labeled bits for Reset option bits. <br>//============================================================================= <br>LABELED_BIT ResetBits[] = <br>{ <br>  {0, "Zero", "Stop Being Browse Master"}, <br>  {1, "Zero", "Reset Entire Browser State"}, <br>  {2, "Zero", "Shutdown Browser"}, <br>}; <br> <br>SET ResetSet = {sizeof(ResetBits)/sizeof(LABELED_BIT), ResetBits }; <br> <br> <br>//============================================================================= <br>//  Property Table. <br>// <br>//  Browser database. <br>//  The order of the database entry must match the <br>//property defines in browser.h <br>// <br>//============================================================================= <br>//#define Browser_COMMAND         0 <br>//#define Browser_SUMMARY         1 <br>//#define HA_UpdateCount2 <br>//#define HA_Periodicity3 <br>//#define HA_ServerName4 <br>//#define HA_VersionMajor5 <br>//#define HA_VersionMinor6 <br>//#define HA_Type_Flag_Summary7 <br>//#define HA_Type8 <br>//#define HA_ElectionVersion9 <br>//#define HA_Constant10 <br>//#define AR_Flags11 <br>//#define AR_Reply12 <br>//#define BREQ_RequestedCount13 <br>//#define BREQ_Token14 <br>//#define BRSP_ServerCnt15 <br>//#define BRSP_Token16 <br>//#define BRSP_ServerList17 <br>//#define MA_MasterName18 <br>//#define ELEC_Version19 <br>//#define ELEC_Criteria20 <br>//#define ELEC_TimeUp21 <br>//#define ELEC_MustBeZero22 <br>//#define ELEC_ServerName23 <br>//#define ELEC_OS_Summary24 <br>//#define ELEC_OS25 <br>//#define ELEC_Revision26 <br>//#define ELEC_Desire_Summary27 <br>//#define ELEC_Desire28 <br>//#define RST_Options29 <br>//#define WKGRP_CommentPtr30 <br>//#define WKGRP_Comment31 <br>//#define RST_Options_Summary32 <br>//============================================================================= <br>PROPERTYINFO BrowserDatabase[] = <br>{ <br>{   // Browser_COMMAND <br>0,0, <br>"Command", <br>"Browser Command", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_LABELED_SET, <br>&amp;CommandSet,// use this if you have labeled set <br>64,// avg line length <br>FormatPropertyInstance},        // generic format routine <br> <br>    {   // Browser_Summary <br>0,0,                    // handle, label <br>"Summary",              // prop name <br>"Browser Summary",      // status bar message <br>PROP_TYPE_SUMMARY,      // must have special prop type of summary <br>PROP_QUAL_LABELED_SET,         // qualifiier <br>&amp;CommandSet,                      // address of set struct <br>64,                     // max string size of display set <br>FormatBrowserSummary},  // instance data - format routine <br> <br>        {   // HA_UpdateCount <br>0,0, <br>"Update Count", <br>"Incremented when Announce Data Changes.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance},        // generic format routine <br> <br> <br>        {   // HA_Periodicity <br>0,0, <br>"Periodicity", <br>"Announcement cycle in milliseconds.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPeriodicity}, <br> <br>{   // HA_ServerName <br>0,0, <br>"Name", <br>"Name.", <br>PROP_TYPE_STRING,               // use this prop for char data <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // HA_VersionMajor <br>0,0, <br>"Major Version", <br>"Major Version Number.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // HA_VersionMinor <br>0,0, <br>"Minor Version", <br>"Minor Version Number.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // HA_Type_Flag_Summary <br>0,0, <br>"Server Type Summary", <br>"Server Type Summary.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // HA_Type <br>0,0, <br>"Server Type", <br>"Server Type.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_FLAGS, <br>&amp;TypeSet, <br>64 * 22,           // Must have space for all label bits. <br>FormatPropertyInstance}, <br> <br>{   // HA_ElectionVersion <br>0,0, <br>"Browser Election Version", <br>"Browser Election Version.", <br>PROP_TYPE_WORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // HA_Constant <br>0,0, <br>"Browser Constant", <br>"Browser Constant.", <br>PROP_TYPE_WORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // AR_Flags <br>0,0, <br>"Unused Flags", <br>"Unused Flags.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br> <br>{   // AR_Reply <br>0,0, <br>"Reply System Name", <br>"Send Reply to this name [Not used for Windows NT].", <br>PROP_TYPE_STRING, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // BREQ_RequestedCount <br>0,0, <br>"Get Backup List Requested Count", <br>"Get Backup List Requested Count.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // BREQ_Token <br>0,0, <br>"Backup Request Token", <br>"Correlates Request with Response.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // BRSP_ServerCnt <br>0,0, <br>"Backup Server Count", <br>"Number of Backup Servers returned.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // BRSP_Token <br>0,0, <br>"Backup Response Token", <br>"Correlates Request with Response.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // BRSP_ServerList <br>0,0, <br>"Backup Servers", <br>"List of Backup Servers.", <br>PROP_TYPE_STRING, <br>PROP_QUAL_NONE, <br>0, <br>100, <br>FormatPropertyInstance}, <br> <br> <br>{   // MA_MasterName <br>0,0, <br>"Master Name", <br>"Master Annoucement Server Name.", <br>PROP_TYPE_STRING, <br>PROP_QUAL_NONE, <br>0, <br>100, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_Version <br>0,0, <br>"Election Version", <br>"Election Version.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_Criteria <br>0,0, <br>"Election Criteria", <br>"Election Criteria.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>100, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_TimeUp <br>0,0, <br>"Server Up Time [DD:hh:mm:ss] ", <br>"Amount of Time Server has been Running.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>80, <br>FormatUpTime}, <br> <br>{   // ELEC_MustBeZero <br>0,0, <br>"Must be zero", <br>"Must be zero.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>80, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_ServerName <br>0,0, <br>"Election Server Name", <br>"Election Server Name.", <br>PROP_TYPE_STRING, <br>PROP_QUAL_NONE, <br>0, <br>80, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_OS_Summary <br>0,0, <br>"Election OS Summary", <br>"Election OS Summary.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_OS <br>0,0, <br>"Native OS", <br>"Native Operating System.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_FLAGS, <br>&amp;OSSet, <br>64 * 8,           // Must have space for all label bits. <br>FormatPropertyInstance}, <br> <br> <br>{   // ELEC_Revision <br>0,0, <br>"Election Revision", <br>"Election Revision.", <br>PROP_TYPE_WORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_Desire_Summary <br>0,0, <br>"Election Desire Summary", <br>"Election Desire Summary.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // ELEC_Desire <br>0,0, <br>"Election Desire", <br>"Election Desire.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_FLAGS, <br>&amp;DesireSet, <br>64 * 8,           // Must have space for all label bits. <br>FormatPropertyInstance}, <br> <br>{   // RST_Options <br>0,0, <br>"Reset Options", <br>"Reset Options.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_FLAGS, <br>&amp;ResetSet, <br>64 * 4,           // Must have space for all label bits. <br>FormatPropertyInstance}, <br> <br>{   // WKGRP_CommentPtr <br>0,0, <br>"Comment Pointer", <br>"Comment Pointer.", <br>PROP_TYPE_DWORD, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // WKGRP_Comment <br>0,0, <br>"Server Name", <br>"Server Source Name.", <br>PROP_TYPE_STRING, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br> <br>{   // RST_Options_Summary <br>0,0, <br>"Options Summary", <br>"Reset Frame Options Summary.", <br>PROP_TYPE_BYTE, <br>PROP_QUAL_NONE, <br>0, <br>64, <br>FormatPropertyInstance}, <br>}; <br> <br>DWORD nBrowserProperties = ((sizeof BrowserDatabase) / PROPERTYINFO_SIZE); <br> <br> <br>//============================================================================= <br>//  Protocol entry points. <br>//============================================================================= <br>extern VOID   WINAPI BrowserRegister(HPROTOCOL); <br>extern VOID   WINAPI BrowserDeregister(HPROTOCOL); <br>extern LPBYTE WINAPI BrowserRecognizeFrame(HFRAME, LPVOID, LPVOID, DWORD, DWORD, HPROTOCOL, DWORD, LPDWORD, LPHPROTOCOL, LPDWORD); <br>extern LPBYTE WINAPI BrowserAttachProperties(HFRAME, LPVOID, LPVOID, DWORD, DWORD, HPROTOCOL, DWORD, DWORD); <br>extern DWORD  WINAPI BrowserFormatProperties(HFRAME, LPVOID, LPVOID, DWORD, LPPROPERTYINST); <br> <br>ENTRYPOINTS BrowserEntryPoints = <br>{ <br>    BrowserRegister, <br>    BrowserDeregister, <br>    BrowserRecognizeFrame, <br>    BrowserAttachProperties, <br>    BrowserFormatProperties <br>}; <br> <br> <br>//============================================================================= <br>//  FUNCTION: BrowserRegister() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>//============================================================================= <br>VOID WINAPI BrowserRegister(HPROTOCOL hBrowserProtocol) <br>{ <br>    register DWORD i; <br> <br>    //========================================================================= <br>    //  Create the property database. <br>    //========================================================================= <br> <br>    CreatePropertyDatabase(hBrowserProtocol, nBrowserProperties); <br> <br>    for(i = 0; i &lt; nBrowserProperties; ++i) <br>    { <br>AddProperty(hBrowserProtocol, &amp;BrowserDatabase[i]); <br>    } <br>} <br> <br>//============================================================================= <br>//  FUNCTION: Deregister() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>//============================================================================= <br>VOID WINAPI BrowserDeregister(HPROTOCOL hBrowserProtocol) <br>{ <br>    DestroyPropertyDatabase(hBrowserProtocol); <br>} <br> <br>//============================================================================= <br>//  FUNCTION: BrowserRecognizeFrame() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>//============================================================================= <br>LPBYTE WINAPI BrowserRecognizeFrame(HFRAME          hFrame,                     //... frame handle. <br>    LPBYTE          MacFrame,                   //... Frame pointer. <br>    LPBrowserFRAME  BrowserFrame, <br>    DWORD           MacType,                    //... MAC type. <br>    DWORD           BytesLeft,                  //... Bytes left. <br>    HPROTOCOL       hPreviousProtocol,          //... Previous protocol or NULL if none. <br>    DWORD           nPreviousProtocolOffset,    //... Offset of previous protocol. <br>    LPDWORD         ProtocolStatusCode,         //... Pointer to return status code in. <br>    LPHPROTOCOL     hNextProtocol,              //... Next protocol to call (optional). <br>    LPDWORD         InstData)                   //... Next protocol instance data. <br>{ <br>    // Will only be called if SMB parser finds Transact <br>    // with path = \mailslot\browse. <br> <br>    // Make sure there is some data left. <br>    if (BytesLeft == 0) { <br>*ProtocolStatusCode = PROTOCOL_STATUS_NOT_RECOGNIZED; <br>return (LPBYTE) BrowserFrame; <br>    } <br> <br>    // should probably check bytes left for max and min length. <br>    // need to find max and min length. <br>    if (BytesLeft &lt; 2 ) { // Reset frame has 2 bytes. <br>*ProtocolStatusCode = PROTOCOL_STATUS_NOT_RECOGNIZED; <br>return (LPBYTE) BrowserFrame; <br>    } <br> <br>    // Make sure command is between max and min command code. <br>    if ((BrowserFrame-&gt;command &gt;= HostAnnouncement) &amp; <br>       (BrowserFrame-&gt;command &lt;= LocalMasterAnnouncement) ) { <br>    *ProtocolStatusCode = PROTOCOL_STATUS_CLAIMED; <br>    return NULL;  //  null means I claim the rest <br>    } <br> <br>    #ifdef DEBUG <br>    DebugBreak(); <br>    #endif <br> <br>    // should never hit this point. <br>    *ProtocolStatusCode = PROTOCOL_STATUS_NOT_RECOGNIZED; <br>    return (LPBYTE) BrowserFrame; <br> <br>} <br> <br>//============================================================================= <br>//  FUNCTION: BrowserAttachProperties() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>//============================================================================= <br>LPBYTE WINAPI BrowserAttachProperties(HFRAME          hFrame, <br>      LPBYTE          Frame, <br>      LPBrowserFRAME  BrowserFrame, <br>      DWORD           MacType, <br>      DWORD           BytesLeft, <br>      HPROTOCOL       hPreviousProtocol, <br>      DWORD           nPreviousProtocolOffset, <br>      DWORD           InstData) <br>{ <br> <br>    //========================================================================= <br>    //  Attach Summary. <br>    //========================================================================= <br> <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[Browser_SUMMARY].hProperty, <br>   BytesLeft,   // claim the remaining bytes <br>   BrowserFrame, <br>   0, 0, 0);    // Summary should be 0. <br> <br>    //========================================================================= <br>    //  Attach Command. <br>    //========================================================================= <br> <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[Browser_COMMAND].hProperty, <br>   sizeof(BYTE), <br>   BrowserFrame, <br>   0, 1, 0);  // Detail other than 0 for drill down. <br> <br>    switch( BrowserFrame-&gt;command ) <br>    { <br>case HostAnnouncement: <br>    HandleHostAnnounce ( hFrame, BrowserFrame ); <br>    break; <br> <br>case AnnouncementRequest: <br>    HandleAnncReq ( hFrame, BrowserFrame ); <br>    break; <br> <br>case Election: <br>    HandleElection ( hFrame, BrowserFrame, BytesLeft); <br>    break; <br> <br>case GetBackupListReq: <br>    HandleBackReq ( hFrame, BrowserFrame ); <br>    break; <br> <br>case GetBackupListResp: <br>    HandleBackResp ( hFrame, BrowserFrame ); <br>    break; <br> <br>case BecomeBackup: <br>    HandleBecomeBackup ( hFrame, BrowserFrame ); <br>    break; <br> <br>case WkGroupAnnouncement: <br>    HandleWkGrpAnnc ( hFrame, BrowserFrame ); <br>    break; <br> <br>case MasterAnnouncement: <br>    HandleMasterAnnc ( hFrame, BrowserFrame ); <br>    break; <br> <br>case ResetBrowserState: <br>    HandleReset ( hFrame, BrowserFrame ); <br>    break; <br> <br>case LocalMasterAnnouncement: <br>    HandleLocMstrAnnc ( hFrame, BrowserFrame ); <br>    break; <br> <br>default: <br>    // CommandString = ""; <br>    break; <br>    } <br>    return NULL;  //must return null from attachproperies. <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// FormatProperties (Bloodhound parser DLL entrypoint) <br>// <br>/////////////////////////////////////////////////////////////////////////// <br>DWORD WINAPI BrowserFormatProperties(HFRAME hFrame, <br>     LPBYTE MacFrame, <br>     LPBYTE BrowserFrame, <br>     DWORD  nPropertyInsts, <br>     LPPROPERTYINST p) <br>{ <br>    while(nPropertyInsts--) <br>    { <br>if (p-&gt;lpPropertyInfo-&gt;InstanceData != NULL ) <br>    ((FORMATPROC)p-&gt;lpPropertyInfo-&gt;InstanceData)(p); <br>p++; <br>    } <br>    return BHERR_SUCCESS; <br>} <br> <br>//============================================================================== <br>//  FUNCTION: FormatBrowserSummary() <br>// <br>//  Modification History <br>//  Scottji             6/94        Created <br>//  Tom Laird-McConnell 07/20/94    Modified to have more info on summary line <br>//  Scottji             07/25/94    Modified Election. Pass BytesLeft.  Add Force. <br>//  Tom Laird-McConnell 08/31/94    Converted strings to ANSI <br>//============================================================================== <br>VOID WINAPIV FormatBrowserSummary(LPPROPERTYINST lpPropertyInst ) <br>{ <br>    LPBrowserFRAME BrowserFrame; <br>//    CHAR * CommandString; <br>    char szAnsiName[255]; <br> <br>    BrowserFrame = (LPBrowserFRAME) lpPropertyInst-&gt;lpData; <br> <br>//    CommandString = (char *) malloc (sizeof(char) * 80); <br> <br>switch( BrowserFrame-&gt;command ) <br>{ <br>    case HostAnnouncement: <br>        { <br>            LP_HA_FRAME HA_Frame = (LP_HA_FRAME) BrowserFrame; <br> <br>            // convert string to ANSI <br>            OemToChar( (LPCSTR)&amp;HA_Frame-&gt;ServerName, szAnsiName); <br> <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "%s %s", Commands[0].Label, szAnsiName); <br>    break; <br>        } <br> <br>    case AnnouncementRequest: <br>        { <br>            LP_ANNC_REQ AR_Frame = (LP_ANNC_REQ) BrowserFrame; <br> <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, Commands[1].Label); <br>    break; <br>        } <br> <br>    case Election: <br>        { <br>            LP_ELECTION ELEC_Frame = (LP_ELECTION) BrowserFrame; <br> <br>            if (ELEC_Frame-&gt;Criteria == (ULONG) NULL ) { <br>                wsprintf(lpPropertyInst-&gt;szPropertyText, "%s [Force]", Commands[2].Label); <br>            } <br>            else  <br>            { <br>                // convert string to ANSI <br>                OemToChar( (LPCSTR)&amp;ELEC_Frame-&gt;ServerName, szAnsiName); <br>                 <br>                wsprintf(lpPropertyInst-&gt;szPropertyText, "%s %s", Commands[2].Label, szAnsiName); <br>            } <br>    break; <br>        } <br> <br>    case GetBackupListReq: <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, Commands[3].Label); <br>    break; <br> <br>    case GetBackupListResp: <br>        { <br>            LP_BACK_RESP BRSP_Frame = (LP_BACK_RESP) BrowserFrame; <br> <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "%s %d Servers", Commands[4].Label, BRSP_Frame-&gt;BackupServerCount); <br>    break; <br>        } <br> <br>    case BecomeBackup: <br>        { <br>            LP_BECOME_BACKUP BB_Frame = (LP_BECOME_BACKUP) BrowserFrame; <br> <br>            // convert string to ANSI <br>            OemToChar( (LPCSTR)&amp;BB_Frame-&gt;BrowserToPromote, szAnsiName); <br>             <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "%s Name = %s",  Commands[5].Label, szAnsiName); <br>    break; <br>        } <br> <br>    case WkGroupAnnouncement: <br>        { <br>            LP_WKGRP_FRAME WKGRP_Frame = (LP_WKGRP_FRAME) BrowserFrame; <br> <br>            // convert string to ANSI <br>            OemToChar( (LPCSTR)&amp;WKGRP_Frame-&gt;ServerName, szAnsiName); <br>             <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "%s %s", Commands[6].Label, szAnsiName); <br>    break; <br>        } <br> <br>    case MasterAnnouncement: <br>        { <br>            LP_MASTER_ANNC MA_Frame = (LP_MASTER_ANNC) BrowserFrame; <br> <br>            // convert string to ANSI <br>            OemToChar( (LPCSTR)&amp;MA_Frame-&gt;MasterName, szAnsiName); <br> <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "%s %s", Commands[7].Label, szAnsiName); <br>    break; <br>        } <br> <br>    case ResetBrowserState: <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, Commands[8].Label); <br>    break; <br> <br>    case LocalMasterAnnouncement: <br>        { <br>            LP_HA_FRAME HA_Frame = (LP_HA_FRAME) BrowserFrame; <br> <br>            // convert string to ANSI <br>            OemToChar( (LPCSTR)&amp;HA_Frame-&gt;ServerName, szAnsiName); <br> <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "%s %s", Commands[9].Label, szAnsiName); <br>    break; <br>        } <br> <br>    default: <br>            wsprintf(lpPropertyInst-&gt;szPropertyText, "Unknown Command?"); <br>    break; <br>} <br>} <br> <br> <br> <br> <br>//============================================================================== <br>//  FUNCTION: HandleHostAnnouce() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleHostAnnounce ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_HA_FRAME HA_Frame; <br> <br>    // HA Update Count <br>    HA_Frame = (LP_HA_FRAME) BrowserFrame; <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_UpdateCount].hProperty, <br>   sizeof(BYTE), <br>   &amp;HA_Frame-&gt;UpdateCount, <br>   0, 1, 0); <br>    // Periodicity;     announcement cycle in milliseconds <br>    HA_Frame = (LP_HA_FRAME) BrowserFrame; <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Periodicity].hProperty, <br>   sizeof(ULONG), <br>   &amp;HA_Frame-&gt;Periodicity, <br>   0, 1, 0); <br>    // HA_ServerName <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_ServerName].hProperty, <br>   LM20_CNLEN+1, <br>   &amp;HA_Frame-&gt;ServerName, <br>   0, 1, 0); <br>    // HA_VersionMajor <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_VersionMajor].hProperty, <br>   sizeof(BYTE), <br>   &amp;HA_Frame-&gt;VersionMajor, <br>   0, 1, 0); <br>    // HA_VersionMinor <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_VersionMinor].hProperty, <br>   sizeof(BYTE), <br>   &amp;HA_Frame-&gt;VersionMinor, <br>   0, 1, 0); <br>    // HA_Type_Flag_Summary <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Type_Flag_Summary].hProperty, <br>   sizeof(ULONG), <br>   &amp;HA_Frame-&gt;Type, <br>   0, 1, 0); <br>    // HA_Type <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Type].hProperty, <br>   sizeof(ULONG), <br>   &amp;HA_Frame-&gt;Type, <br>   0, 2, 0); <br>    // HA_ElectionVersion <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_ElectionVersion].hProperty, <br>   sizeof(WORD), <br>   &amp;HA_Frame-&gt;HAElectionVersion, <br>   0, 1, 0); <br>    // HA_Constant <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Constant].hProperty, <br>   sizeof(WORD), <br>   &amp;HA_Frame-&gt;HAConstant, <br>   0, 1, 0); <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleAnncReq() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br> <br>VOID WINAPI HandleAnncReq ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_ANNC_REQ AR_Frame; <br>    int len; <br> <br>    AR_Frame = (LP_ANNC_REQ) BrowserFrame; <br> <br>    // AR_Flags <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[AR_Flags].hProperty, <br>   sizeof(UCHAR), <br>   &amp;AR_Frame-&gt;Flags, <br>   0, 1, 0); <br>    len = strlen ( &amp;AR_Frame-&gt;Reply[0] ); <br>    // AR_Reply <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[AR_Reply].hProperty, <br>   len, <br>   &amp;AR_Frame-&gt;Reply, <br>   0, 1, 0); <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleBackReq() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleBackReq ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_BACK_REQ_FRAME BREQ_Frame; <br> <br>    BREQ_Frame = (LP_BACK_REQ_FRAME) BrowserFrame; <br> <br>    // BREQ_RequestedCount <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[BREQ_RequestedCount].hProperty, <br>   sizeof(UCHAR), <br>   &amp;BREQ_Frame-&gt;RequestedCount, <br>   0, 1, 0); <br>    // BREQ_Token <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[BREQ_Token].hProperty, <br>   sizeof(LONG), <br>   &amp;BREQ_Frame-&gt;Token, <br>   0, 1, 0); <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleLocMstrAnnc() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleLocMstrAnnc ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_HA_FRAME HA_Frame; <br> <br>    //========================================================================= <br>    //  Same as Host Announcement frame. <br>    //========================================================================= <br> <br>    // HA Update Count <br>    HA_Frame = (LP_HA_FRAME) BrowserFrame; <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_UpdateCount].hProperty, <br>   sizeof(BYTE), </code></pre>
<p>
</p>
<pre><code>&amp;HA_Frame-&gt;UpdateCount, <br>   0, 1, 0); <br>    // Periodicity;     announcement cycle in milliseconds <br> <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Periodicity].hProperty, <br>   sizeof(ULONG), <br>   &amp;HA_Frame-&gt;Periodicity, <br>   0, 1, 0); <br>    // HA_ServerName <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_ServerName].hProperty, <br>   LM20_CNLEN+1, <br>   &amp;HA_Frame-&gt;ServerName, <br>   0, 1, 0); <br>    // HA_VersionMajor <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_VersionMajor].hProperty, <br>   sizeof(BYTE), <br>   &amp;HA_Frame-&gt;VersionMajor, <br>   0, 1, 0); <br>    // HA_VersionMinor <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_VersionMinor].hProperty, <br>   sizeof(BYTE), <br>   &amp;HA_Frame-&gt;VersionMinor, <br>   0, 1, 0); <br>    // HA_Type_Flag_Summary <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Type_Flag_Summary].hProperty, <br>   sizeof(ULONG), <br>   &amp;HA_Frame-&gt;Type, <br>   0, 1, 0); <br>    // HA_Type <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Type].hProperty, <br>   sizeof(ULONG), <br>   &amp;HA_Frame-&gt;Type, <br>   0, 2, 0); <br>    // HA_ElectionVersion <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_ElectionVersion].hProperty, <br>   sizeof(WORD), <br>   &amp;HA_Frame-&gt;HAElectionVersion, <br>   0, 1, 0); <br>    // HA_Constant <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Constant].hProperty, <br>   sizeof(WORD), <br>   &amp;HA_Frame-&gt;HAConstant, <br>   0, 1, 0); <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleBecomeBackup() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleBecomeBackup ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_BECOME_BACKUP BB_Frame; <br>    int len; <br> <br>    BB_Frame = (LP_BECOME_BACKUP) BrowserFrame; <br> <br>    // BrowserToPromote = HA_ServerName <br>    len = strlen ( &amp;BB_Frame-&gt;BrowserToPromote[0] ); <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_ServerName].hProperty, <br>   len, <br>   &amp;BB_Frame-&gt;BrowserToPromote, <br>   0, 1, 0); <br>} <br> <br> <br>//============================================================================== <br>//  FUNCTION: HandleBackResp() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleBackResp ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_BACK_RESP BRSP_Frame; <br>    int i, k, len, offset; <br> <br>    BRSP_Frame = (LP_BACK_RESP) BrowserFrame; <br>    i = (int)BRSP_Frame-&gt;BackupServerCount; <br> <br>    // BRSP_ServerCnt <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[BRSP_ServerCnt].hProperty, <br>   sizeof(UCHAR), <br>   &amp;BRSP_Frame-&gt;BackupServerCount, <br>   0, 1, 0); <br>    // BRSP_Token <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[BRSP_Token].hProperty, <br>   sizeof(ULONG), <br>   &amp;BRSP_Frame-&gt;Token, <br>   0, 1, 0); <br> <br>    for (k = 1, offset = 0 ; k &lt;= i; k++) { <br>        len = strlen ( &amp;BRSP_Frame-&gt;BackupServerList[offset] ); <br>        // BRSP_ServerList <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[BRSP_ServerList].hProperty, <br>   len, <br>   &amp;BRSP_Frame-&gt;BackupServerList[offset], <br>   0, 1, 0); <br>        offset = offset + 1 + strlen( (UCHAR *) &amp;BRSP_Frame-&gt;BackupServerList[offset] ); <br>    } <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleMasterAnnc() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleMasterAnnc ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_MASTER_ANNC MA_Frame; <br>    int len; <br> <br>    MA_Frame = (LP_MASTER_ANNC) BrowserFrame; <br>    len = strlen ( &amp;MA_Frame-&gt;MasterName[0] ); <br> <br>    // MA_MasterName <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[MA_MasterName].hProperty, <br>   len, <br>   &amp;MA_Frame-&gt;MasterName, <br>   0, 1, 0); <br>} <br> <br>//============================================================================== <br>//  FUNCTION: FormatPeriodicity() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPIV FormatPeriodicity(LPPROPERTYINST lpPropertyInst ) <br>{ <br>    ULPDWORD period; <br>    ULONG value; <br>    char CommandString[80]; <br> <br>    period =  (ULPDWORD)lpPropertyInst-&gt;lpData; <br>    value = (((ULONG)* period) / 1000) /60 ; <br>    _ultoa (value, CommandString, 10); <br>    strcpy (lpPropertyInst-&gt;szPropertyText, "Annoucement Interval [minutes] = "); <br>    strcat ( lpPropertyInst-&gt;szPropertyText, CommandString ); <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleElection() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>//  Scottji             07/25/94    Modified Election. Add Force. <br>//                                  Pass BytesLeft.  Check length before attach. <br>// <br>//============================================================================== <br>VOID WINAPI HandleElection ( HFRAME hFrame, LPBrowserFRAME BrowserFrame, DWORD BytesLeft ) <br>{ <br>    LP_ELECTION ELEC_Frame; <br>    int len; <br>    char *p; <br> <br>    ELEC_Frame = (LP_ELECTION) BrowserFrame; <br>    len = strlen ( &amp;ELEC_Frame-&gt;ServerName[0] ); <br> <br>    if (BytesLeft &gt;= 2 ) { <br>        // ELEC_Version <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_Version].hProperty, <br>   sizeof(BYTE), <br>   &amp;ELEC_Frame-&gt;Version, <br>   0, 1, 0); <br>    } <br> <br>    if (BytesLeft &gt;= 6  ) { <br>        // ELEC_Criteria <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_Criteria].hProperty, <br>   sizeof(DWORD), <br>   &amp;ELEC_Frame-&gt;Criteria, <br>   0, 1, 0); <br> <br>        p = (char *) &amp;ELEC_Frame-&gt;Criteria; <br>        // ELEC_OS_Summary <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_OS_Summary].hProperty, <br>   sizeof(BYTE), <br>   p+3, <br>   0, 2, 0); <br>        // ELEC_OS <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_OS].hProperty, <br>   sizeof(BYTE), <br>   p+3, <br>   0, 3, 0); <br>        // ELEC_Revision <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_Revision].hProperty, <br>   sizeof(WORD), <br>   p+1, <br>   0, 2, 0); <br>        // ELEC_Desire_Summary <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_Desire_Summary].hProperty, <br>   sizeof(BYTE), <br>   p, <br>   0, 2, 0); <br> <br>        // ELEC_Desire <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_Desire].hProperty, <br>   sizeof(BYTE), <br>   p, <br>   0, 3, 0); <br>    } <br> <br>    if (BytesLeft &gt;= 10 ) { <br>        // ELEC_TimeUp <br>        AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_TimeUp].hProperty, <br>   sizeof(DWORD), <br>   &amp;ELEC_Frame-&gt;TimeUp, <br>   0, 1, 0); <br>    } <br> <br>    if ((BytesLeft &gt; 14 ) &amp; (BytesLeft &lt;50 ) ) { <br>    // ELEC_ServerName <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[ELEC_ServerName].hProperty, <br>   len, <br>   &amp;ELEC_Frame-&gt;ServerName, <br>   0, 1, 0); <br>    } <br>} <br> <br>//============================================================================== <br>//  FUNCTION: FormatUpTime() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPIV FormatUpTime(LPPROPERTYINST lpPropertyInst ) <br>{ <br>    ULPDWORD value; <br>    ULONG time, days, hours, minutes, seconds; <br>    char CommandString[80]; <br>    ULONG ONEDAY, ONEHOUR, ONEMINUTE; <br> <br>    ONEDAY =   86400000; <br>    ONEHOUR =  3600000; <br>    ONEMINUTE =  60000; <br>    value =  (ULPDWORD)lpPropertyInst-&gt;lpData; <br>    time = (ULONG) *value; <br> <br>    if (time &gt;= ONEDAY) { <br>        days = time / ONEDAY; <br>        time = time - (days * ONEDAY); <br>    } <br>    else { <br>        days = 0; <br>    } <br>    if (time &gt;= ONEHOUR){ <br>        hours = time / ONEHOUR; <br>        time = time - (hours * ONEHOUR); <br>    } <br>    else { <br>        hours = 0; <br>    } <br>    if (time &gt;= ONEMINUTE) { <br>        minutes = time / ONEMINUTE; <br>        time = time - (minutes * ONEMINUTE); <br>    } <br>    else { <br>        minutes = 0; <br>    } <br>    if(seconds != 0) { <br>        seconds = time / 1000; <br>    } <br>    else { <br>        seconds = 0; <br>    } <br> <br>    strcpy (lpPropertyInst-&gt;szPropertyText, "Server Up Time [DD:hh:mm:ss] "); <br>    if( (ULONG)*value != 0 ) { <br>    _ultoa (days, CommandString, 10); <br>    strcat (lpPropertyInst-&gt;szPropertyText, CommandString ); <br>    strcat (lpPropertyInst-&gt;szPropertyText, ":"); <br>    _ultoa (hours, CommandString, 10); <br>    strcat (lpPropertyInst-&gt;szPropertyText, CommandString ); <br>    strcat (lpPropertyInst-&gt;szPropertyText, ":"); <br>    _ultoa (minutes, CommandString, 10); <br>    strcat (lpPropertyInst-&gt;szPropertyText, CommandString ); <br>    strcat (lpPropertyInst-&gt;szPropertyText, ":"); <br>    _ultoa (seconds, CommandString, 10); <br>    strcat (lpPropertyInst-&gt;szPropertyText, CommandString ); <br>    } <br>    else { <br>    strcat (lpPropertyInst-&gt;szPropertyText, "Null"); <br> } <br>} <br> <br>//============================================================================== <br>//  FUNCTION: HandleReset() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleReset ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_RESET RST_Frame; <br> <br>    RST_Frame = (LP_RESET) BrowserFrame; <br> <br> <br>    // RST_Options_Summary <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[RST_Options_Summary].hProperty, <br>   sizeof(BYTE), <br>   &amp;RST_Frame-&gt;Options, <br>   0, 1, 0); <br>    // RST_Options <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[RST_Options].hProperty, <br>   sizeof(BYTE), <br>   &amp;RST_Frame-&gt;Options, <br>   0, 2, 0); <br>} <br> <br> <br>//============================================================================== <br>//  FUNCTION: HandleWkGrpAnnc() <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//============================================================================== <br>VOID WINAPI HandleWkGrpAnnc ( HFRAME hFrame, LPBrowserFRAME BrowserFrame ) <br>{ <br>    LP_WKGRP_FRAME WKGRP_Frame; <br>    int len; <br> <br>    //========================================================================= <br>    //  Same as Host Announcement frame. <br>    //========================================================================= <br> <br>    WKGRP_Frame = (LP_WKGRP_FRAME) BrowserFrame; <br>    //  Update Count <br> <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_UpdateCount].hProperty, <br>   sizeof(BYTE), <br>   &amp;WKGRP_Frame-&gt;UpdateCount, <br>   0, 1, 0); <br>    // Periodicity;     announcement cycle in milliseconds <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Periodicity].hProperty, <br>   sizeof(ULONG), <br>   &amp;WKGRP_Frame-&gt;Periodicity, <br>   0, 1, 0); <br>    // ServerName <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_ServerName].hProperty, <br>   LM20_CNLEN+1, <br>   &amp;WKGRP_Frame-&gt;ServerName, <br>   0, 1, 0); <br>    // VersionMajor <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_VersionMajor].hProperty, <br>   sizeof(BYTE), <br>   &amp;WKGRP_Frame-&gt;VersionMajor, <br>   0, 1, 0); <br>    // VersionMinor <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_VersionMinor].hProperty, <br>   sizeof(BYTE), <br>   &amp;WKGRP_Frame-&gt;VersionMinor, <br>   0, 1, 0); <br>    // Type_Flag_Summary <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Type_Flag_Summary].hProperty, <br>   sizeof(ULONG), <br>   &amp;WKGRP_Frame-&gt;Type, <br>   0, 1, 0); <br>    // Type <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[HA_Type].hProperty, <br>   sizeof(ULONG), <br>   &amp;WKGRP_Frame-&gt;Type, <br>   0, 2, 0); <br>    // WKGRP_CommentPtr <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[WKGRP_CommentPtr].hProperty, <br>   sizeof(DWORD), <br>   &amp;WKGRP_Frame-&gt;CommentPtr, <br>   0, 1, 0); <br>    len = strlen ( &amp;WKGRP_Frame-&gt;Comment[0] ); <br>    // WKGRP_Comment <br>    AttachPropertyInstance(hFrame, <br>   BrowserDatabase[WKGRP_Comment].hProperty, <br>   len, <br>   &amp;WKGRP_Frame-&gt;Comment, <br>   0, 1, 0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

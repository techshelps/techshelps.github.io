<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REMAPI.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5861"></a>REMAPI.C</h2>
<pre><code><br>//============================================================================= <br>//  MODULE: RemAPI.c <br>// <br>//  Description: <br>// <br>//  Bloodhound Parser DLL for SMB Remote APIs <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================= <br> <br>#include "RemAPI.h" <br> <br> <br>//============================================================================= <br>//  Forward references. <br>//============================================================================= <br> <br>VOID WINAPIV RemAPIFormatSummary(LPPROPERTYINST lpPropertyInst); <br> <br> <br> <br>//============================================================================= <br>//  Labeled RemAPI command set. <br>//============================================================================= <br>        <br>LABELED_WORD Commands[] =  <br>{ <br>    {     0,    "NetShareEnum"}, <br>    {     1,    "NetShareGetInfo"}, <br>    {     2,    "NetShareSetInfo"}, <br>    {     3,    "NetShareAdd"}, <br>    {     4,    "NetShareDel"}, <br>    {     5,    "NetShareCheck"}, <br>    {     6,    "NetSessionEnum"}, <br>    {     7,    "NetSessionGetInfo"}, <br>    {     8,    "NetSessionDel"}, <br>    {     9,    "NetConnectionEnum"}, <br>    {    10,    "NetFileEnum"}, <br>    {    11,    "NetFileGetInfo"}, <br>    {    12,    "NetFileClose"}, <br>    {    13,    "NetServerGetInfo"}, <br>    {    14,    "NetServerSetInfo"}, <br>    {    15,    "NetServerDiskEnum"}, <br>    {    16,    "NetServerAdminCommand"}, <br>    {    17,    "NetAuditOpen"}, <br>    {    18,    "NetAuditClear"}, <br>    {    19,    "NetErrorLogOpen"}, <br>    {    20,    "NetErrorLogClear"}, <br>    {    21,    "NetCharDevEnum"}, <br>    {    22,    "NetCharDevGetInfo"}, <br>    {    23,    "NetCharDevControl"}, <br>    {    24,    "NetCharDevQEnum"}, <br>    {    25,    "NetCharDevQGetInfo"}, <br>    {    26,    "NetCharDevQSetInfo"}, <br>    {    27,    "NetCharDevQPurge"}, <br>    {    28,    "NetCharDevQPurgeSelf"}, <br>    {    29,    "NetMessageNameEnum"}, <br>    {    30,    "NetMessageNameGetInfo"}, <br>    {    31,    "NetMessageNameAdd"}, <br>    {    32,    "NetMessageNameDel"}, <br>    {    33,    "NetMessageNameFwd"}, <br>    {    34,    "NetMessageNameUnFwd"}, <br>    {    35,    "NetMessageBufferSend"}, <br>    {    36,    "NetMessageFileSend"}, <br>    {    37,    "NetMessageLogFileSet"}, <br>    {    38,    "NetMessageLogFileGet"}, <br>    {    39,    "NetServiceEnum"}, <br>    {    40,    "NetServiceInstall"}, <br>    {    41,    "NetServiceControl"}, <br>    {    42,    "NetAccessEnum"}, <br>    {    43,    "NetAccessGetInfo"}, <br>    {    44,    "NetAccessSetInfo"}, <br>    {    45,    "NetAccessAdd"}, <br>    {    46,    "NetAccessDel"}, <br>    {    47,    "NetGroupEnum"}, <br>    {    48,    "NetGroupAdd"}, <br>    {    49,    "NetGroupDel"}, <br>    {    50,    "NetGroupAddUser"}, <br>    {    51,    "NetGroupDelUser"}, <br>    {    52,    "NetGroupGetUsers"}, <br>    {    53,    "NetUserEnum"}, <br>    {    54,    "NetUserAdd"}, <br>    {    55,    "NetUserDel"}, <br>    {    56,    "NetUserGetInfo"}, <br>    {    57,    "NetUserSetInfo"}, <br>    {    58,    "NetUserPasswordSet"}, <br>    {    59,    "NetUserGetGroups"}, <br>    {    60,    "DeadTableEntry"}, <br>    {    61,    "DeadTableEntry"}, <br>    {    62,    "NetWkstaSetUID"}, <br>    {    63,    "NetWkstaGetInfo"}, <br>    {    64,    "NetWkstaSetInfo"}, <br>    {    65,    "NetUseEnum"}, <br>    {    66,    "NetUseAdd"}, <br>    {    67,    "NetUseDel"}, <br>    {    68,    "NetUseGetInfo"}, <br>    {    69,    "NetPrintQEnum"}, <br>    {    70,    "NetPrintQGetInfo"}, <br>    {    71,    "NetPrintQSetInfo"}, <br>    {    72,    "NetPrintQAdd"}, <br>    {    73,    "NetPrintQDel"}, <br>    {    74,    "NetPrintQPause"}, <br>    {    75,    "NetPrintQContinue"}, <br>    {    76,    "NetPrintJobEnum"}, <br>    {    77,    "NetPrintJobGetInfo"}, <br>    {    78,    "NetPrintJobSetInfo"}, <br>    {    79,    "DeadTableEntry"}, <br>    {    80,    "DeadTableEntry"}, <br>    {    81,    "NetPrintJobDel"}, <br>    {    82,    "NetPrintJobPause"}, <br>    {    83,    "NetPrintJobContinue"}, <br>    {    84,    "NetPrintDestEnum"}, <br>    {    85,    "NetPrintDestGetInfo"}, <br>    {    86,    "NetPrintDestControl"}, <br>    {    87,    "NetProfileSave"}, <br>    {    88,    "NetProfileLoad"}, <br>    {    89,    "NetStatisticsGet"}, <br>    {    90,    "NetStatisticsClear"}, <br>    {    91,    "NetRemoteTOD"}, <br>    {    92,    "NetBiosEnum"}, <br>    {    93,    "NetBiosGetInfo"}, <br>    {    94,    "NetServerEnum"}, <br>    {    95,    "I_NetServerEnum"}, <br>    {    96,    "NetServiceGetInfo"}, <br>    {    97,    "DeadTableEntry"}, <br>    {    98,    "DeadTableEntry"}, <br>    {    99,    "DeadTableEntry"}, <br>    {   100,    "DeadTableEntry"}, <br>    {   101,    "DeadTableEntry"}, <br>    {   102,    "DeadTableEntry"}, <br>    {   103,    "NetPrintQPurge"}, <br>    {   104,    "NetServerEnum2"}, <br>    {   105,    "NetAccessGetUserPerms"}, <br>    {   106,    "NetGroupGetInfo"}, <br>    {   107,    "NetGroupSetInfo"}, <br>    {   108,    "NetGroupSetUsers"}, <br>    {   109,    "NetUserSetGroups"}, <br>    {   110,    "NetUserModalsGet"}, <br>    {   111,    "NetUserModalsSet"}, <br>    {   112,    "NetFileEnum2"}, <br>    {   113,    "NetUserAdd2"}, <br>    {   114,    "NetUserSetInfo2"}, <br>    {   115,    "NetUserPasswordSet2"}, <br>    {   116,    "I_NetServerEnum2"}, <br>    {   117,    "NetConfigGet2"}, <br>    {   118,    "NetConfigGetAll2"}, <br>    {   119,    "NetGetDCName"}, <br>    {   120,    "NetHandleGetInfo"}, <br>    {   121,    "NetHandleSetInfo"}, <br>    {   122,    "NetStatisticsGet2"}, <br>    {   123,    "NetBuildGetInfo"}, <br>    {   124,    "NetFileGetInfo2"}, <br>    {   125,    "NetFileClose2"}, <br>    {   126,    "NetServerReqChallenge"}, <br>    {   127,    "NetServerAuthenticate"}, <br>    {   128,    "NetServerPasswordSet"}, <br>    {   129,    "NetAccountDeltas"}, <br>    {   130,    "NetAccountSync"}, <br>    {   131,    "NetUserEnum2"}, <br>    {   132,    "NetWkstaUserLogon"}, <br>    {   133,    "NetWkstaUserLogoff"}, <br>    {   134,    "NetLogonEnum"}, <br>    {   135,    "NetErrorLogRead"}, <br>    {   136,    "I_NetPathType"}, <br>    {   137,    "I_NetPathCanonicalize"}, <br>    {   138,    "I_NetPathCompare"}, <br>    {   139,    "I_NetNameValidate"}, <br>    {   140,    "I_NetNameCanonicalize"}, <br>    {   141,    "I_NetNameCompare"}, <br>    {   142,    "NetAuditRead"}, <br>    {   143,    "NetPrintDestAdd"}, <br>    {   144,    "NetPrintDestSetInfo"}, <br>    {   145,    "NetPrintDestDel"}, <br>    {   146,    "NetUserValidate2"}, <br>    {   147,    "NetPrintJobSetInfo"}, <br>    {   148,    "TI_NetServerDiskEnum"}, <br>    {   149,    "TI_NetServerDiskGetInfo"}, <br>    {   150,    "TI_FTVerifyMirror"}, <br>    {   151,    "TI_FTAbortVerify"}, <br>    {   152,    "TI_FTGetInfo"}, <br>    {   153,    "TI_FTSetInfo"}, <br>    {   154,    "TI_FTLockDisk"}, <br>    {   155,    "TI_FTFixError"}, <br>    {   156,    "TI_FTAbortFix"}, <br>    {   157,    "TI_FTDiagnoseError"}, <br>    {   158,    "TI_FTGetDriveStats"}, <br>    {   159,    "DeadTableEntry"}, <br>    {   160,    "TI_FTErrorGetInfo"}, <br>    {   161,    "DeadTableEntry"}, <br>    {   162,    "DeadTableEntry"}, <br>    {   163,    "NetAccessCheck"}, <br>    {   164,    "NetAlertRaise"}, <br>    {   165,    "NetAlertStart"}, <br>    {   166,    "NetAlertStop"}, <br>    {   167,    "NetAuditWrite"}, <br>    {   168,    "NetIRemoteAPI"}, <br>    {   169,    "NetServiceStatus"}, <br>    {   170,    "I_NetServerRegister"}, <br>    {   171,    "I_NetServerDeregister"}, <br>    {   172,    "I_NetSessionEntryMake"}, <br>    {   173,    "I_NetSessionEntryClear"}, <br>    {   174,    "I_NetSessionEntryGetInfo"}, <br>    {   175,    "I_NetSessionEntrySetInfo"}, <br>    {   176,    "I_NetConnectionEntryMake"}, <br>    {   177,    "I_NetConnectionEntryClear"}, <br>    {   178,    "I_NetConnectionEntrySetInfo"}, <br>    {   179,    "I_NetConnectionEntryGetInfo"}, <br>    {   180,    "I_NetFileEntryMake"}, <br>    {   181,    "I_NetFileEntryClear"}, <br>    {   182,    "I_NetFileEntrySetInfo"}, <br>    {   183,    "I_NetFileEntryGetInfo"}, <br>    {   184,    "AltSrvMessageBufferSend"}, <br>    {   185,    "AltSrvMessageFileSend"}, <br>    {   186,    "I_NetRplWkstaEnum"}, <br>    {   187,    "I_NetRplWkstaGetInfo"}, <br>    {   188,    "I_NetRplWkstaSetInfo"}, <br>    {   189,    "I_NetRplWkstaAdd"}, <br>    {   190,    "I_NetRplWkstaDel"}, <br>    {   191,    "I_NetRplProfileEnum"}, <br>    {   192,    "I_NetRplProfileGetInfo"}, <br>    {   193,    "I_NetRplProfileSetInfo"}, <br>    {   194,    "I_NetRplProfileAdd"}, <br>    {   195,    "I_NetRplProfileDel"}, <br>    {   196,    "I_NetRplProfileClone"}, <br>    {   197,    "I_NetRplBaseProfileEnum"}, <br>    {   198,    "DeadTableEntry"}, <br>    {   199,    "DeadTableEntry"}, <br>    {   200,    "DeadTableEntry"}, <br>    {   201,    "NetServerSetInfo"}, <br>    {   202,    "DeadTableEntry"}, <br>    {   203,    "DeadTableEntry"}, <br>    {   204,    "DeadTableEntry"}, <br>    {   205,    "NetPrintDriverEnum"}, <br>    {   206,    "NetPrintQProcessorEnum"}, <br>    {   207,    "NetPrintPortEnum"}, <br>    {   208,    "NetWriteUpdateLog"}, <br>    {   209,    "NetAccountUpdate"}, <br>    {   210,    "NetAccountConfirmUpdate"}, <br>    {   211,    "NetConfigSet"}, <br>    {   212,    "NetAccountsReplicate"}, <br>}; <br> <br>SET CommandSET = { (sizeof Commands / sizeof(LABELED_BYTE)), Commands }; <br> <br> <br>//============================================================================= <br>//  RemAPI database. <br>//============================================================================= <br> <br>#define REMAPI_SUMMARY      0 <br>#define REMAPI_COMMAND      1 <br> <br>PROPERTYINFO RemAPIDatabase[] = <br>{ <br>    {   //  REMAPI_SUMMARY <br>        0,0,  <br>        "Summary",   <br>        "Remote API packet",  <br>        PROP_TYPE_SUMMARY,  <br>        PROP_QUAL_NONE,  <br>        0,  <br>        FORMAT_BUFFER_SIZE,  <br>        RemAPIFormatSummary}, <br> <br>    {   // REMAPI_COMMAND <br>        0,0,  <br>        "Command",      <br>        "Remote API Command field.",  <br>        PROP_TYPE_WORD,     <br>        PROP_QUAL_LABELED_SET,  <br>        &amp;CommandSET,  <br>        FORMAT_BUFFER_SIZE,  <br>        FormatPropertyInstance}, <br>}; <br> <br>DWORD nRemAPIProperties = ((sizeof RemAPIDatabase) / PROPERTYINFO_SIZE); <br> <br> <br> <br>//============================================================================= <br>//  Protocol entry points. <br>//============================================================================= <br> <br>VOID   WINAPI RemAPIRegister(HPROTOCOL); <br>VOID   WINAPI RemAPIDeregister(HPROTOCOL); <br>LPBYTE WINAPI RemAPIRecognizeFrame(HFRAME, LPVOID, LPVOID, DWORD, DWORD, HPROTOCOL, DWORD, LPDWORD, LPHPROTOCOL, LPDWORD); <br>LPBYTE WINAPI RemAPIAttachProperties(HFRAME, LPVOID, LPVOID, DWORD, DWORD, HPROTOCOL, DWORD, DWORD); <br>DWORD  WINAPI RemAPIFormatProperties(HFRAME, LPVOID, LPVOID, DWORD, LPPROPERTYINST); <br> <br>ENTRYPOINTS RemAPIEntryPoints = <br>{ <br>    RemAPIRegister, <br>    RemAPIDeregister, <br>    RemAPIRecognizeFrame, <br>    RemAPIAttachProperties, <br>    RemAPIFormatProperties <br>}; <br> <br>HPROTOCOL hRemAPI = NULL; <br> <br> <br>DWORD Attached = 0; <br> <br>//============================================================================= <br>//  FUNCTION: DLLEntry() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================= <br> <br>BOOL WINAPI DLLEntry(HANDLE hInstance, ULONG Command, LPVOID Reserved) <br>{ <br>    //========================================================================= <br>    //  If we are loading! <br>    //========================================================================= <br> <br>    if ( Command == DLL_PROCESS_ATTACH ) <br>    { <br>        if ( Attached++ == 0 ) <br>        { <br>            hRemAPI = CreateProtocol("RemAPI", &amp;RemAPIEntryPoints, ENTRYPOINTS_SIZE); <br>        } <br>    } <br> <br>    //========================================================================= <br>    //  If we are unloading! <br>    //========================================================================= <br> <br>    if ( Command == DLL_PROCESS_DETACH ) <br>    { <br>        if ( --Attached == 0 ) <br>        { <br>            DestroyProtocol(hRemAPI); <br>        } <br>    } <br> <br>    return TRUE;                    //... Bloodhound parsers ALWAYS return TRUE. <br>} <br> <br> <br>//============================================================================= <br>//  FUNCTION: RemAPIRegister() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================= <br> <br>VOID WINAPI RemAPIRegister(HPROTOCOL hRemAPIProtocol) <br>{ <br>    register DWORD i; <br> <br>    //========================================================================= <br>    //  Create the property database. <br>    //========================================================================= <br> <br>    CreatePropertyDatabase(hRemAPIProtocol, nRemAPIProperties); <br> <br>    for(i = 0; i &lt; nRemAPIProperties; ++i) <br>    { <br>        AddProperty(hRemAPIProtocol, &amp;RemAPIDatabase[i]); <br>    } <br> <br>} <br> <br>//============================================================================= <br>//  FUNCTION: Deregister() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================= <br> <br>VOID WINAPI RemAPIDeregister(HPROTOCOL hRemAPIProtocol) <br>{ <br>    DestroyPropertyDatabase(hRemAPIProtocol); <br>} <br> <br>//============================================================================= <br>//  FUNCTION: RemAPIRecognizeFrame() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================= <br> <br>LPBYTE WINAPI RemAPIRecognizeFrame(HFRAME          hFrame,                     //... frame handle. <br>                                LPBYTE          MacFrame,                   //... Frame pointer. <br>                                LPBYTE          RemAPIFrame,                   //... Relative pointer. <br>                                DWORD           MacType,                    //... MAC type. <br>                                DWORD           BytesLeft,                  //... Bytes left. <br>                                HPROTOCOL       hPreviousProtocol,          //... Previous protocol or NULL if none. <br>                                DWORD           nPreviousProtocolOffset,    //... Offset of previous protocol. <br>                                LPDWORD         ProtocolStatusCode,         //... Pointer to return status code in. <br>                                LPHPROTOCOL     hNextProtocol,              //... Next protocol to call (optional). <br>                                LPDWORD         InstData)                   //... Next protocol instance data. <br>{ <br>    *ProtocolStatusCode = PROTOCOL_STATUS_CLAIMED; <br>    return NULL; <br>} <br> <br>//============================================================================= <br>//  FUNCTION: RemAPIAttachProperties() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================= <br> <br>LPBYTE WINAPI RemAPIAttachProperties(HFRAME    hFrame, <br>                                  LPBYTE    Frame, <br>                                  LPBYTE    RemAPIFrame, <br>                                  DWORD     MacType, <br>                                  DWORD     BytesLeft, <br>                                  HPROTOCOL hPreviousProtocol, <br>                                  DWORD     nPreviousProtocolOffset, <br>                                  DWORD     InstData) <br>{ <br>    if ( InstData == 0 )    // this is a request... SMB said so... <br>    { <br>        AttachPropertyInstance(hFrame, <br>                           RemAPIDatabase[REMAPI_SUMMARY].hProperty, <br>                           BytesLeft, <br>                           RemAPIFrame, <br>                           0, 0, 0); <br> <br>        AttachPropertyInstance(hFrame, <br>                           RemAPIDatabase[REMAPI_COMMAND].hProperty, <br>                           sizeof(WORD), <br>                           RemAPIFrame, <br>                           0,  <br>                           1,   // level <br>                           0); <br> <br>    } <br>    else    // this is a response SMB transact... we don't get told WHAT command the <br>            // request was... so we have to look back to find the previous frame that  <br>            // contains our request. <br>            // This parser assumes that the SMB parser is kind in that it will tell <br>            // us the frame number of the request frame.  Without this, we would have <br>            // to get the SMB mid/pid/tid/uid from our frame, find the previous SMB <br>            // that matches our description, and see what our Remote API command was. <br>    { <br>        // The InstData is actually the frame number of the frame that holds the request.. <br>        // If the frame number was 0, then the frame number will be (DWORD)-1. <br>        DWORD   ReqFrameNum = (InstData==(DWORD)-1)?0:InstData; <br>        WORD    RemAPICommand; <br>        HFRAME  hFrameReq; <br>        LPBYTE  lpReqRemAPI; <br>        LPBYTE  lpReqFrame; <br> <br>        // Go get that frame and see what type of remote API we are... <br>        hFrameReq = GetFrame ( GetFrameCaptureHandle(hFrame), ReqFrameNum ); <br> <br>        if ( hFrameReq == NULL )    // we have a frame number but no frame?? <br>        {   // This should never happen because the SMB parser SAID that we were <br>            // a remote api AND it gave us a frame number... therefore, hitting <br>            // this code path implies a bug in either SMB or the kernel. <br>            #ifdef DEBUG <br>            DebugBreak (); <br>            #endif <br>            return NULL; <br>        } <br>         <br>        lpReqFrame = LockFrame ( hFrameReq ); <br>        lpReqRemAPI = lpReqFrame + GetProtocolStartOffset ( hFrameReq, "REMAPI" ); <br>        RemAPICommand = *(UNALIGNED WORD *)lpReqRemAPI;  // command is the first word. <br> <br>        // NOW we can attach properties for the response <br> <br> <br> <br> <br>        UnlockFrame ( hFrameReq ); <br>    } <br>    return NULL; <br>} <br> <br> <br>//============================================================================== <br>//  FUNCTION: RemAPIFormatSummary() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================== <br> <br>VOID WINAPIV RemAPIFormatSummary(LPPROPERTYINST lpPropertyInst) <br>{ <br>    WORD Command = *(UNALIGNED WORD *)lpPropertyInst-&gt;lpData; <br>    LPSTR CommandStr = LookupWordSetString ( &amp;CommandSET, Command ); <br> <br>    DWORD Length = wsprintf(lpPropertyInst-&gt;szPropertyText,  <br>                            "Remote API %s", <br>                            CommandStr?CommandStr:"Unknown" ); <br>} <br> <br> <br>//============================================================================== <br>//  FUNCTION: RemAPIFormatProperties() <br>// <br>//  Modification History <br>// <br>//  Steve Hiskey        07/07/94        Created <br>//============================================================================== <br> <br>DWORD WINAPI RemAPIFormatProperties(HFRAME         hFrame, <br>                                 LPBYTE         MacFrame, <br>                                 LPBYTE         FrameData, <br>                                 DWORD          nPropertyInsts, <br>                                 LPPROPERTYINST p) <br>{ <br>    //========================================================================= <br>    //  Format each property in the property instance table. <br>    // <br>    //  The property-specific instance data was used to store the address of a <br>    //  property-specific formatting function so all we do here is call each <br>    //  function via the instance data pointer. <br>    //========================================================================= <br> <br>    while (nPropertyInsts--) <br>    { <br>        ((FORMAT) p-&gt;lpPropertyInfo-&gt;InstanceData)(p); <br> <br>        p++; <br>    } <br> <br>    return BHERR_SUCCESS; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

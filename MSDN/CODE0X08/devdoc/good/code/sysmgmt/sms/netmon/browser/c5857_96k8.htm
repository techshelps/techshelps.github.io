<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BROWSER.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5858"></a>BROWSER.H</h2>
<pre><code><br>//========================================================================================================================== <br>//  MODULE: browser.h <br>// <br>//  Description: <br>// <br>//  Bloodhound parser DLL for MS Browser <br>// <br>//  Modification History <br>//  Written by Scottji 6/94 <br>// <br>// <br>//========================================================================================================================== <br> <br>// question:  need to look at bh.h and inilib.h <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;bh.h&gt; <br>#include &lt;parser.h&gt; <br>#include &lt;inilib.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>//question: <br>#pragma pack(1) <br> <br>// <br>// Browser Commands <br>// <br>#define HostAnnouncement1   //  done <br>#define AnnouncementRequest2   //  done <br>#define Election8   // <br>#define GetBackupListReq9   //  done <br>#define GetBackupListResp10  //a done <br>#define BecomeBackup11  //b done <br>#define WkGroupAnnouncement12  //c change <br>#define MasterAnnouncement13  //d done <br>#define ResetBrowserState14  //e <br>#define LocalMasterAnnouncement15  //f done <br> <br>// <br>// Struct for Recognize Function <br>// <br>typedef struct _BrowserFRAME <br>{ <br>    BYTE        command; <br>    CHAR        data; <br>} BrowserFRAME; <br> <br>typedef BrowserFRAME UNALIGNED *LPBrowserFRAME; <br> <br> <br>// <br>// Lanman names from lmcons.h <br>// <br>#define CNLEN       15                  // Computer name length <br>#define LM20_CNLEN  15                  // LM 2.0 Computer name length <br>#define DNLEN       CNLEN               // Maximum domain name length <br>#define LM20_DNLEN  LM20_CNLEN          // LM 2.0 Maximum domain name length <br> <br> <br>// <br>// Mailslot name strings. <br>// <br>#define SMB_MAILSLOT_PREFIX "\\MAILSLOT" <br>#define UNICODE_SMB_MAILSLOT_PREFIX L"\\MAILSLOT" <br>#define SMB_MAILSLOT_PREFIX_LENGTH (sizeof(SMB_MAILSLOT_PREFIX) - 1) <br>#define UNICODE_SMB_MAILSLOT_PREFIX_LENGTH \ <br>                    (sizeof(UNICODE_SMB_MAILSLOT_PREFIX) - sizeof(WCHAR)) <br> <br>#define MAILSLOT_LANMAN_NAME SMB_MAILSLOT_PREFIX "\\LANMAN" <br>#define MAILSLOT_BROWSER_NAME SMB_MAILSLOT_PREFIX "\\BROWSE" <br>//#define ANNOUNCEMENT_MAILSLOT_NAME     "\\\\*" ITRANS_MS_NAME <br>#define MAXCOMMENTSZ 256                // Multipurpose comment length <br>#define LM20_MAXCOMMENTSZ 48            // LM 2.0 Multipurpose comment length <br> <br> <br>// <br>//Browser netbios name extensions. <br>// <br>#define WORKSTATION_SIGNATURE       '\0' <br>#define SERVER_SIGNATURE            ' ' <br>#define PRIMARY_DOMAIN_SIGNATURE    '\0' <br>#define PRIMARY_CONTROLLER_SIGNATURE '\x1B' <br>#define DOMAIN_CONTROLLER_SIGNATURE '\x1C' <br>#define MASTER_BROWSER_SIGNATURE    '\x1D' <br>#define BROWSER_ELECTION_SIGNATURE  '\x1E' <br>#define DOMAIN_ANNOUNCEMENT_NAME    "\x01\x02__MSBROWSE__\x02\x01" <br> <br> <br>// <br>//  AnnouncementRequest <br>// <br>//  The request announcement packet is sent by clients to request that <br>//  remote servers announce themselves. <br>// <br> <br>typedef struct _REQUEST_ANNOUNCE_PACKET_1 {      // Contents of request announcement <br>    UCHAR    Type; <br>    UCHAR    Flags;                 // Unused Flags <br>    CHAR     Reply[LM20_CNLEN+1]; <br>}  REQUEST_ANNOUNCE_PACKET_1, UNALIGNED *LP_ANNC_REQ; <br> <br>//typedef REQUEST_ANNOUNCE_PACKET_1 UNALIGNED *LP_ANNC_REQ; <br> <br> <br>//  HostAnnouncement and LocalMasterAnnouncement <br>// <br>// General announcement message.  This is used for opcodes: <br>// <br>// <br> <br>typedef struct _BROWSE_ANNOUNCE_PACKET_1 { <br>    UCHAR       BrowseType; <br>    UCHAR       UpdateCount;    // Inc'ed when announce data changed. <br>    ULONG       Periodicity;    // announcement cycle in milliseconds <br> <br>    UCHAR       ServerName[LM20_CNLEN+1]; <br>    UCHAR       VersionMajor; <br>    UCHAR       VersionMinor;   /*  "  "   "   "    "    "    "   */ <br>    ULONG       Type;           // Server type. <br>    WORD        HAElectionVersion; <br>    WORDHAConstant; <br>    CHAR        Comment[LM20_MAXCOMMENTSZ+1]; <br>} BROWSE_ANNOUNCE_PACKET, UNALIGNED *LP_HA_FRAME; <br> <br>// WkGroupAnnouncement <br>// <br>// <br>typedef struct _WKGRP_ANNOUNCE_PACKET_1 { <br>    UCHAR       BrowseType; <br>    UCHAR       UpdateCount;    // Inc'ed when announce data changed. <br>    ULONG       Periodicity;    // announcement cycle in milliseconds <br> <br>    UCHAR       ServerName[LM20_CNLEN+1]; <br>    UCHAR       VersionMajor; <br>    UCHAR       VersionMinor;   /*  "  "   "   "    "    "    "   */ <br>    ULONG       Type;           // Server type. <br>    ULONG       CommentPtr; <br>    CHAR        Comment[LM20_MAXCOMMENTSZ+1]; <br>} WKGRP_ANNOUNCE_PACKET, UNALIGNED *LP_WKGRP_FRAME; <br> <br> <br>// GetBackupListReq <br>// <br>// <br>typedef struct _BACKUP_LIST_REQUEST_1 { <br>    UCHARType; <br>    UCHAR       RequestedCount; <br>    ULONG       Token; <br>} BACKUP_LIST_REQUEST_1, UNALIGNED *LP_BACK_REQ_FRAME; <br> <br> <br> <br>//  BackupListResp <br>//  Response containing a backup server list. <br>// <br> <br>typedef struct _BACKUP_LIST_RESPONSE_1 { <br>    UCHAR Type; <br>    UCHAR       BackupServerCount; <br>    ULONG       Token; <br>    UCHAR       BackupServerList[51]; <br>} BACKUP_LIST_RESPONSE_1, UNALIGNED *LP_BACK_RESP; <br> <br> <br> <br>//  BecomeBackup <br>//  Message indicating that a potential browser server should become a backup <br>//  server. <br>// <br>typedef struct _BECOME_BACKUP_1 { <br>    UCHAR Type; <br>    UCHAR       BrowserToPromote[1]; <br>} BECOME_BACKUP_1; <br> <br>typedef BECOME_BACKUP_1 UNALIGNED *LP_BECOME_BACKUP; <br> <br> <br> <br>//  MasterAnnouncement <br>//  Send from master to domain master. <br>// <br> <br>typedef struct _MASTER_ANNOUNCEMENT_1 { <br>    UCHAR Type; <br>    UCHAR       MasterName[16]; <br>} MASTER_ANNOUNCEMENT_1, UNALIGNED *LP_MASTER_ANNC; <br> <br> <br> <br>//  Election <br>//  Sent during the election process. <br>// <br> <br>typedef struct _REQUEST_ELECTION_1 { <br>    UCHAR Type; <br>    UCHAR       Version; <br>    ULONG       Criteria; <br>    ULONG       TimeUp; <br>    ULONG       MustBeZero; <br>    UCHAR       ServerName[1]; <br>} REQUEST_ELECTION_1, UNALIGNED *LP_ELECTION; <br> <br> <br>#define ELECTION_CR_OSTYPE      0xFF000000L // Native OS running on server <br>#define ELECTION_CR_OSWFW       0x01000000L //  Windows for workgroups server <br>#define ELECTION_CR_WIN_NT      0x10000000L //  Windows/NT Server <br>#define ELECTION_CR_LM_NT       0x20000000L //  Lan Manager for Windows/NT <br> <br>#define ELECTION_CR_REVISION    0x00FFFF00L // Browser software revision <br>#define ELECTION_MAKE_REV(major, minor) (((major)&amp;0xffL)&lt;&lt;16|((minor)&amp;0xFFL)&lt;&lt;8) <br> <br>#define ELECTION_CR_DESIRE      0x000000FFL // Desirability of becoming master. <br> <br>// <br>//  Election desirability within criteria. <br>// <br>//  Most important is a running PDC, next is a configured domain master. <br>// <br>//  After that come running masters, then configured backups, then existing <br>//  running backups. <br>// <br> <br>#define ELECTION_DESIRE_AM_BACKUP  0x00000001L // Currently is backup <br>#define ELECTION_DESIRE_AM_CFG_BKP 0x00000002L // Always want to be <br>                                               //  master - set if backup &amp;&amp; <br>                                               //  MaintainServerList==YES <br>#define ELECTION_DESIRE_AM_MASTER  0x00000004L // Currently is master <br>#define ELECTION_DESIRE_AM_DOMMSTR 0x00000008L // Configured as domain master <br> <br>#define ELECTION_DESIRE_AM_PDC     0x00000080L // Machine is a lanman NT server. <br> <br>// Machines running WINS client are important because they are more capable <br>// of connecting to a PDC who's address was configured via DHCP. <br> <br>#define ELECTION_DESIRE_WINS_CLIENT 0x00000020L // Transport running WINS client <br> <br> <br>// ResetBrowserState <br>//  "Tickle" packet - sent to change state of browser. <br>// <br> <br>typedef struct _RESET_STATE_1 { <br>        UCHAR Type; <br>        UCHAR   Options; <br>} RESET_STATE_1, *LP_RESET; <br> <br>#define RESET_STATE_STOP_MASTER 0x01    // Stop being master <br>#define RESET_STATE_CLEAR_ALL   0x02    // Clear all browser state. <br>#define RESET_STATE_STOP        0x04    // Stop the browser service. <br> <br> <br>// <br>// Type Server <br>// <br>#defineSV_TYPE_WORKSTATION0x00000001 <br>#defineSV_TYPE_SERVER0x00000002 <br>#defineSV_TYPE_SQLSERVER0x00000004 <br>#defineSV_TYPE_DOMAIN_CTRL0x00000008 <br>#defineSV_TYPE_DOMAIN_BAKCTRL0x00000010 <br>#defineSV_TYPE_TIME_SOURCE0x00000020 <br>#defineSV_TYPE_AFP0x00000040 <br>#defineSV_TYPE_NOVELL0x00000080 <br>#defineSV_TYPE_DOMAIN_MEMBER0x00000100 <br>#defineSV_TYPE_PRINTQ_SERVER0x00000200 <br>#defineSV_TYPE_DIALIN_SERVER0x00000400 <br>#defineSV_TYPE_XENIX_SERVER0x00000800 <br>#defineSV_TYPE_NT0x00001000 <br>#defineSV_TYPE_POTENTIAL_BROWSER0x00010000 <br>#defineSV_TYPE_BACKUP_BROWSER0x00020000 <br>#defineSV_TYPE_MASTER_BROWSER0x00040000 <br>#defineSV_TYPE_DOMAIN_MASTER0x00080000 <br>#defineSV_TYPE_LOCAL_LIST_ONLY0x40000000 <br>#defineSV_TYPE_DOMAIN_ENUM0x80000000 <br> <br> <br>//=========================================================================== <br>//  Function prototypes. <br>//=========================================================================== <br> <br>// question:  what other functions? <br> <br>extern VOID  WINAPIV BrowserFormatSummary(LPPROPERTYINST lpPropertyInst); <br>extern VOID  WINAPIV BrowserFormatCommand(LPPROPERTYINST lpPropertyInst); <br>extern VOID  WINAPIV FormatBrowserSummary(LPPROPERTYINST lpPropertyInst); <br> <br>//============================================================================= <br>//  Helper functions. <br>//============================================================================= <br> <br>//question: what helper functions? <br> <br>// extern WORD   WINAPI GetBrowserFrameSize(LPBrowser Frame); <br> <br> <br>//============================================================================= <br>//  Format Table. <br>//============================================================================= <br>// question:  what is this? <br> <br> <br>//============================================================================= <br>//  Manifests for Creating Handoff Set <br>//============================================================================= <br> <br>//question: what is handoff set? <br> <br>//#define MAX_SAPS            50 <br>//#define MAX_ETYPES          50 <br> <br>#define ELECTION_DESIRE_AM_BACKUP  0x00000001L // Currently is backup <br>#define ELECTION_DESIRE_AM_CFG_BKP 0x00000002L // Always want to be <br> <br> <br>#pragma pack() <br> <br>//============================================================================= <br>//  Property table index constants <br>//============================================================================= <br> <br>#define Browser_COMMAND         0 <br>#define Browser_SUMMARY         1 <br>#define HA_UpdateCount2 <br>#define HA_Periodicity3 <br>#define HA_ServerName4 <br>#define HA_VersionMajor5 <br>#define HA_VersionMinor6 <br>#define HA_Type_Flag_Summary7 <br>#define HA_Type8 <br>#define HA_ElectionVersion9 <br>#define HA_Constant10 <br>#define AR_Flags11 <br>#define AR_Reply12 <br>#define BREQ_RequestedCount13 <br>#define BREQ_Token14 <br>#define BRSP_ServerCnt15 <br>#define BRSP_Token16 <br>#define BRSP_ServerList17 <br>#define MA_MasterName18 <br>#define ELEC_Version19 <br>#define ELEC_Criteria20 <br>#define ELEC_TimeUp21 <br>#define ELEC_MustBeZero22 <br>#define ELEC_ServerName23 <br>#define ELEC_OS_Summary24 <br>#define ELEC_OS25 <br>#define ELEC_Revision26 <br>#define ELEC_Desire_Summary27 <br>#define ELEC_Desire28 <br>#define RST_Options29 <br>#define WKGRP_CommentPtr30 <br>#define WKGRP_Comment31 <br>#define RST_Options_Summary32 <br>//#define WKGRP_VersionMajor5 <br>//#define WKGRP_VersionMinor6 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOSTANNC.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5859"></a>HOSTANNC.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1990 Microsoft Corporation <br> <br>Module Name: <br> <br>    hostannc.h <br> <br>Abstract: <br> <br>    This module defines the data structures related to host announcements. <br> <br>Author: <br> <br>    Larry Osterman (LarryO) 22-Oct-1990 <br> <br>Revision History: <br> <br>    22-Oct-1991  LarryO <br> <br>        Created <br> <br>--*/ <br> <br>#ifndef _HOSTANNC_ <br>#define _HOSTANNC_ <br> <br> <br>typedef enum _MailslotType { <br>    MailslotTransaction = -2, <br>    OtherTransaction = -1, <br>    Illegal = 0, <br>    HostAnnouncement = 1, <br>    AnnouncementRequest = 2, <br>    InterrogateInfoRequest = 3, <br>    RelogonRequest = 4, <br>    Election = 8, <br>    GetBackupListReq = 9, <br>    GetBackupListResp = 10, <br>    BecomeBackupServer = 11, <br>    WkGroupAnnouncement = 12, <br>    MasterAnnouncement = 13, <br>    ResetBrowserState = 14, <br>    LocalMasterAnnouncement = 15, <br>    MaximumMailslotType <br>} MAILSLOTTYPE, *PMAILSLOTTYPE; <br> <br>#define WORKSTATION_SIGNATURE       '\0' <br>#define SERVER_SIGNATURE            ' ' <br>#define PRIMARY_DOMAIN_SIGNATURE    '\0' <br>#define PRIMARY_CONTROLLER_SIGNATURE '\x1B' <br>#define DOMAIN_CONTROLLER_SIGNATURE '\x1C' <br>#define MASTER_BROWSER_SIGNATURE    '\x1D' <br>#define BROWSER_ELECTION_SIGNATURE  '\x1E' <br>#define DOMAIN_ANNOUNCEMENT_NAME    "\x01\x02__MSBROWSE__\x02\x01" <br>// <br>//  The following values should be the minimum and maximum of the <br>//  mailslot transaction opcodes defined above. <br>// <br> <br>#define MIN_TRANSACT_MS_OPCODE          MailslotTransaction <br>#define MAX_TRANSACT_MS_OPCODE          RelogonRequest <br> <br>// <br>//  Common name for reserved, `internal' transactions <br>// <br> <br>#define MAILSLOT_LANMAN_NAME SMB_MAILSLOT_PREFIX "\\LANMAN" <br>#define MAILSLOT_BROWSER_NAME SMB_MAILSLOT_PREFIX "\\BROWSE" <br>#define ANNOUNCEMENT_MAILSLOT_NAME     "\\\\*" ITRANS_MS_NAME <br> <br> <br>#include &lt;packon.h&gt; <br> // <br>// Each visible server on the net periodically emits a host announcement. <br>// This is a SMB TRANSACTION REQUEST on a reserved, "internal" name. <br>// <br> <br>// <br>//  There are two versions of each of these structures defined.  The first, <br>//  is the actual "meat" of the structure, the second includes the announcement <br>//  type. <br>// <br> <br>// <br>// Lan Manager announcement message.  This is used for opcodes: <br>// <br>//  HostAnnouncement to \MAILSLOT\LANMAN on the LANMAN domain name. <br>// <br> <br>typedef struct _HOST_ANNOUNCE_PACKET_1 { <br>    UCHAR       CompatibilityPad; <br>    ULONG       Type; <br>    UCHAR       VersionMajor;   /* version of LM running on host */ <br>    UCHAR       VersionMinor;   /*  "  "   "   "    "    "    "   */ <br>    USHORT      Periodicity;   /* announcement cycle in secs   */ <br>    CHAR        NameComment[LM20_CNLEN+1+LM20_MAXCOMMENTSZ+1]; <br>} HOST_ANNOUNCE_PACKET_1, *PHOST_ANNOUNCE_PACKET_1; <br> <br>typedef struct _HOST_ANNOUNCE_PACKET { <br>    UCHAR       AnnounceType; <br>    HOST_ANNOUNCE_PACKET_1 HostAnnouncement; <br>} HOST_ANNOUNCE_PACKET, *PHOST_ANNOUNCE_PACKET; <br> <br>// <br>// General announcement message.  This is used for opcodes: <br>// <br>//  HostAnnouncement, WkGroupAnnouncement, and LocalMasterAnnouncement <br>// <br> <br>typedef struct _BROWSE_ANNOUNCE_PACKET_1 { <br>    UCHAR       UpdateCount;    // Inc'ed when announce data changed. <br>    ULONG       Periodicity;    // announcement cycle in milliseconds <br> <br>    UCHAR       ServerName[LM20_CNLEN+1]; <br>    UCHAR       VersionMajor; <br>    UCHAR       VersionMinor;   /*  "  "   "   "    "    "    "   */ <br>    ULONG       Type;           // Server type. <br>    CHAR        *CommentPointer; <br>    CHAR        Comment[LM20_MAXCOMMENTSZ+1]; <br>} BROWSE_ANNOUNCE_PACKET_1, *PBROWSE_ANNOUNCE_PACKET_1; <br> <br>typedef struct _BROWSE_ANNOUNCE_PACKET { <br>    UCHAR       BrowseType; <br>    BROWSE_ANNOUNCE_PACKET_1 BrowseAnnouncement; <br>} BROWSE_ANNOUNCE_PACKET, *PBROWSE_ANNOUNCE_PACKET; <br>// <br>//  The request announcement packet is sent by clients to request that <br>//  remote servers announce themselves. <br>// <br> <br>typedef struct _REQUEST_ANNOUNCE_PACKET_1 {      // Contents of request announcement <br>    UCHAR    Flags;                 // Unused Flags <br>    CHAR     Reply[LM20_CNLEN+1]; <br>}  REQUEST_ANNOUNCE_PACKET_1, *PREQUEST_ANNOUNCE_PACKET_1; <br> <br>typedef struct _REQUEST_ANNOUNCE_PACKET {        /* Request announcement struct */ <br>    UCHAR   Type; <br>    REQUEST_ANNOUNCE_PACKET_1    RequestAnnouncement; <br>} REQUEST_ANNOUNCE_PACKET, *PREQUEST_ANNOUNCE_PACKET; <br> <br>#define HOST_ANNC_NAME(xx)     ((xx)-&gt;NameComment) <br>#define HOST_ANNC_COMMENT(xx)  ((xx)-&gt;NameComment + (strlen(HOST_ANNC_NAME(xx))+1)) <br> <br>#define BROWSE_ANNC_NAME(xx)     ((xx)-&gt;ServerName) <br>#define BROWSE_ANNC_COMMENT(xx)  ((xx)-&gt;Comment) <br> <br> // <br>//  Definitions for Windows Browser <br>// <br> <br>// <br>//  Request to retrieve a backup server list. <br>// <br> <br>typedef struct _BACKUP_LIST_REQUEST_1 { <br>    UCHAR       RequestedCount; <br>    ULONG       Token; <br>} BACKUP_LIST_REQUEST_1, *PBACKUP_LIST_REQUEST_1; <br> <br> <br>typedef struct _BACKUP_LIST_REQUEST { <br>    UCHAR  Type; <br>    BACKUP_LIST_REQUEST_1 BackupListRequest; <br>} BACKUP_LIST_REQUEST, *PBACKUP_LIST_REQUEST; <br> <br>// <br>//  Response containing a backup server list. <br>// <br> <br>typedef struct _BACKUP_LIST_RESPONSE_1 { <br>    UCHAR       BackupServerCount; <br>    ULONG       Token; <br>    UCHAR       BackupServerList[1]; <br>} BACKUP_LIST_RESPONSE_1, *PBACKUP_LIST_RESPONSE_1; <br> <br>typedef struct _BACKUP_LIST_RESPONSE { <br>    UCHAR Type; <br>    BACKUP_LIST_RESPONSE_1 BackupListResponse; <br>} BACKUP_LIST_RESPONSE, *PBACKUP_LIST_RESPONSE; <br> <br> <br>// <br>//  Message indicating that a potential browser server should become a backup <br>//  server. <br>// <br> <br>typedef struct _BECOME_BACKUP_1 { <br>    UCHAR       BrowserToPromote[1]; <br>} BECOME_BACKUP_1, *PBECOME_BACKUP_1; <br> <br>typedef struct _BECOME_BACKUP { <br>    UCHAR Type; <br>    BECOME_BACKUP_1 BecomeBackup; <br>} BECOME_BACKUP, *PBECOME_BACKUP; <br> <br> <br>// <br>//  Sent during the election process. <br>// <br> <br>typedef struct _REQUEST_ELECTION_1 { <br>    UCHAR       Version; <br>    ULONG       Criteria; <br>    ULONG       TimeUp; <br>    ULONG       MustBeZero; <br>    UCHAR       ServerName[1]; <br>} REQUEST_ELECTION_1, *PREQUEST_ELECTION_1; <br> <br>typedef struct _REQUEST_ELECTION { <br>    UCHAR Type; <br>    REQUEST_ELECTION_1 ElectionRequest; <br>} REQUEST_ELECTION, *PREQUEST_ELECTION; <br> <br>#define ELECTION_CR_OSTYPE      0xFF000000L // Native OS running on server <br>#define ELECTION_CR_OSWFW       0x01000000L //  Windows for workgroups server <br>#define ELECTION_CR_WIN_NT      0x10000000L //  Windows/NT Server <br>#define ELECTION_CR_LM_NT       0x20000000L //  Lan Manager for Windows/NT <br> <br>#define ELECTION_CR_REVISION    0x00FFFF00L // Browser software revision <br>#define ELECTION_MAKE_REV(major, minor) (((major)&amp;0xffL)&lt;&lt;16|((minor)&amp;0xFFL)&lt;&lt;8) <br> <br>#define ELECTION_CR_DESIRE      0x000000FFL // Desirability of becoming master. <br> <br>// <br>//  Election desirability within criteria. <br>// <br>//  Most important is a running PDC, next is a configured domain master. <br>// <br>//  After that come running masters, then configured backups, then existing <br>//  running backups. <br>// <br> <br>#define ELECTION_DESIRE_AM_BACKUP  0x00000001L // Currently is backup <br>//                                     00000001 <br>#define ELECTION_DESIRE_AM_CFG_BKP 0x00000002L // Always want to be <br>//                                     00000010 <br>                                               //  master - set if backup &amp;&amp; <br>                                               //  MaintainServerList==YES <br>#define ELECTION_DESIRE_AM_MASTER  0x00000004L // Currently is master <br>//            00000100 <br>#define ELECTION_DESIRE_AM_DOMMSTR 0x00000008L // Configured as domain master <br>//                                     00001000 <br> <br>#define ELECTION_DESIRE_AM_PDC     0x00000080L // Machine is a lanman NT server. <br>//                                     10000000 <br>// <br>//  "Tickle" packet - sent to change state of browser. <br>// <br> <br>typedef struct _RESET_STATE_1 { <br>    UCHAR       Options; <br>} RESET_STATE_1, *PRESET_STATE_1; <br> <br>typedef struct _RESET_STATE { <br>    UCHAR Type; <br>    RESET_STATE_1 ResetStateRequest; <br>} RESET_STATE, *PRESET_STATE; <br> <br>#define RESET_STATE_STOP_MASTER 0x01    // Stop being master <br>#define RESET_STATE_CLEAR_ALL   0x02    // Clear all browser state. <br>#define RESET_STATE_STOP        0x04    // Stop the browser service. <br> <br>// <br>//  Master Announcement - Send from master to domain master. <br>// <br> <br>typedef struct _MASTER_ANNOUNCEMENT_1 { <br>    UCHAR       MasterName[1]; <br>} MASTER_ANNOUNCEMENT_1, *PMASTER_ANNOUNCEMENT_1; <br> <br>typedef struct _MASTER_ANNOUNCEMENT { <br>    UCHAR Type; <br>    MASTER_ANNOUNCEMENT_1 MasterAnnouncement; <br>} MASTER_ANNOUNCEMENT, *PMASTER_ANNOUNCEMENT; <br> <br> <br> // <br>//  Definitions for Workstation interrogation and revalidation transactions <br>// <br> <br>typedef struct _WKSTA_INFO_INTERROGATE_PACKET { <br>    UCHAR   CompatibilityPad; <br>    ULONG   Delay ;             // Number of milliseconds to wait before replying <br>    CHAR    ReturnMailslot[1] ; // Mailslot to reply to. <br>} WKSTA_INFO_INTERROGATE_PACKET, *PWKSTA_INFO_INTERROGATE_PACKET; <br> <br>typedef struct _WKSTA_INFO_RESPONSE_PACKET { <br>    UCHAR   CompatibilityPad; <br>    UCHAR   VersionMajor; <br>    UCHAR   VersionMinor; <br>    USHORT  OsVersion ; <br>    CHAR    ComputerName[1] ;       // var-length ASCIIZ string */ <br>#if 0 <br>// <br>//  The following two ASCIIZ strings are not defined in the structure <br>//  but are concatenated to the end of the structure. <br>// <br>    CHAR        UserName[] ; <br>    CHAR        LogonDomain[] ; <br>#endif <br>} WKSTA_INFO_RESPONSE_PACKET, *PWKSTA_INFO_RESPONSE_PACKET; <br> <br>typedef struct _WKSTA_RELOGON_REQUEST_PACKET { <br>    UCHAR   CompatibilityPad; <br>    ULONG   Delay ; <br>    ULONG   Flags ; <br>    CHAR    ReturnMailslot[1] ; // var-length ASCIIZ string <br>#if 0 <br>// <br>//  The following ASCIIZ string is not defined in the structure <br>//  but is concatenated to the end of the structure. <br>// <br> <br>    CHAR    DC_Name[] ; <br>#endif <br>} WKSTA_RELOGON_REQUEST_PACKET, *PWKSTA_RELOGON_REQUEST_PACKET; <br> <br>// <br>//  Values for &lt;wkrrq_flags&gt; field */ <br>// <br> <br>#define WKRRQ_FLAG_LOGON_SERVER      0x1    // I'm your official logon server; <br>                                            // do a relogon to me. <br>                                            // <br> <br>typedef struct _WKSTA_RELOGON_RESPONSE_PACKET { <br>    UCHAR   CompatibilityPad; <br>    USHORT  Status ; <br>    CHAR    ComputerName[1] ;   // var-length ASCIIZ string <br>} WKSTA_RELOGON_RESPONSE_PACKET, *PWKSTA_RELOGON_RESPONSE_PACKET; <br> <br> <br>// <br>//  Values for &lt;wkrrs_status&gt; field <br>// <br> <br>#define WKRRS_STATUS_SUCCEEDED      0       // Operation succeeded <br>#define WKRRS_STATUS_DENIED         1       // Operation denied to caller <br>#define WKRRS_STATUS_FAILED         2       // Operation tried but failed <br> <br>#define EXCESS_NAME_LEN (sizeof(ITRANS_MS_NAME) - \ <br>                            FIELD_OFFSET(SMB_TRANSACTION_MAILSLOT, Buffer) ) <br> <br>// <br>//  This structure defines all of the types of requests that appear in messages <br>//  to the internal mailslot. <br>// <br> <br>typedef struct _INTERNAL_TRANSACTION { <br>    UCHAR   Type;                               // Type of request. <br>    union { <br>        HOST_ANNOUNCE_PACKET_1           Announcement ; <br>        BROWSE_ANNOUNCE_PACKET_1         BrowseAnnouncement ; <br>        REQUEST_ANNOUNCE_PACKET_1        RequestAnnounce ; <br>        BACKUP_LIST_RESPONSE_1           GetBackupListResp ; <br>        BACKUP_LIST_REQUEST_1            GetBackupListRequest ; <br>        BECOME_BACKUP_1                  BecomeBackup ; <br>        REQUEST_ELECTION_1               RequestElection ; <br>        MASTER_ANNOUNCEMENT_1            MasterAnnouncement ; <br>        RESET_STATE_1                    ResetState ; <br> <br>        WKSTA_INFO_INTERROGATE_PACKET    InterrogateRequest ; <br>        WKSTA_INFO_RESPONSE_PACKET       InterrogateResponse ; <br>        WKSTA_RELOGON_REQUEST_PACKET     RelogonRequest ; <br>        WKSTA_RELOGON_RESPONSE_PACKET    RelogonResponse ; <br>    } Union; <br>} INTERNAL_TRANSACTION, *PINTERNAL_TRANSACTION ; <br> <br>#include &lt;packoff.h&gt; <br> <br>#endif // _HOSTANNC_ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

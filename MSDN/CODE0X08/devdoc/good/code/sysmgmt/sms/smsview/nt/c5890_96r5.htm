<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMSVIEW.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5891"></a>SMSVIEW.C</h2>
<pre><code>/************************************************************************* <br> <br>SMSVIEW.EXE - This Module creates Views based on the current Group Map in <br>SMS <br> <br>Copyright (c), 1994 by Microsoft Corp. <br> <br>Modified: 7/11/95 a-cvadai  Added error message messageboxes. <br> <br>*************************************************************************/ <br> <br>#define DBNTWIN32       // must identify operating system environment <br>#include "windows.h" <br> <br>#include &lt;ctl3d.h&gt; <br> <br> <br>#include &lt;sqlfront.h&gt; <br>#include &lt;sqldb.h&gt;     // DB-LIB header file (should always be included) <br>#include &lt;stdio.h&gt; <br>#include &lt;winnt.h&gt; <br>#include "smsview.h" <br>#include "smsviews.h" <br>#include "resource.h" <br> <br>typedef int (*PFNDLL)(); <br>struct DBLOGIN { <br> char ServerName[MAX_NAME]; <br> char LoginId   [MAX_NAME]; <br> char Password  [MAX_NAME]; <br> char DBName    [MAX_NAME]; <br> int DropOnly; <br> } dbLoginInfo; <br>int CmdComplete; <br> <br>void ErrorMsg(int ,int); <br> <br>int PASCAL WinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow) <br>HINSTANCE hInstance;                 /* current instance         */ <br>HINSTANCE hPrevInstance;                 /* previous instance        */ <br>LPSTR lpCmdLine;                 /* command line             */ <br>int nCmdShow;                    /* show-window type (open/icon) */ <br>{ <br> <br>    PFNDLL GenViews = NULL; <br>    static HANDLE hLib = NULL; <br> <br> <br> <br>    // Forward declarations of the error handler and message handler. <br> <br>    if (!hPrevInstance)         /* Has application been initialized? */ <br>      if (!SqlTestInit(hInstance)) <br>        return (0);             /* Exits if unable to initialize     */ <br> <br>    hInst = hInstance;          /* Saves the current instance        */ <br> <br>    Ctl3dRegister( hInst ); <br>    Ctl3dAutoSubclass( hInst ); <br> <br>    CmdComplete = CheckCommandLine(lpCmdLine); <br>    if ( ! GetConnectionInfo(CmdComplete)) <br>     return(0); <br> <br>   Ctl3dUnregister( hInst ); <br> <br>   return(1); <br>} <br> <br> int CheckCommandLine(char * lpCmdLine) <br> { <br>  int Len; <br>  char * pSlash1 = lpCmdLine; <br> <br>  memset (&amp;dbLoginInfo,'\0',sizeof(dbLoginInfo)); <br> <br>  if ( strlen(lpCmdLine) == 0) <br>   return(0); <br>  while ( (pSlash1 = (strchr(pSlash1,'/'))) ) { // Find First Param <br> <br>       // Find Next Param <br>  //  pSlash2 = (strchr(pSlash1+1,'/'); <br> <br>   if ( (Len = (strchr(pSlash1,' ') - pSlash1)) &lt; 0 ) <br>     Len = MAX_NAME; <br>   if ( Len &gt; MAX_NAME){ <br>    ErrorMsg(IDS_ERR_CMD_TOO_LONG,DISP); <br>    return(0); <br>   } <br> <br>    Len-=(strchr(pSlash1,':')-pSlash1)+1;    //Subtract the /?: off the string Length <br>    if ( Len &lt; 0)  //Invalid switch <br>     return(0); <br> <br>    pSlash1++; //Point to First char of the keyword <br>    switch (toupper(pSlash1[0])) { <br>     case  SERVERNAMEPARAM : <br>           strncpy(dbLoginInfo.ServerName,strchr(pSlash1,':')+1,Len); <br>           break; <br>     case  LOGINIDPARAM : <br>           strncpy(dbLoginInfo.LoginId,strchr(pSlash1,':')+1,Len); <br>           break; <br>     case  PASSWORDPARAM: <br>           strncpy(dbLoginInfo.Password,strchr(pSlash1,':')+1,Len); <br>           break; <br>     case  DBNAMEPARAM: <br>           strncpy(dbLoginInfo.DBName,strchr(pSlash1,':')+1,Len); <br>           break; <br>    } <br>  } // End While <br> <br>   return(1); <br> } <br>//GetConnectionInfo <br>GetConnectionInfo(CmdComplete) <br> int CmdComplete; <br>{ <br>    DWORD Er; <br>    if(  !CmdComplete ) { <br>         if( DialogBoxParam(hInst, TEXT("IDD_ConnectionDlg"), NULL, <br>                              (DLGPROC)dbConnect, 2 )== -1){ <br>                    Er = GetLastError(); <br>                    return(0); <br>         } <br>     } <br>     else <br>        if ( SetupDbConnection() == FAIL) <br>             return(FAIL); <br> <br>     return(1); <br>} <br>/***************************************************************************\ <br>* dbConnect() <br>* <br>* GetConnection Details from DLG Box <br>* <br>* History: <br>* 6/5/92  2am <br>*   Created. <br>\***************************************************************************/ <br>LRESULT WINAPI dbConnect(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br> <br>    static char ServerName[MAX_NAME]  ; <br>    static char * lpszHold = ServerName; <br>    HCURSOR CurArrow,CurWait; <br> <br>    switch (message){ <br>      case WM_INITDIALOG:{ <br> <br>             // Set Default Server Name <br>        SendDlgItemMessage( hDlg, IDC_SERVERNAME, MAX_NAME, <br>                            (WPARAM)MAX_NAME, (LPARAM)0); <br> <br>        if( SendDlgItemMessage( hDlg, IDC_SERVERNAME, WM_SETTEXT, 0, <br>                                (LPARAM)lpszHold) == LB_ERR ){ <br>            //ErrorMsg(TEXT("Rename: Add Source String failure."),DISP); <br>            return(1); <br>        } <br>        //Set default Login ID <br>        lstrcpy(lpszHold,"sa"); <br> <br>         SendDlgItemMessage( hDlg, IDC_LOGINID, MAX_NAME, <br>                            (WPARAM)MAX_NAME, (LPARAM)0); <br> <br>        if( SendDlgItemMessage( hDlg, IDC_LOGINID, WM_SETTEXT, 0, <br>                                (LPARAM)lpszHold) == LB_ERR ){ <br>            //ErrorMsg(TEXT("Rename: Add Source String failure."),DISP); <br>            return(1); <br>        } <br>         // Set deafult Data Base Name <br>         lstrcpy (lpszHold,"SMS"); <br> <br>         SendDlgItemMessage( hDlg, IDC_DBNAME, MAX_NAME, <br>                            (WPARAM)MAX_NAME, (LPARAM)0); <br> <br>        if( SendDlgItemMessage( hDlg, IDC_DBNAME ,WM_SETTEXT, 0, <br>                                (LPARAM)lpszHold) == LB_ERR ){ <br>            //ErrorMsg(TEXT("Rename: Add Source String failure."),DISP); <br>            return(1); <br>        } <br>        //Set Deafult password length <br>         SendDlgItemMessage( hDlg, IDC_PASSWORD, MAX_NAME, <br>                            (WPARAM)MAX_NAME, (LPARAM)0); <br> <br>        return(1); <br>      } <br>      case WM_COMMAND:{ <br>        switch(LOWORD(wParam)){ <br>            case IDOK:{ <br> <br>                if( SendDlgItemMessage( hDlg, IDC_SERVERNAME, WM_GETTEXT, <br>                                        MAX_NAME, <br>                                        (LPARAM)lpszHold) == LB_ERR ){ <br>                    //ErrorMsg(TEXT("Rename: Get Source String failure."),DISP); <br>                    EndDialog(hDlg, wParam); <br>                    return(1); <br>                } <br>                lstrcpy(dbLoginInfo.ServerName,lpszHold); <br>                if( SendDlgItemMessage( hDlg, IDC_LOGINID, WM_GETTEXT, <br>                                        MAX_NAME, <br>                                        (LPARAM)lpszHold) == LB_ERR ){ <br>                    //ErrorMsg(TEXT("Rename: Get Source String failure."),DISP); <br>                    EndDialog(hDlg, wParam); <br>                    return(1); <br>                } <br>                lstrcpy(dbLoginInfo.LoginId,lpszHold); <br>                if( SendDlgItemMessage( hDlg, IDC_DBNAME, WM_GETTEXT, <br>                                        MAX_NAME, <br>                                        (LPARAM)lpszHold) == LB_ERR ){ <br>                    //ErrorMsg(TEXT("Rename: Get Source String failure."),DISP); <br>                    EndDialog(hDlg, wParam); <br>                    return(1); <br>                } <br>                lstrcpy(dbLoginInfo.DBName,lpszHold); <br>                if( SendDlgItemMessage( hDlg, IDC_PASSWORD, WM_GETTEXT, <br>                                        MAX_NAME, <br>                                        (LPARAM)lpszHold) == LB_ERR ){ <br>                    //ErrorMsg(TEXT("Rename: Get Source String failure."),DISP); <br>                    EndDialog(hDlg, wParam); <br>                    return(1); <br>                } <br>                lstrcpy(dbLoginInfo.Password,lpszHold); <br> <br>                if ( (dbLoginInfo.DropOnly = SendDlgItemMessage( hDlg, IDC_DROPONLY, BM_GETCHECK, <br>                                        MAX_NAME, <br>                                        (LPARAM)0)) == LB_ERR ){ <br>                    //ErrorMsg(TEXT("Rename: Get Source String failure."),DISP); <br>                    EndDialog(hDlg, wParam); <br>                    return(1); <br>                } <br>                CurWait = LoadCursor(NULL, IDC_WAIT); <br>                CurArrow = SetCursor(CurWait); <br>                if ( SetupDbConnection() == FAIL){ <br>                    SetCursor(CurArrow); <br>                 break; <br>                 } <br>              SetCursor(CurArrow); <br>            } <br>            case IDCANCEL:{ <br> <br>                EndDialog(hDlg, wParam); <br>                return(1); <br>            } <br>        } <br>        return(1); <br>      } // WM_COMMAND <br>    } <br> <br>    return(0); <br>} <br> <br>/********************************************************************* <br>* Connect to the DataBase with Indo supplied                         * <br>**********************************************************************/ <br> <br>int SetupDbConnection() <br>{ <br>    DBPROCESS *dbproc;      // allocate a DB-LIB process structure <br>    DBPROCESS *dbprocView;  // Allocate a proc to create the Views <br>    LOGINREC  *login;       // allocate a DB-LIB login structure <br>    static HANDLE hLib = NULL; <br>    PFNDLL GenViews = NULL; <br>    char CreateGroupName[MAX_COLUMN_NAME]; <br>    int RetCode; <br> <br>    CreateGroupName[0] = '\0'; <br> <br>    if (dbinit() == (char *)NULL) <br>    { <br>        ErrorMsg(IDS_ERR_COM_NOT_LOADED, DISP); <br>        return(1); <br>    } <br> <br>    // Install the user-supplied error-handling and message-handling <br>    // routines. They are defined at the bottom of this source file. <br> <br>    dberrhandle((void *)err_handler); <br>    dbmsghandle((void *)err_handler); <br> <br>    login = dblogin();                   // get login record from DB-LIB <br>    DBSETLUSER (login, (char *)dbLoginInfo.LoginId); // set the username <br>    DBSETLAPP (login, (char *)"smsview");              // set the application name <br>    DBSETLPWD (login, (char *)dbLoginInfo.Password); // set the SQL Server password <br> <br>    // Now attempt to create and initialize a DBPROCESS structure <br>    if ((dbproc = dbopen (login, dbLoginInfo.ServerName)) == NULL) <br>        return (FAIL); <br> <br>    // and another one for The Create View Process <br>    if ((dbprocView = dbopen (login, dbLoginInfo.ServerName)) == NULL) <br>        return (FAIL); <br> <br> <br>    if ( dbuse (dbproc, dbLoginInfo.DBName) == FAIL) {     // use the "SMS" database <br>        dbexit(); <br>      return(FAIL); <br>    } <br>    if ( dbuse (dbprocView,dbLoginInfo.DBName) == FAIL) { <br>        dbexit(); <br>      return(FAIL); <br>    } <br> <br>    if (!(hLib = LoadLibrary ("VIEWDLL.DLL"))) <br>            ErrorMsg(IDS_ERR_LOAD_VIEWDLL, DISP); <br>    else { <br>       GenViews = (PFNDLL) GetProcAddress (hLib,"GenViews"); <br>       RetCode = (GenViews)(dbproc,dbprocView,CreateGroupName,dbLoginInfo.DropOnly,CmdComplete); <br>       GenResults(RetCode); <br>     } <br>    // Close the connection and exit <br>    dbexit(); <br> <br>   return(1); <br>  } <br>//GenResults <br> <br>void GenResults(int RetCode) <br>{ <br>    char szMsg[MAX_PATH]; <br>    char szMsgTitle[32]; <br> <br>    LoadString(hInst, IDS_MSC_CREATE_VIEWS, szMsgTitle, 32); <br> <br>    if (RetCode == SUCCEED) { <br>        if ( !dbLoginInfo.DropOnly) { <br>            LoadString(hInst, IDS_MSG_CREATE_VIEW, szMsg, MAX_PATH); <br>        } <br>        else { <br>            LoadString(hInst, IDS_MSG_DROP_VIEW, szMsg, MAX_PATH); <br>        } <br>    } <br>    else { <br>        if ( !dbLoginInfo.DropOnly) { <br>            LoadString(hInst, IDS_ERR_CREATE_VIEW, szMsg, MAX_PATH); <br>        } <br>        else { <br>            LoadString(hInst, IDS_ERR_DROP_VIEW, szMsg, MAX_PATH); <br>        } <br>    } <br> <br>    MessageBox(NULL, szMsg, szMsgTitle, MB_ICONINFORMATION ); <br> <br>} <br> <br> <br> <br> <br> <br> <br>//ErrorMsg <br>void ErrorMsg(int iString, int Disp) <br>{ <br>#if 0 <br>  static HANDLE hEventLog = NULL; <br>  char *pErrorStrings[1]; <br> <br>  pErrorStrings[0] = errorString; <br> <br>  if (hEventLog == (HANDLE) NULL) <br>     hEventLog = RegisterEventSource((HANDLE)NULL,"SMS View"); <br> <br> <br>  if (! CmdComplete &amp;&amp; Disp)  // is it run with command line parameters <br>   MessageBox( NULL, errorString, "Data Base Error", MB_ICONSTOP ); <br> <br>  if ( hEventLog != NULL) <br>   ReportEvent(hEventLog, EVENTLOG_INFORMATION_TYPE, (WORD)0, (DWORD) 0, NULL <br>   ,1,0, pErrorStrings, NULL); <br>#endif <br> <br>    char    szString[MAX_PATH]; <br>    char    szMsgTitle[32]; <br> <br>    if (Disp == DISP) { <br>        LoadString(hInst, iString, szString, MAX_PATH); <br>        LoadString(hInst, IDS_MSC_DBERROR, szMsgTitle, 32); <br>        MessageBox(NULL, szString, szMsgTitle, MB_ICONSTOP); <br>    } <br>  } <br> <br> <br> <br>/**************************************************************************** <br> <br>    FUNCTION: SqlTestInit(HANDLE) <br> <br>    PURPOSE: Initializes window data and registers window class <br> <br>    COMMENTS: <br> <br>    Sets up a structure to register the window class.  Structure includes <br>    such information as what function will process messages, what cursor <br>    and icon to use, etc. <br> <br>****************************************************************************/ <br> <br>BOOL SqlTestInit(hInstance) <br>HANDLE hInstance;                  /* current instance       */ <br>{ <br>    HANDLE hMemory;                /* handle to allocated memory */ <br>    PWNDCLASS pWndClass;               /* structure pointer      */ <br>    BOOL bSuccess;                 /* RegisterClass() result     */ <br> <br>    hMemory = LocalAlloc(LPTR, sizeof(WNDCLASS)); <br>    pWndClass = (PWNDCLASS)hMemory; <br> <br>    pWndClass-&gt;style = 0; /*CS_HREDRAW | CS_VREDRAW; */ <br>    pWndClass-&gt;lpfnWndProc = (WNDPROC)NULL; <br>    pWndClass-&gt;hInstance = hInstance; <br>    pWndClass-&gt;hIcon = LoadIcon(hInstance,MAKEINTRESOURCE( IDI_SMSVIEW)); <br>    pWndClass-&gt;hCursor = LoadCursor(NULL, IDC_ARROW); <br>    pWndClass-&gt;hbrBackground = GetStockObject(WHITE_BRUSH); <br>    pWndClass-&gt;lpszMenuName = (LPSTR)"SMS Views"; <br>    pWndClass-&gt;lpszClassName = (LPSTR)"SMS Views"; <br> <br>    bSuccess = RegisterClass(pWndClass); <br> <br>    LocalFree(hMemory);                 /* Returns it to NT */ <br>    return (bSuccess);       /* Returns result of registering the window */ <br>} <br> <br>// <br>int err_handler(DBPROCESS * dbproc, int severity, int dberr, int oserr, char * dberrstr, char * oserrstr) <br>{ <br>    char    szString[512]; <br>    char    szMsgTitle[32]; <br>    int     iString; <br> <br>    // Ignore any 'Changed context' errors. (#5701 dec) <br> <br>    if (severity == 0x00001645) { <br>        return 0; <br>    } <br> <br>    LoadString(hInst, IDS_ERR_SQL_ERROR, szString, MAX_PATH); <br>    LoadString(hInst, IDS_MSC_DBERROR, szMsgTitle, 32); <br> <br>    iString = sizeof(szString) - strlen(szString); <br>    if (dberrstr != NULL) { <br>        strncpy(szString, dberrstr, iString); <br>    } <br>    else if (oserr != DBNOERR &amp;&amp; oserrstr != NULL) { <br>        strncpy(szString, oserrstr, iString); <br>    } <br>    szString[sizeof(szString)-1] = 0; <br> <br>    if (strstr(szString, "General SQL Server") == NULL) { <br>        MessageBox(NULL, szString, szMsgTitle, MB_ICONSTOP); <br>    } <br> <br>    return(INT_CANCEL); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

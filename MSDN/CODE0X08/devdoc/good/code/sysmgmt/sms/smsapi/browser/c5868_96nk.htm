<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BROWSER.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5870"></a>BROWSER.H</h2>
<pre><code>//*************************************************************************** <br>// <br>//  browser.h <br>// <br>//  Sample Windows app for SMS API. <br>// <br>//  This program illustrates the use of most of the SMS API set in order to <br>//  implement a generic Objectity browser. <br>//  Since this program is statically linked with smsapi.lib/dll it acts as <br>//  an SMS objectity browser only. <br>// <br>//  Using this program it is possible to view all containers and folders <br>//  that are implemented in the SMS API. <br>// <br>//  Jonathan Shuval     September 1994. <br>// <br>//*************************************************************************** <br> <br> <br>// ========================================================================== <br>// <br>//      Function prototypes. <br>// <br>// ========================================================================== <br> <br>extern "C" BOOL CALLBACK LoginDlg(  HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br> <br>extern "C" BOOL CALLBACK MainDlg(   HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br> <br>extern "C" BOOL CALLBACK ContainerViewDlg( <br>                                    HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>extern "C" BOOL CALLBACK ConfigFilterDlg( <br>                                    HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>extern "C" BOOL CALLBACK FolderViewDlg( <br>                                    HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>extern "C" BOOL CALLBACK ScalarViewDlg( <br>                                    HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>extern "C" BOOL CALLBACK ExpressionViewDlg( <br>                                    HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>extern "C" BOOL CALLBACK ViewSelFiltersDlg( <br>                                    HWND hDlg, <br>                                    UINT message, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>// ========================================================================== <br>// <br>//      Globals. <br>// <br>// ========================================================================== <br> <br>char szMsg[100];            // Message buffer. Used in formatting MessageBox <br>                            // strings. <br> <br>static HINSTANCE _hInstance; <br> <br> <br>// Get the available filter types and insert them into the menu <br>FILTER_INFO    *gpAvailFilterList = NULL; <br>DWORD ctFilters = 0; <br> <br>// ============================================================= <br>// Define a structure that we use in the main dlg for selected <br>// filters. <br>// This is the same as FILTER_INFO but we have an additional <br>// field for the filter handle. A handle of NULL means that the <br>// filter has not been opened. <br>typedef struct _MY_FILTER_INFO { <br>    FILTER_INFO *pF; <br>    HANDLE hFilter; <br>} MY_FILTER_INFO; <br> <br>// ============================================================= <br> <br>// Connection handle, make global. <br>HANDLE ghConnect; <br> <br>// Handle of current top-level folder/container. <br>HANDLE ghFolder; <br> <br>// Used to connect to datasource. Global so that LoginDlg can fill it in. <br>DATASOURCE gdsParams; <br>char gszServer[33]; <br>char gszDbName[33]; <br>char gszUserName[33]; <br>char gszPasswd[33]; <br> <br>FOLDER_INFO *gpCInfo; <br>MY_FILTER_INFO *gpMyFilter; <br> <br> <br> <br>HANDLE ghFilter;        // filter handle. Set in the filter stuff. <br>                        // Use in main dlg. <br> <br>HANDLE ghContainer;                 // Container handle. <br> <br>// [02-May-96] Changed from struct into class. <br>// Used in folder view. <br>class CFrame { <br>public: <br>    CFrame() { <br>        // Clear everything. <br>        hFolder = NULL; <br>        memset(szFolderID, 0, 256); <br>        memset(szfType, 0, 256); <br>        fType = 0; <br>        ctScalars = 0; <br>        ctFolders = 0; <br>        ctFolderTypes = 0; <br>        phFolders = NULL; <br>        ctTokens = 0; <br>    }; <br>    ~CFrame() {}; <br> <br>    HANDLE   hFolder;           // Make local copy of current folder. <br>    char     szFolderID[256];   // This folder's ID. <br>    char     szfType[256];      // Folder tag. <br>    DWORD    fType;             // Folder type. <br>    DWORD    ctScalars;         // Number of scalars. <br>    DWORD    ctFolders;         // Number of sub-folders. <br>    DWORD    ctFolderTypes;     // Number of sub-folder types. <br>    HANDLE   *phFolders;        // Array of handles to the folders. <br>    CObArray aszID;             // Array of sub-folder's IDs. <br>    // 02-May-96 <br>    DWORD    ctTokens;          // Num of tokens in expression (if supported). <br>}; <br>CFrame *CreateFolderFrame( HWND hDlg, HANDLE hFolder ); <br> <br>// Display the given folder frame. This is part of the Folder view dialogue. <br>void DisplayFolderFrame( HWND hDlg, CFrame *pFrame ); <br> <br> <br> <br>class CFrameStack <br>{ <br>public: <br>    CFrameStack(HWND hDlg); <br> <br>    ~CFrameStack(); <br> <br>    void push( CFrame *pFrame ); <br> <br>    CFrame *pop(); <br> <br>    void Dump( const char *psz );   // debug <br> <br>    int sp; <br>    CObArray stack; <br>    HWND _hDlg; <br> <br>};  /* CFrameStack */ <br> <br>/* EOF: browser.h */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

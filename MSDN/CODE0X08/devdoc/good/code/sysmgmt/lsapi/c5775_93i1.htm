<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SIMPLE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5779"></a>SIMPLE.C</h2>
<pre><code>/* <br> *  This is a part of the Microsoft Source Code Samples. <br> *  Copyright 1996 - 1998 Microsoft Corporation. <br> *  All rights reserved. <br> * <br> *  The following example uses the minimum amount of code required to <br> *  utilize any licensing system.  This example is provided on the SDK <br> *  and can be used to familiarize oneself with a licensing system or <br> *  as a template for an application.  Note that the code exits if a <br> *  grant cannot be obtained.  Recall that this is strictly an <br> *  application's decision and is not dictated by any licensing system <br> *  which adheres to the LSAPI standard. <br> */ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "windows.h" <br> <br>/* <br> * Include the LSAPI header file. <br> */ <br>#include "lsapi.h" <br> <br>/* <br> * Define the product name, product version, and publisher name for <br> * use with the licensing calls. <br> */ <br>#define MYAPP_PRODUCT_NAME    "sample_product" <br>#define MYAPP_PRODUCT_VERSION "1.0" <br>#define MYAPP_PUBLISHER_NAME  "sample_publishers" <br> <br>/* <br> * Define the strings used to log a comment with the license system. <br> */ <br>#define MYAPP_REQUEST_LOG_COMMENT "Comment for the LSRequest call" <br>#define MYAPP_RELEASE_LOG_COMMENT "Comment for the LSRelease call" <br> <br>/* <br> * Forward declarations <br> */ <br>void PrintErrors( LS_HANDLE handle, LS_STATUS_CODE errorCode ); <br> <br> <br>__cdecl main() <br>{ <br>   /* <br>    * LSAPI Variables <br>    */ <br>   LS_ULONG        unitsGranted; <br>   LS_HANDLE       licenseHandle; <br>   LS_STATUS_CODE  status; <br> <br>   /************ the following code is for the LSAPI beta only! ************/ <br>   char            szProviderPath[ MAX_PATH ]; <br>   UINT            nChars; <br> <br>   /* install if necessary */ <br>   nChars = GetSystemDirectory( szProviderPath, sizeof( szProviderPath ) ); <br>   if ( 0 == nChars ) <br>   { <br>      printf( "Can't get system directory, error %d.\n", GetLastError() ); <br>   } <br> <br>   lstrcat( szProviderPath, "\\mslsp32.dll" ); <br>   status = LSInstall( szProviderPath ); <br>   if ( LS_SUCCESS != status ) <br>   { <br>      printf( "Cannot install LSAPI, error 0x%08lx.\n", status ); <br>   } <br> <br>   /* add licenses for our product */ <br>   status = LSLicenseUnitsSet( LS_ANY, <br>                               MYAPP_PUBLISHER_NAME, <br>                               MYAPP_PRODUCT_NAME, <br>                               MYAPP_PRODUCT_VERSION, <br>                               LS_LICENSE_TYPE_NODE, <br>                               LS_NULL, <br>                               1, <br>                               0, <br>                               NULL ); <br>   if ( LS_SUCCESS != status ) <br>   { <br>      printf( "Cannot install licenses, error 0x%lx.\n", status ); <br>   } <br>   /************ the above code is for the LSAPI beta only! ************/ <br> <br>   /* <br>    * Make the call to request a grant <br>    */ <br>   status = LSRequest( <br>         LS_ANY,                               /* Use any licensing system */ <br>         (LS_STR FAR *)MYAPP_PUBLISHER_NAME,   /* Publisher name           */ <br>         (LS_STR FAR *)MYAPP_PRODUCT_NAME,     /* Product name             */ <br>         (LS_STR FAR *)MYAPP_PRODUCT_VERSION,  /* Version number           */ <br>         LS_DEFAULT_UNITS,                     /* Let license figure units */ <br>         (LS_STR FAR *)MYAPP_REQUEST_LOG_COMMENT, /* Log comment         */ <br>         0,                                    /* No Challenge             */ <br>         &amp;unitsGranted,                        /* # units granted          */ <br>         &amp;licenseHandle );                     /* license context          */ <br> <br>   /* <br>    * Check whether we got a successful grant.  If not, then call a routine <br>    * which prints out the error message, free the license handle, and do <br>    * not continue running the application. <br>    */ <br>   if ( LS_SUCCESS != status ) <br>      { <br>      PrintErrors( licenseHandle, LS_USE_LAST ); <br>      LSFreeHandle( licenseHandle ); <br>      return(1); <br>      } <br> <br>   /* <br>    * Continue with the application. <br>    */ <br>   printf("Hello World\n"); <br> <br> <br>   /* <br>    * We are now done with the application, so we must make a call <br>    * to release the grant. <br>    */ <br>   status = LSRelease( <br>         licenseHandle,                        /* License context          */ <br>         LS_DEFAULT_UNITS,                     /* Let license figure units */ <br>         (LS_STR FAR *)MYAPP_RELEASE_LOG_COMMENT);/* Log comment         */ <br>   if ( LS_SUCCESS != status ) <br>      { <br>      PrintErrors( licenseHandle, status ); <br>      LSFreeHandle( licenseHandle ); <br>      return( 1 ); <br>      } <br> <br>   /* <br>    * Free the license handle. <br>    */ <br>   LSFreeHandle( licenseHandle ); <br> <br> <br>   exit( 0 ); <br>} <br> <br> <br>void PrintErrors( LS_HANDLE handle, LS_STATUS_CODE errorCode ) <br>{ <br>   LS_STATUS_CODE   status; <br>   char             errorText[200]; <br> <br> <br>   errorText[0] = 0; <br> <br>   status = LSGetMessage( handle, errorCode, (LS_STR FAR *)errorText, 200); <br>   if ( LS_TEXT_UNAVAILABLE == status ) <br>      printf("Error: No message catalog available.\n"); <br>   else <br>      if ( LS_UNKNOWN_STATUS == status ) <br>         printf("Error: Unknown error code was used.\n"); <br>      else <br>         printf("Error: %s\n", errorText); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5933"></a>README.TXT</h2>
<pre><code>Overview: <br>    SA.EXE is sample code that demonstrates the new scheduling agent API <br>provided with installation of the Scheduling Agent package;  complete <br>documentation describing the interfaces is available elsewhere in the  <br>ActiveX SDK.  The sample mimics the functionality of the AT command  <br>through the Scheduling Agent APIs, as opposed to the NetSchedule API  <br>used by AT.  This sample implements only a small subset of the AT  <br>command set, but should be easily extensible. <br> <br>Usage: <br>        sa                                                - Show All Tasks <br>        sa /?                                             - Display Help <br>        sa JobName.job /DELETE                            - delete job <br>        sa JobName.job Time Command [UserName [Password]] - submit a job <br> <br>Job Time is in 24 hour format (such as 15:30) and is the next instance  <br>of this specific time within 24 hours. <br> <br>Command is the name of the application to run.  Path names may be included. <br>However, spaces are not allowed in the path name, so an application residing <br>in C:\program files\foo.exe should be specified as C:\progra~1\foo.exe, <br>using the old-style 8.3 filenames.  Should any command line parameters <br>be required, enclose the entire Command string in quotes: <br>    "c:\progra~1\foo.exe /bar 5" <br> <br>Username and password are required to run the specified task under Windows NT. <br>Under Windows NT, if they are not specified as part of the command line,  <br>a prompt for the missing data will be displayed.  Under Windows 95,  <br>both fields are ignored, if specified.  Regardless of specification, <br>under Windows 95, no prompt will be displayed. <br> <br>Error Reporting: <br>    The program performs error checking within the code over the parameters <br>passed in.  Any errors are returned as the exit value of "main", which may <br>be read by checking the environmental value %ERRORLEVEL% under Windows NT, <br>or the corresponding variable in Windows 95.    <br> <br>Additional Notes: <br>    The program makes use of the following interfaces and methods: <br>     <br>    1. ISchedulingAgent::Enum <br>       ISchedulingAgent::Activate <br>       ISchedulingAgent::Delete <br>       ISchedulingAgent::NewTask <br> <br>    2. IEnumTasks::Next <br> <br>    3. ITask::GetTriggerCount <br>       ITask::GetTriggerString <br>       ITask::SetAccountInformation <br>       ITask::SetApplicationName <br>       ITask::SetParameters <br>       ITask::SetComment <br>       ITask::SetFlags <br>       ITask::CreateTrigger <br> <br>    4. ITaskTrigger::SetTrigger <br> <br>    In addition, various methods on IUnknown and IPersistFile are called. <br>It is assumed that a user of this code has familiarity with those  <br>interfaces and calling conventions.   <br> <br>    The output of the program is one of four possibilities: <br> <br>    First, and most obviously, is the presentation of a help file.  This <br>case occurs from command line arguments requesting help, or from input <br>parameter lists that are longer than the expected range. Output is to <br>stdout. <br> <br>    Second, the program can enumerate all task objects in the tasks folder. <br>Output is provided to stdout, and consists of a line containing <br>"Job: filename.job" followed by indented lines containing strings of the <br>type "Trigger: text representation of trigger values".  Empty task folders <br>cause no output. <br> <br>    Third, the program can delete jobs from the job folder.  This action <br>will fail in a secure environment (Windows NT on an NTFS partition) if <br>the caller does not have permissions to remove the file.  Deletion <br>of tasks is not limited to those that were created from this program. <br>If the deletion succeeds, no output is displayed. <br> <br>    Finally, the program can add a task from the command line.  If the <br>scheduling agent is to recognize the task, the filename (jobname.job)  <br>given MUST have the extension ".job" on it.  Otherwise, it will fail <br>to be enumerated from this tool, the task scheduler, or anywhere else. <br>In addition, that task will fail to run if ".job" is not the file <br>extension.  If the addition succeeds, no output is displayed. <br> <br>    The task type that is created has a single trigger of type "ONCE" <br>and is limited to running within the next 24 hours.  Also, like AT, <br>these jobs will be deleted upon completion of their run.  For <br>creation of other types of triggers, please consult the documentation <br>for the TASK_TRIGGER structure. <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

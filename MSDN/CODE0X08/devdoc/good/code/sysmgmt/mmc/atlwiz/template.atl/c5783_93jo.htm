<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SNAPIN.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5784"></a>SNAPIN.H</h2>
<pre><code>#ifndef __[!UpperShortName]_H_ <br>#define __[!UpperShortName]_H_ <br> <br>#include "resource.h" <br>#include &lt;atlsnap.h&gt; <br> <br>[!if=(IExtendPropertySheet, "TRUE)] <br>class [!ClassName]Page : public CPropertyPageImpl&lt;[!ClassName]Page&gt; <br>{ <br>public : <br>[!ClassName]Page(TCHAR* pTitle = NULL) : CPropertyPageImpl&lt;[!ClassName]Page&gt; (pTitle) <br>{ <br>} <br>enum { IDD = [!IDD_PROPPAGE] }; <br>BEGIN_MSG_MAP([!ClassName]Page) <br>MESSAGE_HANDLER(WM_INITDIALOG, OnInitDialog) <br>CHAIN_MSG_MAP(CPropertyPageImpl&lt;[!ClassName]Page&gt;) <br>END_MSG_MAP() <br> <br>LRESULT OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL&amp; bHandled) <br>{ <br>::SendMessage(GetParent(), PSM_SETWIZBUTTONS, 0, PSWIZB_FINISH); <br>return 1; <br>} <br>}; <br>[!endif] <br> <br>class [!ClassName]Data : public CSnapInDataObjectImpl&lt;[!ClassName]Data&gt;,  <br>public ISnapInDataInterfaceImpl&lt;[!ClassName]Data&gt;, <br>public CComObjectRoot <br>{ <br>static const GUID* m_NODETYPE; <br>static const TCHAR* m_SZNODETYPE; <br>static const TCHAR* m_SZDISPLAY_NAME; <br>static const CLSID* m_SNAPIN_CLASSID; <br> <br>public: <br>static CComPtr&lt;IControlbar&gt; m_spControlBar; <br> <br>public: <br>BEGIN_COM_MAP([!ClassName]Data) <br>COM_INTERFACE_ENTRY(IDataObject) <br>COM_INTERFACE_ENTRY(ISnapInDataInterface) <br>END_COM_MAP() <br> <br>[!if=(IExtendContextMenu, "TRUE)] <br>BEGIN_SNAPINCOMMAND_MAP([!ClassName]Data) <br>END_SNAPINCOMMAND_MAP() <br>[!else] <br>[!if=(IExtendControlBar, "TRUE)] <br>BEGIN_SNAPINCOMMAND_MAP([!ClassName]Data) <br>END_SNAPINCOMMAND_MAP <br>[!endif] <br>[!endif] <br> <br>[!if=(IExtendContextMenu, "TRUE)] <br>SNAPINMENUID([!IDR_MENU]) <br>[!endif] <br> <br>[!if=(IExtendControlBar, "TRUE)] <br>BEGIN_SNAPINTOOLBARID_MAP([!ClassName]Data) <br>[!if(VC)] <br>SNAPINTOOLBARID_ENTRY([!IDR_TOOLBAR]) <br>[!else] <br>#error Please create a toolbar resource with the id [!IDR_TOOLBAR] <br>SNAPINTOOLBARID_ENTRY([!IDR_TOOLBAR]) <br>[!endif] <br>END_SNAPINTOOLBARID_MAP() <br>[!endif] <br> <br>[!ClassName]Data() <br>{ <br>} <br>~[!ClassName]Data() <br>{ <br>} <br> <br>[!if=(IExtendPropertySheet, "TRUE)] <br>    STDMETHOD(CreatePropertyPages)(LPPROPERTYSHEETCALLBACK lpProvider, <br>        long handle, IUnknown* pUnk) <br>{ <br>[!ClassName]Page* pPage = new [!ClassName]Page(_T("[!ShortName]")); <br>lpProvider-&gt;AddPage(pPage-&gt;Create()); <br>return S_OK; <br>} <br>     <br>    STDMETHOD(QueryPagesFor)(void) <br>{ <br>return S_OK; <br>} <br>[!endif] <br>void* GetNodeType() <br>{ <br>return (void*)m_NODETYPE; <br>} <br> <br>void* GetSZNodeType() <br>{ <br>return (void*)m_SZNODETYPE; <br>} <br> <br>void* GetDisplayName() <br>{ <br>return (void*)m_SZDISPLAY_NAME; <br>} <br> <br>void* GetSnapInCLSID() <br>{ <br>return (void*)m_SNAPIN_CLASSID; <br>} <br> <br>void PopulateChildren() <br>{ <br>} <br>}; <br> <br>class [!ClassName]Component : public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>public IComponentImpl&lt;[!ClassName]Component&gt;, <br>[!if=(IExtendPropertySheet, "TRUE)] <br>public IExtendPropertySheetImpl&lt;[!ClassName]Component&gt;, <br>[!endif] <br>[!if=(IExtendContextMenu, "TRUE)] <br>    public IExtendContextMenuImpl&lt;[!ClassName]Component&gt;, <br>[!endif] <br>[!if=(IExtendControlBar, "TRUE)] <br>public IExtendControlbarImpl&lt;[!ClassName]Component&gt;, <br>[!endif] <br>    public IPersistStream <br>{ <br>public: <br> <br>BEGIN_COM_MAP([!ClassName]Component) <br>    COM_INTERFACE_ENTRY(IComponent) <br>[!if=(IExtendPropertySheet, "TRUE)] <br>    COM_INTERFACE_ENTRY(IExtendPropertySheet) <br>[!endif] <br>[!if=(IExtendContextMenu, "TRUE)] <br>    COM_INTERFACE_ENTRY(IExtendContextMenu) <br>[!endif] <br>[!if=(IExtendControlBar, "TRUE)] <br>    COM_INTERFACE_ENTRY(IExtendControlbar) <br>[!endif] <br>    COM_INTERFACE_ENTRY(IPersistStream) <br>END_COM_MAP() <br> <br>public: <br>[!ClassName]Component() <br>{ <br>} <br>    STDMETHOD(GetClassID)(CLSID *pClassID) <br>{ <br>ATLTRACENOTIMPL("CSnapInComponent::GetClassID"); <br>} <br>STDMETHOD(IsDirty)() <br>{ <br>ATLTRACENOTIMPL("CSnapInComponent::IsDirty"); <br>} <br> <br>    STDMETHOD(Load)(IStream *pStm) <br>{ <br>ATLTRACENOTIMPL("CSnapInComponent::Load"); <br>} <br>    STDMETHOD(Save)(IStream *pStm, BOOL fClearDirty) <br>{ <br>ATLTRACENOTIMPL("CSnapInComponent::Save"); <br>} <br>    STDMETHOD(GetSizeMax)(ULARGE_INTEGER *pcbSize) <br>{ <br>ATLTRACENOTIMPL("CSnapInComponent::GetSizeMax"); <br>} <br> <br>}; <br> <br>class [!ClassName]ComponentData :  public CComObjectRootEx&lt;CComSingleThreadModel&gt;, <br>    public CComCoClass&lt;[!ClassName]ComponentData, &amp;CLSID_[!CoClassName]&gt;, <br>public IComponentDataImpl&lt;[!ClassName]ComponentData, [!ClassName]Component&gt;, <br>[!if=(IExtendPropertySheet, "TRUE)] <br>public IExtendPropertySheetImpl&lt;[!ClassName]Component&gt;, <br>[!endif] <br>[!if=(IExtendContextMenu, "TRUE)] <br>    public IExtendContextMenuImpl&lt;[!ClassName]Component&gt;, <br>[!endif] <br>[!if=(IExtendControlBar, "TRUE)] <br>public IExtendControlbarImpl&lt;[!ClassName]Component&gt;, <br>[!endif] <br>    public IPersistStream <br>{ <br>public: <br>[!ClassName]ComponentData () <br>{ <br>CComObject &lt;[!ClassName]Data&gt; *pData; <br>CComObject &lt;[!ClassName]Data&gt;::CreateInstance(&amp;pData); <br>lstrcpy(pData-&gt;m_pszDisplayName, OLESTR("[!ClassName]")); <br>pData-&gt;InitParentList(NULL); <br>pData-&gt;QueryInterface(IID_IUnknown, (void**)&amp;m_spNode); <br>} <br> <br>BEGIN_COM_MAP([!ClassName]ComponentData) <br>    COM_INTERFACE_ENTRY(IComponentData) <br>[!if=(IExtendPropertySheet, "TRUE)] <br>    COM_INTERFACE_ENTRY(IExtendPropertySheet) <br>[!endif] <br>[!if=(IExtendContextMenu, "TRUE)] <br>    COM_INTERFACE_ENTRY(IExtendContextMenu) <br>[!endif] <br>[!if=(IExtendControlBar, "TRUE)] <br>    COM_INTERFACE_ENTRY(IExtendControlbar) <br>[!endif] <br>    COM_INTERFACE_ENTRY(IPersistStream) <br>END_COM_MAP() <br> <br>DECLARE_REGISTRY_RESOURCEID([!IDR_REGISTRYID]) <br>DECLARE_NOT_AGGREGATABLE([!ClassName]ComponentData) <br> <br>    STDMETHOD(GetClassID)(CLSID *pClassID) <br>{ <br>ATLTRACENOTIMPL("CSnapInObject::GetClassID"); <br>} <br>STDMETHOD(IsDirty)() <br>{ <br>ATLTRACENOTIMPL("CSnapInObject::IsDirty"); <br>} <br> <br>    STDMETHOD(Load)(IStream *pStm) <br>{ <br>ATLTRACENOTIMPL("CSnapInObject::Load"); <br>} <br>    STDMETHOD(Save)(IStream *pStm, BOOL fClearDirty) <br>{ <br>ATLTRACENOTIMPL("CSnapInObject::Save"); <br>} <br>    STDMETHOD(GetSizeMax)(ULARGE_INTEGER *pcbSize) <br>{ <br>ATLTRACENOTIMPL("CSnapInObject::GetSizeMax"); <br>} <br> <br>    STDMETHOD(Initialize)(LPUNKNOWN pUnknown) <br>{ <br>HRESULT hr = IComponentDataImpl&lt;[!ClassName]ComponentData, [!ClassName]Component &gt;::Initialize(pUnknown); <br>if (FAILED(hr)) <br>return hr; <br> <br>CComPtr&lt;IImageList&gt; spImageList; <br> <br>if (m_spConsole-&gt;QueryScopeImageList(&amp;spImageList) != S_OK) <br>{ <br>ATLTRACE(_T("IConsole::QueryScopeImageList failed\n")); <br>return E_UNEXPECTED; <br>} <br> <br>// Load bitmaps associated with the scope pane <br>// and add them to the image list <br>// Loads the default bitmaps generated by the wizard <br>// Change as needed <br>HBITMAP hBitmap16 = LoadBitmap(_Module.GetResourceInstance(), MAKEINTRESOURCE([!IDB_SNAPIN16])); <br>if (hBitmap16 == NULL) <br>return S_OK; <br> <br> <br>HBITMAP hBitmap32 = LoadBitmap(_Module.GetResourceInstance(), MAKEINTRESOURCE([!IDB_SNAPIN32])); <br>if (hBitmap32 == NULL) <br>return S_OK; <br> <br>if (spImageList-&gt;ImageListSetStrip((long*)hBitmap16,  <br>(long*)hBitmap32, 0, RGB(0, 128, 128)) != S_OK) <br>{ <br>ATLTRACE(_T("IImageList::ImageListSetStrip failed\n")); <br>return E_UNEXPECTED; <br>} <br>return S_OK; <br>} <br>}; <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

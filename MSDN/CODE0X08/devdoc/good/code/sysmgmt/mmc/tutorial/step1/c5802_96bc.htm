<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATAOBJ.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5808"></a>DATAOBJ.H</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// dataobj.h : IDataObject Interface to communicate data <br>// <br>// This is a part of the MMC SDK. <br>// Copyright (C) 1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// MMC SDK Reference and related <br>// electronic documentation provided with the library. <br>// See these sources for detailed information regarding the <br>// MMC Library product. <br>// <br> <br>#ifndef __DATAOBJ_H_ <br>#define __DATAOBJ_H_ <br> <br>#include &lt;mmc.h&gt; <br> <br>// <br>// Defines, Types etc... <br>// <br> <br>typedef enum tagCOOKIETYPE <br>{ <br>  COOKIE_IS_ROOT, <br>  COOKIE_IS_STATUS <br> <br>} COOKIETYPE; <br> <br> <br>class CComponentData;        // Forward declaration <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CDataObject - This class is used to pass data back and forth with MMC. It <br>//               uses a standard interface, IDataObject to acomplish this. Refer <br>//               to OLE documentation for a description of clipboard formats and <br>//               the IdataObject interface. <br> <br>class CDataObject: <br>public IDataObject, <br>  public CComObjectRoot <br>{ <br>public: <br> <br>// ATL Maps <br>DECLARE_NOT_AGGREGATABLE(CDataObject) <br> <br>BEGIN_COM_MAP(CDataObject) <br>COM_INTERFACE_ENTRY(IDataObject) <br>END_COM_MAP() <br> <br> <br>  CDataObject(); <br>  ~CDataObject(); <br> <br>  VOID SetCookie(ULONG ulCookie, DATA_OBJECT_TYPES Type, COOKIETYPE ct); <br>  <br>  //  <br>  // IUnknown overrides <br>  // <br> <br>  STDMETHOD(QueryInterface) (REFIID riid, LPVOID FAR* ppvObj); <br>  STDMETHOD_(ULONG, AddRef) (); <br>  STDMETHOD_(ULONG, Release) (); <br> <br>  // <br>  // IDataObject implementation methods <br>  // <br> <br>  STDMETHOD(GetDataHere)(FORMATETC *pformatetc, STGMEDIUM *pmedium); <br> <br>  // Not Implemented <br>private: <br>  STDMETHOD(GetData)(LPFORMATETC lpFormatetcIn, LPSTGMEDIUM lpMedium) <br>  { return E_NOTIMPL; }; <br> <br>  STDMETHOD(EnumFormatEtc)(DWORD dwDirection, LPENUMFORMATETC* ppEnumFormatEtc) <br>  { return E_NOTIMPL; }; <br> <br>  STDMETHOD(QueryGetData)(LPFORMATETC lpFormatetc)  <br>  { return E_NOTIMPL; }; <br> <br>  STDMETHOD(GetCanonicalFormatEtc)(LPFORMATETC lpFormatetcIn, LPFORMATETC lpFormatetcOut) <br>  { return E_NOTIMPL; }; <br> <br>  STDMETHOD(SetData)(LPFORMATETC lpFormatetc, LPSTGMEDIUM lpMedium, BOOL bRelease) <br>  { return E_NOTIMPL; }; <br> <br>  STDMETHOD(DAdvise)(LPFORMATETC lpFormatetc, DWORD advf, LPADVISESINK pAdvSink, LPDWORD pdwConnection) <br>  { return E_NOTIMPL; }; <br>     <br>  STDMETHOD(DUnadvise)(DWORD dwConnection) <br>  { return E_NOTIMPL; }; <br> <br>  STDMETHOD(EnumDAdvise)(LPENUMSTATDATA* ppEnumAdvise) <br>  { return E_NOTIMPL; }; <br> <br>  // <br>  // Non-interface member functions <br>  // <br>public: <br>  DATA_OBJECT_TYPES  GetContext()    { return m_Context; } <br>  COOKIETYPE         GetCookieType() { return m_Type; }  <br>  ULONG CDataObject::GetCookie()     { return m_ulCookie; } <br> <br>private: <br>  HRESULT  _WriteInternal(IStream *pstm); <br>  HRESULT  _WriteDisplayName(IStream *pstm); <br>  HRESULT  _WriteNodeType(IStream *pstm); <br>  HRESULT  _WriteClsid(IStream *pstm); <br> <br>  ULONG               m_cRefs;     // object refcount <br>  ULONG               m_ulCookie;  // what this obj refers to <br>  DATA_OBJECT_TYPES   m_Context;   // context in which this was created <br>  COOKIETYPE          m_Type;      // how to interpret _ulCookie <br> <br>public: <br>  // At a minimum we have to implement these clipboard formats <br>  // to keep MMC happy. We will ASSERT if we don't <br>  static UINT s_cfInternal;       // Our custom clipboard format <br>  static UINT s_cfDisplayName; <br>  static UINT s_cfNodeType; <br>  static UINT s_cfSnapinClsid; <br>}; <br> <br>#endif // __DATAOBJ_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBALS.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5834"></a>GLOBALS.CPP</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// globals.cpp : IComponent Interface helpers <br>// <br>// This is a part of the MMC SDK. <br>// Copyright (C) 1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// MMC SDK Reference and related <br>// electronic documentation provided with the library. <br>// See these sources for detailed information regarding the <br>// MMC Library product. <br>// <br> <br>#include "stdafx.h" <br>#include "globals.h" <br> <br>HINSTANCE g_hinst;           // Global instance handle <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Global helper functions to help work with dataobjects and <br>// clipboard formats <br> <br> <br>//--------------------------------------------------------------------------- <br>//  Returns the current object based on the s_cfInternal clipboard format <br>//  <br>CDataObject* <br>ExtractOwnDataObject <br>( <br>  LPDATAOBJECT lpDataObject      // [in] IComponent pointer  <br>) <br>{ <br>  HGLOBAL     hGlobal; <br>  HRESULT     hr   = S_OK; <br>  CDataObject *pdo = NULL; <br> <br>  hr = ExtractFromDataObject( lpDataObject, <br>                              CDataObject::s_cfInternal,  <br>                              sizeof(CDataObject **), <br>                              &amp;hGlobal <br>                            ); <br> <br>  if (SUCCEEDED(hr)) <br>  { <br>    pdo = *(CDataObject **)(hGlobal); <br>    _ASSERT(pdo);     <br>    _ASSERT(!GlobalFree(hGlobal)); <br>  } <br> <br>  return pdo; <br> <br>} // end ExtractOwnDataObject() <br> <br>//--------------------------------------------------------------------------- <br>//  Extracts data based on the passed-in clipboard format <br>// <br>HRESULT <br>ExtractFromDataObject <br>( <br>  LPDATAOBJECT lpDataObject,   // [in]  Points to data object <br>  UINT         cfClipFormat,   // [in]  Clipboard format to use <br>  ULONG        nByteCount,     // [in]  Number of bytes to allocate <br>  HGLOBAL      *phGlobal       // [out] Points to the data we want  <br>) <br>{ <br>  HRESULT hr = S_OK; <br>  STGMEDIUM stgmedium = { TYMED_HGLOBAL,  NULL  }; <br>  FORMATETC formatetc = { cfClipFormat, NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL }; <br> <br>  _ASSERT( NULL != lpDataObject ); <br> <br>  *phGlobal = NULL; <br> <br>  do  <br>{ <br>    // Allocate memory for the stream <br>    stgmedium.hGlobal = GlobalAlloc( GMEM_SHARE, nByteCount ); <br> <br>if (!stgmedium.hGlobal) <br>    { <br>      hr = E_OUTOFMEMORY; <br>      ATLTRACE( L"Out of memory\n" ); <br>      break; <br>    } <br> <br>    // Attempt to get data from the object <br>    hr = lpDataObject-&gt;GetDataHere( &amp;formatetc, &amp;stgmedium ); <br>    if (FAILED(hr)) <br>    { <br>      break;        <br>    } <br> <br>    // stgmedium now has the data we need  <br>    *phGlobal = stgmedium.hGlobal; <br>    stgmedium.hGlobal = NULL; <br> <br>  } while (0);  <br> <br>  if (FAILED(hr) &amp;&amp; stgmedium.hGlobal) <br>  { <br>    _ASSERT( !GlobalFree(stgmedium.hGlobal) ); <br>  } <br>  return hr; <br> <br>} // end ExtractFromDataObject() <br> <br> <br>VOID DisplayError( LONG nErrorCode, LPWSTR wszDlgTitle ) <br>{ <br>  LPVOID lpMsgBuf; <br>  ::FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, <br>               NULL, <br>                   nErrorCode, <br>                   MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),  <br>                   (LPWSTR)&amp;lpMsgBuf, <br>           0, <br>           NULL <br>         ); <br>  ::MessageBox( NULL, (LPWSTR)lpMsgBuf, wszDlgTitle, MB_OK|MB_ICONINFORMATION ); <br>  LocalFree( lpMsgBuf ); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

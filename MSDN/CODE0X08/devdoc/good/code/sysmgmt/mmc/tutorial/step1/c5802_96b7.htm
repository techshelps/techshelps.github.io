<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMP.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5803"></a>COMP.CPP</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// comp.cpp : IComponent Interface to communicate with MMC for the  <br>//                       results pane.  This implementation uses the <br>//                       default list view. <br>// <br>// This is a part of the MMC SDK. <br>// Copyright (C) 1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// MMC SDK Reference and related <br>// electronic documentation provided with the library. <br>// See these sources for detailed information regarding the <br>// MMC Library product. <br>// <br> <br>#include "stdafx.h" <br>#include "disk.h" <br>#include "globals.h" <br>#include "comp.h" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CComponent - This class at this point is the basic interface to handle <br>//              anything to do with the results pane. At this point it is <br>//              mostly a stub place holder and serves no real purpose. It will <br>//              get filled in and used in later steps. <br> <br>CComponent::CComponent() <br>{ <br>  m_pConsole = NULL; <br>  m_cRefs    = 0;                      // Not used in Step1 <br>} <br> <br>CComponent::~CComponent() <br>{ <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// IComponent implementation <br>//  <br> <br>//--------------------------------------------------------------------------- <br>// IComponent::Initialize is called when a snap-in is being created and <br>// has items in the result pane to enumerate. The pointer to IConsole that <br>// is passed in is used to make QueryInterface calls to the console for <br>// interfaces such as IResultData. <br>// <br>STDMETHODIMP <br>CComponent::Initialize <br>( <br>  LPCONSOLE lpConsole        // [in] Pointer to IConsole's IUnknown interface <br>) <br>{ <br>  HRESULT hr = S_OK; <br> <br>  _ASSERT( NULL != lpConsole ); <br> <br>  // <br>  // Save away all the interfaces we'll need <br>  // <br> <br>  // Not realy going to use it in this step! <br>  m_pConsole = lpConsole; <br>  m_pConsole-&gt;AddRef(); <br>  <br>  return hr; <br> <br>} // end Initialize() <br> <br> <br>//--------------------------------------------------------------------------- <br>//  Notifies the snap-in of actions taken by the user <br>// <br>STDMETHODIMP <br>CComponent::Notify <br>( <br>  LPDATAOBJECT     pDataObject,  // [in] Points to data object <br>  MMC_NOTIFY_TYPE  event,        // [in] Identifies action taken by user <br>  long             arg,          // [in] Depends on the notification type <br>  long             param         // [in] Depends on the notification type <br>) <br>{ <br>  // Don't need to handle any messages at this point <br>  return S_OK; <br> <br>} // end Notify() <br> <br> <br>//--------------------------------------------------------------------------- <br>// Releases all references to the console. <br>// Only the console should call this method. <br>// <br>STDMETHODIMP <br>CComponent::Destroy <br>( <br>  long cookie          // Reserved, not in use at this time <br>) <br>{ <br>  // Release the interfaces that we QI'ed <br>  if (m_pConsole != NULL) <br>  { <br>    m_pConsole-&gt;Release();  <br>    m_pConsole = NULL;  <br>  } <br>  return S_OK; <br> <br>} // end Destroy() <br> <br> <br>//--------------------------------------------------------------------------- <br>// Returns a data object that can be used to retrieve context information <br>// for the specified cookie. <br>// <br>STDMETHODIMP <br>CComponent::QueryDataObject <br>( <br>  long               cookie,      // [in]  Specifies the unique identifier  <br>  DATA_OBJECT_TYPES  context,     // [in]  Type of data object <br>  LPDATAOBJECT      *ppDataObject // [out] Points to address of returned data <br>) <br>{ <br>  // Make sure we don't get here, we don't need it in this step <br>  _ASSERT(FALSE); <br> <br>  return S_FALSE; <br> <br>} // end QueryDataObject() <br> <br> <br>//--------------------------------------------------------------------------- <br>// This is really the only function of any use in this class for Step1. <br>// It is used when the results pane is displaying tree data such as nodes <br>// that show up in the scope pane. <br>// <br>STDMETHODIMP <br>CComponent::GetDisplayInfo <br>( <br>  LPRESULTDATAITEM pResultItem    // [in,out] Type of info required <br>) <br>{ <br>  static WCHAR* s_szSize = L"ABC"; <br>     <br>  _ASSERT( NULL != pResultItem ); <br>  <br>  if (pResultItem) <br>  { <br>    // Only responding for scope items for now. <br>    if ( TRUE == pResultItem-&gt;bScopeItem ) <br>    { <br>      if (pResultItem-&gt;mask &amp; RDI_STR)     // Looking for a string <br>      { <br>        if (0 == pResultItem-&gt;nCol ) <br>          pResultItem-&gt;str = (LPOLESTR)L"Geometry"; <br>        else if (1 == pResultItem-&gt;nCol ) <br>          pResultItem-&gt;str = (LPOLESTR)L"Child Folder"; <br>        else  <br>          pResultItem-&gt;str = (LPOLESTR)L"Else"; <br>      } <br> <br>      if (pResultItem-&gt;mask &amp; RDI_IMAGE) <br>      { <br>        pResultItem-&gt;nImage = 0; <br>      } <br>    } <br>    else  <br>    { <br>      _ASSERT(FALSE); <br>    } <br>  } <br> <br>  return S_OK; <br> <br>} // end GetDisplayInfo() <br> <br> <br>//--------------------------------------------------------------------------- <br>// Determines what the result pane view should be <br>// <br>STDMETHODIMP <br>CComponent::GetResultViewType <br>( <br>  long  cookie,        // [in]  Specifies the unique identifier  <br>  BSTR  *ppViewType,   // [out] Points to address of the returned view type <br>  long  *pViewOptions  // [out] Pointer to the MMC_VIEW_OPTIONS enumeration <br>) <br>{ <br>  // <br>  // Ask for default listview. <br>  // <br>  *pViewOptions = MMC_VIEW_OPTIONS_NONE; <br>  return S_FALSE; <br> <br>} // end GetResultViewType() <br> <br> <br>//--------------------------------------------------------------------------- <br>// Not used in Step1  <br>// <br>HRESULT <br>CComponent::CompareObjects <br>( <br>  LPDATAOBJECT lpDataObjectA,  // [in] First data object to compare  <br>  LPDATAOBJECT lpDataObjectB   // [in] Second data object to compare <br>) <br>{ <br>return S_FALSE; <br> <br>} // end CompareObjects() </code></pre>
<p>&nbsp;</p></body>
</HTML>

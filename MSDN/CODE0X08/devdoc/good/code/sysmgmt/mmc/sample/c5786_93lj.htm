<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVICE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5797"></a>SERVICE.H</h2>
<pre><code>// This is a part of the Microsoft Management Console. <br>// Copyright 1995 - 1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// Microsoft Management Console and related <br>// electronic documentation provided with the interfaces. <br> <br>#ifndef _SERVICE_H <br>#define _SERVICE_H <br> <br>// Forward declarations <br>class CSnapin; <br> <br>#define SCOPE_ITEM      111 <br>#define RESULT_ITEM     222 <br> <br>// Internal structure used for cookies <br>struct FOLDER_DATA <br>{ <br>    wchar_t*    szName; <br>    wchar_t*    szSize; <br>    wchar_t*    szType; <br> <br>    FOLDER_TYPES    type; <br>}; <br> <br>struct RESULT_DATA <br>{ <br>    DWORD       itemType; // used for debug purpose only <br>    FOLDER_TYPES parentType; <br>     <br>    wchar_t*    szName; <br>    wchar_t*    szSize; <br>    wchar_t*    szType; <br>}; <br> <br> <br>class CFolder  <br>{ <br>    DWORD       itemType;   // Used for debug purpose only. This should be the first  <br>                            // member. The class should not have any virtual fuctions. <br> <br>    friend class CSnapin; <br>    friend class CComponentDataImpl; <br> <br>public: <br>    // UNINITIALIZED is an invalid memory address and is a good cookie initializer <br>    CFolder()  <br>    {  <br>        itemType = SCOPE_ITEM;  // used for debug purpose only <br>         <br>        m_cookie = UNINITIALIZED;  <br>        m_enumed = FALSE;  <br>        m_pScopeItem = NULL;  <br>        m_type = NONE; <br>        m_pszName = NULL; <br>    };  <br> <br>    ~CFolder() { delete m_pScopeItem; CoTaskMemFree(m_pszName); }; <br> <br>// Interface <br>public: <br>    BOOL IsEnumerated() { return  m_enumed; }; <br>    void Set(BOOL state) { m_enumed = state; }; <br>    void SetCookie(long cookie) { m_cookie = cookie; } <br>    FOLDER_TYPES GetType() { ASSERT(m_type != NONE); return m_type; }; <br>    BOOL operator == (const CFolder&amp; rhs) const { return rhs.m_cookie == m_cookie; }; <br>    BOOL operator == (long cookie) const { return cookie == m_cookie; }; <br>    void SetName(LPWSTR pszIn)  <br>    {  <br>        UINT len = wcslen(pszIn) + 1; <br>        LPWSTR psz = (LPWSTR)CoTaskMemAlloc(len * sizeof(WCHAR)); <br>        if (psz != NULL) <br>        { <br>            wcscpy(psz, pszIn); <br>            CoTaskMemFree(m_pszName); <br>            m_pszName = psz; <br>        } <br>    } <br> <br>// Implementation <br>private: <br>    void Create(LPWSTR szName, int nImage, int nOpenImage,  <br>        FOLDER_TYPES type, BOOL bHasChildren = FALSE); <br> <br>// Attributes <br>private: <br>    LPSCOPEDATAITEM m_pScopeItem; <br>    long            m_cookie; <br>    BOOL            m_enumed; <br>    FOLDER_TYPES    m_type; <br>    LPOLESTR        m_pszName; <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

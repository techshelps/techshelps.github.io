<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATAOBJ.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5790"></a>DATAOBJ.H</h2>
<pre><code>// This is a part of the Microsoft Management Console. <br>// Copyright 1995 - 1997 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// Microsoft Management Console and related <br>// electronic documentation provided with the interfaces. <br> <br>#ifndef _DATAOBJ_H <br>#define _DATAOBJ_H <br> <br> <br>class CDataObject : public IDataObject, public CComObjectRoot  <br>{ <br>    friend class CSnapin; <br> <br>// ATL Maps <br>DECLARE_NOT_AGGREGATABLE(CDataObject) <br>BEGIN_COM_MAP(CDataObject) <br>COM_INTERFACE_ENTRY(IDataObject) <br>END_COM_MAP() <br> <br>// Construction/Destruction <br>    CDataObject(); <br>    ~CDataObject()  <br>    { <br>    #ifdef _DEBUG <br>        m_ComponentData = NULL; <br>    #endif <br> <br>        delete [] m_pbMultiSelData; <br>    }; <br> <br>// Clipboard formats that are required by the console <br>public: <br>    static unsigned int    m_cfNodeType;        // Required by the console <br>    static unsigned int    m_cfNodeTypeString;  // Required by the console <br>    static unsigned int    m_cfDisplayName;     // Required by the console <br>    static unsigned int    m_cfCoClass;         // Required by the console <br>    static unsigned int    m_cfMultiSel;        // Required by the console <br> <br>    static unsigned int    m_cfInternal;        // Step 3 <br>static unsigned int   m_cfWorkstation;     // Published information <br> <br>// Standard IDataObject methods <br>public: <br>// Implemented <br>    STDMETHOD(GetData)(LPFORMATETC lpFormatetcIn, LPSTGMEDIUM lpMedium); <br>    STDMETHOD(GetDataHere)(LPFORMATETC lpFormatetc, LPSTGMEDIUM lpMedium); <br>    STDMETHOD(EnumFormatEtc)(DWORD dwDirection, LPENUMFORMATETC* ppEnumFormatEtc); <br> <br>    ULONG InternalAddRef() <br>    { <br>#ifdef _DEBUG <br>        ASSERT(m_ComponentData != NULL); <br>        ++(m_ComponentData-&gt;m_cDataObjects); <br>        if (m_bMultiSelDobj == TRUE) <br>            AddRefMultiSelDobj(); <br>#endif  <br>        return CComObjectRoot::InternalAddRef(); <br>    } <br>    ULONG InternalRelease() <br>    { <br>#ifdef _DEBUG <br>        ASSERT(m_ComponentData != NULL); <br>        --(m_ComponentData-&gt;m_cDataObjects); <br>        if (m_bMultiSelDobj == TRUE) <br>            ReleaseMultiSelDobj(); <br>#endif  <br>        return CComObjectRoot::InternalRelease(); <br>    } <br> <br>// Not Implemented <br>private: <br>    STDMETHOD(QueryGetData)(LPFORMATETC lpFormatetc)  <br>    { return E_NOTIMPL; }; <br> <br>    STDMETHOD(GetCanonicalFormatEtc)(LPFORMATETC lpFormatetcIn, LPFORMATETC lpFormatetcOut) <br>    { return E_NOTIMPL; }; <br> <br>    STDMETHOD(SetData)(LPFORMATETC lpFormatetc, LPSTGMEDIUM lpMedium, BOOL bRelease) <br>    { return E_NOTIMPL; }; <br> <br>    STDMETHOD(DAdvise)(LPFORMATETC lpFormatetc, DWORD advf, <br>                LPADVISESINK pAdvSink, LPDWORD pdwConnection) <br>    { return E_NOTIMPL; }; <br>     <br>    STDMETHOD(DUnadvise)(DWORD dwConnection) <br>    { return E_NOTIMPL; }; <br> <br>    STDMETHOD(EnumDAdvise)(LPENUMSTATDATA* ppEnumAdvise) <br>    { return E_NOTIMPL; }; <br> <br>// Implementation <br>public: <br>    void SetType(DATA_OBJECT_TYPES type) // Step 3 <br>    { ASSERT(m_internal.m_type == CCT_UNINITIALIZED); m_internal.m_type = type; } <br> <br>    // This is used only as a diagnostic in debug builds to track if  <br>    // anyone is hanging on to any data objects that's have been handed out <br>    // Snapin's should view context data objects as ephemeral. <br>#ifdef _DEBUG <br>public: <br>    void SetComponentData(CComponentDataImpl* pCCD)  <br>    { <br>        ASSERT(m_ComponentData == NULL &amp;&amp; pCCD != NULL); m_ComponentData = pCCD; <br>    } ; <br>private: <br>    CComponentDataImpl* m_ComponentData; <br>#endif <br> <br>public: <br>    void SetCookie(long cookie) { m_internal.m_cookie = cookie; } // Step 3 <br>    void SetString(LPTSTR lpString) { m_internal.m_string = lpString; } <br>    void SetClsid(const CLSID&amp; clsid) { m_internal.m_clsid = clsid; } <br> <br>    void SetMultiSelData(BYTE* pbMultiSelData, UINT cbMultiSelData) <br>    { <br>        m_pbMultiSelData = pbMultiSelData; <br>        m_cbMultiSelData = cbMultiSelData; <br>    } <br> <br>    void SetMultiSelDobj() <br>    { <br>        m_bMultiSelDobj = TRUE; <br>    } <br> <br>#ifdef _DEBUG <br>    UINT dbg_refCount; <br>  <br> <br>    void AddRefMultiSelDobj() <br>    { <br>        ASSERT(m_bMultiSelDobj == TRUE); <br>        ++dbg_refCount; <br>    } <br> <br>    void ReleaseMultiSelDobj() <br>    { <br>        ASSERT(m_bMultiSelDobj == TRUE); <br>        --dbg_refCount; <br>        //if (dbg_refCount == 0) <br>        //    ::MessageBox(NULL, _T("Final release on multi-sel-dobj"), _T("Sample snapin"), MB_OK); <br>    } <br>#endif <br> <br>private: <br>    HRESULT CreateNodeTypeData(LPSTGMEDIUM lpMedium); <br>    HRESULT CreateNodeTypeStringData(LPSTGMEDIUM lpMedium); <br>    HRESULT CreateDisplayName(LPSTGMEDIUM lpMedium); <br>    HRESULT CreateInternal(LPSTGMEDIUM lpMedium); // Step 3 <br>    HRESULT CreateWorkstationName(LPSTGMEDIUM lpMedium); <br>    HRESULT CreateCoClassID(LPSTGMEDIUM lpMedium); <br>    HRESULT CreateMultiSelData(LPSTGMEDIUM lpMedium); <br> <br>    HRESULT Create(const void* pBuffer, int len, LPSTGMEDIUM lpMedium); <br> <br>    INTERNAL m_internal;    // Step 3 <br> <br>    BYTE* m_pbMultiSelData; <br>    UINT m_cbMultiSelData; <br>    BOOL m_bMultiSelDobj; <br>}; <br> <br> <br>#endif  </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSNAPIN.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5788"></a>CSNAPIN.H</h2>
<pre><code>// This is a part of the Microsoft Management Console. <br>// Copyright 1995 - 1998 Microsoft Corporation <br>// All rights reserved. <br>// <br>// This source code is only intended as a supplement to the <br>// Microsoft Management Console and related <br>// electronic documentation provided with the interfaces. <br> <br>// CSnapin.h : Declaration of the CSnapin <br> <br> <br>#include "resource.h"       // main symbols <br> <br>#ifndef __mmc_h__ <br>#include &lt;mmc.h&gt; <br>#endif <br> <br>class CFolder;  <br> <br>// Note - This is the offset in my image list that represents the folder <br>const FOLDER_IMAGE_IDX = 0; <br>const OPEN_FOLDER_IMAGE_IDX = 5; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Snapin <br> <br>// <br>// helper methods extracting data from data object <br>// <br>INTERNAL *   ExtractInternalFormat(LPDATAOBJECT lpDataObject); <br>wchar_t *    ExtractWorkstation(LPDATAOBJECT lpDataObject); <br>GUID *       ExtractNodeType(LPDATAOBJECT lpDataObject); <br>CLSID *      ExtractClassID(LPDATAOBJECT lpDataObject); <br> <br>class CComponentDataImpl: <br>    public IComponentData, <br>    public IExtendPropertySheet, <br>    public IExtendContextMenu, <br>    public IPersistStream, <br>    public CComObjectRoot <br>{ <br>BEGIN_COM_MAP(CComponentDataImpl) <br>    COM_INTERFACE_ENTRY(IComponentData) <br>    COM_INTERFACE_ENTRY(IExtendPropertySheet) <br>    COM_INTERFACE_ENTRY(IExtendContextMenu) <br>    COM_INTERFACE_ENTRY(IPersistStream) <br>END_COM_MAP() <br> <br>    friend class CSnapin; <br>    friend class CDataObject; <br> <br>    CComponentDataImpl(); <br>    ~CComponentDataImpl(); <br> <br>public: <br>    virtual const CLSID&amp; GetCoClassID() = 0; <br>    virtual const BOOL IsPrimaryImpl() = 0; <br> <br>public: <br>// IComponentData interface members <br>    STDMETHOD(Initialize)(LPUNKNOWN pUnknown); <br>    STDMETHOD(CreateComponent)(LPCOMPONENT* ppComponent); <br>    STDMETHOD(Notify)(LPDATAOBJECT lpDataObject, MMC_NOTIFY_TYPE event, long arg, long param); <br>    STDMETHOD(Destroy)(); <br>    STDMETHOD(QueryDataObject)(long cookie, DATA_OBJECT_TYPES type, LPDATAOBJECT* ppDataObject); <br>    STDMETHOD(GetDisplayInfo)(SCOPEDATAITEM* pScopeDataItem);        <br>    STDMETHOD(CompareObjects)(LPDATAOBJECT lpDataObjectA, LPDATAOBJECT lpDataObjectB); <br>    STDMETHOD(DoInsertWizard)(LPPROPERTYSHEETCALLBACK lpProvider); <br>    STDMETHOD(GetWatermarks)(HBITMAP* lphWatermark, HBITMAP* lphHeader, HPALETTE* lphPalette, BOOL* pbStretch); <br> <br>// IExtendPropertySheet interface <br>public: <br>    STDMETHOD(CreatePropertyPages)(LPPROPERTYSHEETCALLBACK lpProvider,  <br>                        long handle,  <br>                        LPDATAOBJECT lpIDataObject); <br>    STDMETHOD(QueryPagesFor)(LPDATAOBJECT lpDataObject); <br> <br>// IExtendContextMenu  <br>public: <br>    STDMETHOD(AddMenuItems)(LPDATAOBJECT pDataObject, LPCONTEXTMENUCALLBACK pCallbackUnknown,  <br>                            long *pInsertionAllowed); <br>    STDMETHOD(Command)(long nCommandID, LPDATAOBJECT pDataObject); <br> <br>public: <br>// IPersistStream interface members <br>    STDMETHOD(GetClassID)(CLSID *pClassID); <br>    STDMETHOD(IsDirty)(); <br>    STDMETHOD(Load)(IStream *pStm); <br>    STDMETHOD(Save)(IStream *pStm, BOOL fClearDirty); <br>    STDMETHOD(GetSizeMax)(ULARGE_INTEGER *pcbSize); <br> <br>    bool m_bInitializedCD; <br>    bool m_bLoadedCD; <br>    bool m_bDestroyedCD; <br> <br>// Notify handler declarations <br>private: <br>    HRESULT OnDelete(long cookie); <br>    HRESULT OnRemoveChildren(long arg); <br>    HRESULT OnRename(long cookie, long arg, long param); <br>    HRESULT OnExpand(LPDATAOBJECT lpDataObject, long arg, long param); <br>    HRESULT OnSelect(long cookie, long arg, long param); <br>    HRESULT OnProperties(long param); <br> <br>#if DBG==1 <br>public: <br>    ULONG InternalAddRef() <br>    { <br>        return CComObjectRoot::InternalAddRef(); <br>    } <br>    ULONG InternalRelease() <br>    { <br>        return CComObjectRoot::InternalRelease(); <br>    } <br>#endif // DBG==1 <br> <br>// Scope item creation helpers <br>private: <br>    CFolder* FindObject(long cookie);  <br>    void CreateFolderList(LPDATAOBJECT lpDataObject);            // scope item cookie helper <br>    void DeleteList(); <br>    void EnumerateScopePane(LPDATAOBJECT lpDataObject, HSCOPEITEM pParent); <br>    BOOL IsScopePaneNode(LPDATAOBJECT lpDataObject);     <br> <br>private: <br>    LPCONSOLENAMESPACE      m_pScope;       // My interface pointer to the scope pane <br>    LPCONSOLE               m_pConsole;     // My interface pointer to the console <br>    HSCOPEITEM              m_pStaticRoot; <br>    BOOL                    m_bIsDirty; <br> <br>    void SetDirty(BOOL b = TRUE) { m_bIsDirty = b; } <br>    void ClearDirty() { m_bIsDirty = FALSE; } <br>    BOOL ThisIsDirty() { return m_bIsDirty; } <br> <br>    void AddScopeItemToResultPane(long cookie); <br> <br>private: <br>    CList&lt;CFolder*, CFolder*&gt; m_scopeItemList;  <br> <br>#ifdef _DEBUG <br>    friend class CDataObject; <br>    int     m_cDataObjects; <br> <br>#endif <br>}; <br> <br> <br>class CComponentDataPrimaryImpl : public CComponentDataImpl, <br>    public CComCoClass&lt;CComponentDataPrimaryImpl, &amp;CLSID_Snapin&gt; <br>{ <br>public: <br>    DECLARE_REGISTRY(CSnapin, _T("Snapin.Snapin.1"), _T("Snapin.Snapin"), IDS_SNAPIN_DESC, THREADFLAGS_APARTMENT) <br>    virtual const CLSID &amp; GetCoClassID() { return CLSID_Snapin; } <br>    virtual const BOOL IsPrimaryImpl() { return TRUE; } <br>}; <br> <br>class CComponentDataExtensionImpl : public CComponentDataImpl, <br>    public CComCoClass&lt;CComponentDataExtensionImpl, &amp;CLSID_Extension&gt; <br>{ <br>public: <br>    DECLARE_REGISTRY(CSnapin, _T("Extension.Extension.1"), _T("Extension.Extension"), IDS_SNAPIN_DESC, THREADFLAGS_APARTMENT) <br>    virtual const CLSID &amp; GetCoClassID(){ return CLSID_Extension; } <br>    virtual const BOOL IsPrimaryImpl() { return FALSE; } <br>}; <br> <br> <br>enum CUSTOM_VIEW_ID <br>{ <br>    VIEW_DEFAULT_LV = 0, <br>    VIEW_CALENDAR_OCX = 1, <br>    VIEW_MICROSOFT_URL = 2, <br>}; <br> <br>class CSnapin :  <br>    public IComponent, <br>    public IExtendContextMenu,   // Step 3 <br>    public IExtendControlbar, <br>    public IResultDataCompare, <br>    public IResultOwnerData, <br>    public IPersistStream, <br>    public CComObjectRoot <br>{ <br>public: <br>    CSnapin(); <br>    ~CSnapin(); <br> <br>BEGIN_COM_MAP(CSnapin) <br>    COM_INTERFACE_ENTRY(IComponent) <br>    COM_INTERFACE_ENTRY(IExtendContextMenu)   // Step 3 <br>    COM_INTERFACE_ENTRY(IExtendControlbar) <br>    COM_INTERFACE_ENTRY(IResultDataCompare) <br>    COM_INTERFACE_ENTRY(IResultOwnerData) <br>    COM_INTERFACE_ENTRY(IPersistStream) <br>END_COM_MAP() <br> <br>    friend class CDataObject; <br>    static long lDataObjectRefCount; <br> <br>// IComponent interface members <br>public: <br>    STDMETHOD(Initialize)(LPCONSOLE lpConsole); <br>    STDMETHOD(Notify)(LPDATAOBJECT lpDataObject, MMC_NOTIFY_TYPE event, long arg, long param); <br>    STDMETHOD(Destroy)(long cookie); <br>    STDMETHOD(GetResultViewType)(long cookie,  LPOLESTR* ppViewType, long* pViewOptions); <br>    STDMETHOD(QueryDataObject)(long cookie, DATA_OBJECT_TYPES type, <br>                        LPDATAOBJECT* ppDataObject); <br> <br>    STDMETHOD(GetDisplayInfo)(RESULTDATAITEM*  pResultDataItem); <br>    STDMETHOD(CompareObjects)(LPDATAOBJECT lpDataObjectA, LPDATAOBJECT lpDataObjectB); <br> <br>// IResultDataCompare <br>    STDMETHOD(Compare)(long lUserParam, long cookieA, long cookieB, int* pnResult); <br> <br>// IResultOwnerData <br>    STDMETHOD(FindItem)(LPRESULTFINDINFO pFindInfo, int* pnFoundIndex); <br>    STDMETHOD(CacheHint)(int nStartIndex, int nEndIndex); <br>    STDMETHOD(SortItems)(int nColumn, DWORD dwSortOptions, long lUserParam); <br> <br>// IExtendControlbar <br>    STDMETHOD(SetControlbar)(LPCONTROLBAR pControlbar); <br>    STDMETHOD(ControlbarNotify)(MMC_NOTIFY_TYPE event, long arg, long param); <br> <br>public: <br>// IPersistStream interface members <br>    STDMETHOD(GetClassID)(CLSID *pClassID); <br>    STDMETHOD(IsDirty)(); <br>    STDMETHOD(Load)(IStream *pStm); <br>    STDMETHOD(Save)(IStream *pStm, BOOL fClearDirty); <br>    STDMETHOD(GetSizeMax)(ULARGE_INTEGER *pcbSize); <br> <br>    // Only for debug purpose <br>    bool m_bInitializedC; <br>    bool m_bLoadedC; <br>    bool m_bDestroyedC; <br> <br>// Helpers for CSnapin <br>public: <br>    void SetIComponentData(CComponentDataImpl* pData); <br>    void GetItemName(LPDATAOBJECT lpDataObject, LPTSTR pszName); <br>    BOOL IsPrimaryImpl()  <br>    { <br>        CComponentDataImpl* pData =  <br>            dynamic_cast&lt;CComponentDataImpl*&gt;(m_pComponentData); <br>        ASSERT(pData != NULL); <br>        if (pData != NULL) <br>            return pData-&gt;IsPrimaryImpl(); <br> <br>        return FALSE; <br>    } <br> <br>#if DBG==1 <br>public: <br>    int dbg_cRef; <br>    ULONG InternalAddRef() <br>    { <br>        ++dbg_cRef; <br>        return CComObjectRoot::InternalAddRef(); <br>    } <br>    ULONG InternalRelease() <br>    { <br>        --dbg_cRef; <br>        return CComObjectRoot::InternalRelease(); <br>    } <br>#endif // DBG==1 <br> <br>// Notify event handlers <br>protected: <br>    HRESULT OnFolder(long cookie, long arg, long param); <br>    HRESULT OnAddImages(long cookie, long arg, long param); <br>    HRESULT OnShow(long cookie, long arg, long param); <br>    HRESULT OnActivate(long cookie, long arg, long param); <br>    HRESULT OnMinimize(long cookie, long arg, long param); <br>    HRESULT OnPropertyChange(LPDATAOBJECT lpDataObject); // Step 3 <br>    HRESULT OnUpdateView(LPDATAOBJECT lpDataObject); <br>    HRESULT OnResultItemClk(DATA_OBJECT_TYPES type, long cookie); <br>    HRESULT OnContextHelp(LPDATAOBJECT lpDataObject); <br>    void OnButtonClick(LPDATAOBJECT pdtobj, int idBtn); <br> <br>    HRESULT QueryMultiSelectDataObject(long cookie, DATA_OBJECT_TYPES type, <br>                                   LPDATAOBJECT* ppDataObject); <br> <br>// IExtendContextMenu  <br>public: <br>    STDMETHOD(AddMenuItems)(LPDATAOBJECT pDataObject, LPCONTEXTMENUCALLBACK pCallbackUnknown, <br>                            long *pInsertionAllowed); <br>    STDMETHOD(Command)(long nCommandID, LPDATAOBJECT pDataObject); <br> <br>// End step 3 <br> <br>// Helper functions <br>protected: <br>    BOOL IsEnumerating(LPDATAOBJECT lpDataObject); <br>    void Construct(); <br>    void LoadResources(); <br>    HRESULT InitializeHeaders(long cookie); <br> <br>    void Enumerate(long cookie, HSCOPEITEM pParent); <br>    void EnumerateResultPane(long cookie); <br> <br>// Result pane helpers <br>    void AddResultItems(RESULT_DATA* pData, int nCount, int imageIndex); <br>    void AddUser(); <br>    void AddCompany(); <br>    void AddExtUser(); <br>    void AddExtCompany(); <br>    void AddVirtual(); <br>    RESULT_DATA* GetVirtualResultItem(int iIndex); <br> <br>    HRESULT InitializeBitmaps(long cookie); <br> <br>// UI Helpers <br>    void HandleStandardVerbs(bool bDeselectAll, long arg, LPDATAOBJECT lpDataObject); <br>    void HandleExtToolbars(bool bDeselectAll, long arg, long param); <br>void HandleExtMenus(long arg, long param); <br>    void _OnRefresh(LPDATAOBJECT pDataObject); <br> <br>// Interface pointers <br>protected: <br>    LPCONSOLE           m_pConsole;   // Console's IFrame interface <br>    LPHEADERCTRL        m_pHeader;  // Result pane's header control interface <br>    LPCOMPONENTDATA     m_pComponentData;    <br>    LPRESULTDATA        m_pResult;      // My interface pointer to the result pane <br>    LPIMAGELIST         m_pImageResult; // My interface pointer to the result pane image list <br>    LPTOOLBAR           m_pToolbar1;    // Toolbar for view <br>    LPTOOLBAR           m_pToolbar2;    // Toolbar for view <br>    LPCONTROLBAR        m_pControlbar;  // control bar to hold my tool bars <br>    LPCONSOLEVERB       m_pConsoleVerb; // pointer the console verb <br>    LPMENUBUTTON        m_pMenuButton1; // Menu Button for view <br> <br>    ::CBitmap*    m_pbmpToolbar1;     // Imagelist for the first toolbar <br>    ::CBitmap*    m_pbmpToolbar2;     // Imagelist for the first toolbar <br> <br> <br>// Header titles for each nodetype(s) <br>protected: <br>    CString m_column1;      // Name <br>    CString m_column2;      // Size <br>    CString m_column3;      // Type <br> <br>private: <br>    BOOL            m_bIsDirty; <br>    CUSTOM_VIEW_ID  m_CustomViewID; <br>    BOOL            m_bVirtualView; <br>    DWORD           m_dwVirtualSortOptions;  <br> <br>    void SetDirty(BOOL b = TRUE) { m_bIsDirty = b; } <br>    void ClearDirty() { m_bIsDirty = FALSE; } <br>    BOOL ThisIsDirty() { return m_bIsDirty; } <br>}; <br> <br>inline void CSnapin::SetIComponentData(CComponentDataImpl* pData) <br>{ <br>    ASSERT(pData); <br>    ASSERT(m_pComponentData == NULL); <br>    LPUNKNOWN pUnk = pData-&gt;GetUnknown(); <br>    HRESULT hr; <br>     <br>    hr = pUnk-&gt;QueryInterface(IID_IComponentData, reinterpret_cast&lt;void**&gt;(&amp;m_pComponentData)); <br> <br>    ASSERT(hr == S_OK); <br>} <br> <br> <br>class CSnapinAboutImpl :  <br>    public ISnapinAbout, <br>    public CComObjectRoot, <br>    public CComCoClass&lt;CSnapinAboutImpl, &amp;CLSID_About&gt; <br>{ <br>public: <br>    CSnapinAboutImpl(); <br>    ~CSnapinAboutImpl(); <br> <br>public: <br>DECLARE_REGISTRY(CSnapin, _T("Snapin.About.1"), _T("Snapin.About"), IDS_SNAPIN_DESC, THREADFLAGS_BOTH) <br> <br>BEGIN_COM_MAP(CSnapinAboutImpl) <br>    COM_INTERFACE_ENTRY(ISnapinAbout) <br>END_COM_MAP() <br> <br>public: <br>    STDMETHOD(GetSnapinDescription)(LPOLESTR* lpDescription); <br>    STDMETHOD(GetProvider)(LPOLESTR* lpName); <br>    STDMETHOD(GetSnapinVersion)(LPOLESTR* lpVersion); <br>    STDMETHOD(GetSnapinImage)(HICON* hAppIcon); <br>    STDMETHOD(GetStaticFolderImage)(HBITMAP* hSmallImage,  <br>                                    HBITMAP* hSmallImageOpen,  <br>                                    HBITMAP* hLargeImage,  <br>                                    COLORREF* cLargeMask); <br> <br>// Internal functions <br>private: <br>    HRESULT AboutHelper(UINT nID, LPOLESTR* lpPtr); <br>}; <br> <br> <br>#define FREE_DATA(pData) \ <br>    ASSERT(pData != NULL); \ <br>    do { if (pData != NULL) \ <br>        GlobalFree(pData); } \ <br>    while(0);  <br>     <br> <br>#define ARRAYLEN(x) (sizeof(x) / sizeof((x)[0])) </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding, Deleting, and Replacing Resources</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_adding_deleting_and_replacing_resources"></a>Adding, Deleting, and Replacing Resources</h2>
<p>
Applications must frequently add, delete, or replace resources in executable files. Two methods can be used to accomplish these tasks. The first is to edit the resource-definition file, recompile the resources, and add the recompiled resources to the application's executable file. The second method is to copy the resource data directly into the application's executable file. </p>
<p>
For example, to localize an English-language application for use in Norway, it may be necessary to replace the English dialog box with one using Norwegian. A developer creates an appropriate dialog box by using a dialog box editor or by writing a template in the resource-definition file. The developer then recompiles the resources and adds the new resources to the application's executable file. </p>
<p>
If an appropriate dialog box exists in binary form, however, the developer can copy the data directly to the executable file being localized by using three Win32 functions. The <a href="resource_5g2t.htm"><b>BeginUpdateResource</b></a> function creates an update handle for the executable file whose resources are to be changed. The <a href="resource_2crp.htm"><b>UpdateResource</b></a> function uses this handle to add, delete, or replace a resource in the executable file. The <a href="resource_9qcl.htm"><b>EndUpdateResource</b></a> function closes the handle. </p>
<p>
After an update handle to an executable file is created by <b>BeginUpdateResource</b>, an application can use <b>UpdateResource</b> repeatedly to make changes to the resource data. Each call to <b>UpdateResource</b> contributes to an internal list of additions, deletions, and replacements but does not actually write the data to the executable file. Immediately before closing the update handle, <b>EndUpdateResource</b> writes the accumulated changes to the executable file. </p>
<p>
Sometimes, an application must copy resources or find resource sizes. The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_loadlibrary">
</object><a href=JavaScript:alink_1.Click()><b>LoadLibrary</b></a> function provides a module handle to an executable file whose resources are to be copied, and the <a href="resource_4co5.htm"><b>LockResource</b></a> function provides a pointer to the resource data in the specified module. The <a href="resource_38yt.htm"><b>SizeofResource</b></a> function returns the size, in bytes, of a specified resource. </p>
<p>&nbsp;</p></body>
</HTML>

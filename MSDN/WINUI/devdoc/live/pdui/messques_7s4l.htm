<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending a Message</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_sending_a_message"></a>Sending a Message</h2>
<p>
The <a href="messques_8ht1.htm"><b>SendMessage</b></a> function is used to send a message directly to a window procedure. <b>SendMessage</b> calls a window procedure and waits for that procedure to process the message and return a result. </p>
<p>
A message can be sent to any window in the system; all that is required is a window handle. The system uses the handle to determine which window procedure should receive the message. </p>
<p>
Before processing a message that may have been sent from another thread, a window procedure should first call the <a href="messques_50v9.htm"><b>InSendMessage</b></a> function. If this function returns TRUE, the window procedure should call <a href="messques_39k5.htm"><b>ReplyMessage</b></a> before any function that causes the thread to yield control, as shown in the following example. </p>
<pre><code>case WM_USER + 5: 
    if (InSendMessage()) 
        ReplyMessage(TRUE); 
 
    DialogBox(hInst, "MyDialogBox", hwndMain, (DLGPROC) MyDlgProc); 
    break; 
 </code></pre>
<p>
A number of messages can be sent to controls in a dialog box. These control messages set the appearance, behavior, and content of controls or retrieve information about controls. For example, the <a href="combobox_4c4n.htm">CB_ADDSTRING</a> message can add a string to a combo box, and the <a href="buttons_49pn.htm">BM_SETCHECK</a> message can set the check state of a check box or radio button. </p>
<p>
Use the <a href="dlgboxes_7u05.htm"><b>SendDlgItemMessage</b></a> function to send a message to a control, specifying the identifier of the control and the handle of the dialog box window that contains the control. The following example, taken from a dialog box procedure, copies a string from a combo box's edit control into its list box. The example uses <b>SendDlgItemMessage</b> to send a CB_ADDSTRING message to the combo box. </p>
<pre><code>HWND hwndCombo; 
int cTxtLen; 
PSTR pszMem; 
 
switch (uMsg) 
{ 
    case WM_COMMAND: 
        switch (LOWORD(wParam)) 
        { 
            case IDD_ADDCBITEM: 
                // Get the handle of the combo box and the 
                // length of the string in the edit control 
                // of the combo box. 
 
                hwndCombo = GetDlgItem(hwndDlg, IDD_COMBO); 
                cTxtLen = GetWindowTextLength(hwndCombo); 
 
                // Allocate memory for the string and copy 
                // the string into the memory. 
 
                pszMem = (PSTR) VirtualAlloc((LPVOID) NULL, 
                    (DWORD) (cTxtLen + 1), MEM_COMMIT, 
                    PAGE_READWRITE); 
                GetWindowText(hwndCombo, pszMem, 
                    cTxtLen + 1); 
 
                // Add the string to the list box of the 
                // combo box and remove the string from the 
                // edit control of the combo box. 
 
                if (*pszMem != NULL) 
                { 
                    SendDlgItemMessage(hwndDlg, IDD_COMBO, 
                        CB_ADDSTRING, 0, 
                        (DWORD) ((LPSTR) pszMem)); 
                    SetWindowText(hwndCombo, (LPSTR) NULL); 
                } 
 
                // Free the memory and return. 
 
                VirtualFree(pszMem, 0, MEM_RELEASE); 
                return TRUE; 
            // 
            // Process other dialog box commands. 
            // 
 
        } 
    // 
    // Process other dialog box messages. 
    // 
 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

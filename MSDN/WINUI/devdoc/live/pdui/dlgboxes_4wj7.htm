<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modal Dialog Boxes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_modal_dialog_boxes"></a>Modal Dialog Boxes</h2>
<p>
A modal dialog box should be a pop-up window having a System menu, a title bar, and a thick border; that is, the dialog box template should specify the WS_POPUP, WS_SYSMENU, WS_CAPTION, and DS_MODALFRAME styles. Although an application can designate the WS_VISIBLE style, the system always displays a modal dialog box regardless of whether the dialog box template specifies the WS_VISIBLE style. An application must not create a modal dialog box having the WS_CHILD style. A modal dialog box with this style disables itself, preventing any subsequent input from reaching the application. </p>
<p>
An application creates a modal dialog box by using either the <a href="dlgboxes_8urc.htm"><b>DialogBox</b></a> or <a href="dlgboxes_4ddg.htm"><b>DialogBoxIndirect</b></a> function. <b>DialogBox</b> requires the name or identifier of a resource containing a dialog box template; <b>DialogBoxIndirect</b> requires the handle of a memory object containing a dialog box template. The <a href="dlgboxes_4ib1.htm"><b>DialogBoxParam</b></a> and <a href="dlgboxes_1fe5.htm"><b>DialogBoxIndirectParam</b></a> functions also create modal dialog boxes; they are identical to the previously mentioned functions but pass a specified parameter to the dialog box procedure when the dialog box is created. </p>
<p>
When creating the modal dialog box, the system makes it the active window. The dialog box remains active until the dialog box procedure calls the <a href="dlgboxes_9up3.htm"><b>EndDialog</b></a> function or the system activates a window in another application. Neither the user nor the application can make the owner window active until the modal dialog box is destroyed. </p>
<p>
When the owner window is not already disabled, the system automatically disables the window and any child windows belonging to it when it creates the modal dialog box. The owner window remains disabled until the dialog box is destroyed. Although a dialog box procedure could potentially enable the owner window at any time, enabling the owner defeats the purpose of the modal dialog box and is not recommended. When the dialog box procedure is destroyed, the system enables the owner window again, but only if the modal dialog box caused the owner to be disabled. </p>
<p>
As the system creates the modal dialog box, it sends the <a href="windows_92sl.htm">WM_CANCELMODE</a> message to the window (if any) currently capturing mouse input. An application that receives this message should release the mouse capture so that the user can move the mouse in the modal dialog box. Because the system disables the owner window, all mouse input is lost if the owner fails to release the mouse upon receiving this message. </p>
<p>
To process messages for the modal dialog box, the system starts its own message loop, taking temporary control of the message queue for the entire application. When the system retrieves a message that is not explicitly for the dialog box, it dispatches the message to the appropriate window. If it retrieves a <a href="windows_2i44.htm">WM_QUIT</a> message, it posts the message back to the application message queue so that the application's main message loop can eventually retrieve the message. </p>
<p>
The system sends the <a href="dlgboxes_7i05.htm">WM_ENTERIDLE</a> message to the owner window whenever the application message queue is empty. The application can use this message to carry out a background task while the dialog box remains on the screen. When an application uses the message in this way, the application must frequently yield control (for example, by using the <a href="messques_8085.htm"><b>PeekMessage</b></a> function) so that the modal dialog box can receive any user input. To prevent the modal dialog box from sending the WM_ENTERIDLE messages, the application can specify the DS_NOIDLEMSG style when creating the dialog box. </p>
<p>
An application destroys a modal dialog box by using the <a href="dlgboxes_9up3.htm"><b>EndDialog</b></a> function. In most cases, the dialog box procedure calls <b>EndDialog</b> when the user chooses the Close command from the dialog box's System menu or chooses the OK or Cancel button in the dialog box. The dialog box can return a value through the <a href="dlgboxes_8urc.htm"><b>DialogBox</b></a> function (or other creation functions) by specifying a value when calling the <b>EndDialog</b> function. The system returns this value after destroying the dialog box. Most applications use this return value to determine whether the dialog box completed its task successfully or was canceled by the user. The system does not return control from the function that creates the dialog box until the dialog box procedure has called the <b>EndDialog</b> function. </p>
<p>&nbsp;</p></body>
</HTML>

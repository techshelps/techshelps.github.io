<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Allocating a Text Buffer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_allocating_a_text_buffer"></a>Allocating a Text Buffer</h3>
<p>
When the system creates an edit control, it automatically creates a text buffer, sets its initial size, and increases the size as necessary. The size can be up to a predefined limit of approximately 32 kilobytes for single-line edit controls. Because this limit can change, it is called a soft limit. An application can set a hard limit to the buffer size by sending an <a href="editcon_8hv8.htm">EM_SETLIMITTEXT</a> message to the edit control. If the buffer exceeds either limit, the system sends the application an <a href="editcon_9mat.htm">EN_ERRSPACE</a> message. An application can retrieve the current text limit by sending an <a href="editcon_83xw.htm">EM_GETLIMITTEXT</a> message.</p>
<p>
The system typically creates an edit control buffer in a dialog box, using memory outside the application's data segment. An application can suppress this default allocation behavior and create the buffer from its local heap by using the DS_LOCALEDIT style when creating the edit control. An application that uses the DS_LOCALEDIT style is responsible for all buffer allocations. To make the initial allocation, an application can call the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_localalloc">
</object><a href=JavaScript:alink_1.Click()><b>LocalAlloc</b></a> function and pass the returned buffer handle to the edit control by sending it an <a href="editcon_4fl1.htm">EM_SETHANDLE</a> message. To make subsequent allocations (in response to an EN_ERRSPACE message, for example), an application should save the current buffer content (if necessary) and obtain a new buffer as follows: 
<ol>
<li>
Retrieve the handle of the memory currently allocated for the text in a multiline edit control by sending the control an <a href="editcon_15np.htm">EM_GETHANDLE</a> message. </li>
<li>
Free the buffer by calling the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_localfree">
</object><a href=JavaScript:alink_2.Click()><b>LocalFree</b></a> function. </li>
<li>
Obtain a new buffer (and buffer handle) by calling <b>LocalAlloc</b>. </li>
<li>
Give the buffer handle to the system by sending the control an <a href="editcon_4fl1.htm">EM_SETHANDLE</a> message. </li>
</ol>
<p>
The EM_SETHANDLE and <a href="editcon_15np.htm">EM_GETHANDLE</a> messages apply only to multiline edit controls. </p>
<p>
An application that uses the default allocation behavior (that is, does not use the DS_LOCALEDIT style) must not send EM_SETHANDLE and EM_GETHANDLE messages to the edit control. </p>
<p>
Sending an <a href="editcon_4fl1.htm">EM_SETHANDLE</a> message has several side effects: it clears the undo flag (making the <a href="editcon_3wtr.htm">EM_CANUNDO</a> message return zero), it clears the modify flag (making the <a href="editcon_9sah.htm">EM_GETMODIFY</a> message return zero), and it redraws the edit control window. </p>
<p>&nbsp;</p></body>
</HTML>

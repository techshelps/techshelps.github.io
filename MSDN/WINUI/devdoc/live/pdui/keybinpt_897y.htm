<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VkKeyScan</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_vkkeyscan"></a>VkKeyScan</h1>
<p>
The <b>VkKeyScan</b> function translates a character to the corresponding virtual-key code and shift state for the current keyboard. </p>
<p>
This function has been superseded by the <a href="keybinpt_78zc.htm"><b>VkKeyScanEx</b></a> function. You can still use <b>VkKeyScan</b>, however, if you do not need to specify a keyboard layout. </p>
<pre><code><b>SHORT VkKeyScan(
  TCHAR</b><i> ch</i>   // character to translate
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ch</i></dt>
<dd>
Specifies the character to be translated into a virtual-key code. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left colspan=2 width=9%>Bit</th>
<th align=left width=91%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=9%>1</td>
<td width=91%>Either shift key is pressed.</td>
</tr>
<tr valign=top>
<td colspan=2 width=9%>2</td>
<td width=91%>Either CTRL key is pressed.</td>
</tr>
<tr valign=top>
<td colspan=2 width=9%>4</td>
<td width=91%>Either ALT key is pressed.</td>
</tr>
<tr valign=top>
<td width=9%>8</td>
<td colspan=2 width=91%>The Hankaku key is pressed</td>
</tr>
<tr valign=top>
<td width=9%>16</td>
<td colspan=2 width=91%>Reserved (defined by the keyboard layout driver).</td>
</tr>
<tr valign=top>
<td width=9%>32</td>
<td colspan=2 width=91%>Reserved (defined by the keyboard layout driver).</td>
</tr>
</table><br>
<p>
If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1. </p>
<h4>Remarks</h4>
<p>
For keyboard layouts that use the right-hand alt key as a shift key (for example, the French keyboard layout), the shift state is represented by the value 6, because the right-hand alt key is converted internally into ctrl+alt. </p>
<p>
Translations for the numeric keypad (VK_NUMPAD0 through VK_DIVIDE) are ignored. This function is intended to translate characters into keystrokes from the main keyboard section only. For example, the character "7" is translated into VK_7, not VK_NUMPAD7. </p>
<p>
<b>VkKeyScan</b> is used by applications that send characters by using the WM_KEYUP and WM_KEYDOWN messages. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use user32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="keybinpt_4l9w.htm">Keyboard Input Overview</a>, <a href="keybinpt_43jn.htm">Keyboard Input Functions</a>, <a href="keybinpt_1x0l.htm"><b>GetAsyncKeyState</b></a>, <a href="keybinpt_0nhh.htm"><b>GetKeyboardState</b></a>, <a href="keybinpt_15kk.htm"><b>GetKeyNameText</b></a>, <a href="keybinpt_4z51.htm"><b>GetKeyState</b></a>, <a href="keybinpt_2iqt.htm"><b>SetKeyboardState</b></a>, <a href="keybinpt_78zc.htm"><b>VkKeyScanEx</b></a>, <a href="keybinpt_9l7y.htm">WM_KEYDOWN</a>, <a href="keybinpt_45dc.htm">WM_KEYUP</a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Styles</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_class_styles"></a>Class Styles</h3>
<p>
The class styles define additional elements of the window class. Two or more styles can be combined by using the bitwise OR (|) operator. To assign a style to a window class, assign the style to the <b>style</b> member of the <a href="winclass_450y.htm"><b>WNDCLASSEX</b></a> structure. The class styles are as follows. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Style</th>
<th align=left width=63%>Action</th>
</tr>
<tr valign=top>
<td width=37%>CS_BYTEALIGNCLIENT</td>
<td width=63%>Aligns the window's client area on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</td>
</tr>
<tr valign=top>
<td width=37%>CS_BYTEALIGNWINDOW</td>
<td width=63%>Aligns the window on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</td>
</tr>
<tr valign=top>
<td width=37%>CS_CLASSDC</td>
<td width=63%>Allocates one device context to be shared by all windows in the class. Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class. It is also possible for the threads to attempt to use the device context simultaneously. When this happens , the system allows only one thread to successfully finish its drawing operation. For more information, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_device_contexts">
</object><a href=JavaScript:alink_1.Click()>Device Contexts</a>. </td>
</tr>
<tr valign=top>
<td width=37%>CS_DBLCLKS</td>
<td width=63%>Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class. For more information, see <a href="mousinpt_5rjo.htm">Mouse Input</a>. </td>
</tr>
<tr valign=top>
<td width=37%>CS_GLOBALCLASS</td>
<td width=63%>Specifies that the window class is an application global class. For more information, see <a href="winclass_027n.htm">Application Global Classes</a>.</td>
</tr>
<tr valign=top>
<td width=37%>CS_HREDRAW</td>
<td width=63%>Specifies that the entire window is to be redrawn if a movement or size adjustment changes the width of the client area.</td>
</tr>
<tr valign=top>
<td width=37%>CS_NOCLOSE</td>
<td width=63%>Disables the Close command on the System menu.</td>
</tr>
<tr valign=top>
<td width=37%>CS_OWNDC</td>
<td width=63%>Allocates a unique device context for each window in the class. For more information about device contexts, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_device_contexts">
</object><a href=JavaScript:alink_2.Click()>Device Contexts</a>. </td>
</tr>
<tr valign=top>
<td width=37%>CS_PARENTDC</td>
<td width=63%>Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent. A window with the CS_PARENTDC style bit receives a regular device context from the system's cache of device contexts. It does not give the child the parent's device context or device context settings. Specifying CS_PARENTDC enhances an application's performance. For more information, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_device_contexts">
</object><a href=JavaScript:alink_3.Click()>Device Contexts</a>. </td>
</tr>
<tr valign=top>
<td width=37%>CS_SAVEBITS</td>
<td width=63%>Saves, as a bitmap, the portion of the screen image obscured by a window. The system uses the saved bitmap to re-create the screen image when the window is removed. The system displays the bitmap at its original location and does not send <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_wm_paint">
</object><a href=JavaScript:alink_4.Click()>WM_PAINT</a> messages to windows obscured by the window if other screen actions have not invalidated the stored image. Use this style for small windows that are displayed briefly and then removed before other screen activity takes place (for example, menus or dialog boxes). This style increases the time required to display the window, because the system must first allocate memory to store the bitmap.</td>
</tr>
<tr valign=top>
<td width=37%>CS_VREDRAW</td>
<td width=63%>Specifies that the entire window is to be redrawn if a movement or size adjustment changes the height of the client area.</td>
</tr>
</table><br>
<h4>Classes and Device Contexts</h4>
<p>
A <i>device context</i> is a special set of values that applications use for drawing in the client area of their windows. The system requires a device context for each window on the display but allows some flexibility in how the system stores and treats that device context. </p>
<p>
If no device-context style is explicitly given, the system assumes each window uses a device context retrieved from a pool of contexts maintained by the system. In such cases, each window must retrieve and initialize the device context before painting and free it after painting. </p>
<p>
To avoid retrieving a device context each time it needs to paint inside a window, an application can specify the CS_OWNDC style for the window class. This class style directs the system to create a private device context — that is, to allocate a unique device context for each window in the class. The application need only retrieve the context once and then use it for all subsequent painting. </p>
<p class=indent1>
<b>Windows 95 and Windows 98:</b> Although the CS_OWNDC style is convenient, use it carefully, because each device context uses a significant portion of 64K GDI heap. </p>
<p>&nbsp;</p></body>
</HTML>

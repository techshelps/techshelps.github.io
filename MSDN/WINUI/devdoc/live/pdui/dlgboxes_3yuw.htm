<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Modal Dialog Box</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_modal_dialog_box"></a>Creating a Modal Dialog Box</h2>
<p>
You create a modal dialog box by using the <a href="dlgboxes_8urc.htm"><b>DialogBox</b></a> function. You must specify the identifier or name of a dialog box template resource and the address of the dialog box procedure. The <b>DialogBox</b> function loads the template, displays the dialog box, and processes all user input until the user closes the dialog box. </p>
<p>
In the following example, the application displays a modal dialog box when the user chooses a Delete Item command from an application menu. The dialog box contains an edit control (in which the user enters the name of an item) and OK and Cancel buttons. The control identifiers for these controls are ID_ITEMNAME, IDOK, and IDCANCEL, respectively. </p>
<p>
The first part of the example consists of the statements that create the modal dialog box. These statements, in the window procedure for the application's main window, create the dialog box when the system receives a <a href="editcon_8wh0.htm">WM_COMMAND</a> message having the IDM_DELETEITEM command identifier. The second part of the example is the dialog box procedure, which retrieves the contents of the edit control and closes the dialog box upon receiving a WM_COMMAND message. </p>
<p>
The following statements create the modal dialog box. The dialog box template is a resource in the application's executable file and has the resource identifier DLG_DELETEITEM: </p>
<pre><code>case WM_COMMAND: 
        switch (LOWORD(wParam)) 
        { 
            case IDM_DELETEITEM: 
                if (DialogBox(hinst, 
                     MAKEINTRESOURCE(DLG_DELETEITEM), 
                     hwnd, (DLGPROC)DeleteItemProc)==IDOK) 
                {
 
                    // Complete the command; szItemName 
                    // contains the name of the item to 
                    // delete. 

                }
 
                else 
                {

                    // Cancel the command. 

                } 
                break; 
        } 
        return 0L; 
 </code></pre>
<p>
In this example, the application identifies its main window as the owner window for the dialog box. When the system initially displays the dialog box, its position is relative to the upper left corner of the owner window's client area. The application uses the return value from <a href="dlgboxes_8urc.htm"><b>DialogBox</b></a> to determine whether to proceed with the command or cancel it. The following statements define the dialog box procedure. </p>
<pre><code>char szItemName[80]; // receives name of item to delete. 
 
BOOL CALLBACK DeleteItemProc(hwndDlg, message, wParam, lParam) 
HWND hwndDlg; 
UINT message; 
WPARAM wParam; 
LPARAM lParam; 
{ 
    switch (message) 
    { 
        case WM_COMMAND: 
            switch (LOWORD(wParam)) 
            { 
                case IDOK: 
                    if (!GetDlgItemText(hwndDlg, ID_ITEMNAME, 
                             szItemName, 80)) 
                         *szItemName=0; 
 
                    // Fall through. 
 
                case IDCANCEL: 
                    EndDialog(hwndDlg, wParam); 
                    return TRUE; 
            } 
    } 
    return FALSE; 
} 
 </code></pre>
<p>
In this example, the procedure uses <a href="dlgboxes_64xg.htm"><b>GetDlgItemText</b></a> to retrieve the current text from the edit control identified by ID_ITEMNAME. The procedure then calls the <a href="dlgboxes_9up3.htm"><b>EndDialog</b></a> function to set the dialog box's return value to either IDOK or IDCANCEL, depending on the message received, and to begin the process of closing the dialog box. The IDOK and IDCANCEL identifiers correspond to the OK and Cancel buttons. After the procedure calls <b>EndDialog</b>, the system sends additional messages to the procedure to destroy the dialog box and returns the dialog box's return value back to the function that created the dialog box. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structure of a Window Procedure</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_structure_of_a_window_procedure"></a>Structure of a Window Procedure</h2>
<p>
A window procedure is a function that has four parameters and returns a 32-bit signed value. The parameters consist of a window handle, a <b>UINT</b> message identifier, and two message parameters declared with the <b>WPARAM</b> and <b>LPARAM</b> data types. For more information, see <a href="winprocs_53xf.htm"><b>WindowProc</b></a>. </p>
<p>
Message parameters often contain information in both their low-order and high-order words. The Microsoft® Win32® application programming interface (API) includes several macros an application can use to extract information from the message parameters. The <a href="windows_65es.htm"><b>LOWORD</b></a> macro, for example, extracts the low-order word (bits 0 through 15) from a message parameter. Other macros include <a href="windows_2j50.htm"><b>HIWORD</b></a>, <a href="windows_91et.htm"><b>LOBYTE</b></a>, and <a href="windows_5f51.htm"><b>HIBYTE</b></a>. </p>
<p>
The interpretation of the return value depends on the particular message. Consult the description of each message to determine the appropriate return value. </p>
<p>
Because it is possible to call a window procedure recursively, it is important to minimize the number of local variables that it uses. When processing individual messages, an application should call functions outside the window procedure to avoid excessive use of local variables, possibly causing the stack to overflow during deep recursion. </p>
<p>&nbsp;</p></body>
</HTML>

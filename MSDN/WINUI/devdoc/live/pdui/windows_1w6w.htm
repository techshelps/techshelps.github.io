<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateWindowEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_createwindowex"></a>CreateWindowEx</h1>
<p>
The <b>CreateWindowEx</b> function creates an overlapped, pop-up, or child window with an extended style; otherwise, this function is identical to the <b>CreateWindow</b> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <a href="windows_33jr.htm"><b>CreateWindow</b></a>. </p>
<pre><code><b>HWND CreateWindowEx(
  DWORD</b><i> dwExStyle</i><b>,      </b>// extended window style
<b>  LPCTSTR</b><i> lpClassName</i><b>,  </b>// pointer to registered class name
<b>  LPCTSTR</b><i> lpWindowName</i><b>, </b>// pointer to window name
<b>  DWORD</b><i> dwStyle</i><b>,        </b>// window style
<b>  int</b><i> x</i><b>,                </b>// horizontal position of window
<b>  int</b><i> y</i><b>,                </b>// vertical position of window
<b>  int</b><i> nWidth</i><b>,           </b>// window width
<b>  int</b><i> nHeight</i><b>,          </b>// window height
<b>  HWND</b><i> hWndParent</i><b>,      </b>// handle to parent or owner window
<b>  HMENU</b><i> hMenu</i><b>,          </b>// handle to menu, or child-window identifier
<b>  HINSTANCE</b><i> hInstance</i><b>,  </b>// handle to application instance
<b>  LPVOID</b><i> lpParam</i>        // pointer to window-creation data
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwExStyle</i></dt>
<dd>
Specifies the extended style of the window. This parameter can be one of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Style</th>
<th align=left width=53%>Meaning</th>
</tr>
<tr valign=top>
<td width=47%>WS_EX_ACCEPTFILES</td>
<td width=53%>Specifies that a window created with this style accepts drag-drop files.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_APPWINDOW</td>
<td width=53%>Forces a top-level window onto the taskbar when the window is visible. </td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_CLIENTEDGE</td>
<td width=53%>Specifies that a window has a border with a sunken edge.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_CONTEXTHELP</td>
<td width=53%>Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the <b>WinHelp</b> function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.<p>
WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.</p>
</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_CONTROLPARENT</td>
<td width=53%>Allows the user to navigate among the child windows of the window by using the tab key.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_DLGMODALFRAME</td>
<td width=53%>Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the <i>dwStyle</i> parameter.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_LEFT</td>
<td width=53%>Window has generic "left-aligned" properties. This is the default.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_LEFTSCROLLBAR</td>
<td width=53%>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored and not treated as an error.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_LTRREADING</td>
<td width=53%>The window text is displayed using Left to Right reading-order properties. This is the default.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_MDICHILD</td>
<td width=53%>Creates an MDI child window.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_NOPARENTNOTIFY</td>
<td width=53%>Specifies that a child window created with this style does not send the <a href="windows_9ojd.htm">WM_PARENTNOTIFY</a> message to its parent window when it is created or destroyed.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_OVERLAPPEDWINDOW</td>
<td width=53%>Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_PALETTEWINDOW</td>
<td width=53%>Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_RIGHT</td>
<td width=53%>The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading order alignment; otherwise, the style is ignored and not treated as an error.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_RIGHTSCROLLBAR</td>
<td width=53%>Vertical scroll bar (if present) is to the right of the client area. This is the default.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_RTLREADING</td>
<td width=53%>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the window text is displayed using Right to Left reading-order properties. For other languages, the style is ignored and not treated as an error.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_STATICEDGE</td>
<td width=53%>Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_TOOLWINDOW</td>
<td width=53%>Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses alt+tab. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing alt+space. </td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_TOPMOST</td>
<td width=53%>Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the <a href="windows_2blf.htm"><b>SetWindowPos</b></a> function.</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_TRANSPARENT</td>
<td width=53%>Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted. <p>
To achieve transparency without these restrictions, use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_setwindowrgn">
</object><a href=JavaScript:alink_1.Click()><b>SetWindowRgn</b></a> function.</p>
</td>
</tr>
<tr valign=top>
<td width=47%>WS_EX_WINDOWEDGE</td>
<td width=53%>Specifies that a window has a border with a raised edge.</td>
</tr>
</table><br>


<p>
Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
</dd>
<dt>
<i>lpClassName</i></dt>
<dd>
Pointer to a null-terminated string or is an integer atom. If <i>lpClassName</i> is an atom, it must be a global atom created by a previous call to <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_globaladdatom">
</object><a href=JavaScript:alink_2.Click()><b>GlobalAddAtom</b></a>. The atom, a 16-bit value less than 0xC000, must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. 
<p>
If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with the <a href="winclass_0wc8.htm"><b>RegisterClassEx</b></a> function or any of the predefined control-class names. 
</dd>
<dt>
<i>lpWindowName</i></dt>
<dd>
Pointer to a null-terminated string that specifies the window name. 
<p>
If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. 
</dd>
<dt>
<i>dwStyle</i></dt>
<dd>
Specifies the style of the window being created. This parameter can be a combination of the following window styles, plus the control styles indicated in the Remarks section. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Style</th>
<th align=left width=59%>Meaning</th>
</tr>
<tr valign=top>
<td width=41%>WS_BORDER</td>
<td width=59%>Creates a window that has a thin-line border.</td>
</tr>
<tr valign=top>
<td width=41%>WS_CAPTION</td>
<td width=59%>Creates a window that has a title bar (includes the WS_BORDER style).</td>
</tr>
<tr valign=top>
<td width=41%>WS_CHILD</td>
<td width=59%>Creates a child window. This style cannot be used with the WS_POPUP style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_CHILDWINDOW</td>
<td width=59%>Same as the WS_CHILD style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_CLIPCHILDREN</td>
<td width=59%>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</td>
</tr>
<tr valign=top>
<td width=41%>WS_CLIPSIBLINGS</td>
<td width=59%>Clips child windows relative to each other; that is, when a particular child window receives a <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_wm_paint">
</object><a href=JavaScript:alink_3.Click()>WM_PAINT</a> message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated. If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.</td>
</tr>
<tr valign=top>
<td width=41%>WS_DISABLED</td>
<td width=59%>Creates a window that is initially disabled. A disabled window cannot receive input from the user.</td>
</tr>
<tr valign=top>
<td width=41%>WS_DLGFRAME</td>
<td width=59%>Creates a window that has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</td>
</tr>
<tr valign=top>
<td width=41%>WS_GROUP</td>
<td width=59%>Specifies the first control of a group of controls. The group consists of this first control and all  controls defined after it, up to the next control with the WS_GROUP style. The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.</td>
</tr>
<tr valign=top>
<td width=41%>WS_HSCROLL</td>
<td width=59%>Creates a window that has a horizontal scroll bar.</td>
</tr>
<tr valign=top>
<td width=41%>WS_ICONIC</td>
<td width=59%>Creates a window that is initially minimized. Same as the WS_MINIMIZE style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_MAXIMIZE</td>
<td width=59%>Creates a window that is initially maximized.</td>
</tr>
<tr valign=top>
<td width=41%>WS_MAXIMIZEBOX</td>
<td width=59%>Creates a window that has a Maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. </td>
</tr>
<tr valign=top>
<td width=41%>WS_MINIMIZE</td>
<td width=59%>Creates a window that is initially minimized. Same as the WS_ICONIC style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_MINIMIZEBOX</td>
<td width=59%>Creates a window that has a Minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. </td>
</tr>
<tr valign=top>
<td width=41%>WS_OVERLAPPED</td>
<td width=59%>Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_OVERLAPPEDWINDOW</td>
<td width=59%>Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_TILEDWINDOW style. </td>
</tr>
<tr valign=top>
<td width=41%>WS_POPUP</td>
<td width=59%>Creates a pop-up window. This style cannot be used with the WS_CHILD style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_POPUPWINDOW</td>
<td width=59%>Creates a pop-up window with WS_BORDER, WS_POPUP, and WS_SYSMENU styles. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</td>
</tr>
<tr valign=top>
<td width=41%>WS_SIZEBOX</td>
<td width=59%>Creates a window that has a sizing border. Same as the WS_THICKFRAME style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_SYSMENU</td>
<td width=59%>Creates a window that has a window menu on its title bar. The WS_CAPTION style must also be specified.</td>
</tr>
<tr valign=top>
<td width=41%>WS_TABSTOP</td>
<td width=59%>Specifies a control that can receive the keyboard focus when the user presses the tab key. Pressing the tab key changes the keyboard focus to the next control with the WS_TABSTOP style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_THICKFRAME</td>
<td width=59%>Creates a window that has a sizing border. Same as the WS_SIZEBOX style.</td>
</tr>
<tr valign=top>
<td width=41%>WS_TILED</td>
<td width=59%>Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_OVERLAPPED style. </td>
</tr>
<tr valign=top>
<td width=41%>WS_TILEDWINDOW</td>
<td width=59%>Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_OVERLAPPEDWINDOW style. </td>
</tr>
<tr valign=top>
<td width=41%>WS_VISIBLE</td>
<td width=59%>Creates a window that is initially visible.</td>
</tr>
<tr valign=top>
<td width=41%>WS_VSCROLL</td>
<td width=59%>Creates a window that has a vertical scroll bar.</td>
</tr>
</table><br>

</dd>
<dt>
<i>x</i></dt>
<dd>
Specifies the initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. 
<p>
If <i>x</i> is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero. 
</dd>
<dt>
<i>y</i></dt>
<dd>
Specifies the initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. 
<p>
If an overlapped window is created with the WS_VISIBLE style bit set and the <i>x</i> parameter is set to CW_USEDEFAULT, the system ignores the <i>y</i> parameter. 
</dd>
<dt>
<i>nWidth</i></dt>
<dd>
Specifies the width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or CW_USEDEFAULT. If <i>nWidth</i> is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero. </dd>
<dt>
<i>nHeight</i></dt>
<dd>
Specifies the height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to CW_USEDEFAULT, the system ignores <i>nHeight</i>. </dd>
<dt>
<i>hWndParent</i></dt>
<dd>
Handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.
<p>
<b>Windows NT 5.0 and later:</b> To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window. 
</dd>
<dt>
<i>hMenu</i></dt>
<dd>
Handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window. </dd>
<dt>
<i>hInstance</i></dt>
<dd>
Handle to the instance of the module to be associated with the window. </dd>
<dt>
<i>lpParam</i></dt>
<dd>
A pointer to a value to be passed to the window through the <a href="windows_06lu.htm"><b>CREATESTRUCT</b></a> structure passed in the <i>lParam</i> parameter the <a href="windows_41d1.htm">WM_CREATE</a> message. If an application calls <b>CreateWindow</b> to create a multiple document interface (MDI) client window, <i>lpParam</i> must point to a <a href="windows_5bhu.htm"><b>CLIENTCREATESTRUCT</b></a> structure. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to the new window.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_4.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The <b>CreateWindowEx</b> function sends WM_NCCREATE, WM_NCCALCSIZE, and WM_CREATE messages to the window being created. </p>
<p>
For information on controlling whether the Taskbar displays a button for the created window, see <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_taskbar">
</object><a href=JavaScript:alink_5.Click()>Visibility of Taskbar Buttons</a>. </p>
<p>
The following predefined control classes can be specified in the <i>lpClassName</i> parameter. Note the corresponding control styles you can use in the <i>dwStyle</i> parameter. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=21%>Class</th>
<th align=left width=79%>Meaning</th>
</tr>
<tr valign=top>
<td width=21%>BUTTON</td>
<td width=79%>Designates a small rectangular child window that represents a button the user can click to turn it on or off. Button controls can be used alone or in groups, and they can either be labeled or appear without text. Button controls typically change appearance when the user clicks them. For more information, see <a href="buttons_7zhv.htm">Buttons</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the button styles you can specify in the <i>dwStyle</i> parameter, see <a href="buttons_34c3.htm">Button Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>COMBOBOX</td>
<td width=79%>Designates a control consisting of a list box and a selection field similar to an edit control. When using this style, an application should either display the list box at all times or enable a drop-down list box. If the list box is visible, typing characters into the selection field highlights the first list box entry that matches the characters typed. Conversely, selecting an item in the list box displays the selected text in the selection field. For more information, see <a href="combobox_77eb.htm">Combo Boxes</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the combo box styles you can specify in the <i>dwStyle</i> parameter, see <a href="combobox_8mcz.htm">Combo Box Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>EDIT</td>
<td width=79%>Designates a rectangular child window into which the user can type text from the keyboard. The user selects the control and gives it the keyboard focus by clicking it or moving to it by pressing the tab key. The user can type text when the edit control displays a flashing caret; use the mouse to move the cursor, select characters to be replaced, or position the cursor for inserting characters; or use the backspace key to delete characters. For more information, see <a href="editcon_4uwj.htm">Edit Controls</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the edit control styles you can specify in the <i>dwStyle</i> parameter, see <a href="editcon_7rqr.htm">Edit Control Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>LISTBOX</td>
<td width=79%>Designates a list of character strings. Specify this control whenever an application must present a list of names, such as filenames, from which the user can choose. The user can select a string by clicking it. A selected string is highlighted, and a notification message is passed to the parent window. For more information, see <a href="listbox_9s4z.htm">List Boxes</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the list box styles you can specify in the <i>dwStyle</i> parameter, see <a href="listbox_5cfn.htm">List Box Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>MDICLIENT</td>
<td width=79%>Designates an MDI client window. This window receives messages that control the MDI application's child windows. The recommended style bits are WS_CLIPCHILDREN and WS_CHILD. Specify the WS_HSCROLL and WS_VSCROLL styles to create an MDI client window that allows the user to scroll MDI child windows into view. For more information, see <a href="mdocint_6crp.htm">Multiple Document Interface</a>. </td>
</tr>
<tr valign=top>
<td width=21%>RichEdit</td>
<td width=79%>Designates a Rich Edit version 1.0 control. This window lets the user view and edit text with character and paragraph formatting, and can include embedded COM objects. For more information, see <a href="richedit_5a7n.htm">Rich Edit Controls</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the rich edit control styles you can specify in the <i>dwStyle</i> parameter, see <a href="richedit_5lpv.htm">Rich Edit Control Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>RICHEDIT_CLASS</td>
<td width=79%>Designates a Rich Edit version 2.0 control. This controls let the user view and edit text with character and paragraph formatting, and can include embedded COM objects. For more information, see <a href="richedit_5a7n.htm">Rich Edit Controls</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the rich edit control styles you can specify in the <i>dwStyle</i> parameter, see <a href="richedit_5lpv.htm">Rich Edit Control Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>SCROLLBAR</td>
<td width=79%>Designates a rectangle that contains a scroll box and has direction arrows at both ends. The scroll bar sends a notification message to its parent window whenever the user clicks the control. The parent window is responsible for updating the position of the scroll box, if necessary. For more information, see <a href="scrolbar_3v8z.htm">Scroll Bars</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the scroll bar control styles you can specify in the <i>dwStyle</i> parameter, see <a href="scrolbar_8s37.htm">Scroll Bar Control Styles</a>. </td>
</tr>
<tr valign=top>
<td width=21%>STATIC</td>
<td width=79%>Designates a simple text field, box, or rectangle used to label, box, or separate other controls. Static controls take no input and provide no output. For more information, see <a href="statcon_1qib.htm">Static Controls</a>. </td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%>For a table of the static control styles you can specify in the <i>dwStyle</i> parameter, see <a href="statcon_360j.htm">Static Control Styles</a>.</td>
</tr>
</table><br>
<p>
<b>Windows 95:</b> The system can support a maximum of 16,364 window handles.</p>
<p>
<b>Windows CE:</b> Windows CE does not support stand alone menu bars. The <i>hMenu</i> parameter must be NULL, unless it is used as a child-window identifier. </p>
<p>
Windows CE versions 2.0 and later support the following two extended window styles:
<dl>
<dt>
WS_EX_NOACTIVATE</dt>
<dd>
A top level window created with this style cannot be activated. If a child window has this style, tapping it will not cause its top-level parent to be activated. A window that has this style will receive stylus events, but neither it nor its child windows can get the focus. </dd>
<dt>
WS_EX_NOANIMATION</dt>
<dd>
A window created with this style does not show animated exploding and imploding rectangles, and does not have a button on the taskbar. </dd>
</dl>
<p>
The following <i>dwExStyle</i> flags are not supported. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=50%>WS_EX_ACCEPTFILES</td>
<td width=50%>WS_EX_LEFTSCROLLBAR</td>
</tr>
<tr valign=top>
<td width=50%>WS_EX_LEFT</td>
<td width=50%>WS_EX_MDICHILD</td>
</tr>
<tr valign=top>
<td width=50%>WS_EX_LTRREADING</td>
<td width=50%>WS_EX_PALETTEWINDOW</td>
</tr>
<tr valign=top>
<td width=50%>WS_EX_NOPARENTNOTIFY</td>
<td width=50%>WS_EX_RIGHTSCROLLBAR</td>
</tr>
<tr valign=top>
<td width=50%>WS_EX_RIGHT</td>
<td width=50%>WS_EX_TOOLWINDOW</td>
</tr>
<tr valign=top>
<td width=50%>WS_EX_RTLREADING</td>
<td width=50%>WS_EX_TRANSPARENT</td>
</tr>
<tr valign=top>
<td width=50%>WS_EX_APPWINDOW</td>
<td width=50%></td>
</tr>
</table><br>
<p>
Windows CE 1.0 does not support the WS_EX_TOPMOST style. Versions 2.0 and later do.</p>
<p>
The following <i>dwStyle</i> flags are not supported. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=50%>WS_CHILDWINDOW</td>
<td width=50%>WS_ICONIC</td>
</tr>
<tr valign=top>
<td width=50%>WS_MAXIMIZE</td>
<td width=50%>WS_MAXIMIZEBOX</td>
</tr>
<tr valign=top>
<td width=50%>WS_MINIMIZE</td>
<td width=50%>WS_MINIMIZEBOX</td>
</tr>
<tr valign=top>
<td width=50%>WS_OVERLAPPEDWINDOW</td>
<td width=50%>WS_POPUPWINDOW</td>
</tr>
<tr valign=top>
<td width=50%>WS_SIZEBOX</td>
<td width=50%>WS_THICKFRAME</td>
</tr>
<tr valign=top>
<td width=50%>WS_TILED</td>
<td width=50%>WS_TILEDWINDOW</td>
</tr>
</table><br>
<p>
All windows implicitly have the WS_CLIPSIBLINGS and WS_CLIPCHILDREN styles.</p>
<p>
Windows CE 1.0 does not support owned windows, except for dialog boxes. If the <i>hwndParent</i> parameter is not NULL, the window is implicitly given the WS_CHILD style. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use user32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="windows_6t2r.htm">Windows Overview</a>, <a href="windows_8qyb.htm">Window Functions</a>, <a href="windows_5bhu.htm"><b>CLIENTCREATESTRUCT</b></a>, <a href="windows_06lu.htm"><b>CREATESTRUCT</b></a>, <a href="windows_33jr.htm"><b>CreateWindow</b></a>, <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_globaladdatom">
</object><a href=JavaScript:alink_6.Click()><b>GlobalAddAtom</b></a>, <a href="winclass_0wc8.htm"><b>RegisterClassEx</b></a>, <a href="windows_2blf.htm"><b>SetWindowPos</b></a>, <a href="windows_41d1.htm">WM_CREATE</a>, <a href="windows_7mg5.htm">WM_NCCALCSIZE</a>, <a href="windows_8fol.htm">WM_NCCREATE</a>, <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_wm_paint">
</object><a href=JavaScript:alink_7.Click()>WM_PAINT</a>, <a href="windows_9ojd.htm">WM_PARENTNOTIFY</a> </p>
<p>&nbsp;</p></body>
</HTML>

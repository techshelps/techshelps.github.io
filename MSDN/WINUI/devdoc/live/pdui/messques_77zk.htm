<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Message Loop</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_message_loop"></a>Creating a Message Loop</h2>
<p>
The system automatically creates a message queue for each thread. If the thread creates one or more windows, a message loop must be provided; this message loop retrieves messages from the thread's message queue and dispatches them to the appropriate window procedures. </p>
<p>
Because the system directs messages to individual windows in an application, a thread must create at least one window before starting its message loop. Most Win32-based applications contain a single thread that creates windows. A typical application registers the window class for its main window, creates and shows the main window, and then starts its message loop — all in the <a href="windows_64ku.htm"><b>WinMain</b></a> function. </p>
<p>
You create a message loop by using the <a href="messques_10kl.htm"><b>GetMessage</b></a> and <a href="messques_55b9.htm"><b>DispatchMessage</b></a> functions. If your application must obtain character input from the user, include the <a href="messques_8vj9.htm"><b>TranslateMessage</b></a> function in the loop. <b>TranslateMessage</b> translates virtual-key messages into character messages. The following example shows the message loop in the <b>WinMain</b> function of a simple Win32-based application. </p>
<pre><code>HINSTANCE hinst; 
HWND hwndMain; 
 
int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 
    LPSTR lpszCmdLine, int nCmdShow) 
{ 
    MSG msg; 
    WNDCLASS wc; 
    UNREFERENCED_PARAMETER(lpszCmdLine); 
 
    // Register the window class for the main window. 
 
    if (!hPrevInstance) 
    { 
        wc.style = 0; 
        wc.lpfnWndProc = (WNDPROC) WndProc; 
        wc.cbClsExtra = 0; 
        wc.cbWndExtra = 0; 
        wc.hInstance = hInstance; 
        wc.hIcon = LoadIcon((HINSTANCE) NULL, 
            IDI_APPLICATION); 
        wc.hCursor = LoadCursor((HINSTANCE) NULL, 
            IDC_ARROW); 
        wc.hbrBackground = GetStockObject(WHITE_BRUSH); 
        wc.lpszMenuName =  "MainMenu"; 
        wc.lpszClassName = "MainWndClass"; 
 
        if (!RegisterClass(&amp;wc)) 
            return FALSE; 
    } 
 
    hinst = hInstance;  // save instance handle 
 
    // Create the main window. 
 
    hwndMain = CreateWindow("MainWndClass", "Sample", 
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 
        CW_USEDEFAULT, CW_USEDEFAULT, (HWND) NULL, 
        (HMENU) NULL, hinst, (LPVOID) NULL); 
 
    // If the main window cannot be created, terminate 
    // the application. 
 
    if (!hwndMain) 
        return FALSE; 
 
    // Show the window and paint its contents. 
 
    ShowWindow(hwndMain, nCmdShow); 
    UpdateWindow(hwndMain); 
 
    // Start the message loop. 
 
    while (GetMessage(&amp;msg, (HWND) NULL, 0, 0)) 
    { 
        TranslateMessage(&amp;msg); 
        DispatchMessage(&amp;msg); 
    } 
 
    // Return the exit code to the system. 
 
    return msg.wParam; 
} 
 </code></pre>
<p>
The following example shows a message loop for a thread that uses accelerators and displays a modeless dialog box. When <b>TranslateAccelerator</b> or <b>IsDialogMessage</b> returns TRUE (indicating that the message has been processed), <b>TranslateMessage</b> and <b>DispatchMessage</b> are not called. The reason for this is that <b>TranslateAccelerator</b> and <b>IsDialogMessage</b> perform all necessary translating and dispatching of messages. </p>
<pre><code>HWND hwndMain; 
HWND hwndDlgModeless = NULL; 
MSG msg; 
HACCEL haccel; 
// 
// Perform initialization and create a main window. 
// 
 
while (GetMessage(&amp;msg, (HWND) NULL, 0, 0)) 
{ 
    if (hwndDlgModeless == (HWND) NULL || 
            !IsDialogMessage(hwndDlgModeless, &amp;msg) &amp;&amp; 
            !TranslateAccelerator(hwndMain, haccel, 
                &amp;msg)) 
    { 
        TranslateMessage(&amp;msg); 
        DispatchMessage(&amp;msg); 
    } 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

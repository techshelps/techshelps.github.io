<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Child Window</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_child_window"></a>Child Window</h3>
<p>
A <i>child window</i> has the WS_CHILD style and is confined to the client area of its parent window. An application typically uses child windows to divide the client area of a parent window into functional areas. You create a child window by specifying the WS_CHILD style in the <a href="windows_1w6w.htm"><b>CreateWindowEx</b></a> function. </p>
<p>
A child window must have a parent window. The parent window can be an overlapped window, a pop-up window, or even another child window. You specify the parent window when you call <b>CreateWindowEx</b>. If you specify the WS_CHILD style in <b>CreateWindowEx</b> but do not specify a parent window, the system does not create the window. </p>
<p>
A child window has a client area but no other features, unless they are explicitly requested. An application can request a title bar, a window menu, minimize and maximize buttons, a border, and scroll bars for a child window, but a child window cannot have a menu. If the application specifies a menu handle, either when it registers the child's window class or creates the child window, the menu handle is ignored. </p>
<h4>Positioning</h4>
<p>
The system always positions a child window relative to the upper left corner of its parent window's client area. No part of a child window ever appears outside the borders of its parent window. If an application creates a child window that is larger than the parent window or positions a child window so that some or all of the child window extends beyond the borders of the parent, the system clips the child window; that is, the portion outside the parent window's client area is not displayed. Actions that affect the parent window can also affect the child window, as follows. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=23%>Parent window</th>
<th align=left width=77%>Child window</th>
</tr>
<tr valign=top>
<td width=23%>Destroyed</td>
<td width=77%>Destroyed before the parent window is destroyed.</td>
</tr>
<tr valign=top>
<td width=23%>Hidden</td>
<td width=77%>Hidden before the parent window is hidden. A child window is visible only when the parent window is visible.</td>
</tr>
<tr valign=top>
<td width=23%>Moved</td>
<td width=77%>Moved with the parent window's client area. The child window is responsible for painting its client area after the move.</td>
</tr>
<tr valign=top>
<td width=23%>Shown</td>
<td width=77%>Shown after the parent window is shown.</td>
</tr>
</table><br>
<h4>Clipping</h4>
<p>
The system does not automatically clip a child window from the parent window's client area. This means the parent window draws over the child window if it carries out any drawing in the same location as the child window. However, the system does clip the child window from the parent window's client area if the parent window has the WS_CLIPCHILDREN style. If the child window is clipped, the parent window cannot draw over it. </p>
<p>
A child window can overlap other child windows in the same client area. A child window that shares the same parent window as one or more other child windows is called a <i>sibling window</i>. Sibling windows can draw in each other's client area, unless one of the child windows has the WS_CLIPSIBLINGS style. If a child window does have this style, any portion of its sibling window that lies within the child window is clipped. </p>
<p>
If a window has either the WS_CLIPCHILDREN or WS_CLIPSIBLINGS style, a slight loss in performance occurs. Each window takes up system resources, so an application should not use child windows indiscriminately. For best performance, an application that needs to logically divide its main window should do so in the window procedure of the main window rather than by using child windows. </p>
<h4>Relationship to Parent Window</h4>
<p>
An application can change the parent window of an existing child window by calling the <a href="windows_1otw.htm"><b>SetParent</b></a> function. In this case, the system removes the child window from the client area of the old parent window and moves it to the client area of the new parent window. If <b>SetParent</b> specifies a NULL handle, the desktop window becomes the new parent window. In this case, the child window is drawn on the desktop, outside the borders of any other window. The <a href="windows_8ewk.htm"><b>GetParent</b></a> function retrieves a handle to a child window's parent window. </p>
<p>
The parent window relinquishes a portion of its client area to a child window, and the child window receives all input from this area. The window class need not be the same for each of the child windows of the parent window. This means that an application can fill a parent window with child windows that look different and carry out different tasks. For example, a dialog box can contain many types of controls, each one a child window that accepts different types of data from the user. </p>
<p>
A child window has only one parent window, but a parent can have any number of child windows. Each child window, in turn, can have child windows. In this chain of windows, each child window is called a descendant window of the original parent window. An application uses the <a href="windows_71wk.htm"><b>IsChild</b></a> function to discover whether a given window is a child window or a descendant window of a given parent window. </p>
<p>
The <a href="windows_46cz.htm"><b>EnumChildWindows</b></a> function enumerates the child windows of a parent window. Then, <b>EnumChildWindows</b> passes the handle to each child window to an application-defined callback function. Descendant windows of the given parent window are also enumerated. </p>
<h4>Messages</h4>
<p>
The system passes a child window's input messages directly to the child window; the messages are not passed through the parent window. The only exception is if the child window has been disabled by the <a href="keybinpt_9m0n.htm"><b>EnableWindow</b></a> function. In this case, the system passes any input messages that would have gone to the child window to the parent window instead. This permits the parent window to examine the input messages and enable the child window, if necessary. </p>
<p>
A child window can have a unique integer identifier. Child window identifiers are important when working with control windows. An application directs a control's activity by sending it messages. The application uses the control's child window identifier to direct the messages to the control. In addition, a control sends notification messages to its parent window. A notification message includes the control's child window identifier, which the parent uses to identify which control sent the message. An application specifies the child-window identifier for other types of child windows by setting the <i>hMenu</i> parameter of the <a href="windows_1w6w.htm"><b>CreateWindowEx</b></a> function to a value rather than a menu handle. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Open and Save As Dialog Boxes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_open_and_save_as_dialog_boxes"></a>Open and Save As Dialog Boxes</h2>
<p>
The <b>Open</b> dialog box lets the user specify the drive, directory, and the name of a file or set of files to open. You create and display an <b>Open</b> dialog box by initializing an <a href="commdlg3_1hma.htm"><b>OPENFILENAME</b></a> structure and passing the structure to the <a href="commdlg3_3cbp.htm"><b>GetOpenFileName</b></a> function. </p>
<p>
The <b>Save As</b> dialog box lets the user specify the drive, directory, and name of a file to save. You create and display a <b>Save As</b> dialog box by initializing an <a href="commdlg3_1hma.htm"><b>OPENFILENAME</b></a> structure and passing the structure to the <a href="commdlg3_7zqd.htm"><b>GetSaveFileName</b></a> function. </p>
<p>
Beginning with Windows 95 and Windows NT version 4.0, a new version of the <b>Open</b> and <b>Save As</b> dialog boxes provides user-interface features that are similar to the Windows Explorer. However, the system continues to support the old-style <b>Open</b> and <b>Save As</b> dialog boxes for applications that must be consistent with the older user interface.</p>
<p>
In addition to the difference in appearance, the Explorer-style and old-style dialog boxes differ in their use of custom templates and hook procedures for customizing the dialog boxes. However, the Explorer-style and old-style dialog boxes have the same behavior for most basic operations, such as specifying a filename filter, validating the user's input, and getting the filename specified by the user. For more information about the Explorer-style and old-style dialog boxes, see <a href="commdlg3_6pm6.htm">Open and Save As Dialog Box Customization</a>.</p>
<p>
The following illustration shows a typical Explorer-style <b>Open</b> dialog box.</p>
<p>
<img src="images/cswin_03.gif" border=0></p>
<p>
The following illustration shows a typical Explorer-style <b>Save As</b> dialog box.</p>
<p>
<img src="images/cscdl_12.gif" border=0></p>
<p>
If the user specifies a filename and clicks the <b>OK</b> button, <a href="commdlg3_3cbp.htm"><b>GetOpenFileName</b></a> or <a href="commdlg3_7zqd.htm"><b>GetSaveFileName</b></a> returns TRUE. The buffer pointed to by the <b>lpstrFile</b> member of the <a href="commdlg3_1hma.htm"><b>OPENFILENAME</b></a> structure contains the full path and filename specified by the user. </p>
<p>
If the user cancels the <b>Open</b> or <b>Save As</b> dialog box or an error occurs, the function returns FALSE. To determine the cause of the error, call the <a href="commdlg3_567m.htm"><b>CommDlgExtendedError</b></a> function to retrieve the extended error value. If the <b>lpstrFile</b> buffer is too small to receive the full name, <b>CommDlgExtendedError</b> returns FNERR_BUFFERTOOSMALL and the first 2 bytes of the buffer pointed to by the <b>lpstrFile</b> member are set to an integer value specifying the size required to receive the full name. </p>
<p>
Explorer style dialog boxes are only available to 32-bit applications. 16-bit applications cannot use thunking to display an Explorer-style dialog box. </p>
<p>
<b>Windows 95 and Windows 98:</b> Win32-based applications that use the old-style dialog boxes do so using a thunk. This means that any pointer passed to your hook procedure is a nonpersistent copy of the data. For example, the <a href="commdlg3_1hma.htm"><b>OPENFILENAME</b></a> pointer passed in the WM_INITDIALOG message is not a pointer to the buffer that you originally specified. If you need to pass private data to your hook procedure, bundle it in a structure and store a pointer to the structure in the <b>lCustData</b> member of the <b>OPENFILENAME</b> structure. </p>
<p>&nbsp;</p></body>
</HTML>

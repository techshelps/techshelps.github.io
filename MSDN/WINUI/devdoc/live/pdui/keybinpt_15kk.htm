<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetKeyNameText</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_getkeynametext"></a>GetKeyNameText</h1>
<p>
The <b>GetKeyNameText</b> function retrieves a string that represents the name of a key. </p>
<pre><code><b>int GetKeyNameText(
  LONG</b><i> lParam</i><b>,      </b>// second parameter of keyboard message
<b>  LPTSTR</b><i> lpString</i><b>,  </b>// pointer to buffer for key name
<b>  int</b><i> nSize</i>         // maximum length of key-name string length
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lParam</i></dt>
<dd>
Specifies the second parameter of the keyboard message (such as WM_KEYDOWN) to be processed. The function interprets the following portions of <i>lParam</i>. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Bits</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td width=16%>16–23</td>
<td width=84%>Scan code.</td>
</tr>
<tr valign=top>
<td width=16%>24</td>
<td width=84%>Extended-key flag. Distinguishes some keys on an enhanced keyboard.</td>
</tr>
<tr valign=top>
<td width=16%>25</td>
<td width=84%>"Don't care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right ctrl and shift keys, for example.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpString</i></dt>
<dd>
Pointer to a buffer that will receive the key name. </dd>
<dt>
<i>nSize</i></dt>
<dd>
Specifies the maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.) 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character. </p>
<p>
If the function fails, the return value is zero. To get extended error information, call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_1.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The format of the key-name string depends on the current keyboard layout. The keyboard driver maintains a list of names in the form of character strings for keys with names longer than a single character. The key name is translated according to the layout of the currently installed keyboard. The name of a character key is the character itself. The names of dead keys are spelled out in full. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use user32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="keybinpt_4l9w.htm">Keyboard Input Overview</a>, <a href="keybinpt_43jn.htm">Keyboard Input Functions</a> </p>
<p>&nbsp;</p></body>
</HTML>

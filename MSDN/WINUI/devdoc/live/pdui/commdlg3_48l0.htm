<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Finding Text</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_finding_text"></a>Finding Text</h2>
<p>
This topic describes sample code that displays and manages a <b>Find</b> dialog box so the user can specify the parameters of a search operation. The dialog box sends messages to your window procedure so you can perform the search operation. </p>
<p>
The code for displaying and managing a <b>Replace</b> dialog box is similar, except that it uses the <a href="commdlg3_07as.htm"><b>ReplaceText</b></a> function to display the dialog box. The <b>Replace</b> dialog box also sends messages in response to user clicks on the <b>Replace</b> and <b>Replace All</b> buttons.</p>
<p>
To use the <b>Find</b> or <b>Replace</b> dialog box, you must perform three separate tasks:
<ol>
<li>
Get a message identifier for the <a href="commdlg3_1y07.htm">FINDMSGSTRING</a> registered message.</li>
<li>
Display the dialog box.</li>
<li>
Process FINDMSGSTRING messages when the dialog box is open.</li>
</ol>
<p>
When you initialize your application, call the <a href="messques_10h1.htm"><b>RegisterWindowMessage</b></a> function to get a message identifier for the FINDMSGSTRING registered message. </p>
<pre><code>UINT uFindReplaceMsg;  // message identifier for FINDMSGSTRING 

uFindReplaceMsg = RegisterWindowMessage(FINDMSGSTRING);
 </code></pre>
<p>
To display a <b>Find</b> dialog box, first initialize a <a href="commdlg3_4uwi.htm"><b>FINDREPLACE</b></a> structure and then call the <a href="commdlg3_91is.htm"><b>FindText</b></a> function. Note that the <b>FINDREPLACE</b> structure and the buffer for the search string should be a global or static variable so it does not go out of scope before the dialog box closes. You must set the <b>hwndOwner</b> member to specify the window that receives the registered messages. After you create the dialog box, you can move or manipulate it by using the returned handle. </p>
<pre><code>FINDREPLACE fr;       // common dialog box structure
HWND hwnd;            // owner window
CHAR szFindWhat[80];  // buffer receiving string
HWND hdlg = NULL;     // handle of Find dialog box

// Initialize FINDREPLACE
ZeroMemory(&amp;fr, sizeof(FINDREPLACE));
fr.lStructSize = sizeof(FINDREPLACE);
fr.hwndOwner = hwnd;
fr.lpstrFindWhat = szFindWhat;
fr.wFindWhatLen = 80;
fr.Flags = 0;

hdlg = FindText(&amp;fr);
 </code></pre>
<p>
When the dialog box is open, your main message loop must include a call to the <a href="dlgboxes_5t45.htm"><b>IsDialogMessage</b></a> function. Pass the window handle of the dialog box as a parameter in the <b>IsDialogMessage</b> call. This ensures that the dialog box correctly processes keyboard messages.</p>
<p>
To monitor messages sent from the dialog box, your window procedure must check for the FINDMSGSTRING registered message and process the values passed in the <a href="commdlg3_4uwi.htm"><b>FINDREPLACE</b></a> structure as in the following example:</p>
<pre><code>LPFINDREPLACE lpfr;

if (message == uFindReplaceMsg){ 

    // Get pointer to FINDREPLACE structure from lParam.

    lpfr = (LPFINDREPLACE)lParam;

    // If the FR_DIALOGTERM flag is set, 
    // invalidate the handle identifying the dialog box. 

    if (lpfr-&gt;Flags &amp; FR_DIALOGTERM){ 
        hdlg = NULL; 
        return 0; 
        } 

    // If the FR_FINDNEXT flag is set, 
    // call the application-defined search routine
    // to search for the requested string. 

    if (lpfr-&gt;Flags &amp; FR_FINDNEXT) 
        SearchFile(lpfr-&gt;lpstrFindWhat,
                   (BOOL) (lpfr-&gt;Flags &amp; FR_DOWN), 
                   (BOOL) (lpfr-&gt;Flags &amp; FR_MATCHCASE)); 

    return 0; 
 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

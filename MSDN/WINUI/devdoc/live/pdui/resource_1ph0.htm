<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Resource List</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_resource_list"></a>Creating a Resource List</h2>
<p>
The following example creates a list of every resource in the HAND.EXE file. The list is written to the RESINFO.TXT file. </p>
<p>
The code demonstrates how to load the executable file, create a file in which to write resource information, and call the <a href="resource_4khf.htm"><b>EnumResourceTypes</b></a> function to send each resource type found in the module to the application-defined callback function <b>EnumTypesFunc</b>. See <a href="resource_8h0j.htm"><b>EnumResTypeProc</b></a> for information on callback functions of this type. This callback function uses the <a href="resource_1w6r.htm"><b>EnumResourceNames</b></a> function to pass the name of every resource within the specified type to another application-defined callback function, <b>EnumNamesFunc</b>. See <a href="resource_08pv.htm"><b>EnumResNameProc</b></a> for information on callback functions of this type. <b>EnumNamesFunc</b> uses the <a href="resource_2mnn.htm"><b>EnumResourceLanguages</b></a> function to pass the language of every resource of the specified type and name to a third callback function, <b>EnumLangsFunc</b>. See <a href="resource_32jn.htm"><b>EnumResLangProc</b></a> for information on callback functions of this type. <b>EnumLangsFunc</b> writes information about the resource of the specified type, name, and language to the RESINFO.TXT file. </p>
<pre><code>char szBuffer[80]; // print buffer for EnumResourceTypes 
DWORD cbWritten;   // number of bytes written to res. info. file 
int cbString;      // length of string in sprintf 
 
// Declare callback functions. 
BOOL EnumTypesFunc( 
    HANDLE hModule, 
    LPTSTR lpType, 
    LONG lParam); 
 
BOOL EnumNamesFunc( 
    HANDLE hModule, 
    LPCTSTR lpType, 
    LPTSTR lpName, 
    LONG lParam); 
 
BOOL EnumLangsFunc( 
    HANDLE hModule, 
    LPCTSTR lpType, 
    LPCTSTR lpName, 
    WORD wLang, 
    LONG lParam); 
 
// Load the .EXE whose resources you want to list. 
hExe = LoadLibrary("hand.exe"); 
 
if (hExe == NULL) 
{ 
    ErrorHandler("Could not load .EXE."); 
} 
 
// Create a file to contain the resource info. 
hFile = CreateFile("resinfo.txt",      // name of file 
    GENERIC_READ | GENERIC_WRITE,      // access mode 
    0,                                 // share mode 
    (LPSECURITY_ATTRIBUTES) NULL,      // no security 
    CREATE_ALWAYS,                     // create flags 
    FILE_ATTRIBUTE_NORMAL,             // file attributes 
    (HANDLE) NULL);                    // no template 
if (hFile == INVALID_HANDLE_VALUE) { 
    ErrorHandler("Could not open file."); 
} 
 
// Find all of the loaded file's resources. 
cbString = sprintf(szBuffer, 
    "The file contains the following resources:\n\n"); 
 
WriteFile(hFile,           // file to hold resource info. 
    szBuffer,              // what to write to the file 
    (DWORD) cbString,      // number of bytes in szBuffer 
    &amp;cbWritten,            // number of bytes written 
    NULL);                 // no overlapped I/O 
 
EnumResourceTypes(hExe,              // module handle 
    (ENUMRESTYPEPROC)EnumTypesFunc,  // callback function 
    0);                              // extra parameter 
 
// Unload the executable file whose resources were 
// enumerated and close the file created to contain 
// the resource information. 
 
FreeLibrary(hExe); 
CloseHandle(hFile); 
 
//    FUNCTION: EnumTypesFunc(HANDLE, LPSTR, LONG) 
// 
//    PURPOSE:  Resource type callback 
 
BOOL EnumTypesFunc( 
    HANDLE hModule,   // module handle 
    LPTSTR lpType,    // address of resource type 
    LONG lParam)      // extra parameter, could be 
                      // used for error checking 
{ 
    int cbString; 
 
    // Write the resource type to a resource information file. 
    // The type may be a string or an unsigned decimal 
    // integer, so test before printing. 
 
    if ((ULONG)lpType &amp; 0xFFFF0000) 
    { 
        cbString = sprintf(szBuffer, "Type: %s\n", lpType); 
    } 
    else 
    { 
        cbString = sprintf(szBuffer, "Type: %u\n", (USHORT)lpType); 
    } 
 
    WriteFile(hFile, szBuffer, (DWORD) cbString, 
        &amp;cbWritten, NULL); 
 
    // Find the names of all resources of type lpType. 
    EnumResourceNames(hModule, 
        lpType, 
        (ENUMRESNAMEPROC)EnumNamesFunc, 
        0); 
 
    return TRUE; 
} 
 
//    FUNCTION: EnumNamesFunc(HANDLE, LPSTR, LPSTR, LONG) 
// 
//    PURPOSE:  Resource name callback 
 
BOOL EnumNamesFunc( 
    HANDLE hModule,   // module handle 
    LPCTSTR lpType,   // address of resource type 
    LPTSTR lpName,    // address of resource name 
    LONG lParam)      // extra parameter, could be 
                      // used for error checking 
{ 
    int cbString; 
 
     // Write the resource name to a resource information file. 
     // The name may be a string or an unsigned decimal 
     // integer, so test before printing. 
 
    if ((ULONG)lpName &amp; 0xFFFF0000) 
    { 
        cbString = sprintf(szBuffer, "\tName: %s\n", lpName); 
    } 
    else 
    { 
        cbString = sprintf(szBuffer, "\tName: %u\n", 
            (USHORT)lpName); 
    } 
 
    WriteFile(hFile, szBuffer, (DWORD) cbString, 
        &amp;cbWritten, NULL); 
 
     // Find the languages of all resources of type 
     // lpType and name lpName. 
 
    EnumResourceLanguages(hModule, 
        lpType, 
        lpName, 
        (ENUMRESLANGPROC)EnumLangsFunc, 
        0); 
 
    return TRUE; 
} 
 
//    FUNCTION: EnumLangsFunc(HANDLE, LPSTR, LPSTR, WORD, LONG) 
// 
//    PURPOSE:  Resource language callback 
 
BOOL EnumLangsFunc( 
    HANDLE hModule,  // module handle 
    LPCTSTR lpType,  // address of resource type 
    LPCTSTR lpName,  // address of resource name 
    WORD wLang,      // resource language 
    LONG lParam)     // extra parameter, could be 
                        used for error checking 
{ 
    HANDLE hResInfo; 
    char szBuffer[80]; 
    int cbString = 0; 
 
    hResInfo = FindResourceEx(hModule, lpType, lpName, wLang); 
 
    // Write the resource language to the resource information file. 
    cbString = sprintf(szBuffer, "\t\tLanguage: %u\n", USHORT)wLang); 
 
    WriteFile(hFile, szBuffer, (DWORD) cbString, 
        &amp;cbWritten, NULL); 
 
    // Write the resource handle and size to buffer. 
    cbString = sprintf(szBuffer, 
        "\t\thResInfo == %lx,  Size == %lu\n\n", 
        hResInfo, 
        SizeofResource(hModule, hResInfo)); 
 
    WriteFile(hFile, szBuffer, (DWORD) cbString, 
        &amp;cbWritten, NULL); 
 
    return TRUE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

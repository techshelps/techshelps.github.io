<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Loop</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_message_loop"></a>Message Loop</h3>
<p>
A simple message loop consists of one function call to each of these three functions: <a href="messques_10kl.htm"><b>GetMessage</b></a>, <a href="messques_8vj9.htm"><b>TranslateMessage</b></a>, and <a href="messques_55b9.htm"><b>DispatchMessage</b></a>. </p>
<pre><code>MSG msg;

while( GetMessage( &amp;msg, NULL, 0, 0 ) )
{
    TranslateMessage( &amp;msg );
    DispatchMessage( &amp;msg );
}
 </code></pre>
<p>
The <b>GetMessage</b> function retrieves a message from the queue and copies it to a structure of type <a href="messques_39f6.htm"><b>MSG</b></a>. It returns a nonzero value, unless it encounters the <a href="windows_2i44.htm">WM_QUIT</a> message, in which case it returns FALSE and ends the loop. In a single-threaded application, ending the message loop is often the first step in closing the application. An application can end its own loop by using the <a href="messques_0tgl.htm"><b>PostQuitMessage</b></a> function, typically in response to the <a href="windows_414p.htm">WM_DESTROY</a> message in the window procedure of the application's main window. </p>
<p>
If you specify a window handle as the second parameter of <b>GetMessage</b>, only messages for the specified window are retrieved from the queue. <b>GetMessage</b> can also filter messages in the queue, retrieving only those messages that fall within a specified range. For more information about filtering messages, see <a href="messques_9eqv.htm">Message Filtering</a>. </p>
<p>
A thread's message loop must include <b>TranslateMessage</b> if the thread is to receive character input from the keyboard. The system generates virtual-key messages (<a href="keybinpt_9l7y.htm">WM_KEYDOWN</a> and <a href="keybinpt_45dc.htm">WM_KEYUP</a>) each time the user presses a key. A virtual-key message contains a virtual-key code that identifies which key was pressed, but not its character value. To retrieve this value, the message loop must contain <b>TranslateMessage</b>, which translates the virtual-key message into a character message (<a href="keybinpt_2otu.htm">WM_CHAR</a>) and places it back into the application message queue. The character message can then be removed upon a subsequent iteration of the message loop and dispatched to a window procedure. </p>
<p>
The <b>DispatchMessage</b> function sends a message to the window procedure associated with the window handle specified in the <b>MSG</b> structure. If the window handle is HWND_TOPMOST, <b>DispatchMessage</b> sends the message to the window procedures of all top-level windows in the system. If the window handle is NULL, <b>DispatchMessage</b> does nothing with the message. </p>
<p>
An application's main thread starts its message loop after initializing the application and creating at least one window. Once started, the message loop continues to retrieve messages from the thread's message queue and to dispatch them to the appropriate windows. The message loop ends when the <a href="messques_10kl.htm"><b>GetMessage</b></a> function removes the <a href="windows_2i44.htm">WM_QUIT</a> message from the message queue. </p>
<p>
Only one message loop is needed for a message queue, even if an application contains many windows. <a href="messques_55b9.htm"><b>DispatchMessage</b></a> always dispatches the message to the proper window; this is because each message in the queue is an <a href="messques_39f6.htm"><b>MSG</b></a> structure that contains the handle of the window to which the message belongs. </p>
<p>
You can modify a message loop in a variety of ways. For example, you can retrieve messages from the queue without dispatching them to a window. This is useful for applications that post messages not specifying a window. You can also direct <b>GetMessage</b> to search for specific messages, leaving other messages in the queue. This is useful if you must temporarily bypass the usual FIFO order of the message queue. </p>
<p>
An application that uses accelerator keys must be able to translate keyboard messages into command messages. To do this, the application's message loop must include a call to the <a href="keybacel_25o2.htm"><b>TranslateAccelerator</b></a> function. For more information about accelerator keys, see <a href="keybacel_8ghf.htm">Keyboard Accelerators</a>. </p>
<p>
If a thread uses a modeless dialog box, the message loop must include the <a href="dlgboxes_5t45.htm"><b>IsDialogMessage</b></a> function so that the dialog box can receive keyboard input. </p>
<p>&nbsp;</p></body>
</HTML>

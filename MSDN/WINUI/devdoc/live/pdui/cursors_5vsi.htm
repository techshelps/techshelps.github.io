<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Keyboard to Move the Cursor</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_the_keyboard_to_move_the_cursor"></a>Using the Keyboard to Move the Cursor</h2>
<p>
Because the system does not require a mouse, an application should be able to simulate mouse actions with the keyboard. The following example shows how to achieve this, by using the <a href="cursors_506r.htm"><b>GetCursorPos</b></a> and <a href="cursors_5e43.htm"><b>SetCursorPos</b></a> functions, and by processing input from the arrow keys. </p>
<pre><code>HCURSOR hCurs1, hCurs2;    // cursor handles 
 
POINT pt;                  // cursor location  
RECT rc;                   // client area coordinates 
static int repeat = 1;     // repeat key counter 
 
// 
// Other declarations and initialization. 
// 
 
switch (message) 
{ 
// 
// Process other messages. 
// 
 
    case WM_KEYDOWN: 
 
        if (wParam != VK_LEFT &amp;&amp; wParam != VK_RIGHT &amp;&amp; 
        wParam != VK_UP &amp;&amp; wParam != VK_DOWN) 
        { 
            break; 
        } 
 
        GetCursorPos(&amp;pt); 
 
        // Convert screen coordinates to client coordinates. 
 
        ScreenToClient(hwnd, &amp;pt); 
 
        switch (wParam) 
        { 
        // Move the cursor to reflect which 
        // arrow keys are pressed. 
 
            case VK_LEFT:               // left arrow 
                pt.x -= repeat; 
                break; 
 
            case VK_RIGHT:              // right arrow 
                pt.x += repeat; 
                break; 
 
            case VK_UP:                 // up arrow 
                pt.y -= repeat; 
                break; 
 
            case VK_DOWN:               // down arrow 
                pt.y += repeat; 
                break; 
 
            default: 
                return NULL; 
 
        } 
 
        repeat++;           // increment repeat count 
 
        // Keep the cursor in the client area. 
 
        GetClientRect(hwnd, &amp;rc); 
 
        if (pt.x &gt;= rc.right) 
        { 
            pt.x = rc.right - 1; 
        } 
        else 
        { 
            if (pt.x &lt; rc.left) 
            { 
                pt.x = rc.left; 
            } 
        } 
 
        if (pt.y &gt;= rc.bottom) 
            pt.y = rc.bottom - 1; 
        else 
            if (pt.y &lt; rc.top) 
                pt.y = rc.top; 
 
        // Convert client coordinates to screen coordinates. 
 
        ClientToScreen(hwnd, &amp;pt); 
        SetCursorPos(pt.x, pt.y); 
        break; 
 
    case WM_KEYUP: 
 
        repeat = 1;            // clear repeat count 
        break; 
 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

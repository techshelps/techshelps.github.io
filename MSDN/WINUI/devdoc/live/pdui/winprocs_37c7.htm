<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Window Procedure Superclassing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_window_procedure_superclassing"></a>Window Procedure Superclassing</h2>
<p>
<i>Superclassing</i> is a technique that allows an application to create a new window class with the basic functionality of the existing class, plus enhancements provided by the application. A superclass is based on an existing window class called the <i>base class</i>. Frequently, the base class is a system global window class such as an edit control, but it can be any window class. </p>
<p>
A superclass has its own window procedure, called the superclass procedure. The <i>superclass procedure</i> can take three actions upon receiving a message: It can pass the message to the original window procedure, modify the message and pass it to the original window procedure, or process the message and not pass it to the original window procedure. If the superclass procedure processes a message, it can do so before, after, or both before and after it passes the message to the original window procedure. </p>
<p>
Unlike a subclass procedure, a superclass procedure can process window creation messages (<a href="windows_8fol.htm">WM_NCCREATE</a>, <a href="windows_41d1.htm">WM_CREATE</a>, and so on), but it must also pass them to the original base-class window procedure so that the base-class window procedure can perform its initialization procedure. </p>
<p>
To superclass a window class, an application first calls the <a href="winclass_40rz.htm"><b>GetClassInfo</b></a> function to retrieve information about the base class. <b>GetClassInfo</b> fills a <a href="winclass_8yk2.htm"><b>WNDCLASS</b></a> structure with the values from the <b>WNDCLASS</b> structure of the base class. Next, the application copies its own instance handle into the <b>hInstance</b> member of the <b>WNDCLASS</b> structure and copies the name of the superclass into the <b>lpszClassName</b> member. If the base class has a menu, the application must provide a new menu with the same menu identifiers and copy the menu name into the <b>lpszMenuName</b> member. If the superclass procedure processes the <a href="editcon_8wh0.htm">WM_COMMAND</a> message and does not pass it to the window procedure of the base class, the menu need not have corresponding identifiers. <b>GetClassInfo</b> does not return the <b>lpszMenuName</b>, <b>lpszClassName</b>, or <b>hInstance</b> member of the <b>WNDCLASS</b> structure. </p>
<p>
An application must also set the <b>lpfnWndProc</b> member of the <b>WNDCLASS</b> structure. The <b>GetClassInfo</b> function fills this member with the address of the original window procedure for the class. The application must save this address, to pass messages to the original window procedure, and then copy the address of the superclass procedure into the <b>lpfnWndProc</b> member. The application can, if necessary, modify any other members of the <b>WNDCLASS</b> structure. After it fills the <b>WNDCLASS</b> structure, the application registers the superclass by passing the address of the structure to the <a href="winclass_70s3.htm"><b>RegisterClass</b></a> function. The superclass can then be used to create windows. </p>
<p>
Because superclassing registers a new window class, an application can add to both the extra class bytes and the extra window bytes. The superclass must not use the original extra bytes for the base class or the window for the same reasons that an instance subclass or a global subclass should not use them. Also, if the application adds extra bytes for its use to either the class or the window instance, it must reference the extra bytes relative to the number of extra bytes used by the original base class. Because the number of bytes used by the base class may vary from one version of the base class to the next, the starting offset for the superclass's own extra bytes may also vary from one version of the base class to the next. </p>
<p>&nbsp;</p></body>
</HTML>

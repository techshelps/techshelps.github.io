<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Owner-Drawn Buttons</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_using_owner_drawn_buttons"></a>Using Owner-Drawn Buttons</h2>
<p>
The parent window of an owner-drawn button typically responds to at least three messages for the button: <a href="dlgboxes_4n1j.htm">WM_INITDIALOG</a>, <a href="editcon_8wh0.htm">WM_COMMAND</a>, and <a href="combobox_3sx9.htm">WM_DRAWITEM</a>. It is not necessary to process the <a href="combobox_85d9.htm">WM_MEASUREITEM</a> message for owner-drawn buttons. </p>
<p>
When you must paint an owner-drawn button, the system sends the parent window a WM_DRAWITEM message whose <i>lParam</i> points to a <a href="combobox_88s2.htm"><b>DRAWITEMSTRUCT</b></a> structure. Use this structure with all owner-drawn controls to provide the application with the information it requires to paint the control. The <b>itemAction</b> and <b>itemState</b> members of the <b>DRAWITEMSTRUCT</b> structure define how to paint an owner-drawn button. </p>
<p>
The following example shows how to process WM_INITDIALOG, WM_DRAWITEM, and WM_COMMAND messages for owner-drawn buttons. This example demonstrates how to draw one of two bitmaps for a control, depending on whether the control is selected. You would typically use the <i>wParam</i> parameter of the WM_DRAWITEM message to identify the control; in this example, only one control is assumed. </p>
<pre><code>BOOL CALLBACK OwnDrawProc(HWND hDlg, UINT message, WPARAM wParam, 
                          LPARAM lParam) 
{ 
    HDC hdcMem; 
    LPDRAWITEMSTRUCT lpdis; 
 
    switch (message) 
    { 
        case WM_INITDIALOG: 
 
            // hinst, hbm1 and hbm2 are defined globally. 
            hbm1 = LoadBitmap((HANDLE) hinst, "OwnBit1"); 
            hbm2 = LoadBitmap((HANDLE) hinst, "OwnBit2"); 
            return TRUE; 
 
        case WM_DRAWITEM: 
            lpdis = (LPDRAWITEMSTRUCT) lParam; 
            hdcMem = CreateCompatibleDC(lpdis-&gt;hDC); 
 
            if (lpdis-&gt;itemState &amp; ODS_SELECTED)  // if selected 
                SelectObject(hdcMem, hbm2); 
            else 
                SelectObject(hdcMem, hbm1); 
 
            // Destination 
            StretchBlt( 
                lpdis-&gt;hDC,         // destination DC 
                lpdis-&gt;rcItem.left, // x upper left 
                lpdis-&gt;rcItem.top,  // y upper left 
 
                // The next two lines specify the width and 
                // height. 
                lpdis-&gt;rcItem.right - lpdis-&gt;rcItem.left, 
                lpdis-&gt;rcItem.bottom - lpdis-&gt;rcItem.top, 
                hdcMem,    // source device context 
                0, 0,      // x and y upper left 
                32,        // source bitmap width 
                32,        // source bitmap height 
                SRCCOPY);  // raster operation 
 
            DeleteDC(hdcMem); 
            return TRUE; 
 
        case WM_COMMAND: 
            if (wParam == IDOK 
                || wParam == IDCANCEL) 
            { 
                EndDialog(hDlg, TRUE); 
                return TRUE; 
            } 
            if (HIWORD(wParam) == BN_CLICKED) 
            { 
                switch (LOWORD(wParam)) 
                { 
                    case IDC_OWNERDRAW: 
 
                        // application-defined processing 
 
                        break; 
                } 
            } 
            break; 
 
        case WM_DESTROY: 
            DeleteObject(hbm1);  // delete bitmaps 
            DeleteObject(hbm2); 
 
            break; 
 
    } 
    return FALSE; 
        UNREFERENCED_PARAMETER(lParam); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INPUT</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_input_str"></a>INPUT</h1>
<p>
The <b>INPUT</b> structure is used by <a href="keybinpt_7id0.htm"><b>SendInput</b></a> to synthesize keystrokes, mouse motions, and button clicks.</p>
<pre><code>typedef struct tagINPUT {
    DWORD   type;
    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    };
} INPUT, *PINPUT, FAR* LPINPUT;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>type</b></dt>
<dd>
Specifies the type of the input event. It can be one of the following values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Value</th>
<th align=left width=55%>Meaning</th>
</tr>
<tr valign=top>
<td width=45%>INPUT_MOUSE</td>
<td width=55%>The event is a mouse event. Use the <b>mi</b> structure of the union.</td>
</tr>
<tr valign=top>
<td width=45%>INPUT_KEYBOARD</td>
<td width=55%>The event is a keyboard event. Use the <b>ki</b> structure of the union.</td>
</tr>
<tr valign=top>
<td width=45%>INPUT_HARDWARE</td>
<td width=55%><b>Windows 95:</b> The event is from input hardware other than a keyboard or mouse. Use the <b>hi</b> structure of the union.</td>
</tr>
</table><br>

</dd>
<dt>
<b>mi</b></dt>
<dd>
Specifies a mouse event.
<pre><code>typedef struct tagMOUSEINPUT {
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    DWORD   dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, FAR* LPMOUSEINPUT;
 </code></pre>

<dl>
<dt>
<b>dx, dy</b></dt>
<dd>
Specifies the mouse's absolute position or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE in <b>dwFlags</b>. Absolute data is given as the mouse's actual x- and y-coordinates; relative data is given as the number of pixels moved.</dd>
<dt>
<b>mouseData</b></dt>
<dd>
If <b>dwFlags</b> contains MOUSEEVENTF_WHEEL, then <b>mouseData</b> specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.
<p>
If <b>dwFlags</b> does not contain MOUSEEVENTF_WHEEL, then <b>mouseData</b> should be zero.
</dd>
<dt>
<b>dwFlags</b></dt>
<dd>
A set of bit flags that specify various aspects of mouse motion and button clicks. The bits in this member can be any reasonable combination of the following values. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Value</th>
<th align=left width=51%>Meaning</th>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_ABSOLUTE</td>
<td width=51%>Specifies that the <b>dx </b>and<b> dy</b> members contain normalized absolute coordinates. If the flag is not set, the <b>dx </b>and<b> dy</b> members contain relative data: the change in position since the last reported position. This flag can be set, or not set, regardless of what kind of mouse or other pointing device, if any, is connected to the system. For further information about relative mouse motion, see the following Remarks section.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_MOVE</td>
<td width=51%>Specifies that movement occurred.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_LEFTDOWN</td>
<td width=51%>Specifies that the left button was pressed.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_LEFTUP</td>
<td width=51%>Specifies that the left button was released.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_RIGHTDOWN</td>
<td width=51%>Specifies that the right button was pressed.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_RIGHTUP</td>
<td width=51%>Specifies that the right button was released.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_MIDDLEDOWN</td>
<td width=51%>Specifies that the middle button was pressed.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_MIDDLEUP</td>
<td width=51%>Specifies that the middle button was released.</td>
</tr>
<tr valign=top>
<td width=49%>MOUSEEVENTF_WHEEL</td>
<td width=51%><b>Windows NT:</b> Specifies that the wheel was moved, if the mouse has a wheel. The amount of movement is specified in <b>mouseData</b><i>.</i></td>
</tr>
</table><br>


<p>
The bit flags that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released. 
</dd>
<dt>
<b>time</b></dt>
<dd>
Time stamp for the event.</dd>
<dt>
<b>dwExtraInfo</b></dt>
<dd>
Specifies an additional 32-bit value associated with the mouse event. An application calls <a href="messques_3pm7.htm"><b>GetMessageExtraInfo</b></a> to obtain this extra information.</dd>
</dl>
</dd>
<dt>
<b>ki</b></dt>
<dd>
Specifies a keyboard event. 
<pre><code>typedef struct tagKEYBDINPUT {
    WORD    wVk;
    WORD    wScan;
    DWORD   dwFlags;
    DWORD   time;
    DWORD   dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, FAR* LPKEYBDINPUT;
 </code></pre>

<dl>
<dt>
<b>wVk</b></dt>
<dd>
Specifies a virtual-key code. The code must be a value in the range 1 to 254. </dd>
<dt>
<b>wScan</b></dt>
<dd>
Specifies a hardware scan code for the key. </dd>
<dt>
<b>dwFlags</b></dt>
<dd>
A set of bit flags that specify various aspects of a keystroke. The bits in this member can be any combination of the following predefined constant values. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Value</th>
<th align=left width=55%>Meaning</th>
</tr>
<tr valign=top>
<td width=45%>KEYEVENTF_EXTENDEDKEY</td>
<td width=55%>If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).</td>
</tr>
<tr valign=top>
<td width=45%>KEYEVENTF_KEYUP</td>
<td width=55%>If specified, the key is being released. If not specified, the key is being pressed.</td>
</tr>
</table><br>

</dd>
<dt>
<b>time</b></dt>
<dd>
Time stamp for the event.</dd>
<dt>
<b>dwExtraInfo</b></dt>
<dd>
Specifies an additional 32-bit value associated with the keystroke. An application calls <a href="messques_3pm7.htm"><b>GetMessageExtraInfo</b></a> to obtain this extra information.</dd>
</dl>
</dd>
<dt>
<b>hi</b></dt>
<dd>
<b>Windows 95:</b> Specifies an event from input hardware other than a keyboard or mouse.
<pre><code>typedef struct tagHARDWAREINPUT {
    DWORD   uMsg;
    WORD    wParamL;
    WORD    wParamH;
    DWORD   dwExtraInfo;
} HARDWAREINPUT, *PHARDWAREINPUT, FAR* LPHARDWAREINPUT;
 </code></pre>

<dl>
<dt>
<b>uMsg</b></dt>
<dd>
The message generated by the input hardware.</dd>
<dt>
<b>wParamL</b></dt>
<dd>
Parameter for <b>uMsg</b>.</dd>
<dt>
<b>wParamH</b></dt>
<dd>
Parameter for <b>uMsg</b>.</dd>
<dt>
<b>dwExtraInfo</b></dt>
<dd>
Specifies an additional 32-bit value associated with the event. An application calls <a href="messques_3pm7.htm"><b>GetMessageExtraInfo</b></a> to obtain this extra information.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
If the mouse has moved, indicated by MOUSEEVENTF_MOVE being set, <b>dx </b>and<b> dy</b> specify information about that motion. The information is given as absolute or relative integer values. </p>
<p>
If MOUSEEVENTF_ABSOLUTE value is specified, <b>dx </b>and<b> dy</b> contain normalized absolute coordinates between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) maps onto the upper-left corner of the display surface; coordinate (65535,65535) maps onto the lower-right corner. </p>
<p>
If the MOUSEEVENTF_ABSOLUTE value is not specified, <b>dx </b>and<b> dy</b> specify motions relative to the previous mouse event (the last reported position). Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). </p>
<p>
Relative mouse motion is subject to the effects of the mouse speed and the two mouse threshold values. A user sets these three values with the <b>Pointer Speed</b> slider of the Control Panel's <b>Mouse</b> <b>Properties</b> sheet. An application obtains and sets these values with the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_systemparametersinfo">
</object><a href=JavaScript:alink_1.Click()><b>SystemParametersInfo</b></a> function. </p>
<p>
The operating system applies two tests to the specified relative mouse motion. If the specified distance along either the x or y axis is greater than the first mouse threshold value, and the mouse speed is not zero, the operating system doubles the distance. If the specified distance along either the x or y axis is greater than the second mouse threshold value, and the mouse speed is equal to two, the operating system doubles the distance that resulted from applying the first threshold test. It is thus possible for the operating system to multiply specified relative mouse motion along the x or y axis by up to four times.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winuser.h.</p>
<h4>See Also</h4>
<p>
<a href="keybinpt_4l9w.htm">Keyboard Input Overview</a>, <a href="keybinpt_01ir.htm">Keyboard Input Structures</a>, <a href="messques_3pm7.htm"><b>GetMessageExtraInfo</b></a>, <a href="keybinpt_7id0.htm"><b>SendInput</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_systemparametersinfo">
</object><a href=JavaScript:alink_2.Click()><b>SystemParametersInfo</b></a></p>
<p>&nbsp;</p></body>
</HTML>

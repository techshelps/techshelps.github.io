<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Posting and Sending Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_posting_and_sending_messages"></a>Posting and Sending Messages</h2>
<p>
Any application can post and send messages. Like the system, an application posts a message by copying it to a message queue and sends a message by passing the message data as arguments to a window procedure. To post messages, an application uses the <a href="messques_87mt.htm"><b>PostMessage</b></a> function. An application can send a message by calling the <a href="messques_8ht1.htm"><b>SendMessage</b></a>, <a href="messques_9uat.htm"><b>BroadcastSystemMessage</b></a>, <a href="messques_3orv.htm"><b>SendMessageCallback</b></a>, <a href="messques_9l4k.htm"><b>SendMessageTimeout</b></a>, <a href="messques_8of9.htm"><b>SendNotifyMessage</b></a>, or <a href="dlgboxes_7u05.htm"><b>SendDlgItemMessage</b></a> function. </p>
<p>
An application typically posts a message to notify a specific window to perform a task. <b>PostMessage</b> creates an <a href="messques_39f6.htm"><b>MSG</b></a> structure for the message and copies the message to the message queue. The application's message loop eventually retrieves the message and dispatches it to the appropriate window procedure. </p>
<p>
An application typically sends a message to notify a window procedure to perform a task immediately. The <a href="messques_8ht1.htm"><b>SendMessage</b></a> function sends the message to the window procedure corresponding to the given window. The function waits until the window procedure completes processing and then returns the message result. Parent and child windows often communicate by sending messages to each other. For example, a parent window that has an edit control as its child window can set the text of the control by sending a message to it. The control can notify the parent window of changes to the text that are carried out by the user by sending messages back to the parent. </p>
<p>
The <a href="messques_3orv.htm"><b>SendMessageCallback</b></a> function also sends a message to the window procedure corresponding to the given window. However, this function returns immediately. After the window procedure processes the message, the system calls the specified callback function. For more information about the callback function, see the <a href="messques_5jtv.htm"><b>SendAsyncProc</b></a> function. </p>
<p>
Occasionally, you may want to send or post a message to all top-level windows in the system. For example, if the application changes the system time, it must notify all top-level windows about the change by sending a <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_wm_timechange">
</object><a href=JavaScript:alink_1.Click()>WM_TIMECHANGE</a> message. An application can send or post a message to all top-level windows by calling the <b>SendMessage</b> or <a href="messques_87mt.htm"><b>PostMessage</b></a> function and specifying HWND_TOPMOST in the <i>hwnd</i> parameter. You can also broadcast a message to all applications by calling the <a href="messques_9uat.htm"><b>BroadcastSystemMessage</b></a> function and specifying BSM_APPLICATIONS in the <i>lpdwRecipients</i> parameter. </p>
<p>
An application can post a message without specifying a window. If the application supplies a NULL window handle when calling <b>PostMessage</b>, the message is posted to the queue associated with the current thread. Because no window handle is specified, the application must process the message in the message loop. This is one way to create a message that applies to the entire application, instead of to a specific window. </p>
<p>
By using the <a href="messques_50v9.htm"><b>InSendMessage</b></a> or <a href="messques_8wmw.htm"><b>InSendMessageEx</b></a> function, a window procedure can determine whether it is processing a message sent by another thread. This capability is useful when message processing depends on the origin of the message. </p>
<p>
A common programming error is to assume that the <a href="messques_87mt.htm"><b>PostMessage</b></a> function always posts a message. This is not true when the message queue is full. An application should check the return value of the <b>PostMessage</b> function to determine whether the message has been posted and, if it has not been, repost it. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Client Area Mouse Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_client_area_mouse_messages"></a>Client Area Mouse Messages</h3>
<p>
A window receives a client area mouse message when a mouse event occurs within the window's client area. The system posts the <a href="mousinpt_5085.htm">WM_MOUSEMOVE</a> message to the window when the user moves the cursor within the client area. It posts one of the following messages when the user presses or releases a mouse button while the cursor is within the client area. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Message</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_0qjv.htm">WM_LBUTTONDBLCLK</a></td>
<td width=64%>The left mouse button was double-clicked.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_8uum.htm">WM_LBUTTONDOWN</a></td>
<td width=64%>The left mouse button was pressed.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_9po0.htm">WM_LBUTTONUP</a></td>
<td width=64%>The left mouse button was released.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_64tn.htm">WM_MBUTTONDBLCLK</a></td>
<td width=64%>The middle mouse button was double-clicked.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_3mwe.htm">WM_MBUTTONDOWN</a></td>
<td width=64%>The middle mouse button was pressed.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_1nhs.htm">WM_MBUTTONUP</a></td>
<td width=64%>The middle mouse button was released.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_346j.htm">WM_RBUTTONDBLCLK</a></td>
<td width=64%>The right mouse button was double-clicked.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_7j5a.htm">WM_RBUTTONDOWN</a></td>
<td width=64%>The right mouse button was pressed.</td>
</tr>
<tr valign=top>
<td width=36%><a href="mousinpt_1cmo.htm">WM_RBUTTONUP</a></td>
<td width=64%>The right mouse button was released.</td>
</tr>
</table><br>
<h4>Message Parameters</h4>
<p>
The <i>lParam</i> parameter of a client area mouse message indicates the position of the cursor hot spot. The low-order word indicates the x-coordinate of the hot spot, and the high-order word indicates the y-coordinate. The coordinates are given in <i>client coordinates</i>. In the client coordinate system, all points on the screen are given relative to the coordinates (0,0) of the upper left corner of the client area. </p>
<p>
The <i>wParam</i> parameter contains flags that indicate the status of the other mouse buttons and the ctrl and shift keys at the time of the mouse event. You can check for these flags when mouse-message processing depends on the state of another mouse button or of the ctrl or shift key. The <i>lParam</i> parameter can be a combination of the following values. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td width=25%>MK_CONTROL</td>
<td width=75%>The ctrl key is down.</td>
</tr>
<tr valign=top>
<td width=25%>MK_LBUTTON</td>
<td width=75%>The left mouse button is down.</td>
</tr>
<tr valign=top>
<td width=25%>MK_MBUTTON</td>
<td width=75%>The middle mouse button is down.</td>
</tr>
<tr valign=top>
<td width=25%>MK_RBUTTON</td>
<td width=75%>The right mouse button is down.</td>
</tr>
<tr valign=top>
<td width=25%>MK_SHIFT</td>
<td width=75%>The shift key is down.</td>
</tr>
</table><br>
<h4>Double-Click Messages</h4>
<p>
The system generates a double-click message when the user clicks a mouse button twice in quick succession. When the user clicks a button, the system establishes a rectangle centered around the cursor hot spot. It also marks the time at which the click occurred. When the user clicks the same button a second time, the system determines whether the hot spot is still within the rectangle and calculates the time elapsed since the first click. If the hot spot is still within the rectangle and the elapsed time does not exceeded the double-click time-out value, the system generates a double-click message. </p>
<p>
An application can get and set double-click time-out values by using the <a href="mousinpt_1qn9.htm"><b>GetDoubleClickTime</b></a> and <a href="mousinpt_4ckl.htm"><b>SetDoubleClickTime</b></a> functions, respectively. Alternatively, the application can set the double-click time-out value by using the SPI_SETDOUBLECLICKTIME flag with the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_systemparametersinfo">
</object><a href=JavaScript:alink_1.Click()><b>SystemParametersInfo</b></a> function. It can also set the size of the rectangle that the system uses to detect double-clicks by passing the SPI_SETDOUBLECLKWIDTH and SPI_SETDOUBLECLKHEIGHT flags to <b>SystemParametersInfo</b>. Note, however, that setting the double-click time-out value and rectangle affects all applications. </p>
<p>
An application-defined window does not, by default, receive double-click messages. Because of the system overhead involved in generating double-click messages, these messages are generated only for windows belonging to classes that have the CS_DBLCLKS class style. Your application must set this style when registering the window class. For more information, see <a href="winclass_1ooj.htm">Window Classes</a>. </p>
<p>
A double-click message is always the third message in a four-message series. The first two messages are the button down and button up messages generated by the first click. The second click generates the double-click message followed by another button up message. For example, double-clicking the left mouse button generates the following message sequence: </p>
<p>
WM_LBUTTONDOWN<br>
WM_LBUTTONUP<br>
WM_LBUTTONDBLCLK<br>
WM_LBUTTONUP</p>
<p>
Because a window always receives a button down message before receiving a double-click message, an application typically uses a double-click message to extend a task it began during a button down message. For example, when the user clicks a color in the color palette of Microsoft Paint, Paint displays the selected color next to the palette. When the user double-clicks a color, Paint displays the color and opens the <b>Edit</b> <b>Colors</b> dialog box. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OPENFILENAME</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_openfilename_str"></a>OPENFILENAME</h1>
<p>
The <b>OPENFILENAME</b> structure contains information that the <a href="commdlg3_3cbp.htm"><b>GetOpenFileName</b></a> and <a href="commdlg3_7zqd.htm"><b>GetSaveFileName</b></a> functions use to initialize an <b>Open</b> or <b>Save</b> <b>As</b> common dialog box. After the user closes the dialog box, the system returns information about the user's selection in this structure. </p>
<pre><code>typedef struct tagOFN { // ofn 
    DWORD         lStructSize; 
    HWND          hwndOwner; 
    HINSTANCE     hInstance; 
    LPCTSTR       lpstrFilter; 
    LPTSTR        lpstrCustomFilter; 
    DWORD         nMaxCustFilter; 
    DWORD         nFilterIndex; 
    LPTSTR        lpstrFile; 
    DWORD         nMaxFile; 
    LPTSTR        lpstrFileTitle; 
    DWORD         nMaxFileTitle; 
    LPCTSTR       lpstrInitialDir; 
    LPCTSTR       lpstrTitle; 
    DWORD         Flags; 
    WORD          nFileOffset; 
    WORD          nFileExtension; 
    LPCTSTR       lpstrDefExt; 
    DWORD         lCustData; 
    LPOFNHOOKPROC lpfnHook; 
    LPCTSTR       lpTemplateName; 
} OPENFILENAME; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lStructSize</b></dt>
<dd>
Specifies the length, in bytes, of the structure. </dd>
<dt>
<b>hwndOwner</b></dt>
<dd>
Identifies the window that owns the dialog box. This member can be any valid window handle, or it can be NULL if the dialog box has no owner. </dd>
<dt>
<b>hInstance</b></dt>
<dd>
If the OFN_ENABLETEMPLATEHANDLE flag is set in the <b>Flags</b> member, <b>hInstance</b> is the handle of a memory object containing a dialog box template. If the OFN_ENABLETEMPLATE flag is set, <b>hInstance</b> identifies a module that contains a dialog box template named by the <b>lpTemplateName</b> member. If neither flag is set, this member is ignored.
<p>
If the OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an old-style dialog box that replaces the default dialog box.
</dd>
<dt>
<b>lpstrFilter</b></dt>
<dd>
Pointer to a buffer containing pairs of null-terminated filter strings. The last string in the buffer must be terminated by two NULL characters. 
<p>
The first string in each pair is a display string that describes the filter (for example, "Text Files"), and the second string specifies the filter pattern (for example, "*.TXT"). To specify multiple filter patterns for a single display string, use a semicolon to separate the patterns (for example, "*.TXT;*.DOC;*.BAK"). A pattern string can be a combination of valid filename characters and the asterisk (*) wildcard character. Do not include spaces in the pattern string.

<p>
The system does not change the order of the filters. It displays them in the <b>File</b> <b>Types</b> combo box in the order specified in <b>lpstrFilter</b>.

<p>
If <b>lpstrFilter</b> is NULL, the dialog box does not display any filters. 
</dd>
<dt>
<b>lpstrCustomFilter</b></dt>
<dd>
Pointer to a static buffer that contains a pair of null-terminated filter strings for preserving the filter pattern chosen by the user. The first string is your display string that describes the custom filter, and the second string is the filter pattern selected by the user. The first time your application creates the dialog box, you specify the first string, which can be any nonempty string. When the user selects a file, the dialog box copies the current filter pattern to the second string. The preserved filter pattern can be one of the patterns specified in the <b>lpstrFilter</b> buffer, or it can be a filter pattern typed by the user. The system uses the strings to initialize the user-defined file filter the next time the dialog box is created. If the <b>nFilterIndex</b> member is zero, the dialog box uses the custom filter. 
<p>
If this member is NULL, the dialog box does not preserve user-defined filter patterns.

<p>
If this member is not NULL, the value of the <b>nMaxCustFilter</b> member must specify the size, in bytes (ANSI version) or 16-bit characters (Unicode version), of the <b>lpstrCustomFilter</b> buffer. 
</dd>
<dt>
<b>nMaxCustFilter</b></dt>
<dd>
Specifies the size, in bytes or characters, of the buffer identified by <b>lpstrCustomFilter</b>. This buffer should be at least 40 characters long. This member is ignored if <b>lpstrCustomFilter</b> is NULL or points to a NULL string. </dd>
<dt>
<b>nFilterIndex</b></dt>
<dd>
Specifies the index of the currently selected filter in the File Types control. The buffer pointed to by <b>lpstrFilter</b> contains pairs of strings that define the filters. The first pair of strings has an index value of 1, the second pair 2, and so on. An index of zero indicates the custom filter specified by <b>lpstrCustomFilter</b>. You can specify an index on input to indicate the initial filter description and filter pattern for the dialog box. When the user selects a file, <b>nFilterIndex</b> returns the index of the currently displayed filter. 
<p>
If <b>nFilterIndex</b> is zero and <b>lpstrCustomFilter</b> is NULL, the system uses the first filter in the <b>lpstrFilter</b> buffer. If all three members are zero or NULL, the system does not use any filters and does not show any files in the file list control of the dialog box. 
</dd>
<dt>
<b>lpstrFile</b></dt>
<dd>
Pointer to a buffer that contains a filename used to initialize the File Name edit control. The first character of this buffer must be NULL if initialization is not necessary. When the <a href="commdlg3_3cbp.htm"><b>GetOpenFileName</b></a> or <a href="commdlg3_7zqd.htm"><b>GetSaveFileName</b></a> function returns successfully, this buffer contains the drive designator, path, filename, and extension of the selected file. 
<p>
If the OFN_ALLOWMULTISELECT flag is set and the user selects multiple files, the buffer contains the current directory followed by the filenames of the selected files. For Explorer-style dialog boxes, the directory and filename strings are NULL separated, with an extra NULL character after the last filename. For old-style dialog boxes, the strings are space separated and the function uses short filenames for filenames with spaces. You can use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_findfirstfile">
</object><a href=JavaScript:alink_1.Click()><b>FindFirstFile</b></a> function to convert between long and short filenames.

<p>
If the buffer is too small, the function returns FALSE and the <a href="commdlg3_567m.htm"><b>CommDlgExtendedError</b></a> function returns FNERR_BUFFERTOOSMALL. In this case, the first two bytes of the <b>lpstrFile</b> buffer contain the required size, in bytes or characters.
</dd>
<dt>
<b>nMaxFile</b></dt>
<dd>
Specifies the size, in bytes (ANSI version) or 16-bit characters (Unicode version), of the buffer pointed to by <b>lpstrFile</b>. The <b>GetOpenFileName</b> and <b>GetSaveFileName</b> functions return FALSE if the buffer is too small to contain the file information. The buffer should be at least 256 characters long. </dd>
<dt>
<b>lpstrFileTitle</b></dt>
<dd>
Pointer to a buffer that receives the filename and extension (without path information) of the selected file. This member can be NULL. </dd>
<dt>
<b>nMaxFileTitle</b></dt>
<dd>
Specifies the size, in bytes (ANSI version) or 16-bit characters (Unicode version), of the buffer pointed to by <b>lpstrFileTitle</b>. This member is ignored if <b>lpstrFileTitle</b> is NULL. </dd>
<dt>
<b>lpstrInitialDir</b></dt>
<dd>
Pointer to a string that specifies the initial file directory.
<p>
<b>Windows NT 5.0 and later; Windows 98 and later:</b> 

<p>
If <b>lpstrInitalDir</b> is NULL and the current directory contains any files of the specified filter types, the initial directory is the current directory.

<p>
If <b>lpstrInitalDir</b> is NULL and the current directory does not contain any files of the specified filter types, the initial directory is the personal files directory of the current user. To specify the current user's personal files directory as the initial directory, set <b>lpstrInitialDir</b> to the path returned by calling the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_shgetspecialfolderlocation">
</object><a href=JavaScript:alink_2.Click()><b>SHGetSpecialFolderLocation</b></a> function with the CSIDL_PERSONAL flag.

<p>
<b>Earlier versions of Windows and Windows NT:</b> 

<p>
If <b>lpstrInitalDir</b> is NULL, the initial directory is the current directory. 
</dd>
<dt>
<b>lpstrTitle</b></dt>
<dd>
Pointer to a string to be placed in the title bar of the dialog box. If this member is NULL, the system uses the default title (that is, <b>Save</b> <b>As</b> or <b>Open</b>). </dd>
<dt>
<b>Flags</b></dt>
<dd>
A set of bit flags you can use to initialize the dialog box. When the dialog box returns, it sets these flags to indicate the user's input. This member can be a combination of the following flags: 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Flag</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_ALLOWMULTISELECT</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the <b>File</b> <b>Name</b> list box allows multiple selections. If you also set the OFN_EXPLORER flag, the dialog box uses the Explorer-style user interface; otherwise, it uses the old-style user interface. <p>
If the user selects more than one file, the <b>lpstrFile</b> buffer returns the path to the current directory followed by the filenames of the selected files. The <b>nFileOffset</b> member is the offset, in bytes or characters, to the first filename, and the <b>nFileExtension</b> member is not used. For Explorer-style dialog boxes, the directory and filename strings are NULL separated, with an extra NULL character after the last filename. This format enables the Explorer-style dialogs to return long filenames that include spaces. For old-style dialog boxes, the directory and filename strings are separated by spaces and the function uses short filenames for filenames with spaces. You can use the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_findfirstfile">
</object><a href=JavaScript:alink_3.Click()><b>FindFirstFile</b></a> function to convert between long and short filenames. </p>
<p>
If you specify a custom template for an old-style dialog box, the definition of the File Name list box must contain the LBS_EXTENDEDSEL value. </p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_CREATEPROMPT</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If the user specifies a file that does not exist, this flag causes the dialog box to prompt the user for permission to create the file. If the user chooses to create the file, the dialog box closes and the function returns the specified name; otherwise, the dialog box remains open. If you use this flag with the OFN_ALLOWMULTISELECT flag, the dialog box allows the user to specify only one nonexistent file. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_ENABLEHOOK</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Enables the hook function specified in the <b>lpfnHook</b> member. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_ENABLESIZING</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%><b>Windows NT 5.0, Windows 98: </b>Enables the Explorer-style dialog box to be resized using either the mouse or the keyboard. By default, the Explorer-style <b>Open</b> and <b>Save</b> <b>As</b> dialog boxes allow the dialog box to be resized regardless of whether this flag is set. This flag is necessary only if you provide a hook procedure or custom template. The old-style dialog box does not permit resizing.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_ENABLETEMPLATE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Indicates that the <b>lpTemplateName</b> member points to the name of a dialog template resource in the module identified by the <b>hInstance</b> member.<p>
If the OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an old-style dialog box that replaces the default dialog box.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_ENABLETEMPLATEHANDLE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Indicates that the <b>hInstance</b> member identifies a data block that contains a preloaded dialog box template. The system ignores the <b>lpTemplateName</b> if this flag is specified.<p>
If the OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an old-style dialog box that replaces the default dialog box.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_EXPLORER</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Indicates that any customizations made to the <b>Open</b> or <b>Save</b> <b>As</b> dialog box use the new Explorer-style customization methods. For more information, see <a href="commdlg3_39gz.htm">Explorer-Style Hook Procedures</a> and <a href="commdlg3_1yr7.htm">Explorer-Style Custom Templates</a>.<p>
By default, the <b>Open</b> and <b>Save</b> <b>As</b> dialog boxes use the Explorer-style user interface regardless of whether this flag is set. This flag is necessary only if you provide a hook procedure or custom template, or set the OFN_ALLOWMULTISELECT flag. </p>
<p>
If you want the old-style user interface, omit the OFN_EXPLORER flag and provide a replacement old-style template or hook procedure. If you want the old style but do not need a custom template or hook procedure, simply provide a hook procedure that always returns FALSE.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_EXTENSIONDIFFERENT</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the user typed a filename extension that differs from the extension specified by <b>lpstrDefExt</b>. The function does not use this flag if <b>lpstrDefExt</b> is NULL.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_FILEMUSTEXIST</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the user can type only names of existing files in the <b>File</b> <b>Name</b> entry field. If this flag is specified and the user enters an invalid name, the dialog box procedure displays a warning in a message box. If this flag is specified, the OFN_PATHMUSTEXIST flag is also used.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_HIDEREADONLY</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Hides the <b>Read</b> <b>Only</b> check box.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_LONGNAMES</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>For old-style dialog boxes, this flag causes the dialog box to use long filenames. If this flag is not specified, or if the OFN_ALLOWMULTISELECT flag is also set, old-style dialog boxes use short filenames (8.3 format) for filenames with spaces. <p>
Explorer-style dialog boxes ignore this flag and always display long filenames.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NOCHANGEDIR</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Restores the current directory to its original value if the user changed the directory while searching for files.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NODEREFERENCELINKS</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Directs the dialog box to return the path and filename of the selected shortcut (.LNK) file. If this value is not given, the dialog box returns the path and filename of the file <i>referenced by</i> the shortcut</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NOLONGNAMES</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>For old-style dialog boxes, this flag causes the dialog box to use short filenames (8.3 format). <p>
Explorer-style dialog boxes ignore this flag and always display long filenames.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NONETWORKBUTTON</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Hides and disables the <b>Network</b> button.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NOREADONLYRETURN</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the returned file does not have the <b>Read</b> <b>Only</b> check box checked and is not in a write-protected directory.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NOTESTFILECREATE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the file is not created before the dialog box is closed. This flag should be specified if the application saves the file on a create-nonmodify network share. When an application specifies this flag, the library does not check for write protection, a full disk, an open drive door, or network protection. Applications using this flag must perform file operations carefully, because a file cannot be reopened once it is closed.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_NOVALIDATE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the common dialog boxes allow invalid characters in the returned filename. Typically, the calling application uses a hook procedure that checks the filename by using the FILEOKSTRING message. If the text box in the edit control is empty or contains nothing but spaces, the lists of files and directories are updated. If the text box in the edit control contains anything else, <b>nFileOffset</b> and <b>nFileExtension</b> are set to values generated by parsing the text. No default extension is added to the text, nor is text copied to the buffer specified by <b>lpstrFileTitle</b>.</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>If the value specified by <b>nFileOffset</b> is less than zero, the filename is invalid. Otherwise, the filename is valid, and <b>nFileExtension</b> and <b>nFileOffset</b> can be used as if the OFN_NOVALIDATE flag had not been specified.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_OVERWRITEPROMPT</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Causes the <b>Save</b> <b>As</b> dialog box to generate a message box if the selected file already exists. The user must confirm whether to overwrite the file.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_PATHMUSTEXIST</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that the user can type only valid paths and filenames. If this flag is used and the user types an invalid path and filename in the <b>File</b> <b>Name</b> entry field, the dialog box function displays a warning in a message box.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_READONLY</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Causes the <b>Read</b> <b>Only</b> check box to be checked initially when the dialog box is created. This flag indicates the state of the <b>Read</b> <b>Only</b> check box when the dialog box is closed.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_SHAREAWARE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Specifies that if a call to the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_openfile">
</object><a href=JavaScript:alink_4.Click()><b>OpenFile</b></a> function fails because of a network sharing violation, the error is ignored and the dialog box returns the selected filename. <p>
If this flag is not set, the dialog box notifies your hook procedure when a network sharing violation occurs for the filename specified by the user. If you set the OFN_EXPLORER flag, the dialog box sends the <a href="commdlg3_7wku.htm">CDN_SHAREVIOLATION</a> message to the hook procedure. If you do not set OFN_EXPLORER, the dialog box sends the <a href="commdlg3_0tlz.htm">SHAREVISTRING</a> registered message to the hook procedure. </p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>OFN_SHOWHELP</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>Causes the dialog box to display the <b>Help</b> button. The <b>hwndOwner</b> member must specify the window to receive the <a href="commdlg3_9d2f.htm">HELPMSGSTRING</a> registered messages that the dialog box sends when the user clicks the <b>Help</b> button.<p>
An Explorer-style dialog box sends a <a href="commdlg3_8okw.htm">CDN_HELP</a> notification message to your hook procedure when the user clicks the <b>Help</b> button. </p>
</td>
</tr>
</table><br>

</dd>
<dt>
<b>nFileOffset</b></dt>
<dd>
Specifies the zero-based offset, in bytes (ANSI version) or 16-bit characters (Unicode version), from the beginning of the path to the filename in the string pointed to by <b>lpstrFile</b>. For example, if <b>lpstrFile</b> points to the following string, "c:\dir1\dir2\file.ext", this member contains the value 13 to indicate the offset of the "file.ext" string. 
<p>
If the user selects more than one file, <b>nFileOffset</b> is the offset to the first filename.
</dd>
<dt>
<b>nFileExtension</b></dt>
<dd>
Specifies the zero-based offset, in bytes (ANSI version) or 16-bit characters (Unicode version), from the beginning of the path to the filename extension in the string pointed to by <b>lpstrFile</b>. For example, if <b>lpstrFile</b> points to the following string, "c:\dir1\dir2\file.ext", this member contains the value 18. If the user did not type an extension and <b>lpstrDefExt</b> is NULL, this member specifies an offset to the terminating null character. If the user typed "." as the last character in the filename, this member specifies zero. </dd>
<dt>
<b>lpstrDefExt</b></dt>
<dd>
Points to a buffer that contains the default extension. <a href="commdlg3_3cbp.htm"><b>GetOpenFileName</b></a> and <a href="commdlg3_7zqd.htm"><b>GetSaveFileName</b></a> append this extension to the filename if the user fails to type an extension. This string can be any length, but only the first three characters are appended. The string should not contain a period (.). If this member is NULL and the user fails to type an extension, no extension is appended. </dd>
<dt>
<b>lCustData</b></dt>
<dd>
Specifies application-defined data that the system passes to the hook procedure identified by the <b>lpfnHook</b> member. When the system sends the <a href="dlgboxes_4n1j.htm">WM_INITDIALOG</a> message to the hook procedure, the message's <i>lParam</i> parameter is a pointer to the <b>OPENFILENAME</b> structure specified when the dialog box was created. The hook procedure can use this pointer to get the <b>lCustData</b> value.</dd>
<dt>
<b>lpfnHook</b></dt>
<dd>
Pointer to a hook procedure. This member is ignored unless the <b>Flags</b> member includes the OFN_ENABLEHOOK flag.
<p>
If the OFN_EXPLORER flag is not set in the <b>Flags</b> member, <b>lpfnHook</b> is a pointer to an <a href="commdlg3_3k9x.htm"><b>OFNHookProcOldStyle</b></a> hook procedure that receives messages intended for the dialog box. The hook procedure returns FALSE to pass a message to the default dialog box procedure or TRUE to discard the message. 

<p>
If OFN_EXPLORER is set, <b>lpfnHook</b> is a pointer to an <a href="commdlg3_61sz.htm"><b>OFNHookProc</b></a> hook procedure. The hook procedure receives notification messages sent from the dialog box. The hook procedure also receives messages for any additional controls that you defined by specifying a child dialog template. The hook procedure does not receive messages intended for the standard controls of the default dialog box. 
</dd>
<dt>
<b>lpTemplateName</b></dt>
<dd>
Pointer to a null-terminated string that names a dialog template resource in the module identified by the <b>hInstance</b> member. For numbered dialog box resources, this can be a value returned by the <a href="resource_2dd1.htm"><b>MAKEINTRESOURCE</b></a> macro. This member is ignored unless the OFN_ENABLETEMPLATE flag is set in the <b>Flags</b> member.
<p>
If the OFN_EXPLORER flag is set, the system uses the specified template to create a dialog box that is a child of the default Explorer-style dialog box. If the OFN_EXPLORER flag is not set, the system uses the template to create an old-style dialog box that replaces the default dialog box.

</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Requires version 1.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in commdlg.h.<br>
<b>&nbsp;&nbsp;Unicode: </b>Defined as Unicode and ANSI structures.</p>
<h4>See Also</h4>
<p>
<a href="commdlg3_04ft.htm">Common Dialog Box Library Overview</a>, <a href="commdlg3_2xir.htm">Common Dialog Box Structures</a>, <a href="commdlg3_3cbp.htm"><b>GetOpenFileName</b></a>, <a href="commdlg3_7zqd.htm"><b>GetSaveFileName</b></a>, <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_shgetspecialfolderlocation">
</object><a href=JavaScript:alink_5.Click()><b>SHGetSpecialFolderLocation</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing the WM_CREATE Message</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_processing_the_wm_create_message"></a>Processing the WM_CREATE Message</h3>
<p>
The example in <a href="combobox_2hbm.htm">Creating a Combo-box Toolbar</a> processes the <a href="windows_41d1.htm">WM_CREATE</a> message to create two combo box controls as child windows. It then subclasses the edit controls (selection fields) in each combo box because they receive the character input for simple and drop-down combo box. The application gets the handle to each edit control by using the <a href="windows_13hw.htm"><b>ChildWindowFromPoint</b></a> function. </p>
<p>
To subclass the edit controls, the application calls the <a href="winclass_64tj.htm"><b>SetWindowLong</b></a> function, replacing the address of the class window procedure with the address of the application-defined <code>SubClassProc</code> function. The address of the original window procedure is saved in the global variable <i>lpfnEditWndProc</i>. </p>
<p>
<code>SubClassProc</code> intercepts tab, esc, and enter keys and notifies the toolbar window by sending application-defined messages (WM_TAB, WM_ESC, and WM_ENTER). <code>SubClassProc</code> uses the <a href="winprocs_9dlv.htm"><b>CallWindowProc</b></a> function to pass most messages to the original window procedure, <i>lpfnEditWndProc</i>. </p>
<p>&nbsp;</p></body>
</HTML>

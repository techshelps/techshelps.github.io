<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Queued Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_queued_messages"></a>Queued Messages</h3>
<p>
The system can display any number of windows at a time. To route mouse and keyboard input to the appropriate window, the system uses message queues. </p>
<p>
the system maintains a single system message queue and any number of thread message queues, one for each GUI thread. To avoid the overhead of creating a message queue for non-GUI threads, all threads are created initially without a message queue. The system creates a thread's message queue only when the thread makes its first call to one of the Win32 User or GDI functions.</p>
<p>
Whenever the user moves the mouse, clicks the mouse buttons, or types on the keyboard, the device driver for the mouse or keyboard converts the input into messages and places them in the system message queue. The system removes the messages, one at a time, from the system message queue, examines them to determine the destination window, and then posts them to the message queue of the thread that created the destination window. A thread's message queue receives all mouse and keyboard messages for the windows created by the thread. The thread removes messages from its queue and directs the system to send them to the appropriate window procedure for processing. </p>
<p>
With the exception of the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_wm_paint">
</object><a href=JavaScript:alink_1.Click()>WM_PAINT</a> message, the system always posts messages at the end of a message queue. This ensures that a window receives its input messages in the proper first-in, first-out (FIFO) sequence. The WM_PAINT message, however, is kept in the queue and is forwarded to the window procedure only when the queue contains no other messages. Multiple WM_PAINT messages for the same window are combined into a single WM_PAINT message, consolidating all invalid parts of the client area into a single area. Combining WM_PAINT messages reduces the number of times a window must redraw the contents of its client area. </p>
<p>
The system posts a message to a thread's message queue by filling an <a href="messques_39f6.htm"><b>MSG</b></a> structure and then copying it to the message queue. Information in <b>MSG</b> includes: the handle of the window for which the message is intended, the message identifier, the two message parameters, the time the message was posted, and the mouse cursor position. A thread can post a message to its own message queue or to the queue of another thread by using the <a href="messques_87mt.htm"><b>PostMessage</b></a> or <a href="messques_1ued.htm"><b>PostThreadMessage</b></a> function. </p>
<p>
An application can remove a message from its queue by using the <a href="messques_10kl.htm"><b>GetMessage</b></a> function. To examine a message without removing it from its queue, an application can use the <a href="messques_8085.htm"><b>PeekMessage</b></a> function. This function fills <b>MSG</b> with information about the message. </p>
<p>
After removing a message from its queue, an application can use the <a href="messques_55b9.htm"><b>DispatchMessage</b></a> function to direct the system to send the message to a window procedure for processing. <b>DispatchMessage</b> takes a pointer to <b>MSG</b> that was filled by a previous call to the <b>GetMessage</b> or <b>PeekMessage</b> function. <b>DispatchMessage</b> passes the window handle, the message identifier, and the two message parameters to the window procedure, but it does not pass the time the message was posted or mouse cursor position. An application can retrieve this information by calling the <a href="messques_69et.htm"><b>GetMessageTime</b></a> and <a href="messques_7esz.htm"><b>GetMessagePos</b></a> functions while processing a message. </p>
<p>
A thread can use the <a href="messques_4ckl.htm"><b>WaitMessage</b></a> function to yield control to other threads when it has no messages in its message queue. The function suspends the thread and does not return until a new message is placed in the thread's message queue. </p>
<p>
You can call the <a href="messques_0ovj.htm"><b>SetMessageExtraInfo</b></a> function to associate a 32-bit value with the current thread's message queue. Then call the <a href="messques_3pm7.htm"><b>GetMessageExtraInfo</b></a> function to get the value associated with the last message retrieved by the <a href="messques_10kl.htm"><b>GetMessage</b></a> or <a href="messques_8085.htm"><b>PeekMessage</b></a> function. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing a Color</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_choosing_a_color"></a>Choosing a Color</h2>
<p>
This topic describes sample code that displays a <b>Color</b> dialog box so a user can select a color. The sample code first initializes a <a href="commdlg3_6p2q.htm"><b>CHOOSECOLOR</b></a> structure, and then calls the <a href="commdlg3_4p4i.htm"><b>ChooseColor</b></a> function to display the dialog box. If the function returns TRUE, indicating that the user selected a color, the sample code uses the selected color to create a new solid brush.</p>
<p>
This example uses the <b>CHOOSECOLOR</b> structure to initialize the dialog box as follows: 
<ul>
<li>
Initializes the <b>lpCustColors</b> member with a pointer to a static COLORREF array. The colors in the array are initially black, but the static array preserves custom colors created by the user for subsequent <b>ChooseColor</b> calls.</li>
<li>
Sets the CC_RGBINIT flag and initializes the <b>rgbResult</b> member to specify the color that is initially selected when the dialog box opens. If not specified, the initial selection is black. The example uses the <i>rgbCurrent</i> static variable to preserve the selected value between calls to <a href="commdlg3_4p4i.htm"><b>ChooseColor</b></a>.</li>
<li>
Sets the CC_FULLOPEN flag so the custom colors extension of the dialog box is always displayed.</li>
</ul>
<pre><code>CHOOSECOLOR cc;                 // common dialog box structure 
static COLORREF acrCustClr[16]; // array of custom colors 
HWND hwnd;                      // owner window
HBRUSH hbrush;                  // brush handle
static DWORD rgbCurrent;        // initial color selection

// Initialize CHOOSECOLOR 
ZeroMemory(&amp;cc, sizeof(CHOOSECOLOR));
cc.lStructSize = sizeof(CHOOSECOLOR);
cc.hwndOwner = hwnd;
cc.lpCustColors = (LPDWORD) acrCustClr;
cc.rgbResult = rgbCurrent;
cc.Flags = CC_FULLOPEN | CC_RGBINIT;
 
if (ChooseColor(&amp;cc)==TRUE) {
    hbrush = CreateSolidBrush(cc.rgbResult);
    rgbCurrent = cc.rgbResult; 
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

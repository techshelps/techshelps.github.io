<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Modeless Dialog Box</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_modeless_dialog_box"></a>Creating a Modeless Dialog Box</h2>
<p>
You create a modeless dialog box by using the <a href="dlgboxes_4hwn.htm"><b>CreateDialog</b></a> function, specifying the identifier or name of a dialog box template resource and the address of the dialog box procedure. <b>CreateDialog</b> loads the template, creates the dialog box, and optionally displays it. Your application is responsible for retrieving and dispatching user input messages to the dialog box procedure. </p>
<p>
In the following example, the application displays a modeless dialog box — if it is not already displayed — when the user chooses a Go To command from an application menu. The dialog box contains an edit control, a check box, and OK and Cancel buttons. The dialog box template is a resource in the application's executable file and has the resource identifier DLG_GOTO. The user enters a line number in the edit control and checks the check box to specify that the line number is relative to the current line. The control identifiers are ID_LINE, ID_ABSREL, IDOK, and IDCANCEL. </p>
<p>
The statements in the first part of the example create the modeless dialog box. These statements, in the window procedure for the application's main window, create the dialog box when the window procedure receives a <a href="editcon_8wh0.htm">WM_COMMAND</a> message having the IDM_GOTO command identifier, but only if the global variable <i>hwndGoto</i> does not already contain a valid handle. The second part of the example is the application's main message loop. The loop includes the <a href="dlgboxes_5t45.htm"><b>IsDialogMessage</b></a> function to ensure that the user can use the dialog box keyboard interface in this modeless dialog box. The third part of the example is the dialog box procedure. The procedure retrieves the contents of the edit control and check box when the user chooses the OK button. The procedure destroys the dialog box when the user chooses the Cancel button. </p>
<pre><code>HWND hwndGoto = NULL;  // window handle of dialog box 
 
    . 
    . 
    . 
 
    case WM_COMMAND: 
        switch (LOWORD(wParam)) 
        { 
            case IDM_GOTO: 
                if (!IsWindow(hwndGoto)) 
                { 
                    hwndGoto = CreateDialog(hinst, 
                         MAKEINTRESOURCE(DLG_GOTO), 
                         hwnd, (DLGPROC) GoToProc); 
                    ShowWindow(hwndGoto, SW_SHOW); 
                } 
                break; 
        } 
        return 0L; 
 </code></pre>
<p>
In the preceding statements, <a href="dlgboxes_4hwn.htm"><b>CreateDialog</b></a> is called only if <i>hwndGoto</i> does <i>not</i> contain a valid window handle. This ensures that the application does not display two dialog boxes at the same time. To support this method of checking, the dialog procedure must set <i>hwndGoto</i> to NULL when it destroys the dialog box. </p>
<p>
The message loop for an application consists of the following statements: </p>
<pre><code>while (GetMessage(&amp;msg, NULL, NULL, NULL)) 
{ 
    if (!IsWindow(hwndGoto) || !IsDialogMessage(hwndGoto, &amp;msg)) 
    { 
        TranslateMessage(&amp;msg); 
        DispatchMessage(&amp;msg); 
    } 
} 
 </code></pre>
<p>
The loop checks the validity of the window handle for the dialog box and only calls the <a href="dlgboxes_5t45.htm"><b>IsDialogMessage</b></a> function if the handle is valid. <b>IsDialogMessage</b> only processes the message if it belongs to the dialog box. Otherwise, it returns FALSE and the loop dispatches the message to the appropriate window. </p>
<p>
The following statements define the dialog box procedure: </p>
<pre><code>int iLine;             // receives line number 
BOOL fRelative;        // receives check box status 
 
BOOL CALLBACK GoToProc(HWND hwndDlg, UINT message, WPARAM wParam, LPARAM lParam) 
{ 
    BOOL fError; 
 
    switch (message) 
    { 
        case WM_INITDIALOG: 
            CheckDlgButton(hwndDlg, ID_ABSREL, fRelative); 
            return TRUE; 
 
        case WM_COMMAND: 
            switch (LOWORD(wParam)) 
            { 
                case IDOK: 
                    fRelative = IsDlgButtonChecked(hwndDlg, 
                        ID_ABSREL); 
                    iLine = GetDlgItemInt(hwndDlg, ID_LINE, 
                        &amp;fError, fRelative); 
                    if (fError) 
                    { 
                        MessageBox(hwndDlg, SZINVALIDNUMBER, 
                            SZGOTOERR, MB_OK); 
                        SendDlgItemMessage(hwndDlg, ID_LINE, 
                            EM_SETSEL, 0, -1L); 
                    } 
                    else 

                        // Notify the owner window to carry 
                        // out the command. 
 
                    return TRUE; 
 
                case IDCANCEL: 
                    DestroyWindow(hwndDlg); 
                    hwndGoto = NULL; 
                    return TRUE; 
            } 
    } 
    return FALSE; 
} 
 </code></pre>
<p>
In the preceding statements, the procedure processes the <a href="dlgboxes_4n1j.htm">WM_INITDIALOG</a> and <a href="editcon_8wh0.htm">WM_COMMAND</a> messages. During WM_INITDIALOG processing, the procedure initializes the check box by passing the current value of the global variable <i>fRelative</i> to <a href="buttons_5a5q.htm"><b>CheckDlgButton</b></a>. The procedure then returns TRUE to direct the system to set the default input focus. </p>
<p>
During WM_COMMAND processing, the procedure closes the dialog box only if the user chooses the Cancel button — that is, the button having the IDCANCEL identifier. The procedure must call <a href="windows_856f.htm"><b>DestroyWindow</b></a> to close a modeless dialog box. Notice that the procedure also sets the <i>hwndGoto</i> variable to NULL to ensure that other statements that depend on this variable operate correctly. </p>
<p>
If the user chooses the OK button, the procedure retrieves the current state of the check box and assigns it to the <i>fRelative</i> variable. It then uses the variable to retrieve the line number from the edit control. <a href="dlgboxes_454k.htm"><b>GetDlgItemInt</b></a> translates the text in the edit control into an integer. The value of <i>fRelative</i> determines whether the function interprets the number as a signed or unsigned value. If the edit control text is not a valid number, <b>GetDlgItemInt</b> sets the value of the <i>fError</i> variable to nonzero. The procedure checks this value to determine whether to display an error message or carry out the command. In the event of an error, the dialog box procedure sends a message to the edit control, directing it to select the text in the control so that the user can easily replace it. If <b>GetDlgItemInt</b> does not return an error, the procedure can either carry out the requested command itself or send a message to the owner window, directing it to carry out the command. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing a Window Procedure</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_designing_a_window_procedure"></a>Designing a Window Procedure</h2>
<p>
The following example shows the structure of a typical window procedure. The window procedure uses the message argument in a <b>switch</b> statement with individual messages handled by separate <b>case</b> statements. Notice that each case returns a specific value for each message. For messages that it does not process, the window procedure calls the <a href="winprocs_10o3.htm"><b>DefWindowProc</b></a> function. </p>
<pre><code>LRESULT CALLBACK MainWndProc(
    HWND hwnd,        // handle to window
    UINT uMsg,        // message identifier
    WPARAM wParam,    // first message parameter
    LPARAM lParam)    // second message parameter
{ 
 
    switch (uMsg) 
    { 
        case WM_CREATE: 
            // Initialize the window. 
            return 0; 
 
        case WM_PAINT: 
            // Paint the window's client area. 
            return 0; 
 
        case WM_SIZE: 
            // Set the size and position of the window. 
            return 0; 
 
        case WM_DESTROY: 
            // Clean up window-specific data objects. 
            return 0; 
 
        // 
        // Process other messages. 
        // 
 
        default: 
            return DefWindowProc(hwnd, uMsg, wParam, lParam); 
    } 
    return 0; 
} 
 </code></pre>
<p>
The <a href="windows_8fol.htm">WM_NCCREATE</a> messageis sent just after your window is created, but if an application responds to this message by returning FALSE, <a href="windows_1w6w.htm"><b>CreateWindowEx</b></a> function fails. The <a href="windows_41d1.htm">WM_CREATE</a> message is sent after your window is already created.</p>
<p>
The <a href="windows_414p.htm">WM_DESTROY</a> message is sent when your window is about to be destroyed. The <a href="windows_856f.htm"><b>DestroyWindow</b></a> function takes care of destroying any child windows of the window being destroyed. The <a href="windows_5ho9.htm">WM_NCDESTROY</a> message is sent just before a window is destroyed.</p>
<p>
At the very least, a window procedure should process the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_wm_paint">
</object><a href=JavaScript:alink_1.Click()>WM_PAINT</a> message to draw itself. Typically, it should handle mouse and keyboard messages as well. Consult the descriptions of individual messages to determine whether your window procedure should handle them. </p>
<p>
Your application can call the <a href="winprocs_10o3.htm"><b>DefWindowProc</b></a> function as part of the processing of a message. In such a case, the application can modify the message parameters before passing the message to <b>DefWindowProc</b>, or it can continue with the default processing after performing its own operations. </p>
<p>
A dialog box procedure receives a <a href="dlgboxes_4n1j.htm">WM_INITDIALOG</a> message instead of a <a href="windows_41d1.htm">WM_CREATE</a> message and does not pass unprocessed messages to the <a href="dlgboxes_1pgj.htm"><b>DefDlgProc</b></a> function. Otherwise, a dialog box procedure is exactly the same as a window procedure. </p>
<p>&nbsp;</p></body>
</HTML>

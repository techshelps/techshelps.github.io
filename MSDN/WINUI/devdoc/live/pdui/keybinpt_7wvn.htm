<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Keystroke Message Flags</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_keystroke_message_flags"></a>Keystroke Message Flags</h3>
<p>
The <i>lParam</i> parameter of a keystroke message contains additional information about the keystroke that generated the message. This information includes the repeat count, the scan code, the extended-key flag, the context code, the previous key-state flag, and the transition-state flag. The following illustration shows the locations of these flags and values in the <i>lParam</i> parameter. </p>
<p>
<img src="images/csinp_02.gif" border=0></p>
<p>
An application can use the following values to manipulate the keystroke flags.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=27%>Value</th>
<th align=left width=73%>Meaning</th>
</tr>
<tr valign=top>
<td width=27%>KF_ALTDOWN</td>
<td width=73%>Manipulates the alt key flag, which indicated if the alt key is pressed.</td>
</tr>
<tr valign=top>
<td width=27%>KF_DLGMODE</td>
<td width=73%>Manipulates the dialog mode flag, which indicates whether a dialog box is active.</td>
</tr>
<tr valign=top>
<td width=27%>KF_EXTENDED</td>
<td width=73%>Manipulates the extended key flag.</td>
</tr>
<tr valign=top>
<td width=27%>KF_MENUMODE</td>
<td width=73%>Manipulates the menu mode flag, which indicates whether a menu is active.</td>
</tr>
<tr valign=top>
<td width=27%>KF_REPEAT</td>
<td width=73%>Manipulates the repeat count.</td>
</tr>
<tr valign=top>
<td width=27%>KF_UP</td>
<td width=73%>Manipulates the transition state flag.</td>
</tr>
</table><br>
<h4>Repeat Count</h4>
<p>
You can check the repeat count to determine whether a keystroke message represents more than one keystroke. The system increments the count when the keyboard generates <a href="keybinpt_9l7y.htm">WM_KEYDOWN</a> or <a href="keybinpt_1yjy.htm">WM_SYSKEYDOWN</a> messages faster than an application can process them. This often occurs when the user holds down a key long enough to start the keyboard's automatic repeat feature. Instead of filling the system message queue with the resulting key-down messages, the system combines the messages into a single key down message and increments the repeat count. Releasing a key cannot start the automatic repeat feature, so the repeat count for <a href="keybinpt_45dc.htm">WM_KEYUP</a> and <a href="keybinpt_9upc.htm">WM_SYSKEYUP</a> messages is always set to 1. </p>
<h4>Scan Code</h4>
<p>
The scan code is the value that the keyboard hardware generates when the user presses a key. It is a device-dependent value that identifies the key pressed, as opposed to the character represented by the key. An application typically ignores scan codes. Instead, it uses the device-independent virtual-key codes to interpret keystroke messages. </p>
<h4>Extended-Key Flag</h4>
<p>
The extended-key flag indicates whether the keystroke message originated from one of the additional keys on the enhanced keyboard. The extended keys consist of the alt and ctrl keys on the right-hand side of the keyboard; the ins, del, home, end, page up, page down and arrow keys in the clusters to the left of the numeric keypad; the num lock key; the break (ctrl+pause) key; the print scrn key; and the divide (/) and enter keys in the numeric keypad. The extended-key flag is set if the key is an extended key. </p>
<h4>Context Code</h4>
<p>
The context code indicates whether the alt key was down when the keystroke message was generated. The code is 1 if the alt key was down and 0 if it was up. </p>
<h4>Previous Key-State Flag</h4>
<p>
The previous key-state flag indicates whether the key that generated the keystroke message was previously up or down. It is 1 if the key was previously down and 0 if the key was previously up. You can use this flag to identify keystroke messages generated by the keyboard's automatic repeat feature. This flag is set to 1 for <a href="keybinpt_9l7y.htm">WM_KEYDOWN</a> and <a href="keybinpt_1yjy.htm">WM_SYSKEYDOWN</a> keystroke messages generated by the automatic repeat feature. It is always set to 0 for <a href="keybinpt_45dc.htm">WM_KEYUP</a> and <a href="keybinpt_9upc.htm">WM_SYSKEYUP</a> messages. </p>
<h4>Transition-State Flag</h4>
<p>
The transition-state flag indicates whether pressing a key or releasing a key generated the keystroke message. This flag is always set to 0 for <a href="keybinpt_9l7y.htm">WM_KEYDOWN</a> and <a href="keybinpt_1yjy.htm">WM_SYSKEYDOWN</a> messages; it is always set to 1 for <a href="keybinpt_45dc.htm">WM_KEYUP</a> and <a href="keybinpt_9upc.htm">WM_SYSKEYUP</a> messages. </p>
<p>&nbsp;</p></body>
</HTML>

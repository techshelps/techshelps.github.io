<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Developer Studio Objects Through Dual Interfaces</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_controlling_developer_studio_objects_through_dual_interfaces"></a>Controlling Developer Studio Objects Through Dual Interfaces</h1>
<p>
<a href="_asug_home_page.3a_.developer_studio_add_ins.htm">Home Page (Add-ins)</a>  |&nbsp; <a href="_asug_overview.3a_.developer_studio_add.2d.ins.htm">Overview</a>  |&nbsp; <a href="_asug_how_do_i_......_topics.3a_.developer_studio_add.2d.ins.htm">How Do I ... Topics</a>  |&nbsp; <a href="_asug_frequently_asked_questions.3a_.developer_studio_add_ins.htm">FAQ</a>  |&nbsp; <a href="_asug_reference.3a_.developer_studio_add.2d.ins.htm">Reference</a></p>
<p>
Each Developer Studio object implements a dual interface through which you can control the object. Each object implements an <b>IDispatch</b> interface for Automation and a COM interface for direct access to object members (properties, methods, and events).</p>
<p>
The following table shows the dual interface used by each Developer Studio object.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>Object</b></td>
<td class=label width=59%><b>Dual interface</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_application_object.htm">Application</a> </td>
<td width=59%><b>Iapplication</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_breakpoint_object.htm">Breakpoint</a> </td>
<td width=59%><b>Ibreakpoint</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_breakpoints_object.htm">Breakpoints</a> </td>
<td width=59%><b>Ibreakpoints</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_buildproject_object.htm">BuildProject</a> </td>
<td width=59%><b>IbuildProject</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_configuration_object.htm">Configuration</a> </td>
<td width=59%><b>Iconfiguration</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_configurations_object.htm">Configurations</a> </td>
<td width=59%><b>Iconfigurations</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_debugger_object.htm">Debugger</a> </td>
<td width=59%><b>Idebugger</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_document_object.htm">Document</a> </td>
<td width=59%><b>IgenericDocument</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_documents_object.htm">Documents</a> </td>
<td width=59%><b>Idocuments</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_project_object.htm">Project</a> </td>
<td width=59%><b>IgenericProject</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_projects_object.htm">Projects</a> </td>
<td width=59%><b>Iprojects</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_textdocument_object.htm">TextDocument</a> </td>
<td width=59%><b>ItextDocument</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_textselection_object.htm">TextSelection</a> </td>
<td width=59%><b>ItextSelection</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_textwindow_object.htm">TextWindow</a> </td>
<td width=59%><b>ItextWindow</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_window_object.htm">Window</a> </td>
<td width=59%><b>IgenericWindow</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="_asug_windows_object.htm">Windows</a> </td>
<td width=59%><b>Iwindows</b></td>
</tr>
</table><br>
<p>
Add-ins written in Visual C++ versions 5.0 or later, or in Visual Basic versions 4.0 or later can employ early binding by using the COM interface. Early binding makes all calls into interface members faster at run time.</p>
<h2>Alternating Between Dual Interfaces</h2>
<p>
In Visual C++, you can switch from one dual interface to another by calling <b>QueryInterface</b>. For example, to switch from the COM <b>IGenericDocument</b> interface on a <a href="_asug_textdocument_object.htm">TextDocument</a> object to the COM <b>ITextDocument</b> interface, use the following code:</p>
<pre><code>IGenericDocument* pDoc;
pApplication-&gt;get_ActiveDocument(&amp;pDoc);
BSTR bstrType;
pDoc-&gt;get_Type(&amp;bstrType)
if (!wcscmp(bstrType, L"Text"))
{
   // It is a text document, 
   // ..so QI for the right interface
   ITextDocument* pTextDoc;
   pDoc-&gt;QueryInterface(IID_ITextDocument, &amp;pTextDoc)
   // Now, we can use text-specific
   //&nbsp;&nbsp; members of pTextDoc
   pTextDoc-&gt;Release();
}
SysFreeString(bstrType)
pDoc-&gt;Release();
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The ActiveX Template Library (ATL) provides smart COM pointers that can help you. See the <b>CComPtr</b> and <b>CComQIPtr</b> classes for details.</p>
<h2>Using Return Values from Dual Interfaces</h2>
<p>
If a property or method of a Developer Studio object returns a value of type T, then the corresponding dual interface method returns an <b>HRESULT</b> but accepts an additional argument of type "pointer to T" (or T*). This argument is at the end of the argument list. For example, if a property returns a value of type <b>Long</b>, then the corresponding dual interface method accepts an additional argument of type "pointer to <b>Long</b>" (or <b>Long*</b>).</p>
<p>
When the method returns, Developer Studio stores the return value where the last parameter points. For example, the <a href="_asug_close_method.htm">Close</a> method of the <b>ITextWindow</b> interface returns a <b>DsSaveStatus</b> value. The dual interface version of this method is declared as <code>HRESULT Close (VARIANT boolSaveChanges, DsSaveStatus* pSaved)</code>. The last parameter, which is declared as <b>DsSaveStatus</b>*, is where Developer Studio stores the return value.</p>
<p>
The Visual C++ code to do this looks like the following:</p>
<pre><code>DsSaveStatus saveStatus;
if (myTxtWindow-&gt;Close(VARIANT_TRUE, &amp;saveStatus) == S_OK)
{
   //code here could check the value of    //saveStatusreturned by Close
}
</code></pre>
<p>
If the function succeeds, the <b>HRESULT</b> returned by the dual interface method is a success code like S_OK. If the function fails, however, the function returns an error code instead. This error code has the same value as one thrown in a dispatch exception when you call the method through the dispatch interface.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The Developer Studio error codes are in the *defs.h header files, located in Microsoft Visual Studio\VC98\Include\ObjModel.</p>
<h2>Manipulating Properties of Objects Through Dual Interfaces</h2>
<p>
To get a property of an object, prepend "get_" to the property name. Alternatively, to set the property of an object, prepend "put_" to the property name.</p>
<p>
For example, to get the height of the <a href="_asug_application_object.htm">Application</a> object, prepend "get_" to the <a href="_asug_height_property.htm">Height</a> property, as shown in the following code:</p>
<pre><code>long nHeight;
if (pApp-&gt;get_Height(&amp;nHeight) == S_OK)
{
   //code here references the Height property through    //nHeight
}
</code></pre>
<p>
Alternatively, to set the value of the Height property to 40, you would use the following code:</p>
<pre><code>pApp-&gt;put_Height(40);</code></pre>
<h2>Calling Methods of Dual Interfaces</h2>
<p>
Some dual interface methods use parameters called "Reserved" of type <b>VARIANT</b>, and other methods use parameters that are optional. With VBScript macros or add-ins authored in Visual Basic, you can omit such parameters. However, with add-ins authored in Visual C++, you must use these parameters, you must pass a <b>VT_ERROR</b> <b>VARIANT</b> for each parameter, and you must specify the scode of the <b>VARIANT</b> as <b>DISP_E_PARAMNOTFOUND</b>.</p>
<p>
For example, with MFC you can call the <a href="_asug_addtoolsettings_method.htm">AddToolSettings</a> method of the <a href="_asug_configuration_object.htm">Configuration</a> object by using the following code:</p>
<pre><code>COleVariant var(0L,VT_ERROR);
var.scode=DISP_E_PARAMNOTFOUND;
pConfig-&gt;AddToolSettings(bszTool, bszSettings, var);
</code></pre>
<p>
Some interfaces have methods called "Reserved1," "Reserved2," and so on. Do not use these methods.</p>
</FONT></BODY>
</HTML>

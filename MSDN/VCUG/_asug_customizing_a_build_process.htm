<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Customizing a Build Process</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_customizing_a_build_process"></a>Customizing a Build Process</h1>
<p>
<a href="_asug_home_page.3a_.working_with_projects.htm">Home Page (Projects)</a>  |&nbsp; <a href="_asug_overview.3a_.working_with_projects.htm">Overviews</a>  |&nbsp; <a href="_asug_how_do_i......_topics.3a_.working_with_projects.htm">How Do I... Topics</a>  |&nbsp; <a href="_asug_overview.3a_.nmake_reference.htm">NMAKE Reference</a></p>
<p>
You can specify custom build rules for use with any project or with any individual files that do not already have a rule associated with them. These rules then process the files at the appropriate point in the build if the output file is out of date with respect to the input file. </p>
<p>
For example, you can add an .l file to your project, specify a lexical analyzer to process the file and produce a .y output file, and then specify a parser generator to process that file to create a source-code file. You could also select the output file for a configuration, to copy it to a specific directory for testing. Microsoft Visual C++ provides a number of <a href="_asug_macros_for_custom_build_commands.htm">macros</a> for use in these commands.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;By default, a number of file types have tools associated with them, such as .c or .cpp files in Visual C++. To specify a custom rule for these files, you must select the <b>Always use custom build step</b> check box on the <b>General</b> tab of the <b>Project Settings</b> dialog box.</p>
<p>
The custom rules run only on files in builds of the configurations in which you selected the files. That is, if your file set includes an .l file, and you select it only in one configuration, the rules that you specify run only in that configuration.</p>
<p>
For example, assume that you want to include in your project a file named MYLEXINF.L. You first want a lexical analyzer to process MYLEXINF.L to produce a .C file with the same base name (MYLEXINF.C). First, you add MYLEXINF.L and MYLEXINF.C to your project using the <b>Files into Project</b> command on the <b>Insert</b> menu. (If you have not already created a version of MYLEXINF.C, Microsoft Visual C++ recognizes that and asks if you want to add a reference to the file anyway.) You then click the <b>Settings</b> command on the <b>Project</b> menu, and select MYLEXINF.L in the appropriate configuration. Next, select the <b>Custom Build</b> tab, and type commands similar to the following in the <b>Build Command(s)</b> list:</p>
<pre><code>lexer $(InputPath) $(ProjDir)\$(InputName).c
</code></pre>
<p>
This puts the lexical analyzer source MYLEXINF.C, in the project directory.</p>
<p>
In the <b>Output File(s)</b> list, type <code>$(ProjDir)\$(InputName).C</code>. When you build this project, the build system checks the date of MYLEXINF.C. If its date is earlier than MYLEXINF.L, the build system runs these custom commands to rebuild MYLEXINF.C.</p>
<h3>What do you want to know more about?</h3>
<p>
<a href="_asug_when_do_custom_build_rules_run.htm">When custom build rules run</a></p>
<p>
<a href="_asug_macros_for_custom_build_commands.htm">Macros for custom build commands</a></p>
<h3>What do you want to do?</h3>
<p>
<a href="_asug_specifying_custom_build_tools.htm">Specify custom build rules</a></p>
<p>
<a href="_asug_selecting_the_directories_for_output_files.htm">Select the directories for the output files</a></p>
<p>
<a href="_asug_specifying_input_dependencies.htm">Specify input dependencies</a></p>
<p>
<a href="_asug_specify_prelink_build_rules.htm">Specify build rules that run before the link process</a></p>
<p>
<a href="_asug_specify_postbuild_build_rules.htm">Specify build rules that run after the build process</a></p>
</FONT></BODY>
</HTML>

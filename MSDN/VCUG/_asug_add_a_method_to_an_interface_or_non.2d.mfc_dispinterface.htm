<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Method to an Interface or Non-MFC Dispinterface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_add_a_method_to_an_interface_or_non.2d.mfc_dispinterface"></a><sup></sup>Adding a Method to an Interface or Non-MFC Dispinterface</h1>
<p>
<a href="_asug_overview.3a_.working_with_com_interfaces.htm">Overview</a>  |&nbsp; <a href="_asug_how_do_i_......_topics.3a_.working_with_com_interfaces.htm">How Do I ... Topics</a></p>
<p>
When you use the <b>Add Method</b> dialog box to define a new method for an ATL or user-defined interface, ClassView defines two default method attributes for you: <b>id</b> and <b>helpstring</b>. The <b>id</b> attribute assigns a <b>DISPID</b>. The <b>helpstring</b> is a placeholder for text that can be used in the interface, for example in a status bar or ToolTip.</p>
<p class=label>
<b>To add a method to an interface or non-MFC dispinterface</b>
<ol>
<li>
First save the .idl file for the class.<p class=tl>
This enables the parser to correctly identify the location of all elements in the file.</P></li>
<li>
In ClassView, rest your cursor on the interface or dispinterface and click the right mouse button to invoke the shortcut menu.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For ATL classes, the dispinterface (event source interface) is identified with the name <i>I&lt;MyObject&gt;Events</i>.</p></li>
<li>
Click <b>Add Method</b>.<br><br></li>
<li>
If you want to change the return type for a custom interface, select from the <b>Return Type</b> list.<p class=tl>
For dual interfaces, the return type is always <b>HRESULT</b>. </P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<b>HRESULT </b>is the recommended return type, even for custom interfaces, since it provides a standard way to return error codes.</p></li>
<li>
In the <b>Method Name</b> box, type a name for this method (do not include a semi-colon or parentheses).<p class=tl>
The <b>Implementation </b>area reflects the default <b>id</b> and <b>helpstring</b> attributes, and the method return type.</P></li>
<li>
In the <b>Parameters</b> box, enter any parameters, separated by a comma, that you want defined for this method.<p class=tl>
The <b>Implementation</b> area reflects the parameters you enter here.</P></li>
<li>
Click the <b>Attributes </b>button to specify additional method attributes, or to modify the default attributes.<br><br></li>
<li>
In the <b>Edit Attributes</b> dialog box, for every attribute you wish to define:<ul type=disc>
<li>
Select an attribute from the <b>Name</b> list.<br><br></li>
<li>
Specify its value (if any) by typing it into the <b>Value</b> text box. <p class=tl>
Only four attributes take a value: <b>id</b>, <b>call_as, helpstring</b>, and <b>helpcontext</b>. For more information, see the <a href="_asug_attribute_definition_table.htm">Attributes Definition Table</a>.</P></li>
</ul>
</li>
<li>
Click <b>OK </b>to return to the <b>Add Method</b> dialog box.<p class=tl>
The <b>Implementation </b>area now displays any attributes you have just specified. You can continue to add, delete, or modify attributes by returning to the <b>Edit Attribute</b>s dialog box, until you close the <b>Add Method</b> dialog box.</P></li>
<li>
When you are satisfied with the method definition, click <b>OK </b>to exit the <b>Add Method</b> dialog box.</li>
</ol>
<p>
The method is immediately visible as an icon in ClassView, under the interface where it is defined. </p>
<p>
<img src="vc39rb1.gif" border=0></p>
<p>
By double-clicking the method icon, you can examine the .idl or .odl file to see the new method definition. </p>
<p>
For ATL interfaces, a stub method implementation is added to the .cpp file, and a reference to the method is added to the .h file. For ATL dispinterfaces (event source interfaces), the stub functions are added to the &lt;ObjectName&gt;cp.h file that gets created when you implement a connection point for the object. (You must first compile the .idl file.) For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_atl_Adding_Connection_Points_to_an_Object">
</object><a href=JavaScript:alink_1.Click()>Adding Connection Points to an Object</a>.</p>
<h3>What do you want to do?</h3>
<p>
<a href="_asug_add_a_method_to_an_mfc_dispinterface.htm">Add a method to an MFC dispinterface</a></p>
<p>
<a href="_asug_add_a_property_to_an_interface_or_non.2d.mfc_dispinterface.htm">Add a property to an interface or non-MFC dispinterface</a></p>
<p>
<a href="_asug_add_a_method.2c_.property_or_event_to_an_mfc_activex_control.htm">Add a method, property, or event to an MFC ActiveX control</a></p>
</FONT></BODY>
</HTML>

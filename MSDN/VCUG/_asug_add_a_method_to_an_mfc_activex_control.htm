<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Method to an MFC ActiveX Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_add_a_method_to_an_mfc_activex_control"></a>Adding a Method to an MFC ActiveX Control</h1>
<p>
<a href="_asug_overview.3a_.working_with_com_interfaces.htm">Overview</a>  |&nbsp; <a href="_asug_how_do_i_......_topics.3a_.working_with_com_interfaces.htm">How Do I ... Topics</a></p>
<p>
You can define new methods for MFC-based ActiveX control interfaces. When defining methods for control interfaces, you can create your own method, choose from a list of stock methods for the control, or customize a stock method. When you choose a stock method without customizing it, Visual C++ creates a definition for the method in the .odl file, but does not generate any implementation code in your class (.cpp or .h) files.</p>
<p class=label>
<b>To add a method to an MFC ActiveX control</b>
<ol>
<li>
Open the <b>Add Method </b>dialog box in one of the following ways:<ul type=disc>
<li>
In ClassView, rest your cursor on the interface, and click the right mouse button to invoke the shortcut menu, then choose <b>Add Method</b>.<br><br></li>
<li>
In ClassWizard, for an automation-enabled class, select the <b>Automation </b>tab, then click the <b>Add Method</b> button.</li>
</ul>
</li>
<li>
In the <b>External name</b> list box, enter the name you want to use to identify this method to automation clients, or choose from the list of available stock events.<p class=tl>
To create your own method, type in a unique name. If you choose from the list, you can either use the stock implementation or customize it. The name you specify here is reflected in the <b>Internal name</b> box. </P></li>
<li>
If you are creating a new method, or customizing a stock method and would like to specify a distinct internal name for the member function that will send the method, type it into the <b>Internal name</b> box. <p class=tl>
The <b>Internal name</b> box is not available for stock implementations of stock methods.</P></li>
<li>
If applicable, select a return type from the drop-down list.<p class=tl>
You cannot alter the return type for stock methods.</P></li>
<li>
For methods you are defining, use the <b>Parameter</b> list to specify any parameters you want the method to take. For each parameter you wish to define: <ul type=disc>
<li>
Enter a name for the parameter in the <b>Name </b>box.<br><br></li>
<li>
Choose a valid type from the <b>Type </b>list.</li>
</ul>
</li>
<li>
When you are satisfied with the method as you’ve defined it, click <b>OK </b>to exit the <b>Add Method</b> dialog box.</li>
</ol>
<p>
The new method is displayed as an icon in ClassView under the dispinterface where it is defined. For custom methods, or stock methods with custom implementations, it is also displayed under the class that implements it. You can double-click the icon under the dispinterface to jump to the .odl file, and you can double-click the icon under the class to jump to the .cpp file.</p>
</FONT></BODY>
</HTML>

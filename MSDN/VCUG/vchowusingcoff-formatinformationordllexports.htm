<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using COFF-Format Information or DLL Exports</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="vchowusingcoff-formatinformationordllexports"></a>Using COFF-Format Information or DLL Exports</h1>
<p>
The Visual C++ debugger uses CodeView-format debug information. If CodeView-format information is not available, Visual C++ can use two additional types of information:
<ul type=disc>
<li>
COFF-format debugging information<br><br></li>
<li>
DLL export tables</li>
</ul>
<p>
COFF is a format used by some other debuggers. You can find COFF-format information in the MSVBVM50.DBG file shipped provided with Visual Basic 5.01, for example.</p>
<p>
Reading symbolic information from DLL export tables can be useful if you are working with Windows 95 system DLLs, Windows messages, Windows procedures (<b>WindowProc</b>s), COM objects, or marshalling.</p>
<p>
Reading COFF and DLL export information entails some overhead, so this capability is turned off by default.</p>
<p class=label>
<b><a name="_asug_to_use_coff_format_information_or_dll_exports"></a>To use COFF-format information or DLL exports</b>
<ol>
<li>
On the <b>Tools </b>menu, click <b>Options</b>.<br><br></li>
<li>
The <b>Options</b> dialog appears. Select the <b>Debug</b> tab.<br><br></li>
<li>
Select the <b>Load</b> <b>COFF &amp; Exports</b> check box.<p class=tl>
The calls are listed in the calling order, with the current function (the most deeply nested) at the top.</P></li>
</ol>
<p>
To see whether a DBG file contains CodeView- or COFF-format information, use <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_dumpbin_.2f.HEADERS">
</object><a href=JavaScript:alink_1.Click()>dumpbin /headers</a>. Look in the Debug Directories section of the output file for COFF (<code>coff</code>) or CodeView (<code>cv</code>) entries.</p>
<p>
To see what symbols are available in the export table of a DLL, use <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_dumpbin_.2f.EXPORTS">
</object><a href=JavaScript:alink_2.Click()>dumpbin /exports</a>. Symbols are available for any 32-bit system DLLs. By reading the <b>dumpbin /exports</b> output, you can see the exact function name, including non-alphanumeric characters. This is useful for setting a breakpoint on a function. Function names from DLL export tables may appear truncated elsewhere in the debugger.</p>
</FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Automating Developer Studio Tasks from Other Applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_automating_developer_studio_tasks_from_other_applications"></a>Automating Tasks from Other Applications</h1>
<p>
With Automation, you can control the Visual C++ environment from other applications such as Word, Excel, or Visual Basic. You can start Visual C++, automate tasks, and then stop Visual C++ when the tasks are finished.</p>
<h2>Starting Developer Studio (the Visual C++ Environment)</h2>
<p>
To start Developer Studio from another application, create an instance of the Developer Studio <a href="_asug_application_object.htm">Application</a> object. For example, to start Developer Studio from Visual Basic or Visual Basic for Applications, use the following code:</p>
<pre><code>Dim app as Application
Set app = CreateObject("MSDev.Application")
</code></pre>
<p>
When Developer Studio starts, it will be invisible, unless you make it visible by using the <a href="_asug_visible_property.htm">Visible</a> property of the <b>Application</b> object:</p>
<pre><code>Dim app as Application
Set app = CreateObject("MSDev.Application")
app.Visible = True
</code></pre>
<p>
If Developer Studio is already running, you can use that instance of it instead of creating another one. For example, to use the current instance of Developer Studio from Visual Basic or Visual Basic for Applications, use the following code:</p>
<pre><code>Dim app as Application
Set app = GetObject(,"MSDev.Application")
</code></pre>
<h2>Automating Tasks in Developer Studio</h2>
<p>
After starting Developer Studio, you can automate tasks in it by using the appropriate code. For example, in the following code, the comment indicates where to insert code for automating tasks:</p>
<pre><code>Dim app as Application
Set app = CreateObject("MSDev.Application")
app.Visible = True
' Insert code for automating tasks here.
</code></pre>
<h2>Stopping Developer Studio</h2>
<p>
After completing your Developer Studio tasks, you can stop Developer Studio by quitting the application and releasing all references to the <b>Application</b> object.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you use Visual Basic to automate Developer Studio, Visual Basic automatically releases all references to the <b>Application</b> object.</p>
<p>
To quit Developer Studio, use the <b>Exit</b> command on the <b>File</b> menu or the <a href="_asug_quit_method.htm">Quit</a> method of the <b>Application</b> object. If you use the <b>Quit</b> method, however, you must use it before you release its reference to the <b>Application</b> object.</p>
<p>
For example, the following code shows how to use the <b>Quit</b> method.</p>
<pre><code>Dim app as Application
Set app = CreateObject("MSDev.Application")
app.Visible = True
' Insert code for automating tasks here.
app.Quit
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the user tries to stop Developer Studio while your program is controlling it, Developer Studio will remain in memory but the user interface will become invisible. Subsequently, if you try to access Developer Studio objects, Developer Studio will return errors. If this happens, release all references to the <b>Application</b> object so that Developer Studio can quit.</p>
</FONT></BODY>
</HTML>

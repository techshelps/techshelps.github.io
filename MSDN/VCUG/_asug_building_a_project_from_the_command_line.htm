<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building a Project from the Command Line</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_building_a_project_from_the_command_line"></a>Building a Project from the Command Line</h1>
<p>
You can build a Visual C++ project from the command line without first exporting a makefile (MAKEFILE, or <i>filename</i>.mak) and using the NMAKE utility. </p>
<p>
The basic command syntax is</p>
<p>
<b>msdev</b> <i>FileName</i> [/MAKE "<i>ProjectName</i> – C<i>onfigName | ALL</i>"] [/REBUILD /CLEAN /NORECURSE /OUT<i> LogFile</i> /USEENV]</p>
<p>
where <i>FileName</i> is the name of your project (.dsp) or workspace (.dsw) file. </p>
<p>
For example, the following syntax deletes all intermediate files and then builds a project called MyProject:</p>
<pre><code>msdev MyProject.dsp /MAKE "MyProject – Win32 Debug" /REBUILD
</code></pre>
<p>
The following syntax builds a workspace that contains (at least) two projects, building the release configuration of MyProject1 and all configurations of MyProject2, and directing the build output to a file called MyWorkspace.log:</p>
<pre><code>msdev MyWorkspace.dsw /MAKE "MyProject1 – Win32 Release" "MyProject2 – ALL" /OUT MyWorkspace.log
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Projects created in Visual C++ versions earlier than 5.0 must first be converted before you can build them from the command line. To convert a project, open it inside the development environment.</p>
<p>
You can also build all configurations of a certain type within a single project, for example, if you have defined multiple types of Debug configurations. For more information, see "<a href="#_asug_building_by_type_of_configuration">Building by Type of Configuration</a>."</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Type <code>msdev /? /OUT </code><i>FileName</i> to pipe the command syntax to a file. </p>
<h4>The /MAKE Option</h4>
<p>
The /REBUILD, /CLEAN and /NORECURSE options all modify the /MAKE option, and are meaningless without it. Also, unless you specify a <i>FileName</i> after <b>msdev</b>, any /MAKE options will be ignored. /MAKE requires at least one configuration.</p>
<h2>Parameters</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=50%><b>Parameter</b></td>
<td width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><i>FileName</i></td>
<td width=50%>A valid workspace or project filename. Must have an extension of .dsp or .dsw.</td>
</tr>
<tr valign=top>
<td width=50%><i>ProjectName</i></td>
<td width=50%>The project that contains the configurations you want to build. If <i>Filename</i> is a workspace file, <i>ProjectName</i> must be a part of that workspace.</td>
</tr>
<tr valign=top>
<td width=50%><i>ConfigName</i></td>
<td width=50%>Any valid project configuration, or all configurations for a particular project. To build all configurations, simply type "ALL" for the configuration value (must be uppercase). Corresponds to the choices available from the <b>Settings For</b> drop-down list in the <b>Project Settings</b> dialog box. </td>
</tr>
<tr valign=top>
<td width=50%><i>LogFile</i></td>
<td width=50%>Name of an optional file used to store the build output information (valid only with the /OUT<b> </b>option). </td>
</tr>
</table><br>
<h2>Options</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=50%><b>Option</b></td>
<td width=50%><b>Operation</b></td>
</tr>
<tr valign=top>
<td width=50%>/MAKE<b> </b><i>"projectname1 – configuration1 | projectname1 – configuration2 | projectname2 – configuration1 | ALL"</i></td>
<td width=50%>Builds the specified configurations. The /CLEAN option modifies /MAKE so that the specified configurations are cleaned rather than built. </td>
</tr>
<tr valign=top>
<td width=50%>/?</td>
<td width=50%>Displays usage information for the <b>msdev</b> command.</td>
</tr>
<tr valign=top>
<td width=50%>/CLEAN</td>
<td width=50%>Deletes intermediate files created during the build process for the specified configuration(s); does not build the project configuration(s). </td>
</tr>
<tr valign=top>
<td width=50%>/REBUILD</td>
<td width=50%>Cleans and builds the specified configuration(s), including all dependent projects. Takes precedence if both /CLEAN and /REBUILD are specified.</td>
</tr>
<tr valign=top>
<td width=50%>/NORECURSE</td>
<td width=50%>Builds the specified project configuration(s) without building any dependent projects.</td>
</tr>
<tr valign=top>
<td width=50%>/OUT <i>logfile</i></td>
<td width=50%>Creates a log file for the build output, which includes such information as syntax errors and warnings. If you don't specify a filename, the build output information is displayed at the command prompt and is not saved to a file. </td>
</tr>
<tr valign=top>
<td width=50%>/USEENV</td>
<td width=50%>Directs the build system to use environment variables for the current build session, rather than the directory settings specified on the <b>Directories</b> tab (<b>Tools</b> menu, <b>Options</b> command). The PATH, INCLUDE and LIB paths must be set correctly for the build to succeed when /USEENV is specified.</td>
</tr>
<tr valign=top>
<td width=50%>/EX <i>MacroName</i></td>
<td width=50%>Invokes the named macro (if the associated .dsm file is not loaded, this command will fail).</td>
</tr>
</table><br>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Type<code> msdev /USEENV</code> at the command line to launch Visual C++ and use the environment variables for the duration of that IDE session.</p>
<h2><a name="_asug_building_by_type_of_configuration"></a>Building by Type of Configuration</h2>
<p>
For any single project, you can build all configurations of a certain type. The build system uses limited pattern matching to recognize the name of the configuration you specify. </p>
<p>
For example, if your project contains Debug and Release configurations for both regular and UNICODE applications, you can build both configurations for only the UNICODE application by issuing the following command:</p>
<pre><code>msdev MyProject.dsp /MAKE "MyProject – UNICODE" 
</code></pre>
<p>
Or, if your project contains several types of Debug and Release configurations, you can build all of the Debug configurations:</p>
<pre><code>msdev MyProject.dsp /MAKE "MyProject – DEBUG" 
</code></pre>
<p>
This pattern matching gives you even more flexibility when customizing your batch builds.</p>
</FONT></BODY>
</HTML>

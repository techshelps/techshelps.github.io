<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_windows_object"></a>Windows Object</h1>
<p>
<a href="_asug_home_page.3a_.developer_studio_objects.htm">Home Page (Objects)</a>  |&nbsp; <a href="_asug_overview.3a_.developer_studio_objects.htm">Overview</a>  |&nbsp; <a href="_asug_frequently_asked_questions.3a_.developer_studio_objects.htm">FAQ</a>  |&nbsp; <a href="_asug_reference.3a_.developer_studio_objects.htm">Reference</a></p>
<p>
The <b>Windows</b> object represents a collection of open windows. This collection can represent all windows open in Developer Studio or only windows open on a document. For example, if you access the <b>Windows</b> object by using the <a href="_asug_windows_property.htm">Windows</a> property of the <a href="_asug_application_object.htm">Application</a> object, the collection represents all windows open in Developer Studio. However, if a document is open and you use the <b>Windows</b> property of the <a href="_asug_document_object.htm">Document</a> object, the collection represents only windows open on the document.</p>
<p>
The <b>Windows</b> object has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Properties</b></td>
<td class=label width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="_asug_application_property.htm">Application</a> </td>
<td width=50%><a href="_asug_newenum_property.htm">_NewEnum</a> </td>
</tr>
<tr valign=top>
<td width=50%><a href="_asug_count_property.htm">Count</a> </td>
<td width=50%><a href="_asug_parent_property.htm">Parent</a> </td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Methods</b></td>
<td class=label width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="_asug_arrange_method.htm">Arrange</a> </td>
<td width=50%><a href="_asug_item_method.htm">Item</a> </td>
</tr>
<tr valign=top>
<td width=50%><a href="_asug_closeall_method.htm">CloseAll</a> </td>
<td width=50%></td>
</tr>
</table><br>
<p>
The <b>Windows</b> object is a collection object that contains all <a href="_asug_window_object.htm">Window</a> objects. To find a particular object, iterate through the collection by using <b>For Each ... Next</b> in a VBScript <a href="_asug_overview.3a_.vbscript_macros.htm">macro</a>.</p>
<p>
Consider the following code snippet:</p>
<pre><code>Dim myWindow
For Each myWindow in Application.Windows
 &nbsp; ' Access myWindow here.
 &nbsp; ' For example:
 &nbsp;&nbsp; MsgBox myWindow.Caption
Next
</code></pre>
<p>
In Visual C++, you can iterate through the <b>Windows</b> collection by using the <a href="_asug_item_method.htm">Item</a> method or <a href="_asug_newenum_property.htm">_NewEnum</a> property.</p>
<p>
When you reference the <b>Windows</b> collection, the reference always reflects the current contents of the collection. For example, suppose you have two macros (A and B). In macro A, you set a global variable to the collection, and in macro B you use the variable. When you use it, the variable will reflect the current contents of the collection — not the contents present when you set the variable.</p>
<p class=label>
<b>Using a Dual Interface to Access This Object</b></p>
<p>
This section about dual interfaces is useful for writing add-ins or automating Developer Studio across processes. This section is not applicable to writing VBScript macros.</p>
<p>
The <b>Windows</b> object implements the <b>IWindows</b> dual interface. Through this interface, <a href="_asug_overview.3a_.developer_studio_add.2d.ins.htm">add-ins</a> can directly access the members (properties, methods, and events) of this object and can employ early binding to make calls into these members faster at run time.</p>
<p>
Add-ins written in Visual C++ can access members of the <b>Windows</b> object by using the header files in Vc98\Include\objmodel. However, if you use the Developer Studio Add-in Wizard to create an add-in, the wizard automatically includes these header files in your source code.</p>
<p>
The following table shows the header files you need for the <b>Windows</b> object:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Header file</b></td>
<td class=label width=83%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=17%>appauto.h</td>
<td width=83%>Declares the dual interfaces.</td>
</tr>
<tr valign=top>
<td width=17%>appguid.h</td>
<td width=83%>Declares the GUIDs used to identify the interfaces.</td>
</tr>
<tr valign=top>
<td width=17%>appdefs.h</td>
<td width=83%>Declares additional information needed to use the interfaces, such as error IDs and enumerated constants.</td>
</tr>
</table><br>
<p>
Add-ins written in Visual Basic can access members of the <b>Windows</b> object by using the Visual Studio '97 Shared Objects type library, located in Msdev98\bin\devshl.dll.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual Studio '97 Shared Objects is the name that appears in the <b>Visual Basic References</b> dialog box.</p>
</FONT></BODY>
</HTML>

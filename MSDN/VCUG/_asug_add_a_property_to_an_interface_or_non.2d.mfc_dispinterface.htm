<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Property to an Interface or Non-MFC Dispinterface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_add_a_property_to_an_interface_or_non.2d.mfc_dispinterface"></a>Adding a Property to an Interface or Non-MFC Dispinterface</h1>
<p>
<a href="_asug_overview.3a_.working_with_com_interfaces.htm">Overview</a>  |&nbsp; <a href="_asug_how_do_i_......_topics.3a_.working_with_com_interfaces.htm">How Do I ... Topics</a></p>
<p>
When you use the <b>Add Property</b> dialog box to define a new property for an ATL, Java, or user-defined interface, ClassView defines two default attributes for you: <b>id</b> and <b>helpstring</b>. The <b>id </b>attribute assigns a <b>DISPID</b>. The <b>helpstring </b>is a placeholder for text that can be used in the interface, for example in a status bar or ToolTip.</p>
<p class=label>
<b>To add a property to an interface or non-MFC dispinterface</b>
<ol>
<li>
First save the .idl file for the class.<p class=tl>
This enables the parser to correctly identify the location of all elements in the file.</P></li>
<li>
In ClassView, rest your cursor on the interface or dispinterface and click the right mouse button to invoke the shortcut menu.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For ATL classes, the dispinterface (event source interface) is identified with the name <i>I&lt;MyObject&gt;Events</i>.</p></li>
<li>
Click <b>Add Property</b>.<br><br></li>
<li>
Select the return type and property type for the property.<p class=tl>
For dual interfaces and dispinterfaces, accept the default return type of <b>HRESULT</b>. Use the property type to pass a value by means of the parameter list rather than the return type. </P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<b>HRESULT</b> is the recommended return type, even for custom interfaces, since it provides a standard way to return error codes. </p></li>
<li>
Enter the name and any parameters for this property.<p class=tl>
The <b>Implementation</b> area displays the options you’ve specified so far, in addition to the default <b>id </b>and <b>helpstring </b>attributes.</P></li>
<li>
In the <b>Function Type</b> area, select the options you want:<ul type=disc>
<li>
To make the property read-only, clear the <b>Put Function</b> check box. <br><br></li>
<li>
For objects that have large initialization overhead, you may want to select the <b>PropPutRef</b> option. This returns a reference to the object, while the more common <b>PropPut</b> option returns a copy of the object itself.</li>
</ul>
<p class=tl>
Any attributes you define for this property (see step 7) will be applied to the <b>Get </b>and <b>Put </b>functions specified here. </P></li>
<li>
Click the <b>Attributes </b>button to specify additional attributes for this property or to modify the default attributes.<br><br></li>
<li>
For every attribute you wish to define:<ul type=disc>
<li>
Select the attribute from the <b>Name </b>list box.<br><br></li>
<li>
Specify its value (if any) by typing it into the <b>Value </b>text box. <p class=tl>
Only four attributes take a value: <b>id</b>, <b>call_as, helpstring</b>, and <b>helpcontext</b>. </P></li>
</ul>
<p class=tl>
For a description of the attributes available from the list, see the <a href="_asug_attribute_definition_table.htm">Attribute Definition Table</a>.</P></li>
<li>
Click <b>OK </b>to return to the <b>Add Property</b> dialog box.<p class=tl>
The Implementation area reflects the attributes you have just specified. You can continue to add, delete, or modify attributes by returning to the <b>Edit Attributes</b> dialog box, until you exit the <b>Add Property</b>  dialog box.</P></li>
<li>
When you are satisfied with the method definition, click <b>OK </b>to exit the <b>Add Property</b> dialog box.</li>
</ol>
<p>
The property in its <b>Get </b>and <b>Put </b>variants is now visible as an icon in ClassView, under the interface where it is defined. You can double-click the icon to view the new property declaration in the .idl or .odl file. </p>
<p>
For ATL interfaces, stub <b>Get </b>and <b>Put </b>functions are added to the .cpp file, and references to these functions are added to the .h file. </p>
<p>
For ATL dispinterfaces (event source interfaces), the stub functions are added to the &lt;ObjectName&gt;cp.h file that gets created when you implement a connection point for the object. (You must first compile the .idl file.) For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_atl_Adding_Connection_Points_to_an_Object">
</object><a href=JavaScript:alink_1.Click()>Adding Connection Points to an Object</a>.</p>
<p>
<img src="vc39rd1.gif" border=0></p>
</FONT></BODY>
</HTML>

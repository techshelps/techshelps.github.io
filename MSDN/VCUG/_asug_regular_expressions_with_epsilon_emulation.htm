<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Regular Expressions With Epsilon Emulation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_regular_expressions_with_epsilon_emulation"></a>Regular Expressions with Epsilon Emulation</h1>
<p>
<a href="_asug_home_page.3a_text_editor.htm">Home Page (Text Editor)</a>  |&nbsp; <a href="_asug_overviews.3a_.text_editor.htm">Overview</a>  |&nbsp; <a href="_asug_how_do_i_......_topics.3a_.text_editor.htm">How Do I ... Topics</a>  |&nbsp; <a href="_asug_frequently_asked_questions.3a_.text_editor.htm">FAQ</a>  |&nbsp; <a href="_asug_epsilon_emulation_command_map.htm">Reference</a></p>
<p>
<code>.</code><br>
Any single character.</p>
<p>
<code>[ ]</code><br>
Any one of the characters contained in the brackets, or any of an ASCII range of characters separated by a hyphen (-). For example, <code>b(aeiou)d</code> matches <code>bad</code>, <code>bed</code>, <code>bid</code>, <code>bod</code>, and <code>bud</code>, and <code>r(eo)+d</code> matches <code>red</code>, <code>rod</code>, <code>reed</code>, and <code>rood</code>, but not <code>reod</code> or <code>roed</code>. For numbers, <code>x(0-9)</code> matches <code>x0</code>, <code>x1</code>, <code>x2</code>, and so on. If the first character in the brackets is a caret (^), then the regular expression matches any characters except those in the brackets.</p>
<p>
<code>^</code><br>
The beginning of a line.</p>
<p>
<code>$</code><br>
The end of a line.</p>
<p>
<code>( )</code><br>
Indicates a tagged expression to retain for replacement purposes. If the expression in the <b>Find What</b> text box is <code>(lpsz)BigPointer</code>, and the expression in the <b>Replace With</b> box is <code>#1NewPointer</code>, all selected occurrences of <code>lpszBigPointer</code> are replaced with <code>lpszNewPointer</code>. Each occurrence of a tagged expression is numbered according to its order in the <b>Find What</b> text box, and its replacement expression is #n, where 1 corresponds to the first tagged expression, 2 to the second, and so on. You can have up to nine tagged expressions.</p>
<p>
<code>~<br>
</code>Not the following character. For example, <code>b~ad</code> matches <code>bbd</code>, <code>bcd</code>, <code>bdd</code>, and so on, but not <code>bad</code>.</p>
<p>
<code>(c|c)<br>
</code>Any one of the characters separated by the alternation symbol (|). For example, <code>(j|u)+fruit</code> finds <code>jfruit</code>, <code>jjfruit</code>, <code>ufruit</code>, <code>ujfruit</code>, <code>uufruit</code>, and so on.</p>
<p>
<code>*</code><br>
None or more of the preceding characters or expressions. For example, <code>ba*c</code> matches <code>bc</code>, <code>bac</code>, <code>baac</code>, <code>baaac</code>, and so on.</p>
<p>
<code>+</code><br>
At least one or more of the preceding characters or expressions. For example, <code>ba+c</code> matches <code>bac</code>, <code>baac</code>, and <code>baaac</code>, but not <code>bc</code>.</p>
<p>
<code>[^]</code><br>
Any character except those following the caret (^) in the brackets, or any of an ASCII range of characters separated by a hyphen (-). For example, <code>x[^0-9]</code> matches <code>xa</code>, <code>xb</code>, <code>xc</code>, and so on, but not <code>x0</code>, <code>x1</code>, <code>x2</code>, and so on.</p>
<p>
<code>[a-zA-Z0-9]</code><br>
Any single alphanumeric character.</p>
<p>
<code>[&lt;tab&gt;]+</code><br>
Any white-space character.</p>
<p>
<code>[a-zA-Z]</code><br>
Any single alphabetic character.</p>
<p>
<code>{0-9]</code><br>
Any decimal digit.</p>
<p>
<code>[0-9a-fA-F]+</code><br>
Any hexadecimal number.</p>
<p>
<code>([0-9]+.[0-9]*|[0-9]*.[0-9]+|[0-9]+)</code><br>
Any unsigned number. For example,<br>
<code>([0-9]+.[0-9]*|[0-9]*.[0-9]+|[0-9]+)</code> should match <code>123</code>, <code>.45</code>, and <code>123.45</code>.</p>
<p>
<code>[0-9]+</code><br>
Any unsigned decimal integer.</p>
<p>
<code>[a-zA-Z_$][a-zA-Z0-9_$]*</code><br>
C/C++ identifier.</p>
<p>
<code>[a-zA-Z]+</code><br>
Any English word (that is, any string of alphabetic characters).</p>
<p>
<code>"[~"]*"</code><br>
Any quoted string.</p>
<p>
<code>\</code><br>
Removes the pattern match characteristic in the <b>Find What</b> text box from the special characters listed above. For example, <code>100$</code> matches <code>100</code> at the end of a line, but <code>100\$</code> matches the character string <code>100$</code> anywhere on a line.</p>
</FONT></BODY>
</HTML>

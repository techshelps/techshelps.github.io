<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Regular Expressions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_regular_expressions"></a>Regular Expressions</h1>
<p>
<a href="_asug_home_page.3a_text_editor.htm">Home Page (Text Editor)</a>  |&nbsp; <a href="_asug_overviews.3a_.text_editor.htm">Overview</a>  |&nbsp; <a href="_asug_how_do_i_......_topics.3a_.text_editor.htm">How Do I ... Topics</a>  |&nbsp; <a href="_asug_frequently_asked_questions.3a_.text_editor.htm">FAQ</a>  |&nbsp; <a href="_asug_text_editor_command_quick_reference.htm">Reference</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Regular Expression</b></td>
<td class=label width=82%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%><code>.</code></td>
<td width=82%>(Period.) Any single character.</td>
</tr>
<tr valign=top>
<td width=18%><code>[ ]</code></td>
<td width=82%>Any one of the characters contained in the brackets, or any of an ASCII range of characters separated by a hyphen (-). For example, b[aeiou]d matches bad, bed, bid, bod, and bud, and r[eo]+d matches red, rod, reed, and rood, but not reod or roed. x[0-9] matches x0, x1, x2, and so on. If the first character in the brackets is a caret (^), then the regular expression matches any characters except those in the brackets.</td>
</tr>
<tr valign=top>
<td width=18%><code>^</code></td>
<td width=82%>The beginning of a line.</td>
</tr>
<tr valign=top>
<td width=18%><code>$</code></td>
<td width=82%>The end of a line.</td>
</tr>
<tr valign=top>
<td width=18%><code>\( \)</code></td>
<td width=82%>Indicates a tagged expression to retain for replacement purposes. If the expression in the <b>Find What</b> text box is \(lpsz\)BigPointer, and the expression in the <b>Replace With</b> box is \1NewPointer, all selected occurrences of lpszBigPointer are replaced with lpszNewPointer. Each occurrence of a tagged expression is numbered according to its order in the <b>Find What</b> text box, and its replacement expression is \n, where 1 corresponds to the first tagged expression, 2 to the second, and so on. You can have up to nine tagged expressions.</td>
</tr>
<tr valign=top>
<td width=18%><code>\~</code></td>
<td width=82%>No match if the following character or characters occur. For example, b\~a+d matches bbd, bcd, bdd, and so on, but not bad.<p>
You can use this expression to prefix a group of characters you want to exclude, which is useful for excluding matches of particular words. For example, foo\~\(lish\) matches "foo" in "food" and "afoot" but not in "foolish."</p>
</td>
</tr>
<tr valign=top>
<td width=18%><code>\{c\!c\}</code></td>
<td width=82%>Any one of the characters separated by the alternation symbol (\!). For example, \{j\!u\}+fruit finds jfruit, jjfruit, ufruit, ujfruit, uufruit, and so on.</td>
</tr>
<tr valign=top>
<td width=18%><code>*</code></td>
<td width=82%>None or more of the preceding characters or expressions. For example, ba*c matches bc, bac, baac, baaac, and so on.</td>
</tr>
<tr valign=top>
<td width=18%><code>+</code></td>
<td width=82%>At least one or more of the preceding characters or expressions. For example, ba+c matches bac, baac, baaac, but not bc.</td>
</tr>
<tr valign=top>
<td width=18%><code>\{\}</code></td>
<td width=82%>Any sequence of characters between the escaped braces. For example, \{ju\}+fruit finds jufruit, jujufruit, jujujufruit, and so on. Note that it will not find jfruit, ufruit, or ujfruit, because the sequence ju is not in any of those strings.</td>
</tr>
<tr valign=top>
<td width=18%><code>[^]</code></td>
<td width=82%>Any character except those following the caret (^) character in the brackets, or any of an ASCII range of characters separated by a hyphen (-). For example, x[^0-9] matches xa, xb, xc, and so on, but not x0, x1, x2, and so on.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:a</code></td>
<td width=82%>Any single alphanumeric character [a&nbsp;–&nbsp;zA&nbsp;–&nbsp;Z0&nbsp;–&nbsp;9].</td>
</tr>
<tr valign=top>
<td width=18%><code>\:b</code></td>
<td width=82%>Any white-space character. The \:b finds tabs and spaces. There is no alternate syntax to express :b.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:c</code></td>
<td width=82%>Any single alphabetic character [a&nbsp;–&nbsp;zA&nbsp;–&nbsp;Z].</td>
</tr>
<tr valign=top>
<td width=18%><code>\:d</code></td>
<td width=82%>Any decimal digit [0&nbsp;–&nbsp;9].</td>
</tr>
<tr valign=top>
<td width=18%><code>\:n</code></td>
<td width=82%>Any unsigned number \{[0-9]+\.[0-9]*\![0-9]*\.[0-9]+\![0-9]+\}. For example, \:n should match 123, .45, and 123.45.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:z</code></td>
<td width=82%>Any unsigned decimal integer [0&nbsp;–&nbsp;9]+.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:h</code></td>
<td width=82%>Any hexadecimal number [0&nbsp;–&nbsp;9a&nbsp;–&nbsp;fA&nbsp;–&nbsp;F]+.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:i</code></td>
<td width=82%>Any C/C++ identifier [a&nbsp;–&nbsp;zA&nbsp;–&nbsp;Z_$][a&nbsp;–&nbsp;zA&nbsp;–&nbsp;Z0&nbsp;–&nbsp;9_$]+.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:w</code></td>
<td width=82%>Any alphabetic string [a&nbsp;–&nbsp;zA&nbsp;–&nbsp;Z]+. The string need not be bounded by white space or appear at the beginning or the end of a line.</td>
</tr>
<tr valign=top>
<td width=18%><code>\:q</code></td>
<td width=82%>Any quoted string \{"[^"]*"\!'[^']*'\}.</td>
</tr>
<tr valign=top>
<td width=18%><code>\</code></td>
<td width=82%>Removes the pattern match characteristic in the <b>Find What</b> text box from the special characters listed above. For example, 100$ matches 100 at the end of a line, but 100\$ matches the character string 100$ anywhere on a line.</td>
</tr>
</table><br>
</FONT></BODY>
</HTML>

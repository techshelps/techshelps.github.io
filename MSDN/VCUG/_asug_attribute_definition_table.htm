<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Attribute Definition Table</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_attribute_definition_table"></a>Attribute Definition Table</h1>
<p>
The following table provides a description of the attributes available from the <b>Edit Attributes</b> dialog box. Note that some attributes are available only for methods, while others are available only for properties. For more information about these and other attributes, see the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mi_about_this_guide">
</object><a href=JavaScript:alink_1.Click()>Microsoft Interface Definition Language (MIDL) reference</a>, available in the <i>Platform SDK</i>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Attribute</b></td>
<td class=label width=76%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=24%><b>call_as</b></td>
<td width=76%>Enables a nonremotable function to be mapped to a remote function. This is particularly helpful in interfaces that have numerous nonremotable types as parameters. Rather than using many <b>represent_as</b> and <b>transmit_as</b> types, you can combine all the conversions using <b>call_as</b> routines. You supply the two <b>call_as</b> routines (client side and server side) to bind the routine between the application calls and the remote calls. The <b>call_as</b> attribute can be used for object interfaces, where the interface definition can be used for local calls as well as remote calls because it allows a nonremotable interface to be remoted transparently. The <b>call_as</b> attribute cannot be used with /<b>osf</b> mode.</td>
</tr>
<tr valign=top>
<td width=24%><b>helpcontext</b></td>
<td width=76%>Specifies a context ID that lets the user view information about this element in the Help file. The <i>helpcontext-value </i>is a 32-bit context identifier within the Help file that can be retrieved with the <b>GetDocumentation</b> functions in the <b>ITypeLib</b> and <b>ITypeInfo</b> interfaces. </td>
</tr>
<tr valign=top>
<td width=24%><b>helpstring</b></td>
<td width=76%>Specifies a character string that is used to describe the element to which it applies. You can apply the <b>helpstring </b>attribute to <b>library</b>, <b>importlib</b>, <b>interface</b>, <b>dispinterface</b>, <b>module</b>, or <b>coclass </b>statements, and to typedefs, properties, and methods.<p>
Use the <b>GetDocumentation</b> functions in the <b>ITypeLib</b> and <b>ITypeInfo</b> interfaces to retrieve the help string.</p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>hidden</b></td>
<td width=76%>Indicates that the item exists but should not be displayed in a user-oriented browser. This attribute allows you to remove members from your interface (by shielding them from further use) while maintaining compatibility with existing code. You can use the <b>hidden</b> attribute on properties, methods, and the <b>coclass</b>,<b> dispinterface</b>, <b>interface</b>, and <b>library </b>statements.<p>
When specified for a library, the <b>hidden</b> attribute prevents the entire library from being displayed. This usage is intended for use with controls. Hosts need to create a new type library that wraps the control with extended properties.</p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>id</b></td>
<td width=76%>Specifies a <b>DISPID </b>for a member function (either a property or a method, in an interface or dispinterface). You use the <b>id</b> attribute when you want to assign a standard DISPID (like DISPID_VALUE, DISPID_NEWENUM, etc.) to a method or property, or when you implement your own <b>IDispatch::Invoke</b> instead of delegating to <b>DispInvoke/ITypeInfo::Invoke</b>.</td>
</tr>
<tr valign=top>
<td width=24%><b>restricted</b></td>
<td width=76%>Specifies that a library, or member of a module, interface, or dispinterface, cannot be called arbitrarily. For example, this prevents a data item from being used by a macro programmer. You can apply this attribute to a member of a <b>coclass</b>, independent of whether the member is a dispinterface or interface, and independent of whether the member is a sink (incoming) or source (outgoing). A member of a <b>coclass</b> cannot have both the <b>restricted</b> and <b>default</b> attributes.</td>
</tr>
<tr valign=top>
<td width=24%><b>source</b></td>
<td width=76%>Indicates that a member of a <b>coclass</b>, property, or method is a source of events. For a member of a <b>coclass</b>, this attribute means that the member is called rather than implemented.<p>
On a property or method, the <b>source </b>attribute indicates that the member returns an object or VARIANT that is a source of events. The object implements <b>IConnectionPointContainer</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>vararg</b></td>
<td width=76%>Specifies that the function takes a variable number of arguments. To accomplish this, the last argument must be a safe array of VARIANT type that contains all the remaining arguments.<p>
You cannot apply the <b>optional </b>or <b>defaultvalue</b> attributes to any parameters in a function that has the <b>vararg</b> attribute.</p>
</td>
</tr>
<tr valign=top>
<td class=label width=24%><b>Methods only:</b></td>
<td class=label width=76%></td>
</tr>
<tr valign=top>
<td width=24%><b>callback</b></td>
<td width=76%>Declares a static callback function that exists on the client side of the distributed application. Callback functions provide a way for the server to execute code on the client.<p>
The callback function is useful when the server must obtain information from the client. If server applications were supported on Windows 3.<i>x</i>, the server could make a call to a remote procedure on the Windows 3.<i>x</i> server to obtain the needed information. The callback function accomplishes the same purpose and lets the server query the client for information in the context of the original call.</p>
<p>
Callbacks are special cases of remote calls that execute as part of a single thread. A callback is issued in the context of a remote call. Any remote procedure defined as part of the same interface as the static callback function can call the callback function.</p>
<p>
Only the connection-oriented and local protocol sequences support the callback attribute. If an RPC interface uses a connectionless (datagram) protocol sequence, calls to procedures with the callback attribute will fail.</p>
<p>
Handles cannot be used as parameters in callback functions. Because callbacks always execute in the context of a call, the binding handle used by the client to make the call to the server is also used as the binding handle from the server to the client.</p>
<p>
Callbacks can nest to any depth.</p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>local</b></td>
<td width=76%>Can be applied to individual functions or to the interface as a whole.<p>
When used in the interface header, the <b>local</b> attribute allows you to use the MIDL compiler as a header generator. The compiler does not generate stubs for any functions and does not ensure that the header can be transmitted. </p>
<p>
For an RPC interface, the <b>local</b> attribute cannot be used at the same time as the <b>uuid</b> attribute. Either <b>uuid</b> or <b>local</b> must be present in the interface header, and the one you choose must occur exactly once.</p>
<p>
For an OLE interface (identified by the <b>object</b> interface attribute), the interface attribute list can include the <b>local</b> attribute even though the <b>uuid</b> attribute is present.</p>
<p>
When used in an individual function, the <b>local</b> attribute designates a local procedure for which no stubs are generated. Using <b>local</b> as a function attribute is a Microsoft extension to DCE IDL; therefore, this attribute is not available when you compile using the MIDL /<b>osf</b> switch.</p>
<p>
Note that an interface without attributes can be imported into a base IDL file. However, the interface must contain only datatypes with no procedures. If even one procedure is contained in the interface, a <b>local</b> or <b>uuid</b> attribute must be specified.</p>
</td>
</tr>
<tr valign=top>
<td class=label width=24%><b>Properties only:</b></td>
<td class=label width=76%></td>
</tr>
<tr valign=top>
<td width=24%><b>bindable</b></td>
<td width=76%>Indicates that the property supports data binding. This allows the client to be notified whenever a property has changed value. (If you want the client to be notified of <i>impending</i> changes to a property, use the <b>requestedit </b>attribute.)<p>
Because the <b>bindable </b>attribute refers to the property as a whole, it must be specified wherever the property is defined; therefore, you need to specify the attribute on both the property-accessing function and the property-setting function.</p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>defaultbind</b></td>
<td width=76%>Indicates the single, bindable property that best represents the object. Properties that have the <b>defaultbind</b> attribute must also have the <b>bindable</b> attribute. Only one property in an interface or dispinterface can have the <b>defaultbind</b> attribute.<p>
This attribute is used by containers that have a user model involving binding to an object rather than binding to a property of an object. An object can support data binding but not have this attribute.</p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>defaultcollelem</b></td>
<td width=76%>Flags the property as an accessor function for an element of the default collection. Used for Visual Basic code optimization. If this attribute is present on a <b>Get</b>, it must also be present on a <b>Put</b>.</td>
</tr>
<tr valign=top>
<td width=24%><b>displaybind</b></td>
<td width=76%>Indicates a property that should be displayed to the user as bindable. Properties that have the <b>displaybind</b> attribute must also have the <b>bindable</b> attribute. An object can support data binding but not have this attribute.</td>
</tr>
<tr valign=top>
<td width=24%><b>immediatebind</b></td>
<td width=76%>Indicates that the database will be notified immediately of all changes to a property of a data-bound object. <p>
This attribute allows controls to differentiate between properties that need to notify the database of every change, and those that do not. For example, every change to a check box control should be sent to the underlying database immediately, even if the control has not lost the focus. However, for a list box control, a change occurs whenever a different selection is highlighted. Notifying the database of a change before the control loses focus would be inefficient and unnecessary. The <b>immediatebind</b> attribute allows individual properties on a form to specify, by setting the ImmediateBind<b> </b>bit, that changes should be reported immediately.</p>
<p>
Properties that have the <b>immediatebind</b> attribute must also have the <b>bindable</b> attribute. </p>
</td>
</tr>
<tr valign=top>
<td width=24%><b>nonbrowsable</b></td>
<td width=76%>Indicates that the property appears in an object browser, which does not show property values, but does not appear in a properties browser (which shows property values).</td>
</tr>
<tr valign=top>
<td width=24%><b>requestedit</b></td>
<td width=76%>Indicates that the property supports the OnRequestEdit notification. This means that, before a change is made, the object will send the client a request for permission to change a property. An object can support data binding but not have this attribute.</td>
</tr>
</table><br>
</FONT></BODY>
</HTML>

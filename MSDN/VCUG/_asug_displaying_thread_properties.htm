<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying Thread Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h1><a name="_asug_displaying_thread_properties"></a>Displaying Thread Properties</h1>
<h3>What do you want to do? </h3>
<p>
<a href="#_asug_thread_properties_for_windows_95">View thread properties for Windows 95</a></p>
<p>
<a href="#_asug_thread_properties_for_windows_nt">View thread properties for Windows NT</a></p>
<p>
<a href="_asug_opening_thread_properties.htm">Open thread properties</a></p>

<h2><a name="_asug_thread_properties_for_windows_95"></a>Thread Properties for Windows 95</h2>
<p>
For Windows 95, the Thread Properties dialog box contains one tab: <b>General</b>.</p>
<h3>Thread Properties General Tab for Windows 95</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Entry</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Module Name</b></td>
<td width=75%>The name of the module.</td>
</tr>
<tr valign=top>
<td width=25%><b>Thread ID</b></td>
<td width=75%>The unique ID of this thread. Note that Thread ID numbers are reused; they identify a thread only for the lifetime of that thread.</td>
</tr>
<tr valign=top>
<td width=25%><b>Process ID</b></td>
<td width=75%>The unique ID of this process. Process ID numbers are reused, so they identify a process only for the lifetime of that process. The Process object type is created when a program is run. All the threads in a process share the same address space and have access to the same data. Click this value to view the properties of the process ID.</td>
</tr>
<tr valign=top>
<td width=25%><b>Current Priority</b></td>
<td width=75%>The current dynamic priority of this thread. Threads within a process can raise and lower their own base priority relative to the base priority of the process.</td>
</tr>
<tr valign=top>
<td width=25%><b>Base Priority</b></td>
<td width=75%>The current base priority of this thread.</td>
</tr>
</table><br>
<h2><a name="_asug_thread_properties_for_windows_nt"></a>Thread Properties for Windows NT</h2>
<p>
For Windows NT, the <b>Thread Properties</b> dialog box contains one tab: <b>General</b>.</p>
<h3>Thread Properties General Tab for Windows NT</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Entry</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Module Name</b></td>
<td width=75%>The name of the module.</td>
</tr>
<tr valign=top>
<td width=25%><b>Thread ID</b></td>
<td width=75%>The unique ID of this thread. Note that thread ID numbers are reused; they identify a thread only for the lifetime of that thread.</td>
</tr>
<tr valign=top>
<td width=25%><b>Process ID</b></td>
<td width=75%>The unique ID of this process. Process ID numbers are reused, so they identify a process only for the lifetime of that process. The Process object type is created when a program is run. All the threads in a process share the same address space and have access to the same data. Click this value to view the properties of the process ID.</td>
</tr>
<tr valign=top>
<td width=25%><b>Thread State</b></td>
<td width=75%>The current state of the thread. A Running thread is using a processor; a Standby thread is about to use one. A Ready thread is waiting to use a processor because one is not free. A thread in Transition is waiting for a resource to execute, such as waiting for its execution stack to be paged in from disk. A Waiting thread does not need the processor because it is waiting for a peripheral operation to complete or a resource to become free.</td>
</tr>
<tr valign=top>
<td width=25%><b>Wait Reason</b></td>
<td width=75%>This is applicable only when the thread is in the Wait state. Event Pairs are used to communicate with protected subsystems.</td>
</tr>
<tr valign=top>
<td width=25%><b>CPU Time</b></td>
<td width=75%>Total CPU time spent on this process and its threads. Equal to User Time plus Privileged Time.</td>
</tr>
<tr valign=top>
<td width=25%><b>User Time</b></td>
<td width=75%>The total elapsed time that this thread has spent executing code in User Mode. Applications execute in User Mode, as do subsystems such as the window manager and the graphics engine.</td>
</tr>
<tr valign=top>
<td width=25%><b>Privileged Time</b></td>
<td width=75%>The total elapsed time that this thread has spent executing code in Privileged Mode. When a Windows system service is called, the service will often run in Privileged Mode to gain access to system-private data. Such data is protected from access by threads executing in User Mode. Calls to the system may be explicit, or they may be implicit, such as when a page fault or an interrupt occurs.</td>
</tr>
<tr valign=top>
<td width=25%><b>Elapsed Time</b></td>
<td width=75%>The total elapsed time (in seconds) this thread has been running.</td>
</tr>
<tr valign=top>
<td width=25%><b>Current Priority</b></td>
<td width=75%>The current dynamic priority of this thread. Threads within a process can raise and lower their own base priority relative to the base priority of the process.</td>
</tr>
<tr valign=top>
<td width=25%><b>Base Priority</b></td>
<td width=75%>The current base priority of this thread.</td>
</tr>
<tr valign=top>
<td width=25%><b>Start Address</b></td>
<td width=75%>Starting virtual address for this thread.</td>
</tr>
<tr valign=top>
<td width=25%><b>User PC</b></td>
<td width=75%>The user program counter for the thread.</td>
</tr>
<tr valign=top>
<td width=25%><b>Context Switches</b></td>
<td width=75%>The number of switches from one thread to another. Thread switches can occur either inside a single process or across processes. A thread switch may be caused by one thread asking another for information, or by a thread being preempted when a higher priority thread becomes ready to run.</td>
</tr>
</table><br>
</FONT></BODY>
</HTML>

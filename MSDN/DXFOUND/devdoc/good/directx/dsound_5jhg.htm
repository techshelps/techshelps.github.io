<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Play Buffer Notification</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_play_buffer_notification_dsound"></a>Play Buffer Notification</h3>
<p>
Particularly when streaming audio, you may want your application to be notified when the play cursor reaches a certain point in the buffer, or when playback is stopped. With the <a href="dsound_457o.htm"><b>IDirectSoundNotify::SetNotificationPositions</b></a> method you can set any number of points within the buffer where events are to be signaled. You cannot do this while the buffer is playing.</p>
<p>
First you have to obtain a pointer to the <a href="dsound_55us.htm"><b>IDirectSoundNotify</b></a> interface. You can do this with the buffer object's <a href="dxintro_0pgv.htm"><b>QueryInterface</b></a> method, as in the following C++ example:</p>
<pre><code>// LPDIRECTSOUNDBUFFER lpDsbSecondary;
// The buffer has been initialized already. 
LPDIRECTSOUNDNOTIFY lpDsNotify;  // pointer to the interface

HRESULT hr = lpDsbSecondary-&gt;QueryInterface(IID_IDirectSoundNotify, 
                                            &amp;lpDsNotify); 
if (SUCCEEDED(hr)) 
  { 
  // Go ahead and use lpDsNotify-&gt;SetNotificationPositions. 
  } 
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>IDirectSoundNotify</b> interface is associated with the object that obtained the pointer, in this case the secondary buffer. The methods of the new interface will automatically apply to that buffer. </p>
<p>
Now create an event object with the Win32 <b>CreateEvent</b> function. You put the handle to this event in the <b>hEventNotify</b> member of a <a href="dsound_755w.htm"><b>DSBPOSITIONNOTIFY</b></a> structure, and in the <b>dwOffset</b> member of that structure you specify the offset within the buffer where you want the event to be signaled. Then you pass the address of the structure—or of an array of structures, if you want to set more than one notification position—to the <b>IDirectSoundNotify::SetNotificationPositions</b> method. </p>
<p>
The following example sets a single notification position. The event will be signaled when playback stops, either because it was not looping and the end of the buffer has been reached, or because the application called the <b>IDirectSoundBuffer::Stop</b> method.</p>
<pre><code>DSBPOSITIONNOTIFY PositionNotify;
 
PositionNotify.Offset = DSBPN_OFFSETSTOP;
PositionNotify.hEventNotify = hMyEvent;
// hMyEvent is the handle returned by CreateEvent()
 
lpDsNotify-&gt;SetNotificationPositions(1, &amp;PositionNotify);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

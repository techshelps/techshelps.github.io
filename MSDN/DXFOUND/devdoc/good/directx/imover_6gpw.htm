<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>World Transform</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_world_transform_d3d"></a>World Transform</h3>
<p>
The world transform changes coordinates from model space to world space. This can include any combination of translations, rotations, and scalings. For a discussion of the mathematics of transformations, see <a href="imover_0rok.htm">3-D Transformations</a>.</p>
<p>
You can create a translation using code like this. Notice that here (and in the other transformation samples) the D3D_OVERLOADS form of <a href="d3dimref_32xw.htm"><b>D3DMATRIX</b></a> is being used.</p>
<pre><code>D3DMATRIX Translate(const float dx, const float dy, const float dz)
{
    D3DMATRIX ret = IdentityMatrix();
    ret(3, 0) = dx;
    ret(3, 1) = dy;
    ret(3, 2) = dz;
    return ret;
}    // end of Translate()
 </code></pre>
<p>
You can create a rotation around an axis using code like this:</p>
<pre><code>D3DMATRIX RotateX(const float rads)
{
    float    cosine, sine;
 
    cosine = cos(rads);
    sine = sin(rads);
    D3DMATRIX ret = IdentityMatrix();
    ret(1,1) = cosine;
    ret(2,2) = cosine;
    ret(1,2) = -sine;
    ret(2,1) = sine;
    return ret;
}   // end of RotateX()
 
D3DMATRIX RotateY(const float rads)
{
    float    cosine, sine;
 
    cosine = cos(rads);
    sine = sin(rads);
    D3DMATRIX ret = IdentityMatrix();
    ret(0,0) = cosine;
    ret(2,2) = cosine;
    ret(0,2) = sine;
    ret(2,0) = -sine;
    return ret;
}   // end of RotateY()
 
D3DMATRIX RotateZ(const float rads)
{
    float    cosine, sine;
 
    cosine = cos(rads);
    sine = sin(rads);
    D3DMATRIX ret = IdentityMatrix();
    ret(0,0) = cosine;
    ret(1,1) = cosine;
    ret(0,1) = -sine;
    ret(1,0) = sine;
    return ret;
}   // end of RotateZ()
 </code></pre>
<p>
You can create a scale transform using code like this:</p>
<pre><code>D3DMATRIX Scale(const float size)
{
D3DMATRIX ret = IdentityMatrix();
    ret(0, 0) = size;
    ret(1, 1) = size;
    ret(2, 2) = size;
    return ret;
}   // end of Scale()
 </code></pre>
<p>
These basic transformations can be combined to create the final transform. Remember that when you combine them the results are not commutative — the order in which you multiply matrices is important.</p>
<p>&nbsp;</p></body>
</HTML>

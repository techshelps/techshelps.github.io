<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Materials</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_materials_d3d"></a>Materials</h2>
<p>
A material describes the illumination properties of a surface, including how it handles light and whether it uses a texture. You can also use a material to define the background for a viewport. You can create a material object by calling the <a href="d3dimref_6en8.htm"><b>IDirect3D2::CreateMaterial</b></a> method. You can use the <a href="d3dimref_4ntw.htm"><b>IDirect3DMaterial2</b></a> interface to get and set materials and to retrieve material handles.</p>
<p>
For the ramp-mode software device, the material object keeps track of the texture map used in conjunction with the material. This enables the pre-calculation of the material palettes. When you use textures in ramp mode, you must set the <b>D3DLIGHTSTATE_MATERIAL</b> member of the <a href="d3dimref_1zj8.htm"><b>D3DLIGHTSTATETYPE</b></a> enumerated type. Once the material properties are set, a material can be associated with a device. As with textures, a material handle identifies this association of a material and a device. A material can be associated with more than one device. You retrieve a material handle by calling the <a href="d3dimref_109w.htm"><b>IDirect3DMaterial2::GetHandle</b></a> method. </p>
<p>
The current material is a state variable in a device as part of lighting related states. Handles obtained using <b>IDirect3DMaterial</b> or <b>IDirect3DMaterial2</b> for a given device object can be used interchangeably. </p>
<p>
<b>IDirect3DMaterial2</b> interface eliminates some unimplemented methods from the <b>IDirect3DMaterial</b> interface.</p>
<p>
You can define the light-handling properties of a material in four ways: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>Ambient </td>
<td width=59%>Specifies the color of the ambient light as reflected by the material. </td>
</tr>
<tr valign=top>
<td width=41%>Diffuse </td>
<td width=59%>Specifies the color of the diffuse light as reflected by the material. Diffuse light is light produced by one of the light sources described by the <a href="d3dimref_4l2c.htm"><b>D3DLIGHTTYPE</b></a> enumerated type (that is, any light except ambient light). </td>
</tr>
<tr valign=top>
<td width=41%>Specular </td>
<td width=59%>Specifies the color of reflected highlights as produced by the material. </td>
</tr>
<tr valign=top>
<td width=41%>Emissive </td>
<td width=59%>Specifies the color of the light that is emitted by the material. </td>
</tr>
</table><br>
<p>
These light-handling properties and other properties of the material, including the texture handle, are described by the <a href="d3dimref_3xr8.htm"><b>D3DMATERIAL</b></a> structure. You can use the <b>D3DLIGHTSTATE_MATERIAL</b> member of the <a href="d3dimref_1zj8.htm"><b>D3DLIGHTSTATETYPE</b></a> enumerated type to identify a material.</p>
<p>
You can create an <a href="d3dimref_4ntw.htm"><b>IDirect3DMaterial2</b></a> interface by calling the <a href="d3dimref_6en8.htm"><b>IDirect3D2::CreateMaterial</b></a> method. The following example demonstrates how to create an <b>IDirect3DMaterial2</b> interface. Then it demonstrates how to set the material and retrieve its handle by calling the <a href="d3dimref_9jms.htm"><b>IDirect3DMaterial2::SetMaterial</b></a> and <a href="d3dimref_109w.htm"><b>IDirect3DMaterial2::GetHandle</b></a> methods.</p>
<pre><code>lpDirect3D2-&gt;CreateMaterial( 
    lplpDirect3DMaterial2,  // Address of a new material 
    pUnkOuter);             // NULL 
lpDirect3DMaterial2-&gt;SetMaterial( 
    lpD3DMat);              // Address of a D3DMATERIAL structure 
lpDirect3DMaterial2-&gt;GetHandle( 
    lpD3DDevice2,           // Address of a DIRECT3DDEVICE object 
    lpD3DMat);              // Address of a D3DMATERIAL structure 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

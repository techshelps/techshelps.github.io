<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DLIGHT2</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_d3dlight2_d3d"></a>D3DLIGHT2</h1>
<p>
The <b>D3DLIGHT2</b> structure defines the light type in calls to methods such as <a href="d3dimref_1u04.htm"><b>IDirect3DLight::SetLight</b></a> and <a href="d3dimref_1g2s.htm"><b>IDirect3DLight::GetLight</b></a>.</p>
<p>
For DirectX 5, this structure supersedes the <b>D3DLIGHT</b> structure. <b>D3DLIGHT2</b> is identical to <b>D3DLIGHT</b> except for the addition of the <b>dwFlags</b> member. In addition, the <b>dvAttenuation</b> members are interpreted differently in <b>D3DLIGHT2</b> than they were for <b>D3DLIGHT</b>.</p>
<pre><code>typedef struct _D3DLIGHT2 { 
    DWORD         dwSize; 
    D3DLIGHTTYPE  dltType; 
    D3DCOLORVALUE dcvColor; 
    D3DVECTOR     dvPosition; 
    D3DVECTOR     dvDirection; 
    D3DVALUE      dvRange; 
    D3DVALUE      dvFalloff; 
    D3DVALUE      dvAttenuation0; 
    D3DVALUE      dvAttenuation1; 
    D3DVALUE      dvAttenuation2; 
    D3DVALUE      dvTheta; 
    D3DVALUE      dvPhi; 
    DWORD         dwFlags;        // new member for DirectX 5
} D3DLIGHT2, *LPD3DLIGHT2; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwSize</b></dt>
<dd>
Size, in bytes, of this structure. You must specify a value for this member. Direct3D uses the specified size to determine whether this is a <b>D3DLIGHT</b> or a <b>D3DLIGHT2</b> structure.</dd>
<dt>
<b>dltType</b></dt>
<dd>
Type of the light source. This value is one of the members of the <a href="d3dimref_4l2c.htm"><b>D3DLIGHTTYPE</b></a> enumerated type.</dd>
<dt>
<b>dcvColor</b></dt>
<dd>
Color of the light. This member is a <a href="d3dimref_1t0k.htm"><b>D3DCOLORVALUE</b></a> structure. In ramp mode, the color is converted to a gray scale. </dd>
<dt>
<b>dvPosition</b></dt>
<dd>
Position of the light in world space. This member has no meaning for directional lights and is ignored in that case. </dd>
<dt>
<b>dvDirection</b></dt>
<dd>
Direction the light is pointing in world space. This member only has meaning for directional and spotlights. This vector need not be normalized but it should have a non-zero length.</dd>
<dt>
<b>dvRange</b></dt>
<dd>
Distance beyond which the light has no effect. The maximum allowable value for this member is D3DLIGHT_RANGE_MAX, which is defined as the square root of FLT_MAX. This member does not affect directional lights.</dd>
<dt>
<b>dvFalloff</b></dt>
<dd>
Decrease in illumination between a spotlight's <a href="glossary_367n.htm#_dx5_umbra_glos">umbra</a> (the angle specified by the <b>dvTheta</b> member) and the outer edge of the <a href="glossary_33qr.htm#_dx5_penumbra_glos">penumbra</a> (the angle specified by the <b>dvPhi</b> member). This feature was implemented for DirectX 5.
<p>
The intensity of the light at any point in the penumbra is described by the following equation:

</dd>
</dl>
<p>
<img src="images/falloff.gif" border=0></p>
<p>
In this equation, <i>rho</i> is the angle between the axis of the spotlight and the illuminated point.</p>
<p>
A value of 1.0 specifies linear falloff from the umbra to the penumbra. If the value is anything other than 1.0, it is used as an exponent to shape the curve. Values greater than 1.0 cause the light to fall off quickly at first and then fade slowly to the penumbra. Values which are less than 1.0 create the opposite effect. The following graph shows the affect of changing these values:</p>
<p>
<img src="images/fallgraf.gif" border=0></p>
<p>
The effect of falloff on the lighting is subtle. Furthermore, a small performance penalty is incurred by shaping the falloff curve. For these reasons, most developers set this value to 1.0.
<dl>
<dt>
<b>dvAttenuation0 </b>through<b> dvAttenuation2</b></dt>
<dd>
Values specifying how a light's intensity changes over distance. (Attenuation does not affect directional lights.) In the <b>D3DLIGHT2</b> structure these values are interpreted differently than they were for the <b>D3DLIGHT</b> structure.
<p>
The distance from the light to the vertex is normalized to the range by the following formula: 

<pre><code>distance = (range-distance)/range
</code></pre>

<p>
This results in the distance value being from 1.0 at the light to 0.0 at the light's full range. Then the combined intensity factor of the light is calculated using the following formula:

<pre><code>intensity = dvAttenuation0 + 
    dvAttenuation1 * distance + 
    dvAttenuation2 * distance squared
</code></pre>

<p>
This intensity factor is then multiplied by the light color to produce the final intensity of the light. 

<p>
Setting the attenuation values to 1,0,0 produces a light that doesn't change over distance. Setting the values to 0,1,0 produces a light that is at full intensity at the light, zero intensity at the light's range, and that declines linearly between the two extremes. The values 0,0,1 produce a light that mimics the standard "1/distance squared" falloff rate that should be familiar from introductory physics classes. (The differences in this last case are that the curve is softer and that the intensity of the light doesn't go to infinity at the light source.) 

<p>
You can use various combinations of values to create unique lights. You can even use negative values — this is another way to achieve a <a href="glossary_4xtf.htm#_dx5_dark_light_glos">dark light</a> effect. Just as when you use negative values for colors, when you are in ramp mode you cannot use dark lights to produce anything darker than the current setting for the ambient light.
</dd>
<dt>
<b>dvTheta</b></dt>
<dd>
Angle, in radians, of the spotlight's <a href="glossary_367n.htm#_dx5_umbra_glos">umbra</a>—that is, the fully illuminated spotlight cone. This value must be less than pi radians.</dd>
<dt>
<b>dvPhi</b></dt>
<dd>
Angle, in radians, defining the outer edge of the spotlight's <a href="glossary_33qr.htm#_dx5_penumbra_glos">penumbra</a>. Points outside this cone are not lit by the spotlight. This value must be between 0 and the value specified for the <b>dvTheta</b> member.</dd>
<dt>
<b>dwFlags</b></dt>
<dd>
A combination of the following performance-related flags. This member is new for DirectX 5.
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>D3DLIGHT_ACTIVE</td>
<td width=52%>Enables the light. This flag must be set to enable the light; if it is not set, the light is ignored.</td>
</tr>
<tr valign=top>
<td width=48%>D3DLIGHT_NO_SPECULAR</td>
<td width=52%>Turns off specular highlights for the light.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Remarks</h4>
<p>
In the <b>D3DLIGHT</b> structure, the affects of the attenuation settings were difficult to predict; developers were encouraged to experiment with the settings until they achieved the desired result. For <b>D3DLIGHT2</b>, it is much easier to work with lighting attenuation.</p>
<p>
For more information about lights, see <a href="imover_6ckk.htm">Lights</a> and <a href="d3dimref_87c4.htm">IDirect3DLight</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in d3dcaps.h.</p>
<h4>See Also</h4>
<p>
<a href="d3dimref_4l2c.htm"><b>D3DLIGHTTYPE</b></a></p>
<p>&nbsp;</p></body>
</HTML>

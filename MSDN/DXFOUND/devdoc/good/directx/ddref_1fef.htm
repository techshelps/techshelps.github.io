<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDirectDrawSurface3::SetSurfaceDesc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_idirectdrawsurface3_setsurfacedesc_ddraw"></a>IDirectDrawSurface3::SetSurfaceDesc</h1>
<p>
The <b>IDirectDrawSurface3::SetSurfaceDesc</b> method sets the characteristics of an existing surface. This method is new with the <a href="ddref_8053.htm"><b>IDirectDrawSurface3</b></a> interface.</p>
<pre><code><b>HRESULT IDirectDrawSurface3::SetSurfaceDesc(
  LPDDSURFACEDESC</b><i> lpddsd</i><b>,  </b>
<b>  DWORD</b><i> dwFlags</i>            
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpddsd</i></dt>
<dd>
Address of a <a href="ddref_8hbr.htm"><b>DDSURFACEDESC</b></a> structure that contains the new surface characteristics.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
This parameter is currently not used and must be set to 0.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the method succeeds, the return value is DD_OK.</p>
<p>
If the method fails, the return value may be one of the following error values:</p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidparams_ddraw">DDERR_INVALIDPARAMS</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidobject_ddraw">DDERR_INVALIDOBJECT</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_surfacelost_ddraw">DDERR_SURFACELOST</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_surfacebusy_ddraw">DDERR_SURFACEBUSY</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidsurfacetype_ddraw">DDERR_INVALIDSURFACETYPE</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidpixelformat_ddraw">DDERR_INVALIDPIXELFORMAT</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidcaps_ddraw">DDERR_INVALIDCAPS</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_unsupported_ddraw">DDERR_UNSUPPORTED</a></td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_generic_ddraw">DDERR_GENERIC</a></td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Currently, this method can only be used to set the surface data and pixel format used by an explicit system memory surface. This is useful as it allows a surface to use data from a previously allocated buffer without copying. The new surface memory is allocated by the client application and, as such, the client application must also deallocate it. For more information about how this method is used, see <a href="ddoverv_6bef.htm">Updating Surface Characteristics</a>.</p>
<p>
Using this method incorrectly will cause unpredictable behavior. The DirectDrawSurface object will not deallocate surface memory that it didn't allocate. Therefore, when the surface memory is no longer needed, it is your responsibility to deallocate it. However, when this method is called, DirectDraw frees the original surface memory that it implicitly allocated when creating the surface.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ddraw.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use ddraw.lib.</p>
<p>&nbsp;</p></body>
</HTML>

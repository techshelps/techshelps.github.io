<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DVIEWPORT2</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_d3dviewport2_d3d"></a>D3DVIEWPORT2</h1>
<p>
The <b>D3DVIEWPORT2</b> structure defines the visible 3-D volume and the window dimensions that a 3-D volume projects onto. This structure is used by the methods of the <b>IDirect3D2</b> and <b>IDirect3DDevice2</b> interfaces, and in particular by the <a href="d3dimref_0lgk.htm"><b>IDirect3DViewport2::GetViewport2</b></a> and <a href="d3dimref_2gpw.htm"><b>IDirect3DViewport2::SetViewport2</b></a> methods. This structure was introduced in DirectX 5.</p>
<pre><code>typedef struct _D3DVIEWPORT2 {
    DWORD       dwSize;
    DWORD       dwX;
    DWORD       dwY;
    DWORD       dwWidth;
    DWORD       dwHeight;
    D3DVALUE    dvClipX;
    D3DVALUE    dvClipY;
    D3DVALUE    dvClipWidth;
    D3DVALUE    dvClipHeight;
    D3DVALUE    dvMinZ;
    D3DVALUE    dvMaxZ;
} D3DVIEWPORT2, *LPD3DVIEWPORT2;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwSize</b></dt>
<dd>
Size of this structure, in bytes. This member must be initialized before the structure is used.</dd>
<dt>
<b>dwX</b> and <b>dwY</b></dt>
<dd>
Coordinates of the top-left corner of the viewport. Unless you want to render to a subset of the surface, these members can be set to 0. </dd>
<dt>
<b>dwWidth</b> and <b>dwHeight</b></dt>
<dd>
Dimensions of the viewport.</dd>
<dt>
<b>dvClipX</b> and <b>dvClipY</b></dt>
<dd>
Coordinates of the top-left corner of the clipping volume. 
<p>
The relevant coordinates here are the nonhomogeneous coordinates that result from the perspective division that projects the vertices onto the w=1 plane.
</dd>
<dt>
<b>dvClipWidth</b> and <b>dvClipHeight</b></dt>
<dd>
Dimensions of the clipping volume projected onto the w=1 plane. Unless you want to render to a subset of the surface, these members can be set to the width and height of the destination surface. </dd>
<dt>
<b>dvMinZ</b> and <b>dvMaxZ</b></dt>
<dd>
Values of the <b>D3DVALUE</b> type describing the maximum and minimum nonhomogeneous z-coordinates resulting from the perspective divide and projected onto the w=1 plane.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The coordinates and dimensions of the viewport are given relative to the top left of the device; values increase in the y-direction as you descend the screen. </p>
<p>
If you are using <a href="d3dimref_8pwk.htm"><b>D3DVERTEX</b></a> or <a href="d3dimref_7wkk.htm"><b>D3DLVERTEX</b></a> vertices — that is, if Direct3D is performing the transformations — you might want to set the last six members of this structure as follows:</p>
<pre><code>float inv_aspect = (float)dwHeight/dwWidth;

dvClipX = -1.0f;
dvClipY = inv_aspect;
dvClipWidth = 2.0f;
dvClipHeight = 2.0f * inv_aspect;
dvMinZ = 0.0f;
dvMaxZ = 1.0f;
</code></pre>
<p>
By taking the aspect ratio into account you are assured that as the surface is resized the angle of the horizontal field of view remains constant. This prevents unexpected distortions when the user pulls the window into an unusual shape. If distortion is not an issue in your application, set <i>aspect</i> to 1. Notice that dividing the height by the width produces an inverse aspect ratio; in Direct3D, the aspect ratio is defined by dividing the width by the height.</p>
<p>
If you are using <a href="d3dimref_2ois.htm"><b>D3DTLVERTEX</b></a><b> </b>vertices — that is, if your application is taking care of the transformations and lighting — you can set up the clip space however is best for your application. If the x- and y-coordinates in your data already match pixels, you could set the last six members of <b>D3DVIEWPORT2</b> as follows:</p>
<pre><code>dvClipX = 0;
dvClipY = 0;
dvClipWidth = dwWidth;
dvClipHeight = dwHeight;
dvMinZ = 0.0f;
dvMaxZ = 1.0f;
</code></pre>
<p>
Unlike the <a href="d3dimref_3p2c.htm"><b>D3DVIEWPORT</b></a> structure, <b>D3DVIEWPORT2</b> specifies the relationship between the size of the viewport and the window.</p>
<p>
When the viewport is changed, the driver builds a new transformation matrix.</p>
<p>
For more information about working with viewports, see <a href="imover_9db8.htm">Viewports and Transformations</a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in d3dtypes.h.</p>
<h4>See Also</h4>
<p>
<b>D3DVALUE</b>, <a href="d3dimref_0lgk.htm"><b>IDirect3DViewport2::GetViewport2</b></a>, <a href="d3dimref_2gpw.htm"><b>IDirect3DViewport2::SetViewport2</b></a></p>
<p>&nbsp;</p></body>
</HTML>

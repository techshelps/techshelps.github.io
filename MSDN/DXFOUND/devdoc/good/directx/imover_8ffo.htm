<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Deleting Viewports</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_creating_and_deleting_viewports_d3d"></a>Creating and Deleting Viewports</h3>
<p>
A viewport is the surface rectangle into which a three-dimensional scene is projected. A Direct3D viewport object is used to specify the following: 
<ul>
<li>
The screen-space viewport to which the rendering will be confined.</li>
<li>
The post-transform clip volume, the contents of which will be mapped in to the viewport. (This is also known as the "window" in a "window-to-viewport transform," in standard computer-graphics terminology.)</li>
<li>
The background material and texture to which the viewport should be cleared.</li>
<li>
The background depth buffer used to initialize the z-buffer before rendering the scene.</li>
</ul>
<p>
The <b>IDirect3DViewport2 </b>interface has two ways of specifying a viewport. The <a href="d3dimref_0z38.htm"><b>D3DVIEWPORT2</b></a> structure is specified by the new methods in <b>IDirect3DViewport2</b>. This is similar to the <a href="d3dimref_3p2c.htm"><b>D3DVIEWPORT</b></a> structure except that it allows a better clip-volume definition. The new viewport structure is recommended for all DirectX 5 applications.</p>
<p>
The first thing to do when creating a viewport is to create a <a href="d3dimref_0z38.htm"><b>D3DVIEWPORT2</b></a> structure and a pointer to a viewport object:</p>
<pre><code>LPDIRECT3DVIEWPORT2  lpD3DViewport;
D3DVIEWPORT2    viewData;
 </code></pre>
<p>
Next, fill in the viewport structure:</p>
<pre><code>float  aspect = (float)width/height;    // aspect ratio of surface
 
memset(&amp;viewData, 0, sizeof(D3DVIEWPORT2));
viewData.dwSize = sizeof(D3DVIEWPORT2);
viewData.dwX = 0;
viewData.dwY = 0;
viewData.dwWidth = width;
viewData.dwHeight = height;
viewData.dvClipX = -1.0f;
viewData.dvClipY = aspect;
viewData.dvClipWidth = 2.0f;
viewData.dvClipHeight = 2.0f * aspect;
viewData.dvMinZ = 0.0f;
viewData.dvMaxZ = 1.0f;
 </code></pre>
<p>
(You can find a discussion of setting the clipping volume in this structure in the reference material for <a href="d3dimref_0z38.htm"><b>D3DVIEWPORT2</b></a>.)</p>
<p>
After filling in this structure, call the <a href="d3dimref_65yc.htm"><b>IDirect3D2::CreateViewport</b></a> method to create the viewport object. For this you need a valid <b>LPDIRECT3D2</b> pointer, shown in the following example as <i>lpD3D2</i>.</p>
<pre><code>if ((err = lpD3D2-&gt;CreateViewport(&amp;lpD3DViewport2, NULL)) != D3D_OK) {
  return err;
}
 </code></pre>
<p>
Now you can call the <a href="d3dimref_0q78.htm"><b>IDirect3DDevice2::AddViewport</b></a> method to add the newly created viewport object to the device. For this you need a valid <b>LPDIRECT3DDEVICE2</b> pointer, shown in the following example as <i>lpD3DDevice2</i>.</p>
<pre><code>if ((err = d3dapp-&gt;lpD3DDevice2-&gt;AddViewport(lpD3DViewport2)) != D3D_OK) {
  return err;
}
 </code></pre>
<p>
Finally, call the <a href="d3dimref_2gpw.htm"><b>IDirect3DViewport2::SetViewport2</b></a> method to associate the <a href="d3dimref_0z38.htm"><b>D3DVIEWPORT2</b></a> structure whose values you have already filled out with the new viewport object.</p>
<pre><code>if ((err = lpD3DViewport2-&gt;SetViewport2(&amp;viewData)) != D3D_OK) {
return err;
}
 </code></pre>
<p>
At this point you have a working viewport. If you need to make changes to the viewport values, simply update the values in the <b>D3DVIEWPORT2 </b>structure and call <b>IDirect3DViewport2::SetViewport2 </b>again.</p>
<p>
When you are ready to delete the viewport, first delete any lights and materials associated with it and then call the <a href="dxintro_710v.htm"><b>IDirect3DViewport2::Release</b></a> method.</p>
<pre><code>lpD3DViewport2-&gt;Release();
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

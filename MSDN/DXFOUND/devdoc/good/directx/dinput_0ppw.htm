<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 4: Setting the Keyboard Behavior</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_4_setting_the_keyboard_behavior_dinput"></a>Step 4: Setting the Keyboard Behavior</h3>
<p>
Before your application can gain access to the keyboard, it must set the device's behavior using the <a href="dinput_9c1g.htm"><b>IDirectInputDevice::SetCooperativeLevel</b></a> method, as shown in <a href="dinput_0p4l.htm">Sample Function 1: DI_Init</a>. This method accepts the handle to the window to be associated with the device. DirectInput does not support exclusive access to keyboard devices, so the DISCL_NONEXCLUSIVE flag must be included in the <i>dwFlags</i> parameter.</p>
<p>
The following example attempts to set the device's cooperative level. If this fails, it calls the DI_Term application-defined sample function to deallocate existing DirectInput objects, if any.</p>
<pre><code>// Set the cooperative level 
hr = g_lpDIDevice-&gt;SetCooperativeLevel(g_hwndMain, 
                   DISCL_FOREGROUND | DISCL_NONEXCLUSIVE); 
 
if FAILED(hr){ 
    DI_Term(); 
    return FALSE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

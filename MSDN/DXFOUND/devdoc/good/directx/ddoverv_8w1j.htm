<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 1: Setting the Color Key</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_1_setting_the_color_key_ddraw"></a>Step 1: Setting the Color Key</h3>
<p>
In addition to the other functions found in the doInit sample function of some of the other DirectDraw samples, the DDEX4 sample contains the code to set the <a href="glossary_0xbn.htm#_dx5_color_key_glos">color key</a> for the sprites. Color keys are used for setting a color value that will be used for transparency. When the system contains a <a href="glossary_0zsj.htm#_dx5_hardware_blitter_glos">hardware blitter</a>, all the pixels of a rectangle are blitted except the value that was set as the color key, thereby creating nonrectangular sprites on a surface. The code for setting the color key in DDEX4 is shown below:</p>
<pre><code>// Set the color key for this bitmap (black). 
DDSetColorKey(lpDDSOne, RGB(0,0,0)); 
 
return TRUE; 
 </code></pre>
<p>
You can select the <a href="glossary_0xbn.htm#_dx5_color_key_glos">color key</a> by setting the RGB values for the color you want in the call to the DDSetColorKey sample function. The RGB value for black is (0, 0, 0). The DDSetColorKey function calls the DDColorMatch function. (Both functions are in Ddutil.cpp.) The DDColorMatch function stores the current color value of the pixel at location (0, 0) on the bitmap located in the <i>lpDDSOne</i> surface. Then it takes the RGB values you supplied and sets the pixel at location (0, 0) to that color. Finally, it masks the value of the color with the number of bits per pixel that are available. After that is done, the original color is put back in location (0, 0), and the call returns to DDSetColorKey with the actual color key value. After it is returned, the color key value is placed in the <b>dwColorSpaceLowValue</b> member of the <a href="ddref_9ovr.htm"><b>DDCOLORKEY</b></a> structure. It is also copied to the <b>dwColorSpaceHighValue</b> member. The call to <a href="ddref_9qyf.htm"><b>IDirectDrawSurface3::SetColorKey</b></a> then sets the color key.</p>
<p>
You may have noticed the reference to CLR_INVALID in DDSetColorKey and DDColorMatch. If you pass CLR_INVALID as the <a href="glossary_0xbn.htm#_dx5_color_key_glos">color key</a> in the DDSetColorKey call in DDEX4, the pixel in the upper-left corner (0, 0) of the bitmap will be used as the color key. As the DDEX4 bitmap is delivered, that does not mean much because the color of the pixel at (0, 0) is a shade of gray. If, however, you would like to see how to use the pixel at (0, 0) as the color key for the DDEX4 sample, open the All.bmp bitmap file in a drawing application and then change the single pixel at (0, 0) to black. Be sure to save the change (it's hard to see). Then change the DDEX4 line that calls DDSetColorKey to the following:</p>
<pre><code>DDSetColorKey(lpDDSOne, CLR_INVALID); 
 </code></pre>
<p>
Recompile the DDEX4 sample, and ensure that the resource definition file is also recompiled so that the new bitmap is included. (To do this, you can simply add and then delete a space in the Ddex4.rc file.) The DDEX4 sample will then use the pixel at (0, 0), which is now set to black, as the <a href="glossary_0xbn.htm#_dx5_color_key_glos">color key</a>.</p>
<p>&nbsp;</p></body>
</HTML>

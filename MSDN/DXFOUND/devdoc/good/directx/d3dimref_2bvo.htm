<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DPRIMCAPS</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_d3dprimcaps_d3d"></a>D3DPRIMCAPS</h1>
<p>
The <b>D3DPRIMCAPS</b> structure defines the capabilities for each primitive type. This structure is used when creating a device and when querying the capabilities of a device. This structure defines several members in the <a href="d3dimref_3d0k.htm"><b>D3DDEVICEDESC</b></a> structure.</p>
<pre><code>typedef struct _D3DPrimCaps { 
    DWORD dwSize;                // <a href="#_dx5_dwsize_d3dprimcaps_section_d3d">size of structure</a>
    DWORD dwMiscCaps;            // <a href="#_dx5_dwmisccaps_d3dprimcaps_section_d3d">miscellaneous caps</a>
    DWORD dwRasterCaps;          // <a href="#_dx5_dwrastercaps_d3dprimcaps_section_d3d">raster caps</a>
    DWORD dwZCmpCaps;            // <a href="#_dx5_dwzcmpcaps_d3dprimcaps_section_d3d">z-comparison caps</a>
    DWORD dwSrcBlendCaps;        // <a href="#_dx5_dwsrcblendcaps_d3dprimcaps_section_d3d">source blending caps</a>
    DWORD dwDestBlendCaps;       // <a href="#_dx5_dwdestblendcaps_d3dprimcaps_section_d3d">destination blending caps</a>
    DWORD dwAlphaCmpCaps;        // <a href="#_dx5_dwalphacmpcaps_d3dprimcaps_section_d3d">alpha-test comparison caps</a>
    DWORD dwShadeCaps;           // <a href="#_dx5_dwshadecaps_d3dprimcaps_section_d3d">shading caps</a>
    DWORD dwTextureCaps;         // <a href="#_dx5_dwtexturecaps_d3dprimcaps_section_d3d">texture caps</a>
    DWORD dwTextureFilterCaps;   // <a href="#_dx5_dwtexturefiltercaps_d3dprimcaps_section_d3d">texture filtering caps</a>
    DWORD dwTextureBlendCaps;    // <a href="#_dx5_dwtextureblendcaps_d3dprimcaps_section_d3d">texture blending caps</a>
    DWORD dwTextureAddressCaps;  // <a href="#_dx5_dwtextureaddresscaps_d3dprimcaps_section_d3d">texture addressing caps</a>
    DWORD dwStippleWidth;        // <a href="#_dx5_dwstipplewidth_d3dprimcaps_section_d3d">stipple width</a>
    DWORD dwStippleHeight;       // <a href="#_dx5_dwstipplewidth_d3dprimcaps_section_d3d">stipple height</a>
} D3DPRIMCAPS, *LPD3DPRIMCAPS; 
 </code></pre>
<h4>Members</h4>

<dl>
<dt>
<a name="_dx5_dwsize_d3dprimcaps_section_d3d"></a><b>dwSize</b></dt>
<dd>
Size, in bytes, of this structure. This member must be initialized before the structure is used.</dd>
<dt>
<a name="_dx5_dwmisccaps_d3dprimcaps_section_d3d"></a><b>dwMiscCaps</b></dt>
<dd>
General capabilities for this primitive. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_conformant_d3d"></a>D3DPMISCCAPS_CONFORMANT </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device conforms to the OpenGL standard. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_cullccw_d3d"></a>D3DPMISCCAPS_CULLCCW </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The driver supports counterclockwise culling through the <b>D3DRENDERSTATE_CULLMODE</b> state. (This applies only to triangle primitives.) This corresponds to the <b>D3DCULL_CCW</b> member of the <a href="d3dimref_7lpg.htm"><b>D3DCULL</b></a> enumerated type. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_cullcw_d3d"></a>D3DPMISCCAPS_CULLCW </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The driver supports clockwise triangle culling through the <b>D3DRENDERSTATE_CULLMODE</b> state. (This applies only to triangle primitives.) This corresponds to the <b>D3DCULL_CW</b> member of the <a href="d3dimref_7lpg.htm"><b>D3DCULL</b></a> enumerated type. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_cullnone_d3d"></a>D3DPMISCCAPS_CULLNONE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The driver does not perform triangle culling. This corresponds to the <b>D3DCULL_NONE</b> member of the <a href="d3dimref_7lpg.htm"><b>D3DCULL</b></a> enumerated type. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_linepatternrep_d3d"></a>D3DPMISCCAPS_LINEPATTERNREP </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The driver can handle values other than 1 in the <b>wRepeatFactor</b> member of the <a href="d3dimref_3pd0.htm"><b>D3DLINEPATTERN</b></a> structure. (This applies only to line-drawing primitives.) </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_maskplanes_d3d"></a>D3DPMISCCAPS_MASKPLANES </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can perform a bitmask of color planes. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpmisccaps_maskz_d3d"></a>D3DPMISCCAPS_MASKZ </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can enable and disable modification of the z-buffer on pixel operations. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwrastercaps_d3dprimcaps_section_d3d"></a><b>dwRasterCaps</b></dt>
<dd>
Information on raster-drawing capabilities. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_anisotropy_d3d"></a>D3DPRASTERCAPS_ANISOTROPY</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device supports anisotropic filtering. For more information, see <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_anisotropy_d3d"><b>D3DRENDERSTATE_ANISOTROPY</b></a> in the <a href="d3dimref_3pk4.htm"><b>D3DRENDERSTATETYPE</b></a> structure.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_antialiasedges_d3d"></a>D3DPRASTERCAPS_ANTIALIASEDGES</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can antialias lines forming the convex outline of objects. For more information, see <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_edgeantialias_d3d"><b>D3DRENDERSTATE_EDGEANTIALIAS</b></a> in the <a href="d3dimref_3pk4.htm"><b>D3DRENDERSTATETYPE</b></a> structure.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_antialiassortdependent_d3d"></a>D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device supports antialiasing that is dependent on the sort order of the polygons (back-to-front or front-to-back). The application must draw polygons in the right order for antialiasing to occur. For more information, see the <a href="d3dimref_3w2s.htm"><b>D3DANTIALIASMODE</b></a> enumerated type.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_antialiassortindependent_d3d"></a>D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device supports antialiasing that is not dependent on the sort order of the polygons. For more information, see the <a href="d3dimref_3w2s.htm"><b>D3DANTIALIASMODE</b></a> enumerated type.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_dither_d3d"></a>D3DPRASTERCAPS_DITHER </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can dither to improve color resolution. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_fogrange_d3d"></a>D3DPRASTERCAPS_FOGRANGE</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device supports range-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene. For more information, see <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_rangefogenable_d3d"><b>D3DRENDERSTATE_RANGEFOGENABLE</b></a>.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_fogtable_d3d"></a>D3DPRASTERCAPS_FOGTABLE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_fogvertex_d3d"></a>D3DPRASTERCAPS_FOGVERTEX </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device calculates the fog value during the lighting operation, places the value into the alpha component of the <a href="d3dimref_5xus.htm"><b>D3DCOLOR</b></a> value given for the <b>specular</b> member of the <a href="d3dimref_2ois.htm"><b>D3DTLVERTEX</b></a> structure, and interpolates the fog value during rasterization. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_mipmaplodbias_d3d"></a>D3DPRASTERCAPS_MIPMAPLODBIAS</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device supports level-of-detail (LOD) bias adjustments. These bias adjustments enable an application to make a mipmap appear crisper or less sharp than it normally would. For more information about LOD bias in mipmaps, see <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_mipmaplodbias_d3d"><b>D3DRENDERSTATE_MIPMAPLODBIAS</b></a><b>.</b><p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_pat_d3d"></a>D3DPRASTERCAPS_PAT </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The driver can perform patterned drawing (lines or fills with D3DRENDERSTATE_LINEPATTERN or one of the D3DRENDERSTATE_STIPPLEPATTERN render states) for the primitive being queried. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_rop2_d3d"></a>D3DPRASTERCAPS_ROP2 </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can support raster operations other than R2_COPYPEN. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_stipple_d3d"></a>D3DPRASTERCAPS_STIPPLE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can stipple polygons to simulate translucency. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_subpixel_d3d"></a>D3DPRASTERCAPS_SUBPIXEL </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device performs subpixel placement of z, color, and texture data, rather than working with the nearest integer pixel coordinate. This helps avoid bleed-through due to z imprecision, and jitter of color and texture values for pixels. Note that there is no corresponding state that can be enabled and disabled; the device either performs subpixel placement or it does not, and this bit is present only so that the Direct3D client will be better able to determine what the rendering quality will be. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_subpixelx_d3d"></a>D3DPRASTERCAPS_SUBPIXELX </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device is subpixel accurate along the x-axis only and is clamped to an integer y-axis scan line. For information about subpixel accuracy, see D3DPRASTERCAPS_SUBPIXEL. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_xor_d3d"></a>D3DPRASTERCAPS_XOR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can support <b>XOR</b> operations. If this flag is not set but D3DPRIM_RASTER_ROP2 is set, then <b>XOR</b> operations must still be supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_zbias_d3d"></a>D3DPRASTERCAPS_ZBIAS</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device supports z-bias values. These are integer values assigned to polygons that allow physically coplanar polygons to appear separate. For more information, see <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_zbias_d3d"><b>D3DRENDERSTATE_ZBIAS</b></a><b> </b>in the <a href="d3dimref_3pk4.htm"><b>D3DRENDERSTATETYPE</b></a> structure.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_zbufferlesshsr_d3d"></a>D3DPRASTERCAPS_ZBUFFERLESSHSR</td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can perform hidden-surface removal without requiring the application to sort polygons, and without requiring the allocation of a z-buffer. This leaves more video memory for textures. The method used to perform hidden-surface removal is hardware-dependent and is transparent to the application. <p>
Z-bufferless HSR is performed if no z-buffer surface is attached to the rendering-target surface and the z-buffer comparison test is enabled (that is, when the state value associated with the <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_zenable_d3d"><b>D3DRENDERSTATE_ZENABLE</b></a> enumeration constant is set to TRUE).</p>
<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dprastercaps_ztest_d3d"></a>D3DPRASTERCAPS_ZTEST </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The device can perform z-test operations. This effectively renders a primitive and indicates whether any z pixels would have been rendered. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwzcmpcaps_d3dprimcaps_section_d3d"></a><b>dwZCmpCaps</b></dt>
<dd>
Z-buffer comparison functions that the driver can perform. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_always_d3d"></a>D3DPCMPCAPS_ALWAYS </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Always pass the z test. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_equal_d3d"></a>D3DPCMPCAPS_EQUAL </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Pass the z test if the new z equals the current z. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_greater_d3d"></a>D3DPCMPCAPS_GREATER </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Pass the z test if the new z is greater than the current z. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_greaterequal_d3d"></a>D3DPCMPCAPS_GREATEREQUAL </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Pass the z test if the new z is greater than or equal to the current z. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_less_d3d"></a>D3DPCMPCAPS_LESS </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Pass the z test if the new z is less than the current z. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_lessequal_d3d"></a>D3DPCMPCAPS_LESSEQUAL </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Pass the z test if the new z is less than or equal to the current z. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_never_d3d"></a>D3DPCMPCAPS_NEVER </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Always fail the z test. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpcmpcaps_notequal_d3d"></a>D3DPCMPCAPS_NOTEQUAL </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Pass the z test if the new z does not equal the current z. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwsrcblendcaps_d3dprimcaps_section_d3d"></a><b>dwSrcBlendCaps</b></dt>
<dd>
Source blending capabilities. This member can be one or more of the following. (The RGBA values of the source and destination are indicated with the subscripts <i>s</i> and <i>d</i>.) 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_bothinvsrcalpha_d3d"></a>D3DPBLENDCAPS_BOTHINVSRCALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Source <a href="glossary_6wtv.htm#_dx5_blend_factor_glos">blend factor</a> is (1-A<sub>s</sub>, 1-A<sub>s</sub>, 1-A<sub>s</sub>, 1-A<sub>s</sub>) and destination <a href="glossary_6wtv.htm#_dx5_blend_factor_glos">blend factor</a> is (A<sub>s</sub>, A<sub>s</sub>, A<sub>s</sub>, A<sub>s</sub>); the destination blend selection is overridden. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_bothsrcalpha_d3d"></a>D3DPBLENDCAPS_BOTHSRCALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Source <a href="glossary_6wtv.htm#_dx5_blend_factor_glos">blend factor</a> is (A<sub>s</sub>, A<sub>s</sub>, A<sub>s</sub>, A<sub>s</sub>) and destination <a href="glossary_6wtv.htm#_dx5_blend_factor_glos">blend factor</a> is (1-A<sub>s</sub>, 1-A<sub>s</sub>, 1-A<sub>s</sub>, 1-A<sub>s</sub>); the destination blend selection is overridden. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_destalpha_d3d"></a>D3DPBLENDCAPS_DESTALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (A<sub>d</sub>, A<sub>d</sub>, A<sub>d</sub>, A<sub>d</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_destcolor_d3d"></a>D3DPBLENDCAPS_DESTCOLOR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (R<sub>d</sub>, G<sub>d</sub>, B<sub>d</sub>, A<sub>d</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_invdestalpha_d3d"></a>D3DPBLENDCAPS_INVDESTALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (1-A<sub>d</sub>, 1-A<sub>d</sub>, 1-A<sub>d</sub>, 1-A<sub>d</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_invdestcolor_d3d"></a>D3DPBLENDCAPS_INVDESTCOLOR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (1-R<sub>d</sub>, 1-G<sub>d</sub>, 1-B<sub>d</sub>, 1-A<sub>d</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_invsrcalpha_d3d"></a>D3DPBLENDCAPS_INVSRCALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (1-A<sub>s</sub>, 1-A<sub>s</sub>, 1-A<sub>s</sub>, 1-A<sub>s</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_invsrccolor_d3d"></a>D3DPBLENDCAPS_INVSRCCOLOR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (1-R<sub>d</sub>, 1-G<sub>d</sub>, 1-B<sub>d</sub>, 1-A<sub>d</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_one_d3d"></a>D3DPBLENDCAPS_ONE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (1, 1, 1, 1). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_srcalpha_d3d"></a>D3DPBLENDCAPS_SRCALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (A<sub>s</sub>, A<sub>s</sub>, A<sub>s</sub>, A<sub>s</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_srcalphasat_d3d"></a>D3DPBLENDCAPS_SRCALPHASAT </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (f, f, f, 1); f = min(A<sub>s</sub>, 1-A<sub>d</sub>).  </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_srccolor_d3d"></a>D3DPBLENDCAPS_SRCCOLOR </td>
</tr>
<tr valign=top>
<td width=10%> </td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (R<sub>s</sub>, G<sub>s</sub>, B<sub>s</sub>, A<sub>s</sub>). </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpblendcaps_zero_d3d"></a>D3DPBLENDCAPS_ZERO </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_6wtv.htm#_dx5_blend_factor_glos">Blend factor</a> is (0, 0, 0, 0). </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwdestblendcaps_d3dprimcaps_section_d3d"></a><b>dwDestBlendCaps</b></dt>
<dd>
Destination blending capabilities. This member can be the same capabilities that are defined for the <b>dwSrcBlendCaps</b> member.</dd>
<dt>
<a name="_dx5_dwalphacmpcaps_d3dprimcaps_section_d3d"></a><b>dwAlphaCmpCaps</b></dt>
<dd>
Alpha-test comparison functions that the driver can perform. This member can be the same capabilities that are defined for the <b>dwZCmpCaps</b> member. If this member is zero, the driver does not support alpha tests.</dd>
<dt>
<a name="_dx5_dwshadecaps_d3dprimcaps_section_d3d"></a><b>dwShadeCaps</b></dt>
<dd>
Shading operations that the device can perform. It is assumed, in general, that if a device supports a given command (such as <b>D3DOP_TRIANGLE</b>) at all, it supports the D3DSHADE_FLAT mode (as specified in the <a href="d3dimref_3xd0.htm"><b>D3DSHADEMODE</b></a> enumerated type). This flag specifies whether the driver can also support Gouraud and Phong shading and whether <a href="glossary_2wc3.htm#_dx5_alpha_color_component_glos">alpha color components</a> are supported for each of the three color-generation modes. When alpha components are not supported in a given mode, the alpha value of colors generated in that mode is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity).
<p>
With the monochromatic shade modes, the blue channel of the specular component is interpreted as a white intensity. (This is controlled by the <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_monoenable_d3d"><b>D3DRENDERSTATE_MONOENABLE</b></a> render state.)

<p>
The color, specular highlights, fog, and alpha interpolants of a triangle each have capability flags that an application can use to find out how they are implemented by the device driver. These are modified by the shade mode, color model, and by whether the alpha component of a color is blended or stippled. For more information, see <a href="imover_3kf8.htm">Polygons</a>.

<p>
This member can be one or more of the following: 

<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_alphaflatblend_d3d"></a>D3DPSHADECAPS_ALPHAFLATBLEND </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_alphaflatstippled_d3d"></a>D3DPSHADECAPS_ALPHAFLATSTIPPLED </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support an alpha component for flat blended and stippled transparency, respectively (the D3DSHADE_FLAT state for the <a href="d3dimref_3xd0.htm"><b>D3DSHADEMODE</b></a> enumerated type). In these modes, the <a href="glossary_2wc3.htm#_dx5_alpha_color_component_glos">alpha color component</a> for a primitive is provided as part of the color for the first vertex of the primitive. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_alphagouraudblend_d3d"></a>D3DPSHADECAPS_ALPHAGOURAUDBLEND </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_alphagouraudstippled_d3d"></a>D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support an alpha component for Gouraud blended and stippled transparency, respectively (the D3DSHADE_GOURAUD state for the <a href="d3dimref_3xd0.htm"><b>D3DSHADEMODE</b></a> enumerated type). In these modes, the <a href="glossary_2wc3.htm#_dx5_alpha_color_component_glos">alpha color component</a> for a primitive is provided at vertices and interpolated across a face along with the other color components. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_alphaphongblend_d3d"></a>D3DPSHADECAPS_ALPHAPHONGBLEND </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_alphaphongstippled_d3d"></a>D3DPSHADECAPS_ALPHAPHONGSTIPPLED </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support an alpha component for Phong blended and stippled transparency, respectively (the D3DSHADE_PHONG state for the <a href="d3dimref_3xd0.htm"><b>D3DSHADEMODE</b></a> enumerated type). In these modes, vertex parameters are reevaluated on a per-pixel basis, applying lighting effects for the red, green, and blue color components. Phong shading is not currently supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_colorflatmono_d3d"></a>D3DPSHADECAPS_COLORFLATMONO </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_colorflatrgb_d3d"></a>D3DPSHADECAPS_COLORFLATRGB </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support colored flat shading in the <a href="d3dimref_4vj8.htm#_dx5_d3dcolor_mono_d3d"><b>D3DCOLOR_MONO</b></a> and <a href="d3dimref_4vj8.htm#_dx5_d3dcolor_rgb_d3d"><b>D3DCOLOR_RGB</b></a> color models, respectively. In these modes, the color component for a primitive is provided as part of the color for the first vertex of the primitive. In monochromatic lighting modes, only the blue component of the color is interpolated; in RGB lighting modes, of course, the red, green, and blue components are interpolated. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_colorgouraudmono_d3d"></a>D3DPSHADECAPS_COLORGOURAUDMONO </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_colorgouraudrgb_d3d"></a>D3DPSHADECAPS_COLORGOURAUDRGB </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support colored Gouraud shading in the <b>D3DCOLOR_MONO</b> and <b>D3DCOLOR_RGB</b> color models, respectively. In these modes, the color component for a primitive is provided at vertices and interpolated across a face along with the other color components. In monochromatic lighting modes, only the blue component of the color is interpolated; in RGB lighting modes, of course, the red, green, and blue components are interpolated. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_colorphongmono_d3d"></a>D3DPSHADECAPS_COLORPHONGMONO </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_colorphongrgb_d3d"></a>D3DPSHADECAPS_COLORPHONGRGB </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support colored Phong shading in the <b>D3DCOLOR_MONO</b> and <b>D3DCOLOR_RGB</b> color models, respectively. In these modes, vertex parameters are reevaluated on a per-pixel basis. Lighting effects are applied for the red, green, and blue color components in RGB mode, and for the blue component only for monochromatic mode. Phong shading is not currently supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_fogflat_d3d"></a>D3DPSHADECAPS_FOGFLAT </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_foggouraud_d3d"></a>D3DPSHADECAPS_FOGGOURAUD </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_fogphong_d3d"></a>D3DPSHADECAPS_FOGPHONG </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support fog in the flat, Gouraud, and Phong shading models, respectively. Phong shading is not currently supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_specularflatmono_d3d"></a>D3DPSHADECAPS_SPECULARFLATMONO </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_specularflatrgb_d3d"></a>D3DPSHADECAPS_SPECULARFLATRGB </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support specular highlights in flat shading in the <b>D3DCOLOR_MONO</b> and <b>D3DCOLOR_RGB</b> color models, respectively. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_speculargouraudmono_d3d"></a>D3DPSHADECAPS_SPECULARGOURAUDMONO </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_speculargouraudrgb_d3d"></a>D3DPSHADECAPS_SPECULARGOURAUDRGB </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support specular highlights in Gouraud shading in the <a href="d3dimref_4vj8.htm#_dx5_d3dcolor_mono_d3d"><b>D3DCOLOR_MONO</b></a> and <a href="d3dimref_4vj8.htm#_dx5_d3dcolor_rgb_d3d"><b>D3DCOLOR_RGB</b></a> color models, respectively. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_specularphongmono_d3d"></a>D3DPSHADECAPS_SPECULARPHONGMONO </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dpshadecaps_specularphongrgb_d3d"></a>D3DPSHADECAPS_SPECULARPHONGRGB </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can support specular highlights in Phong shading in the <b>D3DCOLOR_MONO</b> and <b>D3DCOLOR_RGB</b> color models, respectively. Phong shading is not currently supported. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwtexturecaps_d3dprimcaps_section_d3d"></a><b>dwTextureCaps</b></dt>
<dd>
Miscellaneous texture-mapping capabilities. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptexturecaps_alpha_d3d"></a>D3DPTEXTURECAPS_ALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Supports RGBA textures in the D3DTEX_DECAL and D3DTEX_MODULATE texture filtering modes. If this capability is not set, then only RGB textures are supported in those modes. Regardless of the setting of this flag, alpha must always be supported in D3DTEX_DECAL_MASK, D3DTEX_DECAL_ALPHA, and D3DTEX_MODULATE_ALPHA filtering modes whenever those filtering modes are available. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptexturecaps_border_d3d"></a>D3DPTEXTURECAPS_BORDER </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Supports <a href="glossary_95pv.htm#_dx5_texture_mapping_glos">texture mapping</a> along borders.  </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptexturecaps_perspective_d3d"></a>D3DPTEXTURECAPS_PERSPECTIVE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="glossary_33qr.htm#_dx5_perspective_correction_glos">Perspective correction</a> is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptexturecaps_pow2_d3d"></a>D3DPTEXTURECAPS_POW2 </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>All nonmipmapped textures must have widths and heights specified as powers of two if this flag is set. (Note that all mipmapped textures must always have dimensions that are powers of two.) </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptexturecaps_squareonly_d3d"></a>D3DPTEXTURECAPS_SQUAREONLY </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>All textures must be square. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptexturecaps_transparency_d3d"></a>D3DPTEXTURECAPS_TRANSPARENCY </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Texture transparency is supported. (Only those texels that are not the current transparent color are drawn.) </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwtexturefiltercaps_d3dprimcaps_section_d3d"></a><b>dwTextureFilterCaps</b></dt>
<dd>
Texture-mapping capabilities. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptfiltercaps_linear_d3d"></a>D3DPTFILTERCAPS_LINEAR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>A weighted average of a 2&times;2 area of texels surrounding the desired pixel is used. This applies to both zooming in and zooming out. If either zooming in or zooming out is supported, then both must be supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptfiltercaps_linearmiplinear_d3d"></a>D3DPTFILTERCAPS_LINEARMIPLINEAR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Similar to D3DPTFILTERCAPS_MIPLINEAR, but interpolates between the two nearest mipmaps. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptfiltercaps_linearmipnearest_d3d"></a>D3DPTFILTERCAPS_LINEARMIPNEAREST </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The mipmap chosen is the mipmap whose texels most closely match the size of the pixel to be textured. The D3DFILTER_LINEAR method is then used with the texture. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptfiltercaps_miplinear_d3d"></a>D3DPTFILTERCAPS_MIPLINEAR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Two mipmaps are chosen whose texels most closely match the size of the pixel to be textured. The D3DFILTER_NEAREST method is then used with each texture to produce two values which are then weighted to produce a final texel value. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptfiltercaps_mipnearest_d3d"></a>D3DPTFILTERCAPS_MIPNEAREST </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Similar to D3DPTFILTERCAPS_NEAREST, but uses the appropriate <a href="glossary_129f.htm#_dx5_mipmap_glos">mipmap</a> for <a href="glossary_95pv.htm#_dx5_texel_glos">texel</a> selection. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptfiltercaps_nearest_d3d"></a>D3DPTFILTERCAPS_NEAREST </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The <a href="glossary_95pv.htm#_dx5_texel_glos">texel</a> with coordinates nearest to the desired pixel value is used. This applies to both zooming in and zooming out. If either zooming in or zooming out is supported, then both must be supported. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwtextureblendcaps_d3dprimcaps_section_d3d"></a><b>dwTextureBlendCaps</b></dt>
<dd>
Texture-blending capabilities. See the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type for discussions of the various texture-blending modes. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_add_d3d"></a>D3DPTBLENDCAPS_ADD </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Supports the additive texture-blending mode, in which the Gouraud interpolants are added to the texture lookup with saturation semantics. This capability corresponds to the <b>D3DTBLEND_ADD</b> member of the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_copy_d3d"></a>D3DPTBLENDCAPS_COPY </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%><a href="imover_3ehw.htm">Copy mode</a> texture-blending (<b>D3DTBLEND_COPY</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_decal_d3d"></a>D3DPTBLENDCAPS_DECAL </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Decal texture-blending mode (<b>D3DTBLEND_DECAL</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_decalalpha_d3d"></a>D3DPTBLENDCAPS_DECALALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Decal-alpha texture-blending mode (<b>D3DTBLEND_DECALALPHA</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_decalmask_d3d"></a>D3DPTBLENDCAPS_DECALMASK </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Decal-mask texture-blending mode (<b>D3DTBLEND_DECALMASK</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_modulate_d3d"></a>D3DPTBLENDCAPS_MODULATE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Modulate texture-blending mode (<b>D3DTBLEND_MODULATE</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_modulatealpha_d3d"></a>D3DPTBLENDCAPS_MODULATEALPHA </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Modulate-alpha texture-blending mode (<b>D3DTBLEND_MODULATEALPHA</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptblendcaps_modulatemask_d3d"></a>D3DPTBLENDCAPS_MODULATEMASK </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Modulate-mask texture-blending mode (<b>D3DTBLEND_MODULATEMASK</b> from the <a href="d3dimref_7fs4.htm"><b>D3DTEXTUREBLEND</b></a> enumerated type) is supported. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwtextureaddresscaps_d3dprimcaps_section_d3d"></a><b>dwTextureAddressCaps</b></dt>
<dd>
Texture-addressing capabilities. This member can be one or more of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptaddresscaps_border_d3d"></a>D3DPTADDRESSCAPS_BORDER </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device supports setting coordinates outside the range [0.0, 1.0] to the border color, as specified by the <b>D3DRENDERSTATE_BORDERCOLOR</b> render state. This ability corresponds to the <a href="d3dimref_6so4.htm#_dx5_d3dtaddress_border_d3d"><b>D3DTADDRESS_BORDER</b></a><b> </b>texture-addressing mode.<p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptaddresscaps_clamp_d3d"></a>D3DPTADDRESSCAPS_CLAMP </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can clamp textures to addresses. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptaddresscaps_independentuv_d3d"></a>D3DPTADDRESSCAPS_INDEPENDENTUV </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can separate the texture-addressing modes of the U and V coordinates of the texture. This ability corresponds to the <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_textureaddressu_d3d"><b>D3DRENDERSTATE_TEXTUREADDRESSU</b></a><b> </b>and<b> <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_textureaddressv_d3d">D3DRENDERSTATE_TEXTUREADDRESSV</a></b> render-state values. <p>
This flag was introduced in DirectX 5.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptaddresscaps_mirror_d3d"></a>D3DPTADDRESSCAPS_MIRROR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can mirror textures to addresses. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dptaddresscaps_wrap_d3d"></a>D3DPTADDRESSCAPS_WRAP </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Device can wrap textures to addresses. </td>
</tr>
</table><br>

</dd>
<dt>
<a name="_dx5_dwstipplewidth_d3dprimcaps_section_d3d"></a><b>dwStippleWidth</b> and <b>dwStippleHeight</b></dt>
<dd>
Maximum width and height of the supported stipple (up to 32&times;32).
</dd>
</dl>

<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in d3dcaps.h.</p>
<p>&nbsp;</p></body>
</HTML>

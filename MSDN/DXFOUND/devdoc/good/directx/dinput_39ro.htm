<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 3: Enumerating Supported Effects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_3_enumerating_supported_effects_dinput"></a>Step 3: Enumerating Supported Effects</h3>
<p>
Now that you've successfully enumerated and created a force feedback device, you can enumerate the effect types it supports. </p>
<p>
Effect enumeration is not strictly necessary if you want to create only standard effects that will be available on any device, such as constant forces. When creating the effect object, you can identify the desired effect type simply by using one of the predefined GUIDs, such as GUID_ConstantForce. (For a complete list of these identifiers, see <a href="dinput_92d0.htm"><b>IDirectInputDevice2::CreateEffect</b></a>.)</p>
<p>
Another, more flexible approach is to enumerate supported effects of a particular type, and obtain the GUID for the effect from the callback function. This is the approach taken in the FFDonuts sample application in the DirectX code samples in the Platform SDK, and you'll adopt it here as well. You could, of course, use the callback to obtain more information about the device's support for the effect – for example, whether it supports an <a href="glossary_8yb7.htm#_dx5_envelope_glos">envelope</a> – but in this tutorial you'll get only the effect GUID.</p>
<p>
First, create the callback function that will be called by DirectInput for each effect enumerated. For information on this standard callback, see <a href="dinput_7pv8.htm"><b>DIEnumEffectsProc</b></a>. You can give the function any name you like.</p>
<pre><code>BOOL  EffectFound = FALSE;  // global flag

BOOL CALLBACK DIEnumEffectsProc(LPCDIEFFECTINFO pei, LPVOID pv)
  {
  *((GUID *)pv) = pei-&gt;guid;
  EffectFound = TRUE;
  return DIENUM_STOP;  // one is enough
  }
 </code></pre>
<p>
The GUID variable pointed to by the application-defined value <i>pv</i> is assigned the value passed in the <a href="dinput_5m7o.htm"><b>DIEFFECTINFO</b></a> structure created by DirectInput for the effect.</p>
<p>
In order to obtain the effect GUID, you set the callback in motion by calling the <a href="dinput_3i5w.htm"><b>IDirectInputDevice2::EnumEffects</b></a> method, as follows:</p>
<pre><code>HRESULT  hr;
GUID     guidEffect;

hr = g_lpdid2Game-&gt;EnumEffects( 
     (LPDIENUMEFFECTSCALLBACK) DIEnumEffectsProc,
     &amp;guidEffect, 
     DIEFT_PERIODIC);
if (FAILED(hr))
  {
  OutputDebugString("Effect enumeration failed\n");
  // Note: success doesn't mean any effects were found,
  // only that the process went smoothly.
  }
 </code></pre>
<p>
Note that you pass the address of a GUID variable, <i>guidEffect</i>, to the <b>EnumEffects</b> method. This address is passed in turn to the callback as the <i>pv</i> parameter. You also restrict the enumeration to periodic effects by setting the flag DIEFT_PERIODIC.</p>
<p>&nbsp;</p></body>
</HTML>

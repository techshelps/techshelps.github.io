<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Secondary Buffers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_creating_secondary_buffers_dsound"></a>Creating Secondary Buffers</h3>
<p>
To create a <a href="glossary_5583.htm#_dx5_sound_buffer_glos">sound buffer</a>, your application fills a <a href="dsound_1010.htm"><b>DSBUFFERDESC</b></a> structure and then calls the <a href="dsound_0604.htm"><b>IDirectSound::CreateSoundBuffer</b></a> method. This method creates a DirectSoundBuffer object and returns a pointer to an <a href="dsound_317o.htm"><b>IDirectSoundBuffer</b></a> interface. Your application uses this interface to manipulate and play the buffer.</p>
<p>
The following example illustrates how to create a basic secondary sound buffer:</p>
<pre><code>BOOL AppCreateBasicBuffer( 
    LPDIRECTSOUND lpDirectSound, 
    LPDIRECTSOUNDBUFFER *lplpDsb) 
{ 
    PCMWAVEFORMAT pcmwf; 
    DSBUFFERDESC dsbdesc; 
    HRESULT hr; 
    // Set up wave format structure. 
    memset(&amp;pcmwf, 0, sizeof(PCMWAVEFORMAT)); 
    pcmwf.wf.wFormatTag = WAVE_FORMAT_PCM; 
    pcmwf.wf.nChannels = 2; 
    pcmwf.wf.nSamplesPerSec = 22050; 
    pcmwf.wf.nBlockAlign = 4; 
    pcmwf.wf.nAvgBytesPerSec = 
        pcmwf.wf.nSamplesPerSec * pcmwf.wf.nBlockAlign; 
    pcmwf.wBitsPerSample = 16; 
    // Set up DSBUFFERDESC structure. 
    memset(&amp;dsbdesc, 0, sizeof(DSBUFFERDESC)); // Zero it out. 
    dsbdesc.dwSize = sizeof(DSBUFFERDESC); 
    // Need default controls (pan, volume, frequency). 
    dsbdesc.dwFlags = DSBCAPS_CTRLDEFAULT; 
    // 3-second buffer. 
    dsbdesc.dwBufferBytes = 3 * pcmwf.wf.nAvgBytesPerSec; 
    dsbdesc.lpwfxFormat = (LPWAVEFORMATEX)&amp;pcmwf; 
    // Create buffer. 
    hr = lpDirectSound-&gt;lpVtbl-&gt;CreateSoundBuffer(lpDirectSound, 
        &amp;dsbdesc, lplpDsb, NULL); 
    if(DS_OK == hr) { 
        // Succeeded. Valid interface is in *lplpDsb. 
        return TRUE; 
    } else { 
        // Failed. 
        *lplpDsb = NULL; 
        return FALSE; 
    } 
} 
 </code></pre>
<p>
Your application should create buffers for the most important sounds first, and then create buffers for other sounds in descending order of importance. DirectSound allocates hardware resources to the first buffer that can take advantage of them.</p>
<p>
If your application must explicitly locate buffers in hardware or software, you can specify either the DSBCAPS_LOCHARDWARE or DSBCAPS_LOCSOFTWARE flag in the <a href="dsound_1010.htm"><b>DSBUFFERDESC</b></a> structure. If the DSBCAPS_LOCHARDWARE flag is specified and there is insufficient hardware memory or mixing capacity, the buffer creation request fails. </p>
<p>
You can ascertain the location of an existing buffer by using the <a href="dsound_43xg.htm"><b>IDirectSoundBuffer::GetCaps</b></a> method and checking the <b>dwFlags</b> member of the <a href="dsound_886c.htm"><b>DSBCAPS</b></a> structure for either the DSBCAPS_LOCHARDWARE or DSBCAPS_LOCSOFTWARE flags. One or the other is always specified.</p>
<p>
When you create a sound buffer, you can indicate that a buffer is static by specifying the DSBCAPS_STATIC flag. If you do not specify this flag, the buffer is a streaming buffer. For more information, see <a href="dsound_1pic.htm">Static and Streaming Sound Buffers</a>.</p>
<p>
DirectSoundBuffer objects are owned by the DirectSound object that created them. When the DirectSound object is released, all buffers created by that object also will be released and should not be referenced.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ and the COM Interface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_c_and_the_com_interface_dxintro"></a>C++ and the COM Interface</h2>
<p>
To C++ programmers, a COM interface is like an abstract base class. That is, it defines a set of signatures and semantics but not the implementation, and no state data is associated with the interface. In a C++ abstract base class, all methods are defined as <i>pure virtual,</i> which means they have no code associated with them.</p>
<p>
Pure virtual C++ functions and COM interfaces both use a device called a <i>vtable</i>. A vtable contains the addresses of all functions that implement the given interface. If you want a program or object to use these functions, you can use the <b>QueryInterface</b> method to verify that the interface exists on an object and to obtain a pointer to that interface. After sending <b>QueryInterface</b>, your application or object actually receives from the object a pointer to the vtable, through which this method can call the interface methods implemented by the object. This mechanism isolates from one another any private data the object uses and the calling client process.</p>
<p>
Another similarity between COM objects and C++ objects is that a method's first argument is the name of the interface or class, called the <i>this</i> argument in C++. Because COM objects and C++ objects are completely binary compatible, the compiler treats COM interfaces like C++ abstract classes and assumes the same syntax. This results in less complex code. For example, the <i>this</i> argument in C++ is treated as an understood parameter and not coded, and the indirection through the vtable is handled implicitly in C++.</p>
<p>&nbsp;</p></body>
</HTML>

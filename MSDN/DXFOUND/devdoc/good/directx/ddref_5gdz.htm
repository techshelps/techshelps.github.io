<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDVIDEOPORTCAPS</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_ddvideoportcaps_ddraw"></a>DDVIDEOPORTCAPS</h1>
<p>
The <b>DDVIDEOPORTCAPS</b> structure describes the capabilities and alignment restrictions of a video port. This structure is used with the <a href="ddref_72rb.htm"><b>IDDVideoPortContainer::EnumVideoPorts</b></a> method.</p>
<pre><code>typedef struct _DDVIDEOPORTCAPS { 
    DWORD dwSize;           // Size of the DDVIDEOPORTCAPS structure
    DWORD dwFlags;          // Indicates which fields contain data
    DWORD dwMaxWidth;       // Max width of the video port field
    DWORD dwMaxVBIWidth;    // Max width of the VBI data
    DWORD dwMaxHeight;      // Max height of the video port field
    DWORD dwVideoPortID;    // Video port ID (0 - (dwMaxVideoPorts -1))
    DWORD dwCaps;           // Video port capabilities
    DWORD dwFX;             // More video port capabilities
    DWORD dwNumAutoFlipSurfaces;          // Number of autoflippable surfaces
    DWORD dwAlignVideoPortBoundary;       // Byte restriction of placement within the surface
    DWORD dwAlignVideoPortPrescaleWidth;  // Byte restriction of width after prescaling
    DWORD dwAlignVideoPortCropBoundary;   // Byte restriction of left cropping
    DWORD dwAlignVideoPortCropWidth;      // Byte restriction of cropping width
    DWORD dwPreshrinkXStep;           // Width can be shrunk in steps of 1/x
    DWORD dwPreshrinkYStep;           // Height can be shrunk in steps of 1/x
    DWORD dwNumVBIAutoFlipSurfaces;   // Number of VBI autoflippable surfaces
    DWORD dwReserved1;                // Reserved for future use
    DWORD dwReserved2;                // Reserved for future use
} DDVIDEOPORTCAPS, *LPDDVIDEOPORTCAPS; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwSize</b></dt>
<dd>
Size of the structure, in bytes. This must be initialized before use.</dd>
<dt>
<b>dwFlags</b></dt>
<dd>
Flag values indicating the fields that contain valid data. The following flags are defined. 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=37%>DDVPD_WIDTH </td>
<td width=63%>The <b>dwMaxWidth</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=37%>DDVPD_HEIGHT </td>
<td width=63%>The <b>dwMaxHeight</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=37%>DDVPD_ID </td>
<td width=63%>The <b>dwVideoPortID</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=37%>DDVPD_CAPS </td>
<td width=63%>The <b>dwCaps</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=37%>DDVPD_FX </td>
<td width=63%>The <b>dwFX</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=37%>DDVPD_AUTOFLIP </td>
<td width=63%>The <b>dwNumAutoFlipSurfaces</b> member is valid. </td>
</tr>
<tr valign=top>
<td width=37%>DDVPD_ALIGN </td>
<td width=63%>The <b>dwAlignVideoPortBoundary</b>, <b>dwAlignVideoPortPrescaleWidth</b>, <b>dwAlignVideoPortCropBoundary,</b> and <b>dwAlignVideoPortCropWidth</b> are valid. </td>
</tr>
</table><br>

</dd>
<dt>
<b>dwMaxWidth</b></dt>
<dd>
Maximum <a href="glossary_1777.htm#_dx5_width_glos">width</a> of the video port field.</dd>
<dt>
<b>dwMaxVBIWidth</b></dt>
<dd>
Maximum width of the <a href="glossary_76pf.htm#_dx5_vbi_glos">VBI</a> data.</dd>
<dt>
<b>dwMaxHeight</b></dt>
<dd>
Maximum height of the video port field.</dd>
<dt>
<b>dwVideoPortID</b></dt>
<dd>
Zero based index identifying the video port.</dd>
<dt>
<b>dwCaps</b></dt>
<dd>
Video port capabilities. 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=54%>DDVPCAPS_AUTOFLIP </td>
<td width=46%>Flip can be performed automatically to avoid <a href="glossary_95pv.htm#_dx5_tearing_glos">tearing</a> when a VREF occurs. If the data is being interleaved in memory, it will flip on every other VREF. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_INTERLACED </td>
<td width=46%>Supports interlaced video. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_NONINTERLACED </td>
<td width=46%>Supports non-interlaced video. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_READBACKFIELD </td>
<td width=46%>Supports the <a href="ddref_1393.htm"><b>IDirectDrawVideoPort::GetFieldPolarity</b></a> method.</td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_READBACKLINE </td>
<td width=46%>Supports the <a href="ddref_3ph3.htm"><b>IDirectDrawVideoPort::GetVideoLine</b></a> method.</td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_SHAREABLE </td>
<td width=46%>Supports two <a href="glossary_6zar.htm#_dx5_genlocking_glos">genlocked</a> video streams that share the video port, where one stream uses the even fields and the other uses the odd fields. Separate parameters (including address, scaling, cropping, etc.) are maintained for both fields. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_SKIPEVENFIELDS </td>
<td width=46%>Even fields of video can be automatically discarded. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_SKIPODDFIELDS </td>
<td width=46%>Odd fields of video can be automatically discarded. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_SYNCMASTER </td>
<td width=46%>Can drive the graphics sync (refresh rate) based on the video port sync. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_SYSTEMMEMORY</td>
<td width=46%>Capable of writing to surfaces created in system memory.</td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_VBISURFACE </td>
<td width=46%>Data within the <a href="glossary_76pf.htm#_dx5_vbi_glos">VBI</a> can be written to a different surface. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_COLORCONTROL </td>
<td width=46%>Can perform color control operations on incoming data before writing to the frame buffer.</td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_OVERSAMPLEDVBI </td>
<td width=46%>Can accept VBI data in a different format or <a href="glossary_1777.htm#_dx5_width_glos">width</a> than the regular video data. </td>
</tr>
<tr valign=top>
<td width=54%>DDVPCAPS_VBIANDVIDEOINDEPENDENT</td>
<td width=46%>Indicates that the VBI and video portions of the video stream can be controlled by independent processes.</td>
</tr>
</table><br>

</dd>
<dt>
<b>dwFX</b></dt>
<dd>
Additional video port capabilities. 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=39%>DDVPFX_CROPTOPDATA </td>
<td width=61%>Limited cropping is available to crop VBI data. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_CROPX </td>
<td width=61%>Incoming data can be cropped in the x direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_CROPY </td>
<td width=61%>Incoming data can be cropped in the y direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_INTERLEAVE </td>
<td width=61%>Supports interleaving interlaced fields in memory. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_MIRRORLEFTRIGHT </td>
<td width=61%>Supports mirroring left to right as the video data is written into the frame buffer. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_MIRRORUPDOWN </td>
<td width=61%>Supports mirroring top to bottom as the video data is written into the frame buffer. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESHRINKX </td>
<td width=61%>Data can be arbitrarily shrunk in the x direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESHRINKY </td>
<td width=61%>Data can be arbitrarily shrunk in the y direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESHRINKXB </td>
<td width=61%>Data can be binary shrunk (1/2, 1/4, 1/8, etc.) in the x direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESHRINKYB </td>
<td width=61%>Data can be binary shrunk (1/2, 1/4, 1/8, etc.) in the y direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPCAPS_PRESHRINKXS </td>
<td width=61%>Data can be shrunk in the x direction by increments of <i>1/x</i>, where <i>x</i> is specified in the <b>dwShrinkXStep</b> member. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPCAPS_PRESHRINKYS </td>
<td width=61%>Data can be shrunk in the y direction by increments of <i>1/y</i>, where <i>y</i> is specified in the <b>dwShrinkYStep</b> </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESTRETCHX </td>
<td width=61%>Data can be arbitrarily stretched in the x direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESTRETCHY </td>
<td width=61%>Data can be arbitrarily stretched in the y direction before it is written to the surface. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESTRETCHXN </td>
<td width=61%>Data can be integer stretched in the x direction before it is written to the surface. (1x, 2x, 3x, etc.) </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_PRESTRETCHYN </td>
<td width=61%>Data can be integer stretched in the y direction before it is written to the surface. (1x, 2x, 3x, etc.) </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_VBICONVERT </td>
<td width=61%>Data within the <a href="glossary_76pf.htm#_dx5_vbi_glos">VBI</a> can be converted independently of the remaining video data. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_VBINOINTERLEAVE</td>
<td width=61%>Interleaving can be disabled for data within the VBI.</td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_VBINOSCALE </td>
<td width=61%>Scaling can be disabled for data within the VBI. </td>
</tr>
<tr valign=top>
<td width=39%>DDVPFX_IGNOREVBIXCROP </td>
<td width=61%>The video port can ignore the left and right cropping coordinates when cropping oversampled VBI data. </td>
</tr>
</table><br>

</dd>
<dt>
<b>dwNumAutoFlipSurfaces</b></dt>
<dd>
Number of autoflippable surfaces supported by the video port.</dd>
<dt>
<b>dwAlignVideoPortBoundary</b></dt>
<dd>
Byte restriction of placement within the surface.</dd>
<dt>
<b>dwAlignVideoPortPrescaleWidth</b></dt>
<dd>
Byte restriction of <a href="glossary_1777.htm#_dx5_width_glos">width</a> after prescaling.</dd>
<dt>
<b>dwAlignVideoPortCropBoundary</b></dt>
<dd>
Byte restriction of left cropping.</dd>
<dt>
<b>dwAlignVideoPortCropWidth</b></dt>
<dd>
Byte restriction of cropping width.</dd>
<dt>
<b>dwPreshrinkXStep</b></dt>
<dd>
Width can be shrunk in the x direction in steps of 1/<b>dwPreshrinkXStep</b><i>.</i></dd>
<dt>
<b>dwPreshrinkYStep</b></dt>
<dd>
Height can be shrunk in the y direction in steps of <i>1/</i><b>dwPreshrinkYStep</b><i>.</i></dd>
<dt>
<b>dwNumVBIAutoFlipSurfaces</b></dt>
<dd>
Number of autoflipping surfaces capable of receiving data transmitted during the vertical blanking interval (VBI) independent from the remainder of the video stream. When constructing the autoflip chain, the number of VBI surfaces must equal the number of surfaces receiving the remainder of the video data.</dd>
<dt>
<b>dwReserved1</b> and <b>dwReserved2</b></dt>
<dd>
Reserved; set to zero.
</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in dvp.h.</p>
<p>&nbsp;</p></body>
</HTML>

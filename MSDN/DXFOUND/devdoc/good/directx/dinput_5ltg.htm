<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 6: Retrieving Data from the Keyboard</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_6_retrieving_data_from_the_keyboard_dinput"></a>Step 6: Retrieving Data from the Keyboard</h3>
<p>
Once a device is acquired, your application can start retrieving data from it. The simplest way to do this is to call the <a href="dinput_0aes.htm"><b>IDirectInputDevice::GetDeviceState</b></a> method, which takes a snapshot of the device's state at the time of the call.</p>
<p>
The <b>GetDeviceState</b> method accepts two parameters: the size of a buffer to be filled with device state data, and a pointer to that buffer. For keyboards, always declare a buffer of 256 unsigned bytes.</p>
<p>
The following sample attempts to retrieve the state of the keyboard. If this fails, it calls an application-defined sample function to deallocate existing DirectInput objects, if any. (See <a href="dinput_4u9g.htm">Sample Function 2: DI_Term</a>.)</p>
<p>
After retrieving the keyboard's current state, your application may respond to specific keys that were down at the time of the call. Each element in the buffer represents a key. If an element's high bit is on, the key was down at the moment of the call; otherwise, the key was up. To check the state of a given key, use the DirectInput <a href="dinput_56t1.htm">Keyboard Device Constants</a><b> </b>to index the buffer for a given key.</p>
<p>
The following skeleton function, called from the main loop of a hypothetical spaceship game, uses the <a href="dinput_0aes.htm"><b>IDirectInputDevice::GetDeviceState</b></a> method to poll the keyboard. It then checks to see if the left arrow, right arrow, up arrow or down arrow keys were pressed when the device state was retrieved. This is accomplished with the <b>KEYDOWN</b> macro defined in the body of the function. The macro accepts a buffer's variable name and an index value, then checks the byte at the specified index to see if the high bit is set and returns TRUE if it is.</p>
<pre><code>void WINAPI ProcessKBInput() 
{ 
    #define KEYDOWN(name,key) (name[key] &amp; 0x80) 
 
    char     buffer[256]; 
    HRESULT  hr; 
 
    hr = g_lpDIDevice-&gt;GetDeviceState(sizeof(buffer),(LPVOID)&amp;buffer); 
    if FAILED(hr) 
    { 
         // If it failed, the device has probably been lost. 
         // We should check for (hr == DIERR_INPUTLOST) 
         // and attempt to reacquire it here. 
         return; 
    } 
 
    // Turn the ship right or left 
    if (KEYDOWN(buffer, DIK_RIGHT)); 
        // Turn right. 
    else if(KEYDOWN(buffer, DIK_LEFT)); 
        // Turn left. 
 
    // Thrust or stop the ship 
    if (KEYDOWN(buffer, DIK_UP)) ; 
        // Move the ship forward. 
    else if (KEYDOWN(buffer, DIK_DOWN)); 
        // Stop the ship. 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

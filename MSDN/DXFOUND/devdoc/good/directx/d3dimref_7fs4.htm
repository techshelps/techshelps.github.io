<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DTEXTUREBLEND</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_d3dtextureblend_d3d"></a>D3DTEXTUREBLEND</h1>
<p>
The <b>D3DTEXTUREBLEND</b> enumerated type defines the supported texture-blending modes. This enumerated type is used by the <b>D3DRENDERSTATE_TEXTUREMAPBLEND</b> render state in the <a href="d3dimref_3pk4.htm"><b>D3DRENDERSTATETYPE</b></a> enumerated type.</p>
<pre><code>typedef enum _D3DTEXTUREBLEND { 
    D3DTBLEND_DECAL         = 1, 
    D3DTBLEND_MODULATE      = 2, 
    D3DTBLEND_DECALALPHA    = 3, 
    D3DTBLEND_MODULATEALPHA = 4, 
    D3DTBLEND_DECALMASK     = 5, 
    D3DTBLEND_MODULATEMASK  = 6, 
    D3DTBLEND_COPY          = 7, 
    D3DTBLEND_ADD           = 8, 
    D3DTBLEND_FORCE_DWORD   = 0x7fffffff, 
} D3DTEXTUREBLEND; 
 </code></pre>
<h4>Members</h4>

<dl>
<dt>
<a name="_dx5_d3dtblend_decal_d3d"></a><b>D3DTBLEND_DECAL</b></dt>
<dd>
Decal texture-blending mode is supported. In this mode, the RGB and alpha values of the texture replace the colors that would have been used with no texturing.
<pre><code><i>cPix </i>=<i> cTex </i>
<i>aPix </i>=<i> aTex </i>
</code></pre>
</dd>
<dt>
<a name="_dx5_d3dtblend_modulate_d3d"></a><b>D3DTBLEND_MODULATE</b></dt>
<dd>
Modulate texture-blending mode is supported. In this mode, the RGB values of the texture are multiplied with the RGB values that would have been used with no texturing. Any alpha values in the texture replace the alpha values in the colors that would have been used with no texturing; if the texture does not contain an alpha component, alpha values at the vertices in the source are interpolated between vertices.
<pre><code><i>cPix = cSrc </i>*<i> cTex </i>
<i>aPix = aTex </i>
</code></pre>
</dd>
<dt>
<a name="_dx5_d3dtblend_decalalpha_d3d"></a><b>D3DTBLEND_DECALALPHA</b></dt>
<dd>
Decal-alpha texture-blending mode is supported. In this mode, the RGB and alpha values of the texture are blended with the colors that would have been used with no texturing, according to the following formula:</dd>
</dl>

<p>
<img src="images/d3dtexbl.gif" border=0></p>
<p class=indent1>
In this formula, C stands for color, A for alpha, t for texture, and o for original object (before blending).</p>
<p class=indent1>
In the <b>D3DTBLEND_DECALALPHA</b> mode, any alpha values in the texture replace the alpha values in the colors that would have been used with no texturing.</p>
<pre><code><i>cPix = (cSrc </i>*<i> (10 - aTex))</i> +<i> (aTex</i> *<i> cTex) </i>
<i>aPix = aSrc </i>
</code></pre>

<dl>
<dt>
<a name="_dx5_d3dtblend_modulatealpha_d3d"></a><b>D3DTBLEND_MODULATEALPHA</b></dt>
<dd>
Modulate-alpha texture-blending mode is supported. In this mode, the RGB values of the texture are multiplied with the RGB values that would have been used with no texturing, and the alpha values of the texture are multiplied with the alpha values that would have been used with no texturing.
<pre><code><i>cPix = cSrc </i>*<i> cTex </i>
<i>aPix = aSrc </i>*<i> aTex </i>
</code></pre>
</dd>
<dt>
<a name="_dx5_d3dtblend_decalmask_d3d"></a><b>D3DTBLEND_DECALMASK</b></dt>
<dd>
Decal-mask texture-blending mode is supported.
<pre><code><i>cPix = lsb(aTex) </i>?<i> cTex </i>:<i> cSrc </i>
<i>aPix = aSrc </i>
</code></pre>

<p>
When the least-significant bit of the texture's alpha component is zero, the effect is as if texturing were disabled.
</dd>
<dt>
<a name="_dx5_d3dtblend_modulatemask_d3d"></a><b>D3DTBLEND_MODULATEMASK</b></dt>
<dd>
Modulate-mask texture-blending mode is supported.
<pre><code><i>cPix = lsb(aTex)</i> ?<i> cTex * cSrc</i> :<i> cSrc </i>
<i>aPix = aSrc </i>
</code></pre>

<p>
When the least-significant bit of the texture's alpha component is zero, the effect is as if texturing were disabled.
</dd>
<dt>
<a name="_dx5_d3dtblend_copy_d3d"></a><b>D3DTBLEND_COPY</b></dt>
<dd>
Copy texture-blending mode is supported. This mode is an optimization for software rasterization; for applications using a HAL, it is equivalent to the <b>D3DTBLEND_DECAL</b> texture-blending mode.
<p>
To use copy mode, textures must use the same pixel format and palette format as the destination surface; otherwise nothing is rendered. Copy mode does no lighting and simply copies texture pixels to the screen. This is often a good technique for prelit textured scenes.

<pre><i><code>cPix = cTex 
aPix = aTex 
</code></i></pre>

<p>
For more information, see <a href="imover_3ehw.htm">Copy Texture-blending Mode</a>.
</dd>
<dt>
<a name="_dx5_d3dtblend_add_d3d"></a><b>D3DTBLEND_ADD</b></dt>
<dd>
Add the Gouraud interpolants to the texture lookup with saturation semantics (that is, if the color value overflows it is set to the maximum possible value). This member was introduced in DirectX 5.
<pre><code><i>cPix = cTex </i>+ <i>cSrc</i>
<i>aPix = aSrc </i>
</code></pre>
</dd>
<dt>
<a name="_dx5_d3dtblend_force_dword_d3d"></a><b>D3DTBLEND_FORCE_DWORD</b></dt>
<dd>
Forces this enumerated type to be 32 bits in size. 
</dd>
</dl>

<h4>Remarks</h4>
<p>
In the formulas given for the members of this enumerated type, the placeholders have the following meanings:
<ul>
<li>
<i>cTex</i> is the color of the source texel</li>
<li>
<i>aTex</i> is the alpha component of the source texel</li>
<li>
<i>cSrc</i> is the interpolated color of the source primitive</li>
<li>
<i>aSrc</i> is the alpha component of the source primitive</li>
<li>
<i>cPix</i> is the new blended color value</li>
<li>
<i>aPix</i> is the new blended alpha value </li>
</ul>
<p>
Modulation combines the effects of lighting and texturing. Because colors are specified as values between and including 0 and 1, modulating (multiplying) the texture and preexisting colors together typically produces colors that are less bright than either source. The brightness of a color component is undiminished when one of the sources for that component is white (1). The simplest way to ensure that the colors of a texture do not change when the texture is applied to an object is to ensure that the object is white (1,1,1).</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in d3dtypes.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The DrawPrimitive Methods</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_the_drawprimitive_methods_d3d"></a>The DrawPrimitive Methods</h2>
<p>
This section discusses the DrawPrimitive methods, an innovation in DirectX 5 that both simplifies Immediate Mode programming and adds new flexibility. Information is divided into the following groups.
<ul>
<li>
<a href="#_dx5_api_extensions_for_drawprimitive_d3d">API Extensions for DrawPrimitive</a> </li>
<li>
<a href="#_dx5_architecture_of_drawprimitive_capabilities_d3d">Architecture of DrawPrimitive Capabilities</a> </li>
<li>
<a href="#_dx5_using_both_drawprimitive_and_execute_buffers_d3d">Using Both DrawPrimitive and Execute Buffers</a> </li>
<li>
<a href="#_dx5_a_simple_drawprimitive_example_d3d">A Simple DrawPrimitive Example</a> </li>
</ul>

<h4><a name="_dx5_api_extensions_for_drawprimitive_d3d"></a>API Extensions for DrawPrimitive</h4>
<p>
There is a way to tap into the power of Immediate Mode programming without explicitly using <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffers</a>. The heart of this system is the <a href="d3dimref_93tw.htm"><b>IDirect3DDevice2::DrawPrimitive</b></a> method (and its companion, <a href="d3dimref_4co4.htm"><b>IDirect3DDevice2::DrawIndexedPrimitive</b></a>).</p>
<p>
The <b>IDirect3D</b> and <a href="d3dimref_9c4k.htm"><b>IDirect3DDevice</b></a> interfaces have been extended to support the ability to draw primitives. These extended versions are called the <a href="d3dimref_0p44.htm"><b>IDirect3D2</b></a> and <a href="d3dimref_1z1g.htm"><b>IDirect3DDevice2</b></a> interfaces. </p>
<p>
To use <b>IDirect3DDevice2</b>, retrieve a pointer to the interface by calling the <a href="d3dimref_0dus.htm"><b>IDirect3D2::CreateDevice</b></a> method. If you need to use some of the methods in <b>IDirect3DDevice</b> that are not supported in <b>IDirect3DDevice2</b>, you can call <a href="dxintro_0pgv.htm"><b>IDirect3DDevice2::QueryInterface</b></a> to retrieve a pointer to an <b>IDirect3DDevice</b> interface.</p>
<p>
The <b>IDirect3DViewport</b> interface has also been extended. The new interface, <a href="d3dimref_97l0.htm"><b>IDirect3DViewport2</b></a>, introduces a closer correspondence between the dimensions of the clipping volume and the viewport than was true for the <b>IDirect3DViewport</b> interface.</p>

<h4><a name="_dx5_architecture_of_drawprimitive_capabilities_d3d"></a>Architecture of DrawPrimitive Capabilities</h4>
<p>
The methods provided by the <a href="d3dimref_0p44.htm"><b>IDirect3D2</b></a> and <a href="d3dimref_1z1g.htm"><b>IDirect3DDevice2</b></a> interfaces enable a user to avoid the <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a> model. Avoiding the execute buffer model can be useful for two reasons:
<ol>
<li>
A new Direct3D developer wants to get up and running quickly.</li>
<li>
Certain classes of applications (for example, BSP-style games with graphics engines that produce transformed, lit and clipped triangles) do not lend themselves easily to porting to the execute-buffer model. The execute-buffer model does not inherently impose restrictions, but it can be difficult to use.</li>
</ol>
<p>
The <b>IDirect3DDevice2</b> interface can be created with the <a href="d3dimref_0dus.htm"><b>IDirect3D2::CreateDevice</b></a> method. This method takes the DirectDraw surface to render into as a parameter, enabling applications to avoid querying the device interface off of the DirectDraw surface.</p>
<p>
A "primitive" in the DrawPrimitive API can be one of the following constructs:
<ul>
<li>
Point list</li>
<li>
Line list</li>
<li>
Line strip</li>
<li>
Triangle list</li>
<li>
Triangle strip</li>
<li>
Triangle fan</li>
</ul>
<p>
The <a href="d3dimref_93tw.htm"><b>IDirect3DDevice2::DrawPrimitive</b></a> and <a href="d3dimref_4co4.htm"><b>IDirect3DDevice2::DrawIndexedPrimitive</b></a> methods draw a primitive in a single call. When possible, these functions call into the driver directly to draw the primitive.</p>
<p>
Alternatively, the application can specify the vertices one at a time. To draw a primitive by specifying the vertices individually, the application calls <a href="d3dimref_1ctg.htm"><b>IDirect3DDevice2::Begin</b></a> and specifies the primitive and vertex type, <a href="d3dimref_73xg.htm"><b>IDirect3DDevice2::Vertex</b></a> to specify each vertex, and <a href="d3dimref_3f38.htm"><b>IDirect3DDevice2::End</b></a> to finish drawing the primitive. Similarly, to draw an indexed primitive by specifying the indices individually, the application calls <a href="d3dimref_08bo.htm"><b>IDirect3DDevice2::BeginIndexed</b></a> and specifies the primitive and vertex type, <a href="d3dimref_5v38.htm"><b>IDirect3DDevice2::Index</b></a> to specify each index, and <a href="d3dimref_3f38.htm"><b>IDirect3DDevice2::End</b></a> to finish drawing the primitive.</p>
<p>
<b>IDirect3DDevice2::Vertex</b> is the only valid method between calls to <b>IDirect3DDevice2::Begin</b> and <b>IDirect3DDevice2::End</b>.</p>
<p>
<b>IDirect3DDevice2::Index</b> is the only valid method between calls to <b>IDirect3DDevice2::BeginIndexed</b> and <b>IDirect3DDevice2::End</b>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The DrawPrimitive methods are designed to enable asynchronous operation. Unless you specify D3DDP_WAIT when you call <a href="d3dimref_93tw.htm"><b>IDirect3DDevice2::DrawPrimitive</b></a> or <a href="d3dimref_4co4.htm"><b>IDirect3DDevice2::DrawIndexedPrimitive</b></a>, the method will fail if the 3-D hardware cannot currently accept the command, returning DDERR_WASSTILLDRAWING. This behavior is modeled after the DirectDraw <a href="ddref_6ref.htm"><b>IDirectDrawSurface3::Blt</b></a> operation, where DDBLT_WAIT specifies that the call should return after the command has actually been queued up for execution by the accelerator.</p>

<h4><a name="_dx5_using_both_drawprimitive_and_execute_buffers_d3d"></a>Using Both DrawPrimitive and Execute Buffers</h4>
<p>
DirectX 5 applications can use both styles of programming in the same application by using the two interfaces to the device object. The application should retrieve an <b>IDirect3D2</b> interface by calling the <b>QueryInterface</b> method on the DirectDraw object and then use the <a href="d3dimref_0dus.htm"><b>IDirect3D2::CreateDevice</b></a> method to create a device object. The application should keep the <b>IDirect3DDevice2 </b>interface thus obtained and also call <b>IDirect3DDevice2::QueryInterface</b> to retrieve an <b>IDirect3DDevice </b>interface.</p>
<p>
It is recommended that you use <b>IDirect3DMaterial2</b> and <b>IDirect3DTexture2</b> interfaces (created using <b>IDirect3D2</b>). You can get handles from these objects using the <b>IDirect3DDevice2</b> interface as an argument to the <b>IDirect3DMaterial2::GetHandle</b> and <b>IDirect3DTexture2::GetHandle</b> methods. You can use these handles both in <b>IDirect3DDevice2</b> methods and in execute buffers rendered through <b>IDirect3DDevice</b>. This is because <b>IDirect3DDevice2</b> and <b>IDirect3DDevice</b> are two interfaces to the same underlying object.</p>
<p>
Similarly, you can create viewport objects using <b>IDirect3D2</b> and use the new <b>IDirect3DViewport2</b> interface. These viewport objects can be added to the device using <a href="d3dimref_0q78.htm"><b>IDirect3DDevice2::AddViewport</b></a>. Because the <b>IDirect3DViewport2</b> interface inherits from <b>IDirect3DViewport</b>, you can pass it to <b>IDirect3DDevice</b> methods that expect the <b>IDirect3DViewport</b> interface.</p>

<h4><a name="_dx5_a_simple_drawprimitive_example_d3d"></a>A Simple DrawPrimitive Example</h4>
<p>
For a complete working example of an application that uses the DrawPrimitive methods, see the files in the Flip3D directory in the samples that ship with the DirectX 5 Programmer's Reference. </p>
<pre><code>
/* 
 * Constants 
 */ 
#define NUM_VERTICES 3 
#define NUM_TRIANGLES 1 
D3DTLVERTEX src_v[NUM_VERTICES]; 
WORD src_t[NUM_TRIANGLES * 3]; 
DWORD hTex; 
D3DSTATEVALUE hMat; 
 
/* 
 * A routine that assumes that the above data is initialized 
 */ 
 
BOOL RenderScene(LPDIRECT3DDEVICE2 lpDev, LPDIRECT3DVIEWPORT lpView, 
    LPD3DRECT lpExtent) 
{ 
    if (IDirect3DDevice2_BeginScene(lpDev) != D3D_OK) 
        return FALSE; 
    if (IDirect3DDevice2_SetLightState(lpDev, D3DLIGHTSTATE_MATERIAL, 
            hMat) != D3D_OK) 
        return FALSE; 
    if (IDirect3DDevice2_SetRenderState(lpDev, 
            D3DRENDERSTATE_TEXTUREHANDLE, hTex) != D3D_OK) 
        return FALSE; 
    if (IDirect3DDevice2_DrawIndexedPrimitive(lpDev, 
            DPT_TRIANGLELIST, DVT_TLVERTEX, 
            (LPVOID)src_v, NUM_VERTICES,(LPWORD)src_t, NUM_TRIANGLES*3) 
             != D3D_OK) 
        return FALSE; 
    if (IDirect3DDevice2_EndScene(lpDev) != D3D_OK) 
        return FALSE; 
 
    return TRUE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

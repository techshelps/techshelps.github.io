<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 5: Gaining Access to the Joystick</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_5_gaining_access_to_the_joystick_dinput"></a>Step 5: Gaining Access to the Joystick</h3>
<p>
After your application sets a joystick's behavior, it can acquire access to the device by calling the <a href="dinput_2qlw.htm"><b>IDirectInputDevice::Acquire</b></a> method. The application must acquire the device before retrieving data from it. The <b>Acquire</b> method accepts no parameters.</p>
<p>
The Space Donuts application takes care of acquisition in the <b>ReacquireInput</b> function. This function does double duty, serving both to acquire the device on startup and to reacquire it if for some reason a <a href="dinput_7yk4.htm#_dx5_dierr_inputlost_dinput">DIERR_INPUTLOST</a> error is returned when the application tries to get input data.</p>
<p>
In the following code, <i>g_pdevCurrent</i> is a global pointer to whatever DirectInput device is currently in use.</p>
<pre><code>BOOL ReacquireInput(void) 
{ 
    HRESULT hRes; 
 
    // if we have a current device 
    if (g_pdevCurrent) 
    { 
       // acquire the device 
       hRes = IDirectInputDevice_Acquire(g_pdevCurrent); 
       // The call above is a macro that expands to: 
       // g_pdevCurrent-&gt;lpVtbl-&gt;Acquire(g_pdevCurrent); 
 
       if (SUCCEEDED(hRes)) 
       { 
          // acquisition successful 
          return TRUE; 
       } 
       else 
       { 
          // acquisition failed 
          return FALSE; 
       } 
    } 
    else 
    { 
       // we don't have a current device 
       return FALSE; 
    } 
} 
 </code></pre>
<p>
In this example, acquisition is effected by a call to <b>IDirectInputDevice_Acquire</b>, a macro defined in Dinput.h that simplifies the C call to the <a href="dinput_2qlw.htm"><b>IDirectInputDevice::Acquire</b></a> method.</p>
<p>&nbsp;</p></body>
</HTML>

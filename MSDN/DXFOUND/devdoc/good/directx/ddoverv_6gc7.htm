<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 5: Updating the Overlay Display Position</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_5_updating_the_overlay_display_position_ddraw"></a>Step 5: Updating the Overlay Display Position</h3>
<p>
After displaying the overlay surface, you might not need to do anything else. However, some software might need to reposition the overlay surface. The Mosquito sample uses the <a href="ddref_1oaf.htm"><b>IDirectDrawSurface3::SetOverlayPosition</b></a> method to reposition the overlay, as shown in the following example.</p>
<pre><code>// Set X- and Y-coordinates
    .
    .
    .
    // We need to check for any alignment restrictions on the X position
    // and align it if necessary.
    if (g_dwOverlayXPositionAlignment)
        dwXAligned = g_nOverlayXPos - g_nOverlayXPos % g_dwOverlayXPositionAlignment;
    else
        dwXAligned = g_nOverlayXPos;

    // Set the overlay to its new position.
    ddrval = g_lpddsOverlay-&gt;SetOverlayPosition(dwXAligned, g_nOverlayYPos);
    if (ddrval == DDERR_SURFACELOST)
    {
        if (!RestoreAllSurfaces()) 
            return;
    }
 </code></pre>
<p>
The preceding example starts by aligning the rectangle to meet any destination rectangle boundary alignment restrictions that might exist. The global variable that it checks, <i>g_dwOverlayXPositionAlignment</i>, was set earlier to equal the value reported in the <b>dwAlignBoundaryDest</b> member of the <a href="ddref_1a9j.htm"><b>DDCAPS</b></a> structure when the application previously called the <a href="ddref_748n.htm"><b>IDirectDraw2::GetCaps</b></a> method. (For details, see <a href="ddoverv_04l3.htm">Step 4.1: Determining the Minimum Display Requirements</a>). If destination alignment restrictions exist, the example adjusts the new x-coordinate to be pixel-aligned accordingly. Failing to meet this requirement will cause the overlay surface not to be displayed.</p>
<p>
After making any requisite adjustments to the new x-coordinate, the example calls <b>IDirectDrawSurface3::SetOverlayPosition</b> method to reposition the overlay. For the call, the first parameter is the aligned x-coordinate, and the second parameter is the new y-coordinate. These values represent the new location of the overlay's top-left corner. Width and height information are not accepted, nor are they needed because DirectDraw already knows the dimensions of the surface from the <a href="ddref_0nxz.htm"><b>IDirectDrawSurface3::UpdateOverlay</b></a> method made to initially display the overlay. If the call fails because one or more surfaces were lost, the example calls an application-defined function to restore them and reload their bitmaps.</p>
<p>
<b>Note:</b>&nbsp;&nbsp;Take care not to use coordinates too close to the bottom or right edge of the target surface. The <b>IDirectDraw2::SetOverlayPosition</b> method does not perform clipping for you; using coordinates that would potentially make the overlay run off the edge of the target surface will cause the method to fail, returning <a href="ddref_71rr.htm#_dx5_dderr_invalidposition_ddraw">DDERR_INVALIDPOSITION</a>.</p>
<p>&nbsp;</p></body>
</HTML>

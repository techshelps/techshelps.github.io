<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 2: Creating the DirectInput Keyboard Device</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_2_creating_the_directinput_keyboard_device_dinput"></a>Step 2: Creating the DirectInput Keyboard Device</h3>
<p>
After creating the DirectInput object, your application must create the keyboard object–the device–and retrieve a pointer to an <a href="dinput_2mus.htm"><b>IDirectInputDevice</b></a> interface. The device will perform most of the keyboard-related tasks, using the methods of the interface.</p>
<p>
To do this your application must call the <a href="dinput_4jw4.htm"><b>IDirectInput::CreateDevice</b></a> method, as shown in <a href="dinput_0p4l.htm">Sample Function 1: DI_Init</a>. <b>CreateDevice</b> accepts three parameters.</p>
<p>
The first parameter is the GUID for the device being created. Since the system keyboard will be used, your application should pass the <i>GUID_SysKeyboard</i> value.</p>
<p>
The second parameter is the address of a variable that will be initialized with a valid <b>IDirectInputDevice</b> interface pointer if the call succeeds.</p>
<p>
The third parameter specifies the address of the controlling object's <b>IUnknown</b> interface for use in COM aggregation. Your application will likely not use aggregation, in which case the parameter is NULL.</p>
<p>
The following example attempts to retrieve a pointer to an <b>IDirectInputDevice</b> interface. If this fails, it calls the DI_Term application-defined sample function to deallocate existing DirectInput objects, if any.</p>
<p>
<b>Note</b>&nbsp;&nbsp;In all the examples, <i>g_lpdi</i> is the initialized pointer to the DirectInput object. The method calls are in the C++ form.</p>
<pre><code>HRESULT              hr; 
LPDIRECTINPUTDEVICE  g_lpDIDEVICE 
 
hr = g_lpDI-&gt;CreateDevice(GUID_SysKeyboard, &amp;g_lpDIDevice, NULL); 
if FAILED(hr) 
{ 
    DI_Term(); 
    return FALSE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

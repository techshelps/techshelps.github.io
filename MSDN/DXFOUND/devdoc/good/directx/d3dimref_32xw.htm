<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DMATRIX (D3D_OVERLOADS)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_d3dmatrix_d3d_overloads_d3d"></a>D3DMATRIX (D3D_OVERLOADS)</h1>
<p>
The D3D_OVERLOADS implementation of the <b>D3DMATRIX</b> structure implements a parentheses ("()") operator. This operator offers convenient access to values in the matrix for C++ programmers. Instead of having to refer to the structure members by name, C++ programmers can refer to them by row and column number, and simply index these numbers as needed.</p>
<pre><code>typedef struct _D3DMATRIX {
#if (defined __cplusplus) &amp;&amp; (defined D3D_OVERLOADS)
    union {
        struct {
#endif

            D3DVALUE        _11, _12, _13, _14;
            D3DVALUE        _21, _22, _23, _24;
            D3DVALUE        _31, _32, _33, _34;
            D3DVALUE        _41, _42, _43, _44;

#if (defined __cplusplus) &amp;&amp; (defined D3D_OVERLOADS)
        };
        D3DVALUE m[4][4];
    };
    _D3DMATRIX() { }
 
    D3DVALUE&amp; operator()(int iRow, int iColumn) { return m[iRow][iColumn]; }
    const D3DVALUE&amp; operator()(int iRow, int iColumn) const { return m[iRow][iColumn]; }
#endif
} D3DMATRIX, *LPD3DMATRIX;
 </code></pre>
<h4>See Also</h4>
<p>
<a href="d3dimref_6eck.htm"><b>D3DMATRIX</b></a></p>
<p>&nbsp;</p></body>
</HTML>

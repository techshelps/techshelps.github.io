<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 5: Managing Access to the Mouse</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_5_managing_access_to_the_mouse_dinput"></a>Step 5: Managing Access to the Mouse</h3>
<p>
DirectInput provides the <a href="dinput_2qlw.htm"><b>IDirectInputDevice::Acquire</b></a> and <a href="dinput_0e9g.htm"><b>IDirectInputDevice::Unacquire</b></a> methods to manage device access. Your application must call the <b>Acquire</b> method to gain access to the device before requesting mouse information with the <a href="dinput_0aes.htm"><b>IDirectInputDevice::GetDeviceState</b></a> and <a href="dinput_74ms.htm"><b>IDirectInputDevice::GetDeviceData</b></a> methods.</p>
<p>
Most of the time your application will have the device acquired. However, if you have only foreground access the mouse will automatically be unacquired whenever your application moves to the background. You are responsible for reacquiring it when you get the focus back again. This can be done in response to a WM_ACTIVATE message.</p>
<p>
Scrawl handles this message by setting a global variable, <i>g_fActive</i>, according to whether the application is gaining or losing the focus. It then calls a helper function, Scrawl_SyncAcquire, which acquires the mouse if <i>g_fActive</i> is TRUE and unacquires it otherwise.</p>
<pre><code>case WM_ACTIVATE:
        g_fActive = wParam == WA_ACTIVE || wParam == WA_CLICKACTIVE;
        Scrawl_SyncAcquire(hwnd);
        break;
 </code></pre>
<p>
If you have exclusive access, your application may need to let go of the mouse to let the user interact with Windows – for example, to access a menu or a dialog box. In Scrawl this can happen when the user opens the system menu with alt+spacebar.</p>
<p>
The Scrawl window procedure has a handler for WM_ENTERMENULOOP that responds by setting the global variable <i>g_fActive</i> to FALSE and calling the Scrawl_SyncAcquire function. This handler allows Windows to have the mouse and display its own cursor.</p>
<p>
When the user is done using a menu, Windows sends the application a WM_EXITMENULOOP message. In this case, the Scrawl window process posts an application-defined message, WM_SYNCACQUIRE, to its own message queue. This allows other pending messages to be processed before the mouse is reacquired with the Scrawl_SyncAcquire function.</p>
<p>
Scrawl also unacquires the mouse in response to a right button click, which opens up a context menu. Although the mouse would get unacquired later, in the WM_ENTERMENULOOP handler, it's done here first so that the position of the Windows cursor can be set before the menu appears.</p>
<p>
Finally, Scrawl tries to reacquire the mouse if it receives a <a href="dinput_7yk4.htm#_dx5_dierr_inputlost_dinput">DIERR_INPUTLOST</a> error after an attempt to retrieve data. This is just in case the device has been unacquired by some mechanism not covered elsewhere; for instance, if the user has pressed CTRL+ALT+DEL.</p>
<p>
In summary, your application needs to acquire the mouse before it can get data from it. This needs to be done only once, as long as nothing happens to force your application to give up access to it. In exclusive mode, you are responsible for giving up control of the mouse when Windows needs it. You are also responsible for reacquiring the mouse whenever your program needs access to it after losing it to Windows or another application.</p>
<p>&nbsp;</p></body>
</HTML>

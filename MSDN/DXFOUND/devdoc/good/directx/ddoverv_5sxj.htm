<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Architectural Overview</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_architectural_overview_ddraw"></a>Architectural Overview</h2>
<p>
Multimedia software requires high-performance graphics. Through DirectDraw, Microsoft enables a much higher level of efficiency and speed in graphics-intensive applications for Windows than is possible with GDI, while maintaining device independence. DirectDraw provides tools to perform such key tasks as:
<ul>
<li>
Manipulating multiple display surfaces</li>
<li>
Accessing the video memory directly</li>
<li>
<a href="glossary_33qr.htm#_dx5_page_flipping_glos">Page flipping</a></li>
<li>
<a href="glossary_6wtv.htm#_dx5_back_buffer_glos">Back buffering</a></li>
<li>
Managing the palette</li>
<li>
Clipping</li>
</ul>
<p>
Additionally, DirectDraw enables you to query the display hardware's capabilities at run time, then provide the best performance possible given the host computer's hardware capabilities.</p>
<p>
As with other DirectX components, DirectDraw uses the hardware to its greatest advantage whenever possible, and provides software emulation for most features when hardware support is unavailable. Device independence is possible through use of the hardware-abstraction layer, or HAL. For more information about the HAL, see <a href="ddoverv_28mv.htm">Hardware Abstraction Layer (HAL)</a>.</p>
<p>
The DirectDraw component provides services through COM-based interfaces. In the most recent iteration, these interfaces are <a href="ddref_6t2v.htm"><b>IDirectDraw2</b></a>, <a href="ddref_8053.htm"><b>IDirectDrawSurface3</b></a>, <a href="ddref_8zp3.htm"><b>IDirectDrawPalette</b></a>, <a href="ddref_3dx3.htm"><b>IDirectDrawClipper</b></a>, and <a href="ddref_6reg.htm"><b>IDirectDrawVideoPort</b></a>. Note that, in addition to these interfaces, DirectDraw continues to support all previous versions. For more information about COM concepts that you should understand to create applications with the DirectX APIs in the Platform SDK, see <a href="dxintro_4hv3.htm">DirectX and the Component Object Model</a>.</p>
<p>
The DirectDraw object represents the display adapter and exposes its methods through the <b>IDirectDraw</b> and <b>IDirectDraw2</b> interfaces. In most cases you will use the <a href="ddref_4z3r.htm"><b>DirectDrawCreate</b></a> function to a DirectDraw object, but you can also create one with the <b>CoCreateInstance</b> COM function. For more information, see <a href="ddoverv_9ltj.htm">Creating DirectDraw Objects by Using CoCreateInstance</a>.</p>
<p>
After creating a DirectDraw object, you can create surfaces for it by calling the <a href="ddref_9ign.htm"><b>IDirectDraw2::CreateSurface</b></a> method. Surfaces represent the memory on the display hardware, but can exist on either video memory or system memory. DirectDraw extends support for palettes, clipping (useful for windowed applications), and video ports through its other interfaces.</p>
<p>&nbsp;</p></body>
</HTML>

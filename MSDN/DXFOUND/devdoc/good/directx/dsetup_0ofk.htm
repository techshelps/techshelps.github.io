<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Example Callback Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_an_example_callback_function_dsetup"></a>An Example Callback Function</h3>
<p>
A simple setup program could contain a callback function along the lines of the following:</p>
<pre><code>DWORD MySetupCallback(
    DWORD Reason, 
    DWORD MsgType, 
    char *szMessage, 
    char *szName, 
    DSETUP_CB_UPGRADEINFO *pUpgradeInfo)
{
    if (MsgType==0)        // ignore status messages
        return ID_OK;

    return MessageBox(MyhWnd, szMessage, 
                     "My Application Name", MsgType);
}
 </code></pre>
<p>
This example ignores all status messages, but displays error messages by calling the <b>MessageBox</b> function. </p>
<p>
The address of the callback function in the previous example would be passed to DirectSetup prior to calling the <b>DirectXSetup </b>function. The following code gives an example of how this is done.</p>
<pre><code>// Set the callback function.
DirectXSetupSetCallback(MySetupCallback);
// Start the setup of DirectX components and drivers.
if (SUCCESS(DirectXSetup(hWndParent, NULL,
                         DSETUP_DIRECTX))
    {
        // The installation succeeded.
    }
    else
    {
        /* Installation failed. Handle the error in MySetupCallback.
        Do any additional cleanup needed right here. */
    }</code></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 5: Rendering to the Surfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_5_rendering_to_the_surfaces_ddraw"></a>Step 5: Rendering to the Surfaces</h3>
<p>
After the <a href="glossary_33qr.htm#_dx5_primary_surface_glos">primary surface</a> and a <a href="glossary_6wtv.htm#_dx5_back_buffer_glos">back buffer</a> have been created, the DDEX1 example renders some text on the primary surface and back buffer surface by using standard Windows GDI functions, as shown in the following example:</p>
<pre><code>if (lpDDSPrimary-&gt;GetDC(&amp;hdc) == DD_OK) 
{ 
    SetBkColor(hdc, RGB(0, 0, 255)); 
    SetTextColor(hdc, RGB(255, 255, 0)); 
    TextOut(hdc, 0, 0, szFrontMsg, lstrlen(szFrontMsg)); 
    lpDDSPrimary-&gt;ReleaseDC(hdc); 
} 
 
if (lpDDSBack-&gt;GetDC(&amp;hdc) == DD_OK) 
{ 
    SetBkColor(hdc, RGB(0, 0, 255)); 
    SetTextColor(hdc, RGB(255, 255, 0)); 
    TextOut(hdc, 0, 0, szBackMsg, lstrlen(szBackMsg)); 
    lpDDSBack-&gt;ReleaseDC(hdc); 
} 
 </code></pre>
<p>
The example uses the <a href="ddref_4q0n.htm"><b>IDirectDrawSurface3::GetDC</b></a> method to retrieve the handle of the device context, and it internally locks the surface. If you are not going to use Windows functions that require a handle of a device context, you could use the <a href="ddref_201j.htm"><b>IDirectDrawSurface3::Lock</b></a> and <a href="ddref_0w53.htm"><b>IDirectDrawSurface3::Unlock</b></a> methods to lock and unlock the <a href="glossary_6wtv.htm#_dx5_back_buffer_glos">back buffer</a>.</p>
<p>
Locking the surface memory (whether the whole surface or part of a surface) ensures that your application and the system blitter cannot obtain access to the surface memory at the same time. This prevents errors from occurring while your application is writing to surface memory. In addition, your application cannot page flip until the surface memory is unlocked.</p>
<p>
After the surface is locked, the example uses standard Windows GDI functions: <b>SetBkColor</b> to set the background color, <b>SetTextColor</b> to select the color of the text to be placed on the background, and <b>TextOut</b> to print the text and background color on the surfaces.</p>
<p>
After the text has been written to the buffer, the example uses the <a href="ddref_0xpz.htm"><b>IDirectDrawSurface3::ReleaseDC</b></a> method to unlock the surface and release the handle. Whenever your application finishes writing to the <a href="glossary_6wtv.htm#_dx5_back_buffer_glos">back buffer</a>, you must call either <b>IDirectDrawSurface3::ReleaseDC</b> or <a href="ddref_0w53.htm"><b>IDirectDrawSurface3::Unlock</b></a>, depending on your application. Your application cannot flip the surface until the surface is unlocked.</p>
<p>
Typically, you write to a back buffer, which you then flip to the <a href="glossary_33qr.htm#_dx5_primary_surface_glos">primary surface</a> to be displayed. In the case of DDEX1, there is a significant delay before the first flip, so DDEX1 writes to the primary buffer in the initialization function to prevent a delay before displaying the surface. As you will see in a subsequent step of this tutorial, the DDEX1 example writes only to the back buffer during WM_TIMER. An initialization function or title page may be the only place where you might want to write to the primary surface.</p>
<p>
<b>Note</b>&nbsp;&nbsp;After the surface is unlocked by using <b>IDirectDrawSurface3::Unlock</b>, the pointer to the surface memory is invalid. You must use <b>IDirectDrawSurface3::Lock</b> again to obtain a valid pointer to the surface memory.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Updating Surface Characteristics</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_updating_surface_characteristics_ddraw"></a>Updating Surface Characteristics</h3>
<p>
You can update the characteristics of an existing surface by using the <a href="ddref_1fef.htm"><b>IDirectDrawSurface3::SetSurfaceDesc</b></a> method. With this method, you can change the pixel format and location of a DirectDrawSurface object's surface memory to system memory that your application has explicitly allocated. This is useful as it allows a surface to use data from a previously allocated buffer without copying. The new surface memory is allocated by the client application and, as such, the client application must also deallocate it. For more information about how this method is used, see Updating Surface Characteristics. </p>
<p>
When calling the <b>IDirectDrawSurface3::SetSurfaceDesc</b> method, the <i>lpddsd</i> parameter must be the address of a <a href="ddref_8hbr.htm"><b>DDSURFACEDESC</b></a> structure that describes the new surface memory as well as a pointer to that memory. Within the structure, you can only set the <b>dwFlags</b> member to reflect valid members for the location of the surface memory, dimensions, <a href="glossary_33qr.htm#_dx5_pitch_glos">pitch</a>, and pixel format. Therefore, <b>dwFlags</b> can only contain combinations of the DDSD_WIDTH, DDSD_HEIGHT, DDSD_PITCH, DDSD_LPSURFACE, and DDSD_PIXELFORMAT flags, which you set to indicate valid structure members. </p>
<p>
Before you set the values in the structure, you must allocate memory to hold the surface. The size of the memory you allocate is important. Not only do you need to allocate enough memory to accommodate the surface's <a href="glossary_1777.htm#_dx5_width_glos">width</a> and height, but you need to have enough to make room for the surface <a href="glossary_33qr.htm#_dx5_pitch_glos">pitch</a>, which must be a QWORD (8 byte) multiple. Remember, pitch is measured in bytes, not pixels.</p>
<p>
When setting surface values in the structure, the <b>lpSurface</b> member is a pointer to the memory you allocated and the <b>dwHeight</b> and <b>dwWidth</b> members describe the surface dimensions in pixels. If you specify surface dimensions, you must fill the <b>lPitch</b> member to reflect the surface pitch as well. Pitch must be a DWORD multiple. Likewise, if you specify pitch, you must also specify a <a href="glossary_1777.htm#_dx5_width_glos">width</a> value. Lastly, the <b>ddpfPixelFormat</b> member describes the pixel format for the surface. With the exception of the <b>lpSurface</b> member, if you don't specify a value for these members, the method defaults to using the value from the current surface.</p>
<p>
There are some restrictions you must be aware of when using <b>IDirectDrawSurface3::SetSurfaceDesc</b>, some of which are common sense. For example, the <b>lpSurface</b> member of the <b>DDSURFACEDESC</b> structure must be a valid pointer to a system memory (the method doesn't support video memory pointers at this time). Also, the <b>dwWidth</b> and <b>dwHeight</b> members must be nonzero values. Lastly, you cannot reassign the primary surface or any surfaces within the primary's flipping chain.</p>
<p>
You can set the same memory for multiple DirectDrawSurface objects, but you must take care that the memory is not deallocated while it is assigned to any surface object. </p>
<p>
Using the <b>SetSurfaceDesc</b> method incorrectly will cause unpredictable behavior. The DirectDrawSurface object will not deallocate surface memory that it didn't allocate. Therefore, when the surface memory is no longer needed, it is your responsibility to deallocate it. However, when <b>SetSurfaceDesc</b> is called, DirectDraw frees the original surface memory that it implicitly allocated when creating the surface.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Matching True RGB Colors to the Frame Buffer's Color Space</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_matching_true_rgb_colors_to_the_frame_buffer_s_color_space_ddraw"></a>Matching True RGB Colors to the Frame Buffer's Color Space</h3>
<p>
Applications often need to find out how a true RGB color (RGB 888) will be mapped into a frame buffer's color space when the display device is not in RGB 888 mode. For example, imagine you're working on an application that will run in 16- and 24-bit RGB display modes. You know that when the art was created, a color was reserved for use as a transparent blitting color key; for the sake of argument, it is a 24-bit color such as RGB(128,64,255). Because your application will also run in a 16-bit RGB mode, you need a way to find out how this 24-bit color key maps into the color space that the frame buffer uses when it's running in a 16-bit RGB mode.</p>
<p>
Although DirectDraw does not perform color matching services for you, there are ways to calculate how your color key will be mapped in the frame buffer. These methods can be pretty complicated. For most purposes, you can use the GDI built-in color matching services, combined with the DirectDraw direct frame buffer access, to determine how a color value maps into a different color space. In fact, the Ddutil.cpp source file included in the DirectX examples of the Platform SDK includes a sample function called DDColorMatch that performs this task. The DDColorMatch sample function performs the following main tasks:
<ol>
<li>
Retrieves the color value of a pixel in a surface at 0,0.</li>
<li>
Calls the Win32 <b>SetPixel</b> function, using a <b>COLORREF</b> structure that describes your 24-bit RGB color.</li>
<li>
Uses DirectDraw to lock the surface, getting a pointer to the frame buffer memory.</li>
<li>
Retrieves the actual color value from the frame buffer (set by GDI in Step 2) and unlocks the surface</li>
<li>
Resets the pixel at 0,0 to its original color using <b>SetPixel</b>.</li>
</ol>
<p>
The process used by the DDColorMatch sample function is not fast; it isn't intended to be. However, it provides a reliable way to determine how a color will be mapped across different RGB color spaces. For more information, see the source code for DDColorMatch in the Ddutil.cpp source file.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 2: Creating the DirectInput Joystick Device</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_2_creating_the_directinput_joystick_device_dinput"></a>Step 2: Creating the DirectInput Joystick Device</h3>
<p>
After creating the DirectInput object, the application must retrieve a pointer to an <a href="dinput_2mus.htm"><b>IDirectInputDevice</b></a> interface, which will be used to perform most joystick-related tasks. In the Space Donuts sample, this is done in the callback function InitJoystickInput, which is called each time a joystick is enumerated.</p>
<p>
Here is the first part of the callback function:</p>
<pre><code>BOOL FAR PASCAL InitJoystickInput(LPCDIDEVICEINSTANCE pdinst, 
                                  LPVOID pvRef) 
{ 
   LPDIRECTINPUT pdi = pvRef; 
   LPDIRECTINPUTDEVICE pdev; 
 
   // create the DirectInput joystick device 
   if (pdi-&gt;lpVtbl-&gt;CreateDevice(pdi, &amp;pdinst-&gt;guidInstance, 
                                 &amp;pdev, NULL) != DI_OK) 
   { 
      OutputDebugString("IDirectInput::CreateDevice FAILED\n"); 
      return DIENUM_CONTINUE; 
   } 
 </code></pre>
<p>
The parameters to the callback function InitJoystickInput are:
<ul>
<li>
A pointer to the device instance, supplied by the DirectInput system when the device is enumerated.</li>
<li>
A pointer to the DirectInput interface, which you supplied as an parameter to <a href="dinput_41x0.htm"><b>IDirectInput::EnumDevices</b></a>. This parameter could have been any 32-bit value but in this case you want the DirectInput interface so that you can call the <a href="dinput_4jw4.htm"><b>IDirectInput::CreateDevice</b></a> method.</li>
</ul>
<p>
The InitJoystickInput sample function declares a local pointer to the DirectInput object, <i>pdi</i>, and assigns it the value passed into the callback. It also declares a local pointer to a DirectInput device, <i>pdev</i>, which is initialized when the device is created. This device starts life as an instance of the <b>IDirectInputDevice</b> interface, but when it is added to the application's list of input devices it is converted to an <b>IDirectInputDevice2</b> object so that it can use the <a href="dinput_46d0.htm"><b>IDirectInputDevice2::Poll</b></a> method. </p>
<p>
The first task of the callback function, then, is to create the device. The <a href="dinput_4jw4.htm"><b>IDirectInput::CreateDevice</b></a> method accepts four parameters. </p>
<p>
The first, unnecessary in C++, is a this pointer to the calling DirectInput interface.</p>
<p>
The second parameter is a reference to the globally unique identifier (GUID) for the instance of the device. In this case, the GUID is taken from the <a href="dinput_2ywk.htm"><b>DIDEVICEINSTANCE</b></a> structure supplied by DirectInput when it enumerated the device.</p>
<p>
The third parameter is the address of the variable that will be initialized with a valid <b>IDirectInputDevice</b> interface pointer if the call succeeds.</p>
<p>
The fourth parameter specifies the address of the controlling object's <b>IUnknown</b> interface for use in COM aggregation. Space Donuts doesn't use aggregation, so the parameter is NULL.</p>
<p>
Note that if for some reason the device interface cannot be created, DIENUM_CONTINUE is returned from the callback function. This flag instructs DirectInput to keep enumerating as long as there are devices to be enumerated.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 4: Creating an Effect</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_4_creating_an_effect_dinput"></a>Step 4: Creating an Effect</h3>
<p>
If the <i>EffectFound</i> flag is no longer FALSE after effect enumeration, you can safely assume that DirectInput has found support for at least one effect of the type you requested. (Of course, in real life you would probably not be content with finding just any periodic effect; you would want to use a particular kind such as a sine or sawtooth.) Armed with the effect GUID, you can now create the effect object.</p>
<p>
Before calling the <a href="dinput_92d0.htm"><b>IDirectInputDevice2::CreateEffect</b></a> method, you need to set up the following arrays and structures:
<ul>
<li>
An array of axes that will be involved in the effect. For a joystick this array will normally consist of the identifiers for the x-axis and the y-axis.</li>
<li>
An array of values for setting the direction. The values will differ according to the number of axes, and according to whether you want to use polar, spherical, or Cartesian coordinates. For a full explanation of this rather complicated business, see <a href="dinput_567o.htm">Effect Direction</a>.</li>
<li>
A structure of type-specific parameters. In the example, since you are creating a periodic effect, this will be of type <a href="dinput_3fsk.htm"><b>DIPERIODIC</b></a>.</li>
<li>
A <a href="dinput_3bn8.htm"><b>DIENVELOPE</b></a> structure for defining the <a href="glossary_8yb7.htm#_dx5_envelope_glos">envelope</a> to be applied to the effect.</li>
<li>
Finally, a <a href="dinput_6l2s.htm"><b>DIEFFECT</b></a> structure to contain the basic parameters for the effect.</li>
</ul>
<p>
First, declare the arrays and structures. You can initialize the arrays at the same time:</p>
<pre><code>DWORD      dwAxes[2] = { DIJOFS_X, DIJOFS_Y };
LONG       lDirection[2] = { 0, 0 };
 
DIPERIODIC diPeriodic;      // type-specific parameters
DIENVELOPE diEnvelope;      // envelope
DIEFFECT   diEffect;        // general parameters
 </code></pre>
<p>
Now initialize the type-specific parameters. If you use the values in the example, you will create a full-force periodic effect with a period of one-twentieth of a second.</p>
<pre><code>diPeriodic.dwMagnitude = DI_FFNOMINALMAX; 
diPeriodic.lOffset = 0; 
diPeriodic.dwPhase = 0; 
diPeriodic.dwPeriod = (DWORD) (0.05 * DI_SECONDS); 
 </code></pre>
<p>
To get the effect of the chain-saw motor trying to start, briefly coughing into life, and then slowly dying, you will set an envelope with an <a href="glossary_2wc3.htm#_dx5_attack_glos">attack</a> time of half a second and a <a href="glossary_2ysz.htm#_dx5_fade_glos">fade</a> time of one second. You'll get to the <a href="glossary_5583.htm#_dx5_sustain_glos">sustain</a> value in a moment.</p>
<pre><code>diEnvelope.dwSize = sizeof(DIENVELOPE);
diEnvelope.dwAttackLevel = 0; 
diEnvelope.dwAttackTime = (DWORD) (0.5 * DI_SECONDS); 
diEnvelope.dwFadeLevel = 0; 
diEnvelope.dwFadeTime = (DWORD) (1.0 * DI_SECONDS); 
 </code></pre>
<p>
Now you set up the basic effect parameters. These include flags to determine how the directions and device objects (buttons and axes) are identified, the sample period and gain for the effect, and pointers to the other data that you have just prepared. You also associate the effect with the fire button of the joystick, so that it will automatically be played whenever that button is pressed. </p>
<pre><code>diEffect.dwSize = sizeof(DIEFFECT); 
diEffect.dwFlags = DIEFF_POLAR | DIEFF_OBJECTOFFSETS; 
diEffect.dwDuration = (DWORD) (2 * DI_SECONDS);
 
diEffect.dwSamplePeriod = 0;               // = default 
diEffect.dwGain = DI_FFNOMINALMAX;         // no scaling
diEffect.dwTriggerButton = DIJOFS_BUTTON0;
diEffect.dwTriggerRepeatInterval = 0;      
diEffect.cAxes = 2; 
diEffect.rgdwAxes = dwAxes; 
diEffect.rglDirection = &amp;lDirection[0]; 
diEffect.lpEnvelope = &amp;diEnvelope; 
diEffect.cbTypeSpecificParams = sizeof(diPeriodic);
diEffect.lpvTypeSpecificParams = &amp;diPeriodic;  
 </code></pre>
<p>
So much for the setup. At last you can create the effect:</p>
<pre><code>LPDIEFFECT  g_lpdiEffect;  // global effect object

HRESULT hr = g_lpdid2Game-&gt;CreateEffect(
                     guidEffect,     // GUID from enumeration
                     &amp;diEffect,      // where the data is
                     &amp;g_lpdiEffect,  // where to put interface pointer
                     NULL);          // no aggregation
if (FAILED(hr)) 
  {
  OutputDebugString("Failed to create periodic effect");
  }
 </code></pre>
<p>
Remember that, by default, the effect is downloaded to the device as soon as it has been created, provided that the device is in an acquired state at the exclusive cooperative level. So if everything has gone according to plan, you should be able to compile, run, press the "fire" button, and feel the sputtering of a chain saw that's out of gas.</p>
<p>&nbsp;</p></body>
</HTML>

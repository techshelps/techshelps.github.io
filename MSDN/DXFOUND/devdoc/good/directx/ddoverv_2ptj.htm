<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transparent Blitting and Color Keys</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_transparent_blitting_and_color_keys_ddraw"></a>Transparent Blitting and Color Keys</h3>
<p>
One challenge in sprite animation is accommodating nonrectangular sprites, which means almost all of them. Because blitting functions work with rectangles (for efficiency, consistency, and ease of use), your sprites must fit into rectangles as well, whether or not they actually look rectangular on the screen.</p>
<p>
Although the concept might be confusing at first, this is how it works: The sprite image itself is nonrectangular, but is contained in a rectangular space where every pixel that is not part of the sprite is treated as "transparent" when the blitter is moving the image to its destination. The artist creating the sprite chooses an arbitrary color that will be used as the transparency "<a href="glossary_0xbn.htm#_dx5_color_key_glos">color key</a>." This is typically a single uncommon color that the artist doesn't use for anything but transparency, but it can also be a specified range of colors.</p>
<p>
Using the <a href="ddref_9qyf.htm"><b>IDirectDrawSurface3::SetColorKey</b></a> method, you can set the color key for a surface. After the color key is set, subsequent <a href="ddref_8nqv.htm"><b>IDirectDrawSurface3::BltFast</b></a> method calls can take advantage of that color key, ignoring the pixels that match it. This type of color key is known as a <a href="glossary_5583.htm#_dx5_source_color_key_glos">source color key</a>. Because the source color key prevents "transparent" pixels from being written to the destination, the original background pixels are preserved in these places, making it look like the sprite is non-rectangular object and passing over the background.</p>
<p>
Additionally, you can use a <a href="glossary_0xbn.htm#_dx5_color_key_glos">color key</a> that affects the destination surface (a <a href="glossary_4xtf.htm#_dx5_destination_color_key_glos">destination color key</a>). A destination color key is a color on a surface that is used for pixels that can be overwritten by a sprite. In this case, for example, the artist might be working on a foreground image that sprites are supposed to pass behind, creating a layered effect. Again, the artist chooses an arbitrary color that isn't used elsewhere in the image, reserving it as a portion of the image where you are allowed to blit. When you blit a sprite to the destination surface with a destination color key specified, the sprite's pixels will only be blitted to pixels on the destination that are using the destination color key. Because the normal destination pixels are preserved, it looks like the sprite passes behind the image on the destination surface.</p>
<p>&nbsp;</p></body>
</HTML>

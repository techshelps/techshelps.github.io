<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filling the Execute Buffer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_filling_the_execute_buffer_d3d"></a>Filling the Execute Buffer</h3>
<p>
After you have finished filling your <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>, it contains the vertices describing your model and a series of instructions about how the vertices should be interpreted. The following sections describe filling an execute buffer:
<ul>
<li>
<a href="#_dx5_selecting_the_vertex_type_d3d">Selecting the Vertex Type</a></li>
<li>
<a href="#_dx5_triangles_d3d">Triangles</a> </li>
<li>
<a href="#_dx5_processing_vertices_d3d">Processing Vertices</a> </li>
<li>
<a href="#_dx5_finishing_the_instructions_d3d">Finishing the Instructions</a> </li>
</ul>
<p>
You can streamline the task of filling <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffers</a> by taking advantage of the helper macros that ship with the samples in the DirectX Programmer's Reference. The D3dmacs.h header file in the Misc directory of the samples contains many useful macros that will simplify your work. In particular, the macros <b>PUTD3DINSTRUCTION</b> and <b>VERTEX_DATA </b>are useful for filling execute buffers.</p>
<p>
For an example of filling an execute buffer, see <a href="#_dx5_filling_the_execute_buffer_d3d">Filling the Execute Buffer</a>, in the <a href="imover_2g84.htm">Direct3D Execute-Buffer Tutorial</a>.</p>

<h4><a name="_dx5_selecting_the_vertex_type_d3d"></a>Selecting the Vertex Type</h4>
<p>
Applications may use all or part of the Direct3D rendering pipeline. The type of vertex that you use in your program determines how much of the rendering pipeline is used. For details, see <a href="imover_02zo.htm">Vertex Types</a>.</p>

<h4><a name="_dx5_triangles_d3d"></a>Triangles</h4>
<p>
You use the <b>D3DOP_TRIANGLE</b> opcode to insert a triangle into an <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>. In a triangle, vertices are zero-based indices into the vertex list that begins the execute buffer. Triangles are described by the <a href="d3dimref_5gro.htm"><b>D3DTRIANGLE</b></a> structure.</p>
<p>
Triangles are the only geometry type that can be processed by the rasterization module. The screen coordinates range from (0, 0) for the top left of the device (screen or window) to (<i>width</i> – 1, <i>height</i> – 1) for the bottom right of the device. The depth values range from zero at the front of the <a href="glossary_76pf.htm#_dx5_viewing_frustum_glos">viewing frustum</a> to one at the back. Rasterization is performed so that if two triangles that share two vertices are rendered, no pixel along the line joining the shared vertices is rendered twice. The rasterizer culls back facing triangles by determining the winding order of the three vertices of the triangle. Only those triangles whose vertices are traversed in a clockwise orientation are rendered.</p>
<p>
You should be sure that your triangle data is aligned on <b>QWORD</b> (8-byte) boundaries. The <b>OP_NOP</b> helper macro in D3dmacs.h can help you with this alignment task. Note that if you use this macro, you must always bracket it with opening and closing braces.</p>

<h4><a name="_dx5_processing_vertices_d3d"></a>Processing Vertices</h4>
<p>
After filling in the vertices in your <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>, you typically use the <b>D3DOP_PROCESSVERTICES</b> opcode to set the lighting and transformations for the vertices.</p>
<p>
The <a href="d3dimref_7cpw.htm"><b>D3DPROCESSVERTICES</b></a> structure describes how the vertices should be processed. The <b>dwFlags</b> member of this structure specifies the type of vertex you are using in your execute buffer. If you are using <a href="d3dimref_2ois.htm"><b>D3DTLVERTEX</b></a> vertices, you should specify <b>D3DPROCESSVERTICES_COPY</b> for <b>dwFlags</b>. For <a href="d3dimref_7wkk.htm"><b>D3DLVERTEX</b></a>, specify <b>D3DPROCESSVERTICES_TRANSFORM</b>. For <a href="d3dimref_8pwk.htm"><b>D3DVERTEX</b></a>, specify <b>D3DPROCESSVERTICES_TRANSFORMLIGHT</b>.</p>

<h4><a name="_dx5_finishing_the_instructions_d3d"></a>Finishing the Instructions</h4>
<p>
The last opcode in your list of instructions should be <b>D3DOP_EXIT</b>. This opcode simply signals that the system can stop processing the data.</p>
<p>&nbsp;</p></body>
</HTML>

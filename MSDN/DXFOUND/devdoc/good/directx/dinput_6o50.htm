<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 4: Setting the Joystick Behavior</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_4_setting_the_joystick_behavior_dinput"></a>Step 4: Setting the Joystick Behavior</h3>
<p>
The joystick device has been created, and its data format has been set. The next step is to set its cooperative level. In the Space Donuts sample, this is done in the callback function called when the device is enumerated. As in the previous step, <i>pdev</i> is a pointer to the device interface.</p>
<pre><code>if(pdev-&gt;lpVtbl-&gt;SetCooperativeLevel(pdev, hWndMain, 
      DISCL_NONEXCLUSIVE | DISCL_FOREGROUND) != DI_OK) 
   { 
      OutputDebugString("IDirectInputDevice::SetCooperativeLevel 
                         FAILED\n"); 
      pdev-&gt;lpVtbl-&gt;Release(pdev); 
      return DIENUM_CONTINUE; 
   } 
 </code></pre>
<p>
Once again, the first parameter to <a href="dinput_9c1g.htm"><b>IDirectInputDevice::SetCooperativeLevel</b></a> is a this pointer.</p>
<p>
The second parameter is a window handle. In this case the handle to the main program window is passed in.</p>
<p>
The final parameter is a combination of flags describing the desired cooperative level. Space Donuts requires input from the joystick only when it is the foreground application, and does not care whether another program is using the joystick in exclusive mode, so the flags are set to DISCL_NONEXCLUSIVE | DISCL_FOREGROUND. (See <a href="dinput_01f8.htm">Cooperative Levels</a> for a full explanation of these flags.)</p>
<p>
The final step carried out for each joystick enumerated in the callback function is to set the properties of the device. In the sample, the properties changed include the range and the <a href="glossary_4xtf.htm#_dx5_dead_zone_glos">dead zone</a> for both the x-axis and y-axis.</p>
<p>
By setting the range, you are telling DirectInput what maximum and minimum values you want returned for an axis. If you set a range of -1,000 to +1,000 for the x-axis, as in the example, you are asking that a value of -1,000 be returned when the stick is at the extreme left, +1,000 when it is at the extreme right, and zero when it is in the middle.</p>
<p>
The dead zone is a region of tolerance in the middle of the axis, measured in ten-thousandths of the physical range of axis travel. If you set a dead zone of 1,000 for the x-axis, you are saying that the stick can travel one-tenth of its range to the left or right of center before a non-center value will be returned. For more information on the dead zone, see <a href="dinput_452s.htm">Interpreting Joystick Axis Data</a>.</p>
<p>
Here's the code to set the range of the x-axis:</p>
<pre><code>DIPROPRANGE diprg; 
 
   diprg.diph.dwSize       = sizeof(diprg); 
   diprg.diph.dwHeaderSize = sizeof(diprg.diph); 
   diprg.diph.dwObj        = DIJOFS_X; 
   diprg.diph.dwHow        = DIPH_BYOFFSET; 
   diprg.lMin              = -1000; 
   diprg.lMax              = +1000; 
 
   if FAILED(pdev-&gt;lpVtbl-&gt;SetProperty(pdev, 
                   DIPROP_RANGE, &amp;diprg.diph)) 
   { 
      OutputDebugString("IDirectInputDevice::SetProperty(DIPH_RANGE) 
                         FAILED\n"); 
      pdev-&gt;lpVtbl-&gt;Release(pdev); 
      return FALSE; 
   } 
 </code></pre>
<p>
The first task here is to set up the <a href="dinput_9qyc.htm"><b>DIPROPRANGE</b></a> structure <i>diprg</i>, whose address will be passed into the <a href="dinput_24vo.htm"><b>IDirectInputDevice::SetProperty</b></a> method. Actually, it's not the address of the structure itself that is passed but rather the address of its first member, which is a <a href="dinput_8bhw.htm"><b>DIPROPHEADER</b></a> structure. See <a href="dinput_94tw.htm">Device Properties</a> for more information.</p>
<p>
The property header is initialized with the following values:
<ul>
<li>
The size of the property structure</li>
<li>
The size of the header structure</li>
<li>
The value returned by the <b>DIJOFS_X</b> macro, which points to the object whose property is being changed</li>
<li>
A flag to indicate how the third parameter is to be interpreted</li>
</ul>
<p>
The <b>lmin</b> and <b>lmax</b> members of the <b>DIPROPRANGE</b> structure are assigned the desired range values.</p>
<p>
The application now calls the <a href="dinput_24vo.htm"><b>IDirectInputDevice::SetProperty</b></a> method. As usual, the first parameter is a this pointer. The second parameter is a flag indicating which property is being changed. The third parameter is the address of the <b>DIPROPHEADER</b> member of the property structure.</p>
<p>
Setting the <a href="glossary_4xtf.htm#_dx5_dead_zone_glos">dead zone</a> of the x-axis requires a similar procedure. The Space Donuts sample uses a helper function, SetDIDwordProperty, to initialize a <a href="dinput_8244.htm"><b>DIPROPDWORD</b></a> property structure. Unlike <a href="dinput_9qyc.htm"><b>DIPROPRANGE</b></a>, this structure contains only one data member, which in the example is set to 5,000, indicating that the stick must move half of its range from the center before the axis is reported to be off-center.</p>
<pre><code>// set X axis dead zone to 50% (to avoid accidental turning) 
   if FAILED(SetDIDwordProperty(pdev, DIPROP_DEADZONE, DIJOFS_X, 
                                DIPH_BYOFFSET, 5000)) 
   { 
      OutputDebugString("IDirectInputDevice:: 
                           SetProperty(DIPH_DEADZONE) FAILED\n"); 
      pdev-&gt;lpVtbl-&gt;Release(pdev); 
      return FALSE; 
   } 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

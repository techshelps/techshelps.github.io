<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Assignment Operators (D3D_OVERLOADS)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_assignment_operators_d3d_overloads_d3d"></a>Assignment Operators (D3D_OVERLOADS)</h1>
<p>
The assignment operators are overloaded operators for the D3D_OVERLOADS extensions. Both scalar and vector forms of the "*=" and "/=" operators have been implemented. (In the vector form, multiplication and division are memberwise.)</p>
<pre><code>_D3DVECTOR&amp; operator += (const _D3DVECTOR&amp; v);
_D3DVECTOR&amp; operator -= (const _D3DVECTOR&amp; v);
_D3DVECTOR&amp; operator *= (const _D3DVECTOR&amp; v);
_D3DVECTOR&amp; operator /= (const _D3DVECTOR&amp; v);
_D3DVECTOR&amp; operator *= (D3DVALUE s);
_D3DVECTOR&amp; operator /= (D3DVALUE s);
 </code></pre>
<p>
The assignment operators are defined as follows:</p>
<pre><code>inline _D3DVECTOR&amp;
_D3DVECTOR::operator += (const _D3DVECTOR&amp; v)
{
   x += v.x;   y += v.y;   z += v.z;
   return *this;
}

inline _D3DVECTOR&amp;
_D3DVECTOR::operator -= (const _D3DVECTOR&amp; v)
{
   x -= v.x;   y -= v.y;   z -= v.z;
   return *this;
}

inline _D3DVECTOR&amp;
_D3DVECTOR::operator *= (const _D3DVECTOR&amp; v)
{
   x *= v.x;   y *= v.y;   z *= v.z;
   return *this;
}

inline _D3DVECTOR&amp;
_D3DVECTOR::operator /= (const _D3DVECTOR&amp; v)
{
   x /= v.x;   y /= v.y;   z /= v.z;
   return *this;
}

inline _D3DVECTOR&amp;
_D3DVECTOR::operator *= (D3DVALUE s)
{
   x *= s;   y *= s;   z *= s;
   return *this;
}

inline _D3DVECTOR&amp;
_D3DVECTOR::operator /= (D3DVALUE s)
{
   x /= s;   y /= s;   z /= s;
   return *this;
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

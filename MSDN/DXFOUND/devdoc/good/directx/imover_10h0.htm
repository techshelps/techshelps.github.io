<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Surfaces, Devices, and Handles</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_surfaces_devices_and_handles_d3d"></a>Surfaces, Devices, and Handles</h3>
<p>
You can use a DirectDraw surface as a texture map by calling the <a href="dxintro_0pgv.htm"><b>IDirectDrawSurface::QueryInterface</b></a> method to retrieve an <b>IDirect3DTexture2</b> interface. You can use the <a href="d3dimref_1mzo.htm"><b>IDirect3DTexture2</b></a> interface to load textures, retrieve handles, and track changes to palettes.</p>
<p>
<b>IDirect3D2</b> and its DirectX 3 counterpart, <b>IDirect3DTexture</b>, can be associated with a 3-D device. A texture handle identifies this coupling of a texture map with a device. A texture can be associated with more than one device. When you call the <a href="d3dimref_3ajo.htm"><b>IDirect3DTexture2::GetHandle</b></a> method to associate a texture with a device, it is validated to ensure that the device can support the specified type of texture format and dimensions. The <b>GetHandle</b> method returns the texture handle if this validation succeeds. Texture handles can then be used as render states and in materials (for ramp mode) in either <b>IDirect3DDevice2</b> or <b>IDirect3DDevice</b>. Because a handle obtained by associating a texture object with a device object does not depend on which interfaces were used to obtain it, handles obtained using <b>IDirect3DTexture</b> or <b>IDirect3DTexture2</b> for a given device object can be used interchangeably. </p>
<p>
The <b>IDirect3DTexture2</b> interface eliminates some unimplemented methods from the <b>IDirect3DTexture</b> interface.</p>
<p>
The following example demonstrates how to create an <a href="d3dimref_1mzo.htm"><b>IDirect3DTexture2</b></a> interface and then how to load the texture by calling the <a href="d3dimref_3ajo.htm"><b>IDirect3DTexture2::GetHandle</b></a> and <a href="d3dimref_0vc4.htm"><b>IDirect3DTexture2::Load</b></a> methods. Note that the DirectDraw surface you query must have the <b>DDSCAPS_TEXTURE</b> capability to support a Direct3D texture.</p>
<pre><code>lpDDS-&gt;QueryInterface(IID_IDirect3DTexture2, 
    lpD3DTexture2);  // Address of a DIRECT3DTEXTURE object 
lpD3DTexture2-&gt;GetHandle( 
    lpD3DDevice,     // Address of a DIRECT3DDEVICE object 
    lphTexture);     // Address of a D3DTEXTUREHANDLE 
lpD3DTexture2-&gt;Load( 
    lpD3DTexture);   // Address of a DIRECT3DTEXTURE object 
 </code></pre>
<p>
To use a texture handle in an execute buffer, use the <b>D3DRENDERSTATE_TEXTUREHANDLE</b> render state (part of the <a href="d3dimref_3pk4.htm"><b>D3DRENDERSTATETYPE</b></a> enumerated type). </p>
<p>&nbsp;</p></body>
</HTML>

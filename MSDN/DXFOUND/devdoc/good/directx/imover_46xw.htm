<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Execute Buffers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_execute_buffers_d3d"></a>Execute Buffers</h2>
<p>
In the past, all programming with Direct3D Immediate Mode was done using <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffers</a>. Now that the DrawPrimitive methods have been introduced, however, most new Immediate-Mode programs will not use execute buffers or the <b>IDirect3DExecuteBuffer</b> interface. For more information about the DrawPrimitive methods, see <a href="imover_4of8.htm">The DrawPrimitive Methods</a>.</p>
<p>
Execute buffers are similar to the display lists you may be familiar with if you have experience with OpenGL programming. Execute buffers contain a vertex list followed by an instruction stream. The instruction stream consists of operation codes, or <a href="glossary_938z.htm#_dx5_opcode_glos"><i>opcodes</i></a>, and the data that modifies those opcodes. Each execute buffer is bound to a single Direct3D device. </p>
<p>
You can create an <a href="d3dimref_8uck.htm"><b>IDirect3DExecuteBuffer</b></a> interface by calling the <a href="d3dimref_5wv8.htm"><b>IDirect3DDevice::CreateExecuteBuffer</b></a> method.</p>
<pre><code>lpD3DDevice-&gt;CreateExecuteBuffer( 
    lpDesc,       // Address of a DIRECT3DEXECUTEBUFFERDESC structure 
    lplpDirect3DExecuteBuffer,  // Address to contain a pointer to the 
                                // Direct3DExecuteBuffer object 
    pUnkOuter);   // NULL 
 </code></pre>
<p>
Execute-buffers reside on a device list. You can use the <a href="d3dimref_5wv8.htm"><b>IDirect3DDevice::CreateExecuteBuffer</b></a> method to allocate space for the actual buffer, which may be on the hardware device.</p>
<p>
The buffer is filled with two contiguous arrays of vertices and opcodes by using the following calls to the <a href="d3dimref_8v50.htm"><b>IDirect3DExecuteBuffer::Lock</b></a>, <a href="d3dimref_5wkk.htm"><b>IDirect3DExecuteBuffer::Unlock</b></a>, and <a href="d3dimref_52qs.htm"><b>IDirect3DExecuteBuffer::SetExecuteData</b></a> methods:</p>
<pre><code>lpD3DExBuf-&gt;Lock( 
    lpDesc);.      // Address of a DIRECT3DEXECUTEBUFFERDESC structure 
//  . 
//  .  Store contents through the supplied address 
//  . 
lpD3DExBuf-&gt;Unlock(); 
lpD3DExBuf-&gt;SetExecuteData( 
    lpData);       // Address of a D3DEXECUTEDATA structure 
 </code></pre>
<p>
The last call in the preceding example is to the <a href="d3dimref_52qs.htm"><b>IDirect3DExecuteBuffer::SetExecuteData</b></a> method. This method notifies Direct3D where the two parts of the buffer reside relative to the address that was returned by the call to the <a href="d3dimref_8v50.htm"><b>IDirect3DExecuteBuffer::Lock</b></a> method.</p>
<p>
You can use the <b>IDirect3DExecuteBuffer</b> interface to get and set execute data, and to lock, unlock, optimize, and validate the <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>.</p>
<p>&nbsp;</p></body>
</HTML>

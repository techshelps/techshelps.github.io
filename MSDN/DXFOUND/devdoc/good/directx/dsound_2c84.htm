<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDirectSoundBuffer::Lock</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_idirectsoundbuffer_lock_dsound"></a>IDirectSoundBuffer::Lock</h1>
<p>
The <b>IDirectSoundBuffer::Lock</b> method obtains a valid write pointer to the <a href="glossary_5583.htm#_dx5_sound_buffer_glos">sound buffer</a>'s audio data.</p>
<pre><code><b>HRESULT Lock(
  DWORD</b><i> dwWriteCursor</i><b>,    </b>
<b>  DWORD</b><i> dwWriteBytes</i><b>,     </b>
<b>  LPVOID</b><i> lplpvAudioPtr1</i><b>,  </b>
<b>  LPDWORD</b><i> lpdwAudioBytes1</i><b>,  </b>
<b>  LPVOID</b><i> lplpvAudioPtr2</i><b>,  </b>
<b>  LPDWORD</b><i> lpdwAudioBytes2</i><b>,  </b>
<b>  DWORD</b><i> dwFlags           </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwWriteCursor</i></dt>
<dd>
Offset, in bytes, from the start of the buffer to where the lock begins. This parameter is ignored if DSBLOCK_FROMWRITECURSOR is specified in the <i>dwFlags</i> parameter.</dd>
<dt>
<i>dwWriteBytes</i></dt>
<dd>
Size, in bytes, of the portion of the buffer to lock. Note that the <a href="glossary_5583.htm#_dx5_sound_buffer_glos">sound buffer</a> is conceptually circular.</dd>
<dt>
<i>lplpvAudioPtr1</i></dt>
<dd>
Address of a pointer to contain the first block of the sound buffer to be locked.</dd>
<dt>
<i>lpdwAudioBytes1</i></dt>
<dd>
Address of a variable to contain the number of bytes pointed to by the <i>lplpvAudioPtr1</i> parameter. If this value is less than the <i>dwWriteBytes</i> parameter, <i>lplpvAudioPtr2</i> will point to a second block of sound data.</dd>
<dt>
<i>lplpvAudioPtr2</i></dt>
<dd>
Address of a pointer to contain the second block of the sound buffer to be locked. If the value of this parameter is NULL, the <i>lplpvAudioPtr1</i> parameter points to the entire locked portion of the sound buffer.</dd>
<dt>
<i>lpdwAudioBytes2</i></dt>
<dd>
Address of a variable to contain the number of bytes pointed to by the <i>lplpvAudioPtr2</i> parameter. If <i>lplpvAudioPtr2</i> is NULL, this value will be 0.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flags modifying the lock event. The following flags are defined: 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%>DSBLOCK_FROMWRITECURSOR </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Locks from the <a href="glossary_0xbn.htm#_dx5_current_write_position_glos">current write position</a>, making a call to <a href="dsound_6stg.htm"><b>IDirectSoundBuffer::GetCurrentPosition</b></a> unnecessary. If this flag is specified, the <i>dwWriteCursor</i> parameter is ignored. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DSBLOCK_ENTIREBUFFER </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Locks the entire buffer. The <i>dwWriteBytes</i> parameter is ignored. </td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the method succeeds, the return value is DS_OK.</p>
<p>
If the method fails, the return value may be one of the following error values:</p>
<p>
<a href="dsound_9y3p.htm#_dx5_dserr_bufferlost_dsound">DSERR_BUFFERLOST</a> <br>
<a href="dsound_9y3p.htm#_dx5_dserr_invalidcall_dsound">DSERR_INVALIDCALL</a> <br>
<a href="dsound_9y3p.htm#_dx5_dserr_invalidparam_dsound">DSERR_INVALIDPARAM</a> <br>
<a href="dsound_9y3p.htm#_dx5_dserr_priolevelneeded_dsound">DSERR_PRIOLEVELNEEDED</a> </p>
<h4>Remarks</h4>
<p>
This method accepts an offset and a byte count, and returns two write pointers and their associated sizes. Two pointers are required because <a href="glossary_5583.htm#_dx5_sound_buffer_glos">sound buffers</a> are circular. If the locked bytes do not wrap around the end of the buffer, the second pointer, <i>lplpvAudioBytes2</i>, will be NULL. However, if the bytes do wrap around, then the second pointer will point to the beginning of the buffer.</p>
<p>
If the application passes NULL for the <i>lplpvAudioPtr2</i> and <i>lpdwAudioBytes2</i> parameters, DirectSound will not lock the wraparound portion of the buffer.</p>
<p>
The application should write data to the pointers returned by the <b>IDirectSoundBuffer::Lock</b> method, and then call the <a href="dsound_0nvo.htm"><b>IDirectSoundBuffer::Unlock</b></a> method to release the buffer back to DirectSound. The sound buffer should not be locked for long periods of time; if it is, the play cursor will reach the locked bytes and configuration-dependent audio problems, possibly random noise, will result.</p>
<p>
<b>Warning</b>&nbsp;&nbsp;This method returns a write pointer only. The application should not try to read sound data from this pointer; the data might not be valid even though the DirectSoundBuffer object contains valid sound data. For example, if the buffer is located in on-board memory, the pointer might be an address to a temporary buffer in main system memory. When <b>IDirectSoundBuffer::Unlock</b> is called, this temporary buffer will be transferred to the on-board memory.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in dsound.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use dsound.lib.</p>
<h4>See Also</h4>
<p>
<a href="dsound_317o.htm"><b>IDirectSoundBuffer</b></a>, <a href="dsound_6stg.htm"><b>IDirectSoundBuffer::GetCurrentPosition</b></a>, <a href="dsound_0nvo.htm"><b>IDirectSoundBuffer::Unlock</b></a></p>
<p>&nbsp;</p></body>
</HTML>

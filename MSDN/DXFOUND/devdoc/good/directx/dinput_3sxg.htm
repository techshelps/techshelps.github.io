<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a DirectInput Device</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_creating_a_directinput_device_dinput"></a>Creating a DirectInput Device</h3>
<p>
The <b><u>IDirectInput::CreateDevice</u></b> method is used to obtain a pointer to the <a href="dinput_2mus.htm"><b>IDirectInputDevice</b></a> interface. Methods of this interface are then used to manipulate the device and obtain data.</p>
<p>
The following example, where <i>lpdi</i> is a pointer to the <b>IDirectInput</b> interface, creates a keyboard device:</p>
<pre><code>LPDIRECTINPUTDEVICE  lpdiKeyboard; 
lpdi-&gt;CreateDevice(GUID_SysKeyboard, &amp;lpdiKeyboard, NULL); 
 </code></pre>
<p>
The first parameter in <b>IDirectInput::CreateDevice</b> is an instance GUID that identifies the instance of the device for which the interface is to be created. DirectInput has two predefined GUIDs, <i>GUID_SysMouse</i> and <i>GUID_SysKeyboard</i>, which represent the system mouse and keyboard, and you can pass these identifiers into the <b>CreateDevice</b> function. The global variable <i>GUID_Joystick</i> should not be used as a parameter for <b>CreateDevice</b>, because it is a product GUID, not an instance GUID. </p>
<p>
<b>Note</b>&nbsp;&nbsp;If the workstation has more than one mouse, input from all of them is combined to form the system device. The same is true for multiple keyboards.</p>
<p>
For devices other than the system mouse or keyboard, use the instance GUID for the device returned by <a href="dinput_41x0.htm"><b>IDirectInput::EnumDevices</b></a>. The instance GUID for a device will always be the same. You can allow the user to select a device from a list of those enumerated, then save the GUID to a configuration file and use it again in future sessions.</p>
<p>
If you want to use the <b>IDirectInputDevice2</b> interface methods for force feedback devices, you must obtain a pointer to that interface instead of <b>IDirectInputDevice</b>. The following function is a wrapper for the <b>CreateDevice</b> method that attempts to obtain the <b>IDirectInputDevice2</b> interface. Note the use of macros to call the <b>Release</b> and <b>CreateDevice</b> methods according to either the C or C++ syntax.</p>
<pre><code>HRESULT IDirectInput_CreateDevice2(LPDIRECTINPUT pdi, 
                                   REFGUID rguid, 
                                   LPDIRECTINPUTDEVICE2 *ppdev2, 
                                   LPUNKNOWN punkOuter) 
{ 
    LPDIRECTINPUTDEVICE *pdev; 
    HRESULT hres; 
 
    hres = IDirectInput_CreateDevice(pdi, rguid, &amp;pdev, punkOuter);
 
    if (SUCCEEDED(hres)) { 
#ifdef __cplusplus 
    hres = pdev-&gt;QueryInterface(IID_IDirectInputDevice2, 
                                    (LPVOID *)ppdev2); 
#else 
    hres = pdev-&gt;lpVtbl-&gt;QueryInterface(pdev, 
                       &amp;IID_IDirectInputDevice2, 
                              (LPVOID *)ppdev2); 
#endif 
    IDirectInputDevice_Release(pdev); 
    } else { 
    *ppdev2 = 0; 
    } 
    return hres; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

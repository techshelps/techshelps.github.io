<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interpreting DirectSetup Flags in the Callback Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_interpreting_directsetup_flags_in_the_callback_function_dsetup"></a>Interpreting DirectSetup Flags in the Callback Function</h3>
<p>
When the application-defined callback function DirectXSetupCallbackFunction is called by the <b>DirectXSetup</b> function, it is passed a parameter that contains the reason that the callback function was invoked. If the reason is DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE, the <i>pInfo</i> parameter points to a structure containing flags that summarize the <b>DirectXSetup </b>function's recommendations on how the upgrade of DirectX components, display drivers, and audio drivers should be performed. For a chart that summarizes the callback function flags, see <a href="dsetup_8qeo.htm">DirectXSetupCallbackFunction</a>. The structure member containing the flags is called <b>UpgradeFlags</b> .</p>
<p>
The flags passed through the <b>UpgradeFlags</b> member of the structure that is pointed to by the <i>pInfo</i> parameter of the callback function are present when the <i>Reason</i> parameter of the callback function is DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE. They occur in the following combinations:
<dl>
<dt>
<b>Primary Upgrade Flags</b></dt>
<dd>
These flags are mutually exclusive. One of them is always present in the <b>UpgradeFlags</b> structure member.
<p>
DSETUP_BC_UPGRADE_FORCE

<p>
DSETUP_BC_UPGRADE_KEEP

<p>
DSETUP_BC_UPGRADE_SAFE

<p>
DSETUP_BC_UPGRADE_UNKNOWN

</dd>
<dt>
<b>Secondary Upgrade Flags</b></dt>
<dd>
Any or all of these flags may be present in the <b>UpgradeFlags</b> structure member.
<p>
DSETUP_BC_UPGRADE_CANTBACKUP

<p>
DSETUP_BC_UPGRADE_HASWARNINGS

</dd>
<dt>
<b>Device Active Flag</b></dt>
<dd>
This flag is present in the <b>UpgradeFlags</b> structure member if the device whose driver is being upgraded is active. This flag may be present in combination with any of the others.
<p>
DSETUP_BC_UPGRADE_DEVICE_ACTIVE

</dd>
<dt>
<b>Device Class Flags</b></dt>
<dd>
These flags are mutually exclusive. One of them is always present in the <b>UpgradeFlags</b> structure member.
<p>
DSETUP_BC_UPGRADE_DISPLAY

<p>
DSETUP_BC_UPGRADE_MEDIA

</dd>
</dl>
<p>
Every time the <i>Reason</i> parameter has the value DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE, the <b>UpgradeFlags</b> member of the structure pointed to by <i>pInfo</i> contains one Primary Upgrade Flag, zero or more Secondary Upgrade Flags, zero or one Device Active Flag, and one Device Class Flag.</p>
<p>
If the <b>UpgradeFlags</b> member is set to DSETUP_CB_UPGRADE_KEEP, the DirectX component or device driver can't be upgraded. Performing an upgrade would cause Windows to cease functioning properly. The <b>DirectXSetup</b> function will not perform an upgrade on the component or driver.</p>
<p>
A value of DSETUP_CB_UPGRADE_FORCE in the <b>UpgradeFlags</b> structure member means that the component or driver <i>must </i>be upgraded for Windows to function properly. The <b>DirectXSetup</b> function will upgrade the driver or component. It is possible that the upgrade may adversely affect some programs on the system. When the <b>DirectXSetup</b> function detects this condition, the <b>UpgradeFlags</b> member will be set to DSETUP_CB_UPGRADE_FORCE | DSETUP_CB_UPGRADE_HAS_WARNINGS, where the symbol | represents a bitwise <b>OR</b> operation. When this occurs, the <b>DirectXSetup</b> function will perform the upgrade, but issue a warning to the user.</p>
<p>
Components and drivers are considered safe for upgrade if they will not adversely affect the operation of Windows when they are installed. In this case, the <b>UpgradeFlags</b> member will be set to DSETUP_CB_UPGRADE_SAFE. It is possible that the upgrade can be safe for Windows, but still cause problems for programs installed on the system. When <b>DirectXSetup</b> detects this condition, the <b>UpgradeFlags</b> member will contain the value DSETUP_CB_UPGRADE_SAFE | DSETUP_CB_UPGRADE_HAS_WARNINGS. If this occurs, the default action for the <b>DirectXSetup </b>function is to not perform the upgrade.</p>
<p>
If no callback is provided, the <b>DirectXSetup </b>function calls the Win32® API function <b>MessageBox</b> to get input from the user if needed. Typically, the <b>DirectXSetup</b> function performs the default action without notifying the user. The application-defined function DirectXSetupCallbackFunction returns the same values that <b>MessageBox </b>would return if it were used. </p>
<p>
The <b>MessageBox</b> function displays a message and some buttons for user response. When it is called, flags are passed to it that indicate what buttons should be present and which is the default button. These same flags are passed to the application-defined function DirectXSetupCallbackFunction in the <i>MsgType </i>parameter. These flags are the same flags that can be passed to the <b>MessageBox</b> function through its <i>uType</i> parameter. </p>
<p>
The callback function should return what <b>MessageBox </b>would return if it were used. For instance, a callback function can be called with the flags in the <i>MsgType</i> parameter set to MB_YESNO | MB_DEFBUTTON1, where the | symbol is a bitwise <b>OR</b> operation. If <b>MessageBox</b> were called with these flags, it would present the user with a dialog box containing the <b>Yes</b> and <b>No</b> buttons. The default button is the <b>Yes</b> button. The callback should do something that is functionally equivalent to that. In this example, the return value of <b>MessageBox</b> would be the ID of the button that the user selected, either IDYES or IDNO. The return value of the callback function should be whichever button the user selects.</p>
<p>
A more complete discussion of the flags and the appropriate return values is contained in the Platform SDK documentation for the <b>MessageBox</b> function.</p>
<p>
The following code is a function that can be used by DirectSetup callback functions. It illustrates the process of determining the ID of the default button for any allowable set of input flags.</p>
<pre><code>INT DefaultButton(DWORD MsgType)
{
    INT iDefaultButton=0;

    switch (MsgType &amp; 0x0F0F)
    {
        case MB_OK          | MB_DEFBUTTON1:
        case MB_OKCANCEL    | MB_DEFBUTTON1:
            iDefaultButton = IDOK;
        break;

        case MB_OKCANCEL    | MB_DEFBUTTON2:
        case MB_RETRYCANCEL | MB_DEFBUTTON2:
        case MB_YESNOCANCEL | MB_DEFBUTTON3:
            iDefaultButton = IDCANCEL;
        break;

        case MB_ABORTRETRYIGNORE | MB_DEFBUTTON1:
            iDefaultButton = IDABORT;
        break;

        case MB_RETRYCANCEL      | MB_DEFBUTTON1:
        case MB_ABORTRETRYIGNORE | MB_DEFBUTTON2:
            iDefaultButton = IDRETRY;
        break;

        case MB_ABORTRETRYIGNORE | MB_DEFBUTTON3:
            iDefaultButton = IDIGNORE;
        break;

        case MB_YESNO       | MB_DEFBUTTON1:
        case MB_YESNOCANCEL | MB_DEFBUTTON1:
            iDefaultButton = IDYES;
        break;

        case MB_YESNO       | MB_DEFBUTTON2:
        case MB_YESNOCANCEL | MB_DEFBUTTON2:
            iDefaultButton = IDNO;
        break;
    }

    return iDefaultButton;
}</code></pre>
<p>
In this example, the function uses bitwise <b>OR</b> operations to determine what kind of dialog box the <b>MessageBox </b>function would display, and which button is the default. A callback function can use a similar method to determine what value it should return.</p>
<p>&nbsp;</p></body>
</HTML>

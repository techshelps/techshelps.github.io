<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 2: Testing for Hardware Overlay Support</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_2_testing_for_hardware_overlay_support_ddraw"></a>Step 2: Testing for Hardware Overlay Support</h3>
<p>
After initializing DirectDraw, you need to verify that the device supports overlay surfaces. Because DirectDraw doesn't emulate overlays, if the hardware device driver doesn't support them, you can't continue. You can test for overlay support by retrieving the device driver capabilities with the <a href="ddref_748n.htm"><b>IDirectDraw2::GetCaps</b></a> method. After the call, look for the presence of the DDCAPS_OVERLAY flag in the <b>dwFlags</b> member of the associated <a href="ddref_1a9j.htm"><b>DDCAPS</b></a> structure. If the flag is present, then the display hardware supports overlays; if not, you can't use overlay surfaces with that device.</p>
<p>
The following example, taken from the Mosquito sample application, shows how to test for hardware overlay support.</p>
<pre><code>BOOL AreOverlaysSupported()
{
    DDCAPS  capsDrv;
    HRESULT ddrval;

    // Get driver capabilities to determine Overlay support.
    ZeroMemory(&amp;capsDrv, sizeof(capsDrv));
    capsDrv.dwSize = sizeof(capsDrv);

    ddrval = g_lpdd-&gt;GetCaps(&amp;capsDrv, NULL);
    if (FAILED(ddrval))
        return FALSE;

    // Does the driver support overlays in the current mode? 
    // (Currently the DirectDraw emulation layer does not support overlays.
    // Overlay related APIs will fail without hardware support).  
    if (!(capsDrv.dwCaps &amp; DDCAPS_OVERLAY))
        return FALSE;

    return TRUE;
} </code></pre>
<p>
The preceding example calls the <b>IDirectDraw2::GetCaps</b> method to retrieve device driver capabilities. The first parameter for the call is the address of a <a href="ddref_1a9j.htm"><b>DDCAPS</b></a> that will be filled with information describing the device driver's capabilities. Because the application doesn't need information about emulation capabilities, the second parameter is set to NULL.</p>
<p>
After retrieving the driver capabilities, the example checks the <b>dwCaps</b> member for the presence of the DDCAPS_OVERLAY flag using a logical <b>AND</b> operation. If the flag isn't present, the example returns FALSE to indicate failure. Otherwise, the example returns TRUE to indicate that the device driver supports overlay surfaces.</p>
<p>
In your code, this might be a good time for you to check the <b>dwMaxVisibleOverlays</b> and <b>dwCurrentVisibleOverlays</b> members in the DDCAPS structure to ensure that no other overlay surfaces are in use by other applications.</p>
<p>&nbsp;</p></body>
</HTML>

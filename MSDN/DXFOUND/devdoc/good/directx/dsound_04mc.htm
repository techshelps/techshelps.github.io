<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Playing Sounds</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_playing_sounds_dsound"></a>Playing Sounds</h3>
<p>
Playing a sound consists of the following steps:
<ol>
<li>
Lock a portion of the secondary buffer (<a href="dsound_2c84.htm"><b>IDirectSoundBuffer::Lock</b></a>). This method returns a pointer to the address where writing will begin, based on the offset from the beginning of the buffer that you pass in.</li>
<li>
Write the audio data to the buffer.</li>
<li>
Unlock the buffer (<a href="dsound_0nvo.htm"><b>IDirectSoundBuffer::Unlock</b></a>).</li>
<li>
Send the sound to the primary buffer and from there to the output device (<a href="dsound_7rz8.htm"><b>IDirectSoundBuffer::Play</b></a>).</li>
</ol>
<p>
Because <a href="glossary_5583.htm#_dx5_streaming_sound_buffer_glos">streaming sound buffers</a> usually play continually and are conceptually circular, DirectSound returns two write pointers when locking a sound buffer. For example, if you tried to lock 300 bytes beginning at the midpoint of a 400-byte buffer, the <b>Lock</b> method would return one pointer to the last 200 bytes of the buffer, and a second pointer to the first 100 bytes. The second pointer is NULL if the locked portion of the buffer does not wrap around.</p>
<p>
Normally the buffer stops playing automatically when the end is reached. However, if the DSBPLAY_LOOPING flag was set in the <i>dwFlags</i> parameter to the <b>Play</b> method, the buffer will play repeatedly until the application calls the <a href="dsound_0oro.htm"><b>IDirectSoundBuffer::Stop</b></a> method, at which point the play cursor is moved to the beginning of the buffer.</p>
<p>
For <a href="glossary_5583.htm#_dx5_streaming_sound_buffer_glos">streaming sound buffers</a>, your application is responsible for ensuring that the next block of data is written to the buffer before the current play position loops back to the beginning. (For more on the play position, see <a href="dsound_4nl0.htm">Current Play and Write Positions</a>.) You can do this by setting notification positions so that an event is signaled whenever the current play position reaches a certain point. Applications should write at least 1 second ahead of the current play position to minimize the possibility of gaps in the audio output during playback.</p>
<p>
The following C example writes data to a sound buffer, starting at the offset into the buffer passed in <i>dwOffset</i>:</p>
<pre><code>BOOL AppWriteDataToBuffer( 
    LPDIRECTSOUNDBUFFER lpDsb,  // the DirectSound buffer
    DWORD dwOffset,             // our own write cursor
    LPBYTE lpbSoundData,        // start of our data
    DWORD dwSoundBytes)         // size of block to copy
{ 
    LPVOID lpvPtr1; 
    DWORD dwBytes1; 
    LPVOID lpvPtr2; 
    DWORD dwBytes2; 
    HRESULT hr; 
    // Obtain memory address of write block. This will be in two parts
    // if the block wraps around.
    hr = lpDsb-&gt;lpVtbl-&gt;Lock(lpDsb, dwOffset, dwSoundBytes, &amp;lpvPtr1, 
        &amp;dwBytes1, &amp;lpvPtr2, &amp;dwBytes2, 0); 
 
    // If DSERR_BUFFERLOST is returned, restore and retry lock. 
    if(DSERR_BUFFERLOST == hr) { 
        lpDsb-&gt;lpVtbl-&gt;Restore(lpDsb); 
        hr = lpDsb-&gt;lpVtbl-&gt;Lock(lpDsb, dwOffset, dwSoundBytes, 
            &amp;lpvPtr1, &amp;dwAudio1, &amp;lpvPtr2, &amp;dwAudio2, 0); 
    } 
    if(DS_OK == hr) { 
        // Write to pointers. 
        CopyMemory(lpvPtr1, lpbSoundData, dwBytes1); 
        if(NULL != lpvPtr2) { 
            CopyMemory(lpvPtr2, lpbSoundData+dwBytes1, dwBytes2); 
        } 
        // Release the data back to DirectSound. 
        hr = lpDsb-&gt;lpVtbl-&gt;Unlock(lpDsb, lpvPtr1, dwBytes1, lpvPtr2, 
            dwBytes2); 
        if(DS_OK == hr) { 
            // Success. 
            return TRUE; 
        } 
    } 
    // Lock, Unlock, or Restore failed. 
    return FALSE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

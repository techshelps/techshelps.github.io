<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectInput Device Enumeration</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_directinput_device_enumeration_dinput"></a>DirectInput Device Enumeration</h2>
<p>
DirectInput is able to query the system for all available input devices, determine whether they are connected, and return information about them. This process is called enumeration.</p>
<p>
If your application is using only the standard keyboard or mouse, or both, you don't need to enumerate the available input devices. As explained under <a href="dinput_3sxg.htm">Creating the DirectInput Device</a>, you can simply use predefined global variables when calling the <a href="dinput_4jw4.htm"><b>IDirectInput::CreateDevice</b></a> method.</p>
<p>
For all other input devices, and for systems with multiple keyboards or mice, you need to call <a href="dinput_41x0.htm"><b>IDirectInput::EnumDevices</b></a> in order to obtain at least the instance GUIDs (globally unique identifiers) so that device objects can be created.</p>
<p>
Here's a sample implementation of the <b>IDirectInput::EnumDevices</b> method</p>
<pre><code>GUID              KeyboardGUID = GUID_SysKeyboard; 
// LPDIRECTINPUT  lpdi;   //This has been initialized with
                          //DirectInputCreate and points to
                          //the DirectInput object 
 
lpdi-&gt;EnumDevices(DIDEVTYPE_KEYBOARD, 
                  DIEnumDevicesProc, 
                  &amp;KeyboardGUID, 
                  DIEDFL_ATTACHEDONLY); 
 </code></pre>
<p>
The first parameter determines what types of devices are to be enumerated. It is NULL if you want to enumerate all devices regardless of type; otherwise it is one of the DIDEVTYPE_* values described in the reference for <a href="dinput_2ywk.htm"><b>DIDEVICEINSTANCE</b></a>.</p>
<p>
The second parameter is a pointer to a callback function that will be called once for each device enumerated. This function can be called by any name; the documentation uses the placeholder name <a href="dinput_6qwk.htm"><b>DIEnumDevicesProc</b></a>.</p>
<p>
The third parameter to the <b>EnumDevices</b> method is any 32-bit value that you want to pass into the callback function. In the examples above, it's a pointer to a variable of type <b>GUID</b>, passed in so that the callback can assign a keyboard instance GUID.</p>
<p>
The fourth parameter is a flag to request enumeration of either all devices or only those that are <a href="glossary_2wc3.htm#_dx5_attached_glos">attached</a> (DIEDFL_ALLDEVICES or DIEDFL_ATTACHEDONLY).</p>
<p>
If your application is using more than one input device, the callback function is a good place to initialize each device as it is enumerated. (For an example, see <a href="dinput_2it0.htm">Tutorial 3: Using the Joystick</a>.) The callback function is where you obtain the instance GUID of the device. You can also perform other processing here, such as looking for particular subtypes of devices.</p>
<p>
Here is a sample callback function that checks for the presence of an enhanced keyboard and stops the enumeration as soon as it finds one. It assigns the instance GUID of the last keyboard found to the <i>KeyboardGUID</i> variable (passed in as <i>pvRef</i> by the <b>EnumDevices</b> call above), which can then be used in a call to <a href="dinput_4jw4.htm"><b>IDirectInput::CreateDevice</b></a>.</p>
<pre><code>BOOL          hasEnhanced; 
 
BOOL CALLBACK DIEnumKbdProc(LPCDIDEVICEINSTANCE lpddi, 
                            LPVOID pvRef) 
{ 
  *(GUID*) pvRef = lpddi-&gt;guidInstance; 
  if (GET_DIDEVICE_SUBTYPE(lpddi-&gt;dwDevType) == 
                       DIDEVTYPEKEYBOARD_PCENH) 
  { 
    hasEnhanced = TRUE; 
    return DIENUM_STOP; 
  } 
  return DIENUM_CONTINUE; 
} // end of callback 
 </code></pre>
<p>
The first parameter points to a structure containing information about the device. This structure is created for you by DirectInput.</p>
<p>
The second parameter points to data passed in from <b>EnumDevices</b>. In this case it is a pointer to the variable <i>KeyboardGUID</i>. This variable was assigned a default value earlier, but it will be given a new value each time a device is enumerated. It is not actually important what instance GUID you use for a single keyboard, but the code does illustrate a technique for retrieving an instance GUID from the callback.</p>
<p>
The return value in this case indicates that enumeration is to stop if the sought-for device has been found, or otherwise that it is to continue. Enumeration will automatically stop as soon as all devices have been enumerated.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lights</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_lights_d3d"></a>Lights</h2>
<p>
Surfaces are illuminated in your Direct3D application by the lights you create and position. You can use the <a href="d3dimref_87c4.htm"><b>IDirect3DLight</b></a> interface to get and set lights. You can create an <b>IDirect3DLight</b> interface by calling the <a href="d3dimref_4s6c.htm"><b>IDirect3D2::CreateLight</b></a> method. </p>
<p>
Lighting is only one of the variables controlling the final appearance of a visible element in a scene. The properties of a surface (including how it reflects light) are determined by materials, which are discussed in <a href="imover_67xg.htm">Materials</a>. The shading of a surface defines how color is interpreted across a triangle; this is determined by the <a href="d3dimref_3pk4.htm#_dx5_d3drenderstate_shademode_d3d">D3DRENDERSTATE_SHADEMODE</a> render state, in the <b>D3DRENDERSTATETYPE</b> enumerated type. Finally, any texture that has been applied to a visible element also interacts with the lighting to change the object's appearance.</p>
<p>
The simplest light type is an ambient light. An ambient light illuminates everything in the scene, regardless of the orientation, position, and surface characteristics of the objects in the scene. Because an ambient light illuminates a scene with equal strength everywhere, the position and orientation of the frame it is attached to are inconsequential. Multiple ambient light sources are combined within a scene.</p>
<p>
The color and intensity of the current ambient light are states of the lighting module you can set. You can change the ambient light by using the <b>D3DLIGHTSTATE_AMBIENT</b> member of the <a href="d3dimref_1zj8.htm"><b>D3DLIGHTSTATETYPE</b></a> enumerated type.</p>
<p>
Direct3D supports four specialized light types in addition to ambient lights. These are defined by the <a href="d3dimref_4l2c.htm"><b>D3DLIGHTTYPE</b></a> enumerated type. You can specify these light types and their capabilities by calling the <a href="d3dimref_1u04.htm"><b>IDirect3DLight::SetLight</b></a> method and modifying the values in the <a href="d3dimref_95b9.htm"><b>D3DLIGHT2</b></a> structure. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>Point </td>
<td width=59%>A light source that radiates equally in all directions from its origin. Point light sources require the system to calculate a new lighting vector for every facet or normal they illuminate, and so are computationally more expensive than a <a href="glossary_33qr.htm#_dx5_parallel_point_glos">parallel point</a> light source. They produce a more faithful lighting effect than <a href="glossary_33qr.htm#_dx5_parallel_point_glos">parallel point</a> light sources, however. </td>
</tr>
<tr valign=top>
<td width=41%>Spotlight </td>
<td width=59%>A light source that emits a cone of light. Only objects within the cone are illuminated. The cone produces light of two degrees of intensity, with a central brightly lit section (the <a href="glossary_367n.htm#_dx5_umbra_glos"><i>umbra</i></a>) that acts as a point source, and a surrounding dimly lit section (the <a href="glossary_33qr.htm#_dx5_penumbra_glos"><i>penumbra</i></a>) that merges with the surrounding deep shadow. You can specify the angles of each of these two sections by modifying members of the <a href="d3dimref_95b9.htm"><b>D3DLIGHT2</b></a> structure. </td>
</tr>
<tr valign=top>
<td width=41%>Directional </td>
<td width=59%>A light source that is attached to a frame but appears to illuminate all objects with equal intensity, as if it were at an infinite distance from the objects. Directional light has orientation but no position. It is commonly used to simulate distant light sources, such as the sun. It is the best choice of light to use for maximum rendering speed. </td>
</tr>
<tr valign=top>
<td width=41%>Parallel point </td>
<td width=59%>A light source that illuminates objects with parallel light, but the orientation of the light is taken from the position of the light source. For example, two meshes on either side of a <a href="glossary_33qr.htm#_dx5_parallel_point_glos">parallel point</a> light source are lit on the side that faces the position of the source. The <a href="glossary_33qr.htm#_dx5_parallel_point_glos">parallel point</a> light source offers similar rendering-speed performance to the <a href="glossary_4xtf.htm#_dx5_directional_glos">directional</a> light source. </td>
</tr>
</table><br>
<p>
You use the <a href="d3dimref_1t0k.htm"><b>D3DCOLORVALUE</b></a> structure to specify the color of your lights. For more information, see <a href="imover_7ig4.htm">Colored Lights</a> in the Colors and Fog section. </p>
<p>
Your application can use as many lights as the device supports. To find out how many lights a device supports, call the <a href="d3dimref_2en8.htm"><b>IDirect3DDevice2::GetCaps</b></a> method and examine the <a href="d3dimref_62zo.htm"><b>D3DLIGHTINGCAPS</b></a> structure.</p>
<p>
Lighting is computationally intensive. By being careful about how you set up your lighting, you can achieve significant performance gains in your application. For detailed lighting performance information, see <a href="imover_4sys.htm">Lighting Tips</a> in the Performance Optimization section.</p>
<p>
To use a light, you first need to create a <a href="d3dimref_95b9.htm"><b>D3DLIGHT2</b></a> structure and a pointer to a light object.</p>
<pre><code>D3DLIGHT2        light;        // Structure defining the light
LPDIRECT3DLIGHT  lpD3DLight;   // Object pointer for the light
 </code></pre>
<p>
When you have done this, you need to fill in the <b>D3DLIGHT2</b> structure. The following example defines a white point light whose range is set to 10.0.</p>
<pre><code>memset(&amp;light, 0, sizeof(D3DLIGHT2));    // clear memory
 
light.dwSize = sizeof(D3DLIGHT2);        // required
light.dltType = D3DLIGHT_POINT;
light.dvPosition.x = 0.0f;               // set position
light.dvPosition.y = 10.0f;
light.dvPosition.z = 0.0f;
light.dcvColor.r = 1.0f;                 // set color to white
light.dcvColor.g = 1.0f;
light.dcvColor.b = 1.0f;
light.dvAttenuation0 = 0.0;              // set linear attenuation
light.dvAttenuation1 = 1.0;
light.dvAttenuation2 = 0.0;
light.dvRange = 10.0f;                   // set maximum range
light.dwFlags = D3DLIGHT_ACTIVE;         // enable light
 </code></pre>
<p>
The next step is to call the <a href="d3dimref_4s6c.htm"><b>IDirect3D2::CreateLight</b></a> method to create the light object. For this you need a valid <b>LPDIRECT3D2</b> interface pointer, <i>lpD3D2</i>.</p>
<pre><code>if ((err = lpD3D2-&gt;CreateLight(&amp;lpD3DLight, NULL) != D3D_OK)
return err;
 </code></pre>
<p>
When you have created the light object, you use the <a href="d3dimref_95b9.htm"><b>D3DLIGHT2</b></a> structure you have already filled in to set its properties. Calling the <a href="d3dimref_1u04.htm"><b>IDirect3DLight::SetLight</b></a> method associates the <b>D3DLIGHT2</b> structure with the light object you just created.</p>
<pre><code>if ((err = lpD3DLight-&gt;SetLight((D3DLIGHT *)&amp;light)) != D3D_OK)
return err;
 </code></pre>
<p>
Finally, you should call the <a href="d3dimref_36as.htm"><b>IDirect3DViewport2::AddLight</b></a> method to add this light to your current viewport. (Each light source is bound to a single viewport.)</p>
<pre><code>if ((err = lpView-&gt;AddLight(lpD3DLight)) != D3D_OK)
return err;
 </code></pre>
<p>
At this point you have a new light working with the current viewport. If you need to make changes to the light's values, simply update the <b>D3DLIGHT2 </b>structure and call the <b>IDirect3DLight::SetLight</b> method again.</p>
<p>
After you are finished working with the light, you should call the <a href="d3dimref_70dg.htm"><b>IDirect3DViewport2::DeleteLight</b></a> method to remove the light from the viewport, and then call the <a href="dxintro_710v.htm"><b>IDirect3DLight::Release</b></a> method.</p>
<pre><code>if (lpView) {
lpView-&gt;DeleteLight(lpD3DLight);
}
RELEASE(lpD3DLight);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enumerating Devices on MultiMon Systems</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_enumerating_devices_on_multimon_systems_ddraw"></a>Enumerating Devices on MultiMon Systems</h3>
<p>
Use the <a href="ddref_8chj.htm"><b>DirectDrawEnumerateEx</b></a> function to enumerate devices on systems with multiple monitors, specifying flags to determine what types of DirectDraw devices should be enumerated. The function calls an application-defined <a href="ddref_8fcn.htm"><b>DDEnumCallbackEx</b></a> function for each enumerated device.</p>
<p>
The <b>DirectDrawEnumerateEx</b> function is supported on Windows 98 and Windows NT 5.0 (and newer) operating systems, and can only be called by retrieving the function's address from the dynamic-link library. To do this at run-time, load the function's address from the Ddraw.dll dynamic link library by calling the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getprocaddress">
</object><a href=JavaScript:alink_1.Click()><b>GetProcAddress</b></a> Win32 function. The following example shows one way you can do this:</p>
<pre><code>HINSTANCE h = LoadLibrary("ddraw.dll");

    // If ddraw.dll doesn't exist in the search path,
    // then DirectX probably isn't installed, so fail.
    if (!h)
        return FALSE;

    // Note that you must know which version of the
    // function to retrieve (see the following text).
    // For this example, we use the ANSI version.
    LPDIRECTDRAWENUMERATEEX lpDDEnumEx;
    lpDDEnumEx = (LPDIRECTDRAWENUMERATEEX) GetProcAddress(h,"DirectDrawEnumerateExA");

    // If the function is there, call it to enumerate all display 
    // devices attached to the desktop, and any non-display DirectDraw
    // devices.
    if (lpDDEnumEx)
        lpDDEnumEx(Callback, NULL, 
            DDENUM_ATTACHEDSECONDARYDEVICES |
            DDENUM_NONDISPLAYDEVICES 
            );
    else
    {
        /*
         * We must be running on an old version of ddraw. Therefore, 
         * by definiton, multimon isn't supported. Fall back on
         * DirectDrawEnumerate to enumerate standard devices on a 
         * single monitor system.
         */
        DirectDrawEnumerate(OldCallback,NULL);

        /* Note that it could be handy to let the OldCallback function
         * be a wrapper for a DDEnumCallbackEx. 
         * 
         * Such a function would look like:
         *    BOOL FAR PASCAL OldCallback(GUID FAR *lpGUID,
         *                                LPSTR pName,
         *                                LPSTR pDesc,
         *                                LPVOID pContext)
         *    {
         *         return Callback(lpGUID,pName,pDesc,pContext,NULL);
         *    }
         */
    }

    // If the library was loaded by calling LoadLibrary(),
    // then you must use FreeLibrary() to let go of it.
    FreeLibrary(h);
 </code></pre>
<p>
The previous example will work for applications that link to Ddraw.dll at run-time or load-time.</p>
<p>
Note that you must retrieve the address of either the ANSI or Unicode version of the <a href="ddref_8chj.htm"><b>DirectDrawEnumerateEx</b></a> function, depending of the type of strings your application uses. When declaring the corresponding callback function, use the LPTSTR data type for the string parameters. The LPTSTR data type compiles to use Unicode strings if you declare the <b>_UNICODE</b> symbol, and ANSI strings otherwise. By using the LPTSTR data type, the function should link properly regardless of the string type you use in your application.</p>
<p>&nbsp;</p></body>
</HTML>

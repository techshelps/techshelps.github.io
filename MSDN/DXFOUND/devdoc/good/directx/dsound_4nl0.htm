<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Current Play and Write Positions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_current_play_and_write_positions_dsound"></a>Current Play and Write Positions</h3>
<p>
DirectSound maintains two pointers into the buffer: the current play position (or play cursor) and the current write position (or write cursor). These positions are byte offsets into the buffer, not absolute memory addresses.</p>
<p>
The <a href="dsound_7rz8.htm"><b>IDirectSoundBuffer::Play</b></a> method always starts playing at the buffer's current play position. When a buffer is created, the play position is set to zero. As a sound is played, the play position moves and always points to the next byte of data to be output. When the buffer is stopped, the play position remains where it is.</p>
<p>
The current write position is the point after which it is safe to write data into the buffer. The block between the current play position and the current write position is already committed to be played, and cannot be changed safely.</p>
<p>
Visualize the buffer as a clock face, with data written to it in a clockwise direction. The play position and the write position are like two hands sweeping around the face at the same speed, the write position always keeping a little ahead of the play position. If the play position points to the 1 and the write position points to the 2, it is only safe to write data after the 2. Data between the 1 and the 2 may already have been queued for playback by DirectSound and should not be touched.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The write position moves with the play position, not with data written to the buffer. If you're streaming data, you are responsible for maintaining your own pointer into the buffer to indicate where the next block of data should be written.</p>
<p>
Also note that the <i>dwWriteCursor</i> parameter to the <a href="dsound_2c84.htm"><b>IDirectSoundBuffer::Lock</b></a> method is not the current write position; it is the offset within the buffer where you actually intend to begin writing data. (If you do want to begin writing at the current write position, you specify DSBLOCK_FROMWRITECURSOR in the <i>dwFlags</i> parameter. In this case the <i>dwWriteCursor</i> parameter is ignored.) </p>
<p>
An application can retrieve the current play and write positions by calling the <a href="dsound_6stg.htm"><b>IDirectSoundBuffer::GetCurrentPosition</b></a> method. The <a href="dsound_602s.htm"><b>IDirectSoundBuffer::SetCurrentPosition</b></a> method lets you set the current play position, but the current write position cannot be changed.</p>
<p>&nbsp;</p></body>
</HTML>

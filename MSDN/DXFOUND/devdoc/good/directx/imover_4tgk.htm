<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mipmaps</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_mipmaps_d3d"></a>Mipmaps</h3>
<p>
A <a href="glossary_129f.htm#_dx5_mipmap_glos">mipmap</a> is a sequence of textures, each of which is a progressively lower resolution, prefiltered representation of the same image. Each prefiltered image, or level, in the mipmap is a power of two smaller than the previous level. A high-resolution level is used for objects that are close to the viewer. Lower-resolution levels are used as the object moves farther away. Mipmapping is a computationally low-cost way of improving the quality of rendered textures.</p>
<p>
You can use mipmaps when texture-filtering by specifying the appropriate filter mode in the <a href="d3dimref_1stg.htm"><b>D3DTEXTUREFILTER</b></a> enumerated type. To find out what kinds of mipmapping support are provided by a device, use the flags specified in the <b>dwTextureFilterCaps</b> member of the <a href="d3dimref_2bvo.htm"><b>D3DPRIMCAPS</b></a> structure.</p>
<p>
In DirectDraw, mipmaps are represented as a chain of attached surfaces. The highest resolution texture is at the head of the chain and has, as an attachment, the next level of the mipmap. That level has, in turn, an attachment that is the next level in the mipmap, and so on down to the lowest resolution level of the mipmap.</p>
<p>
To create a surface representing a single level of a mipmap, specify the DDSCAPS_MIPMAP flag in the <a href="ddref_8hbr.htm"><b>DDSURFACEDESC</b></a> structure passed to the <a href="ddref_9ign.htm"><b>IDirectDraw2::CreateSurface</b></a> method. Because all mipmaps are also textures, the DDSCAPS_TEXTURE flag must also be specified. It is possible to create each level manually and build the chain by using the <a href="ddref_09pz.htm"><b>IDirectDrawSurface3::AddAttachedSurface</b></a> method. However, you can use the <b>IDirectDraw2::CreateSurface</b> method to build an entire mipmap chain in a single operation. In this case, the DDSCAPS_COMPLEX flag is also required.</p>
<p>
The following example demonstrates building a chain of five <a href="glossary_129f.htm#_dx5_mipmap_glos">mipmap</a> levels of sizes 256&times;256, 128&times;128, 64&times;64, 32&times;32, and 16&times;16:</p>
<pre><code>DDSURFACEDESC       ddsd; 
LPDIRECTDRAWSURFACE3 lpDDMipMap; 
ZeroMemory(&amp;ddsd, sizeof(ddsd)); 
ddsd.dwSize = sizeof(ddsd); 
ddsd.dwFlags = DDSD_CAPS | DDSD_MIPMAPCOUNT; 
ddsd.dwMipMapCount = 5; 
ddsd.ddsCaps.dwCaps = DDSCAPS_TEXTURE | 
    DDSCAPS_MIPMAP | DDSCAPS_COMPLEX; 
ddsd.dwWidth = 256UL; 
ddsd.dwHeight = 256UL; 
 
ddres = lpDD-&gt;CreateSurface(&amp;ddsd, &amp;lpDDMipMap); 
if (FAILED(ddres)) 
. 
. 
. 
 </code></pre>
<p>
You can omit the number of mipmap levels, in which case the <a href="ddref_9ign.htm"><b>IDirectDraw2::CreateSurface</b></a> method will create a chain of surfaces, each a power of two smaller than the previous one, down to the smallest possible size. It is also possible to omit the width and height, in which case <b>IDirectDraw2::CreateSurface</b> will create the number of levels you specify, with a minimum level size of 1&times;1.</p>
<p>
A chain of mipmap surfaces is traversed by using the <a href="ddref_1mev.htm"><b>IDirectDrawSurface3::GetAttachedSurface</b></a> method and specifying the DDSCAPS_MIPMAP and DDSCAPS_TEXTURE flags in the <a href="ddref_7mlz.htm"><b>DDSCAPS</b></a> structure. The following example traverses a mipmap chain from highest to lowest resolutions:</p>
<pre><code>LPDIRECTDRAWSURFACE lpDDLevel, lpDDNextLevel; 
DDSCAPS ddsCaps; 
 
lpDDLevel = lpDDMipMap; 
lpDDLevel-&gt;AddRef(); 
ddsCaps.dwCaps = DDSCAPS_TEXTURE | DDSCAPS_MIPMAP; 
ddres = DD_OK; 
while (ddres == DD_OK) 
{ 
    // Process this level. 
    . 
    . 
    . 
    ddres = lpDDLevel-&gt;GetAttachedSurface( 
        &amp;ddsCaps, &amp;lpDDNextLevel); 
    lpDDLevel-&gt;Release(); 
    lpDDLevel = lpDDNextLevel; 
} 
if ((ddres != DD_OK) &amp;&amp; (ddres != DDERR_NOTFOUND)) 
. 
. 
. 
 </code></pre>
<p>
You can also build flipping chains of mipmaps. In this scenario, each mipmap level has an associated chain of <a href="glossary_6wtv.htm#_dx5_back_buffer_glos">back buffer</a> texture surfaces. Each back-buffer texture surface is attached to one level of the mipmap. Only the <a href="glossary_2ysz.htm#_dx5_front_buffer_glos">front buffer</a> in the chain has the DDSCAPS_MIPMAP flag set; the others are simply texture maps (created by using the DDSCAPS_TEXTURE flag). A mipmap level can have two attached texture maps, one with DDSCAPS_MIPMAP set, which is the next level in the mipmap chain, and one with the DDSCAPS_BACKBUFFER flag set, which is the back buffer of the flipping chain. All the surfaces in each flipping chain must be of the same size.</p>
<p>
It is not possible to build such a surface arrangement with a single call to the <a href="ddref_9ign.htm"><b>IDirectDraw2::CreateSurface</b></a> method. To construct a flipping mipmap, either build a complex mipmap chain and manually attach back buffers by using the <a href="ddref_09pz.htm"><b>IDirectDrawSurface3::AddAttachedSurface</b></a> method, or create a sequence of flipping chains and build the mipmap by using <b>IDirectDrawSurface3::AddAttachedSurface</b>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Blit operations apply only to a single level in the mipmap chain. To blit an entire chain of mipmaps, each level must be blitted separately.</p>
<p>
The <a href="ddref_6v93.htm"><b>IDirectDrawSurface3::Flip</b></a> method will flip all the levels of a mipmap from the level supplied to the lowest level in the mipmap. A destination surface can also be provided, in which case all levels in the mipmap will flip to the back buffer in their flipping chain. This back buffer matches the supplied override. For example, if the third back buffer in the top-level flipping chain is supplied as the override, all levels in the mipmap will flip to the third back buffer.</p>
<p>
The number of levels in a mipmap chain is stored explicitly. When an application obtains the surface description of a mipmap (by calling the <a href="ddref_201j.htm"><b>IDirectDrawSurface3::Lock</b></a> or <a href="ddref_4qt3.htm"><b>IDirectDrawSurface3::GetSurfaceDesc</b></a> method), the <b>dwMipMapCount</b> member of the <a href="ddref_8hbr.htm"><b>DDSURFACEDESC</b></a> structure will contain the number of levels in the mipmap, including the top level. For levels other than the top level in the mipmap, the <b>dwMipMapCount</b> member specifies the number of levels from that mipmap to the smallest mipmap in the chain.</p>
<p>&nbsp;</p></body>
</HTML>

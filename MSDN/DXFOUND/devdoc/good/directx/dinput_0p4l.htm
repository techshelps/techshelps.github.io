<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Function 1: DI_Init</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_sample_function_1_di_init_dinput"></a>Sample Function 1: DI_Init</h3>
<p>
This application-defined sample function creates a DirectInput object, initializes it, and retrieves the necessary interface pointers, assigning them to global variables. When initialization is complete, it acquires the device.</p>
<p>
If any part of the initialization fails, this function calls the DI_Term application-defined sample function to deallocate DirectInput objects and interface pointers in preparation for terminating the program. (See <a href="dinput_4u9g.htm">Sample Function 2: DI_Term</a>.)</p>
<p>
Besides creating the DirectInput object, the DI_Init function performs the tasks discussed in the following tutorial steps:
<ul>
<li>
<a href="dinput_3wdw.htm">Step 2: Creating the DirectInput Keyboard Device</a></li>
<li>
<a href="dinput_20c4.htm">Step 3: Setting the Keyboard Data Format</a></li>
<li>
<a href="dinput_0ppw.htm">Step 4: Setting the Keyboard Behavior</a></li>
<li>
<a href="dinput_1cms.htm">Step 5: Gaining Access to the Keyboard</a></li>
</ul>
<p>
Here is the DI_Init function:</p>
<pre><code>// HINSTANCE            g_hinst;    //initialized application instance
// HWND                 g_hwndMain; //initialized application window
LPDIRECTINPUT        g_lpDI; 
LPDIRECTINPUTDEVICE  g_lpDIDevice; 
 
BOOL WINAPI DI_Init() 
{ 
    HRESULT hr; 
 
    // Create the DirectInput object. 
    hr = DirectInputCreate(g_hinst, DIRECTINPUT_VERSION, 
                           &amp;g_lpDI, NULL); 
    if FAILED(hr) return FALSE; 
 
    // Retrieve a pointer to an IDirectInputDevice interface 
    hr = g_lpDI-&gt;CreateDevice(GUID_SysKeyboard, &amp;g_lpDIDevice, NULL); 
    if FAILED(hr) 
    { 
        DI_Term(); 
        return FALSE; 
    } 
 
// Now that you have an IDirectInputDevice interface, get 
// it ready to use. 
 
    // Set the data format using the predefined keyboard data 
    // format provided by the DirectInput object for keyboards. 
    hr = g_lpDIDevice-&gt;SetDataFormat(&amp;c_dfDIKeyboard); 
    if FAILED(hr) 
    { 
        DI_Term(); 
        return FALSE; 
    } 
 
    // Set the cooperative level 
    hr = g_lpDIDevice-&gt;SetCooperativeLevel(g_hwndMain, 
                       DISCL_FOREGROUND | DISCL_NONEXCLUSIVE); 
    if FAILED(hr) 
    { 
        DI_Term(); 
        return FALSE; 
    } 
 
    // Get access to the input device. 
    hr = g_lpDIDevice-&gt;Acquire(); 
    if FAILED(hr) 
    { 
        DI_Term(); 
        return FALSE; 
    } 
 
    return TRUE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 3: Setting the Keyboard Data Format</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_3_setting_the_keyboard_data_format_dinput"></a>Step 3: Setting the Keyboard Data Format</h3>
<p>
After retrieving an<a href="dinput_2mus.htm"> <b>IDirectInputDevice</b></a> pointer, your application must set the device's data format, as shown in <a href="dinput_0p4l.htm">Sample Function 1: DI_Init</a>. For keyboards, this is a very simple task. Call the <a href="dinput_0q0k.htm"><b>IDirectInputDevice::SetDataFormat</b></a> method, specifying the data format provided for your convenience by DirectInput in the <i>c_dfDIKeyboard</i> global variable.</p>
<p>
The following example attempts to set the data format. If this fails, it calls the DI_Term sample function to deallocate existing DirectInput objects, if any.</p>
<pre><code>hr = g_lpDIDevice-&gt;SetDataFormat(&amp;c_dfDIKeyboard); 
 
if FAILED(hr){ 
    DI_Term(); 
    return FALSE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Polling and Events</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_polling_and_events_dinput"></a>Polling and Events</h3>
<p>
There are two ways to find out whether input data is available: by polling and by event notification.</p>
<p>
Polling a device means regularly getting the current state of the device objects with <a href="dinput_0aes.htm"><b>IDirectInputDevice::GetDeviceState</b></a> or retrieving the contents of the buffer with <a href="dinput_74ms.htm"><b>IDirectInputDevice::GetDeviceData</b></a>. Polling is typically used by real-time games that are never idle but are constantly updating and rendering the game world.</p>
<p>
Event notification is suitable for applications like the Scrawl sample that wait for input before doing anything. To use event notification, you set up a thread synchronization object with the Win32 <b>CreateEvent</b> function and then associate this event with the device by passing its handle to the <a href="dinput_0lkk.htm"><b>IDirectInputDevice::SetEventNotification</b></a> method. The event is then signaled by DirectInput whenever the state of the device changes. Your application can receive notification of the event with a Win32 function such as <b>WaitForSingleObject</b>, and then respond by checking the input buffer to find out what the event was. For sample code, see the Scrawl sample and the reference for <a href="dinput_0lkk.htm"><b>IDirectInputDevice::SetEventNotification</b></a>.</p>
<p>
Some joysticks and other game devices, or particular objects on them, do not generate hardware interrupts and will not return any data or signal any events until you call the <a href="dinput_46d0.htm"><b>IDirectInputDevice2::Poll</b></a> method. To find out whether this is necessary, first set the data format for the device, then call the <a href="dinput_30l0.htm"><b>IDirectInputDevice::GetCapabilities</b></a> method and check for the DIDC_POLLEDDATAFORMAT flag in the <a href="dinput_8l9w.htm"><b>DIDEVCAPS</b></a> structure. </p>
<p>
Do not confuse the DIDC_POLLEDDATAFORMAT flag with the DIDC_POLLEDDEVICE flag. The latter will be set if any object on the device requires polling. You can then find out whether this is the case for a particular object by calling the <a href="dinput_2wj8.htm"><b>IDirectInputDevice::GetObjectInfo</b></a> method and checking for the DIDOI_POLLED flag in the <a href="dinput_26yc.htm"><b>DIDEVICEOBJECTINSTANCE</b></a> structure.</p>
<p>
The DIDC_POLLEDDEVICE flag describes the worst case for the device, not the actual situation. For example, a HID mouse with software-controllable resolution might be marked as DIDC_POLLEDDEVICE because reading the resolution information requires polling. Polling the device under these conditions is pointless if all you want is the standard button and axis data.</p>
<p>
Nonetheless it doesn't hurt to call the <b>IDirectInputDevice2::Poll</b> method for any input device. If the call is unnecessary, it will have no effect and will be very fast.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Color Keying</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h4><a name="_dx5_color_keying_ddraw"></a>Color Keying</h4>
<p>
DirectDraw supports source and destination <a href="glossary_0xbn.htm#_dx5_color_key_glos"><i>color keying</i></a> for blits and overlay surfaces. You can supply a color key or a color range for both of these types of color keying. For general information about color keying, see <a href="ddoverv_2ptj.htm">Transparent Blitting and Color Keys</a>. You set a surface's color key by calling the its <a href="ddref_9qyf.htm"><b>IDirectDrawSurface3::SetColorKey</b></a> method.</p>
<p>
When blitting, <a href="glossary_5583.htm#_dx5_source_color_key_glos"><i>source color keying</i></a> specifies a color or color range that is not copied. Likewise, <a href="glossary_4xtf.htm#_dx5_destination_color_key_glos"><i>destination color keying</i></a> specifies a color or color range that is replaced The source color key specifies what can and cannot be read from the surface. The destination color key specifies what can and cannot be written onto, or covered up, on the destination surface. If a destination surface has a color key, only the pixels that match the color key are changed, or covered up, on the destination surface.</p>
<p>
In addition to blit-related color keys, overlay surfaces can use overlay color keys. For more information, see <a href="ddoverv_8j7b.htm">Overlay Color Keys</a>.</p>
<p>
Some hardware supports color ranges only for YUV pixel data. YUV data is usually video, and the transparent background may not be a single color due to quantitization errors during conversion. Content should be written to a single transparent color whenever possible, regardless of pixel format.</p>
<p>
Color keys are specified using the pixel format of a surface. If a surface is in a palettized format, the color key is specified as an index or a range of indices. If the surface's pixel format is specified by a FOURCC code that describes a YUV format, the YUV color key is specified by the three low-order bytes in both the <b>dwColorSpaceLowValue</b> and <b>dwColorSpaceHighValue</b> members of the <a href="ddref_9ovr.htm"><b>DDCOLORKEY</b></a> structure. The lowest order byte contains the V data, the second lowest order byte contains the U data, and the highest order byte contains the Y data. The <i>dwFlags</i> parameter of the <a href="ddref_9qyf.htm"><b>IDirectDrawSurface3::SetColorKey</b></a> method specifies whether the color key is to be used for overlay or blit operations, and whether it is a source or a destination key. Some examples of valid color keys follow:</p>
<p>
<b>8-bit palettized mode</b></p>
<pre><code>// Palette entry 26 is the color key. 
dwColorSpaceLowValue = 26; 
dwColorSpaceHighValue = 26; 
 </code></pre>
<p>
<b>24-bit true-color mode</b></p>
<pre><code>// Color 255,128,128 is the color key. 
dwColorSpaceLowValue = RGBQUAD(255,128,128); 
dwColorSpaceHighValue = RGBQUAD(255,128,128); 
 </code></pre>
<p>
<b>FourCC YUV mode</b></p>
<pre><code>// Any YUV color where Y is between 100 and 110 
// and U or V is between 50 and 55 is transparent. 
dwColorSpaceLowValue = YUVQUAD(100,50,50); 
dwColorSpaceHighValue = YUVQUAD(110,55,55); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

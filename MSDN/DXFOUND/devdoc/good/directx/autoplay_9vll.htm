<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Suppressing AutoPlay</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_suppressing_autoplay_autoplay"></a>Suppressing AutoPlay</h2>
<p>
There are a variety of reasons why you might want to suppress AutoPlay. One might be that your application has a setup program that requires the user to insert a disc which contains an Autorun.inf file. In this case, you would not want the AutoPlay feature to begin running an application while your setup application is running. </p>
<p>
Another reason to suppress AutoPlay might be that your user needs to do disk swapping during your application. You would probably not want the setup program to execute while your application is in progress.</p>
<p>
You can manually prevent the Autorun.inf file on a compact disc from being parsed and carried out by holding down the <small>shift</small> key when you insert the disc. </p>
<p>
Users of Windows NT version 4.0 can suppress AutoPlay automatically using the following code example. This initialization code is based on the assumption that your setup application is in the foreground window.</p>
<pre><code>uMessage - RegisterWindowMessage(TEXT("QueryCancelAutoPlay")); 
 </code></pre>
<p>
Then, add the following code to your setup window procedure:</p>
<pre><code>if(msg == uMessage) 
{ 
    // return 1 to cancel AutoPlay 
    // return 0 to allow AutoPlay 
    return 1L; 
} 
 </code></pre>
<p>
Windows 95 users can suppress AutoPlay by setting the value of the NoDriveTypeAutoRun registry entry to 0xFF. The following code sample demonstrates how this can be done. Insert this code near the beginning of the <b>WinMain</b> function.</p>
<pre><code>const unsigned long WINDOWS_DEFAULT_AUTOPLAY_VALUE=0x095;
const unsigned long AUTOPLAYOFF=0x0FF;
  unsigned long ulOldAutoRunValue = WINDOWS_DEFAULT_AUTOPLAY_VALUE;
  unsigned long ulDisableAutoRun = AUTOPLAYOFF;
  unsigned long ulDataSize = sizeof(unsigned long);
  HKEY hkey = NULL;
char *lpzRegistryString = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer"

if( RegOpenKeyEx(HKEY_CURRENT_USER, 
    lpzRegistryString ,
    0, KEY_ALL_ACCESS, &amp;hkey ) == ERROR_SUCCESS )
{
    if( RegQueryValueEx(hkey,"NoDriveTypeAutoRun", 0, NULL,
                        (unsigned char*)&amp;ulOldAutoRunValue, 
                        &amp;ulDataSize ) == ERROR_SUCCESS )
    {
        RegSetValueEx(hkey, "NoDriveTypeAutoRun", 0, REG_BINARY, 
                      (const unsigned char*)&amp;ulDisableAutoRun, 4);
    }
    else ulOldAutoRunValue = WINDOWS_DEFAULT_AUTOPLAY_VALUE;

    RegFlushKey( hkey );
    RegCloseKey( hkey );
}</code></pre>
<p>
Just before your application terminates, it must reset the registry to the old value, as shown in the code example below:</p>
<pre><code>// Restore original AutoPlay settings.
if (RegOpenKeyEx(HKEY_CURRENT_USER,
                 lpzRegistryString ,
                 0, KEY_ALL_ACCESS, &amp;hkey ) == ERROR_SUCCESS )
{
    RegSetValueEx(hkey, "NoDriveTypeAutoRun", 0, REG_BINARY, 
                  (const unsigned char*)&amp;ulOldAutoRunValue, 
                   4 );
    RegFlushKey( hkey );
    RegCloseKey( hkey );
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

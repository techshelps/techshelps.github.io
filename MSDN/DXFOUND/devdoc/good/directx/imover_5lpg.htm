<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Projection Transform</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_projection_transform_d3d"></a>Projection Transform</h3>
<p>
You can think of the projection transform as controlling the camera's internals. The following ProjectionMatrix sample function takes three input parameters that set the near and far clipping planes and the field of view angle. The field of view should be less than pi.</p>
<pre><code>D3DMATRIX 
ProjectionMatrix(const float near_plane,     // distance to near clipping plane
                 const float far_plane,      // distance to far clipping plane
                 const float fov)            // field of view angle, in radians
{
    float    c, s, Q;
 
    c = (float)cos(fov*0.5);
    s = (float)sin(fov*0.5);
    Q = s/(1.0f - near_plane/far_plane);
 
    D3DMATRIX ret = ZeroMatrix();
    ret(0, 0) = c;
    ret(1, 1) = c;
    ret(2, 2) = Q;
    ret(3, 2) = -Q*near_plane;
    ret(2, 3) = s;
    return ret;
}   // end of ProjectionMatrix()
 </code></pre>
<p>
The following matrix is the projection matrix used by Direct3D. In this formula, <i>h</i> is the half-height of the viewing frustum, <i>F</i> is the position in z-coordinates of the back clipping plane, and <i>D</i> is the position in z-coordinates of the front clipping plane:</p>
<p>
<img src="images/projmat.gif" border=0></p>
<p>
In Direct3D, the 3,4 element of the projection matrix (the numeral 1 here) cannot be a negative number. </p>
<p>&nbsp;</p></body>
</HTML>

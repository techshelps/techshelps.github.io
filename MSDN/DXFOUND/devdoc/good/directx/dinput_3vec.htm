<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step 4: Preparing for Buffered Input from the Mouse</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_step_4_preparing_for_buffered_input_from_the_mouse_dinput"></a>Step 4: Preparing for Buffered Input from the Mouse</h3>
<p>
The Scrawl application demonstrates how to use event notification to find out about mouse activity, and how to read buffered input from the mouse. Both these techniques require some setup. You can perform these steps at any time after creating the mouse device and before acquiring it.</p>
<p>
First, create an event and associate it with the mouse device. You are instructing DirectInput to notify the mouse device object whenever a hardware interrupt indicates that new data is available.</p>
<p>
This is how it's done in Scrawl. As usual, the Complain sample function informs the user of any errors.</p>
<pre><code>// HANDLE  g_hevtMouse;   // This is global

g_hevtMouse = CreateEvent(0, 0, 0, 0);

if (g_hevtMouse == NULL) {
    Complain(hwnd, GetLastError(), "CreateEvent");
    return FALSE;
}
 
hr = g_pMouse-&gt;SetEventNotification(g_hevtMouse);
 
if (FAILED(hr)) {
    Complain(hwnd, hr, "SetEventNotification(SysMouse)");
    return FALSE;
}
 </code></pre>
<p>
Now you need to set the buffer size so that DirectInput can store any input data until you're ready to look at it. Remember, by default the buffer size is zero, so this step is essential if you want to use buffered data.</p>
<p>
It's not necessary to used buffered data with event notification; if you prefer, you can retrieve immediate data when an event is signaled.</p>
<p>
To set the buffer size you need to initialize a <a href="dinput_8244.htm"><b>DIPROPDWORD</b></a> structure with information about itself and about the property you wish to set. Most of the values are boilerplate; the key value is the last one, <b>dwData</b>, which is initialized with the number of items you want the buffer to hold.</p>
<pre><code>#define DINPUT_BUFFERSIZE  16

DIPROPDWORD dipdw =
    {
        // the header
        {
            sizeof(DIPROPDWORD),        // diph.dwSize
            sizeof(DIPROPHEADER),       // diph.dwHeaderSize
            0,                          // diph.dwObj
            DIPH_DEVICE,                // diph.dwHow
        },
        // the data
        DINPUT_BUFFERSIZE,              // dwData
    };
 </code></pre>
<p>
You then pass the address of the header (the <a href="dinput_8bhw.htm"><b>DIPROPHEADER</b></a> structure within the <b>DIPROPDWORD</b> structure), along with the identifier of the property you want to change, to the <a href="dinput_24vo.htm"><b>IDirectInputDevice::SetProperty</b></a> method, as follows:</p>
<pre><code>hr = g_pMouse-&gt;SetProperty(DIPROP_BUFFERSIZE, &amp;dipdw.diph);
 
if (FAILED(hr)) {
    Complain(hwnd, hr, "Set buffer size(SysMouse)");
    return FALSE;
 }
 </code></pre>
<p>
The setup is now complete, and you're ready to acquire the mouse and start collecting data.</p>
<p>&nbsp;</p></body>
</HTML>

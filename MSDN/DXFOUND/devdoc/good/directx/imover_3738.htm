<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Execute-Buffer Contents</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_execute_buffer_contents_d3d"></a>Execute-Buffer Contents</h3>
<p>
Execute buffers contain a list of vertices followed by stream of instructions about how to use those vertices. All of these are <b>DWORD</b>-aligned.</p>
<p>
The following illustration shows the format of execute buffers.</p>
<p>
<img src="images/exebuff.gif" border=0></p>
<p>
The instruction stream consists of operation codes, or <i>opcodes</i>, and the data that is operated on by those opcodes. The opcodes define how the vertex list should be lit and rendered. Direct3D opcodes are listed in the <a href="d3dimref_7lwk.htm"><b>D3DOPCODE</b></a> enumerated type. The <a href="d3dimref_8yas.htm"><b>D3DINSTRUCTION</b></a> structure describes instructions in an execute buffer; it contains an opcode, the size of each instruction data unit, and a count of the relevant data units that follow.</p>
<p>
One of the most common instructions is a <i>triangle list</i> (<b>D3DOP_TRIANGLE</b>), which is simply a list of triangle primitives that reference vertices in the vertex list. Because all the primitives in the instruction stream reference vertices in the vertex list only, it is easy for the transformation module to reject a whole buffer of primitives if its vertices are outside the <a href="glossary_76pf.htm#_dx5_viewing_frustum_glos">viewing frustum</a>.</p>

<h4><a name="_dx5_execute_buffer_vertices_d3d"></a>Execute Buffer Vertices</h4>
<p>
Each <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a> contains a vertex list followed by an instruction stream. The instruction stream defines how the vertex list should be rendered; it is based on indices into the vertex list.</p>
<p>
Although you can choose to use transformed and lit vertices (<a href="d3dimref_2ois.htm"><b>D3DTLVERTEX</b></a>), vertices that have only been lit (<a href="d3dimref_7wkk.htm"><b>D3DLVERTEX</b></a>), or vertices that have been neither transformed nor lit (<a href="d3dimref_8pwk.htm"><b>D3DVERTEX</b></a>), you can have only one of each type of vertex in a single Direct3DExecuteBuffer object. Some execute buffers are used only to change the state of one or more of the modules in the graphics pipeline; these execute buffers do not have vertices.</p>
<p>
<img src="images/exebuff2.gif" border=0></p>
<p>
For more information about the handling of vertices in <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffers</a>, see <a href="imover_02zo.htm">Vertex Types</a>.</p>

<h4><a name="_dx5_execute_buffer_instructions_d3d"></a>Execute Buffer Instructions</h4>
<p>
The vertex data in an <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a> is followed by an instruction stream.</p>
<p>
Each instruction is represented by:
<ul>
<li>
An instruction header</li>
<li>
Opcode</li>
<li>
Byte size</li>
<li>
Number of times this opcode is to be repeated</li>
<li>
Byte offset to first instruction</li>
</ul>
<p>
<a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">Execute buffer</a> instructions are commands to the driver. Each instruction is identified by an operation code (opcode). All execute data is prefixed by an instruction header. Data accompanies each iteration of each opcode.</p>
<p>
Each opcode can have multiple arguments, including multiple triangles or multiple state changes.</p>
<p>
There are only a few main instruction types:
<ul>
<li>
<b>Drawing</b></li>
<li>
<b>State changes</b></li>
<li>
<b>Control flow</b></li>
<li>
<b>Others</b></li>
</ul>

<h5><a name="_dx5_drawing_instructions_d3d"></a>Drawing Instructions</h5>
<p>
The most important of the drawing instructions defines a triangle. In a triangle, vertices are zero-based indices into the vertex list that begins the <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>. For more information about triangles, see <a href="imover_48f8.htm#_dx5_triangles_d3d">Triangles</a>.</p>
<p>
Other important drawing instructions include line-drawing instructions (<a href="d3dimref_7m78.htm"><b>D3DLINE</b></a>) and line-drawing instructions (<a href="d3dimref_5p2d.htm"><b>D3DPOINT</b></a>).</p>

<h5><a name="_dx5_state_change_instructions_d3d"></a>State-change Instructions</h5>
<p>
The system stores the state of each of the modules in the graphics pipeline until the state is overridden by an instruction in an <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>Transformation state </td>
<td width=59%>World, view and projection matrices </td>
</tr>
<tr valign=top>
<td width=41%>Light state </td>
<td width=59%>Surface material, fog, ambient lighting </td>
</tr>
<tr valign=top>
<td width=41%>Render state </td>
<td width=59%>Texture, antialiasing, z-buffering, and so on </td>
</tr>
</table><br>

<h5><a name="_dx5_flow_control_instructions_d3d"></a>Flow-control Instructions</h5>
<p>
The flow-control instructions allow you to branch on an instruction or to jump to a new position in the <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>, skipping or repeating instructions as necessary. This means that you can use the flow-control instructions as a kind of programming language.</p>
<p>
The last flow-control instruction in an execute buffer must be <b>D3DOP_EXIT</b>.</p>

<h5><a name="_dx5_other_instructions_d3d"></a>Other Instructions</h5>
<p>
Some other execute-buffer instructions do not fall neatly into the other categories. These include: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>Texturing </td>
<td width=59%>Download a texture to the device </td>
</tr>
<tr valign=top>
<td width=41%>Matrices </td>
<td width=59%>Download or multiply a matrix </td>
</tr>
<tr valign=top>
<td width=41%>Span, SetState </td>
<td width=59%>Advanced control for primitives and rendering states. </td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

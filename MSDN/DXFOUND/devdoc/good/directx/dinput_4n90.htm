<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Output Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_output_data_dinput"></a>Output Data</h3>
<p>
Human Interface Devices may accept output as well as generating input. The <a href="dinput_9sc4.htm"><b>IDirectInputDevice2::SendDeviceData</b></a> method is used to send packets of data to such devices.</p>
<p>
<b>SendDeviceData</b> may be viewed as <a href="dinput_74ms.htm"><b>IDirectInputDevice::GetDeviceData</b></a> in reverse. Like that method, it uses the <a href="dinput_5cms.htm"><b>DIDEVICEOBJECTDATA</b></a> structure as the basic unit of data. In this case, however, the <b>dwOfs</b> member contains the instance ID of the device object associated with the data, rather than its offset in the data format for the device. (Because offset identifiers exist only for device objects that provide input in the selected data format, an object that only accepts output may not even have an offset.) The <b>dwData</b> member contains whatever data is appropriate for the object. The <b>dwTimeStamp</b> and <b>dwSequence</b> members are not used and must be set to zero.</p>
<p>
To send data to the device, you first set up an array of <b>DIDEVICEOBJECTDATA</b> structures, fill the required number of elements with data, then pass its address and the number of elements used to <b>SendDeviceData</b>. Data for different device objects is combined into a single packet that is then sent to the device.</p>
<p>
The form of the data packet is specific to the device, as is the treatment of unused fields in the packet. Some devices may treat fields as optional, meaning that if no data is supplied, the state of the object remains unchanged.More commonly, all fields are significant, even when you do not specifically supply data for them. For example, if you send data to a single keyboard LED, it is assumed that the data for the other two LEDs is zero and they will be turned off. However, you can override this behavior by using the DISDD_CONTINUE flag, in which case the data for the other two LEDs will be the value you most recently sent them.</p>
<p>
The following function, when called repeatedly, causes the LEDs on the keyboard, as represented by the <b>IDirectInputDevice2</b> interface <i>pdev</i>, to flash in a recurring pattern. The device object identifiers, <i>NumLockID</i>, <i>CapsLockID</i>, and <i>ScrollLockID</i>, have previously been obtained from the <b>dwType</b> member of the <a href="dinput_26yc.htm"><b>DIDEVICEOBJECTINSTANCE</b></a> structure, either during enumeration of device objects or by calling <a href="dinput_2wj8.htm"><b>IDirectInputDevice::GetObjectInfo</b></a>. It is assumed that the high bit of the data byte determines the state of the LED.</p>
<pre><code>void FlashLEDs(void)
    {
    static int         rgiBits[] = { 1, 2, 4, 2 };
    static int         iLooper = 0; 
    DWORD              cdod = 3;                  // number of items
    DIDEVICEOBJECTDATA rgdod[3];
    HRESULT            hres;
 
    // Must clear dwTimeStamp and dwSequence
    ZeroMemory(rgdod, sizeof(rgdod));

    rgdod[0].dwOfs = NumLockID; 
    rgdod[1].dwOfs = CapsLockID 
    rgdod[2].dwOfs = ScrollLockID;

    rgdod[0].dwData = (rgiBits[iLooper] &amp; 1) ? 0x80 : 0; 
                                           // 1,0,0,0,...
    rgdod[1].dwData = (rgiBits[iLooper] &amp; 2) ? 0x80 : 0; 
                                           // 0,1,0,1,...
    rgdod[2].dwData = (rgiBits[iLooper] &amp; 4) ? 0x80 : 0; 
                                           // 0,0,1,0,...

    iLooper = (iLooper + 1) % ARRAYSIZE(rgiBits); // loops from 0 to 3
 
    hres = IDirectInputDevice2_SendDeviceData(pdev,
            sizeof(DIDEVICEOBJECTDATA), 
            rgdod, &amp;cdod, 0);
    }</code></pre>
<p>&nbsp;</p></body>
</HTML>

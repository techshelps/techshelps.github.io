<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Immediate Keyboard Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h4><a name="_dx5_immediate_keyboard_data_dinput"></a>Immediate Keyboard Data</h4>
<p>
To retrieve the current state of the keyboard, call the <a href="dinput_0aes.htm"><b>IDirectInputDevice::GetDeviceState</b></a> method with a pointer to an array of 256 bytes that will hold the returned data.</p>
<p>
The <b>GetDeviceState</b> method behaves in the same way as the Win32 <b>GetKeyboardState</b> function, returning a snapshot of the current state of the keyboard. Each key is represented by a byte in the array of 256 bytes whose address was passed as the <i>lpvData</i> parameter. If the high bit of the byte is set, the key is down. The array is most conveniently indexed with the DirectInput <a href="dinput_56t1.htm">Keyboard Device Constants</a>. (See also <a href="dinput_8v1w.htm">Interpreting Keyboard Data</a>.)</p>
<p>
Here is an example that does something in response to the ESC key being down:</p>
<pre><code>// LPDIRECTINPUTDEVICE  lpdiKeyboard;  // previously initialized
                                       // and acquired 
 
BYTE  diKeys[256]; 
if (lpdiKeyboard-&gt;GetDeviceState(256, diKeys) == DI_OK) 
{ 
  if (diKeys[DIK_ESCAPE] &amp; 0x80) DoSomething(); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IUnknown Interface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_iunknown_interface_dxintro"></a>IUnknown Interface</h2>
<p>
All COM interfaces are derived from an interface called <b>IUnknown</b>. This interface provides DirectX with control of the object's lifetime and the ability to navigate multiple interfaces. <b>IUnknown</b> has three methods:
<ul>
<li>
<a href="dxintro_1xm7.htm"><b>AddRef</b></a>, which increments the object's reference count by 1 when an interface or another application binds itself to the object.</li>
<li>
<a href="dxintro_0pgv.htm"><b>QueryInterface</b></a>, which queries the object about the features it supports by requesting pointers to a specific interface.</li>
<li>
<a href="dxintro_710v.htm"><b>Release</b></a>, which decrements the object's reference count by 1. When the count reaches 0, the object is deallocated.</li>
</ul>
<p>
The <b>AddRef</b> and <b>Release</b> methods maintain an object's reference count. For example, if you create a DirectDrawSurface object, the object's reference count is set to 1. Every time a function returns a pointer to an interface for that object, the function then must call <b>AddRef</b> through that pointer to increment the reference count. You must match each <b>AddRef</b> call with a call to <b>Release</b>. Before the pointer can be destroyed, you must call <b>Release</b> through that pointer. After an object's reference count reaches 0, the object is destroyed and all interfaces to it become invalid.</p>
<p>
The <b>QueryInterface</b> method determines whether an object supports a specific interface. If an object supports an interface, <b>QueryInterface</b> returns a pointer to that interface. You then can use the methods contained in that interface to communicate with the object. If <b>QueryInterface</b> successfully returns a pointer to an interface, it implicitly calls <b>AddRef</b> to increment the reference count, so your application must call <b>Release</b> to decrement the reference count before destroying the pointer to the interface.</p>
<p>&nbsp;</p></body>
</HTML>

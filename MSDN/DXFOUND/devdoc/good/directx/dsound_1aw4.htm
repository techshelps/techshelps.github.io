<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectSound Property Sets</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_directsound_property_sets_dsound"></a>DirectSound Property Sets</h2>
<p>
Through the <a href="dsound_5mn8.htm"><b>IKsPropertySet</b></a> interface, DirectSound is able to support extended services offered by sound cards and their associated drivers.</p>
<p>
Properties are arranged in sets. A <b>GUID</b> identifies a set, and a <b>ULONG</b> identifies a particular property within the set. For example, a hardware vendor might design a card capable of reverberation effects and define a property set <b>DSPROPSETID_ReverbProperties</b> containing properties such as <b>DSPROPERTY_REVERBPROPERTIES_HALL</b> and <b>DSPROPERTY_REVERBPROPERTIES_STADIUM</b>.</p>
<p>
Typically, the property identifiers are defined using a C language enumeration starting at ordinal 0.</p>
<p>
Individual properties may also have associated parameters. The <b>IKsPropertySet</b> interface specification intentionally leaves these parameters undefined, allowing the designer of the property set to use them in a way most beneficial to the properties within the set being designed. The precise meaning of the parameters is defined with the definition of the properties.</p>
<p>
To make use of extended properties on sound cards, you must first determine whether the driver supports the <b>IKsPropertySet</b> interface, and obtain a pointer to the interface if it is supported. You can do this by calling the <a href="dxintro_0pgv.htm"><b>QueryInterface</b></a> method of an existing interface on a DirectSound3DBuffer object.</p>
<pre><code>HRESULT hr = lpDirectSound3DBuffer-&gt;QueryInterface(
                               IID_IKsPropertySet,
                               (void**)&amp;lpKsPropertySet))
 </code></pre>
<p>
In the example, <i>lpDirectSound3DBuffer</i> is a pointer to the buffer's interface and <i>lpKsPropertySet</i> receives the address of the <b>IKsPropertySet</b> interface if one is found. <i>IID_IKsPropertySet</i> is a <b>GUID</b> defined in Dsound.h.</p>
<p>
The call will succeed only if the buffer is hardware-accelerated and the underlying driver supports property sets. If it does succeed, you can now look for a particular property using the <a href="dsound_8n38.htm"><b>IKsPropertySet::QuerySupport</b></a> method. The value of the <i>PropertySetId</i> parameter is a <b>GUID</b> defined by the hardware vendor.</p>
<p>
Once you've determined that support for a particular property exists, you can change the state of the property by using the <a href="dsound_61yc.htm"><b>IKsPropertySet::Set</b></a> method and determine its present state by using the <a href="dsound_6ep0.htm"><b>IKsPropertySet::Get</b></a> method. The state of the property is set or returned in the <i>pPropertyData</i> parameter.</p>
<p>
Additional property parameters may also be passed to the object in a structure pointed to by the <i>pPropertyParams </i>parameter to the <b>IKsPropertySet::Set</b> method. The exact way in which this parameter is to be used is defined in the hardware vendor's specifications for the property set, but typically it would be used to define the instance of the property set. In practice, the <i>pPropertyParams</i> parameter is rarely used.</p>
<p>
Let's take a somewhat whimsical example. Suppose a sound card has the ability to play famous arias in the voices of several tenors. The driver developer creates a property set, DSPROPSETID_Aria, containing properties like DSPROPERTY_ARIA_VESTI_LA_GIUBBA and DSPROPERTY_ARIA_CHE_GELIDA_MANINA. The property set applies to all of the tenors, and the driver developer has specified that <i>pPropertyParams</i> defines the tenor instance. Now you, the application developer, want to make Caruso sing the great aria from <i>Pagliacci</i>. </p>
<pre><code>DWORD WhichTenor = CARUSO;
BOOL  StartOrStop = START;

HRESULT hr = lpKsPropertySet-&gt;Set(
                     DSPROPSETID_Aria,
                     KSPROPERTY_ARIA_VESTI_LA_GIUBBA,
                     &amp;WhichTenor,
                     sizeof(WhichTenor),
                     &amp;StartOrStop),
                     sizeof(StartOrStop));
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

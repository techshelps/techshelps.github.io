<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Effect Enumeration</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_dx5_effect_enumeration_dinput"></a>Effect Enumeration</h3>
<p>
The <a href="dinput_3i5w.htm"><b>IDirectInputDevice2::EnumEffects</b></a> method returns information about the support offered by the device for various kinds of effects.</p>
<p>
It is important to distinguish between <i>supported</i> <i>effects </i>and <i>created effects</i>, or <i>effect objects</i>. A supported effect might be a constant force that can be shaped by an <a href="glossary_8yb7.htm#_dx5_envelope_glos">envelope</a>. However, this effect has no properties such as magnitude, direction, duration, <a href="glossary_2wc3.htm#_dx5_attack_glos">attack</a>, or <a href="glossary_2ysz.htm#_dx5_fade_glos">fade</a>. You set these properties when you create an effect object in your application. A supported effect may be represented by many effect objects, each with different parameters—for example, several constant forces each with different duration, magnitude, and direction. </p>
<p>
For information on enumerating created effects, see <a href="dinput_56b8.htm">Effect Object Enumeration</a>.</p>
<p>
Like other DirectInput enumerations, the <b>IDirectInputDevice2::EnumEffects</b> method requires a callback function; this is documented with the placeholder name <a href="dinput_7pv8.htm"><b>DIEnumEffectsProc</b></a>, but you can use a different name if you wish. This function is called for each effect enumerated. Within the function you can obtain the GUID for each effect, get information about the extent of hardware support, and create one or more effect objects whose methods you can use to manipulate the effect.</p>
<p>
Here is a skeletal C++ example of the callback function, and the call to the <b>IDirectInputDevice2::EnumEffects</b> method that sets the enumeration in motion. Note that the <i>pvRef</i> parameter of the callback can be any 32-bit value; in this case it is a pointer to the device interface, used for getting information about effects supported by the device and for creating effect objects. </p>
<pre><code>HRESULT  hr;
// LPDIRECTINPUTDEVICE lpdid2;   // already initialized 
 
BOOL CALLBACK DIEnumEffectsProc(LPCDIEFFECTINFO pdei, 
                                LPVOID pvRef)
{
    LPDIRECTINPUTDEVICE2 lpdid = pvRef;   // pointer to calling device
    LPDIRECTINPUTEFFECT  lpdiEffect;      // pointer to created effect
    DIEFFECT             diEffect;        // params for created effect
    DICONSTANTFORCE      diConstantForce; // type-specific parameters
                                          // for diEffect
    
 
    if (DIEF_GETTYPE(pdei-&gt;dwEffType) == DIEFFT_CONSTANTFORCE)
    {
       /* Here you can extract information about support for the 
          effect type (from pdei), and tailor your effects 
          accordingly. For example, the device might not support
          envelopes for this type of effect. */
       .
       .
       .
       // Create one or more constant force effects. 
       // For each you have to initialize a DICONSTANTFORCE 
       // and a DIEFFECT structure. 
       // See detailed example at Creating an Effect
       .
       .
       .
        hr = pdid-&gt;CreateEffect(pdei-&gt;guid,
                                &amp;diEffect,
                                &amp;lpdiEffect,
                                NULL);
       .
       .
       .
    }
    // And so on for other types of effect
   .
   .
   .
  
    return DIENUM_CONTINUE;
}  // end of callback
.
.
.
// Set the callback into motion
hr = lpdid2-&gt;EnumEffects(&amp;EnumEffectsProc,
                        lpdid2, DIEFT_ALL);
 </code></pre>
<p>
For more information on how to initialize an effect, see <a href="dinput_2wqc.htm">Creating an Effect</a>.</p>
<p>&nbsp;</p></body>
</HTML>

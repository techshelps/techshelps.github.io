<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DTRIANGLE</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_d3dtriangle_d3d"></a>D3DTRIANGLE</h1>
<p>
The <b>D3DTRIANGLE</b> structure describes the base type for all triangles. The triangle is the main rendering primitive.</p>
<p>
For related information, see the <b>D3DOP_TRIANGLE</b> member in the <a href="d3dimref_7lwk.htm"><b>D3DOPCODE</b></a> enumerated type.</p>
<pre><code>typedef struct _D3DTRIANGLE { 
    union { 
        WORD v1; 
        WORD wV1; 
    }; 
    union { 
        WORD v2; 
        WORD wV2; 
    }; 
    union { 
        WORD v3; 
        WORD wV3; 
    }; 
    WORD     wFlags; 
} D3DTRIANGLE, *LPD3DTRIANGLE; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>wV1</b>, <b>wV2</b>, and <b>wV3</b></dt>
<dd>
Vertices describing the triangle.</dd>
<dt>
<b>wFlags</b></dt>
<dd>
This value can be a combination of the following flags:
<p>
<b>Edge flags</b> 

<p>
These flags describe which edges of the triangle to enable. (This information is useful only in wireframe mode.) 

<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_edgeenable1_d3d"></a>D3DTRIFLAG_EDGEENABLE1 </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Edge defined by <b>v1</b>–<b>v2</b>. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_edgeenable2_d3d"></a>D3DTRIFLAG_EDGEENABLE2 </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Edge defined by <b>v2</b>–<b>v3</b>. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_edgeenable3_d3d"></a>D3DTRIFLAG_EDGEENABLE3 </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Edge defined by <b>v3</b>–<b>v1</b>. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_edgeenabletriangle_d3d"></a>D3DTRIFLAG_EDGEENABLETRIANGLE </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>All edges. </td>
</tr>
</table><br>


<p>
<b>Strip and fan flags</b> 

<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_even_d3d"></a>D3DTRIFLAG_EVEN </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The <b>v1</b>–<b>v2</b> edge of the current triangle is adjacent to the <b>v3</b>–<b>v1</b> edge of the previous triangle; that is, <b>v1</b> is the previous <b>v1</b>, and <b>v2</b> is the previous <b>v3</b>. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_odd_d3d"></a>D3DTRIFLAG_ODD </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>The <b>v1</b>–<b>v2</b> edge of the current triangle is adjacent to the <b>v2</b>–<b>v3</b> edge of the previous triangle; that is, <b>v1</b> is the previous <b>v3</b>, and <b>v2</b> is the previous <b>v2</b>. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_start_d3d"></a>D3DTRIFLAG_START </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Begin the strip or fan, loading all three vertices. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><a name="_dx5_d3dtriflag_startflat_d3d"></a>D3DTRIFLAG_STARTFLAT(len) </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Cull or render the triangles in the strip or fan based on the treatment of this triangle. That is, if this triangle is culled, also cull the specified number of subsequent triangles. If this triangle is rendered, also render the specified number of subsequent triangles.<p>
This length must be greater than zero and less than 30. </p>
</td>
</tr>
</table><br>

</dd>
</dl>

<h4>Remarks</h4>
<p>
This structure can be used directly for all triangle fills. For flat shading, the color and specular components are taken from the first vertex. The three vertex indices <b>v1</b>, <b>v2</b>, and <b>v3</b> are vertex indexes into the vertex list at the start of the <a href="glossary_8yb7.htm#_dx5_execute_buffer_glos">execute buffer</a>.</p>
<p>
Enabled edges are visible in wireframe mode. When an application displays wireframe triangles that share an edge, it typically enables only one (or neither) edge to avoid drawing the edge twice.</p>
<p>
The D3DTRIFLAG_ODD and D3DTRIFLAG_EVEN flags refer to the locations of a triangle in a conventional triangle strip or fan. If a triangle strip had five triangles, the following flags would be used to define the strip: </p>
<p>
D3DTRIFLAG_START <br>
D3DTRIFLAG_ODD <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_ODD <br>
D3DTRIFLAG_EVEN </p>
<p>
Similarly, the following flags would define a triangle fan with five triangles: </p>
<p>
D3DTRIFLAG_START <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_EVEN </p>
<p>
The following flags could define a flat triangle fan with five triangles: </p>
<p>
D3DTRIFLAG_STARTFLAT(4) <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_EVEN <br>
D3DTRIFLAG_EVEN </p>
<p>
For more information, see <a href="imover_43z8.htm">Triangle Strips and Fans</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in d3dtypes.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving Newer Interfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dx5_retrieving_newer_interfaces_dxintro"></a>Retrieving Newer Interfaces</h2>
<p>
The component object model dictates that objects update their functionality not by changing the methods within existing interfaces, but by extending new interfaces that encompass new features. In keeping existing interfaces static, an object built on COM can freely extend its services while maintaining compatibility with older applications.</p>
<p>
DirectX components following this philosophy. For example, the DirectDraw component supports three versions of the <b>IDirectDrawSurface</b> interface: <b>IDirectDrawSurface</b>, <b>IDirectDrawSurface2</b>, and <a href="ddref_8053.htm"><b>IDirectDrawSurface3</b></a>. Each version of the interface supports the methods provided by its ancestor, adding new methods to support new features. If your application doesn't need to use these new features, it doesn't need to retrieve newer interfaces. However, to take advantage of features provided by a new interface, you must call the object's <a href="dxintro_0pgv.htm"><b>IUnknown::QueryInterface</b></a> method, specifying the globally unique identifier (GUID) of the interface you want to retrieve. Interface GUIDs are declared in the corresponding header file.</p>
<p>
The following example shows how to query for a new interface:</p>
<pre><code>LPDIRECTDRAW    lpDD1;
    LPDIRECTDRAW2   lpDD2;

    ddrval = DirectDrawCreate( NULL, &amp;lpDD1, NULL );
    if( FAILED(ddrval))
        goto ERROROUT;

    // Query for the IDirectDraw2 interface
    ddrval = lpDD1-&gt;QueryInterface(IID_IDirectDraw2, (void **)&amp;lpDD2);
    if( FAILED(ddrval))
        goto ERROROUT;
    
    // Now that we have an IDirectDraw2, release the original interface.
    lpDD1-&gt;Release();
 </code></pre>
<p>
In some rare cases, a new interface will not support some methods provided in a previous interface version. The <a href="d3dimref_1z1g.htm"><b>IDirect3DDevice2</b></a> interface is an example of this type of interface. If your application requires features provided by an earlier version of an interface, you can query for the earlier version in the same way as shown in the preceding example, using the GUID of the older interface to retrieve it.</p>
<p>&nbsp;</p></body>
</HTML>

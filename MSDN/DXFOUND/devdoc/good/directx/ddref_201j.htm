<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDirectDrawSurface3::Lock</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dx5_idirectdrawsurface3_lock_ddraw"></a>IDirectDrawSurface3::Lock</h1>
<p>
The <b>IDirectDrawSurface3::Lock</b> method obtains a pointer to the surface memory.</p>
<pre><code><b>HRESULT Lock(
  LPRECT</b><i> lpDestRect</i><b>,                </b>
<b>  LPDDSURFACEDESC</b><i> lpDDSurfaceDesc</i><b>,  </b>
<b>  DWORD</b><i> dwFlags</i><b>,                    </b>
<b>  HANDLE</b><i> hEvent                     </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpDestRect</i></dt>
<dd>
Address of a <b>RECT</b> structure that identifies the region of surface that is being locked. If NULL, the entire surface will be locked.</dd>
<dt>
<i>lpDDSurfaceDesc</i></dt>
<dd>
Address of a <a href="ddref_8hbr.htm"><b>DDSURFACEDESC</b></a> structure that will be filled with the relevant details about the surface.</dd>
<dt>
<i>dwFlags</i> </dt>
<dd>

<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%>DDLOCK_EVENT</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=82%>This flag is not currently implemented. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DDLOCK_NOSYSLOCK</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=82%>If possible, do not take the Win16Lock. This flag is ignored when locking the primary surface. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DDLOCK_READONLY</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=82%>Indicates that the surface being locked will only be read from. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DDLOCK_SURFACEMEMORYPTR</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=82%>Indicates that a valid memory pointer to the top of the specified rectangle should be returned. If no rectangle is specified, a pointer to the top of the surface is returned. This is the default.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DDLOCK_WAIT</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=82%>If a lock cannot be obtained because a blit operation is in progress, the method retries until a lock is obtained or another error occurs, such as <a href="ddref_71rr.htm#_dx5_dderr_surfacebusy_ddraw">DDERR_SURFACEBUSY</a>.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>DDLOCK_WRITEONLY</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=82%>Indicates that the surface being locked will only be written to. </td>
</tr>
</table><br>

</dd>
<dt>
<i>hEvent</i></dt>
<dd>
This parameter is not used and must be set to NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the method succeeds, the return value is DD_OK.</p>
<p>
If the method fails, the return value may be one of the following error values: </p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidobject_ddraw">DDERR_INVALIDOBJECT</a> </td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_invalidparams_ddraw">DDERR_INVALIDPARAMS</a> </td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_outofmemory_ddraw">DDERR_OUTOFMEMORY</a> </td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_surfacebusy_ddraw">DDERR_SURFACEBUSY</a> </td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_surfacelost_ddraw">DDERR_SURFACELOST</a> </td>
</tr>
<tr valign=top>
<td width=100%><a href="ddref_71rr.htm#_dx5_dderr_wasstilldrawing_ddraw">DDERR_WASSTILLDRAWING</a> </td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
For more information on using this method, see <a href="ddoverv_13nb.htm">Accessing the Frame-Buffer Directly</a>.</p>
<p>
After retrieving a surface memory pointer, you can access the surface memory until a corresponding <a href="ddref_0w53.htm"><b>IDirectDrawSurface3::Unlock</b></a> method is called. When the surface is unlocked, the pointer to the surface memory is invalid.</p>
<p>
Do not call DirectDraw blit functions to blit from a locked region of a surface. If you do, the blit returns either <a href="ddref_71rr.htm#_dx5_dderr_surfacebusy_ddraw">DDERR_SURFACEBUSY</a> or <a href="ddref_71rr.htm#_dx5_dderr_lockedsurfaces_ddraw">DDERR_LOCKEDSURFACES</a>. Additionally, GDI blit functions will silently fail when used on a locked video memory surface.</p>
<p>
This method often causes DirectDraw to hold the Win16Lock until you call the <b>IDirectDrawSurface3::Unlock</b> method. GUI debuggers cannot operate while the Win16Lock is held.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ddraw.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use ddraw.lib.</p>
<h4>See Also</h4>
<p>
<a href="ddref_0w53.htm"><b>IDirectDrawSurface3::Unlock</b></a>, <a href="ddref_4q0n.htm"><b>IDirectDrawSurface3::GetDC</b></a>, <a href="ddref_0xpz.htm"><b>IDirectDrawSurface3::ReleaseDC</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ValidateOnSet Property Example (DAO/Microsoft Jet)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<p class=label>
<b><a name="daprovalidateonsetx"></a>ValidateOnSet Property Example</b></p>
<p>
This example uses the <b>ValidateOnSet</b> property to demonstrate how one might trap for errors during data entry. The ValidateData function is required for this procedure to run.</p>
<pre><code>Sub ValidateOnSetX()

   Dim dbsNorthwind As Database
   Dim fldDays As Field
   Dim rstEmployees As Recordset

   Set dbsNorthwind = OpenDatabase("Northwind.mdb")

   ' Create and append a new Field object to the Fields 
   ' collection of the Employees table.
   Set fldDays = _
      dbsNorthwind.TableDefs!Employees.CreateField( _
      "DaysOfVacation", dbInteger, 2)
   fldDays.ValidationRule = "BETWEEN 1 AND 20"
   fldDays.ValidationText = _
      "Number must be between 1 and 20!"
   dbsNorthwind.TableDefs!Employees.Fields.Append fldDays

   Set rstEmployees = _
      dbsNorthwind.OpenRecordset("Employees")

   With rstEmployees

      Do While True
         ' Add new record.
         .AddNew

         ' Get user input for three fields. Verify that the 
         ' data do not violate the validation rules for any 
         ' of the fields.
         If ValidateData(!FirstName, _
            "Enter first name.") = False Then Exit Do
         If ValidateData(!LastName, _
            "Enter last name.") = False Then Exit Do
         If ValidateData(!DaysOfVacation, _
            "Enter days of vacation.") = False Then Exit Do

         .Update
         .Bookmark = .LastModified
         Debug.Print !FirstName &amp; " " &amp; !LastName &amp; _
            " - " &amp; "DaysOfVacation = " &amp; !DaysOfVacation

         ' Delete new record because this is a demonstration.
         .Delete
         Exit Do
      Loop

      ' Cancel AddNew method if any of the validation rules 
      ' were broken.
      If .EditMode &lt;&gt; dbEditNone Then .CancelUpdate
      .Close
   End With

   ' Delete new field because this is a demonstration.
   dbsNorthwind.TableDefs!Employees.Fields.Delete _
      fldDays.Name
   dbsNorthwind.Close

End Sub

Function ValidateData(fldTemp As Field, _
   strMessage As String) As Boolean

   Dim strInput As String
   Dim errLoop As Error

   ValidateData = True
   ' ValidateOnSet is only read/write for Field objects in
   ' Recordset objects.
   fldTemp.ValidateOnSet = True

   Do While True
      strInput = InputBox(strMessage)
      If strInput = "" Then Exit Do
      ' Trap for errors when setting the Field value.
      On Error GoTo Err_Data
      If fldTemp.Type = dbInteger Then
         fldTemp = Val(strInput)
      Else
         fldTemp = strInput
      End If
      On Error GoTo 0
      If Not IsNull(fldTemp) Then Exit Do
   Loop

   If strInput = "" Then ValidateData = False
   
   Exit Function

Err_Data:

   If DBEngine.Errors.Count &gt; 0 Then
      ' Enumerate the Errors collection. The description
      ' property of the last Error object will be set to
      ' the ValidationText property of the relevant
      ' field.
      For Each errLoop In DBEngine.Errors
         MsgBox "Error number: " &amp; errLoop.Number &amp; _
            vbCr &amp; errLoop.Description
      Next errLoop
   End If
   
   Resume Next

End Function</code></pre>
</font></BODY>
</HTML>

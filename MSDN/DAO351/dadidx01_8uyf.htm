<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Access Objects Overview</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dahowdataaccessoverview"></a>DAO Overview</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowDataAccessOverviewC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowDataAccessOverviewX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dahowDataAccessOverviewS">
</object></p>
<p>
DAO enables you to use a programming language to access and manipulate data in local or remote databases, and to manage databases, their objects, and their structure.</p>
<h1>Object Models</h1>
<p>
DAO supports two different database environments, or "workspaces."
<ul type=disc>
<li>
<a href="dadefn03_4wth.htm">Microsoft Jet workspaces</a> allow you to access data in <a href="dadefn03_157p.htm">Microsoft Jet databases</a>, <a href="dadefn03_88f9.htm">Microsoft Jet-connected ODBC databases</a>, and <a href="dadefn01_94j1.htm">installable ISAM</a> data sources in other formats, such as Paradox or Lotus 1-2-3.<br><br></li>
<li>
<a href="dadefn03_6izp.htm">ODBCDirect workspaces</a> allow you to access database servers through <a href="dadefn02_6eoz.htm">ODBC</a>, without loading the <a href="dadefn01_29k5.htm">Microsoft Jet database engine</a>.</li>
</ul>
<p>
Use the Microsoft Jet workspace when you open a Microsoft Jet database (.mdb file) or other desktop ISAM database, or when you need to take advantage of Microsoft Jet's unique features, such as the ability to join data from different database formats.</p>
<p>
The <a href="dadefn03_0ek4.htm">ODBCDirect</a> workspace provides an alternative when you only need to execute queries or stored procedures against a back-end server, such as Microsoft SQL Server, or when your client application needs the specific capabilities of ODBC, such as <a href="dadefn03_9euf.htm">batch updates</a> or <a href="dadefn03_3x15.htm">asynchronous query</a> execution.</p>
<p class=label>
<b>DAO Objects</b></p>
<p>
There are 17 different DAO object types. You can declare new DAO <a href="dadefn02_3h7p.htm">object variables</a> for any of the object types.</p>
<p>
For example, the following Visual Basic for Applications (VBA) code creates object variables for a <b>Database</b> object, a dynaset-type <b>Recordset</b> object, and a <b>Field</b> object:</p>
<pre><code>Dim dbsExample As Database
Dim rstExample As Recordset
Dim fldExample As Field

Set dbsExample = OpenDatabase("Biblio.mdb")
Set rstExample = dbsExample.OpenRecordset("Authors", _    dbOpenDynaset)
Set fldExample = rstExample.Fields("Au_ID")
</code></pre>
<p class=label>
<b>DAO Collections</b></p>
<p>
Each DAO object type other than <b>DBEngine</b> also has a corresponding collection. A collection includes all the existing objects of that type. For example, the <b>Recordsets</b> collection contains all open <b>Recordset</b> objects. Each collection is "owned" by another object at the next higher level in the hierarchy. A <b>Database</b> object "owns" a <b>Recordsets</b> collection. Except for the <b>Connection</b> and <b>Error</b> objects, every DAO object has a <b>Properties</b> collection.</p>
<p>
Most DAO objects have default collections and default properties. For example, the default collection of a <b>Recordset</b> object is the <b>Fields</b> collection and the default property of a <b>Field</b> object is the <b>Value</b> property. You can simplify your code by taking advantage of these defaults. For example, the following code sets the value of the PubID field in the current record:</p>
<pre><code>rstExample!PubID=99
</code></pre>
<p class=label>
<b>DBENGINE AND WORKSPACE OBJECTS</b></p>
<p>
All DAO objects are derived from the <b>DBEngine</b> object. You can set the <b>DefaultType</b> property on the <b>DBEngine</b> object to determine the workspace type (Microsoft Jet or ODBCDirect) to create on subsequent <b>CreateWorkspace</b> method calls, or you can override this property with the <i>type</i> argument in the <b>CreateWorkspace</b> method itself. When your application creates a workspace, the appropriate library — the Microsoft Jet database engine or ODBC — is loaded into memory at that time.</p>
<p>
You can open additional <b>Workspace</b> objects as needed. Each <b>Workspace</b> object has a user ID and password associated with it.</p>
<h1>Using the Microsoft Jet Workspace</h1>
<p class=label>
<b>Opening a Database</b></p>
<p>
To open a database, you simply open an existing <b>Database</b> object, or create a new one. This object can represent a Microsoft Jet database (.mdb file), an ISAM database (for example, Paradox), or an ODBC database connected through the Microsoft Jet database engine (also known as a "Microsoft Jet-connected ODBC database").</p>
<p class=label>
<b>Data-Definition Language</b></p>
<p>
You can use object variables and other <a href="dadefn01_39gl.htm">DDL</a> features to modify your database structure. For example, you can add a new <b>Field</b> object to an existing table with the following code:</p>
<pre><code>Dim dbs As Database, tdf As TableDef, fld As Field
' Open a database.
Set dbs = OpenDatabase("Biblio.mdb")
' Open a TableDef.
Set tdf = dbs.TableDefs("Authors")
' Create a new field.
Set fld = tdf.CreateField("Address", dbText, 20)
' Append field to the TableDef Fields collection.
tdf.Fields.Append fld    
</code></pre>
<p>
This code creates a new object variable for a <b>Field</b> object and adds it to a <b>TableDef</b> object with the <b>Append</b> method. Because a <b>TableDef</b> object contains the definition of a table, the table now has a field named Address for entering data. In much the same way, you can create new tables and new indexes.</p>
<p class=label>
<b>Data Manipulation</b></p>
<p>
DAO provides an excellent set of data manipulation tools. You can create a <b>Recordset</b> object to conveniently query a database and manipulate the resulting set of records. The <b>OpenRecordset</b> method accepts an SQL string, or a <b>QueryDef</b> (stored query) name as a data source argument, or it can be opened from a <b>QueryDef</b> object or a <b>TableDef</b> object, using that object as its data source. The resulting <b>Recordset</b> object features an extremely rich set of properties and methods with which to browse and modify data.</p>
<p>
The <b>Recordset</b> object is available in four different types — Table, Dynaset, Forward-Only, and Snapshot.</p>
<p class=label>
<b>Transactions</b></p>
<p>
All <b>Database</b> objects opened against a <b>Workspace</b> object share a common transaction scope. That is, when you use the <b>BeginTrans</b> method on a <b>Workspace</b> object, it applies to all open databases within that <b>Workspace</b> object. In the same way, when you use the <b>CommitTrans</b> method against the <b>Workspace</b>, it applies to all open databases in the <b>Workspace</b> object.</p>
<p class=label>
<b>Replication</b></p>
<p>
You can use <a href="rpldef_9226.htm">database replication</a> to create and maintain <a href="rpldef_73j5.htm">replicas</a> of a master Microsoft Jet database, using the <b>Synchronize</b> method to periodically update all or part of the replicas, or to copy new data from one replica to another. You can also restrict the update to only selected records, using the <b>ReplicaFilter</b> property, and then synchronize those records with the <b>PopulatePartial</b> method.</p>
<p class=label>
<b>Security</b></p>
<p>
You can restrict access to one or more .mdb databases or their tables using security settings established and managed by the Microsoft Jet database engine. In your code, you can establish <b>Group</b> and <b>User</b> objects to define the scope and level of <a href="dadefn02_08mm.htm">permissions</a> available to individual users on an object-by-object basis. For example, you can establish permissions for a specific user to provide read-only access to one table and full access to another.</p>
<h1>Using the ODBCDirect Object Model</h1>
<p class=label>
<b>Connecting to a Database</b></p>
<p>
A <b>Connection</b> object is similar to a <b>Database</b> object. In fact, a <b>Connection</b> object and a <b>Database</b> object represent different references to the same object, and properties on each of these two object types allow you to obtain a reference to the other corresponding object, which simplifies the task of converting ODBC client applications that use Microsoft Jet to use ODBCDirect instead. Use the <b>OpenConnection</b> method to connect to an <a href="dadefn02_01id.htm">ODBC data source</a>. The resulting <b>Connection</b> object contains information about the connection, such as the server name, the data source name, and so on.</p>
<p class=label>
<b>Queries</b></p>
<p>
Although DAO does not support stored queres in an ODBCDirect workspace, a compiled query can be created as a <b>QueryDef</b> object and used to execute action queries, and can also be used to execute stored procedures on the server. The <b>Prepare</b> property lets you decide whether to create a private, temporary stored procedure on the server from a <b>QueryDef</b> before actually executing the query.</p>
<p>
Parameter queries can also be passed to the server, using <b>Parameter</b> objects on the <b>QueryDef</b>. The <b>Direction</b> property lets you specify a <b>Parameter</b> as input, output, or both, or to accept a return value from a stored procedure.</p>
<p class=label>
<b>Data Manipulation</b></p>
<p>
Creating a <b>Recordset</b> object is a convenient way to query a database and manipulate the resulting set of records. The <b>OpenRecordset</b> method accepts an SQL string, or a <b>QueryDef</b> object (stored query) as a data source argument. The resulting <b>Recordset</b> object features an extremely rich set of properties and methods with which to browse and modify data.</p>
<p>
The <b>Recordset</b> object is available in four different types — Dynamic, Dynaset, Forward-Only, and Snapshot — corresponding to ODBC cursor types — Dynamic, Keyset, Forward-only, and Static.</p>
<p>
A batch update cursor library is available for client applications that need to work with a cursor without holding locks on the server or without issuing update requests one record at a time. Instead, the client stores update information on many records in a local buffer (or "batch"), and then issues a batch update.</p>
<p class=label>
<b>Asynchronous Method Execution</b></p>
<p>
The <b>Execute</b>, <b>MoveLast</b>, <b>OpenConnection</b>, and <b>OpenRecordset</b> methods feature the <b>dbRunAsync</b> option. This allows your client application to do other tasks (such as loading forms, for example) while the method is executing. You can check the <b>StillExecuting</b> property to see whether the task is complete, and terminate an asynchronous task with the <b>Cancel</b> method.</p>
</font></BODY>
</HTML>

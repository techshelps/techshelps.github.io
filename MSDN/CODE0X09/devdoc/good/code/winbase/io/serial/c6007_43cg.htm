<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TTY.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6010"></a>TTY.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corp. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>#define USECOMM      // yes, we need the COMM API <br> <br>//#undef NO_STRICT    // be bold! <br> <br>//#define HINSTANCE HANDLE <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;io.h&gt; <br>#include &lt;memory.h&gt; <br> <br>#include "version.h" <br>#include "resource.h" <br> <br>// constant definitions <br> <br>#define GWL_NPTTYINFO        0 <br>#define TTYEXTRABYTES        sizeof( LONG ) <br> <br>#define ABOUTDLG_USEBITMAP  1 <br> <br>#define ATOM_TTYINFO       0x100 <br> <br>// hard coded maximum number of ports for device under Win32 <br> <br>#define MAXPORTS        4 <br> <br>// terminal size <br> <br>#define MAXROWS         25 <br>#define MAXCOLS         80 <br> <br>#define MAXBLOCK        80 <br> <br>#define MAXLEN_TEMPSTR  81 <br> <br>#define RXQUEUE         4096 <br>#define TXQUEUE         4096 <br> <br>// cursor states <br> <br>#define CS_HIDE         0x00 <br>#define CS_SHOW         0x01 <br> <br>// Flow control flags <br> <br>#define FC_DTRDSR       0x01 <br>#define FC_RTSCTS       0x02 <br>#define FC_XONXOFF      0x04 <br> <br>// ascii definitions <br> <br>#define ASCII_BEL       0x07 <br>#define ASCII_BS        0x08 <br>#define ASCII_LF        0x0A <br>#define ASCII_CR        0x0D <br>#define ASCII_XON       0x11 <br>#define ASCII_XOFF      0x13 <br> <br>// data structures <br> <br>typedef struct tagTTYINFO <br>{ <br>   HANDLE  idComDev ; <br>   BYTE    bPort, abScreen[ MAXROWS * MAXCOLS ] ; <br>   BOOL    fConnected, fXonXoff, fLocalEcho, fNewLine, fAutoWrap, <br>           fUseCNReceive, fDisplayErrors; <br>   BYTE    bByteSize, bFlowCtrl, bParity, bStopBits ; <br>   DWORD   dwBaudRate ; <br>   WORD    wCursorState ; <br>   HFONT   hTTYFont ; <br>   LOGFONT lfTTYFont ; <br>   DWORD   rgbFGColor ; <br>   int     xSize, ySize, xScroll, yScroll, xOffset, yOffset, <br>           nColumn, nRow, xChar, yChar ; <br>   HANDLE      hPostEvent, hWatchThread, hWatchEvent ; <br>   HWND        hTermWnd ; <br>   DWORD       dwThreadID ; <br>   OVERLAPPED  osWrite, osRead ; <br> <br>} TTYINFO, NEAR *NPTTYINFO ; <br> <br>// macros ( for easier readability ) <br> <br>#define GETHINST( x )  ((HINSTANCE) GetWindowLong( x, GWL_HINSTANCE )) <br>#define GETNPTTYINFO( x ) ((NPTTYINFO) GetWindowLong( x, GWL_NPTTYINFO )) <br>#define SETNPTTYINFO( x, y ) SetWindowLong( x, GWL_NPTTYINFO, (LONG) y ) <br> <br>#define COMDEV( x ) (x -&gt; idComDev) <br>#define PORT( x )   (x -&gt; bPort) <br>#define SCREEN( x ) (x -&gt; abScreen) <br>#define CONNECTED( x ) (x -&gt; fConnected) <br>#define XONXOFF( x ) (x -&gt; fXonXoff) <br>#define LOCALECHO( x ) (x -&gt; fLocalEcho) <br>#define NEWLINE( x ) (x -&gt; fNewLine) <br>#define AUTOWRAP( x ) (x -&gt; fAutoWrap) <br>#define BYTESIZE( x ) (x -&gt; bByteSize) <br>#define FLOWCTRL( x ) (x -&gt; bFlowCtrl) <br>#define PARITY( x ) (x -&gt; bParity) <br>#define STOPBITS( x ) (x -&gt; bStopBits) <br>#define BAUDRATE( x ) (x -&gt; dwBaudRate) <br>#define CURSORSTATE( x ) (x -&gt; wCursorState) <br>#define HTTYFONT( x ) (x -&gt; hTTYFont) <br>#define LFTTYFONT( x ) (x -&gt; lfTTYFont) <br>#define FGCOLOR( x ) (x -&gt; rgbFGColor) <br>#define XSIZE( x ) (x -&gt; xSize) <br>#define YSIZE( x ) (x -&gt; ySize) <br>#define XSCROLL( x ) (x -&gt; xScroll) <br>#define YSCROLL( x ) (x -&gt; yScroll) <br>#define XOFFSET( x ) (x -&gt; xOffset) <br>#define YOFFSET( x ) (x -&gt; yOffset) <br>#define COLUMN( x ) (x -&gt; nColumn) <br>#define ROW( x ) (x -&gt; nRow) <br>#define XCHAR( x ) (x -&gt; xChar) <br>#define YCHAR( x ) (x -&gt; yChar ) <br>#define USECNRECEIVE( x ) (x -&gt; fUseCNReceive) <br>#define DISPLAYERRORS( x ) (x -&gt; fDisplayErrors) <br> <br>#define POSTEVENT( x ) (x -&gt; hPostEvent) <br>#define TERMWND( x ) (x -&gt; hTermWnd) <br>#define HTHREAD( x ) (x -&gt; hWatchThread) <br>#define THREADID( x ) (x -&gt; dwThreadID) <br>#define WRITE_OS( x ) (x -&gt; osWrite) <br>#define READ_OS( x ) (x -&gt; osRead) <br> <br>#define SET_PROP( x, y, z )  SetProp( x, MAKEINTATOM( y ), z ) <br>#define GET_PROP( x, y )     GetProp( x, MAKEINTATOM( y ) ) <br>#define REMOVE_PROP( x, y )  RemoveProp( x, MAKEINTATOM( y ) ) <br> <br>// global stuff <br> <br>HWND     hTTYWnd ; <br>char     gszTTYClass[] = "TTYWndClass" ; <br>char     gszAppName[] = "TTY" ; <br>HANDLE   ghAccel ; <br> <br>DWORD    BaudTable[] = <br>         { <br>            CBR_110, CBR_300, CBR_600, CBR_1200, CBR_2400, <br>            CBR_4800, CBR_9600, CBR_14400, CBR_19200, CBR_38400, <br>            CBR_56000, CBR_128000, CBR_256000 <br>         } ; <br> <br>DWORD    ParityTable[] = <br>         { <br>            NOPARITY, EVENPARITY, ODDPARITY, MARKPARITY, SPACEPARITY <br>         } ; <br> <br>DWORD    StopBitsTable[] = <br>         { <br>            ONESTOPBIT, ONE5STOPBITS, TWOSTOPBITS <br>         } ; <br> <br>// CRT mappings to NT API <br> <br>#define _fmemset   memset <br>#define _fmemmove  memmove <br> <br>// function prototypes (private) <br> <br>BOOL NEAR InitApplication( HANDLE ) ; <br>HWND NEAR InitInstance( HANDLE, int ) ; <br>LRESULT NEAR CreateTTYInfo( HWND ) ; <br>BOOL NEAR DestroyTTYInfo( HWND ) ; <br>BOOL NEAR ResetTTYScreen( HWND, NPTTYINFO ) ; <br>BOOL NEAR KillTTYFocus( HWND ) ; <br>BOOL NEAR PaintTTY( HWND ) ; <br>BOOL NEAR SetTTYFocus( HWND ) ; <br>BOOL NEAR ScrollTTYHorz( HWND, WORD, WORD ) ; <br>BOOL NEAR ScrollTTYVert( HWND, WORD, WORD ) ; <br>BOOL NEAR SizeTTY( HWND, WORD, WORD ) ; <br>BOOL NEAR ProcessTTYCharacter( HWND, BYTE ) ; <br>BOOL NEAR WriteTTYBlock( HWND, LPSTR, int ) ; <br>int NEAR ReadCommBlock( HWND, LPSTR, int ) ; <br>BOOL NEAR WriteCommBlock( HWND , LPSTR, DWORD); <br>BOOL NEAR MoveTTYCursor( HWND ) ; <br>BOOL NEAR OpenConnection( HWND ) ; <br>BOOL NEAR SetupConnection( HWND ) ; <br>BOOL NEAR CloseConnection( HWND ) ; <br>VOID NEAR GoModalDialogBoxParam( HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM ) ; <br>VOID NEAR FillComboBox( HINSTANCE, HWND, int, DWORD NEAR *, WORD, DWORD ) ; <br>BOOL NEAR SelectTTYFont( HWND ) ; <br>BOOL NEAR SettingsDlgInit( HWND ) ; <br>BOOL NEAR SettingsDlgTerm( HWND ) ; <br> <br>// function prototypes (public) <br> <br>LRESULT FAR PASCAL TTYWndProc( HWND, UINT, WPARAM, LPARAM ) ; <br>BOOL FAR PASCAL AboutDlgProc( HWND, UINT, WPARAM, LPARAM ) ; <br>BOOL FAR PASCAL SettingsDlgProc( HWND, UINT, WPARAM, LPARAM ) ; <br> <br>DWORD FAR PASCAL CommWatchProc( LPSTR ) ; <br> <br>//--------------------------------------------------------------------------- <br>//  End of File: tty.h <br>//--------------------------------------------------------------------------- </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6012"></a>README.TXT</h2>
<pre><code>Fast Copy Routines <br> <br> <br>The UNBUFCPY sample consists of two parts: UNBUFCP1 and UNBUFCP2. <br> <br>The UNBUFCP1 sample shows a fast copy routine that uses I/O completion  <br>ports. It is intended to demonstrate using a single thread to complete I/O  <br>requests from multiple file handles. <br> <br>Only one thread and one I/O completion port is used. The file handles for  <br>the source and destination files are both associated with the same port. The  <br>thread starts by posting a number of overlapped reads from the source file.  <br>It then waits on the I/O completion port. Whenever a read completes, it  <br>immediately turns it into a write to the destination file. Whenever a write  <br>completes, it immediately posts the next read from the source file. <br> <br>The UNBUFCP2 sample shows a fast copy routine that uses I/O completion  <br>ports. It is intended to demonstrate how to complete I/O in a different  <br>thread than the thread that started the I/O. <br> <br>Two threads are used. The first thread posts overlapped reads from the  <br>source file. These reads complete to an I/O completion port the second  <br>thread is waiting on. The second thread sees the I/O completion and posts  <br>an overlapped write to the destination file. The write completes to another I/O completion  <br>port that the first thread is waiting on. The first thread sees the I/O  <br>completion and posts another overlapped read. </code></pre>
<p>&nbsp;</p></body>
</HTML>

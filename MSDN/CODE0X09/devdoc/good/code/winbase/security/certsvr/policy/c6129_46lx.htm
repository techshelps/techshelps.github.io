<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLICY.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6135"></a>POLICY.CPP</h2>
<pre><code>//+-------------------------------------------------------------------------- <br>// <br>// Microsoft Windows <br>// Copyright 1996 - 1998 Microsoft Corporation-1997 <br>// <br>// File:        policy.cpp <br>// <br>// Contents:    Cert Server Policy Module implementation <br>// <br>//--------------------------------------------------------------------------- <br>#include "pch.cpp" <br>#pragma hdrstop <br> <br>#include "lib.h" <br>#include "policy.h" <br>#include &lt;stdio.h&gt; <br>#include &lt;assert.h&gt; <br> <br>#ifndef DBG_CERTSRV <br>#error -- DBG_CERTSRV not defined! <br>#endif <br> <br>BOOL fDebug = DBG_CERTSRV; <br> <br>#define wszDESCRIPTION  L"Microsoft Certificate Server Default Policy Module" <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::~CCertPolicy -- destructor <br>// <br>// free memory associated with this instance <br>//+-------------------------------------------------------------------------- <br> <br>CCertPolicy::~CCertPolicy() <br>{ <br>    _Cleanup(); <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_Cleanup -- free memory associated with this instance <br>// <br>// free memory associated with this instance <br>//+-------------------------------------------------------------------------- <br> <br>VOID <br>CCertPolicy::_Cleanup() <br>{ <br>    DWORD i; <br> <br>    // RevocationExtension variables: <br> <br>    if (NULL != m_apstrRevocationURL) <br>    { <br>        for (i = 0; i &lt; m_cRevocationURL; i++) <br>        { <br>            if (NULL != m_apstrRevocationURL[i]) <br>            { <br>                SysFreeString(m_apstrRevocationURL[i]); <br>            } <br>        } <br>        LocalFree(m_apstrRevocationURL); <br>        m_apstrRevocationURL = NULL; <br>    } <br> <br> <br>    // CertTypeExtension variables: <br> <br>    m_RevocationType = REVTYPE_NONE; <br> <br> <br>    // SubjectAltNameExtension variables: <br> <br>    for (i = 0; i &lt; 2; i++) <br>    { <br>if (NULL != m_astrSubjectAltNameProp[i]) <br>{ <br>    SysFreeString(m_astrSubjectAltNameProp[i]); <br>    m_astrSubjectAltNameProp[i] = NULL; <br>} <br>if (NULL != m_astrSubjectAltNameObjectId[i]) <br>{ <br>    SysFreeString(m_astrSubjectAltNameObjectId[i]); <br>    m_astrSubjectAltNameObjectId[i] = NULL; <br>} <br>    } <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_InitRevocationExtension -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>VOID <br>CCertPolicy::_InitRevocationExtension( <br>    IN HKEY hkey) <br>{ <br>    DWORD err; <br>    DWORD i; <br>    DWORD dwType; <br>    DWORD cbbuf; <br>    WCHAR *pwc; <br>    WCHAR const *pwszRegRevocation; <br>    WCHAR awcbuf[MAX_PATH]; <br> <br>    cbbuf = sizeof(awcbuf); <br>    err = RegQueryValueEx( <br>                hkey, <br>                wszREGREVOCATIONTYPE, <br>                NULL,           // lpdwReserved <br>                &amp;dwType, <br>                (BYTE *) awcbuf, <br>                &amp;cbbuf); <br>    if (ERROR_SUCCESS != err || REG_SZ != dwType || sizeof(awcbuf) &lt;= cbbuf) <br>    { <br>        goto exit; <br>    } <br>    if (0 == lstrcmpi(awcbuf, wszREVTYPE_CRL)) <br>    { <br>        m_RevocationType = REVTYPE_CRLDIST; <br>        pwszRegRevocation = wszREGREVOCATIONCRLURL; <br>    } <br>    else <br>    if (0 == lstrcmpi(awcbuf, wszREVTYPE_NETSCAPE)) <br>    { <br>        m_RevocationType = REVTYPE_NETSCAPE; <br>        pwszRegRevocation = wszREGREVOCATIONURL; <br>    } <br>    else <br>    { <br>        goto exit; <br>    } <br> <br>    cbbuf = sizeof(awcbuf) - 2 * sizeof(WCHAR); <br>    err = RegQueryValueEx( <br>    hkey, <br>    pwszRegRevocation, <br>    NULL,           // lpdwReserved <br>    &amp;dwType, <br>    (BYTE *) awcbuf, <br>    &amp;cbbuf); <br>    if (ERROR_SUCCESS != err || <br>        (REG_SZ != dwType &amp;&amp; REG_MULTI_SZ != dwType) || <br>        sizeof(awcbuf) - 2 * sizeof(WCHAR) &lt;= cbbuf) <br>    { <br>        goto exit; <br>    } <br> <br>    // Double null terminate to make a REG_SZ value look like REG_MULTI_SZ. <br> <br>    awcbuf[cbbuf/sizeof(WCHAR)] = L'\0'; <br>    awcbuf[cbbuf/sizeof(WCHAR) + 1] = L'\0'; <br> <br>    m_cRevocationURL = 0; <br>    pwc = awcbuf; <br>    while (TRUE) <br>    { <br>        pwc = wcschr(pwc, L'\0'); <br>        assert(NULL != pwc); <br>        pwc++; <br>        m_cRevocationURL++; <br>        if (L'\0' == *pwc) <br>        { <br>            break; <br>        } <br>    } <br> <br>    m_apstrRevocationURL = (BSTR *) LocalAlloc( <br>                                        LMEM_FIXED, <br>                                        m_cRevocationURL * sizeof(BSTR)); <br>    if (NULL == m_apstrRevocationURL) <br>    { <br>        goto exit; <br>    } <br>    memset(m_apstrRevocationURL, 0, m_cRevocationURL * sizeof(BSTR)); <br> <br>    pwc = awcbuf; <br>    for (i = 0; i &lt; m_cRevocationURL; i++) <br>    { <br>        DWORD cwc = wcslen(SysAllocString(pwc)); <br> <br>        if (REVTYPE_NETSCAPE == m_RevocationType) <br>        { <br>            cwc++; <br>        } <br>        m_apstrRevocationURL[i] = SysAllocStringLen(NULL, cwc); <br>        if (NULL == m_apstrRevocationURL[i]) <br>        { <br>            _Cleanup(); <br>            goto exit; <br>        } <br>        wcscpy(m_apstrRevocationURL[i], pwc); <br>        if (REVTYPE_NETSCAPE == m_RevocationType) <br>        { <br>            wcscat(m_apstrRevocationURL[i], L"?"); <br>        } <br>        if (fDebug) <br>        { <br>            printf( <br>                "Policy: Revocation URL(type=%u): %s[%u]: %ws\n", <br>                m_RevocationType, <br>                REVTYPE_CRLDIST == m_RevocationType? <br>                    "CRLDistPoint" : "Netscape", <br>                i, <br>                m_apstrRevocationURL[i]); <br>        } <br>        pwc = wcschr(pwc, L'\0'); <br>        assert(NULL != pwc); <br>        pwc++; <br>        assert(L'\0' != *pwc || i + 1 == m_cRevocationURL); <br>    } <br> <br>exit: <br>    ; <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_InitCertTypeExtension -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>VOID <br>CCertPolicy::_InitCertTypeExtension( <br>    IN HKEY hkey) <br>{ <br>    DWORD err; <br>    DWORD dwType; <br>    DWORD cbbuf; <br>    DWORD dwCertType; <br> <br>    cbbuf = sizeof(dwCertType); <br>    err = RegQueryValueEx( <br>                          hkey, <br>                          wszREGNETSCAPECERTTYPE, <br>                          NULL,         // lpdwReserved <br>                          &amp;dwType, <br>                          (BYTE *) &amp;dwCertType, <br>                          &amp;cbbuf); <br>    if (ERROR_SUCCESS != err || REG_DWORD != dwType) <br>    { <br>        goto exit; <br>    } <br>    if (dwCertType == CERTTYPE_NETSCAPE) <br>    { <br>        m_CertType = CERTTYPE_NETSCAPE; <br>    } <br>    if (fDebug &amp;&amp; m_CertType) <br>    { <br>        printf( <br>            "Policy: Netscape Certificate Type(type=%u): %s\n", <br>            m_CertType, <br>            CERTTYPE_NETSCAPE == m_CertType? "Netscape" : "None"); <br>    } <br> <br>exit: <br>    ; <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_InitSubjectAltNameExtension -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>VOID <br>CCertPolicy::_InitSubjectAltNameExtension( <br>    IN HKEY hkey, <br>    IN WCHAR const *pwszRegName, <br>    IN WCHAR const *pwszObjectId, <br>    IN DWORD iAltName) <br>{ <br>    DWORD err; <br>    DWORD dwType; <br>    DWORD cbbuf; <br>    WCHAR awcbuf[MAX_PATH]; <br> <br>    cbbuf = sizeof(awcbuf) - 2 * sizeof(WCHAR); <br>    err = RegQueryValueEx( <br>    hkey, <br>    pwszRegName, <br>    NULL,         // lpdwReserved <br>    &amp;dwType, <br>    (BYTE *) awcbuf, <br>    &amp;cbbuf); <br>    if (ERROR_SUCCESS != err || <br>        REG_SZ != dwType || <br>        sizeof(awcbuf) - 2 * sizeof(WCHAR) &lt;= cbbuf) <br>    { <br>        goto exit; <br>    } <br>    if (0 == lstrcmpi(awcbuf, wszATTREMAIL1) || <br>0 == lstrcmpi(awcbuf, wszATTREMAIL2)) <br>    { <br>        if (!ConvertWszToBstr( <br>&amp;m_astrSubjectAltNameObjectId[iAltName], <br>pwszObjectId, <br>-1)) <br>{ <br>    goto exit; <br>} <br> <br>        if (!ConvertWszToBstr( <br>&amp;m_astrSubjectAltNameProp[iAltName], <br>wszPROPSUBJECTEMAIL, <br>-1)) <br>{ <br>    goto exit; <br>} <br>    } <br>    if (fDebug &amp;&amp; NULL != m_astrSubjectAltNameProp[iAltName]) <br>    { <br>        printf( <br>            "Policy: %ws(RDN=%ws): %ws\n", <br>    pwszRegName, <br>            awcbuf, <br>            m_astrSubjectAltNameProp[iAltName]); <br>    } <br> <br>exit: <br>    ; <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::Initialize -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>STDMETHODIMP <br>CCertPolicy::Initialize( <br>    /* [in] */ BSTR const strConfig) <br>{ <br>    HRESULT hr; <br>    DWORD err; <br>    HKEY hkey = NULL; <br>    WCHAR awcReg[MAX_PATH]; <br> <br>    _Cleanup(); <br> <br>    wcscpy(awcReg, wszREGKEYBASE); <br>    wcscat(awcReg, L"\\"); <br>    wcscat(awcReg, wszREGKEYCONFIG); <br>    wcscat(awcReg, L"\\"); <br>    wcscat(awcReg, strConfig); <br> <br>    err = RegOpenKeyEx( <br>                HKEY_LOCAL_MACHINE, <br>                awcReg, <br>                0,              // dwReserved <br>                KEY_ENUMERATE_SUB_KEYS | KEY_EXECUTE | KEY_QUERY_VALUE, <br>                &amp;hkey); <br> <br>    if (ERROR_SUCCESS != err) <br>    { <br>hr = HRESULT_FROM_WIN32(err); <br>        goto exit; <br>    } <br> <br>    _InitRevocationExtension(hkey); <br>    _InitCertTypeExtension(hkey); <br>    _InitSubjectAltNameExtension( <br>    hkey, <br>    wszREGSUBJECTALTNAME, <br>    TEXT(szOID_SUBJECT_ALT_NAME), <br>    0); <br>    _InitSubjectAltNameExtension( <br>    hkey, <br>    wszREGSUBJECTALTNAME2, <br>    TEXT(szOID_SUBJECT_ALT_NAME2), <br>    1); <br>    hr = S_OK; <br> <br>exit: <br>    if (NULL != hkey) <br>    { <br>        RegCloseKey(hkey); <br>    } <br>    return(hr); <br>} <br> <br> <br>HRESULT <br>EnumerateExtensions( <br>    IN ICertServerPolicy *pServer) <br>{ <br>    HRESULT hr; <br>    HRESULT hr2; <br>    BSTR strName = NULL; <br>    LONG ExtFlags; <br>    VARIANT varValue; <br>    BOOL fClose = FALSE; <br> <br>    VariantInit(&amp;varValue); <br>    hr = pServer-&gt;EnumerateExtensionsSetup(0); <br>    if (S_OK != hr) <br>    { <br>        if (fDebug) <br>        { <br>            printf("Policy:EnumerateExtensionsSetup: %x", hr); <br>        } <br>        goto error; <br>    } <br>    fClose = TRUE; <br>    while (TRUE) <br>    { <br>        hr = pServer-&gt;EnumerateExtensions(&amp;strName); <br>        if (S_OK != hr) <br>        { <br>            if (S_FALSE == hr) <br>            { <br>                hr = S_OK; <br>                break; <br>            } <br>            if (fDebug) <br>            { <br>                printf("Policy:EnumerateExtensions: %x", hr); <br>            } <br>            goto error; <br>        } <br>        hr = pServer-&gt;GetCertificateExtension( <br>                                        strName, <br>                                        PROPTYPE_BINARY, <br>                                        &amp;varValue); <br>        if (S_OK != hr) <br>        { <br>            if (fDebug) <br>            { <br>                printf("Policy:GetCertificateExtension: %x", hr); <br>            } <br>            goto error; <br>        } <br>        hr = pServer-&gt;GetCertificateExtensionFlags(&amp;ExtFlags); <br> <br>        if (S_OK != hr) <br>        { <br>            if (fDebug) <br>            { <br>                printf("Policy:GetCertificateExtensionFlags: %x", hr); <br>            } <br>            goto error; <br>        } <br> <br>        // If this is enhanced key usage, add the extension to the cert <br> <br>        if (0 == lstrcmpi(strName, TEXT(szOID_ENHANCED_KEY_USAGE))) <br>{ <br>            ExtFlags &amp;= ~EXTENSION_DISABLE_FLAG; <br>            hr = pServer-&gt;SetCertificateExtension( <br>strName, <br>PROPTYPE_BINARY, <br>ExtFlags, <br>&amp;varValue); <br> <br>            if (S_OK != hr) <br>            { <br>                if (fDebug) <br>                { <br>    printf("Policy:SetCertificateExtensionFlags: %x", hr); <br>                } <br>                goto error; <br>            } <br>        } <br> <br>        if (fDebug) <br>        { <br>            printf( <br>                "Policy:EnumerateExtensions(%ws, Flags=%x, %x bytes)\n", <br>                strName, <br>                ExtFlags, <br>                SysStringByteLen(varValue.bstrVal)); <br>        } <br>        VariantClear(&amp;varValue); <br>    } <br> <br>error: <br>    if (fClose) <br>    { <br>        hr2 = pServer-&gt;EnumerateExtensionsClose(); <br>        if (S_OK != hr2) <br>        { <br>            if (fDebug) <br>            { <br>                printf("Policy:EnumerateExtensionsClose: %x", hr2); <br>            } <br>            if (S_OK == hr) <br>            { <br>                hr = hr2; <br>            } <br>            goto error; <br>        } <br>    } <br>    if (NULL != strName) <br>    { <br>        SysFreeString(strName); <br>    } <br>    VariantClear(&amp;varValue); <br>    return(hr); <br>} <br> <br> <br>HRESULT <br>EnumerateAttributes( <br>    IN ICertServerPolicy *pServer) <br>{ <br>    HRESULT hr; <br>    HRESULT hr2; <br>    BSTR strName = NULL; <br>    BOOL fClose = FALSE; <br>    BSTR strValue = NULL; <br> <br>    hr = pServer-&gt;EnumerateAttributesSetup(0); <br>    if (S_OK != hr) <br>    { <br>        if (fDebug) <br>        { <br>            printf("Policy:EnumerateAttributesSetup: %x", hr); <br>        } <br>        goto error; <br>    } <br>    fClose = TRUE; <br>    while (TRUE) <br>    { <br>        hr = pServer-&gt;EnumerateAttributes(&amp;strName); <br>        if (S_OK != hr) <br>        { <br>            if (S_FALSE == hr) <br>            { <br>                hr = S_OK; <br>                break; <br>            } <br>            if (fDebug) <br>            { <br>                printf("Policy:EnumerateAttributes: %x", hr); <br>            } <br>            goto error; <br>        } <br> <br>        hr = pServer-&gt;GetRequestAttribute(strName, &amp;strValue); <br>        if (S_OK != hr) <br>        { <br>            if (fDebug) <br>            { <br>                printf("Policy:GetRequestAttribute: %x", hr); <br>            } <br>            goto error; <br>        } <br>        if (fDebug) <br>        { <br>            printf( <br>                "Policy:EnumerateAttributes(%ws = %ws)\n", <br>                strName, <br>                strValue); <br>        } <br>        if (NULL != strValue) <br>        { <br>            SysFreeString(strValue); <br>            strValue = NULL; <br>        } <br>    } <br> <br>error: <br>    if (fClose) <br>    { <br>        hr2 = pServer-&gt;EnumerateAttributesClose(); <br>        if (S_OK != hr2) <br>        { <br>            if (fDebug) <br>            { <br>                printf("Policy:EnumerateAttributesClose: %x", hr2); <br>            } <br>            if (S_OK == hr) <br>            { <br>                hr = hr2; <br>            } <br>            goto error; <br>        } <br>    } <br> <br>    if (NULL != strName) <br>    { <br>        SysFreeString(strName); <br>    } <br>    if (NULL != strValue) <br>    { <br>        SysFreeString(strValue); <br>    } <br>    return(hr); <br>} <br> <br> <br>HRESULT <br>CheckRequestProperties( <br>    IN ICertServerPolicy *pServer) <br>{ <br>    HRESULT hr; <br>    VARIANT varValue; <br>    BSTR strName = NULL; <br> <br>    VariantInit(&amp;varValue); <br> <br>    strName = SysAllocString(wszPROPREQUESTREQUESTID); <br>    if (NULL == strName) <br>    { <br>        hr = E_OUTOFMEMORY; <br>        goto error; <br>    } <br> <br>    hr = pServer-&gt;GetRequestProperty(strName, PROPTYPE_LONG, &amp;varValue); <br>    if (S_OK != hr) <br>    { <br>        if (fDebug) <br>        { <br>            printf("Policy:GetRequestProperty: %x", hr); <br>        } <br>        goto error; <br>    } <br>    if (fDebug) <br>    { <br>        printf( <br>            "Policy:CheckRequestProperties(%ws = %x)\n", <br>            strName, <br>            varValue.lVal); <br>    } <br>    VariantClear(&amp;varValue); <br> <br>error: <br>    if (NULL != strName) <br>    { <br>        SysFreeString(strName); <br>    } <br>    return(hr); <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_AddRevocationExtension -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>HRESULT <br>CCertPolicy::_AddRevocationExtension( <br>    IN ICertServerPolicy *pServer) <br>{ <br>    HRESULT hr = S_OK; <br>    ICertEncodeCRLDistInfo *pCRLDist = NULL; <br>    BSTR strExtension = NULL; <br>    VARIANT varExtension; <br>    DWORD i; <br> <br>    if (NULL != m_apstrRevocationURL) <br>    { <br>        varExtension.vt = VT_BSTR; <br>        if (REVTYPE_CRLDIST == m_RevocationType) <br>        { <br>            hr = CoCreateInstance( <br>                            CLSID_CCertEncodeCRLDistInfo, <br>                            NULL,               // pUnkOuter <br>                            CLSCTX_INPROC_SERVER, <br>                            IID_ICertEncodeCRLDistInfo, <br>                            (VOID **) &amp;pCRLDist); <br>            if (S_OK != hr) <br>            { <br>                goto exit; <br>            } <br> <br>            hr = pCRLDist-&gt;Reset(m_cRevocationURL); <br>            if (S_OK != hr) <br>            { <br>                goto exit; <br>            } <br>            for (i = 0; i &lt; m_cRevocationURL; i++) <br>            { <br>                DWORD j; <br> <br>                hr = pCRLDist-&gt;SetNameCount(i, 1); <br>                if (S_OK != hr) <br>                { <br>                    goto exit; <br>                } <br>                for (j = 0; j &lt; 1; j++) <br>                { <br>                    hr = pCRLDist-&gt;SetNameEntry( <br>                                            i, <br>                                            j, <br>                                            CERT_ALT_NAME_URL, <br>                                            m_apstrRevocationURL[i]); <br>                    if (S_OK != hr) <br>                    { <br>                        goto exit; <br>                    } <br>                } <br>            } <br>            hr = pCRLDist-&gt;Encode(&amp;strExtension); <br>            if (S_OK != hr) <br>            { <br>                goto exit; <br>            } <br>            varExtension.bstrVal = strExtension; <br>            hr = pServer-&gt;SetCertificateExtension( <br>                                    TEXT(szOID_CRL_DIST_POINTS), <br>                                    PROPTYPE_BINARY, <br>                                    0, <br>                                    &amp;varExtension); <br>            if (S_OK != hr) <br>            { <br>                goto exit; <br>            } <br>        } <br>        else <br>        if (REVTYPE_NETSCAPE == m_RevocationType) <br>        { <br>            varExtension.bstrVal = m_apstrRevocationURL[0]; <br>            hr = pServer-&gt;SetCertificateExtension( <br>                                    TEXT(szOID_NETSCAPE_REVOCATION_URL), <br>                                    PROPTYPE_STRING, <br>                                    0, <br>                                    &amp;varExtension); <br>            if (S_OK != hr) <br>            { <br>                goto exit; <br>            } <br>        } <br>    } <br> <br>exit: <br>    if (NULL != strExtension) <br>    { <br>        SysFreeString(strExtension); <br>    } <br>    if (NULL != pCRLDist) <br>    { <br>        pCRLDist-&gt;Release(); <br>    } <br>    return(hr); <br>} <br> <br> <br>#define HIGHBIT(bitno)(1 &lt;&lt; (7 - (bitno)))// bit counted from high end <br> <br>#define SSLBIT_CLIENT((BYTE) HIGHBIT(0))// certified for client auth <br>#define SSLBIT_SERVER((BYTE) HIGHBIT(1))// certified for server auth <br>#define SSLBIT_CA((BYTE) HIGHBIT(5))// certified for issuing certs <br>#define SSLBIT_CA2((BYTE) HIGHBIT(6))// second ca bit <br> <br>#define NSCERTTYPE_CLIENT  ((BYTE) SSLBIT_CLIENT) <br>#define NSCERTTYPE_SERVER  ((BYTE) (SSLBIT_SERVER | SSLBIT_CLIENT)) <br>#define NSCERTTYPE_CA   ((BYTE) (SSLBIT_CA | SSLBIT_CA2)) <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_AddCertTypeExtension -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>HRESULT <br>CCertPolicy::_AddCertTypeExtension( <br>    IN ICertServerPolicy *pServer) <br>{ <br>    HRESULT hr = S_OK; <br>    ICertEncodeBitString *pBitString = NULL; <br>    BSTR strExtension = NULL; <br>    VARIANT varExtension; <br>    BSTR strBitString = NULL; <br>    BSTR strCertType = NULL; <br> <br>    if (CERTTYPE_NETSCAPE == m_CertType) <br>    { <br>BYTE CertType; <br> <br>hr = CoCreateInstance( <br>CLSID_CCertEncodeBitString, <br>NULL,               // pUnkOuter <br>CLSCTX_INPROC_SERVER, <br>IID_ICertEncodeBitString, <br>(VOID **) &amp;pBitString); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br> <br>CertType = NSCERTTYPE_CLIENT;// Default to client auth. cert <br>        hr = pServer-&gt;GetRequestAttribute(L"CertType", &amp;strCertType); <br>        if (S_OK == hr) <br>        { <br>            if (0 == lstrcmpi(strCertType, L"server")) <br>            { <br>                CertType = NSCERTTYPE_SERVER; <br>            } <br>            else if (0 == lstrcmpi(strCertType, L"ca")) <br>            { <br>                CertType = NSCERTTYPE_CA; <br>            } <br>        } <br> <br>        if (!ConvertWszToBstr( <br>    &amp;strBitString, <br>    (WCHAR const *) &amp;CertType, <br>    sizeof(CertType))) <br>{ <br>    hr = E_OUTOFMEMORY; <br>    goto exit; <br>} <br> <br>hr = pBitString-&gt;Encode( <br>    sizeof(CertType) * 8, <br>    strBitString, <br>    &amp;strExtension); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br> <br>        varExtension.vt = VT_BSTR; <br>varExtension.bstrVal = strExtension; <br>hr = pServer-&gt;SetCertificateExtension( <br>TEXT(szOID_NETSCAPE_CERT_TYPE), <br>PROPTYPE_BINARY, <br>0, <br>&amp;varExtension); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br>    } <br> <br>exit: <br>    if (NULL != strExtension) <br>    { <br>        SysFreeString(strExtension); <br>    } <br>    if (NULL != strBitString) <br>    { <br>        SysFreeString(strBitString); <br>    } <br>    if (NULL != strCertType) <br>    { <br>        SysFreeString(strCertType); <br>    } <br>    if (NULL != pBitString) <br>    { <br>        pBitString-&gt;Release(); <br>    } <br>    return(hr); <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::_AddSubjectAltNameExtension -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>HRESULT <br>CCertPolicy::_AddSubjectAltNameExtension( <br>    IN ICertServerPolicy *pServer, <br>    IN DWORD iAltName) <br>{ <br>    HRESULT hr = S_OK; <br>    ICertEncodeAltName *pAltName = NULL; <br>    BSTR strExtension = NULL; <br>    VARIANT varExtension; <br>    BSTR strCertType = NULL; <br>    BSTR strName = NULL; <br>    VARIANT varValue; <br> <br>    VariantInit(&amp;varValue); <br>    if (NULL != m_astrSubjectAltNameProp[iAltName]) <br>    { <br>hr = CoCreateInstance( <br>CLSID_CCertEncodeAltName, <br>NULL,               // pUnkOuter <br>CLSCTX_INPROC_SERVER, <br>IID_ICertEncodeAltName, <br>(VOID **) &amp;pAltName); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br> <br>hr = pServer-&gt;GetRequestProperty( <br>    m_astrSubjectAltNameProp[iAltName], <br>    PROPTYPE_STRING, <br>    &amp;varValue); <br>if (S_OK != hr) <br>{ <br>    if (fDebug) <br>    { <br>printf( <br>    "Policy:GetRequestProperty(%ws): %x", <br>    m_astrSubjectAltNameProp[iAltName], <br>    hr); <br>    } <br>    goto exit; <br>} <br>        if (VT_BSTR != varValue.vt) <br>{ <br>     hr = E_INVALIDARG; <br>    goto exit; <br>} <br> <br>        if (L'\0' == varValue.bstrVal[0]) <br>{ <br>    hr = S_OK; <br>    goto exit; <br>} <br>        if (!ConvertWszToBstr(&amp;strName, varValue.bstrVal, -1)) <br>{ <br>    hr = E_OUTOFMEMORY; <br>    goto exit; <br>} <br> <br>hr = pAltName-&gt;Reset(1); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br> <br>hr = pAltName-&gt;SetNameEntry(0, CERT_ALT_NAME_RFC822_NAME, strName); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br> <br>hr = pAltName-&gt;Encode(&amp;strExtension); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br> <br>        varExtension.vt = VT_BSTR; <br>varExtension.bstrVal = strExtension; <br>hr = pServer-&gt;SetCertificateExtension( <br>m_astrSubjectAltNameObjectId[iAltName], <br>PROPTYPE_BINARY, <br>0, <br>&amp;varExtension); <br>if (S_OK != hr) <br>{ <br>    goto exit; <br>} <br>    } <br> <br>exit: <br>    if (NULL != strExtension) <br>    { <br>        SysFreeString(strExtension); <br>    } <br>    if (NULL != strName) <br>    { <br>        SysFreeString(strName); <br>    } <br>    if (NULL != pAltName) <br>    { <br>        pAltName-&gt;Release(); <br>    } <br>    VariantClear(&amp;varValue); <br>    return(hr); <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::VerifyRequest -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>STDMETHODIMP <br>CCertPolicy::VerifyRequest( <br>    /* [in] */ BSTR const strConfig, <br>    /* [in] */ LONG Context, <br>    /* [in] */ LONG bNewRequest, <br>    /* [in] */ LONG Flags, <br>    /* [out, retval] */ LONG __RPC_FAR *pDisposition) <br>{ <br>    HRESULT hr; <br>    ICertServerPolicy *pServer = NULL; <br> <br>    hr = CoCreateInstance( <br>                    CLSID_CCertServerPolicy, <br>                    NULL,               // pUnkOuter <br>                    CLSCTX_INPROC_SERVER, <br>                    IID_ICertServerPolicy, <br>                    (VOID **) &amp;pServer); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br>    hr = pServer-&gt;SetContext(Context); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = _AddRevocationExtension(pServer); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = _AddCertTypeExtension(pServer); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = _AddSubjectAltNameExtension(pServer, 0); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = _AddSubjectAltNameExtension(pServer, 1); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = EnumerateExtensions(pServer); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = EnumerateAttributes(pServer); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>    hr = CheckRequestProperties(pServer); <br>    if (S_OK != hr) <br>    { <br>        goto exit; <br>    } <br> <br>exit: <br>    *pDisposition = S_OK == hr? VR_INSTANT_OK : VR_INSTANT_BAD; <br>    if (NULL != pServer) <br>    { <br>        pServer-&gt;Release(); <br>    } <br>    return(hr); <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::GetDescription -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>STDMETHODIMP <br>CCertPolicy::GetDescription( <br>    /* [out, retval] */ BSTR __RPC_FAR *pstrDescription) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    *pstrDescription = SysAllocString(wszDESCRIPTION); <br>    if (NULL == *pstrDescription) <br>    { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    return(hr); <br>} <br> <br> <br>//+-------------------------------------------------------------------------- <br>// CCertPolicy::ShutDown -- <br>// <br>// Returns S_OK on success. <br>//+-------------------------------------------------------------------------- <br> <br>STDMETHODIMP <br>CCertPolicy::ShutDown(VOID) <br>{ <br>    return(S_OK); <br>} <br> <br> <br>STDMETHODIMP <br>CCertPolicy::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>    static const IID *arr[] = <br>    { <br>        &amp;IID_ICertPolicy, <br>    }; <br> <br>    for (int i = 0; i &lt; sizeof(arr)/sizeof(arr[0]); i++) <br>    { <br>        if (InlineIsEqualGUID(*arr[i], riid)) <br>        { <br>            return(S_OK); <br>        } <br>    } <br>    return(S_FALSE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

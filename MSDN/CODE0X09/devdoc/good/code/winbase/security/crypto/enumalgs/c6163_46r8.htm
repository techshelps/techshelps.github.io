<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ENUMALGS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6164"></a>ENUMALGS.C</h2>
<pre><code>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1996 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;wincrypt.h&gt; <br> <br>/*****************************************************************************/ <br>void _cdecl main(int argc, char *argv[]) <br>{ <br>    HCRYPTPROV hProv = 0; <br>    BYTE *ptr = NULL; <br>    DWORD i; <br>    ALG_ID aiAlgid; <br>    DWORD dwBits; <br>    DWORD dwNameLen; <br>    CHAR szName[100];      // Often allocated dynamically. <br>    BYTE pbData[1000];      // Often allocated dynamically. <br>    DWORD dwDataLen; <br>    DWORD dwFlags; <br>    CHAR *pszAlgType = NULL; <br> <br>    // Get handle to the default provider. <br>    if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) { <br>        printf("Error %x during CryptAcquireContext!\n", GetLastError()); <br>        goto done; <br>    } <br> <br>    // Enumerate the supported algorithms. <br>    for(i=0 ; ; i++) { <br>// Set the CRYPT_FIRST flag the first time through the loop. <br>if(i == 0) { <br>    dwFlags = CRYPT_FIRST; <br>} else { <br>    dwFlags = 0; <br>} <br> <br>// Retrieve information about an algorithm. <br>dwDataLen = 1000; <br>if(!CryptGetProvParam(hProv, PP_ENUMALGS, pbData, &amp;dwDataLen, 0)) { <br>    if(GetLastError() == ERROR_NO_MORE_ITEMS) { <br>// Exit the loop. <br>break; <br>    } else { <br>printf("Error %x reading algorithm!\n", GetLastError()); <br>return; <br>    } <br>} <br> <br>// Extract algorithm information from 'pbData' buffer. <br>ptr = pbData; <br>aiAlgid = *(ALG_ID *)ptr; <br>ptr += sizeof(ALG_ID); <br>dwBits = *(DWORD *)ptr; <br>ptr += sizeof(DWORD); <br>dwNameLen = *(DWORD *)ptr; <br>ptr += sizeof(DWORD); <br>strncpy(szName, ptr,dwNameLen); <br> <br>// Determine algorithm type. <br>switch(GET_ALG_CLASS(aiAlgid)) { <br>    case ALG_CLASS_DATA_ENCRYPT: pszAlgType = "Encrypt  "; <br> break; <br>    case ALG_CLASS_HASH: pszAlgType = "Hash     "; <br> break; <br>    case ALG_CLASS_KEY_EXCHANGE: pszAlgType = "Exchange "; <br> break; <br>    case ALG_CLASS_SIGNATURE: pszAlgType = "Signature"; <br> break; <br>    default: pszAlgType = "Unknown  "; <br>} <br> <br>// Print information about algorithm. <br>printf("Name:%-14s Type:%s  Bits:%-4d Algid:%8.8xh\n", <br>    szName, pszAlgType, dwBits, aiAlgid <br>); <br>    } <br> <br>    done: <br> <br>    // Release CSP handle. <br>    if(hProv) CryptReleaseContext(hProv,0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

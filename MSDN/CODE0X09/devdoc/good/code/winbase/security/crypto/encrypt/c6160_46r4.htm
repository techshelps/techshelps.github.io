<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6160"></a>README.TXT</h2>
<pre><code>File Encryption <br> <br> <br>The ENCRYPT sample is a console application that encrypts files. Files <br>encrypted with this sample can be later decrypted with the DECRYPT sample. <br> <br>Note that the INITUSER sample (or equivalent) must be run prior to running <br>these samples, to create a key container for the default user. <br> <br>Usage <br>----- <br> <br>The ENCRYPT sample is run from the command line as follows: <br> <br>    encrypt &lt;source file&gt; &lt;dest file&gt; [ &lt;password&gt; ] <br> <br>The &lt;source file&gt; argument specifies the filename of the plaintext file <br>to be encrypted, and the &lt;dest file&gt; argument specifies the filename of <br>the ciphertext file to be created. The optional &lt;password&gt; argument specifies <br>a password with which to encrypt the file. <br> <br>If no password is specified, then a random session key is used to encrypt <br>the file. This session key is then encrypted with the key exchange public <br>key of the default user and stored with the encrypted file. In this case, <br>the corresponding key exchange private key is later used (by DECRYPT) to <br>decrypt the session key, which is used in turn to decrypt the file itself. <br> <br>The DECRYPT sample is run from the command line as follows: <br> <br>    decrypt &lt;source file&gt; &lt;dest file&gt; [ &lt;password&gt; ] <br> <br>The &lt;source file&gt; argument specifies the filename of the ciphertext file <br>to be decrypted, and the &lt;dest file&gt; argument specifies the filename of <br>the plaintext file to be created. The optional &lt;password&gt; argument specifies <br>a password with which to decrypt the file. <br> <br>If a bogus password is supplied to DECRYPT, no error is typically generated. <br>Of course, the file isn't decrypted properly either. <br> <br>Exercises for the Reader <br>------------------------ <br> <br>1. By default, these samples use the RC4 stream cipher to perform the <br>   encryption and decryption operations. If the USE_BLOCK_CIPHER constant is <br>   defined at the top of each file, however, the RC2 block cipher is used <br>   instead. <br> <br>2. For the sake of simplicity, these samples do not use salt values or (in the <br>   case of a block cipher) initialization vectors (IVs). This greatly <br>   diminishes their effective security. It would be a small matter to modify <br>   these programs such that salt values and IVs are used (see CryptSetKeyParam <br>   in the documentation). These values should be generated using the <br>   CryptGenRandom function, and need to be stored (in a non-encrypted form) <br>   along with the ciphertext file. <br> <br>3. Another command line argument could be added, which would specify a file <br>   containing the public key to use when encrypting the session key. This file <br>   would ideally be in the form of a certificate. If this is done, then it <br>   becomes possible to encrypt a file such that only the owner of the <br>   corresponding private key would be able to decrypt the file. This is useful <br>   if you want to send the file to someone else. Note that this is only <br>   applicable in the case when a password is not specified. </code></pre>
<p>&nbsp;</p></body>
</HTML>

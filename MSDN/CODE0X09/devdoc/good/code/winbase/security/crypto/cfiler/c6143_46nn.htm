<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6143"></a>README.TXT</h2>
<pre><code>Cryptography Filer  <br> <br>SUMMARY <br>======= <br> <br>The CFiler sample is a file encryptor that uses the Microsoft Cryptography  <br>API (CAPI). Its interface is an adaptation of the FILER sample. CFiler  <br>demonstrates a large part of the capabilities of CAPI, including encryption,  <br>digital signature, and password-based key generation. <br> <br>CFiler's interface contains two list boxes: the directory list box and the  <br>file list box. Users navigate about their directory tree by double-clicking  <br>on the directory list box, which is located on the left of CFiler's client  <br>area. Double-clicking on an entry in the directory list box once causes the  <br>directory to be expanded, with all its subdirectories displayed indented  <br>below the entry. Double-clicking on the entry a second time causes the entry  <br>to be collapsed. Users can perform cryptographic operations on files and  <br>directories by selecting them in the file list box and selecting operations  <br>from the menu. When a user double-clicks on an item in the file list box,  <br>CFiler encrypts the file and displays its filename in gray text. Note: The  <br>plaintext file is deleted. A second double-click causes CFiler to decrypt  <br>the file and display its filename in its original color. Users sign files by  <br>first selecting them in the file list box and then selecting Sign from the  <br>File menu. Signed files appear in red text. Users can verify the signature  <br>of a file by selecting the file in the file list box and choosing Verify from  <br>the file menu. An encrypted file that has been signed appears in light red  <br>text. When users encrypt and then sign files, they know that adversaries  <br>have not encrypted the files. Users can select the algorithms they wish to  <br>use for encryption and digital signature from the Options menu. <br> <br>The first time a user runs CFiler, the application creates a key called fnKey  <br>and stores the key in the registry. From then on, when the user starts  <br>CFiler, the application access fnKey from the registry. CFiler uses fnKey to  <br>encrypt file and directory names. When a user chooses to encrypt a file,  <br>CFiler generates a session key with which to encrypt the file, exports the  <br>key, generates a random filename with a .CRP extension, creates a hidden  <br>file with this name, encrypts the name of the plaintext file with fnKey,  <br>stores the encrypted filename to the .CRP file, stores the exported key to  <br>the .CRP file, encrypts the data with the session key, stores the encrypted  <br>content to the .CRP file, and deletes the plaintext file. When the user  <br>chooses to encrypt a directory, CFiler encrypts the name of the directory <br>with fnKey, stores the data in a file called dirinfo in the directory, <br>generates a random name with a .CRP extension, renames the directory  <br>using this name, hides the directory, encrypts all the files in the  <br>directory, and recursively encrypts all subdirectories. If the fnKey is lost  <br>or tampered with, CFiler displays the file in the file list box as RecoverMe  <br>in gray text. Although the user can recover the original file, the original  <br>filename is lost when fnKey is lost. <br> <br>The Password item under the Options menu prompts the user for a password.  <br>CFiler generates a session key with this password the next time the user  <br>encrypts a file. When the user wishes to decrypt that file, the application  <br>again prompts the user for the password. <br> <br>CFiler never displays the random file and directory names it generates.  <br>CFiler only displays the original names. CFiler accomplishes this by  <br>maintaining two string tables: one for the directory list box and one for the  <br>file list box. Each entry in the string table has a hidden and displayed  <br>field. The hidden field holds the pathname as it appears on the disk. The  <br>displayed field holds the pathname as it appeared on the disk before  <br>encryption. <br> <br>CFiler stores all signatures of files along with the ALG_ID's of the hashing  <br>algorithms used to generate the signatures as separate, hidden files in the  <br>hidden directory sig off the root on the same drive as the system directory.  <br>This directory is hidden by default. Users may choose to hide or unhide this  <br>directory and its contents. The filenames of these files are SHA hashes of  <br>the full pathnames of the files. It is necessary to convert these 20-byte  <br>hashes before using them as filenames since there are only 2^6 rather than  <br>2^8 legal characters for filenames. By choosing 64 (2^6) characters for  <br>filenames (A-Z, a-z, 0-9, +, and _), it is possible to convert 3 bytes of  <br>the hash, containing 24 = 8 * 3 bits of data, to 4 bytes of the filename,  <br>also containing 24 = 6 * 4 bits of data. CFiler adds 4 null bytes to the hash  <br>to have 24 bytes with which to perform the conversion. CFiler knows that a  <br>file has a signature if the hash of its full pathname is one of the files in  <br>the sig directory. To increase efficiency, CFiler creates in memory a table  <br>of the signature files when filling the file list box. <br> <br>The default encryption algorithm is RC2, which is not fixed. For password- <br>based key generation, MD4 is the hashing algorithm, and it cannot be changed.  <br>The default hashing algorithm for generating signature files (which the user  <br>can change) is MD4. The algorithm used to generate fnKey is RC4. The  <br>algorithm used to hash pathnames of files in order to generate signature  <br>filenames is SHA, which is fixed. It is necessary to #define WIN95 when  <br>compiling under Windows 95. Making CFiler a Unicode application simply  <br>requires a #define UNICODE. <br> <br>MORE INFORMATION <br>================ <br> <br>Encrypted files are structured  in the following way: <br> <br> 1. Filename encrypted with fnKey (RC4). - 256 * sizeof(TCHAR) bytes. <br> 2. Exported key blob length - sizeof(DWORD) bytes. This is zero if the user  <br>    selected a password-based key generation algorithm. <br> 3. Key blob - (key blob length bytes) (0 bytes if generated from password). <br> 4. Encrypted content. <br> <br>Menus <br>----- <br> <br>  - File: Contains items which perform cryptographic operations on files. <br>  - View: Contains items which change the view of the file and directory  <br>    list boxes. <br>  - Drives: Contains a list of available drives. <br>  - Options: Contains items which set options for the cryptography operations. <br>  - Help: Contains information for the user to obtain help and version  <br>    information. <br> <br>File Menu <br>--------- <br> <br>  - Encrypt/Decrypt: If the selected file in the file list box is plaintext,  <br>    this menu item causes the application to encrypt the file. If the  <br>    selected item is encrypted, this menu item causes the application to  <br>    decrypt the file. During encryption, the plaintext file is deleted.  <br>    During decryption, the encrypted file is deleted. <br> <br>  - Sign: Creates a separate digital signature of the selected file in the  <br>    file list box. This file is stored in the directory sig off the root on  <br>    the same drive as the system directory. If a signature file already  <br>    exists, the application asks users if they want to delete the signature  <br>    file and replace it with a new signature file. <br> <br>  - Verify: Verifies the signature of the file selected in the file list box.  <br> <br>  - Exit: Terminates the application.  <br> <br>View Menu <br>--------- <br> <br>  - Refresh: Refreshes the view of the current drive to that of the root.  <br> <br>  - Expand Tree: Recursively expands the directory tree in the directory  <br>    list box. <br> <br>  - Swap Sides: Swaps the file and directory list boxes. <br> <br>Drives Menu <br>----------- <br> <br>Lists available drives. When a user selects one of the items in this menu,  <br>the application switches to that drive. <br> <br>Options Menu <br>------------ <br> <br>  - Choose Encryption Algorithm: Prompts the user with a dialog box with  <br>    radio buttons for each algorithm for generating session keys. <br> <br>  - Enter Password: Prompts the user with a dialog box with a field for a  <br>    password with which to generate session keys. <br> <br>  - Choose Signature Algorithm: Prompts the user with a dialog box containing  <br>    radio buttons for various algorithms with which to create digital <br>    signatures. <br> <br>  - Hide Signatures (either checked or unchecked): Toggles the hidden or  <br>    shown status of the directory containing digital signatures as well as  <br>    the hidden or shown status of the signatures themselves. <br> <br>Help Menu <br>--------- <br> <br>  - CFiler Help: Loads the CFiler help file. <br> <br>  - About CFiler: Shows the CFiler version information. </code></pre>
<p>&nbsp;</p></body>
</HTML>

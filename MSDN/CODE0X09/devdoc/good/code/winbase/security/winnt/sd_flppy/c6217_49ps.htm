<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHGFLPSD.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6220"></a>CHGFLPSD.C</h2>
<pre><code>//////////////////////////////////////////////////////// <br>// <br>//  Client.c -- <br>// <br>//      This program is a command line oriented <br>//      demonstration of the FloppyLocker service <br>//      sample, aka floplock.exe <br>// <br>//      Copyright 1992 - 1998 Microsoft Corp.  All Rights Reserved <br> <br>/****************************************************************************\ <br>*  INCLUDES, DEFINES, TYPEDEFS <br>\****************************************************************************/ <br>#define STRICT <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#define PERR(api) printf("\n%s: Error %d from %s on line %d",  \ <br>    __FILE__, GetLastError(), api, __LINE__); <br>#define PMSG(msg) printf("\n%s line %d: %s",  \ <br>    __FILE__, __LINE__, msg); <br> <br>/****************************************************************************\ <br>* GLOBAL VARIABLES <br>\****************************************************************************/ <br> <br>#define              SZ_NAME_BUF 30 <br>UCHAR   ucMchNameBuf[SZ_NAME_BUF] = ""; <br>LPTSTR  lpszMchName = (LPTSTR)&amp;ucMchNameBuf; <br>UCHAR   ucOperation; <br> <br>/****************************************************************************\ <br>* FUNCTION PROTOTYPES <br>\****************************************************************************/ <br> <br>BOOL CrackArgs(UINT argc, char *argv[]); <br>VOID DisplayHelp(VOID); <br> <br>int main(int argc, char *argv[]) <br>{ <br>  char    inbuf[180]; <br>  char    outbuf[180]; <br>  DWORD   bytesRead; <br>  BOOL    ret; <br>  #define               SZ_PIPE_NAME_BUF 50 <br>  UCHAR   ucPipeNameBuf[SZ_PIPE_NAME_BUF] = ""; <br>  LPTSTR  lpszPipeName = (LPTSTR)&amp;ucPipeNameBuf; <br> <br>  // check if Win32s, if so, display notice and terminate <br>      if( GetVersion() &amp; 0x80000000 ) <br>      { <br>        MessageBox( NULL, <br>           "This application cannot run on Windows 3.1 or Windows 95.\n" <br>           "This application will now terminate.", <br>           "SD_FLPPY", <br>           MB_OK | MB_ICONSTOP | MB_SETFOREGROUND ); <br>        return( 1 ); <br>      } <br> <br>  if (!CrackArgs(argc,argv)) <br>    exit(1); <br> <br>  strcpy(lpszPipeName,lpszMchName); <br>  strcat(lpszPipeName,"\\pipe\\sd_flppy"); <br> <br>  outbuf[0] = ucOperation; <br>  outbuf[1] = '\0'; <br> <br>  ret = CallNamedPipe(lpszPipeName, <br>                      outbuf, <br>                      sizeof(outbuf), <br>                      inbuf, <br>                      sizeof(inbuf), <br>                      &amp;bytesRead, <br>                      NMPWAIT_WAIT_FOREVER); <br> <br>  if (!ret) <br>  { if (ERROR_ACCESS_DENIED == GetLastError()) <br>    { printf("\nAccess denied\n"); <br>    } <br>    else if (ERROR_BAD_NETPATH == GetLastError()) <br>    { printf("\nMachine %s not found\n",lpszMchName); <br>    } <br>    else <br>    { PERR("CallNamedPipe"); <br>    } <br>    exit(1); <br>  } <br> <br>  printf("\n%s %s\n",lpszMchName,inbuf); <br>} <br>  <br>/****************************************************************************\ <br>* <br>* FUNCTION: CrackArgs <br>* <br>\****************************************************************************/ <br> <br>BOOL CrackArgs(UINT argc, char *argv[]) <br>{ <br>  char *p; <br> <br>  /**************************************************************************\ <br>  * <br>  * There must be two arguments <br>  * <br>  \**************************************************************************/ <br> <br>  if (argc != 3) <br>  { DisplayHelp(); <br>    return(FALSE); <br>  } <br> <br>  p=argv[1]; <br> <br>  /**************************************************************************\ <br>  * <br>  * The machine name argument must be 3 to (SZ_NAME_BUF-3) chars long <br>  * <br>  \**************************************************************************/ <br> <br>  if ((strlen(p) &lt; 3) || (strlen(p) &gt; (SZ_NAME_BUF-3) )) <br>  { DisplayHelp(); <br>    return(FALSE); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * The first two chars in the machine name argument must be \ <br>  * <br>  \**************************************************************************/ <br> <br>  if ('\\' != *p) <br>  { DisplayHelp(); <br>    return(FALSE); <br>  } <br>  if ('\\' != *(p+1)) <br>  { DisplayHelp(); <br>    return(FALSE); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Set up the machine name <br>  * <br>  \**************************************************************************/ <br> <br>  strcpy(lpszMchName,"\\\\"); <br>  strcat(lpszMchName,(p+2)); <br> <br>  <br>  p=argv[2]; <br> <br>  /**************************************************************************\ <br>  * <br>  * The switch argument must be 2 chars long <br>  * <br>  \**************************************************************************/ <br> <br>  if (strlen(p) != 2) <br>  { DisplayHelp(); <br>    return(FALSE); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * The first char in the switch argument must be / <br>  * <br>  \**************************************************************************/ <br> <br>  if ('/' != *p) <br>  { DisplayHelp(); <br>    return(FALSE); <br>  } <br>  <br>  /**************************************************************************\ <br>  * <br>  * Chars 2 must be U or L or Q <br>  * <br>  \**************************************************************************/ <br> <br> <br>  switch (*(p+1)) <br>  { case 'u': <br>    case 'U': <br>      ucOperation = 'U'; <br>      break; <br>    case 'l': <br>    case 'L': <br>      ucOperation = 'L'; <br>      break; <br>    case 'q': <br>    case 'Q': <br>      ucOperation = 'Q'; <br>      break; <br>    default : <br>      DisplayHelp(); <br>      return(FALSE); <br>  } <br> <br>  return(TRUE); <br>} <br>  <br>/****************************************************************************\ <br>* <br>* FUNCTION: DisplayHelp <br>* <br>\****************************************************************************/ <br> <br>VOID DisplayHelp(VOID) <br>{ <br>  printf("\nusage: chgflpsd \\\\machinenam /switch"); <br>  printf("\n                  Values for /switch"); <br>  printf("\n                        /u      Unlock"); <br>  printf("\n                        /l      Lock"); <br>  printf("\n                        /q      Query\n"); <br>  printf("\nFor example to manage DACLs on machine \\\\flip5's floppies"); <br>  printf("\n       chgflpsd \\\\flip5 /u      Gives access to everyone"); <br>  printf("\n       chgflpsd \\\\flip5 /l      Gives access to only local admins"); <br>  printf("\n       chgflpsd \\\\flip5 /q      Query current access on \\\\flip5\n"); <br> <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

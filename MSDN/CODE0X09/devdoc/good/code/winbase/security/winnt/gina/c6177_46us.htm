<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OPTIONS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6184"></a>OPTIONS.C</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       options.c <br>// <br>//  Contents: <br>// <br>//  Classes: <br>// <br>//  Functions: <br>// <br>//  History:    5-02-95   RichardW   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include "gina.h" <br>#pragma hdrstop <br> <br>typedef <br>NET_API_STATUS (NET_API_FUNCTION * NUCP)(LPWSTR, LPWSTR, LPWSTR, LPWSTR); <br> <br>NUCP    NetUserChangePasswordFn = NULL; <br>HMODULE hNetApi32; <br> <br>BOOL <br>LoadNetapi(HWND hDlg) <br>{ <br>    hNetApi32 = LoadLibrary(TEXT("netapi32.dll")); <br>    if (hNetApi32) <br>    { <br>        NetUserChangePasswordFn = (NUCP) GetProcAddress(hNetApi32, "NetUserChangePassword"); <br>        if (NetUserChangePasswordFn) <br>        { <br>            return(TRUE); <br>        } <br>    } <br> <br>    ErrorMessage(hDlg, TEXT("Change Password"), MB_ICONSTOP | MB_OK); <br> <br>    return(FALSE); <br> <br>} <br> <br>PWSTR <br>AllocAndCaptureText( <br>    HWND    hDlg, <br>    int     Id) <br>{ <br>    WCHAR   szTemp[MAX_PATH]; <br>    PWSTR   New; <br>    DWORD   cb; <br> <br>    cb = GetDlgItemText(hDlg, Id, szTemp, MAX_PATH); <br>    New = LocalAlloc(LMEM_FIXED, (cb + 1) * sizeof(WCHAR)); <br>    if (New) <br>    { <br>        wcscpy(New, szTemp); <br>    } <br>    return(New); <br>} <br> <br>PWSTR <br>DupString( <br>    PWSTR   pszText) <br>{ <br>    PWSTR   New; <br>    DWORD   cb; <br> <br>    cb = (wcslen(pszText) + 1) * sizeof(WCHAR); <br>    New = LocalAlloc(LMEM_FIXED, cb); <br> <br>    if (New) <br>    { <br>        wcscpy(New, pszText); <br>    } <br> <br>    return(New); <br>} <br> <br>BOOL <br>TryToChangePassword( <br>    HWND        hDlg, <br>    PGlobals    pGlobals) <br>{ <br>    PWSTR   pszUsername; <br>    PWSTR   pszDomain; <br>    PWSTR   pszOld; <br>    PWSTR   pszNew; <br>    PWSTR   pszTemp; <br> <br>    NET_API_STATUS  NetStatus; <br> <br>    if (!NetUserChangePasswordFn) <br>    { <br>        if (!LoadNetapi(hDlg)) <br>        { <br>            return(FALSE); <br>        } <br>    } <br> <br>    pszUsername = AllocAndCaptureText(hDlg, IDD_USER_NAME); <br>    pszDomain = AllocAndCaptureText(hDlg, IDD_DOMAIN); <br>    pszOld = AllocAndCaptureText(hDlg, IDD_OLD_PASSWORD); <br>    pszNew = AllocAndCaptureText(hDlg, IDD_NEW_PASSWORD); <br> <br>    if (!pszUsername || !pszDomain || !pszOld || !pszNew) <br>    { <br>        goto clean_exit; <br>    } <br> <br>    pszTemp = AllocAndCaptureText(hDlg, IDD_CONFIRM_PASSWORD); <br>    if (wcscmp(pszNew, pszTemp)) <br>    { <br>        LocalFree(pszTemp); <br>        MessageBox(hDlg, TEXT("Your passwords did not match."), TEXT("Change Password"), <br>                        MB_ICONSTOP | MB_OK); <br>        goto clean_exit; <br>    } <br> <br>    NetStatus = NetUserChangePasswordFn(pszDomain, pszUsername, pszOld, pszNew); <br>    if (NetStatus != NERR_Success) <br>    { <br>        SetLastError(NetStatus); <br>        ErrorMessage(hDlg, TEXT("Change Password"), MB_ICONSTOP | MB_OK); <br>    } <br>    else <br>        MessageBox(hDlg, TEXT("Your password was changed successfully"), <br>                    TEXT("Change Password"), MB_ICONINFORMATION | MB_OK); <br> <br>clean_exit: <br>    if (pszUsername) <br>    { <br>        LocalFree(pszUsername); <br>    } <br>    if (pszDomain) <br>    { <br>        LocalFree(pszDomain); <br>    } <br>    if (pszOld) <br>    { <br>        LocalFree(pszOld); <br>    } <br>    if (pszNew) <br>    { <br>        LocalFree(pszNew); <br>    } <br> <br>    return(NetStatus == NERR_Success); <br>} <br> <br>int <br>CALLBACK <br>ChangePasswordDlgProc( <br>    HWND        hDlg, <br>    UINT        Message, <br>    WPARAM      wParam, <br>    LPARAM      lParam) <br>{ <br>    PGlobals    pGlobals; <br> <br>    pGlobals = (PGlobals) GetWindowLong(hDlg, GWL_USERDATA); <br>    switch (Message) <br>    { <br>        case WM_INITDIALOG: <br>            CenterWindow(hDlg); <br>            SetWindowLong(hDlg, GWL_USERDATA, lParam); <br>            return(TRUE); <br> <br>        case WM_COMMAND: <br>            if (LOWORD(wParam) == IDOK) <br>            { <br>                if (TryToChangePassword(hDlg, pGlobals)) <br>                { <br>                    SetWindowText(GetDlgItem(hDlg, IDCANCEL), TEXT("Done")); <br>                } <br>                SetDlgItemText(hDlg, IDD_OLD_PASSWORD, TEXT("")); <br>                SetDlgItemText(hDlg, IDD_NEW_PASSWORD, TEXT("")); <br>                SetDlgItemText(hDlg, IDD_CONFIRM_PASSWORD, TEXT("")); <br>                SetFocus(GetDlgItem(hDlg, IDD_OLD_PASSWORD)); <br> <br>                return(TRUE); <br>            } <br>            if (LOWORD(wParam) == IDCANCEL) <br>            { <br>                EndDialog(hDlg, 0); <br>                return(TRUE); <br>            } <br> <br>    } <br>    return(FALSE); <br>} <br> <br> <br> <br>int <br>CALLBACK <br>ConfigDlgProc( <br>    HWND        hDlg, <br>    UINT        Message, <br>    WPARAM      wParam, <br>    LPARAM      lParam) <br>{ <br>    PGlobals    pGlobals; <br> <br>    pGlobals = (PGlobals) GetWindowLong(hDlg, GWL_USERDATA); <br>    switch (Message) <br>    { <br>        case WM_INITDIALOG: <br>            pGlobals = (PGlobals) lParam; <br> <br>            CenterWindow(hDlg); <br>            SetWindowLong(hDlg, GWL_USERDATA, lParam); <br> <br>            CheckDlgButton(hDlg, IDD_NO_NEW_USERS, !pGlobals-&gt;fAllowNewUser); <br> <br>            CheckDlgButton(hDlg, IDD_AUTO_LOGON, <br>                    (pGlobals-&gt;pAccount-&gt;Flags &amp; MINI_AUTO_LOGON) ? 1 : 0 ); <br> <br>            return(TRUE); <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDOK: <br>                    pGlobals-&gt;fAllowNewUser = !IsDlgButtonChecked(hDlg, IDD_NO_NEW_USERS); <br>                    if (IsDlgButtonChecked(hDlg, IDD_AUTO_LOGON)) <br>                    { <br>                        pGlobals-&gt;pAccount-&gt;Flags |= MINI_AUTO_LOGON; <br>                    } <br>                    else <br>                    { <br>                        pGlobals-&gt;pAccount-&gt;Flags &amp;= ~MINI_AUTO_LOGON; <br>                    } <br>                    EndDialog(hDlg, IDOK); <br>                    return(TRUE); <br> <br>                case IDCANCEL: <br>                    EndDialog(hDlg, IDCANCEL); <br>                    return(TRUE); <br> <br>            } <br>    } <br> <br>    return(FALSE); <br> <br>} <br> <br>int <br>InitOptionsDialog( <br>    HWND        hDlg, <br>    LPARAM      lParam) <br>{ <br>    CenterWindow(hDlg); <br>    SetWindowLong(hDlg, GWL_USERDATA, lParam); <br> <br>    return(1); <br>} <br> <br> <br> <br>int <br>CALLBACK <br>OptionsDlgProc( <br>    HWND        hDlg, <br>    UINT        Message, <br>    WPARAM      wParam, <br>    LPARAM      lParam) <br>{ <br>    PGlobals    pGlobals; <br>    int         result; <br> <br> <br>    pGlobals = (PGlobals) GetWindowLong(hDlg, GWL_USERDATA); <br> <br>    switch (Message) <br>    { <br>        case WM_INITDIALOG: <br>            return InitOptionsDialog(hDlg, lParam); <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDCANCEL: <br>                    EndDialog(hDlg, WLX_SAS_ACTION_NONE); <br>                    return(TRUE); <br> <br>                case IDD_LOCK_BUTTON: <br>                    EndDialog(hDlg, WLX_SAS_ACTION_LOCK_WKSTA); <br>                    return(TRUE); <br> <br>                case IDD_TASK_BUTTON: <br>                    EndDialog(hDlg, WLX_SAS_ACTION_TASKLIST); <br>                    return(TRUE); <br> <br>                case IDD_OPTIONS_EXIT: <br>                    result = pWlxFuncs-&gt;WlxDialogBoxParam(  hGlobalWlx, <br>                                                        hDllInstance, <br>                                                        (LPTSTR) MAKEINTRESOURCE(IDD_SHUTDOWN), <br>                                                        hDlg, <br>                                                        ShutdownDlgProc, <br>                                                        (LONG) pGlobals); <br>                    if (result != WLX_SAS_ACTION_NONE) <br>                    { <br>                        EndDialog(hDlg, result); <br>                    } <br>                    return(TRUE); <br> <br>                case IDD_PASSWORD_BUTTON: <br>                    pWlxFuncs-&gt;WlxDialogBoxParam(   hGlobalWlx, <br>                                                    hDllInstance, <br>                                                    (LPTSTR) MAKEINTRESOURCE(IDD_CHANGE_PASSWORD), <br>                                                    hDlg, <br>                                                    ChangePasswordDlgProc, <br>                                                    (LONG) pGlobals); <br>                    return(TRUE); <br> <br>                case IDD_CONFIG_BUTTON: <br>                    pWlxFuncs-&gt;WlxDialogBoxParam(   hGlobalWlx, <br>                                                    hDllInstance, <br>                                                    (LPTSTR) MAKEINTRESOURCE(IDD_LOGON_CONFIG), <br>                                                    hDlg, <br>                                                    ConfigDlgProc, <br>                                                    (LONG) pGlobals); <br>                    return(TRUE); <br> <br>            } <br>    } <br>    return(FALSE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTTPGET.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6201"></a>HTTPGET.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    httpget.c <br> <br>Abstract: <br> <br>    This is a web command line application.  It will allow a user to get a  <br>    html document from the command line. <br> <br>Environment: <br> <br>    console app <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;io.h&gt; <br>#include &lt;fcntl.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;malloc.h&gt; <br>#include "const.h" <br>#include "proto.h" <br> <br>void <br>PrintUsage(void); <br> <br>#define SOCKETS_METHOD 1 <br> <br>void <br>_CRTAPI1 <br>main( <br>    int argc, <br>    char * argv[]) <br>{ <br>    char *        Server; <br>    char *        URL; <br>    char *        Verb = "GET"; <br>    char *        Gateway = NULL; <br>    char *        AcceptTypes[2] = {"*/*", NULL}; <br>    char          Headers[] =  <br>                      "Accept: */*\r\n" <br>                      "User-Agent: Httpget\r\n" <br>                      "Referer: Httpget\r\n" <br>                      "\r\n"; <br>    int           Method = SOCKETS_METHOD; <br>    BOOL          DisplayHeaders = FALSE; <br>    DWORD         ClientDataSize = 0; <br>    PSTR          pszUserName = ""; <br>    PSTR          pszPassword = ""; <br>    PSTR          pszStore = NULL; <br>    PSTR          pszPref = NULL; <br> <br>    // <br>    // Parse the command line <br>    // <br> <br>    if (argc &lt; 3)  <br>    { <br>        PrintUsage(); <br>        return; <br>    } <br> <br>    while (argc &gt; 3)  <br>    { <br>        // <br>        // parse options <br>        // <br> <br>        if (argv[1][0] == '-')  <br>        { <br>            switch (argv[1][1])  <br>            { <br>            case 'V' : <br>            case 'v' : <br>                // <br>                // Input verb <br>                // <br> <br>                Verb = &amp;argv[1][3]; <br> <br>                break; <br> <br>            case 'H' : <br>            case 'h' : <br>                // <br>                // Display headers <br>                // <br> <br>                DisplayHeaders = TRUE; <br> <br>                break; <br> <br>            case 'D' : <br>            case 'd' : <br>                // <br>                // Amount of data to send <br>                // <br> <br>                if (sscanf(&amp;argv[1][3], "%u", &amp;ClientDataSize) != 1)  <br>                { <br>                    PrintUsage(); <br>                    return; <br>                } <br>                break; <br> <br>            case 'G' : <br>            case 'g' : <br>                // <br>                // Gateway <br>                // <br> <br>                Gateway = &amp;argv[1][3]; <br> <br>                break; <br> <br>            case 'M': <br>            case 'm': <br>                // User name <br>                pszPref = &amp;argv[1][3]; <br>                break; <br> <br>            case 'N': <br>            case 'n': <br>                // User name <br>                pszUserName = &amp;argv[1][3]; <br>                break; <br> <br>            case 'P': <br>            case 'p': <br>                // Password <br>                pszPassword = &amp;argv[1][3]; <br>                break; <br> <br>            case 'S': <br>            case 's': <br>                pszStore = &amp;argv[1][3]; <br>                break; <br> <br>            default: <br>                PrintUsage(); <br>                return; <br>                break; <br>            } <br>        }  <br>        else  <br>        { <br>            PrintUsage(); <br>            return; <br>        } <br> <br>        argc --; <br>        argv ++; <br>    } <br> <br>    Server = argv[1]; <br> <br>    URL = argv[2]; <br> <br>    switch (Method)  <br>    { <br>    case SOCKETS_METHOD: <br>        HttpGetSocket( <br>            Verb, <br>            Server, <br>            URL, <br>            DisplayHeaders, <br>            ClientDataSize, <br>            pszUserName, <br>            pszPassword, <br>            pszStore, <br>            pszPref ); <br>        break; <br>    } <br> <br>    return; <br>} <br> <br>void <br>PrintUsage() <br>{ <br>    fprintf(stderr, <br>        "httpauth  [-h] [-d:&lt;size&gt;] [-m:&lt;methodlist&gt;] [-v:&lt;verb&gt;] [-n:&lt;username&gt;]\n" <br>"\t  [-p:&lt;password&gt;] [-g:gateway] [-s:storefile] &lt;server&gt; &lt;path&gt;\n" <br>        "\t-h           - display result headers\n" <br>        "\t&lt;size&gt;       - amount of client data to send\n" <br>        "\t&lt;verb&gt;       - HTTP verb to use (default is GET)\n" <br>        "\t&lt;username&gt;   - user name for authentication\n" <br>        "\t&lt;password&gt;   - password for authentication\n" <br>        "\t&lt;methodlist&gt; - comma separated list of authentication methods in order\n" <br>        "\t               of preference (Default is to use first supported method\n" <br>        "\t               returned by the HTTP server (e.g., -m:NTLM,BASIC)\n" <br>        "\t&lt;storefile&gt;  - file where to store result message body\n" <br>        "\t&lt;server&gt;     - web server to connect to (without http:)\n" <br>        "\t&lt;path&gt;       - resource to get (e.g., /default.htm)\n" <br>    ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

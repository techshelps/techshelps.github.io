<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEXTSID.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6242"></a>TEXTSID.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    textsid.c <br> <br>Abstract: <br> <br>    This module illustrates how to obtain the textual representation <br>    of a binary Sid.  This is useful in scenarios where it is not appropriate <br>    to obtain the name associated with the Sid, or, when the network is not <br>    available to obtain such information.  The Windows NT event viewer <br>    utility displays Sids in textual form when the username cannot be <br>    looked up.  Furthermore, lookup of local user profiles is facilitated <br>    through conversion of the user Sid to textual form. <br> <br>    This sample obtains the Sid of the current user and then displays the <br>    Sid in textual notation. <br> <br>    A standardized shorthand notation for SIDs makes it simpler to <br>    visualize their components: <br> <br>    S-R-I-S-S... <br> <br>    In the notation shown above, <br> <br>    S identifies the series of digits as an SID, <br>    R is the revision level, <br>    I is the identifier-authority value, <br>    S is subauthority value(s). <br> <br>    An SID could be written in this notation as follows: <br>    S-1-5-32-544 <br> <br>    In this example, <br>    the SID has a revision level of 1, <br>    an identifier-authority value of 5, <br>    first subauthority value of 32, <br>    second subauthority value of 544. <br>    (Note that the above Sid represents the local Administrators group) <br> <br>    The GetTextualSid() function will convert a binary Sid to a textual <br>    string. <br> <br>    The resulting string will take one of two forms.  If the <br>    IdentifierAuthority value is not greater than 2^32, then the SID <br>    will be in the form: <br> <br>    S-1-5-21-2127521184-1604012920-1887927527-19009 <br>      ^ ^ ^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^ <br>      | | |      |          |          |        | <br>      +-+-+------+----------+----------+--------+--- Decimal <br> <br>    Otherwise it will take the form: <br> <br>    S-1-0x206C277C6666-21-2127521184-1604012920-1887927527-19009 <br>      ^ ^^^^^^^^^^^^^^ ^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^ <br>      |       |        |      |          |          |        | <br>      |   Hexidecimal  |      |          |          |        | <br>      +----------------+------+----------+----------+--------+--- Decimal <br> <br>    If the function succeeds, the return value is TRUE. <br>    If the function fails, the return value is FALSE.  To get extended <br>        error information, call the Win32 API GetLastError(). <br> <br>Author: <br> <br>    Scott Field (sfield)    13-Apr-96 <br> <br>Revision History: <br> <br>    Scott Field (sfield)    11-Jul-95 <br>    Unicode enabled <br> <br>    Scott Field (sfield)    15-May-95 <br>--*/ <br> <br>#define RTN_OK 0 <br>#define RTN_ERROR 13 <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>BOOL <br>GetTextualSid( <br>    PSID pSid,          // binary Sid <br>    LPTSTR TextualSID,  // buffer for Textual representaion of Sid <br>    LPDWORD cchSidSize  // required/provided TextualSid buffersize <br>    ); <br> <br>void <br>DisplayWinError( <br>    LPSTR szAPI,    // pointer to Ansi function name <br>    DWORD dwError   // DWORD WinError <br>    ); <br> <br>int <br>__cdecl <br>main( <br>    void <br>    ) <br>{ <br>#define MY_BUFSIZE 256 // all allocations should be dynamic <br>    HANDLE hToken; <br>    BYTE buf[MY_BUFSIZE]; <br>    PTOKEN_USER ptgUser = (PTOKEN_USER)buf; <br>    DWORD cbBuffer=MY_BUFSIZE; <br> <br>    TCHAR szTextualSid[MY_BUFSIZE]; <br>    DWORD cchSid=MY_BUFSIZE; <br> <br>    BOOL bSuccess; <br> <br>    // <br>    // obtain current process token <br>    // <br>    if(!OpenProcessToken( <br>                GetCurrentProcess(), // target current process <br>                TOKEN_QUERY,         // TOKEN_QUERY access <br>                &amp;hToken              // resultant hToken <br>                )) <br>    { <br>        DisplayWinError("OpenProcessToken", GetLastError()); <br>        return RTN_ERROR; <br>    } <br> <br>    // <br>    // obtain user identified by current process' access token <br>    // <br>    bSuccess = GetTokenInformation( <br>                hToken,    // identifies access token <br>                TokenUser, // TokenUser info type <br>                ptgUser,   // retrieved info buffer <br>                cbBuffer,  // size of buffer passed-in <br>                &amp;cbBuffer  // required buffer size <br>                ); <br> <br>    // close token handle.  do this even if error above <br>    CloseHandle(hToken); <br> <br>    if(!bSuccess) { <br>        DisplayWinError("GetTokenInformation", GetLastError()); <br>        return RTN_ERROR; <br>    } <br> <br>    // <br>    // obtain the textual representaion of the Sid <br>    // <br>    if(!GetTextualSid( <br>                ptgUser-&gt;User.Sid, // user binary Sid <br>                szTextualSid,      // buffer for TextualSid <br>                &amp;cchSid            // size/required buffer <br>                )) { <br>        DisplayWinError("GetTextualSid", GetLastError()); <br>        return RTN_ERROR; <br>    } <br> <br>    // display the TextualSid representation <br>    printf("%s\n", szTextualSid); <br> <br>    return RTN_OK; <br>} <br> <br>BOOL <br>GetTextualSid( <br>    PSID pSid,          // binary Sid <br>    LPTSTR TextualSid,  // buffer for Textual representaion of Sid <br>    LPDWORD cchSidSize  // required/provided TextualSid buffersize <br>    ) <br>{ <br>    PSID_IDENTIFIER_AUTHORITY psia; <br>    DWORD dwSubAuthorities; <br>    DWORD dwCounter; <br>    DWORD cchSidCopy; <br> <br>    // <br>    // test if Sid passed in is valid <br>    // <br>    if(!IsValidSid(pSid)) return FALSE; <br> <br>    // obtain SidIdentifierAuthority <br>    psia = GetSidIdentifierAuthority(pSid); <br> <br>    // obtain sidsubauthority count <br>    dwSubAuthorities = *GetSidSubAuthorityCount(pSid); <br> <br>    // <br>    // compute approximate buffer length <br>    // S-SID_REVISION- + identifierauthority- + subauthorities- + NULL <br>    // <br>    cchSidCopy = (15 + 12 + (12 * dwSubAuthorities) + 1) * sizeof(TCHAR); <br> <br>    // <br>    // check provided buffer length. <br>    // If not large enough, indicate proper size and setlasterror <br>    // <br>    if(*cchSidSize &lt; cchSidCopy) { <br>        *cchSidSize = cchSidCopy; <br>        SetLastError(ERROR_INSUFFICIENT_BUFFER); <br>        return FALSE; <br>    } <br> <br>    // <br>    // prepare S-SID_REVISION- <br>    // <br>    cchSidCopy = wsprintf(TextualSid, TEXT("S-%lu-"), SID_REVISION ); <br> <br>    // <br>    // prepare SidIdentifierAuthority <br>    // <br>    if ( (psia-&gt;Value[0] != 0) || (psia-&gt;Value[1] != 0) ) { <br>        cchSidCopy += wsprintf(TextualSid + cchSidCopy, <br>                    TEXT("0x%02hx%02hx%02hx%02hx%02hx%02hx"), <br>                    (USHORT)psia-&gt;Value[0], <br>                    (USHORT)psia-&gt;Value[1], <br>                    (USHORT)psia-&gt;Value[2], <br>                    (USHORT)psia-&gt;Value[3], <br>                    (USHORT)psia-&gt;Value[4], <br>                    (USHORT)psia-&gt;Value[5]); <br>    } else { <br>        cchSidCopy += wsprintf(TextualSid + cchSidCopy, <br>                    TEXT("%lu"), <br>                    (ULONG)(psia-&gt;Value[5]      )   + <br>                    (ULONG)(psia-&gt;Value[4] &lt;&lt;  8)   + <br>                    (ULONG)(psia-&gt;Value[3] &lt;&lt; 16)   + <br>                    (ULONG)(psia-&gt;Value[2] &lt;&lt; 24)   ); <br>    } <br> <br>    // <br>    // loop through SidSubAuthorities <br>    // <br>    for(dwCounter = 0 ; dwCounter &lt; dwSubAuthorities ; dwCounter++) { <br>        cchSidCopy += wsprintf(TextualSid + cchSidCopy, TEXT("-%lu"), <br>                    *GetSidSubAuthority(pSid, dwCounter) ); <br>    } <br> <br>    // <br>    // tell the caller how many chars we provided, not including NULL <br>    // <br>    *cchSidSize = cchSidCopy; <br> <br>    return TRUE; <br>} <br> <br>void <br>DisplayWinError( <br>    LPSTR szAPI,    // pointer to Ansi function name <br>    DWORD dwError   // DWORD WinError <br>    ) <br>{ <br>    LPSTR MessageBuffer; <br>    DWORD dwBufferLength; <br> <br>    // <br>    // TODO get this fprintf out of here! <br>    // <br>    fprintf(stderr,"%s error!\n", szAPI); <br> <br>    if(dwBufferLength=FormatMessageA( <br>            FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>            FORMAT_MESSAGE_FROM_SYSTEM, <br>            NULL, <br>            dwError, <br>            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), <br>            (LPSTR) &amp;MessageBuffer, <br>            0, <br>            NULL <br>            )) <br>    { <br>        DWORD dwBytesWritten; // unused <br> <br>        // <br>        // Output message string on stderr <br>        // <br>        WriteFile( <br>                GetStdHandle(STD_ERROR_HANDLE), <br>                MessageBuffer, <br>                dwBufferLength, <br>                &amp;dwBytesWritten, <br>                NULL <br>                ); <br> <br>        // <br>        // free the buffer allocated by the system <br>        // <br>        LocalFree(MessageBuffer); <br>    } <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVER.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6235"></a>SERVER.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    server.c <br> <br>Abstract: <br> <br>    A command line app that establishes an authenticated connection <br>with a client. <br> <br>Revision History: <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;winsock.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "security.h" <br>#include "comm.h" <br> <br>BOOL AcceptAuthSocket (SOCKET *s); <br>BOOL CloseAuthSocket (SOCKET s); <br>BOOL DoAuthentication (SOCKET s); <br> <br>static PBYTE g_pInBuf = NULL; <br>static PBYTE g_pOutBuf = NULL; <br>static DWORD g_cbMaxMessage = 0; <br>static unsigned short g_usPort = 2000; <br> <br>void main () <br>{ <br>char szUser[80]; <br>DWORD cbUser = 80; <br>SOCKET s; <br> <br>// initialize <br>// <br>if (!InitWinsock ()) <br>exit (EXIT_FAILURE); <br> <br>if (!InitPackage (&amp;g_cbMaxMessage)) <br>exit (EXIT_FAILURE); <br> <br>g_pInBuf = (PBYTE) malloc (g_cbMaxMessage); <br>g_pOutBuf = (PBYTE) malloc (g_cbMaxMessage); <br>if (NULL == g_pInBuf || NULL == g_pOutBuf) <br>exit (EXIT_FAILURE); <br> <br>// Make an authenticated connection with client <br>// <br>if (!AcceptAuthSocket (&amp;s)) <br>exit (EXIT_FAILURE); <br> <br>// impersonate the client <br>// <br>if (!ImpersonateContext (s)) <br>exit (EXIT_FAILURE); <br> <br>// get the user name <br>// <br>if (!GetUserName (szUser, &amp;cbUser)) <br>exit (EXIT_FAILURE); <br> <br>// revert to self <br>// <br>if (!RevertContext (s)) <br>exit (EXIT_FAILURE); <br> <br>// send user name to client <br>// <br>if (!SendBytes (s, szUser, cbUser)) <br>exit (EXIT_FAILURE); <br> <br>// terminate and cleanup <br>// <br>CloseAuthSocket (s); <br> <br>TermPackage (); <br> <br>TermWinsock (); <br> <br>free (g_pInBuf); <br>free (g_pOutBuf); <br> <br>exit (EXIT_SUCCESS); <br>} <br> <br>BOOL AcceptAuthSocket (SOCKET *s) <br>/*++ <br> <br> Routine Description: <br> <br>    Establishes an authenticated socket connection with a client and <br>initializes any needed security package resources. <br> <br> Return Value: <br> <br>    Returns TRUE is successful; otherwise FALSE is returned. <br> <br>--*/ <br>{ <br>SOCKET sockListen; <br>SOCKET sockClient; <br>SOCKADDR_IN sin; <br>int nRes; <br> <br>// create listening socket <br>// <br>sockListen = socket (PF_INET, SOCK_STREAM, 0); <br>if (INVALID_SOCKET == sockListen)  { <br>fprintf (stderr, "Failed to create socket: %u\n", GetLastError ()); <br>return(FALSE); <br>} <br> <br>// bind to local port <br>// <br>sin.sin_family = AF_INET; <br>sin.sin_addr.s_addr = 0; <br>    sin.sin_port = htons(g_usPort); <br>nRes = bind (sockListen, (LPSOCKADDR) &amp;sin, sizeof (sin)); <br>if (SOCKET_ERROR == nRes)  { <br>fprintf (stderr, "bind failed: %u\n", GetLastError ()); <br>return(FALSE); <br>} <br> <br>// listen for client <br>// <br>nRes = listen (sockListen, 1); <br>if (SOCKET_ERROR == nRes)  { <br>fprintf (stderr, "listen failed: %u\n", GetLastError ()); <br>return(FALSE); <br>} <br> <br>// accept client <br>// <br>sockClient = accept (sockListen, NULL, NULL); <br>if (INVALID_SOCKET == sockClient)  { <br>fprintf (stderr, "accept failed: %u\n", GetLastError ()); <br>return(FALSE); <br>} <br> <br>closesocket (sockListen); <br> <br>if (!InitSession (sockClient)) <br>return(FALSE); <br> <br>if (!DoAuthentication (sockClient)) <br>return(FALSE); <br> <br>// return socket <br>// <br>*s = sockClient; <br> <br>return(TRUE); <br>} <br> <br>BOOL CloseAuthSocket (SOCKET s) <br>/*++ <br> <br> Routine Description: <br> <br>    Closes a socket and releases security resources associated with <br>the socket <br> <br> Return Value: <br> <br>    Returns TRUE is successful; otherwise FALSE is returned. <br> <br>--*/ <br>{ <br>TermSession (s); <br>shutdown (s, 2); <br>closesocket (s); <br>return(TRUE); <br>} <br> <br>BOOL DoAuthentication (SOCKET s) <br>/*++ <br> <br> Routine Description: <br> <br>    Manges the authentication conversation with the client via the <br>    supplied socket handle. <br> <br> Return Value: <br> <br>    Returns TRUE is successful; otherwise FALSE is returned. <br> <br>--*/ <br>{ <br>DWORD cbIn, cbOut; <br>BOOL done = FALSE; <br> <br>do { <br>if (!ReceiveMsg (s, g_pInBuf, g_cbMaxMessage, &amp;cbIn)) <br>return(FALSE); <br> <br>cbOut = g_cbMaxMessage; <br>if (!GenServerContext (s, g_pInBuf, cbIn, g_pOutBuf, &amp;cbOut, &amp;done)) <br>return(FALSE); <br> <br>if (!SendMsg (s, g_pOutBuf, cbOut)) <br>return(FALSE); <br>} <br>while(!done); <br> <br>return(TRUE); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

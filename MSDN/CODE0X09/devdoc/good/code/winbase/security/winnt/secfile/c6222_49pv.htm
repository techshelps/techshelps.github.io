<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SECFILE.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6223"></a>SECFILE.C</h2>
<pre><code>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1995 - 1998 Microsoft Corporation.All Rights Reserved. <br>// <br>// COMMENTS: <br>//  All buffers allocated in this sample come from HeapAlloc.  If <br>//  HeapAlloc fails, the PERR macro is not used because HeapAlloc does <br>//  not call SetLastError(). <br>// <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br> <br>// <br>//  Constants and Macros <br>// <br>#define USER_ACCESSGENERIC_ALL <br>#define WORLD_ACCESSGENERIC_READ <br>#define FILENAME"testfile.txt" <br> <br>#define PERR(s) fprintf(stderr, "%s(%d) %s : Error %d\n%s\n", \ <br>    __FILE__, __LINE__, (s), GetLastError(), \ <br>    GetLastErrorText()) <br> <br>// <br>//  Prototypes <br>// <br>PSID GetUserSid(void); <br>PSID CreateWorldSid(void); <br>LPSTR GetLastErrorText(void); <br> <br> <br>// <br>//  FUNCTION: main <br>// <br>//  PURPOSE: Driving routine for this sample. <br>// <br>//  PARAMETERS: <br>//none <br>// <br>//  RETURN VALUE: <br>//none <br>// <br>//  COMMENTS: <br>// <br>void main() <br>{ <br>    PSID psidUser, psidEveryone; <br>    PACL pAcl; <br>    SECURITY_DESCRIPTOR sd; <br>    SECURITY_ATTRIBUTES sa; <br>    BOOL bRes; <br>    HANDLE hFile; <br>    DWORD dwBytesWritten, cbMsg, cbAcl; <br>    char szMsg[] = "Protected data\n"; <br> <br> <br>    // Get the SIDs we'll need for the DACL <br>    // <br>    psidUser = GetUserSid(); <br>    psidEveryone = CreateWorldSid(); <br> <br> <br>    // Allocate space for the ACL <br>//For information about computing the size of the ACL, see <br>//the Win32 SDK reference entry for InitializeAcl() <br>    // <br>    cbAcl = GetLengthSid (psidUser) + GetLengthSid (psidEveryone) + <br>    sizeof(ACL) + (2 * (sizeof(ACCESS_ALLOWED_ACE) - sizeof(DWORD))); <br> <br>    pAcl = (PACL) HeapAlloc(GetProcessHeap(), 0, cbAcl); <br>    if (NULL == pAcl) { <br>fprintf(stderr, "HeapAlloc failed.\n"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br> <br>    bRes = InitializeAcl(pAcl, <br>    cbAcl, <br>    ACL_REVISION); <br>    if (FALSE == bRes) { <br>PERR("InitializeAcl"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Add Aces for User and World <br>    // <br>    bRes = AddAccessAllowedAce(pAcl, <br>    ACL_REVISION, <br>    USER_ACCESS, <br>    psidUser); <br>    if (FALSE == bRes) { <br>PERR("AddAccessAllowedAce"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    bRes = AddAccessAllowedAce(pAcl, <br>    ACL_REVISION, <br>    WORLD_ACCESS, <br>    psidEveryone); <br>    if (FALSE == bRes) { <br>PERR("AddAccessAllowedAce"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Put together the security descriptor <br>    // <br>    bRes = InitializeSecurityDescriptor(&amp;sd, <br>SECURITY_DESCRIPTOR_REVISION); <br>    if (FALSE == bRes) { <br>PERR("InitializeSecurityDescriptor"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    bRes = SetSecurityDescriptorDacl(&amp;sd, <br>TRUE, <br>pAcl, <br>FALSE); <br>    if (FALSE == bRes) { <br>PERR("SetSecurityDescriptorDacl"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Add the security descriptor to the sa structure <br>    // <br>    sa.nLength = sizeof(sa); <br>    sa.lpSecurityDescriptor = &amp;sd; <br>    sa.bInheritHandle = FALSE; <br> <br>    // Generate the file using the security attributes that <br>    // we've assembled <br>    // <br>    hFile = CreateFile(FILENAME, <br>       GENERIC_READ | <br>       GENERIC_WRITE, <br>       0, <br>       &amp;sa, <br>       CREATE_ALWAYS, <br>       FILE_ATTRIBUTE_NORMAL, <br>       NULL); <br>    if (INVALID_HANDLE_VALUE == hFile) { <br>PERR("CreateFile"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    cbMsg = lstrlen(szMsg); <br> <br>    bRes = WriteFile(hFile, <br>     szMsg, <br>     cbMsg, <br>     &amp;dwBytesWritten, <br>     NULL); <br>    if (FALSE == bRes) { <br>PERR("WriteFile"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    if (!CloseHandle(hFile)) { <br>PERR("CloseHandle"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Clean up <br>    // <br>    HeapFree(GetProcessHeap(), 0, pAcl); <br>    HeapFree(GetProcessHeap(), 0, psidUser); <br>    HeapFree(GetProcessHeap(), 0, psidEveryone); <br> <br> <br>    printf ("Created %s with special access.\n", FILENAME); <br> <br>    ExitProcess(EXIT_SUCCESS); <br>} <br> <br> <br>// <br>//  FUNCTION: GetUserSid <br>// <br>//  PURPOSE: Obtains a pointer to the SID for the current user <br>// <br>//  PARAMETERS: <br>//none <br>// <br>//  RETURN VALUE: <br>//Pointer to the SID <br>// <br>//  COMMENTS: <br>//The SID buffer returned by this function is allocated with <br>//HeapAlloc and should be freed with HeapFree. <br>// <br>PSID GetUserSid() <br>{ <br>    HANDLE hToken; <br>    BOOL bRes; <br>    DWORD cbBuffer, cbRequired; <br>    PTOKEN_USER pUserInfo; <br>    PSID pUserSid; <br> <br>    // The User's SID can be obtained from the process token <br>    // <br>    bRes = OpenProcessToken(GetCurrentProcess(), <br>    TOKEN_QUERY, <br>    &amp;hToken); <br>    if (FALSE == bRes) { <br>PERR("OpenProcessToken"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Set buffer size to 0 for first call to determine <br>    // the size of buffer we need. <br>    // <br>    cbBuffer = 0; <br>    bRes = GetTokenInformation(hToken, <br>TokenUser, <br>NULL, <br>cbBuffer, <br>&amp;cbRequired); <br> <br>    if (GetLastError() != ERROR_INSUFFICIENT_BUFFER) { <br>PERR("GetTokenInformation"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Allocate a buffer for our token user data <br>    // <br>    cbBuffer = cbRequired; <br>    pUserInfo = (PTOKEN_USER) HeapAlloc(GetProcessHeap(), 0, cbBuffer); <br>    if (NULL == pUserInfo) { <br>fprintf(stderr, "HeapAlloc failed.\n"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Make the "real" call <br>    // <br>    bRes = GetTokenInformation(hToken, <br>TokenUser, <br>pUserInfo, <br>cbBuffer, <br>&amp;cbRequired); <br>    if (FALSE == bRes) { <br>PERR("GetTokenInformation"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Make another copy of the SID for the return value <br>    // <br>    cbBuffer = GetLengthSid(pUserInfo-&gt;User.Sid); <br> <br>    pUserSid = (PSID) HeapAlloc(GetProcessHeap(), 0, cbBuffer); <br>    if (NULL == pUserSid) { <br>fprintf(stderr, "HeapAlloc failed.\n"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    bRes = CopySid(cbBuffer, pUserSid, pUserInfo-&gt;User.Sid); <br>    if (FALSE == bRes) { <br>PERR("CopySid"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    bRes = HeapFree(GetProcessHeap(), 0, pUserInfo); <br>    if (FALSE == bRes) { <br>fprintf(stderr, "HeapFree failed.\n"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    return pUserSid; <br>} <br> <br> <br>// <br>//  FUNCTION: CreateWorldSid <br>// <br>//  PURPOSE: Creates a SID that represents "Everyone" <br>// <br>//  PARAMETERS: <br>//none <br>// <br>//  RETURN VALUE: <br>//A pointer to the SID. <br>// <br>//  COMMENTS: <br>//The SID buffer returned by this function is allocated with <br>//HeapAlloc and should be freed with HeapFree.  I made a copy <br>//of the SID on the heap so that when the calling code is done <br>//with the SID it can use HeapFree().  This is consistent with <br>//other parts of this sample. <br>// <br>//The SID Authority and RID used here are defined in winnt.h. <br>// <br>PSID CreateWorldSid() <br>{ <br>    SID_IDENTIFIER_AUTHORITY authWorld = SECURITY_WORLD_SID_AUTHORITY; <br>    PSID pSid, psidWorld; <br>    BOOL bRes; <br>    DWORD cbSid; <br> <br>    bRes = AllocateAndInitializeSid(&amp;authWorld, <br>    1, <br>    SECURITY_WORLD_RID, <br>    0, <br>    0, <br>    0, <br>    0, <br>    0, <br>    0, <br>    0, <br>    &amp;psidWorld); <br>    if (FALSE == bRes) { <br>PERR("AllocateAndInitializeSid"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    // Make a copy of the SID using a HeapAlloc'd block for return <br>    // <br>    cbSid = GetLengthSid(psidWorld); <br> <br>    pSid = (PSID) HeapAlloc(GetProcessHeap(), 0, cbSid); <br>    if (NULL == pSid) { <br>fprintf(stderr, "HeapAlloc failed.\n"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    bRes = CopySid(cbSid, pSid, psidWorld); <br>    if (FALSE == bRes) { <br>PERR("CopySid"); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    FreeSid(psidWorld); <br> <br>    return pSid; <br>} <br> <br> <br>// <br>//  FUNCTION: GetLastErrorText <br>// <br>//  PURPOSE: Retrieves the text associated with the last system error. <br>// <br>//  PARAMETERS: <br>//none <br>// <br>//  RETURN VALUE: <br>//A pointer to the error text. <br>// <br>//  COMMENTS: <br>//The contents of the returned buffer will only be valid until <br>//the next call to this routine. <br>// <br>LPSTR GetLastErrorText() <br>{ <br>#define MAX_MSG_SIZE 256 <br> <br>    static char szMsgBuf[MAX_MSG_SIZE]; <br>    DWORD dwError, dwRes; <br> <br>    dwError = GetLastError (); <br> <br>    dwRes = FormatMessage ( <br>FORMAT_MESSAGE_FROM_SYSTEM, <br>                NULL, <br>                dwError, <br>                MAKELANGID (LANG_ENGLISH, SUBLANG_ENGLISH_US), <br>szMsgBuf, <br>MAX_MSG_SIZE, <br>NULL); <br>    if (0 == dwRes) { <br>fprintf(stderr, "FormatMessage failed with %d\n", GetLastError()); <br>ExitProcess(EXIT_FAILURE); <br>    } <br> <br>    return szMsgBuf; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

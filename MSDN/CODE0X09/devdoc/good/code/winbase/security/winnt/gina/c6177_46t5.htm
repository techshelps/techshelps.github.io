<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GINA.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6179"></a>GINA.C</h2>
<pre><code>//+--------------------------------------------------------------------------- <br>// <br>//  Microsoft Windows <br>//  Copyright 1992 - 1998 Microsoft Corporation. <br>// <br>//  File:       gina.c <br>// <br>//  Contents: <br>// <br>//  Classes: <br>// <br>//  Functions: <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//---------------------------------------------------------------------------- <br> <br> <br>#include "gina.h" <br>#pragma hdrstop <br> <br> <br>HINSTANCE                   hDllInstance;   // My instance, for resource loading <br>HANDLE                      hGlobalWlx;     // Handle to tell winlogon who's calling <br>PWLX_DISPATCH_VERSION_1_0   pWlxFuncs;      // Ptr to table of functions <br> <br>#define WINLOGON_APP        TEXT("Winlogon") <br>#define USERINIT            TEXT("Userinit") <br>#define USERINIT_DEFAULT    TEXT("Userinit.exe") <br> <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   DllMain <br>// <br>//  Synopsis:   DLL Entrance point <br>// <br>//  Arguments:  [hInstance]  -- <br>//              [dwReason]   -- <br>//              [lpReserved] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>WINAPI <br>DllMain( <br>    HINSTANCE       hInstance, <br>    DWORD           dwReason, <br>    LPVOID          lpReserved) <br>{ <br>    switch (dwReason) <br>    { <br>        case DLL_PROCESS_ATTACH: <br>            DisableThreadLibraryCalls ( hInstance ); <br>            hDllInstance = hInstance; <br>#if DBG <br>            InitDebugSupport(); <br>#endif <br>        case DLL_PROCESS_DETACH: <br>        default: <br>            return(TRUE); <br>    } <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxNegotiate <br>// <br>//  Synopsis:   Negotiate version of interface with Winlogon <br>// <br>//  Arguments:  [dwWinlogonVersion] -- <br>//              [pdwDllVersion]     -- <br>// <br>//  Algorithm: <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>WINAPI <br>WlxNegotiate( <br>    DWORD                   dwWinlogonVersion, <br>    DWORD                   *pdwDllVersion <br>    ) <br>{ <br>    if (dwWinlogonVersion &lt; WLX_CURRENT_VERSION) <br>    { <br>        DebugLog((DEB_ERROR, "Unknown version: %d\n", dwWinlogonVersion)); <br>        return(FALSE); <br>    } <br> <br>    *pdwDllVersion = WLX_CURRENT_VERSION; <br> <br>    DebugLog((DEB_TRACE, "Negotiate:  successful!\n")); <br> <br>    return(TRUE); <br> <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxInitialize <br>// <br>//  Synopsis:   Initialize entrypoint from winlogon <br>// <br>//  Arguments:  [lpWinsta]           -- <br>//              [hWlx]               -- <br>//              [pvReserved]         -- <br>//              [pWinlogonFunctions] -- <br>//              [pWlxContext]        -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>WINAPI <br>WlxInitialize( <br>    LPWSTR                  lpWinsta, <br>    HANDLE                  hWlx, <br>    PVOID                   pvReserved, <br>    PVOID                   pWinlogonFunctions, <br>    PVOID                   *pWlxContext <br>    ) <br>{ <br>    PGlobals  pGlobals; <br> <br>    pWlxFuncs = (PWLX_DISPATCH_VERSION_1_0) pWinlogonFunctions; <br> <br>    hGlobalWlx = hWlx; <br> <br>    pGlobals = LocalAlloc(LMEM_FIXED | LMEM_ZEROINIT, sizeof(Globals)); <br> <br>    *pWlxContext = (PVOID) pGlobals; <br> <br>    // <br>    // Read from registry... <br>    // <br> <br>    pGlobals-&gt;fAllowNewUser = TRUE; <br> <br> <br>    pWlxFuncs-&gt;WlxUseCtrlAltDel(hWlx); <br> <br>    InitCommonControls(); <br> <br>    return(TRUE); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxDisplaySASNotice <br>// <br>//  Synopsis:   Where we display the welcome, we're waiting dialog box <br>// <br>//  Arguments:  [pContext] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>VOID <br>WINAPI <br>WlxDisplaySASNotice(PVOID   pContext) <br>{ <br>    int Result; <br> <br>    Result = pWlxFuncs-&gt;WlxDialogBoxParam(  hGlobalWlx, <br>                                            hDllInstance, <br>                                            (LPTSTR) MAKEINTRESOURCE(IDD_WELCOME_DLG), <br>                                            NULL, <br>                                            WelcomeDlgProc, <br>                                            0 ); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxLoggedOutSAS <br>// <br>//  Synopsis:   Called when no one logged on... <br>// <br>//  Arguments:  [pWlxContext]       -- <br>//              [dwSasType]         -- <br>//              [pAuthenticationId] -- <br>//              [pLogonSid]         -- <br>//              [pdwOptions]        -- <br>//              [phToken]           -- <br>//              [pMprNotifyInfo]    -- <br>//              [pProfile]          -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>int <br>WINAPI <br>WlxLoggedOutSAS( <br>    PVOID                   pWlxContext, <br>    DWORD                   dwSasType, <br>    PLUID                   pAuthenticationId, <br>    PSID                    pLogonSid, <br>    PDWORD                  pdwOptions, <br>    PHANDLE                 phToken, <br>    PWLX_MPR_NOTIFY_INFO    pMprNotifyInfo, <br>    PVOID *                 pProfile <br>    ) <br>{ <br>    int         result; <br>    // PWLX_PROFILE_V1_0   pWlxProfile; <br>    // PMiniAccount    pAccount; <br>    PGlobals        pGlobals; <br> <br>    pGlobals = (PGlobals) pWlxContext; <br> <br>    result = pWlxFuncs-&gt;WlxDialogBoxParam(  hGlobalWlx, <br>                                            hDllInstance, <br>                                            (LPTSTR) MAKEINTRESOURCE(IDD_LOGON_DIALOG), <br>                                            NULL, <br>                                            LogonDlgProc, <br>                                            (LPARAM) pGlobals ); <br> <br>    if (result == WLX_SAS_ACTION_LOGON) <br>    { <br>        result = AttemptLogon(pGlobals, pGlobals-&gt;pAccount, <br>                                pLogonSid, pAuthenticationId); <br> <br>        if (result == WLX_SAS_ACTION_LOGON) <br>        { <br>            *pdwOptions = 0; <br>            *phToken = pGlobals-&gt;hUserToken; <br>            *pProfile = NULL; <br> <br>            pMprNotifyInfo-&gt;pszUserName = DupString(pGlobals-&gt;pAccount-&gt;pszUsername); <br>            pMprNotifyInfo-&gt;pszDomain = DupString(pGlobals-&gt;pAccount-&gt;pszDomain); <br>            pMprNotifyInfo-&gt;pszPassword = DupString(pGlobals-&gt;pAccount-&gt;pszPassword); <br>            pMprNotifyInfo-&gt;pszOldPassword = NULL; <br> <br>        } <br>    } <br>    return(result); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxActivateUserShell <br>// <br>//  Synopsis:   Activates progman or whatever for the user <br>// <br>//  Arguments:  [pWlxContext]       -- <br>//              [pszDesktop]        -- <br>//              [pszMprLogonScript] -- <br>//              [pEnvironment]      -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>WINAPI <br>WlxActivateUserShell( <br>    PVOID                   pWlxContext, <br>    PWSTR                   pszDesktop, <br>    PWSTR                   pszMprLogonScript, <br>    PVOID                   pEnvironment <br>    ) <br>{ <br>    // BOOL        bExec; <br>    WCHAR       szText[MAX_PATH]; <br>    PWSTR       pszScan; <br>    STARTUPINFO si; <br>    PROCESS_INFORMATION pi; <br>    PGlobals    pGlobals; <br>    DWORD       StartCount; <br> <br>    pGlobals = (PGlobals) pWlxContext; <br> <br>    GetProfileString(WINLOGON_APP, USERINIT, USERINIT_DEFAULT, szText, MAX_PATH); <br> <br>    StartCount = 0; <br> <br>    pszScan = wcstok(szText, TEXT(",")); <br>    while (pszScan) <br>    { <br>        ZeroMemory(&amp;si, sizeof(si)); <br>        si.cb = sizeof(STARTUPINFO); <br>        si.lpTitle = pszScan; <br>        si.dwX = si.dwY = si.dwXSize = si.dwYSize = 0L; <br>        si.dwFlags = 0; <br>        si.wShowWindow = SW_SHOW;   // at least let the guy see it <br>        si.lpReserved2 = NULL; <br>        si.cbReserved2 = 0; <br>        si.lpDesktop = pszDesktop; <br> <br>        DebugLog((DEB_TRACE, "Starting '%ws' as user\n", pszScan)); <br> <br>        ImpersonateLoggedOnUser(pGlobals-&gt;hUserToken); <br> <br>        if (CreateProcessAsUser(pGlobals-&gt;hUserToken,   // Token to run as <br>                            NULL,                   // App name <br>                            pszScan,                // Command Line <br>                            NULL,                   // Process SD <br>                            NULL,                   // Thread SD <br>                            FALSE,                  // No inherit <br>                            CREATE_UNICODE_ENVIRONMENT, <br>                            pEnvironment, <br>                            NULL, <br>                            &amp;si, <br>                            &amp;pi)) <br>        { <br>            StartCount++; <br>            CloseHandle(pi.hProcess); <br>            CloseHandle(pi.hThread); <br>        } <br> <br>        RevertToSelf(); <br> <br>        pszScan = wcstok(NULL, TEXT(",")); <br>    } <br> <br>    return(StartCount &gt; 0); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxLoggedOnSAS <br>// <br>//  Synopsis:   Called when someone hits CAD when we're logged on <br>// <br>//  Arguments:  [pWlxContext] -- <br>//              [dwSasType]   -- <br>//              [pReserved]   -- <br>// <br>//  Algorithm: <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>int <br>WINAPI <br>WlxLoggedOnSAS( <br>    PVOID                   pWlxContext, <br>    DWORD                   dwSasType, <br>    PVOID                   pReserved <br>    ) <br>{ <br>    int result; <br> <br>    result = pWlxFuncs-&gt;WlxDialogBoxParam(  hGlobalWlx, <br>                                            hDllInstance, <br>                                            (LPTSTR) MAKEINTRESOURCE(IDD_OPTIONS_DIALOG), <br>                                            NULL, <br>                                            OptionsDlgProc, <br>                                            (LPARAM) pWlxContext ); <br> <br> <br> <br>    return(result); <br> <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxIsLockOk <br>// <br>//  Synopsis:   Called to make sure that locking is ok <br>// <br>//  Arguments:  [pWlxContext] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>WINAPI <br>WlxIsLockOk( <br>    PVOID                   pWlxContext <br>    ) <br>{ <br>    return(TRUE); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxDisplayLockedNotice <br>// <br>//  Synopsis:   Displays a notice while the workstation is locked <br>// <br>//  Arguments:  [pWlxContext] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>VOID <br>WINAPI <br>WlxDisplayLockedNotice(PVOID   pWlxContext) <br>{ <br>    int Result; <br> <br>    Result = pWlxFuncs-&gt;WlxDialogBoxParam(  hGlobalWlx, <br>                                            hDllInstance, <br>                                            (LPTSTR) MAKEINTRESOURCE(IDD_WKSTA_LOCKED), <br>                                            NULL, <br>                                            WelcomeDlgProc, <br>                                            0 ); <br> <br>    return; <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxWkstaLockedSAS <br>// <br>//  Synopsis:   Responds during an unlock attempt <br>// <br>//  Arguments:  [pWlxContext] -- <br>//              [dwSasType]   -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>int <br>WINAPI <br>WlxWkstaLockedSAS( <br>    PVOID                   pWlxContext, <br>    DWORD                   dwSasType <br>    ) <br>{ <br>    return(WLX_SAS_ACTION_UNLOCK_WKSTA); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxIsLogoffOk <br>// <br>//  Synopsis:   Called to make sure that logoff is ok <br>// <br>//  Arguments:  [pWlxContext] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>WINAPI <br>WlxIsLogoffOk( <br>    PVOID                   pWlxContext <br>    ) <br>{ <br>    return(TRUE); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxLogoff <br>// <br>//  Synopsis:   Called when the user logs off <br>// <br>//  Arguments:  [pWlxContext] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>VOID <br>WINAPI <br>WlxLogoff( <br>    PVOID                   pWlxContext <br>    ) <br>{ <br>    PGlobals    pGlobals; <br> <br>    pGlobals = (PGlobals) pWlxContext; <br> <br>    // <br>    // Winlogon has closed it for us.. <br>    // <br> <br>    pGlobals-&gt;hUserToken = NULL; <br>    pGlobals-&gt;pAccount = NULL; <br> <br>    return; <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   WlxShutdown <br>// <br>//  Synopsis:   Called before shutdown so that we can unload/clean up. <br>// <br>//  Arguments:  [pWlxContext]  -- <br>//              [ShutdownType] -- <br>// <br>//  History:    4-20-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>VOID <br>WINAPI <br>WlxShutdown( <br>    PVOID                   pWlxContext, <br>    DWORD                   ShutdownType <br>    ) <br>{ <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

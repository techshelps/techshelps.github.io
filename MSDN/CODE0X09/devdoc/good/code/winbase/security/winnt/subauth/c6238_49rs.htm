<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6238"></a>README.TXT</h2>
<pre><code>Portable Systems Group <br>MSV1_0 SubAuthentication DLL Design Note <br>Revision 1.3, March 7, 1996 <br> <br>1. INTRODUCTION <br>2. INTERFACE TO A SUBAUTHENTICATION DLL <br>3. REGISTERING A SUBAUTHENTICATION DLL <br>4. REQUESTING A SUBAUTHENTICATION DLL <br> <br>1. Introduction <br> <br>This document describes  the purpose of and the interface to a <br>SubAuthentication DLL for the MSV1_0 authentication package. <br> <br>The MSV1_0 authentication package is the standard LSA authentication <br>package for Windows NT.  It provides or supports: <br> <br>  Authentication of users in the SAM database. <br>  Pass-Thru authentication of users in trusted domains. <br> <br>Windows NT allows SubAuthentication DLLs to be used in conjunction <br>with the MSV1_0 authentication package.  A SubAuthentication DLL <br>allows the authentication and validation criteria stored in SAM to be <br>replaced for particular subsystems that use the MSV1_0 authentication <br>package.  For instance, a particular server might supply a SubAuthentication <br>DLL that validates a user s password via a different algorithm, uses a <br>different granularity of logon hours, and/or specifies workstation restrictions <br>in a different format. <br> <br>All of this can be accomplished using SubAuthentication DLLs without <br>sacrificing use of the SAM database (and losing its administration tools) or <br>losing pass-thru authentication. <br> <br>2. Interface to a SubAuthentication DLL <br> <br>There are two interfaces that may be supported by SubAuthentication DLLs. <br>The first is Msv1_0SubAuthenticationRoutine, which is called for <br>SubAuthentication packages other than package zero. These <br>SubAuthentication DLLs are called after the correct Domain Controller has <br>been located and the user to be authenticated has been looked up in the <br>SAM database.  No attributes of the user will be validated by the MSV1_0 <br>authentication package.  That is the responsibility of the SubAuthentication <br>DLL.  The SubAuthentication DLL must contain a procedure named <br>Msv1_0SubAuthenticationRoutine with the following interface: <br> <br>NTSTATUS <br>NTAPI <br>Msv1_0SubAuthenticationRoutine( <br>    IN NETLOGON_LOGON_INFO_CLASS LogonLevel, <br>    IN PVOID LogonInformation, <br>    IN ULONG Flags, <br>    IN PUSER_ALL_INFORMATION UserAll, <br>    OUT PULONG WhichFields, <br>    OUT PULONG UserFlags, <br>    OUT PBOOLEAN Authoritative, <br>    OUT PLARGE_INTEGER LogoffTime, <br>    OUT PLARGE_INTEGER KickoffTime <br>); <br> <br>The second SubAuthentication interface is Msv1_0SubAuthenticationFilter, <br>which is only called for SubAuthentication DLL zero.  In this case, after the <br>MSV1_0 authentication package has validated a logon (including network, <br>interactive, service, and batch logons) it will call the filter routine to do <br>additional validation. The filter routine may return success, indicating that <br>the logon should proceed, or failure, indicating that the the additional <br>validation failed.  In addition, the filter routine may modify the <br>UserParameters field in the USER_ALL_INFORMATION structure and set <br>the USER_ALL_PARAMETRS flag in the WhichFields parameter to <br>indicate that the change should be written to the user object. <br> <br>NTSTATUS <br>NTAPI <br>Msv1_0SubAuthenticationFilter( <br>    IN NETLOGON_LOGON_INFO_CLASS LogonLevel, <br>    IN PVOID LogonInformation, <br>    IN ULONG Flags, <br>    IN PUSER_ALL_INFORMATION UserAll, <br>    OUT PULONG WhichFields, <br>    OUT PULONG UserFlags, <br>    OUT PBOOLEAN Authoritative, <br>    OUT PLARGE_INTEGER LogoffTime, <br>    OUT PLARGE_INTEGER KickoffTime <br>); <br> <br> <br>3. Registering a SubAuthentication DLL <br>Each SubAuthentication DLL is assigned a DLL number in the range 0 <br>through 255.  The DLL number is used to associate the subsystem calling <br>LsaLogonUser with the appropriate SubAuthentication DLL. <br> <br>DLL number 0 is reserved to indicate that the <br>SubAuthentication Filter is to be used. It allows the package to <br>do additional password or logon validation on top of what <br>MSV1_0 normally provides. DLL numbers 1 through 127 are reserved for Microsoft. <br>DLL numbers 128 through 255 are available to ISVs.  ISVs can be assigned a DLL <br>number by Microsoft by sending email to subauth@microsoft.com.  Registering <br>your subauthentication pacakge with Microsoft prevents collision of package IDs <br>when multiple subauthentication packages are installed on a system. <br> <br>Microsoft will not assign the value of 255 for any subauthentication DLL. <br>If you are developing a subauthentication DLL for use only within your company <br>or facility, you can use the subauthentication ID number 255.  In this case, <br>it is not necessary to register your subauthentication package with <br>Microsoft. <br> <br>Once the ISV has picked a DLL number, the DLL can be registered <br>under the registry key <br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\MSV1_0. <br>If the key doesn't exist, the ISV's installation procedure <br>should create it.  Under that key, the ISV should create a value named <br>AuthN where N is the DLL number (e.g., Auth128). <br> <br>The value should be a REG_SZ and specify the name of the DLL <br>which must be in the default DLL load path.  For instance, <br> <br>  Auth128=SubAuth <br> <br>The MSV1_0 authentication package will load the named DLL <br>the first time the SubAuthentication DLL is requested. <br> <br>4. Requesting a SubAuthentication DLL <br> <br>A subsystem can request a particular SubAuthentication DLL when calling <br>LsaLogonUser.  The subsystem calls the MSV1_0 authentication package <br>(as described in the LSAAUTH.HLP file in the Windows NT DDK) passing <br>in the MSV1_0_LM20_LOGON structure. <br> <br>typedef struct _MSV1_0_LM20_LOGON { <br>    MSV1_0_LOGON_SUBMIT_TYPE MessageType; <br>    UNICODE_STRING LogonDomainName; <br>    UNICODE_STRING UserName; <br>    UNICODE_STRING Workstation; <br>    UCHAR ChallengeToClient[MSV1_0_CHALLENGE_LENGTH]; <br>    STRING CaseSensitiveChallengeResponse; <br>    STRING CaseInsensitiveChallengeResponse; <br>    ULONG ParameterControl; <br>} MSV1_0_LM20_LOGON, * PMSV1_0_LM20_LOGON; <br> <br>The MessageType field must be set to MsV1_0NetworkLogon (Interactive <br>logons may not be authenticated by a SubAuthentication DLL). <br> <br>The LogonDomainName field should be set to the domain name of the <br>domain containing the SAM database to be used for authentication.  The <br>MSV1_0 authentication package and the Netlogon Service will pass thru the <br>authentication request to that domain.  The SubAuthentication DLL will be <br>called on a domain controller in the domain. <br> <br>The UserName field must specify the name of a user in the SAM database <br>on that domain. <br> <br>The Workstation, ChallengeToClient, CaseSensitiveChallengeResponse, <br>and CaseInsensitiveChallengeResponse fields may be set to any <br>SubAuthentication DLL specific values.  They will be ignored by the <br>MSV1_0 authentication package. <br> <br>The ParameterControl field should be set as follows.  Set the various control <br>flags as appropriate.  Set the most significant byte of Parameter control to <br>the DLL number of the SubAuthentication DLL to use. <br> <br>#define MSV1_0_CLEARTEXT_PASSWORD_ALLOWED    0x02 <br>#define MSV1_0_UPDATE_LOGON_STATISTICS       0x04 <br>#define MSV1_0_RETURN_USER_PARAMETERS        0x08 <br>#define MSV1_0_DONT_TRY_GUEST_ACCOUNT        0x10 <br> <br>// <br>// The high order byte is a value indicating the SubAuthentication DLL. <br>//  Zero indicates no SubAuthentication DLL. <br>// <br>#define MSV1_0_SUBAUTHENTICATION_DLL             0xFF000000 <br>#define MSV1_0_SUBAUTHENTICATION_DLL_SHIFT       24 </code></pre>
<p>&nbsp;</p></body>
</HTML>

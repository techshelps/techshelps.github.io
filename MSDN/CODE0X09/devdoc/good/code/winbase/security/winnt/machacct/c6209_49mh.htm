<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MACHACCT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6209"></a>MACHACCT.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    machacct.c <br> <br>Abstract: <br> <br>    The following sample illustrates how to create a machine account on the <br>    specified domain. <br> <br>    Machine account types are defined by the following flags: <br> <br>    UF_SERVER_TRUST_ACCOUNT (Backup domain controller) <br>    UF_WORKSTATION_TRUST_ACCOUNT (Workstation and server) <br>    UF_INTERDOMAIN_TRUST_ACCOUNT (Interdomain trust account) <br> <br>    This sample attempts to create a workstation machine account, of type <br>    UF_WORKSTATION_TRUST_ACCOUNT.  This account type used for workstations <br>    and non-DC servers which are domain members. <br> <br>    If the computer account creation fails with GetLastError == <br>    ERROR_ACCESS_DENIED, the sample attempts to enable the <br>    SeMachineAccountPrivilege for the caller. If the privilege is enabled <br>    successfully, the computer account add operation is re-tried. <br> <br>    Deleting machine accounts can be accomplished using the NetUserDel() <br>    Windows NT Lan Manager API call. <br> <br>    Account update operations against a domain must be performed against <br>    the primary domain controller for the specified domain.  This sample <br>    uses the NetGetDCName Windows NT Lan Manager API call to determine <br>    the computer name of the primary domain controller. <br> <br>    Commandline parameter argv[1] indicates the name of the account to <br>    create, which is typically the name of the machine. <br> <br>    Commandline parameter argv[2] is optional and indicates the target domain. <br>    If this commandline argument is omitted, the machine account is created <br>    on the local domain.  It is recommended that you always supply a domain <br>    name in this sample, as this insures that the update occurs at the primary <br>    domain controller. <br> <br>    The following commandline creates a machine account named WINBASE in <br>    the domain named NTWKSTA <br> <br>    machacct.exe WINBASE NTWKSTA <br> <br>Author: <br> <br>    Scott Field (sfield)    16-Apr-96 <br>        Minor cleanup <br> <br>    Scott Field (sfield)    19-Sep-95 <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;lm.h&gt; <br> <br>BOOL <br>AddMachineAccount( <br>    LPWSTR wTargetComputer, // specifies where to add account <br>    LPWSTR MachineAccount,  // name of account <br>    DWORD AccountType       // account type <br>    ); <br> <br>BOOL <br>SetCurrentPrivilege( <br>    LPCTSTR Privilege,      // Privilege to enable/disable <br>    BOOL bEnablePrivilege   // to enable or disable privilege <br>    ); <br> <br>void <br>DisplayError( <br>    LPSTR szAPI,    // pointer to failed API name <br>    DWORD dwLastError <br>    ); <br> <br>#define RTN_OK 0 <br>#define RTN_USAGE 1 <br>#define RTN_ERROR 13 <br> <br>// <br>// Unicode entry point and argv <br>// <br> <br>int <br>__cdecl <br>wmain( <br>    int argc, <br>    wchar_t *argv[] <br>    ) <br>{ <br>    LPWSTR wMachineAccount; <br>    LPWSTR wPrimaryDC; <br>    LPTSTR MachineAccountPrivilege = SE_MACHINE_ACCOUNT_NAME; <br>    DWORD dwTrustAccountType = UF_WORKSTATION_TRUST_ACCOUNT; <br>    NET_API_STATUS nas; <br>    BOOL bSuccess; <br> <br>    if(argc &lt; 2) { <br>        fprintf(stderr, "Usage: %ls &lt;machineaccountname&gt; [domain]\n", <br>            argv[0]); <br>        return RTN_USAGE; <br>    } <br> <br>    wMachineAccount = argv[1]; <br> <br>    // <br>    // if a domain name was specified, fetch the computer name of the <br>    // primary domain controller <br>    // <br>    if(argc == 3) { <br> <br>        nas = NetGetDCName(NULL, argv[2], (LPBYTE *)&amp;wPrimaryDC); <br> <br>        if(nas != NERR_Success) { <br>            DisplayError("NetGetDCName", nas); <br>            return RTN_ERROR; <br>        } <br>    } else { <br>        // <br>        // default will operate on local machine.  Non-NULL wPrimaryDC will <br>        // cause buffer to be freed <br>        // <br>        wPrimaryDC = NULL; <br>    } <br> <br>    bSuccess = AddMachineAccount( <br>        wPrimaryDC,         // primary DC computer name <br>        wMachineAccount,    // computer account name <br>        dwTrustAccountType  // computer account type <br>        ); <br> <br>    if(!bSuccess &amp;&amp; GetLastError() == ERROR_ACCESS_DENIED ) { <br> <br>        // <br>        // try to enable the SeMachineAccountPrivilege <br>        // <br>        if(SetCurrentPrivilege( MachineAccountPrivilege, TRUE )) { <br> <br>            // <br>            // enabled the privilege.  retry the add operation <br>            // <br>            bSuccess = AddMachineAccount( <br>                wPrimaryDC, <br>                wMachineAccount, <br>                dwTrustAccountType <br>                ); <br> <br>            // <br>            // disable the privilege <br>            // <br>            SetCurrentPrivilege( MachineAccountPrivilege, FALSE ); <br>        } <br>    } <br> <br>    // <br>    // free the buffer allocated for the PDC computer name <br>    // <br>    if(wPrimaryDC) NetApiBufferFree(wPrimaryDC); <br> <br>    if(!bSuccess) { <br>        DisplayError("AddMachineAccount", GetLastError()); <br>        return RTN_ERROR; <br>    } <br> <br>    return RTN_OK; <br>} <br> <br>BOOL <br>AddMachineAccount( <br>    LPWSTR wTargetComputer, <br>    LPWSTR MachineAccount, <br>    DWORD AccountType <br>    ) <br>{ <br>    WCHAR wAccount[MAX_COMPUTERNAME_LENGTH + 2]; <br>    LPWSTR wPassword; <br>    USER_INFO_1 ui; <br>    DWORD cchAccount; <br>    DWORD cchLength; <br>    NET_API_STATUS nas; <br> <br>    // <br>    // ensure a valid computer account type was passed <br>    // TODO SetLastError <br>    // <br>    if (AccountType != UF_WORKSTATION_TRUST_ACCOUNT &amp;&amp; <br>        AccountType != UF_SERVER_TRUST_ACCOUNT &amp;&amp; <br>        AccountType != UF_INTERDOMAIN_TRUST_ACCOUNT <br>        ) { <br>        SetLastError(ERROR_INVALID_PARAMETER); <br>        return FALSE; <br>    } <br> <br>    // <br>    // obtain number of chars in computer account name <br>    // <br>    cchLength = cchAccount = lstrlenW(MachineAccount); <br> <br>    // <br>    // ensure computer name doesn't exceed maximum length <br>    // <br>    if(cchLength &gt; MAX_COMPUTERNAME_LENGTH) { <br>        SetLastError(ERROR_INVALID_ACCOUNT_NAME); <br>        return FALSE; <br>    } <br> <br>    // <br>    // password is the computer account name converted to lowercase <br>    // convert the passed MachineAccount in place <br>    // <br>    wPassword = MachineAccount; <br> <br>    // <br>    // copy MachineAccount to the wAccount buffer allocated while <br>    // converting computer account name to uppercase. <br>    // convert password (inplace) to lowercase <br>    // <br>    while(cchAccount--) { <br>        wAccount[cchAccount] = towupper( MachineAccount[cchAccount] ); <br>        wPassword[cchAccount] = towlower( wPassword[cchAccount] ); <br>    } <br> <br>    // <br>    // computer account names have a trailing Unicode '$' <br>    // <br>    wAccount[cchLength] = L'$'; <br>    wAccount[cchLength + 1] = L'\0'; // terminate the string <br> <br>    // <br>    // if the password is greater than the max allowed, truncate <br>    // <br>    if(cchLength &gt; LM20_PWLEN) wPassword[LM20_PWLEN] = L'\0'; <br> <br>    // <br>    // initialize USER_INFO_x structure <br>    // <br>    ZeroMemory(&amp;ui, sizeof(ui)); <br> <br>    ui.usri1_name = wAccount; <br>    ui.usri1_password = wPassword; <br> <br>    ui.usri1_flags = AccountType | UF_SCRIPT; <br>    ui.usri1_priv = USER_PRIV_USER; <br> <br>    nas = NetUserAdd( <br>                wTargetComputer,    // target computer name <br>                1,                  // info level <br>                (LPBYTE) &amp;ui,       // buffer <br>                NULL <br>                ); <br> <br>    // <br>    // indicate whether it was successful <br>    // <br>    if(nas == NERR_Success) { <br>        return TRUE; <br>    } <br>    else { <br>        SetLastError(nas); <br>        return FALSE; <br>    } <br>} <br> <br>BOOL <br>SetCurrentPrivilege( <br>    LPCTSTR Privilege,      // Privilege to enable/disable <br>    BOOL bEnablePrivilege   // to enable or disable privilege <br>    ) <br>{ <br>    HANDLE hToken; <br>    TOKEN_PRIVILEGES tp; <br>    LUID luid; <br>    TOKEN_PRIVILEGES tpPrevious; <br>    DWORD cbPrevious=sizeof(TOKEN_PRIVILEGES); <br>    BOOL bSuccess=FALSE; <br> <br>    if(!LookupPrivilegeValue(NULL, Privilege, &amp;luid)) return FALSE; <br> <br>    if(!OpenProcessToken( <br>            GetCurrentProcess(), <br>            TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, <br>            &amp;hToken <br>            )) return FALSE; <br> <br>    // <br>    // first pass.  get current privilege setting <br>    // <br>    tp.PrivilegeCount           = 1; <br>    tp.Privileges[0].Luid       = luid; <br>    tp.Privileges[0].Attributes = 0; <br> <br>    AdjustTokenPrivileges( <br>            hToken, <br>            FALSE, <br>            &amp;tp, <br>            sizeof(TOKEN_PRIVILEGES), <br>            &amp;tpPrevious, <br>            &amp;cbPrevious <br>            ); <br> <br>    if(GetLastError() == ERROR_SUCCESS) { <br>        // <br>        // second pass.  set privilege based on previous setting <br>        // <br>        tpPrevious.PrivilegeCount     = 1; <br>        tpPrevious.Privileges[0].Luid = luid; <br> <br>        if(bEnablePrivilege) { <br>            tpPrevious.Privileges[0].Attributes |= (SE_PRIVILEGE_ENABLED); <br>        } <br>        else { <br>            tpPrevious.Privileges[0].Attributes ^= (SE_PRIVILEGE_ENABLED &amp; <br>                tpPrevious.Privileges[0].Attributes); <br>        } <br> <br>        AdjustTokenPrivileges( <br>                hToken, <br>                FALSE, <br>                &amp;tpPrevious, <br>                cbPrevious, <br>                NULL, <br>                NULL <br>                ); <br> <br>        if(GetLastError() == ERROR_SUCCESS) bSuccess=TRUE; <br>    } <br> <br>    CloseHandle(hToken); <br> <br>    return bSuccess; <br>} <br> <br>void <br>DisplayError( <br>    LPSTR szAPI,    // pointer to failed API name <br>    DWORD dwLastError <br>    ) <br>{ <br>    HMODULE hModule = NULL; <br>    LPSTR MessageBuffer; <br>    DWORD dwBufferLength; <br> <br>    fprintf(stderr,"%s error! (rc=%lu)\n", szAPI, dwLastError); <br> <br>    if(dwLastError &gt;= NERR_BASE &amp;&amp; dwLastError &lt;= MAX_NERR) { <br>        hModule = LoadLibraryEx( <br>            TEXT("netmsg.dll"), <br>            NULL, <br>            LOAD_LIBRARY_AS_DATAFILE <br>            ); <br>    } <br> <br>    if(dwBufferLength=FormatMessageA( <br>        FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>        FORMAT_MESSAGE_IGNORE_INSERTS | <br>        FORMAT_MESSAGE_FROM_SYSTEM | <br>        ((hModule != NULL) ? FORMAT_MESSAGE_FROM_HMODULE : 0), <br>        hModule, // module to get message from <br>        dwLastError, <br>        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language <br>        (LPSTR) &amp;MessageBuffer, <br>        0, <br>        NULL <br>        )) <br>    { <br>        DWORD dwBytesWritten; <br> <br>        // <br>        // Output message string on stderr <br>        // <br>        WriteFile( <br>            GetStdHandle(STD_ERROR_HANDLE), <br>            MessageBuffer, <br>            dwBufferLength, <br>            &amp;dwBytesWritten, <br>            NULL <br>            ); <br> <br>        // <br>        // free the buffer allocated by the system <br>        // <br>        LocalFree(MessageBuffer); <br>    } <br> <br>    if(hModule != NULL) <br>        FreeLibrary(hModule); <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SD_FLPPY.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6221"></a>SD_FLPPY.C</h2>
<pre><code>/****************************************************************************\ <br>* <br>*               Microsoft Developer Support <br>*               Copyright 1992 - 1998 Microsoft Corporation <br>* <br>* MODULE:       sd_flppy.c <br>* <br>*               There is no way to put a DACL on the floppy drives or on the <br>*                 COM ports with REGEDT32, or using the Control Panel or other <br>*                 part of the user interface.  And there is no way to use the <br>*                 Win32 api to put a DACL on the floppy drives or on the COM <br>*                 ports that survives reboots <br>* <br>*               sd_flppy.c, however, does put DACLs on the floppy drives or on <br>*                 the COM ports that survive logoff/logon, that is, these <br>*                 DACLs are on the floppy drives or on the COM ports until the <br>*                 next reboot <br>* <br>*               A version of this sample program can be installed as a <br>*                 service, so that each time the machine boots up the DACLs <br>*                 are automatically re-applied <br>* <br>* PURPOSE:      Show sample code that applies DACLs to floppy drives and COM <br>*                 ports <br>* <br>*               There are possibly as many desired user interfaces to this <br>*                 sort of functionality as there are people thinking about <br>*                 this, so it is not a purpose of this sample (or the Win32 <br>*                 service variation of it) to present an incredibly cool user <br>*                 interface to how the DACLs get applied.  A very simplistic <br>*                 approach is taken to the user interface.  Anyone who desires <br>*                 that more complicated DACLs are applied, or desires other <br>*                 variations in the user interface hopefully will benefit by <br>*                 being able to use this sample code as a starting point for <br>*                 their DACL-applying app <br>* <br>*               This sample is not a supported utility <br>* <br>* TO RUN:       Type sd_flppy to lock the \\.\A: and \\.\B devices <br>* <br>*               Putting sd_flppy in a Startup group or logon script could work <br>*                 for some people <br>* <br>\****************************************************************************/ <br> <br>/****************************************************************************\ <br>*  INCLUDES, DEFINES <br>\****************************************************************************/ <br>#define STRICT <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#define PERR(api) printf("\n%s: Error %d from %s on line %d",  \ <br>    __FILE__, GetLastError(), api, __LINE__); <br>#define PMSG(msg) printf("\n%s line %d: %s",  \ <br>    __FILE__, __LINE__, msg); <br> <br>/****************************************************************************\ <br>* GLOBAL VARIABLES AND TYPEDEFS <br>\****************************************************************************/ <br> <br> <br>/****************************************************************************\ <br>* FUNCTION PROTOTYPES <br>\****************************************************************************/ <br> <br>BOOL WriteSD_ToA_File(PSECURITY_DESCRIPTOR psdAbsoluteSD, LPTSTR lpszFileName); <br>VOID DisplayHelp(VOID); <br>  <br>UINT main(UINT argc, char *argv[]) <br>{ <br> <br>  #define                               SZ_SD_BUF   100 // DWORD aligned <br>  #define                               SZ_SID_BUF   80 // DWORD aligned <br>  #define                               SZ_ACL_BUF  160 // DWORD aligned <br> <br>  DWORD                ucAbsSDBuf      [SZ_SD_BUF / sizeof(DWORD) ] ; <br>  DWORD                ucSIDBuf        [SZ_SID_BUF / sizeof(DWORD) ] ; <br>  DWORD                ucACLBuf        [SZ_ACL_BUF / sizeof(DWORD) ] ; <br> <br>  DWORD                dwSID          = SZ_SID_BUF; <br>  DWORD                dwDACL         = SZ_ACL_BUF; <br> <br>  PSECURITY_DESCRIPTOR psdAbsoluteSD      = (PSECURITY_DESCRIPTOR)&amp;ucAbsSDBuf; <br>  PSID                 psidAdministrators = (PSID)&amp;ucSIDBuf; <br>  PACL                 pNewDACL           = (PACL)&amp;ucACLBuf; <br> <br> <br>  // check if Win32s, if so, display notice and terminate <br>      if( GetVersion() &amp; 0x80000000 ) <br>      { <br>        MessageBox( NULL, <br>           "This application cannot run on Windows 3.1 or Windows 95.\n" <br>           "This application will now terminate.", <br>           "SD_FLPPY", <br>           MB_OK | MB_ICONSTOP | MB_SETFOREGROUND ); <br>        return( 1 ); <br>      } <br> <br>  /**************************************************************************\ <br>  * <br>  * Display help if any parameters passed in <br>  * <br>  \**************************************************************************/ <br> <br>  if (argc != 1) <br>  { DisplayHelp(); <br>    return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Get SID of local Administrators <br>  * <br>  \**************************************************************************/ <br> <br>  { <br>    SID_IDENTIFIER_AUTHORITY siaNtAuthority = SECURITY_NT_AUTHORITY; <br> <br>    // <br>    // preprate a Sid representing the well-known admin group <br>    // <br>    InitializeSid( psidAdministrators, &amp;siaNtAuthority, 2 ); <br>    *(GetSidSubAuthority( psidAdministrators, 0 )) = SECURITY_BUILTIN_DOMAIN_RID; <br>    *(GetSidSubAuthority( psidAdministrators, 1 )) = DOMAIN_ALIAS_RID_ADMINS; <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Initialize new DACL <br>  * <br>  \**************************************************************************/ <br> <br>    // <br>    // compute size of acl based on the Sids we will add <br>    // <br> <br>    dwDACL = sizeof(ACL) + <br>        1 * ( sizeof(ACCESS_ALLOWED_ACE) - sizeof(DWORD) ) + <br>        GetSidLengthRequired( 2 ) ; // well-known Admins Sid <br> <br>    if(dwDACL &gt; SZ_ACL_BUF) { <br>        PERR("Acl larger than buffer!"); <br>        return(1); <br>    } <br> <br>  if (!InitializeAcl(pNewDACL, <br>                     dwDACL, <br>                     ACL_REVISION)) <br>  { PERR("InitializeAcl"); <br>    return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Allow All access to the floppy for local Administrators only <br>  * <br>  \**************************************************************************/ <br> <br>  if (!AddAccessAllowedAce(pNewDACL, <br>                           ACL_REVISION, <br>                           FILE_ALL_ACCESS, <br>                           psidAdministrators)) <br>  { PERR("AddAccessAllowedAce"); <br>    return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Build SD in absolute format <br>  * <br>  \**************************************************************************/ <br> <br>  if (!InitializeSecurityDescriptor(psdAbsoluteSD, <br>                                    SECURITY_DESCRIPTOR_REVISION)) <br>  { PERR("InitializeSecurityDescriptor"); <br>    return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Set DACL into SD <br>  * <br>  \**************************************************************************/ <br> <br>  if (!SetSecurityDescriptorDacl(psdAbsoluteSD, <br>                                 TRUE,      // fDaclPresent flag <br>                                 pNewDACL, <br>                                 FALSE))    // not a default DACL <br>  { PERR("SetSecurityDescriptorDacl"); <br>    return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Check to see that SD is valid before attempting to write it to the file <br>  * <br>  \**************************************************************************/ <br> <br>  if (!IsValidSecurityDescriptor(psdAbsoluteSD)) <br>  { PERR("IsValidSecurityDescriptor"); <br>    return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * Write SD to file system - first for A: then B: <br>  * <br>  \**************************************************************************/ <br> <br>  if (!WriteSD_ToA_File(psdAbsoluteSD,"\\\\.\\A:")) <br>  { return(1); <br>  } <br> <br>  if (!WriteSD_ToA_File(psdAbsoluteSD,"\\\\.\\B:")) <br>  { return(1); <br>  } <br> <br>  /**************************************************************************\ <br>  * <br>  * only works for CDROM drives if you revoke the SeChangeNotify privilege <br>  * from Everyone in user manager <br>  * <br>  \**************************************************************************/ <br>/* <br>  if (!WriteSD_ToA_File(psdAbsoluteSD,"\\\\.\\E:")) <br>  { return(1); <br>  } <br>*/ <br>  /**************************************************************************\ <br>  * <br>  * Works for COM ports as well - commented out as this samples is floppy only <br>  * <br>  \**************************************************************************/ <br>/* <br>  if (!WriteSD_ToA_File(psdAbsoluteSD,"COM1:")) <br>  { return(1); <br>  } <br>*/ <br>  return(0); <br>} <br>  <br>/****************************************************************************\ <br>* <br>* FUNCTION: WriteSD_ToA_File <br>* <br>\****************************************************************************/ <br> <br>BOOL WriteSD_ToA_File(PSECURITY_DESCRIPTOR psdAbsoluteSD, LPTSTR lpszFileName) <br>{ <br>  DWORD dwErrorMode; <br>  BOOL  bStatus; <br> <br>  /**************************************************************************\ <br>  * <br>  * SetErrorMode so we don't get the error due to no floppy disk in the floppy <br>  *   drive <br>  * <br>  \**************************************************************************/ <br> <br>  dwErrorMode = SetErrorMode(SEM_FAILCRITICALERRORS); <br> <br>  /**************************************************************************\ <br>  * <br>  * Write SD to file system <br>  * <br>  \**************************************************************************/ <br> <br>  bStatus = SetFileSecurity(lpszFileName, <br>                            (SECURITY_INFORMATION)(DACL_SECURITY_INFORMATION), <br>                            psdAbsoluteSD); <br> <br>  /**************************************************************************\ <br>  * <br>  * SetErrorMode back to its previous value <br>  * <br>  \**************************************************************************/ <br> <br>  SetErrorMode(dwErrorMode); <br> <br>  if (!bStatus) <br>  { if (ERROR_FILE_NOT_FOUND == GetLastError()) <br>    { printf("\nAttempted to lock %s, but it was not found",lpszFileName); <br>    } <br>    else <br>    { PERR("SetFileSecurity"); <br>      return(FALSE); <br>    } <br>  } <br> <br>  return(TRUE); <br>} <br>  <br>/****************************************************************************\ <br>* <br>* FUNCTION: DisplayHelp <br>* <br>\****************************************************************************/ <br> <br>VOID DisplayHelp(VOID) <br>{ <br>  printf("\nTo run type SD_FLPPY and no (0) parameters.  Syntax:"); <br>  printf("\n  SD_FLPPY"); <br>  printf("\n          "); <br>  printf("\nExamples:"); <br>  printf("\n  SD_FLPPY"); <br>  printf("\n            Puts a DACL on A: and B: so that local Administrators"); <br>  printf("\n              have all access and no one else has any access."); <br>  printf("\n            Since domain Administrators are by default members of"); <br>  printf("\n              local Administrators, this will in many cases give"); <br>  printf("\n              the desired result, but this utility is only one"); <br>  printf("\n              example of the many possible interfaces that may be"); <br>  printf("\n              desired.  Full source to this program is available,"); <br>  printf("\n              so people may write different interfaces."); <br>  printf("\n            This .exe could be run from a logon script, or from"); <br>  printf("\n              the Startup group.  An alternative approach is to"); <br>  printf("\n              use the other version of this program.  The other"); <br>  printf("\n              version is packaged as a service that applies the"); <br>  printf("\n              DACLs when the machine boots up\n"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

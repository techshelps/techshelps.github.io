<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIENT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6232"></a>CLIENT.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    client.c <br> <br>Abstract: <br> <br>    A command line app that establishes an authenticated connection <br>with a server. <br> <br>Revision History: <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;winsock.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "security.h" <br>#include "comm.h" <br> <br>BOOL ConnectAuthSocket (LPCSTR szServer, SOCKET *s); <br>BOOL CloseAuthSocket (SOCKET s); <br>BOOL DoAuthentication (SOCKET s); <br> <br>static PBYTE g_pInBuf = NULL; <br>static PBYTE g_pOutBuf = NULL; <br>static DWORD g_cbMaxMessage = 0; <br>static unsigned short g_usPort = 2000; <br> <br>void main(int argc, char *argv[]) <br>{ <br>SOCKET s; <br>int cbRead; <br>char achData[BUFSIZ]; <br> <br>if (argc &lt; 2)  { <br>fprintf (stderr, "usage: %s &lt;server&gt;\n", argv[0]); <br>fprintf (stderr, " example: %s winbase\n", argv[0]); <br>exit (EXIT_FAILURE); <br>} <br> <br>// initialize <br>// <br>if (!InitWinsock ()) <br>exit (EXIT_FAILURE); <br> <br>if (!InitPackage (&amp;g_cbMaxMessage)) <br>exit (EXIT_FAILURE); <br> <br>g_pInBuf = (PBYTE) malloc (g_cbMaxMessage); <br>g_pOutBuf = (PBYTE) malloc (g_cbMaxMessage); <br>if (NULL == g_pInBuf || NULL == g_pOutBuf) <br>exit (EXIT_FAILURE); <br> <br>// connect to server <br>// <br>if (!ConnectAuthSocket (argv[1], &amp;s)) <br>exit (EXIT_FAILURE); <br> <br>while (1) { <br>// read from the socket <br>// <br>if (!ReceiveBytes (s, achData, BUFSIZ, &amp;cbRead)) <br>break; <br> <br>if (0 == cbRead) <br>break; <br> <br>// display the results <br>// <br>printf ("%.*s", cbRead, achData); <br>} <br> <br>printf ("\n"); <br> <br>// terminate <br>// <br>CloseAuthSocket (s); <br> <br>TermPackage (); <br> <br>TermWinsock (); <br> <br>free (g_pInBuf); <br>free (g_pOutBuf); <br> <br>exit (EXIT_SUCCESS); <br>} <br> <br>BOOL ConnectAuthSocket (LPCSTR szServer, SOCKET *s) <br>/*++ <br> <br> Routine Description: <br> <br>    Establishes an authenticated socket connection with a server and <br>initializes any needed security package resources. <br> <br> Return Value: <br> <br>    Returns TRUE is successful; otherwise FALSE is returned. <br> <br>--*/ <br>{ <br>SOCKET sockServer; <br>unsigned long ulAddress; <br>struct hostent *pHost; <br>SOCKADDR_IN sin; <br>DWORD dwRes; <br> <br>// lookup the address for the server name <br>// <br>ulAddress = inet_addr (szServer); <br>if (INADDR_NONE == ulAddress) { <br>pHost = gethostbyname (szServer); <br>if (NULL == pHost) { <br>dwRes = GetLastError (); <br>fprintf (stderr, "Unable to resolve host name: %u\n", dwRes); <br>return(FALSE); <br>} <br> <br>memcpy((char FAR *)&amp;ulAddress, pHost-&gt;h_addr, pHost-&gt;h_length); <br>} <br> <br>// create the socket <br>// <br>sockServer = socket (PF_INET, SOCK_STREAM, 0); <br>if (INVALID_SOCKET == sockServer) { <br>fprintf (stderr, "Unable to create socket: %u\n", GetLastError ()); <br>return(FALSE); <br>} <br> <br>sin.sin_family = AF_INET; <br>sin.sin_addr.s_addr = ulAddress; <br>sin.sin_port = htons (g_usPort); <br> <br>// connect to remote endpoint <br>// <br>if (connect (sockServer, (LPSOCKADDR) &amp;sin, sizeof (sin))) { <br>fprintf (stderr, "connect failed: %u\n", GetLastError ()); <br>closesocket (sockServer); <br>return(FALSE); <br>} <br> <br>// Make this an authenticated connection <br>// <br>if (!InitSession (sockServer)) { <br>closesocket (sockServer); <br>return(FALSE); <br>} <br> <br>if (!DoAuthentication (sockServer)) { <br>closesocket (sockServer); <br>return(FALSE); <br>} <br> <br>*s = sockServer; <br> <br>return(TRUE); <br>} <br> <br>BOOL CloseAuthSocket (SOCKET s) <br>/*++ <br> <br> Routine Description: <br> <br>    Closes a socket and releases security resources associated with <br>the socket <br> <br> Return Value: <br> <br>    Returns TRUE is successful; otherwise FALSE is returned. <br> <br>--*/ <br>{ <br>TermSession (s); <br>shutdown (s, 2); <br>closesocket (s); <br>return(TRUE); <br>} <br> <br>BOOL DoAuthentication (SOCKET s) <br>/*++ <br> <br> Routine Description: <br> <br>    Manges the authentication conversation with the server via the <br>    supplied socket handle. <br> <br> Return Value: <br> <br>    Returns TRUE is successful; otherwise FALSE is returned. <br> <br>--*/ <br>{ <br>BOOL done = FALSE; <br>DWORD cbOut, cbIn; <br> <br>cbOut = g_cbMaxMessage; <br>if (!GenClientContext (s, NULL, 0, g_pOutBuf, &amp;cbOut, &amp;done)) <br>return(FALSE); <br> <br>if (!SendMsg (s, g_pOutBuf, cbOut)) <br>return(FALSE); <br> <br>while (!done) { <br>if (!ReceiveMsg (s, g_pInBuf, g_cbMaxMessage, &amp;cbIn)) <br>return(FALSE); <br> <br>cbOut = g_cbMaxMessage; <br>if (!GenClientContext (s, g_pInBuf, cbIn, g_pOutBuf, &amp;cbOut, &amp;done)) <br>return(FALSE); <br> <br>if (!SendMsg (s, g_pOutBuf, cbOut)) <br>return(FALSE); <br>} <br> <br>return(TRUE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

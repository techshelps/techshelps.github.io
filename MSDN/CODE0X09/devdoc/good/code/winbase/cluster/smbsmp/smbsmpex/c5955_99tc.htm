<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMBSMPEX.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5970"></a>SMBSMPEX.CPP</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// <br>//Copyright (c) 1997 &lt;company name&gt; <br>// <br>//Module Name: <br>//SmbSmpEx.cpp <br>// <br>//Abstract: <br>//Implementation of the CSmbSmpApp class and DLL initialization <br>//routines. <br>// <br>//Author: <br>//&lt;name&gt; (&lt;e-mail name&gt;) Mmmm DD, 1997 <br>// <br>//Revision History: <br>// <br>//Notes: <br>//NOTE: You must use the MIDL compiler from NT 4.0, <br>//version 3.00.44 or greater <br>// <br>///////////////////////////////////////////////////////////////////////////// <br> <br>#include "stdafx.h" <br>#include &lt;initguid.h&gt; <br>#include &lt;CluAdmEx.h&gt; <br>#include "SmbSmpEx.h" <br>#include "ExtObj.h" <br>#include "BasePage.h" <br>#include "RegExt.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>#define IID_DEFINED <br>#include "ExtObjID_i.c" <br> <br>CComModule _Module; <br> <br>#pragma warning(disable : 4701) // local variable may be used without having been initialized <br>#include &lt;atlimpl.cpp&gt; <br>#pragma warning(default : 4701) <br> <br>BEGIN_OBJECT_MAP(ObjectMap) <br>OBJECT_ENTRY(CLSID_CoSmbSmpEx, CExtObject) <br>END_OBJECT_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Global Function Prototypes <br>///////////////////////////////////////////////////////////////////////////// <br> <br>STDAPI DllCanUnloadNow(void); <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv); <br>STDAPI DllRegisterServer(void); <br>STDAPI DllUnregisterServer(void); <br>STDAPI DllRegisterCluAdminExtension(IN HCLUSTER hcluster); <br>STDAPI DllUnregisterCluAdminExtension(IN HCLUSTER hcluster); <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// class CSmbSmpApp <br>///////////////////////////////////////////////////////////////////////////// <br> <br>class CSmbSmpApp : public CWinApp <br>{ <br>public: <br>virtual BOOL InitInstance(); <br>virtual int ExitInstance(); <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// The one and only CSmbSmpApp object <br> <br>CSmbSmpApp theApp; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CSmbSmpApp::InitInstance <br>// <br>//Routine Description: <br>//Initialize this instance of the application. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//Any return codes from CWinApp::InitInstance(). <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CSmbSmpApp::InitInstance(void) <br>{ <br>_Module.Init(ObjectMap, m_hInstance); <br>return CWinApp::InitInstance(); <br> <br>}  //*** CSmbSmpApp::InitInstance() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CSmbSmpApp::ExitInstance <br>// <br>//Routine Description: <br>//Deinitialize this instance of the application. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//Any return codes from CWinApp::ExitInstance(). <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>int CSmbSmpApp::ExitInstance(void) <br>{ <br>_Module.Term(); <br>return CWinApp::ExitInstance(); <br> <br>}  //*** CSmbSmpApp::ExitInstance() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//FormatError <br>// <br>//Routine Description: <br>//Format an error. <br>// <br>//Arguments: <br>//rstrError[OUT] String in which to return the error message. <br>//dwError[IN] Error code to format. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void FormatError(CString &amp; rstrError, DWORD dwError) <br>{ <br>DWORDdwResult; <br>TCHARszError[256]; <br> <br>dwResult = ::FormatMessage( <br>FORMAT_MESSAGE_FROM_SYSTEM, <br>NULL, <br>dwError, <br>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), <br>szError, <br>sizeof(szError) / sizeof(TCHAR), <br>0 <br>); <br>if (dwResult == 0) <br>{ <br>// Format the NT status code from CLUSAPI since some of these haven't <br>// been integrated into the system yet. <br>dwResult = ::FormatMessage( <br>FORMAT_MESSAGE_FROM_HMODULE | FORMAT_MESSAGE_IGNORE_INSERTS, <br>::GetModuleHandle(_T("CLUSAPI.DLL")), <br>dwError, <br>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), <br>szError, <br>sizeof(szError) / sizeof(TCHAR), <br>0 <br>); <br>if (dwResult == 0) <br>{ <br>// Format the NT status code from NTDLL since this hasn't been <br>// integrated into the system yet. <br>dwResult = ::FormatMessage( <br>FORMAT_MESSAGE_FROM_HMODULE | FORMAT_MESSAGE_IGNORE_INSERTS, <br>::GetModuleHandle(_T("NTDLL.DLL")), <br>dwError, <br>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL), <br>szError, <br>sizeof(szError) / sizeof(TCHAR), <br>0 <br>); <br>}  // if:  error formatting status code from CLUSAPI <br>}  // if:  error formatting status code from system <br> <br>if (dwResult != 0) <br>rstrError = szError; <br>else <br>{ <br>dwResult = ::GetLastError(); <br>TRACE(_T("FormatError() - Error 0x%08.8x formatting string for error code 0x%08.8x\n"), dwResult, dwError); <br>rstrError.Format(_T("Error 0x%08.8x")); <br>}  // else:  error formatting the message <br> <br>}  //*** FormatError() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Used to determine whether the DLL can be unloaded by OLE <br> <br>STDAPI DllCanUnloadNow(void) <br>{ <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br>return (AfxDllCanUnloadNow() &amp;&amp; _Module.GetLockCount()==0) ? S_OK : S_FALSE; <br> <br>}  //*** DllCanUnloadNow() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Returns a class factory to create an object of the requested type <br> <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv) <br>{ <br>return _Module.GetClassObject(rclsid, riid, ppv); <br> <br>}  //*** DllGetClassObject() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllRegisterServer - Adds entries to the system registry <br> <br>STDAPI DllRegisterServer(void) <br>{ <br>HRESULT hRes = S_OK; <br>// registers object, typelib and all interfaces in typelib <br>hRes = _Module.RegisterServer(FALSE /*bRegTypeLib*/); <br>return hRes; <br> <br>}  //*** DllRegisterServer() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllUnregisterServer - Removes entries from the system registry <br> <br>STDAPI DllUnregisterServer(void) <br>{ <br>HRESULT hRes = S_OK; <br>_Module.UnregisterServer(); <br>return hRes; <br> <br>}  //*** DllUnregisterServer() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//DllRegisterCluAdminExtension <br>// <br>//Routine Description: <br>//Register the extension with the cluster database. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI DllRegisterCluAdminExtension(IN HCLUSTER hCluster) <br>{ <br>HRESULThr = S_OK; <br>LPCWSTRpwszResTypes = g_wszResourceTypeNames; <br> <br>while (*pwszResTypes != L'\0') <br>{ <br>wprintf(L"  %s\n", pwszResTypes); <br>hr = RegisterCluAdminResourceTypeExtension( <br>hCluster, <br>pwszResTypes, <br>&amp;CLSID_CoSmbSmpEx <br>); <br>if (hr != S_OK) <br>break; <br>pwszResTypes += lstrlenW(pwszResTypes) + 1; <br>}  // while:  more resource types <br> <br>return hr; <br> <br>}  //*** DllRegisterCluAdminExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//DllUnregisterCluAdminExtension <br>// <br>//Routine Description: <br>//Unregister the extension with the cluster database. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI DllUnregisterCluAdminExtension(IN HCLUSTER hCluster) <br>{ <br>HRESULThr = S_OK; <br>LPCWSTRpwszResTypes = g_wszResourceTypeNames; <br> <br>while (*pwszResTypes != L'\0') <br>{ <br>wprintf(L"  %s\n", pwszResTypes); <br>hr = UnregisterCluAdminResourceTypeExtension( <br>hCluster, <br>pwszResTypes, <br>&amp;CLSID_CoSmbSmpEx <br>); <br>if (hr != S_OK) <br>break; <br>pwszResTypes += lstrlenW(pwszResTypes) + 1; <br>}  // while:  more resource types <br> <br>return hr; <br> <br>}  //*** DllUnregisterCluAdminExtension() </code></pre>
<p>&nbsp;</p></body>
</HTML>

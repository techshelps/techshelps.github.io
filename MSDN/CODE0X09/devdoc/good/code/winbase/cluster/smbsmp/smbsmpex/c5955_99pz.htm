<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDXDDV.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5957"></a>DDXDDV.CPP</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// <br>//Copyright (c) 1997 &lt;company name&gt; <br>// <br>//Module Name: <br>//DDxDDv.cpp <br>// <br>//Abstract: <br>//Implementation of custom dialog data exchange/dialog data validation <br>//routines. <br>// <br>//Author: <br>//&lt;name&gt; (&lt;e-mail name&gt;) Mmmm DD, 1997 <br>// <br>//Revision History: <br>// <br>//Notes: <br>//The IDS_REQUIRED_FIELD_EMPTY string resource must be defined in <br>//the resource file. <br>// <br>///////////////////////////////////////////////////////////////////////////// <br> <br>#include "stdafx.h" <br>#include "DDxDDv.h" <br> <br>#include "resource.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Static Function Prototypes <br>///////////////////////////////////////////////////////////////////////////// <br>static void CleanupLabel(LPTSTR psz); <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//DDX_Number <br>// <br>//Routine Description: <br>//Do data exchange between the dialog and the class. <br>// <br>//Arguments: <br>//pDX[IN OUT] Data exchange object  <br>//nIDC[IN] Control ID. <br>//dwValue[IN OUT] Value to set or get. <br>//dwMin[IN] Minimum value. <br>//dwMax[IN] Maximum value. <br>//bSigned[IN] TRUE = value is signed, FALSE = value is unsigned <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void AFXAPI DDX_Number( <br>IN OUT CDataExchange *pDX, <br>IN intnIDC, <br>IN OUT DWORD &amp;rdwValue, <br>IN DWORDdwMin, <br>IN DWORDdwMax, <br>IN BOOLbSigned <br>) <br>{ <br>HWNDhwndCtrl; <br>DWORDdwValue; <br> <br>ASSERT(pDX != NULL); <br>#ifdef _DEBUG <br>if (bSigned) <br>{ <br>ASSERT((LONG) dwMin &lt; (LONG) dwMax); <br>} <br>else <br>{ <br>ASSERT(dwMin &lt; dwMax); <br>} <br>#endif // _DEBUG <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>// Get the control window handle. <br>hwndCtrl = pDX-&gt;PrepareEditCtrl(nIDC); <br> <br>if (pDX-&gt;m_bSaveAndValidate) <br>{ <br>BOOLbTranslated; <br> <br>// Get the number from the control. <br>dwValue = GetDlgItemInt(pDX-&gt;m_pDlgWnd-&gt;m_hWnd, nIDC, &amp;bTranslated, bSigned); <br> <br>// If the retrival failed, it is a signed number, and the minimum <br>// value is the smallest negative value possible, check the string itself. <br>if (!bTranslated &amp;&amp; bSigned &amp;&amp; (dwMin == 0x80000000)) <br>{ <br>UINTcch; <br>TCHARszNumber[20]; <br> <br>// See if it is the smallest negative number. <br>cch = GetDlgItemText(pDX-&gt;m_pDlgWnd-&gt;m_hWnd, nIDC, szNumber, sizeof(szNumber) / sizeof(TCHAR)); <br>if ((cch != 0) &amp;&amp; (lstrcmp(szNumber, _T("-2147483648")) == 0)) <br>{ <br>dwValue = 0x80000000; <br>bTranslated = TRUE; <br>}  // if:  text retrieved successfully and is highest negative number <br>}  // if:  error translating number and getting signed number <br> <br>// If the retrieval failed or the specified number is <br>// out of range, display an error. <br>if (   !bTranslated <br>|| (bSigned &amp;&amp; (((LONG) dwValue &lt; (LONG) dwMin) || ((LONG) dwValue &gt; (LONG) dwMax))) <br>|| (!bSigned &amp;&amp; ((dwValue &lt; dwMin) || (dwValue &gt; dwMax))) <br>) <br>{ <br>TCHAR szMin[32]; <br>TCHAR szMax[32]; <br>CString strPrompt; <br> <br>if (bSigned) <br>{ <br>wsprintf(szMin, _T("%d%"), dwMin); <br>wsprintf(szMax, _T("%d%"), dwMax); <br>}  // if:  signed number <br>else <br>{ <br>wsprintf(szMin, _T("%u%"), dwMin); <br>wsprintf(szMax, _T("%u%"), dwMax); <br>}  // else:  unsigned number <br>AfxFormatString2(strPrompt, AFX_IDP_PARSE_INT_RANGE, szMin, szMax); <br>AfxMessageBox(strPrompt, MB_ICONEXCLAMATION, AFX_IDP_PARSE_INT_RANGE); <br>strPrompt.Empty(); // exception prep <br>pDX-&gt;Fail(); <br>}  // if:  invalid string <br>else <br>rdwValue = dwValue; <br>}  // if:  saving data <br>else <br>{ <br>CStringstrMinValue; <br>CStringstrMaxValue; <br>UINTcchMax; <br> <br>// Set the maximum number of characters that can be entered. <br>if (bSigned) <br>{ <br>strMinValue.Format(_T("%d"), dwMin); <br>strMaxValue.Format(_T("%d"), dwMax); <br>}  // if:  signed value <br>else <br>{ <br>strMinValue.Format(_T("%u"), dwMin); <br>strMaxValue.Format(_T("%u"), dwMax); <br>}  // else:  unsigned value <br>cchMax = max(strMinValue.GetLength(), strMaxValue.GetLength()); <br>SendMessage(hwndCtrl, EM_LIMITTEXT, cchMax, 0); <br> <br>// Set the value into the control. <br>if (bSigned) <br>{ <br>LONG lValue = (LONG) rdwValue; <br>DDX_Text(pDX, nIDC, lValue); <br>}  // if:  signed value <br>else <br>DDX_Text(pDX, nIDC, rdwValue); <br>}  // else:  setting data onto the dialog <br> <br>}  //*** DDX_Number() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//DDV_RequiredText <br>// <br>//Routine Description: <br>//Validate that the dialog string is present. <br>// <br>//Arguments: <br>//pDX[IN OUT] Data exchange object  <br>//nIDC[IN] Control ID. <br>//nIDCLabel[IN] Label control ID. <br>//rstrValue[IN] Value to set or get. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void AFXAPI DDV_RequiredText( <br>IN OUT CDataExchange *pDX, <br>IN intnIDC, <br>IN intnIDCLabel, <br>IN const CString &amp;rstrValue <br>) <br>{ <br>ASSERT(pDX != NULL); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>if (pDX-&gt;m_bSaveAndValidate) <br>{ <br>if (rstrValue.GetLength() == 0) <br>{ <br>HWNDhwndLabel; <br>TCHARszLabel[1024]; <br>CStringstrPrompt; <br> <br>// Get the label window handle <br>hwndLabel = pDX-&gt;PrepareEditCtrl(nIDCLabel); <br> <br>// Get the text of the label. <br>GetWindowText(hwndLabel, szLabel, sizeof(szLabel) / sizeof(TCHAR)); <br> <br>// Remove ampersands (&amp;) and colons (:). <br>CleanupLabel(szLabel); <br> <br>// Format and display a message. <br>strPrompt.FormatMessage(IDS_REQUIRED_FIELD_EMPTY, szLabel); <br>AfxMessageBox(strPrompt, MB_ICONEXCLAMATION); <br> <br>// Do this so that the control receives focus. <br>(void) pDX-&gt;PrepareEditCtrl(nIDC); <br> <br>// Fail the call. <br>strPrompt.Empty();// exception prep <br>pDX-&gt;Fail(); <br>}  // if:  field not specified <br>}  // if:  saving data <br> <br>}  //*** DDV_RequiredText() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CleanupLabel <br>// <br>//Routine Description: <br>//Prepare a label read from a dialog to be used as a string in a <br>//message by removing ampersands (&amp;) and colons (:). <br>// <br>//Arguments: <br>//pszLabel[IN OUT] Label to be cleaned up. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>static void CleanupLabel(LPTSTR pszLabel) <br>{ <br>LPTSTRpIn, pOut; <br>LANGIDlangid; <br>WORDprimarylangid; <br>BOOLbFELanguage; <br> <br>// Get the language ID. <br>langid = GetUserDefaultLangID(); <br>primarylangid = (WORD) PRIMARYLANGID(langid); <br>bFELanguage = ((primarylangid == LANG_JAPANESE) <br>|| (primarylangid == LANG_CHINESE) <br>|| (primarylangid == LANG_KOREAN)); <br> <br>// <br>// copy the name sans '&amp;' and ':' chars <br>// <br> <br>pIn = pOut = pszLabel; <br>do <br>{ <br>// <br>// strip FE accelerators with parentheses. e.g. "foo(&amp;F)" -&gt; "foo" <br>// <br>if (   bFELanguage <br>&amp;&amp; (pIn[0] == _T('(')) <br>&amp;&amp; (pIn[1] == _T('&amp;')) <br>&amp;&amp; (pIn[2] != _T('\0')) <br>&amp;&amp; (pIn[3] == _T(')'))) <br>{ <br>pIn += 3; <br>} <br>else if ((*pIn != _T('&amp;')) &amp;&amp; (*pIn != _T(':'))) <br>*pOut++ = *pIn; <br>} while (*pIn++ != _T('\0')) ; <br> <br>}  //*** CleanupLabel() </code></pre>
<p>&nbsp;</p></body>
</HTML>

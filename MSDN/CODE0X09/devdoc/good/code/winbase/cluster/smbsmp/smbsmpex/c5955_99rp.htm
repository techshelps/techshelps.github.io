<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REGEXT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5965"></a>REGEXT.CPP</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// <br>//Copyright (c) 1997 &lt;company name&gt; <br>// <br>//Module Name: <br>//RegExt.cpp <br>// <br>//Abstract: <br>//Implementation of routines for extension registration. <br>// <br>//Author: <br>//&lt;name&gt; (&lt;e-mail name&gt;) Mmmm DD, 1997 <br>// <br>//Revision History: <br>// <br>//Notes: <br>// <br>///////////////////////////////////////////////////////////////////////////// <br> <br>#include &lt;stdafx.h&gt; <br>#include &lt;ole2.h&gt; <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>#define REG_VALUE_ADMIN_EXTENSIONS L"AdminExtensions" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Static Function Prototypes <br>///////////////////////////////////////////////////////////////////////////// <br> <br>static HRESULT RegisterAnyCluAdminExtension( <br>IN HCLUSTERhCluster, <br>IN LPCWSTRpwszKeyName, <br>IN const CLSID *pClsid <br>); <br>static HRESULT RegisterAnyCluAdminExtension( <br>IN HKEYhkey, <br>IN const CLSID *pClsid <br>); <br>static HRESULT UnregisterAnyCluAdminExtension( <br>IN HCLUSTERhCluster, <br>IN LPCWSTRpwszKeyName, <br>IN const CLSID *pClsid <br>); <br>static HRESULT UnregisterAnyCluAdminExtension( <br>IN HKEYhkey, <br>IN const CLSID *pClsid <br>); <br>static DWORD ReadValue( <br>IN HKEYhkey, <br>IN LPCWSTRpwszValueName, <br>OUT LPWSTR *ppwszValue, <br>OUT DWORD *pcbSize <br>); <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminClusterExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends the cluster object. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminClusterExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>HKEYhkey; <br> <br>// Get the cluster registry key. <br>hkey = GetClusterKey(hCluster, KEY_ALL_ACCESS); <br>if (hkey == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>// Register the extension. <br>hr = RegisterAnyCluAdminExtension(hkey, pClsid); <br> <br>ClusterRegCloseKey(hkey); <br>}  // else:  GetClusterKey succeeded <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminClusterExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminAllNodesExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends all nodes. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminAllNodesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = RegisterAnyCluAdminExtension(hCluster, L"Nodes", pClsid); <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminAllNodesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminAllGroupsExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends all groups. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminAllGroupsExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = RegisterAnyCluAdminExtension(hCluster, L"Groups", pClsid); <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminAllGroupsExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminAllResourcesExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends all resources. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminAllResourcesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = RegisterAnyCluAdminExtension(hCluster, L"Resources", pClsid); <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminAllResourcesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminAllResourceTypesExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends all resource types. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminAllResourceTypesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = RegisterAnyCluAdminExtension(hCluster, L"ResourceTypes", pClsid); <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminAllResourceTypesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminAllNetworksExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends all networks. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminAllNetworksExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = RegisterAnyCluAdminExtension(hCluster, L"Networks", pClsid); <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminAllNetworksExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminAllNetInterfacesExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends all network interfaces. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminAllNetInterfacesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = RegisterAnyCluAdminExtension(hCluster, L"NetInterfaces", pClsid); <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminAllNetInterfacesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterCluAdminResourceTypeExtension <br>// <br>//Routine Description: <br>//Register with the cluster database a Cluster Administrator Extension <br>//DLL that extends resources of a specific type, or the resource type <br>//itself. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pwszResourceType[IN] Resource type name. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI RegisterCluAdminResourceTypeExtension( <br>IN HCLUSTERhCluster, <br>IN LPCWSTRpwszResourceType, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>HKEYhkey; <br> <br>// Get the resource type registry key. <br>hkey = GetClusterResourceTypeKey(hCluster, pwszResourceType, KEY_ALL_ACCESS); <br>if (hkey == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>// Register the extension. <br>hr = RegisterAnyCluAdminExtension(hkey, pClsid); <br> <br>ClusterRegCloseKey(hkey); <br>}  // else:  GetClusterResourceTypeKey succeeded <br> <br>return hr; <br> <br>}  //*** RegisterCluAdminResourceTypeExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminClusterExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends the cluster object. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminClusterExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>HKEYhkey; <br> <br>// Get the cluster registry key. <br>hkey = GetClusterKey(hCluster, KEY_ALL_ACCESS); <br>if (hkey == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>// Unregister the extension. <br>hr = UnregisterAnyCluAdminExtension(hkey, pClsid); <br> <br>ClusterRegCloseKey(hkey); <br>}  // else:  GetClusterKey succeeded <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminClusterExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminAllNodesExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends all nodes. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminAllNodesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = UnregisterAnyCluAdminExtension(hCluster, L"Nodes", pClsid); <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminAllNodesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminAllGroupsExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends all groups. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminAllGroupsExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = UnregisterAnyCluAdminExtension(hCluster, L"Groups", pClsid); <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminAllGroupsExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminAllResourcesExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends all resources. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminAllResourcesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = UnregisterAnyCluAdminExtension(hCluster, L"Resources", pClsid); <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminAllResourcesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminAllResourceTypesExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends all resource types. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminAllResourceTypesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = UnregisterAnyCluAdminExtension(hCluster, L"ResourceTypes", pClsid); <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminAllResourceTypesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminAllNetworksExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends all networks. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminAllNetworksExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = UnregisterAnyCluAdminExtension(hCluster, L"Networks", pClsid); <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminAllNetworksExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminAllNetInterfacesExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends all network interfaces. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminAllNetInterfacesExtension( <br>IN HCLUSTERhCluster, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br> <br>hr = UnregisterAnyCluAdminExtension(hCluster, L"NetInterfaces", pClsid); <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminAllNetInterfacesExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterCluAdminResourceTypeExtension <br>// <br>//Routine Description: <br>//Unregister with the cluster database a Cluster Administrator Extension <br>//DLL that extends resources of a specific type, or the resource type <br>//itself. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pwszResourceType[IN] Resource type name. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>STDAPI UnregisterCluAdminResourceTypeExtension( <br>IN HCLUSTERhCluster, <br>IN LPCWSTRpwszResourceType, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>HKEYhkey; <br> <br>// Get the resource type registry key. <br>hkey = GetClusterResourceTypeKey(hCluster, pwszResourceType, KEY_ALL_ACCESS); <br>if (hkey == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>// Unregister the extension. <br>hr = UnregisterAnyCluAdminExtension(hkey, pClsid); <br> <br>ClusterRegCloseKey(hkey); <br>}  // else:  GetClusterResourceTypeKey succeeded <br> <br>return hr; <br> <br>}  //*** UnregisterCluAdminResourceTypeExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterAnyCluAdminExtension <br>// <br>//Routine Description: <br>//Register any Cluster Administrator Extension DLL with the cluster <br>//database. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pwszKeyName[IN] Key name. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>static HRESULT RegisterAnyCluAdminExtension( <br>IN HCLUSTERhCluster, <br>IN LPCWSTRpwszKeyName, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>HKEYhkeyCluster; <br>HKEYhkey; <br> <br>// Get the cluster key. <br>hkeyCluster = GetClusterKey(hCluster, KEY_ALL_ACCESS); <br>if (hkeyCluster == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>// Get the specified key. <br>hr = ClusterRegOpenKey(hkeyCluster, pwszKeyName, KEY_ALL_ACCESS, &amp;hkey); <br>if (hr == ERROR_SUCCESS) <br>{ <br>// Register the extension. <br>hr = RegisterAnyCluAdminExtension(hkey, pClsid); <br> <br>ClusterRegCloseKey(hkey); <br>}  // else:  GetClusterResourceTypeKey succeeded <br> <br>ClusterRegCloseKey(hkeyCluster); <br>}  // if:  CLSID converted to a string successfully <br> <br>return hr; <br> <br>}  //*** RegisterAnyCluAdminExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//RegisterAnyCluAdminExtension <br>// <br>//Routine Description: <br>//Register any Cluster Administrator Extension DLL with the cluster <br>//database. <br>// <br>//Arguments: <br>//hkey[IN] Cluster database key. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension registered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>static HRESULT RegisterAnyCluAdminExtension( <br>IN HKEYhkey, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>LPOLESTRpwszClsid; <br>DWORDcbSize; <br>DWORDcbNewSize; <br>LPWSTRpwszValue; <br>LPWSTRpwszNewValue; <br>BOOLbAlreadyRegistered; <br> <br>// Convert the CLSID to a string. <br>hr = StringFromCLSID(*pClsid, &amp;pwszClsid); <br>if (hr == S_OK) <br>{ <br>// Read the current value. <br>hr = ReadValue(hkey, REG_VALUE_ADMIN_EXTENSIONS, &amp;pwszValue, &amp;cbSize); <br>if (hr == S_OK) <br>{ <br>// Check to see if the extension has been registered yet. <br>if (pwszValue == NULL) <br>bAlreadyRegistered = FALSE; <br>else <br>{ <br>LPCWSTRpwszValueBuf = pwszValue; <br> <br>while (*pwszValueBuf != L'\0') <br>{ <br>if (lstrcmpiW(pwszClsid, pwszValueBuf) == 0) <br>break; <br>pwszValueBuf += lstrlenW(pwszValueBuf) + 1; <br>}  // while:  more strings in the extension list <br>bAlreadyRegistered = (*pwszValueBuf != L'\0'); <br>}  // else:  extension value exists <br> <br>// Register the extension. <br>if (!bAlreadyRegistered) <br>{ <br>// Allocate a new buffer. <br>cbNewSize = cbSize + (lstrlenW(pwszClsid) + 1) * sizeof(WCHAR); <br>if (cbSize == 0) // Add size of final NULL if first entry. <br>cbNewSize += sizeof(WCHAR); <br>pwszNewValue = (LPWSTR) LocalAlloc(LMEM_FIXED, cbNewSize); <br>if (pwszNewValue == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>LPCWSTRpwszValueBuf= pwszValue; <br>LPWSTRpwszNewValueBuf= pwszNewValue; <br>DWORDcch; <br>DWORDdwType; <br> <br>// Copy the existing extensions to the new buffer. <br>if (pwszValue != NULL) <br>{ <br>while (*pwszValueBuf != L'\0') <br>{ <br>lstrcpyW(pwszNewValueBuf, pwszValueBuf); <br>cch = lstrlenW(pwszValueBuf); <br>pwszValueBuf += cch + 1; <br>pwszNewValueBuf += cch + 1; <br>}  // while:  more strings in the extension list <br>}  // if:  previous value buffer existed <br> <br>// Add the new CLSID to the list. <br>lstrcpyW(pwszNewValueBuf, pwszClsid); <br>pwszNewValueBuf += lstrlenW(pwszClsid) + 1; <br>*pwszNewValueBuf = L'\0'; <br> <br>// Write the value to the cluster database. <br>dwType = REG_MULTI_SZ; <br>hr = ClusterRegSetValue( <br>hkey, <br>REG_VALUE_ADMIN_EXTENSIONS, <br>dwType, <br>(LPBYTE) pwszNewValue, <br>cbNewSize <br>); <br> <br>LocalFree(pwszNewValue); <br>}  // else:  new buffer allocated successfully <br> <br>}  // if:  extension not registered yet <br> <br>LocalFree(pwszValue); <br>}  // if:  value read successfully <br> <br>CoTaskMemFree(pwszClsid); <br>}  // if:  CLSID converted to a string successfully <br> <br>return hr; <br> <br>}  //*** RegisterAnyCluAdminExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterAnyCluAdminExtension <br>// <br>//Routine Description: <br>//Unregister any Cluster Administrator Extension DLL with the cluster <br>//database. <br>// <br>//Arguments: <br>//hCluster[IN] Handle to the cluster to modify. <br>//pwszKeyName[IN] Key name. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>static HRESULT UnregisterAnyCluAdminExtension( <br>IN HCLUSTERhCluster, <br>IN LPCWSTRpwszKeyName, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>HKEYhkeyCluster; <br>HKEYhkey; <br> <br>// Get the cluster key. <br>hkeyCluster = GetClusterKey(hCluster, KEY_ALL_ACCESS); <br>if (hkeyCluster == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>// Get the specified key. <br>hr = ClusterRegOpenKey(hkeyCluster, pwszKeyName, KEY_ALL_ACCESS, &amp;hkey); <br>if (hr == ERROR_SUCCESS) <br>{ <br>// Unregister the extension. <br>hr = UnregisterAnyCluAdminExtension(hkey, pClsid); <br> <br>ClusterRegCloseKey(hkey); <br>}  // else:  GetClusterResourceTypeKey succeeded <br> <br>ClusterRegCloseKey(hkeyCluster); <br>}  // if:  CLSID converted to a string successfully <br> <br>return hr; <br> <br>}  //*** UnregisterAnyCluAdminExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//UnregisterAnyCluAdminExtension <br>// <br>//Routine Description: <br>//Unregister any Cluster Administrator Extension DLL with the cluster <br>//database. <br>// <br>//Arguments: <br>//hkey[IN] Cluster database key. <br>//pClsid[IN] Extension's CLSID. <br>// <br>//Return Value: <br>//S_OKExtension unregistered successfully. <br>//Win32 error code if another failure occurred. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>static HRESULT UnregisterAnyCluAdminExtension( <br>IN HKEYhkey, <br>IN const CLSID *pClsid <br>) <br>{ <br>HRESULThr; <br>LPOLESTRpwszClsid; <br>DWORDcbSize; <br>DWORDcbNewSize; <br>LPWSTRpwszValue; <br>LPWSTRpwszNewValue; <br>BOOLbAlreadyUnregistered; <br> <br>// Convert the CLSID to a string. <br>hr = StringFromCLSID(*pClsid, &amp;pwszClsid); <br>if (hr == S_OK) <br>{ <br>// Read the current value. <br>hr = ReadValue(hkey, REG_VALUE_ADMIN_EXTENSIONS, &amp;pwszValue, &amp;cbSize); <br>if (hr == S_OK) <br>{ <br>// Check to see if the extension has been unregistered yet. <br>if (pwszValue == NULL) <br>bAlreadyUnregistered = TRUE; <br>else <br>{ <br>LPCWSTR pwszValueBuf = pwszValue; <br> <br>while (*pwszValueBuf != L'\0') <br>{ <br>if (lstrcmpiW(pwszClsid, pwszValueBuf) == 0) <br>break; <br>pwszValueBuf += lstrlenW(pwszValueBuf) + 1; <br>}  // while:  more strings in the extension list <br>bAlreadyUnregistered = (*pwszValueBuf == L'\0'); <br>}  // else:  extension value exists <br> <br>// Unregister the extension. <br>if (!bAlreadyUnregistered) <br>{ <br>// Allocate a new buffer. <br>cbNewSize = cbSize - (lstrlenW(pwszClsid) + 1) * sizeof(WCHAR); <br>if (cbNewSize == sizeof(WCHAR)) <br>cbNewSize = 0; <br>pwszNewValue = (LPWSTR) LocalAlloc(LMEM_FIXED, cbNewSize); <br>if (pwszNewValue == NULL) <br>hr = GetLastError(); <br>else <br>{ <br>LPCWSTRpwszValueBuf= pwszValue; <br>LPWSTRpwszNewValueBuf= pwszNewValue; <br>DWORDdwType; <br> <br>// Copy the existing extensions to the new buffer. <br>if ((cbNewSize &gt; 0) &amp;&amp; (pwszValue != NULL)) <br>{ <br>while (*pwszValueBuf != L'\0') <br>{ <br>if (lstrcmpiW(pwszClsid, pwszValueBuf) != 0) <br>{ <br>lstrcpyW(pwszNewValueBuf, pwszValueBuf); <br>pwszNewValueBuf += lstrlenW(pwszNewValueBuf) + 1; <br>}  // if:  not CLSID being removed <br>pwszValueBuf += lstrlenW(pwszValueBuf) + 1; <br>}  // while:  more strings in the extension list <br>*pwszNewValueBuf = L'\0'; <br>}  // if:  previous value buffer existed <br> <br>// Write the value to the cluster database. <br>dwType = REG_MULTI_SZ; <br>hr = ClusterRegSetValue( <br>hkey, <br>REG_VALUE_ADMIN_EXTENSIONS, <br>dwType, <br>(LPBYTE) pwszNewValue, <br>cbNewSize <br>); <br> <br>LocalFree(pwszNewValue); <br>}  // else:  new buffer allocated successfully <br> <br>}  // if:  extension not unregistered yet <br> <br>LocalFree(pwszValue); <br>}  // if:  value read successfully <br> <br>CoTaskMemFree(pwszClsid); <br>}  // if:  CLSID converted to a string successfully <br> <br>return hr; <br> <br>}  //*** UnregisterAnyCluAdminExtension() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//ReadValue <br>// <br>//Routine Description: <br>//Reads a value from the cluster database. <br>// <br>//Arguments: <br>//hkey[IN] Handle for the key to read from. <br>//pwszValueName[IN] Name of value to read. <br>//ppwszValue[OUT] Address of pointer in which to return data. <br>//The string is allocated using LocalAlloc and must <br>//be deallocated by the calling LocalFree. <br>//pcbSize[OUT] Size in bytes of the allocated value buffer. <br>// <br>//Return Value: <br>//Any return values from ClusterRegQueryValue or errors from new. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br> <br>static DWORD ReadValue( <br>IN HKEYhkey, <br>IN LPCWSTRpwszValueName, <br>OUT LPWSTR *ppwszValue, <br>OUT DWORD *pcbSize <br>) <br>{ <br>DWORDdwStatus; <br>DWORDcbSize; <br>DWORDdwType; <br>LPWSTRpwszValue; <br> <br>*ppwszValue = NULL; <br>*pcbSize = 0; <br> <br>// Get the length of the value. <br>dwStatus = ClusterRegQueryValue( <br>hkey, <br>pwszValueName, <br>&amp;dwType, <br>NULL, <br>&amp;cbSize <br>); <br>if (   (dwStatus != ERROR_SUCCESS) <br>&amp;&amp; (dwStatus != ERROR_MORE_DATA)) <br>{ <br>if (dwStatus  == ERROR_FILE_NOT_FOUND) <br>dwStatus = ERROR_SUCCESS; <br>return dwStatus; <br>}  // if:  error occurred <br> <br>if (cbSize &gt; 0) <br>{ <br>// Allocate a value string. <br>pwszValue = (LPWSTR) LocalAlloc(LMEM_FIXED, cbSize); <br>if (pwszValue == NULL) <br>{ <br>dwStatus = GetLastError(); <br>return dwStatus; <br>}  // if:  error allocating memory <br> <br>// Read the the value. <br>dwStatus = ClusterRegQueryValue( <br>hkey, <br>pwszValueName, <br>&amp;dwType, <br>(LPBYTE) pwszValue, <br>&amp;cbSize <br>); <br>if (dwStatus != ERROR_SUCCESS) <br>{ <br>LocalFree(pwszValue); <br>pwszValue = NULL; <br>cbSize = 0; <br>}  // if:  error occurred <br> <br>*ppwszValue = pwszValue; <br>*pcbSize = cbSize; <br>}  // if:  value is not empty <br> <br>return dwStatus; <br> <br>}  //*** ReadValue() </code></pre>
<p>&nbsp;</p></body>
</HTML>

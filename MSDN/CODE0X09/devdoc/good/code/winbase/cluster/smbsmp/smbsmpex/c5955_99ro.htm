<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BASEPAGE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5964"></a>BASEPAGE.CPP</h2>
<pre><code>///////////////////////////////////////////////////////////////////////////// <br>// <br>//Copyright (c) 1997 &lt;company name&gt; <br>// <br>//Module Name: <br>//BasePage.cpp <br>// <br>//Abstract: <br>//Implementation of the CBasePropertyPage class. <br>// <br>//Author: <br>//&lt;name&gt; (&lt;e-mail name&gt;) Mmmm DD, 1997 <br>// <br>//Revision History: <br>// <br>//Notes: <br>// <br>///////////////////////////////////////////////////////////////////////////// <br> <br>#include "stdafx.h" <br>#include &lt;clusapi.h&gt; <br>#include "SmbSmpEx.h" <br>#include "ExtObj.h" <br>#include "BasePage.h" <br>#include "BasePage.inl" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CBasePropertyPage property page <br>///////////////////////////////////////////////////////////////////////////// <br> <br>IMPLEMENT_DYNCREATE(CBasePropertyPage, CPropertyPage) <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// Message Maps <br> <br>BEGIN_MESSAGE_MAP(CBasePropertyPage, CPropertyPage) <br>//{{AFX_MSG_MAP(CBasePropertyPage) <br>ON_WM_CREATE() <br>ON_WM_DESTROY() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::CBasePropertyPage <br>// <br>//Routine Description: <br>//Default constructor. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>CBasePropertyPage::CBasePropertyPage(void) <br>{ <br>CommonConstruct(); <br> <br>}  //*** CBasePropertyPage::CBasePropertyPage() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::CBasePropertyPage <br>// <br>//Routine Description: <br>//Default constructor. <br>// <br>//Arguments: <br>//nIDTemplate[IN] Dialog template resource ID. <br>//nIDCaption[IN] Caption string resource ID. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>CBasePropertyPage::CBasePropertyPage( <br>IN UINTnIDTemplate, <br>IN UINTnIDCaption <br>) <br>: CPropertyPage(nIDTemplate, nIDCaption) <br>{ <br>CommonConstruct(); <br> <br>}  //*** CBasePropertyPage::CBasePropertyPage(UINT, UINT) <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::CommonConstruct <br>// <br>//Routine Description: <br>//Common construction. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void CBasePropertyPage::CommonConstruct(void) <br>{ <br>//{{AFX_DATA_INIT(CBasePropertyPage) <br>//}}AFX_DATA_INIT <br> <br>m_peo = NULL; <br>m_hpage = NULL; <br>m_bBackPressed = FALSE; <br> <br>m_iddPropertyPage = NULL; <br>m_iddWizardPage = NULL; <br>m_idsCaption = NULL; <br> <br>}  //*** CBasePropertyPage::CommonConstruct() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::BInit <br>// <br>//Routine Description: <br>//Initialize the page. <br>// <br>//Arguments: <br>//peo[IN OUT] Pointer to the extension object. <br>// <br>//Return Value: <br>//TRUEPage initialized successfully. <br>//FALSEPage failed to initialize. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::BInit(IN OUT CExtObject * peo) <br>{ <br>ASSERT(peo != NULL); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>CWaitCursorwc; <br> <br>m_peo = peo; <br> <br>// Don't display a help button. <br>m_psp.dwFlags &amp;= ~PSP_HASHELP; <br> <br>// Construct the property page. <br>if (Peo()-&gt;BWizard()) <br>{ <br>ASSERT(IddWizardPage() != NULL); <br>Construct(IddWizardPage(), IdsCaption()); <br>}  // if:  adding page to wizard <br>else <br>{ <br>ASSERT(IddPropertyPage() != NULL); <br>Construct(IddPropertyPage(), IdsCaption()); <br>}  // else:  adding page to property sheet <br> <br>// Read the properties private to this resource and parse them. <br>{ <br>DWORDdwStatus; <br>CClusPropListcpl; <br> <br>ASSERT(Peo() != NULL); <br>ASSERT(Peo()-&gt;PodObjData()); <br> <br>// Read the properties. <br>switch (Cot()) <br>{ <br>case CLUADMEX_OT_NODE: <br>ASSERT(Peo()-&gt;PndNodeData()-&gt;m_hnode != NULL); <br>dwStatus = cpl.DwGetNodeProperties( <br>Peo()-&gt;PndNodeData()-&gt;m_hnode, <br>CLUSCTL_NODE_GET_PRIVATE_PROPERTIES <br>); <br>break; <br>case CLUADMEX_OT_GROUP: <br>ASSERT(Peo()-&gt;PgdGroupData()-&gt;m_hgroup != NULL); <br>dwStatus = cpl.DwGetGroupProperties( <br>Peo()-&gt;PgdGroupData()-&gt;m_hgroup, <br>CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES <br>); <br>break; <br>case CLUADMEX_OT_RESOURCE: <br>ASSERT(Peo()-&gt;PrdResData()-&gt;m_hresource != NULL); <br>dwStatus = cpl.DwGetResourceProperties( <br>Peo()-&gt;PrdResData()-&gt;m_hresource, <br>CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES <br>); <br>break; <br>case CLUADMEX_OT_RESOURCETYPE: <br>ASSERT(Peo()-&gt;PodObjData()-&gt;m_strName.GetLength() &gt; 0); <br>dwStatus = cpl.DwGetResourceTypeProperties( <br>Hcluster(), <br>Peo()-&gt;PodObjData()-&gt;m_strName, <br>CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES <br>); <br>break; <br>case CLUADMEX_OT_NETWORK: <br>ASSERT(Peo()-&gt;PndNetworkData()-&gt;m_hnetwork != NULL); <br>dwStatus = cpl.DwGetNetworkProperties( <br>Peo()-&gt;PndNetworkData()-&gt;m_hnetwork, <br>CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES <br>); <br>break; <br>case CLUADMEX_OT_NETINTERFACE: <br>ASSERT(Peo()-&gt;PndNetInterfaceData()-&gt;m_hnetinterface != NULL); <br>dwStatus = cpl.DwGetNetInterfaceProperties( <br>Peo()-&gt;PndNetInterfaceData()-&gt;m_hnetinterface, <br>CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES <br>); <br>break; <br>default: <br>ASSERT(0); <br>}  // switch:  object type <br> <br>// Parse the properties. <br>if (dwStatus == ERROR_SUCCESS) <br>{ <br>// Parse the properties. <br>try <br>{ <br>dwStatus = DwParseProperties(cpl); <br>}  // try <br>catch (CMemoryException * pme) <br>{ <br>dwStatus = ERROR_NOT_ENOUGH_MEMORY; <br>pme-&gt;Delete(); <br>}  // catch:  CMemoryException <br>}  // if:  properties read successfully <br> <br>if (dwStatus != ERROR_SUCCESS) <br>{ <br>return FALSE; <br>}  // if:  error parsing getting or parsing properties <br>}  // Read the properties private to this resource and parse them <br> <br>return TRUE; <br> <br>}  //*** CBasePropertyPage::BInit() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::DwParseProperties <br>// <br>//Routine Description: <br>//Parse the properties of the resource.  This is in a separate function <br>//from BInit so that the optimizer can do a better job. <br>// <br>//Arguments: <br>//rcpl[IN] Cluster property list to parse. <br>// <br>//Return Value: <br>//ERROR_SUCCESSProperties were parsed successfully. <br>// <br>//Exceptions Thrown: <br>//Any exceptions from CString::operator=(). <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>DWORD CBasePropertyPage::DwParseProperties(IN const CClusPropList &amp; rcpl) <br>{ <br>DWORDcProps; <br>DWORDcprop; <br>DWORDcbProps; <br>const CObjectProperty *pprop; <br>CLUSPROP_BUFFER_HELPERprops; <br>CLUSPROP_PROPERTY_NAME const *pName; <br> <br>ASSERT(rcpl.PbProplist() != NULL); <br> <br>props.pb = rcpl.PbProplist(); <br>cbProps = rcpl.CbProplist(); <br> <br>// Loop through each property. <br>for (cProps = *(props.pdw++) ; cProps &gt; 0 ; cProps--) <br>{ <br>pName = props.pName; <br>ASSERT(pName-&gt;Syntax.dw == CLUSPROP_SYNTAX_NAME); <br>props.pb += sizeof(*pName) + ALIGN_CLUSPROP(pName-&gt;cbLength); <br> <br>// Decrement the counter by the size of the name. <br>ASSERT(cbProps &gt; sizeof(*pName) + ALIGN_CLUSPROP(pName-&gt;cbLength)); <br>cbProps -= sizeof(*pName) + ALIGN_CLUSPROP(pName-&gt;cbLength); <br> <br>ASSERT(cbProps &gt; sizeof(*props.pValue) + ALIGN_CLUSPROP(props.pValue-&gt;cbLength)); <br> <br>// Parse known properties. <br>for (pprop = Pprops(), cprop = Cprops() ; cprop &gt; 0 ; pprop++, cprop--) <br>{ <br>if (lstrcmpiW(pName-&gt;sz, pprop-&gt;m_pwszName) == 0) <br>{ <br>ASSERT(props.pSyntax-&gt;wFormat == pprop-&gt;m_propFormat); <br>switch (pprop-&gt;m_propFormat) <br>{ <br>case CLUSPROP_FORMAT_SZ: <br>case CLUSPROP_FORMAT_EXPAND_SZ: <br>ASSERT((props.pValue-&gt;cbLength == (lstrlenW(props.pStringValue-&gt;sz) + 1) * sizeof(WCHAR)) <br>|| ((props.pValue-&gt;cbLength == 0) &amp;&amp; (props.pStringValue-&gt;sz[0] == L'\0'))); <br>*pprop-&gt;m_value.pstr = props.pStringValue-&gt;sz; <br>*pprop-&gt;m_valuePrev.pstr = props.pStringValue-&gt;sz; <br>break; <br>case CLUSPROP_FORMAT_DWORD: <br>ASSERT(props.pValue-&gt;cbLength == sizeof(DWORD)); <br>*pprop-&gt;m_value.pdw = props.pDwordValue-&gt;dw; <br>*pprop-&gt;m_valuePrev.pdw = props.pDwordValue-&gt;dw; <br>break; <br>case CLUSPROP_FORMAT_BINARY: <br>case CLUSPROP_FORMAT_MULTI_SZ: <br>*pprop-&gt;m_value.ppb = props.pBinaryValue-&gt;rgb; <br>*pprop-&gt;m_value.pcb = props.pBinaryValue-&gt;cbLength; <br>*pprop-&gt;m_valuePrev.ppb = props.pBinaryValue-&gt;rgb; <br>*pprop-&gt;m_valuePrev.pcb = props.pBinaryValue-&gt;cbLength; <br>break; <br>default: <br>ASSERT(0);// don't know how to deal with this type <br>}  // switch:  property format <br> <br>// Exit the loop since we found the parameter. <br>break; <br>}  // if:  found a match <br>}  // for:  each property <br> <br>// If the property wasn't known, ask the derived class to parse it. <br>if (cprop == 0) <br>{ <br>DWORDdwStatus; <br> <br>dwStatus = DwParseUnknownProperty(pName-&gt;sz, props, cbProps); <br>if (dwStatus != ERROR_SUCCESS) <br>return dwStatus; <br>}  // if:  property not parsed <br> <br>// Advance the buffer pointer past the value in the value list. <br>while ((props.pSyntax-&gt;dw != CLUSPROP_SYNTAX_ENDMARK) <br>&amp;&amp; (cbProps &gt; 0)) <br>{ <br>ASSERT(cbProps &gt; sizeof(*props.pValue) + ALIGN_CLUSPROP(props.pValue-&gt;cbLength)); <br>cbProps -= sizeof(*props.pValue) + ALIGN_CLUSPROP(props.pValue-&gt;cbLength); <br>props.pb += sizeof(*props.pValue) + ALIGN_CLUSPROP(props.pValue-&gt;cbLength); <br>}  // while:  more values in the list <br> <br>// Advance the buffer pointer past the value list endmark. <br>ASSERT(cbProps &gt;= sizeof(*props.pSyntax)); <br>cbProps -= sizeof(*props.pSyntax); <br>props.pb += sizeof(*props.pSyntax); // endmark <br>}  // for:  each property <br> <br>return ERROR_SUCCESS; <br> <br>}  //*** CBasePropertyPage::DwParseProperties() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnCreate <br>// <br>//Routine Description: <br>//Handler for the WM_CREATE message. <br>// <br>//Arguments: <br>//lpCreateStruct[IN OUT] Window create structure. <br>// <br>//Return Value: <br>//-1Error. <br>//0Success. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>int CBasePropertyPage::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>// Attach the window to the property page structure. <br>// This has been done once already in the main application, since the <br>// main application owns the property sheet.  It needs to be done here <br>// so that the window handle can be found in the DLL's handle map. <br>HWND hWnd = m_hWnd; <br>m_hWnd = NULL; <br>Attach(hWnd); <br> <br>return CPropertyPage::OnCreate(lpCreateStruct); <br> <br>}  //*** CBasePropertyPage::OnCreate() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnDestroy <br>// <br>//Routine Description: <br>//Handler for the WM_DESTROY message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void CBasePropertyPage::OnDestroy(void) <br>{ <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>// Detach the window from the property page structure. <br>// This will be done again by the main application, since it owns the <br>// property sheet.  It needs to be done here so that the window handle <br>// can be removed from the DLL's handle map. <br>if (m_hWnd != NULL) <br>{ <br>HWND hWnd = m_hWnd; <br> <br>Detach(); <br>m_hWnd = hWnd; <br>} <br> <br>CPropertyPage::OnDestroy(); <br> <br>}  //*** CBasePropertyPage::OnDestroy() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::DoDataExchange <br>// <br>//Routine Description: <br>//Do data exchange between the dialog and the class. <br>// <br>//Arguments: <br>//pDX[IN OUT] Data exchange object  <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void CBasePropertyPage::DoDataExchange(CDataExchange * pDX) <br>{ <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>//{{AFX_DATA_MAP(CBasePropertyPage) <br>// NOTE: the ClassWizard will add DDX and DDV calls here <br>//}}AFX_DATA_MAP <br>DDX_Control(pDX, IDC_PP_ICON, m_staticIcon); <br>DDX_Control(pDX, IDC_PP_TITLE, m_staticTitle); <br> <br>if (pDX-&gt;m_bSaveAndValidate) <br>{ <br>if (!BBackPressed()) <br>{ <br>CWaitCursorwc; <br> <br>// Validate the data. <br>if (!BSetPrivateProps(TRUE /*bValidateOnly*/)) <br>pDX-&gt;Fail(); <br>}  // if:  Back button not pressed <br>}  // if:  saving data from dialog <br>else <br>{ <br>// Set the title. <br>DDX_Text(pDX, IDC_PP_TITLE, m_strTitle); <br>}  // if:  not saving data <br> <br>CPropertyPage::DoDataExchange(pDX); <br> <br>}  //*** CBasePropertyPage::DoDataExchange() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnInitDialog <br>// <br>//Routine Description: <br>//Handler for the WM_INITDIALOG message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//TRUEWe need the focus to be set for us. <br>//FALSEWe already set the focus to the proper control. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::OnInitDialog(void) <br>{ <br>ASSERT(Peo() != NULL); <br>ASSERT(Peo()-&gt;PodObjData() != NULL); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>// Set the title string. <br>m_strTitle = Peo()-&gt;PodObjData()-&gt;m_strName; <br> <br>// Call the base class method. <br>CPropertyPage::OnInitDialog(); <br> <br>// Display an icon for the object. <br>if (Peo()-&gt;Hicon() != NULL) <br>m_staticIcon.SetIcon(Peo()-&gt;Hicon()); <br> <br>return TRUE;// return TRUE unless you set the focus to a control <br>// EXCEPTION: OCX Property Pages should return FALSE <br> <br>}  //*** CBasePropertyPage::OnInitDialog() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnSetActive <br>// <br>//Routine Description: <br>//Handler for the PSN_SETACTIVE message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//TRUEPage successfully initialized. <br>//FALSEPage not initialized. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::OnSetActive(void) <br>{ <br>HRESULThr; <br> <br>ASSERT(Peo() != NULL); <br>ASSERT(Peo()-&gt;PodObjData() != NULL); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>// Reread the data. <br>hr = Peo()-&gt;HrGetObjectInfo(); <br>if (hr != NOERROR) <br>return FALSE; <br> <br>// Set the title string. <br>m_strTitle = Peo()-&gt;PodObjData()-&gt;m_strName; <br> <br>m_bBackPressed = FALSE; <br>return CPropertyPage::OnSetActive(); <br> <br>}  //*** CBasePropertyPage::OnSetActive() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnApply <br>// <br>//Routine Description: <br>//Handler for the PSM_APPLY message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//TRUEPage successfully applied. <br>//FALSEError applying page. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::OnApply(void) <br>{ <br>ASSERT(!BWizard()); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>CWaitCursorwc; <br> <br>// Update the data in the class from the page. <br>if (!UpdateData(TRUE /*bSaveAndValidate*/)) <br>return FALSE; <br> <br>if (!BApplyChanges()) <br>return FALSE; <br> <br>return CPropertyPage::OnApply(); <br> <br>}  //*** CBasePropertyPage::OnApply() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnWizardBack <br>// <br>//Routine Description: <br>//Handler for the PSN_WIZBACK message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//-1Don't change the page. <br>//0Change the page. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>LRESULT CBasePropertyPage::OnWizardBack(void) <br>{ <br>LRESULTlResult; <br> <br>ASSERT(BWizard()); <br> <br>lResult = CPropertyPage::OnWizardBack(); <br>if (lResult != -1) <br>m_bBackPressed = TRUE; <br> <br>return lResult; <br> <br>}  //*** CBasePropertyPage::OnWizardBack() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnWizardNext <br>// <br>//Routine Description: <br>//Handler for the PSN_WIZNEXT message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//-1Don't change the page. <br>//0Change the page. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>LRESULT CBasePropertyPage::OnWizardNext(void) <br>{ <br>ASSERT(BWizard()); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>CWaitCursorwc; <br> <br>// Update the data in the class from the page. <br>if (!UpdateData(TRUE /*bSaveAndValidate*/)) <br>return -1; <br> <br>// Save the data in the sheet. <br>if (!BApplyChanges()) <br>return -1; <br> <br>// Create the object. <br> <br>return CPropertyPage::OnWizardNext(); <br> <br>}  //*** CBasePropertyPage::OnWizardNext() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnWizardFinish <br>// <br>//Routine Description: <br>//Handler for the PSN_WIZFINISH message. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//FALSEDon't change the page. <br>//TRUEChange the page. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::OnWizardFinish(void) <br>{ <br>ASSERT(BWizard()); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>CWaitCursorwc; <br> <br>// Update the data in the class from the page. <br>if (!UpdateData(TRUE /*bSaveAndValidate*/)) <br>return FALSE; <br> <br>// Save the data in the sheet. <br>if (!BApplyChanges()) <br>return FALSE; <br> <br>return CPropertyPage::OnWizardFinish(); <br> <br>}  //*** CBasePropertyPage::OnWizardFinish() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::OnChangeCtrl <br>// <br>//Routine Description: <br>//Handler for the messages sent when a control is changed.  This <br>//method can be specified in a message map if all that needs to be <br>//done is enable the Apply button. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void CBasePropertyPage::OnChangeCtrl(void) <br>{ <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>SetModified(TRUE); <br> <br>}  //*** CBasePropertyPage::OnChangeCtrl() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::EnableNext <br>// <br>//Routine Description: <br>//Enables or disables the NEXT or FINISH button. <br>// <br>//Arguments: <br>//bEnable[IN] TRUE = enable the button, FALSE = disable the button. <br>// <br>//Return Value: <br>//None. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void CBasePropertyPage::EnableNext(IN BOOL bEnable /*TRUE*/) <br>{ <br>ASSERT(BWizard()); <br> <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>PiWizardCallback()-&gt;EnableNext((LONG *) Hpage(), bEnable); <br> <br>}  //*** CBasePropertyPage::EnableNext() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::BApplyChanges <br>// <br>//Routine Description: <br>//Apply changes made on the page. <br>// <br>//Arguments: <br>//None. <br>// <br>//Return Value: <br>//TRUEPage successfully applied. <br>//FALSEError applying page. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::BApplyChanges(void) <br>{ <br>AFX_MANAGE_STATE(AfxGetStaticModuleState()); <br> <br>CWaitCursorwc; <br> <br>// Save data. <br>return BSetPrivateProps(); <br> <br>}  //*** CBasePropertyPage::BApplyChanges() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::BuildPropList <br>// <br>//Routine Description: <br>//Build the property list. <br>// <br>//Arguments: <br>//rcpl[IN OUT] Cluster property list. <br>// <br>//Return Value: <br>//None. <br>// <br>//Exceptions Thrown: <br>//Any exceptions thrown by CClusPropList::AddProp(). <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>void CBasePropertyPage::BuildPropList( <br>IN OUT CClusPropList &amp; rcpl <br>) <br>{ <br>DWORDcprop; <br>const CObjectProperty *pprop; <br> <br>for (pprop = Pprops(), cprop = Cprops() ; cprop &gt; 0 ; pprop++, cprop--) <br>{ <br>switch (pprop-&gt;m_propFormat) <br>{ <br>case CLUSPROP_FORMAT_SZ: <br>case CLUSPROP_FORMAT_EXPAND_SZ: <br>rcpl.AddProp( <br>pprop-&gt;m_pwszName, <br>*pprop-&gt;m_value.pstr, <br>*pprop-&gt;m_valuePrev.pstr <br>); <br>break; <br>case CLUSPROP_FORMAT_DWORD: <br>rcpl.AddProp( <br>pprop-&gt;m_pwszName, <br>*pprop-&gt;m_value.pdw, <br>*pprop-&gt;m_valuePrev.pdw <br>); <br>break; <br>case CLUSPROP_FORMAT_BINARY: <br>case CLUSPROP_FORMAT_MULTI_SZ: <br>rcpl.AddProp( <br>pprop-&gt;m_pwszName, <br>*pprop-&gt;m_value.ppb, <br>*pprop-&gt;m_value.pcb, <br>*pprop-&gt;m_valuePrev.ppb, <br>*pprop-&gt;m_valuePrev.pcb <br>); <br>break; <br>default: <br>ASSERT(0);// don't know how to deal with this type <br>return; <br>}  // switch:  property format <br>}  // for:  each property <br> <br>}  //*** CBasePropertyPage::BuildPropList() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//++ <br>// <br>//CBasePropertyPage::BSetPrivateProps <br>// <br>//Routine Description: <br>//Set the private properties for this object. <br>// <br>//Arguments: <br>//bValidateOnly[IN] TRUE = only validate the data. <br>// <br>//Return Value: <br>//ERROR_SUCCESSThe operation was completed successfully. <br>//!0Failure. <br>// <br>//-- <br>///////////////////////////////////////////////////////////////////////////// <br>BOOL CBasePropertyPage::BSetPrivateProps(IN BOOL bValidateOnly) <br>{ <br>BOOLbSuccess= TRUE; <br>CClusPropListcpl(BWizard() /*bAlwaysAddProp*/); <br>CWaitCursorwc; <br> <br>ASSERT(Peo() != NULL); <br> <br>// Build the property list. <br>try <br>{ <br>BuildPropList(cpl); <br>}  // try <br>catch (CException * pe) <br>{ <br>pe-&gt;ReportError(); <br>pe-&gt;Delete(); <br>bSuccess = FALSE; <br>}  // catch:  CException <br> <br>// Set the data. <br>if (bSuccess) <br>{ <br>if ((cpl.PbProplist() != NULL) &amp;&amp; (cpl.CbProplist() &gt; 0)) <br>{ <br>DWORDdwStatus; <br>DWORDdwControlCode; <br>DWORDcbProps; <br> <br>switch (Cot()) <br>{ <br>case CLUADMEX_OT_NODE: <br>ASSERT(Peo()-&gt;PndNodeData() != NULL); <br>ASSERT(Peo()-&gt;PndNodeData()-&gt;m_hnode != NULL); <br> <br>// Determine which control code to use. <br>if (bValidateOnly) <br>dwControlCode = CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES; <br>else <br>dwControlCode = CLUSCTL_NODE_SET_PRIVATE_PROPERTIES; <br> <br>// Set private properties. <br>dwStatus = ClusterNodeControl( <br>Peo()-&gt;PndNodeData()-&gt;m_hnode, <br>NULL,// hNode <br>dwControlCode, <br>cpl.PbProplist(), <br>cpl.CbProplist(), <br>NULL,// lpOutBuffer <br>0,// nOutBufferSize <br>&amp;cbProps <br>); <br>break; <br>case CLUADMEX_OT_GROUP: <br>ASSERT(Peo()-&gt;PgdGroupData() != NULL); <br>ASSERT(Peo()-&gt;PgdGroupData()-&gt;m_hgroup != NULL); <br> <br>// Determine which control code to use. <br>if (bValidateOnly) <br>dwControlCode = CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES; <br>else <br>dwControlCode = CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES; <br> <br>// Set private properties. <br>dwStatus = ClusterGroupControl( <br>Peo()-&gt;PgdGroupData()-&gt;m_hgroup, <br>NULL,// hNode <br>dwControlCode, <br>cpl.PbProplist(), <br>cpl.CbProplist(), <br>NULL,// lpOutBuffer <br>0,// nOutBufferSize <br>&amp;cbProps <br>); <br>break; <br>case CLUADMEX_OT_RESOURCE: <br>ASSERT(Peo()-&gt;PrdResData() != NULL); <br>ASSERT(Peo()-&gt;PrdResData()-&gt;m_hresource != NULL); <br> <br>// Determine which control code to use. <br>if (bValidateOnly) <br>dwControlCode = CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES; <br>else <br>dwControlCode = CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES; <br> <br>// Set private properties. <br>dwStatus = ClusterResourceControl( <br>Peo()-&gt;PrdResData()-&gt;m_hresource, <br>NULL,// hNode <br>dwControlCode, <br>cpl.PbProplist(), <br>cpl.CbProplist(), <br>NULL,// lpOutBuffer <br>0,// nOutBufferSize <br>&amp;cbProps <br>); <br>break; <br>case CLUADMEX_OT_RESOURCETYPE: <br>ASSERT(Peo()-&gt;PodObjData() != NULL); <br>ASSERT(Peo()-&gt;PodObjData()-&gt;m_strName.GetLength() &gt; 0); <br> <br>// Determine which control code to use. <br>if (bValidateOnly) <br>dwControlCode = CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES; <br>else <br>dwControlCode = CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES; <br> <br>// Set private properties. <br>dwStatus = ClusterResourceTypeControl( <br>Hcluster(), <br>Peo()-&gt;PodObjData()-&gt;m_strName, <br>NULL,// hNode <br>dwControlCode, <br>cpl.PbProplist(), <br>cpl.CbProplist(), <br>NULL,// lpOutBuffer <br>0,// nOutBufferSize <br>&amp;cbProps <br>); <br>break; <br>case CLUADMEX_OT_NETWORK: <br>ASSERT(Peo()-&gt;PndNetworkData() != NULL); <br>ASSERT(Peo()-&gt;PndNetworkData()-&gt;m_hnetwork != NULL); <br> <br>// Determine which control code to use. <br>if (bValidateOnly) <br>dwControlCode = CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES; <br>else <br>dwControlCode = CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES; <br> <br>// Set private properties. <br>dwStatus = ClusterNetworkControl( <br>Peo()-&gt;PndNetworkData()-&gt;m_hnetwork, <br>NULL,// hNode <br>dwControlCode, <br>cpl.PbProplist(), <br>cpl.CbProplist(), <br>NULL,// lpOutBuffer <br>0,// nOutBufferSize <br>&amp;cbProps <br>); <br>break; <br>case CLUADMEX_OT_NETINTERFACE: <br>ASSERT(Peo()-&gt;PndNetInterfaceData() != NULL); <br>ASSERT(Peo()-&gt;PndNetInterfaceData()-&gt;m_hnetinterface != NULL); <br> <br>// Determine which control code to use. <br>if (bValidateOnly) <br>dwControlCode = CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES; <br>else <br>dwControlCode = CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES; <br> <br>// Set private properties. <br>dwStatus = ClusterNetInterfaceControl( <br>Peo()-&gt;PndNetInterfaceData()-&gt;m_hnetinterface, <br>NULL,// hNode <br>dwControlCode, <br>cpl.PbProplist(), <br>cpl.CbProplist(), <br>NULL,// lpOutBuffer <br>0,// nOutBufferSize <br>&amp;cbProps <br>); <br>break; <br>default: <br>ASSERT(0); <br>}  // switch:  object type <br> <br>// Handle errors. <br>if (dwStatus != ERROR_SUCCESS) <br>{ <br>CString strMsg; <br>FormatError(strMsg, dwStatus); <br>AfxMessageBox(strMsg); <br>if (bValidateOnly <br>|| (dwStatus != ERROR_RESOURCE_PROPERTIES_STORED)) <br>bSuccess = FALSE; <br>}  // if:  error setting/validating data <br>}  // if:  there is data to set <br>}  // if:  no errors building the property list <br> <br>// Save data locally. <br>if (!bValidateOnly &amp;&amp; bSuccess) <br>{ <br>// Save new values as previous values. <br>try <br>{ <br>DWORDcprop; <br>const CObjectProperty *pprop; <br> <br>for (pprop = Pprops(), cprop = Cprops() ; cprop &gt; 0 ; pprop++, cprop--) <br>{ <br>switch (pprop-&gt;m_propFormat) <br>{ <br>case CLUSPROP_FORMAT_SZ: <br>case CLUSPROP_FORMAT_EXPAND_SZ: <br>ASSERT(pprop-&gt;m_value.pstr != NULL); <br>ASSERT(pprop-&gt;m_valuePrev.pstr != NULL); <br>*pprop-&gt;m_valuePrev.pstr = *pprop-&gt;m_value.pstr; <br>break; <br>case CLUSPROP_FORMAT_DWORD: <br>ASSERT(pprop-&gt;m_value.pdw != NULL); <br>ASSERT(pprop-&gt;m_valuePrev.pdw != NULL); <br>*pprop-&gt;m_valuePrev.pdw = *pprop-&gt;m_value.pdw; <br>break; <br>case CLUSPROP_FORMAT_BINARY: <br>case CLUSPROP_FORMAT_MULTI_SZ: <br>ASSERT(pprop-&gt;m_value.ppb != NULL); <br>ASSERT(*pprop-&gt;m_value.ppb != NULL); <br>ASSERT(pprop-&gt;m_value.pcb != NULL); <br>ASSERT(pprop-&gt;m_valuePrev.ppb != NULL); <br>ASSERT(*pprop-&gt;m_valuePrev.ppb != NULL); <br>ASSERT(pprop-&gt;m_valuePrev.pcb != NULL); <br>delete [] *pprop-&gt;m_valuePrev.ppb; <br>*pprop-&gt;m_valuePrev.ppb = new BYTE[*pprop-&gt;m_value.pcb]; <br>CopyMemory(*pprop-&gt;m_valuePrev.ppb, *pprop-&gt;m_value.ppb, *pprop-&gt;m_value.pcb); <br>*pprop-&gt;m_valuePrev.pcb = *pprop-&gt;m_value.pcb; <br>break; <br>default: <br>ASSERT(0);// don't know how to deal with this type </code></pre>
<p>
</p>
<pre><code>}  // switch:  property format <br>}  // for:  each property <br>}  // try <br>catch (CException * pe) <br>{ <br>pe-&gt;ReportError(); <br>pe-&gt;Delete(); <br>bSuccess = FALSE; <br>}  // catch:  CException <br>}  // if:  not just validating and successful so far <br> <br>return bSuccess; <br> <br>}  //*** CBasePropertyPage::BSetPrivateProps() </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NMMEMSRV.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6068"></a>NMMEMSRV.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "memory.h" <br> <br> <br>/************************************************************************** <br> * HANDLE CreateMapFile(char *MapFileName) <br> * <br> * Purpose: Create a Map file to map named share memory <br> * <br> * Inputs:  none <br> * <br> * Returns: MapFileHandle - a handle to the file <br> *                        or NULL if failure <br> * <br> * Calls:   CreateFile, ErrorOut <br> * <br>\**************************************************************************/ <br>HANDLE CreateMapFile(char *MapFileName) <br>{ <br>   HANDLE MapFileHandle; <br> <br>   MapFileHandle= CreateFile(MapFileName, <br>                             GENERIC_READ | GENERIC_WRITE, <br>                             FILE_SHARE_READ | FILE_SHARE_WRITE, <br>                             NULL, <br>                             CREATE_ALWAYS, <br>                             FILE_ATTRIBUTE_NORMAL, <br>                             NULL); <br> <br>   if (MapFileHandle == INVALID_HANDLE_VALUE) <br>   { <br>      ErrorOut("CreateFile"); <br>      return(NULL); <br>   } <br>   else <br>      return(MapFileHandle); <br> <br>} <br> <br>/************************************************************************** <br> * HANDLE CreateMap(HANDLE FileToBeMapped, char *MapName ) <br> * <br> * Purpose: Create File Mapping object using the open file handle <br> * <br> * Inputs:  FileToBeMapped - handle to the file <br> * <br> * Returns: MapHandle - handle to the file mapping object <br> *                    or NULL if failure <br> * <br> * Calls:   CreateFileMapping, ErrorOut <br>\**************************************************************************/ <br> <br>HANDLE CreateMap(HANDLE FileToBeMapped, LPSTR MapName) <br>{ <br>   HANDLE MapHandle; <br> <br>   MapHandle= CreateFileMapping(FileToBeMapped, <br>                                NULL, <br>                                PAGE_READWRITE, <br>                                0, <br>                                4096, <br>                                MapName); <br> <br>   if (MapHandle == NULL) <br>   { <br>      ErrorOut("CreateFileMapping"); <br>      return(NULL); <br>   } <br>   else <br>      return(MapHandle); <br>} <br> <br> <br>/************************************************************************** <br> * LPVOID MapView(HANDLE hMap) <br> * <br> * Purpose: Map the file mapping object into address space <br> * <br> * Inputs:  hMap - handle to the mapping object <br> * <br> * Returns: MappedPointer - pointer to the address space that the <br> *                        object is mapped into <br> *                        or NULL if failure <br> * <br> * Calls:   MapViewOfFile, ErrorOut <br> * <br>\**************************************************************************/ <br> <br>LPVOID MapView(HANDLE hMap) <br>{ <br>   LPVOID MappedPointer; <br> <br>   MappedPointer= MapViewOfFile(hMap, <br>                                FILE_MAP_WRITE | FILE_MAP_READ, <br>                                0, 0, 4096); <br>   if (MappedPointer == NULL) <br>   { <br>      ErrorOut("MapViewOfFile"); <br>      return(NULL); <br>   } <br>   else <br>      return(MappedPointer); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NMMEMCLI.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6067"></a>NMMEMCLI.C</h2>
<pre><code>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include "memory.h" <br> <br> <br>/************************************************************************ <br> * void ErrorOut(LPSTR errstring) <br> * <br> * Purpose: Print out an meainful error code by means of <br> *        GetLastError and printf <br> * <br> * Inputs:  errstring - the action that failed, passed by the <br> *                    calling proc. <br> * <br> * Returns: none <br> * <br> * Calls:   GetLastError <br> * <br>\************************************************************************/ <br> <br> <br>void ErrorOut(LPSTR errstring) <br>{ <br>   DWORD Error; <br>   char  str[80]; <br> <br>   Error= GetLastError(); <br> <br>   wsprintf(str, GetStringRes(IDS_ERROR), errstring, Error); <br>   MessageBox(ghwndMain, str, NULL, MB_OK); <br>} <br> <br>/************************************************************************* <br> * HANDLE OpenMap(LPSTR MapName) <br> * <br> * Purpose: Open the mapping object pointed to by MapName <br> * <br> * Inputs: none <br> * <br> * Returns: handle to mapped object or NULL if failure <br> * <br> * Calls: OpenFileMapping, ErrorOut <br> * <br>\*************************************************************************/ <br> <br>HANDLE OpenMap( LPSTR MapName) <br>{ <br>   HANDLE hAMap; <br> <br>   hAMap= OpenFileMapping(FILE_MAP_READ | FILE_MAP_WRITE, <br>                          TRUE, <br>                          MapName); <br> <br>   if (hAMap == NULL) <br>   { <br>      ErrorOut("OpenFileMapping"); <br>      return(NULL); <br>   } <br>   else <br>      return(hAMap); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTF_DEFS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6075"></a>MTF_DEFS.H</h2>
<pre><code>/* <br> *  This is a part of the Microsoft Source Code Samples. <br> *  Copyright 1996 - 1998 Microsoft Corporation. <br> *  All rights reserved. <br> * <br> *This sample code shows the usage of some portions <br> *of the NTMS API. <br> * <br> *Return codes are, for the most part, not checked in <br> *this code. See the Programmer's reference for error <br> *return information. <br> * <br> * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br> * ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br> * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br> * PARTICULAR PURPOSE. <br> * <br> * Copyright 1997 - 1998 Microsoft Corporation.  All Rights Reserved. * <br> */ <br>#ifndef _MTF_DEFS_H <br>#define _MTF_DEFS_H <br> <br>#include &lt;rpc.h&gt; <br> <br>// make sure we are byte aligned ...  <br>#pragma pack(1)  <br> <br>// definitions from the MTF spec needed for media label identification ... <br>// <br>#define MTF_TapeDBLKLabel"TAPE" <br>#define MTF_TapeDBLKLabelSizestrlen (MTF_TapeDBLKLabel) <br> <br>// defines for StringType in common block header ...  <br>#define NO_STRINGS0x00 <br>#define ANSI_STR0x01 <br>#define UNICODE_STR0x02 <br> <br>// defines for MEDIA Attributes in tape header descriptior block <br>#define TAPE_SOFT_FILEMARK_BIT   0x0001 <br>#define TAPE_MEDIA_LABEL_BIT     0x0002 <br> <br>// define MTF_DateTime <br>typedef struct  <br>{ <br>     BYTETime[5] ; <br>} MTF_DateTime; <br> <br>// define MTF_TapeAddress <br>typedef struct  <br>{ <br>     WORD Size;         <br>     WORD Offset;       <br>} MTF_TapeAddress; <br> <br>// definition of the MTF_DBLKHdr - this exists in the first part of  <br>// all DBLKs in MTF. <br>typedef struct  <br>{  <br>     BYTEBlockType[4];          <br>     DWORDBlockAttributes;       <br>     WORDOffsetToFirstStream;   <br>     BYTEOSID;                  <br>     BYTEOSVersion;             <br>     DWORDLONGDisplayableSize;       <br>     DWORDLONG          FormatLogicalAddress;  <br>     WORDReservedForMBC;        <br>     WORDSoftwareCompression;   <br>     BYTE             Reserved1[4];          <br>     DWORDControlBlockId;      <br>     BYTEReserved2[4];          <br>     MTF_TapeAddressOSSpecificData;        <br>     BYTEStringType;            <br>     BYTEReserved3;  <br>     WORDHeaderCheckSum;    <br>} MTF_DBLKHdr; <br> <br> <br> <br>// definition of the MTF_TapeDBLK - this is the first DBLK that is recorded on  <br>// the physical media. This includes the MTF_DBLKHdr <br>typedef struct  <br>{ <br>     MTF_DBLKHdrBlockHeader; <br>     DWORD              TapeFamilyID; <br>     DWORD              TapeAttributes; <br>     WORDTapeSequenceNumber; <br>     WORDPasswordEncryptionAlgorithm; <br>     WORDECCAlgorithm; <br>     WORDTapeCatalogType; <br>     MTF_TapeAddress    TapeName; <br>     MTF_TapeAddress    TapeDescription; <br>     MTF_TapeAddress    TapePassword; <br>     MTF_TapeAddress    SoftwareName; <br>     WORDAlignmentFactor; <br>     WORDSoftwareVendorId; <br>     MTF_DateTimeTapeDate; <br>     BYTE               MTFMajorVersion; <br>} MTF_TapeDBLK; <br>// <br>// The MTF NTMS scratch label defines and struct <br>// <br> <br>#define MTF_NTMS_Tag L"MTF Media Label|" <br>#define MTF_NTMS_TagSize sizeof (MTF_NTMS_Tag) <br> <br>#define MTF_NTMS_Version L"1.0|" <br>#define MTF_NTMS_VersionSize sizeof(MTF_NTMS_Version) <br> <br>#define MTF_NTMS_Vendor L"Microsoft|" <br>#define MTF_NTMS_VendorSize sizeof(MTF_NTMS_Vendor) <br> <br>#define MTF_NTMS_ProductId L"NTMS|" <br>#define MTF_NTMS_ProductIdSize (sizeof(MTF_NTMS_ProductId)-1) <br> <br>#define MTF_NTMS_TimeSize 40 <br> <br>#define MTF_NTMS_Label L"|" <br>#define MTF_NTMS_LabelSize (sizeof(MTF_NTMS_Label)-1) <br> <br>#define MTF_NTMS_Side L"1|" <br>#define MTF_NTMS_SideSize (sizeof(MTF_NTMS_Side)-1) <br> <br>#define MTF_NTMS_MediaIDBlank L"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}|" <br>#define MTF_NTMS_MediaIDSize (sizeof(MTF_NTMS_MediaIDBlank)-1) <br> <br>#define MTF_NTMS_Domain L"|" <br>#define MTF_NTMS_DomainSize (sizeof(MTF_NTMS_Domain)-1) <br> <br>// reserved for future <br> <br>#define VendorSpecificSize 5 <br> <br>typedef struct <br>{ <br>BYTETag[MTF_NTMS_TagSize]; <br>BYTEVersion[MTF_NTMS_VersionSize]; <br>BYTEVendor[MTF_NTMS_VendorSize]; <br>BYTEVendorProductId[MTF_NTMS_ProductIdSize]; <br>BYTETime[MTF_NTMS_TimeSize]; <br>BYTELabel[MTF_NTMS_LabelSize]; // not used <br>BYTESide[MTF_NTMS_SideSize]; <br>BYTEMediaID[MTF_NTMS_MediaIDSize]; <br>BYTEDomainID[MTF_NTMS_DomainSize]; // not used <br>BYTEVS[VendorSpecificSize]; <br>} NTMS_MTF_MediaLabel; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

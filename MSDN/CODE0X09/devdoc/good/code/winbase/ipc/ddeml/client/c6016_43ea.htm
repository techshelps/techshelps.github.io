<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HUGE.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6022"></a>HUGE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*************************************************************************** <br> *                                                                         * <br> *  MODULE      : huge.c                                                   * <br> *                                                                         * <br> *  PURPOSE     : This contains functions useful for generating and        * <br> *                verifying huge text data blocks.                         * <br> *                                                                         * <br> ***************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ddeml.h&gt; <br>#include "huge.h" <br> <br>extern DWORD idInst; <br>#define BUFSZ   435 <br> <br>LONG lseed, lmult, ladd; <br>TCHAR szT[BUFSZ]; <br> <br>VOID SetMyRand(LONG seed, LONG mult, LONG add); <br>TCHAR MyRand(VOID); <br>BOOL RandTest(LONG length, LONG seed, LONG mult, LONG add); <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : SetMyRand()                                                * <br> *                                                                          * <br> *  PURPOSE    : Transfers random sequence generation variables to globals. * <br> *                                                                          * <br> ****************************************************************************/ <br>VOID SetMyRand( <br>LONG seed, <br>LONG mult, <br>LONG add) <br>{ <br>    lseed = seed; <br>    lmult = mult; <br>    ladd = add; <br>} <br> <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : MyRand()                                                   * <br> *                                                                          * <br> *  PURPOSE    : Generates the next random character in a sequence.         * <br> *                                                                          * <br> *  RETURNS    : the character generated                                    * <br> *                                                                          * <br> ****************************************************************************/ <br>TCHAR MyRand() <br>{ <br>    TCHAR c; <br> <br>    lseed = lseed * lmult + ladd; <br>    c = (TCHAR)(LOWORD(lseed) ^ HIWORD(lseed)); <br>    return((TCHAR)((c &amp; (TCHAR)0x4f) + TEXT(' ')));   // 0x20 - 0x6f - all printable <br>} <br> <br> <br>/* <br> * This function allocates and fills a HUGE data handle with a verifiable <br> * text string. <br> * <br> * The format of the text string is: <br> * "&lt;length&gt;=&lt;seed&gt;*&lt;mult&gt;+&lt;add&gt;;---data of length &lt;length&gt;---\0" <br> * all values are stored in base 16 numbers. <br> */ <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : CreateHugeDataHandle()                                     * <br> *                                                                          * <br> *  PURPOSE    : Generates a huge pseudo-random sequence of printable       * <br> *               characters of the length given and places then into        * <br> *               a DDEML data handle.                                       * <br> *                                                                          * <br> *  RETURNS    : The data handle created or 0 on failure.                   * <br> *                                                                          * <br> ****************************************************************************/ <br>HDDEDATA CreateHugeDataHandle( <br>LONG length, <br>LONG seed, <br>LONG mult, <br>LONG add, <br>HSZ hszItem, <br>DWORD wFmt, <br>DWORD afCmd) <br>{ <br>    register DWORD cb; <br>    HDDEDATA hData; <br>    DWORD cbData; <br>    TCHAR *psz; <br> <br>    wsprintf(szT, TEXT("%ld=%ld*%ld+%ld;"), length, seed, mult, add); <br>    cb = (_tcslen(szT) + 1) * sizeof(TCHAR); <br>    hData = DdeCreateDataHandle(idInst, (PBYTE)szT, cb, 0, hszItem, wFmt, afCmd); <br>    if (hData) <br>        hData = DdeAddData(hData, NULL, 0, cb + length); <br>    cbData = cb; <br>    SetMyRand(seed, mult, add); <br>    while (hData &amp;&amp; (length &gt; 0)) { <br>        psz = szT; <br>        cb = BUFSZ; <br>        while (cb--) <br>            *psz++ = MyRand(); <br>        hData = DdeAddData(hData, (PBYTE)szT, min(length, BUFSZ), cbData); <br>        cbData += BUFSZ; <br>        length -= BUFSZ; <br>    } <br>    return(hData); <br>} <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : CheckHugeData()                                            * <br> *                                                                          * <br> *  PURPOSE    : Verifies the correctness of a pseudo-random character      * <br> *               sequence generated by CreateHugeData.                      * <br> *                                                                          * <br> *  RETURNS    : TRUE if verified ok, FALSE otherwise.                      * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL CheckHugeData( <br>HDDEDATA hData) <br>{ <br>    LONG length; <br>    LONG seed; <br>    LONG mult; <br>    LONG add; <br>    TCHAR *psz; <br>    DWORD cbOff; <br>    DWORD cb; <br> <br>    if (!DdeGetData(hData, (PBYTE)szT, BUFSZ, 0)) <br>        return(FALSE); <br>    szT[BUFSZ - 1] = TEXT('\0'); <br>    psz = _tcschr(szT, TEXT(';')); <br>    if (psz == NULL) <br>        return(FALSE); <br>    *psz = TEXT('\0'); <br> <br>    if (_stscanf(szT, TEXT("%ld=%ld*%ld+%ld"), &amp;length, &amp;seed, &amp;mult, &amp;add) != 4) <br>        return(FALSE); <br> <br>    if (length &lt; 0) <br>        return(FALSE); <br>    SetMyRand(seed, mult, add); <br>    cbOff = _tcslen(szT) + 1; <br>    while (length &gt; 0) { <br>        DdeGetData(hData, (PBYTE)szT, BUFSZ, cbOff); <br>        psz = szT; <br>        cb = BUFSZ; <br>        while (length-- &amp;&amp; cb--) <br>            if (*psz++ != MyRand()) <br>                return(FALSE); <br>        cbOff += BUFSZ; <br>        length -= BUFSZ; <br>    } <br>    return(TRUE); <br>} <br> <br>#if 0 <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : RandTest()                                                 * <br> *                                                                          * <br> *  PURPOSE    : Verifies the correctness of CreateHugeDataHandle() and     * <br> *               CheckHugeData().                                           * <br> *                                                                          * <br> *  RETURNS    :                                                            * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL RandTest( <br>LONG length, <br>LONG seed, <br>LONG mult, <br>LONG add) <br>{ <br>    HDDEDATA hData; <br>    BOOL fSuccess; <br> <br>    hData = CreateHugeDataHandle(length, seed, mult, add, 0, 1, 0); <br>    if (!hData) <br>        return(FALSE); <br>    fSuccess = CheckHugeData(hData); <br>    DdeFreeDataHandle(hData); <br>    return(fSuccess); <br>} <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

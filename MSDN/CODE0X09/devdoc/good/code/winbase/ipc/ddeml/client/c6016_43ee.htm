<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MEM.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6026"></a>MEM.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*************************************************************************** <br> *                                                                         * <br> *  MODULE      : mem.c                                                    * <br> *                                                                         * <br> *  PURPOSE     : Functions for debugging memory allocation bugs.          * <br> *                                                                         * <br> ***************************************************************************/ <br>#include &lt;windows.h&gt; <br> <br>#define MAX_OBJECTS 200 <br> <br>PTSTR aptrs[MAX_OBJECTS]; <br>DWORD cptrs = 0; <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : DbgAlloc()                                                 * <br> *                                                                          * <br> *  PURPOSE    : Useful routine for catching memory allocation errors.      * <br> *               Enters allocated objects into an array to check when freed * <br> *                                                                          * <br> *  RETURNS    : pointer to object allocated.                               * <br> *                                                                          * <br> ****************************************************************************/ <br>PTSTR DbgAlloc( <br>register DWORD cb) <br>{ <br>    register PTSTR p; <br> <br>    p = (PTSTR)LocalAlloc(LPTR, cb); <br>    aptrs[cptrs++] = p; <br>    if (cptrs &gt;= MAX_OBJECTS) <br>        OutputDebugString(TEXT("Too many objects to track")); <br>    return p; <br>} <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : DbgFree()                                                  * <br> *                                                                          * <br> *  PURPOSE    : To free an object allocated with DbgAlloc().  Checks the   * <br> *               object array to make sure an object isn't freed twice.     * <br> *                                                                          * <br> *  RETURNS    :                                                            * <br> *                                                                          * <br> ****************************************************************************/ <br>PTSTR DbgFree( <br>register PTSTR p) <br>{ <br>    register DWORD i; <br> <br>    if (p == NULL) <br>        return p; <br> <br>    for (i = 0; i &lt; cptrs; i++) { <br>        if (aptrs[i] == p) { <br>            aptrs[i] = aptrs[cptrs - 1]; <br>            break; <br>        } <br>    } <br>    if (i == cptrs) { <br>        OutputDebugString(TEXT("Free on non-allocated object")); <br>        DebugBreak(); <br>    } else { <br>        LocalUnlock((HANDLE)p); <br>        p = (PTSTR)LocalFree((HANDLE)p); <br>    } <br>    cptrs--; <br>    return p; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6049"></a>DIALOG.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;string.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "server.h" <br>#include "huge.h" <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : DoDialog()                                                 * <br> *                                                                          * <br> *  PURPOSE    : Generic dialog invocation routine.  Handles procInstance   * <br> *               stuff, focus management and param passing.                 * <br> *  RETURNS    : result of dialog procedure.                                * <br> *                                                                          * <br> ****************************************************************************/ <br>INT FAR DoDialog( <br>LPTSTR lpTemplateName, <br>DLGPROC lpDlgProc, <br>LPARAM param, <br>BOOL fRememberFocus) <br>{ <br>    INT iRet; <br>    HWND hwndFocus; <br>    WORD cRunawayT; <br> <br>    cRunawayT = cRunaway; <br>    cRunaway = 0;           // turn off runaway during dialogs. <br> <br>    if (fRememberFocus) <br>        hwndFocus = GetFocus(); <br>    lpDlgProc = MakeProcInstance(lpDlgProc, hInst); <br>    iRet = DialogBoxParam(hInst, lpTemplateName, hwndServer, lpDlgProc, param); <br>    FreeProcInstance(lpDlgProc); <br>    if (fRememberFocus) <br>        SetFocus(hwndFocus); <br> <br>    cRunaway = cRunawayT;   // restore runaway state. <br>    return iRet; <br>} <br> <br> <br>/**************************************************************************** <br> <br>    FUNCTION: About(HWND, unsigned, WORD, LONG) <br> <br>    PURPOSE:  Processes messages for "About" dialog box <br> <br>    MESSAGES: <br> <br>        WM_INITDIALOG - initialize dialog box <br>        WM_COMMAND    - Input received <br> <br>    COMMENTS: <br> <br>        No initialization is needed for this particular dialog box, but TRUE <br>        must be returned to Windows. <br> <br>        Wait for user to click on "Ok" button, then close the dialog box. <br> <br>****************************************************************************/ <br> <br>BOOL  APIENTRY About(hDlg, message, wParam, lParam) <br>HWND hDlg;                                /* window handle of the dialog box */ <br>UINT message;                         /* type of message                 */ <br>WPARAM wParam;                              /* message-specific information    */ <br>LPARAM lParam; <br>{ <br>    switch (message) { <br>        case WM_INITDIALOG:                /* message: initialize dialog box */ <br>            return (TRUE); <br> <br>        case WM_COMMAND:                      /* message: received a command */ <br>            if (LOWORD(wParam) == IDOK                /* "OK" box selected?          */ <br>                || LOWORD(wParam) == IDCANCEL) {      /* System menu close command? */ <br>                EndDialog(hDlg, TRUE);        /* Exits the dialog box        */ <br>                return (TRUE); <br>            } <br>            break; <br>    } <br>    return (FALSE);                           /* Didn't process a message    */ <br>} <br> <br> <br> <br> <br>BOOL  APIENTRY RenderDelayDlgProc( <br>HWND          hwnd, <br>register UINT msg, <br>register WPARAM wParam, <br>LPARAM lParam) <br>{ <br>    switch (msg){ <br>    case WM_INITDIALOG: <br>        SetWindowText(hwnd, TEXT("Data Render Delay")); <br>        SetDlgItemInt(hwnd, IDEF_VALUE, RenderDelay, FALSE); <br>        SetDlgItemText(hwnd, IDTX_VALUE, TEXT("Delay in milliseconds:")); <br>        return(1); <br>        break; <br> <br>    case WM_COMMAND: <br>        switch (LOWORD(wParam)) { <br>        case IDOK: <br>            RenderDelay = GetDlgItemInt(hwnd, IDEF_VALUE, NULL, FALSE); <br>            // fall through <br>        case IDCANCEL: <br>            EndDialog(hwnd, 0); <br>            break; <br> <br>        default: <br>            return(FALSE); <br>        } <br>        break; <br>    } <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL  APIENTRY SetTopicDlgProc( <br>HWND          hwnd, <br>register UINT msg, <br>register WPARAM wParam, <br>LPARAM lParam) <br>{ <br>    TCHAR szT[MAX_TOPIC + 20]; <br> <br>    switch (msg){ <br>    case WM_INITDIALOG: <br>        SetWindowText(hwnd, TEXT("Set Topic Dialog")); <br>        SetDlgItemText(hwnd, IDEF_VALUE, szTopic); <br>        SetDlgItemText(hwnd, IDTX_VALUE, TEXT("Topic:")); <br>        return(1); <br>        break; <br> <br>    case WM_COMMAND: <br>        switch (LOWORD(wParam)) { <br>        case IDOK: <br>            DdeFreeStringHandle(idInst, topicList[1].hszTopic); <br>            GetDlgItemText(hwnd, IDEF_VALUE, szTopic, MAX_TOPIC); <br>            topicList[1].hszTopic = DdeCreateStringHandle(idInst, szTopic, 0); <br>            _tcscpy(szT, szServer); <br>            _tcscat(szT, TEXT(" | ")); <br>            _tcscat(szT, szTopic); <br>#ifdef UNICODE <br>            _tcscat(szT, TEXT(" (Unicode)")); <br>#endif <br>            SetWindowText(hwndServer, szT); <br>            // fall through <br>        case IDCANCEL: <br>            EndDialog(hwnd, 0); <br>            break; <br> <br>        default: <br>            return(FALSE); <br>        } <br>        break; <br>    } <br>    return(FALSE); <br>} <br> <br> <br>BOOL  APIENTRY SetServerDlgProc( <br>HWND          hwnd, <br>register UINT msg, <br>register WPARAM wParam, <br>LPARAM lParam) <br>{ <br>    TCHAR szT[MAX_TOPIC + 20]; <br> <br>    switch (msg){ <br>    case WM_INITDIALOG: <br>        SetWindowText(hwnd, TEXT("Set Server Name Dialog")); <br>        SetDlgItemText(hwnd, IDEF_VALUE, szServer); <br>        SetDlgItemText(hwnd, IDTX_VALUE, TEXT("Server:")); <br>        return(1); <br>        break; <br> <br>    case WM_COMMAND: <br>        switch (LOWORD(wParam)) { <br>        case IDOK: <br>            GetDlgItemText(hwnd, IDEF_VALUE, szServer, MAX_TOPIC); <br>            DdeNameService(idInst, hszAppName, 0, DNS_UNREGISTER); <br>            DdeFreeStringHandle(idInst, hszAppName); <br>            hszAppName = DdeCreateStringHandle(idInst, szServer, 0); <br>            DdeNameService(idInst, hszAppName, 0, DNS_REGISTER); <br>            _tcscpy(szT, szServer); <br>            _tcscat(szT, TEXT(" | ")); <br>            _tcscat(szT, szTopic); <br>#ifdef UNICODE <br>            _tcscat(szT, TEXT(" (Unicode)")); <br>#endif <br>            SetWindowText(hwndServer, szT); <br>            // fall through <br>        case IDCANCEL: <br>            EndDialog(hwnd, 0); <br>            break; <br> <br>        default: <br>            return(FALSE); <br>        } <br>        break; <br>    } <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL  APIENTRY ContextDlgProc( <br>HWND hwnd, <br>register UINT msg, <br>register WPARAM wParam, <br>LPARAM lParam) <br>{ <br>    BOOL fSuccess; <br> <br>    switch (msg){ <br>    case WM_INITDIALOG: <br>        SetDlgItemInt(hwnd, IDEF_FLAGS, CCFilter.wFlags, FALSE); <br>        SetDlgItemInt(hwnd, IDEF_COUNTRY, CCFilter.wCountryID, FALSE); <br>        SetDlgItemInt(hwnd, IDEF_CODEPAGE, CCFilter.iCodePage, TRUE); <br>        SetDlgItemInt(hwnd, IDEF_LANG, LOWORD(CCFilter.dwLangID), FALSE); <br>        SetDlgItemInt(hwnd, IDEF_SECURITY, LOWORD(CCFilter.dwSecurity), FALSE); <br>        CheckRadioButton(hwnd, IDRB_IL_ANON, IDRB_IL_DELEGATE, <br>                IDRB_IL_ANON + (int)CCFilter.qos.ImpersonationLevel); <br>        return(1); <br>        break; <br> <br>    case WM_COMMAND: <br>        switch (LOWORD(wParam)) { <br>        case IDOK: <br>            CCFilter.wFlags = GetDlgItemInt(hwnd, IDEF_FLAGS, &amp;fSuccess, FALSE); <br>            if (!fSuccess) return(0); <br>            CCFilter.wCountryID = GetDlgItemInt(hwnd, IDEF_COUNTRY, &amp;fSuccess, FALSE); <br>            if (!fSuccess) return(0); <br>            CCFilter.iCodePage = GetDlgItemInt(hwnd, IDEF_CODEPAGE, &amp;fSuccess, TRUE); <br>            if (!fSuccess) return(0); <br>            CCFilter.dwLangID = (DWORD)GetDlgItemInt(hwnd, IDEF_LANG, &amp;fSuccess, FALSE); <br>            if (!fSuccess) return(0); <br>            CCFilter.dwSecurity = (DWORD)GetDlgItemInt(hwnd, IDEF_SECURITY, &amp;fSuccess, FALSE); <br>            if (!fSuccess) return(0); <br> <br>            if (IsDlgButtonChecked(hwnd, IDRB_IL_ANON)) { <br>                CCFilter.qos.ImpersonationLevel = SecurityAnonymous; <br>            } else if (IsDlgButtonChecked(hwnd, IDRB_IL_ID)) { <br>                CCFilter.qos.ImpersonationLevel = SecurityIdentification; <br>            } else if (IsDlgButtonChecked(hwnd, IDRB_IL_IMP)) { <br>                CCFilter.qos.ImpersonationLevel = SecurityImpersonation; <br>            } else if (IsDlgButtonChecked(hwnd, IDRB_IL_DELEGATE)) { <br>                CCFilter.qos.ImpersonationLevel = SecurityDelegation; <br>            } <br> <br>            // fall through <br>        case IDCANCEL: <br>            EndDialog(hwnd, 0); <br>            break; <br> <br>        default: <br>            return(FALSE); <br>        } <br>        break; <br>    } <br>    return(FALSE); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDEPROCS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6038"></a>DDEPROCS.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/* <br>   ddeprocs.c <br>*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "ddeinst.h" <br>#include "ddextrn.h" <br>#include "dialogs.h" <br> <br>// function prototype for List synchronization <br>void   SynchronizeLists (HWND); <br>void   SynchronizeListSelection (HWND); <br> <br>// function prototype for child window creation  <br>void   CreateChildren (HWND); <br> <br>// internal thread counter <br>int    iThreadCount = 0; <br> <br>/******************************************************************** <br> <br>   MainWndProc. <br>    <br>   Function that processes the messages sent to the main window. <br> <br>********************************************************************/ <br> <br>LRESULT APIENTRY MainWndProc (HWND hwnd, UINT uiMsg, WPARAM wParam, <br>      LPARAM lParam) { <br>   BOOL        fFlag; <br> <br>   switch (uiMsg) { <br>      case WM_CREATE: { <br> <br>// Create all of the child windows that are desired. <br>         CreateChildren (hwnd); <br>         break; <br>      }/*endCase*/ <br>      case WM_DESTROY: { <br>         PostQuitMessage (0); <br>         return (0L); <br>      }/*endCase*/ <br>      case WM_USER_CLOSE_DIALOG: { <br>         if (hwndDialog) { <br>            DestroyWindow (hwndDialog); <br>            hwndDialog = (HWND) NULL; <br>            return (TRUE); <br>         }/*endIf*/ <br>         break; <br>      }/*endCase*/ <br>      case WM_SIZE: { <br>      /* Need to resize the StatusBar */ <br>         if (hwndStatus) { <br>            long lHeight; <br>            int  iWidth; <br>            int  iHeight; <br> <br>            iWidth = LOWORD (lParam); <br>            iHeight = HIWORD (lParam); <br>            lHeight = GetWindowLong (hwndStatus, GWL_USERDATA); <br>            MoveWindow (hwndStatus, -1, iHeight - (int) lHeight, <br>                  iWidth + 2, lHeight + 2, TRUE); <br>         }/*endIf*/ <br>         break; <br>      }/*endCase*/ <br>      case WM_USER_GET_APPS: { <br>         StartTraverseThread (szUserPath); <br>         return (1L); <br>      }/*endCase*/ <br>      case WM_USER_GET_GROUPS: { <br>         StartGroupRetrievalThread (); <br>         return (1L); <br>      }/*endCase*/ <br>      case WM_USER_THREAD_DONE: { <br>         iThreadCount++; <br>         if (!fBatch) { <br>            break; <br>         }/*endIf*/ <br>         if (iThreadCount == 2) { <br>            PostMessage (ghwndMain, WM_COMMAND, <br>                  (WPARAM) MAKELONG (ID_ADDALLBUTTON, BN_CLICKED), <br>                  (LPARAM) hwndAddAll); <br>            PostMessage (ghwndMain, WM_COMMAND, <br>                  (WPARAM) MAKELONG (ID_ADDGROUP, BN_CLICKED), <br>                  (LPARAM) hwndAddGroupButton); <br>            PostMessage (ghwndMain, WM_COMMAND, <br>                  (WPARAM) MAKELONG (ID_ADDBUTTON, BN_CLICKED),  <br>                  (LPARAM) hwndAddButton); <br>            iThreadCount = 0; <br>         }/*endIf*/ <br>         break; <br>      }/*endCase*/ <br>      case WM_COMMAND: { <br>         switch (HIWORD (wParam)) { <br>            case LBN_SELCHANGE: { <br>               SynchronizeListSelection ((HWND) lParam); <br>               if ((HWND) lParam == hwndCombo) { <br>                  EnableWindow (hwndAddGroupButton, TRUE); <br>               }/*endIf*/ <br>               break; <br>            }/*endCase*/ <br>            case CBN_EDITCHANGE: { <br>               fFlag = (BOOL) GetWindowTextLength (hwndCombo); <br>               EnableWindow (hwndAddGroupButton, fFlag); <br>               break; <br>            }/*endCase*/ <br>            case BN_CLICKED: { <br>               switch (LOWORD (wParam)) { <br>                  case ID_ADDALLBUTTON: { <br> <br>               // Select all elements in the two lists. <br>               // Under Win 3.x LPARAM of LB_SETSEL is MAKELPARAM (-1, 0) <br>               // Under Win32 it is -1 <br>                <br>                     SendMessage (hwndFileList, LB_SETSEL, (WPARAM) TRUE, <br>                           (LPARAM) -1); <br> <br>               // Under Win 3.x LPARAM of LB_SETSEL is MAKELPARAM (-1, 0) <br>               // Under Win32 it is -1 <br>                <br>                     SendMessage (hwndFileList2, LB_SETSEL, (WPARAM) TRUE, <br>                           (LPARAM) -1); <br>                     break; <br>                  }/*endCase*/ <br>                  case ID_EXITBUTTON: { <br>                     PostQuitMessage (0); <br>                     break; <br>                  }/*endCase*/ <br>                  case ID_ADDBUTTON: { <br>                  // Create the Progress Dialog <br>                     hwndDialog = CreateDialog (ghModule, <br>                           "ProgressDialog", hwnd, ProgressDlgWndProc); <br> <br>                  // Start a thread to add the items  <br>                     StartAddThread (); <br>                     break; <br>                  }/*endCase*/ <br>                  case ID_ADDGROUP: { <br> <br>                  // Add the user defined group. <br>                     CreateGroup (); <br>                     break; <br>                  }/*endCase*/ <br>               }/*endSwitch*/ <br>               break; <br>            }/*endCase*/ <br>         }/*endSwitch*/ <br> <br>     // Process menu events now. <br> <br>         switch (LOWORD (wParam)) { <br>            case DI_EXIT: { <br>               PostQuitMessage (0); <br>               return (1L); <br>            }/*endCase*/ <br>            case DI_ABOUT: { <br>               DialogBox (ghModule, "AboutBox", hwnd, <br>                     (DLGPROC) AboutBoxWndProc); <br>               break; <br>            }/*endCase*/ <br>         }/*endSwitch*/ <br>         break; <br>      }/*endCase*/ <br>   }/*endSwitch*/ <br>   return (DefWindowProc (hwnd, uiMsg, wParam, lParam)); <br>}/* end MainWndProc */ <br> <br>/******************************************************************** <br> <br>   StatusBarWndProc. <br>    <br>   Function that manages the Status bar at the bottom of the main  <br>   window. <br> <br>********************************************************************/ <br> <br>LRESULT APIENTRY StatusBarWndProc (HWND hwnd, UINT uiMsg, WPARAM wParam, <br>      LPARAM lParam) { <br>   HDC             hdc; <br>   long            lHeight; <br>   RECT            rc; <br>   PAINTSTRUCT     ps; <br>   TEXTMETRIC      tm; <br>   POINT           pts[6]; <br> <br>   switch (uiMsg) { <br>      case WM_CTLCOLORSTATIC: { <br>         SetBkMode ((HDC) wParam, TRANSPARENT); <br>         return ((LRESULT) GetStockObject (WHITE_BRUSH)); <br>      }/*endCase*/ <br>      case WM_CREATE: { <br>         hdc = GetDC (hwnd); // Get the DC for text metrics <br> <br>         GetClientRect (GetParent (hwnd), &amp;rc); <br>         GetTextMetrics (hdc, &amp;tm); <br> <br>      // Calculate the height of the window <br>         lHeight = tm.tmHeight + 10 * GetSystemMetrics (SM_CYBORDER) + 2; <br> <br>      // Save away the calculated height <br>         SetWindowLong (hwnd, GWL_USERDATA, lHeight); <br> <br>      //* resize the window <br>         SetWindowPos (hwnd, NULL, -1, rc.bottom - lHeight, <br>            rc.right + 2, lHeight + 2, SWP_NOZORDER | SWP_NOMOVE); <br> <br>         ReleaseDC (hwnd, hdc); <br>         break; <br>      }/*endCase*/ <br>      case WM_USER_UPDATE_STATUS: { <br>         switch (lParam) { <br>            case ID_DDEML_CONNECT: { <br>               SetWindowText (hwndStatusText, "DDEML Connection"); <br>               break; <br>            }/*endCase*/ <br>            case ID_DDEML_RETRIEVING: { <br>               SetWindowText (hwndStatusText, "DDEML Retrieving"); <br>               break; <br>            }/*endCase*/ <br>            case ID_DDEML_DISCONNECT: { <br>               SetWindowText (hwndStatusText, "DDEML Disconnect"); <br>               break; <br>            }/*endCase*/ <br>            case ID_DDEML_COMPLETE: { <br>               SetWindowText (hwndStatusText, "DDEML Complete"); <br>               break; <br>            }/*endCase*/ <br>            case ID_DDEML_ACTIVATE: { <br>               SetWindowText (hwndStatusText, "DDEML Activate Group"); <br>               break; <br>            }/*endCase*/ <br>            case ID_DDEML_CREATE: { <br>               SetWindowText (hwndStatusText, "DDEML Create Group"); <br>               break; <br>            }/*endCase*/ <br>            case ID_DDEML_ADD: { <br>               TCHAR   szText[32]; <br> <br>               sprintf (szText, "DDEML Add Item %ld", wParam); <br>               SetWindowText (hwndStatusText, szText); <br>               break; <br>            }/*endCase*/ <br>         }/*endSwitch*/ <br>         break; <br>      }/*endCase*/ <br>      case WM_PAINT: { <br>         HBRUSH   hBrush; <br>         HBRUSH   hBrushTemp; <br>         HPEN     hPen; <br>         HPEN     hPenTemp; <br> <br>         hdc = BeginPaint (hwnd, &amp;ps); <br>         GetClientRect (hwnd, &amp;rc); <br> <br>         lHeight = GetWindowLong (hwnd, GWL_USERDATA); <br>         pts[0].x = 3; <br>         pts[0].y = pts[5].y = lHeight - 4; <br>         pts[1].x = 6; <br>         pts[1].y = pts[2].y = lHeight - 6; <br>         pts[2].x = pts[3].x = (rc.right / 2) - 4; <br>         pts[3].y = 6; <br>         pts[4].y = 3; <br>         pts[4].x = pts[5].x = rc.right / 2; <br>         hBrush = GetStockObject (WHITE_BRUSH); <br>         hPen = GetStockObject (WHITE_PEN); <br>         hBrushTemp = SelectObject (hdc, hBrush); <br>         hPenTemp = SelectObject (hdc, hPen); <br>         SetPolyFillMode (hdc, WINDING); <br>         Polygon (hdc, pts, 6); <br>         hBrush = CreateSolidBrush (GetSysColor (COLOR_BTNSHADOW)); <br>         pts[2].x = 6; <br>         hPen = CreatePen (PS_SOLID, 1, GetSysColor (COLOR_BTNSHADOW)); <br>         pts[2].y = 6; <br>         pts[5].x = pts[5].y = 3; <br>         SelectObject (hdc, hBrush); <br>         SelectObject (hdc, hPen); <br>         Polygon (hdc, pts, 6); <br>         rc.left = rc.top = 7; <br>         rc.right = (rc.right / 2) - 4; <br>         rc.bottom = lHeight - 7; <br>         SelectObject (hdc, hBrushTemp); <br>         SelectObject (hdc, hPenTemp); <br>         DeleteObject (hBrush); <br>         DeleteObject (hPen); <br>         hBrush = GetStockObject (WHITE_BRUSH); <br>         FillRect (hdc, &amp;rc, hBrush); <br>         DeleteObject (hBrush); <br>         EndPaint (hwnd, &amp;ps); <br>         return (0L); <br>      }/*endCase*/ <br>   }/*endSwitch*/ <br>   return (DefWindowProc (hwnd, uiMsg, wParam, lParam)); <br>}/* end StatusBarWndProc */ <br> <br>/******************************************************************** <br> <br>   ListBoxWndProc. <br>    <br>   Function that manages the list boxes that are on the screen. Subclassed <br>   to provide additional functionality. <br> <br>********************************************************************/ <br> <br>LRESULT APIENTRY ListBoxWndProc (HWND hwnd, UINT uiMsg, WPARAM wParam, <br>      LRESULT lParam) { <br> <br>   switch (uiMsg) { <br>      case WM_KEYUP: { <br>         SynchronizeLists (hwnd); <br>         break; <br>      }/*endCase*/ <br>      case WM_VSCROLL: { <br>         SynchronizeLists (hwnd); <br>         break; <br>      }/*endCase*/ <br>      break; <br>   }/*endSwitch*/ <br>   return (CallWindowProc (DefListBoxWndProc, hwnd, uiMsg, wParam, lParam)); <br>}/* end ListBoxWndProc */ <br> <br>/******************************************************************** <br> <br>   SynchronizeLists. <br>    <br>   Function that makes sure that the two lists are synchronized and  <br>   always have the same selection. <br> <br>********************************************************************/ <br> <br>void SynchronizeLists (HWND hwnd) { <br>   HWND   hwndOther; <br>   long   lSourceTop; <br>   long   lTargetTop; <br> <br>// If this is from the combo list then return. <br>   if (hwnd == hwndCombo) { <br>      return; <br>   }/*endIf*/ <br> <br>// Figure out which list caused the event and update the other. <br>   if (hwnd == hwndFileList) { <br>      hwndOther = hwndFileList2; <br>   } else { <br>      hwndOther = hwndFileList; <br>   }/*endIf*/ <br> <br>// Get the top index of the source list. <br>   lSourceTop = SendMessage (hwnd, LB_GETTOPINDEX, 0, 0L); <br> <br>// Get the top index of the target list. <br>   lTargetTop = SendMessage (hwndOther, LB_GETTOPINDEX, 0, 0L); <br> <br>// If the top indexes are different set the top of the target to the <br>// same value as the source. <br>   if (lSourceTop != lTargetTop) { <br>      SendMessage (hwndOther, LB_SETTOPINDEX, lSourceTop, 0L); <br>   }/*endIf*/ <br>}/* end SynchronizeLists */ <br> <br>/******************************************************************** <br> <br>   SynchronizeListSelection. <br>    <br>   Function that actually manages the list selection. <br> <br>********************************************************************/ <br> <br>void SynchronizeListSelection (HWND hwnd) { <br>   HWND   hwndOther; <br>   long   lNumSel; <br>   int   * lpSelection; <br>   long   lIndex; <br> <br>// If this is from the combo list then return. <br> <br>   if (hwnd == hwndCombo) { <br>      return; <br>   }/*endIf*/ <br> <br>// Figure out which list caused the event and update the other. <br> <br>   if (hwnd == hwndFileList) { <br>      hwndOther = hwndFileList2; <br>   } else { <br>      hwndOther = hwndFileList; <br>   }/*endIf*/ <br> <br>// Find out how many items are selected in the source list. <br> <br>   lNumSel = SendMessage (hwnd, LB_GETSELCOUNT, 0, 0L); <br>   if (lNumSel != LB_ERR &amp;&amp; lNumSel != 0) { <br> <br>   // Allocate a block of memory to hold the selection indexes. <br>      lpSelection = (int *) GlobalAlloc (GMEM_FIXED | GMEM_ZEROINIT, <br>         lNumSel * sizeof (int)); <br>      if (lpSelection) { <br> <br>   // Clear the selection in the list before reselecting. <br>   // Under Win 3.x LPARAM of LB_SETSEL is MAKELPARAM (-1, 0) <br>   // Under Win32 it is -1 <br>                <br>         SendMessage (hwndOther, LB_SETSEL, (WPARAM) FALSE, (LPARAM) -1); <br> <br>   // Retrieve the selection indexes. <br> <br>         SendMessage (hwnd, LB_GETSELITEMS, lNumSel, (LPARAM) lpSelection); <br> <br>   // Loop the indexes selecting the same values in the target list. <br> <br>         for (lIndex = 0; lIndex &lt; lNumSel; lIndex++) { <br>            SendMessage (hwndOther, LB_SETSEL, (WPARAM) TRUE, <br>               MAKELPARAM (lpSelection[lIndex], 0)); <br>         }/*endFor*/ <br> <br>   // Release the memory that was allocated. <br> <br>         GlobalFree (lpSelection); <br>      }/*endIf*/ <br>   }/*endIf*/ <br>}/* end SynchronizeListSelection */ <br> <br>/******************************************************************** <br> <br>   CreateChildren. <br>    <br>   Function that creates all of the child windows for the app. <br> <br>********************************************************************/ <br> <br>void CreateChildren (HWND hwnd) { <br>   int              iListHeight; <br>   long             lHeight; <br>   RECT             rc; <br> <br>// Create the status bar at the bottom of the window. <br>   hwndStatus = CreateWindow ("StatusBar", NULL, <br>         WS_BORDER | SS_LEFT | WS_CHILD | WS_VISIBLE, <br>         0, 0, 0, 0, hwnd, (HMENU) ID_STATUSBAR, ghModule, NULL); <br> <br>// Retrieve the height of the status bar. <br>   lHeight = GetWindowLong (hwndStatus, GWL_USERDATA); <br> <br>// Retrieve the size of the client area of the status bar. <br>   GetClientRect (hwndStatus, &amp;rc); <br> <br>   hwndStatusText = CreateWindow ("Static", "Status Bar", <br>         WS_VISIBLE | WS_CHILD | SS_LEFT, <br>         7, 7, rc.right / 2 - 10, lHeight - 14, hwndStatus, (HMENU) 0, ghModule, <br>         NULL); <br> <br>// Retrieve the size of the client area of the parent window <br>   GetClientRect (hwnd, &amp;rc); <br> <br>// Calculate the size of a list box. <br>   iListHeight = rc.bottom - lHeight * 2; <br> <br>// Decrease the size of lHeight to compensate for size of status bar. <br>   lHeight -= 8; <br> <br>// Create a Static window in the upper left corner. <br>   CreateWindow ("Static", "Available exe's", <br>         WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS | SS_LEFT, <br>         0, 0, 200, lHeight - 2, hwnd, (HMENU) 0, ghModule, NULL); <br> <br>// Create the first list to hold the file name. <br>   hwndFileList = CreateWindow ("ListBox", NULL, WS_CLIPSIBLINGS | LBS_NOTIFY | <br>         WS_BORDER | WS_VISIBLE | WS_CHILD | LBS_EXTENDEDSEL | LBS_HASSTRINGS, <br>         0, lHeight, 150, iListHeight, hwnd, (HMENU) ID_FILELIST, ghModule, <br>         NULL); <br> <br>// Subclass the list box window proc so we can do the synchronization <br>   DefListBoxWndProc = (WNDPROC) GetWindowLong (hwndFileList, GWL_WNDPROC); <br>   SetWindowLong (hwndFileList, GWL_WNDPROC, (LONG) ListBoxWndProc); <br> <br>// Create the second list box that holds the name that will be used in the <br>// Program Manager. <br>   hwndFileList2 = CreateWindow ("ListBox", NULL, <br>         WS_BORDER | WS_VISIBLE | WS_CHILD | WS_VSCROLL | LBS_EXTENDEDSEL | <br>         LBS_NOTIFY | LBS_HASSTRINGS | LBS_SORT | WS_CLIPSIBLINGS, 150, <br>         lHeight, 150, iListHeight, hwnd, (HMENU) ID_FILELIST2, ghModule, <br>         NULL); <br> <br>// Subclass the list. <br>   SetWindowLong (hwndFileList2, GWL_WNDPROC, (LONG) ListBoxWndProc); <br> <br>// Create a third list box that is not visible that contains the absolute <br>// path to the executable. <br>   hwndPathList = CreateWindow ("ListBox", NULL, <br>         WS_BORDER | WS_CHILD | WS_VSCROLL | LBS_EXTENDEDSEL | <br>         LBS_NOTIFY | LBS_HASSTRINGS | LBS_SORT | WS_CLIPSIBLINGS, 150, lHeight, <br>         150, iListHeight, hwnd, (HMENU) ID_PATHLIST, ghModule, NULL); <br> <br>// Create a button that is used to add a group. <br>   hwndAddGroupButton = CreateWindow ("Button", "Add Group", <br>         WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS, <br>         rc.right - 110, iListHeight - (int) (lHeight * 4), <br>         100, lHeight, hwnd, (HMENU) ID_ADDGROUP, ghModule, NULL); <br> <br>// Create the button that is used to add the selected items. <br>   hwndAddButton = CreateWindow ("Button", "Add Items", <br>         WS_DISABLED | WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS, <br>         rc.right - 110, iListHeight - (int) (lHeight * 3), <br>         100, lHeight, hwnd, (HMENU) ID_ADDBUTTON, ghModule, NULL); <br> <br>// Create the button that is used to select all of the items in the list. <br>   hwndAddAll = CreateWindow ("Button", "Select All", <br>         WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS, <br>         rc.right - 110, iListHeight - (int) (lHeight * 2), <br>         100, lHeight, hwnd, (HMENU) ID_ADDALLBUTTON, ghModule, NULL); <br> <br>// Create a button that can be used to exit the application. <br>   hwndExitButton = CreateWindow ("Button", "Exit", <br>         WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS, <br>         rc.right - 110, iListHeight - (int) lHeight, 100, lHeight, hwnd, <br>         (HMENU) ID_EXITBUTTON, ghModule, NULL); <br> <br>// Create a drop down combo box for the group names from the Program Manager. <br>   hwndCombo = CreateWindow ("ComboBox", NULL, <br>         WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS | CBS_DROPDOWN | WS_VSCROLL | <br>         CBS_AUTOHSCROLL | CBS_HASSTRINGS, rc.right - 200, lHeight, <br>         190, lHeight * 5, hwnd, (HMENU) ID_COMBOBOX, ghModule, NULL); <br> <br>// Create a Static window to label the combo box. <br>   CreateWindow ("Static", "Available Groups", <br>         WS_VISIBLE | WS_CHILD | WS_CLIPSIBLINGS | SS_LEFT, <br>         rc.right - 200, 0, 190, lHeight - 2, hwnd, (HMENU) 0, ghModule, NULL); <br>}/* end CreateChildren */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIENT.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6016"></a>CLIENT.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;ddeml.h&gt; <br>#include &lt;tchar.h&gt; <br> <br>#define WINDOWMENU  3   /* position of window menu               */ <br> <br>/* resource ID's */ <br>#define IDCLIENT  1 <br>#define IDCONV    2 <br>#define IDLIST    3 <br> <br> <br>/* menu ID's */ <br> <br>#define IDM_EDITPASTE           2004 <br> <br>#define IDM_CONNECT             3000    // enabled always <br>#define IDM_RECONNECT           3001    // enabled if list selected <br>#define IDM_DISCONNECT          3002    // enabled if conversation selected <br>#define IDM_TRANSACT            3003    // enabled if conversation selected <br>#define IDM_ABANDON             3004    // enabled if transaction selected <br>#define IDM_ABANDONALL          3005    // enabled if conv. selected &amp;&amp; <br>                                        // and any transaction windows exist <br> <br>#define IDM_BLOCKCURRENT        3010    // enabled if conv. sel.  chkd if conv. blocked <br>#define IDM_ENABLECURRENT       3011    // enabled if conv. sel.  chkd if not blocked <br>#define IDM_ENABLEONECURRENT    3012    // enabled if conv. sel. <br> <br>#define IDM_BLOCKALLCBS         3013    // enabled if any convs. <br>#define IDM_ENABLEALLCBS        3014    // enabled if any convs. <br>#define IDM_ENABLEONECB         3015    // enabled if any convs. <br> <br>#define IDM_BLOCKNEXTCB         3016    // enabled always, chkd if set. <br>#define IDM_TERMNEXTCB          3017    // enabled if any convs.  chked if set. <br> <br>#define IDM_TIMEOUT             3021 <br>#define IDM_DELAY               3022 <br>#define IDM_CONTEXT             3023 <br>#define IDM_AUTORECONNECT       3024 <br> <br>#define IDM_WINDOWTILE          4001 <br>#define IDM_WINDOWCASCADE       4002 <br>#define IDM_WINDOWCLOSEALL      4003 <br>#define IDM_WINDOWICONS         4004 <br> <br>#define IDM_XACTTILE            4005 <br>#define IDM_XACTCASCADE         4006 <br>#define IDM_XACTCLOSEALL        4007 <br> <br>#define IDM_WINDOWCHILD         4100 <br> <br>#define IDM_HELP                5001 <br>#define IDM_HELPABOUT           5002 <br> <br> <br>#define DEFTIMEOUT              1000 <br> <br>#include "dialog.h" <br> <br>// predefined format list item <br> <br>typedef struct { <br>    DWORD fmt; <br>    PTSTR sz; <br>} FORMATINFO; <br>#define CFORMATS 3 <br> <br>// conversation (MDI child) window information <br>typedef struct { <br>    HWND hwndXaction;       // last xaction window with focus, 0 if none. <br>    BOOL fList; <br>    HCONV hConv; <br>    HSZ hszTopic; <br>    HSZ hszApp; <br>    INT x;          // next child coord. <br>    INT y; <br>    CONVINFO ci; // most recent status info. <br>} MYCONVINFO;       // parameters to AddConv() in reverse order. <br>#define CHILDCBWNDEXTRA     sizeof(HWND) <br>#define UM_GETNEXTCHILDX    (WM_USER + 200) <br>#define UM_GETNEXTCHILDY    (WM_USER + 201) <br>#define UM_DISCONNECTED     (WM_USER + 202) <br> <br>// transaction processing structure - this structure is associated with <br>// infoctrl control windows.  A handle to this structure is placed into <br>// the first window word of the control. <br>typedef struct {    // used to passinfo to/from TransactionDlgProc and <br>    DWORD ret;      // TextEntryDlgProc. <br>    DWORD Result; <br>    DWORD ulTimeout; <br>    DWORD wType; <br>    HCONV hConv; <br>    HDDEDATA hDdeData; <br>    DWORD wFmt; <br>    HSZ hszItem; <br>    DWORD fsOptions; <br>} XACT; <br> <br>typedef struct { <br>    HDDEDATA hData; <br>    HSZ hszItem; <br>    DWORD wFmt; <br>} OWNED; <br> <br>// transaction option flags - for fsOptions field and DefOptions global. <br> <br>#define XOPT_NODATA             0x0001 <br>#define XOPT_ACKREQ             0x0002 <br>#define XOPT_DISABLEFIRST       0x0004 <br>#define XOPT_ABANDONAFTERSTART  0x0008 <br>#define XOPT_BLOCKRESULT        0x0010 <br>#define XOPT_ASYNC              0x0020 <br>#define XOPT_COMPLETED          0x8000      // used internally only. <br> <br>/* strings */ <br>#define IDS_ILLFNM              1 <br>#define IDS_ADDEXT              2 <br>#define IDS_CLOSESAVE       3 <br>#define IDS_HELPNOTAVAIL    4 <br>#define IDS_CLIENTTITLE     5 <br>#define IDS_APPNAME             6 <br>#define IDS_DDEMLERR        7 <br>#define IDS_BADLENGTH       8 <br> <br>/* attribute flags for DlgDirList */ <br>#define ATTR_DIRS       0xC010          /* find drives and directories */ <br>#define ATTR_FILES      0x0000          /* find ordinary files         */ <br>#define PROP_FILENAME   szPropertyName  /* name of property for dialog */ <br>#define MAX_OWNED   20 <br> <br>/* <br> *  GLOBALS <br> */ <br>extern CONVCONTEXT CCFilter; <br>extern DWORD idInst; <br>extern HANDLE hInst;            /* application instance handle            */ <br>extern HANDLE hAccel;           /* resource handle of accelerators        */ <br>extern HWND hwndFrame;          /* main window handle                     */ <br>extern HWND hwndMDIClient;      /* handle of MDI Client window            */ <br>extern HWND hwndActive;         /* handle of current active MDI child     */ <br>extern HWND hwndActiveEdit;     /* handle of edit control in active child */ <br>extern LONG styleDefault;       /* default child creation state           */ <br>extern DWORD SyncTimeout; <br>extern LONG DefTimeout; <br>extern DWORD wDelay; <br>extern BOOL fEnableCBs; <br>extern BOOL fEnableOneCB; <br>extern BOOL fBlockNextCB; <br>extern BOOL fTermNextCB; <br>extern BOOL fAutoReconnect; <br>extern HDDEDATA hDataOwned; <br>extern DWORD fmtLink;        // registered LINK clipboard fmt <br>extern DWORD DefOptions; <br>extern TCHAR szChild[];          /* class of child                         */ <br>extern TCHAR szList[];           /* class of child                         */ <br>extern TCHAR szSearch[];         /* search string                          */ <br>extern TCHAR *szDriver;          /* name of printer driver                 */ <br>extern TCHAR szPropertyName[];   /* filename property for dialog box       */ <br>extern INT iPrinter;            /* level of printing capability           */ <br>extern BOOL fCase;              /* searches case sensitive                */ <br>extern DWORD cFonts;            /* number of fonts enumerated             */ <br>extern FORMATINFO aFormats[]; <br>extern OWNED aOwned[MAX_OWNED]; <br>extern DWORD cOwned; <br>extern FARPROC lpMsgFilterProc; <br>extern HSZ hszHuge; <br>extern HHOOK ghhk; <br> <br> <br>// MACROS <br> <br>#ifdef NODEBUG <br>#define MyAlloc(cb)     (PTSTR)LocalAlloc(LPTR, (cb)) <br>#define MyFree(p)       (LocalUnlock((HANDLE)(p)), LocalFree((HANDLE)(p))) <br>#else   // DEBUG <br> <br>#define MyAlloc(cb)     DbgAlloc((DWORD)cb) <br>#define MyFree(p)       DbgFree((PTSTR)p) <br>#endif //NODEBUG <br> <br> <br>/*  externally declared functions <br> */ <br> <br>// client.c <br> <br>BOOL  APIENTRY InitializeApplication(VOID); <br>BOOL  APIENTRY InitializeInstance(DWORD); <br>INT FAR cdecl MPError(DWORD,DWORD, ...); <br>LONG  APIENTRY FrameWndProc(HWND, UINT, WPARAM, LPARAM); <br>LONG  APIENTRY MDIChildWndProc(HWND, UINT, WPARAM, LPARAM); <br>HCONV CreateConv(HSZ hszApp, HSZ hszTopic, BOOL fList); <br>HWND  APIENTRY AddConv(HSZ hszApp, HSZ hszTopic, HCONV hConv, BOOL fList); <br>PTSTR GetConvListText(HCONVLIST hConvList); <br>PTSTR GetConvInfoText(HCONV hConv, CONVINFO *pci); <br>PTSTR GetConvTitleText(HCONV hConv, HSZ hszApp, HSZ hszTopic, BOOL fList); <br>PTSTR Status2String(DWORD status); <br>PTSTR State2String(DWORD state); <br>PTSTR Error2String(DWORD error); <br>PTSTR Type2String(DWORD wType, DWORD fsOptions); <br>PTSTR GetHSZName(HSZ hsz); <br>LRESULT CALLBACK MyMsgFilterProc(int nCode, WPARAM wParam, LPARAM lParam); <br> <br>// dialog.c <br> <br> <br>INT FAR DoDialog(LPTSTR lpTemplateName, DLGPROC lpDlgProc, LONG param, <br>        BOOL fRememberFocus); <br>BOOL  APIENTRY AboutDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY ConnectDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY TransactDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY AdvOptsDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY TextEntryDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY ViewHandleDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY TimeoutDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY DelayDlgProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL  APIENTRY ContextDlgProc(HWND, UINT, WPARAM, LPARAM); <br>VOID Delay(DWORD delay); <br> <br>// dde.c <br> <br> <br>BOOL ProcessTransaction(XACT *pxact); <br>VOID CompleteTransaction(HWND hwndInfoCtr, XACT *pxact); <br>HDDEDATA CALLBACK DdeCallback(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, <br>        HSZ hsz2, HDDEDATA hData, DWORD lData1, DWORD lData2); <br>HWND MDIChildFromhConv(HCONV hConv); <br>HWND FindAdviseChild(HWND hwndMDI, HSZ hszItem, DWORD wFmt); <br>HWND FindListWindow(HCONVLIST hConvList); <br>PTSTR GetTextData(HDDEDATA hData); <br>PTSTR GetFormatData(HDDEDATA hData); <br>INT MyGetClipboardFormatName(DWORD fmt, LPTSTR lpstr, INT cbMax); <br>PTSTR GetFormatName(DWORD wFmt); <br>BOOL MyDisconnect(HCONV hConv); <br> <br>// mem.c <br> <br> <br>PTSTR DbgAlloc(DWORD cb); <br>PTSTR DbgFree(PTSTR p); </code></pre>
<p>&nbsp;</p></body>
</HTML>

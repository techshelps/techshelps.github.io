<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLINIT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6017"></a>CLINIT.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*************************************************************************** <br> *                                                                         * <br> *  MODULE      : clinit.c                                                 * <br> *                                                                         * <br> *  PURPOSE     : Contains initialization code for Client                  * <br> *                                                                         * <br> ***************************************************************************/ <br> <br>#include "client.h" <br> <br>TCHAR szFrame[] = TEXT("mpframe");   /* Class name for "frame" window */ <br>TCHAR szChild[] = TEXT("mpchild");   /* Class name for MDI window     */ <br>TCHAR szList[] =  TEXT("mplist");    /* Class name for MDI window     */ <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : InitializeApplication ()                                   * <br> *                                                                          * <br> *  PURPOSE    : Sets up the class data structures and does a one-time      * <br> *               initialization of the app by registering the window classes* <br> *               Also registers the Link clipboard format                   * <br> *                                                                          * <br> *  RETURNS    : TRUE  - If successful.                                     * <br> *               FALSE - otherwise.                                         * <br> *                                                                          * <br> ****************************************************************************/ <br> <br>BOOL  APIENTRY InitializeApplication() <br>{ <br>    WNDCLASS    wc; <br> <br>    fmtLink = RegisterClipboardFormat(TEXT("Link")); <br> <br>    if (!fmtLink) <br>        return FALSE; <br> <br>    /* Register the frame class */ <br>    wc.style         = 0; <br>    wc.lpfnWndProc   = FrameWndProc; <br>    wc.cbClsExtra    = 0; <br>    wc.cbWndExtra    = 0; <br>    wc.hInstance     = hInst; <br>    wc.hIcon         = LoadIcon(hInst,MAKEINTRESOURCE(IDCLIENT)); <br>    wc.hCursor       = LoadCursor(NULL,IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH)(COLOR_APPWORKSPACE+1); <br>    wc.lpszMenuName  = MAKEINTRESOURCE(IDCLIENT); <br>    wc.lpszClassName = szFrame; <br> <br>    if (!RegisterClass (&amp;wc) ) <br>        return FALSE; <br> <br>    /* Register the MDI child class */ <br>    wc.lpfnWndProc   = MDIChildWndProc; <br>    wc.hIcon         = LoadIcon(hInst,MAKEINTRESOURCE(IDCONV)); <br>    wc.lpszMenuName  = NULL; <br>    wc.cbWndExtra    = CHILDCBWNDEXTRA; <br>    wc.lpszClassName = szChild; <br> <br>    if (!RegisterClass(&amp;wc)) <br>        return FALSE; <br> <br>    wc.hIcon         = LoadIcon(hInst, MAKEINTRESOURCE(IDLIST)); <br>    wc.lpszClassName = szList; <br> <br>    if (!RegisterClass(&amp;wc)) <br>        return FALSE; <br> <br>    return TRUE; <br> <br>} <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : InitializeInstance ()                                      * <br> *                                                                          * <br> *  PURPOSE    : Performs a per-instance initialization of Client.          * <br> *               - Enlarges message queue to handle lots of DDE messages.   * <br> *               - Initializes DDEML for this app                           * <br> *               - Creates atoms for our custom formats                     * <br> *               - Creates the main frame window                            * <br> *               - Loads accelerator table                                  * <br> *               - Shows main frame window                                  * <br> *                                                                          * <br> *  RETURNS    : TRUE  - If initialization was successful.                  * <br> *               FALSE - otherwise.                                         * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL  APIENTRY InitializeInstance( <br>DWORD nCmdShow) <br>{ <br>    extern HWND  hwndMDIClient; <br>    TCHAR         sz[80]; <br>    INT          i; <br> <br>    if (DdeInitialize(&amp;idInst, (PFNCALLBACK)MakeProcInstance( <br>            (FARPROC)DdeCallback, hInst), APPCMD_CLIENTONLY, 0L)) <br>        return FALSE; <br> <br>    CCFilter.iCodePage = CP_WINANSI; <br> <br>    for (i = 0; i &lt; CFORMATS; i++) { <br>        if (aFormats[i].fmt == 0) <br>            aFormats[i].fmt = RegisterClipboardFormat(aFormats[i].sz); <br>    } <br>    hszHuge = DdeCreateStringHandle(idInst, TEXT("Huge"), 0); <br> <br>    /* Get the base window title */ <br>    LoadString(hInst, IDS_APPNAME, sz, sizeof(sz)); <br> <br>    /* Create the frame */ <br>    hwndFrame = CreateWindow (szFrame, <br>                              sz, <br>                              WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN, <br>                              CW_USEDEFAULT, <br>                              CW_USEDEFAULT, <br>                              400, <br>                              200, <br>                              NULL, <br>                              NULL, <br>                              hInst, <br>                              NULL); <br> <br>    if (!hwndFrame || !hwndMDIClient) <br>        return FALSE; <br> <br>    /* Load main menu accelerators */ <br>    if (!(hAccel = LoadAccelerators (hInst, MAKEINTRESOURCE(IDCLIENT)))) <br>        return FALSE; <br> <br>    /* Display the frame window */ <br>    ShowWindow (hwndFrame, nCmdShow); <br>    UpdateWindow (hwndFrame); <br> <br>    /* <br>     * We set this hook up so that we can catch the MSGF_DDEMGR filter <br>     * which is called when DDEML is in a modal loop during synchronous <br>     * transaction processing. <br>     */ <br>    lpMsgFilterProc = (FARPROC)MakeProcInstance((FARPROC)MyMsgFilterProc, hInst); <br>    ghhk = SetWindowsHookEx(WH_MSGFILTER, (HOOKPROC)lpMsgFilterProc, NULL, <br>            GetCurrentThreadId()); <br> <br>    return TRUE; <br>} <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

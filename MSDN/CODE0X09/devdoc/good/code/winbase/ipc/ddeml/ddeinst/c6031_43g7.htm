<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDEMAIN.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6037"></a>DDEMAIN.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/* <br>   ddemain.c <br>*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "ddeinst.h" <br>#include "ddeglbl.h" <br> <br> <br>HMENU   hMenu; <br> <br>/******************************************************************** <br> <br>   WinMain. <br>    <br>   Function that starts the app. <br> <br>********************************************************************/ <br> <br>int APIENTRY WinMain (HINSTANCE hInstance, HINSTANCE hPrevInst, <br>      LPSTR lpCmdLine, int iShowCmd) { <br>   MSG   msg; <br> <br>   ghModule = GetModuleHandle (NULL); <br> <br> <br>// Initialize the Application <br>   if (!InitializeApp ()) { <br>      MessageBox (ghwndMain, "memory: InitializeApp failure!", "Error", MB_OK); <br>      return (FALSE); <br>   }/*endIf*/ <br> <br> <br>// Parse the command line <br>   if (!DecodeOptions (lpCmdLine)) { <br>      MessageBox (ghwndMain, "decode: Command line errors!", "Error", MB_OK); <br>      CleanUpApp (); <br>      return (FALSE); <br>   }/*endIf*/ <br> <br> <br>// Load the accelerators <br>   if (!(ghAccel = LoadAccelerators (ghModule, MAKEINTRESOURCE(ACCEL_ID)))) { <br>      MessageBox(ghwndMain, "memory: Load Accel failure!", "Error", MB_OK); <br>   }/*endIf*/ <br> <br> <br>// Test <br>   PostMessage (ghwndMain, WM_USER_GET_APPS, 0, 0L); <br> <br>// Get the group names from the Program Manager <br>   PostMessage (ghwndMain, WM_USER_GET_GROUPS, 0, 0L); <br> <br>// Main Event Loop <br>   while (GetMessage (&amp;msg, NULL, 0, 0)) { <br>      if (!TranslateAccelerator (ghwndMain, ghAccel, &amp;msg)) { <br>         TranslateMessage (&amp;msg); <br>         DispatchMessage (&amp;msg); <br>      }/*endIf*/ <br>   }/*endWhile*/ <br> <br>// Clean up <br>   CleanUpApp (); <br>   return (TRUE); <br>}/* end WinMain */ <br> <br>/******************************************************************** <br> <br>   InitializeApp. <br>    <br>   Function that registers the window classes and creates the main <br>   window. <br> <br>********************************************************************/ <br> <br>BOOL InitializeApp () { <br>   char      szErrorString[80]; <br>   WNDCLASS wc; <br>   long      lError; <br> <br>// Fill in the class info for the main window. <br>   wc.style         = CS_OWNDC; <br>   wc.lpfnWndProc   = (WNDPROC)MainWndProc; <br>   wc.cbClsExtra    = 0; <br>   wc.cbWndExtra    = sizeof(LONG); <br>   wc.hInstance     = ghModule; <br>   wc.hIcon         = LoadIcon(ghModule, MAKEINTRESOURCE(APPICON)); <br>   wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>   wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1); <br>   wc.lpszMenuName  = "MainMenu"; <br>   wc.lpszClassName = "DDEMLInstaller"; <br> <br>   if (!RegisterClass(&amp;wc)) <br>      return FALSE; <br> <br>// Fill in the class info for the status bar. <br>   wc.style         = CS_OWNDC | CS_HREDRAW | CS_VREDRAW; <br>   wc.lpfnWndProc   = (WNDPROC)StatusBarWndProc; <br>   wc.hIcon         = NULL; <br>   wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>   wc.hbrBackground = (HBRUSH)(COLOR_BTNSHADOW); <br>   wc.lpszMenuName  = NULL; <br>   wc.lpszClassName = "StatusBar"; <br> <br>   if (!RegisterClass(&amp;wc)) <br>      return FALSE; <br> <br>   hMenu = LoadMenu (ghModule, MAKEINTRESOURCE (MainMenu)); <br>   if (!hMenu) { <br>      lError = GetLastError (); <br>      sprintf (szErrorString, "MainMenu load failed %ld", lError); <br>      MessageBox (GetDesktopWindow (), szErrorString, "Error", MB_OK); <br>   }/*endIf*/ <br> <br>   ghwndMain = CreateWindowEx (0L, "DDEMLInstaller", "Sample Installer", <br>         WS_OVERLAPPED   | WS_CAPTION     | WS_BORDER       | <br>         WS_THICKFRAME   | WS_MAXIMIZEBOX | WS_MINIMIZEBOX  | <br>         WS_CLIPCHILDREN | WS_SYSMENU, <br>         80, 70, 550, 250, <br>         NULL, hMenu, ghModule, NULL); <br> <br>   if (ghwndMain == NULL) <br>      return FALSE; <br> <br>   ShowWindow (ghwndMain, SW_SHOWDEFAULT); <br>   UpdateWindow (ghwndMain); <br> <br>   SetWindowLong (ghwndMain, GWL_USERDATA, 0L); <br> <br>// Set the initial focus to the main window <br>   SetFocus(ghwndMain);    /* set initial focus */ <br> <br>   return TRUE; <br>}/* end InitializeApp */ <br> <br>/******************************************************************** <br> <br>   CleanUpApp. <br>    <br>   Function that takes care of house cleaning when app terminates. <br> <br>********************************************************************/ <br> <br>void CleanUpApp () { <br> <br>// Destroy the menu loaded in InitializeApp. <br>   DestroyMenu (hMenu); <br> <br>// If the DDEML conversation id is non-zero the Uninitialize the conversation <br>   if (lIdInst2) { <br>      DdeUninitialize (lIdInst2); <br>   }/*endIf*/ <br> <br>// If memory has been allocated for the user defined path then release it. <br>   if (szUserPath) { <br>      VirtualFree (szUserPath, MAX_PATH, MEM_DECOMMIT); <br>   }/*endIf*/ <br>   if (szUserGroup) { <br>      VirtualFree (szUserGroup, MAX_PATH, MEM_DECOMMIT); <br>   }/*endIf*/ <br>}/* end CleanUpApp */ <br> <br>/******************************************************************** <br> <br>   DecodeOptions. <br>    <br>   Function that decodes the command line looking for the user specified <br>   arguments. <br> <br>********************************************************************/ <br> <br>BOOL DecodeOptions (LPSTR lpCmdLine) { <br>   LPSTR  szFirst; <br>   LPSTR  szToken; <br> <br>// Allocate a block of memory to use for the user specified path. <br>   szUserPath = VirtualAlloc (NULL, MAX_PATH, MEM_COMMIT, PAGE_READWRITE); <br>   szUserGroup = VirtualAlloc (NULL, MAX_PATH, MEM_COMMIT, PAGE_READWRITE); <br>   if (!GetEnvironmentVariable ("MSTOOLS", szUserPath, MAX_PATH - 1)) { <br>      strcpy (szUserPath, "c:\\mstools\\samples"); <br>   } else { <br>      strcat (szUserPath, "\\samples"); <br>   }/*endIf*/ <br>   strcpy (szUserGroup, "Sample Applications"); <br>   fBatch = FALSE; <br>   if (!(szToken = strtok (lpCmdLine, "-/"))) { <br>      return (TRUE); <br>   }/*endIf*/ <br>   do { <br>      switch (*szToken) { <br>         case 's': <br>         case 'S':{ <br>            szFirst = szToken + 1; <br>            while (*szFirst == ' ') { <br>               szFirst++; <br>            }/*endWhile*/ <br>            strcpy (szUserPath, szFirst); <br>            while (szFirst = strrchr (szUserPath, ' ')) { <br>               *szFirst = '\0'; <br>            }/*endWhile*/ <br>            break; <br>         }/*endCase*/ <br>         case 'b': <br>         case 'B': { <br>            fBatch = TRUE; <br>            break; <br>         }/*endCase*/ <br>         case 'i': <br>         case 'I': { <br>            fBatch = FALSE; <br>            break; <br>         }/*endCase*/ <br>         case 'g': <br>         case 'G': { <br>            szFirst = szToken + 1; <br>            while (*szFirst == ' ') szFirst++; <br>            strcpy (szUserGroup, szFirst); <br>            while (szFirst = strrchr (szUserGroup, ' ')) { <br>               *szFirst = '\0'; <br>            }/*endWhile*/ <br>            break; <br>         }/*endCase*/ <br>      }/*endSwitch*/ <br>   } while (szToken = strtok (NULL, "-/")); <br>   return (TRUE); <br>}/* end DecodeOptions */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

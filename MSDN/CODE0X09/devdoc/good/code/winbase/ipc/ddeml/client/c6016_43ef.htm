<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRACK.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6027"></a>TRACK.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*************************************************************************** <br> *                                                                         * <br> *  MODULE      : track.c                                                  * <br> *                                                                         * <br> *  PURPOSE     : Generic tracking code.                                   * <br> *                                                                         * <br> ***************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include "track.h" <br> <br>RECT  rcTrack; <br>RECT  rcDelta; <br>POINT ptOrg; <br>POINT ptPrev; <br>DWORD  fsTrack; <br>RECT  rcBoundary; <br>INT cxMinTrack; <br>INT cyMinTrack; <br> <br>VOID DrawTrackRect(HWND hwnd, LPRECT prcOld, LPRECT prcNew); <br>VOID HorzUpdate(HDC hdc, INT yOld, INT yNew, INT x1Old, INT x1New, INT x2Old, <br>        INT x2New); <br>VOID VertUpdate(HDC hdc, INT xOld, INT xNew, INT y1Old, INT y1New, INT y2Old, <br>        INT y2New); <br>LONG  APIENTRY TrackingWndProc(HWND hwnd, DWORD msg, WPARAM wParam, LPARAM lParam); <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : TrackRect()                                                * <br> *                                                                          * <br> *  PURPOSE    : Implements functionality similiar to the PM WinTrackRect() * <br> *                                                                          * <br> *  RETURNS    : TRUE on success, FALSE if tracking was canceled.           * <br> *               prcResult contains the resulting rectangle.                * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL TrackRect( <br>HANDLE hInst, <br>HWND   hwnd,        // bounding window <br>INT    left,        // rectangle to track in bounding window coords. <br>INT    top, <br>INT    right, <br>INT    bottom, <br>INT    cxMin, <br>INT    cyMin, <br>DWORD   fs, <br>LPRECT prcResult)   // result rect in bounding window coords. <br>{ <br>    static BOOL fTracking = 0; <br>    FARPROC lpOrgWndProc, lpTrackWndProc; <br>    HWND hwndOldCapture, hwndOldFocus; <br>    MSG msg; <br> <br>    if (fTracking) <br>        return FALSE; <br> <br>    fTracking = TRUE; <br> <br>    lpOrgWndProc = (FARPROC)GetWindowLong(hwnd, GWL_WNDPROC); <br>    lpTrackWndProc = MakeProcInstance((FARPROC)TrackingWndProc, hInst); <br>    SetWindowLong(hwnd, GWL_WNDPROC, (DWORD)lpTrackWndProc); <br> <br>    hwndOldCapture = GetCapture(); <br>    SetCapture(hwnd); <br> <br>    hwndOldFocus = SetFocus(hwnd); <br>    UpdateWindow(hwnd); <br> <br>    GetCursorPos(&amp;ptOrg); <br>    ScreenToClient(hwnd, &amp;ptOrg); <br> <br>    if (fs &amp; TF_SETPOINTERPOS) { <br> <br>        if (fs &amp; TF_LEFT &amp;&amp; fs &amp; TF_RIGHT) <br>            ptOrg.x = (left + right) / 2; <br>        else if (fs &amp; TF_LEFT) <br>            ptOrg.x = left; <br>        else if (fs &amp; TF_RIGHT) <br>            ptOrg.x = right; <br> <br>        if (fs &amp; TF_TOP &amp;&amp; fs &amp; TF_BOTTOM) <br>            ptOrg.y = (top + bottom) / 2; <br>        else if (fs &amp; TF_TOP) <br>            ptOrg.y = top; <br>        else if (fs &amp; TF_BOTTOM) <br>            ptOrg.y = bottom; <br> <br>        ClientToScreen(hwnd, &amp;ptOrg); <br>        SetCursorPos(ptOrg.x, ptOrg.y); <br>        ScreenToClient(hwnd, &amp;ptOrg); <br>    } <br> <br>    ptPrev = ptOrg; <br>    cxMinTrack = cxMin; <br>    cyMinTrack = cyMin; <br>    GetClientRect(hwnd, &amp;rcBoundary); <br>    fsTrack = fs; <br>    SetRect(&amp;rcTrack, left, top, right, bottom); <br>    SetRect(&amp;rcDelta, left - ptOrg.x, top - ptOrg.y, right - ptOrg.x, <br>            bottom - ptOrg.y); <br>    DrawTrackRect(hwnd, &amp;rcTrack, NULL); <br> <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>        DispatchMessage(&amp;msg); <br> <br>    DrawTrackRect(hwnd, &amp;rcTrack, NULL); <br> <br>    SetWindowLong(hwnd, GWL_WNDPROC, (DWORD)lpOrgWndProc); <br>    FreeProcInstance(lpTrackWndProc); <br> <br>    SetFocus(hwndOldFocus); <br>    SetCapture(hwndOldCapture); <br>    CopyRect(prcResult, &amp;rcTrack); <br> <br>    fTracking = FALSE; <br>} <br> <br> <br> <br> <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : DrawTrackRect()                                            * <br> *                                                                          * <br> *  PURPOSE    : XOR draws whats needed to move a selection from prcOld to  * <br> *               prcNew.  If prcNew == NULL this is considered a            * <br> *               first-time draw or last time erase.                        * <br> *                                                                          * <br> ****************************************************************************/ <br>VOID DrawTrackRect( <br>HWND hwnd, <br>LPRECT prcOld, <br>LPRECT prcNew) <br>{ <br>    HDC hdc; <br> <br>    hdc = GetDC(hwnd); <br>    SetROP2(hdc, R2_NOT); <br>        // erase/draw the whole thing <br>        MoveToEx(hdc, prcOld-&gt;left, prcOld-&gt;top, NULL); <br>        LineTo(hdc, prcOld-&gt;right, prcOld-&gt;top); <br>        LineTo(hdc, prcOld-&gt;right, prcOld-&gt;bottom); <br>        LineTo(hdc, prcOld-&gt;left, prcOld-&gt;bottom); <br>        LineTo(hdc, prcOld-&gt;left, prcOld-&gt;top); <br>        if (prcNew) { <br>            MoveToEx(hdc, prcNew-&gt;left, prcNew-&gt;top, NULL); <br>            LineTo(hdc, prcNew-&gt;right, prcNew-&gt;top); <br>            LineTo(hdc, prcNew-&gt;right, prcNew-&gt;bottom); <br>            LineTo(hdc, prcNew-&gt;left, prcNew-&gt;bottom); <br>            LineTo(hdc, prcNew-&gt;left, prcNew-&gt;top); <br>        } <br>    ReleaseDC(hwnd, hdc); <br>} <br> <br> <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : TrackingWndProc()                                          * <br> *                                                                          * <br> *  PURPOSE    : Window procedure that subclasses the given parent window.  * <br> *               This handles the mouse tracking and rectangle updates.     * <br> *                                                                          * <br> ****************************************************************************/ <br>LONG  APIENTRY TrackingWndProc( <br>HWND hwnd, <br>DWORD msg, <br>WPARAM wParam, <br>LPARAM lParam) <br>{ <br>    switch (msg) { <br>    case WM_MOUSEMOVE: <br>        { <br>            RECT rcNow, rcTest; <br> <br>            if (ptPrev.x == (short)LOWORD(lParam) &amp;&amp; ptPrev.y == (short)HIWORD(lParam)) <br>                return 0; <br>            CopyRect(&amp;rcNow, &amp;rcTrack); <br>            if (fsTrack &amp; TF_LEFT) <br>                rcNow.left = (short)LOWORD(lParam) + rcDelta.left; <br>            if (fsTrack &amp; TF_RIGHT) <br>                rcNow.right = (short)LOWORD(lParam) + rcDelta.right; <br>            if (fsTrack &amp; TF_TOP) <br>                rcNow.top = (short)HIWORD(lParam) + rcDelta.top; <br>            if (fsTrack &amp; TF_BOTTOM) <br>                rcNow.bottom = (short)HIWORD(lParam) + rcDelta.bottom; <br> <br>            if (rcNow.left &gt; rcNow.right - cxMinTrack) <br>                if (fsTrack &amp; TF_LEFT) <br>                    rcNow.left = rcNow.right - cxMinTrack; <br>                else <br>                    rcNow.right = rcNow.left + cxMinTrack; <br> <br>            if (rcNow.top &gt; rcNow.bottom - cyMinTrack) <br>                if (fsTrack &amp; TF_TOP) <br>                    rcNow.top = rcNow.bottom - cyMinTrack; <br>                else <br>                    rcNow.bottom = rcNow.top + cyMinTrack; <br> <br>            if (fsTrack &amp; TF_ALLINBOUNDARY) { <br>                if ((fsTrack &amp; TF_MOVE) == TF_MOVE) { <br>                    IntersectRect(&amp;rcTest, &amp;rcNow, &amp;rcBoundary); <br>                    if (!EqualRect(&amp;rcTest, &amp;rcNow)) { <br>                        if (rcNow.left &lt; rcBoundary.left) <br>                            OffsetRect(&amp;rcNow, rcBoundary.left - rcNow.left, 0); <br>                        if (rcNow.right &gt; rcBoundary.right) <br>                            OffsetRect(&amp;rcNow, rcBoundary.right - rcNow.right, 0); <br>                        if (rcNow.top &lt; rcBoundary.top) <br>                            OffsetRect(&amp;rcNow, 0, rcBoundary.top - rcNow.top); <br>                        if (rcNow.bottom &gt; rcBoundary.bottom) <br>                            OffsetRect(&amp;rcNow, 0, rcBoundary.bottom - rcNow.bottom); <br>                    } <br>                } else <br>                    IntersectRect(&amp;rcNow, &amp;rcNow, &amp;rcBoundary); <br>            } <br> <br>            if (EqualRect(&amp;rcNow, &amp;rcTrack)) <br>                return 0; <br> <br>            DrawTrackRect(hwnd, &amp;rcTrack, &amp;rcNow); <br> <br>            CopyRect(&amp;rcTrack, &amp;rcNow); <br>            ((ptPrev).x = ((*((POINTS *)&amp;(lParam)))).x, (ptPrev).y = ((*((POINTS *)&amp;(lParam)))).y); <br>        } <br>        break; <br> <br>    case WM_LBUTTONUP: <br>        SendMessage(hwnd, WM_MOUSEMOVE, wParam, lParam); <br>        PostMessage(hwnd, WM_QUIT, 0, 0);       // pop out of modal loop <br>        return 0; <br>        break; <br> <br>    default: <br>    return(DefWindowProc(hwnd, msg, wParam, lParam)); <br>        break; <br>    } <br>    return 0; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

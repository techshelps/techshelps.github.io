<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHILD.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6054"></a>CHILD.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright (C) 1992-1996 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/* Standard output handle/standard error handle redirection test <br>program */ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;io.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;windows.h&gt; <br> <br>/* This function opens up a handle to CONOUT$ so that we can be <br>guaranteed to get error messages to the console even if the standard <br>handles are redirected. */ <br> <br>void myError(HANDLE h, char *api, int line) <br>{ <br>  char buf[512]; <br>  BOOL fSuccess; <br>  DWORD cBytesWritten; <br>  HANDLE hConout; <br> <br>  sprintf(buf, "%s: Error %d from %s on line %d\n", __FILE__, GetLastError(), <br>      api, line); <br>  fSuccess = WriteFile(h, buf, strlen(buf), &amp;cBytesWritten, NULL); <br>  if (!fSuccess) <br>    { <br>    hConout = CreateFile("CONOUT$", GENERIC_READ | GENERIC_WRITE, <br>        FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, <br>        FILE_ATTRIBUTE_NORMAL, NULL); <br>    sprintf(buf, "%s: Error %d from %s on line %d\n", __FILE__, <br>      GetLastError(), api, line); <br>    WriteFile(hConout, buf, strlen(buf), &amp;cBytesWritten, NULL); <br>    CloseHandle(hConout); <br>    } <br>  return; <br>} <br> <br>/* get the standard output handle and standard error handle and <br>write a message to each */ <br> <br>int main() <br>{ <br>  DWORD cBytesWritten; <br>  HANDLE hStdErr, hStdOut, hConout; <br>  BOOL fSuccess; <br>  char *stdErrMsg = "Hello from child to standard error!\n"; <br>  char *stdOutMsg = "Hello from child to standard output!\n"; <br> <br>  hConout = CreateFile("CONOUT$", GENERIC_READ | GENERIC_WRITE, <br>      FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, <br>      FILE_ATTRIBUTE_NORMAL, NULL); <br>  if ((int) hConout == -1) <br>    Beep(5000,500); /* no reliable way of reporting errors to the console */ <br>                    /* if we can't open a console handle */ <br>  hStdErr = GetStdHandle(STD_ERROR_HANDLE); <br>  if (hStdErr == INVALID_HANDLE_VALUE) <br>    myError(hConout, "GetStdHandle", __LINE__); <br>  hStdOut = GetStdHandle(STD_OUTPUT_HANDLE); <br>  if (hStdOut == INVALID_HANDLE_VALUE) <br>    myError(hConout, "GetStdHandle", __LINE__); <br>  fSuccess = WriteFile(hStdErr, stdErrMsg, strlen(stdErrMsg), <br>      &amp;cBytesWritten, NULL); <br>  if (!fSuccess) <br>    myError(hConout, "WriteFile", __LINE__); <br>  fSuccess = WriteFile(hStdOut, stdOutMsg, strlen(stdOutMsg), <br>      &amp;cBytesWritten, NULL); <br>  if (!fSuccess) <br>    myError(hConout, "WriteFile", __LINE__); <br>  CloseHandle(hConout); <br>  return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

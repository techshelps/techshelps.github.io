<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDMAN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6110"></a>SCARDMAN.CPP</h2>
<pre><code>// SCardMan.cpp : Implementation of CSCardManage <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// Includes <br>// <br>#include "stdafx.h" <br>#include "SCardCom.h" <br>#include "SCardMan.h" <br>// Include the SSP GUIDS <br>#include &lt;sspguid.h&gt; <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// Macros <br>// <br>#ifdef _DEBUG <br>    #define TRACE_STR(name,sz) \ <br>                TRACE(_T("SMB_SSP.DLL: CSCardManage::%s: %s\n"), name, sz) <br>    #define TRACE_CODE(name,code) \ <br>                TRACE(_T("SMB_SSP.DLL: CSCardManage::%s: error = 0x%x\n"), name, code) <br>    #define TRACE_CATCH(name,code)      TRACE_CODE(name,code) <br>    #define TRACE_CATCH_UNKNOWN(name)   TRACE_STR(name,_T("An unidentified exception has occurred!")) <br>#else <br>    #define TRACE_STR(name,sz)          ((void)0) <br>    #define TRACE_CODE(name,code)       ((void)0) <br>    #define TRACE_CATCH(name,code)      ((void)0) <br>    #define TRACE_CATCH_UNKNOWN(name)   ((void)0) <br>#endif  // _DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSCardManage <br> <br>/*++ <br> <br>FinalConstruct: <br> <br>    This routine defines a final constructor that is called after the constructor <br>    for the template class is called. <br>     <br>Arguments: <br> <br>    None <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br> <br>HRESULT CSCardManage::FinalConstruct() <br>{ <br>    // Locals. <br>    HRESULT hresult = S_OK; <br>     <br>    try { <br>        // Check Params, etc <br> <br>        /////////////////////////////////////////////////////////////////////////// <br>        // <br>        // Create an instance of all the low-level COM objects-interfaces <br>        // <br>        // <br>        hresult = CoCreateInstance( CLSID_CSCard, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCard, <br>                                    (LPVOID*) &amp;m_pISCard); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>        hresult = CoCreateInstance( CLSID_CSCardTypeConv, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardTypeConv, <br>                                    (LPVOID*) &amp;m_pISCardTypeConv); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>        hresult = CoCreateInstance( CLSID_CSCardISO7816, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardISO7816, <br>                                    (LPVOID*) &amp;m_pISCardISO7816); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>        // If Required... <br>        hresult = CoCreateInstance( CLSID_CSCardDatabase, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardDatabase, <br>                                    (LPVOID*) &amp;m_pISCardDatabase); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>        hresult = CoCreateInstance( CLSID_CSCardLocate, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardLocate, <br>                                    (LPVOID*) &amp;m_pISCardLocate); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("FinalConstruct"),hr); <br>    } <br> <br>    catch (...) { <br>        hresult = E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("FinalConstruct")); <br>    } <br> <br>    return (hresult); <br>} <br> <br> <br>/*++ <br> <br>FinalRelease: <br> <br>    This routine defines a final release. <br>     <br>Arguments: <br> <br>    None <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br> <br>HRESULT CSCardManage::FinalRelease() <br>{ <br>    // Locals. <br>    HRESULT hresult = S_OK; <br>     <br>    try { <br>        // Release the Interfaces <br>        m_pISCard-&gt;Release(); <br>        m_pISCardISO7816-&gt;Release(); <br>        m_pISCardTypeConv-&gt;Release(); <br>        // If required... <br>        m_pISCardDatabase-&gt;Release(); <br>        m_pISCardLocate-&gt;Release(); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("AttachByIFD")); <br>    } <br> <br>    return (hresult); <br>} <br> <br>/*++ <br> <br>CreateCmdObject: <br> <br>    This routine creates an instance of the ISCardCmd object <br>     <br>Arguments: <br> <br>    ppCmd - pointer to an ISCardCmd pointer <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>HRESULT CSCardManage::CreateCmdObject(LPSCARDCMD *ppCmd) <br>{ <br>    // Locals <br>    HRESULT     hresult = S_OK; <br>    LPSCARDCMD  pObj = NULL; <br> <br>    try { <br>        // Check Params, etc... <br>        if (ppCmd==NULL) <br>            throw ( (HRESULT) E_INVALIDARG ); <br> <br>        // Create the object <br>        hresult = CoCreateInstance( CLSID_CSCardCmd, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardCmd, <br>                                    (LPVOID*) &amp;pObj); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br> <br>        ASSERT( (pObj) != NULL ); <br> <br>        // Package for return <br>        (*ppCmd) = pObj; <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult=hr; <br>        TRACE_CATCH(_T("CreateCmdObject"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("CreateCmdObject")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// ISCardManage Methods <br>// <br> <br> <br>/*++ <br> <br>CSCardManage::AttachByHandle: <br> <br>    Allows an application to create a communication to an ICC using <br>    a handle returned by the Resource Manager <br>         <br>Arguments: <br> <br>    hICC - handle to the ICC <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardManage::AttachByHandle( <br>                    HSCARD hICC) <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        if (hICC == 0) <br>            throw ( (HRESULT) E_INVALIDARG); <br>        // Make low level COM call <br>        hresult = m_pISCard-&gt;AttachByHandle(hICC); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("AttachByHandle"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("AttachByHandle")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::AttachByIFD: <br> <br>    Allows an application to request establishment of a context for <br>    a specific IFD referenced with a friendly name <br>         <br>Arguments: <br> <br>    bstrIFDName - String containing friendly name <br> <br>Flags - desired access mode <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::AttachByIFD( <br>                    BSTR bstrIFDName, <br>SCARD_SHARE_MODES Flags) <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        if (bstrIFDName == NULL) <br>            throw ( (HRESULT) E_INVALIDARG); <br>        // make low level COM call...Default to T0 protocol for Cryptoflex <br>        // Note: In this example code we are grabbing the reader for SHAREd <br>        // use. This implies we MUST use ISCard-&gt;Lock (SCardBeginTransaction) and <br>        // ISCard-&gt;Unlock (SCardEndTransaction) when communicating with the card. <br>        // The begin/end transaction functions should be called in any case. <br>        hresult = m_pISCard-&gt;AttachByReader(bstrIFDName, SHARED, T0); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("AttachByIFD"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("AttachByIFD")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::CreateCardAuth: <br> <br>    Creates an instance of the ISCardAuth interface and returns <br>    a pointer to the created interface. <br>         <br>Arguments: <br> <br>    pISCardAuth - pointer to ISCardAuth <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::CreateCardAuth( LPSCARDAUTH* ppISCardAuth ) <br>{ <br>    // Locals <br>    HRESULT     hresult = S_OK; <br>    LPSCARDAUTH pObj = NULL; <br> <br>    try { <br>        // Check params, etc.. <br>        if (ppISCardAuth == NULL) <br>            throw ( (HRESULT) E_INVALIDARG ); <br>             <br>        // Create an instance of the interface <br>        hresult = CoCreateInstance( CLSID_SCardAuth, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardAuth, <br>                                    (LPVOID*) &amp;pObj); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>         <br>        // Initialize the Interface/Object <br>        hresult = pObj-&gt;Initialize((LONG*) this); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br> <br>        // Ok... <br>        (*ppISCardAuth) = pObj; <br>        // We are bumping the reference count on this object so we are sure it will <br>        // remain available. This means each object MUST Release() the count! <br>        AddRef(); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("CreateCardAuth"),hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("CreateCardAuth")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::CreateFileAccess: <br> <br>    Creates an instance of the ISCardFileAccess interface and returns <br>    a pointer to the created interface. <br>         <br>Arguments: <br> <br>    pISCardFileAccess - pointer to ISCardFileAccess <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::CreateFileAccess( LPSCARDFILEACCESS *ppISCardFileAccess ) <br>{ <br>    // Locals <br>    HRESULT     hresult = S_OK; <br>    LPSCARDFILEACCESS pObj = NULL; <br> <br>    try { <br>        // Check params, etc.. <br>        if (ppISCardFileAccess == NULL) <br>            throw ( (HRESULT) E_INVALIDARG ); <br>             <br>        // Create an instance of the interface <br>        hresult = CoCreateInstance( CLSID_SCardFileAccess, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardFileAccess, <br>                                    (LPVOID*) &amp;pObj); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>         <br>        // Initialize the Interface/Object <br>        hresult = pObj-&gt;Initialize((LONG*) this); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br> <br>        // Ok... <br>        (*ppISCardFileAccess) = pObj; <br>        // We are bumping the reference count on this object so we are sure it will <br>        // remain available. This means each object MUST Release() the count! <br>        AddRef(); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("CreateFileAccess"),hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("CreateFileAccess")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::CreateInterface <br> <br>    Creates an instance of an interface supported by this ssp. <br>         <br>Arguments: <br> <br>    pISCardFileAccess - pointer to ISCardFileAccess <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::CreateInterface( LPGUID pguidInterface, <br>                                            BSTR bstrName /*=NULL*/, <br>                                            LONG *pUserData /*=NULL*/, <br>                                            LPUNKNOWN *ppInterface) <br>{ <br>    // Locals <br>    HRESULT     hresult = E_NOTIMPL; <br> <br>    try { <br>        // Check params, etc.. <br>         <br>        // Todo::Add code to support the creation of non-standard or <br>        // crypto interfaces <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("CreateInterface"),hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("CreateInterface")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::CreateCHVerification: <br> <br>    Creates an instance of the ISCardVerify interface and returns <br>    a pointer to the created interface. <br>         <br>Arguments: <br> <br>    pISCardVerify - pointer to ISCardVerify <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::CreateCHVerification( LPSCARDVERIFY *ppISCardVerify ) <br>{ <br>    // Locals <br>    HRESULT     hresult = S_OK; <br>    LPSCARDVERIFY pObj = NULL; <br> <br>    try { <br>        // Check params, etc.. <br>        if (ppISCardVerify == NULL) <br>            throw ( (HRESULT) E_INVALIDARG ); <br>             <br>        // Create an instance of the interface <br>        hresult = CoCreateInstance( CLSID_SCardVerify, <br>                                    NULL, <br>                                    CLSCTX_LOCAL, <br>                                    IID_ISCardVerify, <br>                                    (LPVOID*) &amp;pObj); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>         <br>        // Initialize the Interface/Object <br>        hresult = pObj-&gt;Initialize((LONG*) this); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br> <br>        // Ok... <br>        (*ppISCardVerify) = pObj; <br>        // We are bumping the reference count on this object so we are sure it will <br>        // remain available. This means each object MUST Release() the count! <br>        AddRef(); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("CreateCHVerify"),hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("CreateCHVerify")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::Detach <br> <br>    Releases the attachment to a particular ICC or IFD allocated by <br>    an AttachByxxx method <br>         <br>Arguments: <br> <br>    none <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::Detach() <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        // Make low-level COM call <br>        hresult = m_pISCard-&gt;Detach(LEAVE); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("Detach"),hr); <br>    } <br> <br>    catch (...) { <br>        hresult = (HRESULT) E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("Detach")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::Locks: <br> <br>    Locks the connected IFD/ICC for exclusive use by this application. Usually <br>    used for executing mutiple/sequence of commands to the card. <br>         <br>Arguments: <br> <br>    none <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::Lock() <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        // Call low-level COM <br>        hresult = m_pISCard-&gt;LockSCard(); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("Lock"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("Lock")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::Reconnect: <br> <br>    Allows an application to reconnect to an ICC or IFD without having <br>    to issue a Detach then a AttachByxxx method call <br>         <br>Arguments: <br> <br>    none <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::Reconnect() <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        // Call low-level COM <br>        hresult = m_pISCard-&gt;ReAttach(SHARED, LEAVE); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("Reconnect"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("Reconnect")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::Status: <br> <br>    Allows an application to get the current status of the ICC/IFD. <br>         <br>Arguments: <br> <br>    pwdStatus - Pointer to DWORD that will contain status <br>                    ABSENT <br>                    PRESENT <br>                    SWALLOWED <br>                    POWERED <br>                    NEGOTIABLEMODE <br>                    SPECIFICMODE <br>    pwdProtocol - point to DWORD that will contain current protocol in use <br>                    T0 <br>                    T1 <br>                    RAW <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::Status(  SCARD_STATES    *pStatus, <br>                                    SCARD_PROTOCOLS *pProtocol) <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        if ( (pStatus==NULL) || (pProtocol == NULL)) <br>            throw ( (HRESULT) E_INVALIDARG ); <br> <br>        // Call low-level COM <br>        hresult = m_pISCard-&gt;get_Status(pStatus); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>        hresult = m_pISCard-&gt;get_Protocol(pProtocol); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("Status"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("Status")); <br>    } <br> <br>    return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardManage::Unlock: <br> <br>    This method releases the connected IFD/ICC from exclusive use. <br>     <br>Arguments: <br> <br>    Disposition - state to leave card in upon release. <br>        LEAVE <br>        RESET <br>        UNPOWER <br>        EJECT <br>     <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>    Return          Meaning <br>    ======          ======= <br>    S_OK            Operation completed successfully. <br>    S_FALSE         Unknown error occurred. <br>    E_OUTOFMEMORY   There is not enough memory in this process to <br>                    satisfy the request. <br>    E_FAIL          Unspecified error. <br>    E_INVALIDARG    One or more arguments are invalid. <br>    E_UNEXPECTED    Unexpected event occurred in this function. <br>     <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardManage::Unlock( SCARD_DISPOSITIONS  Disposition /*=LEAVE*/) <br>{ <br>    //locals <br>    HRESULT     hresult = S_OK; <br> <br>    try { <br>        // Call low-level COM <br>        hresult = m_pISCard-&gt;UnlockSCard(Disposition); <br>        if (FAILED(hresult)) <br>            throw (hresult); <br>    } <br> <br>    catch (HRESULT hr) { <br>        hresult = hr; <br>        TRACE_CATCH(_T("Unlock"), hr); <br>    } <br> <br>    catch (...) { <br>        hresult = E_UNEXPECTED; <br>        TRACE_CATCH_UNKNOWN(_T("Unlock")); <br>    } <br> <br>    return hresult; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

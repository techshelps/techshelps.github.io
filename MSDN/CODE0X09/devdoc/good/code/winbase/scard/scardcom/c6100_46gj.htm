<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDATH.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6103"></a>SCARDATH.CPP</h2>
<pre><code>// SCardAth.cpp : Implementation of CSCardAuth <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// Includes <br>// <br>#include "stdafx.h" <br>#include "SCardCom.h" <br>#include "SCardAth.h" <br>#include "SCardDef.h" <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// Macros <br>// <br>#ifdef _DEBUG <br>#define TRACE_STR(name,sz) \ <br>TRACE(_T("SCardCom.DLL: CSCardAuth::%s: %s\n"), name, sz) <br>#define TRACE_CODE(name,code) \ <br>TRACE(_T("SCardCom.DLL: CSCardAuth::%s: error = 0x%x\n"), name, code) <br>#define TRACE_CATCH(name,code)TRACE_CODE(name,code) <br>#define TRACE_CATCH_UNKNOWN(name)TRACE_STR(name,_T("An unidentified exception has occurred!")) <br>#else <br>#define TRACE_STR(name,sz)((void)0) <br>#define TRACE_CODE(name,code)((void)0) <br>#define TRACE_CATCH(name,code)((void)0) <br>#define TRACE_CATCH_UNKNOWN(name)((void)0) <br>#endif  // _DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSCardAuth <br> <br>/*++ <br> <br>CSCardAuth::FinalConstruct: <br> <br>    This routine defines a final constructor that is called after the constructor <br>for the template class is called. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br> <br>--*/ <br> <br>HRESULT CSCardAuth::FinalConstruct() <br>{ <br>// Locals. <br>HRESULT hresult = S_OK; <br> <br>try { <br>m_Manage = NULL; <br>} <br> <br>catch (...) { <br>hresult = E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("GetChallenge")); <br>} <br> <br>return (hresult); <br>} <br> <br> <br>/*++ <br> <br>CSCardAuth::FinalRelease: <br> <br>    This routine defines a final release. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>HRESULT CSCardAuth::FinalRelease() <br>{ <br>// Locals. <br>HRESULT hresult = S_OK; <br> <br>try { <br>// Decrement the reference count on the "creation" object <br>if (m_Manage != NULL) <br>m_Manage-&gt;Release(); <br>} <br> <br>catch (...) { <br>} <br> <br>return (hresult); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// ISCardAuth Methods <br>// <br> <br> <br>/*++ <br> <br>CSCardAuth::APP_Auth <br> <br>This method allows an application to athenticate itself to the ICC <br>using a Challange/signature protocol. <br> <br>Arguments: <br> <br>    lAlogID- specifies the algorithm to be used in the authentcation <br>process <br> <br>pParam - IByteBuffer containing vendor specific parameters of the <br>authentication process <br> <br>pBuffer - contains data required for authentication. <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardAuth::APP_Auth( <br>long lAlgorID, <br>LPBYTEBUFFER pParam, <br>LPBYTEBUFFER pBuffer) <br>{ <br>//locals <br>HRESULThresult = S_OK; <br>LPSCARDCMDpCmd = NULL; <br> <br>try { <br>m_lAlgorID = lAlgorID; <br> <br>// Is internal pointer to "Creation Class" valid <br>if (m_Manage == NULL) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// Must have valid pointer... <br>if (pBuffer == NULL) <br>throw ( (HRESULT) E_POINTER ); <br> <br>// Create cmd object <br>hresult = m_Manage-&gt;CreateCmdObject(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>// Do internal Authenticate <br>hresult = m_Manage-&gt;m_pISCardISO7816-&gt;ExternalAuthenticate((BYTE) lAlgorID, <br>NULL, <br>pBuffer, <br>&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>// Force correct class id  <br>hresult = pCmd-&gt;put_ClassId(VENDOR_CLASS_ID); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>hresult = m_Manage-&gt;m_pISCard-&gt;LockSCard(); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;Transaction(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;UnlockSCard(LEAVE); <br>if (FAILED(hresult)) <br>throw(hresult); <br> <br>//interpret results and return <br>hresult = pCmd-&gt;get_ApduReplyLength(&amp;m_lReplyLength); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = pCmd-&gt;get_ReplyStatus( &amp;m_wReplyStatus ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>if ( m_wReplyStatus != 0x9000) <br>throw (E_FAIL); <br>} <br> <br>catch (HRESULT hr) { <br>hresult=hr; <br>TRACE_CATCH(_T("APP_Auth"), hr); <br>} <br> <br>catch (...) { <br>hresult = (HRESULT) E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("APP_AUTH")); <br>} <br> <br>// Release cmd interface <br>if (pCmd != NULL) <br>pCmd-&gt;Release(); <br> <br>return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardAuth::GetChallenge <br> <br>Returns a challenge from the ICC. <br> <br>Arguments: <br> <br>    lAlgorID - specifies the algorithm the challenge will be used with. <br> <br>pParam - Contains vendor specific parameters used in the <br>authentication process. <br> <br>lpLengthOfChallenge - indicates length of ppBuffer <br> <br>ppBuffer - contains the challenge to be used in subsequent <br>application authentication <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardAuth::GetChallenge( <br>LONG lAlgorID, <br>LPBYTEBUFFER pParam, <br>LONG* lpLengthOfChallenge, <br>LPBYTEBUFFER *ppBuffer) <br>{ <br>//locals <br>HRESULThresult = S_OK; <br>LPSCARDCMDpCmd = NULL; <br> <br>try { <br>m_lAlgorID = lAlgorID; <br> <br>// CheckLength <br>if (*lpLengthOfChallenge&lt;0) <br>throw ( (HRESULT) E_INVALIDARG ); <br> <br>// Is internal pointer to "Creation Class" valid <br>if (m_Manage == NULL) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// Check pointer...Will create it later if needed. <br>if (ppBuffer == NULL) <br>throw ( (HRESULT) E_POINTER ); <br> <br>// Create a command object <br>hresult = m_Manage-&gt;CreateCmdObject(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>// Do challenge <br>hresult = m_Manage-&gt;m_pISCardISO7816-&gt;GetChallenge(*lpLengthOfChallenge, <br>&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>// Force correct class id for the the CryptoFlex card <br>hresult = pCmd-&gt;put_ClassId(VENDOR_CLASS_ID); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>hresult = m_Manage-&gt;m_pISCard-&gt;LockSCard(); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;Transaction(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;UnlockSCard(LEAVE); <br>if (FAILED(hresult)) <br>throw(hresult); <br> <br>//interpret results and return <br>hresult = pCmd-&gt;get_ApduReplyLength(&amp;m_lReplyLength); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = pCmd-&gt;get_ReplyStatus( &amp;m_wReplyStatus ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>if ( m_wReplyStatus != 0x9000) <br>throw (E_FAIL); <br>hresult = pCmd-&gt;get_ApduReply( ppBuffer ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>} <br> <br>catch (HRESULT hr) { <br>hresult = hr; <br>TRACE_CATCH(_T("GetChallenge"),hr); <br>} <br> <br>catch (...) { <br>hresult = E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("GetChallenge")); <br>} <br> <br>// Release cmd interface <br>if (pCmd != NULL) <br>pCmd-&gt;Release(); <br> <br>return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardAuth::ICC_Auth <br> <br>Allows application to authenticate the ICC <br> <br>Arguments: <br> <br>    lAlgorID - specifies the algorithm to be used in the authentication <br>process. <br> <br>pParam - Contains vendor specific parameters used in the <br>authentication process. <br> <br>  lpLength - contains the length of the valid data in ppBuffer. <br> <br>ppBuffer - (in) cotains the data to be used in the authentication process; <br>(out) contins the result of the signation process <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardAuth::ICC_Auth( <br>long lAlgorID, <br>LPBYTEBUFFER pParam, <br>LONG* lpLength, <br>LPBYTEBUFFER *ppBuffer) <br>{ <br>//locals <br>HRESULThresult = S_OK; <br>LPSCARDCMDpCmd = NULL; <br> <br>try { <br>m_lAlgorID = lAlgorID; <br> <br>// Is internal pointer to "Creation Class" valid <br>if (m_Manage == NULL) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// Must have valid pointer... <br>if (ppBuffer == NULL) <br>throw ( (HRESULT) E_POINTER ); <br> <br>// create buffer if needed <br>if ( (*ppBuffer) == NULL) { <br>hresult = m_Manage-&gt;m_pISCardTypeConv-&gt;CreateByteBuffer((ULONG) 0, <br>ppBuffer); <br>if (FAILED(hresult)) <br>throw (hresult); <br>};// if <br> <br>// Create Cmd Object <br>hresult = m_Manage-&gt;CreateCmdObject(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>// Do internal Authenticate <br>hresult = m_Manage-&gt;m_pISCardISO7816-&gt;InternalAuthenticate((BYTE) lAlgorID, <br>NULL, <br>(*ppBuffer), <br>0, <br>&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>// Force correct class id for the the CryptoFlex card <br>hresult = pCmd-&gt;put_ClassId(VENDOR_CLASS_ID); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>hresult = m_Manage-&gt;m_pISCard-&gt;LockSCard(); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;Transaction(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;UnlockSCard(LEAVE); <br>if (FAILED(hresult)) <br>throw(hresult); <br> <br>//interpret results and return <br>hresult = pCmd-&gt;get_ApduReplyLength(&amp;m_lReplyLength); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = pCmd-&gt;get_ReplyStatus( &amp;m_wReplyStatus ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>if ( m_wReplyStatus != 0x9000) <br>throw (E_FAIL); <br>hresult = pCmd-&gt;get_ApduReply( ppBuffer ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>} <br> <br>catch (HRESULT hr) { <br>hresult=hr; <br>TRACE_CATCH(_T("ICC_Auth"), hr); <br>} <br> <br>catch (...) { <br>hresult = (HRESULT) E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("ICC_AUTH")); <br>} <br> <br>// Release cmd interface <br>if (pCmd != NULL) <br>pCmd-&gt;Release(); <br> <br>return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardAuth::Initialize <br> <br>Initializes the object for use. <br> <br>Arguments: <br> <br>lp - a long pointer to the "controlling" ISCardManage object. <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardAuth::Initialize( LONG *lp) <br>{ <br>// Locals <br>HRESULThresult = S_OK; <br> <br>try { <br>// Check Params, etc.. <br>if (lp == NULL) <br>throw ( (HRESULT) E_INVALIDARG ); <br> <br>if (m_Manage != NULL) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// Ok... <br>m_Manage = (LPCSCARDMANAGE) lp; <br>} <br> <br>catch (HRESULT hr) { <br>hresult=hr; <br>TRACE_CATCH(_T("Initialize"), hr); <br>} <br> <br>catch (...) { <br>hresult = (HRESULT) E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("Initialize")); <br>} <br> <br>return (hresult); <br>} <br> <br> <br>/*++ <br> <br>CSCardAuth::User_Auth <br> <br>Allows a remote app to authenticate the Client <br> <br>Arguments: <br> <br>    lAlgorID - specifies the algorithm to be used in the authentication <br>process. <br> <br>pParam - Contains vendor specific parameters used in the <br>authentication process. <br> <br>lpLength - contains the length of the valid data in pBuffer. <br> <br>ppBuffer - contains the challenge data on input and the authentication <br>data on output. <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardAuth::User_Auth( <br>LONG lAlgorID, <br>LPBYTEBUFFER pParam, <br>LONG* lpLength, <br>LPBYTEBUFFER* ppBuffer) <br>{ <br>//locals <br>HRESULThresult = E_NOTIMPL; <br> <br>try { <br>// Todo: Add code if ICC supports <br>} <br> <br>catch (HRESULT hr) { <br>hresult=hr; <br>TRACE_CATCH(_T("User_Auth"), hr); <br>} <br> <br>catch (...) { <br>hresult = (HRESULT) E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("USER_AUTH")); <br>} <br> <br>return hresult; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

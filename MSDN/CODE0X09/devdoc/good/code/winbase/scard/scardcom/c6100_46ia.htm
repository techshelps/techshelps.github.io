<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDVER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6112"></a>SCARDVER.CPP</h2>
<pre><code>// SCardVer.cpp : Implementation of CSCardVerify <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// Includes <br>// <br>#include "stdafx.h" <br>#include "SCardCom.h" <br>#include "SCardVer.h" <br>#include "scarddef.h" <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// Macros <br>// <br>#ifdef _DEBUG <br>#define TRACE_STR(name,sz) \ <br>TRACE(_T("SCardCOM.DLL: CSCardVerify::%s: %s\n"), name, sz) <br>#define TRACE_CODE(name,code) \ <br>TRACE(_T("SCardCOM.DLL: CSCardVerify::%s: error = 0x%x\n"), name, code) <br>#define TRACE_CATCH(name,code)TRACE_CODE(name,code) <br>#define TRACE_CATCH_UNKNOWN(name)TRACE_STR(name,_T("An unidentified exception has occurred!")) <br>#else <br>#define TRACE_STR(name,sz)((void)0) <br>#define TRACE_CODE(name,code)((void)0) <br>#define TRACE_CATCH(name,code)((void)0) <br>#define TRACE_CATCH_UNKNOWN(name)((void)0) <br>#endif  // _DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSCardVerify <br> <br> <br>/*++ <br> <br>CSCardVerify::FinalConstruct: <br> <br>    This routine defines a final constructor that is called after the constructor <br>for the template class is called. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>HRESULT CSCardVerify::FinalConstruct() <br>{ <br>// Locals. <br>HRESULT hresult = S_OK; <br> <br>try { <br>m_Manage = NULL; <br>} <br> <br>catch (...) { <br>} <br> <br>return (hresult); <br>} <br> <br>/*++ <br> <br>CSCardVerify::FinalRelease: <br> <br>    This routine defines a final release. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>HRESULT CSCardVerify::FinalRelease() <br>{ <br>// Locals. <br>HRESULT hresult = S_OK; <br> <br>try { <br>// Decrement the reference count on the "creation" object <br>if (m_Manage != NULL) <br>m_Manage-&gt;Release(); <br>} <br> <br>catch (...) { <br>} <br> <br>return (hresult); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// ISCardVerify Methods <br>// <br> <br> <br>/*++ <br> <br>CSCardVerify::ChangeCode <br> <br>This method changes the current user code. <br> <br>Arguments: <br> <br>    pOldCode - contains the user's current code to be presented <br>to the ICC in the change process in order to authenticate the user <br> <br>pNewCode - contains the NEW code to replace the current code. <br> <br>Flags - indicates whether the code is global or local also whether the <br>code should be enabled or disabled. <br> <br>dwRef - ICC specific reference <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardVerify::ChangeCode( <br>LPBYTEBUFFER pOldCode, <br>LPBYTEBUFFER pNewCode, <br>SCARD_FLAGS Flags, <br>LONG lRef) <br>{ <br>//locals <br>HRESULThresult = E_NOTIMPL; <br> <br>// to do <br>return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardVerify::Initialize <br> <br>Initializes the object for use. <br> <br>Arguments: <br> <br>lp - a long pointer to the "controlling" ISCardManage object. <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br>STDMETHODIMP CSCardVerify::Initialize( LONG *lp) <br>{ <br>// Locals <br>HRESULThresult = S_OK; <br> <br>try { <br>// Check Params, etc.. <br>if (lp == NULL) <br>throw ( (HRESULT) E_INVALIDARG ); <br> <br>if (m_Manage != NULL) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// Ok... <br>m_Manage = (LPCSCARDMANAGE) lp; <br>} <br> <br>catch (HRESULT hr) { <br>hresult=hr; <br>TRACE_CATCH(_T("Initialize"), hr); <br>} <br> <br>catch (...) { <br>hresult = (HRESULT) E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("Initialize")); <br>} <br> <br>return (hresult); <br>} <br> <br> <br>/*++ <br> <br>CSCardVerify::Unblock <br> <br>Unblocks a previously blocked IHV. <br> <br>Arguments: <br> <br>    dwData - contains vendor specific data to be used in the unblocking <br>process. <br> <br>Flags - indicates whether the code is a global or local <br> <br>dwRef - ICC specific reference <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardVerify::Unblock( <br>LONG lData, <br>SCARD_FLAGS Flags, <br>LONG lRef) <br>{ <br>//locals <br>HRESULThresult = E_NOTIMPL; <br> <br>// to do <br>return hresult; <br>} <br> <br> <br>/*++ <br> <br>CSCardVerify::ResetSecurityState <br> <br>Resets either the global or local security context <br> <br>Arguments: <br> <br>    Flags - SC_FL_IHV_GLOBAL or SC_FL_IHV_LOCAL <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardVerify::ResetSecurityState( <br>SCARD_FLAGS Flags) <br>{ <br>//locals <br>HRESULThresult = E_NOTIMPL; <br> <br>// to do <br>return hresult; <br>} <br> <br>/*++ <br> <br>CSCardVerify::Verify <br> <br>Authenticate the user <br> <br>Arguments: <br> <br>    pCode - contains the Code to be presented to the ICC in the IHV  <br>process. <br> <br>Flags - indicates whether the code is global or local <br> <br>lpRef - ICC specific reference <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>--*/ <br> <br>STDMETHODIMP CSCardVerify::Verify( <br>LPBYTEBUFFER pCode, <br>SCARD_FLAGS Flags, <br>LONG* lpRef) <br>{ <br>//locals <br>HRESULThresult = S_OK; <br>BYTEbyReferenceControl; <br>LPSCARDCMDpCmd = NULL; <br> <br>try { <br>// Is internal pointer to "Creation Class" valid <br>if (m_Manage == NULL) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// Check params... <br>if (pCode == NULL) <br>throw ( (HRESULT) E_POINTER ); <br> <br> <br>// Create the p1-p2 paramters..In this case assume the verification (i.e. PIN, <br>// etc) is to be passed in as pCode <br>if (Flags == SC_FL_IHV_GLOBAL) <br>byReferenceControl = SC_GLOBAL_REF; <br>else <br>byReferenceControl = SC_SPECIFIC_REF; <br> <br>// ISO7186 COM builds command <br>hresult = m_Manage-&gt;m_pISCardISO7816-&gt;Verify(byReferenceControl, <br>pCode, <br>&amp;pCmd); <br> <br>if (FAILED(hresult)) <br>throw(hresult); <br> <br>// Force correct class id for the vendor's card <br>hresult = pCmd-&gt;put_ClassId(VENDOR_CLASS_ID); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>hresult = m_Manage-&gt;m_pISCard-&gt;LockSCard(); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;Transaction(&amp;pCmd); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = m_Manage-&gt;m_pISCard-&gt;UnlockSCard(LEAVE); <br>if (FAILED(hresult)) <br>throw (hresult); <br> <br>//interpret results and return <br>hresult = pCmd-&gt;get_ApduReplyLength(&amp;m_lReplyLength); <br>if (FAILED(hresult)) <br>throw (hresult); <br>hresult = pCmd-&gt;get_ReplyStatus( &amp;m_wReplyStatus ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>if (m_wReplyStatus != 0x9000) <br>throw ( (HRESULT) E_FAIL); <br>} <br> <br>catch (HRESULT hr){ <br>hresult = hr; <br>TRACE_CATCH(_T("Verify"), hr); <br>} <br> <br>catch (...){ <br>hresult = E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("Verify")); <br>} <br> <br>if (pCmd != NULL) <br>pCmd-&gt;Release(); <br> <br>return hresult; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

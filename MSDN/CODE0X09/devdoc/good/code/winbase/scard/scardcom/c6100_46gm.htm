<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDCOM.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6106"></a>SCARDCOM.IDL</h2>
<pre><code>// SCardCom.idl : IDL source for SCardCom.dll <br>// <br> <br>// This file will be processed by the MIDL tool to <br>// produce the type library (SCardCom.tlb) and marshalling code. <br> <br>#ifndef DO_NO_IMPORTS <br>    import "SspsIdl.idl"; <br>    import "ocidl.idl"; <br>#endif <br> <br>interface ISCardAuth; <br>interface ISCardFileAcess; <br>interface ISCardManage; <br>interface ISCardVerify; <br> <br>cpp_quote("") <br>cpp_quote("//////////////////////////////////////////////////////////////////") <br>cpp_quote("//") <br>cpp_quote("// Types and Constants") <br>cpp_quote("//") <br> <br>cpp_quote("#ifndef _HSCARD_FILE") <br>    cpp_quote("#define _HSCARD_FILE") <br>    typedef LONG HSCARD_FILE; <br>cpp_quote("#endif // _HSCARD_FILE") <br> <br>cpp_quote("#ifndef _HSCARD_DEFINED") <br>    cpp_quote("#define _HSCARD_DEFINED") <br>    typedef LONG HSCARD; <br>cpp_quote("#endif") <br> <br>cpp_quote("#ifndef _NULL_DEFINED") <br>    cpp_quote("#define _NULL_DEFINED") <br>    #define NULL    0 <br>cpp_quote("#endif // !_NULL_DEFINED") <br> <br>cpp_quote("#ifndef _LPBYTE_DEFINED") <br>    cpp_quote("#define _LPBYTE_DEFINED") <br>    typedef [public] BYTE *LPBYTE; <br>cpp_quote("#endif // !_LPBYTE_DEFINED") <br> <br>cpp_quote("#ifndef _LPCBYTE_DEFINED") <br>    cpp_quote("#define _LPCBYTE_DEFINED") <br>    typedef [public] const BYTE *LPCBYTE; <br>cpp_quote("#endif // !_LPCBYTE_DEFINED") <br> <br>cpp_quote("#ifndef _ISO_ERROR_SUCCESS") <br>    cpp_quote("#define _ISO_ERROR_SUCCESS") <br>    #define ISO_SUCCESS 0x9000 <br>    cpp_quote("#define ISO_SUCCESS      (0x9000)") <br>cpp_quote("#endif // !_ISO_ERROR_SUCCESS") <br> <br>cpp_quote("#ifndef _MAX_PATH_LEN_DEFINED") <br>    cpp_quote("#define _MAX_PATH_LEN_DEFINED") <br>    #define MAX_PATH_LEN    256 <br>    cpp_quote("#define MAX_PATH_LEN     (256)") <br>cpp_quote("#endif // !_MAX_PATH_LEN_DEFINED") <br> <br>cpp_quote("#ifndef _MAX_NAME_LEN_DEFINED") <br>    cpp_quote("#define _MAX_NAME_LEN_DEFINED") <br>    #define MAX_NAME_LEN    16 <br>    cpp_quote("#define MAX_NAME_LEN     (16)") <br>cpp_quote("#endif // !_MAX_NAME_LEN_DEFINED") <br> <br>cpp_quote("#ifndef _MAX_WRITE_LEN_DEFINED") <br>    cpp_quote("#define _MAX_WRITE_LEN_DEFINED") <br>    #define MAX_WRITE_LEN   255 <br>    cpp_quote("#define MAX_WRITE_LEN        (255)") <br>cpp_quote("#endif // !_MAX_WRITE_LEN_DEFINED") <br> <br>cpp_quote("#ifndef _MAX_READ_LEN_DEFINED") <br>    cpp_quote("#define _MAX_READ_LEN_DEFINED") <br>    #define MAX_READ_LEN    250 <br>    cpp_quote("#define MAX_READ_LEN     (250)") <br>cpp_quote("#endif // !_MAX_READ_LEN_DEFINED") <br> <br>cpp_quote("#ifndef _SC_TLV_VALID_DEFINED") <br>    cpp_quote("#define _SC_TLV_VALID_DEFINED") <br>    #define SC_TLV_VALID    1 <br>    cpp_quote("#define SC_TLV_VALID     (1)") <br>cpp_quote("#endif // !_SC_TLV_VALID_DEFINED") <br> <br>cpp_quote("#ifndef _SC_TLV_NOT_VALID_DEFINED") <br>    cpp_quote("#define _SC_TLV_NOT_VALID_DEFINED") <br>    #define SC_TLV_NOT_VALID    0 <br>    cpp_quote("#define SC_TLV_NOT_VALID     (0)") <br>cpp_quote("#endif // !_SC_TLV_NOT_VALID_DEFINED") <br> <br>cpp_quote("#ifndef _REFTYPE_DEFINED") <br>    cpp_quote("#define _REFTYPE_DEFINED") <br>    typedef [helpstring("Smart Card File Access Reference Types"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagREFTYPE { <br>        SC_TYPE_BY_NAME, <br>        SC_TYPE_BY_ID, <br>        SC_TYPE_BY_SHORT_ID <br>     } REFTYPE; <br>cpp_quote("#endif // !_REFTYPE_DEFINED") <br> <br>cpp_quote("#ifndef _FILETYPE_DEFINED") <br>    cpp_quote("#define _FILETYPE_DEFINED") <br>    typedef [helpstring("Smart Card File Access File Types"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagFILETYPE { <br>        SC_TYPE_DIRECTORIES, <br>        SC_TYPE_FILES, <br>        SC_TYPE_ALL_FILES, <br>        SC_TYPE_DIRECTORY_FILE, <br>        SC_TYPE_TRANSPARENT_EF, <br>        SC_TYPE_FIXED_EF, <br>        SC_TYPE_CYCLIC_EF, <br>        SC_TYPE_VARIABLE_EF <br>     } FILETYPE; <br>cpp_quote("#endif // !_FILETYPE_DEFINED") <br> <br>cpp_quote("#ifndef _SEEKTYPE_DEFINED") <br>    cpp_quote("#define _SEEKTYPE_DEFINED") <br>    typedef [helpstring("Smart Card File Access Seek Types"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagSEEKTYPE { <br>        SC_SEEK_FROM_BEGINNING, <br>        SC_SEEK_FROM_END, <br>        SC_SEEK_RELATIVE <br>     } SEEKTYPE; <br>cpp_quote("#endif // !_SEEKTYPE_DEFINED") <br> <br>cpp_quote("#ifndef _SCARD_FLAGS_DEFINED") <br>    cpp_quote("#define _SCARD_FLAGS_DEFINED") <br>    typedef [helpstring("Smart Card File/Verification Flags"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagSCARD_FLAGS { <br>        SC_FL_SECURE_MESSAGING = 0x01, <br>        SC_FL_REPLACE = 0x02, <br>        SC_FL_ERASE = 0x04, <br>        SC_FL_OR = 0x08, <br>        SC_FL_AND = 0x10, <br>        SC_FL_RECURSIVE = 0x20, <br>        SC_FL_NON_RECURSIVE = 0x40, <br>        SC_FL_IHV_GLOBAL = 0x80, <br>        SC_FL_IHV_LOCAL = 0x100, <br>        SC_FL_IHV_ENABLE = 0x200, <br>        SC_FL_IHV_DISABLE = 0x400, <br>        SC_FL_IHV_CHANGE = 0x800, <br>        SC_FL_PREALLOCATE = 0x1000, <br>        SC_FL_GET_ALL_PROPERTIES = 0x2000, <br>        SC_FL_STAT_DEFAULT = 0x4000 <br>     } SCARD_FLAGS; <br>cpp_quote("#endif // !_SCARD_FLAGS_DEFINED") <br> <br>cpp_quote("#ifndef _SCARD_SHARE_MODES_DEFINED") <br>    cpp_quote("#define _SCARD_SHARE_MODES_DEFINED") <br>    typedef [helpstring("SCard Share Modes"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagSCARD_SHARE_MODES { <br>        EXCLUSIVE = 1, <br>        SHARED = 2 <br>     } SCARD_SHARE_MODES; <br>cpp_quote("#endif // !_SCARD_SHARE_MODES_DEFINED") <br> <br>cpp_quote("#ifndef _SCARD_DISPOSITIONS_DEFINED") <br>    cpp_quote("#define _SCARD_DISPOSITIONS_DEFINED") <br>    typedef [helpstring("SCard Dispositions"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagSCARD_DISPOSITIONS { <br>        LEAVE = 0, <br>        RESET = 1, <br>        UNPOWER = 2, <br>        EJECT = 3 <br>     } SCARD_DISPOSITIONS; <br>cpp_quote("#endif // !_SCARD_DISPOSITIONS_DEFINED") <br> <br>cpp_quote("#ifndef _TLV_TABLE_DEFINED") <br>    cpp_quote("#define _TLV_TABLE_DEFINED") <br>    typedef [helpstring("TLV Structures"), <br>             //uuid(), <br>             //helpcontext(), <br>             version(1.0)] <br>    struct tagTLV_TABLE { <br>        LONG cbSize; <br>        [size_is(cbSize)] BYTE byData[]; <br>     } TLV_TABLE; <br> <br>    cpp_quote("#define _CB_TLV_TABLE_DEFINED") <br>    cpp_quote("#define CB_TLV_TABLE     (sizeof(TLV_TABLE))") <br> <br>    cpp_quote("#define _PTLV_TABLE_DEFINED") <br>    typedef [unique] TLV_TABLE *PTLV_TABLE; <br> <br>    cpp_quote("#define _PCTLV_TABLE_DEFINED") <br>    typedef [unique] const TLV_TABLE *PCTLV_TABLE; <br> <br>    cpp_quote("#define _LPTLV_TABLE_DEFINED") <br>    typedef [unique] TLV_TABLE *LPTLV_TABLE; <br> <br>    cpp_quote("#define _LPCTLV_TABLE_DEFINED") <br>    typedef [unique] const TLV_TABLE *LPCTLV_TABLE; <br>cpp_quote("#endif // !_TLV_TABLE_DEFINED") <br> <br>cpp_quote("#ifndef _SCARD_STATES_DEFINED") <br>    cpp_quote("#define _SCARD_STATES_DEFINED") <br>    typedef [helpstring("SCard States"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagSCARD_STATES { <br>        ABSENT = 1, <br>        PRESENT = 2, <br>        SWALLOWED = 3, <br>        POWERED = 4, <br>        NEGOTIABLEMODE = 5, <br>        SPECIFICMODE = 6 <br>     } SCARD_STATES; <br>cpp_quote("#endif // !_SCARD_STATES_DEFINED") <br> <br>cpp_quote("#ifndef _SCARD_PROTOCOLS_DEFINED") <br>    cpp_quote("#define _SCARD_PROTOCOLS_DEFINED") <br>    typedef [helpstring("SCard Protocols"), <br>             //uuid(), <br>             //helpcontext(), <br>             v1_enum,   // force 32-bit transmission over RPC, if in use... <br>             version(1.0)] <br>    enum tagSCARD_PROTOCOLS { <br>        T0 = 0x01,  // T=0 is the active protocol. <br>        T1 = 0x02,  // T=1 is the active protocol. <br>        RAW = 0xff  // Raw is the active protocol. <br>     } SCARD_PROTOCOLS; <br>cpp_quote("#endif // !_SCARD_PROTOCOLS_DEFINED") <br> <br>cpp_quote("#ifndef _FILESPEC_DEFINED") <br>    cpp_quote("#define _FILESPEC_DEFINED") <br>    typedef [helpstring("File specification structure."), <br>             //uuid(), <br>             //helpcontext(), <br>             version(1.0)] <br>    struct tagFILESPEC { <br>        WORD wFileID; <br>        BYTE byFilename[MAX_NAME_LEN]; <br>        BYTE byShortID; <br>     } FILESPEC; <br> <br>    cpp_quote("#define _CB_FILESPEC_DEFINED") <br>    cpp_quote("#define CB_FILESPEC  (sizeof(FILESPEC))") <br> <br>    cpp_quote("#define _PFILESPEC_DEFINED") <br>    typedef [public] FILESPEC *PFILESPEC; <br> <br>    cpp_quote("#define _PCFILESPEC_DEFINED") <br>    typedef [public] const FILESPEC *PCFILESPEC; <br> <br>    cpp_quote("#define _LPFILESPEC_DEFINED") <br>    typedef [public] FILESPEC *LPFILESPEC; <br> <br>    cpp_quote("#define _LPCFILESPEC_DEFINED") <br>    typedef [public] const FILESPEC *LPCFILESPEC; <br>cpp_quote("#endif // _FILESPEC_DEFINED") <br> <br> <br>cpp_quote("") <br>cpp_quote("//////////////////////////////////////////////////////////////////") <br>cpp_quote("//") <br>cpp_quote("// ISCardAuth Interface") <br>cpp_quote("//") <br> <br>cpp_quote("#ifndef _LPSCARDAUTH_DEFINED") <br>cpp_quote("#define _LPSCARDAUTH_DEFINED") <br>    [ <br>        object, <br>        uuid(7B063D61-6E40-11d0-B858-00C04FD424B9), <br>        dual, <br>        helpstring("ISCardAuth Interface"), <br>        pointer_default(unique) <br>    ] <br>    interface ISCardAuth : IDispatch <br>    { <br>        // Includes - <br> <br>        import "oaidl.idl"; <br> <br>        // Pointer(s) - <br> <br>        typedef [unique] ISCardAuth* LPSCARDATH; <br>        typedef [unique] LPSCARDATH LPSCARDAUTH; <br> <br>        // Properties - <br> <br>        // Methods - <br>        [id(0), <br>         helpstring("Allows application to authenticate itself to the ICC")] <br>        HRESULT APP_Auth(   [in]    LONG lAlgoID, <br>                            [in]    LPBYTEBUFFER pParam, <br>                            [in]    LPBYTEBUFFER pBuffer); <br> <br>        [id(1), <br>         helpstring("Returns a challenge from ICC ")] <br>        HRESULT GetChallenge(   [in, optional]  LONG lAlgoID, <br>[in]    LPBYTEBUFFER pParam, <br>[in,out]    LONG* lpLengthOfChallenge, <br>[in,out]    LPBYTEBUFFER* ppBuffer); <br> <br>        [id(2), <br>         helpstring("Allows application to authenticate the ICC")] <br>        HRESULT ICC_Auth(   [in]    LONG lAlgoID, <br>[in]    LPBYTEBUFFER pParam, <br>[in,out] LONG* lpLength, <br>[in,out] LPBYTEBUFFER* ppBuffer); <br> <br>        [id(3), <br>         helpstring("Called to initialize the object. This is an internal ONLY use function."), <br>         hidden] <br>        HRESULT Initialize( LONG* lp ); <br> <br>        [id(4), <br>         helpstring("Allows a remote app to authenticate the Client")] <br>        HRESULT User_Auth(  [in]    LONG lAlgoID, <br>[in]    LPBYTEBUFFER pParam, <br>[in,out]    LONG* lpLength, <br>[in,out]    LPBYTEBUFFER* ppBuffer); <br> <br>    }; <br>cpp_quote("#endif // !_LPSCARDAUTH_DEFINED") <br> <br> <br>cpp_quote("") <br>cpp_quote("//////////////////////////////////////////////////////////////////") <br>cpp_quote("//") <br>cpp_quote("// ISCardFileAccess Interface Definition") <br>cpp_quote("//") <br> <br>cpp_quote("#ifndef _LPSCARDFILEACCESS_DEFINED") <br>cpp_quote("#define _LPSCARDFILEACCESS_DEFINED") <br>    [ <br>        object, <br>        uuid(4029DD8A-5902-11D0-B84C-00C04FD424B9), <br>        dual, <br>        helpstring("ISCardFileAccess Interface"), <br>        pointer_default(unique) <br>    ] <br>    interface ISCardFileAccess : IDispatch <br>    { <br>        // Include(s) - <br> <br>        import "oaidl.idl"; <br> <br>        // Pointer(s) - <br>        typedef [unique] ISCardFileAccess* LPSCARDFILE; <br>        typedef [unique] LPSCARDFILE LPSCARDFILEACCESS; <br> <br>        // Method(s) - <br> <br>        [id(0), <br>         helpstring("Change the currently selected directory to the specified directory")] <br>        HRESULT ChangeDir([in] REFTYPE refType, <br>                          [in] BSTR bstrNewDir); <br> <br>        [id(1), <br>         helpstring("Closes the specified file")] <br>        HRESULT Close([in] HSCARD_FILE hFile); <br> <br>        [id(2), <br>         helpstring("Create a file of the specified type at a specified location")] <br>        HRESULT Create([in] REFTYPE refType, <br>                       [in] BSTR bstrPathSpec, <br>                       [in,out] LPTLV_TABLE* ppTLVs, <br>   [in,out] LONG* lpcTLVs, <br>                       [in] SCARD_FLAGS flags, <br>                       [in,defaultvalue(NULL)] LPBYTEBUFFER pDataBuffer); <br> <br>        [id(3), <br>         helpstring("Deletes the specified file")] <br>        HRESULT Delete([in] REFTYPE refType, <br>                       [in] BSTR bstrPathSpec, <br>                       [in] SCARD_FLAGS flags); <br> <br>        [id(4), <br>         helpstring("Retrieve a list of the FileSpecs of the specified type")] <br>        HRESULT Directory([in] FILETYPE fileType, <br>                          [out, retval] LPSAFEARRAY *ppFileList);   // SAFEARRAY of BSTRs.. <br> <br>        [id(5), <br>         helpstring("Retrieve the absolute path to the currently selected directory")] <br>        HRESULT GetCurrentDir([out, retval] BSTR* pbstrPathSpec); <br> <br>        [id(6), <br>         helpstring("Retrieve list of file capabilites.")] <br>        HRESULT GetFileCapabilities([in,out] LPTLV_TABLE* ppProperties, <br>                                    [in,out] LONG* plProperties, <br>                                    [in] SCARD_FLAGS Flags); <br> <br>        [id(7), <br>         helpstring("Retrieve the primitive data referred by tags (TLV) for the specified object")] <br>        HRESULT GetProperties([in] REFTYPE refType, <br>                              [in] BSTR bstrPathSpec, <br>                              [in,out] LPTLV_TABLE* ppTLV, <br>  [in,out] LONG* plcTLV, <br>                              [in] SCARD_FLAGS flags); <br> <br>        [id(8), <br>         helpstring("Called to initialize the object. This is an internal ONLY use function."), <br>         hidden] <br>        HRESULT Initialize( LONG* lp ); <br> <br>        [id(9), <br>         helpstring("Invalidate the specified file (EF or DF)")] <br>        HRESULT Invalidate([in] BSTR bstrPathSpec, <br>                           [in] SCARD_FLAGS flags); <br> <br>        [id(10), <br>         helpstring("Opens the specified file for further use")] <br>        HRESULT Open([in] REFTYPE refType, <br>                     [in] BSTR bstrPathSpec, <br>                     [out, retval] HSCARD_FILE* phFile); <br> <br>        [id(11), <br>         helpstring("Read data from the specified file")] <br>        HRESULT Read([in] HSCARD_FILE hFile, <br>                     [in,out] LONG *lBytesToRead, <br>                     [out] LPBYTEBUFFER* ppBuffer, <br>                     [in] SCARD_FLAGS flags); <br> <br>        [id(12), <br>         helpstring("Rehabilitate the specified file (EF or DF)")] <br>        HRESULT Rehabilitate([in] BSTR bstrPathSpec, <br>                             [in] SCARD_FLAGS flags); <br> <br>        [id(13), <br>         helpstring("Selects the object from which access (read or write) will be done")] <br>        HRESULT Seek([in] HSCARD_FILE hFile, <br>                     [in] LONG lOffset, <br>                     [in] SEEKTYPE seek); <br> <br>        [id(14), <br>         helpstring("Set the primitive data referred by tags (TLV) for the specified object (file or directory)")] <br>        HRESULT SetProperties([in] REFTYPE refType, <br>                              [in] BSTR bstrPathSpec, <br>                              [in] LPTLV_TABLE pTLV, <br>  [in] LONG lcTLV, <br>                              [in] SCARD_FLAGS flags); <br> <br>        [id(15), <br>         helpstring("Write data to the specified file")] <br>        HRESULT Write([in] HSCARD_FILE hFile, <br>[in] LONG lLength, <br>[in] LPBYTEBUFFER pData, <br>[in] SCARD_FLAGS flags); <br> <br>    }; <br>cpp_quote("#endif // !_LPSCARDFILEACCESS_DEFINED") <br> <br> <br>cpp_quote("") <br>cpp_quote("//////////////////////////////////////////////////////////////////") <br>cpp_quote("//") <br>cpp_quote("// ISCardMange Interface") <br>cpp_quote("//") <br> <br>cpp_quote("#ifndef _LPSCARDMANAGE_DEFINED") <br>cpp_quote("#define _LPSCARDMANAGE_DEFINED") <br>    [ <br>        object, <br>        uuid(5E586211-5A09-11d0-B84C-00C04FD424B9), <br>        dual, <br>        helpstring("ISCardManage Interface"), <br>        pointer_default(unique) <br>    ] <br>    interface ISCardManage : IDispatch <br>    { <br>        // Includes - <br> <br>        import "oaidl.idl"; <br> <br>        // Pointer(s) - <br> <br>        typedef [unique] ISCardManage* LPSCARDMAN; <br>        typedef [unique] LPSCARDMAN LPSCARDMANAGE; <br> <br>        // Properties - <br> <br>        // Methods - <br>        [id(0), <br>         helpstring("Allows application to start communication with an ICC")] <br>        HRESULT AttachByHandle([in] HSCARD hICC); <br> <br>        [id(1), <br>         helpstring("Allows application request establishment of a context for a specific IFD.")] <br>        HRESULT AttachByIFD([in] BSTR bstrIFDName, <br>[in] SCARD_SHARE_MODES Flags ); <br> <br>        [id(2), <br>         helpstring("Creates instance of ISCardFileAccess interface.")] <br>         HRESULT CreateFileAccess( ISCardFileAccess** ppISCardFileAccess ); <br> <br>        [id(3), <br>         helpstring("Creates instance of ISCardAuth interface.")] <br>         HRESULT CreateCardAuth( ISCardAuth** ppISCardAuth ); <br> <br>        [id(4), <br>         helpstring("Creates instance of ISCardVerify interface.")] <br>         HRESULT CreateCHVerification( ISCardVerify** ppISCardVerify ); <br> <br>        [id(5), <br>         helpstring("Release the attachment to a particular ICC or IFD.")] <br>        HRESULT Detach(); <br> <br>        [id(6), <br>         helpstring("Lock for exclusive use the connected IFD/ICC.")] <br>        HRESULT Lock(); <br> <br>        [id(7), <br>         helpstring("Allows application to reconnect to an ICC or IFD.")] <br>        HRESULT Reconnect(); <br> <br>        [id(8), <br>         helpstring("Get status of ICC/IFD.")] <br>        HRESULT Status( [out]   SCARD_STATES *pStatus, <br>                        [out]   SCARD_PROTOCOLS *pProtocol); <br> <br>        [id(9), <br>         helpstring("Unlock/release exclusive use of the connected IFD/ICC.")] <br>        HRESULT Unlock([in, defaultvalue(LEAVE)] <br>SCARD_DISPOSITIONS Disposition); <br> <br>        // New interfaces <br>        [id(10), <br>         helpstring("Creates an instance of an interface by GUID value of name.")] <br>        HRESULT CreateInterface(    [in] LPGUID pguidInterface, <br>                                    [in, defaultvalue(NULL)] BSTR bstrName, <br>                                    [in, defaultvalue(NULL)] LONG *pUserData, <br>                                    [out] LPUNKNOWN *ppInterface); <br>    }; <br>cpp_quote("#endif // !_LPSCARDMANGEMENT_DEFINED") <br> <br> <br>cpp_quote("") <br>cpp_quote("//////////////////////////////////////////////////////////////////") <br>cpp_quote("//") <br>cpp_quote("// ISCardVerify Interface") <br>cpp_quote("//") <br> <br>cpp_quote("#ifndef _LPSCARDVERIFY_DEFINED") <br>cpp_quote("#define _LPSCARDVERIFY_DEFINED") <br>    [ <br>        object, <br>        uuid(4029DD85-5902-11D0-B84C-00C04FD424B9), <br>        dual, <br>        helpstring("ISCardVerify Interface"), <br>        pointer_default(unique) <br>    ] <br>    interface ISCardVerify : IDispatch <br>    { <br>        // Includes - <br> <br>        import "oaidl.idl"; <br> <br>        // Pointer(s) - <br> <br>        typedef [unique] ISCardVerify* LPSCARDVER; <br>        typedef [unique] LPSCARDVER LPSCARDVERIFY; <br> <br>        // Properties - <br> <br>        // Methods - <br>        [id(0), <br>         helpstring("Change the current user code")] <br>        HRESULT ChangeCode( [in]    LPBYTEBUFFER pOldCode, <br>[in]    LPBYTEBUFFER pNewCode, <br>[in]    SCARD_FLAGS Flags, <br>[in]    LONG lRef); <br> <br>        [id(1), <br>         helpstring("Called to initialize the object. This is an internal ONLY use function."), <br>         hidden] <br>        HRESULT Initialize( LONG* lp ); <br> <br>        [id(2), <br>         helpstring("Unblock a blocked IHV")] <br>        HRESULT Unblock([in]    LONG lData, <br>[in]    SCARD_FLAGS Flags, <br>[in]    LONG lRef); <br> <br>        [id(3), <br>         helpstring("Resets the security context.")] <br>        HRESULT ResetSecurityState( [in]SCARD_FLAGS Flags); <br> <br>        [id(4), <br>         helpstring("Authenticate the user.")] <br>        HRESULT Verify([in]LPBYTEBUFFER pCode, <br>[in]SCARD_FLAGS Flags, <br>[in,out]LONG* lpRef); <br>    }; <br>cpp_quote("#endif // !_LPSCARDVERIFICATION_DEFINED") <br> <br>cpp_quote("") <br>cpp_quote("//////////////////////////////////////////////////////////////////") <br>cpp_quote("//") <br>cpp_quote("// SCardCom Type Library") <br>cpp_quote("//") <br> <br>[ <br>    uuid(4029DD83-5902-11D0-B84C-00C04FD424B9), <br>    version(1.0), <br>    helpstring("SCardCom 1.0 Type Library") <br>] <br>library SCARDCOMLib <br>{ <br>    importlib("stdole32.tlb"); <br>    importlib("stdole2.tlb"); <br> <br>    [ <br>        uuid(B0598981-6E6F-11d0-B859-00C04FD424B9), <br>        helpstring("SCardAuth Class") <br>    ] <br>    coclass SCardAuth <br>    { <br>        [default] interface ISCardAuth; <br>    }; <br>    [ <br>        uuid(4029DD8E-5902-11D0-B84C-00C04FD424B9), <br>        helpstring("SCardFileAccess Class") <br>    ] <br>    coclass SCardFileAccess <br>    { <br>        [default] interface ISCardFileAccess; <br>    }; <br>    [ <br>        uuid(5E586218-5A09-11d0-B84C-00C04FD424B9), <br>        helpstring("SCardManage Class") <br>    ] <br>    coclass SCardManage <br>    { <br>        [default] interface ISCardManage; <br>    }; <br>    [ <br>        uuid(4029DD89-5902-11D0-B84C-00C04FD424B9), <br>        helpstring("SCardVerify Class") <br>    ] <br>    coclass SCardVerify <br>    { <br>        [default] interface ISCardVerify; <br>    }; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDVB.FRM</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6120"></a>SCARDVB.FRM</h2>
<pre><code>VERSION 5.00 <br>Object = "{BDC217C8-ED16-11CD-956C-0000C04E4C0A}#1.1#0"; "TABCTL32.OCX" <br>Object = "{3B7C8863-D78F-101B-B9B5-04021C009402}#1.1#0"; "RICHTX32.OCX" <br>Begin VB.Form FrmSCardVB <br>   BorderStyle     =   1  'Fixed Single <br>   Caption         =   "SSP/Smart Card Test" <br>   ClientHeight    =   3945 <br>   ClientLeft      =   3765 <br>   ClientTop       =   3615 <br>   ClientWidth     =   8625 <br>   LinkTopic       =   "Form1" <br>   MaxButton       =   0   'False <br>   MinButton       =   0   'False <br>   PaletteMode     =   1  'UseZOrder <br>   ScaleHeight     =   3945 <br>   ScaleWidth      =   8625 <br>   Begin VB.TextBox ReaderName <br>      Height          =   285 <br>      Left            =   3720 <br>      TabIndex        =   9 <br>      Text            =   "Bull CP8 Transac 0" <br>      Top             =   240 <br>      Width           =   2775 <br>   End <br>   Begin VB.CheckBox SaveToFile <br>      Caption         =   "Save results to file" <br>      Height          =   255 <br>      Left            =   6840 <br>      TabIndex        =   7 <br>      Top             =   240 <br>      Width           =   1695 <br>   End <br>   Begin TabDlg.SSTab Tabs <br>      Height          =   3135 <br>      Left            =   120 <br>      TabIndex        =   4 <br>      Top             =   720 <br>      Width           =   7095 <br>      _ExtentX        =   12515 <br>      _ExtentY        =   5530 <br>      _Version        =   327680 <br>      Tabs            =   2 <br>      TabHeight       =   520 <br>      TabCaption(0)   =   "Test Step" <br>      TabPicture(0)   =   "scardvb.frx":0000 <br>      Tab(0).ControlCount=   1 <br>      Tab(0).ControlEnabled=   -1  'True <br>      Tab(0).Control(0)=   "Test_Step" <br>      Tab(0).Control(0).Enabled=   0   'False <br>      TabCaption(1)   =   "Test Output" <br>      Tab(1).ControlCount=   1 <br>      Tab(1).ControlEnabled=   0   'False <br>      Tab(1).Control(0)=   "Test_Output" <br>      Tab(1).Control(0).Enabled=   0   'False <br>      Begin RichTextLib.RichTextBox Test_Step <br>         Height          =   2535 <br>         Left            =   120 <br>         TabIndex        =   6 <br>         Top             =   480 <br>         Width           =   6855 <br>         _ExtentX        =   12091 <br>         _ExtentY        =   4471 <br>         _Version        =   327680 <br>         ScrollBars      =   2 <br>         TextRTF         =   $"scardvb.frx":001C <br>      End <br>      Begin RichTextLib.RichTextBox Test_Output <br>         Height          =   2535 <br>         Left            =   -74880 <br>         TabIndex        =   5 <br>         Top             =   480 <br>         Width           =   6855 <br>         _ExtentX        =   12091 <br>         _ExtentY        =   4471 <br>         _Version        =   327680 <br>         ScrollBars      =   2 <br>         TextRTF         =   $"scardvb.frx":00ED <br>      End <br>   End <br>   Begin VB.CheckBox Log <br>      Caption         =   "Log results to file" <br>      Height          =   375 <br>      Left            =   960 <br>      TabIndex        =   3 <br>      Top             =   840 <br>      Width           =   1575 <br>   End <br>   Begin VB.TextBox Iterations <br>      Alignment       =   1  'Right Justify <br>      Height          =   285 <br>      Left            =   1680 <br>      MaxLength       =   3 <br>      TabIndex        =   2 <br>      Text            =   "1" <br>      Top             =   240 <br>      Width           =   495 <br>   End <br>   Begin VB.CommandButton CallSSP <br>      Caption         =   "Run Test!" <br>      Height          =   495 <br>      Left            =   7440 <br>      TabIndex        =   0 <br>      Top             =   3240 <br>      Width           =   1095 <br>   End <br>   Begin VB.Label Label2 <br>      Alignment       =   1  'Right Justify <br>      Caption         =   "Reader Name:" <br>      Height          =   255 <br>      Left            =   2520 <br>      TabIndex        =   8 <br>      Top             =   240 <br>      Width           =   1095 <br>   End <br>   Begin VB.Label Label1 <br>      Caption         =   "Number of iterations:" <br>      Height          =   255 <br>      Left            =   120 <br>      TabIndex        =   1 <br>      Top             =   240 <br>      Width           =   1455 <br>   End <br>End <br>Attribute VB_Name = "FrmSCardVB" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br>' <br>' <br>' Copyright (C) 1996-1997 Microsoft <br>' <br>' Module name: <br>'   SCardVB <br>' <br>' Abstract <br>'   This project is a simple example of how to use Visual Basic 5 <br>'   with the smartcard low-level SSPs <br>' <br>' <br>' Notes: <br>' <br>'   1. The SCardDat, SCardMgr and SCardSrv type libraries must be referenced within this <br>'   project. (Use Project/References...) <br>' <br>'   2. This project expects a data file to be available on the card (ID: 3F05) <br>'   of type transparent EF, of size 120 bytes minimum <br>' <br>'   3. This is simply a brute force approach to show how VB can call the low-level <br>'   SSPs <br> <br>' <br>' Set up variables for each Object <br>' <br>' Or, since the type library is referenced in this project use: <br>' Dim ISCardAuth as New CSCardAuth <br>' <br>Dim ISCardCmd As New CSCardCmd <br>Dim ISCardISO7816 As New CSCardISO7816 <br>Dim ISCard As New CSCard <br> <br>Private Sub CallSSP_Click() <br>On Error GoTo ErrorHandler <br>    ' <br>    ' Catch the click and do something... <br>    ' <br>    Dim lIterations As Long <br>    Dim lLength As Long <br>    Dim rgDataWritten(1) As Long <br>    Dim rgDataRead(1) As Long <br>    Dim TempBuffer(250) As Byte <br>    Dim Pattern_1(120) As Byte <br>    Dim Pattern_2(120) As Byte <br>    Dim bySW1, bySW2 As Byte <br>    Dim FileName As New ByteBuffer <br>    Dim Patterns As New ByteBuffer <br>    Dim Apdu As IByteBuffer <br>    Dim ApduReply As IByteBuffer <br>    Dim sDisplay As String <br>    Dim sDisplayStep As String <br>    Dim Reader As String <br> <br>    ' Initialize Patterns <br>    For i = 0 To 14 <br>        ' Pattern 1 <br>        Pattern_1(i * 8 + 0) = 1: Pattern_1(i * 8 + 1) = 2 <br>        Pattern_1(i * 8 + 2) = 3: Pattern_1(i * 8 + 3) = 4 <br>        Pattern_1(i * 8 + 4) = 5: Pattern_1(i * 8 + 5) = 6 <br>        Pattern_1(i * 8 + 6) = 7: Pattern_1(i * 8 + 7) = 8 <br>        ' Pattern 2 <br>        Pattern_2(i * 8 + 0) = 3: Pattern_2(i * 8 + 1) = 5 <br>        Pattern_2(i * 8 + 2) = 3: Pattern_2(i * 8 + 3) = 5 <br>        Pattern_2(i * 8 + 4) = 3: Pattern_2(i * 8 + 5) = 5 <br>        Pattern_2(i * 8 + 6) = 3: Pattern_2(i * 8 + 7) = 5 <br>    Next i <br> <br>    ' Set readername <br>    Reader = ReaderName.Text <br> <br>    ' Get number of iterations <br>    lIterations = Iterations.Text <br> <br>    ' Attach to a card <br>    ISCard.AttachByReader Reader, Exclusive, T0 <br> <br>    ' Lock for transactions <br>    Call ISCard.LockSCard <br> <br>    Call ISCardISO7816.SetDefaultClassId(192) <br> <br>    Test_Output.Text = "" <br>    Test_Step.Text = "" <br> <br>    For iter = 1 To lIterations <br>        ' Display Step <br>        Test_Output.Text = Test_Output.Text + "Iteration:" + CStr(iter) + Chr(10) <br>        Test_Step.Text = Test_Step.Text + "Iteration:" + CStr(iter) + Chr(10) <br> <br>        ' Build Select MF Command <br>        TempBuffer(0) = 63: TempBuffer(1) = 0 <br>        Call FileName.Initialize(2) <br>        Call FileName.Seek(0, 0) <br>        Call FileName.Write(TempBuffer(0), 2, rgDataWritten(0)) <br>        Call ISCardISO7816.SelectFile(0, 0, FileName, 0, ISCardCmd) <br> <br>        ' Select the MF <br>        Call ISCard.Transaction(ISCardCmd) <br>        bySW1 = ISCardCmd.ReplyStatusSW1 <br>        bySW2 = ISCardCmd.ReplyStatusSW2 <br>        sDisplayStep = Chr(10) + "SelectFile 3F00" <br> <br>        ' Build Select Data file <br>        TempBuffer(0) = 63: TempBuffer(1) = 5 <br>        Call FileName.Seek(0, 0) <br>        Call FileName.Write(TempBuffer(0), 2, rgDataWritten(0)) <br>        Call ISCardISO7816.SelectFile(0, 0, FileName, 0, ISCardCmd) <br> <br>        ' Select the Data file <br>        Call ISCard.Transaction(ISCardCmd) <br>        bySW1 = ISCardCmd.ReplyStatusSW1 <br>        bySW2 = ISCardCmd.ReplyStatusSW2 <br>        sDisplayStep = sDisplayStep + Chr(10) + "SelectFile 3F05" <br> <br>        ' Write Data to file <br>        For i = 0 To 119 <br>            TempBuffer(i) = Pattern_1(i) <br>        Next i <br> <br>        Call Patterns.Initialize(120) <br>        Call Patterns.Seek(0, 0) <br>        Call Patterns.Write(TempBuffer(0), 120, rgDataWritten(0)) <br>        Call ISCardISO7816.UpdateBinary(0, 0, Patterns, ISCardCmd) <br> <br>        ' Write Data <br>        Call ISCard.Transaction(ISCardCmd) <br>        bySW1 = ISCardCmd.ReplyStatusSW1 <br>        bySW2 = ISCardCmd.ReplyStatusSW2 <br>        sDisplayStep = sDisplayStep + Chr(10) + "UpdateBinary Pattern 1" <br> <br>        ' Read Pattern back <br>        Call ISCardISO7816.ReadBinary(0, 0, 120, ISCardCmd) <br> <br>        ' Read Data <br>        Call ISCard.Transaction(ISCardCmd) <br>        bySW1 = ISCardCmd.ReplyStatusSW1 <br>        bySW2 = ISCardCmd.ReplyStatusSW2 <br>        sDisplayStep = sDisplayStep + Chr(10) + "ReadBinary Pattern 1" <br> <br>        lLength = ISCardCmd.ApduReplyLength <br>        Set ApduReply = ISCardCmd.ApduReply <br> <br>        Call ApduReply.Read(TempBuffer(0), lLength, rgDataRead(0)) <br>        sText = Chr(10) + "Pattern 1:" + Chr(10) <br>        For i = 0 To lLength / 16 <br>            sDisplay = CStr(TempBuffer(i * 8 + 0)) + " " + CStr(TempBuffer(i * 8 + 1)) + " " + CStr(TempBuffer(i * 8 + 2)) + " " + CStr(TempBuffer(i * 8 + 3)) + " " + CStr(TempBuffer(i * 8 + 4)) + " " + CStr(TempBuffer(i * 8 + 5)) + " " + CStr(TempBuffer(i * 8 + 6)) + " " + CStr(TempBuffer(i * 8 + 7)) + " " <br>            sdisplay2 = CStr(TempBuffer(i * 8 + 8)) + " " + CStr(TempBuffer(i * 8 + 9)) + " " + CStr(TempBuffer(i * 8 + 10)) + " " + CStr(TempBuffer(i * 8 + 11)) + " " + CStr(TempBuffer(i * 8 + 12)) + " " + CStr(TempBuffer(i * 8 + 13)) + " " + CStr(TempBuffer(i * 8 + 14)) + " " + CStr(TempBuffer(i * 8 + 15)) + " " <br>            sText = sText + sDisplay + sdisplay2 + Chr(10) <br>        Next i <br> <br>        ' Write Data to file <br>        For i = 0 To 119 <br>            TempBuffer(i) = Pattern_2(i) <br>        Next i <br> <br>        Call Patterns.Seek(0, 0) <br>        Call Patterns.Write(TempBuffer(0), 120, rgDataWritten(0)) <br>        Call ISCardISO7816.UpdateBinary(0, 0, Patterns, ISCardCmd) <br> <br>        ' Write Data <br>        Call ISCard.Transaction(ISCardCmd) <br>        bySW1 = ISCardCmd.ReplyStatusSW1 <br>        bySW2 = ISCardCmd.ReplyStatusSW2 <br>        sDisplayStep = sDisplayStep + Chr(10) + "UpdateBinary Pattern 2" <br> <br>        ' Read Pattern back <br>        Call ISCardISO7816.ReadBinary(0, 0, 120, ISCardCmd) <br> <br>        ' Read Data <br>        Call ISCard.Transaction(ISCardCmd) <br>        bySW1 = ISCardCmd.ReplyStatusSW1 <br>        bySW2 = ISCardCmd.ReplyStatusSW2 <br>        sDisplayStep = sDisplayStep + Chr(10) + "ReadBinary Pattern 2" + Chr(10) <br> <br>        lLength = ISCardCmd.ApduReplyLength <br>        Set ApduReply = ISCardCmd.ApduReply <br> <br>        ' Build buffer for text display <br>        Call ApduReply.Read(TempBuffer(0), lLength, rgDataRead(0)) <br>        sText = sText + Chr(10) + "Pattern 2:" + Chr(10) <br>        For i = 0 To lLength / 16 <br>            sDisplay = CStr(TempBuffer(i * 8 + 0)) + " " + CStr(TempBuffer(i * 8 + 1)) + " " + CStr(TempBuffer(i * 8 + 2)) + " " + CStr(TempBuffer(i * 8 + 3)) + " " + CStr(TempBuffer(i * 8 + 4)) + " " + CStr(TempBuffer(i * 8 + 5)) + " " + CStr(TempBuffer(i * 8 + 6)) + " " + CStr(TempBuffer(i * 8 + 7)) + " " <br>            sdisplay2 = CStr(TempBuffer(i * 8 + 8)) + " " + CStr(TempBuffer(i * 8 + 9)) + " " + CStr(TempBuffer(i * 8 + 10)) + " " + CStr(TempBuffer(i * 8 + 11)) + " " + CStr(TempBuffer(i * 8 + 12)) + " " + CStr(TempBuffer(i * 8 + 13)) + " " + CStr(TempBuffer(i * 8 + 14)) + " " + CStr(TempBuffer(i * 8 + 15)) + " " <br>            sText = sText + sDisplay + sdisplay2 + Chr(10) <br>        Next i <br> <br>        Test_Output.Text = Test_Output.Text + sText + Chr(10) <br>        Test_Step.Text = Test_Step.Text + sDisplayStep + Chr(10) <br> <br>    Next iter <br> <br>    ' Unlock <br>    Call ISCard.UnlockSCard(LEAVE) <br> <br>    ' Detach from card <br>    ISCard.Detach (1) <br> <br>    ' <br>    ' Unload the objects <br>    ' <br>    Set ISCard = Nothing <br>    Set ISCardISO7816 = Nothing <br>    Set ISCardCmd = Nothing <br> <br>    ' Leave <br>    Exit Sub <br> <br>ErrorHandler: <br>    ' <br>    ' Unload the objects <br>    ' <br>    Set ISCard = Nothing <br>    Set ISCardISO7816 = Nothing <br>    Set ISCardCmd = Nothing <br> <br>End Sub <br> <br>Private Sub Form_Load() <br>On Error GoTo ErrorHandler <br>    ' <br>    ' Center the dialog <br>    ' <br>    Left = (Screen.Width - Width) / 2 <br>    Top = (Screen.Height - Height) / 2 <br> <br>    Test_Output.Text = "" <br>    Test_Step.Text = "" <br> <br>    ' Leave <br>    Exit Sub <br> <br>ErrorHandler: <br>    ' Todo: Add error handling code <br> <br>End Sub <br> <br> <br>Private Sub Form_Terminate() <br>On Error GoTo ErrorHandler <br>    ' <br>    ' Unload the objects <br>    ' <br>    Set ISCard = Nothing <br>    Set ISCardTypeConv = Nothing <br>    Set ISCardCmd = Nothing <br> <br>    ' Clear text boxes <br>    Test_Output.Text = " " <br>    Test_Step.Text = " " <br> <br>    ' Leave <br>    Exit Sub <br> <br>ErrorHandler: <br>    ' Todo: Add error handling code <br> <br>End Sub <br> <br>Private Sub Form_Unload(Cancel As Integer) <br>On Error GoTo ErrorHandler <br>    ' <br>    ' Unload the objects <br>    ' <br>    Set ISCard = Nothing <br>    Set ISCardTypeConv = Nothing <br>    Set ISCardCmd = Nothing <br> <br>    ' Save data if needed <br>    If SaveToFile.Value = 1 Then <br>        Call Test_Output.SaveFile("SSPTestDat_1.rtf", 0) <br>        Call Test_Step.SaveFile("SSPTestDat_2.rtf", 0) <br>    End If <br> <br>    ' Leave <br>    Exit Sub <br> <br>ErrorHandler: <br>    ' Todo: Add error handling code <br> <br>End Sub <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

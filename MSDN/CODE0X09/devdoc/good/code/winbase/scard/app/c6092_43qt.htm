<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDDG.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6095"></a>SCARDDG.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996  Microsoft Corporation <br> <br>Module Name: <br> <br>    CSCardTestDlg  <br>CAboutDlg <br> <br>Abstract: <br> <br>CSCardTestDlg object implementation file. It creates a com vendor g_Wrapper <br>object to interact with a smart card. Also contains the CAboutDlg <br>(about box) class and implementation. <br> <br>Author: <br> <br>Environment: <br> <br>    Win32, C++ w/Exceptions, COM/OLE <br> <br>Revision History: <br> <br>Notes: <br> <br> <br>--*/ <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// Includes <br>// <br>#include "preapp.h" <br>#include "SCardTst.h" <br>#include "SCardDg.h" <br>#include "SCardWrp.h" <br> <br>// Declare Simple global g_Wrapper object  <br>CSCardWrapperg_Wrapper; <br> <br>// Used for parameters <br>WCHAR g_wszReaderName[] = L"Bull CP8 Transac 0"; <br>WCHAR g_wszFilename[] = L"3F00"; <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// CAboutDlg dialog used for application about box <br>// <br> <br>class CAboutDlg : public CDialog <br>{ <br>public: <br>CAboutDlg(); <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// Dialog Data exchange member varialbe declaration  <br>// <br>//{{AFX_DATA(CAboutDlg) <br>enum { IDD = IDD_ABOUTBOX }; <br>//}}AFX_DATA <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// Virtual method overrides <br>// <br>//{{AFX_VIRTUAL(CAboutDlg) <br>protected: <br>virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support <br>//}}AFX_VIRTUAL <br> <br>protected: <br>// CAboutDlg Implementation <br> <br>///////////////////////////////////////////////////////////////////////// <br>// <br>// Dialog message map <br>// <br>//{{AFX_MSG(CAboutDlg) <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br> <br>/*++ <br> <br>CAboutDlg::CAboutDlg() <br> <br>Constructor for the about dialog <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD) <br>{ <br>//////////////////////////////////////////////////////////////////////// <br>// <br>// Dialog Data Exchange member variable initialization <br>// <br>//{{AFX_DATA_INIT(CAboutDlg) <br>//}}AFX_DATA_INIT <br>} <br> <br> <br>/*++ <br> <br>CAboutDlg::DoDataExchange() <br> <br>Method allows the exchange and validation of dialog data <br> <br>Arguments: <br> <br>pDX - pointer to CDataExchange object  <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>void CAboutDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CAboutDlg) <br>//}}AFX_DATA_MAP <br>} <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>// Dialog message map <br>// <br> <br>BEGIN_MESSAGE_MAP(CAboutDlg, CDialog) <br>//{{AFX_MSG_MAP(CAboutDlg) <br>// No message handlers <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// CSCardTestDlg dialog <br>// <br> <br> <br>/*++ <br> <br>CCardTstDlg::CCardTstDlg() <br> <br>Constructor for the card test dialog gui <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>CSCardTestDlg::CSCardTestDlg(CWnd* pParent /*=NULL*/) <br>: CDialog(CSCardTestDlg::IDD, pParent) <br>{ <br> <br>//////////////////////////////////////////////////////////////////////// <br>// <br>// Dialog Data Exchange member variable initialization <br>// <br>//{{AFX_DATA_INIT(CSCardTestDlg) <br>//}}AFX_DATA_INIT <br> <br>// load the application icon <br>// Note that LoadIcon does not require a subsequent DestroyIcon in Win32 <br>m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME); <br>} <br> <br> <br>/*++ <br> <br>CCardTstDlg::DoDataExchange() <br> <br>Method allows the exchange and validation of dialog data <br> <br>Arguments: <br> <br>pDX - pointer to CDataExchange object  <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>void CSCardTestDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CSCardTestDlg) <br>DDX_Control(pDX, IDC_SCARD_STATUS, m_editICCStatus); <br>DDX_Control(pDX, IDC_COM_STATUS, m_editComStatus); <br>DDX_Control(pDX, IDC_REQUEST_LIST, m_cbRequestList); <br>//}}AFX_DATA_MAP <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>// Dialog message map <br>// <br> <br>BEGIN_MESSAGE_MAP(CSCardTestDlg, CDialog) <br>//{{AFX_MSG_MAP(CSCardTestDlg) <br>ON_WM_SYSCOMMAND() <br>ON_WM_PAINT() <br>ON_WM_QUERYDRAGICON() <br>ON_BN_CLICKED(IDC_PERFORM_REQUEST, OnPerformRequestButtonClick) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// CSCardTestDlg message handlers <br>// <br> <br> <br>/*++ <br> <br>CCardTstDlg::OnInitDialog() <br> <br>Allows initialization of smart card test dialog <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br>Specifies whether the application has set the input focus to one of the  <br>controls in the dialog box. If OnInitDialog returns nonzero, Windows sets  <br>the input focus to the first control in the dialog box. The application  <br>can return 0 only if it has explicitly set the input focus to one of the  <br>controls in the dialog box. <br> <br> <br>Author: <br> <br>--*/ <br> <br>BOOL CSCardTestDlg::OnInitDialog() <br>{ <br>// locals <br>BOOLfReturn = TRUE; <br> <br>CDialog::OnInitDialog(); <br> <br>///////////////////////////////////////////////////////////////////////// <br>// <br>// Add "About..." menu item to system menu. <br>// IDM_ABOUTBOX must be in the system command range. <br>// <br>ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX); <br>ASSERT(IDM_ABOUTBOX &lt; 0xF000); <br> <br>// Retrieve pointer to system menu <br>CMenu* pSysMenu = GetSystemMenu(FALSE); <br>CString strAboutMenu; <br>strAboutMenu.LoadString(IDS_ABOUTBOX); <br>// Append the About menu item <br>if (!strAboutMenu.IsEmpty()) <br>{ <br>pSysMenu-&gt;AppendMenu(MF_SEPARATOR); <br>pSysMenu-&gt;AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu); <br>} <br> <br>///////////////////////////////////////////////////////////////////////// <br>// <br>//  Set the icon for this dialog.  The framework does this automatically <br>//  when the application's main window is not a dialog <br>// <br>SetIcon(m_hIcon, TRUE);// Set big icon <br>SetIcon(m_hIcon, FALSE);// Set small icon <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// Add extra initialization Below <br> <br>return fReturn;  // return TRUE  unless you set the focus to a control <br>} <br> <br> <br>/*++ <br> <br>CCardTstDlg::OnSysCommand() <br> <br>Contains system menu functionality and max and min button functionality <br> <br>Arguments: <br> <br>pID - specifies the type of system command requested <br>lParam - contains cursor coordinates if the control-menu command  <br>is chosen with the mouse. (low order word contains the x coordinate and <br>high order word contains the y coordinate) <br> <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>void CSCardTestDlg::OnSysCommand(UINT nID, LPARAM lParam) <br>{ <br>//////////////////////////////////////////////////////////////////////// <br>// <br>// open the about dialog box if requested, else pass data through to MFC <br>// <br>if ((nID &amp; 0xFFF0) == IDM_ABOUTBOX){ <br>CAboutDlg dlgAbout; <br>dlgAbout.DoModal(); <br>} <br>else{ <br>CDialog::OnSysCommand(nID, lParam); <br>} <br>} <br> <br> <br>/*++ <br> <br>CCardTstDlg::OnPaint() <br> <br>Allows general window/dialog painting. Allows draws icon when  <br>dialog is minimized or maximized.  <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>void CSCardTestDlg::OnPaint()  <br>{ <br>// locals <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// Test status of dialog...If iconic paint the icon, else pass through paint <br>// for MFC to handle <br>// <br>if (IsIconic()) <br>{ <br>CPaintDC dc(this); // device context for painting <br> <br>SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0); <br> <br>// Center icon in client rectangle <br>int cxIcon = GetSystemMetrics(SM_CXICON); <br>int cyIcon = GetSystemMetrics(SM_CYICON); <br>CRect rect; <br>GetClientRect(&amp;rect); <br>int x = (rect.Width() - cxIcon + 1) / 2; <br>int y = (rect.Height() - cyIcon + 1) / 2; <br> <br>// Draw the icon <br>dc.DrawIcon(x, y, m_hIcon); <br>} <br>else <br>{ <br>CDialog::OnPaint(); <br>} <br>} <br> <br> <br>/*++ <br> <br>CCardTstDlg::OnQueryDragIcon() <br> <br>System calls this to obtain the type of cursor to display while the <br>iconized dialog is dragged <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br>A doubleword value that contains a cursor or icon handle in the low-order  <br>word. The cursor or icon must be compatible with the display  <br>driver s resolution. If the application returns NULL, the system displays  <br>the default cursor. The default return value is NULL <br> <br>Author: <br> <br>--*/ <br> <br>HCURSOR CSCardTestDlg::OnQueryDragIcon() <br>{ <br>return (HCURSOR) m_hIcon; <br>} <br> <br> <br>/*++ <br> <br>CCardTstDlg::OnPerformRequestButtonClick() <br> <br>Processes the selected request in the drop down. This could be a request to <br>load the COM vendor g_Wrapper, communicate with the smart card, etc. <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>void CSCardTestDlg::OnPerformRequestButtonClick()  <br>{ <br>// locals <br>intiCurrentSelection = m_cbRequestList.GetCurSel(); <br>HRESULThresult = S_OK; <br>TCHARszStringBuffer[255]; <br>SCARD_STATESStatus; <br>SCARD_PROTOCOLSProtocol; <br>BYTEbyChal[8]; <br>HSCARD_FILEhFile; <br> <br>//BYTEbyData[255]; <br> <br>try { <br>// What action should be performed <br>switch (iCurrentSelection) { <br>// run through the cases <br>case 0: <br>// Load COM <br>hresult = g_Wrapper.LoadCOM(); <br>if (FAILED(hresult)) <br>throw hresult; <br>else <br>m_editComStatus.SetWindowText("COM Loaded..."); <br>break; <br>case 1: <br>// Attach to reader <br>hresult = g_Wrapper.AttachToReaderByName(g_wszReaderName); <br>if (FAILED(hresult)) <br>throw (hresult); <br>else  <br>m_editComStatus.SetWindowText("Attach to reader was successful."); <br>break; <br>case 2: <br>//Return ICC/IFD status <br>hresult = g_Wrapper.Status(&amp;Status, &amp;Protocol); <br>if (FAILED(hresult)) <br>throw(hresult); <br>m_editComStatus.SetWindowText("Get Status...See Below."); <br>sprintf(szStringBuffer, "State: %d      Protocol: %d",  <br>(int) Status, (int) Protocol); <br>m_editICCStatus.SetWindowText(szStringBuffer); <br>break; <br>case 3: <br>//Get challenge.. <br>hresult = g_Wrapper.GetChallenge( (LPBYTE) byChal, 8); <br>if (FAILED(hresult)) <br>throw (hresult); <br>m_editComStatus.SetWindowText("Get challenge ok...See Below."); <br>sprintf(szStringBuffer, "%d %d %d %d %d %d %d %d", <br>(int) byChal[0], (int) byChal[1], (int) byChal[2], (int) byChal[3], <br>(int) byChal[4], (int) byChal[5], (int) byChal[6], (int) byChal[7]); <br>m_editICCStatus.SetWindowText(szStringBuffer); <br>break; <br>case 4: <br>// Change Dir to Master <br>hresult = g_Wrapper.ChangeDirectory( g_wszFilename ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>else { <br>m_editComStatus.SetWindowText("3F00 now selected."); <br>m_editICCStatus.SetWindowText(" "); <br>};//else <br>break; <br>case 5: <br>// Open read file <br>hresult = g_Wrapper.Open( g_wszFilename, &amp;hFile ); <br>if (FAILED(hresult)) <br>throw (hresult); <br>break; <br>case 6: <br>// Verify PIN <br>if (FAILED(hresult)) <br>throw; <br>else <br>m_editComStatus.SetWindowText("PIN Verified."); <br>break; <br>case 7: <br>// Detach <br>hresult = g_Wrapper.Detach(); <br>if (FAILED(hresult)) <br>throw (hresult); <br>else { <br>m_editComStatus.SetWindowText("Detached."); <br>m_editICCStatus.SetWindowText(" "); <br>}; //else <br>default: <br>break; <br>};//end switch <br>} <br> <br>catch (HRESULT) { <br>// todo: add error handling <br>m_editComStatus.SetWindowText("Command Failed..."); <br>m_editICCStatus.SetWindowText(" "); <br>} <br> <br>catch (...) { <br>// todo: add error handling <br>} <br>} <br> <br> <br>/*++ <br> <br>CCardTstDlg::DestroyWindow() <br> <br>Dialog destroy window override to clean up on dialog close <br> <br>Arguments: <br> <br>none <br> <br>Return Value: <br> <br> <br>Author: <br> <br>--*/ <br> <br>BOOL CSCardTestDlg::DestroyWindow()  <br>{ <br>// Unload COM <br>g_Wrapper.UnloadCOM(); <br> <br>////////////////////////////////////////////////////////////////////// <br>// Pass back through MFC <br>return CDialog::DestroyWindow(); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AGGTEST.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6091"></a>AGGTEST.CPP</h2>
<pre><code><br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// Includes <br>// <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;crtdbg.h&gt; <br>#include &lt;initguid.h&gt; <br> <br>#include "..\scardagg.h" <br>#include "scardsrv.h" <br>#include "scarddat.h" <br>#include "scardmgr.h" <br>#define IID_DEFINED <br>#include "..\scardagg_i.c" <br>#include "scardsrv_i.c" <br>#include "scarddat_i.c" <br>#include "scardmgr_i.c" <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// Globals <br>// <br>LPSCARD g_pISCard = NULL; <br>LPSCARDDATABASE g_pISCardDatabase = NULL; <br>LPSCARDLOCATE g_pISCardLocate = NULL; <br>LPSCARDNEWINTERFACE g_pISCardNewInterface = NULL; <br>LPSCARDISO7816 g_pISCardISO7816 = NULL; <br>LPSCARDTYPECONV g_pISCardTypeConv = NULL; <br>LPSCARDCMD g_pISCardCmd = NULL; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// Macros <br>// <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// Macros <br>// <br> <br>#ifndef SafeCast <br>#define SafeCast(cast,pt)((cast)(pt)) <br>#endif <br> <br>#ifndef ASSERT <br>#define ASSERT_ASSERTE <br>#endif <br> <br>#ifndef IN <br>#define IN <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// Functions <br>// <br> <br>void _cdecl  <br>ConTrace( <br>IN LPCTSTR lpszFormat, ...) <br>{ <br>// <br>// Helper to do print traces... <br>// <br> <br>va_list args; <br>va_start(args, lpszFormat); <br> <br>int nBuf; <br>TCHAR szBuffer[512]; <br>ZeroMemory(szBuffer, SafeCast(DWORD,(512*sizeof(TCHAR)))); <br> <br>nBuf = _vstprintf(szBuffer, lpszFormat, args); <br>ASSERT(nBuf &lt; sizeof(szBuffer)); <br> <br>_tprintf(szBuffer); <br>    OutputDebugString(szBuffer); <br>va_end(args); <br>} <br> <br> <br>void _cdecl  <br>CallServer( <br>void) <br>{ <br>HRESULThresult = S_OK; <br> <br>ConTrace(_T("\nSTARTING Object Creation\n=========================\n")); <br>ConTrace(_T("Calling CoCreateInstance()...SCardDat\n")); <br> <br> <br>hresult = CoCreateInstance(CLSID_CSCard, <br>NULL, <br>CLSCTX_ALL, <br>IID_ISCard, <br>(LPVOID*) &amp;g_pISCard); <br>if (FAILED(hresult)) <br>{ <br>ConTrace(_T("Failed to create CSCard object\n")); <br>return; <br>} <br>ConTrace(_T("Object created\n")); <br> <br>hresult = CoCreateInstance(CLSID_CSCardTypeConv, <br>NULL, <br>CLSCTX_ALL, <br>IID_ISCardTypeConv, <br>(LPVOID*) &amp;g_pISCardTypeConv); <br>if (FAILED(hresult)) <br>{ <br>ConTrace(_T("Failed to create CSCardTypeConv object\n")); <br>return; <br>} <br>ConTrace(_T("Object created\n")); <br> <br> <br>//*************************************************************** <br>// Create the New interface and the aggregated interface <br>hresult = CoCreateInstance(CLSID_CSCardNewInterface, <br>NULL, <br>CLSCTX_ALL, <br>IID_ISCardNewInterface, <br>(LPVOID*) &amp;g_pISCardNewInterface); <br>if (FAILED(hresult)) <br>{ <br>ConTrace(_T("Failed to create CSCardNewInterface object\n")); <br>return; <br>} <br>ConTrace(_T("Object created\n")); <br> <br>hresult = CoCreateInstance(CLSID_CSCardNewInterface, <br>NULL, <br>CLSCTX_ALL, <br>IID_ISCardISO7816, <br>(LPVOID*) &amp;g_pISCardISO7816); <br>if (FAILED(hresult)) <br>{ <br>ConTrace(_T("Failed to create CSCardISO7816 Aggregated object\n")); <br>return; <br>} <br>ConTrace(_T("Object created\n")); <br>// <br>//****************************************************************** <br> <br>hresult = CoCreateInstance(CLSID_CSCardCmd, <br>NULL, <br>CLSCTX_ALL, <br>IID_ISCardCmd, <br>(LPVOID*) &amp;g_pISCardCmd); <br>if (FAILED(hresult)) <br>{ <br>ConTrace(_T("Failed to create CSCardCmd object\n")); <br>return; <br>} <br>ConTrace(_T("Object created\n")); <br> <br>ConTrace(_T("\nDONE!!! with object Creation\n=========================\n")); <br>} <br> <br> <br>void _cdecl <br>CallAggreg() <br>{ <br>// Locals <br>HRESULThresult = S_OK; <br>LPBYTEBUFFERpBuffer1 = NULL, <br>pBuffer2 = NULL; <br> <br>// Create a couple of byte buffers for testing <br>hresult = g_pISCardTypeConv-&gt;CreateByteBuffer((ULONG) 1, <br>&amp;pBuffer1); <br>if (FAILED(hresult)) { <br>ConTrace(_T("Failed to create IByteBuffer\n")); <br>return; <br>};// if <br>hresult = g_pISCardTypeConv-&gt;CreateByteBuffer((ULONG) 1, <br>&amp;pBuffer2); <br>if (FAILED(hresult)) { <br>ConTrace(_T("Failed to create IByteBuffer\n")); <br>return; <br>};// if <br> <br>// Call one of the aggregated methods <br>ConTrace(_T("Build/Execute: AppendRecord\n")); <br>hresult = g_pISCardISO7816-&gt;AppendRecord(0, <br>pBuffer1, <br>&amp;g_pISCardCmd); <br>if (FAILED(hresult)){ <br>ConTrace(_T("Failed on AppendRecord\n")); <br>return; <br>} <br> <br>// Call the new interface method <br>ConTrace(_T("Build/Execute: NewInterface\n")); <br>hresult = g_pISCardNewInterface-&gt;NewInterface(0, <br>0, <br>pBuffer1, <br>&amp;g_pISCardCmd); <br>if (FAILED(hresult)){ <br>ConTrace(_T("Failed on NewInterface\n")); <br>return; <br>} <br> <br>} <br> <br> <br>int  <br>main(  <br>IN int argc,  <br>IN char *argv[ ]) <br>{ <br>int nRet = -1; <br> <br>try <br>{ <br>if (FAILED(CoInitialize(NULL))) <br>throw; <br> <br>CallServer(); <br>CallAggreg(); <br> <br>#ifdef _DEBUG <br>_CrtDumpMemoryLeaks(); <br>#endif <br> <br>CoUninitialize(); <br> <br>nRet = 0; <br>} <br> <br>catch (...) <br>{ <br>ConTrace(_T("Unhandled exception!!!")); <br>} <br> <br>return (nRet); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

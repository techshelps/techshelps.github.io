<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARDNI.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6089"></a>SCARDNI.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996-1997  Microsoft Corporation <br> <br>Module Name: <br> <br>    SCardNI <br> <br>Abstract: <br> <br>This file contains the outline implementation of the CSCardNewInterface <br>class showing aggregation example. <br> <br>Author: <br> <br>Environment: <br> <br>    Win32, C++ w/Exceptions, ATL, COM/OLE <br> <br>Revision History: <br> <br>Notes: <br> <br>--*/ <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// Includes <br>// <br> <br>#include "preagg.h" <br>#include "ScardAgg.h" <br>#include "SCardNI.h" <br>#define IID_DEFINED <br>//#define CLSID_DEFINED <br>#include &lt;SCardSrv_i.c&gt; <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// Macros <br>// <br>#ifdef _DEBUG <br>#define TRACE_STR(name,sz) \ <br>TRACE(_T("SCardAgg.DLL: CSCardNewInterface::%s: %s\n"), name, sz) <br>#define TRACE_CODE(name,code) \ <br>TRACE(_T("SCardAgg.DLL: CSCardNewInterface::%s: error = 0x%x\n"), name, code) <br>#define TRACE_CATCH(name,code)TRACE_CODE(name,code) <br>#define TRACE_CATCH_UNKNOWN(name)TRACE_STR(name,_T("An unidentified exception has occurred!")) <br>#else <br>#define TRACE_STR(name,sz)((void)0) <br>#define TRACE_CODE(name,code)((void)0) <br>#define TRACE_CATCH(name,code)((void)0) <br>#define TRACE_CATCH_UNKNOWN(name)((void)0) <br>#endif  // _DEBUG <br> <br>/*++ <br> <br>CSCardNewInterface::FinalConstruct: <br> <br>    This routine defines a final constructor that is called after the constructor <br>for the template class is called. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>    Chris Dudley (cdudley) 2/22/1997 <br> <br>Notes: <br> <br>This routine uses the NT4.0+ function CoCreateInstance to create <br>the ISCardISO7816 object. In WIN95+, use CoGetClassObject returning <br>the IClassFactory for the object, then use IClassFactory-&gt;CreateInstance. <br> <br>To create an aggregate object, the Controlling IUnknown is passed <br>in during creation of the object to be aggregated. Is this example, <br>the ATL function GetControllingUnknown is used. This is ATL only and will <br>work for aggregate and non-aggregate classes. <br> <br>    Also, changes must be made to the ATL COM map to support the Aggregation. <br>See scardni.h. <br> <br>--*/ <br> <br>HRESULT CSCardNewInterface::FinalConstruct() <br>{ <br>// Locals. <br>HRESULT hresult = S_OK; <br>IUnknown* pUnkOuter = GetControllingUnknown(); <br> <br>try { <br>// Create ISCardISO7816 as aggregate. Only valid IID is IUnknown!! <br>hresult = CoCreateInstance(CLSID_CSCardISO7816, <br>pUnkOuter,// Controlling Unknown <br>CLSCTX_ALL, <br>IID_IUnknown, <br>(LPVOID*) &amp;m_pUnkISCardISO7816); <br>if (FAILED(hresult)) <br>throw (hresult); <br>} <br> <br>catch ( HRESULT hr ) { <br>hresult = hr; <br>TRACE_CATCH(_T("FinalConstruct"),hresult); <br>} <br> <br>catch (...) { <br>hresult = E_UNEXPECTED; <br>TRACE_CATCH(_T("FinalConstruct"), hresult); <br>} <br> <br>return (hresult); <br>} <br> <br> <br>/*++ <br> <br>CSCardNewInterface::FinalRelease: <br> <br>    This routine defines a final Release. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>    Chris Dudley (cdudley) 2/22/1997 <br> <br>--*/ <br> <br>HRESULT CSCardNewInterface::FinalRelease() <br>{ <br>// Locals. <br>HRESULT hresult = S_OK; <br> <br>try { <br>// Release interface completely!!  <br>if (m_pUnkISCardISO7816 != NULL) <br>while (m_pUnkISCardISO7816-&gt;Release()&gt;0); <br>} <br> <br>catch (...) { <br>} <br> <br>return (hresult); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// ISupportsErrorInfo Methods <br>// <br> <br>/*++ <br> <br>CSCardNewInterface::InterfaceSupportsErrorInfo: <br> <br>    This routine retrieves a IErrorInfo interface for this object. <br> <br>Arguments: <br> <br>    riid - Interface ID. <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>    Chris Dudley (cdudley) 2/22/1997 <br> <br>--*/ <br> <br>STDMETHODIMP CSCardNewInterface::InterfaceSupportsErrorInfo(REFIID riid) <br>{ <br>static const IID* arr[] =  <br>{ <br>&amp;IID_ISCardNewInterface, <br>}; <br> <br>for (int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++) <br>{ <br>if (InlineIsEqualGUID(*arr[i],riid)) <br>return S_OK; <br>} <br>return S_FALSE; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>// ISCardNewInterface Methods <br>// <br> <br>/*++ <br> <br>CSCardNewInterface::NewInterface: <br> <br>This method implements some new interface. <br> <br>Arguments: <br> <br>wParameters - P1 and P2 encapsulated <br> <br>dwLength - Length of reply <br> <br>pParam - IByteBuffer (a.k.a. IStream)  <br> <br>ppCmd - pointer-&gt;pointer-&gt;ISCardCmd interface  <br> <br>Return Value: <br> <br>    A HRESULT value indicating the status of the requested action. <br> <br>ReturnMeaning <br>============= <br>S_OKOperation completed successfully. <br>S_FALSEUnknown error occurred. <br>E_OUTOFMEMORYThere is not enough memory in this process to  <br>satisfy the request. <br>E_FAILUnspecified error. <br>E_INVALIDARGOne or more arguments are invalid. <br>E_UNEXPECTEDUnexpected event occurred in this function. <br> <br>Author: <br> <br>    Chris Dudley (cdudley) 2/22/1997 <br> <br>Notes: <br> <br>--*/ <br>HRESULT CSCardNewInterface::NewInterface(WORD wParameters,// =0 <br>DWORD dwLength,// =0 <br>LPBYTEBUFFER pParam, <br>LPSCARDCMD *ppCmd) <br>{ <br>// Locals <br>HRESULThresult = S_OK; <br> <br>try { <br>// Check parameters... <br>if ( (pParam == NULL) || (ppCmd == NULL ) ) <br>throw ( (HRESULT) E_FAIL ); <br> <br>// ToDo: Build a new command and return <br>// Example: <br>//hresult = (*ppCmd)-&gt;BuildCmd(m_byClassId,  <br>//(BYTE) INS_SOME_NEW_INSTRUCTION), <br>//(BYTE) HIBYTE(wParameters)),// P1 <br>//(BYTE) LOBYTE(wParameters)),// P2 <br>//pParam,// P3+data <br>//&amp;dwLength);// Le <br>//if (FAILED(hresult)) <br>//throw (hresult); <br>} <br> <br>catch (HRESULT hr) { <br>hresult = hr; <br>TRACE_CATCH(_T("NewInterface"),hr); <br>} <br> <br>catch (...) { <br>hresult = (HRESULT) E_UNEXPECTED; <br>TRACE_CATCH_UNKNOWN(_T("NewInterface")); <br>} <br> <br>return hresult; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

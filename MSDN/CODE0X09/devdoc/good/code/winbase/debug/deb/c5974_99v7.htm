<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LINKLIST.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5983"></a>LINKLIST.H</h2>
<pre><code>// ************************************************************************ <br>// <br>//                      Microsoft Developer Support <br>//             Copyright 1992 - 1998 Microsoft Corporation <br>// <br>// ************************************************************************ <br>// HEADER    : LinkList.H - Ordered Double Linked List Package <br>// PURPOSE   : Provide a general, sorted, double linked list package <br>// FUNCTIONS : <br>//   CreateList        - allocate memory for a new list, registers the <br>//                       ordering function <br>//   CreateNode        - allocate memory fpr a new node that can be put <br>//                       into the linked list <br>//   InsertNode        - insert a new node into the list <br>//   SetCurrentNode    - finds the 1st occurence of a node that matches <br>//                       a key(s) according to the match function <br>//                       and sets it as the current node <br>//   SetCurrentNodeEx  - finds the Nth occurence of a node that matches <br>//                       a key(s) according to the match function <br>//                       and sets it as the current node <br>//   GetCurrentNode    - get the current node <br>//   GetFirstNode      - get the first (left-most) node in the list <br>//   GetLastNode       - get the last (right-most) node in the list <br>//   GetNextNode       - get the next (right) node from the current <br>//   GetPrevNode       - get the previous (left) node from the current <br>//   DeleteCurrentNode - deletes the current node from the list and <br>//                       frees the memory associated with it <br>//   DestroyNode       - deallocates the memory associated with a node <br>//   DestroyList       - deallocates the memory associated with a list, <br>//                       does not delete any of the nodes <br>//   GetListError      - gets the current list error <br>// <br>// COMMENTS  : The application must serialize access to the linked list <br>// <br>//   Format of the Ordering and Matching functions is as follows: <br>//   ----------------------------------------------------------- <br>// <br>//   int OrderFunc( PNODE pNodeOne, PNODE pNodeTwo ) <br>//   { <br>//     if( (pNodeOne-&gt;pNodeData).SortKey &lt; (pNodeTwo-&gt;pNodeData).SortKey ) <br>//       return( LIST_LEFT_OF ); <br>//     if( (pNodeOne-&gt;pNodeData).SortKey &gt; (pNodeTwo-&gt;pNodeData).SortKey ) <br>//       return( LIST_RIGHT_OF ); <br>//     return( LIST_MATCH ); <br>//   } <br>// <br>// ************************************************************************ <br>#ifndef LINKLIST_H <br> <br> #define LINKLIST_H <br> <br> #ifdef __cplusplus <br> extern "C" { /* Assume C declarations for C++ */ <br> #endif /* __cplusplus */ <br> <br> // public typedefs and defines <br> // ----------------------------------------------------------------------- <br> #define LIST_NO_ERROR                 1 <br> #define LIST_ERROR_NO_NODE           -1 <br> #define LIST_ERROR_NO_MATCH          -2 <br> #define LIST_ERROR_NO_FREE_MEM       -3 <br> #define LIST_ERROR_DEREFERENCE_NULL -99 <br> <br> #define LIST_LEFT_OF   -1 <br> #define LIST_MATCH      0 <br> #define LIST_RIGHT_OF   1 <br> <br> #ifndef TRUE <br>   #define TRUE  1 <br>   #define FALSE 0 <br>   typedef int   BOOL; <br> #endif <br> <br> typedef void* PVOID; <br> <br> //-- definition of a node <br> typedef struct NODE_STRUCT* PNODE; <br> typedef struct NODE_STRUCT { <br>           PVOID pNodeData; <br>           PNODE pLeftLink; <br>           PNODE pRightLink; <br>         } NODE; <br> <br> //-- definition of a list <br> typedef struct LIST_STRUCT* PLIST; <br> typedef struct LIST_STRUCT { <br>           PVOID pListData; <br>           PNODE pFirstNode; <br>           PNODE pCurrentNode; <br>           PNODE pLastNode; <br>           int   (*OrderFunction)(PNODE, PNODE); <br>           int   ListError; <br>         } LIST; <br> <br> // public function prototypes <br> // ----------------------------------------------------------------------- <br> BOOL CreateList( PLIST* ppList, int (*OrderFunction)( PNODE pNodeOne, PNODE pNodeTwo ) ); <br> BOOL CreateNode( PNODE* ppNewNode ); <br> BOOL InsertNode( PLIST pList, PNODE pNewNode ); <br> BOOL SetCurrentNode( PLIST pList, PNODE pKeyNode, int (*MatchFunction)( PNODE pNodeOne, PNODE pNodeTwo ) ); <br> BOOL SetCurrentNodeEx( PLIST pList, PNODE pKeyNode, int (*MatchFunction)( PNODE pNodeOne, PNODE pNodeTwo ), int Occurence ); <br> BOOL GetCurrentNode( PLIST pList, PNODE* ppNode ); <br> BOOL GetFirstNode( PLIST pList, PNODE* ppNode ); <br> BOOL GetLastNode( PLIST pList, PNODE* ppNode ); <br> BOOL GetNextNode( PLIST pList, PNODE* ppNode ); <br> BOOL GetPrevNode( PLIST pList, PNODE* ppNode ); <br> BOOL DeleteCurrentNode( PLIST pList ); <br> BOOL DestroyNode( PNODE pNode ); <br> BOOL DestroyList( PLIST pList ); <br> int  GetListError( PLIST pList ); <br> <br> #ifdef __cplusplus <br> } <br> #endif /* __cplusplus */ <br> <br> <br>#endif // LINKLIST_H </code></pre>
<p>&nbsp;</p></body>
</HTML>

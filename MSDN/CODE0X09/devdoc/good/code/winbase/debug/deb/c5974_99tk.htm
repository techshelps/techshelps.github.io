<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBMAIN.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5978"></a>DEBMAIN.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>// ************************************************************************ <br>// MODULE    : DEBMain.C <br>// PURPOSE   : A Win32 Application demonstrating the Debug APIs <br>// FUNCTIONS : <br>//   WinMain()                 - application entry point <br>//   MainWndProc()             - processes messages <br>//   ProcessCommandsWndProc()  - processes WM_COMMAND messages <br>//   PreferencesDlgProc()      - processes messages for "Preferences" dialog box <br>//   AttachDlgProc()           - processes messages for "Attach" dialog box <br>//   AboutDlgProc()            - processes messages for "About" dialog box <br>//   NewListBoxWndProc()       - subclass procedure to prevent listbox moving <br>//   TimerProc()               - timer procedure for animated icon <br>// COMMENTS  : <br>// <br>// ************************************************************************ <br>#define   STRICT               // enable strict typing <br>#include &lt;Windows.H&gt;           // required for all Windows applications <br>#include "StdLib.H"            // __argc, __argv <br> <br>#include "LinkList.H"          // double linked list package (OBJ) <br>#include "DEBDebug.H"          // debugging support functions <br>#include "DEBMisc.H"           // misc support functions <br>#include "DEBMain.H"           // specific to this module <br> <br>// global data <br>// ------------------------------------------------------------------------ <br>GLOBAL  Global;                // various global data <br>PROFILE Profile;               // various profile data <br> <br>// internal data <br>// ------------------------------------------------------------------------ <br>#define TIMEOUT_ANIMATED_ICON 150L // animated icon timeout <br>static TCHAR szSourceFileName[] = TEXT(__FILE__); <br> <br>// location of various files <br>// ------------------------------------------------------------------------ <br>TCHAR   szPath[MAX_PATH];         // path where the running application <br>                                  //  resides <br>TCHAR   szExePathName[MAX_PATH];  // full pathname of the application <br>TCHAR   szHelpPathName[MAX_PATH]; // full pathname of the application's <br>                                  //  help file <br>TCHAR   szIniPathName[MAX_PATH];  // full pathname of the application's <br>                                  //  ini file <br>// internal function prototypes <br>// ------------------------------------------------------------------------ <br>LRESULT CALLBACK MainWndProc            ( HWND, UINT, WPARAM, LPARAM ); <br>LRESULT CALLBACK ProcessCommandsWndProc ( HWND, UINT, WPARAM, LPARAM ); <br>LRESULT CALLBACK NewListBoxWndProc      ( HWND, UINT, WPARAM, LPARAM ); <br>BOOL    CALLBACK PreferencesDlgProc     ( HWND, UINT, WPARAM, LPARAM ); <br>BOOL    CALLBACK AttachDlgProc          ( HWND, UINT, WPARAM, LPARAM ); <br>BOOL    CALLBACK AboutDlgProc           ( HWND, UINT, WPARAM, LPARAM ); <br>VOID    CALLBACK TimerProc              ( HWND, UINT, UINT, DWORD ); <br> <br> <br>// ************************************************************************ <br>// FUNCTION : WinMain( HINSTANCE, HINSTANCE, LPSTR, INT ) <br>// PURPOSE  : initialize the window, process the message dispatch loop <br>// COMMENTS : <br>// <br>// ************************************************************************ <br>INT WINAPI <br>WinMain( HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpCmdLine, <br>  INT nCmdShow ) <br>{ <br>  MSG      Msg; <br>  WNDCLASS WndClass; <br>  HACCEL   hAccel; <br>  OSVERSIONINFO osvi; <br> <br>  LPCTSTR lpszIconName    = TEXT( "DebugIcon"  ); <br>  LPCTSTR lpszMenuName    = TEXT( "DebugMenu"  ); <br>  LPCTSTR lpszClassName   = TEXT( "DebugClass" ); <br>  LPCTSTR lpszAccelName   = TEXT( "DebugAccel" ); <br>  LPCTSTR lpszIniFileExt  = TEXT( "INI"        ); <br>  LPCTSTR lpszHelpFileExt = TEXT( "HLP"        ); <br> <br>  Global.hInstance = hInstance; <br>  Global.dwActiveDebuggees = 0; <br> <br>  //-- Load the "A Windows API Failed" resource string <br>  { <br>    TCHAR szApiFailed[] = TEXT( "A Windows API Failed" ); <br> <br>    if( !LoadString( Global.hInstance, IDS_API_FAILED_MSG, <br>          Global.szApiFailed, sizeof(Global.szApiFailed) ) ) { <br>      ErrorMessageBox( TEXT( "First LoadString()" ), <br>        szApiFailed, szSourceFileName, __LINE__ ); <br>      lstrcpy( Global.szApiFailed, szApiFailed ); <br>    } <br>  } <br> <br>  //-- Load all other resource strings <br>  if( !LoadString( Global.hInstance, IDS_APPNAME,  Global.szAppName, <br>         sizeof(Global.szAppName) ) ) <br>    ErrorMessageBox( TEXT("LoadString()"), <br>      Global.szApiFailed, szSourceFileName, __LINE__ ); <br>  if( !LoadString( Global.hInstance, IDS_SHORT_APPNAME, <br>         Global.szShortAppName, sizeof(Global.szShortAppName) ) ) <br>    ErrorMessageBox( TEXT("LoadString()"), <br>      Global.szApiFailed, szSourceFileName, __LINE__ ); <br> <br>  //-- if compiled for Win32 (Unicode) and not Win32s then display <br>  //    notice and terminate <br> <br> <br>  // <br>  // Detect platform and exit gracefully if unsupported platform. <br>  // <br> <br>  osvi.dwOSVersionInfoSize = sizeof (OSVERSIONINFO); <br>  GetVersionEx (&amp;osvi); <br>  if (osvi.dwPlatformId == VER_PLATFORM_WIN32s) { <br>    TCHAR szTitleBuffer[64]; <br>    TCHAR szTextBuffer[256]; <br> <br>    if( !LoadString( Global.hInstance, IDS_WINDOWS_NT_REQUIRED_TITLE, <br>           szTitleBuffer, sizeof(szTitleBuffer) ) ) <br>      ErrorMessageBox( TEXT("LoadString()"), <br>        Global.szApiFailed, szSourceFileName, __LINE__ ); <br> <br>    if( !LoadString( Global.hInstance, IDS_WINDOWS_NT_REQUIRED, <br>           szTextBuffer, sizeof(szTextBuffer) ) ) <br>      ErrorMessageBox( TEXT("LoadString()"), <br>        Global.szApiFailed, szSourceFileName, __LINE__ ); <br> <br>    MessageBox( NULL, szTextBuffer, szTitleBuffer, <br>      MB_APPLMODAL | MB_ICONSTOP | MB_OK ); <br>    return( -1 ); <br>  } <br> <br>  //-- register the debug event window class <br>  WndClass.style         = CS_DBLCLKS; <br>  WndClass.lpfnWndProc   = (WNDPROC) MainWndProc; <br>  WndClass.cbClsExtra    = (INT) NULL; <br>  WndClass.cbWndExtra    = (INT) NULL; <br>  WndClass.hInstance     = Global.hInstance; <br>  WndClass.hIcon         = LoadIcon( Global.hInstance, lpszIconName ); <br>  WndClass.hCursor       = LoadCursor( NULL, (LPTSTR) IDC_ARROW ); <br>  WndClass.hbrBackground = (HBRUSH) (COLOR_APPWORKSPACE+1); <br>  WndClass.lpszMenuName  = lpszMenuName; <br>  WndClass.lpszClassName = lpszClassName; <br> <br>  if( !RegisterClass(&amp;WndClass) ) { <br>    ErrorMessageBox( TEXT("RegisterClass()"), <br>      Global.szApiFailed, szSourceFileName, __LINE__ ); <br>    return( FALSE ); <br>  } <br> <br>  //-- get application pathname and store the ini and help file pathname <br>  //   (which is located in the same directory as the application) <br>  GetModuleFileName( (HANDLE) NULL, szExePathName, <br>    sizeof(szExePathName)/sizeof(TCHAR) ); <br>  GetPathFromFullPathName( szExePathName, szPath, <br>    sizeof(szPath)/sizeof(TCHAR) ); <br>  wsprintf( szIniPathName,  TEXT( "%s\\%s.%s" ), szPath, <br>    Global.szShortAppName, lpszIniFileExt  ); <br>  wsprintf( szHelpPathName, TEXT( "%s\\%s.%s" ), szPath, <br>    Global.szShortAppName, lpszHelpFileExt ); <br> <br>  //-- retrieve stored default location from private profile data <br>  GetPrivateProfileSettings( Global.szAppName, szIniPathName, &amp;Profile ); <br> <br>  //-- Create a main window for this application instance <br>  Global.hWndMain = CreateWindow( lpszClassName, Global.szAppName, <br>                      WS_OVERLAPPEDWINDOW, <br>                      Profile.xPos, Profile.yPos, <br>                      Profile.nWidth, Profile.nHeight, <br>                      NULL, NULL, Global.hInstance, NULL ); <br> <br>  //-- If window could not be created, return "failure" <br>  if( !Global.hWndMain ) { <br>    ErrorMessageBox( TEXT("CreateWindow()"), <br>      Global.szApiFailed, szSourceFileName, __LINE__ ); <br>    return( FALSE ); <br>  } <br> <br>  //-- Load main menu accelerators <br>  if( !(hAccel = LoadAccelerators( Global.hInstance, lpszAccelName) ) ) { <br>    ErrorMessageBox( TEXT("LoadAccelerators()"), <br>      Global.szApiFailed, szSourceFileName, __LINE__ ); <br>    return( FALSE ); <br>  } <br> <br>  //-- modify the menu to reflect saved settings <br>  UpdateMenuSettings( Global.hWndMain ); <br> <br>  //-- Make the window visible; update its client area; and return "success" <br>  if( Profile.fMaximized ) <br>    ShowWindow( Global.hWndMain, SW_SHOWMAXIMIZED ); <br>  else if ( Profile.fMinimized ) <br>    ShowWindow( Global.hWndMain, SW_SHOWMINIMIZED ); <br>  else <br>    ShowWindow( Global.hWndMain, SW_SHOWDEFAULT ); <br>  UpdateWindow( Global.hWndMain ); <br> <br>  //-- Acquire and dispatch messages until a WM_QUIT message is received. <br>  while( GetMessage( &amp;Msg, NULL, 0, 0 ) ) { <br>    if( !TranslateAccelerator( Global.hWndMain, hAccel, &amp;Msg ) ) { <br>      TranslateMessage( &amp;Msg ); <br>      DispatchMessage( &amp;Msg ); <br>    } <br>  } <br> <br>  return( Msg.wParam ); <br>  UNREFERENCED_PARAMETER( lpCmdLine );  // avoid warnings <br>  UNREFERENCED_PARAMETER( hPrevInst );  // always NULL under Windows NT <br>  UNREFERENCED_PARAMETER( nCmdShow  );  // <br>} <br> <br> <br>// ************************************************************************ <br>// FUNCTION : MainWndProc( HWND, UINT, WPARAM, LPARAM ) <br>// PURPOSE  : Processes uMsgs <br>// MESSAGES : <br>//   WM_COMMAND   - passed to ProcessCommandsWndProc() <br>//   WM_DESTROY   - destroy window <br>//    ... <br>// COMMENTS : <br>// <br>// ************************************************************************ <br>LRESULT CALLBACK <br>MainWndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam ) <br>{ <br>  #define TOP_BORDER      4 <br>  #define BOTTOM_BORDER   4 <br>  #define SIDE_BORDER     4 <br>  #define MIN_HEIGHT    128 <br> <br>  static HDC hDC; <br> <br>  switch( uMsg ) { <br> <br>    //-- forward all WM_COMMANDS to separate handler function <br>    case WM_COMMAND: <br>      return( ProcessCommandsWndProc( hWnd, uMsg, wParam, lParam) ); <br> <br>    //-- create debug event listbox <br>    case UM_CREATE_LISTBOX: { <br>      TCHAR  szWindowName[64]; <br>      HFONT  hFont; <br> <br>      LoadString( Global.hInstance, IDS_DEBUG_EVENTS, szWindowName, <br>        sizeof(szWindowName)/sizeof(TCHAR) ); <br> <br>      Global.hWndListBox = CreateWindow( <br>                           TEXT( "ListBox" ), <br>                           szWindowName, <br>                           WS_CHILD             | WS_VISIBLE      | <br>                           WS_CAPTION           | WS_VSCROLL      | <br>                           WS_HSCROLL           | LBS_NOTIFY      | <br>                           LBS_DISABLENOSCROLL  | LBS_USETABSTOPS | <br>                           LBS_NOINTEGRALHEIGHT, <br>                           (INT) SIDE_BORDER, <br>                           (INT) (Profile.fToolBar <br>                             ? (Global.ToolBarHeight + TOP_BORDER) <br>                             : TOP_BORDER), <br>                           (INT) Global.ListBoxSize.cx, <br>                           (INT) Global.ListBoxSize.cy, <br>                           hWnd, (HMENU) NULL, Global.hInstance, NULL ); <br> <br>      //-- Subclass the listbox so the user cannot move it <br>      Global.OldListBoxWndProc = SubclassWindow( Global.hWndListBox, <br>        (WNDPROC) NewListBoxWndProc ); <br> <br>      //-- set listbox font &amp; background color <br>      hDC = GetDC( Global.hWndListBox ); <br>      hFont = CreateFontIndirect( &amp;(Profile.LogFont) ); <br>      SelectObject( hDC, hFont ); <br>      SendMessage( Global.hWndListBox, WM_CTLCOLORLISTBOX, (WPARAM) hDC, <br>        (LPARAM) Global.hWndListBox ); <br>      SendMessage( Global.hWndListBox, WM_SETFONT, (WPARAM) hFont, TRUE ); <br>      ReleaseDC( Global.hWndListBox, hDC ); <br> <br>      //-- if command line contains a debuggee name then <br>      //   start and detach the debug event processing thread <br>      if( __argc == 2 ) <br>        StartDebuggee( (LPTSTR) __argv[1], Global.hWndListBox ); <br> <br>      return( FALSE ); <br>    } <br> <br>    //-- create ToolBar &amp; send message to create the Debug Events listbox <br>    case WM_CREATE: <br>      Global.hWndToolBar = CreateTextButtonBar( hWnd, &amp;Global.ToolBarHeight ); <br>      if( Profile.fToolBar ) <br>        ShowWindow( Global.hWndToolBar, SW_SHOW ); <br>      PostMessage( hWnd, UM_CREATE_LISTBOX, 0, 0 ); <br>      return( FALSE ); <br> <br>    //-- resize the debug event listbox when the window size changes <br>    case WM_SIZE: <br>      Global.ClientSize.cx = LOWORD( lParam ); <br>      Global.ClientSize.cy = HIWORD( lParam ); <br>      Global.ListBoxSize.cx = Global.ClientSize.cx - ( 2*SIDE_BORDER ); <br>      Global.ListBoxSize.cy = max( Global.ClientSize.cy, MIN_HEIGHT <br>                                + TOP_BORDER ) <br>        - (TOP_BORDER + BOTTOM_BORDER); <br> <br>      if( Profile.fToolBar ) <br>        Global.ListBoxSize.cy -= Global.ToolBarHeight; <br> <br>      if( Global.hWndListBox != NULL) <br>        MoveWindow( Global.hWndListBox, <br>          (INT) SIDE_BORDER, <br>          (INT) (Profile.fToolBar ? Global.ToolBarHeight + TOP_BORDER : TOP_BORDER), <br>          (INT) Global.ListBoxSize.cx, (INT) Global.ListBoxSize.cy, TRUE ); <br> <br>      switch( wParam ) { <br> <br>        case SIZE_RESTORED: { <br>          RECT rect; <br> <br>          Profile.fMaximized = FALSE; <br>          Profile.fMinimized = FALSE; <br>          GetWindowRect( Global.hWndMain, &amp;rect ); <br>          Profile.nWidth  = (INT) (rect.right - rect.left); <br>          Profile.nHeight = (INT) (rect.bottom - rect.top); <br>          return( FALSE ); <br>        } <br> <br>        case SIZE_MAXIMIZED: <br>          Profile.fMaximized = TRUE; <br>          Profile.fMinimized = FALSE; <br>          Profile.xPos       = Global.xPosOld; <br>          Profile.yPos       = Global.yPosOld; <br>          return( FALSE ); <br> <br>        case SIZE_MINIMIZED: <br>          Profile.fMinimized = TRUE; <br>          Profile.fMaximized = FALSE; <br>          Profile.xPos       = Global.xPosOld; <br>          Profile.yPos       = Global.yPosOld; <br>          return( FALSE ); <br> <br>      } <br>      return( DefWindowProc(hWnd, uMsg, wParam, lParam) ); <br> <br>    //-- keep track of window position so it can be saved <br>    case WM_MOVE: { <br>      RECT rect; <br> <br>      GetWindowRect( Global.hWndMain, &amp;rect ); <br>      Global.xPosOld      = Profile.xPos; <br>      Global.yPosOld      = Profile.yPos; <br>      Profile.xPos = (INT) rect.left; <br>      Profile.yPos = (INT) rect.top; <br>      return( FALSE ); <br>    } <br> <br>    //-- colorize the debug event listbox <br>    case WM_CTLCOLORLISTBOX: { <br>      LOGBRUSH LogBrush; <br> <br>      LogBrush.lbStyle = BS_SOLID; <br>      LogBrush.lbColor = Profile.rgbBackColor; <br>      LogBrush.lbHatch = (LONG) NULL; <br> <br>      SetTextColor( (HDC) wParam, Profile.rgbForeColor ); <br>      SetBkColor( (HDC) wParam, Profile.rgbBackColor ); <br> <br>      return( (LPARAM) CreateBrushIndirect( &amp;LogBrush ) ); <br>    } <br> <br>    //-- check if a debuggee is still active, save profile settings <br>    case WM_CLOSE: <br>      if( Global.dwActiveDebuggees ) { <br>        TCHAR  szExitBoxTitle[64]; <br>        TCHAR  szExitBoxText[256]; <br> <br>        LoadString( Global.hInstance, IDS_EXIT_BOX_TITLE, szExitBoxTitle, <br>          sizeof(szExitBoxTitle)/sizeof(TCHAR) ); <br>        LoadString( Global.hInstance, IDS_EXIT_BOX_TEXT, szExitBoxText, <br>          sizeof(szExitBoxText)/sizeof(TCHAR) ); <br>        if ( MessageBox( hWnd, szExitBoxText, szExitBoxTitle, <br>               MB_YESNO | MB_ICONEXCLAMATION ) == IDNO ) <br>          return( FALSE ); <br>      } <br> <br>      //-- store location information to private profile data <br>      WritePrivateProfileSettings( Global.szAppName, szIniPathName, &amp;Profile ); <br> <br>      DestroyWindow( Global.hWndToolBar ); <br>      DestroyWindow( Global.hWndListBox ); <br>      DestroyWindow( Global.hWndMain ); <br> <br>      return( FALSE ); <br> <br>    case WM_DESTROY: <br>      if( Global.fHelpUsed ) <br>        WinHelp( hWnd, szHelpPathName, (UINT) HELP_QUIT, (DWORD) NULL ); <br>      PostQuitMessage( 0 ); <br>      return( FALSE ); <br> <br>    default:               // Passes it on if unproccessed <br>      return( DefWindowProc(hWnd, uMsg, wParam, lParam) ); <br>  } <br> <br>  return( FALSE ); <br>} <br> <br> <br>// ************************************************************************ <br>// FUNCTION : ProcessCommandsWndProc( HWND, UINT, WPARAM, LPARAM ) <br>// PURPOSE  : Processes WM_COMMAND messages for MainWndProc() <br>// MESSAGES : <br>//   WM_COMMAND         - application menu <br>//     IDM_FILE_EXIT    - exit the application <br>//     IDM_FILE_ABOUT   - About Dialog Box <br>//    ... <br>// COMMENTS : <br>// <br>// ************************************************************************ <br>LRESULT CALLBACK <br>ProcessCommandsWndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam ) <br>{ <br>  static LPCTSTR  lpszAboutDlgBox       = TEXT( "AboutDlgBox"       ); <br>  static LPCTSTR  lpszAttachDlgBox      = TEXT( "AttachDlgBox"      ); <br>  static LPCTSTR  lpszPreferencesDlgBox = TEXT( "PreferencesDlgBox" ); <br> <br>  switch( LOWORD(wParam) ) { <br> <br>    //-- user requests to open a new debuggee <br>    case IDM_FILE_OPEN: { <br>      static TCHAR szDebuggeeFileName[MAX_PATH]; <br> <br>      if( Global.dwActiveDebuggees ) { <br>        MaxDebuggeesMessageBox( Global.hWndMain ); <br>        return( FALSE ); <br>      } <br>      if( !GetDebuggeeFileName( szDebuggeeFileName, hWnd ) ) { <br>        return( FALSE ); <br>      } <br>      else { <br>        if( Profile.fClearOnNew ) { <br>          SendMessage( Global.hWndListBox, LB_RESETCONTENT, 0, 0 ); <br>          Global.MaxStrLen = 0; <br>        } <br>        StartDebuggee( szDebuggeeFileName, Global.hWndListBox ); <br>      } <br>      return( FALSE ); <br>    } <br> <br>    //-- user requests to attach to an existing process <br>    case IDM_FILE_ATTACH: <br>      if( Global.dwActiveDebuggees ) { <br>        MaxDebuggeesMessageBox( Global.hWndMain ); <br>        return( FALSE ); <br>      } <br>      if( !DialogBox( Global.hInstance, lpszAttachDlgBox, hWnd, <br>            (DLGPROC) AttachDlgProc ) ) { <br>        // handle cancel condition... <br>      } <br>      else { <br>        if( Profile.fClearOnNew ) { <br>          SendMessage( Global.hWndListBox, LB_RESETCONTENT, 0, 0 ); <br>          Global.MaxStrLen = 0; <br>        } <br>      } <br>      return( FALSE ); <br> <br>    //-- copy listbox contents to the clipboard and clear the listbox <br>    case IDM_EDIT_CUT: <br>      CopyListBoxToClipboard( Global.hWndListBox, Global.MaxStrLen ); <br>      SendMessage( hWnd, WM_COMMAND, IDM_EDIT_DELETE, 0 ); <br>      return( FALSE ); <br> <br>    //-- copy listbox contents to the clipboard <br>    case IDM_EDIT_COPY: { <br>      CopyListBoxToClipboard( Global.hWndListBox, Global.MaxStrLen ); <br>      return( FALSE ); <br>    } <br> <br>    //-- clear the contents of the listbox <br>    case IDM_EDIT_DELETE: <br>      SendMessage( Global.hWndListBox, LB_RESETCONTENT, 0, 0 ); <br>      Global.MaxStrLen = 0; <br>      return( FALSE ); <br> <br>    //-- user requests a new font for the listbox <br>    case IDM_OPTIONS_FONT: <br>      if( !ChooseNewFont( Global.hWndListBox ) ) { <br>        // handle cancel condition... <br>      } <br>      return( FALSE ); <br> <br>    //-- user requests a new background color for the listbox <br>    case IDM_OPTIONS_COLOR: <br>      ChooseNewBackColor( Global.hWndListBox ); <br>      return( FALSE ); <br> <br>    //-- invoke the preferences dialog box <br>    case IDM_OPTIONS_PREFERENCES: <br>      DialogBox( Global.hInstance, lpszPreferencesDlgBox, hWnd, <br>        (DLGPROC) PreferencesDlgProc ); <br>      return( FALSE ); <br> <br>    //-- toggle the toolbar on or off <br>    case IDM_OPTIONS_TOOLBAR: <br>      if( Profile.fToolBar ) { <br>        Profile.fToolBar = 0; <br>        CheckMenuItem( GetMenu(Global.hWndMain), IDM_OPTIONS_TOOLBAR, <br>          MF_UNCHECKED ); <br>        ShowWindow( Global.hWndToolBar, SW_HIDE ); <br>        SendWmSizeMessage( Global.hWndMain ); <br>      } <br>      else { <br>        Profile.fToolBar = 1; <br>        CheckMenuItem( GetMenu(Global.hWndMain), IDM_OPTIONS_TOOLBAR, <br>          MF_CHECKED ); <br>        ShowWindow( Global.hWndToolBar, SW_SHOW ); <br>        SendWmSizeMessage( Global.hWndMain ); <br>      } <br>      return( FALSE ); <br> <br>    //-- toggles whether the used directory is used for the 'open' command <br>    case IDM_OPTIONS_SAVEDDIR: <br>      if( Profile.fSavedDirectory ) { <br>        Profile.fSavedDirectory = 0; <br>        CheckMenuItem( GetMenu(Global.hWndMain), IDM_OPTIONS_SAVEDDIR, <br>          MF_UNCHECKED ); <br>      } <br>      else { <br>        Profile.fSavedDirectory = 1; <br>        CheckMenuItem( GetMenu(Global.hWndMain), IDM_OPTIONS_SAVEDDIR, <br>          MF_CHECKED ); <br>      } <br>      return( FALSE ); <br> <br>    //-- toggles the 'save on exit' feature <br>    case IDM_OPTIONS_SAVEONEXIT: <br>      if( Profile.fSaveOnExit ) { <br>        Profile.fSaveOnExit = 0; <br>        CheckMenuItem( GetMenu(Global.hWndMain), IDM_OPTIONS_SAVEONEXIT, <br>          MF_UNCHECKED ); <br>      } <br>      else { <br>        Profile.fSaveOnExit = 1; <br>        CheckMenuItem( GetMenu(Global.hWndMain), IDM_OPTIONS_SAVEONEXIT, <br>          MF_CHECKED ); <br>      } <br>      return( FALSE ); <br> <br>    //-- store location information to private profile data now <br>    case IDM_OPTIONS_SAVENOW: { <br>      BOOL fOldSaveOnExit = Profile.fSaveOnExit; <br>      BOOL fOldSavePreferences = Profile.fSavePreferences; <br> <br>      Profile.fSaveOnExit = TRUE; <br>      Profile.fSavePreferences = TRUE; <br>      WritePrivateProfileSettings( Global.szAppName, szIniPathName, &amp;Profile ); <br>      Profile.fSaveOnExit = fOldSaveOnExit; <br>      Profile.fSavePreferences = fOldSavePreferences; <br>      return( FALSE ); <br>    } <br> <br>    //-- invoke help and display the contents panel <br>    case IDM_HELP_CONTENTS: <br>      Global.fHelpUsed = TRUE; <br>      WinHelp( hWnd, (LPCTSTR) szHelpPathName, HELP_CONTENTS, (DWORD) NULL ); <br>      return( FALSE ); <br> <br>    //-- search the help indexes <br>    case IDM_HELP_SEARCH: <br>      Global.fHelpUsed = TRUE; <br>      WinHelp( hWnd, (LPCTSTR) szHelpPathName, HELP_PARTIALKEY, <br>        (DWORD) TEXT( "" ) ); <br>      return( FALSE ); <br> <br>    //-- invoke the main 'how to use' help panel <br>    case IDM_HELP_HOWTOUSE: <br>      Global.fHelpUsed = TRUE; <br>      WinHelp( hWnd, (LPTSTR) NULL, HELP_HELPONHELP, (DWORD) NULL ); <br>      return( FALSE ); <br> <br>    //-- display the product information dialog box <br>    case IDM_HELP_ABOUT: <br>      DialogBox( Global.hInstance, lpszAboutDlgBox, hWnd, <br>        (DLGPROC) AboutDlgProc ); <br>      return( FALSE ); <br> <br>    //-- the usr requests to terminate the app <br>    case IDM_FILE_EXIT: <br>      SendMessage( Global.hWndMain, WM_CLOSE, 0, 0 ); <br>      return( FALSE ); <br> <br>    default: <br>      return( DefWindowProc(hWnd, uMsg, wParam, lParam) ); <br>  } <br> <br>  return( FALSE ); <br>} <br> <br> <br>// ************************************************************************ <br>// FUNCTION : PreferencesDlgProc( HWND, UINT, WPARAM, LPARAM ) <br>// PURPOSE  : Processes message for "Preferences" dialog box <br>// MESSAGES : <br>//   WM_INITDIALOG - initialize dialog box <br>//   WM_COMMAND    - Input received <br>// COMMENTS : <br>//   Wait for user to click on "Ok" button, then close the dialog box. <br>// ************************************************************************ <br>BOOL CALLBACK <br>PreferencesDlgProc( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam ) <br>{ <br>  switch( uMsg ) { <br> <br>    case WM_COMMAND: <br>      switch( LOWORD(wParam) ) { <br> <br>        case IDOK: <br> <br>          //-- Debugger Setting Group <br>          if( SendMessage( GetDlgItem( hDlg, IDC_DEBUG_PROCESS), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebugMode = DEBUG_PROCESS; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_DEBUG_ONLY_THIS_PROCESS), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebugMode = DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS; <br> <br>          //-- Debuggee Priority Group <br>          if( SendMessage( GetDlgItem( hDlg, IDC_IDLE_PRIORITY_CLASS), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebuggeePriority = IDLE_PRIORITY_CLASS; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_NORMAL_PRIORITY_CLASS), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebuggeePriority = NORMAL_PRIORITY_CLASS; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_HIGH_PRIORITY_CLASS), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebuggeePriority = HIGH_PRIORITY_CLASS; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_REALTIME_PRIORITY_CLASS), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebuggeePriority = REALTIME_PRIORITY_CLASS; <br> <br>          //-- Miscellaneous Options Group <br>          Profile.fClearOnNew  = (BOOL) SendMessage( <br>                                          GetDlgItem( hDlg, IDC_CLEAR_ON_NEW), <br>                                          BM_GETCHECK, 0 , 0 ); <br>          Profile.fVerbose     = (BOOL) SendMessage( <br>                                          GetDlgItem( hDlg, IDC_VERBOSE), <br>                                          BM_GETCHECK, 0 , 0 ); <br> <br>#ifdef SHOW_SYMBOLS <br>          Profile.fShowSymbols = (BOOL) SendMessage( <br>                                          GetDlgItem( hDlg, IDC_SHOW_SYMBOLS), <br>                                          BM_GETCHECK, 0 , 0 ); <br>#endif <br> <br> <br>          //- Debug Error Level Group <br>          if( SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_NONE), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebugErrorLevel = 0; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_ERROR), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebugErrorLevel = SLE_ERROR; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_MINORERROR), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebugErrorLevel = SLE_MINORERROR; <br>          if( SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_WARNING), <br>                BM_GETCHECK, 0, 0 ) ) <br>            Profile.DebugErrorLevel = SLE_WARNING; <br> <br>          Profile.fSavePreferences = (BOOL) SendMessage( <br>                                              GetDlgItem( hDlg, <br>                                                IDC_SAVE_PREFERENCES), <br>                                              BM_GETCHECK, 0 , 0 ); <br>          EndDialog( hDlg, TRUE ); <br>          return( TRUE ); <br> <br>        case IDCANCEL: <br>          EndDialog( hDlg, FALSE ); <br>          return( TRUE ); <br> <br>        case IDHELP: <br>          return( TRUE ); <br> <br>      } <br>      break; <br> <br>    case WM_INITDIALOG: <br> <br>      //-- Debugger Setting Group <br>      switch( Profile.DebugMode ) { <br> <br>        case DEBUG_PROCESS: <br>          SendMessage( GetDlgItem( hDlg, IDC_DEBUG_PROCESS), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case ( DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS ): <br>          SendMessage( GetDlgItem( hDlg, IDC_DEBUG_ONLY_THIS_PROCESS), <br>            BM_SETCHECK, 1, 0); <br>          break; <br>      } <br> <br>      //-- Debuggee Priority Group <br>      switch( Profile.DebuggeePriority ) { <br> <br>        case IDLE_PRIORITY_CLASS: <br>          SendMessage( GetDlgItem( hDlg, IDC_IDLE_PRIORITY_CLASS), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case NORMAL_PRIORITY_CLASS: <br>          SendMessage( GetDlgItem( hDlg, IDC_NORMAL_PRIORITY_CLASS), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case HIGH_PRIORITY_CLASS: <br>          SendMessage( GetDlgItem( hDlg, IDC_HIGH_PRIORITY_CLASS), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case REALTIME_PRIORITY_CLASS: <br>          SendMessage( GetDlgItem( hDlg, IDC_REALTIME_PRIORITY_CLASS), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>      } <br> <br>      //-- Miscellaneous Options Group <br>      SendMessage( GetDlgItem( hDlg, IDC_CLEAR_ON_NEW),     BM_SETCHECK, <br>        Profile.fClearOnNew, 0 ); <br>      SendMessage( GetDlgItem( hDlg, IDC_VERBOSE),          BM_SETCHECK, <br>        Profile.fVerbose, 0 ); <br>      SendMessage( GetDlgItem( hDlg, IDC_SAVE_PREFERENCES), BM_SETCHECK, <br>        Profile.fSavePreferences, 0 ); <br> <br>#ifdef SHOW_SYMBOLS <br>      SendMessage( GetDlgItem( hDlg, IDC_SHOW_SYMBOLS),     BM_SETCHECK, <br>        Profile.fShowSymbols, 0 ); <br>#endif <br> <br>      //- Debug Error Level Group <br>      switch( Profile.DebugErrorLevel ) { <br> <br>        case 0: <br>          SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_NONE), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case SLE_ERROR: <br>          SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_ERROR), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case SLE_MINORERROR: <br>          SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_MINORERROR), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>        case SLE_WARNING: <br>          SendMessage( GetDlgItem( hDlg, IDC_DEBUG_MODE_WARNING), <br>            BM_SETCHECK, 1, 0); <br>          break; <br> <br>      } <br> <br>      return( TRUE ); <br>  } <br> <br>  return( FALSE ); <br>  UNREFERENCED_PARAMETER( lParam ); <br>} <br> <br> <br>// ************************************************************************ <br>// FUNCTION : AttachDlgProc( HWND, UINT, WPARAM, LPARAM ) <br>// PURPOSE  : Processes messages for "Attach" dialog box <br>// MESSAGES : <br>//   WM_COMMAND    - Input received <br>//   WM_INITDIALOG - initialize dialog box <br>// COMMENTS : <br>//   Wait for user to click on "Ok" button, then close the dialog box. <br>// ************************************************************************ <br>BOOL CALLBACK <br>AttachDlgProc( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam ) <br>{ <br>  static HWND hWndProcessList; <br> <br>  switch( uMsg ) { <br> <br>    case WM_COMMAND: <br>      switch( LOWORD(wParam) ) { <br> <br>        case IDOK: { <br>          LONG  Index; <br>          DWORD dwProcessId; <br> <br>          Index = (UINT) SendMessage( hWndProcessList, LB_GETCURSEL, <br>                         (WPARAM) NULL, (LPARAM) NULL ); <br>          dwProcessId = (DWORD) SendMessage( hWndProcessList, <br>                                  LB_GETITEMDATA, <br>                                  (WPARAM) Index, (LPARAM) NULL ); <br>          AttachToDebuggee( dwProcessId, Global.hWndListBox ); </code></pre>
<p>
</p>
<pre><code>EndDialog( hDlg, TRUE ); <br>          return( TRUE ); <br>        } <br> <br>        case IDCANCEL: <br>          EndDialog( hDlg, FALSE ); <br>          return( TRUE ); <br> <br>        case IDHELP: <br>          return( TRUE ); <br> <br>      } <br>      switch( HIWORD( wParam ) ) { <br>        case LBN_DBLCLK: <br>          SendMessage( hDlg, WM_COMMAND, (WPARAM) IDOK, (LPARAM) 0L ); <br>          return( TRUE ); <br>      } <br>      break; <br> <br>    case WM_INITDIALOG: <br>      hWndProcessList = GetDlgItem( hDlg, IDC_PROCESSLIST ); <br>      SendMessage( hWndProcessList, LB_RESETCONTENT, 0 , 0 ); <br>      for(; !EnumWindows( (WNDENUMPROC) EnumProcessListFunc, <br>               (LPARAM) hWndProcessList ); ) <br>        ; // continue looping until done <br>      return( TRUE ); <br>  } <br> <br>  return( FALSE ); <br>  UNREFERENCED_PARAMETER( lParam ); <br>} <br> <br> <br>// ************************************************************************** <br>// FUNCTION : AboutDlgProc( HWND, UINT, WPARAM, LPARAM ) <br>// PURPOSE  : Processes messages for "About" dialog box <br>// MESSAGES : <br>//   WM_COMMAND    - Input received <br>//     IDOK        - OK button selected <br>//     IDCANCEL    - Cancel button selected <br>//     ... <br>//   WM_INITDIALOG - initialize dialog box <br>//   WM_CLOSE      - close the dialog box <br>//   ... <br>// COMMENTS: <br>//   No initialization is needed for this particular dialog box. <br>//   In this case, TRUE must be returned to Windows. <br>//   Wait for user to click on "Ok" button, then close the dialog box. <br>// ************************************************************************** <br>BOOL CALLBACK <br>AboutDlgProc( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam ) <br>{ <br>  switch( uMsg ) { <br> <br>    case WM_COMMAND: <br>      switch( LOWORD(wParam) ) { <br> <br>        case IDOK: <br>          EndDialog( hDlg, TRUE ); <br>          return( TRUE ); <br> <br>        case IDCANCEL: <br>          EndDialog( hDlg, FALSE ); <br>          return( FALSE ); <br> <br>      } <br>      break; <br> <br>    case WM_INITDIALOG: <br>      SetTimer( hDlg, 1, TIMEOUT_ANIMATED_ICON, TimerProc ); <br>      return( TRUE ); <br> <br>    case WM_CLOSE: <br>      EndDialog( hDlg, TRUE ); <br>      return( TRUE ); <br> <br>    case WM_DESTROY: <br>      KillTimer( hDlg, 1 ); <br>      return( TRUE ); <br>  } <br> <br>  return( FALSE ); <br>  UNREFERENCED_PARAMETER( lParam ); <br>} <br> <br> <br>// ************************************************************************ <br>// FUNCTION : NewListBoxWndProc( HWND, UINT, WPARAM, LPARAM ) <br>// PURPOSE  : Processes messages for "LISTBOX" class. <br>// COMMENTS : Prevents the user from moving the window <br>//            by dragging the titlebar. <br>// ************************************************************************ <br>LRESULT CALLBACK <br>NewListBoxWndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam ) <br>{ <br>  switch( uMsg ) { <br> <br>    case WM_NCLBUTTONDOWN: <br>      if( wParam == HTCAPTION ) { <br>        SetFocus( hWnd ); <br>        return( FALSE ); <br>      } <br>      else <br>        break; <br>  } <br> <br>  return( CallWindowProc( Global.OldListBoxWndProc, hWnd, uMsg, wParam, lParam) ); <br>} <br> <br> <br>// ************************************************************************ <br>// FUNCTION : TimerProc( HWND, UINT, UINT, DWORD ) <br>// PURPOSE  : Timer callback fuction that changes the dialog's icon (thus <br>//            a animated icon) for each timer message received. <br>// COMMENTS : <br>// ************************************************************************ <br>VOID CALLBACK <br>TimerProc( HWND hDlg, UINT uMsg, UINT idEvent, DWORD dwTime ) <br>{ <br> #define NUM_ICONS 8 <br> <br> static UINT    uIconNumber = 0; <br> static HWND    hWndIcon    = NULL; <br> static HWND    hWndIconOld = NULL; <br> static LPCTSTR lpszIconNames[NUM_ICONS] = { <br>                  TEXT( "DebugIcon1" ), TEXT( "DebugIcon2" ), <br>                  TEXT( "DebugIcon3" ), TEXT( "DebugIcon4" ), <br>                  TEXT( "DebugIcon5" ), TEXT( "DebugIcon6" ), <br>                  TEXT( "DebugIcon7" ), TEXT( "DebugIcon8" ) }; <br> <br> if( (++uIconNumber) &gt;= NUM_ICONS ) <br>   uIconNumber = 0; <br> <br> hWndIconOld = hWndIcon; <br> hWndIcon = CreateIconWindow( hDlg, lpszIconNames[uIconNumber] ); <br> if( hWndIcon != NULL ) <br>   DestroyWindow( hWndIconOld ); <br> <br> return; <br> UNREFERENCED_PARAMETER( uMsg ); <br> UNREFERENCED_PARAMETER( idEvent ); <br> UNREFERENCED_PARAMETER( dwTime ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

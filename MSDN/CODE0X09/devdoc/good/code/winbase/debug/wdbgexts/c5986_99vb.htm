<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WDBGEXTS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5987"></a>WDBGEXTS.C</h2>
<pre><code>/**********************************************************************\ <br>*                                                                      * <br>* Copyright 1992 - 1998 Microsoft Corporation                      * <br>*                                                                      * <br>* Module Name:                                                         * <br>*                                                                      * <br>*    wdbgexts.c                                                        * <br>*                                                                      * <br>* Abstract:                                                            * <br>*                                                                      * <br>* This file is a ported version of ntsdexts.c, supporting remote       * <br>* operations in WinDbg command window.       * <br>*                                                                      * <br>* By including wdbgexts.h, an extension has 4 more apis available,     * <br>* beyond those available to ntsd extensions:       * <br>*                                                                      * <br>*    PWINDBG_READ_PROCESS_MEMORY_ROUTINE lpReadProcessMemoryRoutine;   * <br>*    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE lpWriteProcessMemoryRoutine; * <br>*    PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;     * <br>*    PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;     * <br>*       * <br>* The apis available to NTSD and WINDBG extensions are:        * <br>*       * <br>*    PNTSD_OUTPUT_ROUTINE lpOutputRoutine;       * <br>*    PNTSD_GET_EXPRESSION lpGetExpressionRoutine;       * <br>*    PNTSD_GET_SYMBOL lpGetSymbolRoutine;       * <br>*    PNTSD_DISASM lpDisasmRoutine;       * <br>*    PNTSD_CHECK_CONTROL_C lpCheckControlCRoutine;       * <br>*       * <br>*                                                                      * <br>\**********************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;windbgkd.h&gt; <br>#include &lt;ntsdexts.h&gt; <br>#include &lt;wdbgexts.h&gt; <br> <br>#define MAXLEN 80 <br> <br>CHAR  igrepLastPattern[256]; <br>DWORD igrepSearchStartAddress; <br>DWORD igrepLastPc; <br> <br> <br>/**********************************************************************\ <br>*                                                                      * <br>* igrep( )                                                             * <br>*                                                                      * <br>* Description:                                                         * <br>*                                                                      * <br>*    This function is called as a WINDBG extension to grep the         * <br>*    instruction stream for a particular pattern.                      * <br>*                                                                      * <br>* Arguments:                                                           * <br>*                                                                      * <br>*    hCurrentProcess - Supplies a handle to the current process (at    * <br>*        the time the extension was called).                           * <br>*                                                                      * <br>*    hCurrentThread - Supplies a handle to the current thread (at      * <br>*        the time the extension was called).                           * <br>*                                                                      * <br>*    CurrentPc - Supplies the current pc at the time the extension is  * <br>*        called.                                                       * <br>*                                                                      * <br>*    lpExtensionApis - Supplies the address of the functions callable  * <br>*        by this extension.                                            * <br>*                                                                      * <br>*    lpArgumentString   Supplies the pattern and expression for this   * <br>*        command.                                                      * <br>*                                                                      * <br>* Return Value:                                                        * <br>*                                                                      * <br>*    None.                                                             * <br>\**********************************************************************/ <br> <br>VOID igrep ( <br>    HANDLE hCurrentProcess, <br>    HANDLE hCurrentThread, <br>    DWORD dwCurrentPc, <br>    PWINDBG_EXTENSION_APIS lpExtensionApis, <br>    LPSTR lpArgumentString <br>    ) <br> <br>{ <br>    DWORD dwNextGrepAddr; <br>    DWORD dwCurrGrepAddr; <br>    CHAR SourceLine[256]; <br>    BOOL NewPc; <br>    DWORD d; <br>    PNTSD_OUTPUT_ROUTINE lpOutputRoutine; <br>    PNTSD_GET_EXPRESSION lpGetExpressionRoutine; <br>    PNTSD_GET_SYMBOL lpGetSymbolRoutine; <br>    PNTSD_DISASM lpDisasmRoutine; <br>    PNTSD_CHECK_CONTROL_C lpCheckControlCRoutine; <br>    LPSTR pc; <br>    LPSTR Pattern; <br>    LPSTR Expression; <br>    CHAR Symbol[64]; <br>    DWORD Displacement; <br> <br>    UNREFERENCED_PARAMETER( hCurrentProcess ); <br>    UNREFERENCED_PARAMETER( hCurrentThread ); <br> <br>    lpOutputRoutine = lpExtensionApis-&gt;lpOutputRoutine; <br>    lpGetExpressionRoutine = lpExtensionApis-&gt;lpGetExpressionRoutine; <br>    lpGetSymbolRoutine = lpExtensionApis-&gt;lpGetSymbolRoutine; <br>    lpDisasmRoutine = (PNTSD_DISASM) lpExtensionApis-&gt;lpDisasmRoutine; <br>    lpCheckControlCRoutine = lpExtensionApis-&gt;lpCheckControlCRoutine; <br> <br>    if( igrepLastPc &amp;&amp; igrepLastPc == dwCurrentPc ) { <br>        NewPc = FALSE; <br>    } <br>    else { <br>        igrepLastPc = dwCurrentPc; <br>        NewPc = TRUE; <br>    } <br> <br>    // <br>    // check for pattern. <br>    // <br> <br>    pc = lpArgumentString; <br>    Pattern = NULL; <br>    Expression = NULL; <br>    if( *pc ) { <br>        Pattern = pc; <br>        while( *pc &gt; ' ' ) { <br>            pc++; <br>    } <br> <br>        // <br>        // check for an expression <br>        // <br> <br>        if( *pc != '\0' ) { <br>            *pc = '\0'; <br>            pc++; <br>            if( *pc &lt;= ' ' ) { <br>                while (*pc &lt;= ' ') { <br>                    pc++; <br>                } <br>            } <br>            if( *pc ) { <br>                Expression = pc; <br>            } <br>        } <br>    } <br> <br>    if( Pattern ) { <br>        strcpy(igrepLastPattern,Pattern); <br> <br>        if( Expression ) { <br>            igrepSearchStartAddress = (lpGetExpressionRoutine)(Expression); <br>            if( !igrepSearchStartAddress ) { <br>                igrepSearchStartAddress = igrepLastPc; <br>                return; <br>            } <br>        } <br>        else { <br>            igrepSearchStartAddress = igrepLastPc; <br>        } <br>    } <br> <br>    dwNextGrepAddr = igrepSearchStartAddress; <br>    dwCurrGrepAddr = dwNextGrepAddr; <br>    d = (lpDisasmRoutine)(&amp;dwNextGrepAddr,SourceLine,FALSE); <br>    while( d ) { <br>        if( strstr(SourceLine,igrepLastPattern) ) { <br>            igrepSearchStartAddress = dwNextGrepAddr; <br>    (lpGetSymbolRoutine)((LPVOID)dwCurrGrepAddr,(PUCHAR)Symbol,&amp;Displacement); <br>            (lpOutputRoutine)("%s",SourceLine); <br>            return; <br>        } <br>        if( (lpCheckControlCRoutine)() ) { <br>            return; <br>        } <br>        dwCurrGrepAddr = dwNextGrepAddr; <br>        d = (lpDisasmRoutine)(&amp;dwNextGrepAddr,SourceLine,FALSE); <br>    } <br>} <br> <br> <br>/**********************************************************************\ <br>*                                                                      * <br>* str( )       * <br>*                                                                      * <br>* Routine Description:                                                 * <br>*                                                                      * <br>*    This function is called as a WINDBG extension to format and dump  * <br>*    a counted ansi string.                                            * <br>*                                                                      * <br>* Arguments:                                                           * <br>*                                                                      * <br>*    hCurrentProcess - Supplies a handle to the current process (at    * <br>*        the time the extension was called).                           * <br>*                                                                      * <br>*    hCurrentThread - Supplies a handle to the current thread (at the  * <br>*        time the extension was called).                               * <br>*                                                                      * <br>*    CurrentPc - Supplies the current pc at the time the extension is  * <br>*        called.                                                       * <br>*                                                                      * <br>*    lpExtensionApis - Supplies the address of the functions callable  * <br>*        by this extension.                                            * <br>*                                                                      * <br>*    lpArgumentString - Supplies the asciiz string that describes the  * <br>*        ansi string to be dumped.                                     * <br>*                                                                      * <br>* Return Value:                                                        * <br>*                                                                      * <br>*    None.                                                             * <br>*                                                                      * <br>\**********************************************************************/ <br> <br>VOID str ( <br>    HANDLE hCurrentProcess, <br>    HANDLE hCurrentThread, <br>    DWORD dwCurrentPc, <br>    PWINDBG_EXTENSION_APIS lpExtensionApis, <br>    LPSTR lpArgumentString <br>    ) <br> <br>{ <br>    CHAR String[MAXLEN]; <br>    size_t Length; <br>    DWORD dwAddrString; <br>    CHAR Symbol[64]; <br>    LPSTR StringData; <br>    DWORD Displacement; <br>    BOOL b; <br>    PNTSD_OUTPUT_ROUTINE lpOutputRoutine; <br>    PNTSD_GET_EXPRESSION lpGetExpressionRoutine; <br>    PNTSD_GET_SYMBOL lpGetSymbolRoutine; <br> <br>    UNREFERENCED_PARAMETER( hCurrentProcess ); <br>    UNREFERENCED_PARAMETER( hCurrentThread ); <br>    UNREFERENCED_PARAMETER( dwCurrentPc ); <br> <br>    lpOutputRoutine = lpExtensionApis-&gt;lpOutputRoutine; <br>    lpGetExpressionRoutine = lpExtensionApis-&gt;lpGetExpressionRoutine; <br>    lpGetSymbolRoutine = lpExtensionApis-&gt;lpGetSymbolRoutine; <br> <br>    // <br>    // Evaluate the argument string to get the address of <br>    // the string to dump. <br>    // <br> <br>    dwAddrString = (lpGetExpressionRoutine)(lpArgumentString); <br>    if (!dwAddrString) { <br>(lpOutputRoutine)( "Invalid Expression." ); <br>return; <br>    } <br> <br>    // <br>    // Get the symbolic name of the string <br>    // <br> <br>    (lpGetSymbolRoutine)((LPVOID)dwAddrString,(PUCHAR)Symbol,&amp;Displacement); <br> <br>    // <br>    // Read current process memory and handle remote read as well <br>    // <br> <br>    b = (lpExtensionApis-&gt;lpReadProcessMemoryRoutine)( <br>                                                     dwAddrString, <br>     String, <br>     MAXLEN, <br>                                                     NULL <br>                                                     ); <br> <br>    if (!b) { <br>(lpOutputRoutine)( "ReadProcessMemory failed." ); <br>return; <br>    } <br> <br>    Length = strlen( String ); <br> <br>    StringData = (LPSTR)LocalAlloc(LMEM_ZEROINIT,Length+1); <br> <br>    if (!StringData) { <br>(lpOutputRoutine)( "LocalAlloc failed. Error = %x", GetLastError()); <br>        return; <br>    } <br> <br>    (lpOutputRoutine)( <br>"String: %s ; %d bytes at %lx\n", <br>String, <br>Length, <br>dwAddrString <br>        ); <br> <br>    LocalFree( StringData ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

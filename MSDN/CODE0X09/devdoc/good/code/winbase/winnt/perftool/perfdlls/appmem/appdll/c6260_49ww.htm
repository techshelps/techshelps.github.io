<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APPMEMA.C</title>
<link disabled rel=stylesheet href=../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6260"></a>APPMEMA.C</h2>
<pre><code>/*++ <br> <br>Copyright 1995 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    appmema.c <br> <br>Abstract: <br> <br>    application memory performance counter interface functions <br> <br>    This file contains the memory allocation function "wrappers" <br>    to allow monitoring of the memory usage by a performance monitoring <br>    application (e.g. PERFMON). <br> <br>Revision History <br> <br>    30 Aug 1995     Bob Watson (a-robw)     Created <br> <br>--*/ <br>#include &lt;windows.h&gt; <br>#include "appmema.h" <br>#include "..\pub\appmem.h" <br>  <br>HGLOBAL <br>GlobalAllocP ( <br>    UINT    fuFlags, <br>    DWORD   cbBytes <br>) <br>{ <br>    HGLOBAL hReturn; <br>    DWORD   dwSize; <br> <br>    hReturn = GlobalAlloc (fuFlags, cbBytes); <br> <br>    if (hReturn != NULL) { <br>        // only collect statistics on successful calls <br>        if (pAppData != NULL) { <br>            // only update data if data block is valid <br>            // update call count <br>            pAppData-&gt;dwAllocCalls++; <br>            dwSize = GlobalSize(hReturn); <br>            pAppData-&gt;dwApplicationBytes += dwSize; <br>        } <br>    } <br>    return hReturn; <br>} <br>  <br>HGLOBAL <br>GlobalFreeP ( <br>    HGLOBAL hglbMem <br>) <br>{ <br>    HGLOBAL hReturn; <br>    DWORD   dwSize; <br> <br>    // get size of block before freeing it <br>    dwSize = GlobalSize (hglbMem); <br>    if (dwSize &gt; 0) { <br>        // size was obtained OK so free the block <br>        hReturn = GlobalFree (hglbMem); <br>        if (hReturn == NULL) { <br>            // memory was freed <br>            if (pAppData != NULL) { <br>                // update call count <br>                pAppData-&gt;dwFreeCalls++; <br>                pAppData-&gt;dwApplicationBytes -= dwSize; <br>            } <br>        } else { <br>            // memory was not freed so don't change data <br>        } <br>    } else { <br>        // unable to read memory size <br>    } <br>    return hReturn; <br>} <br>  <br>HGLOBAL <br>GlobalReAllocP ( <br>    HGLOBAL hglbMem, <br>    DWORD   cbBytes, <br>    UINT    fuFlags <br>) <br>{ <br>    HGLOBAL hReturn; <br>    DWORD   dwBeforeSize = 0; <br>    DWORD   dwAfterSize = 0; <br> <br>    // get size of block before re-alloc-ing it <br>    dwBeforeSize = GlobalSize (hglbMem); <br>    if (dwBeforeSize &gt; 0) { <br>        // size was obtained OK so realloc the block <br>        hReturn = GlobalReAlloc (hglbMem, cbBytes, fuFlags); <br>        if (hReturn != NULL) { <br>            // memory was re alloc'd so get the new size <br>            dwAfterSize = GlobalSize (hReturn); <br>        } else { <br>            // memory was not re-alloced so set after size to 0 <br>        } <br>        if (pAppData != NULL) { <br>            // update call count <br>            pAppData-&gt;dwReAllocCalls++; <br>            pAppData-&gt;dwApplicationBytes -= dwBeforeSize; <br>            pAppData-&gt;dwApplicationBytes += dwAfterSize; <br>        } <br>    } else { <br>        // unable to read memory size nothing has changed <br>        // return original pointer <br>        hReturn = hglbMem; <br>    } <br>    return hReturn; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROCLIST.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6247"></a>PROCLIST.C</h2>
<pre><code>/* <br>    proclist.c <br> <br>    sample program to list current processes using the PDH.DLL <br>    browsing functions <br> <br>*/ <br>#ifdef UNICODE <br>#ifndef _UNICODE <br>#define _UNICODE            1 <br>#endif <br>#define tmain   wmain <br>#else <br>#define tmain   main <br>#endif <br> <br>// this program only needs the "bare essential" windows header files <br>#define WIN32_LEAN_AND_MEAN 1 <br>#include &lt;windows.h&gt; <br>#include &lt;winperf.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;pdh.h&gt; <br>  <br>int <br>tmain () <br>{ <br>    PDH_STATUS  pdhStatus               = ERROR_SUCCESS; <br>    LPTSTR      szCounterListBuffer     = NULL; <br>    DWORD       dwCounterListSize       = 0; <br>    LPTSTR      szInstanceListBuffer    = NULL; <br>    DWORD       dwInstanceListSize      = 0; <br>    LPTSTR      szThisInstance          = NULL; <br> <br> <br>    // call the function to determine the required buffer size for the data <br>    pdhStatus = PdhEnumObjectItems ( <br>        NULL,                   // reserved <br>        NULL,                   // local machine <br>        TEXT("Process"),        // object to enumerate <br>        szCounterListBuffer,    // pass in NULL buffers <br>        &amp;dwCounterListSize,     // an 0 length to get <br>        szInstanceListBuffer,   // required size  <br>        &amp;dwInstanceListSize,    // of the buffers in chars <br>        PERF_DETAIL_WIZARD,     // counter detail level <br>        0);  <br> <br>    if (pdhStatus == ERROR_SUCCESS) { <br>        // allocate the buffers and try the call again <br>        szCounterListBuffer = (LPTSTR)malloc ( <br>            (dwCounterListSize * sizeof (TCHAR))); <br>        szInstanceListBuffer = (LPTSTR)malloc ( <br>            (dwInstanceListSize * sizeof (TCHAR))); <br>        if ((szCounterListBuffer != NULL) &amp;&amp; <br>            (szInstanceListBuffer != NULL)) { <br>            pdhStatus = PdhEnumObjectItems ( <br>                NULL,   // reserved <br>                NULL,   // local machine <br>                TEXT("Process"), // object to enumerate <br>                szCounterListBuffer,    // pass in NULL buffers <br>                &amp;dwCounterListSize,     // an 0 length to get <br>                szInstanceListBuffer,   // required size  <br>                &amp;dwInstanceListSize,    // of the buffers in chars <br>                PERF_DETAIL_WIZARD,     // counter detail level <br>                0);      <br>            if (pdhStatus == ERROR_SUCCESS) { <br>                _tprintf (TEXT("\nRunning Processes:")); <br>                // walk the return instance list <br>                for (szThisInstance = szInstanceListBuffer; <br>                     *szThisInstance != 0; <br>                     szThisInstance += lstrlen(szThisInstance) + 1) { <br>                     _tprintf (TEXT("\n  %s"), szThisInstance); <br>                } <br>            } <br>        } else { <br>            _tprintf (TEXT("\nPROCLIST: unable to allocate buffers")); <br>        } <br>        if (szCounterListBuffer != NULL) free (szCounterListBuffer); <br>        if (szInstanceListBuffer != NULL) free (szInstanceListBuffer); <br>    } else { <br>        _tprintf (TEXT("\nPROCLIST: unable to determine the necessary buffer size required")); <br>    } <br>    return 0; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

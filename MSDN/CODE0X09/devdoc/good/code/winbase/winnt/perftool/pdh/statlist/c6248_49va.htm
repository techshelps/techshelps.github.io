<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINUTILS.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6256"></a>WINUTILS.C</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 - 1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// PROGRAM: WINUTILS.c <br>// <br>// PURPOSE: general purpose MS-Windows utility functions <br>// <br>// PLATFORMS:  Windows NT (only) <br>// <br>// FUNCTIONS: <br>//    CenterWindow() -  Centers one window over another <br>//    GetStringRes() -  retrieves a string resource <br>// <br>// SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>//  system include files <br>#define WIN32_LEAN_AND_MEAN 1 <br>#include &lt;windows.h&gt; <br> <br>// local include files <br>#include "winutils.h" <br> <br>// <br>//   FUNCTION: CenterWindow(HWND, HWND) <br>// <br>//   PURPOSE: Centers one window over another. <br>// <br>//   COMMENTS: <br>// <br>//        In this function, we save the instance handle in a global variable and <br>//        create and display the main program window. <br>// <br>//       This functionwill center one window over another ensuring that <br>//    the placement of the window is within the 'working area', meaning <br>//    that it is both within the display limits of the screen, and not <br>//    obscured by the tray or other framing elements of the desktop. <br>BOOL CenterWindow (HWND hwndChild, HWND hwndParent) <br>{ <br>   RECT    rChild, rParent, rWorkArea; <br>   int     wChild, hChild, wParent, hParent; <br>   int     xNew, yNew; <br>   BOOL  bResult; <br> <br>   // Get the Height and Width of the child window <br>   GetWindowRect (hwndChild, &amp;rChild); <br>   wChild = rChild.right - rChild.left; <br>   hChild = rChild.bottom - rChild.top; <br> <br>   // Get the Height and Width of the parent window <br>   GetWindowRect (hwndParent, &amp;rParent); <br>   wParent = rParent.right - rParent.left; <br>   hParent = rParent.bottom - rParent.top; <br> <br>   // Get the limits of the 'workarea' <br>   bResult = SystemParametersInfo( <br>      SPI_GETWORKAREA,  // system parameter to query or set <br>      sizeof(RECT), <br>      &amp;rWorkArea, <br>      0); <br>   if (!bResult) { <br>      rWorkArea.left = rWorkArea.top = 0; <br>      rWorkArea.right = GetSystemMetrics(SM_CXSCREEN); <br>      rWorkArea.bottom = GetSystemMetrics(SM_CYSCREEN); <br>   } <br> <br>   // Calculate new X position, then adjust for workarea <br>   xNew = rParent.left + ((wParent - wChild) /2); <br>   if (xNew &lt; rWorkArea.left) { <br>      xNew = rWorkArea.left; <br>   } else if ((xNew+wChild) &gt; rWorkArea.right) { <br>      xNew = rWorkArea.right - wChild; <br>   } <br> <br>   // Calculate new Y position, then adjust for workarea <br>   yNew = rParent.top  + ((hParent - hChild) /2); <br>   if (yNew &lt; rWorkArea.top) { <br>      yNew = rWorkArea.top; <br>   } else if ((yNew+hChild) &gt; rWorkArea.bottom) { <br>      yNew = rWorkArea.bottom - hChild; <br>   } <br> <br>   // Set it, and return <br>   return SetWindowPos (hwndChild, NULL, xNew, yNew, 0, 0, SWP_NOSIZE | SWP_NOZORDER); <br>} <br> <br> <br>//--------------------------------------------------------------------------- <br>// <br>// FUNCTION:    GetStringRes (int id INPUT ONLY) <br>// <br>// COMMENTS:    Load the resource string with the ID given, and return a <br>//              pointer to it.  Notice that the buffer is common memory so <br>//              the string must be used before this call is made a second time. <br>// <br>//--------------------------------------------------------------------------- <br> <br>LPTSTR   GetStringRes (int id) <br>{ <br>  static TCHAR buffer[MAX_PATH]; <br> <br>  buffer[0]=0; <br>  LoadString (GetModuleHandle (NULL), id, buffer, MAX_PATH); <br>  return buffer; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

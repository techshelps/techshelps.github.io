<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATLIST.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6254"></a>STATLIST.C</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 - 1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// PROGRAM: STATLIST.c <br>// <br>// PURPOSE: Illustrates the use of the PDH counter browsing dialog <br>//          and the statistical functions of the PDH <br>// <br>// PLATFORMS:  Windows NT (only) <br>// <br>// FUNCTIONS: <br>//    WinMain() - calls initialization function, processes message loop <br>//    InitApplication() - Initializes window data nd registers window <br>//    InitInstance() -saves instance handle and creates main window <br>//    WindProc() Processes messages <br>//    About() - Process menssages for "About" dialog box <br>//    MyRegisterClass() - Registers the application's window class <br>//    CenterWindow() -  Centers one window over another <br>// <br>// SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>// Windows Header Files: <br>#define WIN32_LEAN_AND_MEAN 1 <br>#include &lt;windows.h&gt; <br> <br>// C RunTime Header Files <br>#include &lt;stdlib.h&gt; <br>#include &lt;memory.h&gt; <br> <br>// Local Header Files <br>#include "statlist.h" <br> <br>// Global Variables: <br> <br>HINSTANCE hInst;      // current instance <br>char szAppName[100];  // Name of the app <br>char szTitle[100];    // The title bar text <br>char APPNAME[] = "Statlist"; // title of the app <br> <br>// Foward declarations of functions included in this code module: <br> <br>LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); <br>LRESULT CALLBACK About(HWND, UINT, WPARAM, LPARAM); <br>BOOL CenterWindow (HWND, HWND); <br>LPTSTR   GetStringRes (int id); <br> <br> <br>// <br>//  FUNCTION: MyRegisterClass(CONST WNDCLASS*) <br>// <br>//  PURPOSE: Registers the window class. <br>// <br>//  COMMENTS: <br>// <br>//    This function and its usage is only necessary if you want this code <br>//    to be compatible with Win32 systems prior to the 'RegisterClassEx' <br>// function that was added to Windows 95. It is important to call this function <br>//    so that the application will get 'well formed' small icons associated <br>//    with it. <br>// <br>ATOM MyRegisterClass(CONST WNDCLASS *lpwc) <br>{ <br>   HANDLE  hMod; <br>   FARPROC proc; <br>   WNDCLASSEX wcex; <br> <br>   hMod = GetModuleHandle ("USER32"); <br>   if (hMod != NULL) { <br> <br>#if defined (UNICODE) <br>      proc = GetProcAddress (hMod, "RegisterClassExW"); <br>#else <br>      proc = GetProcAddress (hMod, "RegisterClassExA"); <br>#endif <br> <br>      if (proc != NULL) { <br> <br>         wcex.style         = lpwc-&gt;style; <br>         wcex.lpfnWndProc   = lpwc-&gt;lpfnWndProc; <br>         wcex.cbClsExtra    = lpwc-&gt;cbClsExtra; <br>         wcex.cbWndExtra    = lpwc-&gt;cbWndExtra; <br>         wcex.hInstance     = lpwc-&gt;hInstance; <br>         wcex.hIcon         = lpwc-&gt;hIcon; <br>         wcex.hCursor       = lpwc-&gt;hCursor; <br>         wcex.hbrBackground = lpwc-&gt;hbrBackground; <br>         wcex.lpszMenuName  = lpwc-&gt;lpszMenuName; <br>         wcex.lpszClassName = lpwc-&gt;lpszClassName; <br> <br>         // Added elements for Windows 95: <br>         wcex.cbSize = sizeof(WNDCLASSEX); <br>         wcex.hIconSm = LoadIcon(wcex.hInstance, "SMALL"); <br> <br>         return (*proc)(&amp;wcex);//return RegisterClassEx(&amp;wcex); <br>      } <br>   } <br>   return (RegisterClass(lpwc)); <br>} <br>  <br>// <br>//  FUNCTION: InitApplication(HANDLE) <br>// <br>//  PURPOSE: Initializes window data and registers window class <br>// <br>//  COMMENTS: <br>// <br>//       In this function, we initialize a window class by filling out a data <br>//       structure of type WNDCLASS and calling either RegisterClass or <br>//       the internal MyRegisterClass. <br>// <br>BOOL InitApplication(HINSTANCE hInstance) <br>{ <br>    WNDCLASS  wc; <br>    HWND      hwnd; <br> <br>    // Win32 will always set hPrevInstance to NULL, so lets check <br>    // things a little closer. This is because we only want a single <br>    // version of this app to run at a time <br>    hwnd = FindWindow (szAppName, NULL); <br>    if (hwnd) { <br>        // We found another version of ourself. Lets defer to it: <br>        if (IsIconic(hwnd)) { <br>            ShowWindow(hwnd, SW_RESTORE); <br>        } <br>        SetForegroundWindow (hwnd); <br> <br>        // If this app actually had any functionality, we would <br>        // also want to communicate any action that our 'twin' <br>        // should now perform based on how the user tried to <br>        // execute us. <br>        return FALSE; <br>        } <br> <br>        // Fill in window class structure with parameters that describe <br>        // the main window. <br>        wc.style         = CS_HREDRAW | CS_VREDRAW; <br>        wc.lpfnWndProc   = (WNDPROC)WndProc; <br>        wc.cbClsExtra    = 0; <br>        wc.cbWndExtra    = 0; <br>        wc.hInstance     = hInstance; <br>        wc.hIcon         = LoadIcon (hInstance, szAppName); <br>        wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>        wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1); <br> <br>        wc.lpszMenuName  = szAppName; <br>        wc.lpszClassName = szAppName; <br> <br>        // Register the window class and return success/failure code. <br>        return RegisterClass(&amp;wc); <br>} <br>  <br>// <br>//   FUNCTION: InitInstance(HANDLE, int) <br>// <br>//   PURPOSE: Saves instance handle and creates main window <br>// <br>//   COMMENTS: <br>// <br>//        In this function, we save the instance handle in a global variable and <br>//        create and display the main program window. <br>// <br>BOOL InitInstance(HINSTANCE hInstance, int nCmdShow) <br>{ <br>   HWND hWnd; <br>   DWORD dwStatus; <br> <br>   hInst = hInstance; // Store instance handle in our global variable <br> <br>   hWnd = CreateWindow(szAppName, szTitle, WS_OVERLAPPEDWINDOW, <br>      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, <br>      NULL, NULL, hInstance, NULL); <br> <br>   if (!hWnd) { <br>      dwStatus = GetLastError(); <br>      return (FALSE); <br>   } <br> <br>   ShowWindow(hWnd, nCmdShow); <br>   UpdateWindow(hWnd); <br> <br>   return (TRUE); <br>} <br>  <br>// <br>//  FUNCTION: WinMain(HANDLE, HANDLE, LPSTR, int) <br>// <br>//  PURPOSE: Entry point for the application. <br>// <br>//  COMMENTS: <br>// <br>// This function initializes the application and processes the <br>// message loop. <br>// <br>int APIENTRY WinMain(HINSTANCE hInstance, <br>                     HINSTANCE hPrevInstance, <br>                     LPSTR     lpCmdLine, <br>                     int       nCmdShow) <br>{ <br>   MSG msg; <br>   HANDLE hAccelTable; <br> <br>   // Initialize global strings <br>   lstrcpy (szAppName, APPNAME); <br>   LoadString (hInstance, IDS_APP_TITLE, szTitle, 100); <br> <br> <br>   if (!hPrevInstance) { <br>      // Perform instance initialization: <br>      if (!InitApplication(hInstance)) { <br>         return (FALSE); <br>      } <br>   } <br> <br>   // Perform application initialization: <br>   if (!InitInstance(hInstance, nCmdShow)) { <br>      return (FALSE); <br>   } <br> <br>   hAccelTable = LoadAccelerators (hInstance, szAppName); <br> <br>   // Main message loop: <br>   while (GetMessage(&amp;msg, NULL, 0, 0)) { <br>      if (!TranslateAccelerator (msg.hwnd, hAccelTable, &amp;msg)) { <br>         TranslateMessage(&amp;msg); <br>         DispatchMessage(&amp;msg); <br>      } <br>   } <br> <br>   return (msg.wParam); <br> <br>   lpCmdLine; // This will prevent 'unused formal parameter' warnings <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APPMEMI.H</title>
<link disabled rel=stylesheet href=../../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6263"></a>APPMEMI.H</h2>
<pre><code>/*++ BUILD Version: 0001    // Increment this if a change has global effects <br> <br>Copyright 1995 - 1998 Microsoft Corporation <br> <br>Header Name: <br> <br>    appmem.h <br> <br>Abstract: <br> <br>    Contains the global definitions for use by the performance DLL and <br>    the DLL used by the application to allocate and track memory. The <br>    definitions in this file ARE NOT used by the application programmer <br> <br>Created:     <br> <br>    Bob Watson 24 august 1995 <br> <br>Revision History <br> <br>    None <br> <br>--*/ <br>#ifndef _APPMEM_H_ <br>#define _APPMEM_H_ <br> <br>#define MAX_SIZEOF_INSTANCE_NAME    32 <br> <br>typedef struct _APPMEM_INSTANCE { <br>    DWORD   dwOffsetOfNext;     // offset from mem base to next item in list <br>    DWORD   dwProcessId;        // id of process using this instance <br>    HANDLE  hProcessHeap;       // handle of process's default heap <br>    DWORD   dwApplicationBytes; // current count of heap bytes allocated <br>                                //  by the app mem allocation DLL functions <br>    DWORD   dwAllocCalls;       // number of memory allocation calls <br>    DWORD   dwReAllocCalls;     // number of Re-Allocation calls <br>    DWORD   dwFreeCalls;        // number of memory free calls <br>    WCHAR   wcszInstanceName[MAX_SIZEOF_INSTANCE_NAME]; // SZ instance name <br>    DWORD   dwReserved1;        // unused <br>    DWORD   dwReserved2;        // unused <br>} APPMEM_INSTANCE, *PAPPMEM_INSTANCE; <br> <br>#define SHARED_MEMORY_ITEM_COUNT    100 <br>#define SHARED_MEMORY_OBJECT_SIZE   (sizeof(PDWORD) + (sizeof(PAPPMEM_INSTANCE) * 2) + (SHARED_MEMORY_ITEM_COUNT * sizeof(APPMEM_INSTANCE))) <br>#define SHARED_MEMORY_OBJECT_NAME   (TEXT("APPMEM_PERF_DATA")) <br> <br>#define SHARED_MEMORY_MUTEX_NAME    (TEXT("APPMEM_PERF_DATA_MUTEX")) <br>#define SHARED_MEMORY_MUTEX_TIMEOUT ((DWORD)1000L) <br> <br>typedef struct _APPMEM_DATA_HEADER { <br>    DWORD               dwInstanceCount;        // number of entries In Use <br>    DWORD               dwFirstInUseOffset;     // offset from mem base <br>    DWORD               dwFirstFreeOffset;      // offset from mem base <br>} APPMEM_DATA_HEADER, *PAPPMEM_DATA_HEADER; <br> <br>#define     FIRST_FREE(base)    ((PAPPMEM_INSTANCE)((LPBYTE)(base) + ((PAPPMEM_DATA_HEADER)(base))-&gt;dwFirstFreeOffset)) <br>#define     FIRST_INUSE(base)   ((PAPPMEM_INSTANCE)((LPBYTE)(base) + ((PAPPMEM_DATA_HEADER)(base))-&gt;dwFirstInUseOffset)) <br>#define     APPMEM_INST(base, offset)   ((PAPPMEM_INSTANCE)((LPBYTE)(base) + (DWORD)(offset))) <br> <br>LONG <br>_stdcall <br>GetSharedMemoryDataHeader ( <br>    IN  HANDLE              *phAppMemSharedMemory, <br>    IN  HANDLE              *phAppMemMutex, <br>    IN  PAPPMEM_DATA_HEADER *pHeader, <br>    IN  BOOL                bReadOnlyAccess <br>); <br> <br> <br>#endif //_APPMEM_H_ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

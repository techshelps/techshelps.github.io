<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PERFMSG.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6281"></a>PERFMSG.H</h2>
<pre><code>/*++ BUILD Version: 0001    // Increment this if a change has global effects <br> <br>Copyright 1995 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    perfmsg.h   <br> <br>Abstract: <br> <br>    This file provides the macros and definitions used by the extensible <br>    counters for reporting events to the event logging facility <br> <br>Author: <br> <br>    Bob Watson  28-Jul-1995 <br> <br>Revision History: <br> <br> <br>--*/ <br>#ifndef  _PERFMSG_H_ <br>#define  _PERFMSG_H_ <br>// <br>// Report error message ID's for Counters <br>// <br> <br>#define APP_NAME  "perfgen" <br> <br>// <br>// The constant below defines how many (if any) messages will be reported <br>// to the event logger. As the number goes up in value more and more events <br>// will be reported. The purpose of this is to allow lots of messages during <br>// development and debugging (e.g. a message level of 3) to a minimum of <br>// messages (e.g. operational messages with a level of 1) or no messages if <br>// message logging inflicts too much of a performance penalty. Right now <br>// this is a compile time constant, but could later become a registry entry. <br>// <br>//    Levels:  LOG_NONE = No event log messages ever <br>//             LOG_USER = User event log messages (e.g. errors) <br>//             LOG_DEBUG = Minimum Debugging  <br>//             LOG_VERBOSE = Maximum Debugging  <br>// <br> <br>#define  LOG_NONE     0 <br>#define  LOG_USER     1 <br>#define  LOG_DEBUG    2 <br>#define  LOG_VERBOSE  3 <br> <br>#define  MESSAGE_LEVEL_DEFAULT  LOG_USER <br> <br>// define macros <br>// <br>// Format for event log calls without corresponding insertion strings is: <br>//    REPORT_xxx (message_value, message_level) <br>//       where:    <br>//          xxx is the severity to be displayed in the event log <br>//          message_value is the numeric ID from above <br>//          message_level is the "filtering" level of error reporting <br>//             using the error levels above. <br>// <br>// if the message has a corresponding insertion string whose symbol conforms <br>// to the format CONSTANT = numeric value and CONSTANT_S = string constant for <br>// that message, then the  <br>//  <br>//    REPORT_xxx_STRING (message_value, message_level) <br>// <br>// macro may be used. <br>// <br> <br>// <br>// REPORT_SUCCESS was intended to show Success in the error log, rather it <br>// shows "N/A" so for now it's the same as information, though it could  <br>// (should) be changed  in the future <br>// <br> <br> <br>#define REPORT_SUCCESS(i,l) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_INFORMATION_TYPE, \ <br>   0, i, (PSID)NULL, 0, 0, NULL, (PVOID)NULL) : FALSE) <br> <br>#define REPORT_INFORMATION(i,l) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_INFORMATION_TYPE, \ <br>   0, i, (PSID)NULL, 0, 0, NULL, (PVOID)NULL) : FALSE) <br> <br>#define REPORT_WARNING(i,l) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_WARNING_TYPE, \ <br>   0, i, (PSID)NULL, 0, 0, NULL, (PVOID)NULL) : FALSE) <br> <br>#define REPORT_ERROR(i,l) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_ERROR_TYPE, \ <br>   0, i, (PSID)NULL, 0, 0, NULL, (PVOID)NULL) : FALSE) <br> <br>#define REPORT_INFORMATION_DATA(i,l,d,s) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_INFORMATION_TYPE, \ <br>   0, i, (PSID)NULL, 0, s, NULL, (PVOID)(d)) : FALSE) <br> <br>#define REPORT_WARNING_DATA(i,l,d,s) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_WARNING_TYPE, \ <br>   0, i, (PSID)NULL, 0, s, NULL, (PVOID)(d)) : FALSE) <br> <br>#define REPORT_ERROR_DATA(i,l,d,s) (MESSAGE_LEVEL &gt;= l ? ReportEvent (hEventLog, EVENTLOG_ERROR_TYPE, \ <br>   0, i, (PSID)NULL, 0, s, NULL, (PVOID)(d)) : FALSE) <br> <br>// External Variables <br> <br>extern HANDLE hEventLog;   // handle to event log <br>extern DWORD  dwLogUsers;  // counter of event log using routines <br>extern DWORD  MESSAGE_LEVEL; // event logging detail level <br> <br>#endif //_PERFMSG_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPEPERF.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6258"></a>TYPEPERF.C</h2>
<pre><code>/*++ <br> <br>  typeperf.c <br> <br>  program to demonsrate the use of the PDH performance data collection DLL's <br>   <br>    this program is a Window NT console app that accepts as arguments <br>    PDH counter paths and then samples the valid counter paths at a 1 second <br>    interval and writes the output to the console output with a timestamp in  <br>    the format of a Comma Separated Variable file. <br> <br>--*/ <br>#if UNICODE <br>#ifndef _UNICODE <br>#define _UNICODE            1 <br>#endif <br>#define tmain   wmain <br>#else <br>#define tmain   main <br>#endif <br> <br>#define WIN32_LEAN_AND_MEAN 1 <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;conio.h&gt; <br>#include &lt;assert.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;pdh.h&gt; <br> <br>#define SAMPLE_INTERVAL_MS  1000 <br> <br>void <br>DisplayCommandLineHelp () <br>{ <br>    _tprintf (TEXT("\n\nOne or more valid counter paths must be specified as a command line")); <br>    _tprintf (TEXT("\nargument.")); <br>    _tprintf (TEXT("\nThe default sample interval is one second and the default output is")); <br>    _tprintf (TEXT("\na Comma Separated Variable (CSV) string")); <br>    return; <br>} <br> <br>int <br>tmain (int argc, <br>      LPTSTR argv[]) <br>{ <br>    HQUERY          hQuery; <br>    HCOUNTER        *pCounterArray; <br>    HCOUNTER        *pThisCounterHandle; <br>    PDH_STATUS      pdhStatus; <br>    PDH_FMT_COUNTERVALUE   fmtValue; <br>    DWORD           ctrType; <br>    SYSTEMTIME      stSampleTime; <br>     <br>    int             nThisArg; <br>    int             nValidCounters; <br> <br>    // the command line arguments are the counters to sample. the  <br>    // sample interval is 1 second. <br> <br>    // count the arguments in the command line <br>    if (argc &lt; 2) { <br>        // not enough arguments in the command line so <br>        // display explanation and exit <br>        DisplayCommandLineHelp (); <br>        return 1; <br>    } <br>    // there's at least one argument (counter) in the command line <br>    // so process it/them <br> <br>    // open the PDH query object <br> <br>    pdhStatus = PdhOpenQuery (0, 0, &amp;hQuery); <br>    assert (pdhStatus == ERROR_SUCCESS); <br>    // allocate the counter handle array. allocate room for  <br>    // one handle per command line arg, not including the  <br>    // executable file name <br>    pCounterArray = (HCOUNTER *)GlobalAlloc(GPTR,  <br>        (sizeof(HCOUNTER) * (argc -1))); <br>    assert (pCounterArray != NULL); <br>     <br>    nValidCounters = 0; <br>    _tprintf (TEXT("\n\"Sample Time\"")); <br>    for (nThisArg = 1; nThisArg &lt; argc; nThisArg++) { <br>        pdhStatus = PdhAddCounter (hQuery, <br>            argv[nThisArg], 0, &amp;pCounterArray[nThisArg-1]); <br>        if (pdhStatus != ERROR_SUCCESS) { <br>            // the counter didn't get added to the query, probably because <br>            // the path wasn't specified correctly or is not present <br>            printf ("\n\"%s\" is not a valid counter path", argv[nThisArg]); <br>            pCounterArray[nThisArg-1] = NULL; <br>        } else { <br>            // print counter name in heading line <br>            _tprintf (TEXT(",\"%s\""), argv[nThisArg]); <br>            nValidCounters++; <br>        } <br>    } <br> <br>    // if there is at least one valid counter, then loop  <br>    //  until a key is pressed <br>    if (nValidCounters &gt; 0) { <br>        // "prime" counters that need 2 values to display a formatted value <br>        pdhStatus = PdhCollectQueryData (hQuery); <br>        assert (pdhStatus == ERROR_SUCCESS); <br>        // loop until completion event occurs, in this case it's a  <br>        // key press. <br>        while (!_kbhit()) { <br>            // wait one interval.... <br>            Sleep(SAMPLE_INTERVAL_MS); <br>            // get sample time <br>            GetLocalTime (&amp;stSampleTime); <br>            // get the current data values <br>            pdhStatus = PdhCollectQueryData (hQuery); <br>            assert (pdhStatus == ERROR_SUCCESS); <br>            // print time stamp <br>            _tprintf (TEXT("\n\"%2.2d/%2.2d/%4.4d %2.2d:%2.2d:%2.2d.%3.3d\""), <br>                stSampleTime.wMonth, stSampleTime.wDay, stSampleTime.wYear,  <br>                stSampleTime.wHour, stSampleTime.wMinute, stSampleTime.wSecond, <br>                stSampleTime.wMilliseconds); <br>            // find first valid counter in the list <br>            nThisArg = 0;  <br>            pThisCounterHandle = &amp;pCounterArray[nThisArg];  <br>            while ((*pThisCounterHandle == NULL) &amp;&amp; (nThisArg &lt; argc)) { <br>                nThisArg++; <br>                pThisCounterHandle++; <br>            } <br>            // pThisCounterHandle should point to the first valid counter <br>            // in the counter handle array. <br>            // so go from here to the end of the array and print the current <br>            // daa values <br> <br>            while (nThisArg &lt; (argc-1)) { <br>                if (*pThisCounterHandle != NULL) { <br>                    // get the current value for this counter <br>                    pdhStatus = PdhGetFormattedCounterValue ( <br>                        *pThisCounterHandle, <br>                        PDH_FMT_DOUBLE, <br>                        &amp;ctrType, <br>                        &amp;fmtValue); <br>                    if (pdhStatus == ERROR_SUCCESS) { <br>                        _tprintf (TEXT(",\"%.20g\""), fmtValue.doubleValue); <br>                    } else { <br>                        _tprintf (TEXT(".\"-1\"")); // error value <br>                    } <br>                }  <br>                pThisCounterHandle++; <br>                nThisArg++; <br>            } <br>        } <br>    } else { <br>        printf ("\nNo counters to monitor."); <br>    } <br> <br>    // clean up PDH interface and leave <br>    pdhStatus = PdhCloseQuery (hQuery); <br>    assert (pdhStatus == ERROR_SUCCESS); <br>    return 0; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

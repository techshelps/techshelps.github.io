<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ABOUTDLG.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6252"></a>ABOUTDLG.C</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1996 - 1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>// Module:  aboutdlg.c <br>// <br>// Overview:   contains the windows functions used by the about box <br>//         <br>// PLATFORMS:  Windows NT (only) <br>// <br>//  FUNCTIONS:  About() About box DlgProc <br>// <br>// <br>// Windows Header Files: <br>#define WIN32_LEAN_AND_MEAN 1 <br>#include &lt;windows.h&gt; <br> <br>// C RunTime Header Files <br>#include &lt;stdlib.h&gt; <br> <br>// Local Header Files <br>#include "statlist.h" <br>#include "winutils.h" <br>#include "aboutdlg.h" <br>// <br>//  FUNCTION: About(HWND, unsigned, WORD, LONG) <br>// <br>//  PURPOSE:  Processes messages for "About" dialog box <br>//       This version allows greater flexibility over the contents of the 'About' box, <br>//       by pulling out values from the 'Version' resource. <br>// <br>//  MESSAGES: <br>// <br>// WM_INITDIALOG - initialize dialog box <br>// WM_COMMAND    - Input received <br>// <br>// <br>LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>   static  HFONT hfontDlg;    // Font for dialog text <br>   static   HFONT hFinePrint; // Font for 'fine print' in dialog <br>   DWORD   dwVerInfoSize;     // Size of version information block <br>   LPSTR   lpVersion;         // String pointer to 'version' text <br>   DWORD   dwVerHnd=0;        // An 'ignored' parameter, always '0' <br>   UINT    uVersionLen; <br>   WORD    wRootLen; <br>   BOOL    bRetCode; <br>   int     i; <br>   char    szFullPath[256]; <br>   char    szResult[256]; <br>   char    szGetName[256]; <br>   DWORD dwVersion; <br>   char  szVersion[40]; <br>   DWORD dwResult; <br> <br>   switch (message) { <br>        case WM_INITDIALOG: <br>         // hide window while it's being constructed <br>         ShowWindow (hDlg, SW_HIDE); <br> <br>         // crate and load the fonts to be used for the text <br>         hfontDlg = CreateFont(14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, <br>                                VARIABLE_PITCH | FF_SWISS, ""); <br>         hFinePrint = CreateFont(11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, <br>                                VARIABLE_PITCH | FF_SWISS, ""); <br> <br>         // position the window in the center of the parent                                 <br>         CenterWindow (hDlg, GetWindow (hDlg, GW_OWNER)); <br> <br>         // get the .exe path <br>         GetModuleFileName ((HINSTANCE)(GetWindowLong(hDlg, GWL_HINSTANCE)),  <br>             szFullPath, sizeof(szFullPath)); <br> <br>         // Now lets dive in and pull out the version information: <br>         dwVerInfoSize = GetFileVersionInfoSize(szFullPath, &amp;dwVerHnd); <br>         if (dwVerInfoSize) { <br>            LPSTR   lpstrVffInfo; <br>            HANDLE  hMem; <br>            hMem = GlobalAlloc(GMEM_MOVEABLE, dwVerInfoSize); <br>            lpstrVffInfo  = GlobalLock(hMem); <br>            GetFileVersionInfo(szFullPath, dwVerHnd, dwVerInfoSize, lpstrVffInfo); <br>            // The below 'hex' value looks a little confusing, but <br>            // essentially what it is, is the hexidecimal representation <br>            // of a couple different values that represent the language <br>            // and character set that we are wanting string values for. <br>            // 040904E4 is a very common one, because it means: <br>            //   US English, Windows MultiLingual characterset <br>            // Or to pull it all apart: <br>            // 04------        = SUBLANG_ENGLISH_USA <br>            // --09----        = LANG_ENGLISH <br>            // --11----        = LANG_JAPANESE <br>            // ----04E4 = 1252 = Codepage for Windows:Multilingual <br> <br>            lstrcpy(szGetName, GetStringRes(IDS_VER_INFO_LANG)); <br> <br>            wRootLen = lstrlen(szGetName); // Save this position <br> <br>            // Set the title of the dialog: <br>            lstrcat (szGetName, "ProductName"); <br>            bRetCode = VerQueryValue((LPVOID)lpstrVffInfo, <br>               (LPSTR)szGetName, <br>               (LPVOID)&amp;lpVersion, <br>               (UINT *)&amp;uVersionLen); <br> <br>            // Notice order of version and string... <br>            lstrcpy(szResult, "About "); <br>            lstrcat(szResult, lpVersion); <br> <br>            // set dialog caption <br>            SetWindowText (hDlg, szResult); <br> <br>            // Walk through the dialog items that we want to replace: <br>            for (i = DLG_VERFIRST; i &lt;= DLG_VERLAST; i++) { <br>               GetDlgItemText(hDlg, i, szResult, sizeof(szResult)); <br>               szGetName[wRootLen] = (char)0; <br>               lstrcat (szGetName, szResult); <br>               uVersionLen   = 0; <br>               lpVersion     = NULL; <br>               bRetCode      =  VerQueryValue((LPVOID)lpstrVffInfo, <br>                  (LPSTR)szGetName, <br>                  (LPVOID)&amp;lpVersion, <br>                  (UINT *)&amp;uVersionLen); <br> <br>               if ( bRetCode &amp;&amp; uVersionLen &amp;&amp; lpVersion) { <br>               // Replace dialog item text with version info <br>                  lstrcpy(szResult, lpVersion); <br>                  SetDlgItemText(hDlg, i, szResult); <br>               } <br>               else <br>               { <br>                  dwResult = GetLastError(); <br> <br>                  wsprintf(szResult, GetStringRes(IDS_VERSION_ERROR), dwResult); <br>                  SetDlgItemText (hDlg, i, szResult); <br>               } <br>               SendMessage (GetDlgItem (hDlg, i), WM_SETFONT, <br>                  (UINT)((i==DLG_VERLAST)?hFinePrint:hfontDlg), <br>                  TRUE); <br>            } // for (i = DLG_VERFIRST; i &lt;= DLG_VERLAST; i++) <br> <br>            GlobalUnlock(hMem); <br>            GlobalFree(hMem); <br> <br>         } else { <br>            // No version information available. <br>         } // if (dwVerInfoSize) <br> <br>            SendMessage (GetDlgItem (hDlg, IDC_LABEL), WM_SETFONT, <br>            (WPARAM)hfontDlg,(LPARAM)TRUE); <br> <br>         // We are  using GetVersion rather then GetVersionEx <br>         // because earlier versions of Windows NT and Win32s <br>         // didn't include GetVersionEx: <br>         dwVersion = GetVersion(); <br> <br>         if (dwVersion &lt; 0x80000000) { <br>            // Windows NT <br>            wsprintf (szVersion, "Microsoft Windows NT %u.%u (Build: %u)", <br>               (DWORD)(LOBYTE(LOWORD(dwVersion))), <br>               (DWORD)(HIBYTE(LOWORD(dwVersion))), <br>                    (DWORD)(HIWORD(dwVersion)) ); <br>         } else if (LOBYTE(LOWORD(dwVersion))&lt;4) { <br>            // Win32s <br>                wsprintf (szVersion, "Microsoft Win32s %u.%u (Build: %u)", <br>               (DWORD)(LOBYTE(LOWORD(dwVersion))), <br>               (DWORD)(HIBYTE(LOWORD(dwVersion))), <br>                    (DWORD)(HIWORD(dwVersion) &amp; ~0x8000) ); <br>         } else { <br>            // Windows 95 <br>                wsprintf (szVersion, "Microsoft Windows 95 %u.%u", <br>                    (DWORD)(LOBYTE(LOWORD(dwVersion))), <br>                    (DWORD)(HIBYTE(LOWORD(dwVersion))) ); <br>         } <br> <br>         SetWindowText (GetDlgItem(hDlg, IDC_OSVERSION), szVersion); <br> <br>         // now display the finished product <br>         ShowWindow (hDlg, SW_SHOW); <br>         return (TRUE); <br> <br>      case WM_COMMAND: <br>         if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL) { <br>            EndDialog(hDlg, TRUE); <br>            DeleteObject (hfontDlg); <br>            DeleteObject (hFinePrint); <br>            return (TRUE); <br>         } <br>         break; <br>   } <br> <br>    return FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6298"></a>DEBUG.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  File:       debug.c <br>// <br>//  Contents:   Debugging support functions <br>// <br>//  Classes: <br>// <br>//  Functions: <br>// <br>//  Note:       This file is not compiled for retail builds <br>// <br>//---------------------------------------------------------------------------- <br> <br> <br>#include "pop3srvp.h" <br>#pragma hdrstop <br> <br> <br>#if DBG         // NOTE:  This file not compiled for retail builds <br> <br>FILE *  LogFile; <br>DWORD   PopInfoLevel = 15; <br> <br> <br> <br>// Debugging support functions. <br> <br> <br>char * DebLevel[] = {   "Pop3Srv-Error", <br>                        "Pop3Srv-Warn", <br>                        "Pop3Srv-Trace", <br>                        "Pop3Srv-Trace-Protocol" <br>                    }; <br> <br>typedef struct _DebugKeys { <br>    char *  Name; <br>    DWORD   Value; <br>} DebugKeys, *PDebugKeys; <br> <br>DebugKeys   DebugKeyNames[] = { <br>                {"Error",       DEB_ERROR}, <br>                {"Warning",     DEB_WARN}, <br>                {"Trace",       DEB_TRACE}, <br>                {"Pool",        DEB_TRACE_PROT}, <br>                }; <br> <br>#define NUM_DEBUG_KEYS  sizeof(DebugKeyNames) / sizeof(DebugKeys) <br>#define NUM_BREAK_KEYS  sizeof(BreakKeyNames) / sizeof(DebugKeys) <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   LogEvent <br>// <br>//  Synopsis:   Logs an event to the console and, optionally, a file. <br>// <br>//  Effects: <br>// <br>//  Arguments:  [Mask]   -- <br>//              [Format] -- <br>//              [Format] -- <br>// <br>//  Requires: <br>// <br>//  Returns: <br>// <br>//  Signals: <br>// <br>//  Modifies: <br>// <br>//  Algorithm: <br>// <br>//  History:    4-29-93   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br> <br>void <br>LogEvent(   long            Mask, <br>            const char *    Format, <br>            ...) <br>{ <br>    va_list ArgList; <br>    int     Level = 0; <br>    int     PrefixSize = 0; <br>    char    szOutString[256]; <br>    long    OriWinlogonlMask = Mask; <br> <br> <br>    if (Mask &amp; PopInfoLevel) <br>    { <br>        while (!(Mask &amp; 1)) <br>        { <br>            Level++; <br>            Mask &gt;&gt;= 1; <br>        } <br>        if (Level &gt;= (sizeof(DebLevel) / sizeof(char *)) ) <br>        { <br>            Level = (sizeof(DebLevel) / sizeof(char *)) - 1; <br>        } <br> <br> <br>        // <br>        // Make the prefix first:  "Process.Thread&gt; Pop3Svr-XXX" <br>        // <br> <br>        PrefixSize = sprintf(szOutString, "%d.%d&gt; %s: ", <br>                GetCurrentProcessId(), GetCurrentThreadId(), DebLevel[Level]); <br> <br> <br>        va_start(ArgList, Format); <br> <br>        if (_vsnprintf(&amp;szOutString[PrefixSize], sizeof(szOutString) - PrefixSize, <br>                            Format, ArgList) &lt; 0) <br>        { <br>            // <br>            // Less than zero indicates that the string could not be <br>            // fitted into the buffer.  Output a special message indicating <br>            // that: <br>            // <br> <br>            OutputDebugStringA("Pop3Svr!LogEvent:  Could not pack string into 256 bytes\n"); <br> <br>        } <br>        else <br>        { <br>            OutputDebugStringA(szOutString); <br>        } <br> <br> <br>        if (LogFile) <br>        { <br>            SYSTEMTIME  stTime; <br> <br>            GetLocalTime(&amp;stTime); <br>            fprintf(LogFile, "%02d:%02d:%02d.%03d: %s\n", <br>                    stTime.wHour, stTime.wMinute, stTime.wSecond, <br>                    stTime.wMilliseconds, szOutString); <br> <br>            fflush(LogFile); <br>        } <br> <br>    } <br> <br>} <br> <br>void <br>DebugOpenLogFile(LPSTR   pszLogFile) <br>{ <br>    LogFile = fopen(pszLogFile, "a"); <br>    if (!LogFile) <br>    { <br>        OutputDebugStringA("Pop3Svr: Could not open logfile for append"); <br>        OutputDebugStringA(pszLogFile); <br>    } <br>    DebugLog((DEB_TRACE, "Log file '%s' begins\n", pszLogFile)); <br>} <br> <br> <br>DWORD <br>GetDebugKeyValue( <br>    PDebugKeys      KeyTable, <br>    int             cKeys, <br>    LPSTR           pszKey) <br>{ <br>    int     i; <br> <br>    for (i = 0; i &lt; cKeys ; i++ ) <br>    { <br>        if (_stricmp(KeyTable[i].Name, pszKey) == 0) <br>        { <br>            return(KeyTable[i].Value); <br>        } <br>    } <br>    return(0); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   LoadDebugParameters <br>// <br>//  Synopsis:   Loads debug parameters from win.ini <br>// <br>//  Effects: <br>// <br>//  Arguments:  (none) <br>// <br>//  Requires: <br>// <br>//  Returns: <br>// <br>//  Signals: <br>// <br>//  Modifies: <br>// <br>//  Algorithm: <br>// <br>//  History:    4-29-93   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br> <br> <br>void <br>LoadDebugParameters(char * szSection) <br>{ <br>    char    szVal[128]; <br>    char *  pszDebug; <br>    int     cbVal; <br> <br>    cbVal = GetProfileStringA(szSection, "DebugFlags", "Error,Warning", szVal, sizeof(szVal)); <br> <br>    pszDebug = strtok(szVal, ", \t"); <br>    while (pszDebug) <br>    { <br>        PopInfoLevel |= GetDebugKeyValue(DebugKeyNames, NUM_DEBUG_KEYS, pszDebug); <br>        pszDebug = strtok(NULL, ", \t"); <br>    } <br> <br>    cbVal = GetProfileStringA(szSection, "LogFile", "", szVal, sizeof(szVal)); <br>    if (cbVal) <br>    { <br>        DebugOpenLogFile(szVal); <br>    } <br> <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   InitDebugSupport <br>// <br>//  Synopsis:   Initializes debugging support for the Winlogon <br>// <br>//  Effects: <br>// <br>//  Arguments:  (none) <br>// <br>//  Requires: <br>// <br>//  Returns: <br>// <br>//  Signals: <br>// <br>//  Modifies: <br>// <br>//  Algorithm: <br>// <br>//  History:    4-29-93   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br> <br> <br>void <br>InitDebugSupport(void) <br>{ <br>    LoadDebugParameters("Pop"); <br>    LoadDebugParameters("Winlogon"); <br> <br>} <br> <br> <br> <br>#else // DBG <br> <br>#pragma warning(disable:4206)   // Disable the empty transation unit <br>                                // warning/error <br> <br>#endif  // NOTE:  This file not compiled for retail builds </code></pre>
<p>&nbsp;</p></body>
</HTML>

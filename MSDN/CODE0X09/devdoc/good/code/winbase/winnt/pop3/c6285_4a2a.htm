<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POP3CTX.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6292"></a>POP3CTX.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  File:       pop3ctx.h <br>// <br>//  Contents: <br>// <br>//  Classes: <br>// <br>//  Functions: <br>// <br>//---------------------------------------------------------------------------- <br> <br>#ifndef __POP3CTX_H__ <br>#define __POP3CTX_H__ <br> <br>#define POP3_MESSAGE_DELETE     0x00000001  // Message has been "deleted" <br> <br>typedef enum _LAST_CLIENT_IO { <br>    ClientIoRead, <br>    ClientIoWrite, <br>    ClientIoTransmitFile <br>} LAST_CLIENT_IO, *PLAST_CLIENT_IO; <br> <br>typedef struct _CLIENT_CONTEXT { <br>    SOCKET Socket; <br>    PVOID Context; <br>    LAST_CLIENT_IO LastClientIo; <br>    DWORD BytesReadSoFar; <br>    HANDLE TransmittedFile; <br>    HANDLE TransmittedBuffer; <br>    OVERLAPPED Overlapped; <br>    CHAR Buffer[8192]; <br>} CLIENT_CONTEXT, *PCLIENT_CONTEXT; <br> <br>typedef struct _PopMessageHeader { <br>    DWORD       Flags;                  // Flags about this message <br>    DWORD       Size;                   // Size of this message <br>    PWSTR       pszFileName;            // File name containing message <br>} PopMessageHeader, * PPopMessageHeader; <br> <br>typedef struct _PopMailDirectory { <br>    DWORD               Flags;          // Flags about this directory <br>    DWORD               cMessages;      // Number of messages <br>    DWORD               NextMessage;    // Next message number <br>    DWORD               TotalSize;      // Total size of directory, in bytes <br>    DWORD               cAvailMessages; // Number of messages not deleted <br>    DWORD               AvailSize;      // Size of available messages <br>    PWSTR               pBaseDir;       // Base directory <br>    PPopMessageHeader   Messages;       // Array of message headers <br>} PopMailDirectory, * PPopMailDirectory; <br> <br>typedef enum _PopState { <br>    PopNegotiate, <br>    PopAuthorization,                   // Authorization State (wait for USER) <br>    PopAuthorization2,                  // Waiting for PASS <br>    PopTransact,                        // Transact State <br>    PopUpdate,                          // Update state <br>    PopShutdown                         // Rundown state <br>} PopState, * PPopState; <br> <br> <br>#define USERNAME_LENGTH 32 <br>typedef struct _PopContext { <br>    PopState            State;          // State of the connection <br>    HANDLE              hUserToken;     // Token for impersonation <br>    HANDLE              hDirectoryLock; // Lock for directory <br>    DWORD               LastError;      // Last error occurred <br>    DWORD               RetryCount;     // Number of retries <br>    PPopMailDirectory   pDirectory;     // Directory for retrieval <br>    CHAR                UserName[USERNAME_LENGTH];   // User Name for auth <br>} PopContext, * PPopContext; <br> <br>typedef enum _Pop3Disposition { <br>    Pop3_Discard,                       // Discard the request <br>    Pop3_SendError,                     // Send the error string <br>    Pop3_SendBuffer,                    // Send the buffer returned <br>    Pop3_SendFile,                      // Send the File returned <br>    Pop3_SendBufferThenFile,            // Send the buffer, then the file <br>    Pop3_SendFileThenBuffer             // Send the file, then the buffer <br>} Pop3Disposition; <br> <br>typedef Pop3Disposition <br>(* Pop3DispatchFn)( <br>    PPopContext pContext,               // Client's connection context <br>    PUCHAR      InputBuffer,            // Buffer sent from client <br>    DWORD       InputBufferLen,         // Size of buffer <br>    PHANDLE     SendHandle,             // Handle of file to send <br>    PUCHAR *    OutputBuffer,           // Output buffer to send <br>    PDWORD      OutputBufferLen         // Size of output buffer <br>    ); <br> <br>Pop3Disposition <br>HeloDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>UserDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>PassDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>QuitDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>StatDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>ListDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>RetrDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>DeleDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>LastDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br>Pop3Disposition <br>RsetDispatch( <br>    PPopContext pContext, <br>    PUCHAR      InputBuffer, <br>    DWORD       InputBufferLen, <br>    PHANDLE     SendHandle, <br>    PUCHAR *    OutputBuffer, <br>    PDWORD      OutputBufferLen <br>    ); <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

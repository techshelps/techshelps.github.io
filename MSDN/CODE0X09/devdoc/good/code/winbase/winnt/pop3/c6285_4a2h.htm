<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVICE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6299"></a>SERVICE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  File:       service.c <br>// <br>//  Contents: <br>// <br>//  Classes: <br>// <br>//  Functions: <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include "pop3srvp.h" <br>#pragma hdrstop <br> <br>SERVICE_STATUS_HANDLE   hService = 0; <br>WCHAR                   wszServiceName[] = APPLICATION_NAME; <br>SERVICE_STATUS          ServiceStatus; <br> <br>extern  BOOLEAN fService; <br>extern  BOOLEAN fTestMode; <br>#if DBG <br>extern  void TestLoop(void); <br>#endif <br> <br>SOCKET sListener; <br>HANDLE  hCompletionPort; <br>WSADATA WsaData; <br>BOOL bServiceTerminating = FALSE; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   ServiceControlHandler <br>// <br>//  Synopsis:   Handles requests from the service controller. <br>// <br>//  Arguments:  [fdwControl] -- Request code <br>// <br>//  History:    1-11-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>VOID <br>WINAPI <br>ServiceControlHandler( <br>    DWORD           fdwControl) <br>{ <br>    switch (fdwControl) <br>    { <br>        case SERVICE_CONTROL_STOP: <br> <br>            UpdateServiceStatus(SERVICE_STOP_PENDING); <br> <br>            // <br>            // Remember that the service is terminating. <br>            // <br> <br>            bServiceTerminating = TRUE; <br> <br>            // <br>            // Close the completion port and the listening socket. <br>            // These actions will cause the other threads to exit. <br>            // <br> <br>            closesocket( sListener ); <br>            CloseHandle( hCompletionPort ); <br> <br>            UpdateServiceStatus(SERVICE_STOPPED); <br>            return; <br> <br>        case SERVICE_CONTROL_INTERROGATE: <br>            UpdateServiceStatus(ServiceStatus.dwCurrentState); <br>            return; <br> <br>        default: <br>            return; <br>    } <br> <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   NotifyServiceController <br>// <br>//  Synopsis:   Notifies the service controller of our control entry point, <br>//              and tells it that we're trying to start up. <br>// <br>//  Arguments:  (none) <br>// <br>//  Algorithm: <br>// <br>//  History:    1-11-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>NotifyServiceController( <br>            VOID) <br>{ <br>    if (!fService) <br>    { <br>        return(TRUE); <br>    } <br>    ServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS; <br>    ServiceStatus.dwCurrentState = SERVICE_STOPPED; <br>    ServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP; <br>    ServiceStatus.dwWin32ExitCode = 0; <br>    ServiceStatus.dwServiceSpecificExitCode = 0; <br>    ServiceStatus.dwCheckPoint = 0; <br>    ServiceStatus.dwWaitHint = 0; <br> <br>    hService = RegisterServiceCtrlHandler(wszServiceName, ServiceControlHandler); <br> <br>    if (hService) <br>    { <br>        UpdateServiceStatus(SERVICE_START_PENDING); <br>        return(TRUE); <br>    } <br>    else <br>        return(FALSE); <br> <br>} <br> <br>BOOL <br>UpdateServiceStatus(DWORD   Status) <br>{ <br>    if (hService) <br>    { <br>        ServiceStatus.dwCurrentState = Status; <br>        if ((Status == SERVICE_START_PENDING) || (Status == SERVICE_STOP_PENDING)) <br>        { <br>            ServiceStatus.dwCheckPoint ++; <br>            ServiceStatus.dwWaitHint = 5000;    // 5 sec. <br>        } <br>        else <br>        { <br>            ServiceStatus.dwCheckPoint = 0; <br>            ServiceStatus.dwWaitHint = 0; <br>        } <br> <br>        return(SetServiceStatus(hService, &amp;ServiceStatus)); <br>    } <br> <br>    return(FALSE); <br>} <br> <br>void <br>FailServiceStart( <br>    DWORD           Win32Code, <br>    DWORD           PrivateCode) <br>{ <br>    ServiceStatus.dwWin32ExitCode = Win32Code; <br>    ServiceStatus.dwServiceSpecificExitCode = PrivateCode; <br>    UpdateServiceStatus(SERVICE_STOPPED); <br> <br>} <br> <br>void <br>WINAPI <br>Pop3SrvMain( <br>    DWORD       argc, <br>    LPTSTR      argv[]) <br>{ <br>    int error; <br> <br>    if (!NotifyServiceController()) <br>    { <br>        DebugLog((DEB_ERROR, "Could not contact service controller\n")); <br>        return; <br>    } <br> <br>    if (!InitializeEvents()) <br>    { <br>        DebugLog((DEB_ERROR, "Could not initialize events\n")); <br>        FailServiceStart(GetLastError(), 0); <br>        return; <br>    } <br> <br>    UpdateServiceStatus(SERVICE_START_PENDING); <br> <br>    if (!ReadParameters()) <br>    { <br>        DebugLog((DEB_ERROR, "Could not read parameters!\n")); <br>        FailServiceStart(GetLastError(), 0); <br>        return; <br>    } <br> <br>    UpdateServiceStatus(SERVICE_START_PENDING); <br> <br> <br>    ReportServiceEvent( <br>        EVENTLOG_INFORMATION_TYPE, <br>        POP3EVENT_SERVICE_STARTED, <br>        0, NULL, 0); <br> <br> <br>    if (fTestMode) <br>    { <br>#if DBG <br>        TestLoop(); <br>#endif <br>    } <br>    else <br>    { <br> <br>        error = WSAStartup( 0x0101, &amp;WsaData ); <br>        if ( error == SOCKET_ERROR ) { <br>            printf( "WSAStartup failed.\n" ); <br>        } <br> <br>        UpdateServiceStatus(SERVICE_START_PENDING); <br> <br>        // <br>        // Initialize the POP3SRV worker threads. <br>        // <br> <br>        hCompletionPort = InitializeThreads( ); <br>        if ( hCompletionPort == NULL ) { <br>            printf( "it failed.\n" ); <br>        } <br> <br>        UpdateServiceStatus(SERVICE_RUNNING); <br> <br>        // <br>        // Start accepting and processing clients. <br>        // <br> <br>        AcceptClients( hCompletionPort ); <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EVENTS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6287"></a>EVENTS.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  File:       events.c <br>// <br>//  Contents: <br>// <br>//  Classes: <br>// <br>//  Functions: <br>// <br>//---------------------------------------------------------------------------- <br> <br>#include "pop3srvp.h" <br>#pragma hdrstop <br> <br>HANDLE  hEventLog = INVALID_HANDLE_VALUE; <br>DWORD   LoggingLevel = 1; <br>WCHAR   EventSourceName[] = TEXT("Pop3 Server"); <br> <br>#define MAX_EVENT_STRINGS 8 <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   InitializeEvents <br>// <br>//  Synopsis:   Connects to event log service <br>// <br>//  Arguments:  (none) <br>// <br>//  History:    1-03-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>BOOL <br>InitializeEvents(void) <br>{ <br>    hEventLog = RegisterEventSource(NULL, EventSourceName); <br>    if (hEventLog) <br>    { <br>        return(TRUE); <br>    } <br>    DebugLog((DEB_ERROR, "Could not open event log, error %d\n", GetLastError())); <br>    return(FALSE); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   ReportServiceEvent <br>// <br>//  Synopsis:   Reports an event to the event log <br>// <br>//  Arguments:  [EventType]       -- EventType (ERROR, WARNING, etc.) <br>//              [EventId]         -- Event ID <br>//              [SizeOfRawData]   -- Size of raw data <br>//              [RawData]         -- Raw data <br>//              [NumberOfStrings] -- number of strings <br>//              ...               -- PWSTRs to string data <br>// <br>//  History:    1-03-95   RichardW   Created <br>// <br>//  Notes: <br>// <br>//---------------------------------------------------------------------------- <br>DWORD <br>ReportServiceEvent( <br>    IN WORD EventType, <br>    IN DWORD EventId, <br>    IN DWORD SizeOfRawData, <br>    IN PVOID RawData, <br>    IN DWORD NumberOfStrings, <br>    ... <br>    ) <br>{ <br>    va_list arglist; <br>    ULONG i; <br>    PWSTR Strings[ MAX_EVENT_STRINGS ]; <br>    DWORD rv; <br> <br>    if (!hEventLog) <br>    { <br>        DebugLog((DEB_ERROR, "Cannot log event, no handle!\n")); <br>        return((DWORD)-1); <br>    } <br> <br>    // <br>    // We're not supposed to be logging this, so nuke it <br>    // <br>    if ((LoggingLevel &amp; (1 &lt;&lt; EventType)) == 0) <br>    { <br>        return(0); <br>    } <br> <br>    // <br>    // Look at the strings, if they were provided <br>    // <br>    va_start( arglist, NumberOfStrings ); <br> <br>    if (NumberOfStrings &gt; MAX_EVENT_STRINGS) { <br>        NumberOfStrings = MAX_EVENT_STRINGS; <br>    } <br> <br>    for (i=0; i&lt;NumberOfStrings; i++) { <br>        Strings[ i ] = va_arg( arglist, PWSTR ); <br>    } <br> <br> <br>    // <br>    // Report the event to the eventlog service <br>    // <br> <br>    if (!ReportEvent(   hEventLog, <br>                        EventType, <br>                        0,            // event category <br>                        EventId, <br>                        NULL, <br>                        (WORD)NumberOfStrings, <br>                        SizeOfRawData, <br>                        Strings, <br>                        RawData) ) <br>    { <br>        rv = GetLastError(); <br>        DebugLog((DEB_ERROR,  "ReportEvent( %u ) failed - %u\n", EventId, GetLastError() )); <br> <br>    } <br>    else <br>    { <br>        rv = ERROR_SUCCESS; <br>    } <br> <br>    return rv; <br>} <br> <br>BOOL <br>ShutdownEvents(void) <br>{ <br>    return(DeregisterEventSource(hEventLog)); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6302"></a>README.TXT</h2>
<pre><code>Simple Service <br> <br> <br>SUMMARY <br>======= <br> <br>The SERVICE sample demonstrates how to create and install a service. <br> <br>In this particular sample, the service merely opens a named pipe (the name  <br>defaults to \\.\pipe\simple) and waits for read and write operations to the  <br>pipe. If the pipe receives input, it creates the string: <br> <br>    Hello! [&lt;input goes here&gt;] <br> <br>and sends it back to the client through the pipe. <br> <br>The service can be started and stopped from the control panel Services  <br>applet, the net command, or by using the service controller utility (see  <br>MORE INFORMATION). <br> <br>The service also provides command-line parameters which install, remove, or  <br>run (debug) the service as a console application. <br> <br>MORE INFORMATION <br>================ <br> <br>To aid in writing and debugging services, the SDK contains a utility <br>(MSTOOLS\BIN\SC.EXE) that can be used to control, configure, or obtain  <br>service status. SC displays complete status for any service in the service  <br>database, and allows any of the configuration parameters to be easily  <br>changed at the command line. For more information on SC.EXE, type SC at the  <br>command line. <br> <br>Usage: <br> <br>To install the service, first compile everything, and then type: <br> <br>    simple -install <br> <br>Now, let's look at SC's command-line parameters: <br> <br>    sc <br> <br>To start the service, use the "net start" command, the control panel  <br>Services applet, or the command: <br> <br>    sc start simpleservice <br> <br>Verify that the service has entered the RUNNING state: <br> <br>    sc query simpleservice <br> <br>Once the service has been started, you can use the CLIENT program to verify  <br>that it really is working, using the syntax: <br> <br>    client  <br> <br>which should return the response: <br> <br>    Hello! [World] <br> <br>If, after playing with the sample, you wish to remove the service, simply  <br>say: <br> <br>    simple -remove <br> <br>You may change the name of the pipe by specifying -pipe &lt;pipename&gt; as a  <br>startup parameter for both CLIENT and SIMPLE. The string passed in by CLIENT  <br>can be changed by specifying -string &lt;string&gt;. <br> <br>Notes: <br> <br>1) The use of the SERVICE.H header file and the accompanying SERVICE.C file  <br>simplifies the process of writing a service. You as a developer simply need  <br>to follow the TODO's outlined in the header file, and implement the  <br>ServiceStart and ServiceStop functions for your service. <br> <br>There is no need to modify the code in SERVICE.C. Just add SERVICE.C to your  <br>project and link with the following libraries: <br> <br>    libcmt.lib  <br>    kernel32.lib  <br>    advapi.lib  <br>    shell32.lib <br> <br>2) Install/Remove functionality should not be included in a production service.   <br>The functionality is included in this service for illustration purposes, and as  <br>a convenience to developers. <br> <br>  <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

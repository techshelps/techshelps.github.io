<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The CircleShape Property</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_the_circleshape_property"></a>The CircleShape Property</h1>
<p>
This topic presents general information on: 
<ul type=disc>
<li>
CircleShape property functions and the property's effect on the Circle control.<br><br></li>
<li>
Modifying the Circle control to implement CircleShape property functions.</li>
</ul>

<h2><a name="_gs_circleshape_property_functionality"></a>CircleShape Property Functionality</h2>
<p>
When the CircleShape property's value is set to <b>TRUE</b>, the Circle control draws the largest possible perfect circle centered within the bounding rectangle of the control. When the CircleShape property is set to <b>FALSE</b>, the Circle control draws an ellipse whose major and minor axes touch the bounding rectangle of the control. The initial value of the CircleShape property should be <b>TRUE</b>. Whenever the CircleShape property is changed, the Circle control is redrawn to reflect the change.</p>
<p>
The figure below shows the Circle control drawn as an ellipse, the desired effect when CircleShape is set to <b>FALSE</b>. Notice that the ellipse is drawn to the edges of the bounding rectangle. This is the standard drawing behavior of the Circle control, so very little code is modified to implement the required drawing behavior when CircleShape is set to <b>FALSE</b>.</p>
<p class=label>
<b>The CircleShape Property Set to FALSE</b></p>
<p>
<img src="vc39av1.gif" border=0></p>
<p>
When the CircleShape property is set to <b>TRUE</b>, the Circle control is drawn as a perfect circle. The following figure shows how the circle would be drawn within the bounding rectangle of the control. To determine how to draw the circle, you will calculate the square region centered within the bounding rectangle of the control.</p>
<p class=label>
<b>The CircleShape Property Set to TRUE</b></p>
<p>
<img src="vc39av2.gif" border=0></p>
<p>
Recall from the previous lesson that the <code>CCircCtrl::OnDraw</code> function used the <b>CDC::Ellipse</b> function to draw the ellipse. This function can also be used to draw the circle. By passing the calculated square region instead of the bounding rectangle of the control to the <b>Ellipse</b> function, the <b>Ellipse</b> function will draw a perfect circle.</p>
<h2><a name="_gs_implementing_the_circleshape_property"></a>Implementing the CircleShape Property</h2>
<p>
Now that the CircleShape property's functional specification is complete, and the basic logic is described, you can revise the Circle control's code as follows:
<ul type=disc>
<li>
<a href="_gs_adding_the_circleshape_property.htm">Add the CircleShape property to the control using ClassWizard</a>.<br><br></li>
<li>
<a href="_gs_setting_the_circleshape_default_value.htm">Set the default value of the CircleShape property when the control is created</a>.<br><br></li>
<li>
<a href="_gs_the_getdrawrect_function.htm">Define the GetDrawRect member function</a> in the <code>CCircCtrl</code> class. <p class=tl>
This function determines the drawing coordinates to use: if CircleShape is <b>FALSE</b>, use the entire bounding rectangle of the control; if CircleShape is <b>TRUE</b>, use the centered square region inside the bounding rectangle.</P></li>
<li>
<a href="_gs_implementing_new_drawing_behavior.htm">Modify CCircCtrl::OnDraw</a> to use the coordinates returned by the <code>CCircCtrl::GetDrawRect</code> member function when drawing the control.<br><br></li>
<li>
<a href="_gs_modifying_oncircleshapechanged.htm">Modify the CCircCtrl::OnCircleShapeChanged</a> member function to invalidate the control.</li>
</ul>
<p>
Aspects of this strategy apply whenever you add any custom property. Using ClassWizard to add the property greatly simplifies the process by updating the appropriate class and the object definition library (.ODL) files (which are used to create the type library). It is always good practice to provide a default value for the new property by adding initialization code for the property to the <code>DoPropExchange</code> member function in the control class.</p>
</font></BODY>
</HTML>

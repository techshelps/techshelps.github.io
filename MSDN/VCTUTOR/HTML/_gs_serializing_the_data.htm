<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Serializing the Data</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_serializing_the_data"></a>Serializing the Data</h1>
<p>
The next three topics describe how to add the code that defines file input/output for Scribble documents. The default I/O implementation in MFC is called “serialization” (see the figure below). It provides a mechanism for making a document’s data persistent between work sessions with the program. By adding the code described in these topics, you enable the Scribble application to handle file serialization when the user clicks the <b>Open</b>, <b>Save</b>, or <b>Save As</b> commands from the <b>File</b> menu.</p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_CArchive.3a3a.GetObjectSchema">
</object><a href=JavaScript:alink_1.Click()>CArchive::GetObjectSchema</a>, <i>Microsoft Foundation Class Reference</i><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_.2f.VERSION_.28.Version_Information.29">
</object><a href=JavaScript:alink_2.Click()>/VERSION (Version Information)</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="version info editor">
</object><a href=JavaScript:alink_3.Click()>Overview: Version Information Editor</a>, <i>Visual C++ User’s Guide</i></li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Other than filling in the serialization function, you don’t have to write any code — for example, to display the dialog boxes — to process the <b>Open</b>, <b>Save</b>, and <b>Save As</b> commands on the <b>File</b> menu. The framework supplies this code.</p>
<p class=label>
<b>Serialization in Scribble</b></p>
<p>
<img src="ct0209c.gif" border=0></p>
<p>
The <code>CScribbleDoc</code> class declaration in ScribbleDoc.h begins with the following AppWizard-generated code, which contains an important macro invocation (<b>DECLARE_DYNCREATE</b>) needed for serialization (don’t add this code):</p>
<pre><code>class CScribbleDoc : public CDocument
{
protected: // Create from serialization only.
   CScribbleDoc( );
   DECLARE_DYNCREATE( CScribbleDoc )
   // Other declarations ... 
};
</code></pre>
<p>
The <b>DECLARE_DYNCREATE</b> macro prepares the class so that document objects can be dynamically created by the framework. </p>
</font></BODY>
</HTML>

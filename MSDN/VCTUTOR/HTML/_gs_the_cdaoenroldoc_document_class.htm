<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The CDaoEnrolDoc Document Class</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_the_cdaoenroldoc_document_class"></a>The CDaoEnrolDoc Document Class</h1>
<p>
In ClassView, you can see that AppWizard created a class, <code>CDaoEnrolDoc</code>, derived from <b>CDocument</b>. </p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_CDocument.3a3a.UpdateAllViews">
</object><a href=JavaScript:alink_1.Click()>CDocument::UpdateAllViews</a>, <i>Microsoft Foundation Class Reference</i> <br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="resources">
</object><a href=JavaScript:alink_2.Click()>Resource Editor Topics (Specific to Visual C++)</a><br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_MFC.3a_.Using_Database_Classes_Without_Documents_and_Views">
</object><a href=JavaScript:alink_3.Click()>MFC: Using Database Classes with Documents and Views</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Serialization.3a_.Serialization_vs.._Database_Input.2f.Output">
</object><a href=JavaScript:alink_4.Click()>Serialization: Serialization vs. Database Input/Output</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multiple_Document_Types.2c_.Views.2c_.and_Frame_Windows">
</object><a href=JavaScript:alink_5.Click()>Multiple Document Types, Views, and Frame Windows</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Dialog_Box_Topics">
</object><a href=JavaScript:alink_6.Click()>Dialog Box Topics</a>, <i>Visual C++ Programmer’s Guide</i></li>
</ul>
<p class=label>
<b>To view the document class</b>
<ul type=disc>
<li>
In ClassView, double-click the icon for class <code>CDaoEnrolDoc</code>.<p class=tl>
This opens the file DenrlDoc.h in the text editor, placing the insertion point beside the <code>CDaoEnrolDoc</code> class declaration.</P></li>
</ul>
<p>
What is the document’s role in a database application? In most other applications, the document stores data and serializes it to a file on disk. Often the application reads the whole file into memory at once and writes it back to disk as a whole. In a database application, however, the data is stored in the database, and the user usually views the data as records. Such an application doesn’t need a file.</p>
<p>
A document in a database application, then, isn’t normally used for its serialization support. So why does DaoEnrol have a document class? </p>
<p>
The following code, at the beginning of DenrlDoc.h, reveals that the role of the document class in DaoEnrol is to own the recordset.</p>
<pre><code>class CDaoEnrolDoc : public CDocument
{
   ...
   // Attributes
   public:
      CSectionSet m_sectionSet;
   ...
};
</code></pre>
<p>
The recordset object, <code>m_sectionSet</code>, is embedded in the document object. Therefore, the recordset object is automatically constructed when the document object is constructed, and automatically deleted when the document object is deleted.</p>
<p>
The document class can own any number of recordset objects in this way.&nbsp; For example, Step 4 of DaoEnrol adds a second form and corresponding recordset; the document embeds this second recordset.</p>
<p>
In a sense, then, the document class is a proxy for the database. This approach isn’t strictly necessary, but if you (or AppWizard) design your database application to use the document class this way, you can better take advantage of the framework’s document/view architecture. For example, if you have multiple views (forms) simultaneously showing some of the contents of the database, you can take advantage of the <b>CDocument::UpdateAllViews</b> mechanism to conveniently notify all views about an update that might have been initiated in one of the views.</p>
<p>
If you look at the menu resource that AppWizard created when you chose the option <b>Database view without file support</b>, you’ll see that there are no New, Open, Save, or Save As commands on the File menu. The File menu has only the Print, Print Preview, Print Setup, and Exit commands. If you had chosen <b>Database view with file support</b>, AppWizard would have supplied the missing File menu commands. </p>
<p class=label>
<b>To view the DaoEnrol menu resource</b>
<ol>
<li>
From ResourceView, expand the DaoEnrol folder. <p class=tl>
This displays the resource browser, which shows the resources associated with a project.</P></li>
<li>
In the resource browser, expand the Menu folder.<br><br></li>
<li>
Double-click IDR_MAINFRAME.<p class=tl>
The Menu editor opens, displaying the default menu that AppWizard created for the DaoEnrol application. </P></li>
<li>
Click the File menu item to view its structure. Notice the absence of New, Open, Save, and Save As.<br><br></li>
<li>
Close the Menu editor when you’re finished.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you choose the option <b>Database view with file support</b> in AppWizard, the document class plays two roles. First, it serves as a proxy for the database. Second, it represents the file that is opened and saved via the New, Open, Save, and Save As commands on the File menu. </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an OLE Server</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_creating_an_ole_server"></a>Creating an OLE Server</h1>
<h3>Scribble: OLE Server Application, Lesson 1</h3>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you prefer working from a printed tutorial, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Copying and Printing">
</object><a href=JavaScript:alink_1.Click()>Copying and Printing</a> in <i>MSDN Library Help</i> for details about printing a lesson, a set of topics, or a single topic.</p>
<h3>Suggested Reading in the <i>Win32 SDK</i></h3>
<ul type=disc>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_Containers_and_Servers">
</object><a href=JavaScript:alink_2.Click()>Containers and Servers</a></li>
</ul>
<p>
An OLE in-place editing server application can create OLE items that can be embedded or linked into container applications. Some server applications support only the creation of embedded items, while others support the creation of both embedded and linked items. </p>
<p>
A container application must be able to start a server application when the user wants to edit an item. If a server application supports linked items, it must also be able to copy its data to the Clipboard so that a container can use that data to create OLE items. </p>
<p>
An application can be both a container and a server; that is, it can both incorporate external data into its documents and create data that can be incorporated as items into the documents of other applications.</p>
<p>
Scribble Step 7 addresses two general cases for adding OLE server support to an application:
<ul type=disc>
<li>
Creating a new OLE in-place editing server application from scratch<br><br></li>
<li>
Adding OLE in-place editing server support to an existing application</li>
</ul>
<p>
The technique described in this lesson illustrates both cases, even though the tutorial starts with an existing MFC application, Scribble Step 6, to which you will add OLE server support. For more information on Scribble, see Lessons 1 through 10.</p>
<p>
As when adding support for context-sensitive help to Scribble Step 6, you will use AppWizard to provide a starter OLE server application in a scratch directory. Then you will copy files and code fragments from the scratch directory to the existing Scribble code base. By doing this, you will learn about the OLE server code that AppWizard provides. Therefore, even if you are starting a new MFC OLE server application from scratch, you are advised to read this tutorial, if not actually do the steps.</p>
<p>
How does this approach differ from the traditional approach of copying source code from a sample application? AppWizard allows you to customize the sample code you will be borrowing. That is, when you create the scratch application, you will name it “Scribble,” give the classes the same names Scribble itself uses, and so on. Thus, when you copy source code from the AppWizard-created sample application, it will match the class names of your original application. You can use this approach to add other AppWizard-supported features to your existing MFC applications “after the fact.”</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Application-Specific Server Support to the Document Class</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_add_application.2d.specific_server_support_to_the_document_class"></a><sup></sup>Add Application-Specific Server Support to the Document Class</h1>
<p>
To finish adding application-specific server support in the document class, you must:
<ul type=disc>
<li>
Notify the OLE server that the embedded item has moved or changed size (see next procedure).<br><br></li>
<li>
<a href="#_gs_to_change_the_initial_size_of_the_document">Change the initial size of the document</a>.<br><br></li>
<li>
<a href="#_gs_to_implement_the_document.92.s_support_for_putting_a_link_format_on_the_clipboard">Implement the document’s support for putting a link format on the Clipboard</a>.</li>
</ul>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="WizBar">
</object><a href=JavaScript:alink_1.Click()>Using WizardBar</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_COleServerItem.3a3a.CopyToClipboard">
</object><a href=JavaScript:alink_2.Click()>COleServerItem::CopyToClipboard</a>, <i>Microsoft Foundation Class Reference</i></li>
</ul>
<p>
In the following procedure, you’ll use the <b>Add Member Function</b> command to implement the <code>OnSetItemRects</code> function for class <code>CScribbleDoc</code>. The framework calls <b>OnSetItemRects</b> when the position or size of the embedded item has changed in the container, or when the clipping of the embedded item has changed in the container. Because Scribble’s view is a <b>CScrollView</b>, you need to call <b>CScrollView::SetScrollSizes</b> to reflect the change in the size of the item. Because there are multiple places where the logic associated with <b>SetScrollSizes</b> must be performed, you will later write a helper function, <code>CScribbleView::ResyncScrollSizes</code>, which you will call from the override of <b>OnSetItemRects</b>.</p>
<p class=label>
<b><a name="_gs_to_notify_the_ole_server_when_the_embedded_item_moves_or_changes_size"></a>To notify the OLE server when the embedded item moves or changes size</b>
<ol>
<li>
In ClassView, right-click <code>CScribbleDoc</code>.<br><br></li>
<li>
Click <b>Add Member Function</b>.<p class=tl>
The <b>Add Member Function</b> dialog box appears.</P></li>
<li>
Fill in the dialog box as follows:<ul type=disc>
<li>
In the <b>Function Type</b> box, type <code>void</code>.<br><br></li>
<li>
In the <b>Function Declaration</b> box, type the following:</li>
</ul>
<pre><code>OnSetItemRects(LPCRECT lpPosRect, LPCRECT lpClipRect)
</code></pre>
<ul type=disc>
<li>
In the Access area, click <b>Protected</b>.</li>
</ul>
</li>
<li>
Click <b>OK</b>.<br><br></li>
<li>
In ScribbleDoc.cpp, implement the starter definition with the following code:<pre><code>// call base class to change the size of the window
COleServerDoc::OnSetItemRects(lpPosRect, lpClipRect);

// notify first view that scroll info should change
POSITION pos = GetFirstViewPosition();
CScribbleView* pView = (CScribbleView*)GetNextView(pos);
pView-&gt;ResyncScrollSizes();
</code></pre>
</li>
<li>
Add the following <b>#include</b> statement to ScribbleDoc.cpp, because the above implementation refers to <code>CScribbleView</code>:<pre><code>#include "ScribbleView.h" 
</code></pre>
<p class=tl>
The short filename is ScribVw.h.</P></li>
</ol>
<p>
The next step is to modify <code>CScribbleDoc::InitDocument</code> so Scribble’s fixed document size changes from 8 by 9 inches, to 2 by 2 inches. The current size, 8 by 9 inches, is too large for most containers.</p>
<p class=label>
<b><a name="_gs_to_change_the_initial_size_of_the_document"></a>To change the initial size of the document</b>
<ol>
<li>
Use ClassView to jump to <code>CScribbleDoc::InitDocument</code> and modify the comments and the parameters that return the default document size, as follows:<pre><code>//default document size is 200 x 200 screen pixels
...
m_sizeDoc = CSize(200, 200);
</code></pre>
</li>
<li>
Use ClassView to jump to the <code>CScribbleDoc</code> constructor and replace the //TODO comments with the following line:<pre><code>m_sizeDoc = CSize(200, 200);
</code></pre>
<p class=tl>
The <code>m_sizeDoc</code> variable is also initialized in the helper member function, <code>InitDocument</code>, when a document is newly created or reopened in a stand-alone running instance of Scribble. <code>InitDocument</code> is called by Scribble’s overrides of <b>CDocument::OnNewDocument</b> and <b>OnOpenDocument</b>. When Scribble is run as a server, the <code>OnNewDocument</code> and <code>OnOpenDocument</code> functions are not called. Therefore a good place to initialize <code>m_sizeDoc</code> is in the constructor.</P></li>
</ol>
<p>
Finally, in the following procedure you’ll implement the ability for containers to execute the Paste Link command on the server’s Edit menu. </p>
<p class=label>
<b><a name="_gs_to_implement_the_document.92.s_support_for_putting_a_link_format_on_the_clipboard"></a>To implement the document’s support for putting a link format on the Clipboard</b>
<ol>
<li>
Display ScribbleDoc.cpp in the editor window.<br><br></li>
<li>
From the <b>Filter</b> list in WizardBar, click ID_EDIT_COPY, and from the <b>Members</b> list, click COMMAND.<br><br></li>
<li>
Click the action button, located on the right end of WizardBar.<p class=tl>
The <b>New Windows Message and Event Handlers</b> dialog box appears.</P></li>
<li>
Click <b>Add Handler</b>.<p class=tl>
The <b>Add Member Function</b> dialog box appears.</P></li>
<li>
Click <b>OK</b> in the <b>Add Member Function</b> dialog box to accept the default name OnEditCopy.<br><br></li>
<li>
Click <b>Edit Existing</b> to jump to the OnEditCopy member function definition.<br><br></li>
<li>
Replace the //TODO line with the following code:<pre><code>CScribbleItem* pItem = GetEmbeddedItem();
pItem-&gt;CopyToClipboard(TRUE);
</code></pre>
</li>
</ol>
<p>
The framework function <b>COleServerItem::CopyToClipboard</b> creates a <b>COleDataSource</b> object containing the OLE item's data in proper formats, then places the <b>COleDataSource</b> object on the Clipboard. The <b>COleDataSource</b> object includes the item's native data and its representation in CF_METAFILEPICT format, as well as data in any conversion formats you choose to support.</p>
</font></BODY>
</HTML>

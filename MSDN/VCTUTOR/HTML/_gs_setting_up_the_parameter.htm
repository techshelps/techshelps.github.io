<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up the Parameter</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_setting_up_the_parameter"></a><sup></sup>Setting Up the Parameter</h1>
<p>
Enroll reselects, or “requeries,” class section records every time the user selects a new course name from the combo box. One way to implement this is to close the old <code>CSectionSet</code> object and reopen it by supplying a new <b>m_strFilter</b> value before calling <b>Open</b>. This works but is somewhat inefficient, because the framework has to completely reconstruct and invoke a new SQL <b>SELECT</b> statement. A more efficient way to requery the same recordset is to “parameterize” the filter — call <b>Requery</b> with a new filter value and a specific parameter value.</p>
<p>
In order to parameterize the filter, you will perform the following procedures:
<ul type=disc>
<li>
Declare a parameter data member in the recordset’s header file<br><br></li>
<li>
Bind the parameter data member to the recordset</li>
</ul>
<p>
To implement the <b>Requery </b>with a new filter and a specific parameter value supplied at run time, you:
<ul type=disc>
<li>
Specify a parameterized filter<br><br></li>
<li>
Supply the run-time parameter value</li>
</ul>
<p class=label>
<b>To declare a parameter data member in the recordset’s header file</b>
<ol>
<li>
From FileView, open file SectionSet.h.<br><br></li>
<li>
Add the following member variable declaration for <code>m_strCourseIDParam</code>, just before the //Overrides section, after the <code>//}}AFX_FIELD</code> line: <pre><code>CString m_strCourseIDParam;
</code></pre>
</li>
</ol>
<p class=label>
<b>To bind the parameter data member to the recordset</b>
<ol>
<li>
From ClassView, jump to the <code>CSectionSet</code> constructor, and initialize the parameter count variable, <b>m_nParams</b>, which by default is zero. Also initialize Enroll’s single parameter, <code>m_strCourseIDParam</code>.<p class=tl>
Place the following two lines of code after the line <code>//}}AFX_FIELD_INIT</code>:</P><pre><code>m_nParams = 1;
m_strCourseIDParam = "";
</code></pre>
</li>
<li>
From ClassView, jump to the <code>DoFieldExchange</code> member function definition, and add the following two lines of code to identify <code>m_strCourseIDParam</code> as a parameter data member. Add the code at the end of the function, after the <code>//}}AFX_FIELD_MAP</code> line.<pre><code>pFX-&gt;SetFieldType(CFieldExchange::param);
RFX_Text(pFX, "CourseIDParam", m_strCourseIDParam);
</code></pre>
<p class=tl>
<code>DoFieldExchange</code> recognizes two kinds of fields: columns and parameters. The call to the <b>CFieldExchange</b> member function <b>SetFieldType</b> indicates what kind of field(s) follow in the RFX function calls. In this example, there is one parameter: <code>m_strCourseIDParam</code>.</P><p class=tl>
The name of the column for the parameter in the <b>RFX_Text</b> call — “CourseIDParam” — is arbitrary; you can provide any name you want.</P></li>
<li>
Save your work.</li>
</ol>
<p class=label>
<b>To specify a parameterized filter </b>
<ul type=disc>
<li>
Before the call to the base class function <b>CRecordset::Open</b>, which is called by <b>CRecordView::OnInitialUpdate</b>, specify the parameterized filter, as shown in this line (which you’ve already added):<pre><code>m_pSet-&gt;m_strFilter = "CourseID = ?";
</code></pre>
</li>
</ul>
<p>
The question mark “?” indicates where the parameter value will be substituted at run time. If you have more than one parameter in your <b>m_strFilter</b>, such as:</p>
<pre><code>m_pSet-&gt;m_strFilter = "CourseID = ? AND SectionNo = ?";
</code></pre>
<p>
you must make multiple RFX calls after the call to:</p>
<pre><code>pFX-&gt;SetFieldType(CFieldExchange::param); 
</code></pre>
<p>
You must make the RFX calls for multiple parameters in exactly the same order as the question marks in the <b>m_strFilter</b> and/or <b>m_strSort</b>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you have both a filter and a sort with parameters, specify the filter parameters first, then the sort parameters. Not all ODBC drivers permit parameters on a sort. Consult the Help file for your ODBC driver.</p>
<p class=label>
<b>To supply the run-time parameter value</b>
<ul type=disc>
<li>
Assign the value to the previously bound parameter data member, as shown in the following line (which you’ve already added in the <b>OnInitialUpdate</b> function).<pre><code>m_pSet-&gt;m_strCourseIDParam = pDoc-&gt;m_courseSet.m_CourseID;
</code></pre>
<p class=tl>
This sets the parameter value to be the first course record retrieved from the <code>CCourseSet</code> recordset. All parameter values must be assigned before calling <b>CRecordset::Open</b> (or <b>CRecordView::OnInitialUpdate</b>), or as you will see later, before calling <b>CRecordset::Requery</b>. </P></li>
</ul>
</font></BODY>
</HTML>

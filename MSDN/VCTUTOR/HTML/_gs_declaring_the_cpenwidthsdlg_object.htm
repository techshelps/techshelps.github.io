<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring the CPenWidthsDlg Object</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_declaring_the_cpenwidthsdlg_object"></a>Declaring the CPenWidthsDlg Object</h1>
<p>
In the following procedure you’ll use WizardBar to add a function handler for the <code>OnPenWidths</code> message and bind the function to its handler code, which is executed whenever the user clicks the Pen Widths command.</p>
<p class=label>
<b><a name="_gs_to_declare_the_cpenwidthsdlg_object"></a>To declare the CPenWidthsDlg object</b>
<ol>
<li>
Open ScribbleDoc.cpp in the text editor.<br><br></li>
<li>
Click the arrow on the action button on the right end of WizardBar.<br><br></li>
<li>
Click <b>Add Windows Message Handler</b>.<p class=tl>
The <b>New Windows Message Handler</b> dialog box appears.</P></li>
<li>
In the <b>Class or object to handle</b> list box, select ID_PEN_WIDTHS.<br><br></li>
<li>
In the <b>New Windows messages to handle</b> list box, select COMMAND.<br><br></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
In the <b>Add Member Function</b> dialog box, click <b>OK</b> to accept the candidate name “OnPenWidths.”<br><br></li>
<li>
In place of the highlighted //TODO comment, add the following code:<pre><code>CPenWidthsDlg dlg;
// Initialize dialog data
dlg.m_nThinWidth = m_nThinWidth;
dlg.m_nThickWidth = m_nThickWidth;

// Invoke the dialog box
if (dlg.DoModal() == IDOK)
{
// retrieve the dialog data
m_nThinWidth = dlg.m_nThinWidth;
m_nThickWidth = dlg.m_nThickWidth;

// Update the pen used by views when drawing new strokes
// to reflect the new pen widths for "thick" and "thin".
ReplacePen();
}
</code></pre>
</li>
<li>
Scroll to the top of ScribbleDoc.cpp and add the following <b>#include </b>statement:<pre><code>#include "PenWidthsDlg.h"
</code></pre>
</li>
<li>
Save ScribbleDoc.cpp. <p class=tl>
When you modify ScribbleDoc.cpp, you must include PenWidthsDlg.h so the message handler has access to the dialog class you’ve created. </P></li>
</ol>
<p>
The <code>OnPenWidths</code> function:
<ol start=11>
<li>
Declares a <code>CPenWidthsDlg</code> object and sets the values of the <code>m_nThickWidth</code> and <code>m_nThinWidth</code> member variables to the current widths of the thick and thin pens. <br><br></li>
<li>
Calls the <b>DoModal</b> function, which displays the dialog box on the screen and takes control of the application until the user exits the dialog box. If the user exits the dialog box by clicking the <b>OK</b> button, the function changes the current thick and thin pen widths to the new values; if the user clicks the <b>Cancel</b> button, the old values are retained. <br><br></li>
<li>
Calls the <code>ReplacePen</code> member function to make the document’s pen use the current widths.</li>
</ol>
<p>
When does the application perform the data exchange and validation defined in the <code>DoDataExchange</code> function? Recall that <code>DoDataExchange</code> is called by the <b>UpdateData</b> member function. Just before the dialog box is first displayed on the screen, the framework calls the <b>UpdateData</b> function with an argument of <b>FALSE</b>, which sets the contents of the edit boxes to the values of the member variables. If the user exits the dialog box by clicking the <b>OK</b> button, the framework calls <b>UpdateData</b> with an argument of <b>TRUE</b>, which retrieves the contents of the edit boxes and sets the values of the member variables accordingly. (If the user exits by clicking the <b>Cancel</b> button, the framework doesn’t call <b>UpdateData</b>.)</p>
<p>
You don’t have to handle the UPDATE_COMMAND_UI message for the Pen Widths menu item because the menu item doesn’t need to be updated. The command is never disabled since it’s always legal to change the widths of the pens, and there’s no need to add or remove a check mark because the command isn’t a toggle.</p>
</font></BODY>
</HTML>

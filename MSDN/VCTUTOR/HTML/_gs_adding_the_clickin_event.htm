<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding the ClickIn Event</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_adding_the_clickin_event"></a><sup></sup>Adding the ClickIn Event</h1>
<p>
Events, like properties, are added to a control using ClassWizard. When you add a custom event, ClassWizard creates the code necessary to declare the event; however, the control developer must write additional code to fire the event. </p>
<p>
An event can also define parameters it can pass to the control’s container when it is fires. Event parameters can be added using ClassWizard. In this topic, you will define two parameters for the ClickIn event: <code>x</code> and <code>y</code>, which represent the x and y coordinates of the mouse position when the left mouse button is clicked.</p>
<p class=label>
<b>To add the ClickIn event</b>
<ol>
<li>
On the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>ActiveX</b> <b>Events</b> tab.<br><br></li>
<li>
From the <b>Class</b> <b>name</b> drop-down list box, select CCircCtrl.<br><br></li>
<li>
Click <b>Add</b> <b>Event</b>.<p class=tl>
The <b>Add</b> <b>Event</b> dialog box appears.</P></li>
<li>
In the edit control of the <b>External</b> <b>name</b> drop-down combo box, type <code>ClickIn</code>.<br><br></li>
<li>
In the <b>Parameter</b> <b>list</b>, use the grid control to add a parameter, called x (with a type of <code>OLE_XPOS_PIXELS</code>).<br><br></li>
<li>
Use the grid control to add a second parameter, called y (with a type of <code>OLE_YPOS_PIXELS</code>).<br><br></li>
<li>
Click <b>OK</b> to close the <b>Add</b> <b>Event</b> dialog box.<p class=tl>
This returns you to the <b>ActiveX</b> <b>Events</b> tab. Notice that the implementation of the ClickIn event appears as:</P><pre><code>Implementation:
void FireClickIn(OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
</code></pre>
</li>
<li>
Click <b>OK</b> to confirm your choices and close ClassWizard.</li>
</ol>
<p>
ClassWizard creates the code to add the ClickIn event, modifying both the <code>CCircCtrl</code> class files and the CIRC.ODL file.</p>
<p>
ClassWizard modifies the <code>CCircCtrl</code> class event map in CIRCCTL.CPP to add a macro entry for the ClickIn event:</p>
<pre><code>BEGIN_EVENT_MAP(CCircCtrl, COleControl)
 &nbsp;&nbsp; //{{AFX_EVENT_MAP(CCircCtrl)
 &nbsp;&nbsp; EVENT_CUSTOM("ClickIn", FireClickIn, VTS_XPOS_PIXELS&nbsp; VTS_YPOS_PIXELS)
 &nbsp;&nbsp; //}}AFX_EVENT_MAP
END_EVENT_MAP()
</code></pre>
<p>
The macro <b>EVENT_CUSTOM</b> associates the ClickIn event name with <code>FireClickIn</code>, the function that actually fires the event, and with the type definitions for the <code>x</code> and <code>y</code> parameters that ClickIn uses.</p>
<p>
ClassWizard adds an inline function to the <code>CCircCtrl</code> class declaration in CIRCCTL.H which, when called, fires the ClickIn event. The <code>FireClickIn</code> function simply calls the <code>FireEvent</code> function to do its work. Event functions like <code>FireClickIn</code> are added to provide a type-safe way of firing an event.</p>
<pre><code>class CCircCtrl : public COleControl
{
 &nbsp;&nbsp; ...
 &nbsp;&nbsp; //{{AFX_EVENT(CCircCtrl)
 &nbsp;&nbsp; void FireClickIn(OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {FireEvent(eventidClickIn,EVENT_PARAM(VTS_XPOS_PIXELS&nbsp; VTS_YPOS_PIXELS),
 &nbsp;&nbsp; x, y);}
 &nbsp;&nbsp; //}}AFX_EVENT
 &nbsp;&nbsp; ...
}
</code></pre>
</font></BODY>
</HTML>

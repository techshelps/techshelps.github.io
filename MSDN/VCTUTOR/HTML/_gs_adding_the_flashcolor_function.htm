<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding the FlashColor Function</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_adding_the_flashcolor_function"></a>Adding the FlashColor Function</h1>
<p>
The FlashColor function paints the circle using the color value stored as the value of the FlashColor property. The code is similar to the code in the <code>OnDraw</code> function. The difference is that the <code>FlashColor</code> function paints the circle itself using the value of the FlashColor property, rather than that of the BackColor property, to fill the background of the ellipse.</p>
<p class=label>
<b>To implement the FlashColor function</b>
<ol>
<li>
On WizardBar, select CCircCtl to edit the CCIRCCTL.CPP file.<br><br></li>
<li>
Click the arrow on the action button, located on the right end of WizardBar, and select <b>Add Member Function</b>.<p class=tl>
The <b>Add Member Function</b> dialog box is displayed.</P></li>
<li>
In the <b>Function Type</b> edit box, type <code>void</code>. This is the type of value the function will return.<br><br></li>
<li>
In the <b>Function Declaration </b>edit box, type <code>FlashColor(CDC* pdc)</code>.<br><br></li>
<li>
Under <b>Access</b>, click <b>Protected</b>.<br><br></li>
<li>
Click <b>OK</b> to close the <b>Add Member Function</b> dialog box.<p class=tl>
This will add the following declaration in the protected section of CIRCCTL.H:</P><pre><code>void FlashColor(CDC* pdc);
</code></pre>
<p class=tl>
It will also add a function definition at the end of CIRCCTL.CPP and position the cursor in the function:</P><pre><code>void CCircCtrl::FlashColor(CDC* pdc)
{

}
</code></pre>
</li>
<li>
Add code to the function in CIRCCTL.CPP as shown:<pre><code>void CCircCtrl::FlashColor(CDC* pdc)
{
 &nbsp;&nbsp; CBrush* pOldBrush;
 &nbsp;&nbsp; CBrush flashBrush(TranslateColor(m_flashColor));
 &nbsp;&nbsp; CPen* pOldPen;
 &nbsp;&nbsp; CRect rc;

 &nbsp;&nbsp; GetClientRect(rc);
 &nbsp;&nbsp; GetDrawRect(&amp;rc);
 &nbsp;&nbsp; pOldBrush = pdc-&gt;SelectObject(&amp;flashBrush);
 &nbsp;&nbsp; pOldPen = (CPen*)pdc-&gt;SelectStockObject(BLACK_PEN);
 &nbsp;&nbsp; pdc-&gt;Ellipse(rc);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldPen);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldBrush);
}
</code></pre>
</li>
</ol>
<p>
The <code>flashBrush</code> variable constructs a solid brush using the value of the FlashColor property stored in <code>m_flashBrush</code>. Because <code>m_flashBrush</code> is an <b>OLE_COLOR</b> value, the <b>TranslateColor</b> function is called to convert it to a <b>COLORREF</b> value first. The code selects the brush into the device context <code>pdc</code>, making sure to retain the old brush value in <code>pOldBrush</code>. A stock black pen is also selected into the device context. The old pen value is saved in <code>pOldPen</code>. The ellipse is then drawn with the black pen and filled in with the color specified by the value of the FlashColor property. Finally, the code selects the original pen and brush back into the device context <code>pdc</code>. The solid brush created when <code>flashBrush</code> is constructed is deleted when the <code>flashBrush</code> destructor is called. This occurs when the <code>FlashColor</code> function returns and the <code>flashBrush</code> variable goes out of scope.</p>
</font></BODY>
</HTML>

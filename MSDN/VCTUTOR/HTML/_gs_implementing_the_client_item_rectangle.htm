<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing the Client Item Rectangle</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_the_client_item_rectangle"></a>Implementing the Client Item Rectangle</h1>
<p>
The AppWizard-provided implementation of <code>CContainerItem</code> does most of the work needed for Container, but some of its functionality needs to be enhanced.</p>
<p class=label>
<b>To implement the client item rectangle</b>
<ol>
<li>
Declare <code>m_rect</code> in the public attributes section of ContainerItem.h:<pre><code>CRect m_rect;&nbsp; // position within the document
</code></pre>
<p class=tl>
The AppWizard-provided implementation of <code>CContainerItem</code> assumed an arbitrary rectangle that locates the object in the container document. A <b>CRect</b> is needed to store the location and size of the object.</P></li>
<li>
Use ClassView to jump to the <code>CContainerItem</code> constructor in ContainerItem.cpp and initialize <code>m_rect</code>. Replace the //TODO comment with the following code:<pre><code>m_rect.SetRect(10, 10, 50, 50);
</code></pre>
</li>
<li>
Use ClassView to jump to <code>OnGetItemPosition</code> and replace its default implementation with the following code (leave the <code>ASSERT_VALID(this)</code> line):<pre><code>// return rect relative to client area of view
rPosition = m_rect;
</code></pre>
<p class=tl>
The AppWizard-provided implementation arbitrarily sets the rectangle to (10, 10, 210, 210) when requested by the framework. Because the rectangle for each <code>CContainerItem</code> item is now being tracked by <b>CRectTracker</b>, the framework’s request is satisfied by returning the <b>CRect</b> member, <code>m_rect</code>.</P><p class=tl>
In Container Step 2, this implementation is replaced with one that allows the server to negotiate the size of the object.</P><p class=tl>
The framework calls <b>COleClientItem::OnChangeItemPosition</b> on behalf of a server to change the position of the in-place window. The <code>CContainerItem</code> updates its <b>CRect</b> <code>m_rect</code> according to the value requested by the framework. This means that the container document has changed. Thus views need to be notified and the document needs to be marked as dirty according to normal framework document/view rules.</P><p class=tl>
In Container Step 2, the simple <b>UpdateAllViews</b> call is replaced with smart invalidation.</P></li>
<li>
Complete the implementation of <code>OnChangeItemPosition</code> by adding the following code in place of the //TODO comment:<pre><code>GetDocument()-&gt;UpdateAllViews(NULL);
m_rect = rectPos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 

// mark document as dirty
GetDocument()-&gt;SetModifiedFlag();
</code></pre>
</li>
<li>
Serialize the <b>CRect</b> <code>m_rect</code> member variable in <code>CContainerItem::Serialize</code>. <ul type=disc>
<li>
Replace the //TODO comment for storing code with:</li>
</ul>
<pre><code>ar &lt;&lt; m_rect;</code></pre>
<ul type=disc>
<li>
Replace the //TODO comment for loading code with:</li>
</ul>
<pre><code>ar &gt;&gt; m_rect;</code></pre>
</li>
<li>
Save the header and implementation files.</li>
</ol>
</font></BODY>
</HTML>

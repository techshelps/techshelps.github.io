<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exposing Autoclik's m_pt Indirectly</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_exposing_autoclik.92.s_m_pt_indirectly"></a>Exposing Autoclik’s m_pt Indirectly</h1>
<p>
In the following procedure, you will expose m_pt indirectly as a property and add code to implement it, while ClassWizard generates the stub handlers for it. ClassWizard enables you to implement methods and properties the same way you implement member functions.</p>
<p class=label>
<b><a name="_gs_to_indirectly_expose_the_m_pt_member_variable_in_the_dispatch_interface"></a>To indirectly expose the m_pt member variable in the dispatch interface</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Automation</b> tab.<br><br></li>
<li>
In the <b>Class name</b> box, select CAutoClickDoc, if it is not already selected.<br><br></li>
<li>
Click<b> Add Property</b>.<p class=tl>
The <b>Add Property</b> dialog box appears.</P></li>
<li>
In the <b>External name</b> box, type <code>x</code>.<br><br></li>
<li>
In the <b>Type</b> list box, select short.<br><br></li>
<li>
Under <b>Implementation</b>, select<b> Get/Set methods</b>.<br><br></li>
<li>
Click <b>OK</b>.<p class=tl>
This returns you to the<b> Automation</b> tab. The new property, listed as <code>x</code> in the <b>Name</b> list, is implemented with Get and Set member functions. The <b>Implementation</b> box shows:</P><pre><code>short GetX();
void SetX(short nNewValue);
</code></pre>
<p class=tl>
The gray glyph with a “C” indicates that there is code associated with these member functions.</P></li>
<li>
Click the<b> Edit Code</b> button. <br><br></li>
<li>
Implement the Get method with the following code (replace the //TODO comment and existing code):<pre><code>return m_pt.x;
</code></pre>
</li>
<li>
Implement the Set method with the following code (replace the //TODO comment)::<pre><code>m_pt.x = nNewValue;
Refresh();
</code></pre>
</li>
<li>
Repeat steps 1 through 11 for the <code>y</code> property, ending with:<pre><code>short CAutoClickDoc::GetY()
{
return m_pt.y;
}

void CAutoClickDoc::SetY(short nNewValue)
{
m_pt.y = nNewValue;
Refresh();
}
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The x and y members of a point are declared as <b>long</b> in Win32. This may generate the following warning when you build the project:</p><p class=tl>
<code>warning C4244: 'return' : conversion from 'long' to 'short', possible loss of data</code></P><p class=tl>
You can disregard the warning; it will not affect how Autoclik runs.</P></li>
</ol>
<p>
ClassView displays the new methods. You can examine AutoClickDoc.cpp to see how ClassWizard updated the dispatch map of the document class:</p>
<pre><code>BEGIN_DISPATCH_MAP(CAutoClickDoc, CDocument)
   //{{AFX_DISPATCH_MAP(CAutoClickDoc)
   DISP_PROPERTY_EX(CAutoClickDoc, "x", GetX, SetX, VT_I2)
   DISP_PROPERTY_EX(CAutoClickDoc, "y", GetY, SetY, VT_I2)
   //}}AFX_DISPATCH_MAP
END_DISPATCH_MAP()
</code></pre>
<p>
You can see how the information you entered in ClassWizard is reflected in the dispatch map. </p>
</font></BODY>
</HTML>

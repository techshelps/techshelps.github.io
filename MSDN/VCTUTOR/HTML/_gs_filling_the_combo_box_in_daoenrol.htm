<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filling the Combo Box in DaoEnrol</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_filling_the_combo_box_in_daoenrol"></a>Filling the Combo Box in DaoEnrol</h1>
<p>
A good place to fill the combo box with a list of course names is the <code>CSectionForm</code> override of <b>CDaoRecordView</b>’s <b>OnInitialUpdate</b> member function. As part of its own initialization, the form fills the combo box. The overall logic is as follows:
<ol>
<li>
Construct and open a <code>CCourseSet</code> recordset based on the Course table.<br><br></li>
<li>
Remove any current entries in the combo box.<br><br></li>
<li>
For each course name in <code>CCourseSet</code>, add the CourseID to the combo box.<br><br></li>
<li>
Set the selection to the first course name (as sorted) in the combo box.</li>
</ol>
<h3>Suggested Reading in the <i>Visual C++ Programmer’s Guide</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Record_Views.3a_.Filling_a_List_Box_from_a_Second_Recordset">
</object><a href=JavaScript:alink_1.Click()>Record Views: Filling a List Box from a Second Recordset</a></li>
</ul>
<p>
The code in the following procedure fills the combo box and also filters, parameterizes, and sorts the <code>CSectionSet</code> recordset. Filtering, parameterization, and sorting are explained in topics that follow. </p>
<p class=label>
<b><a name="_gs_to_fill_the_combo_box"></a>To fill the combo box</b>
<ol>
<li>
Using ClassView, expand the view of CSectionForm. <br><br></li>
<li>
Double-click <code>OnInitialUpdate</code> to jump to its definition in SectForm.cpp.<br><br></li>
<li>
Just after the first line:<pre><code>m_pSet = &amp;GetDocument()-&gt;m_sectionSet;
</code></pre>
<p class=tl>
add the code below (don’t replace any code):</P><pre><code>// Fill the combo box with all of the courses
CDaoEnrolDoc* pDoc = GetDocument();
pDoc-&gt;m_courseSet.m_strSort = "CourseID";

try
{
pDoc-&gt;m_courseSet.Open();
}
catch(CDaoException* e)
{
AfxMessageBox(e-&gt;
        m_pErrorInfo-&gt;m_strDescription);
e-&gt;Delete();
return;
}

// Filter, parameterize and sort the 
// CSectionSet recordset

m_pSet-&gt;m_strFilter = 
    "CourseID = CourseIDParam";
m_pSet-&gt;m_strCourseIDParam = 
    pDoc-&gt;m_courseSet.m_CourseID;
m_pSet-&gt;m_strSort = "SectionNo";
m_pSet-&gt;m_pDatabase = 
    pDoc-&gt;m_courseSet.m_pDatabase;
</code></pre>
<p class=tl>
Catch any exceptions so that errors are reported to the user. Unlike ODBC, DAO errors come directly from the underlying DAO object. Additional information about DAO errors can be found in the DAO SDK.</P><p class=tl>
You’ll add the necessary member declaration in the topic <a href="_gs_parameterizing_the_filter_in_daoenrol.htm">Parameterizing the Filter in DaoEnrol</a>. </P></li>
<li>
Next, after the last line:<pre><code>CDaoRecordView::OnInitialUpdate();
</code></pre>
<p class=tl>
add the following code:</P><pre><code>m_ctlCourseList.ResetContent();
if (pDoc-&gt;m_courseSet.IsOpen())
{ 
while(!pDoc-&gt;m_courseSet.IsEOF())
{
m_ctlCourseList.AddString(
pDoc-&gt;m_courseSet.m_CourseID);
pDoc-&gt;m_courseSet.MoveNext();
}
}
m_ctlCourseList.SetCurSel(0);
</code></pre>
</li>
<li>
Save your work.</li>
</ol>
</font></BODY>
</HTML>

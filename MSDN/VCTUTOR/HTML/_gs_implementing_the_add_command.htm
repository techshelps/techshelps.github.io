<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing the Add Command</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_the_add_command"></a><sup></sup>Implementing the Add Command</h1>
<p>
Step 3 implements a user interface for Add that closely parallels <b>CRecordView</b>’s default user interface for modifying an existing record. The user starts a new record with the Add command on the Record menu. </p>
<p>
In response to the Add command, the record view calls its <code>OnRecordAdd</code> member function and enters an “add mode” by setting an <code>m_bAddMode</code> data member to <b>TRUE</b>. The add mode is completed when the user moves off the record. The Step 3 implementation overrides the record view’s <b>OnMove</b> member function to implement completion of the add mode. The following procedures implement the add mode, and create a <b>CEdit</b> member variable used to turn on and off the read-only style of the Section edit control.</p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="ClassView">
</object><a href=JavaScript:alink_1.Click()>Overview: ClassView</a>, <i>Visual C++ User’s Guide</i><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="classview">
</object><a href=JavaScript:alink_2.Click()>ClassView Topics</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="classwiz">
</object><a href=JavaScript:alink_3.Click()>Using ClassWizard</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_MFC_CRecordset.3a3a.AddNew">
</object><a href=JavaScript:alink_4.Click()>CRecordset::AddNew</a>, <i>Microsoft Foundation Class Reference</i></li>
</ul>
<p class=label>
<b>To implement the Add mode</b>
<ol>
<li>
In the Attributes section of file SectionForm.h, add the protected <code>m_bAddMode</code> data member:<pre><code>protected:
BOOL m_bAddMode;
</code></pre>
</li>
<li>
Initialize <code>m_bAddMode</code> in the <code>CSectionForm</code> constructor in file SectionForm.cpp. (You can jump directly to the constructor from ClassView.) Add the following line after the <code>//}}AFX_DATA_INIT</code> line:<pre><code>m_bAddMode = FALSE;
</code></pre>
</li>
</ol>
<p>
In Steps 1 and 2 of the tutorial, the Section control was read-only because it was necessary to prevent the user from changing this primary key value of the Section record. In Step 3, you need to turn off the read-only style of the Section control when the user is in add mode. The control is still read-only if the user is in browse/update mode rather than add mode.</p>
<p>
To change the read-only style, you must call the <b>CEdit</b> member function <b>SetReadOnly</b> with the appropriate parameter. This requires a member variable of type <b>CEdit</b> in <code>CSectionForm</code>. At this point, the class has a <b>CString</b> data member representing the Section control, but you need a <b>CEdit</b> member variable as well.</p>
<p class=label>
<b>To define the CEdit member variable</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Member Variables</b> tab.<br><br></li>
<li>
In the <b>Class Name</b> box, select CSectionForm.<br><br></li>
<li>
In the <b>Control IDs</b> box, select <code>IDC_SECTION</code>, which is already associated with a <b>CString</b> member.<br><br></li>
<li>
Click <b>Add Variable</b> to open the <b>Add Member Variable</b> dialog box.<br><br></li>
<li>
In the <b>Member Variable Name</b> box, type the name <code>m_ctlSection</code>.<br><br></li>
<li>
In the <b>Category</b> box, select Control.<p class=tl>
Notice that the <b>Variable Type</b> box changes appropriately to <b>CEdit</b>.</P></li>
<li>
Click <b>OK</b> to close the <b>Add Member Variable</b> dialog box.<p class=tl>
Notice that a second member variable is now associated with the <code>IDC_SECTION</code> control ID. You access the control’s value through <code>m_pSet-&gt;m_SectionNo</code>. You access the control itself, to call its member functions, through <code>m_ctlSection</code>.</P></li>
<li>
Click <b>OK</b> to close ClassWizard.</li>
</ol>
<p>
The Add command initiates add mode and calls the recordset’s <b>AddNew</b> function to prepare a new record, but doesn’t add the record to the data source. The record isn’t actually added to the data source until a subsequent call to <code>OnMove</code> calls the recordset’s <b>Update</b> function.</p>
<p class=label>
<b>To implement the OnRecordAdd command handler function</b>
<ol>
<li>
Use ClassView to jump to the <code>OnRecordAdd</code> starter handler that ClassWizard created in SectionForm.cpp.<br><br></li>
<li>
Add the following code to implement the handler:<pre><code>// If already in add mode, complete the previous new record
if (m_bAddMode)
OnMove(ID_RECORD_FIRST);

CString strCurrentCourse = m_pSet-&gt;m_CourseID;
m_pSet-&gt;AddNew();
m_pSet-&gt;SetFieldNull(&amp;(m_pSet-&gt;m_CourseID), FALSE);
m_pSet-&gt;m_CourseID = strCurrentCourse;
m_bAddMode = TRUE;
m_ctlSection.SetReadOnly(FALSE);
UpdateData(FALSE);
</code></pre>
</li>
</ol>
<p>
The most important line of this code is the call to <b>CRecordset::AddNew</b>, which prepares a new record. The rest of the code does the following:
<ul type=disc>
<li>
If the user is already in add mode, complete the current record by simulating the user’s moving to another record. Moving to another record is the normal user interface for completing a record.<br><br></li>
<li>
Save the CourseID for the current record and use it as the default for the new record, based on the assumption that more often than not the user will want to add another section for the course currently being viewed.<br><br></li>
<li>
In add mode, change the Section control to read/write rather than read-only, so the user can enter a new section number.<br><br></li>
<li>
If you are working through the DaoEnrol tutorial, proceed to the topic <a href="_gs_updating_the_data_source_with_the_added_record_in_daoenrol.htm">Updating the Data Source with the Added Record in DaoEnrol</a>.<br><br></li>
<li>
If you are working through the Enroll tutorial, proceed to the topic <a href="_gs_updating_the_data_source_with_the_added_record.htm">Updating the Data Source with the Added Record</a>.</li>
</ul>
</font></BODY>
</HTML>

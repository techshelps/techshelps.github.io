<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Serializing the Document</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_serializing_the_document"></a><sup></sup>Serializing the Document</h1>
<p>
Serializing a document occurs in two stages:
<ol>
<li>
The framework calls the document’s <code>Serialize</code> member function.<br><br></li>
<li>
That <code>Serialize</code> function calls the <code>Serialize</code> function of the stroke list. </li>
</ol>
<p>
In the following procedure, you’ll add code that implements serialization for Scribble’s documents. </p>
<p class=label>
<b>To implement serialization for Scribble documents</b>
<ul type=disc>
<li>
Use WizardBar to jump to the <code>Serialize</code> member function in <code>CScribbleDoc</code> and add the following line just before the closing brace:<pre><code>m_strokeList.Serialize( ar );
</code></pre>
<p class=tl>
Later, you’ll add code to both branches of the <b>if</b> statement.</P></li>
</ul>
<p>
Serialization uses an object of class <b>CArchive</b> to manage the connection to a disk file or other storage. A <b>CArchive</b> object, <b>ar</b>, is passed in as an argument. </p>
<p>
A call to the archive object’s <b>IsStoring</b> member function determines whether this is a store or a load operation. If the archive is for storing (saving), the stroke-list object’s own <code>Serialize</code> member function is called to store the stroke’s data to disk. If the archive is for loading, its <code>Serialize</code> member function is called to load data from the disk file. This constructs new <code>CStroke</code> objects to fill the list. The stroke list for a document being read in from disk must already be empty. </p>
<p>
Note that the stroke list already exists when <code>Serialize</code> reads data in. That’s because you declared it as an embedded object, like this:</p>
<pre><code>CTypedPtrList &lt;CObList, CStroke*&gt; m_strokeList;
</code></pre>
<p>
For an embedded object, as in Scribble, you call <code>Serialize</code> directly because you don’t want to create a second <b>CTypedPtrList</b> object (as you would if you used a pointer), and because you know the exact type of the object.</p>
</font></BODY>
</HTML>

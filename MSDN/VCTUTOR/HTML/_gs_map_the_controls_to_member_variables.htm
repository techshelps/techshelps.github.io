<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Map the Controls to Member Variables</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_map_the_controls_to_member_variables"></a><sup></sup>Map the Controls to Member Variables</h1>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="classwiz">
</object><a href=JavaScript:alink_1.Click()>Using ClassWizard</a>, <i>Visual C++ User’s Guide</i><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_CWnd.3a3a.DoDataExchange">
</object><a href=JavaScript:alink_2.Click()>CWnd::DoDataExchange</a>, <i>Microsoft Foundation Class Reference</i><br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Defining_Member_Variables_for_DDX">
</object><a href=JavaScript:alink_3.Click()>Defining Member Variables for DDX</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_ClassWizard_and_Dialog_Data_Validation">
</object><a href=JavaScript:alink_4.Click()>ClassWizard and Dialog Data Validation</a>, <i>Visual C++ Programmer’s Guide</i></li>
</ul>
<p>
Scribble must be able to retrieve the values that the user enters in the Thin Pen Width and Thick Pen Width boxes. MFC defines a mechanism that automates the process of gathering values from a dialog box; this mechanism is called a “data map.” In the same way that a message map binds a user-interface element with a member function, a data map binds a dialog-box control with a member variable. The value of the member variable reflects the status or the contents of the control. By adding entries to <code>CPenWidthsDlg</code>’s data map, you can retrieve the values entered in the Thin Pen Width and Thick Pen Width boxes.</p>
<p>
For Scribble, the widths of the thin and thick pens must be between 1 and 20. You can enforce these conditions by using the automated data validation that data maps provide. If the user enters values that fall outside this range, the application displays a message box stating the legal range and allows the user to enter new values. </p>
<p class=label>
<b>To map the controls of the Pen Widths dialog box to member variables</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b> and click the <b>Member Variables</b> tab.<p class=tl>
This tab, shown in the figure below, contains a list box displaying the mapping between controls and member variables.</P></li>
<li>
In the <b>Class name</b> list, select <code>CPenWidthsDlg</code>.<p class=tl>
At the moment the box displays only the IDs for the controls because you haven’t yet specified which member variables the controls correspond to.</P></li>
<li>
Select <code>IDC_THIN_PEN_WIDTH</code> and then click the <b>Add Variable</b> button.<p class=tl>
The <b>Add Member Variable</b> dialog box appears.</P></li>
<li>
In the <b>Member variable name</b> box, specify <code>m_nThinWidth</code> as the variable name.<br><br></li>
<li>
From the<b> Variable type</b> list box, click <code>int</code>. <br><br></li>
<li>
Click <b>OK</b> to add the member variable to the class.<p class=tl>
Notice the changes in the <b>MFC ClassWizard </b>dialog box:</P><ul type=disc>
<li>
The member name and type you specified now appear in the <b>Control IDs</b> list.<br><br></li>
<li>
<b>Description</b> reads “int with validation”.<br><br></li>
<li>
Two new edit boxes (<b>Minimum Value</b> and <b>Maximum Value</b>) appear to receive the validation parameters appropriate for an integer. These correspond to the edit boxes you added to the dialog box resource.</li>
</ul>
</li>
<li>
In the <b>Minimum Value</b> and <b>Maximum Value</b> boxes, enter <code>1</code> and <code>20</code>, respectively.<br><br></li>
<li>
Repeat steps 3 through 7 for the control <code>IDC_THICK_PEN_WIDTH</code>. Specify <code>m_nThickWidth</code> as the member name, click <code>int</code>, and enter lower and upper limits of <code>1</code> and <code>20</code>.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
You’ve now completed the data map connecting the Pen Widths dialog box to the <code>CPenWidthsDlg</code> class. You can view the <code>m_nThickWidth</code> and <code>m_nThinWidth</code> member variables in ClassView under the <code>CPenWidthsDlg</code> class.</p>
<p class=label>
<b>The Member Variables Tab</b></p>
<p>
<img src="ct0228s.gif" border=0></p>
<p>
ClassWizard inserts declarations into the data map of PenWidthsDlg.h for the member variables you specified in the <b>Add Member Variable</b> dialog box.</p>
<p>
ClassWizard also makes changes to PenWidthsDlg.cpp after you’ve mapped the controls to member variables. Examine these changes by opening PenWidthsDlg.cpp.</p>
<p>
Notice that ClassWizard has initialized the member variables in the constructor and provided an implementation for <b>DoDataExchange</b>, which is a member function defined by <b>CWnd</b> (the base class of <b>CDialog</b>). The framework calls <b>DoDataExchange</b> whenever values have to be moved between the member variables in the class and the controls in the dialog box on screen (for example, when first displaying the dialog box on the screen or when the user closes the dialog box by clicking <b>OK</b>). </p>
<p>
The <b>DoDataExchange</b> function is implemented using DDX and DDV function calls. A DDX (for Dialog Data eXchange) function specifies which control in the dialog box corresponds to a particular member variable and transfers the data between the two. A DDV (for Dialog Data Validation) function specifies the validation parameters for a particular member variable, ensuring that its value is legal. The DDX and DDV function calls shown in PenWidthsDlg.cpp reflect the mapping and validation parameters you specified with ClassWizard.</p>
<p>
Notice that the DDV function call for a given member variable immediately follows the DDX function call for that variable. This is a rule you must follow if you choose to manually edit the contents of the data map.</p>
</font></BODY>
</HTML>

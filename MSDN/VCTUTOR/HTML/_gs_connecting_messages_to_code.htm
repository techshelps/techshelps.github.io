<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting Messages to Code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_connecting_messages_to_code"></a><sup></sup>Connecting Messages to Code</h1>
<p>
In this topic, instead of directly adding lines of code to a file in the text editor, you’ll first use WizardBar to make connections between Windows messages and their handler functions. ClassWizard adds an entry to the message map in ScribbleView.cpp for class <code>CScribbleView</code> and writes a default member function definition to the same file for the handler function. Then, as described in the next topic, <a href="_gs_adding_the_message.2d.handler_functions.htm">Adding the Message-Handler Functions</a>, you use WizardBar to jump directly to the starter member function, and you fill in the function’s code.</p>
<p class=label>
<b>To connect the messages to Scribble’s code</b>
<ol>
<li>
Using WizardBar, from the <b>Class</b> combo box, select CScribbleView. Click the arrow on the action button on the right end of WizardBar. Click <b>Add Windows Message Handler</b>.<br><br></li>
<li>
In the <b>New Windows Message Handler </b>dialog box, select <b>WM_LBUTTONDOWN</b> from the <b>New Windows Messages to Handle</b> list. Click <b>Add Handler</b>.<p class=tl>
You won’t fill in the handler just yet.</P></li>
<li>
Repeat steps 2 and 3 for the additional mouse messages: <b>WM_LBUTTONUP</b> and <b>WM_MOUSEMOVE</b>.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
After you click <b>Add Handler</b>, ClassWizard does the following tasks to associate each of the three messages with its handler and to greatly simplify your work:
<ul type=disc>
<li>
Adds the following function declarations for the handlers to the <code>CScribbleView</code> class declaration in file ScribbleView.h: <pre><code>&nbsp;&nbsp;&nbsp;afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
 &nbsp; afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
 &nbsp; afx_msg void OnMouseMove(UINT nFlags, CPoint point);
</code></pre>
</li>
<li>
Adds the following message-map entries for the message-to-handler connections in <code>CScribbleView</code>’s message map in file ScribbleView.cpp:<pre><code>ON_WM_LBUTTONDOWN()
ON_WM_LBUTTONUP()
ON_WM_MOUSEMOVE()
</code></pre>
</li>
<li>
Adds the appropriate function definitions (with a default body) to file ScribbleView.cpp. For example, for <code>OnLButtonDown</code>:<pre><code>void CScribbleView::OnLButtonDown( UINT nFlags, CPoint point )
{
 &nbsp;&nbsp; // TODO: Add your message handler code here 
 &nbsp;&nbsp; // and/or call default
 &nbsp;&nbsp; CView::OnLButtonDown( nFlags, point );
}
</code></pre>
<p class=tl>
Notice that ClassWizard embeds a comment reminding you what to do and adds a call to the <code>CView::OnLButtonDown</code>. </P></li>
</ul>
</font></BODY>
</HTML>

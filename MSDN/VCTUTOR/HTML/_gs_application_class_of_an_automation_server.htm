<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Class of an Automation Server</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_application_class_of_an_automation_server"></a>Application Class of an Automation Server</h1>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Use ClassView to open views to a project's AppWizard-generated files. If you are unfamiliar with ClassView, read <a href="_gs_opening_a_class_with_classview.htm">Opening a Class with ClassView</a> in the Scribble tutorial. </p>
<h3>Suggested Reading in the <i>Visual C++ Programmer’s Guide</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Automation_Servers">
</object><a href=JavaScript:alink_1.Click()>Automation Servers</a><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="automation">
</object><a href=JavaScript:alink_2.Click()>ClassWizard: Automation Support</a></li>
</ul>
<p>
The work of enabling an MFC Automation server application is done mostly in the <code>InitInstance</code> member function of your application’s <b>CWinApp</b>-derived class. AutoClik’s application class is found in AutoClik.cpp. AppWizard provides this code for you.</p>
<p>
All MFC OLE applications require the following call to <b>AfxOleInit</b>, which initializes the OLE DLLs so they can call OLE interfaces:</p>
<pre><code>if (!AfxOleInit())
{
   AfxMessageBox(IDP_OLE_INIT_FAILED);
   return FALSE;
}
</code></pre>
<p>
All MFC Automation server applications, as well as ActiveX object servers, require a Class ID. The call to the <b>ConnectTemplate</b> member function of class <b>COleTemplateServer </b>registers the Class ID in the registry. </p>
<pre><code>static const CLSID BASED_CODE clsid =
{ 0x2106e720, 0xaef8, 0x101a, { 0x90, 0x5, 0x0, 0xdd, 0x1, 0x8, 0xd6, 0x51 } };

...

// Connect the COleTemplateServer to the document template.
//&nbsp; The COleTemplateServer creates new documents on behalf
//&nbsp; of requesting OLE containers by using information
//&nbsp; specified in the document template.
m_server.ConnectTemplate(clsid, pDocTemplate, FALSE);
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The numbers shown in the <b>clsid </b>line are generated at random, so the numbers in your code will be different from the ones shown here.</p>
<p>
A framework application that is an Automation server can use <b>COleTemplateServer::UpdateRegistry </b>to register itself as an Automation server (OLE Application Type: <b>OAT_DISPATCH_OBJECT</b>). This AppWizard-provided code is optional. </p>
<pre><code>m_server.UpdateRegistry(OAT_DISPATCH_OBJECT);
COleObjectFactory::UpdateRegistryAll();
</code></pre>
<p>
Alternatively, you can register your application by using one of the two other methods:
<ul type=disc>
<li>
Manually merge the AppWizard-provided AUTOCLIK.REG registration file into the Windows registration file, using REGEDIT.<br><br></li>
<li>
Programmatically merge the registration as one of the tasks of your application’s installation program.</li>
</ul>
</font></BODY>
</HTML>

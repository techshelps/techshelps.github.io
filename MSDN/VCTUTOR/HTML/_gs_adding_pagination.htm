<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Pagination</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_adding_pagination"></a>Adding Pagination</h1>
<p>
Scribble is a fairly simple application, so it supports drawings of only one size, and each one fits on a single page. To illustrate pagination, Step 5 of Scribble prints each drawing as a two-page document: a title page, and the drawing itself.</p>
<p>
To add pagination, you’ll:
<ul type=disc>
<li>
<a href="#_gs_to_modify_onprepareprinting">Modify the OnPreparePrinting member function</a>.<br><br></li>
<li>
<a href="#_gs_to_override_onprint">Override the default OnPrint member function</a>.<br><br></li>
<li>
<a href="_gs_adding_the_helper_functions.htm">Add two new helper functions</a>: <code>PrintTitlePage</code>, which prints the title page, and <code>PrintPageHeader</code>, which prints a header on the drawing page.</li>
</ul>
<p class=label>
<b><a name="_gs_to_modify_onprepareprinting"></a>To modify OnPreparePrinting</b>
<ul type=disc>
<li>
Use WizardBar to jump to the <code>OnPreparePrinting</code> function definition of class <code>CScribbleView</code>, and replace the existing comment and code with the following code:<pre><code>pInfo-&gt;SetMaxPage(2);&nbsp; // the document is two pages long:
// the first page is the title page
// the second page is the drawing 
</code></pre>
</li>
</ul>
<p>
This function specifies the length of the document by calling <b>SetMaxPage</b> for the <i>pInfo</i> parameter. Since all Scribble documents are two pages long, the function uses a numeric constant rather than a variable to represent the number of the last page of the document. The title page and the drawing page are numbered 1 and 2, respectively. Later, you’ll add a Scribble-specific version of the call to <b>DoPreparePrinting</b> that AppWizard generated (which you just replaced), when you <a href="_gs_enhance_scribble.92.s_print_preview.htm">enhance Scribble’s Print Preview</a>. This function displays the Print dialog box and creates a device context for the printer.</p>
<p class=label>
<b><a name="_gs_to_override_onprint"></a>To override OnPrint</b>
<ol>
<li>
Use WizardBar to open ScribbleView.cpp in the text editor.<br><br></li>
<li>
Click the arrow on the action button, located on the right end of WizardBar.<br><br></li>
<li>
On the menu, Click <b>Add Virtual Function</b>.<p class=tl>
The <b>New Virtual Override</b> dialog box appears.</P></li>
<li>
From the <b>New Virtual Functions</b> list, select <code>OnPrint</code>.<br><br></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
Replace the //TODO comments and existing code with the following code:<pre><code>if (pInfo-&gt;m_nCurPage == 1)     // page no. 1 is the title page
{
PrintTitlePage(pDC, pInfo);
}
else
{
CString strHeader = GetDocument()-&gt;GetTitle();

PrintPageHeader(pDC, pInfo, strHeader);
// PrintPageHeader() subtracts out from the pInfo-&gt;m_rectDraw the
// amount of the page used for the header.
pDC-&gt;SetWindowOrg(pInfo-&gt;m_rectDraw.left,-pInfo-&gt;m_rectDraw.top);

// Now print the rest of the page
OnDraw(pDC);
}
return;
</code></pre>
</li>
</ol>
<p>
The behavior of the <code>OnPrint</code> member function depends on which of the two pages is being printed. If the title page is being printed, <code>OnPrint</code> simply calls the <code>PrintTitlePage</code> function and then returns. If it’s the drawing page, <code>OnPrint</code> calls <code>PrintPageHeader</code> to print the header and then calls <code>OnDraw</code> to do the actual drawing. Before calling <code>OnDraw</code>, <code>OnPrint</code> sets the window origin at the upper-left corner of the rectangle defined by <b>m_rectDraw</b>; this rectangle was reduced by <code>PrintPageHeader</code> to account for the size of the header. This keeps the drawing from overlapping the header. </p>
<p>
Notice that the drawing itself isn’t divided into multiple pages. Consequently, <code>OnDraw</code> never has to display just a portion of the drawing (for example, it never has to display the section that fits on a particular page without displaying the surrounding sections). Either the title page is being printed and <code>OnDraw</code> isn’t called at all, or else the drawing page is being printed and <code>OnDraw</code> displays the entire drawing at once. </p>
<p>
This also explains why <code>CScribbleView</code> doesn’t override the <b>OnPrepareDC</b> member function: there’s no need to adjust the viewport origin or clipping region depending on which page is being printed.</p>
</font></BODY>
</HTML>

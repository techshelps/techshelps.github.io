<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Activation by Using a Mouse Click</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_activation_by_using_a_mouse_click"></a>Implementing Activation by Using a Mouse Click</h1>
<p>
Container has a standard user interface for selecting and activating embedded objects. A single click selects an object; a double-click activates it. If the object is selected, the user can move or resize it, or in general, manipulate the object as a whole. If the object is activated in place, the user can edit it. </p>
<p>
Implementing the <b>OnLButtonDown</b> handler so that a single click selects the embedded object follows this scheme:
<ul type=disc>
<li>
Call <code>HitTestItems</code> to find the <code>CContainerItem</code> at the point where the mouse was clicked.<br><br></li>
<li>
Set the selection to be this <code>CContainerItem</code>. Note that if no <code>CContainerItem</code> is located at the point where the mouse was clicked, nothing (<b>NULL</b>) is selected.<br><br></li>
<li>
If something is selected, set up a tracker rectangle (<b>CRectTracker</b>) around the selected object. A <b>CRectTracker</b> object is short lived. It exists only during the time a mouse event is being handled, or as you will see later, during the time a window is being repainted. In the case of a single click, the <b>CRectTracker</b> paints a rectangle with resize handles around the object.<p class=tl>
If the item is clicked, <b>CRectTracker::Track</b> captures the mouse, enabling the user to drag the tracker rectangle around on the screen and to:</P><ul type=disc>
<li>
Resize the item if the click was on a handle.<br><br></li>
<li>
Drag the item if the click was inside the rectangle.</li>
</ul>
<p class=tl>
When the user releases the mouse button, <b>CRectTracker</b> updates its public member variable, <b>m_rect</b>, which represents the new size of the object.</P></li>
<li>
If the user has resized the object (indicated by a value of <b>TRUE</b> being returned from <b>CRectTracker::Track</b>), update the <code>m_rect</code> of the <code>CContainerItem</code> object.</li>
</ul>
<p class=label>
<b>To implement the OnLButtonDown mouse handler</b>
<ol>
<li>
Using WizardBar, select CContainerView from the Class list. <br><br></li>
<li>
Click the action arrow located on the right end of WizardBar.<br><br></li>
<li>
Click <b>Add Windows Message Handler</b>.<p class=tl>
The <b>New Windows Message and Event Handlers</b> dialog box appears.</P></li>
<li>
From the <b>New Windows messages/events</b> list box, select WM_LBUTTONDOWN. <br><br></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
Implement <code>CContainerView::OnLButtonDown</code> in ContainerView.cpp by replacing the //TODO comments with the following code.<pre><code>CContainerItem* pItemHit = HitTestItems(point);
SetSelection(pItemHit);

if (pItemHit != NULL)
{
CRectTracker tracker;
SetupTracker(pItemHit, &amp;tracker);

UpdateWindow();
if (tracker.Track(this, point))
{&nbsp;&nbsp; 
Invalidate();        
pItemHit-&gt;m_rect = tracker.m_rect;
GetDocument()-&gt;SetModifiedFlag();
}
}    
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Your code should come before, but not replace, the call to the base class (<b>CView</b>) that WizardBar adds to the starter handler.</p><p class=tl>
For now, the entire client area of the view is invalidated. Smarter invalidation is implemented in Step 2.</P></li>
</ol>
<p>
The helper function <code>SetupTracker</code> sets up the styles of the tracker rectangle according to the state of the <code>CContainerItem</code> object, such as whether it has been selected. </p>
<p class=label>
<b>To implement the helper function CContainerView::SetupTracker</b>
<ol>
<li>
In ClassView, right-click the class <code>CContainerView</code>.<br><br></li>
<li>
From the pop-up menu, click <b>Add Member Function</b>.<br><br></li>
<li>
Fill in the <b>Add Member Function</b> dialog box as follows:<ul type=disc>
<li>
In the <b>Function Type</b> box, type <code>void</code>.<br><br></li>
<li>
In the <b>Function Declaration</b> box, type:</li>
</ul>
<pre><code>SetupTracker(CContainerItem* pItem, CRectTracker* pTracker)
</code></pre>
<ul type=disc>
<li>
In the <b>Access</b> area, select <b>Public</b>, and click <b>OK</b>.</li>
</ul>
</li>
<li>
Implement the helper function with the following code: <pre><code>pTracker-&gt;m_rect = pItem-&gt;m_rect;

if (pItem == m_pSelection)
pTracker-&gt;m_nStyle |= CRectTracker::resizeInside;

if (pItem-&gt;GetType() == OT_LINK)
pTracker-&gt;m_nStyle |= CRectTracker::dottedLine;
else
pTracker-&gt;m_nStyle |= CRectTracker::solidLine;

if (pItem-&gt;GetItemState() == COleClientItem::openState ||
pItem-&gt;GetItemState() == COleClientItem::activeUIState)
{    
pTracker-&gt;m_nStyle |= CRectTracker::hatchInside;
}
</code></pre>
</li>
</ol>
<p>
The <b>OnLButtonDblClick</b> handler needs to be implemented so that if the user double-clicks, the object is opened (<b>OLEIVERB_OPEN</b>). How the object is opened depends on whether the server supports in-place editing. If the user presses CTRL while double-clicking, the Open verb of the object should be called. Otherwise, call the primary verb, the meaning of which is determined by the server.</p>
<p class=label>
<b>To implement the OnLButtonDblClick mouse handler</b>
<ol>
<li>
Using WizardBar, select CContainerView from the Class list. <br><br></li>
<li>
Click the action arrow located on the right end of WizardBar.<br><br></li>
<li>
Click <b>Add Windows Message Handler</b>.<p class=tl>
The <b>New Windows Message and Event Handlers</b> dialog box appears.</P></li>
<li>
From the <b>New Windows messages/events</b> list box, select WM_LBUTTONDBLCLK. <br><br></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
Implement <code>CContainerView::OnLButtonDblClk</code> in ContainerView.cpp by replacing the //TODO comment inside the starter handler code that WizardBar generates with the following code:<pre><code>OnLButtonDown(nFlags, point);

if (m_pSelection != NULL)
{
m_pSelection-&gt;DoVerb(GetKeyState(VK_CONTROL) &lt; 0 ? 
OLEIVERB_OPEN : OLEIVERB_PRIMARY, this);
}
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Your code should come before, but not replace, the call to the base class (<b>CView</b>) that WizardBar adds to the starter handler.</p></li>
</ol>
</font></BODY>
</HTML>

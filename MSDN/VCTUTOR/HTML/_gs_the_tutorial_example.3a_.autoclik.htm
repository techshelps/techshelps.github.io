<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Tutorial Example: AutoClik</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_the_tutorial_example.3a_.autoclik"></a><sup></sup>The Tutorial Example: AutoClik</h1>
<p>
In this tutorial you will create <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_MFC_AutoClik">
</object><a href=JavaScript:alink_1.Click()>AutoClik</a>, a simple Automation server application. When running as a stand-alone application, AutoClik displays&nbsp; text at the last point at which the user clicked the mouse. The user can change the text displayed by specifying it in a dialog box. When running as an Automation server, AutoClik allows Automation clients to simulate both the mouse clicking and the changing of text (without opening the dialog box).</p>
<p>
An Automation server is not necessarily an ActiveX object server; AutoClik isn’t. AutoClik could have been implemented as both an Automation server and an ActiveX object server, but this tutorial focuses entirely on adding Automation server functionality to an application.</p>
<h2>How Automation Clients Access Automation Objects</h2>
<p>
For an Automation client to drive an Automation server, the client must gain knowledge of one or more “dispatch interfaces” of the server. A dispatch interface is the external programming interface of some grouping of functionality exposed by the Automation server. AutoClik provides two dispatch interfaces. The first exposes AutoClik’s mouse clicking and text data entry functions. The second, introduced for tutorial rather than practical reasons, represents a simple structure: a point given by x and y coordinates.</p>
<p>
A dispatch interface consists of two types of programming interfaces: properties<i> </i>and methods. AutoClik exposes both. An Automation client can get or set the <code>x</code> and <code>y</code> properties representing the location of the text in AutoClik’s window. Or&nbsp; an Automation client can set the x and y coordinates and the text all at once by using a method with three parameters — <code>x</code>, <code>y</code>, and <code>text</code>.</p>
<p>
To exercise AutoClik’s Automation functionality, you will use the Autodriv sample application provided with Visual C++. Autodriv is a simple Automation client application. The following preview of AutoClik illustrates how you can drive an Automation server using Autodriv.</p>
</font></BODY>
</HTML>

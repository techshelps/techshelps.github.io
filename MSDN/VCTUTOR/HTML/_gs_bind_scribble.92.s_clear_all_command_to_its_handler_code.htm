<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bind Scribble's Clear All Command to Its Handler Code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_bind_scribble.92.s_clear_all_command_to_its_handler_code"></a>Bind Scribble’s Clear All Command to Its Handler Code</h1>
<p>
As discussed in the previous topic, <a href="_gs_binding_scribble.92.s_commands.htm#_gs_which_command.2d.target_class_gets_the_handler.3f">Which Command-Target Class Gets the Handler?</a>, Scribble’s Clear All command is bound to the document class. </p>
<p class=label>
<b><a name="_gs_to_create_the_starter_handler_for_scribble.92.s_clear_all_command"></a>To create the starter handler for Scribble’s Clear All command</b>
<ol>
<li>
In FileView, expand the Source Files folder, if necessary, and double-click the icon for ScribbleDoc.cpp to open the file.<p class=tl>
Recall the decision to handle the command from the document rather than the view. That’s why the handler for Clear All will be placed in <code>CScribbleDoc</code>.</P></li>
<li>
Click the action button arrow located on the right end of WizardBar.<br><br></li>
<li>
Click <b>Add Windows Message Handler</b>.<p class=tl>
The <b>New Windows Message Handler</b> dialog box appears.</P></li>
<li>
In the <b>Class or object to handle</b> box, select ID_EDIT_CLEAR_ALL.<br><br></li>
<li>
In the <b>New Windows messages to handle</b> list box, select COMMAND.<p class=tl>
You can see both COMMAND and UPDATE_COMMAND_UI in the <b>New Windows messages to handle</b> list box. These are the two events for which the framework provides ClassWizard support in creating your command handler code. That’s why, for commands, these are always the choices you see in this list box. In other cases, you might see other things listed — a list of Windows messages, for example, when the selected item is the name of a window or view class.</P><p class=tl>
Later in the lesson, in <a href="_gs_update_scribble.92.s_clear_all_menu_item.htm">Update Scribble’s Clear All Menu Item</a>, you’ll see how UPDATE_COMMAND_UI is used for this menu command.</P></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
In the <b>Add Member Function</b> dialog box, click <b>OK</b> to accept the name <code>OnEditClearAll</code>.<p class=tl>
The following figure shows the selections from steps 3 through 7. </P><p class=label>
<b>Clear All in WizardBar</b>
<p>
<img src="ct0222s.gif" border=0></P><p class=tl>
ClassWizard creates the starter handler function at the end of ScribbleDoc.cpp and highlights the //TODO comments where you will add the code, which is described in the next procedure, <a href="_gs_completing_the_oneditclearall_function.htm#_gs_to_complete_the_oneditclearall_handler_function">To complete the OnEditClearAll handler function</a>.</P></li>
</ol>
</font></BODY>
</HTML>

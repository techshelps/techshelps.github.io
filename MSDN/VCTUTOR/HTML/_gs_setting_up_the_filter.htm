<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up the Filter</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_setting_up_the_filter"></a><sup></sup>Setting Up the Filter</h1>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You have already added the code to filter and parameterize the <code>CSectionSet</code> recordset (in <code>OnInitialUpdate</code>); the code in this topic is for illustrative purposes only. Do not add the code from this topic to your source files.</p>
<p>
A recordset filter determines what subset of records are selected from a table or query. To add a filter, you simply set the value of <b>CRecordset::m_strFilter</b> before calling <b>CRecordset::Open</b>. For example, the following code selects just the class section records for course MATH101:</p>
<pre><code>m_pSet-&gt;m_strFilter = "CourseID = 'MATH101'";
m_pSet-&gt;Open();
</code></pre>
<p>
Since the base class <b>CRecordView::OnInitialUpdate</b> calls <b>CRecordset::Open</b>, all you need to do to initially select the records for MATH101, for example, is replace the following AppWizard implementation of <code>OnInitialUpdate</code>:</p>
<pre><code>void CSectionForm::OnInitialUpdate()
{
   m_pSet = &amp;GetDocument()-&gt;m_sectionSet;
   CRecordView::OnInitialUpdate();
}
</code></pre>
<p>
with:</p>
<pre><code>void CSectionForm::OnInitialUpdate()
{
   m_pSet = &amp;GetDocument()-&gt;m_sectionSet;
   m_pSet-&gt;m_strFilter = "CourseID = 'MATH101'";
   CRecordView::OnInitialUpdate();
}
</code></pre>
<p>
The filter can be any logical expression that is legal for the SQL <b>WHERE</b> clause. For example, the following is legal:</p>
<pre><code>m_pSet-&gt;m_strFilter = 
            "CourseID = 'MATH101' AND InstructorID = 'ROGERSN'";
</code></pre>
<p>
Examine the <code>OnInitialUpdate</code> code you added earlier. It shows the filter for <code>CSectionSet</code> in Enroll Step 2.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;In Enroll, filter strings typically use a parameter placeholder, “?”, rather than assigning a specific literal value, such as “MATH101”, at compile time. If you do use literal strings in your filters (or other parts of the SQL statement), you may have to “quote” such strings with a DBMS-specific “literal prefix” and “literal suffix” character(s). For example, the code in this topic uses a single quote character to bracket the value assigned as the filter, “MATH101”. You may also encounter special syntactic requirements for operations such as outer joins, depending on your DBMS. Use ODBC functions to obtain this information from your driver for the DBMS. For example, call <b>::SQLGetTypeInfo</b> for a particular data type, such as <b>SQL_VARCHAR</b>, to request the <b>LITERAL_PREFIX</b> and <b>LITERAL_SUFFIX</b> characters. </p>
</font></BODY>
</HTML>

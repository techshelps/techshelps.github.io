<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Command Handlers for Copy and Paste</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_adding_command_handlers_for_copy_and_paste"></a>Adding Command Handlers for Copy and Paste</h1>
<p>
AppWizard has already added the <b>Copy</b> and <b>Paste</b> menu items to Container’s <b>Edit</b> menu, but these commands still need to be implemented. The <b>COleDocument</b> implementation already provides an <b>UPDATE_COMMAND_UI</b> handler for the <b>Paste</b> command. This handler enables the <b>Paste</b> command if there is anything on the Clipboard.</p>
<p class=label>
<b>To implement the Copy command on the Edit menu</b>
<ol>
<li>
On WizardBar, select CContainerView and ID_EDIT_COPY. Click the action button arrow located on the right end of WizardBar and then click <b>Add Windows Message Handler</b>.<br><br></li>
<li>
In the <b>New Windows Message and Event Handlers</b> dialog box, click <b>Add Handler</b> for both the COMMAND and UPDATE_COMMAND_UI handlers for ID_EDIT_COPY and accept the default function names, <code>OnEditCopy</code> and <code>OnUpdateEditCopy</code>, respectively, in the <b>Add Member Function</b> dialog box.<br><br></li>
<li>
To implement the <b>Copy</b> command on the <b>Edit</b> menu, fill in the handler that WizardBar creates with the code below :<pre><code>if (m_pSelection != NULL)
m_pSelection-&gt;CopyToClipboard();
</code></pre>
<p class=tl>
The <b>Copy</b> command on the <b>Edit</b> menu copies the contents of the current selection to the Clipboard. Implementing the <b>Copy</b> command is easy because the framework function <b>COleClientItem::CopyToClipboard</b> does all the work.</P></li>
<li>
Fill in the handler for <code>OnUpdateEditCopy</code> with the following code:<pre><code>pCmdUI-&gt;Enable(m_pSelection != NULL);
</code></pre>
<p class=tl>
The <b>UPDATE_COMMAND_UI</b> handler for the <b>Copy</b> command enables the command if there is an active selection; otherwise, the command is disabled.</P></li>
</ol>
<p class=label>
<b>To implement the Paste command on the Edit menu</b>
<ol>
<li>
On WizardBar, select CContainerView and ID_EDIT_PASTE. Click the action button arrow located on the right end of WizardBar and then click <b>Add Windows Message Handler</b>.<br><br></li>
<li>
In the <b>New Windows Message and Event Handlers</b> dialog box, click <b>Add and Edit</b> for the COMMAND handler for ID_EDIT_PASTE and accept the default function name, <code>OnEditPaste</code>, in the <b>Add Member Function</b> dialog box.<br><br></li>
<li>
Implement the <b>Paste</b> command with the following code:<pre><code>CContainerItem* pItem = NULL;

TRY
{
// Create new item connected to this document.
CContainerDoc* pDoc = GetDocument();
ASSERT_VALID(pDoc);
pItem = new CContainerItem(pDoc);
ASSERT_VALID(pItem);

// Initialize the item from clipboard data
if (!pItem-&gt;CreateFromClipboard())
AfxThrowMemoryException();    // any exception will do
ASSERT_VALID(pItem);

// update the size before displaying
pItem-&gt;UpdateFromServerExtent();

// set selection to newly pasted item
SetSelection(pItem);    
pItem-&gt;InvalidateItem();    
}
CATCH(CException, e)
{
if (pItem != NULL)
{
ASSERT_VALID(pItem);
pItem-&gt;Delete();
}    
AfxMessageBox(IDP_FAILED_TO_CREATE);
}
END_CATCH
</code></pre>
</li>
</ol>
<p>
The <b>Paste</b> command on the <b>Edit</b> menu is somewhat like the <b>Insert New Object</b> command on the <b>Edit</b> menu in that it creates a new <b>COleClientItem</b> object. Compare the above implementation of <code>OnEditPaste</code> with the one that AppWizard provided for <code>OnInsertObject</code>. Both share some code for constructing a new <code>CContainerItem</code>.</p>
<p>
The difference is that <code>OnInsertObject</code> initializes the item based on information requested from the user by means of a <b>COleInsertDialog</b> object as shown here:</p>
<pre><code>   // Initialize the item from the dialog data.
   if (!dlg.CreateItem(pItem))
      AfxThrowMemoryException();   // any exception will do
   ASSERT_VALID(pItem);
         
   // If item created from class list (not from file) then launch
   //   the server to edit the item.
   if (dlg.GetSelectionType() == COleInsertDialog::createNewItem)
      pItem-&gt;DoVerb(OLEIVERB_SHOW, this);
</code></pre>
<p>
The <code>OnEditPaste</code> function initializes the item from the Clipboard, using <b>COleClientItem::CreateFromClipboard</b> as shown below:</p>
<pre><code>   if (!pItem-&gt;CreateFromClipboard())
      AfxThrowMemoryException();
</code></pre>
</font></BODY>
</HTML>

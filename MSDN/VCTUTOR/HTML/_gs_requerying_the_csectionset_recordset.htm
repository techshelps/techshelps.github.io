<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Requerying the CSectionSet Recordset</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_requerying_the_csectionset_recordset"></a>Requerying the CSectionSet Recordset</h1>
<p>
Whenever the user selects a new course name from the combo box, Enroll must “requery” the <code>CSectionSet</code> recordset to refresh its records. By selecting a new course name, the user will see records only for the class sections of that course name. The existing <code>CSectionSet</code> recordset contains records for the previous course name. Requerying the recordset brings it up to date for the new course name, using the current values of the filter and sort strings.</p>
<p>
When the user accepts a selection in the combo box, the <code>CSectionForm</code> record view gets a <b>CBN_SELENDOK</b> notification message. The record view uses its handler for this message to reselect records based on the course name selected, passing the course ID as a parameter.</p>
<p>
The following procedure describes how to use WizardBar to create this handler. </p>
<p class=label>
<b>To requery the CSectionSet recordset</b>
<ol>
<li>
From the <b>Window</b> menu, select SectionForm.cpp.<br><br></li>
<li>
From the WizardBar <b>Filter</b> combo box, select <code>IDC_COURSELIST</code>.<br><br></li>
<li>
In the <b>Members</b> combo box, select <code>CBN_SELENDOK</code>.<br><br></li>
<li>
The <b>New Windows Message and Event Handlers</b> dialog box opens.<br><br></li>
<li>
Click <b>Add Handler</b>.<br><br></li>
<li>
Click OK to accept the default name <code>OnSelendokCourselist</code>.<br><br></li>
<li>
Click <b>Edit Existing</b> to jump to the code created for the handler.<br><br></li>
<li>
In the editor window, add the following code in place of the //TODO comment:<pre><code>if (!m_pSet-&gt;IsOpen() )
return;
m_ctlCourseList.GetLBText(m_ctlCourseList.GetCurSel(),
m_pSet-&gt;m_strCourseIDParam);
m_pSet-&gt;Requery();
if (m_pSet-&gt;IsEOF())
{
m_pSet-&gt;SetFieldNull(&amp;(m_pSet-&gt;m_CourseID), FALSE);
m_pSet-&gt;m_CourseID = m_pSet-&gt;m_strCourseIDParam;&nbsp; 
}
UpdateData(FALSE);
</code></pre>
</li>
<li>
Save your work.</li>
</ol>
<p>
This code requeries records from the database into the recordset, based on the parameter value in <code>m_strCourseIDParam</code>. The parameter value is set to the currently selected course name from the Course List combo box before requerying the database.</p>
<p>
If you requery and it turns out that the selected course name has no class sections, the recordset is initialized with Null database field values except for CourseID. (In database terminology, Null means "having no value" and is not the same as <b>NULL</b> in C++.)</p>
<p>
If you are working through the DaoEnrol tutorial, at this point you are ready to compile and run the application. After you have examined the working application, return to <a href="_gs_daoenrol_step_3.htm">DaoEnrol Step 3</a>.</p>
</font></BODY>
</HTML>

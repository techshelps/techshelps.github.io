<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Autoclik's SetAllProps</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_implementing_autoclik.92.s_setallprops"></a>Implementing Autoclik’s SetAllProps</h1>
<p>
In the following procedure, you’ll add and implement <code>SetAllProps</code> as a method. <code>SetAllProps</code> sets the <code>m_pt</code> and <code>m_str</code> member variables, and updates the view.</p>
<p class=label>
<b>To add a method with parameters</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Automation</b> tab.<br><br></li>
<li>
Select CAutoClickDoc in the <b>Class name</b> box, if it is not already selected.<br><br></li>
<li>
Click <b>Add Method</b>.<p class=tl>
The <b>Add Method</b> dialog box appears.</P></li>
<li>
In the <b>External name</b> box, type <code>SetAllProps</code>. Accept ClassWizard’s proposal to reuse this as the Internal Name, which is the name of the class member function.<br><br></li>
<li>
In the <b>Return type</b> box, select void.<br><br></li>
<li>
Click in the <b>Parameter list</b> box to begin entering information for the first parameter of the <code>SetAllProps</code> method.<p class=tl>
This will highlight the first blank row in the <b>Parameter</b> box.</P><ul type=disc>
<li>
Under the <b>Name</b> heading, type <code>x</code> in the <b>Name</b> box.<br><br></li>
<li>
If necessary, click under the <b>Type</b> heading, and select short.</li>
</ul>
</li>
<li>
Repeat step 7 for the <code>y</code> parameter, entering it in the row under the <code>x</code> parameter.<br><br></li>
<li>
Add the third parameter, <code>text</code>, selecting LPCTSTR from the <b>Type</b> drop-down list box.<br><br></li>
<li>
Click <b>OK</b>.<p class=tl>
This returns you to the <b>Automation</b> tab of ClassWizard, which shows the following implementation:</P><pre><code>void SetAllProps(short x, short y, LPCTSTR text);
</code></pre>
</li>
<li>
Click <b>Edit Code</b>.<p class=tl>
This takes you to the stub handler that ClassWizard created in AutoClickDoc.cpp:</P><pre><code>void CAutoClickDoc::SetAllProps(short x, short y, LPCTSTR text)
{
// TODO:&nbsp; Add your dispatch handler code here
}
</code></pre>
</li>
<li>
Implement the handler with the following code:<pre><code>m_pt.x = x;
m_pt.y = y;
m_str = text;
Refresh();
</code></pre>
</li>
</ol>
<p>
Take a look at the dispatch map for the <code>SetAllProps</code> method (in AutoClickDoc.cpp):</p>
<pre><code>BEGIN_DISPATCH_MAP(CAutoClickDoc, CDocument)
   //{{AFX_DISPATCH_MAP(CAutoClickDoc)
   ...
   DISP_FUNCTION(CAutoClickDoc, "SetAllProps", SetAllProps, VT_EMPTY, 
      VTS_I2 VTS_I2 VTS_BSTR)
   //}}AFX_DISPATCH_MAP
END_DISPATCH_MAP()
</code></pre>
<p>
The last four parameters of the <b>DISP_FUNCTION</b> entry for <code>SetAllProps</code> list the return type, <b>VT_EMPTY</b> for <b>void</b>, followed by the three parameters. You do not need to interpret the parameter types in dispatch maps; the framework interprets them at run time. But you can see that <b>VTS_I2</b> represents <b>short</b> and <b>VTS_BSTR</b> represents <b>LPCTSTR</b>.</p>
<pre><code>The last method you’ll implement is <a href="_gs_implementing_autoclik.92.s_showwindow.htm">ShowWindow</a>. 
</code></pre>
</font></BODY>
</HTML>

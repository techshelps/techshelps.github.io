<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Responding to Mouse Events</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_responding_to_mouse_events"></a>Responding to Mouse Events</h1>
<p>
To better understand how to implement FlashColor functionality, you need to understand the behavior the Circle control should have when the mouse is clicked inside it. When the left mouse button is pressed, the circle is painted using the color stored as the value of the FlashColor property. When the left mouse button is released, the circle is repainted using the color stored as the value of the BackColor property. Clicking in the circle causes it to flash.</p>
<p>
To implement the flash behavior, the Circle control must handle mouse events. These events are mapped to the following Windows mouse messages:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Message</b></td>
<td class=label width=61%><b>Response</b></td>
</tr>
<tr valign=top>
<td width=39%><b>WM_LBUTTONDOWN</b></td>
<td width=61%>Paints the circle with the color stored as the value of the FlashColor property.</td>
</tr>
<tr valign=top>
<td width=39%><b>WM_LBUTTONDBLCLK</b></td>
<td width=61%>Paints the circle with the color stored as the value of the FlashColor property.</td>
</tr>
<tr valign=top>
<td width=39%><b>WM_LBUTTONUP</b></td>
<td width=61%>Paints the circle with the color stored as the value of the BackColor property.</td>
</tr>
</table><br>
<p>
Notice that a <b>WM_LBUTTONDBLCLK</b> message is handled in the same manner as a <b>WM_LBUTTONDOWN</b> message. If the left mouse button is double-clicked in the circle, the desired flash effect occurs.</p>
<p>
The next step is to use ClassWizard to add a message handler for each of the three mouse messages.</p>
<p class=label>
<b>To add the message handlers</b>
<ol>
<li>
On the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Message</b> <b>Maps</b> tab.<br><br></li>
<li>
From the <b>Class</b> <b>name</b> drop-down list box, select CCircCtrl.<br><br></li>
<li>
From the <b>Object</b> <b>IDs</b> list box, select CCircCtrl.<p class=tl>
The list of message types appears in the <b>Messages</b> list box.</P></li>
<li>
From the <b>Messages</b> list box, select WM_LBUTTONDOWN.<br><br></li>
<li>
Click <b>Add</b> <b>Function</b>.<p class=tl>
Notice that this new handler appears in the <b>Member</b> <b>functions</b> list box as:</P><pre><code>Member functions:
OnLButtonDown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ON_WM_LBUTTONDOWN
</code></pre>
</li>
<li>
From the <b>Messages</b> list box, select WM_LBUTTONDBLCLK.<br><br></li>
<li>
Click <b>Add</b> <b>Function</b>.<p class=tl>
Notice that this new handler appears in the <b>Member</b> <b>functions</b> list box as:</P><pre><code>Member functions:
OnLButtonDblClk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ON_WM_LBUTTONDBLCLK
</code></pre>
</li>
<li>
From the <b>Messages</b> list box, select WM_LBUTTONUP.<br><br></li>
<li>
Click <b>Add</b> <b>Function</b>.<p class=tl>
Notice that this new handler appears in the <b>Member</b> <b>functions</b> list box as:</P><pre><code>Member functions:
OnLButtonUp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ON_WM_LBUTTONUP
</code></pre>
</li>
<li>
Select the OnLButtonDown ON_WM_LBUTTONDOWN entry in the <b>Member</b> <b>functions</b> list box.<br><br></li>
<li>
Click <b>Edit</b> <b>Code</b>.<p class=tl>
ClassWizard closes and the cursor is positioned at the <code>CCircCtrl:OnLButtonDown</code> function in CIRCCTL.CPP.</P></li>
</ol>
<p>
For each message handled, ClassWizard automatically inserts the function with a //TODO comment line and a call to the base class, as shown in the code for <code>OnLButtonDown</code>:</p>
<pre><code>void CCircCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
 &nbsp;&nbsp; // TODO: Add your message handler code here and/or call default
 &nbsp;&nbsp; COleControl::OnLButtonDown(nFlags, point);
}
</code></pre>
<p>
The code below shows the fully implemented mouse message handlers. Replace the //TODO comment lines with your Circle drawing code as shown in the following code.</p>
<pre><code>void CCircCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
 &nbsp;&nbsp; CDC* pdc;

 &nbsp;&nbsp; // Flash the color of the control if within the ellipse.
 &nbsp;&nbsp; if (InCircle(point))
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdc = GetDC();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FlashColor(pdc);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReleaseDC(pdc);
 &nbsp;&nbsp; }

 &nbsp;&nbsp; COleControl::OnLButtonDown(nFlags, point);
}

void CCircCtrl::OnLButtonDblClk(UINT nFlags, CPoint point)
{
 &nbsp;&nbsp; CDC* pdc;

 &nbsp;&nbsp; // Flash the color of the control if within the ellipse.
 &nbsp;&nbsp; if (InCircle(point))
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdc = GetDC();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FlashColor(pdc);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReleaseDC(pdc);
 &nbsp;&nbsp; }

 &nbsp;&nbsp; COleControl::OnLButtonDblClk(nFlags, point);
}

void CCircCtrl::OnLButtonUp(UINT nFlags, CPoint point)
{
 &nbsp;&nbsp; // Redraw the control.
 &nbsp;&nbsp; if (InCircle(point))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidateControl();

 &nbsp;&nbsp; COleControl::OnLButtonUp(nFlags, point);
}
</code></pre>
<p>
<code>OnLButtonDown</code> and <code>OnLButtonDblClk</code> implement the same code: The circle will be painted using the color stored as the value of the FlashColor property. The <code>OnLButtonUp</code> function invalidates the control, causing the circle to be redrawn with the default background color.</p>
<p>
Notice that to implement the FlashColor property's behavior, two new functions, <code>InCircle</code> and <code>FlashColor</code>, have been introduced. These functions are described in <a href="_gs_hit_testing.htm">Hit Testing</a> and <a href="_gs_adding_the_flashcolor_function.htm">Adding the FlashColor Function</a>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add OLE Toolbar Resources</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_add_ole_toolbar_resources"></a><sup></sup>Add OLE Toolbar Resources</h1>
<p>
The server application also provides an in-place toolbar to the container. This toolbar typically supports a different set of commands than does the container’s usual toolbar, generally a subset. For example, the in-place toolbar does not support <b>File</b> menu commands, because the container, not the server, must handle those commands even if the server is activated in place.</p>
<h3>Suggested Reading in the <i>Visual C++ User’s Guide</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Toolbar Editor">
</object><a href=JavaScript:alink_1.Click()>Overview: Toolbar Editor</a></li>
</ul>
<p>
AppWizard provides a default in-place toolbar resource with five buttons. The <b>COleIPFrameWnd</b>-derived class is responsible for specifying the mapping of commands to toolbar buttons. </p>
<p class=label>
<b>To view the default in-place toolbar</b>
<ol>
<li>
Open the scratch version of Scribble.rc, expand the Toolbar folder and double-click <code>IDR_SCRIBBTYPE_SRVR_IP</code>.<p class=tl>
The Toolbar editor opens.</P></li>
<li>
Click <b>Properties</b> from the <b>View</b> menu to view the Toolbar Button Properties page, which displays the default resource IDs and prompt strings.<br><br></li>
<li>
Close the Toolbar editor for the next procedure.</li>
</ol>
<p>
The Toolbar editor makes it easy to edit your application toolbar resources. In the following procedure, you’ll copy the AppWizard-generated toolbar resources for in-place activation of Scribble into your Scribble project. Then you’ll edit the toolbars to match your other Scribble project toolbar resources.</p>
<p class=label>
<b>To copy the toolbar buttons</b>
<ol>
<li>
With the scratch Scribble.rc file open and the Toolbar folder expanded, switch to ResourceView in your Scribble project and expand the Toolbar folder.<br><br></li>
<li>
Hold down the CTRL key while you drag the toolbar resource, <code>IDR_SCRIBBTYPE_SRVR_IP</code>, from the AppWizard-provided scratch resource file into your Scribble project Toolbar folder. <p class=tl>
Close the scratch Scribble.rc file.</P></li>
<li>
In ResourceView, double-click both Scribble toolbar resources — <code>IDR_MAINFRAME</code> and <code>IDR_SCRIBBTYPE_SRVR_IP</code> and arrange them in the editor window so they don’t overlap.<br><br></li>
<li>
Hold down the CTRL key while you drag the Pen Width button from the <code>IDR_MAINFRAME</code> toolbar to the <code>IDR_SCRIBBTYPE_SRVR_IP</code> toolbar, just after the Paste button. <br><br></li>
<li>
Delete the Cut, Copy and Paste buttons from the <code>IDR_SCRIBBTYPE_SRVR_IP</code> toolbar by dragging them off the toolbar.<p class=tl>
Your in-place toolbar should now contain just three buttons: the application Help button, the Pen Widths button, and the Help Mode button. This is the toolbar that will appear when Scribble is activated as an OLE server application.</P></li>
<li>
Save your Scribble project .RC file and close the toolbar editors.</li>
</ol>
</font></BODY>
</HTML>

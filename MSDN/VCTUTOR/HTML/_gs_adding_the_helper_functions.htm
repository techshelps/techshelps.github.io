<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding the Helper Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_adding_the_helper_functions"></a>Adding the Helper Functions</h1>
<p>
The next step is to add the new helper functions. By using the <b>Add Function</b> pop-up menu command in ClassView, you can declare and define them in one step. </p>
<p>
As mentioned, the <code>PrintTitlePage</code> function prints a title page, and <code>PrintPageHeader</code> prints a header on the drawing page.</p>
<p class=label>
<b><a name="_gs_to_add_the_printtitlepage_helper_function"></a>To add the PrintTitlePage helper function</b>
<ol>
<li>
In the ClassView, point to <code>CScribbleView</code> and click the right mouse button.<br><br></li>
<li>
From the pop-up menu, click the <b>Add Function</b> command. <br><br></li>
<li>
In the <b>Function Type</b> box, type the return type of the function (in this case, <code>void</code>).<br><br></li>
<li>
In the <b>Function Declaration</b> box, type the following:<pre><code>PrintTitlePage(CDC* pDC, CPrintInfo* pInfo)
</code></pre>
</li>
<li>
In the <b>Access</b> area, select <b>Public</b>, and click <b>OK</b>.<p class=tl>
ClassWizard adds the declaration to the Public section of the header file and creates a starter definition in the implementation file. </P></li>
<li>
Expand <code>CScribbleView</code> and double-click <code>PrintTitlePage</code> to jump to the body of the definition so you can begin typing your application-specific code.<br><br></li>
<li>
Fill in the starter <code>PrintTitlePage</code> function with the following code:<pre><code>// Prepare a font size for displaying the file name
LOGFONT logFont;
memset(&amp;logFont, 0, sizeof(LOGFONT));
logFont.lfHeight = 75; //&nbsp; 3/4th inch high in MM_LOENGLISH 
CFont font;
CFont* pOldFont = NULL;
if (font.CreateFontIndirect(&amp;logFont))
pOldFont = pDC-&gt;SelectObject(&amp;font);

// Get the file name, to be displayed on title page
CString strPageTitle = GetDocument()-&gt;GetTitle();

// Display the file name 1 inch below top of the page,
// centered horizontally
pDC-&gt;SetTextAlign(TA_CENTER);
pDC-&gt;TextOut(pInfo-&gt;m_rectDraw.right/2, -100, strPageTitle);

if (pOldFont != NULL)
pDC-&gt;SelectObject(pOldFont);
</code></pre>
<p class=tl>
The <code>PrintTitlePage</code> function uses <b>m_rectDraw</b>, which stores the usable drawing area of the page, as the rectangle in which the title should be centered.</P><p class=tl>
Notice that <code>PrintTitlePage</code> declares a local <b>CFont</b> object to use when printing the title page. If you needed the font for the entire printing process, you could declare a <b>CFont</b> member variable in your view class, create the font in the <b>OnBeginPrinting</b> member function, and destroy it in <b>EndPrinting</b>. However, since Scribble uses the font for just the title page, the font doesn’t have to exist beyond the <code>PrintTitlePage</code> function. When the function ends, the destructor is automatically called for the local <b>CFont</b> object.</P></li>
</ol>
<p class=label>
<b><a name="_gs_to_add_the_printpageheader_helper_function"></a>To add the PrintPageHeader helper function</b>
<ol>
<li>
In ClassView, point to <code>CScribbleView</code> and click the right mouse button.<br><br></li>
<li>
From the pop-up menu, click the <b>Add Function</b> command. <br><br></li>
<li>
In the <b>Function Type</b> box, type the return type of the function (in this case, <code>void</code>).<br><br></li>
<li>
In the <b>Function Declaration </b>box, type the following:<pre><code>PrintPageHeader(CDC* pDC, CPrintInfo* pInfo, 
CString&amp; strHeader)
</code></pre>
</li>
<li>
In the <b>Access</b> area, select <b>Public</b>, and click <b>OK</b>.<br><br></li>
<li>
Fill in the starter <code>PrintPageHeader</code> function with the following code:<pre><code>// Specify left text alignment
pDC-&gt;SetTextAlign(TA_LEFT);

// Print a page header consisting of the name of
// the document and a horizontal line
pDC-&gt;TextOut(0, -25, strHeader);&nbsp; // 1/4 inch down

// Draw a line across the page, below the header
TEXTMETRIC textMetric;
pDC-&gt;GetTextMetrics(&amp;textMetric);
int y = -35 - textMetric.tmHeight;        // line 1/10th in. 
// below text
pDC-&gt;MoveTo(0, y);                        // from left margin
pDC-&gt;LineTo(pInfo-&gt;m_rectDraw.right, y); //&nbsp; to right margin

// Subtract from the drawing rectangle the space used by header.
y -= 25;     // space 1/4 inch below (top of) line
pInfo-&gt;m_rectDraw.top += y;
</code></pre>
<p class=tl>
The <code>PrintPageHeader</code> member function prints the name of the document at the top of the page, and then draws a horizontal line separating the header from the drawing. It adjusts the <b>m_rectDraw</b> member of the <i>pInfo</i> parameter to account for the height of the header; recall that <code>OnPrint</code> uses this value to adjust the window origin before it calls <code>OnDraw</code>.</P></li>
</ol>
</font></BODY>
</HTML>

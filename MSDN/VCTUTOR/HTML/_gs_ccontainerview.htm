<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CContainerView</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_ccontainerview"></a>CContainerView</h1>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Use ClassView to jump to the <code>CContainerView</code> member functions that are discussed in this section. Follow along by reading the code in ContainerView.cpp and comparing the member functions to their descriptions below. </p>
<p>
Class <code>CContainerView</code> is derived from <b>CView</b>. The member <code>CContainerItem* m_pSelection</code> points to the currently selected OLE object. If no object is selected, its value is <b>NULL</b>. </p>
<h3>CContainerView::OnDraw</h3>
<p>
The AppWizard-provided implementation of <code>CContainerView::OnDraw</code> relies on the simplifying assumption that there is only one object to be drawn, namely the sole <code>m_pSelection</code> object. Later you will replace this implementation with code that draws the multiple client items (embedded OLE objects) contained in the document. </p>
<h3>CContainerView::IsSelected</h3>
<p>
The AppWizard-provided implementation of <code>CContainerView::IsSelected</code> returns <b>TRUE</b> if the specified <b>CObject</b> is the <code>m_pSelection</code> object. This code is used without changes for the Container application, which has a simple single-selection user interface. For an example of multiple selection, see the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_DRAWCLI">
</object><a href=JavaScript:alink_1.Click()>DRAWCLI</a> sample application.</p>
<h3>CContainerView::OnInsertObject</h3>
<p>
The AppWizard-provided implementation of <code>CContainerView::OnInsertObject</code> creates a standard <b>COleInsertDialog</b> object and displays the dialog box. <b>OnInsertObject</b> is the command handler for the <b>Insert New Object</b> command on the <b>Edit</b> menu. It then creates a <b>COleClientItem</b>-derived object and calls the <b>CreateItem</b> member function of the <b>COleInsertDialog</b> object to create the embedded object using the information specified by the user.</p>
<h3>CContainerView::OnSetFocus</h3>
<p>
The AppWizard-provided implementation of <code>CContainerView::OnSetFocus</code> changes the focus from the view to an embedded OLE item if the embedded item is currently activated in place. This is exactly the implementation needed by Container and by most container applications.</p>
<h3>CContainerView::OnSize</h3>
<p>
The AppWizard-provided implementation of <code>CContainerView::OnSize</code> determines if there is an OLE item (<b>COleClientItem</b>) currently activated in place. If so, the <b>COleClientItem</b> is notified that the clipping rectangle of the item has changed. This allows the server to know how much of the object is visible. When the size of the window changes, so does the size of the clipping rectangle. For example, the sample application <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_HIERSVR">
</object><a href=JavaScript:alink_2.Click()>HIERSVR</a> uses this mechanism to implement scrolling and keyboard movement correctly. </p>
</font></BODY>
</HTML>

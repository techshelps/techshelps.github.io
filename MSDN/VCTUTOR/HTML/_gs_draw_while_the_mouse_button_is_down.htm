<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Draw While the Mouse Button Is Down</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_draw_while_the_mouse_button_is_down"></a><sup></sup>Draw While the Mouse Button Is Down</h1>
<p>
Between the time that the mouse button goes down and the time that it’s released, Scribble tracks the mouse and draws a trace of its movements in the view. <code>OnMouseMove</code> is called as the user moves the mouse while drawing the current stroke. The function connects the latest mouse location with its previous location and saves the new location as the previous point for the next time the function is called. To do the drawing, <code>OnMouseMove</code> constructs a local <b>CClientDC</b> object used to draw in the window’s client area.</p>
<p class=label>
<b>To add code for OnMouseMove</b>
<ol>
<li>
Using WizardBar, jump to <code>CScribbleView</code>’s member function <code>OnMouseMove</code> in ScribbleView.cpp.<br><br></li>
<li>
Replace the //TODO comments and code with the code shown here:<pre><code>// Mouse movement is interesting in the Scribble application
// only if the user is currently drawing a new stroke by 
// dragging the captured mouse.

if( GetCapture( ) != this )
return;        // If this window (view) didn't capture the 
// mouse, the user isn't drawing in this window.

CClientDC dc( this );

m_pStrokeCur-&gt;m_pointArray.Add(point);

// Draw a line from the previous detected point in the mouse
// drag to the current point.
CPen* pOldPen = 
dc.SelectObject( GetDocument( )-&gt;GetCurrentPen( ) );
 &nbsp; dc.MoveTo( m_ptPrev );
 &nbsp; dc.LineTo( point );
 &nbsp; dc.SelectObject( pOldPen );
 &nbsp; m_ptPrev = point;
 &nbsp; return;
</code></pre>
</li>
</ol>
<p>
In the Scribble application, <code>OnLButtonDown</code>, <code>OnMouseMove</code>, and <code>OnLButtonUp</code> handle the three phases of mouse drawing: <a href="_gs_initiate_stroke_drawing.htm">beginning to track the mouse</a>, <a href="#_gs_draw_while_the_mouse_button_is_down">tracking the mouse and connecting points</a>, and <a href="_gs_terminate_stroke_drawing.htm">ending mouse tracking</a>.</p>
</font></BODY>
</HTML>

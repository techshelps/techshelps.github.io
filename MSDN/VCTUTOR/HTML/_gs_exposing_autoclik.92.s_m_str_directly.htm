<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exposing Autoclik's m_str Directly</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_exposing_autoclik.92.s_m_str_directly"></a>Exposing Autoclik’s m_str Directly</h1>
<p>
In the following procedure, you will expose m_str directly as a property and study how ClassWizard adds it to the dispatch map. You’ll then remove the redundant declaration you added earlier. Finally, you’ll change the dispatch map declaration from private to public to give the view access to m_str.</p>
<p class=label>
<b><a name="_gs_to_directly_expose_the_m_str_member_variable_in_the_dispatch_interface"></a>To directly expose the m_str member variable in the dispatch interface</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Automation</b> tab.<br><br></li>
<li>
In the <b>Class name</b> box, select CAutoClickDoc, if it is not already selected.<br><br></li>
<li>
Click <b>Add Property</b>.<p class=tl>
The <b>Add Property</b> dialog box appears.</P></li>
<li>
In the <b>External name</b> box, type <code>text1</code>.<br><br></li>
<li>
In the <b>Type</b> list box, select CString.<br><br></li>
<li>
Under <b>Implementation</b>, select <b>Member</b> <b>variable</b>. <p class=tl>
Whereas you exposed <code>m_pt</code> indirectly by using the <b>Get/Set methods</b> option, expose <code>m_str</code> directly as a member variable.</P></li>
<li>
Replace ClassWizard’s proposed <b>Variable</b> <b>name</b>, <code>m_text1</code> (which was based on the <b>External</b> <b>name</b>), with <code>m_str</code>.<p class=tl>
Soon you will see how to associate the text dispatch property with the <code>m_str</code> member variable already declared in the document class.</P></li>
<li>
Remove ClassWizard’s proposed notification function name, OnText1Changed.<p class=tl>
This step is included for instructional purposes. You could have implemented an <code>OnText1Changed</code> function by calling <code>Refresh</code>, just as you did for <code>SetX</code> and <code>SetY</code>. If you do not implement a similar <code>OnText1Changed</code> function, then you can see the different behavior when you drive AutoClik from an Automation client. When the Automation client updates the text, AutoClik does not automatically update its view as it does when the Automation client changes the <code>x</code> or <code>y</code> values. Instead, the Automation client must call the <code>Refresh</code> method to update AutoClik’s view with the most recently changed text.</P></li>
<li>
Click <b>OK</b>.<p class=tl>
This returns you to the <b>Automation</b> tab, which now displays the three properties: <code>text</code>, <code>x</code>, and <code>y</code>. The <b>Implementation</b> box for the <code>text</code> variable shows:</P><pre><code>CString m_str;
</code></pre>
</li>
<li>
Click <b>OK</b>.<br><br></li>
<li>
In ClassView, double-click CAutoClickDoc to open AutoClickDoc.h.<p class=tl>
ClassWizard has declared the following members in the dispatch map:</P><pre><code>//{{AFX_DISPATCH(CAutoClickDoc)
CString m_str;
afx_msg short GetX();
afx_msg void SetX(short nNewValue);
afx_msg short GetY();
afx_msg void SetY(short nNewValue);
//}}AFX_DISPATCH
DECLARE_DISPATCH_MAP()
</code></pre>
<p class=tl>
At this point, the document header file declares <code>m_str</code> twice. The first declaration is the one you originally wrote:</P><pre><code>// Attributes
public:
CPoint m_pt;
CString m_str;
</code></pre>
<p class=tl>
The second declaration is the one ClassWizard added above in the dispatch map.</P></li>
<li>
Remove the <code>CString m_str</code> declaration that you wrote, shown above. <br><br></li>
<li>
Add the <b>public </b>keyword just after the line:<pre><code>// Generated OLE dispatch map functions
</code></pre>
<p class=tl>
This changes the declaration of the dispatch map from <b>protected</b> to <b>public</b>. This is necessary because <code>m_str</code> had already been declared as public so it could be accessed by the view.</P></li>
</ol>
</font></BODY>
</HTML>

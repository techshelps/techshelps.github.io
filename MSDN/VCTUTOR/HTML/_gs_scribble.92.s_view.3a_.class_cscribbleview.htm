<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scribble's View: Class CScribbleView</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_scribble.92.s_view.3a_.class_cscribbleview"></a>Scribble’s View: Class CScribbleView</h1>
<p>
The job of the view in Scribble is to redraw the view as needed — for example, when the window is covered by another window and then uncovered, or as the user draws strokes with the mouse.</p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_CObject_Class_Topics">
</object><a href=JavaScript:alink_1.Click()>CObject Class Topics</a>, <i>Visual C++ Programmer’s Guide</i></li>
</ul>
<p>
Views in Scribble are objects of class <code>CScribbleView</code>, which is derived from class <b>CView</b>. <code>CScribbleView</code> knows how to access the document’s stroke list and can tell the strokes stored there to draw themselves in the view.</p>
<p>
You can view a graphical representation of <code>CScribbleView</code> and its member functions in the ClassView pane of the Project Workspace window.</p>
<p>
The following table describes the member functions of class <code>CScribbleView</code> that AppWizard created for you.</p>
<p class=label>
<b>CScribbleView Member Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Member</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><code>CScribbleView</code>, <code>~CScribbleView</code></td>
<td width=68%>With nothing to initialize and no data to destroy, the view’s constructor and destructor are empty.</td>
</tr>
<tr valign=top>
<td width=32%><code>OnDraw</code></td>
<td width=68%><code>OnDraw</code> updates the view by redrawing its contents. (It’s used to draw both on the screen and on a printer.)</td>
</tr>
<tr valign=top>
<td width=32%><code>GetDocument</code></td>
<td width=68%>Defined inline in file ScribbleView.h, <code>GetDocument</code> retrieves a type-safe pointer to the document attached to this view. The view uses the pointer to call document member functions, which it must do to access the data it displays. </td>
</tr>
<tr valign=top>
<td width=32%><code>AssertValid</code>, <code>Dump</code></td>
<td width=68%>These diagnostic functions simply call the base-class functions they override.</td>
</tr>
<tr valign=top>
<td width=32%><code>OnPreparePrinting</code>, <code>OnBeginPrinting</code>, <code>OnEndPrinting</code></td>
<td width=68%>These virtual functions override the versions in <b>CView</b> to specify the application’s printing behavior. See Lesson 9, <a href="_gs_enhancing_printing.htm">Enhancing Printing</a>, for more information about how Scribble prints.</td>
</tr>
</table><br>
<p>
You won’t need to alter any of the following AppWizard-created functions in this lesson: <code>GetDocument</code>, <code>AssertValid</code>, <code>Dump</code>, <code>OnPreparePrinting</code>, <code>OnBeginPrinting</code>, and <code>OnEndPrinting</code>. </p>
<p>
Notice the inline definition of <code>GetDocument</code> in the above table. The debug version of this member function calls the <b>IsKindOf</b> member function defined in class <b>CObject</b> and uses the <b>RUNTIME_CLASS</b> macro to retrieve the run-time class name of the document. </p>
</font></BODY>
</HTML>

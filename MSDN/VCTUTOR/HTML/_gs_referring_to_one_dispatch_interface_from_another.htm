<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Referring to One Dispatch Interface from Another</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_referring_to_one_dispatch_interface_from_another"></a><sup></sup>Referring to One Dispatch Interface from Another</h1>
<p>
You will now implement the Position property you added at the end of Step 2. This property exposes the document’s <code>m_pt</code> member variable by using the second dispatch interface implemented by <code>CAutoClickPoint</code>. You will expose this new property by adding code to the Get and Set member functions (<code>GetPosition</code> and <code>SetPosition</code>) which you declared in Step 2. The return type of <code>GetPosition</code> and the type of the parameter passed to <code>SetPosition</code> is <b>LPDISPATCH</b>, a pointer to a dispatch object. </p>
<p>
The following two Autodriv message handlers, <code>OnGetPosition</code> and <code>OnSetPosition</code>, found in the <code>CAutoDrivDlg</code> class, access the <code>Position</code> property of AutoClik’s document dispatch interface using the <code>GetPosition</code> property:</p>
<pre><code>void CAutoDrivDlg::OnGetPosition() 
{
   CClikPoint point;
   point.AttachDispatch(m_autoClikObject.GetPosition());

   m_x = point.GetX();
   m_y = point.GetY();
   UpdateData(FALSE);
}

void CAutoDrivDlg::OnSetPosition() 
{
   CClikPoint point;
   point.AttachDispatch(m_autoClikObject.GetPosition());

   UpdateData(TRUE);
   point.SetX((short)m_x);
   point.SetY((short)m_y);
   m_autoClikObject.SetPosition(point.m_lpDispatch);
}
</code></pre>
<p>
The code:</p>
<pre><code>   CClikPoint point;
   point.AttachDispatch(m_autoClikObject.GetPosition());
</code></pre>
<p>
accesses AutoClik’s <code>Position</code> property, which is declared as <b>LPDISPATCH</b> in the MFC Automation server’s dispatch map. The Automation client gets initial access to AutoClik’s document dispatch interface object by creating it (in the <code>OnCreate</code> method):</p>
<pre><code>   if (!m_autoClikObject.CreateDispatch(_T("AutoClick.Document")))
   {
      AfxMessageBox(IDP_CANNOT_CREATE_AUTOCLICK);
      return -1;   // fail
   }
   m_autoClikObject.ShowWindow();
</code></pre>
<p class=label>
<b><a name="_gs_to_declare_one_dispatch_interface_object_as_a_property_of_another_dispatch_interface"></a>To declare one dispatch interface object as a property of another dispatch interface</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Automation</b> tab.<br><br></li>
<li>
In the <b>Class name</b> box, select CAutoClickDoc.<br><br></li>
<li>
In the <b>External names</b> box, select Position.<p class=tl>
This is the property you added in Step 2.</P></li>
<li>
Click <b>Edit Code</b> to implement the Get and Set member functions.<p class=tl>
This takes you to their stub implementations in AutoClickDoc.cpp.</P></li>
<li>
Implement the Get and Set member functions as shown by the following code:<pre><code>LPDISPATCH CAutoClickDoc::GetPosition()
{    
CAutoClickPoint* pPos = new CAutoClickPoint;
pPos-&gt;m_x = (short) m_pt.x;
pPos-&gt;m_y = (short) m_pt.y;

LPDISPATCH lpResult = pPos-&gt;GetIDispatch(FALSE);
return lpResult;
}

void CAutoClickDoc::SetPosition(LPDISPATCH newValue)
{
CAutoClickPoint* pPos = 
(CAutoClickPoint*)CCmdTarget::FromIDispatch(newValue);
if (pPos != NULL &amp;&amp; pPos-&gt;IsKindOf
(RUNTIME_CLASS(CAutoClickPoint)))
{
m_pt.x = pPos-&gt;m_x;
m_pt.y = pPos-&gt;m_y;
Refresh();
}
}
</code></pre>
</li>
<li>
Add the following <b>#include</b> statement at the top of AutoClickDoc.cpp:<pre><code>#include "AutoClickPoint.h"
</code></pre>
<p class=tl>
This is required because the implementation of <code>SetPosition</code> refers to the <code>CAutoClickPoint</code> class.</P></li>
<li>
In ClassView, double-click <code>CAutoClickPoint</code> to display AutoClickPoint.h in the text editor. <br><br></li>
<li>
Change the declaration of <code>CAutoClickPoint</code>’s OLE dispatch map from <b>protected</b> to <b>public</b>, by adding the <b>public</b> keyword just before the comment line:<pre><code>public:
// Generated OLE dispatch map functions
//{{AFX_DISPATCH(CAutoClickPoint)
short m_x;
short m_y;
//}}AFX_DISPATCH
DECLARE_DISPATCH_MAP()
</code></pre>
<p class=tl>
This is required because <code>CAutoClickDoc</code> directly accesses <code>CAutoClickPoint</code>’s member variables <code>m_x</code> and <code>m_y</code> in its implementation of <code>GetPosition</code> and <code>SetPosition</code>.</P></li>
</ol>
<p>
The implementation of <code>GetPosition</code> creates a new <code>CAutoClickPoint</code> object. The <code>CAutoClickPoint</code> object, which is an Automation-enabled <b>CCmdTarget</b> object, in turn creates a dispatch interface object, through the help of the framework. </p>
<p>
Finally, <code>GetPosition</code> gets the OLE <b>IDispatch</b> pointer by calling the <b>CCmdTarget::GetIDispatch</b> member function of the <code>CAutoClickPoint</code> object and returns this <b>IDispatch</b> pointer to the Automation client. The <b>AddRef</b> parameter of <b>GetIDispatch</b> is <b>FALSE</b>, because the OLE reference count of this dispatch interface object was already set to 1 when the <code>CAutoClickPoint</code> object was constructed.</p>
<p>
The implementation of <code>SetPosition</code> does a C++ down-casting of the <b>IDispatch</b> pointer to a <code>CAutoClickPoint</code> pointer. It tests the down-casting with <b>IsKindOf</b> to make sure the Automation client passed back an <b>IDispatch</b> pointer to a <code>CAutoClickPoint</code> object rather than an <b>IDispatch</b> pointer to some other kind of object. </p>
<p>
Finally, <code>SetPosition</code> updates the view to reflect the new position of the text by calling the document’s <code>Refresh</code> function. Because <code>Refresh</code> is called by <code>SetPosition</code>, it is not necessary to implement the <code>OnXChanged</code> and <code>OnYChanged</code> member functions to update the views for the <code>CAutoClickPoint</code> class.</p>
</font></BODY>
</HTML>

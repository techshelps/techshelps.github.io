<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Customizing the Dialog Template for the Section Form</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_customizing_the_dialog_template_for_the_section_form"></a><sup></sup>Customizing the Dialog Template for the Section Form</h1>
<p>
Along with the classes, AppWizard creates a dialog template resource named <code>IDD_ENROLL_FORM</code>, which the <b>CRecordView</b>-derived class, <code>CSectionForm</code>, uses to display its form controls. Because <b>CRecordView </b>is derived from <b>CFormView</b>, a record view’s client area is laid out by a dialog template resource. The layout of the form is up to you. AppWizard places one static text control on the dialog template resource, labeled “TODO: Place form controls on this dialog.” </p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_CRecordView">
</object><a href=JavaScript:alink_1.Click()>CRecordView</a> Overview, <i>Microsoft Foundation Class Reference</i> <br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dialog editor">
</object><a href=JavaScript:alink_2.Click()>Overview: Dialog Editor</a>, <i>Visual C++ User’s Guide</i></li>
</ul>
<p>
In the following procedure, you will replace this text with controls that correspond to columns in the table (via the field data members of the recordset). The table below lists the columns and their associated edit control IDs and variable names.</p>
<p class=label>
<b>Enroll's Controls and Member Variables</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Column name</b></td>
<td class=label width=29%><b>Control ID</b></td>
<td class=label width=48%><b>Variable Name</b></td>
</tr>
<tr valign=top>
<td width=23%>Course</td>
<td width=29%>IDC_COURSE</td>
<td width=48%><pre><code>m_pSet-&gt;m_CourseID</code></pre>
</td>
</tr>
<tr valign=top>
<td width=23%>Section</td>
<td width=29%>IDC_SECTION</td>
<td width=48%><pre><code>m_pSet-&gt;m_SectionNo</code></pre>
</td>
</tr>
<tr valign=top>
<td width=23%>Instructor</td>
<td width=29%>IDC_INSTRUCTOR</td>
<td width=48%><pre><code>m_pSet-&gt;m_InstructorID</code></pre>
</td>
</tr>
<tr valign=top>
<td width=23%>Room</td>
<td width=29%>IDC_ROOM</td>
<td width=48%><pre><code>m_pSet-&gt;m_RoomNo</code></pre>
</td>
</tr>
<tr valign=top>
<td width=23%>Schedule</td>
<td width=29%>IDC_SCHEDULE</td>
<td width=48%><pre><code>m_pSet-&gt;m_Schedule</code></pre>
</td>
</tr>
<tr valign=top>
<td width=23%>Capacity</td>
<td width=29%>IDC_CAPACITY</td>
<td width=48%><pre><code>m_pSet-&gt;m_Capacity</code></pre>
</td>
</tr>
</table><br>
<p class=label>
<b>To customize Enroll’s form</b>
<ol>
<li>
In ResourceView, expand the Enroll resources folder.<br><br></li>
<li>
Expand the Dialog folder.<br><br></li>
<li>
Double-click <code>IDD_ENROLL_FORM</code>.<p class=tl>
The dialog editor opens and displays the dialog box with the corresponding ID.</P></li>
<li>
Select and delete the static control that says <code>TODO: Place form controls on this dialog</code>. <br><br></li>
<li>
Design Enroll’s Section form to resemble the figure below, using static controls and edit controls. <p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can press CTRL before you click a dialog box control; then release the CTRL key and click in the dialog box multiple times to add multiple copies of the control. For instance, if you want six edit controls, click six times. Click the selection arrow to stop adding controls.</p><p class=tl>
Resize the dialog box as needed. You can either add the controls in pairs (that is, first a static text control and then the corresponding edit control, and so on) or later <a href="#_gs_to_view_or_change_the_tab_order_of_controls">change the Tab order</a> of the controls, as described at the end of this topic, so that they are paired in this way. This becomes important when you <a href="_gs_binding_enroll.92.s_controls_to_recordset_fields.htm">bind the controls to recordset fields</a>, described in the next topic.</P></li>
<li>
Choose <b>Properties</b> from the <b>View</b> menu to display the <b>Properties</b> window, and then pin it down so that it stays open while you add and edit the dialog box controls. <br><br></li>
<li>
For each edit control, use the <b>ID</b> box in the <b>Properties</b> window to specify an ID based on the table column names (for example, <code>IDC_COURSE</code>). This is only a convention, but it is used throughout the tutorial.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The “Edit” caption that appears in each edit control is not visible to the user at run time, so you needn’t worry about deleting it. To view the dialog as it will appear at run time, press CTRL+T to enter test mode for the dialog box. Press ESC to cancel test mode.</p><p class=label>
<b>The Layout of Enroll’s Section Form</b>
<p>
<img src="ct0604s.gif" border=0> </P></li>
<li>
Make the Course and Section edit controls read-only. To do so, select the <b>Styles</b> tab in the <b>Properties</b> window and set the <b>Read-only</b> check box. (The other edit controls are updatable.)<p class=tl>
According to a common rule in the user-interface design of database forms, the user shouldn’t be able to update these key fields. If users want to change a course number or section of a Section record, they must delete the old Section record and add a new one to avoid possibly violating the referential integrity of the database. Enroll tutorial Step 3 implements Add and Delete functionality.</P></li>
<li>
Save your work.<p class=tl>
It’s a good idea to periodically back up your work.</P></li>
</ol>
<p>
If you did not add the static text and corresponding edit controls in order, one after the other, you need to change the tab order. In either case, you can easily check the current tab order and change it if necessary.</p>
<p class=label>
<b><a name="_gs_to_view_or_change_the_tab_order_of_controls"></a>To view or change the tab order of controls</b>
<ol>
<li>
With the dialog resource open, from the <b>Layout</b> menu click <b>Tab Order</b>.<p class=tl>
You’ll see numbers depicting the current tab order of the controls.</P></li>
<li>
Specify the tab order you want by clicking each control in that order.<p class=tl>
As you click, you’ll see the numbering change to reflect your choice. </P><p class=tl>
For Enroll, specify a tab order such that each edit control is preceded in the tab order by the static text control that describes it. By specifying this tab order, you enable ClassWizard to derive a name for the edit control when you <a href="_gs_binding_enroll.92.s_controls_to_recordset_fields.htm">bind it to a data member</a>, as you’ll do in the next section.</P></li>
<li>
Press ESC to exit Tab Order mode.<p class=tl>
Leave the dialog editor open for the next procedure.</P></li>
</ol>
</font></BODY>
</HTML>

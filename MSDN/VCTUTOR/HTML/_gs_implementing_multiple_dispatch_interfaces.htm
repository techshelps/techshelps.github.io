<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Multiple Dispatch Interfaces</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_multiple_dispatch_interfaces"></a><sup></sup>Implementing Multiple Dispatch Interfaces</h1>
<h3>AutoClik: Automation, Lesson 4</h3>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you prefer working from a printed tutorial, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Copying and Printing">
</object><a href=JavaScript:alink_1.Click()>Copying and Printing</a> in <i>MSDN Library Help</i> for details about printing a lesson, a set of topics, or a single topic.</p>
<p>
In Step 2, you added properties and methods to AutoClik’s document dispatch interface, which was initially implemented by AppWizard. In Step 3, you create an entirely new <b>CCmdTarget</b>-derived class that is exposed by using a second dispatch interface.</p>
<p>
In this step, you will:
<ul type=disc>
<li>
Use ClassWizard to <a href="_gs_creating_a_new_ccmdtarget_class_with_a_dispatch_interface.htm">create a CCmdTarget-derived class with a dispatch interface</a>, named <code>CAutoClickPoint</code>, which implements a second, unnamed dispatch interface.<br><br></li>
<li>
<a href="_gs_referring_to_one_dispatch_interface_from_another.htm">Expose AutoClik’s x and y coordinates</a> by having AutoClik’s document dispatch interface refer to the second Point dispatch interface.</li>
</ul>
<p>
AutoClik’s second dispatch interface, implemented in class <code>CAutoClickPoint</code>, is very simple. It has two properties: <code>x</code> and <code>y</code>. It has no methods. This dispatch interface has been included solely for tutorial reasons. AutoClik already fully exposes its behavior by using the document dispatch interface implemented in Step 2. <code>CAutoClickPoint</code>’s dispatch interface is introduced to illustrate techniques for managing multiple dispatch interfaces in the same application.</p>
<p>
The design decision to split functionality into multiple dispatch interfaces is no different from design decisions to split a C++ application into multiple classes. This basic approach is so strong that the framework enforces a one-to-one relationship between dispatch interfaces and Automation-enabled <b>CCmdTarget</b>-derived classes.</p>
<p>
AutoClik’s document dispatch interface will refer to the second dispatch interface in its implementation of the <code>GetPosition</code> and <code>SetPosition</code> methods. AutoClik’s document dispatch interface will expose the x and y coordinates using this Point interface as a programmatic alternative for the Automation client. The Automation client can get or set AutoClik’s x and y coordinates by using the <code>GetX</code>, <code>GetY</code>, <code>SetX</code>, and <code>SetY</code> methods implemented in Step 2. Alternatively, the Automation client can use the <code>GetPosition</code> and <code>SetPosition</code> methods implemented here in Step 3.</p>
</font></BODY>
</HTML>

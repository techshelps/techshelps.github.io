<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying the Draw Behavior</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_modifying_the_draw_behavior"></a>Modifying the Draw Behavior</h1>
<p>
Now that you have enabled the Circle control's background color property and set its default background color, the final step is to modify the <code>CCircCtrl::OnDraw</code> function in CIRCCTL.CPP to implement the painting behavior.</p>
<p>
As created by ControlWizard, the <code>CCircCtrl::OnDraw</code> function implements the basic Circle control drawing behavior:</p>
<pre><code>void CCircCtrl::OnDraw(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
 &nbsp;&nbsp; // TODO: Replace the following code with your own drawing code.
 &nbsp;&nbsp; pdc-&gt;FillRect(rcBounds, CBrush::FromHandle((HBRUSH)GetStockObject(WHITE_BRUSH)));
 &nbsp;&nbsp; pdc-&gt;Ellipse(rcBounds);

}
</code></pre>
<p>
The default behavior of the <code>OnDraw</code> function is to draw an ellipse with a white background&nbsp;— exactly what was displayed in Test Container earlier.</p>
<p>
To modify <code>OnDraw</code> to use the background color value defined by the Circle control's BackColor property, remove the //TODO comment line and the line on which <code>FillRect</code> is called, and modify the code as follows (beginning with the fourth line in the code example, this is new code that you will be adding):</p>
<pre><code>void CCircCtrl::OnDraw(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
 &nbsp;&nbsp; CBrush* pOldBrush;
 &nbsp;&nbsp; CBrush bkBrush(TranslateColor(GetBackColor()));
 &nbsp;&nbsp; CPen* pOldPen;

 &nbsp;&nbsp; // Paint the background using the BackColor property
 &nbsp;&nbsp; pdc-&gt;FillRect(rcBounds, &amp;bkBrush);

 &nbsp;&nbsp; // Draw the ellipse using the BackColor property and a black pen
 &nbsp;&nbsp; pOldBrush = pdc-&gt;SelectObject(&amp;bkBrush);
 &nbsp;&nbsp; pOldPen = (CPen*)pdc-&gt;SelectStockObject(BLACK_PEN);
 &nbsp;&nbsp; pdc-&gt;Ellipse(rcBounds);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldPen);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldBrush);
}
</code></pre>
<p>
The code constructs a brush, called <code>bkBrush</code>, that uses the BackColor property color. Because a <b>COLORREF</b> value is expected for initializing the brush, and the BackColor property value is an <b>OLE_COLOR</b> value, <b>TranslateColor</b> is called first. The bounding rectangle of the control is painted using <b>CDC::FillRect</b>, specifying <code>bkBrush</code> as the fill brush.</p>
<p>
The ellipse is drawn within the bounding rectangle of the control using the <b>CDC::Ellipse</b> member function. Before the ellipse is drawn, the background color brush and the pen must be selected into the device context. This is done by calling <b>CDC::SelectObject</b>, as shown in the code. Now when the ellipse is drawn, it is filled with the proper background color and drawn using a black pen. Finally, the old brush and pen are selected back into the device context, restoring the device context to the state in which it entered the <code>OnDraw</code> function.</p>
</font></BODY>
</HTML>

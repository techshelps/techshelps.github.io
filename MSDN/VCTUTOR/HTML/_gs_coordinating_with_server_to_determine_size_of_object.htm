<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Coordinating with Server to Determine Size of Object</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_coordinating_with_server_to_determine_size_of_object"></a>Coordinating with Server to Determine Size of Object</h1>
<p>
The following exercise demonstrates why Container needs to coordinate better with servers to determine the size of embedded objects. </p>
<p class=label>
<b>To demonstrate why coordinating with the server is necessary</b>
<ol>
<li>
If you have not already run the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_mfc_HIERSVR">
</object><a href=JavaScript:alink_1.Click()>HIERSVR</a> sample, do so now. Run HIERSVR once to register this OLE component application and then close it. <br><br></li>
<li>
Similarly, run Step 1 of Container, but leave it running. (You can either use your version, or the sample source version.)<br><br></li>
<li>
On the Container <b>Edit</b> menu, click <b>Insert New Object</b>. <br><br></li>
<li>
Select MFC Hierarchy List as the object type.<p class=tl>
Notice that the initial size of the HIERSVR object is (10, 10, 50, 50), as determined by the <code>CContainerItem</code> constructor. Container does not give HIERSVR the opportunity to set the initial size of the object.</P></li>
<li>
From HIERSVR’s <b>Edit</b> menu, click<b> Add Node</b> to add a second node.<p class=tl>
Fill in a name for the node; the other options in the <b>Add Node</b> dialog box don’t matter for the purpose of this demonstration.</P><p class=tl>
Notice that Container correctly increases the height of the object to accommodate the new node. You can add more nodes, and Container continues to increase the height of the object. In Step 1, the implementation of <code>CContainerItem::OnChangeItemPosition</code> changes the height of the in-place activated object at the request of HIERSVR.</P></li>
<li>
Deactivate the HIERSVR object, then click once to select it. <br><br></li>
<li>
From the <b>Edit</b> menu, click <b>Hierarchy List Object</b>, then click <b>Open</b> from the submenu.<p class=tl>
This fully opens the HIERSVR server application. Arrange HIERSVR and Container on the screen so you can see both applications at once.</P></li>
<li>
In HIERSVR, from the <b>Edit</b> menu click <b>Add Node</b> to add another node.<p class=tl>
Notice that the size of the object in Container does not change to accommodate the new node. Rather, it stays the same size and compresses the nodes using a smaller font, so that the <i>N</i>+1 nodes now occupy the same space as the original <i>N</i> nodes. Add more nodes, and they become more and more compressed in the same space in the container.</P></li>
<li>
Close both applications.</li>
</ol>
<p>
Why does <code>OnChangeItemPosition</code> change the size of the in-place window when a new HIERSVR node is added, but not if it is being updated when HIERSVR is running fully opened?</p>
<p>
Because <code>OnChangeItemPosition</code> is called by the framework only when the object is in-place activated. The server temporarily provides the object with its own in-place window and calls to give the container a chance to customize the size of the in-place window.</p>
<p>
When the server is fully opened, the situation is much different (although it appears to be the same): When the server is fully opened, the object in the container is selected but not activated in place. When the user edits the fully opened object so that its natural size changes, as in the case of adding a node in HIERSVR, the server indirectly (through the framework) calls <code>CContainerItem::OnChange</code> instead of <code>OnChangeItemPosition</code>. At this time, Container needs to find out the new natural size of the object from HIERSVR. It does this by calling <b>COleClientItem::GetCachedExtent</b>.</p>
<p>
<b>COleClientItem::GetCachedExtent</b> asks the server for the natural extent of the object. The natural extent is the size of the object as it would appear on the printed page (in <b>MM_HIMETRIC</b> units). In HIERSVR’s case, the natural extent reflects (1) the font size that the user can specify with the Change Font command on the Tree menu, and (2) the number of nodes in the HIERSVR object.</p>
<p>
The <code>CContainerItem::OnChange</code> function is not the only place where Container needs to call <b>COleClientItem::GetCachedExtent</b> to get the natural extent of the object and then set the <code>m_rect</code> of the <code>CContainerItem</code>. Therefore, you will implement the helper function <code>UpdateFromServerExtent</code> as described in the next topic, <a href="_gs_get_the_extent_of_the_ccontaineritem_object_from_the_server.htm">Get the Extent of the CContainerItem Object from the Server</a>.</p>
</font></BODY>
</HTML>

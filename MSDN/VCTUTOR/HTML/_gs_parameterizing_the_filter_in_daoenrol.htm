<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parameterizing the Filter in DaoEnrol</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_parameterizing_the_filter_in_daoenrol"></a>Parameterizing the Filter in DaoEnrol</h1>
<p>
DaoEnrol reselects, or “requeries,” class section records every time the user selects a new course name from the combo box. One way to implement this is to close the old <code>CSectionSet</code> object and reopen it, supplying a new <b>m_strFilter</b> value before calling <b>Open</b>. This works, but is somewhat inefficient, because the framework has to completely reconstruct and run a new SQL <b>SELECT</b> statement. A more efficient way to requery the same recordset is to “parameterize” the filter — call <b>Requery</b> with a new filter value and a specific parameter value.</p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_CDaoRecordset.3a3a.Open">
</object><a href=JavaScript:alink_1.Click()>CDaoRecordset::Open</a>, <i>Microsoft Foundation Class Reference</i><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_DAO_Queries.3a_.Filtering_and_Parameterizing_Queries">
</object><a href=JavaScript:alink_2.Click()>DAO Queries: Filtering and Parameterizing Queries</a>, <i>Visual C++ Programmer’s Guide</i><br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_DAO_Recordset.3a_.Binding_Records_Dynamically">
</object><a href=JavaScript:alink_3.Click()>DAO Recordset: Binding Records Dynamically</a></li>
</ul>
<p>
In order to parameterize the filter, you’ll perform the following procedures:
<ul type=disc>
<li>
Declare a parameter data member in the recordset’s header file.<br><br></li>
<li>
Bind the parameter data member to the recordset.</li>
</ul>
<p>
To implement the <b>Requery </b>with a new filter and a specific parameter value supplied at run time, you:
<ul type=disc>
<li>
Specify a parameterized filter.<br><br></li>
<li>
Supply the run-time parameter value.</li>
</ul>
<p class=label>
<b>To declare a parameter data member in the recordset’s header file</b>
<ol>
<li>
Using FileView, open the SectSet.h file.<br><br></li>
<li>
Add the following member variable declaration for <code>m_strCourseIDParam</code>, just before the <code>//Overrides</code> section, after the <code>//}}AFX_FIELD</code> line: <pre><code>CString m_strCourseIDParam;
</code></pre>
</li>
</ol>
<p class=label>
<b>To bind the parameter data member to the recordset</b>
<ol>
<li>
Use ClassView to navigate to the <code>CSectionSet</code> constructor, and initialize the parameter count variable, <b>m_nParams</b>, which by default is zero. Also initialize DaoEnrol’s single parameter, <code>m_strCourseIDParam</code>.<p class=tl>
Place the following two lines of code after the line <code>m_nDefaultType = dbOpenDynaset;</code>:</P><pre><code>m_nParams = 1;
m_strCourseIDParam = "";
</code></pre>
</li>
<li>
Use ClassView to navigate to the <code>DoFieldExchange</code> member function definition, and add the following two lines of code to identify <code>m_strCourseIDParam</code> as a parameter data member. Add the code at the end of the function, after the <code>//}}AFX_FIELD_MAP</code> line.<pre><code>pFX-&gt;SetFieldType(CDaoFieldExchange::param);
DFX_Text(pFX, "CourseIDParam", m_strCourseIDParam);
</code></pre>
<p class=tl>
<code>DoFieldExchange</code> recognizes two kinds of fields: columns and parameters. The call to the <b>CDaoFieldExchange</b> member function <b>SetFieldType</b> indicates what kind of field(s) follow in the DFX function calls. In this example, there is one parameter: <code>m_strCourseIDParam</code>.</P><p class=tl>
The name of the column for the parameter in the <b>DFX_Text</b> call — “CourseIDParam” — is arbitrary; you can provide any name you want.</P></li>
<li>
Save your work.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;No code is added during the next two procedures; the code already exists in the previous code block.</p>
<p class=label>
<b>To specify a parameterized filter</b>
<ul type=disc>
<li>
Before the call to the base class function <b>CDaoRecordset::Open</b>, which is called by <b>CDaoRecordView::OnInitialUpdate</b>, specify the parameterized filter, as shown in this line (which you’ve already added):<pre><code>m_pSet-&gt;m_strFilter = "CourseID = CourseIDParam";
</code></pre>
</li>
</ul>
<p>
<code>CourseID</code> is a column (field) name, and <code>CourseIDParam</code> is a named parameter associated with the column. Its value will be substituted at run time. DAO parameters are always named, rather than positional, as in most ODBC code. If you have more than one parameter in <b>m_strFilter</b>, such as: </p>
<pre><code>m_pSet-&gt;m_strFilter = "CourseID = CourseIDParam AND SectionNo = SectionNoParam";
</code></pre>
<p>
you must make multiple RFX calls after the call to:</p>
<pre><code>pFX-&gt;SetFieldType(CDaoFieldExchange::param); 
</code></pre>
<p class=label>
<b>To supply the run-time parameter value</b>
<ul type=disc>
<li>
Assign the value to the previously bound parameter data member, as shown in the following line (which you’ve already added in the <b>OnInitialUpdate</b> function).<pre><code>m_pSet-&gt;m_strCourseIDParam = 
    pDoc-&gt;m_courseSet.m_CourseID;
</code></pre>
<p class=tl>
This sets the parameter value to be the first course record retrieved from the <code>CCourseSet</code> recordset. All parameter values must be assigned before calling <b>CDaoRecordset::Open</b> (or <b>CDaoRecordView::OnInitialUpdate</b>) or, as you will see later, before calling <b>CDaoRecordset::Requery</b>. </P></li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The technique just described for parameterizing a query is not the only approach available. The MFC DAO classes provide two alternative ways to manage recordsets, including any parameters you might give them. The approach described here relies on the wizards and uses the DAO record field exchange (DFX) mechanism to move data between the database and the recordset and to manage parameters. The alternative approach uses a different mechanism, called dynamic binding. </p>
</font></BODY>
</HTML>

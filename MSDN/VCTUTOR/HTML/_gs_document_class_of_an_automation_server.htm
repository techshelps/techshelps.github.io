<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Document Class of an Automation Server</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_document_class_of_an_automation_server"></a><sup></sup>Document Class of an Automation Server</h1>
<p>
When you select the Automation option in AppWizard, it not only enables the application as a whole to support Automation but also specifically enables the document class (in AutoClickDoc.cpp) to expose properties and methods by using Automation. </p>
<h3>Suggested Reading in the <i>Microsoft Foundation Class Reference</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_Dispatch_Maps">
</object><a href=JavaScript:alink_1.Click()>Dispatch Maps</a> topics</li>
</ul>
<p>
The document class provided by AppWizard is derived from <b>CDocument</b>; therefore, your application’s document class is derived indirectly from <b>CCmdTarget</b>. To be exposed through Automation, a <b>CCmdTarget</b>-derived class must call its member function, <b>EnableAutomation</b>, from its constructor and must also include a dispatch map. Dispatch maps are like MFC message maps in that you do not edit them directly. AppWizard and ClassWizard edit them for you. </p>
<p>
The AppWizard-provided dispatch map in the document’s header file looks like this:</p>
<pre><code>//{{AFX_DISPATCH(CAutoClickDoc)
   // NOTE - the ClassWizard will add and remove member 
   //&nbsp;&nbsp;&nbsp; functions here.
   //&nbsp;&nbsp;&nbsp; DO NOT EDIT what you see in these blocks of generated code !
//}}AFX_DISPATCH
DECLARE_DISPATCH_MAP()
</code></pre>
<p>
and is implemented in the document’s .CPP file like this:</p>
<pre><code>BEGIN_DISPATCH_MAP(CAutoClickDoc, CDocument)
   //{{AFX_DISPATCH_MAP(CAutoClickDoc)
   // NOTE - the ClassWizard will add and remove mapping macros here.
   //&nbsp;&nbsp;&nbsp;&nbsp; DO NOT EDIT what you see in these blocks of generated code!
   //}}AFX_DISPATCH_MAP
END_DISPATCH_MAP()
</code></pre>
<p>
As you will see in Steps 2 and 3 of AutoClik, whenever you add a new property or method, ClassWizard adds an entry to the dispatch map.</p>
<p>
The constructor of an automated <b>CCmdTarget</b> object must call <b>CCmdTarget::EnableAutomation</b>, as implemented by AppWizard:</p>
<pre><code>CAutoClickDoc::CAutoClickDoc()
{
   EnableAutomation();
   
   AfxOleLockApp();
}
</code></pre>
<p>
If the Automation server application supports being initially loaded by using Automation, then the constructor and destructor of the document class should call <b>AfxOleLockApp </b>and <b>AfxOleUnlockApp</b>, respectively. AppWizard provides the constructor and destructor of the document class. The calls to <b>AfxOleLockApp</b> and <b>AfxOleUnlockApp</b> are required so that AutoClik gracefully terminates any interactions with Automation clients before exiting. </p>
<p>
Generally, createable objects need this. That way, if a client application creates an object of that type causing the Automation server to start, the server will exit when the object goes out of scope in the client.</p>
<pre><code>CAutoClickDoc::~CAutoClickDoc()
{
   AfxOleUnlockApp();
}
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding Enroll's Controls to Recordset Fields</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_binding_enroll.92.s_controls_to_recordset_fields"></a><sup></sup>Binding Enroll’s Controls to Recordset Fields</h1>
<p>
With the form designed, it’s time to indicate which edit controls map to which table columns — or, more precisely, which controls map to which recordset field data members. To perform this task, you use ClassWizard’s “foreign object” mechanism.</p>
<h3>Suggested Reading in the <i>Visual C++ Programmer’s Guide</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_ClassWizard.3a_.Foreign_Objects">
</object><a href=JavaScript:alink_1.Click()>ClassWizard: Foreign Objects</a></li>
</ul>
<p>
Normally, you use ClassWizard to bind controls in a dialog box or form to member variables of your <b>CDialog</b>- or <b>CFormView</b>-derived class. In the case of <b>CRecordView</b>, though, you bind the form’s controls not to data members of the record view class but to data members of the recordset class associated with the record view. </p>
<p>
Your <b>CRecordView</b>-derived class — <code>CSectionForm</code> in this case — has a data member called <code>m_pSet</code>. You can view <code>m_pSet </code>using ClassView. This data member is a pointer to <code>CSectionSet</code>, Enroll’s recordset class. Recall that you viewed this recordset class on the <b>Member Variables</b> tab of ClassWizard (see the figure <a href="_gs_the_csectionset_recordset_class.htm#_gs_table_columns_mapped_to_recordset_data_members_2">Table Columns Mapped to Recordset Data Members</a>, earlier in this lesson).</p>
<p>
The control bindings go through <code>m_pSet</code> to the corresponding field data members of <code>CSectionSet</code>. For example, in the following procedure, you will bind the Course edit control to: </p>
<pre><code>m_pSet-&gt;m_CourseID
</code></pre>
<p class=label>
<b>To bind a form control to a recordset data member</b>
<ol>
<li>
If necessary, go to ResourceView, expand the Dialog folder, and double-click <code>IDD_ENROLL_FORM</code>. This opens the dialog box inside the dialog editor.<br><br></li>
<li>
In the dialog editor window, hold down the CTRL key and double-click the Course edit control. <p class=tl>
ClassWizard’s <b>Add Member Variable</b> dialog box appears, with a proposed field name selected for you in the <b>Member variable name</b> box. ClassWizard chooses this name based on the caption of a static text control that falls previous to the edit control in the tab order. </P><p class=tl>
For example, for <code>IDC_COURSE</code>, the control’s caption is “Course,” and the <b>Member variable name</b> box should display:</P><pre><code>m_pSet-&gt;m_CourseID
</code></pre>
</li>
<li>
Click <b>OK</b> in the <b>Add Member Variable</b> dialog box to accept the name.<br><br></li>
<li>
Repeat steps 2 and 3 for each of the other edit controls on the form.<p class=tl>
It isn’t necessary to create mappings for the static text controls.</P></li>
<li>
Save your work.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Using CTRL+double-click in the dialog editor is a ClassWizard shortcut for mapping form controls to members of the associated dialog, form view, or record view class. You can use it on a pushbutton to create a command handler function for the button. You can use it on other controls to create a class member variable. </p>
<p>
You can view the complete mappings in the Class Wizard <b>Member Variables</b> tab for class <code>CSectionForm</code>. For example, where <code>IDC_COURSE</code> appears in the <b>Control IDs</b> column, you’ll see <code>-&gt;m_CourseID</code> in the corresponding <b>Member</b> column.</p>
</font></BODY>
</HTML>

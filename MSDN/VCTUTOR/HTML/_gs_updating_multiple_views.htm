<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Updating Multiple Views</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_updating_multiple_views"></a><sup></sup>Updating Multiple Views</h1>
<p>
To illustrate some issues about updating multiple views, try the following:
<ol>
<li>
Run Scribble (your Step 3 version) and draw a few strokes in the open document.<br><br></li>
<li>
From the <b>Window</b> menu, click the <b>New Window</b> command.<br><br></li>
<li>
This opens a new document window displaying the same drawing. The document object now has two view objects connected to it. <br><br></li>
<li>
Click the <b>Tile</b> command so you can see both views at the same time.<br><br></li>
<li>
Add some more new strokes in the first window. </li>
</ol>
<p>
Do the new strokes appear in the other window simultaneously? No.</p>
<p>
Why is this the case? Right now, Scribble has no way of telling each open document window what is happening in any other open document window. (This is illustrated in the figure below.) You could force a repaint — for instance, by minimizing and then restoring the window. Then its <code>OnDraw</code> function would display the drawing again, including the new strokes. But how can you ensure that all the views attached to a document reflect changes to the document as soon as they are made?</p>
<p class=label>
<b>Multiple Views on a Document Without Updating</b></p>
<p>
<img src="ct0230s.gif" border=0></p>
<p>
Each view must notify the other views whenever it has modified the document. MFC provides a standard mechanism for notifying views of modifications to a document through the <b>UpdateAllViews</b> member function of the <b>CDocument </b>class.</p>
<p>
The <b>UpdateAllViews</b> function traverses the list of views attached to the document. For each view in the list, the function calls the <b>OnUpdate</b> member function of the <b>CView</b> class. The <b>OnUpdate</b> function is where the view responds to changes in the document; the default implementation of the function invalidates the client area of the view, causing it to be repainted. The simplest way for you to use this updating mechanism in your application is to call the document’s <b>UpdateAllViews</b> function whenever a view modifies a document in response to a user action.</p>
<p>
You can also perform more efficient repainting with this updating mechanism if you use the parameters of the <b>UpdateAllViews</b> function. Here is the declaration of <b>UpdateAllViews</b>:</p>
<pre><code>void UpdateAllViews(CView* pSender, LPARAM lHint = 0L, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CObject* pHint = NULL);
</code></pre>
<p>
The first argument identifies the view that made the modifications to the document. This is specified to keep the <b>UpdateAllViews</b> function from performing a redundant notification. The view that made the modifications doesn’t need to be told about them. The second two arguments are “hints.” You can use these hints to describe the modifications that the view made.</p>
<p>
The <b>UpdateAllViews</b> function gives the hints to every view attached to the document by passing them as parameters to the <b>OnUpdate</b> member function. You can override <b>OnUpdate</b> to interpret those hints and update only the area of the display that corresponds to the modified portion of the document. Thus, if another view is displaying a completely different portion of the document, it doesn’t have to perform any repainting at all.</p>
</font></BODY>
</HTML>

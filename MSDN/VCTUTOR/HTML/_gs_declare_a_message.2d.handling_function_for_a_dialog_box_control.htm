<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declare a Message-Handling Function for a Dialog Box Control</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_declare_a_message.2d.handling_function_for_a_dialog_box_control"></a>Declare a Message-Handling Function for a Dialog Box Control</h1>
<p>
The <b>CDialog</b> class, from which <code>CPenWidthsDlg</code> is derived, defines default handlers for the OK and Cancel buttons. The Pen Widths dialog box contains a third button, the Default button. For <code>CPenWidthsDlg</code> to respond when the user clicks this button, you must define a new message handler and bind it to the Default button. </p>
<p>
Binding a message handler to a control in a dialog box is similar to binding a message handler to a menu command, which was described in <a href="_gs_bind_scribble.92.s_clear_all_command_to_its_handler_code.htm">Bind Scribble’s Clear All Command to Its Handler</a> in Lesson 6; both can be accomplished using the <b>New Windows Message Handler</b> dialog box.</p>
<h2><a name="_gs_adding_the_message_handler_for_the_default_button"></a>Adding the Message Handler for the Default Button</h2>
<p>
The following procedure assumes you have PenWidthsDlg.cpp open in the text editor.</p>
<p class=label>
<b><a name="_gs_to_add_a_message_handler_for_the_default_button"></a>To add a message handler for the Default button</b>
<ol>
<li>
Using WizardBar, click <code>CPenWidthsDlg</code> in the <b>Class</b> combo box.<br><br></li>
<li>
Click the action button arrow, located on the right end of WizardBar.<br><br></li>
<li>
On the action menu, click <b>Add Windows Message Handler</b>.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For a dialog class, the <b>Class or object to handle</b> box lists the IDs of all the controls in the dialog box, not the commands in a menu. Dialog classes also handle messages differently: the message being handled is a Windows control notification message, not an application-specific command. As a result, the <b>New Windows messages to handle</b> box displays more than just COMMAND and UPDATE_COMMAND_UI. It displays all the messages that can be sent by the object that’s highlighted in the <b>Class or object to handle</b> box.</p></li>
<li>
In the <b>Class or object to handle</b> box, select <code>IDC_DEFAULT_PEN_WIDTHS</code>. This is the ID of the Default button you created. <p class=tl>
The <b>New Windows messages to handle</b> box now shows all the notification messages that a pushbutton can send; namely, BN_CLICKED and BN_DOUBLECLICKED. </P></li>
<li>
In the <b>New Windows messages to handle</b> box, select the BN_CLICKED message.<br><br></li>
<li>
Click <b>Add and Edit</b> to create the function.<p class=tl>
The <b>Add Member Function</b> dialog box appears, displaying the candidate name, <code>OnDefaultPenWidths</code>. ClassWizard has synthesized this name from the object’s ID and the message name.</P></li>
<li>
Click <b>OK</b> to accept the function name offered by ClassWizard.</li>
</ol>
<p>
ClassWizard generates a starter function definition in PenWidthsDlg.cpp for the <code>OnDefaultPenWidths</code> message handler. Class Wizard also inserts the member function declaration into PenWidthsDlg.h, and an entry in the message map in PenWidthsDlg.cpp indicating that the member function <code>OnDefaultPenWidths</code> is the message handler called whenever the control <code>IDC_DEFAULT_PEN_WIDTHS</code> sends a BN_CLICKED message. </p>
<p>
Right now the <code>CPenWidthsDlg</code> class doesn’t have any member variables defined; you will define those members in the next topic, <a href="_gs_map_the_controls_to_member_variables.htm">Map the Controls to Member Variables</a>. You will implement <code>OnDefaultPenWidths</code> later, in <a href="_gs_implementing_the_message_handler.htm">Implementing the Message Handler</a>, after you’ve added the member variables. </p>
</font></BODY>
</HTML>

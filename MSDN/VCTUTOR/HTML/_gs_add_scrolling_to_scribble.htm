<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Scrolling to Scribble</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_add_scrolling_to_scribble"></a><sup></sup>Add Scrolling to Scribble</h1>
<p>
The following procedures describe how to perform the first three tasks involved in adding scrolling to Scribble, as described in the previous topic, <a href="_gs_basic_tasks_for_adding_scrolling.htm">Basic Tasks for Adding Scrolling</a>. In the topic, <a href="_gs_working_with_gdi_coordinates.htm">Working with GDI Coordinates</a>, you’ll see how to perform the fourth task.</p>
<h3>Suggested Reading in the <i>Microsoft Foundation Class Reference</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_CDC.3a3a.SetMapMode">
</object><a href=JavaScript:alink_1.Click()>CDC::SetMapMode</a><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_MFC_CScrollView">
</object><a href=JavaScript:alink_2.Click()>CScrollView</a> Overview</li>
</ul>
<p class=label>
<b>To add scrolling support to Scribble</b>
<ol>
<li>
In ClassView, double-click CScribbleDoc. <p class=tl>
ScribbleDoc.h is displayed in the text editor.</P></li>
<li>
In the text editor, scroll to the <code>//Attributes</code> section and add the following code after <code>public</code>:<pre><code>protected:
CSize m_sizeDoc;
public:
CSize GetDocSize() { return m_sizeDoc; }
</code></pre>
<p class=tl>
This defines the size of Scribble documents by having each document store its dimensions. The member variable <code>m_sizeDoc</code> stores the size of the document in a <b>CSize</b> object. This member is protected, so it cannot be accessed directly by the views attached to the document. To let the views retrieve the size of the document, you provide a public helper function named <code>GetDocSize</code>. The views base their scrolling limits on the document size.</P><p class=tl>
Jump to the <code>Serialize</code> member function in <code>CScribbleDoc</code> and add the following line of code after the <b>if</b> branch, in place of the //TODO comments for storing:</P><pre><code>ar &lt;&lt; m_sizeDoc;
</code></pre>
</li>
<li>
Add the matching line just after the <b>else </b>branch:<pre><code>ar &gt;&gt; m_sizeDoc;
</code></pre>
<p class=tl>
The changes to the <code>Serialize</code> member function store and read the <code>m_sizeDoc</code> member variable.</P></li>
<li>
In ClassView, double-click the member function <code>InitDocument</code>.<p class=tl>
ScribbleDoc.cpp is displayed in the text editor.</P></li>
<li>
In the text editor, add the following code after the call to <code>ReplacePen</code>:<pre><code>// Default document size is 800 x 900 screen pixels.
m_sizeDoc = CSize(800,900);
</code></pre>
<p class=tl>
The new code in the <code>InitDocument</code> member function initializes the <code>m_sizeDoc</code> member variable. Recall that you use this function whenever a new document is created or an existing document is opened. All Scribble documents are the same size: 800 logical units in width and 900 logical units in height. For simplicity’s sake, Scribble doesn’t support documents of varying size.</P></li>
<li>
In ClassView, double-click <code>CScribbleView</code> to return to the <code>CScribbleView</code> class definition and, in the text editor, specify that it be derived from class <b>CScrollView </b>(instead of class <b>CView</b>):<pre><code>class CScribbleView : public CScrollView
</code></pre>
<p class=tl>
Recall that MFC uses message maps as well as C++ inheritance. As a result, modifying the class definition in the header file isn’t enough to give <code>CScribbleView</code> all of <b>CScrollView</b>’s functionality. You also have to modify the message-map macros in the implementation file. </P></li>
<li>
In ScribbleView.cpp, change the reference to <b>CView</b> in the following lines to refer to <b>CScrollView</b> instead:<pre><code>IMPLEMENT_DYNCREATE( CScribbleView, CScrollView )

BEGIN_MESSAGE_MAP( CScribbleView, CScrollView )
</code></pre>
<p class=tl>
In the message-map macro, referencing <b>CScrollView </b>instead of <b>CView </b>instructs the framework to search <b>CScrollView</b>’s message map if it can’t find the message handler it needs in <code>CScribbleView</code>’s message map.</P></li>
<li>
If you want to use the diagnostic features provided by MFC, change the implementations of the <code>Dump</code> and <code>AssertValid</code> member functions of <code>CScribbleView</code>. These functions simply call their base class versions; change them to call the <b>CScrollView</b> versions rather than the <b>CView</b> versions. </li>
</ol>
<p>
These changes set the document’s scrolling limits according to the size of the document. By changing the base class of <code>CScribbleView</code> from <b>CView</b> to <b>CScrollView</b>, you give <code>CScribbleView</code> scrolling functionality without having to implement scrolling yourself.</p>
<p>
Since Scribble documents are fixed in size, there is no need to make any subsequent calls to <b>SetScrollSizes</b>. If your application supports documents of varying size, you should call <b>SetScrollSizes</b> immediately after the document’s size changes. (You can do this from the <b>OnUpdate</b> member function of your view class.)</p>
<p>
In addition to the changes just made, the <code>CScribbleView</code> class will override the <b>OnInitialUpdate</b> member function, which is called when the view is first attached to the document. By overriding this function, you can inform the view of the document’s size as soon as possible.</p>
<p>
The following procedure describes how to do this. </p>
<p class=label>
<b><a name="_gs_to_override_oninitialupdate"></a>To override OnInitialUpdate</b>
<ol>
<li>
Use WizardBar to open ScribbleView.cpp in the text editor.<br><br></li>
<li>
Click the arrow on the action button, located on the right end of WizardBar.<br><br></li>
<li>
On the menu, click <b>Add Virtual Function</b>.<p class=tl>
The <b>New Virtual Override</b> dialog box appears.</P></li>
<li>
From the <b>New Virtual Functions</b> list, select <code>OnInitialUpdate</code>.<br><br></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
Add the following line of code just before the call to the <code>OnInitialUpdate</code> function in the base class:<pre><code>SetScrollSizes( MM_TEXT, GetDocument()-&gt;GetDocSize() );
</code></pre>
</li>
</ol>
<p>
The <b>SetScrollSizes</b> member function is defined by <b>CScrollView</b>. Its first parameter is the mapping mode used to display the document. The current version of Scribble uses <b>MM_TEXT</b> as the mapping mode; in Lesson 9, <a href="_gs_enhancing_printing.htm">Enhancing Printing</a>, Scribble will use the <b>MM_LOENGLISH</b> mapping mode for better printing. (For more information on mapping modes, see <a href="_gs_enlarge_the_printed_image.htm">Enlarge the Printed Image</a> in Lesson 9.) </p>
<p>
The second parameter is the total size of the document, which is needed to determine the scrolling limits. The view uses the value returned by the document’s <code>GetDocSize</code> member function for this parameter.</p>
<p>
<b>SetScrollSizes</b> also has two other parameters for which Scribble uses the default values. These are <b>CSize</b> values that represent the size of one “page” and one “line,” the distances to be scrolled if the user clicks the scroll bar or a scroll arrow. The default values are 1/10th and 1/100th of the document size, respectively.</p>
</font></BODY>
</HTML>

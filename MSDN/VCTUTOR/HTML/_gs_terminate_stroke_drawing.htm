<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Terminate Stroke Drawing</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_terminate_stroke_drawing"></a><sup></sup>Terminate Stroke Drawing</h1>
<p>
The <code>OnLButtonUp</code> member function ends the current stroke when the user releases the left mouse button. The function draws a line to connect the last stroke, then releases the mouse for use by other windows. The test at the beginning calls the Windows <b>GetCapture</b> function to determine whether the current window has control of the mouse. If not, the user is not currently drawing in this view. </p>
<p class=label>
<b>To add code for OnLButtonUp</b>
<ol>
<li>
Using WizardBar, jump to <code>CScribbleView</code>’s member function <code>OnLButtonUp</code> in ScribbleView.cpp.<br><br></li>
<li>
Replace the //TODO comments and code with the code shown here:<pre><code>// Mouse button up is interesting in the Scribble 
// application only if the user is currently drawing a new 
// stroke by dragging the captured mouse.

if( GetCapture( ) != this )
return;    // If this window (view) didn't capture the 
// mouse, the user isn't drawing in this window.

CScribbleDoc* pDoc = GetDocument();
CClientDC dc( this );
CPen* pOldPen = dc.SelectObject( pDoc-&gt;GetCurrentPen( ) );
dc.MoveTo( m_ptPrev );
dc.LineTo( point );
dc.SelectObject( pOldPen );
m_pStrokeCur-&gt;m_pointArray.Add(point);

ReleaseCapture( );    // Release the mouse capture established 
// at the beginning of the mouse drag.
return;
</code></pre>
</li>
</ol>
<p>
In the code above, the view obtains a pointer to its document, using <code>GetDocument</code>. Then the view makes sure it has the current pen. It draws the line, adding the points of the current stroke, <code>m_pStrokeCur</code>, to the array, <code>m_pointArray</code>, which contains the points that define the stroke. Finally it releases the mouse capture established at the beginning of the mouse drag.</p>
</font></BODY>
</HTML>

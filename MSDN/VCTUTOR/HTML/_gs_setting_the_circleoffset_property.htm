<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting the CircleOffset Property</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_setting_the_circleoffset_property"></a>Setting the CircleOffset Property</h1>
<p>
The reason that CircleOffset is defined as a Get/Set property is to provide an entry point where the offset can be validated when the user attempts to change its value. Two rules govern the offset validation:
<ul type=disc>
<li>
The CircleShape property must be set to <b>TRUE</b>.<br><br></li>
<li>
The new offset must not force the circle outside the control's bounding rectangle.</li>
</ul>
<p>
The Set function for Get/Set properties can be written to ignore requests to set the property value to its current value. Properties implemented using only member variables do not provide this ability. Consequently, there is another optional rule that governs validation of Get/Set properties in general:
<ul type=disc>
<li>
The new property value must be different from the old property value.</li>
</ul>
<p>
If any of the rules are not followed, <code>SetCircleOffset</code> ignores the request.</p>
<p>
If the new offset is valid, the value of the CircleOffset property is updated. Because the CircleOffset property is persistent, the modified flag is set. Because CircleOffset affects the visual appearance of the control, the control is invalidated. Invalidating the control is the simplest way to force the control to be redrawn.</p>
<p>
Modify <code>SetCircleOffset</code> in CIRCCTL.CPP to validate the new value. Remove the //TODO comment line. Add the <code>if</code> statement and other code below to the <code>SetModifiedFlag</code> function call that ClassWizard added:</p>
<pre><code>void CCircCtrl::SetCircleOffset(short nNewValue)
{
 &nbsp;&nbsp; // Validate the specified offset value
 &nbsp;&nbsp; if ((m_circleOffset != nNewValue) &amp;&amp; m_circleShape &amp;&amp; InBounds(nNewValue))
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_circleOffset = nNewValue;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetModifiedFlag();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidateControl();
 &nbsp;&nbsp; }
}
</code></pre>
<p>
Notice that the function <code>SetCircleOffset</code> calls the <code>InBounds</code> member function. This function returns <b>TRUE</b> if the specified offset does not force the circle outside the bounding rectangle of the control.</p>
<p class=label>
<b>To implement the InBounds member function</b>
<ol>
<li>
On WizardBar, select CCircCtl to edit the CCIRCCTL.CPP file.<br><br></li>
<li>
Click the arrow on the action button, located on the right end of WizardBar, and select <b>Add Member Function</b>.<p class=tl>
The <b>Add Member Function</b> dialog box is displayed.</P></li>
<li>
In the <b>Function Type</b> edit box, type <code>BOOL</code>. This is the type of value the function will return.<br><br></li>
<li>
In the <b>Function Declaration </b>edit box, type <code>InBounds(short nOffset)</code>.<br><br></li>
<li>
Under <b>Access</b>, click <b>Protected</b>.<br><br></li>
<li>
Click <b>OK</b> to close the <b>Add Member Function</b> dialog box.<p class=tl>
This will add the following declaration in the protected section of CIRCCTL.H:</P><pre><code>BOOL InBounds(short nOffset);
</code></pre>
<p class=tl>
It will also add this function definition at the end of CIRCCTL.CPP and position the cursor in the function:</P><pre><code>void CCircCtrl::InBounds(short nOffset)
{

}
</code></pre>
</li>
<li>
Add code to the function in CIRCCTL.CPP as shown below:<pre><code>BOOL CCircCtrl::InBounds(short nOffset)
{
 &nbsp;&nbsp; CRect rc;
 &nbsp;&nbsp; int diameter;
 &nbsp;&nbsp; int length;
 &nbsp;&nbsp; int cx,cy;

 &nbsp;&nbsp; GetControlSize(&amp;cx, &amp;cy);

 &nbsp;&nbsp; if (cx &gt; cy)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; length = cx;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; diameter = cy;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; else
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; length = cy;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; diameter = cx;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; if (nOffset &lt; 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nOffset = -nOffset;
 &nbsp;&nbsp; return (diameter / 2 + nOffset) &lt;= (length / 2);
}
</code></pre>
</li>
</ol>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hit Testing</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_hit_testing"></a>Hit Testing</h1>
<p>
The rule governing the Circle control flash behavior is that the circle should flash only if the mouse is within the circular area of the control. To achieve this effect, you must implement "hit testing," which checks the coordinates of every mouse click within the control to see if they are within the circle. Hit testing is implemented in the Circle control by the <code>InCircle</code> function. <code>InCircle</code> returns <b>TRUE</b> if the given point is within the area of the circle or the ellipse.</p>
<p class=label>
<b>To implement the InCircle function</b>
<ol>
<li>
On WizardBar, select CCircCtl to edit the CCIRCCTL.CPP file.<br><br></li>
<li>
Click the arrow on the action button, located on the right end of the WizardBar, and select <b>Add Member Function</b>.<p class=tl>
The <b>Add Member Function</b> dialog box is displayed.</P></li>
<li>
In the <b>Function Type</b> edit box, type <code>BOOL</code>. This is the type of value the function will return.<br><br></li>
<li>
In the <b>Function Declaration </b>edit box, type <code>InCircle(CPoint&amp; point)</code>.<br><br></li>
<li>
Under <b>Access</b>, click <b>Protected</b>.<br><br></li>
<li>
Click <b>OK</b> to close the <b>Add Member Function</b> dialog box.<p class=tl>
This will add the following declaration in the protected section of CIRCCTL.H:</P><pre><code>BOOL InCircle(CPoint&amp; point);
</code></pre>
<p class=tl>
It will also add a function definition at the end of CIRCCTL.CPP and position the cursor in the function:</P><pre><code>BOOL CCircCtrl::InCircle(CPoint&amp; point)
{

}
</code></pre>
</li>
<li>
Add code to the function in CIRCCTL.CPP as shown:<pre><code>BOOL CCircCtrl::InCircle(CPoint&amp; point)
{
 &nbsp;&nbsp; CRect rc;
 &nbsp;&nbsp; GetClientRect(rc);
 &nbsp;&nbsp; GetDrawRect(&amp;rc);

 &nbsp;&nbsp; // Determine radii
 &nbsp;&nbsp; double a = (rc.right - rc.left) / 2;
 &nbsp;&nbsp; double b = (rc.bottom - rc.top) / 2;

 &nbsp;&nbsp; // Determine x, y
 &nbsp;&nbsp; double x = point.x - (rc.left + rc.right) / 2;
 &nbsp;&nbsp; double y = point.y - (rc.top + rc.bottom) / 2;

 &nbsp;&nbsp; // Apply ellipse formula
 &nbsp;&nbsp; return ((x * x) / (a * a) + (y * y) / (b * b) &lt;= 1);
}
</code></pre>
</li>
</ol>
<p>
The function works by calculating whether the point is within the boundary of the ellipse. The <code>GetDrawRect</code> function is called to make the necessary adjustments to the bounding rectangle if the value of the CircleShape property is <b>TRUE</b>.</p>
<p>
The variables <code>a</code> and <code>b</code> are set to the horizontal and vertical radii of the ellipse. Based on the given point, the variables <code>x</code> and <code>y</code> are translated into the coordinates that are offsets from the center of the ellipse. The last line returns the Boolean result of the calculation, using the standard formula for an ellipse. Note that this calculation is also valid for a circle because a circle is simply a special case of an ellipse.</p>
<p>
The mouse message handlers perform hit testing by passing the point coordinates that they receive as parameters to the <code>InCircle</code> member function. If <code>InCircle</code> returns <b>TRUE</b>, the circle is painted appropriately.</p>
</font></BODY>
</HTML>

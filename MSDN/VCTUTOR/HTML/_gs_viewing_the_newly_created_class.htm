<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Viewing the Newly Created Class</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_viewing_the_newly_created_class"></a>Viewing the Newly Created Class</h1>
<p>
When you use WizardBar to create a new class, WizardBar creates and adds the associated .h and .cpp files to the project. You can view them in the FileView pane of the Project Workspace window; and in the ClassView pane, you can view the iconic representation of the new <code>CPenWidthsDlg</code> class and its default member functions.</p>
<p>
In the next topic, <a href="_gs_declare_a_message.2d.handling_function_for_a_dialog_box_control.htm">Declare a Message-Handling Function for a Dialog Box Control</a>, you’ll use WizardBar to add a message-handling function to the PenWidthsDlg.h and PenWidthsDlg.cpp files. But first, examine the files as they appear as first created.</p>
<h2>Header File</h2>
<p>
Take a minute to examine the initial version of PenWidthsDlg.h. This file contains a declaration for <code>CPenWidthsDlg</code>, the class that implements the Pen Widths dialog box. At this point, the class contains two member functions: a constructor and the <code>DoDataExchange</code> function, which is described later on.</p>
<p>
The file contains comment lines that begin <code>//{{AFX_</code> and <code>//}}AFX_</code>. ClassWizard uses those comment lines to find the sections of code that it maintains. There are three such sections in the header file, each delimited by slightly different comments:
<ul type=disc>
<li>
The <code>AFX_DATA</code> section, containing the declarations of the dialog data members<br><br></li>
<li>
The <code>AFX_VIRTUAL</code> section, containing the declarations of the override functions<br><br></li>
<li>
The <code>AFX_MSG</code> section, containing the declarations of the message handlers </li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In general, you shouldn’t manually edit any declarations that appear in these sections, or add code here. It is good style, and safe practice, to put any custom declarations in the appropriate group, but below the <code>//}}AFX_</code> line.</p>
<h2>Implementation File</h2>
<p>
Now examine the initial version of PenWidthsDlg.cpp. This file contains an empty message map and empty function definitions for the constructor and the <code>DoDataExchange</code> member function. For more information on the <code>DoDataExchange</code> function, see <a href="_gs_map_the_controls_to_member_variables.htm">Map the Controls to Member Variables</a> later in this lesson.</p>
<p>
The CPenWidthsDlg.cpp constructor has a base initializer for <b>CDialog</b>. The <b>CDialog</b> constructor that it invokes creates a modal dialog box, and it takes two parameters: the ID of the dialog resource and a pointer to the parent window. For the first parameter ClassWizard has specified <code>CPenWidthsDlg::IDD</code>. This is an enumerated value that is defined in the <code>AFX_DATA</code> section in the class declaration. This enumerated value is equal to <code>IDD_PEN_WIDTHS</code>, the ID you specified earlier in the topic <a href="_gs_create_the_dialog_box.htm">Create the Dialog Box</a>. Thus the dialog class is associated with the dialog resource you created.</p>
<p>
Also notice that the implementation file, like the header file, contains sections delimited by <code>//{{AFX_</code> and <code>//}}AFX_</code>, into which ClassWizard will insert code later. </p>
</font></BODY>
</HTML>

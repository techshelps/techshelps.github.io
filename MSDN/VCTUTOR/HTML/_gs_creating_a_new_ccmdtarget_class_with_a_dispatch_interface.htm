<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a New CCmdTarget Class with a Dispatch Interface</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_creating_a_new_ccmdtarget_class_with_a_dispatch_interface"></a><sup></sup>Creating a New CCmdTarget Class with a Dispatch Interface</h1>
<p>
Using ClassWizard is a simple way to derive a new class from <b>CCmdTarget</b> that implements a new dispatch interface.</p>
<p class=label>
<b>To create a new CCmdTarget class with a dispatch interface</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click <b>Add Class</b> and from the menu click <b>New</b>.<p class=tl>
The <b>New Class</b> dialog box appears.</P></li>
<li>
Under <b>Class information</b>, in the <b>Name</b> box, type <code>CAutoClickPoint</code>.<br><br></li>
<li>
From the <b>Base class</b> drop-down list box, select CCmdTarget.<p class=tl>
Notice that all <b>Automation</b> options are now available because these options pertain only to <b>CCmdTarget</b>-derived classes.</P></li>
<li>
Select the <b>Automation</b> option.<br><br></li>
<li>
Click <b>OK</b>.<p class=tl>
You are returned to the ClassWizard dialog box.</P></li>
<li>
Click the <b>Automation</b> tab and ensure that CAutoClickPoint is selected in the <b>Class name</b> box.<br><br></li>
<li>
Click the <b>Add Property</b> button and fill in the <b>Add Property</b> dialog box:<ul type=disc>
<li>
In the <b>External name</b> box, Type <code>x</code>.<br><br></li>
<li>
In the <b>Type</b> box, select short. <br><br></li>
<li>
Accept m_x as the <b>Variable name</b>.<br><br></li>
<li>
Remove OnXChanged as the <b>Notification function</b>.<p class=tl>
As you will see later, the members of the <code>CAutoClickPoint</code> dispatch interface class do not need notification functions.</P></li>
<li>
Use the default Implementation type, <b>Member variable</b>.</li>
</ul>
</li>
<li>
Click <b>OK</b>.<br><br></li>
<li>
Repeat steps 8 and 9 for the <code>y</code> property.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p>
Study the <code>CAutoClickPoint</code> class created by ClassWizard in AutoClickPoint.h and AutoClickPoint.cpp. </p>
<p>
Toward the end of AutoClickPoint.h, you’ll find the declaration for the dispatch map:</p>
<pre><code>DECLARE_DISPATCH_MAP()
</code></pre>
<p>
The AutoClickPoint.cpp file implements the dispatch map, reflecting the two properties you added in ClassWizard, <code>x</code> and <code>y</code>.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To jump to the implementation file, from ClassView, right-click any of the members of <code>CAutoClickPoint</code>, and click <b>Go to Definition</b>. </p>
<pre><code>BEGIN_DISPATCH_MAP(CAutoClickPoint, CCmdTarget)
   //{{AFX_DISPATCH_MAP(CAutoClickPoint)
   DISP_PROPERTY(CAutoClickPoint, "x", m_x, VT_I2)
   DISP_PROPERTY(CAutoClickPoint, "y", m_y, VT_I2)
   //}}AFX_DISPATCH_MAP
END_DISPATCH_MAP()
</code></pre>
</font></BODY>
</HTML>

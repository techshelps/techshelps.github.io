<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Simple Data Binding</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_simple_data_binding"></a>Simple Data Binding</h1>
<h3>Circle: ActiveX Control, Lesson 9</h3>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you prefer working from a printed tutorial, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Copying and Printing">
</object><a href=JavaScript:alink_1.Click()>Copying and Printing</a> in <i>MSDN Library Help</i> for details about printing a lesson, a set of topics, or a single topic.</p>
<p>
Data binding is a powerful feature of ActiveX controls. Data binding is a notification mechanism that links control properties through the container to a data source, such as a database field. In this lesson, you will add a bindable property to the Circle control to illustrate simple data binding.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;There is a difference between a bindable property and a bound property. Bindable refers to the fact that a property is available to be bound. A bindable property becomes a bound property at run time, when the control is created and inserted into a container that responds to bound property notifications.</p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_ActiveX_Controls.3a_.Using_Data_Binding_in_an_ActiveX_Control">
</object><a href=JavaScript:alink_2.Click()>ActiveX Controls: Using Data Binding in an ActiveX Control</a>, <i>Visual C++ Programmer's Guide</i></li>
</ul>

<h2><a name="_gs_optimistic_and_pessimistic_data_binding"></a>Optimistic and Pessimistic Data Binding</h2>
<p>
There are two levels of data binding: optimistic and pessimistic. With optimistic data binding, the control assumes that changes can be made to a bound property; with pessimistic data binding, the control is required to ask the container's permission before making changes to the bound property. Whenever a bound property is changed, the control must notify the container by calling the appropriate function, depending on the level of data binding supported. </p>
<p>
When optimistic data binding is used, the control notifies the container by calling the <b>BoundPropertyChanged</b> function. This form of data binding is used for the Note property in the Circle control.</p>
<p>
When pessimistic data binding is used, the control requests permission from the container by calling the <b>BoundPropertyRequestEdit</b> function. If the <b>BoundPropertyRequestEdit</b> function returns <b>TRUE</b>, the control can change the bound property. However, if the <b>BoundPropertyRequestEdit</b> function returns <b>FALSE</b>, the control must not change the bound property.</p>
<p>
Test Container's <b>Notification Log</b> dialog box helps you test bound properties that use either optimistic or pessimistic data binding. When the <b>BoundPropertyChanged</b> function is called, a notification is logged in the dialog box. You are also allowed to choose the response to each call to the <b>BoundPropertyRequestEdit</b> function. A different container might update a field in a database record when the <b>BoundPropertyChanged</b> function is called. It might also return <b>FALSE</b> from a call to the <b>BoundPropertyRequestEdit</b> function if the field or record was in use.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can find a finished example of this lesson's code in the CIRC3 sample source code directory.</p>
<p>
To clearly show the differences between bindable and nonbindable properties, a custom Get/Set property, called Note, will be implemented and changed into a bindable property in two separate steps.</p>
<p>
In this lesson, you will:
<ul type=disc>
<li>
<a href="_gs_defining_the_note_property.htm">Define the Note custom Get/Set property</a>.<br><br></li>
<li>
<a href="_gs_making_the_note_property_bindable.htm">Make the Note property bindable</a>.<br><br></li>
<li>
<a href="_gs_notifying_the_container_of_changes.htm">Notify the control's container of changes</a>.</li>
</ul>
</font></BODY>
</HTML>

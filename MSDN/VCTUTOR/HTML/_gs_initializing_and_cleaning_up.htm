<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing and Cleaning Up</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_initializing_and_cleaning_up"></a><sup></sup>Initializing and Cleaning Up</h1>
<p>
Because a document can be created with either the <b>New</b> command or the <b>Open</b> command on the <b>File</b> menu, <code>CScribbleDoc</code> overrides both the <b>OnNewDocument</b> and <b>OnOpenDocument</b> member functions of <b>CDocument</b> to perform necessary document initialization. However, for Scribble, both initializations are the same, so both overrides call the member function <code>InitDocument</code>.</p>
<p>
The framework automatically calls <code>OnNewDocument</code> when a new document is created or <code>OnOpenDocument</code> when a document is opened. AppWizard creates a starter version of <code>OnNewDocument</code> for you, and ClassWizard created a starter version for <code>OnOpenDocument</code>.</p>
<p>
In the following procedure, you’ll define these functions for Scribble. </p>
<p class=label>
<b>To implement initialization for Scribble’s documents</b>
<ol>
<li>
Use WizardBar to jump to the starter definition for <code>InitDocument</code> (in class <code>CScribbleDoc</code>) and fill it in with the following code:<pre><code>m_nPenWidth = 2;&nbsp; // Default 2-pixel pen width
// Solid black pen
m_penCur.CreatePen( PS_SOLID, m_nPenWidth, RGB(0,0,0) );
</code></pre>
<p class=tl>
<code>InitDocument</code> sets a default pen width and creates a pen object for drawing. Pen creation is done through the <b>CPen</b> object, <code>m_penCur</code>, by calling its <b>CreatePen</b> member function. The arguments specify a solid black pen 2 pixels wide.</P></li>
<li>
Use WizardBar to jump to the override of <code>OnNewDocument</code> created by AppWizard and replace the //TODO comments with the call to <code>InitDocument</code>. The completed handler looks like this:<pre><code>BOOL CScribbleDoc::OnNewDocument()
{
if(!CDocument::OnNewDocument())
return FALSE;
InitDocument();
return TRUE;
}
</code></pre>
</li>
<li>
Finally, use WizardBar jump to the starter version of <code>OnOpenDocument</code> and replace the //TODO comments with another call to <code>InitDocument</code>. The completed handler looks like this:<pre><code>BOOL CScribbleDoc::OnOpenDocument(LPCTSTR lpszPathName) 
{
if( !CDocument::OnOpenDocument( lpszPathName ) )
return FALSE;
InitDocument( );
return TRUE;
}
</code></pre>
<p class=tl>
The overrides of <code>OnNewDocument</code> and <code>OnOpenDocument</code> call the base-class version of the function before performing application-specific initialization of the document.</P></li>
</ol>
<p>
The following procedure describes how to add the code that implements document cleanup for Scribble. You’ll replace the ClassWizard starter version of the <b>DeleteContents</b> member function of <b>CDocument.</b> Note that you are still working in ScribbleDoc.cpp. </p>
<p class=label>
<b><a name="_gs_to_implement_document_cleanup"></a>To implement document cleanup</b>
<ul type=disc>
<li>
Use WizardBar to jump to the <code>DeleteContents</code> member function, and replace the //TODO comment with the following code:<pre><code>while( !m_strokeList.IsEmpty( ) )
{
delete m_strokeList.RemoveHead( );
}
</code></pre>
</li>
</ul>
<p>
<code>DeleteContents</code> provides the best place to destroy a document’s data when you want to keep the document object around. The function is called automatically by the framework any time it’s necessary to delete only the document’s contents. It’s called in response to the <b>Close</b> command on the <b>File</b> menu, when the user closes the document’s last open window, and before creating or opening a document with the <b>New</b> and <b>Open</b> commands. This is all part of the base-class functionality of <code>DeleteContents</code>.</p>
<p>
Scribble’s override of <code>DeleteContents</code> iterates through the stroke list. <code>DeleteContents</code> calls the <b>CTypedPtrList</b> member function <b>RemoveHead</b>, which removes the list object and returns a pointer to the removed object. <code>DeleteContents</code> then calls the <b>delete</b> operator on this pointer, destroying the stroke object.</p>
<p>
Alternatively, this cleanup code could be placed in the destructor, but <code>DeleteContents</code> is reused later in other functions.</p>
</font></BODY>
</HTML>

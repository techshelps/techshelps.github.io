<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with GDI Coordinates</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_working_with_gdi_coordinates"></a>Working with GDI Coordinates</h1>
<p>
Notice that the addition of scrolling didn’t require you to modify the <code>OnDraw</code> member function of <code>CScribbleView</code>. If the drawing function is unchanged, why does the window display different portions of the document depending on where the user has scrolled to? Because the document is displayed using coordinates relative to an origin used by GDI. When this origin was fixed at the upper-left corner of the client area, the part of the document that was visible was always the same. By moving the origin used by GDI, <b>CScrollView</b> can adjust which portion of the document is shown in the client area of the window and which portions are hidden.</p>
<p>
The origin used by GDI is a characteristic of a device context; it is used by the member functions of the <b>CDC</b> class. If you want to make adjustments to the <b>CDC</b> object used by your view, you can override the <b>OnPrepareDC</b> member function defined by <b>CView</b>. <b>CScrollView</b> overrides <b>OnPrepareDC</b> to move the device context’s origin to reflect the currently scrolled position. <b>OnPrepareDC</b> is always called by the framework before it calls <b>OnDraw</b>. As a result, you don’t have to make any changes to the <code>OnDraw</code> function to draw a properly scrolled document; all the work needed to do scrolling is done to the device context before <code>OnDraw</code> receives it. </p>
<p>
Note that changing the device context’s origin doesn’t affect the coordinates you receive with Windows messages such as <b>WM_LBUTTONDOWN</b> or <b>WM_MOUSEMOVE</b>; the points accompanying those messages are still specified in coordinates relative to the upper-left corner of the client area. This is because Windows messages are not part of a device context, so they are unaffected by changes to the GDI origin. Thus, <code>CScribbleView</code> must now deal with two types of coordinates:
<ul type=disc>
<li>
The coordinates used for describing the points received with a mouse message. Those points are returned in “device coordinates.”<br><br></li>
<li>
The coordinates used for drawing with GDI. These are known as “logical coordinates.” </li>
</ul>
</font></BODY>
</HTML>

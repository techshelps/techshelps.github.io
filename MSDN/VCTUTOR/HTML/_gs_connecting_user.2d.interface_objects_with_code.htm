<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting User-Interface Objects with Code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_connecting_user.2d.interface_objects_with_code"></a>Connecting User-Interface Objects with Code</h1>
<p>
The MFC code that AppWizard generates may be sufficient for a small number of your application’s user-interface objects, such as the splash screen, but for the most part you’ll have application-specific routines that you want called when an interface object receives input from the user. To do that, you need to make a connection between the interface object, the event, and the code you want called.</p>
<p>
The visual tools provided by the development environment simplify the task of connecting user-interface objects to your application-specific code. If you’ve used Visual C++ before, you’re probably familiar with the ways that ClassWizard automates such tasks as generating message-handler functions and message maps. Visual C++ implements two shortcuts to the ClassWizard dialog box: ClassView and WizardBar. In addition to providing a seamless link between your project classes and files, these tools make navigating through your source code as easy as pointing and clicking.
<ul type=disc>
<li>
ClassView<p class=tl>
ClassView displays your classes and their members in a hierarchical view, using visually intuitive icons. For instance, it displays private member functions with a “key” next to the function name. By simply clicking a class or any of its displayed members, you can jump directly to the associated declaration or definition in your project source file.</P><p class=tl>
ClassView provides a pop-up menu that you can use to directly add member functions and variables to a given class. (You’ll still use ClassWizard, or WizardBar, to add message-handling functions.)</P><p class=tl>
You can also use ClassView to:</P><ul type=disc>
<li>
Browse symbols<br><br></li>
<li>
Display graphs of symbol relationships<br><br></li>
<li>
Set breakpoints</li>
</ul>
</li>
<li>
WizardBar<p class=tl>
Like ClassView, WizardBar enables you to jump directly to a member function. Additionally, you can use WizardBar to override virtual functions and to create a handler for the Windows messages or commands a particular class can respond to.</P></li>
</ul>
<p>
The tutorials demonstrate how these features simplify and speed the process of specifying how your user-interface objects respond to messages.</p>
<h3>Suggested Reading</h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="ClassView">
</object><a href=JavaScript:alink_1.Click()>ClassView: Overview</a>, <i>Visual C++ User’s Guide</i><br><br></li>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="ClassView">
</object><a href=JavaScript:alink_2.Click()>ClassView Topics</a>, <i>Visual C++ Programmer’s Guide</i></li>
</ul>
</font></BODY>
</HTML>

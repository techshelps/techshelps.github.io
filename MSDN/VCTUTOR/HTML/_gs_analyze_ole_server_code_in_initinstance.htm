<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Analyze OLE Server Code in InitInstance</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_analyze_ole_server_code_in_initinstance"></a><sup></sup>Analyze OLE Server Code in InitInstance</h1>
<p>
Switch to Scribble.cpp and examine the OLE server code that AppWizard provided, beginning with <code>CScribbleApp theApp</code>. (Note that the default class names differ from those you customized for Scribble.)</p>
<p>
All MFC OLE applications — whether container, server, or Automation server — must call <b>AfxOleInit</b> and the static function <b>COleTemplateServer::RegisterAll</b> from the application’s <code>InitInstance</code> to initialize framework support for OLE. For an application that is not an OLE server, the <b>CDocTemplate</b> object coordinates the creation of the frame window, view, and document object for the stand-alone application. The <b>CDocTemplate</b> uses menu, accelerator, and string resources passed to the constructor in <code>InitInstance</code> code, to determine the menu, accelerators, and Windows shell registration of the stand-alone application. </p>
<p>
In the case of an OLE server application, additional information is needed. The <code>InitInstance</code> function passes this information as parameters to the <b>CDocTemplate::SetServerInfo</b> function, before it calls <b>CWinApp::AddDocTemplate</b>. Here is a description of the parameters:</p>
<pre><code>pDocTemplate-&gt;SetServerInfo(
   IDR_SCRIBBTYPE_SRVR_EMB, IDR_SCRIBBTYPE_SRVR_IP,
   RUNTIME_CLASS(CInPlaceFrame));
</code></pre>
<ul type=disc>
<li>
<code>IDR_SCRIBBTYPE_SRVR_EMB</code> is the common ID of the menu and accelerator resources loaded when Scribble is fully opened by the container application when it edits an embedded item.<br><br></li>
<li>
<code>IDR_SCRIBBTYPE_SRVR_IP</code> is the common ID of the menu, accelerators, and toolbar bitmap resources that are loaded when Scribble is activated in place in the container application. The purpose and design of these resources specifically for the in-place activated server application, as well as the purpose and design of the above resources for the fully opened server application, are explained later in this tutorial.<br><br></li>
<li>
<code>RUNTIME_CLASS</code>(<code>CInPlaceFrame</code>) is the <b>COleIPFrameWnd</b>-derived class provided by AppWizard. This class defines the behavior of the window created by the framework on behalf of the server application when it is activated in place by the container. The AppWizard-provided implementation of this class adds the resize border to the in-place window so that the user can resize the object while it is activated in place.</li>
</ul>
<p>
The following code, from Scribble.cpp, defines the OLE class ID for the Scribble application and registers the application. AppWizard provides a default ID that is randomly generated. The call to <b>COleTemplateServer::ConnectTemplate</b> registers the class ID with Windows.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <b>clsid</b> below will differ from the unique one that is provided when you run AppWizard.</p>
<pre><code>static const CLSID clsid =
{ 0x0002180f, 0x0, 0x0, { 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46 } };

...

m_server.ConnectTemplate(clsid, pDocTemplate, FALSE);
</code></pre>
<p>
If the application was spawned by OLE as an in-place server or Automation server, then <code>InitInstance</code> returns before performing additional initialization tasks that are appropriate only for stand-alone applications:</p>
<pre><code>if (cmdInfo.m_bRunEmbedded || cmdInfo.m_bRunAutomated)
{
   return TRUE;
}
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing AutoClik's Basic Behavior</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_autoclik.92.s_basic_behavior"></a><sup></sup>Implementing AutoClik’s Basic Behavior</h1>
<p>
The rest of Step 1 implements AutoClik’s basic behavior, which consists of displaying text at mouse clicks and accepting changed text by using a dialog box. </p>
<p>
To complete this topic, you need to create a dialog box and add a menu item. For tutorial information, see Scribble Lesson 7, <a href="_gs_adding_a_dialog_box.htm">Adding a Dialog Box</a>, and <a href="_gs_add_the_clear_all_command_to_scribble.92.s_edit_menu.htm">Add the Clear All Command to Scribble's Edit Menu</a> in Scribble Lesson 5.</p>
<p class=label>
<b>To add the member variables to AutoClik’s document class</b>
<ol>
<li>
Declare the following member variables in the public Attributes section of AutoClickDoc.h:<pre><code>CPoint m_pt;
CString m_str;
</code></pre>
</li>
<li>
Use ClassView to jump to the <code>CAutoClickDoc</code> constructor and add the following lines (after the <code>EnableAutomation</code> call):<pre><code>m_pt = CPoint(10,10);
m_str = _T("Automation!");
</code></pre>
</li>
<li>
Serialize the member variables in the document class. Use ClassView to jump to the <code>Serialize</code> member function and implement it with the following code.<ul type=disc>
<li>
Add the following line in place of the //TODO comment for storing code:</li>
</ul>
<pre><code>ar &lt;&lt; m_pt &lt;&lt; m_str;
</code></pre>
<ul type=disc>
<li>
Add the following line in place of the //TODO comment for loading code:</li>
</ul>
<pre><code>ar &gt;&gt; m_pt &gt;&gt; m_str;
</code></pre>
</li>
</ol>
<p class=label>
<b>To implement AutoClik’s drawing code</b>
<ul type=disc>
<li>
Use ClassView to jump to the <code>OnDraw</code> member function of <code>CAutoClickView</code> and add the following line, just after the <code>ASSERT_VALID</code> call (you can replace the //TODO comment):<pre><code>pDC-&gt;TextOut(pDoc-&gt;m_pt.x, pDoc-&gt;m_pt.y, 
pDoc-&gt;m_str);
</code></pre>
</li>
</ul>
<p>
The implementations of <code>OnLButtonDown</code> and <code>OnEditChangeText</code> make use of the helper function, <code>Refresh</code>. </p>
<p class=label>
<b>To implement the Refresh helper function</b>
<ol>
<li>
In ClassView, right-click the class <code>CAutoClickDoc</code>.<br><br></li>
<li>
On the pop-up menu that appears, click <b>Add Member Function</b>. <br><br></li>
<li>
In the <b>Add Member Function</b> dialog box:<ul type=disc>
<li>
In the <b>Function Type</b> edit box, type <code>void</code>.<br><br></li>
<li>
In the <b>Function Declaration</b> box, type <code>Refresh()</code>.<br><br></li>
<li>
In the <b>Access</b> area, select <b>Public</b>, and click <b>OK</b>.</li>
</ul>
<p class=tl>
ClassWizard adds the declaration to the Public section of the header file and creates a starter definition in the implementation file. </P></li>
<li>
From ClassView, jump to the newly-created <code>Refresh</code> and implement it with the following code.<pre><code>UpdateAllViews(NULL);
SetModifiedFlag();
</code></pre>
</li>
</ol>
<p class=label>
<b>To implement the mouse click handler</b>
<ol>
<li>
Using WizardBar, select CAutoClickView from the Class list.<br><br></li>
<li>
Click the action arrow located on the right end of WizardBar.<br><br></li>
<li>
Click <b>Add Windows Message Handler</b>.<p class=tl>
The <b>New Windows Message and Event Handlers</b> dialog box appears.</P></li>
<li>
From the <b>New Windows messages/events</b> list box, select WM_LBUTTONDOWN. <br><br></li>
<li>
Click <b>Add and Edit</b>.<br><br></li>
<li>
Replace the highlighted //TODO comment with the following code:<pre><code>CAutoClickDoc* pDoc = GetDocument();
pDoc-&gt;m_pt = point;
pDoc-&gt;Refresh();
</code></pre>
</li>
</ol>
<p class=label>
<b>To implement the Change Text dialog box</b>
<ol>
<li>
On the <b>Insert</b> menu, click <b>Resource</b>.<p class=tl>
The <b>Insert Resource</b> dialog box appears.</P></li>
<li>
Select <b>Dialog</b> and click <b>OK</b>.<br><br></li>
<li>
Open and pin down the dialog’s properties page. (To open the properties page, right click on the dialog box and click <b>Properties</b>.)<br><br></li>
<li>
In the <b>Dialog Properties </b>page, type the following information:<ul type=disc>
<li>
In the <b>ID</b> box, type <code>IDD_CHANGE_TEXT</code>.<br><br></li>
<li>
In the <b>Caption</b> box, type <code>Change Text</code>.</li>
</ul>
</li>
<li>
Add two controls to the dialog box:<ul type=disc>
<li>
A static text control labeled Enter Text: <br><br></li>
<li>
An edit control for the text</li>
</ul>
</li>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<p class=tl>
The <b>Adding a Class</b> dialog box appears, with a message that <code>IDD_CHANGE_TEXT</code> is a new resource, and with the <b>Create a new class option</b> selected by default.</P><p class=tl>
ClassWizard knows that a class hasn’t been defined yet for your dialog resource, so it displays this dialog box to enable you to define one. </P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you had created the dialog class before creating the dialog resource, you could specify the <b>Select an existing class</b> option in this dialog box to connect the dialog box to the existing class.</p></li>
<li>
Click <b>OK</b> to create the dialog class.<p class=tl>
The <b>Create New Class</b> dialog box appears.</P></li>
<li>
Under <b>Class Information</b>, in the <b>Name</b> box, type <code>CChangeText</code>.<p class=tl>
Note the following default selections:</P><ul type=disc>
<li>
CDialog is selected as the base class.<br><br></li>
<li>
IDD_CHANGE_TEXT is selected as the dialog ID.</li>
</ul>
</li>
<li>
Click <b>OK</b>.<p class=tl>
ClassWizard creates the class and returns you to the <b>MFC ClassWizard</b> dialog box. Click <b>OK</b> to close the dialog box.</P></li>
<li>
Switch to the <code>IDD_CHANGE_TEXT</code> dialog box in ResourceView.<br><br></li>
<li>
Hold down the CTRL key and double-click IDC_EDIT1. Type <code>m_str</code> in the <b>Member Variable Name</b> box to add the member variable for the edit control.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<p class=label>
<b>To add the Change Text command to AutoClik’s Edit menu</b>
<ol>
<li>
From ResourceView, expand the Menu folder and double-click IDR_ACLICKTYPE.<p class=tl>
The menu editor opens.</P></li>
<li>
Click AutoClik’s Edit menu.<br><br></li>
<li>
Add a separator below the Paste menu item.<br><br></li>
<li>
Add the following menu item text below the separator:<p class=tl>
Change &amp;Text...</P></li>
<li>
Press ENTER.<p class=tl>
The menu editor automatically names the command <code>ID_EDIT_CHANGETEXT</code>. You can view this by selecting the menu item again.</P></li>
<li>
Type a prompt string such as:<pre><code>Change text displayed in the view.
</code></pre>
</li>
</ol>
<p>
Close the resource editors before proceeding to the next step.</p>
<p class=label>
<b>To implement the handler for the Change Text command</b>
<ol>
<li>
Using WizardBar, select CAutoClickDoc from the Class list.<br><br></li>
<li>
From the Filter list, select ID_EDIT_CHANGETEXT.<br><br></li>
<li>
Click the action arrow located on the right end of WizardBar.<br><br></li>
<li>
Click <b>Add Windows Message Handler</b>.<p class=tl>
The <b>New Windows Message and Event Handlers</b> dialog box appears. In the <b>Class or object to handle</b> list box, ID_EDIT_CHANGETEXT should be selected. </P></li>
<li>
Click <b>COMMAND</b>, and click <b>Add and Edit. </b>Accept the default name <code>OnEditChangeText</code> and click <b>OK</b>.<br><br></li>
<li>
Replace the highlighted //TODO comment with the following code:<pre><code>CChangeText dlg;
dlg.m_str = m_str;
if (dlg.DoModal())
{
m_str = dlg.m_str;
Refresh();
}
</code></pre>
</li>
<li>
Add the following <b>#include</b> statement to AutoClickDoc.cpp:<pre><code>#include "ChangeText.h" 
</code></pre>
</li>
</ol>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Basics of Adding, Editing, and Deleting Records</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_the_basics_of_adding.2c_.editing.2c_.and_deleting_records"></a><sup></sup>The Basics of Adding, Editing, and Deleting Records</h1>
<p>
Before you implement the new command handlers, you should know some basic facts about how the framework supports database updating:
<ul type=disc>
<li>
<b>CRecordView</b> automatically updates the current record when the user moves to another record.<br><br></li>
<li>
<b>CRecordView</b> takes three steps to modify an edited record in the associated recordset when the user moves to another record. The record view:<ul type=disc>
<li>
Prepares the current record for updating by calling the recordset’s <b>Edit</b> member function.<br><br></li>
<li>
Calls the <b>UpdateData</b> member function derived from <b>CFormView</b>, which changes the recordset’s member variables, usually by getting the new values from the form’s controls.<br><br></li>
<li>
Calls the recordset’s <b>Update</b> member function to actually update the data source with the modified values.</li>
</ul>
</li>
<li>
<b>CRecordView</b> does not provide a default implementation for Add, since user interfaces for Add functionality vary widely among database applications.<br><br></li>
<li>
The steps for adding a new record parallel the steps for updating a modified record:<ul type=disc>
<li>
Prepare a new record by calling the recordset’s <b>AddNew</b> member function. The fields of the new record are initially Null. (In database terminology, Null means “having no value” and is not the same as <b>NULL</b> in C++.)<br><br></li>
<li>
Change the recordset’s member variables, usually by getting the new values from the form’s controls with <b>UpdateData</b>.<br><br></li>
<li>
Call the recordset’s <b>Update</b> member function to actually update the data source with the values for the new record.</li>
</ul>
</li>
<li>
Deleting a record is simpler than adding or editing one. The record view simply calls the recordset’s <b>Delete</b> member function.<p class=tl>
There are two main concerns when you delete a record. First, if you delete a record from one table and there are related records in other tables, you may damage the integrity of your database. For example, deleting a class section for which there are records in the Enrollment table makes the Section and Enrollment tables inconsistent.</P><p class=tl>
Second, after deleting a record, you or the user must move off the deleted record to another record.</P></li>
</ul>
<h3>Suggested Reading in the <i>Microsoft Foundation Class Reference</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_MFC_CRecordView">
</object><a href=JavaScript:alink_1.Click()>CRecordView</a> Overvew</li>
</ul>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Properties of a Dispatch Interface</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_properties_of_a_dispatch_interface"></a><sup></sup>Implementing Properties of a Dispatch Interface</h1>
<p>
AutoClik’s document class has two member variables, <code>m_pt</code> and <code>m_str</code>. They can be exposed to Automation by using AutoClik’s document dispatch interface.</p>
<h3>Suggested Reading in the <i>Microsoft Foundation Class Reference</i></h3>
<ul type=disc>
<li>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_Dispatch_Maps">
</object><a href=JavaScript:alink_1.Click()>Dispatch Maps</a> topics</li>
</ul>
<p>
There are two ways to expose member variables of an automated <b>CCmdTarget</b>-derived class. 
<ul type=disc>
<li>
Directly expose the member variable as a dispatch interface property. This is analogous to declaring a member variable public in a C++ class. Objects of any other class can directly access the member variable.<br><br></li>
<li>
Indirectly expose the member variable by using a pair of dispatch interface Get and Set methods. This is analogous to declaring a member variable protected or private in a C++ class and declaring Get and Set member functions that other C++ objects must call to access the member variable.</li>
</ul>
<p>
When should you expose a member variable directly, as a dispatch interface property, and when should you expose it indirectly, by using dispatch interface Get and Set methods? Again, the question is analogous to: when should you declare a member variable protected or private and provide Get and Set member functions? If you do not need to monitor access to a member variable, you can expose it directly. If your application needs to know when the member variable is being accessed, you should expose it indirectly.</p>
<p>
In the case of AutoClik, it makes the most sense to expose both <code>m_pt</code> and <code>m_str</code> indirectly by using Get and Set methods. This way, any time <code>m_pt</code> and <code>m_str</code> are updated through Automation, AutoClik updates its view. For tutorial purposes, however, you handle <code>m_pt</code> and <code>m_str</code> differently. You <a href="_gs_exposing_autoclik.92.s_m_pt_indirectly.htm">expose m_pt indirectly</a>, whereas you <a href="_gs_exposing_autoclik.92.s_m_str_directly.htm">expose m_str directly</a>. Both approaches are easy to do with the help of ClassWizard.</p>
</font></BODY>
</HTML>

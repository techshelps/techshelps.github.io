<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Analyzing the Dispatch Interface Name</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_analyzing_the_dispatch_interface_name"></a>Analyzing the Dispatch Interface Name</h1>
<p>
The document template string resource is where MFC expects to find&nbsp; information about an application or a particular application’s documents, such as default filename extensions. If the application is an Automation server, MFC also expects to find information specific to Automation.</p>
<p>
The name of the dispatch interface is a literal string that Automation clients use to access the Automation server application. If you open the application’s string resource, you can look at, or change, this string. </p>
<p class=label>
<b>To examine the document template string resource</b>
<ul type=disc>
<li>
From ResourceView, expand the String Table folder and double-click the String Table resource.<p class=tl>
This opens the table of string resources for your application. </P></li>
</ul>
<p>
The ID for the string resource that contains the name of the dispatch interface is IDR_&lt;Doc Type Name&gt;TYPE, created by AppWizard, which is registered in the application’s <code>InitInstance</code> member function. The Doc Type Name appears in the <b>Advanced Options </b>dialog box (which you open by clicking <b>Advanced</b> in the<b> MFC AppWizard&nbsp;–&nbsp;Step 4 of 6</b> dialog box). For AutoClik, the string ID is <code>IDR_ACLICKTYPE</code>. </p>
<p>
To view the strings for a particular resource, open the <b>String Properties</b> dialog box.</p>
<p class=label>
<b>To open the string properties page</b>
<ul type=disc>
<li>
With the application string table open, click <b>Properties</b> on the <b>View</b> menu.<p class=tl>
The <b>String Properties</b> dialog box opens, with the properties for the selected string displayed.</P></li>
</ul>
<p>
You can see the strings for <code>IDR_ACLICKTYPE</code> in the Caption area as illustrated in the figure below.</p>
<p class=label>
<b>IDR_ACLICKTYPE in the String Editor</b></p>
<p>
<img src="ct0503s.gif" border=0></p>
<p>
This string resource consists of several strings separated by newline characters (\n). It contains the following strings: </p>
<pre><code>\nAClick\nAClick\nAutoClick Files (*.ack)\n.ACK\nAutoClick.Document\nAClick Document
</code></pre>
<p>
The string "AutoClick.Document" is the name, provided by AppWizard, (and modified by you) of the Automation object, or dispatch interface. You modified this value in the <b>Advanced Options </b>dialog box (which you open by clicking <b>Advanced</b> in the<b> MFC AppWizard&nbsp;–&nbsp;Step 4 of 6</b> dialog box). Autodriv refers to this object name in the <code>OnCreate</code><b> </b>function of the dialog class:</p>
<pre><code>int CAutoDrivDlg::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
   if (CDialog::OnCreate(lpCreateStruct) == -1)
      return -1;   // fail
   
   if (!m_autoClikObject.CreateDispatch(_T("AutoClick.Document")))
   {
      AfxMessageBox(IDP_CANNOT_CREATE_AUTOCLICK);
      return -1;   // fail
   }
   m_autoClikObject.ShowWindow();

   return 0;   // success
}
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;An Automation server can have more than one Automation object. AutoClik will have two Automation objects. The initial AppWizard-created application has only one Automation object, which is the one identified in the document template string resource described above. </p>
</font></BODY>
</HTML>

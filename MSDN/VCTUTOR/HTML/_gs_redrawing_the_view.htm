<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Redrawing the View</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_redrawing_the_view"></a>Redrawing the View</h1>
<p>
When the view, or some part of it, must be redrawn, the framework calls the override of the <code>OnDraw</code> member function that AppWizard generated. In this topic you’ll add Scribble-specific code for <code>OnDraw</code> to the ScribbleView.cpp file.</p>
<p class=label>
<b>To add implementation code for the view’s OnDraw member function </b>
<ol>
<li>
Use WizardBar to jump to the starter <code>OnDraw</code> member function of class <code>CScribbleView</code>.<br><br></li>
<li>
Replace the //TODO comments, after the <code>ASSERT_VALID(pDoc)</code> line, with the following code:<pre><code>// The view delegates the drawing of individual strokes to
// CStroke::DrawStroke( ).
CTypedPtrList&lt;CObList, CStroke*&gt;&amp; strokeList = 
pDoc-&gt;m_strokeList;
POSITION pos = strokeList.GetHeadPosition( );
while (pos != NULL)
{
CStroke* pStroke = strokeList.GetNext(pos);
pStroke-&gt;DrawStroke( pDC );
}
</code></pre>
</li>
</ol>
<p>
The view uses the pointer to iterate through the stroke list, telling each stroke to draw itself. When <code>OnDraw</code> calls <code>DrawStroke</code> for a given stroke object, it passes along the device-context object it received as a parameter. (Having the data draw itself is only one possible strategy.)</p>
<p>
To complete Scribble’s drawing, you must also add the <code>DrawStroke</code> member function definition to class <code>CStroke</code>.</p>
<p class=label>
<b>To add drawing code for strokes</b>
<ul type=disc>
<li>
Add the <code>DrawStroke</code> member function definition to ScribbleDoc.cpp as shown, right after the <code>Serialize</code> function. (Recall that you added its declaration when you added the <code>CStroke</code> class to ScribbleDoc.h.)<pre><code>BOOL CStroke::DrawStroke( CDC* pDC )
{
CPen penStroke;
if( !penStroke.CreatePen(PS_SOLID, m_nPenWidth, RGB(0,0,0))) 
return FALSE;
CPen* pOldPen = pDC-&gt;SelectObject( &amp;penStroke );
pDC-&gt;MoveTo( m_pointArray[0] );
for( int i=1; i &lt; m_pointArray.GetSize(); i++ )
{
pDC-&gt;LineTo( m_pointArray[i] );
}
pDC-&gt;SelectObject( pOldPen );
return TRUE;
}
</code></pre>
</li>
</ul>
<p>
This code passes <code>DrawStroke</code> a pointer to an object of class <b>CDC</b>, which encapsulates a Windows device context (DC). </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In programs written with MFC, all graphics calls are made through a device-context object of class <b>CDC</b> or one of its derived classes. </p>
<p>
<code>DrawStroke</code>:
<ol>
<li>
Calls <b>CDC</b> member functions — <b>SelectObject</b>, <b>MoveTo</b>, <b>LineTo</b> — through the pointer to select a graphic device interface (GDI) pen into the device context and to move the pen and draw.<br><br></li>
<li>
Constructs a new <b>CPen</b> object and initializes it with the current properties by calling the pen’s <b>CreatePen</b> member function.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This two-stage construction is typical of framework objects.</p></li>
<li>
Calls <b>SelectObject</b> to select the pen into the device context (saving the existing pen as <code>pOldPen</code>).<br><br></li>
<li>
Calls <b>MoveTo</b> to position the pen to the first point.<br><br></li>
<li>
Iterates through the array of points. <br><br></li>
<li>
Calls the device context’s <b>LineTo</b> member function to connect the previous point with the next point.<br><br></li>
<li>
Restores the device context to its previous condition by reinstalling its old pen.</li>
</ol>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Always restore the device context to its original state before releasing it to Windows. To do so, save the state before you change it. Storing the old pen in <code>DrawStroke</code> is an example of how to do this.</p>
<p>
The addition of <code>DrawStroke</code> completes Scribble’s code for drawing in response to update requests from the framework. However, Scribble also draws in response to mouse actions, as discussed in the next topic, <a href="_gs_handling_windows_messages_in_the_view.htm">Handling Windows Messages in the View</a>.</p>
</font></BODY>
</HTML>

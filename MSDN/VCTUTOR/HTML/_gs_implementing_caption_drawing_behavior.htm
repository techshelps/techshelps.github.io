<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Caption Drawing Behavior</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_caption_drawing_behavior"></a>Implementing Caption Drawing Behavior</h1>
<p>
Now that all the required properties are in place, you can implement caption drawing. To draw the caption text, you must modify the <code>CCircCtrl::OnDraw</code> function in CIRCCTL.CPP.</p>
<p>
The drawing code changes require that the device context passed to the <code>OnDraw</code> function be modified to reflect the background and foreground colors, stored as values of the BackColor and ForeColor properties, respectively. The font contained in the Font property must also be selected into the device context before the caption text can be drawn. The <b>InternalGetText</b> function retrieves the caption text drawn using the <b>ExtTextOut</b> function.</p>
<p class=label>
<b>To implement caption drawing in the Circle control</b>
<ul type=disc>
<li>
Modify the <code>OnDraw</code> member function in CIRCCTL.CPP by adding the two following code blocks:<p class=tl>
Block 1:</P><pre><code>&nbsp;&nbsp;&nbsp;&nbsp;CFont* pOldFont;
 &nbsp;&nbsp; TEXTMETRIC tm;
 &nbsp;&nbsp; const CString&amp; strCaption = InternalGetText();

 &nbsp;&nbsp; // Set the ForeColor property color and transparent background mode into the device context
 &nbsp;&nbsp; pdc-&gt;SetTextColor(TranslateColor(GetForeColor()));
 &nbsp;&nbsp; pdc-&gt;SetBkMode(TRANSPARENT);
</code></pre>
<p class=tl>
Block 2:</P><pre><code>&nbsp;&nbsp;&nbsp;&nbsp;// Draw the caption using the stock Font and ForeColor properties
 &nbsp;&nbsp; pOldFont = SelectStockFont(pdc);
 &nbsp;&nbsp; pdc-&gt;GetTextMetrics(&amp;tm);
 &nbsp;&nbsp; pdc-&gt;SetTextAlign(TA_CENTER | TA_TOP);
 &nbsp;&nbsp; pdc-&gt;ExtTextOut((rc.left + rc.right) / 2, (rc.top + rc.bottom - tm.tmHeight) / 2,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ETO_CLIPPED, rc, strCaption, strCaption.GetLength(), NULL);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldFont);
</code></pre>
<p class=tl>
as show in the following example:</P><pre><code>void CCircCtrl::OnDraw(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
 &nbsp;&nbsp; CBrush* pOldBrush;
 &nbsp;&nbsp; CBrush bkBrush(TranslateColor(GetBackColor()));
 &nbsp;&nbsp; CPen* pOldPen;
 &nbsp;&nbsp; CRect rc = rcBounds;
 &nbsp;&nbsp; CFont* pOldFont;
 &nbsp;&nbsp; TEXTMETRIC tm;
 &nbsp;&nbsp; const CString&amp; strCaption = InternalGetText();

 &nbsp;&nbsp; // Set the ForeColor property color and transparent background mode into the device context
 &nbsp;&nbsp; pdc-&gt;SetTextColor(TranslateColor(GetForeColor()));
 &nbsp;&nbsp; pdc-&gt;SetBkMode(TRANSPARENT);

 &nbsp;&nbsp; // Paint the background using the BackColor property
 &nbsp;&nbsp; pdc-&gt;FillRect(rcBounds, &amp;bkBrush);

 &nbsp;&nbsp; // Draw the ellipse
 &nbsp;&nbsp; GetDrawRect(&amp;rc);
 &nbsp;&nbsp; pOldBrush = pdc-&gt;SelectObject(&amp;bkBrush);
 &nbsp;&nbsp; pOldPen = (CPen*)pdc-&gt;SelectStockObject(BLACK_PEN);
 &nbsp;&nbsp; pdc-&gt;Ellipse(rc);

 &nbsp;&nbsp; // Draw the caption using the stock Font and ForeColor properties
 &nbsp;&nbsp; pOldFont = SelectStockFont(pdc);
 &nbsp;&nbsp; pdc-&gt;GetTextMetrics(&amp;tm);
 &nbsp;&nbsp; pdc-&gt;SetTextAlign(TA_CENTER | TA_TOP);
 &nbsp;&nbsp; pdc-&gt;ExtTextOut((rc.left + rc.right) / 2, (rc.top + rc.bottom - tm.tmHeight) / 2,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ETO_CLIPPED, rc, strCaption, strCaption.GetLength(), NULL);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldFont);

 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldPen);
 &nbsp;&nbsp; pdc-&gt;SelectObject(pOldBrush);
}
</code></pre>
</li>
</ul>
<p>
The code added in the first block in the preceding example starts by declaring three new local variables. The <code>pOldFont</code> variable holds the old font from the device context. The <code>tm</code> variable holds text metric information about the font used to draw the text. The <code>strCaption</code> variable is the text to be drawn. It is initialized by calling the <b>InternalGetText</b> function to get the value of the Caption property. The <b>InternalGetText</b> function should be used instead of the <b>GetText</b> function whenever the returned text will not be modified. This is because <b>GetText</b> returns a string of type <b>BSTR</b>, containing a copy of the caption text, that must be freed.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;CFont* pOldFont;
 &nbsp;&nbsp; TEXTMETRIC tm;
 &nbsp;&nbsp; const CString&amp; strCaption = InternalGetText();
</code></pre>
<p>
The text color of the device context is set to the current value of the ForeColor property. The <b>OLE_COLOR</b> value returned by the <b>GetForeColor</b> function is translated by the <b>TranslateColor</b> function into a <b>COLORREF</b> value. This value is then passed as a parameter to the <b>SetTextColor</b> function to set the text color in the device context. <b>OLE_COLOR</b> values must be translated by the <b>TranslateColor</b> function whenever a <b>COLORREF</b> value is required.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;pdc-&gt;SetTextColor(TranslateColor(GetForeColor()));
</code></pre>
<p>
The background mode of the text is made transparent in the device context by calling the <b>SetBkMode</b> function.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;pdc-&gt;SetBkMode(TRANSPARENT);
</code></pre>
<p>
In the second block of code added in the previous example, calling the <b>SelectStockFont</b> function (defined in the <b>COleControl</b> base class) selects the current font, stored as the value of the stock Font property, into the device context. The font that used to be selected into the device context is kept in the <code>pOldFont</code> variable to be selected back into the device context later.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;pOldFont = SelectStockFont(pdc);
</code></pre>
<p>
The text metrics for the font in the device context are retrieved by calling the <b>GetTextMetrics</b> function and are used to center the text vertically. The text alignment of the device context is set using the <b>SetTextAlign</b> function, and this centers the text horizontally. The text is drawn by calling the <b>ExtTextOut</b> function. The text is clipped to the bounding rectangle of the circle or ellipse (which may be different from the bounding rectangle of the control if the CircleShape property is <b>TRUE</b>) and centered both horizontally and vertically. Note that any function affecting the device context passed to the <code>OnDraw</code> function must be among the subset of functions that are allowed for both metafile device contexts and standard device contexts.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;pdc-&gt;GetTextMetrics(&amp;tm);
 &nbsp;&nbsp; pdc-&gt;SetTextAlign(TA_CENTER | TA_TOP);
 &nbsp;&nbsp; pdc-&gt;ExtTextOut((rc.left + rc.right) / 2, (rc.top + rc.bottom - tm.tmHeight) / 2,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ETO_CLIPPED, rc, strCaption, strCaption.GetLength(), NULL);
</code></pre>
<p>
The font that used to be selected in the device context is replaced using the <b>SelectObject</b> function.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;pdc-&gt;SelectObject(pOldFont);
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Trying Out the Newly Created OLE Container Application</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_trying_out_the_newly_created_ole_container_application"></a>Trying Out the Newly Created OLE Container Application</h1>
<p>
AppWizard provides a starter OLE container application that already has a lot of the underlying architecture that most OLE container applications need. Build this new AppWizard-provided application and try it out. </p>
<p class=label>
<b>To build the starter OLE container application</b>
<ul type=disc>
<li>
On the <b>Build</b> menu, click<b> Build Container.exe</b>.</li>
</ul>
<p>
This builds the default version of the container application, producing the file Container.exe under your project directory.</p>
<p>
At this point, Container already has many of the features you saw in the preview of the completed Container application, but it is missing several capabilities, such as:
<ul type=disc>
<li>
Inserting more than one OLE object<br><br></li>
<li>
Selecting outside of the OLE object (back in the Container area of the document)</li>
</ul>
<p>
You will add this and other functionality during this lesson. First see for yourself the built-in capabilities of the starter Container application.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Before you can preview the Container application using Scribble, you need to register Scribble as described in <a href="_gs_registering_an_ole_component_application.htm">Registering an OLE Component Application</a> earlier in this lesson.</p>
<p class=label>
<b>To create a new Scribble drawing within Container</b>
<ol>
<li>
On the <b>Edit</b> menu, click <b>Insert New Object</b>.<br><br></li>
<li>
In the <b>Insert Object</b> dialog box, select <b>Scribb Document</b> from the <b>Object Type</b> list box.<br><br></li>
<li>
Click <b>OK</b>.<p class=tl>
A new Scribble object is activated in place. No additional code is required to implement the <b>Insert New Object</b> command on the <b>Edit</b> menu. </P><p class=tl>
Notice how Container’s menu is merged with Scribble’s and how Container’s toolbar is replaced by one provided by Scribble. Again, this is already working so no additional code is required here.</P></li>
</ol>
<p class=label>
<b>To edit the in-place activated object</b>
<ol>
<li>
Drag the mouse to draw in the embedded Scribble object.<br><br></li>
<li>
Try out Scribble’s menu and toolbar commands in place, such as the Pen Width command.<br><br></li>
<li>
Press ESC to deactivate the Scribble object.<p class=tl>
Notice that the user interface (ESC) for canceling in-place editing mode for the selected object is already incorporated into the starter AppWizard-created application. </P></li>
<li>
Click the Scribble object to reactivate it.<br><br></li>
<li>
On the <b>Edit</b> menu, point to <b>Scribb</b> <b>Object</b>, and then click <b>Edit</b>. <p class=tl>
<b>Edit</b> activates the object in place inside the container. (<b>Open</b> fully opens the Scribble server in its own window.) </P><p class=tl>
Note that the Scribble server provides the tracker rectangle; Container provides the tracker only when the object is not activated in place.</P></li>
<li>
Exit Container.</li>
</ol>
<p>
The AppWizard-provided container application already has a lot of OLE container functionality, but it is still missing some basics that are implemented in the remainder of this tutorial.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting a Class to a Dialog Box</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_connecting_a_class_to_a_dialog_box"></a><sup></sup>Connecting a Class to a Dialog Box</h1>
<p>
Once you’ve specified the appearance of your dialog box, you can specify its run-time behavior. This requires deriving a class from <b>CDialog</b> that implements your dialog box, and connecting that class to the dialog resource you created in the previous topic. </p>
<p>
To connect a class to a dialog box:
<ol>
<li>
<a href="_gs_declare_the_dialog_class.htm">Declare a class</a> to represent the dialog box.<br><br></li>
<li>
<a href="_gs_declare_a_message.2d.handling_function_for_a_dialog_box_control.htm">Declare handler functions</a> for the messages you want to handle. <br><br></li>
<li>
<a href="_gs_map_the_controls_to_member_variables.htm">Map the dialog box controls to member variables</a> of the dialog class and define what (if any) validation rules should be applied to each. </li>
</ol>
<p>
You could do all of this manually, but WizardBar provides a graphical user interface to do it quickly and easily. ClassWizard generates a header (.h) and an implementation (.cpp) file for your dialog class, complete with function prototypes, skeletal function definitions, a message map, and a data map. </p>
<p>
The following topics show how these steps are accomplished for Scribble’s Pen Widths dialog box.</p>
</font></BODY>
</HTML>

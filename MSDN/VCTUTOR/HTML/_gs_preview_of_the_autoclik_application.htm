<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Preview of the AutoClik Application</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_preview_of_the_autoclik_application"></a><sup></sup>Preview of the AutoClik Application</h1>
<p>
Before you work through the steps of implementing AutoClik, try out the completed application. This will help you appreciate Automation functionality in general, and AutoClik’s Automation server functionality in particular, from a user’s point of view.</p>
<p>
The first step is to register AutoClik. Just as with ActiveX object servers, an Automation server must be registered before it can be driven by any Automation client. </p>
<p class=label>
<b>To install and register the AutoClik Automation server</b>
<ol>
<li>
Run <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_MFC_AutoClik">
</object><a href=JavaScript:alink_1.Click()>AutoClik.exe</a> from the sample source files for Step 3 (see <a href="_gs_installing_the_sample_files.htm">Installing the Sample Files</a> and <a href="_gs_previewing_the_sample_applications.htm">Previewing the Sample Applications</a> in Scribble Lesson 1 for detailed steps).<p class=tl>
Running AutoClik briefly as a stand-alone application registers it in the system registry as an ActiveX component.</P></li>
<li>
Close AutoClik.</li>
</ol>
<p class=label>
<b>To preview AutoClik</b>
<ol>
<li>
Run <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_sample_MFC_Autodriv">
</object><a href=JavaScript:alink_2.Click()>Autodriv</a> from the sample source files. <p class=tl>
This starts Autodriv, which launches  and displays the AutoClik Test Driver dialog box shown below.</P><p class=label>
<b>AutoClik Test Driver Dialog Box</b>
<p>
<img src="ct0501s.gif" border=0></P></li>
<li>
Arrange the open windows on your desktop, minimizing any as necessary, so that AutoClik is visible next to Autodriv’s window, without obscuring it.<p class=tl>
Autodriv launches AutoClik on startup.</P><p class=label>
<b>AutoClik Window Next to Autodriv Window</b>
<p>
<img src="ct0502s.gif" border=0></P></li>
</ol>
<p class=label>
<b>To explore the Automation server features of AutoClik</b>
<ol>
<li>
Note that the <b>x</b>, <b>y</b>, and <b>Text</b> fields in the AutoClik Test Driver dialog box are initially blank. To change this, click the <b>Get All</b> button.<p class=tl>
The current AutoClik coordinates and text are now displayed in Autodriv’s window.</P></li>
<li>
Click around in the AutoClik window.<p class=tl>
Notice that the <b>x</b>, <b>y</b>, and <b>Text</b> fields in Autodriv do not change. That is because the Automation is one direction between Autodriv and AutoClik. Although you can implement an Automation server to notify the Automation client about changes, such as the new coordinates in AutoClik, this feature requires that additional callback/notification interfaces be established so that the Automation client can implement them. </P></li>
<li>
From AutoClik’s <b>Edit</b> menu, click <b>Change Text</b>.<br><br></li>
<li>
In the <b>Change Text</b> dialog box, change the text to “hello”, and click <b>OK</b>.<br><br></li>
<li>
In the Autodriv window, click the <b>Get All</b> button.<p class=tl>
It now shows new x, y, and Text values. </P></li>
<li>
Change the x, y, and Text values in Autodriv, and click the <b>Set All</b> button.<p class=tl>
AutoClik displays the changes. </P></li>
<li>
Explore other Autodriv commands:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Command</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Set x, Set y</td>
<td width=74%>Accesses just the x or y coordinate of the text. The <code>x</code> and <code>y</code> properties of AutoClik’s document dispatch interface are exposed by using Get and Set methods. AutoClik’s implementation of <code>SetX</code> and <code>SetY</code> includes updating the window to reflect the change.</td>
</tr>
<tr valign=top>
<td width=26%>Get Position, Set Position</td>
<td width=74%>Changes the x and y coordinates of the text by using&nbsp; AutoClik’s second dispatch interface, which represents a Point.</td>
</tr>
<tr valign=top>
<td width=26%>Set Text</td>
<td width=74%>Changes the <code>Text</code> property of AutoClik, which is directly exposed as a string rather than by using a pair of Get and Set functions. This means that when you choose the <code>Set Text</code> command, AutoClik has no opportunity to detect the change as it did when you chose the <code>Set</code> <code>x</code>, <code>Set</code> <code>y</code>, or <code>Set</code> <code>Position</code> commands. Therefore, AutoClik does not immediately update its window. To do so, you must then click the <b>Refresh Display</b> button.</td>
</tr>
<tr valign=top>
<td width=26%>Set All</td>
<td width=74%>Simultaneously changes AutoClik’s <code>x</code>, <code>y</code>, and <code>Text</code> properties through its <code>SetAllProps</code> method, which uses these three parameters. AutoClik’s implementation of <code>SetAllProps</code> includes immediate updating of the window.</td>
</tr>
<tr valign=top>
<td width=26%>Get All</td>
<td width=74%>Queries the <code>x</code>, <code>y</code>, and <code>Text</code> properties of AutoClik and returns their current values.</td>
</tr>
<tr valign=top>
<td width=26%>Refresh Display</td>
<td width=74%>Updates AutoClik’s window based on the most recent values of <code>x</code>, <code>y</code>, and <code>Text</code>, which might have been previously set using Automation.</td>
</tr>
<tr valign=top>
<td width=26%>Animate x &amp; y</td>
<td width=74%>Updates AutoClik’s x and y coordinates in 20 steps, by individually updating the <code>x</code> property and then the <code>y</code> property.</td>
</tr>
<tr valign=top>
<td width=26%>Animate Position</td>
<td width=74%>Updates AutoClik’s x and y coordinates through its Point interface. Because the Point interface updates both the <code>x</code> and <code>y</code> values at the same time, the animation results in a smooth diagonal movement of the text across AutoClik’s window.</td>
</tr>
</table><br>
</li>
</ol>
</font></BODY>
</HTML>

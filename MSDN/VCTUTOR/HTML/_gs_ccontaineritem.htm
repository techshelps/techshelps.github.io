<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CContainerItem</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_ccontaineritem"></a>CContainerItem</h1>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Use ClassView to jump to the <code>CContainerItem</code> member functions that are discussed in this section. Follow along by reading the code in ContainerItem.cpp and comparing the member functions to their descriptions below. </p>
<p>
Class <code>CContainerItem</code> is derived from <b>COleClientItem</b>. From the container application’s perspective, a <b>COleClientItem</b> object represents an embedded item, something it can draw and edit. The life of this object spans the life of the container document, as long as the particular item is embedded in the document. A container application typically creates a <b>COleClientItem</b> object in its implementation of the Insert Object command. Indeed, the implementation of <code>CContainerView::OnInsertObject</code> provided by AppWizard does create the <code>CContainerItem</code> object, as explained earlier. The application explicitly deletes a <b>COleClientItem</b> object only in certain cases, such as when the user presses DEL when this item is selected or when the entire containing document is destroyed.</p>
<h3>CContainerItem::OnChange</h3>
<p>
The AppWizard-provided implementation of <code>CContainerItem::OnChange</code> simply calls <b>OnChange</b> in the base class, <b>COleClientItem</b>, and then, just to be safe, invalidates all views of the document. </p>
<h3>COleClientItem::OnGetItemPosition</h3>
<p>
The framework calls <b>COleClientItem::OnGetItemPosition</b> during in-place activation when OLE needs to determine the location of the item. The AppWizard-provided implementation arbitrarily sets the rectangle of the item to (10, 10, 210, 210). In the next lesson, you will change this implementation to reflect the actual position and size of the embedded item.</p>
<h3>COleClientItem::OnChangeItemPosition</h3>
<p>
The framework calls <b>COleClientItem::OnChangeItemPosition</b> on behalf of a server to change the position of the in-place window, usually as a result of the server window being resized or the extent of the server window being changed. The AppWizard-provided implementation of the <code>OnChangeItemPosition</code> function calls the base class <b>COleClientItem::OnChangeItemPosition</b>, which in turn calls <b>COleClientItem::SetItemRects</b> to move or resize the item to the new position or size. </p>
</font></BODY>
</HTML>

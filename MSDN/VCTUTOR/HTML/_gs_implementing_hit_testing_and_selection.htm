<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Hit Testing and Selection</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_implementing_hit_testing_and_selection"></a>Implementing Hit Testing and Selection</h1>
<p>
The AppWizard-provided starter application initially supports only one embedded object. This part of the tutorial adds support for multiple objects by implementing hit testing and selection. Hit testing determines which of the multiple objects lies at a given point. </p>
<p>
In the next two procedures, you’ll use ClassView to add two helper functions to class <code>CContainerView</code>: <code>HitTestItems</code> and <code>SetSelection</code>. These functions implement hit testing and selection. </p>
<p class=label>
<b>To implement hit testing</b>
<ol>
<li>
In ClassView, right-click the <code>CContainerView</code> class icon.<br><br></li>
<li>
From the pop-up menu, click <b>Add Member Function</b>.<p class=tl>
The <b>Add Member Function</b> dialog box appears.</P></li>
<li>
Fill in the dialog box as follows:<ul type=disc>
<li>
In the <b>Function Type</b> box, type <code>CContainerItem*</code>. <br><br></li>
<li>
In the <b>Function Declaration</b> box, type the following:<pre><code>HitTestItems(CPoint point)
</code></pre>
</li>
<li>
In the <b>Access</b> area, select <b>Public</b>.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ul>
<p class=tl>
ClassWizard adds the declaration to the header file and creates a starter definition in the implementation file.</P></li>
<li>
In ContainerView.cpp, type the following code to fill in the function definition for <code>HitTestItems</code>: <pre><code>CContainerDoc* pDoc = GetDocument();
CContainerItem* pItemHit = NULL;
POSITION pos = pDoc-&gt;GetStartPosition();
while (pos != NULL)
{
CContainerItem* pItem = (CContainerItem*)pDoc-&gt;GetNextItem(pos);
if (pItem-&gt;m_rect.PtInRect(point))
pItemHit = pItem;
}
return pItemHit;    // return top item at point
</code></pre>
</li>
</ol>
<p class=label>
<b>To implement selection</b>
<ol>
<li>
Repeat steps 1 and 2 from the previous procedure to invoke the <b>Add Member Function</b> dialog box.<br><br></li>
<li>
Fill in the dialog box as follows:<ul type=disc>
<li>
In the <b>Function Type</b> box, type <code>void</code>.<br><br></li>
<li>
In the <b>Function Declaration</b> box, type the following:<pre><code>SetSelection(CContainerItem* pItem)
</code></pre>
</li>
<li>
In the <b>Access</b> area, select <b>Public</b>.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ul>
</li>
<li>
In ContainerView.cpp, fill in the implementation code for <code>SetSelection</code>:<pre><code>// close in-place active item
if (pItem == NULL || m_pSelection != pItem)
{
COleClientItem* pActiveItem 
= GetDocument()-&gt;GetInPlaceActiveItem(this);
if (pActiveItem != NULL &amp;&amp; pActiveItem != pItem)
pActiveItem-&gt;Close();
}
Invalidate();    
m_pSelection = pItem;        
</code></pre>
</li>
<li>
Save the header and implementation files.</li>
</ol>
<p>
The above implementation is “lazy” in that it invalidates the entire client area of the view whenever the selection changes. In Container Step 2, this implementation is replaced with smarter invalidation.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Autoclik's RefreshWindow</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_gs_implementing_autoclik.92.s_refreshwindow"></a>Implementing Autoclik’s RefreshWindow</h1>
<p>
In the following procedure, you'll implement <code>RefreshWindow</code> as a method. <code>RefreshWindow</code>  updates the view according to the current values of <code>m_pt</code> and <code>m_str</code>. The <code>RefreshWindow</code> method is the <code>Refresh</code> member function originally implemented in Step 1. Here you directly expose the <code>Refresh</code> member function, just as you directly exposed the <code>m_str</code> member variable of <code>CAutoClickDocument</code>.</p>
<p class=label>
<b>To directly expose the Refresh member function in the dispatch interface</b>
<ol>
<li>
From the <b>View</b> menu, click <b>ClassWizard</b>.<br><br></li>
<li>
Click the <b>Automation</b> tab.<br><br></li>
<li>
In the <b>Class name</b> box, select CAutoClickDoc, if it is not already selected.<br><br></li>
<li>
Click <b>Add Method</b>.<p class=tl>
The <b>Add Method</b> dialog box appears.</P></li>
<li>
In the <b>External name</b> box, type <code>RefreshWindow</code>.<p class=tl>
This is the name that the Automation client, Autodriv, uses to refer to the method, as in the following code:</P><pre><code>void CAutoDrivDlg::OnRefresh() 
{
m_autoClikObject.RefreshWindow();
}
</code></pre>
</li>
<li>
In the <b>Internal name</b> box, replace the proposed <code>RefreshWindow</code> with <code>Refresh</code>.<p class=tl>
<code>Refresh</code> is the name of the member function you implemented in Step 1. You do not need to make the <b>Internal name</b> the same as the <b>External name</b>, even though ClassWizard proposes that you do so.</P></li>
<li>
In the <b>Return type</b> box, type <code>void</code>, or select it from the drop-down list box.<br><br></li>
<li>
Click <b>OK</b>.<p class=tl>
This returns you to the <b>Automation</b> tab. The new method, <code>RefreshWindow</code>, is shown in the <b>Name</b> list. The gray glyph with an “M” in it indicates that this is a method. The <b>Implementation</b> box shows:</P><pre><code>void Refresh();
</code></pre>
</li>
<li>
Click the <b>Edit Code</b> button. <p class=tl>
Because <code>Refresh</code> was selected in the <b>Automation</b> tab, ClassWizard takes you to the implementation of <code>Refresh</code> in AutoClickDoc.cpp:</P><pre><code>void CAutoClickDoc::Refresh()
{
UpdateAllView(NULL);
SetModifiedFlag();
}
</code></pre>
<p class=tl>
However, you implemented the <code>Refresh</code> member function in Step 1; ClassWizard was not aware of that, so it implemented a second stub member function at the end of AutoClickDoc.cpp.</P><p class=tl>
You will need to remove this second stub implementation. This is similar to how you removed the redundant declaration of <code>m_str</code> earlier.</P></li>
<li>
Remove ClassWizard’s redundant (and empty) implementation of <code>Refresh</code> at the end of AutoClickDoc.cpp.<br><br></li>
<li>
Remove the redundant declaration in the public Implementation section of AutoClickDoc.h.<p class=tl>
Leave the dispatch map entry created by ClassWizard:</P><pre><code>afx_msg void Refresh( );
</code></pre>
</li>
</ol>
<p>
There are two more methods to implement: <a href="_gs_implementing_autoclik.92.s_setallprops.htm">SetAllProps</a> and <a href="_gs_implementing_autoclik.92.s_showwindow.htm">ShowWindow</a>.</p>
</font></BODY>
</HTML>

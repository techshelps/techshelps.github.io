<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ODL File for Creating a Type Library</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_gs_odl_file_for_creating_a_type_library"></a><sup></sup>ODL File for Creating a Type Library</h1>
<p>
AppWizard adds a file named AutoClik.odl to the project. AutoClik.odl is an Object Definition Library text file. It is input to the MKTYPLIB.EXE tool which creates a type library (.TLB) file named AutoClik.tlb. The binary type library (.TLB) can be used by other applications to gain information about the Automation server. This information includes a list of the Automation objects provided by the Automation server, and for each Automation object, a list of properties and methods exposed by the Automation server.</p>
<p>
Whenever you define new Automation objects and define new methods and properties for the Automation server, ClassWizard adds information to the .ODL file. When you build the application, MKTYPLIB.EXE runs to create an updated .TLB file.</p>
<p>
The <b>Read Type Library</b> option of ClassWizard, used when creating Automation clients, is a good example of how the type library file is used. In addition to supporting development of Automation servers, ClassWizard also supports the development of Automation clients, which access the properties and methods of the Automation server. The <b>Read Type Library</b> option of ClassWizard creates a <b>CCmdTarget</b>-derived class for each Automation object defined by the Automation server. In the code for the Automation client, you can then refer to the methods and properties of the Automation server simply as C++ class member functions and member variables.</p>
</font></BODY>
</HTML>

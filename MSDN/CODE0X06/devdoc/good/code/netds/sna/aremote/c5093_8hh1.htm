<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AREMOTE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5095"></a>AREMOTE.C</h2>
<pre><code>/* <br>Copyright (c) 1994, 1993 Microsoft Corporation <br> <br>Module Name: <br>    Remote.c <br> <br>Abstract: <br>    This module contains the main() entry point for Remote. <br>    Calls the Server or the Client depending on the first parameter. <br> <br>Author: <br>    Rajivendra Nath (rajnath) 2-Jan-1993 <br> <br>Environment: <br>    Console App. User mode. <br> <br>Revision History: <br>Alex Wetmore (t-alexwe) 6-Jun-1994 <br>- converted remote to use APPC with Windows SNA Server instead of named <br>  pipes <br>*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;winappc.h&gt; <br>#include "appclib.h" <br>#include "aremote.h" <br> <br>TCHAR   HostName[HOSTNAMELEN]; <br>TCHAR   *ChildCmd; <br>TCHAR   *TPName = TEXT("AREMOTE"); <br>TCHAR   *locTPName = TEXT("AREMOTC"); <br>TCHAR   *LocalLU = TEXT("AREMOTE"); <br>TCHAR   *ServerLU; <br>TCHAR   *mode_name = TEXT("#INTER"); <br>HANDLE MyOutHandle; <br>BOOL   IsAdvertise=TRUE; <br>DWORD  ClientToServerFlag; <br>BOOL   AutoStarted; <br> <br> <br>TCHARChildCmdBuffer[1024]; <br> <br>TCHAR* ColorList[]={TEXT("black") ,TEXT("blue") ,TEXT("green") ,TEXT("cyan") ,TEXT("red") ,TEXT("purple") ,TEXT("yellow") ,TEXT("white"), <br>                   TEXT("lblack"),TEXT("lblue"),TEXT("lgreen"),TEXT("lcyan"),TEXT("lred"),TEXT("lpurple"),TEXT("lyellow"),TEXT("lwhite")}; <br> <br>int __cdecl main(void); <br> <br>WORD GetColorNum(TCHAR* color); <br>VOID SetColor(WORD attr); <br> <br>CONSOLE_SCREEN_BUFFER_INFO csbiOriginal; <br> <br>/*************************************************************/ <br>VOID ErrorExit(TCHAR *str) { <br>    WRITEF((VBuff,TEXT("Error-%d:%s\n"),GetLastError(),str)); <br>    ExitProcess(1); <br>} <br>/*************************************************************/ <br>DWORD ReadFixBytes(HANDLE hRead, TCHAR*  Buffer, DWORD  ToRead, <br>    DWORD  TimeOut) {   //ignore timeout for timebeing <br>    DWORD xyzBytesRead=0; <br>    DWORD xyzBytesToRead=ToRead; <br>    TCHAR* xyzbuff=Buffer; <br> <br>    while(xyzBytesToRead!=0) <br>    { <br>        if (!ReadFile(hRead,xyzbuff,xyzBytesToRead,&amp;xyzBytesRead,NULL)) <br>        { <br>            return(xyzBytesToRead); <br>        } <br> <br>        xyzBytesToRead-=xyzBytesRead; <br>        xyzbuff+=xyzBytesRead; <br>    } <br>    return(0); <br> <br>} <br>/*************************************************************/ <br>VOID DisplayClientHlp() { <br>    WRITEF((VBuff,TEXT("\n   To Start the CLIENT end of AREMOTE\n"))); <br>    WRITEF((VBuff,TEXT("   ---------------------------------\n"))); <br>    WRITEF((VBuff,TEXT("   Syntax : AREMOTE /C &lt;ServerLU&gt; [/T &lt;TPName&gt;] [/P &lt;TPName&gt;] [/L &lt;LocalLU&gt;]\n"))); <br>    WRITEF((VBuff,TEXT("                                  [/N &lt;# lines&gt;] [/M &lt;Modename&gt;]\n"))); <br>WRITEF((VBuff,TEXT("                                  [/F &lt;Color&gt;] [/B &lt;Color&gt;]\n"))); <br>    WRITEF((VBuff,TEXT("\n"))); <br> <br>    WRITEF((VBuff,TEXT("   &lt;ServerLU&gt;      SNA LU for connecting to Server\n"))); <br> <br>WRITEF((VBuff,TEXT("   [/T &lt;TPName&gt;]   TP name that server is using (default is \"%s\")\n"), TPName)); <br>WRITEF((VBuff,TEXT("   [/P &lt;TPName&gt;]   TP name that client is using (default is \"%s\")\n"), locTPName)); <br>WRITEF((VBuff,TEXT("   [/M &lt;Modename&gt;] The mode by which the Local LU and Server LU are partnered\n"))); <br>WRITEF((VBuff,TEXT("                   (defaults to \"%s\")\n"), mode_name)); <br>WRITEF((VBuff,TEXT("   [/L &lt;LocalLU&gt;]  LU name for local TP to use (default is \"%s\")\n"), LocalLU)); <br>    WRITEF((VBuff,TEXT("   [/N &lt;# lines&gt;]  Number of Lines to Get.\n"))); <br>    WRITEF((VBuff,TEXT("   [/F &lt;color&gt;]    Foreground color eg blue, red, etc.\n"))); <br>    WRITEF((VBuff,TEXT("   [/B &lt;color&gt;]    Background color eg blue, lwhite,etc.\n"))); <br>    WRITEF((VBuff,TEXT("\n"))); <br>    WRITEF((VBuff,TEXT("   Example: aremote /C serverlu\n"))); <br>    WRITEF((VBuff,TEXT("\n"))); <br>    WRITEF((VBuff,TEXT("   To Exit: %cQ (Leaves the Remote Server Running)\n"), COMMANDCHAR)); <br>    WRITEF((VBuff,TEXT("\n"))); <br>} <br>/*************************************************************/ <br> <br>VOID DisplayServerHlp() { <br>    WRITEF((VBuff,TEXT("\n   To Start the SERVER end of AREMOTE\n"))); <br>    WRITEF((VBuff,TEXT("   ---------------------------------\n"))); <br>    WRITEF((VBuff,TEXT("   Syntax : AREMOTE /S \"&lt;Cmd&gt;\" [/T &lt;TPName&gt;] [/F &lt;color&gt;] [/B &lt;color&gt;]\n"))); <br>    WRITEF((VBuff,TEXT("\n"))); <br> <br>    WRITEF((VBuff,TEXT("   \"&lt;Cmd&gt;\"         A Text-Mode program that you want to control\n"))); <br>    WRITEF((VBuff,TEXT("                   from another computer.\n"))); <br> <br>WRITEF((VBuff,TEXT("   [/T &lt;TPName&gt;]   TP name that server is using (default is \"%s\")\n"), TPName)); <br>    WRITEF((VBuff,TEXT("   [/F &lt;color&gt;]    Foreground color eg blue, red, etc.\n"))); <br>    WRITEF((VBuff,TEXT("   [/B &lt;color&gt;]    Background color eg blue, lwhite, etc.\n"))); <br> <br>    WRITEF((VBuff,TEXT("\n"))); <br>    WRITEF((VBuff,TEXT("   Example: aremote /S \"cmd\"\n"))); <br>    WRITEF((VBuff,TEXT("\n"))); <br>    WRITEF((VBuff,TEXT("   To Exit: %cK from Client\n"), COMMANDCHAR)); <br>    WRITEF((VBuff,TEXT("\n"))); <br> <br>} <br> <br>WORD GetColorNum(TCHAR *color) { <br>    int i; <br> <br>    _wcslwr(color); <br>    for (i=0;i&lt;16;i++) <br>    { <br>        if (lstrcmp(ColorList[i],color)==0) <br>        { <br>            return(i); <br>        } <br>    } <br>    return 0xffff; <br>} <br> <br>VOID <br>SetColor( <br>    WORD attr <br>    ) <br>{ <br>COORD  origin={0,0}; <br>    DWORD  dwrite; <br>    FillConsoleOutputAttribute <br>    ( <br>    MyOutHandle,attr,csbiOriginal.dwSize. <br>    X*csbiOriginal.dwSize.Y,origin,&amp;dwrite <br>    ); <br>    SetConsoleTextAttribute(MyOutHandle,attr); <br>} <br> <br>/*************************************************************/ <br>VOID <br>Errormsg( <br>    TCHAR* str <br>    ) <br>{ <br>    WRITEF((VBuff,TEXT("Error (%d) - %s\n"),GetLastError(),str)); <br>} <br> <br>/*************************************************************/ <br> <br>/* <br> * this main procedure gets called by the appropriate main depending on <br> * if AREMOTE is setup as a service or not. <br> */ <br>int remote_main(int argc, TCHAR **argv) { <br>    WORD  RunType;              // Server or Client end of Remote <br>    DWORD len=HOSTNAMELEN-1; <br>    int   i; <br> <br>    TCHAR  sTitle[100];          // New Title <br>    TCHAR  orgTitle[100];        // Old Title <br>    BOOL  bSetAttrib=FALSE;     // Change Console Attributes <br>    WORD  wAttrib;              // Console Attributes <br>char  abuff[1024];// temporary ansi buffer <br> <br>    GetComputerName((LPTSTR)HostName,&amp;len); <br> <br>    MyOutHandle=GetStdHandle(STD_OUTPUT_HANDLE); <br> <br>    GetConsoleScreenBufferInfo(MyOutHandle,&amp;csbiOriginal); <br> <br>    // Parameter Processing <br>    // <br>    // For Server: <br>    // Remote /S &lt;Executable&gt; [Optional Params] <br>// <br>// For AutoStarted TP: <br>// Remote /A &lt;Executable&gt; [Optional Params] <br>//   - this case is handled in main() <br>    // <br>    // For Client: <br>    // Remote /C &lt;Server LU&gt; [Optional Params] <br> <br>    if ((argc &lt; 2)||((argv[1][0] != TEXT('/'))&amp;&amp;(argv[1][0] != TEXT('-')))) { <br>        DisplayServerHlp(); <br>        DisplayClientHlp(); <br>WRITEF((VBuff, TEXT("\nFor server help only: aremote /s"))); <br>WRITEF((VBuff, TEXT("\nFor client help only: aremote /c"))); <br>        return(1); <br>    } <br> <br>    switch(tolower(argv[1][1])) { <br>    case TEXT('c'): <br>        // Is Client End of Remote <br>        if ((argc &lt; 3) || ((argv[1][0] != TEXT('/')) &amp;&amp; (argv[1][0] != TEXT('-')))) { <br>            DisplayClientHlp(); <br>            return 1; <br>        } <br> <br>ServerLU = _wcsupr(argv[2]); <br> <br>        RunType=REMOTE_CLIENT; <br>        break; <br> <br>    case TEXT('s'): <br>        // Is Server End of Remote <br>        if ((argc &lt; 3) || ((argv[1][0] != TEXT('/')) &amp;&amp; (argv[1][0] != TEXT('-')))) { <br>            DisplayServerHlp(); <br>            return 1; <br>        } <br> <br>        ChildCmd = argv[2]; <br> <br>        RunType = REMOTE_SERVER; <br>        break; <br> <br>    default: <br>        DisplayServerHlp(); <br>        DisplayClientHlp(); <br>WRITEF((VBuff, TEXT("\nFor server help only: aremote /s"))); <br>WRITEF((VBuff, TEXT("\nFor client help only: aremote /c"))); <br> return(1); <br>    } <br> <br>    // <br>    // Save Existing Values <br>    // <br> <br>    // <br>    //Colors /f   &lt;ForeGround&gt; /b &lt;BackGround&gt; <br>    // <br> <br>    wAttrib = csbiOriginal.wAttributes; <br> <br>    GetConsoleTitle(orgTitle,sizeof(orgTitle)); <br> <br>    if (RunType == REMOTE_SERVER) { <br>    // <br>    // Base Name of Executable <br>    // For setting the title <br>    // <br> <br>        TCHAR *tcmd=ChildCmd; <br> <br>        while ((*tcmd!=TEXT(' '))    &amp;&amp;(*tcmd!=0))   tcmd++; <br>        while ((tcmd!=ChildCmd)&amp;&amp;(*tcmd!=TEXT('\\')))tcmd--; <br> <br>        wsprintf(sTitle,TEXT("%8.8s [Remote /C %s %s]"),tcmd,HostName,TPName); <br>    } <br> <br>    // <br>    //Process Common (Optional) Parameters <br>    // <br> <br>    for (i = 3; i &lt; argc; i++) { <br> <br>        if ((argv[i][0] != TEXT('/')) &amp;&amp; (argv[i][0] != TEXT('-'))) { <br>            WRITEF((VBuff,TEXT("Invalid parameter %s:Ignoring\n"),argv[i])); <br>            continue; <br>        } <br> <br>        switch(tolower(argv[i][1])) { <br>        case TEXT('n'):   // Only Valid for client End, max number of lines to get from server <br>            i++; <br>            if (i &gt;= argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>wcstombs(abuff, argv[i], 1024); <br>            LinesToSend=(DWORD)atoi(abuff)+1; <br>            break; <br> <br>case TEXT('l'):// name of LU for client to use <br>i++; <br>if (i &gt;= argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>LocalLU = _wcsupr(argv[i]); <br>break; <br>         <br>case TEXT('m'):// name of LU-LU connection mode <br>i++; <br>if (i &gt;= argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>mode_name = _wcsupr(argv[i]); <br>break; <br>         <br>case TEXT('t'):// name of tp <br>i++; <br>if (i &gt;= argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>TPName = _wcsupr(argv[i]); <br>break; <br>         <br>   case TEXT('p'):// name of tp <br>i++; <br>if (i &gt;= argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>locTPName = _wcsupr(argv[i]); <br>break; <br>         <br>        case TEXT('b'):   // Background color <br>            i++; <br>            if (i &gt;= argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>            { <br>                WORD col = GetColorNum(argv[i]); <br>                if (col != 0xffff) { <br>                    bSetAttrib = TRUE; <br>                    wAttrib = col &lt;&lt; 4 | (wAttrib &amp; 0x000f); <br>                } <br>                break; <br>            } <br> <br>        case TEXT('f'):   // Foreground color <br>            i++; <br>            if (i&gt;=argc) { <br>                WRITEF((VBuff,TEXT("Incomplete Param %s..Ignoring\n"),argv[i-1])); <br>                break; <br>            } <br>            { <br>                WORD col = GetColorNum(argv[i]); <br>                if (col != 0xffff) { <br>                    bSetAttrib = TRUE; <br>                    wAttrib = col | (wAttrib &amp; 0x00f0); <br>                } <br>                break; <br>            } <br> <br>        case TEXT('q'): <br>            IsAdvertise = FALSE; <br>            ClientToServerFlag |= 0x80000000; <br>            break; <br> <br>        default: <br>            WRITEF((VBuff,TEXT("Unknown Parameter=%s %s\n"),argv[i-1],argv[i])); <br>            break; <br> <br>        } <br>    } <br> <br>    // <br>    //Now Set various Parameters <br>    // <br> <br>    // <br>    //Colors <br>    // <br> <br>    SetColor(wAttrib); <br> <br>    if (RunType==REMOTE_CLIENT) { <br>        // Start Client (Client.C) <br>        Client(LocalLU, ServerLU, TPName, locTPName, mode_name); <br>    } <br> <br>    if (RunType==REMOTE_SERVER) { <br>        // Start Server (Server.C) <br>        Server(ChildCmd, TPName); <br>    } <br> <br>    // <br>    //Reset Colors <br>    // <br>    SetColor(csbiOriginal.wAttributes); <br> <br>    ExitProcess(0); <br> <br>return0;// satisfy the ppc compiler; statement never reached <br>} <br> <br>/*****************************************************************************/ <br>/* The following code makes this TP invokable as an NT service. There are 3  */ <br>/* routines.                                                                 */ <br>/*                                                                           */ <br>/* 1. main. This is the entry point for the process, it sets up a service    */ <br>/*          table entry and then calls StartServiceCtrlDispatcher. This call */ <br>/*          doesn't return, but uses the thread which called it as a         */ <br>/*          control dispatcher for all the services implemented by this      */ <br>/*          process (in this case, just the TP itself).                      */ <br>/*                                                                           */ <br>/* 2. ServiceMain. This is the main entry point for the service itself, the  */ <br>/*          service control dispatcher creates a thread to start at this     */ <br>/*          routine. It must register a service control handler for the      */ <br>/*          service which will be called by the control dispatcher when it   */ <br>/*          has control instructions for the service. It then informs the    */ <br>/*          service control manager that the service is running and finally  */ <br>/*          calls the start of the TP itself. This routine should not return */ <br>/*          until the service is ready to die.                               */ <br>/*                                                                           */ <br>/* 3. ControlHandler. This routine is called by the control dispatcher when  */ <br>/*          it has instructions for the service. We do not respond to any    */ <br>/*          of the instructions as this service should be transitory and not */ <br>/*          actually run for more than a few seconds so we don't need to do  */ <br>/*          anything with the STOP or SHUTDOWN requests.                     */ <br>/*          Note that we MUST call SetServiceStatus, even if the status      */ <br>/*          hasn't changed.                                                  */ <br>/*****************************************************************************/ <br> <br>VOID WINAPI ServiceMain(DWORD dwNumServiceArgs, LPTSTR * lpServiceArgs); <br>VOID WINAPI ControlHandler(DWORD dwControl); <br>SERVICE_STATUS_HANDLE stat_hand; <br>SERVICE_STATUS servstat; <br> <br>int __cdecl main(void) { <br>SERVICE_TABLE_ENTRY stab[2]; <br>int argc, i; <br>TCHAR *argv[50]; <br>TCHARcmdline[1024]; <br> <br>// read the command line and break it out into argc/argv.  We have to do <br>// this because the standard command line passed into main isn't in Unicode <br>lstrcpy(cmdline, GetCommandLine()); <br>i = 0; argc = 0; <br>argv[argc] = &amp;(cmdline[i]); <br>while (cmdline[i] != 0) { <br>if (cmdline[i] == TEXT(' ')) { <br>cmdline[i++] = 0; <br>argv[++argc] = &amp;(cmdline[i]); <br>} <br>i++; <br>} <br>argc++; <br> <br>if ((argc &gt;= 3) &amp;&amp; <br>    (tolower(argv[1][1]) == TEXT('a')) &amp;&amp; <br>    ((argv[1][0] == TEXT('/')) || (argv[1][0] == TEXT('-')))) { <br> <br>AutoStarted = TRUE; <br> <br>// <br>// hack to fix NET START AREMOTE bug. Since we're not autostarted <br>// by an SNA Server component we have no control over the service <br>// cmd line.  Therefore we copy out the 3rd parameter passed to the <br>// service process and use it if and only there are less than 3 params <br>// passed to StartService <br>// <br>lstrcpy( ChildCmdBuffer, argv[2] ); <br> <br>// <br>// <br>// This is being run as a service <br>// <br>// <br>// Start the control dispatcher. This call gives the SCManager this <br>// thread for the entire period that this service is running, so that <br>// it can call us back with service controls. It will spawn a new <br>// thread to run the service itself, starting at entrypoint ServiceMain <br>// <br>stab[0].lpServiceName = TEXT("AREMOTE\0"); <br>stab[0].lpServiceProc = (LPSERVICE_MAIN_FUNCTION) ServiceMain; <br> <br>stab[1].lpServiceName = NULL; <br>stab[1].lpServiceProc = NULL; <br> <br>if (!StartServiceCtrlDispatcher(stab)) { <br>WRITEF((VBuff, TEXT("Remote: This was run as an service\n\n"))); <br>WRITEF((VBuff, TEXT("For command line usage type \"Remote\"\n"))); <br>} <br>} else { <br>// <br>// This is being run as a user-invoked program <br>// <br>AutoStarted = FALSE; <br>remote_main(argc, argv); <br>} <br> <br>return 0; <br>} <br> <br> <br>/*****************************************************************************/ <br>/* This routine is the entry-point for the service itself the service        */ <br>/* control dispatcher creates a thread to start here when we issue           */ <br>/* StartServiceControlDispatcher.                                            */ <br>/*                                                                           */ <br>/* Inputs:  number of arguments to services, array of strings.               */ <br>/*                                                                           */ <br>/* Outputs: none                                                             */ <br>/*                                                                           */ <br>/*****************************************************************************/ <br>VOID WINAPI ServiceMain(DWORD argc, LPTSTR *argv) { <br>DWORD rc; <br> <br>stat_hand = RegisterServiceCtrlHandler(TEXT("AREMOTE\0"), <br>(LPHANDLER_FUNCTION) ControlHandler); <br> <br>if (stat_hand == (SERVICE_STATUS_HANDLE)NULL) { <br>rc = GetLastError(); <br>DebugBreak(); <br>} <br> <br>/*************************************************************************/ <br>/* Let the SCManager know that we are running.                           */ <br>/*************************************************************************/ <br>servstat.dwServiceType              = SERVICE_WIN32; <br>servstat.dwCurrentState             = SERVICE_RUNNING; <br>servstat.dwControlsAccepted= SERVICE_ACCEPT_STOP | <br>SERVICE_ACCEPT_SHUTDOWN; <br>servstat.dwWin32ExitCode            = NO_ERROR; <br>servstat.dwServiceSpecificExitCode  = NO_ERROR; <br>servstat.dwCheckPoint               = 0; <br>servstat.dwWaitHint                 = 0; <br> <br>rc = SetServiceStatus(stat_hand, &amp;servstat); <br> <br>if (!rc) { <br>rc = GetLastError(); <br>DebugBreak(); <br>} <br> <br>{ <br>int new_argc = 3; <br>TCHAR *new_argv[3]; <br> <br>new_argv[0] = argv[0]; <br>new_argv[1] = (TCHAR *) LocalAlloc(0, 16); <br>lstrcpy(new_argv[1], TEXT("/s")); <br> <br>if ( argc &lt; 3 ) <br>{ <br>// <br>// hack to fix NET START AREMOTE bug. Since we're not autostarted <br>// by an SNA Server component we have no control over the service <br>// cmd line.  Therefore we copy out the 3rd parameter passed to the <br>// service process and use it if and only there are less than 3 params <br>// passed to StartService <br>// <br>new_argv[2] = ChildCmdBuffer; <br>} <br>else <br>{ <br>new_argv[2] = argv[2]; <br>} <br> <br> <br>remote_main(new_argc, (TCHAR **) new_argv); <br> <br>LocalFree(new_argv[1]); <br>} <br>} <br> <br>/***************************************************************************/ <br>/* This routine is the callback from the SCManager to handle specific      */ <br>/* service control requests. It MUST call SetServiceStatus before it       */ <br>/* returns, regardless of whether the status has changed.                  */ <br>/*                                                                         */ <br>/* Inputs: service control requested                                       */ <br>/*                                                                         */ <br>/* Outputs: none                                                           */ <br>/*                                                                         */ <br>/***************************************************************************/ <br>VOID WINAPI ControlHandler(DWORD dwControl) { <br>DWORD rc; <br> <br>switch (dwControl) { <br>case SERVICE_CONTROL_STOP : <br>servstat.dwCurrentState = SERVICE_STOP_PENDING; <br>servstat.dwWaitHint     = 24000; <br>break; <br> <br>case SERVICE_CONTROL_PAUSE : <br>case SERVICE_CONTROL_CONTINUE : <br>case SERVICE_CONTROL_INTERROGATE : <br>servstat.dwWaitHint     = 0; <br>break; <br> <br>case SERVICE_CONTROL_SHUTDOWN: <br>servstat.dwCurrentState = SERVICE_STOP_PENDING; <br>servstat.dwWaitHint     = 10000; <br>break; <br>} <br> <br>rc=SetServiceStatus(stat_hand, &amp;servstat); <br>if (!rc) { <br>rc=GetLastError(); <br>} <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MRCV.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5110"></a>MRCV.H</h2>
<pre><code>/* mrcv.h */ <br>/* (C) COPYRIGHT DATA CONNECTION LIMITED 1994 */ <br> <br>/*****************************************************************************/ <br>/* Change History                                                            */ <br>/*                                                                           */ <br>/*       11/01/94 DK  Created                                                */ <br>/*       14/04/94 DK  Name table added for tracing                           */ <br>/*****************************************************************************/ <br> <br>/*****************************************************************************/ <br>/* static configuration constants                                            */ <br>/* Note that MAX_RCV_PER_SERVICE cannot exceed 63, because we cannot wait    */ <br>/*      on more than 64 events (and one extra event is needed for receive)   */ <br>/*****************************************************************************/ <br>#define MAX_RCV_PER_THREAD  63 <br>#define MAX_RECEIVE_THREADS 64 <br> <br>/*****************************************************************************/ <br>/* global critical section                                                   */ <br>/*****************************************************************************/ <br>CRITICAL_SECTION runsem; <br> <br>/*****************************************************************************/ <br>/* APPC verb control block and macros for manipulation of vcb                */ <br>/*****************************************************************************/ <br>#define CLEARVCB memset(vcbptr,0,sizeof(VCB)); <br>#define P_TPE(X)    ((struct tp_ended *)X) <br>#define P_RAL(X)    ((struct receive_allocate *)X) <br> <br>#define P_M_CFD(X)  ((struct mc_confirmed *)X) <br>#define P_M_DAL(X)  ((struct mc_deallocate *)X) <br>#define P_M_RAW(X)  ((struct mc_receive_and_wait *)X) <br> <br>typedef struct vcb <br>{ <br>  union <br>  { <br>    struct appc_hdr             hdr; <br>    struct receive_allocate     rcvalloc; <br>    struct tp_ended             tpend; <br>    struct mc_confirmed         confirmed; <br>    struct mc_deallocate        deallocate; <br>    struct mc_receive_and_wait  rcvwait; <br>  } U_VCB; <br>} VCB; <br> <br>/*****************************************************************************/ <br>/* structures for convert verb                                               */ <br>/*****************************************************************************/ <br>struct convert cnvt; <br>char * cnvtptr; <br> <br>/*****************************************************************************/ <br>/* for outputting results                                                    */ <br>/*****************************************************************************/ <br>typedef unsigned long RESULT; <br>RESULT * ResultPtr; <br>RESULT * ResultBuf; <br>short    NumResults; <br> <br>/*****************************************************************************/ <br>/* conversation control block - one per conversation                         */ <br>/*****************************************************************************/ <br>typedef struct convcb <br>{ <br>  char           TPid[8]; <br>  char           type[8]; <br>  unsigned long  Convid; <br>  HANDLE         async_corr; <br>  char *         DataPtr; <br>  unsigned short thread; <br>  unsigned short conv; <br>  unsigned short RcvCount; <br>  BOOL           TPEnded; <br>  BOOL           Deallocated; <br>  RESULT         ConvStarted; <br>  HANDLE         hEvent; <br>  VCB            vcb; <br>} CONVCB; <br> <br>/*****************************************************************************/ <br>/* structures for receive threads                                            */ <br>/*****************************************************************************/ <br>typedef struct rcv_thread <br>{ <br>  HANDLE event1; <br>  HANDLE event2; <br>  CONVCB * convptr; <br>} RCV_THREAD; <br> <br>RCV_THREAD RcvThreadArray [MAX_RECEIVE_THREADS]; <br> <br>/*****************************************************************************/ <br>/* File Names and handle for trace file                                      */ <br>/*****************************************************************************/ <br>char FileName [60]; <br>char TraceFile[60]; <br>FILE *t = NULL; <br> <br>/*****************************************************************************/ <br>/* APPC Names from configuration file                                        */ <br>/*****************************************************************************/ <br>char TPName[64]; <br>char LocalTPName[64]; <br>char LocalLUAlias[8]; <br>char RemoteLUAlias[8]; <br>char ModeName[8]; <br>char RemoteTPName[64]; <br> <br>/*****************************************************************************/ <br>/* Global Variables from configuration file                                  */ <br>/*****************************************************************************/ <br>unsigned short NumRcvThreads; <br>unsigned short NumRcvConvs; <br>unsigned short RcvSize; <br> <br>/*****************************************************************************/ <br>/* Global Variables                                                          */ <br>/*****************************************************************************/ <br>unsigned short NumRalcs;                /* number of receive_allocs issued   */ <br>unsigned short RcvConvs;                /* number of conversations completed */ <br>unsigned short ThreadCount;             /* total thread count                */ <br>unsigned short RcvThreads;              /* count of receive threads          */ <br>unsigned short SimRcvConvs;             /* number of simultaneous rcv convs  */ <br> <br>/*****************************************************************************/ <br>/* Names of verbs for tracing                                                */ <br>/*****************************************************************************/ <br>char *VerbName[] = <br>{ <br>  "UNKNOWN_VERB",                       /* 0x0000                            */ <br>  "MC_ALLOCATE",                        /* 0x0001                            */ <br>  "UNKNOWN_VERB",                       /* 0x0002                            */ <br>  "MC_CONFIRM",                         /* 0x0003                            */ <br>  "MC_CONFIRMED",                       /* 0x0004                            */ <br>  "MC_DEALLOCATE",                      /* 0x0005                            */ <br>  "MC_FLUSH",                           /* 0x0006                            */ <br>  "MC_GET_ATTRIBUTES",                  /* 0x0007                            */ <br>  "UNKNOWN_VERB",                       /* 0x0008                            */ <br>  "UNKNOWN_VERB",                       /* 0x0009                            */ <br>  "MC_PREPARE_TO_RECEIVE",              /* 0x000a                            */ <br>  "MC_RECEIVE_AND_WAIT",                /* 0x000b                            */ <br>  "MC_RECEIVE_IMMEDIATE",               /* 0x000c                            */ <br>  "MC_RECEIVE_AND_POST",                /* 0x000d                            */ <br>  "MC_REQUEST_TO_SEND",                 /* 0x000e                            */ <br>  "MC_SEND_DATA",                       /* 0x000f                            */ <br>  "MC_SEND_ERROR",                      /* 0x0010                            */ <br>  "UNKNOWN_VERB",                       /* 0x0011                            */ <br>  "MC_TEST_RTS",                        /* 0x0012                            */ <br>  "TP_ENDED",                           /* 0x0013                            */ <br>  "TP_STARTED",                         /* 0x0014                            */ <br>  "UNKNOWN_VERB",                       /* 0x0015                            */ <br>  "RECEIVE_ALLOCATE",                   /* 0x0016                            */ <br>  "UNKNOWN_VERB",                       /* 0x0017                            */ <br>  "MC_SEND_CONVERSATION"                /* 0x0018                            */ <br>}; <br> <br>/*****************************************************************************/ <br>/* Windows stuff                                                             */ <br>/*****************************************************************************/ <br>HWND hWndMain; <br>char title[30]={'\0'}; <br>#define OUTPUTNUMBER sprintf(title,"thrd simR done  %d  %d  %d", \ <br>                     ThreadCount,SimRcvConvs,RcvConvs);  \ <br>                     SetWindowText(hWndMain,title); <br> <br>/*****************************************************************************/ <br>/* Function Prototypes                                                       */ <br>/*****************************************************************************/ <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>                   LPSTR lpCmdLine, int nCmdShow); <br>BOOL InitializeWinMain(HINSTANCE hInstance); <br>LONG PASCAL TPWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam); <br>void InitializeMain(void); <br>BOOL IssueRcvVerb(CONVCB * convptr); <br>BOOL ProcessReturns(CONVCB * convptr); <br>void ReadConfig(void); <br>void CONV_A_TO_E(char * string,int length); <br>void CONV_E_TO_A(char * string,int length); <br>void StartConversation(CONVCB * convptr); <br>void EndConversation(CONVCB * convptr); <br>int  ReadString(char * lpValueName, char FAR * lpData, int maxlen); <br>void PadString(char * string, int length); <br>void OutputResults(void); <br>void Build_RECEIVE_ALLOCATE(CONVCB * convptr); <br>void Build_TP_ENDED(CONVCB * convptr); <br>void Build_MC_CONFIRMED(CONVCB * convptr); <br>void Build_MC_DEALLOCATE(CONVCB * convptr); <br>void Build_MC_RECEIVE_AND_WAIT(CONVCB * convptr); <br>DWORD WINAPI RcvAllocThread(); <br>DWORD WINAPI ReceiveThread(DWORD k); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPICERRS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5129"></a>CPICERRS.H</h2>
<pre><code>/***************************************************************************** <br> * <br> *  MODULE NAME: CPICERRS.H <br> * <br> *  COPYRIGHTS: <br> *             This module contains code made available by IBM <br> *             Corporation on an AS IS basis.  Any one receiving the <br> *             module is considered to be licensed under IBM copyrights <br> *             to use the IBM-provided source code in any way he or she <br> *             deems fit, including copying it, compiling it, modifying <br> *             it, and redistributing it, with or without <br> *             modifications.  No license under any IBM patents or <br> *             patent applications is to be implied from this copyright <br> *             license. <br> * <br> *             A user of the module should understand that IBM cannot <br> *             provide technical support for the module and will not be <br> *             responsible for any consequences of use of the program. <br> * <br> *             Any notices, including this one, are not to be removed <br> *             from the module without the prior written consent of <br> *             IBM. <br> * <br> *  AUTHOR:    Peter J. Schwaller <br> *             VNET:     PJS at RALVM6           Tie Line: 444-4376 <br> *             Internet: pjs@ralvm6.vnet.ibm.com     (919) 254-4376 <br> * <br> *             John Q. Walker <br> *             VNET:     JOHNQ at RALVM6         Tie Line: 444-4414 <br> *             Internet: johnq@ralvm6.vnet.ibm.com   (919) 254-4414 <br> * <br> *  AVAILABILITY: <br> *             These sample programs and source are also available on <br> *             CompuServe through the APPC Information Exchange.  To get <br> *             to the APPC forum just type 'GO APPC' from any CompuServe <br> *             prompt.  The samples are available in the Sample Programs <br> *             library section.  Just search on the keyword CPICPGMS to <br> *             find all the samples in this series. <br> * <br> *             Updates for the sample programs and support for many more <br> *             CPI-C platforms will also be made available on CompuServe. <br> * <br> *  RELATED FILES: <br> *             Use CPICERR.C <br> * <br> *  CHANGE HISTORY: <br> *  Date       Description <br> *  08/05/92   Version 2.31 of APING, ATELL and AREXEC released to CompuServe. <br> *             This version was also distributed at the APPC/APPN Platform <br> *             Developer's Conference held in Raleigh, NC. <br> *  08/13/92   Changed cpicerr_handle_rc() to a macro referencing <br> *             cpicerr_handle_rc_extended().  The macro adds the current <br> *             source file and line number to improve source code debugging. <br> *  11/04/92   Changed version from char to unsigned char. <br> *  11/15/92   Changed reply structure to include 2 byte indicator. <br> *  11/17/92   Added send/receipt of operating system string. <br> *             Added cpicerr_exchange_version_plus() to return the string. <br> * <br> *****************************************************************************/ <br> <br>/***************************************************************************** <br> * <br> * OVERVIEW OF CPICERR CALLS <br> * <br> * cpicerr_new()                      Creates a CPICERR object. <br> *                                    This must be done before any other <br> *                                    cpicerr calls can be used. <br> * <br> * These calls set values in the cpicerr object structure and affect how <br> * cpicerr_handle_rc reacts to errors. <br> * <br> * cpicerr_set_log_file_name()        What filename to use for logging <br> * cpicerr_set_log_file_path()        Where the filename is <br> * cpicerr_set_program_name()         String - Output as part of log info <br> * cpicerr_set_program_info()         String - Output as part of log info <br> * cpicerr_set_major_version()        8 bit int - see cpicerr_exchange_version <br> * cpicerr_set_minor_version()        8 bit int - see cpicerr_exchange_version <br> * cpicerr_set_conv_id()              Used to extract conversation state info <br> * cpicerr_set_exit_level()           Level of error on which to exit <br> * cpicerr_set_show_level()           Level of error on which to show errors <br> * cpicerr_set_log_level()            Level of error on which to log errors <br> * <br> * cpicerr_handle_rc()                Should be called by the program for all <br> *                                    UNEXPECTED return codes. <br> *                                    Functions performed are: <br> *                                       Classification of the return code <br> *                                       Showing partial info to end user <br> *                                       Logging complete info to disk <br> *                                    This is a macro that actually expands <br> *                                    to cpicerr_handle_rc_extended(). <br> * <br> * cpicerr_destroy()                  Destroys the CPICERR  object. <br> * <br> * <br> * cpicerr_classify_rc()              These are internal calls used by <br> * cpicerr_show_rc()                  other cpicerr_handle_rc. <br> * cpicerr_log_cpicerr() <br> * cpicerr_get_message() <br> * cpicerr_set_rc_info() <br> * cpicerr_show_product_info() <br> * <br> *****************************************************************************/ <br> <br>#ifndef INCL_CPICERR <br>#define INCL_CPICERR <br> <br> <br>/* <br> * Include the C standard I/O library for the FILE structure definition. <br> */ <br>#include &lt;stdio.h&gt; <br> <br>/* <br> * Collection of routines with special ported version for each platform <br> * The only thing that is used from CPICDEFS.H is the correct setting <br> * of the SHORT_IDENTIFIERS identifier. <br> */ <br>#include "cpicdefs.h" <br> <br>#if defined(SHORT_IDENTIFIERS) <br>/* <br> * The C/370 compiler requires that identifier be unique in the 1st 8 chars. <br> * If any new functions are added to this file, they should also be added to <br> * this list, with a unique mapping. <br> */ <br>#    define  cpicerr_build_reply_image      cebri <br>#    define  cpicerr_conv_types             ceconv_type <br>#    define  cpicerr_classify_rc            cecr <br>#    define  cpicerr_create_reply           cecrep <br>#    define  cpicerr_destroy                cedestroy <br>#    define  cpicerr_destroy_reply          cedr <br>#    define  cpicerr_extract_reply_image    ceeri <br>#    define  cpicerr_exchange_version       ceev <br>#    define  cpicerr_exchange_version_plus  ceevp <br>#    define  cpicerr_get_message            cegm <br>#    define  cpicerr_handle_rc_extended     cehre <br>#    define  cpicerr_log_cpicerr            celf <br>#    define  cpicerr_set_major_version      cemajor <br>#    define  cpicerr_set_minor_version      ceminor <br>#    define  cpicerr_new                    cenew <br>#    define  cpicerr_recv_appl_error        cerae <br>#    define  cpicerr_return_codes           cerc <br>#    define  cpicerr_rc_classes             cercclass <br>#    define  cpicerr_send_appl_error        cesae <br>#    define  cpicerr_set_conv_id            cesci <br>#    define  cpicerr_set_error_reply        ceser <br>#    define  cpicerr_set_rc_info            cesetr <br>#    define  cpicerr_set_log_file_name      ceslfn <br>#    define  cpicerr_set_log_file_path      ceslfp <br>#    define  cpicerr_set_log_level          cesll <br>#    define  cpicerr_set_program_info       cespi <br>#    define  cpicerr_set_program_name       cespn <br>#    define  cpicerr_show_product_info      cespri <br>#    define  cpicerr_show_rc                cesr <br>#    define  cpicerr_show_reply             cesrep <br>#    define  cpicerr_set_show_level         cessl <br>#    define  cpicerr_states_conv            cestate <br>#    define  cpicerr_set_exit_level         cesxl <br>#    define  cpicerr_sync_levels            cesync <br>#    define  cpicerr_verbs_long             cvlong <br>#    define  cpicerr_verbs_short            cvshort <br>#endif <br> <br>/* Needed for the time_t structure used within the CPICINIT structure */ <br>#include &lt;time.h&gt; <br> <br>/* <br> * Specify the maximum sizes for a variety of CPI-C fields. <br> * The +1 is added to allow room for the C null terminator for strings. <br> */ <br>#define  MAX_LU_ALIAS      (8+1) <br>#define  MAX_PLU_ALIAS     (8+1) <br>#define  MAX_TP_NAME       (64+1) <br>#define  MAX_SYM_DEST_NAME (8+1) <br>#define  MAX_FQPLU_NAME    (17+1) <br>#define  MAX_DESTINATION   (17+1) <br>#define  MAX_MODE_NAME     (8+1) <br>#define  MAX_USERID        (8+1) <br>#define  MAX_PASSWORD      (8+1) <br> <br> <br> <br>#define  MAX_MESSAGE_TEXT_LENGTH    (2048) <br> <br> <br>/***************************************************************************** <br> * These values are used to break the CPI-C return codes down into classes. <br> * They are organized from errors that can be ignored, to fatal errors <br> * which cannot be recovered from. <br> * <br> * The values ALL_ERRORS and NO_ERRORS are used as extremes for the <br> * cpicerr_set_exit_level() and cpicerr_set_show_level() calls, and are <br> * not actual classification values. <br> *****************************************************************************/ <br>typedef enum { <br>    RC_OK = 0, <br>    ALL_ERRORS, <br>    CONTINUE          , <br>    RETRY_VERB        , <br>    SECURITY_NOT_VALID, <br>    ERROR_RECEIVED    , <br>    RETRY_CONV        , <br>    RETRY_CONV_BO     , <br>    BACKOUT_RECEIVED  , <br>    UNRECOVERABLE     , <br>    UNRECOVERABLE_BO  , <br>    NO_ERRORS <br>} CPIC_RC_HANDLING; <br> <br>/* <br> * Since CPI-C does not provide actual values that correspond to each CPI-C <br> * call, we have to invent our own so that we can put the call names into <br> * our message lists. <br> */ <br>typedef enum { <br>    MSG_CMACCP, <br>    MSG_CMALLC, <br>    MSG_CMCFM , <br>    MSG_CMCFMD, <br>    MSG_CMDEAL, <br>    MSG_CMECS , <br>    MSG_CMECT , <br>    MSG_CMEMN , <br>    MSG_CMEPLN, <br>    MSG_CMESL , <br>    MSG_CMFLUS, <br>    MSG_CMINIT, <br>    MSG_CMPTR , <br>    MSG_CMRCV , <br>    MSG_CMRTS , <br>    MSG_CMSCT , <br>    MSG_CMSDT , <br>    MSG_CMSED , <br>    MSG_CMSEND, <br>    MSG_CMSERR, <br>    MSG_CMSF  , <br>    MSG_CMSLD , <br>    MSG_CMSMN , <br>    MSG_CMSPLN, <br>    MSG_CMSPTR, <br>    MSG_CMSRC , <br>    MSG_CMSRT , <br>    MSG_CMSSL , <br>    MSG_CMSST , <br>    MSG_CMSTPN, <br>    MSG_CMTRTS, <br>    MSG_XCSCSU, <br>    MSG_XCSCST, <br>    MSG_XCSCSP, <br>    MSG_XCECST, <br>    MSG_XCECSU, <br>    MSG_XCMSSI, <br>    MSG_XCMESI, <br>    MSG_XCMDSI <br>} CPIC_VERB_INDEX; <br> <br> <br>/***************************************************************************** <br> * <br> * CPICERR_REPLY <br> * <br> * This structure is a reusable reply format.  This can be used either <br> * as part of a data reply, or as an error reply after a send_error() <br> * call.  See CPICERR.C for complete details of how this structure <br> * is formatted on a CPI-C conversation. <br> *****************************************************************************/ <br> <br>typedef enum next_state { <br>    NEXT_SEND, <br>    NEXT_RECEIVE, <br>    NEXT_DEALLOCATE, <br>    NEXT_DEALLOCATE_AND_EXIT <br>} NEXT_STATE; <br> <br>typedef enum reply_response { <br>    REPLY_POSITIVE_COMPLETE     = 1, <br>    REPLY_POSITIVE_INTERMEDIATE = 2, <br>    REPLY_NEGATIVE_TRANSIENT    = 3, <br>    REPLY_NEGATIVE_PERMANENT    = 4 <br>} REPLY_RESPONSE; <br> <br>typedef struct cpicerr_reply { <br>    unsigned short      length; <br>    unsigned short      buffer_length; <br>    char *              buffer; <br>} CPICERR_REPLY; <br> <br>/* <br> * The format of the reply buffer is: <br> * Offset   Length   Field <br> * ------   ------   ----- <br> *    0        2     Reply Indicator (0xFF01) <br> *    2        1     response <br> *    3        1     reserved (must be 0) <br> *    4        2     message category <br> *    6        4     primary code <br> *   10        4     secondary code <br> * The following two fields are optional: <br> *   12        2     primary message length <br> *   14        x     primary message text <br> * The following two fields are optional and should follow the primary message: <br> *  14+x       2     secondary message length <br> *  16+x       y     secondary message text <br> */ <br> <br> <br>#define CPICERR_REPLY_INDICATOR_VALUE   (0xFF01) <br>#define CPICERR_REPLY_MIN_LENGTH        (14) <br> <br>/* offsets into the reply buffer for each field */ <br>#define CPICERR_REPLY_INDICATOR         (0) <br>#define CPICERR_REPLY_RESPONSE          (2) <br>#define CPICERR_REPLY_RESERVED          (3) <br>#define CPICERR_REPLY_CATEGORY          (4) <br>#define CPICERR_REPLY_PRIMARY           (6) <br>#define CPICERR_REPLY_SECONDARY        (10) <br>#define CPICERR_REPLY_PRIMARY_LENGTH   (14) <br>#define CPICERR_REPLY_PRIMARY_TEXT     (16) <br> <br>/***************************************************************************** <br> * <br> * CPICERR <br> * <br> * This structure contains all of the information necessary to for all <br> * cpicerr calls.  All of the fields which need to be changed by the <br> * application program should be modified through the cpicerr_set...() <br> * calls.  The application program should never have to access the <br> * cpicerr structure directly. <br> * <br> * When an unexpected return code occurs, this structure is used to <br> * determine what error processing should occur, including: <br> *   display of minimal error information <br> *   logging of complete error information <br> *     where to log the data <br> * <br> * If a field is added to this structure, be sure to add the correct <br> * initialization values for the field in the cpicerr_new() function. <br> *****************************************************************************/ <br> <br>typedef struct error_handler_cpicerr { <br>    char *        program_name;             /* program's name                */ <br>    char *        program_info;             /* program information           */ <br>    CPIC_VERB_INDEX verb_index;             /* index of the failing verb     */ <br>    CM_RETURN_CODE conv_rc;                 /* return code from CPI-C        */ <br>    CM_CONVERSATION_STATE conversation_state; <br>    CM_CONVERSATION_TYPE  conversation_type; <br>    CM_SYNC_LEVEL         sync_level; <br>    char *        log_file_path;            /* path for the log file         */ <br>    char *        log_file_name;            /* where to log errors           */ <br>    unsigned char conversation_id[8];       /* CPI-C Conversation ID         */ <br>    int           conv_id_set;              /* Was conv_id set?              */ <br>    CM_INT32      mode_name_length;         /* mode_name length              */ <br>    CM_INT32      partner_LU_name_length;   /* partner_LU_name length        */ <br>    unsigned char mode_name[MAX_MODE_NAME]; /* mode_name                     */ <br>    unsigned char partner_LU_name[MAX_FQPLU_NAME]; /* partner_LU_name        */ <br>    CPIC_RC_HANDLING exit_level;            /* should we exit on an error?   */ <br>    CPIC_RC_HANDLING show_level;            /* should we show errors?        */ <br>    CPIC_RC_HANDLING log_level;             /* should we log errors?         */ <br>    unsigned char major_version;            /* Major version number          */ <br>    unsigned char minor_version;            /* Minor version number          */ <br>    time_t        program_start_time;       /* time of cpicerr init          */ <br>    time_t        program_error_time;       /* time of error report          */ <br>    int           handle_error;             /* should cpicerr process all    */ <br>                                            /* ERROR_RECEIVED ret codes?     */ <br>} CPICERR; <br> <br> <br>/***************************************************************************** <br> * The following are the structures and constants used for handling all of <br> * message strings in CPICERR. <br> *****************************************************************************/ <br> <br>/* <br> * The cpicerr_message structure contains an index and the text message <br> * associated with that index.  In most cases, the index will be an actual <br> * CPI-C return value.  For example, <br> * index = CM_SEND_STATE, message = "Send state" <br> */ <br>typedef struct cpicerr_message { <br>    CM_INT32   index; <br>    char *     message; <br>} CPICERR_MESSAGE; <br> <br> <br>/* <br> * This enum gives each list a label and a value to make it easier to <br> * process all of the lists. <br> */ <br>typedef enum cpicerr_message_type { <br>    CPIC_SYNC_LEVELS  = 1, <br>    CPIC_CONV_TYPES   = 2, <br>    CPIC_STATES_CONV  = 3, <br>    CPIC_RC_CLASSES   = 4, <br>    CPIC_RETURN_CODES = 5, <br>    CPIC_VERBS_SHORT  = 6, <br>    CPIC_VERBS_LONG   = 7 <br>} CPICERR_MESSAGE_TYPE; <br> <br>/* <br> * The CPICERR_MESSAGE_LIST structure is what actually ties a <br> * CPICERR_MESSAGE_TYPE value to the CPICERR_MESSAGE list that it relates <br> * to.  A table is defined in CPICERR.C that allows the cpicerr_get_message <br> * routine to correlate a message label to its corresponding message list. <br> */ <br>typedef struct cpicerr_message_list { <br>    CPICERR_MESSAGE_TYPE type; <br>    CPICERR_MESSAGE *    list; <br>} CPICERR_MESSAGE_LIST; <br> <br>/* <br> * The following value is used to mark the end of CPICERR_MESSAGE lists. <br> */ <br>#define  MAX_MESSAGE       32767 <br> <br> <br>/* <br> * Set the size of the buffer used by the cpicerr_exchange_version() call. <br> */ <br>#define  EXCHANGE_BUFFER_SIZE    128 <br> <br> <br>/* <br> * If these CPI-C calls are not supported, these values will be returned <br> * instead of a valid CPI-C values.  In the message tables, the values <br> * below will result in a message of "XXX not supported".  This allows <br> * us to differentiate between a call not being available on a platform, <br> * and an unrecognized value returned on a call. <br> */ <br>#define CMECS_NOT_SUPPORTED              (CM_CONVERSATION_STATE) 99 <br> <br> <br> <br>/* <br> * Used by the cpicerr_exchange_version() routine.  Future flows may <br> * be prefaced with new "command values" taken from this list. <br> */ <br>typedef enum cpicerr_command { <br>    CPICERR_EXCHANGE_VERSION = 1, <br>    CPICERR_EXCHANGE_OPSYS_STRING = 2 <br>} CPICERR_COMMAND; <br> <br> <br>/***************************************************************************** <br> * Function prototypes for routines that can be called via an application <br> * program.  See CPICERR.C for a full description of each function and <br> * how to use it. <br> *****************************************************************************/ <br>CPICERR * <br>       cpicerr_new(void); <br> <br>void   cpicerr_show_reply(       CPICERR_REPLY * reply); <br>CPICERR_REPLY * <br>       cpicerr_create_reply(     unsigned int primary_message_buffer_size, <br>                                 unsigned int secondary_message_buffer_size); <br>void   cpicerr_destroy_reply(    CPICERR_REPLY * reply); <br>unsigned int <br>       cpicerr_build_reply_image(CPICERR_REPLY * reply, <br>                                 char *          reply_buffer, <br>                                 unsigned int    reply_buffer_length); <br>unsigned int <br>       cpicerr_extract_reply_image(CPICERR_REPLY * reply, <br>                                 char *          reply_buffer, <br>                                 unsigned int    reply_buffer_length); <br>void   cpicerr_set_error_reply(  CPICERR_REPLY * reply, <br>                                 REPLY_RESPONSE  response, <br>                                 unsigned int    message_category, <br>                                 unsigned long   primary_code, <br>                                 char *          primary_message_text, <br>                                 unsigned long   secondary_code, <br>                                 char *          secondary_message_text); <br>int    cpicerr_recv_appl_error(  CPICERR *  cpicerr, <br>                                 CPICERR_REPLY * reply); <br>int    cpicerr_send_appl_error(  CPICERR *  cpicerr, <br>                                 NEXT_STATE next_state, <br>                                 CPICERR_REPLY * reply); <br>int    cpicerr_set_program_name( CPICERR *            cpicerr, <br>                                 char *               program_name); <br>int    cpicerr_set_program_info( CPICERR *            cpicerr, <br>                                 char *               program_info); <br>int    cpicerr_set_major_version(CPICERR *            cpicerr, <br>                                 unsigned char        major_version); <br>int    cpicerr_set_minor_version(CPICERR *            cpicerr, <br>                                 unsigned char        minor_version); <br>int    cpicerr_set_conv_id(      CPICERR *            cpicerr, <br>                                 unsigned char *      cm_conv_id); <br>int    cpicerr_set_log_file_name(CPICERR *            cpicerr, <br>                                 char *               log_file_name); <br>int    cpicerr_set_log_file_path(CPICERR *            cpicerr, <br>                                 char *               log_file_path); <br>int    cpicerr_set_exit_level(   CPICERR *            cpicerr, <br>                                 CPIC_RC_HANDLING     exit_level); <br>int    cpicerr_set_show_level(   CPICERR *            cpicerr, <br>                                 CPIC_RC_HANDLING     show_level); <br>int    cpicerr_set_log_level(    CPICERR *            cpicerr, <br>                                 CPIC_RC_HANDLING     log_level); <br>CPIC_RC_HANDLING <br>cpicerr_handle_rc_extended(      CPICERR *            cpicerr, <br>                                 CPIC_VERB_INDEX      verb_index, <br>                                 CM_RETURN_CODE       conv_rc, <br>                                 char *               file_name, <br>                                 int                  file_line); <br>/* <br> * Provide an alternative interface for handling unexpected CPI-C <br> * return codes.  This macro saves the programming from having <br> * to type the __FILE__ and __LINE__ macros for each call. <br> */ <br>#define cpicerr_handle_rc(x,y,z)                    \ <br>        cpicerr_handle_rc_extended(x,y,z, __FILE__, __LINE__) <br> <br>int    cpicerr_exchange_version( CPICERR *            cpicerr, <br>                                 unsigned char *      cm_conv_id, <br>                                 CM_INT32             conv_state, <br>                                 unsigned char *      partner_major_version, <br>                                 unsigned char *      partner_minor_version); <br>int    cpicerr_exchange_version_plus( <br>                                 CPICERR *            cpicerr, <br>                                 unsigned char *      cm_conv_id, <br>                                 CM_INT32             conv_state, <br>                                 unsigned char *      partner_major_version, <br>                                 unsigned char *      partner_minor_version, <br>                                 unsigned char *      opsys_string, <br>                                 unsigned int         opsys_string_length); <br>void   cpicerr_destroy(          CPICERR *            cpicerr); <br> <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

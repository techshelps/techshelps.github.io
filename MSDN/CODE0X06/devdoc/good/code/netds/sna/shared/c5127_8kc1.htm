<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPICINIT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5131"></a>CPICINIT.H</h2>
<pre><code>/***************************************************************************** <br> * <br> *  MODULE NAME: CPICINIT.H <br> * <br> *  COPYRIGHTS: <br> *             This module contains code made available by IBM <br> *             Corporation on an AS IS basis.  Any one receiving the <br> *             module is considered to be licensed under IBM copyrights <br> *             to use the IBM-provided source code in any way he or she <br> *             deems fit, including copying it, compiling it, modifying <br> *             it, and redistributing it, with or without <br> *             modifications.  No license under any IBM patents or <br> *             patent applications is to be implied from this copyright <br> *             license. <br> * <br> *             A user of the module should understand that IBM cannot <br> *             provide technical support for the module and will not be <br> *             responsible for any consequences of use of the program. <br> * <br> *             Any notices, including this one, are not to be removed <br> *             from the module without the prior written consent of <br> *             IBM. <br> * <br> *  AUTHOR:    Peter J. Schwaller <br> *             VNET:     PJS at RALVM6           Tie Line: 444-4376 <br> *             Internet: pjs@ralvm6.vnet.ibm.com     (919) 254-4376 <br> * <br> *  AVAILABILITY: <br> *             These sample programs and source are also available on <br> *             CompuServe through the APPC Information Exchange.  To get <br> *             to the APPC forum just type 'GO APPC' from any CompuServe <br> *             prompt.  The samples are available in the Sample Programs <br> *             library section.  Just search on the keyword CPICPGMS to <br> *             find all the samples in this series. <br> * <br> *             Updates for the sample programs and support for many more <br> *             CPI-C platforms will also be made available on CompuServe. <br> * <br> *  RELATED FILES: <br> *             CPICINIT.C <br> * <br> *  CHANGE HISTORY: <br> *  Date       Description <br> *  08/05/92   Version 2.31 of APING, ATELL and AREXEC released to CompuServe. <br> *             This version was also distributed at the APPC/APPN Platform <br> *             Developer's Conference held in Raleigh, NC. <br> *  08/23/92   Removed cpicinit_default_destination() and associated <br> *             processing.   After review, we decided that this call was <br> *             extraneous and that cpicinit_default_sym_dest_name() was <br> *             a better mechanism for a default destination. <br> *  11/13/92   Changed most return values from TRUE/FALSE to CPICINIT_OK and <br> *             other return codes. <br> * <br> *****************************************************************************/ <br> <br>/***************************************************************************** <br> * <br> * OVERVIEW OF CPICINIT CALLS <br> * <br> * cpicinit_new()                     Creates a CPICINIT object. <br> *                                    This must be done before any other <br> *                                    cpicinit calls can be used. <br> * <br> * cpicinit_default_tp_name()         These calls set the initial values <br> * cpicinit_default_mode_name()       for CPICINIT parameters.  These should <br> * cpicinit_default_sym_dest_name()   all be issued right after the CPICINIT <br> *                                    object is created. <br> * <br> * cpicinit_set_tp_name()             These calls also set the values for <br> * cpicinit_set_mode_name()           CPICINIT parameters.  These calls should <br> * cpicinit_set_destination()         be used to set values from user input <br> *                                    or profile values. <br> * <br> *   Security calls - only available where supported by CPI-C <br> * cpicinit_set_userid                Sets the userid for the conversation. <br> * cpicinit_set_password              Sets the password for the conversation. <br> * cpicinit_query_password_needed     If a userid was set, then a password <br> *                                    is required. <br> * cpicinit_get_password              Let cpicinit prompt the user for a <br> *                                    password. <br> * cpicinit_set_security_type         Set the security type for this conv. <br> * <br> * cpicinit_setup_conversation()      Handles all CMINIT and set calls. <br> *                                    Should be used by the calling program <br> *                                    instead of CMINIT.  See description <br> *                                    of the procedure for more details. <br> * <br> * cpicinit_destroy()                 Destroys the CPICINIT object. <br> * <br> * cpicinit_pln_valid()               These are internal calls used by <br> * cpicinit_mode_valid()              cpicinit_setup_conversation. <br> * <br> *****************************************************************************/ <br> <br>#ifndef INCL_CPICINIT <br>#define INCL_CPICINIT <br> <br>/* <br> * Collection of routines with special ported version for each platform <br> * The only thing that is used from CPICDEFS.H is the correct setting <br> * of the SHORT_IDENTIFIERS identifier. <br> */ <br>#include "cpicdefs.h" <br> <br>#if defined(SHORT_IDENTIFIERS) <br>/* <br> * Some compilers require that identifiers be unique in the 1st 8 chars. <br> * Any new functions should be added to this list. <br> */ <br>#define cpicinit_default_mode_name        cidmode <br>#define cpicinit_default_sym_dest_name    cidsdn <br>#define cpicinit_default_tp_name          cidtp <br>#define cpicinit_destroy                  cid <br>#define cpicinit_get_password             cigp <br>#define cpicinit_mode_valid               cimv <br>#define cpicinit_new                      cinew <br>#define cpicinit_pln_valid                cipv <br>#define cpicinit_query_password_needed    ciqpn <br>#define cpicinit_set_destination          cisdest <br>#define cpicinit_set_mode_name            cismode <br>#define cpicinit_set_password             cisp <br>#define cpicinit_set_tp_name              cistp <br>#define cpicinit_set_userid               cisu <br>#define cpicinit_setup_conversation       cisc <br>#endif <br> <br>/* <br> * A string of 8 blanks is a special symbolic destination name.  We define <br> * this constant here rather than typing out 8 blanks within the code. <br> */ <br>#define  BLANK_SYM_DEST_NAME     "        " <br> <br> <br>/* <br> * Return code values for most of the CPICINIT calls. <br> */ <br> <br>#define CPICINIT_OK     (0) <br>#define CPICINIT_ERROR  (1) <br> <br> <br> <br>/* <br> * This structure contains all of the information necessary to for all <br> * cpicinit calls.  The standard CPI-C destination and partner information <br> * is stored.  These values can be changed by the program through the <br> * use of cpicinit_default... and cpicinit_set... calls. <br> */ <br> <br>typedef struct cpicinit { <br>    char          def_sym_dest_name[MAX_SYM_DEST_NAME]; <br>                                            /* Default symbolic dest name    */ <br>    char          tp_name[MAX_TP_NAME];     /* Transaction Program name      */ <br>    int           set_tp_name;              /* Was tp name set?              */ <br>    char          mode_name[MAX_MODE_NAME]; /* Mode name                     */ <br>    int           set_mode_name;            /* Was mode name set?            */ <br>    char          destination[MAX_FQPLU_NAME]; <br>                                            /* Destination - may be either   */ <br>                                            /* a sym dest name or a partner  */ <br>                                            /* lu name                       */ <br>    int           set_destination;          /* Was destination set?          */ <br>    char          userid[MAX_USERID];       /* Userid                        */ <br>    int           set_userid;               /* Was userid set?               */ <br>    char          password[MAX_PASSWORD];   /* Password                      */ <br>    int           set_password;             /* Was password set?             */ <br>    int           show_error;               /* Should we show errors?        */ <br>    unsigned long security_type;            /* Security type                 */ <br>} CPICINIT; <br> <br> <br>/* <br> * Some of the fields in the CPICINIT object indicate whether another <br> * field has been set or not.  These fields will have one of the following <br> * values.  defines have been used to make the code more readable and to <br> * protect against the need to change these values in the future. <br> */ <br>#define  SET      1 <br>#define  NOT_SET  0 <br> <br> <br>/* function prototypes for this module */ <br> <br>/* create a new CPICINIT object */ <br>CPICINIT * cpicinit_new(void); <br> <br>/* Initialize defaults for CPICINIT values */ <br>int cpicinit_default_tp_name(       CPICINIT *      cpicinit, <br>                                    char *          tp_name); <br>int cpicinit_default_mode_name(     CPICINIT *      cpicinit, <br>                                    char *          mode_name); <br>int cpicinit_default_sym_dest_name( CPICINIT *      cpicinit, <br>                                    char *          def_sym_dest_name); <br> <br>/* Set new values, based on user input or profile values */ <br>int cpicinit_set_tp_name(           CPICINIT *      cpicinit, <br>                                    char *          tp_name); <br>int cpicinit_set_mode_name(         CPICINIT *      cpicinit, <br>                                    char *          mode_name); <br>int cpicinit_set_destination(       CPICINIT *      cpicinit, <br>                                    char *          destination); <br>int cpicinit_set_userid(            CPICINIT *      cpicinit, <br>                                    char *          userid); <br>int cpicinit_set_password(          CPICINIT *      cpicinit, <br>                                    char *          password); <br>int cpicinit_query_password_needed( CPICINIT *      cpicinit); <br>void cpicinit_get_password(         CPICINIT *      cpicinit); <br>void cpicinit_set_security_type(    CPICINIT *      cpicinit, <br>                                    unsigned long   security_type); <br> <br>/* This call will prepare the conversation id for the Allocate call */ <br>int cpicinit_setup_conversation(    CPICINIT *      cpicinit, <br>                                    unsigned char * cm_conv_id, <br>                                    CPICERR *       cpicerr); <br> <br>/* destroys the CPICINIT object created with cpicinit_new() */ <br>void cpicinit_destroy(              CPICINIT *      cpicinit); <br> <br>/* Internal routines */ <br>int cpicinit_pln_valid(             unsigned char * cm_conv_id); <br>int cpicinit_mode_valid(            unsigned char * cm_conv_id); <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

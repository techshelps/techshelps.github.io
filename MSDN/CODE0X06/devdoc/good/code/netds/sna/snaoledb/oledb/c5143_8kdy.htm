<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HASH.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5146"></a>HASH.H</h2>
<pre><code>//////////////////////////////////////////////////////////////////////////////// <br>// hash.h <br>// <br>// Copyright (C) 1987-1997 By Microsoft Corp. All rights reserved.  <br>// Copyright (C) 1997 Metawise Computing, Inc. All rights reserved. <br>// <br>//////////////////////////////////////////////////////////////////////////////// <br> <br> <br>#ifndef _HASH_H_ <br>#define _HASH_H_ <br> <br>class CHashItem <br>{ <br>public: <br>CHashItem (void* pData); <br> <br>void* m_pData; <br>CHashItem* m_pNext; <br>}; <br> <br>typedef CHashItem* PCHashItem; <br> <br>// A hash table which uses a DWORD as its key. <br>// A generic pointer can be associated with the key. <br>class CDWordHashItem : public CHashItem <br>{ <br>public: <br>CDWordHashItem (DWORD dwKey, void* pData); <br> <br>DWORD m_dwKey; <br>}; <br> <br>class CStringHashItem : public CHashItem <br>{ <br>public: <br>CStringHashItem (LPCTSTR lpszKey, void* pData); <br> <br>CString m_strKey; <br>}; <br> <br>typedef struct <br>{ <br>int nIndex; <br>CHashItem* pItem; <br> <br>} HashEnumContext; <br> <br> <br>class CHashTable <br>{ <br>public: <br>CHashTable (int nSize); <br>~CHashTable (); <br> <br>// Operations <br>BOOL LookUp (DWORD dwKey, void** ppData); <br>BOOL Insert (DWORD dwKey, void* pData); <br>void* Delete (DWORD dwKey); <br> <br>BOOL LookUp (LPCTSTR lpszKey, void** ppData); <br>BOOL Insert (LPCTSTR lpszKey, void* pData); <br>void* Delete (LPCTSTR lpszKey); <br> <br>// methods to enumerate all items in hash table; <br>// if items are deleted in the middle of enumeration, <br>// these functions may cause crash!!! <br>DWORD FindFirst (LPTSTR* ppszKey, void** ppData); <br>BOOL FindNext (DWORD dwHandle, LPTSTR* ppszKey, void** ppData); <br>void FindClose (DWORD dwHandle); <br> <br>protected: <br>// Implementations <br>void InsertItem (CHashItem* pItem, CHashItem** ppItems); <br> <br>int Hash (DWORD dwKey); <br>CHashItem* FindItem (DWORD dwKey, CDWordHashItem** ppItems); <br>CHashItem* DeleteItem (DWORD dwKey, CDWordHashItem** ppItems); <br> <br>int Hash (LPCTSTR lpszKey); <br>CHashItem* FindItem (LPCTSTR lpszKey, CStringHashItem** ppItems); <br>CHashItem* DeleteItem (LPCTSTR lpszKey, CStringHashItem** ppItems); <br> <br>int m_nSize;// size of array m_ppItems[] <br>int m_nCount;// #items in hash table <br>CHashItem** m_ppItems;// array of item pointers <br>}; <br> <br>#endif // _HASH_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

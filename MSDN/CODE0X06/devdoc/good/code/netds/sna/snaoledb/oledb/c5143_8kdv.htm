<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ARRAY.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5143"></a>ARRAY.H</h2>
<pre><code>//////////////////////////////////////////////////////////////////////////////// <br>// array.h <br>// <br>// Copyright (C) 1987-1997 By Microsoft Corp. All rights reserved.  <br>// Copyright (C) 1997 Metawise Computing, Inc. All rights reserved. <br>// <br>//////////////////////////////////////////////////////////////////////////////// <br> <br> <br>#ifndef _ARRAY_H_ <br>#define _ARRAY_H_ <br> <br>//////////////////////////////////////////////////////////////////////////////// <br>// Array definition similar to CArray in MFC. <br>// We are only implementing CPtrArray here. <br> <br>class CPtrArray <br>{ <br>public: <br>// Constructor/Destructor <br>CPtrArray (UINT nInitSize = 0); <br>~CPtrArray (); <br> <br>// Attributes <br>int GetSize () const; <br>int GetUpperBound () const; <br>void SetSize (int nNewSize, int nGrowBy = -1); <br>void* GetBuffer () const;// return internal buffer (array of ptrs) <br> <br>// Operations <br>void FreeExtra (); <br>void RemoveAll (); <br> <br>// Accessing Elements (nIndex is zero-based) <br>void* GetAt (int nIndex) const; <br>void SetAt (int nIndex, void* pNewElem); <br>void*&amp; ElementAt (int nIndex); <br> <br>// Potentially Growing the Array <br>void SetAtGrow (int nIndex, void* pNewElem); <br>int Add (void* pNewElem); <br>int Append (const CPtrArray&amp; src); <br>void Copy (const CPtrArray&amp; src); <br> <br>// Insert/Removal <br>void RemoveAt (int nIndex, int nCount = 1); <br> <br>// Overloaded Operator Helpers <br>void* operator [] (int nIndex) const; <br>void*&amp; operator [] (int nIndex); <br> <br>protected: <br>// Implementations <br>void** m_pData;// buffer pointer <br>int m_nSize;// #elem in array <br>int m_nMaxSize;// max allocated <br>int m_nGrowBy;// grow amount <br>}; <br> <br> <br>//////////////////////////////////////////////////////////////////////////////// <br>// Inline implementations of CPtrArray <br> <br>#ifndef _DEBUG <br> <br>inline int CPtrArray::GetSize () const <br>{ <br>return m_nSize; <br>} <br> <br>inline int CPtrArray::GetUpperBound () const <br>{ <br>return m_nSize - 1; <br>} <br> <br>inline void CPtrArray::RemoveAll () <br>{ <br>SetSize (0); <br>} <br> <br>inline void* CPtrArray::GetAt (int nIndex) const <br>{ <br>assert(0 &lt;= nIndex &amp;&amp; nIndex &lt; m_nSize); <br>return m_pData [nIndex]; <br>} <br> <br>inline void CPtrArray::SetAt (int nIndex, void* pNewElem) <br>{ <br>assert(0 &lt;= nIndex &amp;&amp; nIndex &lt; m_nSize); <br>m_pData[nIndex] = pNewElem; <br>} <br> <br>inline int CPtrArray::Add (void* pNewElem) <br>{ <br>int nIndex = m_nSize; <br> <br>SetAtGrow (nIndex, pNewElem); <br>return nIndex; <br>} <br> <br>inline void*&amp; CPtrArray::ElementAt (int nIndex) <br>{ <br>assert(0 &lt;= nIndex &amp;&amp; nIndex &lt; m_nSize); <br>return m_pData [nIndex]; <br>} <br> <br>inline void* CPtrArray::operator [] (int nIndex) const <br>{ <br>return GetAt (nIndex); <br>} <br> <br>inline void*&amp; CPtrArray::operator [] (int nIndex) <br>{ <br>assert(0 &lt;= nIndex &amp;&amp; nIndex &lt; m_nSize); <br>return m_pData [nIndex]; <br>} <br> <br>inline void* CPtrArray::GetBuffer () const <br>{ <br>return (void*) m_pData; <br>} <br> <br>#endif // _DEBUG <br> <br> <br>#ifndef min <br>#define min(X, Y) (((X) &lt;= (Y)) ? (X) : (Y)) <br>#endif <br> <br>#ifndef max <br>#define max(X, Y) (((X) &gt;= (Y)) ? (X) : (Y)) <br>#endif <br> <br>#endif // _ARRAY_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

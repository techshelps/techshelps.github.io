<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SENDRECV.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5092"></a>SENDRECV.H</h2>
<pre><code>/* sendrecv.h */ <br>/* (C) COPYRIGHT DATA CONNECTION LIMITED 1993 */ <br> <br>/*****************************************************************************/ <br>/* Change History                                                            */ <br>/*                                                                           */ <br>/*       04/05/93 NGR Created.                                               */ <br>/* OUT1  02/07/93 NGR Change output string                                   */ <br>/*****************************************************************************/ <br> <br>/* Global variables */ <br> <br>#ifdef DOS5 <br>  #include &lt;os2.h&gt; <br>  #include &lt;time.h&gt; <br> <br>  #define GetTickCount clock <br> <br>#endif <br> <br>typedef unsigned long RESULT; <br> <br>#ifdef SENDTP <br>union <br>{ <br>   struct appc_hdr             hdr; <br>   struct tp_started           tpstart; <br>   struct mc_send_conversation sndconv; <br>   struct mc_allocate          allocate; <br>   struct mc_send_data         snddata; <br>   struct mc_deallocate        deallocate; <br>   struct mc_confirm           confirm; <br>   struct tp_ended             tpend; <br>} vcb; <br>#else <br>union <br>{ <br>   struct appc_hdr             hdr; <br>   struct receive_allocate     rcvalloc; <br>   struct mc_receive_and_wait  rcvwait; <br>   struct mc_confirmed         confirmed; <br>   struct tp_ended             tpend; <br>} vcb; <br>#endif <br>char FAR * vcbptr; <br> <br>struct convert cnvt; <br>char FAR * cnvtptr; <br> <br>char LocalTPName[64]; <br>unsigned short SendSize; <br>unsigned short NumConversations; <br>BOOL TPDead; <br>BOOL FirstConv; <br>char FAR * DataPtr; <br>RESULT ConvStarted; <br>RESULT FAR * ResultPtr; <br>RESULT FAR * ResultBuf; <br>char FileName[60]; <br>unsigned short ConvCount; <br>char TPid[8]; <br>unsigned long Convid; <br> <br>#ifdef SENDTP <br>char LocalLUAlias[8]; <br>char RemoteLUAlias[8]; <br>char ModeName[8]; <br>char RemoteTPName[64]; <br>unsigned short NumSends; <br>unsigned short ConfirmEvery; <br>BOOL SendConversation; <br>char datach; <br>unsigned short SendCount; <br>unsigned short ConfirmCount; <br>#else <br>BOOL Deallocated; <br>BOOL GotNumConv; <br>int GetStage; <br>#endif <br> <br>#if (defined(WINDOWS)||defined(WIN32)) <br>HWND hWndMain; <br>HANDLE async_corr; <br>unsigned short ASYNC_COMPLETE; <br>char title[30]={'\0'}; <br>#endif <br> <br>/* Function prototypes */ <br> <br>#ifndef SYNC <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>                   LPSTR lpCmdLine, int nCmdShow); <br>BOOL InitialiseWinMain(HINSTANCE hInstance); <br>LONG FAR PASCAL TPWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam); <br>#else <br>void main( int argc, char FAR * argv[]); <br>#endif <br>void InitialiseMain(void); <br>void IssueNextVerb(void); <br>void ProcessReturns(void); <br>void ReadConfig(void); <br>void CONV_A_TO_E(char FAR * string,int length); <br>void CONV_E_TO_A(char FAR * string,int length); <br>void NewConversation(void); <br>int ReadString(char FAR * lpValueName, char FAR * lpData, int maxlen); <br>void PadString(char FAR * string, int length); <br>void OutputResults(void); <br>void Build_TP_ENDED(void); <br>#ifdef SENDTP <br>void Build_TP_STARTED(void); <br>void Build_MC_ALLOCATE(void); <br>void Build_MC_DEALLOCATE(void); <br>void Build_MC_SEND_DATA(void); <br>void Build_MC_SEND_CONVERSATION(void); <br>void Build_MC_CONFIRM(void); <br>void GenerateData(void); <br>void Send_Run_Details(void); <br>#else <br>void Build_RECEIVE_ALLOCATE(void); <br>void Build_MC_RECEIVE_AND_WAIT(void); <br>void Build_MC_CONFIRMED(void); <br>void Get_Run_Details(void); <br>#endif <br> <br>/* Macros */ <br> <br>#define CLEARVCB memset(vcbptr,0,sizeof(vcb)); <br>#ifdef SYNC <br>#define OUTPUTNUMBER printf("Conversation %d\n",ConvCount); <br>#else <br>#ifdef SENDTP <br>#define OUTPUTNUMBER sprintf(title,"APPC Send TP %d",ConvCount); \ <br>                     SetWindowText(hWndMain,title); <br>#else <br>#define OUTPUTNUMBER sprintf(title,"APPC Receive TP %d",ConvCount); \ <br>                     SetWindowText(hWndMain,title); <br>#endif <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

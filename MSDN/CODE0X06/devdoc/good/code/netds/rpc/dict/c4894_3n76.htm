<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REPLAY.IDL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4902"></a>REPLAY.IDL</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 Dictionary Application                  **/ <br>/**         Copyright 1992 - 1998 Microsoft Corporation     **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>[ uuid (12345678-1234-ABCD-EF00-0123456789AB), <br>  version(1.0), <br>//  endpoint("msc_np:[\\pipe\\splay]"), <br>  pointer_default(unique) <br>] <br>interface dict <br>{ <br> <br>/*************************************************************************/ <br>/***            Strongly typed tree nodes and dictionaries             ***/ <br>/*************************************************************************/ <br> <br>/* <br> ************************************************************************ <br> * Record type - previously imported from util1.idl <br> * This is the type of items stored in the remote dictionary. <br> ************************************************************************ <br>*/ <br> <br>typedef struct _Record { <br>    short key;                      // RPC "generation" <br>    [string] char* name;            // contributor <br>} Record; <br> <br>typedef Record * PRecord; <br> <br>/* <br> ************************************************************************ <br> * The following definitions (RDict, RecordTreeNode) are required <br> * for marshalling a complete dictionary, binary tree, respectively. <br> * All pointers are based on RPC-able types, replacing "void*" <br> * pointers in the local dictionary (dict0) which are non-transmissible. <br> ************************************************************************ <br>*/ <br> <br>typedef struct _RecordTreeNode { <br>    struct _RecordTreeNode *left;   // left child pointer <br>    struct _RecordTreeNode *right;  // right child pointer <br>    Record *item;                   // pointer to a Record structure <br>} RecordTreeNode; <br> <br>typedef struct _DictState { <br>    short ref_count;                // for shared dictionaries <br>    Record * curr_record;           // for global iterators <br>} DictState; <br> <br>typedef struct _RDict { <br>    RecordTreeNode *root;           // pointer to the root of a SAT <br>    long size;                      // number of records in dictionary <br>    DictState * state;              // pointer to state info <br>} RDict; <br> <br>/* <br> * VDict is a "virtual dictionary" object.  It is used in the client <br> * application as a handle on a dictionary maintained by a server <br>*/ <br>typedef [context_handle] void * VDict; <br> <br>typedef enum { <br>    DICT_SUCCESS, <br>    DICT_ITEM_ALREADY_PRESENT, <br>    DICT_ITEM_NOT_FOUND, <br>    DICT_FIRST_ITEM, <br>    DICT_LAST_ITEM, <br>    DICT_EMPTY_DICTIONARY, <br>    DICT_NULL_ITEM <br>} VDict_Status; <br> <br>/*************************************************************************/ <br>/***    Generic Dictionary Operations: (From dict0.h)                  ***/ <br>/***                                                                   ***/ <br>/***    Dictionary *Dict_New(Cmp_rec*, Splay*, print_rec*)             ***/ <br>/***                                                                   ***/ <br>/***    Dict_Status Dict_Find(Dictionary*, Item*)                      ***/ <br>/***    Dict_Status Dict_Next(Dictionary*, Item*)                      ***/ <br>/***    Dict_Status Dict_Prev(Dictionary*, Item*)                      ***/ <br>/***    Dict_Status Dict_Insert(Dictionary*, Item*)                    ***/ <br>/***    Dict_Status Dict_Delete(Dictionary*, Item**)                   ***/ <br>/***                                                                   ***/ <br>/***    Item* DICT_CURR_ITEM(Dict*)                                    ***/ <br>/*************************************************************************/ <br> <br>/*************************************************************************/ <br>/***    Virtual Dictionary Operations (on remote dictionaries)         ***/ <br>/***                                                                   ***/ <br>/***    VDict_Status VDict_New(OUT VDict *)                            ***/ <br>/***                                                                   ***/ <br>/***    VDict_Status VDict_Find(IN VDict, IN OUT Record**)             ***/ <br>/***    VDict_Status VDict_Next(IN VDict, IN OUT Record**)             ***/ <br>/***    VDict_Status VDict_Prev(IN VDict, IN OUT Record**)             ***/ <br>/***    VDict_Status VDict_Insert(IN VDict, IN Record*)                ***/ <br>/***    VDict_Status VDict_Delete(IN VDict, IN OUT Record**)           ***/ <br>/***                                                                   ***/ <br>/***    VDict_Status VDict_Get_Dict(IN VDict, OUT RDict**)             ***/ <br>/***    VDict_Status VDict_Curr_Item(IN VDict, OUT Record**);          ***/ <br>/***    VDict_Status VDict_Delete_Curr(IN VDict, OUT Record**);        ***/ <br>/***    VDict_Status VDict_Curr_Next(IN VDict, OUT Record**);          ***/ <br>/***    VDict_Status VDict_Curr_Prev(IN VDict, OUT Record**);          ***/ <br>/***                                                                   ***/ <br>/*************************************************************************/ <br> <br>/* <br> ************************************************************************ <br> * Most of the remote operations interfacing to a remote dictionary <br> * are very close to operations on local dictionaries, with the <br> * following noted exceptions.  To compansate for the fact that it is <br> * possible to "peek" and get the current item of a local dictionary, <br> * some interfaces had to be added, and others have to be changed to <br> * closely match the capabilities of a local dictionaries by a remote <br> * dictionary.  In particular the item (Record) argument became an OUT <br> * or an IN OUT argument, returning the value of the "current_item" <br> * following an operation (VDict_Find, VDict_Next, VDict_Prev). <br> * The operations VDict_Curr_Item, VDict_Delete_Curr, VDict_Curr_Next, <br> * and VDict_Curr_Prev were added to get functionality obtained in <br> * local dictionaries by the DICT_CURR_ITEM macro, and by passing the <br> * current item as an IN argument to Dict_Delete, Dict_Next <br> * and Dict_Prev.  The basic return [IN] OUT parameter was changed <br> * from (Item*) to (Record**), partly to further test the pointer <br> * handling capabilities of the MIDL compiler. <br> ************************************************************************* <br>*/ <br> <br>/* <br> ************************************************************************* <br> * In non-shared mode: Creates and initializes a new (private copy of <br> * the) dictionary. <br> * <br> * In shared mode: If there is an existing shared dictionary, return <br> * it, otherwise Creates and initializes a new (shared copy of <br> * the) dictionary. <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_New( <br>  [in] short shared_dict, <br>  [out] VDict * v_dict <br>  ); <br> <br>/* <br> ************************************************************************* <br> * Find *item in the dictionary.  If *item was not present a "neighbor" <br> * of *item will be returned instead <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Find( <br>    [in] VDict  v_dict, <br>    [in, out] Record ** item <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Get successor / predecessor of *item, and update *item to point to it <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Next( <br>    [in] VDict  v_dict, <br>    [in, out] Record ** item <br>    ); <br> <br>VDict_Status <br>VDict_Prev( <br>    [in] VDict  v_dict, <br>    [in, out] Record ** item <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Get successor / predecessor of RDICT_CURR_RECORD(v_dict), <br> * and update *item to point to it (global iterator prev) <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Curr_Next( <br>    [in] VDict  v_dict, <br>    [out] Record ** item <br>    ); <br> <br>VDict_Status <br>VDict_Curr_Prev( <br>    [in] VDict  v_dict, <br>    [out] Record ** item <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Insert *item into the dictionary <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Insert( <br>    [in] VDict  v_dict, <br>    [in] Record * item <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Delete *item from the dictionary.  (It is the callers responsibility <br> * to free the storage allocated for the returned record) <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Delete( <br>    [in] VDict  v_dict, <br>    [in, out] Record ** item <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Return a local copy of the whole dictionary <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Get_Dict( <br>    [in] VDict  v_dict, <br>    [out] RDict ** r_dict <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Return DICT_CURR_ITEM(v_dict) <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Curr_Item( <br>    [in] VDict  v_dict, <br>    [out] Record ** item <br>    ); <br> <br>/* <br> ************************************************************************* <br> * Delete RDICT_CURR_RECORD(v_dict) from the dictionary. <br> * (It is the callers responsibility to free the storage <br> * allocated for the returned record) <br> ************************************************************************* <br>*/ <br> <br>VDict_Status <br>VDict_Curr_Delete( <br>    [in] VDict  v_dict, <br>    [out] Record ** item <br>    ); <br> <br>/*************************************************************************/ <br>/***                        Play oriented Functions ...                ***/ <br>/*************************************************************************/ <br> <br>VDict_Status <br>VDict_X_Dict( <br>    [in] VDict  v_dict <br>    ); <br> <br>VDict_Status <br>VDict_I_Dict( <br>    [in] VDict  v_dict, <br>    [in] short  size <br>    ); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

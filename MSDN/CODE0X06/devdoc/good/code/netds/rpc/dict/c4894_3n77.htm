<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVER.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4903"></a>SERVER.C</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 Dictionary Application                  **/ <br>/**        Copyright 1992 - 1998 Microsoft Corporation      **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>/* <br> ************************************************************************* <br> *                                                                       * <br> * Remote dictionary example: server side                                * <br> *                                                                       * <br> * Description:                                                          * <br> * This is the driver for the server side remote dictionary              * <br> * (splay trees based) demo.  This is a standard server driver,          * <br> * and it works as follows:                                              * <br> *                                                                       * <br> *  o Call RpcCreateServer to initialize all data structures             * <br> *                                                                       * <br> *  o Initialize an appropriate protocol stack                           * <br> *                                                                       * <br> *  o Call RpcAddAddress to start listening on a transport address       * <br> *    (a named pipe in our case).                                        * <br> *                                                                       * <br> *  o Call RpcAddInterface to initialize interface specific structures   * <br> *    (such as dispatch table, etc.)                                     * <br> *                                                                       * <br> *  o Optionally advertise by calling RpcExport (not in this version)    * <br> *                                                                       * <br> *  o Loop forever...                                                    * <br> *                                                                       * <br> ************************************************************************* <br>*/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br> <br>#include "replay.h"    // header file generated by MIDL compiler <br>#include "dict0.h" <br>#include "util0.h" <br> <br> <br>void Usage() <br>{ <br>  printf("Usage : server -e &lt;endpoint&gt;\n"); <br>  exit(1); <br>} <br> <br>void _CRTAPI1 <br>main(int argc, char *argv[]) <br>{ <br>    RPC_STATUS status; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszSecurity         = NULL; <br>    unsigned char * pszEndpoint         = "\\pipe\\dict"; <br>    unsigned int    cMinCalls           = 1; <br>    unsigned int    cMaxCalls           = 20; <br>    unsigned int    fDontWait           = FALSE; <br>    int i; <br> <br>    printf ("Microsoft RPC demo Server - Splay (Binary) Tree DataBase\n"); <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'e': <br>                pszEndpoint = argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(); <br>            } <br>        } <br>        else <br>            Usage(); <br>    } <br> <br>    status = RpcServerUseProtseqEp(pszProtocolSequence, <br>                                   cMaxCalls, <br>                                   pszEndpoint, <br>                                   pszSecurity);  // Security descriptor <br>    if (status) { <br>        printf("RpcServerUseProtseqEp returned 0x%x\n", status); <br>        exit(status); <br>    } <br> <br>    status = RpcServerRegisterIf(dict_ServerIfHandle,  // interface to register <br>                                 NULL,   // MgrTypeUuid <br>                                 NULL);  // MgrEpv; null means use default <br>    if (status) { <br>        printf("RpcServerRegisterIf returned 0x%x\n", status); <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerListen\n"); <br>    status = RpcServerListen(cMinCalls, <br>                             cMaxCalls, <br>                             fDontWait); <br>    if (status) { <br>        printf("RpcServerListen returned: 0x%x\n", status); <br>        exit(status); <br>    } <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

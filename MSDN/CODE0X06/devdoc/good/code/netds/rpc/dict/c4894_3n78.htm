<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL0.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4904"></a>UTIL0.C</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 Dictionary Application                  **/ <br>/**        Copyright 1992 - 1998 Microsoft Corporation      **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;ctype.h&gt; <br> <br>#ifndef _LOCAL <br>#include "replay.h" <br>#else <br>#include "play.h" <br>#endif // _LOCAL <br> <br>#include "dict0.h" <br>#include "util0.h" <br> <br> <br>/*************************************************************************/ <br>/***                RecordNode / RecordTree free routines              ***/ <br>/*************************************************************************/ <br> <br>void <br>RecordTreeNodeFree( <br>    IN RecordTreeNode * node <br>    ) <br>{ <br>    if (node == NULL) <br>        return; <br> <br>    MIDL_user_free( node-&gt;item-&gt;name ); <br>    MIDL_user_free( node-&gt;item ); <br>    node-&gt;left = NULL; <br>    node-&gt;right = NULL; <br>    MIDL_user_free( node ); <br>} <br> <br>void <br>RecordTreeFree( <br>    IN RecordTreeNode * node <br>    ) <br>{ <br>    if (node == NULL) <br>        return; <br> <br>    if (node-&gt;left != NULL) { <br>        RecordTreeFree(node-&gt;left); <br>    } <br>    if (node-&gt;right != NULL) { <br>        RecordTreeFree(node-&gt;right); <br>    } <br>    RecordTreeNodeFree( node ); <br>} <br> <br>VDict_Status <br>RDict_Free_Dict( <br>    IN OUT RDict * r_dict <br>    ) <br>{ <br>    RecordTreeFree( r_dict-&gt;root ); <br> <br>    return(DICT_SUCCESS); <br>} <br> <br>/*************************************************************************/ <br>/***                  State Allocate / Free routines                   ***/ <br>/*************************************************************************/ <br> <br>DictState * allocate_state(void) <br>{ <br>    DictState * pstate = (DictState*) MIDL_user_allocate(sizeof(DictState)); <br> <br>    pstate-&gt;curr_record = (Record*) MIDL_user_allocate(sizeof(Record)); <br>    pstate-&gt;curr_record-&gt;name = (char*) MIDL_user_allocate(81 * sizeof(char)); <br> <br>    // initialize curr_record to "minus infinity" in the order <br>    pstate-&gt;curr_record-&gt;key = -1; <br>    strcpy(pstate-&gt;curr_record-&gt;name, ""); <br>    pstate-&gt;ref_count = 0; <br> <br>    return(pstate); <br>} <br> <br>void free_state(DictState * state) <br>{ <br>    if (state != NULL) { <br>        if (state-&gt;curr_record != NULL) { <br>            if (state-&gt;curr_record-&gt;name != NULL) <br>                MIDL_user_free(state-&gt;curr_record-&gt;name); <br>            MIDL_user_free(state-&gt;curr_record); <br>        } <br>        MIDL_user_free(state); <br>    } <br>} <br> <br>/*************************************************************************/ <br>/***                     Rdict Duplicate utilities                     ***/ <br>/*************************************************************************/ <br> <br>RDict * <br>RDict_Duplicate( <br>    IN RDict * src <br>    ) <br>{ <br>    RDict * dst = (RDict*) MIDL_user_allocate(sizeof(RDict)); <br> <br>    dst-&gt;root = (RecordTreeNode*) Tree_Duplicate((TreeNode*)src-&gt;root); <br>    dst-&gt;size = src-&gt;size; <br>    dst-&gt;state = DictState_Duplicate(src-&gt;state); <br> <br>    return(dst); <br>} <br> <br>DictState * <br>DictState_Duplicate( <br>    IN DictState * src <br>    ) <br>{ <br>    DictState * dst = (DictState*) MIDL_user_allocate(sizeof(DictState)); <br> <br>    dst-&gt;curr_record = ItemDuplicate(src-&gt;curr_record); <br>    dst-&gt;ref_count = src-&gt;ref_count; <br> <br>    return(dst); <br>} <br> <br>TreeNode * <br>TreeNode_Duplicate( <br>    IN TreeNode * src <br>    ) <br>{ <br>    TreeNode * pnode = (TreeNode*) MIDL_user_allocate(sizeof(TreeNode)); <br> <br>    pnode-&gt;left = pnode-&gt;right = NULL; <br>    pnode-&gt;item = ItemDuplicate(src-&gt;item); <br> <br>    return(pnode); <br>} <br> <br>TreeNode * <br>Tree_Duplicate( <br>    IN TreeNode * src <br>    ) <br>{ <br>    TreeNode * dst; <br> <br>    if (src == NULL) <br>        return((TreeNode*)NULL); <br> <br>    dst = TreeNode_Duplicate(src); <br>    dst-&gt;left = Tree_Duplicate(src-&gt;left); <br>    dst-&gt;right = Tree_Duplicate(src-&gt;right); <br>    return(dst); <br>} <br> <br>/*************************************************************************/ <br>/***                MIDL_user_allocate / MIDL_user_free                ***/ <br>/*************************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t count) <br>{ <br>    return(malloc(count)); <br>} <br> <br>void __RPC_USER MIDL_user_free(void __RPC_FAR * p) <br>{ <br>    free(p); <br>} <br> <br>/*************************************************************************/ <br>/***                          Utility functions                        ***/ <br>/*************************************************************************/ <br> <br>/*  In the most general case *cmp is a two argument function: <br>    (*cmp)(void *item0, void *item1) which compares two items, <br>    and returns:    -1 if item0 &lt; item1; <br>                     0 if item0 == item1; <br>                    +1 if item0 &gt; item1. <br>    The common case is: each item has a field named "key"; <br>    item.key is of type long, or string. <br>*/ <br> <br>int <br>comp(void* x, void* y) <br>{ <br>    int res = ((Record*)x)-&gt;key - ((Record*)y)-&gt;key; <br> <br>    if (res == 0) <br>        return( strcmp( ((Record*)x)-&gt;name, ((Record*)y)-&gt;name ) ); <br>    else <br>        return( res ) ; <br>} <br> <br>Record * <br>ItemDuplicate( <br>    Record * item <br>    ) <br>{ <br>    if (item == NULL) <br>        return(NULL); <br> <br>    return( makeRecord( item-&gt;key, item-&gt;name ) ); <br>} <br> <br>Record * <br>makeRecord( <br>    short key, <br>    char * name <br>    ) <br>{ <br>    Record * pr = (Record*) MIDL_user_allocate(sizeof(Record)); <br> <br>    if (!name) <br>        printf("makeRecord: NULL name\n"); <br> <br>    pr-&gt;name = (char*) MIDL_user_allocate(strlen(name)+1); <br>    strcpy(pr-&gt;name, name); <br>    pr-&gt;key = key; <br> <br>    return(pr); <br>} <br> <br>void <br>freeRecord( <br>    Record * pr <br>    ) <br>{ <br>    if (pr != NULL) { <br>        if (pr-&gt;name != NULL) <br>            MIDL_user_free(pr-&gt;name); <br>        MIDL_user_free(pr); <br>    } <br>} <br> <br>void <br>ItemCopy( <br>    IN Record * src, <br>    OUT Record * dest <br>    ) <br>{ <br>    int i; <br> <br>    dest-&gt;key = src-&gt;key; <br> <br>    // copy name, trubcated to 80 characters <br>    for(i=0 ; (src-&gt;name[i] != '\0') &amp;&amp; (i&lt;80) ; i++) <br>        dest-&gt;name[i]=src-&gt;name[i]; <br> <br>    dest-&gt;name[i]='\0'; <br>} <br> <br>void <br>printRecord(void* rp) <br>{ <br>    printf("%d : %s\n", ((Record*)rp)-&gt;key, ((Record*)rp)-&gt;name); <br>} <br> <br>void <br>Dict_Print(             /* prints the binary tree (indented right subtree, <br>                           followed by the root, followed by the indented <br>                           right dubtree) */ <br>    Dictionary * dp, <br>    int indent)         /* number of spaces to indent subsequent levels */ <br>{ <br>    prinTree(0, indent, dp-&gt;root, dp-&gt;print_rec); <br>} <br> <br>char spaces[] = <br>"                                                                                                                                                                                                                                                       "; <br> <br>void <br>prinTree( <br>    int lmargin,             /* indentation of the root of the tree     */ <br>    int indent,              /* indentation of subsequent levels        */ <br>    TreeNode *np,            /* pointer to the root node                */ <br>    PrintFun print)          /* short, one line, record print routine   */ <br>{ <br>    if (np == NULL) <br>        return; <br> <br>    prinTree(lmargin+indent, indent, np-&gt;right, print); <br> <br>    if (lmargin &gt; sizeof(spaces)) <br>        lmargin = sizeof(spaces);; <br> <br>    spaces[lmargin] = 0; <br>    printf(spaces); <br>    spaces[lmargin] = ' '; <br> <br>    (*print)(np-&gt;item); <br> <br>    prinTree(lmargin+indent, indent, np-&gt;left, print); <br> <br>} <br> <br>TreeNode* <br>makeNode(void * item) <br>{ <br>    TreeNode* tp; <br> <br>    tp = (TreeNode*)MIDL_user_allocate(sizeof(TreeNode)); <br>    tp-&gt;item = item; <br>    tp-&gt;left = tp-&gt;right = NULL; <br> <br>    return(tp); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

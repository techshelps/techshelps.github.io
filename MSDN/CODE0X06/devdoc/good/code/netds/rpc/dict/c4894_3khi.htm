<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DICT0.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4896"></a>DICT0.H</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 Dictionary Application                  **/ <br>/**           Copyright 1992 - 1998 Microsoft Corporation   **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>/**************************************************************/ <br>/*  user interface header file for top down splay package     */ <br>/*  based on Sleator &amp; Tarjan's Self Adjusting Trees          */ <br>/**************************************************************/ <br> <br>typedef int (*cmp_rec_func)(void *, void *); <br>                            /* type of a comparison function */ <br> <br>typedef struct tnode { <br>    struct tnode *left;     /* left child pointer */ <br>    struct tnode *right;    /* right child pointer */ <br>    void *item;             /* pointer to some structure */ <br>} TreeNode; <br> <br>typedef struct dictnode { <br>    TreeNode *root;                 /* pointer to the root of a SAT     */ <br>    long size;                      /* number of records in dictionary  */ <br>    void * state;                   /* reserved for state info          */ <br>    cmp_rec_func cmp_rec;           /* pointer to a comparison function */ <br>    TreeNode* (*splay)(TreeNode *, void *, cmp_rec_func); <br>                                    /* pointer to a splay function      */ <br>    void (*print_rec)(void *);      /* one line print function          */ <br>} Dictionary; <br> <br>/*************************************************************************/ <br>/*****              Core functions (internal)                        *****/ <br>/*************************************************************************/ <br> <br>TreeNode *              /* returns the new root                 */ <br>tdSplay(                /* general top down splay               */ <br>    TreeNode *root,     /* the current root of the tree         */ <br>    void *keyItem,      /* pointer to a "key item" searched for */ <br>    int (*cmp)(void *, void *) ); <br>                        /* pointer to a comparison function     */ <br> <br>TreeNode* <br>tdSplayLeft(TreeNode* root); <br> <br>TreeNode* <br>tdSplayRight(TreeNode* root); <br> <br>void <br>print_tree_sat(         /* prints the binary tree (indented right subtree, <br>                           followed by the root, followed by the indented <br>                           right dubtree) */ <br>    Dictionary * dp, <br>    int indent);        /* number of blanks to indent subtrees */ <br> <br>/*************************************************************************/ <br>/***    Minimal Dictionary Operations:                                 ***/ <br>/***                                                                   ***/ <br>/***    Dictionary *Dict_New(Cmp_rec*, Splay*, print_rec*)             ***/ <br>/***                                                                   ***/ <br>/***    Dict_Status Dict_Find(Dictionary*, Item*)                      ***/ <br>/***    Dict_Status Dict_Next(Dictionary*, Item*)                      ***/ <br>/***    Dict_Status Dict_Prev(Dictionary*, Item*)                      ***/ <br>/***    Dict_Status Dict_Insert(Dictionary*, Item*)                    ***/ <br>/***    Dict_Status Dict_Delete(Dictionary*, Item**)                   ***/ <br>/***                                                                   ***/ <br>/***    Item* DICT_CURR_ITEM(Dict*)                                    ***/ <br>/*************************************************************************/ <br> <br>typedef enum { <br>    SUCCESS, <br>    ITEM_ALREADY_PRESENT, <br>    ITEM_NOT_FOUND, <br>    FIRST_ITEM, <br>    LAST_ITEM, <br>    EMPTY_DICTIONARY, <br>    NULL_ITEM <br>} Dict_Status; <br> <br>#define DICT_CURR_ITEM(pDict)  ( (pDict)-&gt;root-&gt;item ) <br> <br>#define DICT_EMPTY(pDict)      ( (pDict)-&gt;root == NULL ) <br> <br>Dictionary* <br>Dict_New(                    /* returns a new dictionary node          */ <br>    int (*cmp_rec)           /* pointer to item comparison function    */ <br>        (void *, void *), <br>    TreeNode* (*splay)       /* pointer to a splay function            */ <br>        (TreeNode *, void *, cmp_rec_func), <br> <br>    void (*print_rec)        /* pointer to one line item print routine */ <br>        (void *) ); <br> <br>Dict_Status <br>Dict_Find( <br>    Dictionary* dp,     /* Dictionary to be searched. */ <br>    void* item);        /* Item searched for. */ <br> <br>Dict_Status <br>Dict_Next( <br>    Dictionary* dp,     /* Dictionary to be searched. */ <br>    void* item);        /* A Key item.  Advance to successor of item in dp. */ <br> <br>Dict_Status <br>Dict_Prev( <br>    Dictionary* dp,     /* Dictionary to be searched. */ <br>    void* item);        /* A Key item.  Retreat to predecessor of item in dp. */ <br> <br>Dict_Status <br>Dict_Insert(            /* insert the given item into the tree */ <br>    Dictionary* dp,     /* the modified dictionary */ <br>    void* item);        /* the item to be inserted */ <br> <br>Dict_Status <br>Dict_Delete(            /* delete the given item into from the tree */ <br>    Dictionary* dp,     /* the modified dictionary */ <br>    void** pItem);      /* IN: points to the (key) item to be deleted */ <br>                        /* OUT: points to the item just deleted */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

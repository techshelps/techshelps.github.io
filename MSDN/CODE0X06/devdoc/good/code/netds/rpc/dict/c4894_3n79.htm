<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL0.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4905"></a>UTIL0.H</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 Dictionary Application                  **/ <br>/**           Copyright 1992 - 1998 Microsoft Corporation   **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>#include &lt;rpc.h&gt; <br> <br>/*************************************************************************/ <br>/***                RecordNode / RecordTree free routines              ***/ <br>/*************************************************************************/ <br> <br>void <br>RecordTreeNodeFree( <br>    IN RecordTreeNode * node <br>    ); <br> <br>void <br>RecordTreeFree( <br>    IN RecordTreeNode * node <br>    ); <br> <br>VDict_Status <br>RDict_Free_Dict( <br>    IN OUT RDict * r_dict <br>    ); <br> <br>void <br>VDict_Print( <br>    VDict * pvd, <br>    int indent <br>    ); <br> <br>/*************************************************************************/ <br>/***                  State Allocate / Free routines                   ***/ <br>/*************************************************************************/ <br> <br>DictState * allocate_state(void); <br> <br>void free_state(DictState * state); <br> <br>/*************************************************************************/ <br>/***                     Rdict Duplicate utilities                     ***/ <br>/*************************************************************************/ <br> <br>RDict * <br>RDict_Duplicate( <br>    IN RDict * src <br>    ); <br> <br>DictState * <br>DictState_Duplicate( <br>    IN DictState * src <br>    ); <br> <br>TreeNode * <br>TreeNode_Duplicate( <br>    IN TreeNode * src <br>    ); <br> <br>TreeNode * <br>Tree_Duplicate( <br>    IN TreeNode * src <br>    ); <br> <br>/*************************************************************************/ <br>/***                MIDL_user_allocate / MIDL_user_free                ***/ <br>/*************************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t count); <br> <br>void __RPC_USER MIDL_user_free(void __RPC_FAR * p); <br> <br>/*************************************************************************/ <br>/***                    Comparison and Printing routines               ***/ <br>/*************************************************************************/ <br> <br>Record * <br>makeRecord( <br>    short key, <br>    char * name <br>    ); <br> <br>void <br>freeRecord( <br>    Record * pr <br>    ); <br> <br>Record * <br>ItemDuplicate( <br>    Record * item <br>    ); <br> <br>void <br>ItemCopy( <br>    IN Record * src, <br>    OUT Record * dest <br>    ); <br> <br> <br>int comp(void* x, void* y); <br> <br>void printRecord(void* rp); <br> <br>typedef void (*PrintFun) (void *); <br> <br>void prinTree( <br>    int lmargin, <br>    int indent, <br>    TreeNode *np, <br>    PrintFun print); <br> <br>void <br>Dict_Print(             /* prints the binary tree (indented right subtree, <br>                           followed by the root, followed by the indented <br>                           right dubtree) */ <br>    Dictionary * dp, <br>    int indent);        /* number of spaces to indent subsequent levels */ <br> <br>TreeNode* <br>makeNode(void * item); <br> <br>void <br>Init_dict(Dictionary * dp); <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

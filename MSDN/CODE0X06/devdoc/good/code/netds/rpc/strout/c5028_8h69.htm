<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REMOTE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5031"></a>REMOTE.C</h2>
<pre><code>/************************************************************************* <br>                    Copyright Microsoft Corp. 1992-1996 <br>                        Remote Machine strout sample <br> <br>  FILE      :   remote.c <br> <br>  PURPOSE   :   The remote procedures that will be called from the client. <br> <br>  COMMENTS  :   These procedures will be linked into the server side of  <br>                the application. <br> <br>*************************************************************************/ <br>#include "strout.h"                 //Generated by the MIDL compiler    <br>#include "common.h"                 //Common definitions for all files  <br> <br>/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ <br>/*  Procedure   :   void GetRemoteEnv(unsigned long, str **)            */ <br>/*  Desc.       :   This procedure get the environment variables from   */ <br>/*                  the server and reuturns a pointer to an array of    */ <br>/*                  pointer to the environment strings                  */ <br>/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ <br>void GetRemoteEnv(unsigned long *nNumLines, str **psEnvironmentBlock) <br>{ <br>    int nIdx = 0;       // Loop counter                                  <br>    TCHAR  <br>        *pcTemp,        // Temporary pointer to the environment block    <br>        *pcEnv;         // Pointer to the environment block              <br> <br> <br>    // Get pointer to environment block <br>    pcEnv = (TCHAR *) GetEnvironmentStrings(); <br> <br>    // First count how many lines, must know how much memory to allocate <br>    *nNumLines  = 0;            // Initialize number of lines to 0       <br>    pcTemp = pcEnv;             // Set tempptr equal to envptr           <br>    while (*pcTemp != NULL_CHAR) <br>    { <br>        // Don't count the lines that starts with IGNORE_CHAR         <br>        if(*pcTemp != IGNORE_CHAR) <br>        { <br>            (*nNumLines)++;     // Increase the number of lines      <br>        } <br> <br>        // Increment the string pointer. Each line ends in \0, and   <br>        // \0\0 means end of block                                   <br>        pcTemp += (_tcslen(pcTemp) + 1); <br>    } <br> <br>    // Allocate the memory needed for the line pointer  <br>    if(NULL == (*psEnvironmentBlock = (str *)  <br>        midl_user_allocate((*nNumLines) * sizeof(str)))) <br>    { <br>        _tprintf(TEXT("REMOTE.C : Memory allocation error\n")); <br>        return; <br>    } <br> <br>    // Iterate through all the environment strings, allocate memory,     <br>    // and copy them                                                     <br>    while (*pcEnv != NULL_CHAR) <br>    { <br>        // Don't count the lines that starts with IGNORE_CHAR <br>        if(*pcEnv != IGNORE_CHAR) <br>        { <br>            // Allocate the space needed for the strings  <br>            (*psEnvironmentBlock)[nIdx] = (str) midl_user_allocate( <br>                sizeof(TCHAR) * (_tcslen(pcEnv) + 1)); <br> <br>            // Copy the environment string to the allocated memory <br>            _tcscpy((*psEnvironmentBlock)[nIdx++], pcEnv); <br>        } <br>         <br>        // Increment the string pointer. Each line ends in \0, and <br>        // \0\0 means end of block <br>        pcEnv += (_tcslen(pcEnv) + 1); <br>    } <br>} <br> <br> <br>/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ <br>/* Procedure    :   void ShutDown(void);                                */ <br>/* Desc.        :   This procedure send a message to the server that it */ <br>/*                  canstop listening for remote procedure calls       */ <br>/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ <br>void ShutDown(void) <br>{ <br>    RPC_STATUS nStatus; <br> <br>    // Tell the server to stop listening for remote procedure calls <br>    _tprintf(TEXT("Shutting down the server\n")); <br>    nStatus = RpcMgmtStopServerListening(NULL); <br>    EXIT_IF_FAIL(nStatus, "RpcMgmtStopServerListening"); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

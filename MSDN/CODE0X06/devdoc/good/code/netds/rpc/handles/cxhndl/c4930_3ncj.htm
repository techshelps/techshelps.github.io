<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CXHNDLP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4933"></a>CXHNDLP.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                        cxhndl Example <br> <br>    FILE:       cxhndlp.c <br> <br>    PURPOSE:    Remote procedures used in server application cxhndls <br> <br>    FUNCTIONS:  RemoteOpen() - Open the file <br>                RemoteRead() - Read a buffer's worth of the file <br>                RemoteClose() - Close the file and shutdown server <br>                Shutdown() - Shutdown the server <br> <br>    COMMENTS:   This distributed application uses a context handle. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include "cxhndl.h"    // header file generated by MIDL compiler <br> <br> <br>typedef struct { <br>    FILE *hFile; <br>    char achFile[256]; <br>} FILE_CONTEXT_TYPE; <br> <br> <br>/* This remote procedure opens a file on the server. */ <br>short RemoteOpen(PCONTEXT_HANDLE_TYPE  *pphContext, <br>                 unsigned char         *pszFileName <br>    ) <br>{ <br>    FILE *hFile; <br>    FILE_CONTEXT_TYPE *pFileContext; <br> <br>    if ((hFile = fopen(pszFileName, "r")) == NULL) { <br>        *pphContext = (PCONTEXT_HANDLE_TYPE) NULL; <br>        return(-1); <br>    } <br>    else { <br>        pFileContext = (FILE_CONTEXT_TYPE *) <br>                       midl_user_allocate(sizeof(FILE_CONTEXT_TYPE)); <br>        pFileContext-&gt;hFile = hFile; <br>        strcpy(pFileContext-&gt;achFile, pszFileName); <br>        *pphContext = (PCONTEXT_HANDLE_TYPE) pFileContext; <br>        return(0); <br>    } <br>} <br> <br>/* This remote procedure reads a file on the server. */ <br>short RemoteRead(PCONTEXT_HANDLE_TYPE  phContext, <br>                 unsigned char         *pbBuf, <br>                 short                 *pcbBuf) <br>{ <br>    FILE_CONTEXT_TYPE *pFileContext; <br> <br>    printf("in RemoteRead\n"); <br> <br>    pFileContext = (FILE_CONTEXT_TYPE *) phContext; <br>    *pcbBuf = (short) fread(pbBuf, <br>                            sizeof(char), <br>                            BUFSIZE, <br>                            pFileContext-&gt;hFile); <br>    return(*pcbBuf); <br>} <br> <br>/* This remote procedure closes a file on the server. */ <br>short RemoteClose(PCONTEXT_HANDLE_TYPE *pphContext) <br>{ <br>    FILE_CONTEXT_TYPE *pFileContext; <br> <br>    printf("in RemoteClose\n"); <br> <br>    pFileContext = (FILE_CONTEXT_TYPE *) *pphContext; <br> <br>    if ( fclose( pFileContext-&gt;hFile ) == 0) <br>        { <br>        midl_user_free( *pphContext ); <br>        *pphContext = NULL; <br>        return(0); <br>        } <br>    else <br>        /* Context Rundown routine will attempt to close it again */ <br>        return(-1); <br>} <br> <br>/* The Shutdown procedure tells the server to stop listening */ <br>/* for client requests.                                      */ <br>void Shutdown(void) <br>{ <br>    RPC_STATUS status; <br> <br>    printf("Calling RpcMgmtStopServerListening\n"); <br>    status = RpcMgmtStopServerListening(NULL); <br>    printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerUnregisterIf\n"); <br>    status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>    printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br>} <br> <br>/* The rundown routine is associated with the context handle type. */ <br>void __RPC_USER PCONTEXT_HANDLE_TYPE_rundown(PCONTEXT_HANDLE_TYPE phContext) <br>{ <br>    FILE_CONTEXT_TYPE *pFileContext; <br> <br>    printf("Context rundown routine\n"); <br> <br>    if ( phContext ) <br>    { <br>        pFileContext = (FILE_CONTEXT_TYPE *) phContext; <br>        if (pFileContext-&gt;hFile != NULL) <br>            fclose(pFileContext-&gt;hFile); <br> <br>        midl_user_free( phContext ); <br>    } <br> <br>} <br> <br>/* end file cxhndlp.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

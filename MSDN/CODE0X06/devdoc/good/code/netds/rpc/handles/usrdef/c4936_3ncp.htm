<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>USRDEFC.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4939"></a>USRDEFC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                        usrdef Example <br> <br>    FILE:       usrdefc.c <br> <br>    USAGE:      usrdefc  -n network_address <br>                         -p protocol_sequence <br>                         -e endpoint <br>                         -o options <br> <br>    PURPOSE:    Client side of RPC distributed application <br> <br>    FUNCTIONS:  main() - binds to server and calls remote procedure <br> <br>    COMMENTS:   This distributed application uses a user-defined handle. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "usrdef.h"    // header file generated by MIDL compiler <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -n network_address\n"); <br>    fprintf(stderr, " -e endpoint\n"); <br>    fprintf(stderr, " -o options\n"); <br>    fprintf(stderr, " -s string\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    int i; <br>    DATA_HANDLE_TYPE dhBinding; <br>    unsigned char * pszString = "hello, world"; <br> <br>    dhBinding = (DATA_HANDLE_TYPE) midl_user_allocate(sizeof(DATA_TYPE)); <br>    dhBinding-&gt;pszProtocolSequence = "ncacn_np"; <br>    dhBinding-&gt;pszUuid             = NULL; <br>    dhBinding-&gt;pszEndpoint         = "\\pipe\\usrdef"; <br>    dhBinding-&gt;pszNetworkAddress   = NULL; <br>    dhBinding-&gt;pszOptions          = NULL; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                dhBinding-&gt;pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'n':  // network address <br>                dhBinding-&gt;pszNetworkAddress = argv[++i]; <br>                break; <br>            case 'e': <br>                dhBinding-&gt;pszEndpoint = argv[++i]; <br>                break; <br>            case 'o': <br>                dhBinding-&gt;pszOptions = argv[++i]; <br>                break; <br>            case 's': <br>                pszString = argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    printf("Calling the remote procedure 'UsrdefProc'\n"); <br>    UsrdefProc(dhBinding, pszString);  // call the remote procedure <br> <br>    printf("Calling the remote procedure 'Shutdown'\n"); <br>    Shutdown(dhBinding);  // shut down the server side <br> <br>    exit(0); <br> <br>}  // end main() <br> <br>/* This _bind routine is called by the client stub immediately */ <br>/* before each remote procedure call.                          */ <br>RPC_BINDING_HANDLE __RPC_USER DATA_HANDLE_TYPE_bind(DATA_HANDLE_TYPE dh1) <br>{ <br>    RPC_STATUS status;    // returned by RPC API functions <br>    RPC_BINDING_HANDLE hBinding; <br>    unsigned char * pszStringBinding; <br> <br>    printf("Within DATA_HANDLE_TYPE_bind function:\n"); <br>    status = RpcStringBindingCompose(dh1-&gt;pszUuid, <br>                                     dh1-&gt;pszProtocolSequence, <br>                                     dh1-&gt;pszNetworkAddress, <br>                                     dh1-&gt;pszEndpoint, <br>                                     dh1-&gt;pszOptions, <br>                                     &amp;pszStringBinding); <br>    printf("RpcStringBindingCompose returned 0x%x\n", status); <br>    printf("pszStringBinding = %s\n", pszStringBinding); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    status = RpcBindingFromStringBinding(pszStringBinding, <br>                                         &amp;hBinding); <br>    printf("RpcBindingFromStringBinding returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    status = RpcStringFree(&amp;pszStringBinding);  // unbind <br>    printf("RpcStringFree returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    return(hBinding); <br>} <br> <br>/* This _unbind routine is called by the client stub immediately */ <br>/* after each remote procedure call.                             */ <br>void __RPC_USER DATA_HANDLE_TYPE_unbind(DATA_HANDLE_TYPE dh1, <br>                                       RPC_BINDING_HANDLE h1) <br>{ <br>     RPC_STATUS status;    // returned by RPC API functions <br> <br>     printf("Within DATA_HANDLE_TYPE_unbind function:\n"); <br>     printf("Unbinding handle for %s\n", dh1-&gt;pszEndpoint); <br> <br>     status = RpcBindingFree(&amp;h1);  // unbind <br>     printf("RpcBindingFree returned 0x%x\n", status); <br>} <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file usrdefc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

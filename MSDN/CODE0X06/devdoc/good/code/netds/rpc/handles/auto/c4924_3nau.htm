<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AUTOC.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4926"></a>AUTOC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                         Auto Example <br> <br>    FILE:       autoc.c <br> <br>    USAGE:      autoc <br> <br>    PURPOSE:    Client side of RPC distributed application <br> <br>    FUNCTIONS:  main() - binds to server and calls remote procedure <br> <br>    COMMENTS:   This distributed application (time stamp) is implemented <br>                using an auto handle.  The client side of the application <br>                does not care which server provides the time stamp; it <br>                merely wants to get the time from any available server. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;time.h&gt; <br>#include "auto.h"    // header file generated by MIDL compiler <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the [auto_handle] attribute. For more information\n\ <br>about attributes and RPC API functions, see the RPC programming\n\ <br>guide and reference.\n\n" <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    time_t t1; <br>    time_t t2; <br>    char * pszTime; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    RpcTryExcept { <br>        GetTime(&amp;t1);  // GetTime is a remote procedure <br>        GetTime(&amp;t2); <br> <br>        pszTime = ctime(&amp;t1); <br>        printf("time 1= %s\n", pszTime); <br> <br>        pszTime = ctime(&amp;t2); <br>        printf("time 2= %s\n", pszTime); <br> <br>        Shutdown();    // Shutdown is a remote procedure <br>    } <br>    RpcExcept(1) { <br>        printf("The RPC runtime library raised an exception.\n"); <br>        printf("Please verify that the server application and \n"); <br>        printf("the locator service have been started."); <br>    } <br>    RpcEndExcept <br> <br>    exit(0); <br> <br>}  // end main() <br> <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file autoc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CXHNDLC.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4932"></a>CXHNDLC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                      cxhndl Example <br> <br>    FILE:       cxhndlc.c <br> <br>    USAGE:      cxhndlc  -n network_address <br>                         -p protocol_sequence <br>                         -e endpoint <br>                         -o options <br>                         -f filename <br> <br>    PURPOSE:    Client side of RPC distributed application <br> <br>    FUNCTIONS:  main() - binds to server and calls remote procedure <br> <br>    COMMENTS:   This distributed application uses a context handle. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "cxhndl.h"    // header file generated by MIDL compiler <br> <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the [context_handle] attribute. For more information\n\ <br>about attributes and RPC API functions, see the RPC programming\n\ <br>guide and reference.\n\n" <br> <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -n network_address\n"); <br>    fprintf(stderr, " -e endpoint\n"); <br>    fprintf(stderr, " -o options\n"); <br>    fprintf(stderr, " -f filename\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    RPC_STATUS status; <br>    PCONTEXT_HANDLE_TYPE phContext = NULL; <br> <br>    unsigned char * pbBuf = NULL; <br>    short cbRead;    // count of bytes read <br> <br>    unsigned char * pszUuid             = NULL; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszNetworkAddress   = NULL; <br>    unsigned char * pszEndpoint         = "\\pipe\\cxhndl"; <br>    unsigned char * pszOptions          = NULL; <br>    unsigned char * pszStringBinding    = NULL; <br>    unsigned char * pszFileName         = "readme.txt"; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'n':  // network address <br>                pszNetworkAddress = argv[++i]; <br>                break; <br>            case 'e': <br>                pszEndpoint = argv[++i]; <br>                break; <br>            case 'o': <br>                pszOptions = argv[++i]; <br>                break; <br>            case 'f': <br>                pszFileName = argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    pbBuf = (unsigned char *) <br>            midl_user_allocate(BUFSIZE * sizeof(unsigned char)); <br> <br>    /* Use a convenience function to concatenate the elements of  */ <br>    /* the string binding into the proper sequence.               */ <br>    status = RpcStringBindingCompose(pszUuid, <br>                                     pszProtocolSequence, <br>                                     pszNetworkAddress, <br>                                     pszEndpoint, <br>                                     pszOptions, <br>                                     &amp;pszStringBinding); <br>    printf("RpcStringBindingCompose returned 0x%x\n", status); <br>    printf("pszStringBinding = %s\n", pszStringBinding); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    /* Set the binding handle that will be used to bind to the server. */ <br>    status = RpcBindingFromStringBinding(pszStringBinding, <br>                                         &amp;hStarter); <br>    printf("RpcBindingFromStringBinding returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling the remote procedure RemoteOpen\n"); <br>    if (RemoteOpen(&amp;phContext, pszFileName) &lt; 0) { <br>        printf("Unable to open %s\n", pszFileName); <br>        Shutdown(); <br>        exit(2); <br>    } <br> <br>    /* Now the context handle also manages the binding. */ <br>    status = RpcBindingFree(&amp;hStarter); <br>    printf("RpcBindingFree returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    /*  Free the string binding */ <br>    status = RpcStringFree(&amp;pszStringBinding); <br>    printf("RpcStringFree returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling the remote procedure RemoteRead\n"); <br>    while (RemoteRead(phContext, pbBuf, &amp;cbRead) &gt; 0) { <br>        for (i = 0; i &lt; cbRead; i++) <br>            putchar(*(pbBuf+i)); <br>    } <br> <br>    printf("Calling the remote procedure RemoteClose\n"); <br>    if (RemoteClose(&amp;phContext) &lt; 0 ) { <br>        printf("Close failed on %s\n", pszFileName); <br>        exit(2); <br>    } <br> <br>    exit(0); <br> <br>}  // end main() <br> <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end cxhndlc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5008"></a>README.TXT</h2>
<pre><code>PIPES   <br> <br> <br>The PIPE sample demonstrates how to write a program that uses pipes for  <br>transferring data between the client and the server. The client sends a  <br>file to the server using pipes. The server then "encodes" the data by  <br>adding 1 to every element in the file, and then sends the file back using <br>pipes. The pipe used in this sample program is a in/out pipe. <br> <br>This program also allows the user to compile either for UNICIODE or ANSI. <br>See section below for guidelines on how to compile for UNIOCDE <br> <br>  <br>FILES  <br>=====  <br>  <br>The directory SAMPLES\RPC\PIPES contains the following files for <br>building the sample distributed application PIPES:  <br>  <br>File          Description <br>------------------------- <br> <br>README.TXT      Readme file for the pipe sample  <br>PIPE.IDL        Interface definition language file  <br>PIPE.ACF        Attribute configuration file  <br>PIPEC.C         Client main program  <br>PIPES.C         Server main program  <br>COMMON.H        Common header file for all the files <br>PIPEPROC.C      Remote procedures  <br>MAKEFILE        nmake file to build 32-bit client and server app. <br>                for ANSI characters. <br>MAKEFILE.UNI    nmake file to build 32-bit client and server app. <br>                for UNICODE characters. <br> <br> <br>NMAKE builds the executable programs CLIENT.EXE (client) and <br>SERVER.EXE (server). <br> <br>Note: The client and server applications can run on the same  <br>Microsoft Windows NT computer when you use different screen groups. <br> <br> <br> <br>COMPILING FOR UNICODE: <br>====================== <br> <br>type nmake /f makefile.uni at the command line. This will cause <br>the compiler to use the file MAKEFILE.UNI instead of the MAKEFILE. <br> <br>The reason behind the use of TEXT, TCHAR, _TUCHAR, _tprintf, _tcscpy, _tcscmp, <br>and _tfopen is that the program can easily be compiled to support UNICODE  <br>(Wide characters) as well as supporting one byte ANSI characters.  <br> <br>    TEXT:   This macro will put an L in front of the string if we are <br>                compiling for UNICODE, and do nothing if compiling for ANSI <br>    TCHAR:   expands to either char or wchar_t during compilation <br>    _TUCHAR:   expands to either unsigned char or wchar_t during compilation <br>    _tprintf:   expands to either printf or to wsprintfduring compilation <br>    _tcscpy:   expands to either strcpy or to wcscpy during compilation <br>    _tcscmp:   expands to either strcmp or to wcscmp during compilation <br>    _tfopen:   expands to either fopen or to _wfopen during compilation </code></pre>
<p>&nbsp;</p></body>
</HTML>

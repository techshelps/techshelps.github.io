<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4918"></a>README.TXT</h2>
<pre><code>DYNOUT  <br> <br> <br>The DYNOUT sample demonstrates how to allocate memory at a server for an n-byte <br>object and pass it back to the client as an [out]-only parameter. The client <br>then frees the memory. This technique allows the stub to call the server <br>without knowing in advance how much data will be returned. <br> <br>  <br>FILES  <br>=====  <br>  <br>The directory samples\rpc\dynout contains the following files for <br>building the sample distributed application DYNOUT:  <br>  <br>File          Description <br>------------------------- <br>  <br>README.TXT    Readme file for the dynout sample  <br>DYNOUT.IDL    Interface definition language file  <br>DYNOUT.ACF    Attribute configuration file  <br>DYNOUTC.C     Client main program  <br>DYNOUTS.C     Server main program  <br>DYNOUTP.C     Remote procedure  <br>XX_MIDL.BAT   separate MIDL build file <br>MAKEFILE      nmake file to build 32-bit client and server applications. <br> <br>NMAKE builds the executable programs DYNOUT.EXE (client) and <br>DYNOUTS.EXE (server). </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5042"></a>README.TXT</h2>
<pre><code>WINTYP   <br> <br> <br>The WINTYP sample demonstrates how to write a program that uses RPC calls to <br>transfer windows datatypes between the client and the server.  <br>The client reads in a bitmap and when the user selects to modify the image, <br>the bitmap is sent to the server, where the server is doing the modification. <br>The bitmap is then sent back to the client, where the new bitmap is displayed. <br> <br>There are two choices for manipulating the images, either to flip it, or to  <br>find the edges in it. The find edge procedure will only work when the  <br>screen resolution is set to 256 colors. The reason for this is that the  <br>algorithm used in the remote procedures only works with 8 bits per pixel. <br> <br>This program also allows the user to compile either for UNICODE or ANSI. <br>See section below for guidelines on how to compile for UNICODE <br> <br>  <br>FILES  <br>=====  <br>  <br>The directory SAMPLES\RPC\WINTYP contains the following files for <br>building the sample distributed application WINTYP:  <br>  <br>File          Description <br>------------------------- <br> <br>README.TXT      Readme file for the pipe sample  <br>WINTYP.IDL      Interface definition language file  <br>WINTYP.ACF      Attribute configuration file  <br>CLIENT.C        Client main program  <br>CLIENT.H        Header file specific for the client side <br>CLIENT.RC       Resource file for the client application <br>CLIRES.H        Resource header file <br>SERVER.C        Server main program  <br>COMMON.H        Common header file for all the files <br>REMOTE.C        Remote procedures  <br>MAKEFILE        nmake file to build 32-bit client and server app. <br>                for ANSI characters. <br>MAKEFILE.UNI    nmake file to build 32-bit client and server app. <br>                for UNICODE characters. <br> <br> <br>NMAKE builds the executable programs CLIENT.EXE (client) and <br>SERVER.EXE (server). <br> <br>Note: The client and server applications can run on the same  <br>Microsoft Windows NT computer when you use different screen groups. <br> <br> <br> <br>COMPILING FOR UNICODE: <br>====================== <br> <br>type nmake /f makefile.uni at the command line. This will cause <br>the compiler to use the file MAKEFILE.UNI instead of the MAKEFILE. <br> <br>The reason behind the use of TEXT, TCHAR, _TUCHAR, _tprintf, _tcscpy,  <br>_tcscmp, and _stprintf is that these macros expand to either  <br>regular one byte ANSI functions or to UNICODE (Wide characters) functions <br>when they are compiled <br>    TEXT    :   This macro will put an L in front of the string if we are  <br>                compiling for UNICODE <br>    TCHAR   :   Maps to either char or wchar_t  <br>    _TUCHAR :   Maps to either unsigned char or wchar_t  <br>    _tprintf:   Maps to either printf or wsprintf <br>    _stprintf:  Maps to either sprintf or swprintf <br>    _tcscpy :   Maps to either strcpy or wcscpy <br>    _tcscmp :   Maps to either strcmp or wcscmp </code></pre>
<p>&nbsp;</p></body>
</HTML>

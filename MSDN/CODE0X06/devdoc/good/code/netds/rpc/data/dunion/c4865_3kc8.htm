<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DUNIONP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4868"></a>DUNIONP.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                   Discriminated Union Example <br> <br>    FILE:       unionp.c <br> <br>    PURPOSE:    Remote procedures that are linked with the server <br>                side of RPC distributed application <br> <br>    FUNCTIONS:  UnionParamProc()  - union, discriminant are parameters <br>                UnionStructProc() - union, discriminant in structure <br> <br>    COMMENTS:   This distributed application illustrates distriminated <br>                union. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "dunion.h"    // header file generated by MIDL compiler <br> <br> <br>void UnionParamProc(DISCRIM_UNION_PARAM_TYPE *up, <br>                    short                    sDiscrim) <br>{ <br>    printf("sDiscrim = %d, data = ", sDiscrim); <br>    switch(sDiscrim) { <br>    case 0: <br>        printf("short %d\n", up-&gt;sVal); <br>        break; <br>    case 1: <br>        printf("float %f\n", up-&gt;fVal); <br>        break; <br>    case 2: <br>        printf("char %c\n", up-&gt;chVal); <br>        break; <br>    default: <br>        printf("invalid\n"); <br>        break; <br>    } <br>} <br> <br>void UnionStructProc(DISCRIM_UNION_STRUCT_TYPE *u) <br>{ <br>    printf("sDiscrim = %d, data = ", u-&gt;sDiscrim); <br>    switch(u-&gt;sDiscrim) { <br>    case 0: <br>        printf("short %d\n", u-&gt;u.sVal); <br>        break; <br>    case 1: <br>        printf("float %f\n", u-&gt;u.fVal); <br>        break; <br>    case 2: <br>        printf("char %c\n", u-&gt;u.chVal); <br>        break; <br>    default: <br>        printf("invalid\n"); <br>        break; <br>    } <br>} <br> <br>void Shutdown(void) <br>{ <br>    RPC_STATUS status; <br> <br>    printf("Calling RpcMgmtStopServerListening\n"); <br>    status = RpcMgmtStopServerListening(NULL); <br>    printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerUnregisterIf\n"); <br>    status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>    printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br>} <br> <br>/* end file dunionp.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

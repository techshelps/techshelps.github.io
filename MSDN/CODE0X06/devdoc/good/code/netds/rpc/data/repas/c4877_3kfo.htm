<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REPASS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4884"></a>REPASS.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                        repas Example <br> <br>    FILE:       repass.c <br> <br>    USAGE:      repass -p protocol_sequence <br>                       -e endpoint <br>                       -m max calls <br>                       -n min calls <br>                       -f flag for RpcServerListen <br> <br>    PURPOSE:    Server side of RPC distributed application repas <br> <br>    FUNCTIONS:  main() - registers server as RPC server <br> <br>    COMMENTS:   This sample program generates a client and server can share <br>                an interface, but one side can use a different representation <br>                than the other. <br> <br>                The client side in this example does all operations using <br>                character strings, and the server side does all operations <br>                using UNICODE strings.  Two procedures are provided, one <br>                defined with ASCII strings, one with UNICODE strings. <br>                The wire format reflects these definitions, yet the client <br>                and server see pure ASCII and pure UNICODE respectively. <br> <br>                The [represent_as] attribute (used in the client and server <br>                side acf files) requires the four user-supplied functions <br>                whose names start with the name of the transmitted type <br>                (in the client side's case: WCHAR_STRING) <br> <br>                The [in, out] attributes applied to remote procedure <br>                parameters require the two user-supplied functions <br>                midl_user_allocate and midl_user_free. <br> <br>                The other functions are utilities that are used to <br>                build or display the data structures. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "repass.h"     // header file generated by MIDL compiler <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the [transmit_as] attribute. For more information\n\ <br>about the attributes and the RPC API functions, see the\n\ <br>RPC programming guide and reference.\n\n" <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -e endpoint\n"); <br>    fprintf(stderr, " -m maxcalls\n"); <br>    fprintf(stderr, " -n mincalls\n"); <br>    fprintf(stderr, " -f flag_wait_op\n"); <br>    exit(1); <br>} <br> <br>/* main:  register the interface, start listening for clients */ <br>void _CRTAPI1 main(int argc, char * argv[]) <br>{ <br>    RPC_STATUS status; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszSecurity         = NULL; <br>    unsigned char * pszEndpoint         = "\\pipe\\repas"; <br>    unsigned int    cMinCalls           = 1; <br>    unsigned int    cMaxCalls           = 20; <br>    unsigned int    fDontWait           = FALSE; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'e': <br>                pszEndpoint = argv[++i]; <br>                break; <br>            case 'm': <br>                cMaxCalls = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'n': <br>                cMinCalls = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'f': <br>                fDontWait = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    status = RpcServerUseProtseqEp(pszProtocolSequence, <br>                                   cMaxCalls, <br>                                   pszEndpoint, <br>                                   pszSecurity);  // Security descriptor <br>    printf("RpcServerUseProtseqEp returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    status = RpcServerRegisterIf(repas_ServerIfHandle,  // interface to register <br>                                 NULL,   // MgrTypeUuid <br>                                 NULL);  // MgrEpv; null means use default <br>    printf("RpcServerRegisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerListen\n"); <br>    status = RpcServerListen(cMinCalls, <br>                             cMaxCalls, <br>                             fDontWait); <br>    printf("RpcServerListen returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    if (fDontWait) { <br>        printf("Calling RpcMgmtWaitServerListen\n"); <br>        status = RpcMgmtWaitServerListen();  //  wait operation <br>        printf("RpcMgmtWaitServerListen returned: 0x%x\n", status); <br>        if (status) { <br>            exit(status); <br>        } <br>    } <br> <br>}  // end main() <br> <br>/* end file repass.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

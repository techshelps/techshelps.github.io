<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REPASCU.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4881"></a>REPASCU.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                        repas Example <br> <br>    FILE:       repasu.c <br> <br>    PURPOSE:    Utility functions used by both client and server <br>                sides of the RPC distributed application. <br>                This sample demonstrates the transmit_as example. <br>                A doubly-linked list is transmitted over the network <br>                as a sized array. <br> <br>    RELATED:    repass.c - server main <br>                repasp.c - remote procedures <br>                repasc.c - client main <br> <br>    FUNCTIONS:  CHAR_STRING_to_local    - convert CHAR_STRING to WCHAR_STRING <br>                CHAR_STRING_from_local  - convert WCHAR_STRING to CHAR_STRING <br>                CHAR_STRING_free_inst   - free WCHAR_STRING memory <br>                CHAR_STRING_free_local  - free CHAR_STRING memory <br>                midl_user_allocate - user-supplied memory allocator <br>                midl_user_free - user-supplied routine to free memory <br> <br> <br>    COMMENTS:   This sample program generates a client and server can share <br>                an interface, but one side can use a different representation <br>                than the other. <br> <br>                The client side in this example does all operations using <br>                character strings, and the server side does all operations <br>                using UNICODE strings.  Two procedures are provided, one <br>                defined with ASCII strings, one with UNICODE strings. <br>                The wire format reflects these definitions, yet the client <br>                and server see pure ASCII and pure UNICODE respectively. <br> <br>                The [represent_as] attribute (used in the client and server <br>                side acf files) requires the four user-supplied functions <br>                whose names start with the name of the transmitted type <br>                (in the client side's case: WCHAR_STRING) <br> <br>                The [in, out] attributes applied to remote procedure <br>                parameters require the two user-supplied functions <br>                midl_user_allocate and midl_user_free. <br> <br>                The other functions are utilities that are used to <br>                build or display the data structures. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "repasc.h"    // header file generated by MIDL compiler for client <br> <br> <br> <br> <br>void __RPC_USER <br>WCHAR_STRING_from_local( <br>    CHAR_STRING __RPC_FAR * pLocal, <br>    WCHAR_STRING __RPC_FAR * __RPC_FAR * pWire ) <br>{ <br>    WCHAR_STRING    *   pWireString; <br> <br>    pWireString = midl_user_allocate( sizeof( WCHAR_STRING ) ); <br> <br>    *pWire = pWireString; <br> <br>    mbstowcs( *pWireString, *pLocal, STRING_SIZE ); <br>} <br> <br> <br>void __RPC_USER <br>WCHAR_STRING_to_local( <br>    WCHAR_STRING __RPC_FAR * pWire, <br>    CHAR_STRING __RPC_FAR * pLocal ) <br>{ <br>    wcstombs( *pLocal, *pWire, STRING_SIZE ); <br>} <br> <br>void __RPC_USER <br>WCHAR_STRING_free_inst( <br>    WCHAR_STRING __RPC_FAR * pWire) <br>{ <br>    midl_user_free( pWire ); <br>} <br> <br>void __RPC_USER <br>WCHAR_STRING_free_local( <br>    CHAR_STRING __RPC_FAR * pLocal) <br>{ <br>    midl_user_free( pLocal ); <br>} <br> <br>/***************************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br> <br>/***************************************************************************/ <br> <br>/* end file repascu.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

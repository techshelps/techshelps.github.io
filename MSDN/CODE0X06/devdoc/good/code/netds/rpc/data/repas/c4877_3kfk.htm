<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REPASC.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4880"></a>REPASC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                       repas Example <br> <br>    FILE:       repasc.c <br> <br>    USAGE:      repasc  -n network_address <br>                       -p protocol_sequence <br>                       -e endpoint <br>                       -o options <br>                       -c count of elements in linked list <br>                       -v value of first element in linked list <br>                       -d delta between values in linked list <br> <br>    PURPOSE:    Client side of RPC distributed application. <br>                This sample demonstrates the represent_as example. <br>                A char string is sent over the network as a unicode string. <br> <br>    RELATED:    repass.c - server main <br>                repasp.c - remote procedures <br>                repascu.c - client utility procedures <br> <br>    FUNCTIONS:  main() - bind to server and call remote procedure <br> <br>    COMMENTS:   This sample program generates a client and server can share <br>                an interface, but one side can use a different representation <br>                than the other. <br> <br>                The client side in this example does all operations using <br>                character strings, and the server side does all operations <br>                using UNICODE strings.  Two procedures are provided, one <br>                defined with ASCII strings, one with UNICODE strings. <br>                The wire format reflects these definitions, yet the client <br>                and server see pure ASCII and pure UNICODE respectively. <br> <br>                The [represent_as] attribute (used in the client and server <br>                side acf files) requires the four user-supplied functions <br>                whose names start with the name of the transmitted type <br>                (in the client side's case: WCHAR_STRING) <br> <br>                The [in, out] attributes applied to remote procedure <br>                parameters require the two user-supplied functions <br>                midl_user_allocate and midl_user_free. <br> <br>                The other functions are utilities that are used to <br>                build or display the data structures. <br> <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "repasc.h"    // client's side header file generated by MIDL compiler <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the [represent_as] attribute. For more information\n\ <br>about the attributes and the RPC API functions, see the\n\ <br>RPC programming guide and reference.\n\n" <br> <br>#define MAX_ELEMENTS 50 <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -n network_address\n"); <br>    fprintf(stderr, " -e endpoint\n"); <br>    fprintf(stderr, " -o options\n"); <br>    fprintf(stderr, " -c count_of_elements\n"); <br>    fprintf(stderr, " -v value\n"); <br>    fprintf(stderr, " -d delta\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    RPC_STATUS status; <br>    unsigned char * pszUuid             = NULL; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszNetworkAddress   = NULL; <br>    unsigned char * pszEndpoint         = "\\pipe\\repas"; <br>    unsigned char * pszOptions          = NULL; <br>    unsigned char * pszStringBinding    = NULL; <br>    int i; <br>    int cElements = 10; <br>    short sValue = 100; <br>    short sDelta = 10; <br> <br>    char    FirstBuffer[100]; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'n':  // network address <br>                pszNetworkAddress = argv[++i]; <br>                break; <br>            case 'e': <br>                pszEndpoint = argv[++i]; <br>                break; <br>            case 'o': <br>                pszOptions = argv[++i]; <br>                break; <br>            case 'c': <br>                cElements = atoi(argv[++i]); <br>                if (cElements &gt; MAX_ELEMENTS) <br>                    cElements = MAX_ELEMENTS; <br>                break; <br>            case 'v': <br>                sValue = (short)atoi(argv[++i]); <br>                break; <br>            case 'd': <br>                sDelta = (short)atoi(argv[++i]); <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    /* Use a convenience function to concatenate the elements of the string */ <br>    /* binding into the syntax needed by RpcBindingFromStringBinding.       */ <br>    status = RpcStringBindingCompose(pszUuid, <br>                                     pszProtocolSequence, <br>                                     pszNetworkAddress, <br>                                     pszEndpoint, <br>                                     pszOptions, <br>                                     &amp;pszStringBinding); <br>    printf("RpcStringBindingCompose returned 0x%x\n", status); <br>    printf("pszStringBinding = %s\n", pszStringBinding); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    /* Set the binding handle that will be used to bind to the server. */ <br>    status = RpcBindingFromStringBinding(pszStringBinding, <br>                                         &amp;hrepas); <br>    printf("RpcBindingFromStringBinding returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    RpcTryExcept { <br>        // initialize a string to be shipped <br>        strcpy(FirstBuffer,"This ASCII string is sent from the client to the server as UNICODE"); <br> <br>        printf("\nThe Client side is about to send:\n\"%s\"\n\n", FirstBuffer ); <br> <br>        printf("Calling the remote procedure 'ModifyMyWString'\n"); <br>        // note that the client sees the interface using ascii, not unicode <br>        ModifyMyWString( &amp;FirstBuffer ); <br>        printf("The Client side got back:\n\"%s\"\n\n", FirstBuffer ); <br> <br> <br>        // initialize a string to be shipped <br>        strcpy(FirstBuffer,"And this ASCII string is sent from the client to the server as ASCII"); <br> <br>        printf("The Client side is about to send:\n\"%s\"\n\n", FirstBuffer ); <br>        printf("Calling the remote procedure 'ModifyMyString'\n"); <br>        // note that the client sees the interface using ascii <br>        ModifyMyString( &amp;FirstBuffer ); <br>        printf("The Client side got back:\n\"%s\"\n\n", FirstBuffer ); <br> <br>        printf("Calling the remote procedure 'Shutdown'\n"); <br>        Shutdown();  // shut down the server side <br>    } <br>    RpcExcept(1) { <br>        printf("Runtime reported exception %ld\n", RpcExceptionCode() ); <br>    } <br>    RpcEndExcept <br> <br>    /* The calls to the remote procedures are complete.            */ <br>    /* Free the string and the binding handle using RPC API calls. */ <br>    status = RpcStringFree(&amp;pszStringBinding); <br>    printf("RpcStringFree returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    status = RpcBindingFree(&amp;hrepas); <br>    printf("RpcBindingFree returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    exit(0); <br> <br>}  // end main() <br> <br>/* end file repasc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

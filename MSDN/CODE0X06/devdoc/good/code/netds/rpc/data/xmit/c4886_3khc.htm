<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XMITP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4890"></a>XMITP.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                         xmit Example <br> <br>    FILE:       xmitp.c <br> <br>    PURPOSE:    Remote procedures that are linked with the server <br>                side of RPC distributed application <br> <br>    FUNCTIONS:  ModifyListProc() - changes the doubly-linked list <br>                Shutdown() - shuts down the server side <br> <br>    COMMENTS:   Related to xmits.c <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "xmit.h"    // header file generated by MIDL compiler <br> <br> <br>/**************************************************************************** <br> <br>Function:   ModifyListProc <br> <br>Parameters: pFirst : Pointer to the head of a doubly-linked list. <br> <br>Returns:    none <br> <br>Purpose:    Display the list passed to the function. <br>            For each element in the list, add another element. <br>            Display the modified list. <br> <br>Comments:   This sample is meant to demonstrate a typical use of the <br>            transmit_as attribute:  A complex data structure is simplified <br>            for transmission over the network, restored on the server, <br>            then manipulated by the remote function on the server. <br>            The modified data is returned to the client. <br> <br>            Calls InsertNewNode(param1, param2), a utility routine <br>            in xmits.c that creates a new node, assigns to it the <br>            value param1, and inserts it into the list after param2. <br> <br>****************************************************************************/ <br> <br>DOUBLE_LINK_TYPE * InsertNewNode(short sValue, DOUBLE_LINK_TYPE * pPrevious); <br> <br>void ModifyListProc(DOUBLE_LINK_TYPE * pFirst) <br>{ <br>    DOUBLE_LINK_TYPE * pList = pFirst; <br>    short newNumber; <br> <br>    printf("ModifyListProc: Display contents of doubly linked list:\n"); <br>    while (pList != NULL) { <br>         printf("pList @0x%x = %d, Next = 0x%x\n", <br>                pList, pList-&gt;sNumber, pList-&gt;pNext); <br>         pList = pList-&gt;pNext; <br>    } <br> <br>    printf("ModifyListProc: Add one node for every node in tree\n"); <br>    for (pList = pFirst; pList != NULL; pList = pList-&gt;pNext) { <br>        newNumber = pList-&gt;sNumber + 1; <br>        pList = InsertNewNode(newNumber, pList); <br>    } <br> <br>    printf("ModifyListProc: Display modified contents of doubly linked list:\n"); <br>    for (pList = pFirst; pList != NULL; pList = pList-&gt;pNext) { <br>        printf("pList @0x%x = %d, Next = 0x%x\n", <br>               pList, pList-&gt;sNumber, pList-&gt;pNext); <br>    } <br>} <br> <br> <br>/**************************************************************************** <br> <br>Function:   Shutdown <br> <br>Parameters: none <br> <br>Returns:    none <br> <br>Purpose:    Make the server stop listening for client applications. <br> <br>Comments:   The two NULL parameters passed to RpcServerUnregisterIf are <br>            a show of brute force:  they tell the function to turn <br>            off all registered interfaces.  See the RPC API function <br>            reference for more information about these functions. <br> <br>****************************************************************************/ <br> <br>void Shutdown(void) <br>{ <br>    RPC_STATUS status; <br> <br>    printf("Calling RpcMgmtStopServerListening\n"); <br>    status = RpcMgmtStopServerListening(NULL); <br>    printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerUnregisterIf\n"); <br>    status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>    printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br>} <br> <br>/* end file xmitp.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

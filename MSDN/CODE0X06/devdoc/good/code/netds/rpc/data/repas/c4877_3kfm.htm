<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REPASP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4882"></a>REPASP.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                         repas Example <br> <br>    FILE:       repasp.c <br> <br>    PURPOSE:    Remote procedures that are linked with the server <br>                side of RPC distributed application <br> <br>    FUNCTIONS:  ModifyListProc() - changes the doubly-linked list <br>                Shutdown() - shuts down the server side <br> <br>    COMMENTS:   Related to repass.c <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "repass.h"    // header file generated by MIDL compiler <br> <br> <br>/**************************************************************************** <br> <br>Function:   ModifyMyWString <br> <br>Parameters: pStr : Pointer to pointer to UNICODE string <br> <br>Returns:    none <br> <br>Purpose:    Display the string passed in, modify it, and return <br> <br>Comments:   This sample is meant to demonstrate a typical use of the <br>            represent_as attribute:  The client and server have different <br>            local views of the data, although the IDL file describes the <br>            wire contract. <br> <br>****************************************************************************/ <br>void ModifyMyWString(WCHAR_STRING * pStr) <br>{ <br>    wprintf(L"\nModifyMyWString: received UNICODE string:\n%s\n\n", *pStr ); <br>    wcscpy(*pStr, L"This string comes back on the wire as UNICODE"); <br>    wprintf(L"ModifyMyWString: sending UNICODE string:\n%s\n\n", *pStr ); <br> <br>} <br> <br>/**************************************************************************** <br> <br>Function:   ModifyMyString <br> <br>Parameters: pStr : Pointer to pointer to UNICODE string <br> <br>Returns:    none <br> <br>Purpose:    Display the string passed in, modify it, and return <br> <br>Comments:   This sample is meant to demonstrate a typical use of the <br>            represent_as attribute:  The client and server have different <br>            local views of the data, although the IDL file describes the <br>            wire contract. <br> <br>****************************************************************************/ <br>void ModifyMyString(WCHAR_STRING * pStr) <br>{ <br>    wprintf(L"\nModifyMyString: received UNICODE string:\n%s\n\n", *pStr ); <br>    wcscpy(*pStr, L"This UNICODE string comes back on the wire as ASCII"); <br>    wprintf(L"ModifyMyString: sending UNICODE string:\n%s\n\n", *pStr ); <br> <br>} <br> <br> <br>/**************************************************************************** <br> <br>Function:   Shutdown <br> <br>Parameters: none <br> <br>Returns:    none <br> <br>Purpose:    Make the server stop listening for client applications. <br> <br>Comments:   The two NULL parameters passed to RpcServerUnregisterIf are <br>            a show of brute force:  they tell the function to turn <br>            off all registered interfaces.  See the RPC API function <br>            reference for more information about these functions. <br> <br>****************************************************************************/ <br> <br>void Shutdown(void) <br>{ <br>    RPC_STATUS status; <br> <br>    printf("Calling RpcMgmtStopServerListening\n"); <br>    status = RpcMgmtStopServerListening(NULL); <br>    printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerUnregisterIf\n"); <br>    status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>    printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br>} <br> <br>/* end file repasp.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

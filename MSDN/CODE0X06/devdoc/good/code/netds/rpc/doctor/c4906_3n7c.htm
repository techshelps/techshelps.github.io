<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCTORC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4908"></a>DOCTORC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                       Doctor Example <br> <br>    FILE:       doctorc.c <br> <br>    USAGE:      doctorc  -n network_address <br>                         -p protocol_sequence <br>                         -e endpoint <br>                         -o options <br> <br>    PURPOSE:    Client side of RPC distributed application <br> <br>    FUNCTIONS:  main() - binds to server and calls remote procedure <br> <br>    COMMENTS:   This version of the distributed application prints <br>                strings from the Doctor server.  Doctor is an Eliza-like <br>                personal therapist program that works by simple <br>                pattern-matching. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "doctor.h"    // header file generated by MIDL compiler <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the [string] and [size_is] attributes. For more\n\ <br>information about attributes and RPC API functions, see the\n\ <br>RPC programming guide and reference.\n\n" <br> <br>#define GREETING \ <br>"The doctor is in.\n\ <br>I am at your service; just tell me anything that troubles\n\ <br>or concerns you. Please end your sentences with a period,\n\ <br>a question mark, or an exclamation point, and then press\n\ <br>the RETURN or ENTER key.  When you are ready to quit our\n\ <br>session, just enter \"bye\" and press RETURN or ENTER.\n\n\ <br>What is your name? &gt;" <br> <br>#define FAREWELL \ <br>"I hope I have been of some service to you.\n\ <br>Let's get together again some time.\n\n" <br> <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -n network_address\n"); <br>    fprintf(stderr, " -e endpoint\n"); <br>    fprintf(stderr, " -o options\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    RPC_STATUS status;                 // returned by RPC API function <br>    unsigned char pszName[STRSIZE];    // patient name <br>    unsigned char achIn[STRSIZE];      // patient input <br> <br>    unsigned char * pszUuid             = NULL; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszNetworkAddress   = NULL; <br>    unsigned char * pszEndpoint         = "\\pipe\\doctor"; <br>    unsigned char * pszOptions          = NULL; <br>    unsigned char * pszStringBinding    = NULL; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'n':  // network address <br>                pszNetworkAddress = argv[++i]; <br>                break; <br>            case 'e': <br>                pszEndpoint = argv[++i]; <br>                break; <br>            case 'o': <br>                pszOptions = argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    /* Use a convenience function to concatenate the elements of  */ <br>    /* the string binding into the proper sequence.               */ <br>    status = RpcStringBindingCompose(pszUuid, <br>                                     pszProtocolSequence, <br>                                     pszNetworkAddress, <br>                                     pszEndpoint, <br>                                     pszOptions, <br>                                     &amp;pszStringBinding); <br>    if (status) { <br>        printf("RpcStringBindingCompose returned 0x%x\n", status); <br>        printf("pszStringBinding = %s\n", pszStringBinding); <br>        exit(status); <br>    } <br> <br>    /* Set the binding handle that will be used to bind to the server. */ <br>    status = RpcBindingFromStringBinding(pszStringBinding, <br>                                         &amp;doctor_IfHandle); <br>    if (status) { <br>        printf("RpcBindingFromStringBinding returned 0x%x\n", status); <br>        exit(status); <br>    } <br> <br>    /* RPC is now initialized.  Call remote procedures as if        */ <br>    /* they were local procedures.                                  */ <br> <br>    /* The doctor program consists of patient statements and doctor */ <br>    /* responses.  The patient string is transmitted to the server, */ <br>    /* and all processing is performed on the server.               */ <br> <br>    printf("%s", GREETING); <br>    gets(pszName); <br>    printf("\n%s&gt;", pszName); <br> <br>    while (gets(achIn)) { <br>        if (strncmp(achIn, "bye", 3) == 0)  // end of session? <br>            break; <br>        RpcTryExcept { <br>            Analyze(&amp;achIn[0]); <br>        } <br>        RpcExcept(1) { <br>            printf("Runtime reported exception %ld\n", RpcExceptionCode() ); <br>            break; <br>        } <br>        RpcEndExcept <br> <br>        printf("%s%s&gt;", achIn, pszName);    // no, continue <br>    } <br> <br>    RpcTryExcept { <br>        Shutdown();                             // yes, shutdown the server <br>    } <br>    RpcExcept(1) { <br>        printf("Runtime reported exception %ld\n", RpcExceptionCode() ); <br>    } <br>    RpcEndExcept <br> <br>    /*  The calls to the remote procedure are complete.  */ <br>    /*  Free the binding handle.                         */ <br>    status = RpcBindingFree(&amp;doctor_IfHandle);  // remote calls done; unbind <br>    if (status) { <br>       printf("RpcBindingFree returned 0x%x\n", status); <br>       exit(status); <br>    } <br> <br>    printf("%s", FAREWELL); <br> <br>    exit(0); <br> <br>}  // end main() <br> <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file doctorc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

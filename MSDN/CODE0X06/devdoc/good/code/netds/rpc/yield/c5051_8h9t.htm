<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5051"></a>README.TXT</h2>
<pre><code>YIELD <br> <br> <br>The YIELD program demonstrates use of the RpcWinSetYieldInfo function to <br>prevent a distributed application from blocking during lengthy remote <br>procedure calls. <br> <br>FILES <br>===== <br> <br>The directory samples\rpc\yield contains the following files for building <br>the sample distributed application YIELD: <br> <br>File          Description <br> <br>README.TXT    Readme file for the YIELD sample <br>YIELD.IDL     Interface definition language file <br>YIELD.ACF     Attribute configuration file <br>YIELDC.C      Client main program <br>YIELDC.RC     Client resource file <br>YIELDC.DLG    Client dialog box definitions <br>YIELDC.DEF    Client module definition file <br>YIELDS.C      Server main program <br>YIELDP.C      Remote procedures <br>MAKEFILE      Nmake file for Windows NT or Windows 95 <br>MAKEFILE.win  Nmake file for Win 3.x <br> <br>------------------------------------------------------------------- <br>BUILDING SERVER APPLICATION FOR MICROSOFT WINDOWS NT OR WINDOWS 95: <br>------------------------------------------------------------------- <br> <br>The following environment variables should be set for you already. <br> <br>  set CPU=i386 <br>  set INCLUDE=%SDKROOT%\h <br>  set LIB=%SDKROOT%\lib <br>  set PATH=%SDKROOT%\system32;%SDKROOT%\bin; <br> <br>Where %SDKROOT% is the root directory for the 32-bit Windows SDK. <br> <br>For mips, set CPU=mips <br>For alpha, set CPU=alpha <br> <br>Build the sample server application: <br> <br>  nmake cleanall <br>  nmake <br> <br>These commands build the server executable program YIELDS.EXE. <br> <br>-------------------------------------------- <br>BUILDING THE CLIENT APPLICATION FOR WIN 3.X <br>-------------------------------------------- <br> <br>After installing the Microsoft Visual C/C++ version 1.50 development <br>environment and the 16-bit RPC SDK on a Windows NT or Windows 95 <br>computer, you can build the sample client application from Windows NT <br>or Windows 95. <br> <br>  nmake -f makefile.win cleanall <br>  nmake -f makefile.win <br> <br>This builds the client application yieldc.exe. <br> <br>You may also execute the Microsoft Visual C/C++ compiler under MS-DOS. <br>This requires a two step build process. <br> <br>  Step One: Compile the .IDL files under Windows NT or Windows 95. <br>     nmake -a -f makefile.win yield.h <br> <br>  Step Two: Compile the C sources (stub and application) under MS-DOS. <br>     nmake -f makefile.win <br> <br>------------------------------------------ <br>RUNNING THE CLIENT AND SERVER APPLICATIONS <br>------------------------------------------ <br> <br>On the server, enter <br> <br>  yields <br> <br>On the client, choose the Run command from the File menu in the <br>Microsoft Windows 3.x Program Manager and enter YIELDC.EXE. <br> <br>Several command line switches are available to change settings for <br>the server application. For a listing of available switches, enter <br> <br>  yields -? <br> <br>Bug: If you cancel in the middle of a custom yield, you must wait <br>for the number of seconds you originally set before making another <br>remote procedure call. </code></pre>
<p>&nbsp;</p></body>
</HTML>

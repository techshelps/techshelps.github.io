<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIENT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4954"></a>CLIENT.C</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 OSF DCE Sample Application              **/ <br>/**         Copyright 1992 - 1998 Microsoft Corporation     **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;ctype.h&gt; <br> <br>#include "msg.h"        /* header file generated by M/IDL compiler */ <br> <br>#if defined(__RPC_WIN32__) || defined(__RPC_DOS__) <br> <br>/* <br> On MS platforms we must include the dceport.h header file <br> which maps OSF DCE style APIs to MS style APIs. <br>*/ <br> <br>#include "dceport.h" <br> <br>#else <br>#include &lt;pthread.h&gt; <br>#endif <br> <br>#ifndef _CRTAPI1 <br>#define _CRTAPI1 <br>#endif <br> <br>void Usage() <br>{ <br>  printf("Usage : client -n &lt;server_name&gt;\n"); <br>  printf("               -t &lt;transport&gt;   - optional, default ncacn_ip_tcp\n"); <br>  printf("               -e &lt;endpoint&gt;    - optional, should match server\n"); <br>  printf("               -s &lt;message&gt;     - optional, send a different message\n"); <br>  printf("               -x               - use to stop the server\n"); <br>  exit(1); <br>} <br> <br>int _CRTAPI1 <br>main(int argc, char *argv[]) <br>{ <br>    unsigned32 status; <br>    unsigned char * pszProtocolSequence = (unsigned char *)"ncacn_ip_tcp"; <br>    unsigned char * pszNetworkAddress   = NULL; <br>    unsigned char * pszEndpoint         = NULL; <br>    unsigned char * pszStringBinding    = NULL; <br>    unsigned char * pszMessage          = (unsigned char *)"Hello World"; <br>    int fStopServer = 0; <br>    int i; <br> <br>    printf ("Microsoft RPC Demo - OSF DCE Interop Message Client\n"); <br> <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'n':  /* network address */ <br>                pszNetworkAddress = (unsigned char *)argv[++i]; <br>                break; <br>            case 't':  /* protocol sequence */ <br>                pszProtocolSequence = (unsigned char *)argv[++i]; <br>                break; <br>            case 'e':  /* network endpoint */ <br>                pszEndpoint = (unsigned char *)argv[++i]; <br>                break; <br>            case 's':  /* update message */ <br>                pszMessage = (unsigned char *)argv[++i]; <br>                break; <br>            case 'x':  /* stop the server */ <br>                fStopServer = 1; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(); <br>            } <br>        } <br>        else <br>            Usage(); <br>    } <br> <br>    rpc_string_binding_compose(0,   /* no object uuid */ <br>                               pszProtocolSequence, <br>                               pszNetworkAddress, <br>                               pszEndpoint, <br>                               0,  /* no options */ <br>                               &amp;pszStringBinding, <br>                               &amp;status); <br>    if (status) { <br>        printf("rpc_string_binding_compose returned 0x%x\n", status); <br>        return(status); <br>    } <br> <br>    rpc_binding_from_string_binding(pszStringBinding, <br>                                    &amp;interop_binding_handle, <br>                                    &amp;status); <br>    if (status) { <br>        printf("rpc_binding_from_string_binding returned 0x%x\n", status); <br>        return(status); <br>    } <br> <br>    rpc_string_free(&amp;pszStringBinding,&amp;status); <br>    if (status) { <br>        printf("rpc_string_free returned 0x%x\n", status); <br>        return(status); <br>    } <br> <br>    TRY { <br>       ClientMessage(pszMessage); <br> <br>       printf("Message sent okay\n"); <br>       if (fStopServer) <br>           { <br>           ShutdownServer(); <br>           printf("Server shutdown\n"); <br>           } <br>    } <br>    CATCH_ALL { <br>       printf("RPC raised exception 0x%x\n", THIS_CATCH); <br>    } <br>    ENDTRY <br> <br>    rpc_binding_free(&amp;interop_binding_handle, &amp;status); <br>    if (status) { <br>        printf("rpc_binding_free returned 0x%x\n", status); <br>        return(status); <br>    } <br> <br>    return(0); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

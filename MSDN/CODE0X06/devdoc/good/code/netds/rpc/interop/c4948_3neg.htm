<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4948"></a>README.TXT</h2>
<pre><code>INTEROP <br> <br> <br>The INTEROP program demonstrates portability between OSF DCE RPC and  <br>Microsoft RPC. <br> <br>SUMMARY <br>======= <br> <br>The INTEROP program sends simple messages (strings) from the client to the  <br>server. The most important part of INTEROP is the header file dceport.h.  <br>This header file maps OSF DCE RPC APIs and data structures to the <br>Microsoft RPC equivalents. <br> <br>FILES <br>===== <br> <br>The directory samples\rpc\interop contains the following files for building <br>the distributed application INTEROP: <br> <br>File          Description <br> <br>README.TXT    Readme file for the INTEROP sample <br>MSG.IDL       Interface definition language file <br>MSG.ACF       Attribute configuration file <br>DCEPORT.H     Maps OSF APIs and structures to Microsoft RPC equivalents <br>CLIENT.C      Client main program <br>SERVER.C      Server main program <br>MIDLUSER.C    Memory management routines for Microsoft RPC <br>MANAGER.C     Client-side utility routines <br>MAKEFILE      Nmake file to build for Windows NT or Windows 95 <br>MAKEFILE.DOS  Nmake file to build for MS-DOS <br>MAKEFILE.DOS  Makefile to build for DCE platform <br> <br>------------------------------------ <br>Building on Windows NT or Windows 95 <br>------------------------------------ <br> <br>The following environment variables should be already set for you:  <br> <br>  set CPU=i386 <br>  set INCLUDE=%SDKROOT%\h <br>  set LIB=%SDKROOT%\lib <br>  set PATH=%SDKROOT%\system32;%SDKROOT%\bin <br> <br>where %SDKROOT% is the root directory for the 32-bit Windows SDK. <br> <br>For mips, set CPU=mips <br>For alpha, set CPU=alpha <br> <br>Build the sample distributed application: <br> <br>  nmake cleanall <br>  nmake <br> <br>-------------------------- <br>Building on MS-DOS Systems <br>-------------------------- <br> <br>After installing the Microsoft Visual C/C++ version 1.50 development <br>environment and the 16-bit RPC SDK on a Windows NT or Windows 95 <br>computer, you can build the sample client application from Windows NT <br>or Windows 95: <br> <br>  nmake -f makefile.dos cleanall <br>  nmake -f makefile.dos <br> <br>This builds the client application callc.exe. <br> <br>You may also execute the Microsoft Visual C/C++ compiler under MS-DOS. <br>This requires a two-step build process. <br> <br>  Step One: Compile the .IDL files under Windows NT or Windows 95: <br> <br>     nmake -a -f makefile.dos msg.h <br> <br>  Step Two: Compile the C sources (stub and application): <br> <br>     nmake -f makefile.dos <br> <br>Building on DCE Systems <br>----------------------- <br> <br>You need to copy the following files to the DCE machine: <br> <br>client.c <br>server.c <br>manager.c <br>msg.idl <br>msg.acf <br>makefile.dce <br> <br>  make -f makefile.dce cleanall all <br> <br>Note: You will probably need to change the CFLAGS and LIBS <br>variables in makefile.dce to match your platform. <br> <br>Using the program: <br>------------------ <br> <br>The basic example: <br> <br>Run: <br>  server <br>on the server machine. <br> <br>Run: <br>  client -n &lt;server name&gt; -s "Hi, I'm a client" <br>on the client machine to send the message. <br> <br>Run: <br>  client -n &lt;server name&gt; -s "Okay, stop this example" -x <br>on the client machine to send the message and cause the server to stop. <br> <br>You can use fixed endpoints by adding the -e switch: <br> <br>server -e 3452 <br>client -e 3452 -n &lt;server name&gt; -s "Hi, I'm a client" <br>client -e 3452 -n &lt;server name&gt; -s "Okay, stop this example" -x <br> <br>You can run the demo over a different protocol by adding a -t switch <br>to both the client and server: <br> <br>server -t ncacn_np <br>client -t ncacn_np -n &lt;server name&gt; -s "Hi, I'm a client" <br>client -t ncacn_np -n &lt;server name&gt; -s "Okay, stop this example" -x <br> <br>Options: <br>-------- <br> <br>The -h switch displays a usage message. <br> <br>The -s &lt;message&gt; switch is used to change with message sent from the client <br>    to the server.  Without it the message "Hello World" is sent. <br> <br>The -n &lt;server_name&gt; switch is used for specifying a server machine. <br>    Without it the server is assumed to run on the same machine. <br> <br>The -e &lt;endpoint&gt; switch is used to specify a fixed endpoint to be used. <br>    Without it a dynamic endpoint will be used and registered with the <br>    endpoint mapper. <br> <br>The -t &lt;protseq&gt; switch is used to specify which protocol to use.  Without <br>    it the protocol sequence "ncacn_ip_tcp" will be used. <br> <br>---------------------- <br>RUNNING ON WINDOWS 95: <br>---------------------- <br> <br>If you wish to run the server on Windows 95, you will need to use <br>the LRPC protocol. <br> <br>To start the server, enter: <br> <br> server -t ncalrpc <br> <br>To start the client (from the same machine), enter: <br> <br> client -t ncalrpc </code></pre>
<p>&nbsp;</p></body>
</HTML>

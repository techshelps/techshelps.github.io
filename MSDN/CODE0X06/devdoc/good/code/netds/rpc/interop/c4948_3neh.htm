<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCEPORT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4949"></a>DCEPORT.H</h2>
<pre><code>/*++ <br> <br>Copyright 1993 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    dceport.h <br> <br>Abstract: <br> <br>    Include file defining types and macros which map DCE RPC APIs to <br>    Microsoft RPC APIs.  Useful when porting DCE RPC applications to MS RPC. <br> <br>--*/ <br> <br>#ifndef DCEPORT_H <br>#define DCEPORT_H <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>/* <br>** Define various idl types <br>*/ <br>#define idl_char                unsigned char <br>#define idl_boolean             unsigned char <br>#define idl_byte                unsigned char <br>#define idl_small_int           char <br>#define idl_usmall_int          unsigned char <br>#define idl_short_int           signed short <br>#define idl_ushort_int          unsigned short <br>#define idl_long_int            long <br>#define idl_ulong_int           unsigned long <br>#define boolean32               unsigned long <br>#define unsigned32              unsigned long <br>#define unsigned16              unsigned short <br>#define idl_true                1 <br>#define idl_false               0 <br>#define unsigned_char_t         unsigned char <br>typedef unsigned char __RPC_FAR *unsigned_char_p_t; <br>typedef void __RPC_FAR          *idl_void_p_t; <br> <br>#ifndef _ERROR_STATUS_T_DEFINED <br>typedef unsigned long error_status_t; <br>#define _ERROR_STATUS_T_DEFINED <br>#endif <br> <br>/* <br>** Define various DCE RPC types <br>*/ <br>#define rpc_if_handle_t             RPC_IF_HANDLE <br>#define rpc_ns_handle_t             RPC_NS_HANDLE <br>#define rpc_authz_handle_t          RPC_AUTHZ_HANDLE <br>#define rpc_auth_identity_handle_t  RPC_AUTH_IDENTITY_HANDLE <br>#define rpc_sm_thread_handle_t      RPC_SS_THREAD_HANDLE <br>#define rpc_mgr_epv_t               RPC_MGR_EPV __RPC_FAR * <br>#define rpc_object_inq_fn_t         RPC_OBJECT_INQ_FN __RPC_FAR * <br>#define rpc_auth_key_retrieval_fn_t RPC_AUTH_KEY_RETRIEVAL_FN <br>#define rpc_mgmt_authorization_fn_t RPC_MGMT_AUTHORIZATION_FN <br> <br>/* <br>** Define rpc_binding_vector_t to match DCE <br>*/ <br>#ifdef rpc_binding_vector_t <br>#undef rpc_binding_vector_t <br>#endif <br> <br>typedef struct <br>{ <br>     unsigned long           count; <br>     handle_t                binding_h[1]; <br>} rpc_binding_vector_t, __RPC_FAR *rpc_binding_vector_p_t; <br> <br>/* <br>** Define rpc_protseq_vector_t to match DCE <br>*/ <br> <br>typedef struct <br>{ <br>    unsigned long           count; <br>    unsigned char *         protseq[1]; <br>} rpc_protseq_vector_t, __RPC_FAR *rpc_protseq_vector_p_t; <br> <br>/* <br>** Define rpc_stats_vector_t to match DCE <br>*/ <br> <br>typedef struct <br>{ <br>    unsigned long           count; <br>    unsigned long           stats[1]; <br>} rpc_stats_vector_t, __RPC_FAR *rpc_stats_vector_p_t; <br> <br>/* <br>** Define uuid_t to match DCE <br>*/ <br>#ifdef uuid_t <br>#undef uuid_t <br>#endif <br> <br>typedef struct <br>{ <br>    unsigned long            time_low; <br>    unsigned short           time_mid; <br>    unsigned short           time_hi_and_version; <br>    unsigned char            clock_seq_hi_and_reserved; <br>    unsigned char            clock_seq_low; <br>    unsigned char            node[6]; <br>} uuid_t, __RPC_FAR *uuid_p_t; <br> <br>/* <br>** Define uuid_vector_t to match DCE <br>*/ <br>#ifdef uuid_vector_t <br>#undef uuid_vector_t <br>#endif <br> <br>typedef struct <br>{ <br>     unsigned long           count; <br>     uuid_p_t                uuid[1]; <br>} uuid_vector_t, __RPC_FAR *uuid_vector_p_t; <br> <br>/* <br>** Define rpc_if_id_t and rpc_if_id_p_t to match DCE <br>*/ <br> <br>typedef struct <br>{ <br>    uuid_t                   uuid; <br>    unsigned short           vers_major; <br>    unsigned short           vers_minor; <br>} rpc_if_id_t, __RPC_FAR *rpc_if_id_p_t; <br> <br>/* <br>** Define rpc_if_id_vector_t to match DCE <br>*/ <br> <br>typedef struct <br>{ <br>    unsigned long           count; <br>    rpc_if_id_p_t           if_id[1]; <br>} rpc_if_id_vector_t, __RPC_FAR *rpc_if_id_vector_p_t; <br> <br>/* <br>** The MinThreads parameters to RpcServerListen() <br>** is not part of the DCE API rpc_server_listen(). <br>** This is the default value. <br>*/ <br> <br>#define rpc_c_listen_min_threads_default 1 <br> <br>/* <br>** Define various constants <br>*/ <br>#define rpc_c_ns_syntax_default            RPC_C_NS_SYNTAX_DEFAULT <br>#define rpc_c_ns_syntax_dce                RPC_C_SYNTAX_DCE <br>#define rpc_c_ns_default_exp_age           RPC_C_DEFAULT_EXP_AGE <br>#define rpc_c_protseq_max_reqs_default     RPC_C_PROTSEQ_MAX_REQS_DEFAULT <br>#define rpc_c_protseq_max_calls_default    RPC_C_PROTSEQ_MAX_REQS_DEFAULT <br>#define rpc_c_listen_max_calls_default     RPC_C_LISTEN_MAX_CALLS_DEFAULT <br>#define rpc_c_ep_all_elts                  RPC_C_EP_ALL_ELTS <br>#define rpc_c_ep_match_by_if               RPC_C_EP_MATCH_BY_IF <br>#define rpc_c_ep_match_by_obj              RPC_C_EP_MATCH_BY_OBJ <br>#define rpc_c_ep_match_by_both             RPC_C_EP_MATCH_BY_BOTH <br>#define rpc_c_vers_all                     RPC_C_VERS_ALL <br>#define rpc_c_vers_compatible              RPC_C_VERS_COMPATIBLE <br>#define rpc_c_vers_exact                   RPC_C_VERS_EXACT <br>#define rpc_c_vers_major_only              RPC_C_VERS_MAJOR_ONLY <br>#define rpc_c_vers_upto                    RPC_C_VERS_UPTO <br>#define rpc_c_profile_default_elt          RPC_C_PROFILE_DEFAULT_ELT <br>#define rpc_c_profile_all_elts             RPC_C_PROFILE_ALL_ELTS <br>#define rpc_c_profile_match_by_if          RPC_C_PROFILE_MATCH_BY_IF <br>#define rpc_c_profile_match_by_mbr         RPC_C_PROFILE_MATCH_BY_MBR <br>#define rpc_c_profile_match_by_both        RPC_C_PROFILE_MATCH_BY_BOTH <br>#define rpc_c_binding_min_timeout          RPC_C_BINDING_MIN_TIMEOUT <br>#define rpc_c_binding_default_timeout      RPC_C_BINDING_DEFAULT_TIMEOUT <br>#define rpc_c_binding_max_timeout          RPC_C_BINDING_MAX_TIMEOUT <br>#define rpc_c_binding_infinite_timeout     RPC_C_BINDING_INFINITE_TIMEOUT <br>#define rpc_c_stats_calls_in               RPC_C_STATS_CALLS_IN <br>#define rpc_c_stats_calls_out              RPC_C_STATS_CALLS_OUT <br>#define rpc_c_stats_pkts_in                RPC_C_STATS_PKTS_IN <br>#define rpc_c_stats_pkts_out               RPC_C_STATS_PKTS_OUT <br>#define rpc_c_mgmt_inq_if_ids              RPC_C_MGMT_INQ_IF_IDS <br>#define rpc_c_mgmt_inq_princ_name          RPC_C_MGMT_INQ_PRINC_NAME <br>#define rpc_c_mgmt_inq_stats               RPC_C_MGMT_INQ_STATS <br>#define rpc_c_mgmt_inq_server_listen       RPC_C_MGMT_INQ_SERVER_LISTEN <br>#define rpc_c_mgmt_stop_server_listen      RPC_C_MGMT_STOP_SERVER_LISTEN <br>#define rpc_c_mgmt_cancel_infinite_timeout RPC_C_CANCEL_INFINITE_TIMEOUT <br> <br>/* <br>** Define DCE API equivalents <br>*/ <br>#define rpc_binding_copy(source,dest,status) \ <br>                *(status) = RpcBindingCopy(source,dest) <br> <br>#define rpc_binding_free(binding,status) *(status) = RpcBindingFree(binding) <br> <br>#define rpc_binding_from_string_binding(string_binding,binding,status) \ <br>                *(status) = RpcBindingFromStringBinding(string_binding,binding) <br> <br>#define rpc_binding_inq_auth_client(binding,privs,princ_name,protect_level, \ <br>                authn_svc,authz_svc,status) \ <br>                *(status) = RpcBindingInqAuthClient(binding,privs,princ_name, \ <br>                protect_level,authn_svc,authz_svc) <br> <br>#define rpc_binding_inq_auth_info(binding,princ_name,protect_level,\ <br>                authn_svc,auth_identity,authz_svc,status) \ <br>                *(status) = RpcBindingInqAuthInfo(binding,princ_name, \ <br>                protect_level,authn_svc,auth_identity,authz_svc) <br> <br>#define rpc_binding_inq_object(binding,object_uuid,status) \ <br>                *(status) = RpcBindingInqObject(binding,\ <br>                (UUID __RPC_FAR *)object_uuid) <br> <br>#define rpc_binding_reset(binding,status) *(status) = RpcBindingReset(binding) <br> <br>#define rpc_binding_server_from_client(cbinding,sbinding,status) \ <br>                *(status) = RpcBindingServerFromClient(cbinding,sbinding) <br> <br>#define rpc_binding_set_auth_info(binding,princ_name,protect_level,\ <br>                authn_svc,auth_identity,authz_svc,status) \ <br>                *(status) = RpcBindingSetAuthInfo(binding,princ_name,\ <br>                protect_level,authn_svc,auth_identity,authz_svc) <br> <br>#define rpc_binding_set_object(binding,object_uuid,status) \ <br>                *(status) = RpcBindingSetObject(binding,\ <br>                (UUID __RPC_FAR *)object_uuid) <br> <br>#define rpc_binding_to_string_binding(binding,string_binding,status) \ <br>                *(status) = RpcBindingToStringBinding(binding,string_binding) <br> <br>#define rpc_binding_vector_free(binding_vector,status) \ <br>                *(status) = RpcBindingVectorFree(\ <br>                (RPC_BINDING_VECTOR __RPC_FAR * __RPC_FAR *)binding_vector) <br> <br>#define rpc_ep_register(if_spec,binding_vec,object_uuid_vec,annotation,\ <br>                status)\ <br>                *(status) = RpcEpRegister(if_spec,\ <br>                (RPC_BINDING_VECTOR __RPC_FAR *)binding_vec, \ <br>                (UUID_VECTOR __RPC_FAR *)object_uuid_vec, annotation) <br> <br>#define rpc_ep_register_no_replace(if_spec,binding_vec,object_uuid_vec,\ <br>                annotation,status) \ <br>                *(status) = RpcEpRegisterNoReplace(if_spec,\ <br>                (RPC_BINDING_VECTOR __RPC_FAR *)binding_vec,\ <br>                (UUID_VECTOR __RPC_FAR *)object_uuid_vec,annotation) <br> <br>#define rpc_ep_resolve_binding(binding_h,if_spec,status) \ <br>                *(status) = RpcEpResolveBinding(binding_h,if_spec) <br> <br>#define rpc_ep_unregister(if_spec,binding_vec,object_uuid_vec,status) \ <br>                *(status) = RpcEpUnregister(if_spec,\ <br>                (RPC_BINDING_VECTOR __RPC_FAR *)binding_vec,\ <br>                (UUID_VECTOR __RPC_FAR *)object_uuid_vec) <br> <br>#define rpc_if_id_vector_free(if_id_vector,status) \ <br>                *(status) = RpcIfIdVectorFree(\ <br>                (RPC_IF_ID_VECTOR __RPC_FAR * __RPC_FAR *)if_id_vector) <br> <br>#define rpc_if_inq_id(if_spec,if_id,status) \ <br>                *(status) = RpcIfInqId(if_spec,(RPC_IF_ID __RPC_FAR *)if_id) <br> <br>#define rpc_if_register_auth_info(if_spec,princ_name,protect_level,\ <br>                authn_svc,auth_identity,authz_svc,status) \ <br>                *(status) = RpcIfRegisterAuthInfo(if_spec,princ_name,\ <br>                protect_level,authn_svc,auth_identity,authz_svc) <br> <br>#define rpc_mgmt_ep_elt_inq_begin(ep_binding,inquiry_type,if_id,vers_option,\ <br>                object_uuid,inquiry_context,status) \ <br>                *(status) = RpcMgmtEpEltInqBegin(ep_binding,inquiry_type,if_id,\ <br>                vers_option,object_uuid,inquiry_context) <br> <br>#define rpc_mgmt_ep_elt_inq_done(inquiry_context,status) \ <br>                *(status) = RpcMgmtEpEltInqDone(inquiry_context) <br> <br>#define rpc_mgmt_ep_elt_inq_next(inquiry_context,if_id,binding,object_uuid,\ <br>                annotation,status) \ <br>                *(status) = RpcMgmtEpEltInqNext(inquiry_context,if_id,binding,\ <br>                object_uuid,annotation) <br> <br>#define rpc_mgmt_ep_unregister(ep_binding,if_id,binding,object_uuid,status) \ <br>                *(status) = RpcMgmtEpUnregister(ep_binding,if_id,binding,\ <br>                object_uuid) <br> <br>#define rpc_mgmt_inq_com_timeout(binding,timeout,status) \ <br>                *(status) = RpcMgmtInqComTimeout(binding,timeout) <br> <br>#define rpc_mgmt_inq_dflt_protect_level(authn_svc,level,status) \ <br>                *(status) = RpcMgmtInqDefaultProtectLevel(authn_svc,level) <br> <br>#define rpc_mgmt_inq_if_ids(binding,if_id_vector,status) \ <br>                *(status) = RpcMgmtInqIfIds((bindings),\ <br>                (RPC_IF_ID_VECTOR __RPC_FAR * __RPC_FAR *)(if_id_vector)) <br> <br>#define rpc_mgmt_inq_server_princ_name(binding,authn_svc,princ_name,status) \ <br>                *(status) = RpcMgmtInqServerPrincName(binding,authn_svc,\ <br>                princ_name) <br> <br>#define rpc_mgmt_inq_stats(binding,statistics,status) \ <br>                *(status) = RpcMgmtInqStats(binding,\ <br>                (RPC_STATS_VECTOR __RPC_FAR * __RPC_FAR *)statistics) <br> <br>#define rpc_mgmt_is_server_listening(binding,status) \ <br>                ( ((*(status) = RpcMgmtIsServerListening(binding)) == RPC_S_OK) \ <br>                ? (1) : (*(status) == RPC_S_NOT_LISTENING) \ <br>                ? (*(status) = RPS_S_OK, 0) : (0) ) <br> <br>#define rpc_mgmt_set_authorization_fn(authz_fn,status) \ <br>                *(status) = RpcMgmtSetAuthorizathionFn(authz_fn) <br> <br>#define rpc_mgmt_set_cancel_timeout(seconds,status) \ <br>                *(status) = RpcMgmtSetCancelTimeout(seconds) <br> <br>#define rpc_mgmt_set_com_timeout(binding,timeout,status) \ <br>                *(status) = RpcMgmtSetComTimeout(binding,timeout) <br> <br>#define rpc_mgmt_set_server_stack_size(size,status) \ <br>                *(status) = RpcMgmtSetServerStackSize(size) <br> <br>#define rpc_mgmt_stats_vector_free(stats,status) \ <br>                *(status) = RpcMgmtStatsVectorFree(\ <br>                (RPC_STATS_VECTOR __RPC_FAR * __RPC_FAR *)stats) <br> <br>#define rpc_mgmt_stop_server_listening(binding,status) \ <br>                *(status) = RpcMgmtStopServerListening(binding) <br> <br>#define rpc_network_inq_protseqs(prots,status) \ <br>                *(status) = RpcNetworkInqProtseqs(\ <br>                (RPC_PROTSEQ_VECTOR __RPC_FAR * __RPC_FAR *)prots) <br> <br>#define rpc_network_is_protseq_valid(protseq,status) \ <br>                *(status) = RpcNetworkIsProtseqValid(protseq) <br> <br>/* <br>** Define NSI equivalents <br>*/ <br>#define rpc_ns_binding_export(name_syntax,entry_name,if_spec,\ <br>                binding_vector, uuid_vector,status) \ <br>                *(status) = RpcNsBindingExport(name_syntax,entry_name,\ <br>                if_spec, (RPC_BINDING_VECTOR *)binding_vector,\ <br>                (UUID_VECTOR __RPC_FAR *)uuid_vector) <br> <br>#define rpc_ns_binding_import_begin(name_syntax,entry_name,if_spec,\ <br>                object_uuid,import_context,status) \ <br>                *(status) = RpcNsBindingImportBegin(name_syntax,entry_name,\ <br>                if_spec,(UUID __RPC_FAR *)object_uuid,import_context) <br> <br>#define rpc_ns_binding_import_done(import_context,status) \ <br>                *(status) = RpcNsBindingImportDone(import_context) <br> <br>#define rpc_ns_binding_import_next(import_context,binding,status) \ <br>                *(status) = RpcNsBindingImportNext(import_context,binding) <br> <br>#define rpc_ns_binding_inq_entry_name(binding,name_syntax,entry_name,status)\ <br>                *(status) = RpcNsBindingInqEntryName(binding,name_syntax,\ <br>                entry_name) <br> <br>#define rpc_ns_binding_lookup_begin(name_syntax,entry_name,if_spec,\ <br>                object_uuid,max_count,lookup_context,status) \ <br>                *(status) = RpcNsBindingLookupBegin(name_syntax,entry_name,\ <br>                if_spec,(UUID __RPC_FAR *)object_uuid,max_count,lookup_context) <br> <br>#define rpc_ns_binding_lookup_done(lookup_context,status) \ <br>                *(status) = RpcNsBindingLookupDone(lookup_context) <br> <br>#define rpc_ns_binding_lookup_next(lookup_context,binding_vector,status) \ <br>                *(status) = RpcNsBindingLookupNext(lookup_context, \ <br>                (RPC_BINDING_VECTOR __RPC_FAR * __RPC_FAR *)binding_vector) <br> <br>#define rpc_ns_binding_select(binding_vector,binding,status) \ <br>                *(status) = RpcNsBindingSelect(\ <br>                (RPC_BINDING_VECTOR __RPC_FAR *)binding_vector,binding) <br> <br>#define rpc_ns_binding_unexport(name_syntax,entry_name,if_spec,\ <br>                uuid_vector,status) \ <br>                *(status) = RpcNsBindingUnexport(name_syntax,entry_name,\ <br>                if_spec, (UUID_VECTOR __RPC_FAR *)uuid_vector) <br> <br>#define rpc_ns_entry_expand_name(name_syntax,entry_name,expanded_name,\ <br>                status)\ <br>                *(status) = RpcNsEntryExpandName(name_syntax,entry_name,\ <br>                expanded_name) <br> <br>#define rpc_ns_entry_object_inq_begin(name_syntax,entry_name,\ <br>                inquiry_context,status)\ <br>                *(status) = RpcNsEntryObjectInqBegin(name_syntax,\ <br>                entry_name,inquiry_context) <br> <br>#define rpc_ns_entry_object_inq_done(inquiry_context,status) \ <br>                *(status) = RpcNsEntryObjectInqDone(inquiry_context) <br> <br>#define rpc_ns_entry_object_inq_next(inquiry_context,object_uuid,status) \ <br>                *(status) = RpcNsEntryObjectInqNext(inquiry_context,\ <br>                (UUID __RPC_FAR *)object_uuid) <br> <br>#define rpc_ns_group_delete(name_syntax,group_name,status) \ <br>                *(status) = RpcNsGroupDelete(name_syntax,group_name) <br> <br>#define rpc_ns_group_mbr_add(name_syntax,group_name,member_name_syntax,\ <br>                member_name,status) \ <br>                *(status) = RpcNsGroupMbrAdd(name_syntax,group_name,\ <br>                member_name_syntax,member_name) <br> <br>#define rpc_ns_group_mbr_inq_begin(name_syntax,group_name,member_name_syntax,\ <br>                inquiry_context,status) \ <br>                *(status) = RpcNsGroupMbrInqBegin(name_syntax,group_name,\ <br>                member_name_syntax,inquiry_context) <br> <br>#define rpc_ns_group_mbr_inq_done(inquiry_context,status) \ <br>                *(status) = RpcNsGroupMbrInqDone(inquiry_context) <br> <br>#define rpc_ns_group_mbr_inq_next(inquiry_context,member_name,status) \ <br>                *(status) = RpcNsGroupMbrInqNext(inquiry_context,member_name) <br> <br>#define rpc_ns_group_mbr_remove(name_syntax,group_name,member_name_syntax,\ <br>                member_name,status) \ <br>                *(status) = RpcNsGroupMbrRemove(name_syntax,group_name,\ <br>                member_name_syntax,member_name) <br> <br>#define rpc_ns_mgmt_binding_unexport(name_syntax,entry_name,if_id,vers_option,\ <br>                uuid_vector,status) \ <br>                *(status) = RpcNsMgmtBindingUnexport(name_syntax,entry_name,\ <br>                (RPC_IF_ID __RPC_FAR *)if_id,vers_option,\ <br>                (UUID_VECTOR __RPC_FAR *)uuid_vector) <br> <br>#define rpc_ns_mgmt_entry_create(name_syntax,entry_name,status) \ <br>                *(status) = RpcNsMgmtEntryCreate(name_syntax,entry_name) <br> <br>#define rpc_ns_mgmt_entry_delete(name_syntax,entry_name,status) \ <br>                *(status) = RpcNsMgmtEntryDelete(name_syntax,entry_name) <br> <br>#define rpc_ns_mgmt_entry_inq_if_ids(name_syntax,entry_name,if_id_vector,\ <br>                status) \ <br>                *(status) = RpcNsMgmtEntryInqIfIds(name_syntax,entry_name,\ <br>                (RPC_IF_ID_VECTOR __RPC_FAR * __RPC_FAR *)if_id_vector) <br> <br>#define rpc_ns_mgmt_handle_set_exp_age(ns_handle,expiration_age,status) \ <br>                *(status) = RpcNsMgmtHandleSetExpAge(ns_handle,expiration_age) <br> <br>#define rpc_ns_mgmt_inq_exp_age(expiration_age,status) \ <br>                *(status) = RpcNsMgmtInqExpAge(expiration_age) <br> <br>#define rpc_ns_mgmt_set_exp_age(expiration_age,status) \ <br>                *(status) = RpcNsMgmtSetExpAge(expiration_age) <br> <br>#define rpc_ns_profile_delete(name_syntax,profile_name,status) \ <br>                *(status) = RpcNsProfileDelete(name_syntax,profile_name) <br> <br>#define rpc_ns_profile_elt_add(name_syntax,profile_name,if_id,\ <br>                member_name_syntax,member_name,priority,annotation,status) \ <br>                *(status) = RpcNsProfileEltAdd(name_syntax,profile_name,\ <br>                (RPC_IF_ID __RPC_FAR *)if_id,member_name_syntax,member_name,\ <br>                priority,annotation) <br> <br>#define rpc_ns_profile_elt_inq_begin(name_syntax,profile_name,inquiry_type,\ <br>                if_id,if_vers_option,member_name_syntax,\ <br>                member_name,inquiry_context,status) \ <br>                *(status) = RpcNsProfileEltInqBegin(name_syntax,profile_name,\ <br>                inquiry_type,(RPC_IF_ID __RPC_FAR *)if_id,if_vers_option,\ <br>                member_name_syntax,member_name,inquiry_context) <br> <br>#define rpc_ns_profile_elt_inq_done(inquiry_context,status) \ <br>                *(status) = RpcNsProfileEltInqDone(inquiry_context) <br> <br>#define rpc_ns_profile_elt_inq_next(inquiry_context,if_id,member_name,\ <br>                priority,annotation,status) \ <br>                *(status) = RpcNsProfileEltInqNext(inquiry_context,\ <br>                (RPC_IF_ID __RPC_FAR *)if_id,member_name,priority,annotation) <br> <br>#define rpc_ns_profile_elt_remove(name_syntax,profile_name,if_id,\ <br>                member_name_syntax,member_name,status) \ <br>                *(status) = RpcNsProfileEltRemove(name_syntax,profile_name,\ <br>                (RPC_IF_ID __RPC_FAR *)if_id,member_name_syntax,member_name) <br> <br>#define rpc_object_inq_type(object_uuid,type_uuid,status) \ <br>                *(status) = RpcObjectInqType((UUID __RPC_FAR *)object_uuid,\ <br>                (UUID __RPC_FAR *)type_uuid) <br> <br>#define rpc_object_set_inq_fn(inq_fn,status) \ <br>                *(status) = RpcObjectSetInqFn(inq_fn) <br> <br>#define rpc_object_set_type(object_uuid,type_uuid,status) \ <br>                *(status) = RpcObjectSetType((UUID __RPC_FAR *)object_uuid,\ <br>                (UUID __RPC_FAR *)type_uuid) <br> <br>#define rpc_protseq_vector_free(protseq_vector,status) \ <br>                *(status) = RpcProtseqVectorFree( \ <br>                (RPC_PROTSEQ_VECTOR __RPC_FAR * __RPC_FAR *)protseq_vector) <br> <br>#define rpc_server_inq_bindings(binding_vector,status) \ <br>                *(status) = RpcServerInqBindings(\ <br>                (RPC_BINDING_VECTOR __RPC_FAR * __RPC_FAR *)binding_vector) <br> <br>#define rpc_server_inq_if(if_spec,type_uuid,mgr_epv,status) \ <br>                *(status) = RpcServerInqIf(if_spec,(UUID __RPC_FAR *)type_uuid,\ <br>                (RPC_MGR_EPV __RPC_FAR *)mgr_epv) <br> <br>#define rpc_server_listen(max_calls,status) \ <br>                *(status) = RpcServerListen(rpc_c_listen_min_threads_default,\ <br>                max_calls,0) <br> <br>#define rpc_server_register_auth_info(princ_name,auth_svc,get_key_func,arg,\ <br>                status) \ <br>                *(status) = RpcServerRegisterAuthInfo(princ_name,auth_svc,\ <br>                get_key_func,arg) <br> <br>#define rpc_server_register_if(if_spec,type_uuid,mgr_epv,status) \ <br>                *(status) = RpcServerRegisterIf(if_spec,\ <br>                (UUID __RPC_FAR *)type_uuid,(RPC_MGR_EPV __RPC_FAR *)mgr_epv) <br> <br>#define rpc_server_unregister_if(if_spec,type_uuid,status) \ <br>                *(status) = RpcServerUnregisterIf(if_spec,(UUID *)type_uuid,0) <br> <br>#define rpc_server_use_all_protseqs(max_call_requests,status) \ <br>                *(status) = RpcServerUseAllProtseqs(max_call_requests,0) <br> <br>#define rpc_server_use_all_protseqs_if(max_call_requests,if_spec,status) \ <br>                *(status) = RpcServerUseAllProtseqsIf(max_call_requests,\ <br>                if_spec,0) <br> <br>#define rpc_server_use_protseq(protseq,max_call_requests,status) \ <br>                *(status) = RpcServerUseProtseq(protseq,max_call_requests,0) <br> <br>#define rpc_server_use_protseq_ep(protseq,max_call_requests,endpoint,status)\ <br>                *(status) = RpcServerUseProtseqEp(protseq,max_call_requests,\ <br>                endpoint,0) <br> <br>#define rpc_server_use_protseq_if(protseq,max_call_requests,if_spec,status) \ <br>                *(status) = RpcServerUseProtseqIf(protseq,max_call_requests,\ <br>                if_spec,0) <br> <br>#define rpc_sm_alloce(size,status) *(status) = RpcSmAllocate(size) <br> <br>#define rpc_sm_client_free(ptr,status) *(status) = RpcSmClientFree(ptr) <br> <br>#define rpc_sm_destroy_client_context(context,status) \ <br>                *(status) = RpcSmDestroyClientContext(context) <br> <br>#define rpc_sm_disable_allocate(status) *(status) = RpcSmDisableAllocate() <br> <br>#define rpc_sm_enable_allocate(status) *(status) = RpcSmEnableAllocate() <br> <br>#define rpc_sm_free(ptr,status) *(status) = RpcSmFree(ptr) <br> <br>#define rpc_sm_get_thread_handle(status) RpcSmGetThreadHandle(status) <br> <br>#define rpc_sm_set_client_alloc_free(alloc,free,status) \ <br>                *(status) = RpcSmSetClientAllocFree(alloc,free) <br> <br>#define rpc_sm_set_thread_handle(id,status) \ <br>                *(status) = RpcSmSetThreadHandle(id) <br> <br>#define rpc_sm_swap_client_alloc_free(alloc,free,old_alloc,old_free,status) \ <br>                *(status) = RpcSmSwapClientAllocFree(alloc,free \ <br>                old_alloc, old_free) <br> <br>#define rpc_string_binding_compose(object_uuid,protseq,netaddr,endpoint,\ <br>                options,binding,status) \ <br>                *(status) = RpcStringBindingCompose(object_uuid,protseq,\ <br>                netaddr,endpoint,options,binding) <br> <br>#define rpc_string_binding_parse(string_binding,object_uuid,protseq,netaddr,\ <br>                endpoint,options,status) \ <br>                *(status) = RpcStringBindingParse(string_binding,\ <br>                object_uuid,protseq,netaddr,endpoint,options) <br> <br>#define rpc_string_free(string,status) *(status) = RpcStringFree(string) <br> <br>#define uuid_compare(uuid1,uuid2,status) \ <br>                UuidCompare((UUID __RPC_FAR *)(uuid1),\ <br>                            (UUID __RPC_FAR *)(uuid2),(status)) <br> <br>#define uuid_create(uuid,status) \ <br>                *(status) = UuidCreate((UUID __RPC_FAR *)uuid) <br> <br>#define uuid_create_nil(uuid,status) \ <br>                *(status) = UuidCreateNil((UUID __RPC_FAR *)uuid) <br> <br>#define uuid_equal(uuid1,uuid2,status) \ <br>                UuidEqual((UUID __RPC_FAR *)(uuid1), \ <br>                          (UUID __RPC_FAR *)(uuid2), (status)) <br> <br>#define uuid_from_string(string,uuid,status) \ <br>                *(status) = UuidFromString(string,(UUID __RPC_FAR *)uuid) <br> <br>#define uuid_hash(uuid,status) \ <br>                UuidHash((UUID __RPC_FAR *)(uuid),(status)) <br> <br>#define uuid_is_nil(uuid,status) \ <br>                UuidIsNil((UUID __RPC_FAR *)(uuid), (status)) <br> <br>#define uuid_to_string(uuid,string,status)\ <br>                *(status) = UuidToString((UUID __RPC_FAR *)uuid,string) <br> <br> <br>#define true  1 <br>#define false 0 <br> <br>/* <br>** Define exception handling equivalents <br>** <br>*/ <br>#if defined (__RPC_WIN16__) || defined (__RPC_DOS__) <br> <br>#define TRY                                       \ <br>    {                                                \ <br>    int _exception_mode_finally;                     \ <br>    int _exception_code;                             \ <br>    ExceptionBuff exception;                         \ <br>    _exception_code = RpcSetException(&amp;exception);   \ <br>    if (!_exception_code)                            \ <br>    { <br> <br>#define CATCH_ALL                                 \ <br>        _exception_mode_finally = false;             \ <br>        RpcLeaveException();                         \ <br>        }                                            \ <br>        else                                         \ <br>        { <br>/* <br> * #define CATCH(X)                               \ <br> *   }else if ((unsigned long)RpcExceptionCode()==(unsigned long)X) { <br> */ <br>#define FINALLY                                   \ <br>        _exception_mode_finally = true;              \ <br>        RpcLeaveException();                         \ <br>        } { <br>#define ENDTRY                                    \ <br>          }                                               \ <br>        if (_exception_mode_finally &amp;&amp; _exception_code)  \ <br>            RpcRaiseException(_exception_code);           \ <br>        } <br> <br>#endif /* WIN16 or DOS */ <br> <br> <br>#if defined (__RPC_WIN32__) <br>#define TRY             try { <br>/* <br> * #define CATCH(X)        \ <br> *                      } except (GetExceptionCode() == X ? \ <br> *                        EXCEPTION_EXECUTE_HANDLER : \ <br> *                        EXCEPTION_CONTINUE_SEARCH) { <br> */ <br>#define CATCH_ALL       } except (EXCEPTION_EXECUTE_HANDLER) { <br>#define FINALLY         } finally { <br>#define ENDTRY          } <br>#endif /* WIN32 */ <br> <br>#define RAISE(v)   RpcRaiseException(v) <br>#define RERAISE    RpcRaiseException(RpcExceptionCode()) <br>#define THIS_CATCH RpcExceptionCode() <br> <br>/* <br>** DCE Status code mappings <br>*/ <br>#ifndef rpc_s_ok <br>#define rpc_s_ok                        RPC_S_OK <br>#endif <br>#ifndef error_status_ok <br>#define error_status_ok                 RPC_S_OK <br>#endif <br>#define ept_s_cant_perform_op           EPT_S_CANT_PERFORM_OP <br>#define ept_s_invalid_entry             EPT_S_INVALID_ENTRY <br>#define ept_s_not_registered            EPT_S_NOT_REGISTERED <br>#define rpc_s_already_listening         RPC_S_ALREADY_LISTENING <br>#define rpc_s_already_registered        RPC_S_ALREADY_REGISTERED <br>#define rpc_s_binding_has_no_auth       RPC_S_BINDING_HAS_NO_AUTH <br>#define rpc_s_binding_imcomplete        RPC_S_BINDING_IMCOMPLETE <br>#define rpc_s_call_cancelled            RPC_S_CALL_CANCELLED <br>#define rpc_s_call_failed               RPC_S_CALL_FAILED <br>#define rpc_s_cant_bind_socket          RPC_S_CANNOT_BIND <br>#define rpc_s_cant_create_socket        RPC_S_CANT_CREATE_ENDPOINT <br>#define rpc_s_comm_failure              RPC_S_COMM_FAILURE <br>#define rpc_s_connect_no_resources      RPC_S_OUT_OF_RESOURCES <br>#define rpc_s_cthread_create_failed     RPC_S_OUT_OF_THREADS <br>#define rpc_s_endpoint_not_found        RPC_S_NO_ENDPOINT_FOUND <br>#define rpc_s_entry_already_exists      RPC_S_ENTRY_ALREADY_EXISTS <br>#define rpc_s_entry_not_found           RPC_S_ENTRY_NOT_FOUND <br>#define rpc_s_fault_addr_error          RPC_S_ADDRESS_ERROR <br>#define rpc_s_fault_fp_div_by_zero      RPC_S_FP_DIV_ZERO <br>#define rpc_s_fault_fp_overflow         RPC_S_FP_OVERFLOW <br>#define rpc_s_fault_fp_underflow        RPC_S_FP_UNDERFLOW <br>#define rpc_s_fault_int_div_by_zero     RPC_S_ZERO_DIVIDE <br>#define rpc_s_fault_invalid_bound       RPC_S_INVALID_BOUND <br>#define rpc_s_fault_invalid_tag         RPC_S_INVALID_TAG <br>#define rpc_s_fault_remote_no_memory    RPC_S_SERVER_OUT_OF_MEMORY <br>#define rpc_s_fault_unspec              RPC_S_CALL_FAILED <br>#define rpc_s_incomplete_name           RPC_S_INCOMPLETE_NAME <br>#define rpc_s_interface_not_found       RPC_S_INTERFACE_NOT_FOUND <br>#define rpc_s_internal_error            RPC_S_INTERNAL_ERROR <br>#define rpc_s_inval_net_addr            RPC_S_INVALID_NET_ADDR <br>#define rpc_s_invalid_arg               RPC_S_INVALID_ARG <br>#define rpc_s_invalid_binding           RPC_S_INVALID_BINDING <br>#define rpc_s_invalid_endpoint_format   RPC_S_INVALID_ENDPOINT_FORMAT <br>#define rpc_s_invalid_naf_id            RPC_S_INVALID_NAF_IF <br>#define rpc_s_invalid_name_syntax       RPC_S_INVALID_NAME_SYNTAX <br>#define rpc_s_invalid_rpc_protseq       RPC_S_INVALID_RPC_PROTSEQ <br>#define rpc_s_invalid_string_binding    RPC_S_INVALID_STRING_BINDING <br>#define rpc_s_invalid_timeout           RPC_S_INVALID_TIMEOUT <br>#define rpc_s_invalid_vers_option       RPC_S_INVALID_VERS_OPTION <br>#define rpc_s_max_calls_too_small       RPC_S_MAX_CALLS_TOO_SMALL </code></pre>
<p>
</p>
<pre><code>#define rpc_s_mgmt_op_disallowed        RPC_S_ACCESS_DENIED <br>#define rpc_s_name_service_unavailable  RPC_S_NAME_SERVICE_UNAVAILABLE <br>#define rpc_s_no_bindings               RPC_S_NO_BINDINGS <br>#define rpc_s_no_entry_name             RPC_S_NO_ENTRY_NAME <br>#define rpc_s_no_interfaces             RPC_S_NO_INTERFACES <br>#define rpc_s_no_interfaces_exported    RPC_S_NO_INTERFACES_EXPORTED <br>#define rpc_s_no_memory                 RPC_S_OUT_OF_MEMORY <br>#define rpc_s_no_more_elements          RPC_X_NO_MORE_ENTRIES <br>#define rpc_s_no_more_bindings          RPC_S_NO_MORE_BINDINGS <br>#define rpc_s_no_more_members           RPC_S_NO_MORE_MEMBERS <br>#define rpc_s_no_ns_permission          RPC_S_ACCESS_DENIED <br>#define rpc_s_no_princ_name             RPC_S_NO_PRINC_NAME <br>#define rpc_s_no_protseqs               RPC_S_NO_PROTSEQS <br>#define rpc_s_no_protseqs_registered    RPC_S_NO_PROTSEQS_REGISTERED <br>#define rpc_s_not_rpc_tower             RPC_S_CANNOT_SUPPORT <br>#define rpc_s_not_supported             RPC_S_CANNOT_SUPPORT <br>#define rpc_s_not_authorized            RPC_S_ACCESS_DENIED <br>#define rpc_s_nothing_to_unexport       RPC_S_NOTHING_TO_UNEXPORT <br>#define rpc_s_object_not_found          RPC_S_OBJECT_NOT_FOUND <br>#define rpc_s_protocol_error            RPC_S_PROTOCOL_ERROR <br>#define rpc_s_protseq_not_supported     RPC_S_PROTSEQ_NOT_SUPPORTED <br>#define rpc_s_server_too_busy           RPC_S_SERVER_TOO_BUSY <br>#define rpc_s_string_too_long           RPC_S_STRING_TOO_LONG <br>#define rpc_s_type_already_registered   RPC_S_TYPE_ALREADY_REGISTERED <br>#define rpc_s_unknown_authn_service     RPC_S_UNKNOWN_AUTHN_SERVICE <br>#define rpc_s_unknown_authz_service     RPC_S_UNKNOWN_AUTHZ_SERVICE <br>#define rpc_s_unknown_if                RPC_S_UNKNOWN_IF <br>#define rpc_s_unknown_mgr_type          RPC_S_UNKNOWN_MGR_TYPE <br>#define rpc_s_unknown_reject            RPC_S_CALL_FAILED_DNE <br>#define rpc_s_unsupported_name_syntax   RPC_S_UNSUPPORTED_NAME_SYNTAX <br>#define rpc_s_unsupported_type          RPC_S_UNSUPPORTED_TYPE <br>#define rpc_s_wrong_boot_time           RPC_S_CALL_FAILED_DNE <br>#define rpc_s_wrong_kind_of_binding     RPC_S_WRONG_KIND_OF_BINDING <br>#define uuid_s_ok                       RPC_S_OK <br>#define uuid_s_internal_error           RPC_S_INTERNAL_ERROR <br>#define uuid_s_invalid_string_uuid      RPC_S_INVALID_STRING_UUID <br>#define uuid_s_no_address               RPC_S_UUID_NO_ADDRESS <br> <br>/* <br>** DCE Exception mappings <br>*/ <br> <br>#define rpc_x_comm_failure              RPC_S_COMM_FAILURE <br>#define rpc_x_connect_no_resources      RPC_S_OUT_OF_RESOURCES <br>#define rpc_x_entry_not_found           RPC_S_ENTRY_NOT_FOUND <br>#define rpc_x_incomplete_name           RPC_S_INCOMPLETE_NAME <br>#define rpc_x_invalid_arg               RPC_S_INVALID_ARG <br>#define rpc_x_invalid_binding           RPC_S_INVALID_BINDING <br>#define rpc_x_invalid_bound             RPC_X_INVALID_BOUND <br>#define rpc_x_invalid_endpoint_format   RPC_S_INVALID_ENDPOINT_FORMAT <br>#define rpc_x_invalid_naf_id            RPC_S_INVALID_NAF_IF <br>#define rpc_x_invalid_name_syntax       RPC_S_INVALID_NAME_SYNTAX <br>#define rpc_x_invalid_rpc_protseq       RPC_S_INVALID_RPC_PROTSEQ <br>#define rpc_x_invalid_tag               RPC_X_INVALID_TAG <br>#define rpc_x_invalid_timeout           RPC_S_INVALID_TIMEOUT <br>#define rpc_x_no_memory                 RPC_X_NO_MEMORY <br>#define rpc_x_object_not_found          RPC_S_OBJECT_NOT_FOUND <br>#define rpc_x_protocol_error            RPC_S_PROTOCOL_ERROR <br>#define rpc_x_protseq_not_supported     RPC_S_PROTSEQ_NOT_SUPPORTED <br>#define rpc_x_server_too_busy           RPC_S_SERVER_TOO_BUSY <br>#define rpc_x_ss_char_trans_open_fail   RPC_X_SS_CHAR_TRANS_OPEN_FAIL <br>#define rpc_x_ss_char_trans_short_file  RPC_X_SS_CHAR_TRANS_SHORT_FILE <br>#define rpc_x_ss_context_damaged        RPC_X_SS_CONTEXT_DAMAGED <br>#define rpc_x_ss_context_mismatch       RPC_X_SS_CONTEXT_MISMATCH <br>#define rpc_x_ss_in_null_context        RPC_X_SS_IN_NULL_CONTEXT <br>#define rpc_x_string_too_long           RPC_S_STRING_TOO_LONG <br>#define rpc_x_unknown_if                RPC_S_UNKNOWN_IF <br>#define rpc_x_unknown_mgr_type          RPC_S_UNKNOWN_MGR_TYPE <br>#define rpc_x_unsupported_name_syntax   RPC_S_UNSUPPORTED_NAME_SYNTAX <br>#define rpc_x_unsupported_type          RPC_S_UNSUPPORTED_TYPE <br>#define rpc_x_wrong_boot_time           RPC_S_CALL_FAILED_DNE <br>#define rpc_x_wrong_kind_of_binding     RPC_S_WRONG_KIND_OF_BINDING <br>#define uuid_x_internal_error           RPC_S_INTERNAL_ERROR <br> <br>#ifdef __cplusplus <br>} <br>#endif <br> <br>#endif /* DCEPORT_H */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

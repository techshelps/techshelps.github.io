<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVER.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4955"></a>SERVER.C</h2>
<pre><code>/*************************************************************/ <br>/**                                                         **/ <br>/**                 Microsoft RPC Examples                  **/ <br>/**                 OSF DCE Interop Application             **/ <br>/**         Copyright 1993 - 1998 Microsoft Corporation     **/ <br>/**                                                         **/ <br>/*************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br> <br>#include "msg.h"    /* header file generated by M/IDL compiler */ <br> <br>#if defined(__RPC_WIN32__) || defined(__RPC_DOS__) <br> <br>/* <br> On MS platforms we must include the dceport.h header file <br> which maps OSF DCE style APIs to MS style APIs. <br> <br> Currently, we must also define a common interface handle name. <br>*/ <br> <br>#include "dceport.h" <br> <br>#else <br>#include &lt;pthread.h&gt; <br>#endif <br> <br>#ifndef _CRTAPI1 <br>#define _CRTAPI1 <br>#endif <br> <br>void Usage() <br>{ <br>  printf("Usage : server -e &lt;endpoint&gt;   - optional endpoint\n"); <br>  printf("               -t &lt;transport&gt;  - optional, default ncacn_ip_tcp\n"); <br>  exit(1); <br>} <br> <br>int _CRTAPI1 <br>main(int argc, char *argv[]) <br>{ <br>    unsigned32 status; <br>    unsigned char * pszProtocolSequence = (unsigned char *)"ncacn_ip_tcp"; <br>    unsigned char * pszEndpoint         = NULL; <br>    unsigned int    cMaxCalls           = 20; <br>    rpc_binding_vector_p_t pbvBindings  = NULL; <br>    int i; <br> <br>    printf ("Microsoft RPC Demo - OSF DCE Interop Message Server\n"); <br> <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'e': <br>                pszEndpoint = (unsigned char *)argv[++i]; <br>                break; <br>            case 't': <br>                pszProtocolSequence = (unsigned char *)argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(); <br>            } <br>        } <br>        else <br>            Usage(); <br>    } <br> <br>    if (pszEndpoint != NULL) <br>        { <br>        /* <br>         Since we have an explict endpoint, use it and <br>         wait for client requests. <br>        */ <br>        rpc_server_use_protseq_ep(pszProtocolSequence, <br>                                   cMaxCalls, <br>                                   pszEndpoint, <br>                                   &amp;status); <br>        if (status) { <br>            printf("rpc_server_use_protseq_ep returned 0x%x\n", status); <br>            return status; <br>            } <br>        } <br>    else <br>        { <br>        /* <br>         No explict endpoint, use the protocol sequence and register <br>         the endpoint with the endpoint mapper. <br>        */ <br>        rpc_server_use_protseq(pszProtocolSequence, <br>                               cMaxCalls, <br>                               &amp;status); <br>        if (status) { <br>            printf("rpc_server_use_protseq returned 0x%x\n", status); <br>            return status; <br>            } <br> <br>        rpc_server_inq_bindings(&amp;pbvBindings, &amp;status); <br>        if (status) { <br>            printf("rpc_server_inq_bindings returned 0x%x\n", status); <br>            return status; <br>            } <br> <br>        rpc_ep_register(interop_v1_0_s_ifspec, <br>                        pbvBindings, <br>                        0, <br>                        0, <br>                        &amp;status); <br>        if (status) { <br>            printf("rpc_ep_register returned 0x%x\n", status); <br>            return status; <br>            } <br>        } <br> <br>    rpc_server_register_if(interop_v1_0_s_ifspec, <br>                           0, <br>                           0, <br>                           &amp;status); <br>    if (status) { <br>        printf("rpc_server_register_if returned 0x%x\n", status); <br>        return status; <br>    } <br> <br>    printf("RPC server ready\n"); <br>    rpc_server_listen(cMaxCalls,&amp;status); <br> <br>    if (status) { <br>        printf("rpc_server_listen returned: 0x%x\n", status); <br>        return status; <br>    } <br> <br>    rpc_server_unregister_if(interop_v1_0_s_ifspec, <br>                             0, <br>                             &amp;status); <br>    if (status) { <br>        printf("rpc_server_unregister_if returned 0x%x\n", status); <br>        return status; <br>    } <br> <br>    if (pszEndpoint == NULL) <br>        { <br>        /* <br>         Unregister from endpoint mapper <br>         */ <br>        rpc_ep_unregister(interop_v1_0_s_ifspec, <br>                          pbvBindings, <br>                          0, <br>                          &amp;status); <br>        if (status) { <br>            printf("rpc_ep_unregister returned 0x%x\n", status); <br>            return status; <br>            } <br> <br>        rpc_binding_vector_free(&amp;pbvBindings, &amp;status); <br>        if (status) { <br>            printf("rpc_binding_vector_free returned 0x%x\n", status); <br>            return status; <br>            } <br>        } <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DYNEPTS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4916"></a>DYNEPTS.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                       dynept Example <br> <br>    FILE:       dynepts.c <br> <br>    USAGE:      dynepts  -p protocol_sequence <br>                         -m max calls <br>                         -n min calls <br>                         -f flag for RpcServerListen <br> <br>    PURPOSE:    Server side of RPC distributed application dynept <br> <br>    FUNCTIONS:  main() - registers server as RPC server <br> <br>    COMMENTS:   This version of the distributed application that prints <br>                "What a dynamic world" (or other string) on the server <br>                features a client that manages its connection to the server. <br>                It uses the binding handle dynept_IfHandle, defined in <br>                the file dynept.h. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "dynept.h"    // header file generated by MIDL compiler <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of dynamic endpoints. For more information\n\ <br>about the attributes and the RPC API functions, see the\n\ <br>RPC programming guide and reference.\n\n" <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -m maxcalls\n"); <br>    fprintf(stderr, " -n mincalls\n"); <br>    fprintf(stderr, " -f flag_wait_op\n"); <br>    exit(1); <br>} <br> <br>/* main:  register the interface, start listening for clients */ <br>void _CRTAPI1 main(int argc, char * argv[]) <br>{ <br>    RPC_STATUS status; <br>    RPC_BINDING_VECTOR * pBindingVector = NULL; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszSecurity         = NULL; <br>    unsigned int    cMinCalls           = 1; <br>    unsigned int    cMaxCalls           = 20; <br>    unsigned int    fDontWait           = FALSE; <br>    unsigned int    fRegistered         = 0; <br>    unsigned int    fEndpoint           = 0; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'm': <br>                cMaxCalls = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'n': <br>                cMinCalls = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'f': <br>                fDontWait = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    status = RpcServerUseProtseq(pszProtocolSequence, <br>                                 cMaxCalls, <br>                                 pszSecurity);  // Security descriptor <br>    printf("RpcServerUseProtseq returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    status = RpcServerRegisterIf(dynept_ServerIfHandle,  // interface to register <br>                                 NULL,   // MgrTypeUuid <br>                                 NULL);  // MgrEpv; null means use default <br>    printf("RpcServerRegisterIf returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br>    else <br>        fRegistered = 1; <br> <br>    status = RpcServerInqBindings(&amp;pBindingVector); <br>    printf("RpcServerInqBindings returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    status = RpcEpRegister( dynept_ServerIfHandle, <br>                            pBindingVector, <br>                            NULL, <br>                            "" ); <br>    printf("RpcEpRegister returned: 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br>    else <br>        fEndpoint = 1; <br> <br>    printf("Calling RpcServerListen\n"); <br>    status = RpcServerListen(cMinCalls, <br>                             cMaxCalls, <br>                             fDontWait); <br>    printf("RpcServerListen returned: 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    if (fDontWait) { <br>        printf("Calling RpcMgmtWaitServerListen\n"); <br>        status = RpcMgmtWaitServerListen();  // wait operation <br>        printf("RpcMgmtWaitServerListen returned: 0x%x\n", status); <br>    } <br> <br>  cleanup: <br> <br>    if ( fEndpoint ) <br>    { <br>        status = RpcEpUnregister(dynept_ServerIfHandle, <br>                                 pBindingVector, <br>                                 NULL); <br>        printf( "RpcEpUnregister returned 0x%x\n", status); <br>    } <br> <br>    if ( pBindingVector ) <br>    { <br>        status = RpcBindingVectorFree(&amp;pBindingVector); <br>        printf( "RpcBindingVectorFree returned 0x%x\n", status); <br>    } <br> <br>    if ( fRegistered ) <br>    { <br>        printf("Calling RpcServerUnregisterIf\n"); <br>        status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>        printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    } <br> <br>    exit (status); <br> <br>}  // end main() <br> <br> <br>/*********************************************************************/ <br>/*                MIDL allocate and free                             */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file dynepts.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

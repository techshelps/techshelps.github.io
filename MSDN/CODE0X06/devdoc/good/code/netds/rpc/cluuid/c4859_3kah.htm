<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4859"></a>README.TXT</h2>
<pre><code>CLUUID <br> <br> <br>The CLUUID program demonstrates how to supply multiple implementations of <br>the remote procedure specified in the interface. It also demonstrates <br>how the client selects among the implementations by providing a client  <br>object uuid. <br> <br>SUMMARY <br>======= <br> <br>The server calls RpcObjectSetType to associate a client object uuid with  <br>the object uuid in the Object Registry Table. The server initializes a  <br>manager entry point vector (manager epv) and then calls RpcRegisterIf to  <br>associate the interface uuid and the object uuid with the manager epv in  <br>the Interface Registry Table. <br> <br>When the client makes a remote procedure call, the client object uuid is  <br>mapped to the object uuid in the Object Registry Table. The resulting <br>object uuid and the interface uuid are mapped to a manager entry point  <br>vector in the Interface Registry Table. <br> <br>By default, in this example, the server registers two implementations of  <br>the "hello, world" function HelloProc and HelloProc2. The HelloProc2 <br>implementation is associated with the object uuid <br>"11111111-1111-1111-1111-111111111111". When the client makes a procedure  <br>call with a null uuid, the client's request is mapped to the original  <br>HelloProc. When the client makes a procedure call with the client object  <br>uuid "11111111-1111-1111-1111-11111111111", the client's request is mapped  <br>to HelloProc2 (which prints the string in reverse). <br> <br>FILES <br>===== <br> <br>The directory samples\rpc\cluuid contains the following files for <br>building the sample distributed application CLUUID: <br> <br>File          Description <br> <br>README.TXT    Readme file for the cluuid sample <br>CLUUID.IDL    Interface definition language file <br>CLUUID.ACF    Attribute configuration file <br>CLUUIDC.C     Client main program <br>CLUUIDS.C     Server main program <br>CLUUIDP.C     Remote procedures <br>MAKEFILE      Nmake file to build for Windows NT or Windows 95 <br>MAKEFILE.DOS  Nmake file to build for MS-DOS <br> <br>------------------------------------------- <br>BUILDING CLIENT AND SERVER APPLICATIONS FOR <br>MICROSOFT WINDOWS NT OR WINDOWS 95 <br>------------------------------------------- <br> <br>The following environment variables should be already set for you: <br> <br>  set CPU=i386 <br>  set INCLUDE=%SDKROOT%\h <br>  set LIB=%SDKROOT%\lib <br>  set PATH=%SDKROOT%\system32;%SDKROOT%\bin <br> <br>where %SDKROOT% is the root directory for the 32-bit Windows SDK. <br> <br>For mips, set CPU=mips <br>For alpha, set CPU=alpha <br> <br>Build the sample distributed application: <br> <br>  nmake cleanall <br>  nmake <br> <br>This builds the executable programs cluuidc.exe(client) and  <br>cluuids.exe (server). <br> <br>----------------------------------------------------------------------- <br>BUILDING THE CLIENT APPLICATION FOR MS-DOS <br>----------------------------------------------------------------------- <br> <br>After installing the Microsoft Visual C/C++ version 1.50 development <br>environment and the 16-bit RPC SDK on a Windows NT or Windows 95 <br>computer, you can build the sample client application from Windows NT <br>or Windows 95: <br> <br>  nmake -f makefile.dos cleanall <br>  nmake -f makefile.dos <br> <br>This builds the client application cluuidc.exe. <br> <br>You may also execute the Microsoft Visual C/C++ compiler under MS-DOS. <br>This requires a two-step build process. <br> <br>  Step One: Compile the .IDL files under Windows NT or Windows 95 <br>     nmake -a -f makefile.dos cluuid.h <br> <br>  Step Two: Compile the C sources (stub and application) under MS-DOS <br>     nmake -f makefile.dos <br> <br>------------------------------------------ <br>RUNNING THE CLIENT AND SERVER APPLICATIONS <br>------------------------------------------ <br> <br>On the server, enter: <br> <br>  cluuids <br> <br>On the client, enter: <br> <br>  net start workstation <br>  cluuidc <br> <br>To call the second implementation of the function, <br>on the client, enter: <br> <br>  cluuidc -u "11111111-1111-1111-1111-111111111111" <br> <br>Note: The client and server applications can run on the same Microsoft  <br>Windows NT computer when you use different screen groups. <br> <br>Several command line switches are available to change settings for this  <br>program. For a listing of the switches available from the client program,  <br>enter: <br> <br>  cluuidc -? <br> <br>For a listing of switches available from the server program, enter: <br> <br>  cluuids -? <br> <br>--------------------- <br>RUNNING ON WINDOWS 95 <br>--------------------- <br> <br>If you wish to run the server on Windows 95, you will need to use <br>the LRPC protocol. <br> <br>To start the server, enter: <br> <br> cluuids -p ncalrpc <br> <br>To start the client (from the same machine), enter: <br> <br> cluuidc -p ncalrpc </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLUUIDP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4862"></a>CLUUIDP.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                         Cluuid Example <br> <br>    FILE:       cluuidp.c <br> <br>    PURPOSE:    Remote procedures that are linked with the server <br>                side of RPC distributed application <br> <br>    FUNCTIONS:  HelloProc() - prints "hello, world" or other string <br>                HelloProc2() - prints string backwards <br> <br>    COMMENTS:   This sample program demonstrates how to supply <br>                multiple implementations of the remote procedure <br>                specified in the interface. It also demonstrates <br>                how the client selects among the implementations <br>                by providing a client object uuid. <br> <br>                The server calls RpcObjectSetType to associate a <br>                client object uuid with the object uuid in the <br>                Object Registry Table. The server initializes a <br>                manager entry point vector (manager epv) and <br>                then calls RpcRegisterIf to associate the interface <br>                uuid and the object uuid with the manager epv in the <br>                Interface Registry Table. <br> <br>                When the client makes a remote procedure call, <br>                the client object uuid is mapped to the object uuid <br>                in the Object Registry Table. The resulting <br>                object uuid and the interface uuid are mapped to <br>                a manager entry point vector in the Interface <br>                Registry Table. <br> <br>                By default, in this example, the server registers <br>                two implementations of the "hello, world" function <br>                HelloProc and HelloProc2.  The HelloProc2 <br>                implementation is associated with the object uuid <br>                "11111111-1111-1111-1111-111111111111". When <br>                the client makes a procedure call with a null <br>                uuid, the client's request is mapped to the <br>                original HelloProc.  When the client makes a <br>                procedure call with the client object uuid <br>                "11111111-1111-1111-1111-11111111111", the <br>                client's request is mapped to HelloProc2 (which <br>                prints the string in reverse). <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include "cluuid.h"    // header file generated by MIDL compiler <br> <br>void HelloProc(unsigned char * pszString) <br>{ <br>    printf("%s\n", pszString); <br>} <br> <br>void HelloProc2(unsigned char * pszString) <br>{ <br>    printf("%s\n", strrev(pszString)); <br>} <br> <br>void Shutdown(void) <br>{ <br>    RPC_STATUS status; <br> <br>    printf("Calling RpcMgmtStopServerListening\n"); <br>    status = RpcMgmtStopServerListening(NULL); <br>    printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerUnregisterIf\n"); <br>    status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>    printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br>} <br> <br>/* end of file cluuidp.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

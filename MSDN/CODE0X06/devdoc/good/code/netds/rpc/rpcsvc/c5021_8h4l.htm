<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SERVER.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5025"></a>SERVER.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   server.c <br>// <br>//  PURPOSE:  Implements the body of the RPC service sample. <br>// <br>//  FUNCTIONS: <br>//            Called by service.c: <br>//            ServiceStart(DWORD dwArgc, LPTSTR *lpszArgv); <br>//            ServiceStop( ); <br>// <br>//            Called by RPC: <br>//            error_status_t Ping(handle_t) <br>// <br>//  COMMENTS: The ServerStart and ServerStop functions implemented here are <br>//            prototyped in service.h.  The other functions are RPC manager <br>//            functions prototypes in rpcsvc.h. <br>//               <br>// <br>//  AUTHOR: Craig Link - Microsoft Developer Support <br>//          Mario Goertzel - RPC Development <br>// <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;process.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;rpc.h&gt; <br>#include "service.h" <br>#include "rpcsvc.h" <br> <br>// <br>// RPC configuration. <br>// <br> <br>// This service listens to all the protseqs listed in this array. <br>// This should be read from the service's configuration in the <br>// registery. <br> <br>TCHAR *ProtocolArray[] = { TEXT("ncalrpc"), <br>                           TEXT("ncacn_ip_tcp"), <br>                           TEXT("ncacn_np"), <br>                           TEXT("ncadg_ip_udp") <br>                         }; <br> <br>// Used in RpcServerUseProtseq, for some protseqs <br>// this is used as a hint for buffer size. <br>ULONG ProtocolBuffer = 3; <br> <br>// Use in RpcServerListen().  More threads will increase performance, <br>// but use more memory. <br>ULONG MinimumThreads = 3; <br> <br>// <br>//  FUNCTION: ServiceStart <br>// <br>//  PURPOSE: Actual code of the service <br>//           that does the work. <br>// <br>//  PARAMETERS: <br>//    dwArgc   - number of command line arguments <br>//    lpszArgv - array of command line arguments <br>// <br>//  RETURN VALUE: <br>//    none <br>// <br>//  COMMENTS: <br>//    Starts the service listening for RPC requests. <br>// <br>VOID ServiceStart (DWORD dwArgc, LPTSTR *lpszArgv) <br>{ <br>    UINT i; <br>    RPC_BINDING_VECTOR *pbindingVector = 0; <br>    RPC_STATUS status; <br>    BOOL fListening = FALSE; <br> <br>    /////////////////////////////////////////////////// <br>    // <br>    // Service initialization <br>    // <br> <br>    // <br>    // Use protocol sequences (protseqs) specified in ProtocolArray. <br>    // <br> <br>    for(i = 0; i &lt; sizeof(ProtocolArray)/sizeof(TCHAR *); i++) <br>        { <br> <br>        // Report the status to the service control manager. <br>        if (!ReportStatusToSCMgr( <br>            SERVICE_START_PENDING, // service state <br>            NO_ERROR,              // exit code <br>            3000))                 // wait hint <br>            return; <br> <br> <br>        status = RpcServerUseProtseq(ProtocolArray[i], <br>                                     ProtocolBuffer, <br>                                     0); <br> <br>        if (status == RPC_S_OK) <br>            { <br>            fListening = TRUE; <br>            } <br>        } <br> <br>    if (!fListening) <br>        { <br>        // Unable to listen to any protocol! <br>        // <br>        AddToMessageLog(TEXT("RpcServerUseProtseq() failed\n")); <br>        return; <br>        } <br> <br>    // Report the status to the service control manager. <br>    // <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        3000))                 // wait hint <br>        return; <br> <br>    // Register the services interface(s). <br>    // <br> <br>    status = RpcServerRegisterIf(RpcServiceSample_v1_0_s_ifspec,   // from rpcsvc.h <br>                                 0, <br>                                 0); <br> <br> <br>    if (status != RPC_S_OK) <br>        return; <br> <br>    // Report the status to the service control manager. <br>    // <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        3000))                 // wait hint <br>        return; <br> <br> <br>    // Register interface(s) and binding(s) (endpoints) with <br>    // the endpoint mapper. <br>    // <br> <br>    status = RpcServerInqBindings(&amp;pbindingVector); <br> <br>    if (status != RPC_S_OK) <br>        { <br>        return; <br>        } <br> <br>    status = RpcEpRegister(RpcServiceSample_v1_0_s_ifspec,   // from rpcsvc.h <br>                           pbindingVector, <br>                           0, <br>                           0); <br> <br>    if (status != RPC_S_OK) <br>        { <br>        return; <br>        } <br> <br>    // Report the status to the service control manager. <br>    // <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        3000))                 // wait hint <br>        return; <br> <br>    // Enable NT LM Security Support Provider (NtLmSsp service) <br>    // <br>    status = RpcServerRegisterAuthInfo(0, <br>                                       RPC_C_AUTHN_WINNT, <br>                                       0, <br>                                       0 <br>                                       ); <br>    if (status != RPC_S_OK) <br>        { <br>        return; <br>        } <br> <br>    // Report the status to the service control manager. <br>    // <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        3000))                 // wait hint <br>        return; <br> <br> <br>    // Start accepting client calls. <br>    // <br>    status = RpcServerListen(MinimumThreads, <br>                             RPC_C_LISTEN_MAX_CALLS_DEFAULT,  // rpcdce.h <br>                             TRUE);                           // don't block. <br> <br>    if (status != RPC_S_OK) <br>        { <br>        return; <br>        } <br> <br>    // Report the status to the service control manager. <br>    // <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_RUNNING,       // service state <br>        NO_ERROR,              // exit code <br>        0))                    // wait hint <br>        return; <br> <br>    // <br>    // End of initialization <br>    // <br>    //////////////////////////////////////////////////////////// <br> <br>    //////////////////////////////////////////////////////////// <br>    // <br>    // Cleanup <br>    // <br> <br>    // RpcMgmtWaitServerListen() will block until the server has <br>    // stopped listening.  If this service had something better to <br>    // do with this thread, it would delay this call until <br>    // ServiceStop() had been called. (Set an event in ServiceStop()). <br>    // <br>    status = RpcMgmtWaitServerListen(); <br> <br>    // ASSERT(status == RPC_S_OK) <br> <br>    // Remove entries from the endpoint mapper database. <br>    // <br>    RpcEpUnregister(RpcServiceSample_v1_0_s_ifspec,   // from rpcsvc.h <br>                    pbindingVector, <br>                    0); <br> <br>    // Delete the binding vector <br>    // <br>    RpcBindingVectorFree(&amp;pbindingVector); <br> <br>    // <br>    //////////////////////////////////////////////////////////// <br>    return; <br>} <br> <br> <br>// <br>//  FUNCTION: ServiceStop <br>// <br>//  PURPOSE: Stops the service <br>// <br>//  PARAMETERS: <br>//    none <br>// <br>//  RETURN VALUE: <br>//    none <br>// <br>//  COMMENTS: <br>//    If a ServiceStop procedure is going to <br>//    take longer than 3 seconds to execute, <br>//    it should spawn a thread to execute the <br>//    stop code, and return.  Otherwise, the <br>//    ServiceControlManager will believe that <br>//    the service has stopped responding. <br>//     <br>VOID ServiceStop() <br>{ <br>    // Stop's the server, wakes the main thread. <br> <br>    RpcMgmtStopServerListening(0); <br>} <br> <br> <br>// <br>//  FUNCTION: Ping <br>// <br>//  PURPOSE: Implements the Ping() operation. <br>// <br>//  PARAMETERS: <br>//    none <br>// <br>//  RETURN VALUE: <br>//    none <br>// <br>//  COMMENTS: <br>//    Ping() operation defined in rpcsvc.idl. <br>//    Used by clients to test the connection. <br>// <br> <br>error_status_t <br>Ping( <br>    handle_t h <br>    ) <br>{ <br>    return(0); <br>} <br> <br>// <br>//  FUNCTIONS: BufferIn1, BufferIn2, BufferIn3 <br>// <br>//  PURPOSE: Implements three different methods <br>//           for sending data to the server. <br>// <br>//  PARAMETERS: <br>//    see rpcsvc.idl <br>// <br>//  RETURN VALUE: <br>//    error_status_t - 0; <br>// <br> <br>error_status_t <br>BufferIn1( <br>         handle_t h, <br>         byte Buffer[], <br>         unsigned long Length, <br>         unsigned long Size <br>         ) <br>{ <br>    return(0); <br>} <br> <br>error_status_t <br>BufferIn2( <br>         handle_t h, <br>         byte Buffer[], <br>         unsigned long Length <br>         ) <br>{ <br>    return(0); <br>} <br> <br>error_status_t <br>BufferIn3( <br>         handle_t h, <br>         byte Buffer[], <br>         unsigned long Length <br>         ) <br>{ <br>    return(0); <br>} <br> <br>// <br>//  FUNCTIONS: BufferOut1, BufferOut2, BufferOut3, BufferOut4 <br>// <br>//  PURPOSE: Implements four different methods <br>//           for reading data from the server. <br>// <br>//  PARAMETERS: <br>//    see rpcsvc.idl <br>// <br>//  RETURN VALUE: <br>//    error_status_t - 0; <br>// <br> <br>error_status_t <br>BufferOut1( <br>         handle_t h, <br>         byte Buffer[], <br>         unsigned long *pLength <br>         ) <br>{ <br>    *pLength = BUFFER_SIZE; <br>    return(0); <br>} <br> <br>error_status_t <br>BufferOut2( <br>          handle_t h, <br>          byte Buffer[], <br>          unsigned long Size, <br>          unsigned long *pLength <br>          ) <br>{ <br>    *pLength = BUFFER_SIZE; <br>    return(0); <br>} <br> <br>error_status_t <br>BufferOut3( <br>          handle_t h, <br>          BUFFER *pBuffer <br>          ) <br>{ <br>    pBuffer-&gt;BufferLength = BUFFER_SIZE; <br>    pBuffer-&gt;Buffer = MIDL_user_allocate(BUFFER_SIZE); <br> <br>    if (pBuffer-&gt;Buffer == 0) <br>        { <br>        return(RPC_S_OUT_OF_MEMORY); <br>        } <br>    return(0); <br>} <br> <br>error_status_t <br>BufferOut4( <br>          handle_t h, <br>          byte Buffer[], <br>          unsigned long *pLength <br>          ) <br>{ <br>    *pLength = BUFFER_SIZE; <br>    return(0); <br>} <br> <br>// <br>//  FUNCTIONS: StructsIn1, StructsIn2, StructsIn3 <br>// <br>//  PURPOSE: Implements server side of the struct/enum operations. <br>// <br>//  PARAMETERS: <br>//    see rpcsvc.idl <br>// <br>//  RETURN VALUE: <br>//    error_status_t - 0; <br>// <br>// <br>error_status_t <br>StructsIn1( <br>          handle_t h, <br>          struct BAD1 array[50] <br>          ) <br>{ <br>    return(0); <br>} <br> <br>error_status_t <br>StructsIn2( <br>          handle_t h, <br>          struct BAD2 array[50] <br>          ) <br>{ <br>    return(0); <br>} <br> <br>error_status_t <br>StructsIn3( <br>          handle_t h, <br>          struct GOOD array[50] <br>          ) <br>{ <br>    return(0); <br>} <br> <br>// <br>//  FUNCTIONS: ListIn, ListOut1, ListOut2 <br>// <br>//  PURPOSE: Implements server side of linked list functions. <br>// <br>// <br>//  PARAMETERS: <br>//    see rpcsvc.idl <br>// <br>//  RETURN VALUE: <br>//    error_status_t - 0; <br>// <br>//  NOTES: <br>//    Since ListOut2 uses [enable_allocate] it <br>//    must allocate all memory for parameters <br>//    with RpcSsAllocate(). <br>// <br> <br>error_status_t <br>ListIn( <br>      handle_t h, <br>      PLIST pList <br>      ) <br>{ <br>    return(0); <br>} <br> <br>error_status_t <br>ListOut1( <br>        handle_t h, <br>        LIST *pList <br>        ) <br>{ <br>    int i; <br>    for(i = 0; i &lt; LIST_SIZE; i++) <br>        { <br>        pList-&gt;data = i; <br>        pList-&gt;pNext = MIDL_user_allocate(sizeof(LIST)); <br>        if (pList-&gt;pNext == 0) <br>            { <br>            return(RPC_S_OUT_OF_MEMORY); <br>            } <br>        pList = pList-&gt;pNext; <br>        } <br> <br>    pList-&gt;data = i; <br>    pList-&gt;pNext = 0; <br> <br>    return(0); <br>} <br> <br>error_status_t <br>ListOut2( <br>        handle_t h, <br>        LIST *pList <br>        ) <br>{ <br>    int i; <br>    for(i = 0; i &lt; LIST_SIZE; i++) <br>        { <br>        pList-&gt;data = i; <br>        pList-&gt;pNext = RpcSsAllocate(sizeof(LIST)); <br>        // RpcSsAllocate raises an exception when it <br>        // fails.  Use RpcSmAllocate is this is <br>        // undesirable. <br>        pList = pList-&gt;pNext; <br>        } <br> <br>    pList-&gt;data = i; <br>    pList-&gt;pNext = 0; <br> <br>    return(0); <br>} <br> <br>// <br>//  FUNCTIONS: UnionCall1, UnionCall2 <br>// <br>//  PURPOSE: Implements server side of the Union functions. <br>// <br>//  PARAMETERS: <br>//    see rpcsvc.idl <br>// <br>//  RETURN VALUE: <br>//    error_status_t - 0; <br>// <br>// <br>error_status_t <br>UnionCall1( <br>          handle_t h, <br>          unsigned long Length, <br>          BAD_UNION aUnion[] <br>          ) <br>{ <br>    return(0); <br>} <br> <br>error_status_t <br>UnionCall2( <br>          handle_t h, <br>          GOOD_UNION *pUnion <br>          ) <br>{ <br>    return(0); <br>} <br> <br>// <br>//  FUNCTION: CheckSecurity <br>// <br>//  PURPOSE: Demonstrates the RPC security APIs. <br>// <br>//  PARAMETERS: <br>//    h - binding to client which made the call. <br>// <br>//  RETURN VALUE: <br>//    0 - no error <br>// <br>error_status_t <br>CheckSecurity( <br>             handle_t h <br>             ) <br>{ <br>    RPC_STATUS status; <br> <br>    // At this point the thread is running in the server <br>    // security context.  There is guarantee that the client <br>    // even used a secure connection. <br> <br>    status = RpcImpersonateClient(h); <br> <br>    if (status != RPC_S_OK) <br>        { <br>        return(RPC_S_ACCESS_DENIED); <br>        } <br> <br>    // This thread is now running in the clients security context. <br> <br>    // <br>    // The server should now open a file, mutex, event or its own data <br>    // structure which has an ACL associated with it to check that the <br>    // client has the right to access the server's protected data. <br>    // <br> <br>    status = RpcRevertToSelf(); <br> <br>    // ASSERT(status == RPC_S_OK); <br> <br>    // This thread is now running in the server's security context. <br> <br>    return(0); <br>} <br> <br> <br>// <br>//  FUNCTIONS: MIDL_user_allocate and MIDL_user_free <br>// <br>//  PURPOSE: Used by stubs to allocate and free memory <br>//           in standard RPC calls. Not used when <br>//           [enable_allocate] is specified in the .acf. <br>// <br>// <br>//  PARAMETERS: <br>//    See documentations. <br>// <br>//  RETURN VALUE: <br>//    Exceptions on error.  This is not required, <br>//    you can use -error allocation on the midl.exe <br>//    command line instead. <br>// <br>// <br>void * __RPC_USER MIDL_user_allocate(size_t size) <br>{ <br>    return(HeapAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, size)); <br>} <br> <br>void __RPC_USER MIDL_user_free( void *pointer) <br>{ <br>    HeapFree(GetProcessHeap(), 0, pointer); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5021"></a>README.TXT</h2>
<pre><code>RPCSVC <br> <br> <br>The RPCSVC program demonstrates how to implement an NT system service that  <br>uses RPC. <br> <br>SUMMARY <br>======= <br> <br>This particular RPC service is designed to show the performance effects of  <br>various parameters to RPC APIs and interface design. <br> <br>The service can be started and stopped from either the Services control  <br>panel, the net start/stop command line, or by using the Service Controller  <br>utility (see below). <br> <br>The service also provides command-line parameters which install, remove, or  <br>run (debug) the service as a console application. <br> <br>This sample (and service.c) is based on the win32\service sample. <br> <br>FILES <br>===== <br> <br>The directory samples\rpc\handles\rpcsvc contains the following files to <br>build the distributed application RPCSVC: <br> <br>File          Description <br> <br>README.TXT    Readme file for the RPCSVC sample <br>RPCSVC.IDL    Interface definition language file <br>RPCSVC.ACF    Attribute configuration file <br>CLIENT.C      Client main program <br>SERVER.C      Server main program <br>SERVICE.C     Service APIs <br>SERVICE.H <br>MAKEFILE      Nmake file to build for Windows NT or Windows 95 <br> <br>TO USE: <br>------- <br> <br>To install the service, first compile everything, and then type: <br> <br>  rpcsvc -install <br> <br>To start the service, use the control panel or type: <br> <br>  net start simplerpcservice <br> <br>Once the service has been started, you can use the CLIENT program to verify  <br>that it really is working, using the syntax: <br> <br>  svcclnt [-i iterations] [-t protseq] [-n servername] [-s security] <br> <br>By default, the service listens to ncalrpc, ncacn_np, ncacn_ip_tcp and  <br>ncadg_ip_udp.  If no parameters are passed to the client, it uses ncalrpc  <br>with default LPC security. <br>     <br>If, after playing with the sample you wish to remove the service, simply  <br>run: <br> <br>  rpcsvc -remove <br> <br>You can run the service from the command line with: <br> <br>  rpcsvc -debug <br> <br>MORE INFORMATION: <br>================= <br> <br>See the sample in samples\win32\service for more information on NT system  <br>service and how service.c and service.h work. <br> <br>server.c implements a bunch of APIs: <br> <br>    ServiceStart() is called when the server is starting. It uses server  <br>    transports, registers its endpoints and interfaces and starts listening. <br> <br>    ServiceStop() is called when the service should stop. It just calls  <br>    RpcMgmtStopServerListening(). <br> <br>    Manager APIs (implement the remote side of the operations defined in the  <br>    rpcsvc.idl file. <br> <br>Client.c binds to the server (as specified on the command line) and then  <br>times a bunch of different RPC calls to the server. </code></pre>
<p>&nbsp;</p></body>
</HTML>

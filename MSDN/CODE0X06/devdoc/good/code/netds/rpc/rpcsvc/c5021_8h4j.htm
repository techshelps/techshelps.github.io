<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RPCSVC.ACF</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5023"></a>RPCSVC.ACF</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright (C) 1995  Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   rpcsvc.acf <br>// <br>//  PURPOSE:  .ACF file for rpcsvc .idl.  This controls the <br>//            aspects of the interface which do not affect <br>//            the wire. (error handling, memory allocation, etc) <br>// <br>// <br> <br>#ifdef SERVER <br> <br>// <br>// On the server side of your application using the fast RpcSmAllocate <br>// is recommended in server's which do many allocations. <br>// Although it may be used on the client, this requires more work <br>// and has little performance impact. <br>// <br>#define ENABLE_ALLOC ,enable_allocate <br>#else <br>#define ENABLE_ALLOC /* client */ <br>#endif <br> <br>interface RpcServiceSample <br>{ <br> <br>    // The [comm_status] and [fault_status] attributes cause the stubs <br>    // to return any errors in an error_status_t parameter or return <br>    // value.  Otherwise, any communication errors will get raised as <br>    // an exception.  This has no performance affect, but it keeps the <br>    // client code cleaner. <br>     <br>    [comm_status, fault_status] Ping(); <br> <br>    [comm_status, fault_status] BufferIn1(); <br>    [comm_status, fault_status] BufferIn2(); <br>    [comm_status, fault_status] BufferIn3(); <br> <br>    [comm_status, fault_status] BufferOut1(); <br>    [comm_status, fault_status] BufferOut2(); <br>    [comm_status, fault_status] BufferOut3(); <br>    [comm_status, fault_status] BufferOut4(); <br> <br>    [comm_status, fault_status] StructsIn1(); <br>    [comm_status, fault_status] StructsIn2(); <br>    [comm_status, fault_status] StructsIn3(); <br> <br>    [comm_status, fault_status] ListIn(); <br>    [comm_status, fault_status] ListOut1(); <br>    [comm_status, fault_status ENABLE_ALLOC] ListOut2(); <br> <br>    [comm_status, fault_status] UnionCall1(); <br>    [comm_status, fault_status] UnionCall2(); <br> <br>    [comm_status, fault_status] CheckSecurity(); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

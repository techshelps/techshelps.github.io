<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>READSGRD.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4977"></a>READSGRD.C</h2>
<pre><code>/*********************************************************************** <br>File:   ReadSGrd.c <br> <br>Abstract: <br> <br>    This module contains the entrypoint for ReadSubGrids(). This is a file <br>    to read in the text versions of the various subgrids which users can <br>    choose from. The subgrids are read into SubGrids[], and translated into <br>    their various cells with flags of NORTH SOUTH EAST WEST saying what <br>    walls are present for that cell. <br> <br>    COMMENTS:   This file needs more error checking put into it. In particular, <br>                an error routine with popups for missing or invalid files. <br> <br> <br>Contents: <br> <br>    ReadSubGrids() -- Reads subgrids in from the resources. <br> <br>************************************************************************/ <br> <br>#include "winmaze.h" <br>#include "mazproto.h" <br> <br> <br> <br>/*===================================================================== <br>Function:   ReadSubGrids() <br> <br>Inputs:     none <br> <br>Outputs:    returns success/failure <br> <br>Abstract: <br>    This will read in subgrids from the linked resources, convert them <br>    from text to bytes with walls, filling the subgrid structre. <br>======================================================================*/ <br> <br>int ReadSubGrids( <br>    VOID <br>    ) <br>{ <br>    char GridName[]="SUBGRID00"; <br>    HRSRC hGrid; <br>    LPSTR lpBuff; <br>    HGLOBAL hMem; <br> <br>    int i,j,k,m; <br> <br>    // <br>    // Initialize all cells of each subgrid to 0. <br>    // <br>    for (k=0;k&lt;NUM_SUBGRIDS;k++) { <br>        for (i=0;i&lt;X_CELLS_PER_SUBGRID;i++) { <br>            for (j=0;j&lt;Y_CELLS_PER_SUBGRID;j++) { <br>                SubGrids[k].Cell[j][i] = 0; <br>                } <br>            } <br>        } <br> <br>    // <br>    // Fill Subgrids with info from SubGrixx.TXT files <br>    // <br>    for(i=0;i&lt;NUM_SUBGRIDS;i++) {       // Loop through all subgrids <br>        GridName[7]=(char) ('0'+(i/10)); <br>        GridName[8]=(char) ('0'+(i%10)); <br>        hGrid = FindResource(hInst,(LPCTSTR)GridName,(LPCTSTR)RT_RCDATA); <br>        if (hGrid == (HRSRC)NULL) { <br>            MessageBox((HWND)NULL,GetStringRes(IDS_LDSGRIDRESFAIL),"ReadSubGrids", <br>                       MB_ICONEXCLAMATION|MB_APPLMODAL); <br>            } <br> <br> <br>        hMem = (HGLOBAL) LoadResource(hInst,hGrid); <br>        lpBuff = LockResource(hMem); <br>        if (lpBuff == (LPSTR)NULL) { <br>            MessageBox((HWND)NULL,GetStringRes(IDS_LDSGRIDRESFAIL),"ReadSubGrids", <br>                         MB_ICONEXCLAMATION|MB_APPLMODAL); <br>            } <br> <br> <br> <br>        j=0; <br> <br>    // <br>    // For each file, loop through all lines. The top line <br>    // is ONLY the North wall for the first row. <br>    // The sixth row in the file will be the fifth row of the subgrid. <br>    // <br>    for(m=0;m&lt;6;m++) { <br>        // <br>        // Get the NORTH/SOUTH walls. <br>        // <br>        for (k=1;k&lt;2*X_CELLS_PER_SUBGRID;k+=2) { <br>            if (lpBuff[k] == '_') { <br>                if (j&lt;Y_CELLS_PER_SUBGRID) { <br>                    SubGrids[i].Cell[k/2][j] |= NORTH; <br>                    } <br>                if (j&gt;0) { <br>                    SubGrids[i].Cell[k/2][j-1] |= SOUTH; <br>                    } <br>                } <br>            } <br> <br>        // <br>        // Get the EAST/WEST walls. <br>        // <br>        if (j &gt; 0){ <br>            for (k=0;k&lt;2*X_CELLS_PER_SUBGRID+1;k+=2) { <br>                if (lpBuff[k] == '|') { <br>                    if ((k/2) &lt; X_CELLS_PER_SUBGRID){ <br>                        SubGrids[i].Cell[k/2][j-1] |= WEST; <br>                        } <br>                    if (((int) (k/2))&gt;0) { <br>                        SubGrids[i].Cell[(k/2)-1][j-1] |= EAST; <br>                        } <br>                    } <br>                } <br>            } <br> <br>        while (*lpBuff != '\0') { <br>            lpBuff++; <br>            } <br>        lpBuff++; <br> <br>        j++; <br>        } <br>    } <br> <br>    return(1); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RPCSSMP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5019"></a>RPCSSMP.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                        rpcssm Example <br> <br>    FILE:       rpcssmp.c <br> <br>    PURPOSE:    Remote procedures used in server application rpcssms <br> <br>    FUNCTIONS:  InOutList() - Adds new nodes to the list. <br> <br>    COMMENTS:   This distributed application uses the rpcssm package. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include "rpcssm.h"    // header file generated by MIDL compiler <br> <br>void AllocateSmList( PBOX * ppBox, short sListSize ); <br>void InitList( PBOX  pBox, long lStartValue ); <br>void PrintList( PBOX pBox ); <br> <br>void * pvPersistent    = NULL; <br>void * pvNonPersistent = NULL; <br> <br>void <br>InOutList( PBOX * ppBox ) <br>{ <br>    /* As this routine executes in the enabled memory environment, <br>       a convienient way to allocate a non-persistent memory <br>       is to use RpcSmAllocate or RpcSsAllocate. <br>    */ <br> <br>    if ( ppBox) { <br> <br>        PBOX p = *ppBox; <br>        while ( p-&gt;next ) <br>            p = p-&gt;next; <br> <br>        AllocateSmList( &amp; p-&gt;next, 2 ); <br>    } <br>    else { <br>        AllocateSmList( ppBox, 5 ); <br>    } <br> <br>    InitList( *ppBox, 0x98760000 ); <br>    PrintList( *ppBox ); <br> <br>    /* To allocate a memory to be available after the call, means other <br>       than RpcS*Allocate with default allocators should be used. <br>    */ <br> <br>    if ( pvPersistent == NULL ) <br>        { <br>        pvPersistent = malloc(100); /* or midl_user_allocate(100) */ <br>        } <br> <br>    pvNonPersistent = RpcSsAllocate( 100 ); <br>} <br> <br>/* The Shutdown procedure tells the server to stop listening */ <br>/* for client requests.                                      */ <br>void Shutdown(void) <br>{ <br>    RPC_STATUS status; <br> <br>    /* Freeing the persistent memory */ <br> <br>    if ( pvPersistent ) <br>        free( pvPersistent ); <br> <br>    printf("Calling RpcMgmtStopServerListening\n"); <br>    status = RpcMgmtStopServerListening(NULL); <br>    printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br> <br>    printf("Calling RpcServerUnregisterIf\n"); <br>    status = RpcServerUnregisterIf(NULL, NULL, FALSE); <br>    printf("RpcServerUnregisterIf returned 0x%x\n", status); <br>    if (status) { <br>        exit(status); <br>    } <br>} <br> <br>//===================================================================== <br>//        List allocation/deallocation routines <br>//===================================================================== <br> <br>void <br>AllocateSmList( PBOX * ppBox, short sListSize) <br>{ <br>    PBOX    pBox, head; <br>    int     i = 0; <br> <br>    //.. Allocate a list of boxes, if needed (when *ppBox==NULL). <br> <br>    if ( *ppBox == NULL ) { <br> <br>        RPC_STATUS status; <br> <br>        head = 0; <br>        for (i = 0; i &lt; sListSize; i++) <br>        { <br>            pBox = (PBOX) RpcSmAllocate( sizeof(LBOX), &amp;status); <br>            if ( status != RPC_S_OK ) <br>            { <br>                printf("AllocateList FAILED: not enough memory\n"); <br>                break; <br>            } <br>            pBox-&gt;next = head; <br>            head = pBox; <br>        } <br>        *ppBox = head; <br>    } <br>    printf("%d nodes allocated.\n", i); <br>} <br> <br>//===================================================================== <br>//        Initialization and pprint routines <br>//===================================================================== <br> <br>void  InitList( PBOX  pBox, long lStartValue ) <br>{ <br>    int i = 0; <br> <br>    while( pBox ) { <br>        pBox-&gt;data = lStartValue + ++i; <br>        pBox = pBox-&gt;next; <br>    } <br>    printf("%d nodes inited.\n", i); <br>} <br> <br>// -------------------------------------------------------------------- <br> <br>void <br>PrintList( PBOX  pBox ) <br>{ <br>    int i = 0; <br> <br> <br>    while( pBox ) { <br> <br>        if ( (i % 4) != 0 ) <br>            printf("  data[%d]= %lx", i, pBox-&gt;data); <br>        else <br>            printf("\n  data[%d]= %lx", i, pBox-&gt;data); <br>        pBox = pBox-&gt;next; <br>        i++; <br>    } <br>    printf("\n" ); <br>} <br> <br> <br>/* end file rpcssmp.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

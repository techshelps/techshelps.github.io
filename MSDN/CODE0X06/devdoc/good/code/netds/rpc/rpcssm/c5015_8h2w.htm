<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RPCSSMC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5018"></a>RPCSSMC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                      rpcssm Example <br> <br>    FILE:       rpcssmc.c <br> <br>    USAGE:      rpcssmc  -n network_address <br>                         -p protocol_sequence <br>                         -e endpoint <br>                         -o options <br> <br>    PURPOSE:    Client side of RPC distributed application <br> <br>    FUNCTIONS:  main() - binds to server and calls remote procedure <br> <br>    COMMENTS:   This distributed application uses the rpcssm package. <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "rpcssm.h"    // header file generated by MIDL compiler <br> <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the [context_handle] attribute. For more information\n\ <br>about attributes and RPC API functions, see the RPC programming\n\ <br>guide and reference.\n\n" <br> <br>void AllocateSmList( PBOX * ppBox, short sListSize ); <br>void AllocateList( PBOX * ppBox, short sListSize ); <br>void InitList( PBOX  pBox, long lStartValue ); <br>void FreeList( PBOX  pBox ); <br>void PrintList( PBOX pBox ); <br> <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -p protocol_sequence\n"); <br>    fprintf(stderr, " -n network_address\n"); <br>    fprintf(stderr, " -e endpoint\n"); <br>    fprintf(stderr, " -o options\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    RPC_STATUS status; <br>    PBOX       pBox = NULL; <br> <br>    unsigned char * pszUuid             = NULL; <br>    unsigned char * pszProtocolSequence = "ncacn_np"; <br>    unsigned char * pszNetworkAddress   = NULL; <br>    unsigned char * pszEndpoint         = "\\pipe\\rpcssm"; <br>    unsigned char * pszOptions          = NULL; <br>    unsigned char * pszStringBinding    = NULL; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'p':  // protocol sequence <br>                pszProtocolSequence = argv[++i]; <br>                break; <br>            case 'n':  // network address <br>                pszNetworkAddress = argv[++i]; <br>                break; <br>            case 'e': <br>                pszEndpoint = argv[++i]; <br>                break; <br>            case 'o': <br>                pszOptions = argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    RpcTryExcept { <br> <br>        /* Use a convenience function to concatenate the elements of  */ <br>        /* the string binding into the proper sequence.               */ <br>        status = RpcStringBindingCompose(pszUuid, <br>                                         pszProtocolSequence, <br>                                         pszNetworkAddress, <br>                                         pszEndpoint, <br>                                         pszOptions, <br>                                         &amp;pszStringBinding); <br>        printf("RpcStringBindingCompose returned 0x%x\n", status); <br>        printf("pszStringBinding = %s\n", pszStringBinding); <br>        if (status) { <br>            exit(status); <br>        } <br> <br>        /* Set the binding handle that will be used to bind to the server. */ <br>        status = RpcBindingFromStringBinding(pszStringBinding, <br>                                             &amp;hStarter); <br>        printf("RpcBindingFromStringBinding returned 0x%x\n", status); <br>        if (status) { <br>            exit(status); <br>        } <br> <br>        /* Now a different case: a client stub is in an enabled environment */ <br> <br>        status = RpcSmEnableAllocate(); <br>        printf("RpcSmEnableAllocate returned 0x%x\n", status); <br>        if (status) { <br>            exit(status); <br>        } <br> <br>        pBox = NULL; <br>        AllocateSmList( &amp;pBox, 4 ); <br>        InitList( pBox, 0xabcd0000 ); <br>        PrintList( pBox ); <br> <br>        printf("Calling the remote procedure InOutList\n"); <br>        InOutList( &amp;pBox ); <br>        PrintList( pBox ); <br> <br>        /* No need to free the memory allocated with RpcSmAllocate, <br>           RpcSmDisableAllocate would free it. <br>        */ <br> <br>        status = RpcSmDisableAllocate(); <br>        printf("RpcSmDisableAllocate returned 0x%x\n", status); <br>        if (status) { <br>            exit(status); <br>        } <br> <br>        printf(" All nodes from this case freed by RpcSmDisableAllocate().\n" ); <br>        printf(" Client with memory environment done.\n\n" ); <br> <br>        Shutdown(); <br> <br>        /*  Free the string binding */ <br>        status = RpcStringFree(&amp;pszStringBinding); <br>        printf("RpcStringFree returned 0x%x\n", status); <br>        if (status) { <br>            exit(status); <br>        } <br> <br>        status = RpcBindingFree(&amp;hStarter); <br>        printf("RpcBindingFree returned 0x%x\n", status); <br>        if (status) { <br>            exit(status); <br>        } <br>    } <br>    RpcExcept(1) { <br> <br>        #if defined(WIN32) <br>            printf( "Unexpected exception: %ld\n", RpcExceptionCode() ); <br>        #else <br>            printf( "Unexpected exception: %d\n", RpcExceptionCode() ); <br>        #endif <br>        printf("Did you set a net address (like -n server_name etc.)?\n"); <br>        exit(1); <br>    } <br>    RpcEndExcept; <br> <br>    exit(0); <br> <br>}  // end main() <br> <br> <br>//===================================================================== <br>//        List allocation/deallocation routines <br>//===================================================================== <br> <br>void <br>AllocateSmList( PBOX * ppBox, short sListSize) <br>{ <br>    PBOX    pBox, head; <br>    int     i = 0; <br> <br>    //.. Allocate a list of boxes, if needed  (when *ppBox==NULL). <br> <br>    if ( *ppBox == NULL ) { <br> <br>        RPC_STATUS status; <br> <br>        head = 0; <br>        for (i = 0; i &lt; sListSize; i++) <br>        { <br>            pBox = (PBOX) RpcSmAllocate( sizeof(LBOX), &amp;status); <br>            if ( status != RPC_S_OK ) <br>            { <br>                printf("AllocateList FAILED: not enough memory\n"); <br>                break; <br>            } <br>            pBox-&gt;next = head; <br>            head = pBox; <br>        } <br>        *ppBox = head; <br>    } <br>    printf("%d nodes allocated.\n", i); <br>} <br> <br>//===================================================================== <br>//        Initialization and pprint routines <br>//===================================================================== <br> <br>void  InitList( PBOX  pBox, long lStartValue ) <br>{ <br>    int i = 0; <br> <br>    while( pBox ) { <br>        pBox-&gt;data = lStartValue + ++i; <br>        pBox = pBox-&gt;next; <br>    } <br>    printf("%d nodes inited.\n", i); <br>} <br> <br>// -------------------------------------------------------------------- <br> <br>void <br>PrintList( PBOX  pBox ) <br>{ <br>    int i = 0; <br> <br> <br>    while( pBox ) { <br> <br>        if ( (i % 4) != 0 ) <br>            printf("  data[%d]= %lx", i, pBox-&gt;data); <br>        else <br>            printf( "\n  data[%d]= %lx", i, pBox-&gt;data); <br>        pBox = pBox-&gt;next; <br>        i++; <br>    } <br>    printf("\n" ); <br>} <br> <br> <br>/* end rpcssmc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NHELLOS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4995"></a>NHELLOS.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                         nhello Example <br> <br>    FILE:       nhellos.c <br> <br>    USAGE:      nhellos <br>                        -m maxcalls <br>                        -n mincalls <br>                        -f flag for RpcServerListen wait <br>                        -a nhello_sample_nsi_entry_name <br>                        -t name_syntax_type <br> <br>    PURPOSE:    Server side of RPC distributed application nhello <br> <br>    FUNCTIONS:  main() - registers server as RPC server <br> <br>    COMMENTS: <br> <br>****************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "nhello.h"   // header file generated by MIDL compiler <br> <br>BOOL WINAPI ControlHandler ( DWORD dwCtrlType ); <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -m maxcalls\n"); <br>    fprintf(stderr, " -n mincalls\n"); <br>    fprintf(stderr, " -f flag for RpcServerListen wait\n"); <br>    fprintf(stderr, " -a nhello_sample_nsi_entry_name\n"); <br>    fprintf(stderr, " -t name_syntax_type\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char * argv[]) <br>{ <br>    RPC_STATUS status; <br>    RPC_BINDING_VECTOR * pBindingVector = NULL; <br>    unsigned char * pszEntryName    = "/.:/nhello_sample"; <br>    unsigned char * pszSecurity     = NULL; <br>    unsigned int    cMinCalls       = 1; <br>    unsigned int    cMaxCalls       = 20; <br>    unsigned int    fDontWait       = 0; <br>    unsigned int    fNameSyntaxType = RPC_C_NS_SYNTAX_DEFAULT; <br>    unsigned int    fRegistered     = 0; <br>    unsigned int    fEndpoint       = 0; <br>    unsigned int    fExported       = 0; <br>    int i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'm': <br>                cMaxCalls = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'n': <br>                cMinCalls = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'f': <br>                fDontWait = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'a': <br>                pszEntryName = argv[++i]; <br>                break; <br>            case 't': <br>                fNameSyntaxType = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    SetConsoleCtrlHandler( ControlHandler, TRUE ); <br> <br>    printf("CallingRpcServerUseAllProtseqs...\n"); <br> <br>    status = RpcServerUseAllProtseqs(cMaxCalls,     // max concurrent calls <br>                                     pszSecurity);  // Security descriptor <br>    printf("RpcServerUseAllProtseqs returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    status = RpcServerRegisterIf(nhello_v1_0_s_ifspec, // interface to register <br>                                 NULL,   // MgrTypeUuid <br>                                 NULL);  // MgrEpv; null means use default <br>    printf("RpcServerRegisterIf returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br>    else <br>        fRegistered = 1; <br> <br>    status = RpcServerInqBindings(&amp;pBindingVector); <br>    printf("RpcServerInqBindings returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    status = RpcEpRegister(nhello_v1_0_s_ifspec, <br>                           pBindingVector, <br>                           NULL, <br>                           ""); <br>    printf("RpcEpRegister returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br>    else <br>        fEndpoint = 1; <br> <br>    status = RpcNsBindingExport(fNameSyntaxType,  // name syntax type <br>                                pszEntryName,     // nsi entry name <br>                                nhello_v1_0_s_ifspec, <br>                                pBindingVector,   // set in previous call <br>                                NULL);            // UUID vector <br>    printf("RpcNsBindingExport returned 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br>    else <br>        fExported = 1; <br> <br>    printf("Calling RpcServerListen\n"); <br>    status = RpcServerListen(cMinCalls, <br>                             cMaxCalls, <br>                             fDontWait);  // wait flag <br>    printf("RpcServerListen returned: 0x%x\n", status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    if (fDontWait) { <br>        printf("Calling RpcMgmtWaitServerListen\n"); <br>        status = RpcMgmtWaitServerListen();  //  wait operation <br>        printf("RpcMgmtWaitServerListen returned: 0x%x\n", status); <br>    } <br> <br>  cleanup: <br> <br>    if ( fExported ) <br>    { <br>        status = RpcNsBindingUnexport(RPC_C_NS_SYNTAX_DEFAULT,  // name syntax type <br>                                       pszEntryName,            // nsi entry name <br>                                       nhello_v1_0_s_ifspec, <br>                                       NULL);                   // UUID vector <br>        printf( "RpcNsBindingUnexport returned 0x%x\n", status); <br>    } <br> <br> <br>    if ( fEndpoint ) <br>    { <br>        status = RpcEpUnregister(nhello_v1_0_s_ifspec, <br>                                  pBindingVector, <br>                                  NULL); <br>        printf( "RpcEpUnregister returned 0x%x\n", status); <br>    } <br> <br>    if ( pBindingVector ) <br>    { <br>        status = RpcBindingVectorFree(&amp;pBindingVector); <br>        printf( "RpcBindingVectorFree returned 0x%x\n", status); <br>    } <br> <br>    if ( fRegistered ) <br>    { <br>        status = RpcServerUnregisterIf(nhello_v1_0_s_ifspec, // interface to register <br>                                       NULL,   // MgrTypeUuid <br>                                       1);     // wait for outstanding calls <br>        printf( "RpcServerUnregisterIf returned 0x%x\n", status); <br>    } <br> <br> <br>}  // end main() <br> <br> <br>// <br>//  FUNCTION: ControlHandler ( DWORD dwCtrlType ) <br>// <br>//  PURPOSE: Handled console control events <br>// <br>//  PARAMETERS: <br>//    dwCtrlType - type of control event <br>// <br>//  RETURN VALUE: <br>//    True - handled <br>//    False - unhandled <br>// <br>//  COMMENTS: <br>// <br>BOOL WINAPI ControlHandler ( DWORD dwCtrlType ) <br>{ <br>    RPC_STATUS status; <br> <br>    switch( dwCtrlType ) <br>    { <br>        case CTRL_BREAK_EVENT:  // use Ctrl+C or Ctrl+Break to call shutdown <br>        case CTRL_C_EVENT: <br> <br>            printf("Calling RpcMgmtIsServerListening\n"); <br>            status = RpcMgmtIsServerListening(NULL); <br>            printf("RpcMgmtIsServerListening returned: 0x%x\n", status); <br> <br>            if ( status == RPC_S_OK ) <br>            { <br>                printf("Calling RpcMgmtStopServerListening\n"); <br>                status = RpcMgmtStopServerListening(NULL); <br>                printf("RpcMgmtStopServerListening returned: 0x%x\n", status); <br>            } <br>            break; <br> <br>    } <br>    return FALSE; <br>} <br> <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file nhellos.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

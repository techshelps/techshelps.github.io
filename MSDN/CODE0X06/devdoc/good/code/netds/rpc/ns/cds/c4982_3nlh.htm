<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NSICOM.IDL</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4985"></a>NSICOM.IDL</h2>
<pre><code>/* -------------------------------------------------------------------- <br> <br>                      Microsoft OS/2 LAN Manager <br>                 Copyright(c) Microsoft Corp., 1990-1995 <br> <br>                           RPC locator <br> <br> <br>    This file is just a wrapper for MIDL to get a reference to <br>    types used in the interface. <br>-------------------------------------------------------------------- */ <br> <br>[ <br>    uuid (00000000-0000-0000-0000-000000000000), <br>    pointer_default (unique) <br>] <br>    interface NSiTypes <br> <br>{ <br> <br>/* <br> * Misc commonly used standard types. <br> */ <br> <br>typedef wchar_t  UNSIGNED_CHAR_T; <br>typedef unsigned long  UNSIGNED32; <br>typedef unsigned short UNSIGNED16; <br>typedef unsigned char  UNSIGNED8; <br>typedef [string, unique] UNSIGNED_CHAR_T *STRING_T; <br> <br>typedef [string] UNSIGNED_CHAR_T *NSI_STRING_BINDING_T; <br>typedef [context_handle] void * NSI_NS_HANDLE_T; <br> <br>typedef struct _NSI_UUID_T <br>    { <br>    UNSIGNED32          time_low; <br>    UNSIGNED16          time_mid; <br>    UNSIGNED16          time_hi_and_version; <br>    UNSIGNED8           clock_seq_hi_and_reserved; <br>    UNSIGNED8           clock_seq_low; <br>    UNSIGNED8           node[6]; <br>    } NSI_UUID_T; <br> <br>typedef [unique] NSI_UUID_T *NSI_UUID_P_T; <br> <br>typedef struct _NSI_BINDING_T <br>    { <br>    NSI_STRING_BINDING_T  string; <br>    UNSIGNED32            entry_name_syntax; <br>    STRING_T              entry_name; <br>    } NSI_BINDING_T; <br> <br>typedef struct _NSI_BINDING_VECTOR_T <br>    { <br>    UNSIGNED32            count; <br>    [size_is(count)] <br>    NSI_BINDING_T  binding[*]; <br>    } NSI_BINDING_VECTOR_T; <br> <br>typedef [unique] NSI_BINDING_VECTOR_T *NSI_BINDING_VECTOR_P_T; <br> <br>typedef struct _NSI_SERVER_BINDING_VECTOR_T <br>    { <br>    UNSIGNED32            count; <br>    [size_is(count)] <br>    NSI_STRING_BINDING_T  string[*]; <br>    } NSI_SERVER_BINDING_VECTOR_T; <br> <br>typedef [unique] NSI_SERVER_BINDING_VECTOR_T *NSI_SERVER_BINDING_VECTOR_P_T; <br> <br>typedef struct _NSI_UUID_VECTOR_T <br>    { <br>    UNSIGNED32 count; <br>    [size_is(count)] <br>    NSI_UUID_P_T uuid[*]; <br>    } NSI_UUID_VECTOR_T; <br> <br>typedef [unique] NSI_UUID_VECTOR_T *NSI_UUID_VECTOR_P_T; <br> <br>typedef struct _NSI_SYNTAX_ID_T <br>    { <br>    NSI_UUID_T          id; <br>    UNSIGNED32          version; <br>    } NSI_SYNTAX_ID_T; <br> <br>typedef [unique] NSI_SYNTAX_ID_T *NSI_IF_ID_P_T; <br> <br>typedef struct _NSI_INTERFACE_ID_T <br>    { <br>    NSI_SYNTAX_ID_T Interface; <br>    NSI_SYNTAX_ID_T TransferSyntax; <br>    } NSI_INTERFACE_ID_T; <br> <br>typedef [unique] NSI_INTERFACE_ID_T *NSI_INTERFACE_ID_P_T; <br> <br>typedef struct _NSI_IF_VECTOR_T <br>    { <br>    UNSIGNED32 count; <br>    [size_is(count)] <br>    NSI_IF_ID_P_T if_id[*]; <br>    } NSI_IF_ID_VECTOR_T; <br> <br> <br>// If you change this table, you must update the status mapping vector <br>// NsiToRpcStatus in client\util.cxx <br> <br>enum { <br>    NSI_S_OK, <br>    NSI_S_NO_MORE_BINDINGS, <br>    NSI_S_INTERFACE_NOT_FOUND, <br>    NSI_S_ENTRY_NOT_FOUND, <br>    NSI_S_NAME_SERVICE_UNAVAILABLE, <br>    NSI_S_NO_NS_PRIVILEGE, <br>    NSI_S_UNSUPPORTED_NAME_SYNTAX, <br>    NSI_S_NOTHING_TO_UNEXPORT, <br>    NSI_S_INVALID_NAME_SYNTAX, <br>    NSI_S_INVALID_NS_HANDLE, <br>    NSI_S_INVALID_OBJECT, <br>    NSI_S_NOT_ALL_OBJS_UNEXPORTED,    // Was NSI_S_INVALID_INTERFACE, but this <br>                                      // never could be returned by CSD. <br>    NSI_S_INVALID_STRING_BINDING, <br>    NSI_S_SOME_OTHER_ERROR, <br> <br>    // New error codes added after 4/92 and v 1.0 of CSD deamon. <br> <br>    NSI_S_NOTHING_TO_EXPORT, <br>    NSI_S_UNIMPLEMENTED_API, <br>    NSI_S_NO_INTERFACES_EXPORTED, <br>    NSI_S_INCOMPLETE_NAME, <br>    NSI_S_INVALID_VERS_OPTION, <br>    NSI_S_NO_MORE_MEMBERS, <br>    NSI_S_ENTRY_ALREADY_EXISTS, <br>    NSI_S_OUT_OF_MEMORY, <br>    NSI_S_GROUP_MEMBER_NOT_FOUND, <br>    NSI_S_STATUS_MAX, <br>}; <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

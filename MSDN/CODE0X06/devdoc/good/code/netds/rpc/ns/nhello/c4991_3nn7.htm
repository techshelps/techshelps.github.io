<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NHELLOC.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4993"></a>NHELLOC.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                       nhello Example <br> <br>    FILE:       nhelloc.c <br> <br>    USAGE:      nhelloc  -s string <br>                         -n name_service_entry_name <br>                         -t name_syntax_type <br> <br>    PURPOSE:    Client side of RPC distributed application <br> <br>    FUNCTIONS:  main() - binds to server and calls remote procedure <br> <br>    COMMENTS: <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include "nhello.h"    // header file generated by MIDL compiler <br> <br>#define PURPOSE \ <br>"This Microsoft RPC Version 2.0 sample program demonstrates\n\ <br>the use of the name service. For more information about these\n\ <br>RPC API functions, see the RPC programming guide and reference.\n\n" <br> <br>void Usage(char * pszProgramName) <br>{ <br>    fprintf(stderr, "%s", PURPOSE); <br>    fprintf(stderr, "Usage:  %s\n", pszProgramName); <br>    fprintf(stderr, " -s string\n"); <br>    fprintf(stderr, " -n name_service_entry_name\n"); <br>    fprintf(stderr, " -t name_syntax_type\n"); <br>    exit(1); <br>} <br> <br>void _CRTAPI1 main(int argc, char **argv) <br>{ <br>    unsigned char * pszString     = "hello, world"; <br>    unsigned char * pszEntryName  = "/.:/nhello_sample"; <br>    unsigned char * pszStrBinding = NULL; <br>    RPC_NS_HANDLE hnsHello; <br>    RPC_BINDING_HANDLE hHello; <br>    unsigned long fNameSyntaxType = RPC_C_NS_SYNTAX_DEFAULT; <br>    RPC_STATUS status; <br>    unsigned long ulCode; <br>    short fSuccess = 0; <br>    short fContinue = 1; <br>    short i; <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; argc; i++) { <br>        if ((*argv[i] == '-') || (*argv[i] == '/')) { <br>            switch (tolower(*(argv[i]+1))) { <br>            case 'n': <br>                pszEntryName = argv[++i]; <br>                break; <br>            case 't': <br>                fNameSyntaxType = (unsigned int) atoi(argv[++i]); <br>                break; <br>            case 's': <br>                pszString = argv[++i]; <br>                break; <br>            case 'h': <br>            case '?': <br>            default: <br>                Usage(argv[0]); <br>            } <br>        } <br>        else <br>            Usage(argv[0]); <br>    } <br> <br>    RpcTryExcept { <br>        status = RpcNsBindingImportBegin(fNameSyntaxType, <br>                                         pszEntryName, <br>                                         nhello_v1_0_c_ifspec, <br>                                         NULL, <br>                                         &amp;hnsHello); <br>        printf("RpcNsBindingImportBegin returned 0x%x\n", status); <br>    } <br>    RpcExcept(1) { <br>        ulCode = RpcExceptionCode(); <br>        printf("RPC Runtime raised exception 0x%x\n", ulCode); <br>        fContinue = 0; <br>    } <br>    RpcEndExcept <br> <br>    if ( status != RPC_S_OK ) <br>        fContinue = 0; <br> <br>    /* The loop is present because the name service may contain "stale" */ <br>    /* and unusable binding handlers.  This is part of the DCE design.  */ <br>    while( fContinue ) <br>    { <br>        status = RpcNsBindingImportNext(hnsHello, <br>                                        &amp;hHello); <br>        printf("RpcNsBindingImportNext returned 0x%x\n", status); <br> <br>        if ( (status == RPC_S_NO_MORE_BINDINGS) || <br>             (status == RPC_S_NAME_SERVICE_UNAVAILABLE ) ) <br>            break; <br> <br>        if (status != RPC_S_OK) <br>            continue; <br> <br>        RpcBindingToStringBinding( hHello, &amp;pszStrBinding ); <br>        printf("StringBinding: %s\n", pszStrBinding ); <br>        RpcStringFree(&amp;pszStrBinding); <br> <br>        RpcTryExcept { <br>            printf("Calling remote procedure HelloProc with string %s\n", <br>                   pszString); <br>            HelloProc(hHello, pszString); <br>            fContinue = 0; <br>            fSuccess = 1; <br>        } <br>        RpcExcept(1) { <br>            ulCode = RpcExceptionCode(); <br>            printf("RPC Runtime raised exception 0x%x\n", ulCode); <br>            status = RpcBindingFree(&amp;hHello); <br>            printf("RpcBindingFree returned 0x%x\n", status); <br>            fContinue = 1; <br>        } <br>        RpcEndExcept <br> <br>    } <br> <br>    RpcTryExcept { <br>        status = RpcNsBindingImportDone(&amp;hnsHello); <br>        printf("RpcNsBindingImportDone returned 0x%x\n", status); <br>    } <br>    RpcExcept(1) { <br>        ulCode = RpcExceptionCode(); <br>        printf("RPC Runtime raised exception 0x%x\n", ulCode); <br>        fContinue = 0; <br>    } <br>    RpcEndExcept <br> <br>    if ( fSuccess ) <br>    { <br>        RpcTryExcept { <br>            Shutdown(hHello);  // Shutdown is a remote procedure <br>        } <br>        RpcExcept(1) { <br>            ulCode = RpcExceptionCode(); <br>            printf("RPC runtime raised exception 0x%x\n", ulCode); <br>        } <br>        RpcEndExcept <br> <br>        status = RpcBindingFree(&amp;hHello); <br>        printf("RpcBindingFree returned 0x%x\n", status); <br>    } <br> <br>    exit(0); <br> <br>}  // end main() <br> <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file nhelloc.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

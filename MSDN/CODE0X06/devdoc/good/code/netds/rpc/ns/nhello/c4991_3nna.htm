<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NSSERV.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4996"></a>NSSERV.C</h2>
<pre><code>/**************************************************************************** <br>                   Microsoft RPC Version 2.0 <br>           Copyright Microsoft Corp. 1992, 1993, 1994- 1996 <br>                       nhello Example <br> <br>    FILE:       nsserv.c <br> <br>    USAGE:      nsserv <br>                         -m maxcalls <br>                         -n mincalls <br>                         -f flag for RpcServerListen wait <br>                         -a nhello_sample_nsi_entry_name <br>                         -t name_syntax_type <br> <br>    PURPOSE:    Server side of RPC distributed application nhello <br> <br>    FUNCTIONS:  main() - registers server as RPC server <br> <br>    COMMENTS: <br> <br>****************************************************************************/ <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;tchar.h&gt; <br>#include "nhello.h"   // header file generated by MIDL compiler <br>#include "service.h" <br> <br> <br>VOID ServiceStart (DWORD dwArgc, LPTSTR *lpszArgv) <br>{ <br>    RPC_STATUS status; <br>    RPC_STATUS temp_status; <br>    RPC_BINDING_VECTOR * pBindingVector = NULL; <br>    unsigned char * pszEntryName    = "/.:/nhello_sample"; <br>    unsigned char * pszSecurity     = NULL; <br>    unsigned int    cMinCalls       = 1; <br>    unsigned int    cMaxCalls       = 20; <br>    unsigned int    fDontWait       = 0; <br>    unsigned int    fNameSyntaxType = RPC_C_NS_SYNTAX_DEFAULT; <br>    BOOL bRegistered = FALSE; <br>    BOOL bEndpoint = FALSE; <br>    BOOL bExported = FALSE; <br>    BOOL bProto = FALSE; <br>    DWORD i; <br> <br> <br>    /* allow the user to override settings with command line switches */ <br>    for (i = 1; i &lt; dwArgc; i++) { <br>        if ((*(lpszArgv[i]) == '-') || (*(lpszArgv[i]) == '/')) { <br>            switch (tolower(*((lpszArgv[i])+1))) { <br>            case 'm': <br>                cMaxCalls = (unsigned int) atoi(lpszArgv[++i]); <br>                break; <br>            case 'n': <br>                cMinCalls = (unsigned int) atoi(lpszArgv[++i]); <br>                break; <br>            case 'f': <br>                fDontWait = (unsigned int) atoi(lpszArgv[++i]); <br>                break; <br>            case 'a': <br>                pszEntryName = lpszArgv[++i]; <br>                break; <br>            case 't': <br>                fNameSyntaxType = (unsigned int) atoi(lpszArgv[++i]); <br>                break; <br>            } <br>        } <br>    } <br> <br>    // Prepare to Use All Protseqs <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        30000))                // wait hint  - UseAll can take quite a while <br>        goto cleanup; <br> <br>    printf("CallingRpcServerUseAllProtseqs...\n"); <br> <br>    status = RpcServerUseAllProtseqs( cMaxCalls, pszSecurity ); <br>    printf("RpcServerUseAllProtseqs returned 0x%x\n", status); <br>    if (status) <br>        goto cleanup; <br> <br>    // Prepare to Register Interface <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        30000))                 // wait hint <br>        goto cleanup; <br> <br>    status = RpcServerRegisterIf(nhello_v1_0_s_ifspec, // interface to register <br>                                 NULL,   // MgrTypeUuid <br>                                 NULL);  // MgrEpv; null means use default <br>    printf( TEXT("RpcServerRegisterIf returned 0x%x\n"), status); <br>    if (status) <br>        goto cleanup; <br>    else <br>        bRegistered = TRUE; <br> <br> <br>    // Prepare to Inquire Bindings <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        30000))                // wait hint  - Inq can take quite a while <br>        goto cleanup; <br> <br>    status = RpcServerInqBindings(&amp;pBindingVector); <br>    printf( TEXT("RpcServerInqBindings returned 0x%x\n"), status); <br>    if (status) <br>        goto cleanup; <br> <br> <br>    // Prepare to Register Endpoint <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        45000))                // wait hint  - Inq can take quite a while <br>        goto cleanup; <br> <br>    status = RpcEpRegister(nhello_v1_0_s_ifspec, <br>                           pBindingVector, <br>                           NULL, <br>                           NULL); <br>    printf( TEXT("RpcEpRegister returned 0x%x\n"), status); <br>    if (status) <br>        goto cleanup; <br>    else <br>        bEndpoint = TRUE; <br> <br> <br>    // Prepare to Export to NameService <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_START_PENDING, // service state <br>        NO_ERROR,              // exit code <br>        45000))                // wait hint <br>        goto cleanup; <br> <br>    status = RpcNsBindingExport(fNameSyntaxType,  // name syntax type <br>                                pszEntryName,     // nsi entry name <br>                                nhello_v1_0_s_ifspec, <br>                                pBindingVector,   // set in previous call <br>                                NULL);            // UUID vector <br>    printf( TEXT("RpcNsBindingExport returned 0x%x\n"), status); <br>    if (status) <br>        goto cleanup; <br>    else <br>        bExported = TRUE; <br> <br> <br>    // Prepare to start listening.  At this point the service is initialized <br>    if (!ReportStatusToSCMgr( <br>        SERVICE_RUNNING, // service state <br>        NO_ERROR,        // exit code <br>        0))              // wait hint <br>        goto cleanup; <br> <br>    printf( TEXT("Calling RpcServerListen\n")); <br>    status = RpcServerListen(cMinCalls, <br>                             cMaxCalls, <br>                             fDontWait );  // wait flag <br>    printf( TEXT("RpcServerListen returned: 0x%x\n"), status); <br>    if (status) { <br>        goto cleanup; <br>    } <br> <br>    if (fDontWait) { <br>        printf("Calling RpcMgmtWaitServerListen\n"); <br>        status = RpcMgmtWaitServerListen();  //  wait operation <br>        printf("RpcMgmtWaitServerListen returned: 0x%x\n", status); <br>    } <br> <br> <br>  cleanup: <br> <br>    if ( bExported ) <br>    { <br>        ReportStatusToSCMgr( <br>            SERVICE_STOP_PENDING,  // service state <br>            NO_ERROR,              // exit code <br>            3000);                 // wait hint <br> <br>        temp_status = RpcNsBindingUnexport(RPC_C_NS_SYNTAX_DEFAULT,  // name syntax type <br>                                           pszEntryName,     // nsi entry name <br>                                           nhello_v1_0_s_ifspec, <br>                                           NULL);            // UUID vector <br>        printf( TEXT("RpcNsBindingUnexport returned 0x%x\n"), temp_status); <br>    } <br> <br> <br>    if ( bEndpoint ) <br>    { <br>        ReportStatusToSCMgr( <br>            SERVICE_STOP_PENDING,  // service state <br>            NO_ERROR,              // exit code <br>            3000);                 // wait hint <br> <br>        temp_status = RpcEpUnregister(nhello_v1_0_s_ifspec, <br>                                      pBindingVector, <br>                                      NULL); <br>        printf( TEXT("RpcEpUnregister returned 0x%x\n"), temp_status); <br>    } <br> <br>    if ( pBindingVector ) <br>    { <br>        ReportStatusToSCMgr( <br>            SERVICE_STOP_PENDING,  // service state <br>            NO_ERROR,              // exit code <br>            3000);                 // wait hint <br> <br>        temp_status = RpcBindingVectorFree(&amp;pBindingVector); <br>        printf( TEXT("RpcBindingVectorFree returned 0x%x\n"), temp_status); <br>    } <br> <br>    if ( bRegistered ) <br>    { <br>        ReportStatusToSCMgr( <br>            SERVICE_STOP_PENDING,  // service state <br>            NO_ERROR,              // exit code <br>            3000);                 // wait hint <br> <br>        temp_status = RpcServerUnregisterIf(nhello_v1_0_s_ifspec, // interface to register <br>                                     NULL,   // MgrTypeUuid <br>                                     1);     // wait for outstanding calls <br>        printf( TEXT("RpcServerUnregisterIf returned 0x%x\n"), temp_status); <br>    } <br> <br>    ReportStatusToSCMgr( <br>        SERVICE_STOP_PENDING,  // service state <br>        NO_ERROR,              // exit code <br>        3000);                 // wait hint <br> <br> <br>} <br> <br> <br>void ServiceStop( ) <br>{ <br>    RPC_STATUS status; <br> <br>    ReportStatusToSCMgr( <br>        SERVICE_STOP_PENDING,  // service state <br>        NO_ERROR,              // exit code <br>        3000);                 // wait hint <br> <br>    status = RpcMgmtIsServerListening( NULL ); <br>    printf( TEXT("RpcMgmtIsServerListening returned 0x%x\n"), status); <br> <br>    if ( status == RPC_S_OK ) <br>        RpcMgmtStopServerListening( NULL ); <br> <br>} <br> <br>/*********************************************************************/ <br>/*                 MIDL allocate and free                            */ <br>/*********************************************************************/ <br> <br>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) <br>{ <br>    return(malloc(len)); <br>} <br> <br>void __RPC_USER midl_user_free(void __RPC_FAR * ptr) <br>{ <br>    free(ptr); <br>} <br> <br>/* end file nsserv.c */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

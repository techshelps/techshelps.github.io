<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOGS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5377"></a>DIALOGS.C</h2>
<pre><code><br>//----------------------------------------------------------------------------- <br>// This is a part of the Microsoft Source Code Samples.  <br>// Copyright 1993 - 1998 Microsoft Corporation. <br>// All rights reserved.  <br>//   <br>// This source code is only intended as a supplement to  <br>// Microsoft Development Tools and/or WinHelp documentation. <br>// See these sources for detailed information regarding the  <br>// Microsoft samples programs. <br>//----------------------------------------------------------------------------- <br> <br>/****************************************************************************\ <br>*  dialogs.c -- sample program demonstrating Windows Sockets APIs. <br>* <br>*  Handles the dialog boxes for the WSOCK sample. <br>* <br>****************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; /* atoi */ <br>#include &lt;windows.h&gt; <br>#include "wsock.h" <br> <br>extern u_short portno; /* Which tcp port are we going to use? */ <br>extern char szBuff[80]; <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION: GetTcpPort(HWND, UINT, UINT, LONG) <br>* <br>*    PURPOSE: dialog callback procedure.  Allows the user to enter the <br>*             tcp port number, or a service name. <br>* <br>*\***************************************************************************/ <br> <br>LRESULT APIENTRY GetTcpPort( <br>        HWND hDlg,                /* window handle of the dialog box */ <br>        UINT message,             /* type of message                 */ <br>        UINT wParam,              /* message-specific information    */ <br>        LONG lParam) <br>{ <br> <br>   switch (message) { <br>      case WM_INITDIALOG:                     /* message: initialize dialog box */ <br>        SetFocus( GetDlgItem( hDlg, IDD_EDIT)); <br>        return (TRUE); <br> <br>      case WM_COMMAND: {                    /* message: received a command */ <br>        switch(LOWORD(wParam)) { <br>            case IDOK:                      /* "OK" box selected?          */ <br>            { <br>               GetDlgItemText( hDlg, IDD_EDIT, szBuff, 80); <br>               if ((portno = atoi(szBuff)) == 0) <br>                  EndDialog( hDlg, 2 ); <br>               else <br>                  EndDialog( hDlg, 1 ); <br>            } <br>            break; <br> <br>         case IDCANCEL: /* System menu close command? */ <br>            EndDialog(hDlg, 0);           /* Exits the dialog box        */ <br>            break; <br> <br>         default: <br>           return FALSE; <br>         } <br>                return (TRUE); <br>      } <br>    }   /* switch message */ <br> <br>    return (FALSE);                           /* Didn't process a message    */ <br>        UNREFERENCED_PARAMETER(lParam); <br>} <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION: GetHostName(HWND, UINT, UINT, LONG) <br>* <br>*    PURPOSE: dialog callback procedure.  Allows the user to enter the <br>*             the host name.  Used for menu item "Check Host Name" and <br>*             also for menu item "Connect". <br>* <br>*\***************************************************************************/ <br> <br>LRESULT APIENTRY GetHostName( <br>        HWND hDlg,                /* window handle of the dialog box */ <br>        UINT message,             /* type of message                 */ <br>        UINT wParam,              /* message-specific information    */ <br>        LONG lParam) <br>{ <br> <br>    switch (message) { <br>       case WM_INITDIALOG:                     /* message: initialize dialog box */ <br>         SetFocus( GetDlgItem( hDlg, IDD_EDIT)); <br>         return (TRUE); <br>       case WM_COMMAND: {                     /* message: received a command */ <br>          switch(LOWORD(wParam)) { <br>            case IDOK:          /* "OK" box selected?        */ <br>             { <br>              GetDlgItemText( hDlg, IDD_EDIT, szBuff, 80); <br>              EndDialog(hDlg, TRUE);          /* Exits the dialog box        */ <br>             } <br>             break; <br>             case IDCANCEL:     /* System menu close command? */ <br>              EndDialog(hDlg, FALSE);         /* Exits the dialog box        */ <br>              break; <br>             default: <br>              return FALSE; <br>           } <br>        return (TRUE); <br>      } <br>    }   /* switch message */ <br> <br>    return (FALSE);                           /* Didn't process a message    */ <br>        UNREFERENCED_PARAMETER(lParam); <br>} <br>/**************************************************************************** <br>* <br>*    FUNCTION: About(HWND, UINT, UINT, LONG) <br>* <br>*    PURPOSE: dialog callback procedure for "about" box. <br>* <br>*\***************************************************************************/ <br> <br>LRESULT APIENTRY About( <br>        HWND hDlg,                /* window handle of the dialog box */ <br>        UINT message,             /* type of message                 */ <br>        UINT wParam,              /* message-specific information    */ <br>        LONG lParam) <br>{ <br>     switch (message) { <br>        case WM_COMMAND:                         /* message: received a command */ <br>          if (LOWORD(wParam) == IDOK             /* "OK" box selected?          */ <br>                || LOWORD(wParam) == IDCANCEL) { /* System menu close command?  */ <br>                        EndDialog(hDlg, TRUE);   /* Exits the dialog box        */ <br>          return (TRUE);        /* WM_COMMAND */ <br>     } <br>     break; <br>   } /* End switch message */ <br>   return (FALSE);                            /* Didn't process a message    */ <br>        UNREFERENCED_PARAMETER(lParam); <br>} <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION: DisplayHostEnt(HWND, UINT, UINT, LONG) <br>* <br>*    PURPOSE: dialog callback procedure.  Displays the information <br>*             returned by gethostbyname() (HOSTENT structure). <br>* <br>*\***************************************************************************/ <br> <br>LRESULT APIENTRY DisplayHostEnt( <br>        HWND hDlg,                /* window handle of the dialog box */ <br>        UINT message,             /* type of message                 */ <br>        UINT wParam,              /* message-specific information    */ <br>        LONG lParam) <br>{ <br> <br>   DWORD ret; <br>   switch (message) { <br>        /* <br>        *   Initialize dialog box <br>        */ <br>        case WM_INITDIALOG: <br>                { <br>                int count = 0; <br> <br>                SetWindowText( GetDlgItem( hDlg, IDD_HOSTNAME),  (LPCTSTR)phe-&gt;h_name); <br> <br>                while (phe-&gt;h_aliases[count] != NULL) { <br>                        SendDlgItemMessage(hDlg, IDD_LBALIAS, LB_ADDSTRING, 0, (LPARAM)(phe-&gt;h_aliases[count])); <br>                        count++; <br>                        } <br> <br>                count = 0; <br> <br>                /* <br>                *   Enumerate all the hosts IP addresses. <br>                */ <br>                while (phe-&gt;h_addr_list[count] != NULL) { <br>                    sprintf( szBuff, "%u.%u.%u.%u", <br>                    (unsigned char) phe-&gt;h_addr_list[count][0], <br>                    (unsigned char) phe-&gt;h_addr_list[count][1], <br>                    (unsigned char) phe-&gt;h_addr_list[count][2], <br>                    (unsigned char) phe-&gt;h_addr_list[count][3]); <br> <br>                    count++; <br> <br>                    /* <br>                    *   Fill the dialog box.. <br>                    */ <br>                    if ((ret = SendDlgItemMessage(hDlg, IDD_LBADDR, LB_ADDSTRING, 0, (LPARAM)(LPCTSTR)szBuff)) == LB_ERR) <br>                       MessageBox(hDlg, szBuff, "Couldn't add address..", MB_OK); <br>                    } <br> <br>                } /* while( more IP addresses ) */ <br>           return (TRUE);       /* WM_INITDIALOG */ <br> <br>        /* <br>        *   Received a command message <br>        */ <br>        case WM_COMMAND: <br>                if (LOWORD(wParam) == IDOK) { <br>                   EndDialog(hDlg, TRUE);             /* Exits the dialog box        */ <br>                   return TRUE; <br>                } <br>                return FALSE;   /* WM_COMMAND */ <br>    }   /* switch message */ <br> <br>    return (FALSE);                                   /* Didn't process a message    */ <br>        UNREFERENCED_PARAMETER(lParam); <br>} /* DisplayHostEnt */ <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION: GetSendString(HWND, UINT, UINT, LONG) <br>* <br>*    PURPOSE: dialog callback procedure.  Allows the user to enter a <br>*             string to be sent to the connected remote host. <br>* <br>*\***************************************************************************/ <br> <br>LRESULT APIENTRY GetSendString( <br>        HWND hDlg,                /* window handle of the dialog box */ <br>        UINT message,             /* type of message                 */ <br>        UINT wParam,              /* message-specific information    */ <br>        LONG lParam) <br>{ <br> <br>    switch (message) { <br>    case WM_INITDIALOG:                     /* message: initialize dialog box */ <br>        SetFocus( GetDlgItem( hDlg, IDD_EDIT)); <br>        return (TRUE); <br>    case WM_COMMAND: {                     /* message: received a command */ <br>          switch(LOWORD(wParam)) { <br>            case IDOK:          /* "OK" box selected?        */ <br>             { <br> <br>              /* <br>              *   Store string in szBuff (global buffer) <br>              */ <br>              GetDlgItemText( hDlg, IDD_EDIT, szBuff, 80); <br>              EndDialog(hDlg, TRUE);          /* Exits the dialog box        */ <br>             } <br>             break; <br>             case IDCANCEL:     /* System menu close command? */ <br>              EndDialog(hDlg, FALSE);         /* Exits the dialog box        */ <br>              break; <br>             default: <br>              return FALSE; <br>           } <br>        return (TRUE); <br>      } <br>    }   /* switch message */ <br> <br>    return (FALSE);                           /* Didn't process a message    */ <br>        UNREFERENCED_PARAMETER(lParam); <br>} /* GetString */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

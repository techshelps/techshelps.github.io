<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5356"></a>README.TXT</h2>
<pre><code>Simple IP samples.  <br>----------------- <br> <br>simples.c: <br>---------- <br> <br>This is a very simple-minded TCP/UDP server. It listens on a specified port <br>for client connections. When a client connects, the server receives data, <br>echoes it back to the client and closes the connection. <br> <br>Usage: <br>simples -p &lt;protocol&gt; -e &lt;endpoint&gt; -i &lt;interface&gt; <br> <br>Where, <br> Protocol is one of TCP or UDP, <br> <br> Endpoint is the port number to listen on, <br> <br> Interface is the IP address to bind to (for multihomed machines this can be <br>   specified. Machines with just one network interface will not need this <br>   parameter, typically). <br> <br> <br>Note: <br>---- <br> <br>There are differences in the way TCP and UDP "servers" can be written. For <br>TCP, the paradigm of bind(), listen() and accept() is widely implemented.  <br>For UDP , however, there are two things to consider: <br> <br>    1. listen() or accept() do not work on a UDP socket. There are APIs <br>that are oriented towards connection establishment, and are not applicable <br>to datagram protocols. To implement a UDP server, a process only needs to <br>do recvfrom() on the socket that is bound to a well-known port. Clients <br>will send datagrams to this port, and the server can process these. <br> <br>2. Since there is no connection esablished, the server must treat each <br>datagram separately. <br> <br> <br>simplec.c <br>--------- <br> <br>A simple TCP/UPD client application. It connects to a specified IP address and <br>port and sends a small message. It can send only one message, or loop for a <br>specified number of iterations, sending data to the server and receiving a <br>response. <br> <br>Usage: <br>simplec -p &lt;protocol&gt; -n &lt;server&gt; -e &lt;endpoint&gt; -l &lt;iterations&gt; <br> <br>Where, <br> Protocol is TCP or UDP. <br> Server is the IP address/ name of the server <br> Endpoint is the port number the server is listening on <br> iterations specifies how many messages to send.  <br>  <br> '-l' without any arguments will cause the client to send &amp; receive  messages  <br> until interrupted by Ctrl-C. <br> This option *will not* work against simples.exe as the TCP server. This is <br> because simples.exe closes the socket after one transaction. You will need <br> something like the overlap sample which keeps the socket open indefinitely. <br> <br> <br> <br> <br>Note: <br>---- <br>As explained for simples.c, there is no concept of a connection in UDP <br>communications. However, we can use connect() on a UDP socket. This <br>establishes the remote (IPaddr, port) to used when sending a datagram. <br>Thus, we can use send() instead of sendto() on this socket. <br> <br>This makes the code exactly the same for UDP and TCP sockets. However, it <br>must be realized that this is still connectionless datagram traffic for <br>UDP sockets, and must be treated as such. <br> <br> <br>ioctl.c <br>------- <br> <br>This is a TCP-only server that shows how to use select() in a Win32 console <br>application. The server creates a socket to listen() on, and makes it <br>non-blocking with ioctlsocket(), and then calls select(). <br>When a client connects to this server, the server multiplexes between the new <br>connection and the original listening socket, again using select().  <br>As soon as a new connection is established, the server breaks the connection <br>with the first client. <br> <br>Usage: (same as simples) <br> <br>This sample illustrates the point that select() is not very useful in Win32 <br>applications, since it is difficult to keep track of every open socket and <br>test it for readiness when select() returns. <br> <br>Applications should use WSAAsyncSelect for GUI-based event <br>selection, or Overlapped I/O and native Win32 wait functions to achieve the <br>same effect as select. </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SOCKSRV.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5274"></a>SOCKSRV.H</h2>
<pre><code><br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   socksrv.h <br>// <br>//  PURPOSE:  Definitions and prototypes for socksrv.c <br>// <br> <br>#include &lt;windows.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;wsipx.h&gt; <br>#include "commdef.h" <br> <br>#define MAXIMUM_NUMBER_OF_CLIENTS   64 <br>#define MAXIMUM_NUMBER_OF_WORKERS   32 <br>#define FILE_SIZE ((1024*1024*8)-CLIENT_OUTBOUND_BUFFER_MAX) <br> <br>#define SIXTY_FOUR_K    (64*1024) <br>#define SIXTEEN_K       (16*1024) <br>DWORD InitialBuffer[SIXTY_FOUR_K/sizeof(DWORD)]; <br>#define NUMBER_OF_WRITES ((FILE_SIZE+CLIENT_OUTBOUND_BUFFER_MAX)/SIXTY_FOUR_K) <br> <br>#define CLIENT_CONNECTED    0x00000001 <br>#define CLIENT_DONE         0x00000002 <br> <br>typedef struct _PER_CLIENT_DATA { <br>    SOCKET Socket; <br>    OVERLAPPED Overlapped; <br>    CLIENT_IO_BUFFER IoBuffer; <br>    CHAR OutboundBuffer[CLIENT_OUTBOUND_BUFFER_MAX]; <br>    DWORD Flags; <br>    HANDLE hEvent; <br>} PER_CLIENT_DATA, *PPER_CLIENT_DATA; <br> <br>typedef struct _PER_THREAD_DATA { <br>    DWORD TotalTransactions; <br>    DWORD TotalBytesTransferred; <br>} PER_THREAD_DATA, *PPER_THREAD_DATA; <br> <br>PER_THREAD_DATA ThreadData[MAXIMUM_NUMBER_OF_WORKERS]; <br>PER_CLIENT_DATA ClientData[MAXIMUM_NUMBER_OF_CLIENTS]; <br>BOOL fVerbose; <br>BOOL fTcp; <br>DWORD dwNumberOfClients; <br>DWORD dwNumberOfWorkers; <br>DWORD dwConcurrency; <br>DWORD dwWorkIndex; <br>SYSTEM_INFO SystemInfo; <br>HANDLE CompletionPort; <br>DWORD dwActiveClientCount; <br>HANDLE hBenchmarkComplete; <br>HANDLE hBenchmarkStart; <br>DWORD StartTime; <br>DWORD EndTime; <br>HANDLE hFile; <br> <br>DWORD <br>WINAPI <br>Random ( <br>    DWORD nMaxValue <br>    ); <br> <br> <br>VOID <br>WINAPI <br>ShowUsage( <br>    VOID <br>    ); <br> <br>VOID <br>WINAPI <br>ParseSwitch( <br>    CHAR chSwitch, <br>    int *pArgc, <br>    char **pArgv[] <br>    ); <br> <br>BOOL <br>WINAPI <br>CreateNetConnections( <br>    VOID <br>    ); <br> <br>BOOL <br>WINAPI <br>CreateWorkers( <br>    VOID <br>    ); <br> <br>DWORD <br>WINAPI <br>WorkerThread( <br>    LPVOID WorkContext <br>    ); <br> <br>VOID <br>WINAPI <br>CompleteBenchmark( <br>    VOID <br>    ); <br> <br>VOID <br>WINAPI <br>SortTheBuffer( <br>    LPDWORD Destination, <br>    LPDWORD Source, <br>    int DwordCount <br>    ); <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

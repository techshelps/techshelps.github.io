<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DSTRERR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5331"></a>DSTRERR.C</h2>
<pre><code>/****************************************************************************\ <br>*  dstrerr.c -- sample program demonstrating NWLink. <br>* <br>*       Microsoft Developer Support <br>*       Copyright 1992 - 1998 Microsoft Corporation <br>* <br>*  Demonstrates basic sockets programming with the Windows Sockets API <br>*  using the NWLink transport. <br>*  <br>****************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "externs.h" <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  dos_net_strerror( LPSTR p ) <br>* <br>*    PURPOSE:   This will return an far char * to an error message  <br>*               string preceded by the user string passed in and  <br>*               seperated by a :.  The user string cannot be more  <br>*               than xx bytes in length.  <br>* <br>*    ARGUMENTS:LPSTR=&gt; user string to print first <br>* <br>* RETURNS:   LPCSTR  =&gt; user string + error string <br>* <br>*\***************************************************************************/ <br>LPCSTR dos_net_strerror(LPSTR p) <br>{ <br>    int error = 0; <br>    static char return_string[256]; <br> <br>    /* <br>    *   Get the error number from the system  <br>    */ <br>     <br>    error = h_errno; <br> <br>    /* <br>    *   Build the string to return  <br>    */ <br> <br>    sprintf(return_string, "%s :(%d)%s", p, error, get_error_text(error)); <br> <br>    return (LPSTR)return_string; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

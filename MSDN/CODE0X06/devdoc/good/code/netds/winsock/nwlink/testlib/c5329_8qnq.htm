<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NETPRINT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5336"></a>NETPRINT.C</h2>
<pre><code>/****************************************************************************\ <br>*  wperror.c -- sample program library demonstrating NWLink. <br>* <br>*       Microsoft Developer Support <br>*       Copyright 1992 - 1998 Microsoft Corporation <br>* <br>*  Demonstrates basic sockets programming with the Windows Sockets API <br>*  using the NWLink transport. <br>*  <br>****************************************************************************/ <br>#include &lt;stdio.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;wsipx.h&gt; <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  print_network_num( char *addrp) <br>* <br>*    PURPOSE:   Print out a given network number <br>*  <br>*    ARGUMENTS:addrp   Pointer to the network address <br>*                <br>* RETURNS:   nothing. <br>* <br>*\***************************************************************************/ <br>void print_network_num(char *addrp) <br>{ <br> <br>    printf("%02X%02X%02X%02X", <br>        (unsigned char)*addrp, <br>        (unsigned char)*(addrp + 1), <br>        (unsigned char)*(addrp + 2), <br>        (unsigned char)*(addrp + 3)); <br> <br>    return; <br>} <br> <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  print_node_num( char *addrp) <br>* <br>*    PURPOSE:   Print out a given node number <br>*  <br>*    ARGUMENTS:addrp   Pointer to the network address <br>*                <br>* RETURNS:   nothing. <br>* <br>*\***************************************************************************/ <br>void print_node_num(char *addrp) <br>{ <br> <br>    printf("%02X%02X%02X%02X%02X%02X", <br>        (unsigned char)*addrp, <br>        (unsigned char)*(addrp + 1), <br>        (unsigned char)*(addrp + 2), <br>        (unsigned char)*(addrp + 3), <br>        (unsigned char)*(addrp + 4), <br>        (unsigned char)*(addrp + 5)); <br> <br>    return; <br>} <br> <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  print_socket_num( char *addrp) <br>* <br>*    PURPOSE:   Print out a given socket number <br>*  <br>*    ARGUMENTS:addrp   Pointer to the network address <br>*                <br>* RETURNS:   nothing. <br>* <br>*\***************************************************************************/ <br>void print_socket_num(char *addrp) <br>{ <br> <br>    printf("%02X%02X", <br>        (unsigned char)*addrp, <br>        (unsigned char)*(addrp + 1)); <br> <br>    return; <br>} <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  print_netaddr( char *addrp, char *prestr, char *poststr) <br>* <br>*    PURPOSE:   Print out a given network address <br>*  <br>*    ARGUMENTS:addrp   = Ptr to the network address <br>*prestr  = String to print before addr <br>*poststr = String to print after addr <br>*                <br>* RETURNS:   nothing. <br>* <br>*\***************************************************************************/ <br>void print_netaddr(char *addrp, char *prestr, char *poststr) <br>{ <br> <br>    if (prestr) <br>        printf(prestr); <br> <br> <br>    print_network_num(addrp); <br>    printf(" - "); <br>    print_node_num(addrp+4); <br>    printf(" - "); <br>    print_socket_num(addrp+10); <br> <br> <br>    if (poststr) <br>        printf(poststr); <br> <br>    return; <br>} <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  print_saddr( PSOCKADDR_IPX p ) <br>* <br>*    PURPOSE:   Prints out contents of the SOCKADDR_IPX struct passed in. <br>*  <br>*    ARGUMENTS:PSOCKADDR_IPX =&gt; SOCKADDR_IPX struct to dump. <br>*                <br>* RETURNS:   nothing. <br>* <br>*\***************************************************************************/ <br>void print_saddr(PSOCKADDR_IPX p) <br>{ <br>    printf("address family = %d  address = ", p-&gt;sa_family); <br>    print_netaddr(p-&gt;sa_netnum, NULL, NULL); <br>} <br>  <br>/**************************************************************************** <br>* <br>*    FUNCTION:  print_wsa( LPWSADATA w ) <br>* <br>*    PURPOSE:   Dumps out the contents of a WSA structure. <br>*  <br>*    ARGUMENTS:umps out the contents of a WSA structure. <br>*                <br>* RETURNS:   nothing. <br>* <br>*\***************************************************************************/ <br>void print_wsa(LPWSADATA w) <br>{ <br>    printf("  Version =         %ld\n", w-&gt;wVersion); <br>    printf("  High Version =    %ld\n", w-&gt;wHighVersion); <br>    printf("  Description =     %s\n", w-&gt;szDescription); <br>    printf("  System Status =   %s\n", w-&gt;szSystemStatus); <br>    printf("  Max sockets =     %d\n", w-&gt;iMaxSockets); <br>    printf("  Max UPD dg size = %d\n", w-&gt;iMaxUdpDg); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TESTLIB.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5337"></a>TESTLIB.H</h2>
<pre><code>/* <br>*   Globals for test programs  <br>*/ <br> <br>extern int     verbose;     <br>extern int     Socket_Type; <br>extern int     Protocol; <br>extern int     Sleep_Time; <br>extern int     Backlog; <br>extern int     No_Broadcast; <br>extern int     No_Loop; <br>extern int     Send_Length; <br>extern int     Receive_Length; <br>extern int     Local_Packet_Type; <br>extern int     Send_Packet_Type; <br>extern int     Filter_Packet_Type; <br>extern int     Local_Address_Family; <br>extern int     Remote_Address_Family; <br>extern char    Local_Network_Number[]; <br>extern char    Local_Node_Number[]; <br>extern char    Local_Socket_Number[]; <br>extern char    Remote_Network_Number[]; <br>extern char    Remote_Node_Number[]; <br>extern char    Remote_Socket_Number[]; <br>  <br>/*  <br>*    Command line and network address print functions <br>*/ <br> <br> /*   Parses command line and fills in above global variables  */ <br>extern void parse_cmd_line(int, char **); <br> <br> /*   Prints full network address (network, node, and socket)  */ <br>extern void print_netaddr(LPSTR, LPSTR, LPSTR); <br> <br> /*   Prints first 4 bytes of address passed in  */ <br>extern void print_network_num(LPSTR); <br> <br> /*   Prints first 6 bytes of address passed in */ <br>extern void print_node_num(LPSTR); <br> <br> /*   Prints first 2 bytes of address passed in */ <br>extern void print_socket_num(LPSTR); <br>  <br> /*   Prints contents of a SOCKADDR_IPX struct */ <br>extern void print_saddr(PSOCKADDR_IPX); <br> <br> /*   Prints contents of a WSAData struct */ <br>extern void print_wsa(LPWSADATA); <br> <br> <br>/*  <br>*    Error print functions  <br>*/ <br> <br> /*   Returns string with passed in string + description of last h_errno */ <br>extern LPCSTR dos_net_strerror(LPSTR); <br> <br> /* Prints given string followed by description of last h_errno to stdout */ <br>extern void  dos_net_perror(LPSTR); <br> <br> /* Displays message box with given string followed by description of <br> *   last h_errno.  Allows user to specify if messagebox should be  <br> *   task modal (last param should be 1 if so) <br> */ <br>extern void win_net_perror(HWND, LPSTR, int); <br> <br> /* Given h_errno, returns descriptive text */ <br>extern LPCSTR get_error_text(int); <br> <br> /* Makes sure that a buffer is filled with only the character specified. */ <br>extern int mem_check(LPSTR, UCHAR, int); </code></pre>
<p>&nbsp;</p></body>
</HTML>

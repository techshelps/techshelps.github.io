<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETERROR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5334"></a>GETERROR.C</h2>
<pre><code>/****************************************************************************\ <br>*  geterror.c -- sample program demonstrating NWLink. <br>* <br>*       Original code from Micro Computer Systems, Inc. <br>*       Copyright(c) 1992  All Rights Reserved. <br>*       Microsoft Developer Support <br>*       Copyright 1992 - 1998 Microsoft Corporation <br>* <br>*  Demonstrates basic sockets programming with the Windows Sockets API <br>*  using the NWLink transport. <br>*  <br>****************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "externs.h" <br> <br>#define WSAERRGAP1 28 <br>#define WSAERRGAP2 19 <br>  <br>extern ERROR_STRUCT errlist[]; <br> <br>/**************************************************************************** <br>* <br>*    FUNCTION:  get_error_text( int error ) <br>* <br>*    PURPOSE:   Gets the text string explaining the error number passed in. <br>*       If the error number is 0, or is not found, a respective <br>*message is returned. <br>* <br>*    ARGUMENTS:interror number to look up <br>*                 <br>* RETURNS:   LPCSTR=&gt; char string having error message <br>* <br>*\***************************************************************************/ <br>LPCSTR get_error_text(int error) <br>{ <br>    int search = 0; <br> <br> <br>    /* <br>    *   No error <br>    */ <br> <br>    if (!error) <br>        return (LPCSTR)msg_no_error; <br> <br>    /*  <br>    *   Search through our array of error number / string pairs <br>    *   until we find a matching error number or get to the end <br>    *   of our list.  If we found a matching error number,  <br>    *   return a LPSTR to the corresponding string. <br>    */ <br> <br>    while (errlist[search].errstr) { <br>        if (error == errlist[search].errnum) <br>            return errlist[search].errstr; <br>        search++; <br>    } <br> <br>    /* <br>    * If we didn't have the error in our list, return unkown  <br>    */ <br> <br>    return (LPCSTR)msg_unknown_error; <br>} <br> <br>     </code></pre>
<p>&nbsp;</p></body>
</HTML>

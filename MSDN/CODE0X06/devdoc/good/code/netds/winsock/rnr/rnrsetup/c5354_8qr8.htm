<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RNRSETUP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5354"></a>RNRSETUP.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1992 Microsoft Corporation <br> <br>Module Name: <br> <br>    RnrClnt.c <br> <br>Abstract: <br> <br>    Setup program for installing/removing the "EchoExample" service. <br> <br>--*/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;winsock2.h&gt; <br>#include &lt;nspapi.h&gt; <br> <br>WSADATA WsaData; <br> <br>#ifndef NS_NTDS <br>#define NS_NTDS 9999 <br>#endif <br>// <br>// GUID for Echo-Example created with uuidgen: <br>//     "47da8500-96a1-11cd-901d-204c4f4f5020" <br>// <br> <br>GUID ServiceGuid = { 0x47da8500, 0x96a1, 0x11cd, 0x90, 0x1d, <br>                     0x20, 0x4c, 0x4f, 0x4f, 0x50, 0x20 }; <br> <br>#define ECHO_SERVICE_TYPE_NAME "EchoExample" <br>#define ECHO_SERVICE_SAPID     999 <br>#define ECHO_SERVICE_TCPPORT   999 <br>#define RNR_SERVICE_NAME       "RnrSvc" <br>#define RNR_DISPLAY_NAME       "RnrSampleService" <br> <br>void <br>DoServiceSetup( <br>    char * Path <br>    ) <br>{ <br>    SC_HANDLE ServiceManagerHandle; <br>    SC_HANDLE ServiceHandle; <br>    LPSTR KeyName = "System\\CurrentControlSet\\Services\\EventLog\\System\\RnrSvc"; <br>    HKEY RnrKey; <br>    LONG err; <br>    DWORD Disposition; <br> <br>    // <br>    //  Create the service. <br>    // <br> <br>    ServiceManagerHandle = OpenSCManager( NULL, <br>                                          NULL, <br>                                          STANDARD_RIGHTS_REQUIRED <br>                                          | SC_MANAGER_CREATE_SERVICE ); <br> <br>    if( ServiceManagerHandle == NULL ) { <br>        printf( "OpenSCManager failed: %ld\n", GetLastError() ); <br>        exit(1); <br>    } <br> <br>    ServiceHandle = CreateService( ServiceManagerHandle, <br>                                   RNR_SERVICE_NAME, <br>                                   RNR_DISPLAY_NAME, <br>                                   GENERIC_READ | GENERIC_WRITE, <br>                                   SERVICE_WIN32_OWN_PROCESS, <br>                                   SERVICE_DEMAND_START, <br>                                   SERVICE_ERROR_NORMAL, <br>                                   Path, <br>                                   NULL, <br>                                   NULL, <br>                                   NULL, <br>                                   NULL, <br>                                   NULL ); <br> <br>    if( ServiceHandle == NULL ) { <br>        printf( "CreateService failed: %ld\n", GetLastError() ); <br>        CloseServiceHandle( ServiceManagerHandle ); <br>        exit(1); <br>    } <br> <br>    CloseServiceHandle( ServiceHandle ); <br>    CloseServiceHandle( ServiceManagerHandle ); <br> <br>    printf( "%s created with path %s\n", <br>            RNR_SERVICE_NAME, <br>            Path ); <br> <br>    // <br>    //  Add the data to the EventLog's registry key so that the <br>    //  log insertion strings may be found by the Event Viewer. <br>    // <br> <br>    err = RegCreateKeyEx( HKEY_LOCAL_MACHINE, <br>                          KeyName, <br>                          0, <br>                          NULL, <br>                          REG_OPTION_NON_VOLATILE, <br>                          KEY_WRITE, <br>                          NULL, <br>                          &amp;RnrKey, <br>                          &amp;Disposition ); <br> <br>    if( err != 0 ) { <br>        printf( "RegCreateKeyEx failed: %ld\n", err ); <br>        exit(1); <br>    } <br> <br>    err = RegSetValueEx( RnrKey, <br>                         "EventMessageFile", <br>                         0, <br>                         REG_EXPAND_SZ, <br>                         Path, <br>                         strlen( Path ) + 1 ); <br> <br>    if( err == 0 ) { <br>        DWORD Value; <br> <br>        Value = EVENTLOG_ERROR_TYPE <br>                | EVENTLOG_WARNING_TYPE <br>                | EVENTLOG_INFORMATION_TYPE; <br> <br>        err = RegSetValueEx( RnrKey, <br>                             "TypesSupported", <br>                             0, <br>                             REG_DWORD, <br>                             (CONST BYTE *)&amp;Value, <br>                             sizeof(Value) ); <br>    } <br> <br>    RegCloseKey( RnrKey ); <br> <br>    if( err != 0 ) { <br>        printf( "RegSetValueEx failed: %ld\n", err ); <br>        exit(1); <br>    } <br> <br>    exit(0); <br>} <br> <br>void _CRTAPI1 <br>main ( <br>    int argc, <br>    char *argv[] <br>    ) <br>{ <br>    INT err; <br> <br>    WSASERVICECLASSINFO ServiceClassInfo; <br>    WSANSCLASSINFO      lpNSClassInfo[6]; <br> <br>    DWORD Value1 = 1 ; <br>    DWORD SapValue = ECHO_SERVICE_SAPID ; <br>    DWORD TcpPortValue = ECHO_SERVICE_TCPPORT ; <br>    DWORD operation = SERVICE_ADD_TYPE; <br> <br>    // <br>    // Initilize the Windows Sockets DLL. <br>    // <br> <br>    err = WSAStartup( 0x0202, &amp;WsaData ); <br>    if ( err == SOCKET_ERROR ) { <br>        printf( "WSAStartup() failed: %ld\n", GetLastError( ) ); <br>        exit(1); <br>    } <br> <br>    // <br>    // Parse command-line arguments. <br>    // <br> <br>    if (argc &gt; 2) { <br>        printf( "usage: rnrsetup [/ADD | /DEL | /SVC:path]\n") ; <br>        exit(1); <br>    } <br> <br>    if (argc == 2) <br>    { <br>        if ( _strnicmp( argv[1], "/add", 4 ) == 0 ) <br>        { <br>            printf( "\nAdding service types to Rnr name spaces.\n" ); <br>        } <br>        else if ( _strnicmp( argv[1], "/delete", 4 ) == 0 ) <br>        { <br>            err = WSARemoveServiceClass( &amp;ServiceGuid ); <br> <br>            WSACleanup(); <br> <br>            if ( err != NO_ERROR ) <br>            { <br>                printf( "\nWSARemoveServiceClass failed: %ld\n", <br>                        GetLastError( ) ); <br>                exit(1); <br>            } <br> <br>            printf( "\nWSARemoveServiceClass succeeded\n" ); <br> <br>            exit(0); <br>        } <br>        else if ( _strnicmp( argv[1], "/svc:", 5 ) == 0 ) <br>        { <br>            printf( "\nAdding service entry to service control manager.\n" ); <br>            DoServiceSetup( strchr( argv[1], ':' ) + 1 ); <br>            printf( "Adding service types to Rnr name spaces.\n" ); <br>        } <br>        else <br>        { <br>            printf( "usage: rnrsetup [/ADD | /DEL | /SVC:path]\n") ; <br>            exit(1); <br>        } <br>    } <br> <br>    // <br>    // Set up information to pass to NSPInstallServiceClass() or <br>    // NSPRemoveServiceClass() to add or delete this <br>    // service type. <br>    // <br> <br>    ServiceClassInfo.lpServiceClassId = &amp;ServiceGuid; <br>    ServiceClassInfo.lpszServiceClassName = ECHO_SERVICE_TYPE_NAME; <br>    ServiceClassInfo.dwCount = 6; <br>    ServiceClassInfo.lpClassInfos = lpNSClassInfo; <br> <br>    // <br>    // - - - SAP provider setup - - - <br>    // <br>    // The first value tells SAP that this is a connection-oriented <br>    // service. <br>    // <br>    lpNSClassInfo[0].lpszName = SERVICE_TYPE_VALUE_CONN ; <br>    lpNSClassInfo[0].dwNameSpace = NS_SAP ; <br>    lpNSClassInfo[0].dwValueType = REG_DWORD ; <br>    lpNSClassInfo[0].dwValueSize = 4 ; <br>    lpNSClassInfo[0].lpValue     = &amp;Value1 ; <br> <br>    // <br>    // Next, give SAP the object type to use when broadcasting the <br>    // service name. <br>    // <br>    lpNSClassInfo[1].lpszName = SERVICE_TYPE_VALUE_SAPID ; <br>    lpNSClassInfo[1].dwNameSpace = NS_SAP ; <br>    lpNSClassInfo[1].dwValueType = REG_DWORD ; <br>    lpNSClassInfo[1].dwValueSize = sizeof(DWORD) ; <br>    lpNSClassInfo[1].lpValue     = &amp;SapValue ; <br> <br>    // <br>    // - - - TCPIP provider setup - - - <br>    // <br>    // Tell the TCPIP name space provider that we will be using TCP <br>    // port 0x999. <br>    // <br>    lpNSClassInfo[2].lpszName = SERVICE_TYPE_VALUE_TCPPORT ; <br>    lpNSClassInfo[2].dwNameSpace = NS_DNS ; <br>    lpNSClassInfo[2].dwValueType = REG_DWORD ; <br>    lpNSClassInfo[2].dwValueSize = sizeof(DWORD) ; <br>    lpNSClassInfo[2].lpValue     = &amp;TcpPortValue ; <br> <br>    // <br>    // - - - NTDS provider setup - - - <br>    // <br>    // The first value tells SAP that this is a connection-oriented <br>    // service. <br>    // <br>    lpNSClassInfo[3].lpszName = SERVICE_TYPE_VALUE_CONN ; <br>    lpNSClassInfo[3].dwNameSpace = NS_NTDS ; <br>    lpNSClassInfo[3].dwValueType = REG_DWORD ; <br>    lpNSClassInfo[3].dwValueSize = 4 ; <br>    lpNSClassInfo[3].lpValue     = &amp;Value1 ; <br> <br>    // <br>    // Next, give SAP the object type to use when broadcasting the <br>    // service name. <br>    // <br>    lpNSClassInfo[4].lpszName = SERVICE_TYPE_VALUE_SAPID ; <br>    lpNSClassInfo[4].dwNameSpace = NS_NTDS ; <br>    lpNSClassInfo[4].dwValueType = REG_DWORD ; <br>    lpNSClassInfo[4].dwValueSize = sizeof(DWORD) ; <br>    lpNSClassInfo[4].lpValue     = &amp;SapValue ; <br> <br>    // <br>    // Tell the NTDS name space provider that we will be using TCP <br>    // port 0x999. <br>    // <br>    lpNSClassInfo[5].lpszName = SERVICE_TYPE_VALUE_TCPPORT ; <br>    lpNSClassInfo[5].dwNameSpace = NS_NTDS ; <br>    lpNSClassInfo[5].dwValueType = REG_DWORD ; <br>    lpNSClassInfo[5].dwValueSize = sizeof(DWORD) ; <br>    lpNSClassInfo[5].lpValue     = &amp;TcpPortValue ; <br> <br>    // <br>    // Finally, call WSAInstallServiceClass to actually perform the operation. <br>    // <br> <br>    err = WSAInstallServiceClass( &amp;ServiceClassInfo ); <br> <br>    WSACleanup(); <br> <br>    if ( err != NO_ERROR ) <br>    { <br>        printf( "WSAInstallServiceClass failed: %ld\n", GetLastError( ) ); <br>        exit(1); <br>    } <br> <br>    printf( "WSAInstallServiceClass succeeded\n" ); <br> <br>    exit(0); <br> <br>} // main <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

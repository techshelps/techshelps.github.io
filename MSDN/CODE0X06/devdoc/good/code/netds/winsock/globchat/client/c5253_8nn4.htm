<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SELECT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5260"></a>SELECT.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:    select.c <br>// <br>//  PURPOSE:   Displays the "Select" dialog box <br>// <br>//  FUNCTIONS: <br>//    CmdSelect          - Displays the "Select" dialog box <br>//    Select             - Processes messages for "Select" dialog box. <br>//    MsgSelectInit      - Sets up event message notification for socket <br>//    MsgSelectDataReady - Process socket event message notifications <br>//    MsgSelectCommand   - Process WM_COMMAND message sent to the select box. <br>//    CmdSelectDone      - Free the select box and related data. <br>//    CmdSelectOK        - Request Peer session <br>//    CmdSelectList      - Enables/Disables OK button <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#include &lt;wsipx.h&gt;              // IPX Sockets defs <br>#include &lt;wsnetbs.h&gt; <br>#include &lt;nspapi.h&gt; <br>#include "globals.h"            // prototypes specific to this application <br> <br>LRESULT CALLBACK Select(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgSelectInit(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgSelectCommand(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgSelectDataReady(HWND, UINT, WPARAM, LPARAM); <br>LRESULT CmdSelectDone(HWND, WORD, WORD, HWND); <br>LRESULT CmdSelectOK(HWND, WORD, WORD, HWND); <br>LRESULT CmdSelectList(HWND, WORD, WORD, HWND); <br> <br>// Select dialog message table definition. <br>MSD rgmsdSelect[] = <br>{ <br>    {WM_COMMAND,    MsgSelectCommand}, <br>    {WM_INITDIALOG, MsgSelectInit}, <br>    {MW_DATAREADY,  MsgSelectDataReady} <br>}; <br> <br>MSDI msdiSelect = <br>{ <br>    sizeof(rgmsdSelect) / sizeof(MSD), <br>    rgmsdSelect, <br>    edwpNone <br>}; <br> <br>// Select dialog command table definition. <br>CMD rgcmdSelect[] = <br>{ <br>    {IDOK,     CmdSelectOK}, <br>    {IDCANCEL, CmdSelectDone}, <br>    {SD_LIST,  CmdSelectList} <br>}; <br> <br>CMDI cmdiSelect = <br>{ <br>    sizeof(rgcmdSelect) / sizeof(CMD), <br>    rgcmdSelect, <br>    edwpNone <br>}; <br> <br>// Module specific "globals"  Used when a variable needs to be <br>// accessed in more than on handler function. <br> <br>HFONT hFontCopyright; <br> <br>// <br>//  FUNCTION: CmdSelect(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Displays the "Select" dialog box <br>// <br>//  PARAMETERS: <br>//    hwnd      - Window handle <br>//    wCommand  - IDM_Select (unused) <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl  - NULL (unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>//    To process the IDM_Select message, call DialogBox() to display the <br>//    Select dialog box. <br> <br>LRESULT CmdSelect(HWND hwnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    char outtext[80]; <br> <br>    if (DialogBox(hInst, "SelectBox", hwnd, (DLGPROC)Select)) <br>    { <br>        // reset socket event messaging to point at the main window <br>        if (WSAAsyncSelect(MySock.sock, hwnd, MW_DATAREADY, FD_READ | FD_CLOSE) == SOCKET_ERROR) <br>        { <br>            // I hate it when this happens! <br>            wsprintf(outtext, GetStringRes(IDS_ERR_WSAASYNCSELECT), <br>                     WSAGetLastError()); <br>            MessageBox(hwnd, outtext, NULL, MB_OK); <br>            return 0; <br>        } <br> <br>        // We've got a connection...set up menu and title bar <br>        EnableMenuItem(GetMenu(hwnd), IDM_END_CHAT, MF_ENABLED); <br>        EnableMenuItem(GetMenu(hwnd), IDM_DISCONNECT_SERVER, MF_ENABLED); <br>        EnableMenuItem(GetMenu(hwnd), IDM_CONNECT, MF_GRAYED); <br> <br>        wsprintf(outtext, GetStringRes(IDS_CHATTING_REMOTE), MySock.name, peername); <br>        SetWindowText(hwnd, outtext); <br>        // we're now ready to rumble <br>    } <br>    else <br>    { <br>        // clean up <br>        closesocket(MySock.sock); <br>        EnableMenuItem(GetMenu(hwnd), IDM_END_CHAT, MF_GRAYED); <br>        EnableMenuItem(GetMenu(hwnd), IDM_DISCONNECT_SERVER, MF_GRAYED); <br>        EnableMenuItem(GetMenu(hwnd), IDM_CONNECT, MF_ENABLED); <br>        SetWindowText(hwnd, szTitle); <br>    } <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: Select(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Processes messages for "Select" dialog box. <br>// <br>//  PARAMETERS: <br>//    hdlg - window handle of the dialog box <br>//    wMessage - type of message <br>//    wparam - message-specific information <br>//    lparam - message-specific information <br>// <br>//  RETURN VALUE: <br>//    TRUE - message handled <br>//    FALSE - message not handled <br>// <br>//  COMMENTS: <br>// <br>//     Display version information from the version section of the <br>//     application resource. <br>// <br>//     Wait for user to click on "Ok" button, then close the dialog box. <br>// <br> <br>LRESULT CALLBACK Select(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    return DispMessage(&amp;msdiSelect, hdlg, uMessage, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: MsgSelectInit(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Sets up socket message notifications <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handing the message. <br>//    uMessage - The message number. (unused). <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - message handled. <br>// <br>//  COMMENTS: <br>//    Uses WSAAsyncSelect() to have socket event notifications sent <br>//    to the Select Dialog Window <br>// <br> <br>LRESULT MsgSelectInit(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br> <br>    // Center the dialog over the application window <br>    CenterWindow(hdlg, GetWindow(hdlg, GW_OWNER)); <br> <br>    if(WSAAsyncSelect(MySock.sock, hdlg, MW_DATAREADY, FD_READ | FD_CLOSE) != 0) <br>    { <br>        // ERROR  do something <br>    } <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: MsgSelectDataReady(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Processes incoming messages from server <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handing the message. <br>//    uMessage - The message number. (unused). <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - message handled. <br>// <br>//  COMMENTS: <br>//    Receive message and then process command in message header <br>// <br> <br>LRESULT MsgSelectDataReady(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br> <br>    int iIndex; <br>    char displaytext[128]; <br> <br>    // First check to see if connection was closed <br>    if(LOWORD(lparam) == FD_CLOSE) <br>    { <br>        // Connection closed kill our socket <br>        closesocket(MySock.sock); <br> <br>        MessageBox(hdlg, GetStringRes(IDS_ERR_CONNECTION_DROPPED), NULL, MB_OK); <br> <br>        // Fix menus <br>        EnableMenuItem(GetMenu(GetParent(hdlg)), IDM_CONNECT, MF_ENABLED); <br>        EnableMenuItem(GetMenu(GetParent(hdlg)), IDM_DISCONNECT_SERVER, MF_GRAYED); <br>        EnableMenuItem(GetMenu(GetParent(hdlg)), IDM_END_CHAT, MF_GRAYED); <br> <br>        EndDialog(hdlg, FALSE); <br>        return 0; <br>    } <br> <br>    // receive the message <br>    if(!recvdatamessage(&amp;MySock, &amp;xferbuf)) <br>    { <br>        return 0; <br>    } <br> <br>    // We've got our whole message!  Now switch on the command flag <br>    switch(xferbuf.hdr.command) <br>    { <br>        case REGISTER_NAME: <br>            // Add name to list box <br>            SendMessage(GetDlgItem(hdlg, SD_LIST), LB_ADDSTRING, 0, (LPARAM)&amp;xferbuf.data); <br>            break; <br> <br>        case DEREGISTER_NAME: <br>            // Remove name from list box <br>            if((iIndex = SendMessage(GetDlgItem(hdlg, SD_LIST), <br>                                     LB_FINDSTRING, <br>                                     (UINT)-1, (LPARAM)&amp;xferbuf.data)) != LB_ERR) <br>            { <br>                // found the index to the item...delete it! <br>                SendMessage(GetDlgItem(hdlg, SD_LIST), LB_DELETESTRING, iIndex, 0); <br>            } <br>            break; <br> <br>        case REQUEST_SESSION: <br>          // Someone is asking us for a chat session <br>            lstrcpy(displaytext, xferbuf.data); <br> <br>            lstrcat(displaytext, <br>                    GetStringRes(IDS_REQUESTS_CHAT)); <br> <br>            if(MessageBox(hdlg, displaytext, <br>                          GetStringRes(IDS_SESSION_REQUEST), MB_OKCANCEL) == IDOK) <br>            { <br>                // save the name of the peer <br>                lstrcpy(peername, xferbuf.data); <br>                // We've got ourselves a session!  Send response <br>                xferbuf.hdr.command = SESSION_REQUEST_RESPONSE; <br>                *(xferbuf.data) = 1;    // Flag to say we accept this session <br>                senddatamessage(MySock.sock, &amp;xferbuf); <br>                EndDialog(hdlg, TRUE);  // kill the dialog <br>                return 0; <br>            } <br>            else <br>            { <br>                // We're obviously to stuck up to accept a session <br>            // from this lowlife...send the denial message <br>                xferbuf.hdr.command = SESSION_REQUEST_RESPONSE; <br>                *(xferbuf.data) = 0;    // Flag to deny session <br>                xferbuf.hdr.length = HDRSIZE; <br>                senddatamessage(MySock.sock, &amp;xferbuf); <br>                return 0; <br>            } <br>            break;  // should never get here <br> <br>        case SESSION_REQUEST_RESPONSE: <br>          // Someone responded to our session request! <br> <br>            if (MySock.status != SOCKSTAT_REQSESSION) <br>            { <br>                return 0;  // we didn't expect this...drop packet <br>            } <br>            if (*xferbuf.data == 1) <br>            { <br>                // Oh JOY!  Acceptance by our peer! <br>                EndDialog(hdlg, TRUE); <br>                return 0; <br>            } <br>            else <br>            { <br>                // Depression...nobody loves us: reenable listbox so we <br>                // can just get rejected again. <br>                EnableWindow(GetDlgItem(hdlg, SD_LIST), TRUE); <br>                EnableWindow(GetDlgItem(hdlg, IDOK), TRUE); <br>                return 0; <br>            } <br> <br> <br>        default: <br>            return 0; // This is unexpected... drop packet <br>    } <br> <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: MsgSelectCommand(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Process WM_COMMAND message sent to the Select box. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handing the message. <br>//    uMessage - The message number. (unused). <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - message handled. <br>// <br>//  COMMENTS: <br>//    Uses this DipsCommand function defined in wndproc.c combined <br>//    with the cmdiSelect structure defined in this file to handle <br>//    the command messages for the Select dialog box. <br>// <br> <br>LRESULT MsgSelectCommand(HWND   hwnd, <br>                         UINT   uMessage, <br>                         WPARAM wparam, <br>                         LPARAM lparam) <br>{ <br>    return DispCommand(&amp;cmdiSelect, hwnd, wparam, lparam); <br>} <br> <br>// <br>//  FUNCTION: CmdSelectDone(HWND, WORD, HWND) <br>// <br>//  PURPOSE: Free the Select box and related data. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handling the command. <br>//    wCommand - The command to be handled (unused). <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    Calls EndDialog to finish the dialog session. <br>// <br> <br>LRESULT CmdSelectDone(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    if (hFontCopyright) <br>       DeleteObject(hFontCopyright); <br> <br>    EndDialog(hdlg, FALSE);          // Exit the dialog <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: CmdSelectOK(HWND, WORD, HWND) <br>// <br>//  PURPOSE: Requests session with peer <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handling the command. <br>//    wCommand - The command to be handled (unused). <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    Sends session request message to selected peer <br>// <br> <br>LRESULT CmdSelectOK(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    int iIndex; <br> <br>    // Get selected peer name <br>    iIndex = SendMessage(GetDlgItem(hdlg, SD_LIST), LB_GETCURSEL, 0, 0); <br>    SendMessage(GetDlgItem(hdlg, SD_LIST), LB_GETTEXT, iIndex, (LPARAM)&amp;peername); <br> <br>    // Build session request message <br>    MySock.status = SOCKSTAT_REQSESSION; <br>    xferbuf.hdr.signature = MYSIGNATURE; <br>    xferbuf.hdr.length = REALLEN(peername) + HDRSIZE; <br>    xferbuf.hdr.command = REQUEST_SESSION; <br>    lstrcpy(xferbuf.data, peername); <br>    senddatamessage(MySock.sock, &amp;xferbuf);       // Send it! <br> <br>    EnableWindow(GetDlgItem(hdlg, SD_LIST), FALSE); <br>    EnableWindow(GetDlgItem(hdlg, IDOK), FALSE); <br> <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: CmdSelectList(HWND, WORD, HWND) <br>// <br>//  PURPOSE: Enables OK button <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handling the command. <br>//    wCommand - The command to be handled (unused). <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    When a peer is selected, enable OK button <br>// <br> <br>LRESULT CmdSelectList(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    if (wNotify == LBN_SELCHANGE)  // A peer has been selected! <br>    { <br>        EnableWindow(GetDlgItem(hdlg, IDOK), TRUE);     // Enable that button! <br>    } <br>    return TRUE; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBALS.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5264"></a>GLOBALS.H</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// PURPOSE: <br>//    Contains declarations for all globally scoped names in the program. <br>// <br> <br>#include &lt;nspapi.h&gt; <br>#include &lt;wsipx.h&gt; <br> <br>//------------------------------------------------------------------------- <br>// Product identifier string defines <br> <br>#define APPNAME       GlobChat <br> <br> <br>//------------------------------------------------------------------------- <br>// Functions for handling main window messages.  The message-dispatching <br>// mechanism expects all message-handling functions to have the following <br>// prototype: <br>// <br>//     LRESULT FunctionName(HWND, UINT, WPARAM, LPARAM); <br> <br>LRESULT MsgCreate(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgSize(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgTimer(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgCommand(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgDestroy(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgConnected(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgDataready(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//------------------------------------------------------------------------- <br>// Functions for handling main window commands--ie. functions for <br>// processing WM_COMMAND messages based on the wParam value. <br>// The message-dispatching mechanism expects all command-handling <br>// functions to have the following prototype: <br>// <br>//     LRESULT FunctionName(HWND, WORD, WORD, HWND); <br> <br>LRESULT CmdExit(HWND, WORD, WORD, HWND); <br>LRESULT CmdAbout(HWND, WORD, WORD, HWND); <br> <br>//------------------------------------------------------------------------- <br>//  Globchat socket message definitions <br>// <br>typedef struct _MSGHDR            // Message header <br>{ <br>    BYTE            signature;    // Identifies start of a message <br>    WORD            length;       // size of message <br>    BYTE            command;      // message command <br>} MSGHDR, *LPMSGHDR; <br> <br> <br>typedef struct _DATAMSG            // Message = message header + data <br>{ <br>    MSGHDR          hdr; <br>    BYTE            data[0x8000];  // data <br>} DATAMSG, *LPDATAMSG; <br> <br>DATAMSG xferbuf; <br> <br>#define HDRSIZE      sizeof(MSGHDR)    // Message header size <br> <br>#define REALLEN(x)   lstrlen(x) + 1    // REALLEN will now count terminating NULL of x <br> <br>//------------------------------------------------------------------------- <br>// My personal SOCKDATA structure for storing info on my sockets <br> <br>typedef struct _SOCKDATA <br>{ <br>    SOCKET           sock;           // socket handle <br>    int              status;         // Socket's status <br>    struct sockaddr  addr;           // Address structure <br>    char             reserved[10];   // Generic sockaddr struct is not big enough for all <br>                                     // addresses (namely netbios addresses) so adding some <br>                                     // space at the end. <br>    int              addrlen;        // Address length <br>    int              type;           // Socket type (from socket() call) <br>    int              protocol;       // protocol (from socket() call) <br>    int              currconnects;   // Number of current connections on this socket <br>    LPTSTR           lpProtocolName; // Pointer to protocol name socket is running on <br>    int              servsockindex;  // Index to array of server sockets <br>    SOCKET           peer;           // Associated peer socket which this socket is in session with <br>    char             name[16];       // User name <br>} SOCKDATA, *LPSOCKDATA; <br> <br>LPSOCKDATA ServerSockets;        // Listening (server) sockets <br>LPSOCKDATA ConnectedSockets;   // Accepted (client) sockets <br> <br>//  SOCKDATA structure status options <br>#define SOCKSTAT_INIT        1 <br>#define SOCKSTAT_LISTENING   2 <br>#define SOCKSTAT_ACCEPTING   3 <br>#define SOCKSTAT_CLOSED      4 <br>#define SOCKSTAT_CONNECTED   5 <br>#define SOCKSTAT_AVAILABLE   6 <br>#define SOCKSTAT_INSESSION   7 <br>#define SOCKSTAT_REQSESSION  8 <br> <br>//------------------------------------------------------------------------- <br>// Global function prototypes. <br> <br>BOOL InitApplication(HINSTANCE, int); <br>BOOL CenterWindow(HWND, HWND); <br>void AtoH(char *, char *, int); <br>unsigned char BtoH(char); <br>void deregistername(char *); <br>BOOL senddatamessage(SOCKET, LPDATAMSG); <br>BOOL recvdatamessage (LPSOCKDATA, LPDATAMSG); <br>void UpdateClientList(char *, int, char *); <br>BOOL MakeServSock(HWND, LPSOCKDATA, LPPROTOCOL_INFO); <br>LPTSTR GetStringRes (int id); <br> <br>// Callback functions.  These are called by Windows. <br> <br>LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//------------------------------------------------------------------------- <br>// Command ID definitions.  These definitions are used to associate menu <br>// items with commands. <br> <br>// File menu <br>#define IDM_EXIT    1000 <br> <br>// Help menu <br>#define IDM_ABOUT   1100 <br> <br>// Status List boxes <br>#define ID_PROTOCOLBOX 400 <br>#define ID_CLIENTBOX   401 <br> <br>//------------------------------------------------------------------------- <br>// String Table ID definitions. <br> <br>#define IDS_APPNAME         1 <br>#define IDS_DESCRIPTION     2 <br>#define IDS_AVAILABLE       3 <br>#define IDS_SESSION         4 <br>#define IDS_SESSION_SETUP   5 <br>#define IDS_LANGVERINFO     6 <br> <br> <br>//------------------------------------------------------------------------- <br>//  About dialog defines. <br> <br>#define IDD_VERFIRST    100 <br>#define IDD_VERLAST     104 <br> <br>//------------------------------------------------------------------------- <br>// Application Specific Messages. <br> <br>#define MW_CONNECTED    200 <br>#define MW_DATAREADY    201 <br> <br>#define SAPTIMER        300 <br> <br>//-------------------------------------------------------------------------- <br>//  Other constants <br> <br>#define NWCHATID        0x5607      // 0x0756 (network order) was assigned by Novell <br>                                    // for this specific application <br>#define DNSCHATID       0x555       // TCP well known port <br> <br>// Globchat socket message commands <br>#define REGISTER_NAME             1 <br>#define XFER_DATA                 2 <br>#define REQUEST_SESSION           3 <br>#define SESSION_REQUEST_RESPONSE  4 <br>#define SESSION_CLOSE             5 <br>#define DEREGISTER_NAME           6 <br> <br>#define MYSIGNATURE               0xCC   // First byte in every message header <br> <br>//------------------------------------------------------------------------- <br>// Global variable declarations. <br> <br>extern HINSTANCE hInst;          // The current instance handle <br>extern char      szAppName[];    // The name of this application <br>extern char      szTitle[];      // The title bar text <br>HANDLE ConnectHeap; <br>LPPROTOCOL_INFO lpProtBuf; <br>SOCKET SAPSocket; <br>SOCKADDR_IPX SAPSockAddr, SAPDestSockAddr; <br>int NextFree, MaxConnects; <br>char aliasbuf[512]; <br>int sizealiasbuf; <br>HWND hwndProtocolList; <br>HWND hwndClientList; <br> <br> <br>#define hwndMDIClient NULL <br> <br> <br>//------------------------------------------------------------------------- <br>// Message and command dispatch infrastructure.  The following type <br>// definitions and functions are used by the message and command dispatching <br>// mechanism and do not need to be changed. <br> <br>    // Function pointer prototype for message handling functions. <br>typedef LRESULT (*PFNMSG)(HWND,UINT,WPARAM,LPARAM); <br> <br>    // Function pointer prototype for command handling functions. <br>typedef LRESULT (*PFNCMD)(HWND,WORD,WORD,HWND); <br> <br>    // Enumerated type used to determine which default window procedure <br>    // should be called by the message- and command-dispatching mechanism <br>    // if a message or command is not handled explicitly. <br>typedef enum <br>{ <br>   edwpNone,            // Do not call any default procedure. <br>   edwpWindow,          // Call DefWindowProc. <br>   edwpDialog,          // Call DefDlgProc (This should be used only for <br>                        // custom dialogs - standard dialog use edwpNone). <br>   edwpMDIChild,        // Call DefMDIChildProc. <br>   edwpMDIFrame         // Call DefFrameProc. <br>} EDWP;                // Enumeration for Default Window Procedures <br> <br>    // This structure maps messages to message handling functions. <br>typedef struct _MSD <br>{ <br>    UINT   uMessage; <br>    PFNMSG pfnmsg; <br>} MSD;                 // MeSsage Dispatch structure <br> <br>    // This structure contains all of the information that a window <br>    // procedure passes to DispMessage in order to define the message <br>    // dispatching behavior for the window. <br>typedef struct _MSDI <br>{ <br>    int  cmsd;          // Number of message dispatch structs in rgmsd <br>    MSD *rgmsd;         // Table of message dispatch structures <br>    EDWP edwp;          // Type of default window handler needed. <br>} MSDI, FAR *LPMSDI;   // MeSsage Dipatch Information <br> <br>    // This structure maps command IDs to command handling functions. <br>typedef struct _CMD <br>{ <br>    WORD   wCommand; <br>    PFNCMD pfncmd; <br>} CMD;                 // CoMmand Dispatch structure <br> <br>    // This structure contains all of the information that a command <br>    // message procedure passes to DispCommand in order to define the <br>    // command dispatching behavior for the window. <br>typedef struct _CMDI <br>{ <br>    int  ccmd;          // Number of command dispatch structs in rgcmd <br>    CMD *rgcmd;         // Table of command dispatch structures <br>    EDWP edwp;          // Type of default window handler needed. <br>} CMDI, FAR *LPCMDI;   // CoMmand Dispatch Information <br> <br>    // Message and command dispatching functions.  They look up messages <br>    // and commands in the dispatch tables and call the appropriate handler <br>    // function. <br>LRESULT DispMessage(LPMSDI, HWND, UINT, WPARAM, LPARAM); <br>LRESULT DispCommand(LPCMDI, HWND, WPARAM, LPARAM); <br> <br>    // Message dispatch information for the main window <br>extern MSDI msdiMain; <br>    // Command dispatch information for the main window <br>extern CMDI cmdiMain; <br> <br> <br> <br>//------------------------------------------------------------------------- <br>// Version string definitions--Leave these alone. <br> <br>#define SZRCOMPANYNAME "CompanyName" <br>#define SZRDESCRIPTION "FileDescription" <br>#define SZRVERSION     "FileVersion" <br>#define SZRAPPNAME     "InternalName" <br>#define SZRCOPYRIGHT   "LegalCopyright" <br>#define SZRTRADEMARK   "LegalTrademarks" <br>#define SZRPRODNAME    "ProductName" <br>#define SZRPRODVER     "ProuctVersion" <br> <br>//------------------------------------------------------------------------- <br>// SAP structure definition for a single entry SAP packet. <br> <br>typedef struct _SAPHDR <br>{ <br>    WORD     operation;    // 1 = Req., 2 = Resp., 3 = Get Nearest Req, 4 = Get Nearest Resp. <br>    WORD     servicetype;  // kind of service <br>    char     name[48];         // Name of Server <br>    char     network[4];      // network number <br>    char     node[6];         // node number <br>    char     socket[2];       // socket number <br>    WORD     hops;         // Number of hops to server <br>} SAPHDR, *LPSAPHDR;  // SAP structure, pointer to SAP structure <br> <br>SAPHDR SAPData; <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

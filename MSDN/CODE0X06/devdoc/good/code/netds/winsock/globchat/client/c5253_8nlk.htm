<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INIT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5258"></a>INIT.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   init.c <br>// <br>//  PURPOSE:   Performs application and instance specific initialization. <br>// <br>//  FUNCTIONS: <br>//    InitApplication() - Initializes window data and registers window. <br>// <br>//  COMMENTS: <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;wsipx.h&gt;              // IPX Sockets defs <br>#include &lt;wsnetbs.h&gt; <br>#include &lt;nspapi.h&gt; <br>#include "globals.h"            // prototypes specific to this application <br> <br>HINSTANCE hInst;                // current instance <br> <br>char szAppName[9];              // The name of this application <br>char szTitle[40];               // The title bar text <br> <br>char szConnectName[16]; <br>char szConnectServer[16]; <br> <br>BOOL i_should_sleep = TRUE; <br> <br>// <br>//  FUNCTION: InitApplication(HINSTANCE, int) <br>// <br>//  PURPOSE: Initializes window data and registers window class. <br>// <br>//  PARAMETERS: <br>//    hInstance - The handle to the instance of this application that <br>//                is currently being executed. <br>//    nCmdShow  - Specifies how the main window is to be displayed. <br>// <br>//  RETURN VALUE: <br>//    TRUE  - Success <br>//    FALSE - Initialization failed <br>// <br>//  COMMENTS: <br>// <br>//    This function is called at application initialization time.  It <br>//    performs initialization tasks for the current application instance. <br>//    Unlike Win16, in Win32, each instance of an application must register <br>//    window classes. <br>// <br>//    In this function, we initialize a window class by filling out a data <br>//    structure of type WNDCLASS and calling the Windows RegisterClass() <br>//    function.  Then we create the main window and show it. <br>// <br>// <br> <br>BOOL InitApplication(HINSTANCE hInstance, int nCmdShow) <br>{ <br>    WNDCLASS  wc; <br>    HWND      hwnd; // Main window handle. <br>    WORD      wVersionRequested; <br>    WSADATA   wsaData; <br> <br>    // Load the application name and description strings. <br> <br>    LoadString(hInstance, IDS_APPNAME, szAppName, sizeof(szAppName)); <br>    LoadString(hInstance, IDS_DESCRIPTION, szTitle, sizeof(szTitle)); <br> <br>    // Save the instance handle in static variable, which will be used in <br>    // many subsequence calls from this application to Windows. <br> <br>    hInst = hInstance; // Store instance handle in our global variable <br> <br>    // Fill in window class structure with parameters that describe the <br>    // main window. <br> <br>    wc.style         = CS_HREDRAW | CS_VREDRAW; // Class style(s). <br>    wc.lpfnWndProc   = (WNDPROC)WndProc;        // Window Procedure <br>    wc.cbClsExtra    = 0;                       // No per-class extra data. <br>    wc.cbWndExtra    = 0;                       // No per-window extra data. <br>    wc.hInstance     = hInstance;               // Owner of this class <br>    wc.hIcon         = LoadIcon (hInstance, szAppName); // Icon name from .RC <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); // Cursor <br>    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1); // Default color <br>    wc.lpszMenuName  = szAppName;               // Menu name from .RC <br>    wc.lpszClassName = szAppName;               // Name to register as <br> <br>    // Register the window class and return FALSE if unsuccesful. <br> <br>    if (!RegisterClass(&amp;wc)) <br>    { <br>        return FALSE; <br>    } <br> <br>    // Create a main window for this application instance. <br>    hwnd = CreateWindow(szAppName,           // See RegisterClass() call <br>                        szTitle,             // Text for window title bar <br>                        WS_OVERLAPPEDWINDOW, // Window style <br>                        CW_USEDEFAULT, 0,    // Use default positioning <br>                        CW_USEDEFAULT, 0,    // Use default size <br>                        NULL,                // Overlapped has no parent <br>                        NULL,                // Use the window class menu <br>                        hInstance,           // This instance owns this window <br>                        NULL                 // Don't need data in WM_CREATE <br>    ); <br> <br>    // If window could not be created, return "failure" <br>    if (!hwnd) <br>        return FALSE; <br> <br>    // Make the window visible; update its client area; and return "success" <br>    ShowWindow(hwnd, nCmdShow);  // Show the window <br>    UpdateWindow(hwnd);          // Sends WM_PAINT message <br> <br>    // Link in Winsock DLL <br>    wVersionRequested = MAKEWORD(1,1); <br>    if (WSAStartup(wVersionRequested, &amp;wsaData) != 0) <br>    { <br>        return FALSE; <br>    } <br> <br>    return TRUE;                 // We succeeded... <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

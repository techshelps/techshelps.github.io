<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRACE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5316"></a>TRACE.H</h2>
<pre><code>/*++ <br> <br>     Copyright c 1996 Intel Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br>Module Name: <br> <br>    SPI.CPP : <br> <br>Abstract: <br> <br>    This file defines a macros for tracing and the function prototypes for the <br>    actual output functions. If the symbol TRACING is not defined  all the <br>    macros expands to ((void)0). <br> <br>    There are three global variables that control the behavior of the tracing <br>    macros/functions.  debugLevel is a 32 bit bitmask that determine controls <br>    what level of debug messages is output. iTraceDestination controls whether <br>    the debug output goes to a file or to the aux device. if iTraceDestination <br>    == TRACE_TO_FILE szTraceFile must contain the filename. <br> <br> <br>--*/ <br> <br>#ifndef __TRACE_H__ <br>#define __TRACE_H__ <br> <br>extern <br>#if defined(__cplusplus) <br>"C" <br>#endif  // defined(__cplusplus) <br>VOID PrintDebugString(char *format, ...); <br> <br>// <br>// defines for where the debug output should go <br>// <br>#define TRACE_TO_FILE    0 <br>#define TRACE_TO_AUX     1 <br> <br>// the size of the string buffers used as arg to wsprintf <br>// in trace.c <br>#define TRACE_OUTPUT_BUFFER_SIZE  1024 <br> <br>// Debug level masks <br>#define DBG_TRACE       0x00000001 <br>#define DBG_WARN        0x00000002 <br>#define DBG_ERR         0x00000004 <br>#define DBG_MEMORY      0x00000008 <br>#define DBG_LIST        0x00000010 <br>#define DBG_FUNCTION    0x00000020 <br> <br>#if defined(TRACING) <br> <br>extern <br>#if defined(__cplusplus) <br>"C" <br>#endif  // defined(__cplusplus) <br>DWORD debugLevel; <br> <br>// <br>// This macro creates debug output depending on the debug mask "sev" and <br>// calls PrintDebugString output function. PrintDebugString makes the <br>// descision on whether the output goes into a file or to the aux device. <br>// <br>#define  DEBUGF(sev, var_args)                                                \ <br>{                                                                             \ <br>   if ((sev) &amp; debugLevel) {                                                  \ <br>      switch (sev) {                                                          \ <br>         case DBG_TRACE:                                                      \ <br>            PrintDebugString("-| TRACE   :: ");                               \ <br>            PrintDebugString(" %s : %d |-\n", __FILE__, __LINE__ );           \ <br>            PrintDebugString var_args ;                                       \ <br>         break;                                                               \ <br>         case DBG_WARN:                                                       \ <br>            PrintDebugString("-| WARNING :: ");                               \ <br>            PrintDebugString(" %s : %d |-\n", __FILE__, __LINE__ );           \ <br>            PrintDebugString var_args ;                                       \ <br>            break;                                                            \ <br>         case DBG_ERR:                                                        \ <br>            PrintDebugString("-| ERROR   :: ");                               \ <br>            PrintDebugString(" %s : %d |-\n", __FILE__, __LINE__ );           \ <br>            PrintDebugString var_args;                                        \ <br>            break;                                                            \ <br>        case DBG_MEMORY:                                                      \ <br>            PrintDebugString("-| MEMORY  :: ");                               \ <br>            PrintDebugString(" %s : %d |-\n", __FILE__, __LINE__ );           \ <br>            PrintDebugString var_args ;                                       \ <br>            break;                                                            \ <br>        case DBG_LIST:                                                        \ <br>            PrintDebugString("-| LIST    :: ");                               \ <br>            PrintDebugString(" %s : %d |-\n", __FILE__, __LINE__ );\ <br>            PrintDebugString var_args ;                                       \ <br>            break;                                                            \ <br>        case DBG_FUNCTION:                                                    \ <br>            PrintDebugString var_args;                                        \ <br>            break;                                                            \ <br>      }                                                                       \ <br>   }                                                                          \ <br>}                                                                             \ <br> <br> <br> <br>#define ALLOC_LOG( pointer, size)                                             \ <br>    DEBUGF( DBG_MEMORY ,("MEMORY %lX size %X Allocated \n",                   \ <br>                         (pointer),(size)))                                   \ <br> <br>#define DEALLOC_LOG(pointer, size)                                            \ <br>DEBUGF( DBG_MEMORY ,("MEMORY %lX size %X Deallocated \n",                     \ <br>                         (pointer),(size)))                                   \ <br> <br> <br>#define LIST_ADD_LOG(list, element)                                           \ <br>    DEBUGF( DBG_LIST ,("LIST %lX element %lX Added \n",                       \ <br>                       (list),(element)))                                     \ <br> <br>#define LIST_DEL_LOG(list, element)                                           \ <br>    DEBUGF( DBG_LIST ,("LIST %lX element %lX Deleted \n",                     \ <br>                       (list),(element)))                                     \ <br> <br>#define ENTER_FUNCTION(name)                                                  \ <br>DEBUGF( DBG_FUNCTION,name)                                \ <br> <br> <br>#define EXIT_FUNCTION(name)                                                   \ <br>DEBUGF( DBG_FUNCTION,name)                                \ <br> <br> <br>#else // TRACING <br>     // make sure that these are defined if tracing is turned off <br>#define DEBUGF(sev, va)                     ((void)0) <br>#define LIST_ADD_LOG(list, element)         ((void)0) <br>#define LIST_DEL_LOG(list, element)         ((void)0) <br>#define ENTER_FUNCTION(name)                ((void)0) <br>#define EXIT_FUNCTION(name)                 ((void)0) <br>#define ALLOC_LOG( pointer, size)                                             \ <br>    DEBUGF( DBG_MEMORY ,("",                                                  \ <br>                         (pointer),(size)))                                   \ <br> <br>#define DEALLOC_LOG(pointer, size)\ <br>    DEBUGF( DBG_MEMORY ,("",\ <br>                         (pointer),(size)))  \ <br> <br>#endif // TRACING <br> <br>#endif // __TRACE_H__ <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

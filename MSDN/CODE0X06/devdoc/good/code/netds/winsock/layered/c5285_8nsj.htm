<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCATITEM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5293"></a>DCATITEM.CPP</h2>
<pre><code>/*++ <br> <br>     Copyright (c) 1996 Intel Corporation <br>     Copyright 1996 - 1998 Microsoft Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>Module Name: <br> <br>    dcatitem.cpp <br> <br>Abstract: <br> <br>    This  file  contains  the  class  implementation for the PROTO_CATALOG_ITEM <br>    class.   This  class  defines  the  interface  to  the  entries that can be <br>    retrieved from the protocol catalog. <br> <br>--*/ <br> <br> <br>#include "precomp.h" <br> <br>  <br>PROTO_CATALOG_ITEM::PROTO_CATALOG_ITEM() <br>/*++ <br> <br>Routine Description: <br> <br>    This  procedure  constructs  an empty PROTO_CATALOG_ITEM object.  The first <br>    method  invoked  after  this  constructor must be Initialize(). <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Implicitly  returns  a pointer to a newly created PROTO_CATALOG_ITEM object <br>    or NULL if there is a memory allocation failure. <br>--*/ <br>{ <br>    DEBUGF( <br>        DBG_TRACE, <br>        ("PROTO_CATALOG_ITEM constructor\n")); <br> <br>    // Simply initialize embedded pointer values for safety. <br>    m_LibraryPath[0] = '\0'; <br>    m_Provider = NULL; <br>m_ProviderCatalogEntry = NULL; <br>}  // PROTO_CATALOG_ITEM <br> <br> <br> <br> <br>  <br>INT <br>PROTO_CATALOG_ITEM::Initialize( <br>    IN  LPWSAPROTOCOL_INFOW  ProtoInfo <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    This  procedure initializes the protocol info part of the catalog item from <br>    the  values  supplied.  Values are copied from the structures passed by the <br>    caller,  so  the  caller  is  free  to  deallocate the passed structures on <br>    return. <br> <br>Arguments: <br> <br>    ProtoInfo    - Supplies  a reference to the fully initialized protocol info <br>                   structure describing this protocol. <br> <br>return Value: <br> <br>    The  function  returns ERROR_SUCCESS if successful, otherwise it returns an <br>    appropriate WinSock error code. <br> <br>--*/ <br>{ <br>    INT ReturnValue = ERROR_SUCCESS; <br>    INT BufferSize  = sizeof(m_LibraryPath); <br> <br>    // Copy ProtoInfo <br>    m_ProtoInfo = *ProtoInfo; <br> <br>    // Get the LibraryPath <br>    gUpCallTable.lpWPUGetProviderPath( <br>        &amp;ProtoInfo-&gt;ProviderId, <br>        (WCHAR*)&amp;m_LibraryPath, <br>        &amp;BufferSize, <br>        &amp;ReturnValue); <br> <br>    if (ERROR_SUCCESS != ReturnValue){ <br>        m_LibraryPath[0] = '\0'; <br>    } //if <br> <br>    return (ReturnValue); <br> <br>}  // Initialize <br> <br> <br> <br>  <br>PROTO_CATALOG_ITEM::~PROTO_CATALOG_ITEM() <br>/*++ <br> <br>Routine Description: <br> <br>    This  procedure  destroys  a  protocol catalog item, deallocating memory it <br>    owns.   It  is the caller's responsibility to remove the item from the list <br>    it  occupies  before  calling  this  procedure.   It  is  also the caller's <br>    responsibility  to unload and/or destroy any dprovider associated with this <br>    catalog item if appropriate. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br>    m_LibraryPath[0] = '\0'; <br>}  // ~PROTO_CATALOG_ITEM <br> <br> <br> <br>  <br>LPWSAPROTOCOL_INFOW <br>PROTO_CATALOG_ITEM::GetProtocolInfo() <br>/*++ <br> <br>Routine Description: <br> <br>    This  procedure  retrieves a reference to the protocol info associated with <br>    the  catalog  item.   Note  that  the  reference is to storage owned by the <br>    catalog item.  It is the caller's responsibility to make sure the reference <br>    is no longer used after the catalog item is destroyed. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Returns a pointer to the associated protocol info. <br>--*/ <br>{ <br>    assert(m_LibraryPath[0] != '\0'); <br>    return(&amp; m_ProtoInfo); <br>}  // GetProtocolInfo <br> <br> <br> <br>  <br>PWCHAR <br>PROTO_CATALOG_ITEM::GetLibraryPath() <br>/*++ <br> <br>Routine Description: <br> <br>    This    procedure   retrieves   a   reference   to   the   zero-terminated, <br>    fully-qualified  path  of  the library that is the service provider for the <br>    protocol  associated  with the catalog item.  Note that the reference is to <br>    storage  owned  by  the catalog item.  It is the caller's responsibility to <br>    make  sure  the  reference  is  no  longer  used  after the catalog item is <br>    destroyed. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Returns a pointer to the library path string. <br>--*/ <br>{ <br>    assert(m_LibraryPath[0] != '\0'); <br>    return(m_LibraryPath); <br>}  // GetLibraryPath <br> <br> <br> <br>  <br>VOID <br>PROTO_CATALOG_ITEM::SetProviderCatalogEntry( <br>    IN  PPROTO_CATALOG_ITEM  CatalogEntry <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    This procedure sets the PPROTO_CATALOG_ENTRY <br> <br>Arguments: <br> <br>    Provider - Supplies the new catalog entry reference. <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br>    if (m_ProviderCatalogEntry != NULL) { <br>        DEBUGF( <br>            DBG_WARN, <br>            ("Suspicious - overwriting a catalog entry reference\n")); <br>    } <br>    m_ProviderCatalogEntry = CatalogEntry; <br>}  // SetProviderCatalogEntry <br> <br>  <br>VOID <br>PROTO_CATALOG_ITEM::SetProvider( <br>    IN  PDPROVIDER  Provider <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    This procedure sets the DPROVIDER associated with a catalog entry. <br> <br>Arguments: <br> <br>    Provider - Supplies the new DPROVIDER reference. <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br>    if (m_Provider != NULL) { <br>        DEBUGF( <br>            DBG_WARN, <br>            ("Suspicious - overwriting a dprovider reference\n")); <br>    } <br>    m_Provider = Provider; <br>}  // SetProvider <br> <br> <br> <br> <br>  <br>PDPROVIDER <br>PROTO_CATALOG_ITEM::GetProvider() <br>/*++ <br> <br>Routine Description: <br> <br>    This  procedure  retrieves  a  reference to the DPROVIDER associated with a <br>    catalog  entry.  Note that the reference may be NULL if no provider has yet <br>    been loaded for this protocol. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Returns  the  current provider reference, or NULL if there is no associated <br>    provider. <br>--*/ <br>{ <br>    return(m_Provider); <br>}  // GetProvider <br> <br> <br>PPROTO_CATALOG_ITEM <br>PROTO_CATALOG_ITEM::GetProviderCatalogEntry() <br>/*++ <br> <br>Routine Description: <br> <br>    This  procedure  retrieves  a  reference to the protocol catalog entry associated with a <br>    catalog  entry.  Note that the reference may be NULL if no provider has yet <br>    been loaded for this protocol. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Returns  the  current provider catalog entry reference, or NULL if there is no associated <br>    provider. <br>--*/ <br>{ <br>    return(m_ProviderCatalogEntry); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

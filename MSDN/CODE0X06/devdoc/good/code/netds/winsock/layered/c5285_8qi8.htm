<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DSOCKET.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5300"></a>DSOCKET.CPP</h2>
<pre><code>/*++ <br> <br>     Copyright (c) 1996 Intel Corporation <br>     Copyright 1996 - 1998 Microsoft Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>Module Name: <br> <br>dsocket.cpp <br> <br>Abstract: <br> <br>This module contains the implemetation of the dsocket object used <br>by lsp.dll <br> <br>--*/ <br> <br>#include "precomp.h" <br> <br>LIST_ENTRY  DSOCKET::m_socket_list; <br>CRITICAL_SECTION DSOCKET::m_socket_list_lock; <br> <br>INT <br>DSOCKET::DSocketClassInitialize ( <br>    ) <br>{ <br>    InitializeCriticalSection (&amp;m_socket_list_lock); <br>    InitializeListHead (&amp;m_socket_list); <br>    return 0; <br>} <br> <br> <br>INT <br>DSOCKET::DSocketClassCleanup( <br>    ) <br>{ <br>    PLIST_ENTRY  ListMember; <br>    PDSOCKET     Socket; <br>    PDPROVIDER   Provider; <br>    SOCKET       ProviderSocket; <br>    INT          Errno; <br> <br>    //Kill all the open sockets <br>    ListMember = m_socket_list.Flink; <br> <br>    while (ListMember != &amp;m_socket_list){ <br>        Socket = CONTAINING_RECORD( <br>            ListMember, <br>            DSOCKET, <br>            m_list_linkage); <br>        ListMember = ListMember-&gt;Flink; <br> <br>        Socket-&gt;Remove (); <br>        Provider = Socket-&gt;GetDProvider(); <br>        ProviderSocket = Socket-&gt;GetProviderSocket(); <br> <br> <br>        Provider-&gt;WSPCloseSocket( <br>            ProviderSocket, <br>            &amp;Errno); <br> <br>        gUpCallTable.lpWPUCloseSocketHandle( <br>            Socket-&gt;GetSocketHandle(), <br>            &amp;Errno); <br>         <br>        delete(Socket); <br>    } //while <br> <br>    DeleteCriticalSection (&amp;m_socket_list_lock); <br>    return 0; <br>} <br> <br> <br>PDSOCKET <br>DSOCKET::FindDSocketFromProviderSocket ( <br>    SOCKET  s <br>    ) { <br>    PDSOCKET    Socket = NULL; <br>    PLIST_ENTRY ListMember; <br> <br>    EnterCriticalSection (&amp;m_socket_list_lock); <br>    ListMember = m_socket_list.Flink; <br> <br>    while (ListMember != &amp;m_socket_list){ <br>        PDSOCKET    Socket2 = CONTAINING_RECORD( <br>            ListMember, <br>            DSOCKET, <br>            m_list_linkage); <br>        ListMember = ListMember-&gt;Flink; <br>        if (Socket2-&gt;GetProviderSocket()==s) { <br>            Socket = Socket2;    <br>            break; <br>        } <br>    } <br>    LeaveCriticalSection (&amp;m_socket_list_lock); <br> <br>    return Socket; <br> <br>} <br> <br>  <br>DSOCKET::DSOCKET( <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    DSOCKET  object  constructor.   Creates and returns a DSOCKET object.  Note <br>    that  the  DSOCKET object has not been fully initialized.  The "Initialize" <br>    member function must be the first member function called on the new DSOCKET <br>    object. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br>    // Set our data members to known values <br>    m_provider          = NULL; <br>    m_socket_handle     = INVALID_SOCKET; <br>    m_catalog_entry_id  = NULL; <br>    m_provider_socket   = INVALID_SOCKET; <br>    m_completion_context = INVALID_SOCKET; <br>    m_async_events      = NULL; <br>    m_async_window      = NULL; <br>m_async_message     = NULL; <br>m_closing= FALSE; <br>} <br> <br> <br> <br>  <br>INT <br>DSOCKET::Initialize( <br>        IN PDPROVIDER Provider, <br>        IN SOCKET     ProviderSocket, <br>        IN DWORD      CatalogEntryId, <br>        IN SOCKET     SocketHandle <br>        ) <br>/*++ <br> <br>Routine Description: <br> <br>    Completes  the  initialization  of  the  DSOCKET object.  This must be the <br>    first  member  function  called  for  the  DSOCKET object.  This procedure <br>    should be called only once for the object. <br> <br>Arguments: <br> <br>    Provider - Supplies  a  reference  to  the DPROVIDER object associated with <br>               this DSOCKET object. <br> <br>    ProviderSocket - The socket handle returned from the lower level provider. <br> <br>    CatalogEntryId - The CatalogEntryId for the provider referenced by <br>                     m_provider. <br> <br>    SocketHandle        - The socket handle returned from WPUCreateSocketHandle(). <br> <br>Return Value: <br> <br>    The  function returns ERROR_SUCCESS if successful.  Otherwise it <br>    returns an appropriate WinSock error code if the initialization <br>    cannot be completed. <br>--*/ <br>{ <br>    // Store the provider and process object. <br>    m_provider = Provider; <br>    m_provider_socket = ProviderSocket; <br>    m_catalog_entry_id = CatalogEntryId; <br>    m_socket_handle = SocketHandle; <br> <br>    // Add this socket to the list of sockets. <br>    EnterCriticalSection(&amp;m_socket_list_lock); <br>    InsertHeadList( <br>        &amp;m_socket_list, <br>        &amp;m_list_linkage); <br>    LeaveCriticalSection(&amp;m_socket_list_lock); <br>    DEBUGF( DBG_TRACE, <br>            ("Initializing socket %X\n",this)); <br>    return(ERROR_SUCCESS); <br>} <br> <br>VOID <br>DSOCKET::Remove ( <br>    ) <br>{ <br>    EnterCriticalSection(&amp;m_socket_list_lock); <br>    RemoveEntryList(&amp;m_list_linkage); <br>    LeaveCriticalSection(&amp;m_socket_list_lock); <br>} <br> <br>  <br>DSOCKET::~DSOCKET() <br>/*++ <br> <br>Routine Description: <br> <br>    DSOCKET  object  destructor.   This  procedure  has  the  responsibility to <br>    perform  any required shutdown operations for the DSOCKET object before the <br>    object  memory  is  deallocated. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br> <br>    DEBUGF( DBG_TRACE, <br>            ("Destroying socket %X\n",this)); <br>} <br> <br> <br>VOID <br>DSOCKET::RegisterAsyncOperation( <br>    HWND     Window, <br>    UINT     Message, <br>    LONG     Events <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Registers interest in net work events. <br> <br>Arguments: <br> <br>    Window  - The handle to the window that will receive notification of <br>              network events. <br> <br>    Message - The message to send for net event notification. <br> <br>    Events  - The events to be registered. <br> <br>Return Value: <br> <br>    NO_ERROR on success else a valid winsock errorcode. <br> <br>--*/ <br>{ <br> <br>    m_async_window  = Window; <br>    m_async_message = Message; <br>    m_async_events  = Events; <br>} <br> <br>VOID <br>DSOCKET::SignalAsyncEvents( <br>    LPARAM    lParam <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>     The notification function called by the worker thread to signal network <br>     events. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br> <br>    gUpCallTable.lpWPUPostMessage (m_async_window, <br>                                    m_async_message, <br>                                    (WPARAM)m_socket_handle, <br>                                    lParam); <br> <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

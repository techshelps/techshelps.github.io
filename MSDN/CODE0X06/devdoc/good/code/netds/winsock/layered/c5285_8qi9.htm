<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DSOCKET.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5301"></a>DSOCKET.H</h2>
<pre><code>/*++ <br> <br> <br>     Copyright c 1996 Intel Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>Module Name: <br> <br>dsocket.h <br> <br>Abstract: <br> <br>    This  header  defines the "DSOCKET" class.  The DSOCKET class defines state <br>    variables  and  operations for DSOCKET objects within the LSP.DLL.  A <br>    DSOCKET  object  represents  all  of the information that the LSP.DLL knows <br>    about a socket. <br>--*/ <br> <br>#ifndef _DSOCKET_ <br>#define _DSOCKET_ <br> <br> <br>#include &lt;winsock2.h&gt; <br>#include "llist.h" <br>#include "classfwd.h" <br> <br>class DSOCKET <br>{ <br>  public: <br> <br>    static <br>    INT <br>    DSocketClassInitialize(); <br> <br>    static <br>    INT <br>    DSocketClassCleanup(); <br> <br>    static  <br>    PDSOCKET <br>    FindDSocketFromProviderSocket ( <br>        SOCKET s <br>        ); <br> <br> <br>    DSOCKET(); <br> <br>    INT <br>    Initialize( <br>        IN PDPROVIDER Provider, <br>        IN SOCKET     ProviderSocket, <br>        IN DWORD      CatalogEntryId, <br>        IN SOCKET     Socket <br>        ); <br>    VOID <br>    Remove (); <br> <br>    ~DSOCKET(); <br> <br>    SOCKET <br>    GetProviderSocket(); <br> <br>    PDPROVIDER <br>    GetDProvider(); <br> <br>    DWORD <br>    GetCatalogEntryId(); <br> <br>    SOCKET <br>    GetSocketHandle(); <br> <br>    VOID <br>    RegisterAsyncOperation( <br>        HWND     Window, <br>        UINT     Message, <br>        LONG     Events <br>        ); <br> <br>    VOID <br>    SignalAsyncEvents( <br>        LPARAM    lParam <br>        ); <br> <br>    LONG <br>    GetAsyncEventMask(); <br> <br>    DWORD <br>    GetCompletionContext (); <br> <br>    VOID <br>    SetCompletionContext ( <br>        DWORD   context <br>        ); <br> <br>  private: <br> <br>    PDPROVIDER  m_provider; <br>    // Reference  to  the  DPROVIDER object representing the service provider <br>    // that controls this socket. <br> <br>    SOCKET  m_provider_socket; <br>// Socket handle exposed by the provider <br> <br>    DWORD   m_catalog_entry_id; <br>    // The catalog entry id of the provider that this socket is attached to. <br> <br>    SOCKET  m_socket_handle; <br>    // The socket handle returned from WPUCreateSocketHandle. <br> <br>    DWORD   m_completion_context; <br>    // Completion key if provider socket is associated with <br>    // completion port <br> <br>    LONG    m_async_events; <br>    // The event mask for the events the client has registered interest in. <br> <br>    HWND    m_async_window; <br>    // The handle of the window to receive net event messages. <br> <br>    UINT    m_async_message; <br>    // The message to send to the client to signal net envents. <br> <br>BOOLm_closing; <br>// Indicates that socket is being closed <br>     <br>LIST_ENTRY  m_list_linkage; <br>    // Provides the linkage space for a list of DSOCKET objects  <br> <br>    // Note that no LIST_ENTRY is required to correspond to the DPROVIDER <br>    // object associated  with  this  DSOCKET object since the DPROVIDER object <br>    // does not  maintain a list of sockets it controls. <br>     <br>    static LIST_ENTRY m_socket_list; <br>    // Global list of all sockets <br> <br>    static CRITICAL_SECTION  m_socket_list_lock; <br>    // Critical section that protects socket list <br> <br>};   // class DSOCKET <br> <br> <br>  <br>inline SOCKET <br>DSOCKET::GetSocketHandle() <br>/*++ <br> <br>Routine Description: <br> <br>    Retrieves  the  external socket-handle value corresponding to this internal <br>    DSOCKET object. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    The corresponding external socket-handle value. <br>--*/ <br>{ <br>    return(m_socket_handle); <br>} <br> <br> <br> <br>  <br>inline PDPROVIDER <br>DSOCKET::GetDProvider() <br>/*++ <br> <br>Routine Description: <br> <br>    Retrieves  a reference to the DPROVIDER object associated with this DSOCKET <br>    object. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    The reference to the DPROVIDER object associated with this DSOCKET object. <br>--*/ <br>{ <br>    return(m_provider); <br>} <br> <br> <br>inline DWORD <br>DSOCKET::GetCatalogEntryId() <br>/*++ <br> <br>Routine Description: <br> <br>    Retrieves  a reference to the DPROVIDER object associated with this DSOCKET <br>    object. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    The reference to the DPROVIDER object associated with this DSOCKET object. <br>--*/ <br>{ <br>    return(m_catalog_entry_id); <br>} <br> <br> <br>inline SOCKET <br>DSOCKET::GetProviderSocket() <br>/*++ <br> <br>Routine Description: <br> <br>    Retrieves the handle for the provider socket <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    The provider socket associated with this socket <br>--*/ <br>{ <br>    return(m_provider_socket); <br>} <br> <br>inline <br>LONG <br>DSOCKET::GetAsyncEventMask() <br>/*++ <br> <br>Routine Description: <br> <br>    Returns the event mask for this socket <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    The event mask for this socket. <br>--*/ <br>{ <br>    return(m_async_events); <br>} <br> <br> <br>inline DWORD <br>DSOCKET::GetCompletionContext() <br>/*++ <br> <br>Routine Description: <br> <br>    Retrieves provider's socket completion context, <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Provider's socket completion context <br> <br>--*/ <br>{ <br>    return(m_completion_context); <br>} <br> <br> <br>inline VOID <br>DSOCKET::SetCompletionContext( <br>    DWORD   Context <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Sets provider's socket completion context, <br> <br>Arguments: <br> <br>    Context     completion context <br> <br>Return Value: <br>     <br>    None <br> <br>--*/ <br>{ <br>    m_completion_context = Context; <br>} <br> <br> <br> <br> <br>#endif // _DSOCKET_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

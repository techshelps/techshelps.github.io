<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DTHOOK.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5303"></a>DTHOOK.CPP</h2>
<pre><code>/*++ <br> <br>     Copyright (c) 1996 Intel Corporation <br>     Copyright 1996 - 1998 Microsoft Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>  Module Name: <br> <br>    dthook.cpp <br> <br>  Abstract: <br> <br>    This module contains the hooks that allow specially-compiled <br>    versions of layered provier DLL call into the debug/trace DLL. <br> <br>--*/ <br> <br>#include "precomp.h" <br> <br>// <br>// Static Globals <br>// <br> <br>// Function pointers to the Debug/Trace DLL entry points <br>static LPFNWSANOTIFY PreApiNotifyFP = NULL; <br>static LPFNWSANOTIFY PostApiNotifyFP = NULL; <br> <br>// Handle to the Debug/Trace DLL module <br>static HMODULE       DTDll = NULL; <br> <br>// Static string to pass to Debug/Trace notification functions <br>static char LibName[] = "lsp"; <br> <br>// <br>// Functions <br>// <br> <br>  <br>LPFNWSANOTIFY <br>GetPreApiNotifyFP(void) <br>/*++ <br> <br>  Function Description: <br> <br>      Returns a pointer to the WSAPreApiNotify function exported by <br>      the Debug/Trace DLL.  This variable is global to this file only, <br>      and is initialized during DT_Initialize(). <br> <br>  Arguments: <br> <br>      None. <br> <br>  Return Value: <br> <br>      Returns whatever is stored in PreApiNotifyFP. <br> <br>--*/ <br>{ <br>    return(PreApiNotifyFP); <br>} <br> <br> <br> <br> <br>  <br>LPFNWSANOTIFY <br>GetPostApiNotifyFP(void) <br>/*++ <br> <br>  Function Description: <br> <br>      Returns a pointer to the WSAPreApiNotify function exported by <br>      the Debug/Trace DLL.  This variable is global to this file only, <br>      and is initialized during DT_Initialize(). <br> <br>  Arguments: <br> <br>      None. <br> <br>  Return Value: <br> <br>      Returns whatever is stored in PreApiNotifyFP. <br> <br>--*/ <br>{ <br>    return(PostApiNotifyFP); <br>} <br> <br> <br> <br> <br>  <br>void <br>DTHookInitialize(void) <br>/*++ <br> <br>  Function Description: <br> <br>      Intializes this hook module.  Loads the Debug/Trace DLL, if <br>      possible, and sets the global function pointers to point to the <br>      entry points exported by that DLL.  If the DLL can't be loaded, <br>      the function just returns and the function pointers are left at <br>      NULL. <br> <br>      This function MUST be called before any of the hook functions <br>      are called, or the hook functions will not work. <br> <br>  Arguments: <br> <br>      None. <br> <br>  Return Value: <br> <br>      None. <br> <br>--*/ <br>{ <br>    DTDll = (HMODULE)LoadLibrary("mydt_dll"); <br> <br>    if (DTDll == NULL) { <br>        return; <br>    } <br> <br>    PreApiNotifyFP = (LPFNWSANOTIFY)GetProcAddress( <br>        DTDll, <br>        "WSAPreApiNotify"); <br> <br>    PostApiNotifyFP = (LPFNWSANOTIFY)GetProcAddress( <br>        DTDll, <br>        "WSAPostApiNotify"); <br>} <br> <br> <br> <br> <br>  <br>void <br>DTHookShutdown(void) <br>/*++ <br> <br>  Function Description: <br> <br>      Should be called to shutdown Debug/Tracing.  The function <br>      pointers are set to NULL, and the DLL is unloaded from memory. <br> <br>  Arguments: <br> <br>      None. <br> <br>  Return Value: <br> <br>      None. <br> <br>--*/ <br>{ <br>    if (DTDll != NULL) { <br>        FreeLibrary(DTDll); <br>    } <br> <br>    PreApiNotifyFP = NULL; <br>    PostApiNotifyFP = NULL; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

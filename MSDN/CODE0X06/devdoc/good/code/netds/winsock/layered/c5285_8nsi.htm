<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCATALOG.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5292"></a>DCATALOG.H</h2>
<pre><code>/*++ <br> <br> <br>     Copyright c 1996 Intel Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>Module Name: <br> <br>    dcatalog.h <br> <br>Abstract: <br> <br>    This  module  contains  the  interface  to  the  catalog  of  protocol_info <br>    structures and their associated providers. <br> <br>--*/ <br> <br>#ifndef _DCATALOG_ <br>#define _DCATALOG_ <br> <br>#include &lt;winsock2.h&gt; <br>#include "classfwd.h" <br>#include "llist.h" <br> <br> <br>typedef <br>BOOL <br>(* CATALOGITERATION) ( <br>    IN DWORD                PassBack, <br>    IN PPROTO_CATALOG_ITEM  CatalogEntry <br>    ); <br>/*++ <br> <br>Routine Description: <br> <br>    CATALOGITERATION  is  a place-holder for a function supplied by the client. <br>    The  function  is  called once for each PROTO_CATALOG_ITEM structure in the <br>    catalog while enumerating the catalog.  The client can stop the enumeration <br>    early by returning FALSE from the function. <br> <br>    Note  that  the DPROVIDER associated with an enumerated DPROTO_CATALOG_ITEM <br>    may  be  NULL.   To retrieve DPROTO_CATALOG_ITEM structure that has had its <br>    DPROVIDER      loaded      and      initialized,      you      can      use <br>    GetCatalogItemFromCatalogEntryId. <br> <br>Arguments: <br> <br>    PassBack     - Supplies  to  the  client an uninterpreted, unmodified value <br>                   that  was  specified  by the client in the original function <br>                   that  requested  the  enumeration.   The client can use this <br>                   value  to  carry context between the requesting site and the <br>                   enumeration function. <br> <br>    CatalogEntry - Supplies  to  the client a reference to a PROTO_CATALOG_ITEM <br>                   structure with values for this item of the enumeration. <br> <br>Return Value: <br> <br>    TRUE  - The  enumeration  should continue with more iterations if there are <br>            more structures to enumerate. <br> <br>    FALSE - The enumeration should stop with this as the last iteration even if <br>            there are more structures to enumerate. <br> <br>--*/ <br> <br> <br> <br> <br>class DCATALOG <br>{ <br>public: <br> <br>    DCATALOG(); <br> <br>    INT <br>    Initialize(); <br> <br>    ~DCATALOG(); <br> <br>    VOID <br>    EnumerateCatalogItems( <br>        IN CATALOGITERATION  Iteration, <br>        IN DWORD             PassBack <br>        ); <br> <br>    INT <br>    FindNextProviderInChain( <br>        IN  LPWSAPROTOCOL_INFOW lpLocalProtocolInfo, <br>        OUT PDPROVIDER FAR *    NextProvider, <br>OUT PPROTO_CATALOG_ITEM*BaseProviderCatalogEntry <br>        ); <br> <br>INT <br>GetCatalogItemFromCatalogEntryId( <br>IN  DWORD                     CatalogEntryId, <br>OUT PPROTO_CATALOG_ITEM FAR * CatalogItem <br>); <br>     <br>PPROTO_CATALOG_ITEM <br>    GetLocalProvider (); <br> <br>    VOID <br>    AcquireCatalogLock( <br>        VOID <br>        ); <br> <br>    VOID <br>    ReleaseCatalogLock( <br>        VOID <br>        ); <br> <br>    VOID <br>    AppendCatalogItem( <br>        IN  PPROTO_CATALOG_ITEM  CatalogItem <br>        ); <br> <br>    VOID <br>    RemoveCatalogItem( <br>        IN  PPROTO_CATALOG_ITEM  CatalogItem <br>        ); <br> <br>private: <br> <br> <br>    INT <br>    LoadProvider( <br>        IN PPROTO_CATALOG_ITEM CatalogEntry, <br>        IN LPWSAPROTOCOL_INFOW lpChainedProtocolInfo, <br>        OUT PDPROVIDER FAR* Provider <br>        ); <br> <br> <br>    LIST_ENTRY  m_protocol_list; <br>    // The head of the list of protocol catalog items <br> <br>    CRITICAL_SECTION m_catalog_lock; <br>    // A critical section object protecting this class. <br> <br>    DWORD m_num_items; <br>    // Number of items in this catalog. <br> <br>    PPROTO_CATALOG_ITEM     m_local_item; <br>    // Pointer to our own protocol catalog item <br> <br> <br>};  // class dcatalog <br> <br>inline <br>VOID <br>DCATALOG::AcquireCatalogLock( <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Acquires the critical section used to protect the list of catalog items. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br>    EnterCriticalSection( &amp;m_catalog_lock ); <br>} <br> <br>inline <br>VOID <br>DCATALOG::ReleaseCatalogLock( <br>    VOID <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Releases the critical section used to protect the list of catalog items. <br> <br>Arguments: <br> <br> <br>Return Value: <br> <br>    None <br>--*/ <br>{ <br>    LeaveCriticalSection( &amp;m_catalog_lock ); <br>} <br> <br>inline <br>PPROTO_CATALOG_ITEM <br>DCATALOG::GetLocalProvider( <br>    VOID <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Returns pointer to catalog item of our own provider <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    Pointer to local catalog item object <br>--*/ <br>{ <br>    return m_local_item; <br>} <br> <br> <br>#endif // _DCATALOG </code></pre>
<p>&nbsp;</p></body>
</HTML>

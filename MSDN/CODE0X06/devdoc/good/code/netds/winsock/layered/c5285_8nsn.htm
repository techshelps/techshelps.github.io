<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOVERLAP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5297"></a>DOVERLAP.H</h2>
<pre><code>/*++ <br> <br> <br>     Copyright c 1996 Intel Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>Module Name: <br> <br>doverlap.h <br> <br>Abstract: <br> <br>    This module defines the DOVERLAPPEDSTRUCTMGR class.  This class <br>maintains a pool of internal overlapped structures.  These structures <br>are used to store the information the layered service provider will <br>need to satisfy users overlapped I/O requests. <br> <br>--*/ <br> <br>#ifndef _DOVERLAPPEDSTRUCTMGR_ <br>#define _DOVERLAPPEDSTRUCTMGR_ <br> <br> <br>#include &lt;winsock2.h&gt; <br>#include "llist.h" <br>#include "classfwd.h" <br>#include "stddef.h" <br> <br>#define  OUTSTANDINGOVERLAPPEDSTRUCTS 1000 <br>#define  STRUCTSIGNATURE 0xbeadface <br>// Maximum number of buffers inside the structure (if we have to handle <br>// more than that, we'll allocate from heap) <br>#define  MAX_FAST_BUFS 8 <br> <br>// The internal overlapped struct <br>typedef struct _INTERNALOVERLAPPEDSTRUCT <br>{ <br>    DWORD                              iolSignature; <br>    DWORD                              iolOperationType; <br>SOCKET   iolSocket; <br>    PDPROVIDER                         iolProvider; <br>union { <br>SOCKET                             iolProviderSocket; <br>SOCKET   iolListenSocket; <br>}; <br>    WSATHREADID                        iolUserThreadId; <br>    LPWSAOVERLAPPED                    iolUserOverlappedStruct; <br>LPWSAOVERLAPPED_COMPLETION_ROUTINE iolUserCompletionRoutine; <br>union { <br>TRANSMIT_FILE_BUFFERS   iolTransmitBuffers; <br>struct { <br>union { <br>WSABUF   UserBuffers[MAX_FAST_BUFS]; <br>#define iolUserBuffers iolRest.UserBuffers <br>LPWSABUF   pUserBuffers; <br>#define iolpUserBuffers iolRest.pUserBuffers <br>LPVOID   InputBuffer; <br>#define iolInputBuffer iolRest.InputBuffer <br>}; <br>union { <br>DWORD                              UserBufferCount; <br>#define iolUserBufferCount iolRest.UserBufferCount <br>DWORD   InputBufferLength; <br>#define iolInputBufferLength iolRest.InputBufferLength <br>}; <br>union { <br>WSABUF                             InternalBuffers[MAX_FAST_BUFS]; <br>#define iolInternalBuffers iolRest.InternalBuffers <br>LPWSABUF                           pInternalBuffers; <br>#define iolpInternalBuffers iolRest.pInternalBuffers <br>LPVOID   OutputBuffer; <br>#define iolOutputBuffer iolRest.OutputBuffer <br>}; <br>union { <br>DWORD                              InternalBufferCount; <br>#define iolInternalBufferCount iolRest.InternalBufferCount <br>DWORD   OutputBufferLength; <br>#define iolOutputBufferLength iolRest.OutputBufferLength <br>}; <br>}iolRest; <br>}; <br>union { <br>struct sockaddr FAR *              iolSockAddr; <br>DWORD   iolLocalAddressLength; <br>DWORD   iolBytesToWrite; <br>}; <br>union { <br>    LPINT                              iolSockAddrLenPtr; <br>INT                                iolSockAddrLen; <br>DWORD   iolRemoteAddressLength; <br>DWORD   iolBytesPerSend; <br>}; <br>union { <br>DWORD                              iolFlags; <br>DWORD   iolIoControlCode; <br>SOCKET   iolAcceptSocket; <br>HANDLE   iolFileHandle; <br>}; <br>DWORD   iolReserved; <br>    LIST_ENTRY                         iolListLinkage; <br>    WSAOVERLAPPED                      iolInternalOverlappedStruct; <br>} INTERNALOVERLAPPEDSTRUCT, *PINTERNALOVERLAPPEDSTRUCT; <br> <br>class DOVERLAPPEDSTRUCTMGR <br>{ <br>  public: <br> <br>    DOVERLAPPEDSTRUCTMGR(); <br> <br>    INT <br>    Initialize( <br>        ); <br> <br>    ~DOVERLAPPEDSTRUCTMGR(); <br> <br>    PINTERNALOVERLAPPEDSTRUCT <br>    AllocateOverlappedStruct( <br>        ); <br> <br>    VOID <br>    FreeOverlappedStruct( <br>        LPWSAOVERLAPPED   pOverlappedStruct <br>        ); <br> <br>    PINTERNALOVERLAPPEDSTRUCT <br>GetInternalOverlappedStructure ( <br>LPWSAOVERLAPPED  pOverlappedStruct <br>); <br> <br>  private: <br> <br>    PINTERNALOVERLAPPEDSTRUCT <br>    PopOverlappedStruct(); <br> <br>    VOID <br>    PushOverlappedStruct( <br>        LPWSAOVERLAPPED OverlappedStruct <br>        ); <br> <br>    SINGLE_LIST_ENTRY m_overlapped_free_list; <br>    // A list of available internal overlapped structs. <br> <br>    CRITICAL_SECTION  m_overlapped_free_list_lock; <br>    // Syncronization object for updateing m_overlapped_free_list. <br> <br>    PBYTE             m_overlapped_struct_block; <br>    // Pointer to the memory block containing the internal overlapped <br>    // structures. <br> <br> <br>};   // class DOVERLAPPEDSTRUCTMGR <br> <br>#endif // _DOVERLAPPEDSTRUCTMGR_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

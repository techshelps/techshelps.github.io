<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DPROVIDE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5298"></a>DPROVIDE.CPP</h2>
<pre><code>/*++ <br> <br>     Copyright (c) 1996 Intel Corporation <br>     Copyright 1996 - 1998 Microsoft Corporation <br>     All Rights Reserved <br> <br>     Permission is granted to use, copy and distribute this software and <br>     its documentation for any purpose and without fee, provided, that <br>     the above copyright notice and this statement appear in all copies. <br>     Intel makes no representations about the suitability of this <br>     software for any purpose.  This software is provided "AS IS." <br> <br>     Intel specifically disclaims all warranties, express or implied, <br>     and all liability, including consequential and other indirect <br>     damages, for the use of this software, including liability for <br>     infringement of any proprietary rights, and including the <br>     warranties of merchantability and fitness for a particular purpose. <br>     Intel does not assume any responsibility for any errors which may <br>     appear in this software nor any responsibility to update it. <br> <br> <br>Module Name: <br> <br>    dprovide.cpp <br> <br>Abstract: <br> <br>    This module defines the class dprovider along with its methods. <br> <br>--*/ <br> <br>#include "precomp.h" <br>#include &lt;stdlib.h&gt; <br> <br>GUID TransmitFileGuid = WSAID_TRANSMITFILE; <br>GUID AcceptExGuid = WSAID_ACCEPTEX; <br>GUID GetAcceptExSockAddrsGuild = WSAID_GETACCEPTEXSOCKADDRS;  <br> <br>  <br>DPROVIDER::DPROVIDER() <br>/*++ <br>Routine Description: <br> <br>    Creates any internal state. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br> <br>--*/ <br> <br>{ <br>    m_proctable = NULL; <br>    m_library_handle = NULL; <br>    m_lib_name = NULL; <br>m_extensions_initialized; <br>} <br> <br> <br>  <br>DPROVIDER::~DPROVIDER() <br>/*++ <br>Routine Description: <br> <br>    destroys any internal state. <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    None <br> <br>--*/ <br>{ <br>    int ErrorCode; <br> <br> <br>    if (m_library_handle) <br>    { <br>        if (m_proctable-&gt;lpWSPCleanup) <br>        { <br>            DEBUGF( DBG_TRACE, <br>                    ("\nCalling WSPCleanup for provider %X", this)); <br>            //Call the servce provider cleanup routine <br>            WSPCleanup(&amp;ErrorCode); <br>        } //if <br> <br>        // Free the service provider DLL <br>        FreeLibrary(m_library_handle); <br>    } //if <br> <br>    if(m_proctable){ <br>        delete m_proctable; <br>    } <br>    delete m_lib_name; <br>    DEBUGF( DBG_TRACE, <br>            ("\nDestroying provider %X", this)); <br>} <br> <br> <br>  <br>INT <br>DPROVIDER::Initialize( <br>    IN PWCHAR lpszLibFile, <br>    IN LPWSAPROTOCOL_INFOW lpProtocolInfo <br>    ) <br>/*++ <br>Routine Description: <br> <br>    Initializes the DPROVIDER object. <br> <br>Arguments: <br> <br>    lpszLibFile - A  Null  terminating  string  that  points to the .DLL of the <br>                  service to load. <br> <br>    lpProtocolInfo - A pointer to a WSAPROTOCOL_INFO struct to hand to the <br>                     provider startup routine. <br> <br>Return Value: <br> <br>    If no error occurs, Initialize() returns ERROR_SUCEES.  Otherwise the value <br>    SOCKET_ERROR  is  returned,  and  a  specific  error  code  is available in <br>    lpErrno. <br> <br>--*/ <br>{ <br>    LPWSPSTARTUP        WSPStartupFunc          = NULL; <br>    WORD                wVersionRequested       = MAKEWORD(2,2); <br>    INT                 error_code              = 0; <br>    WSPDATA             WSPData; <br>    CHAR                LibraryPath[MAX_PATH]; <br>    CHAR                lpszLibFileA[MAX_PATH]; <br> <br>    DEBUGF( DBG_TRACE, <br>            ("\nInitializing provider %X", this)); <br> <br>    m_proctable = new WSPPROC_TABLE; <br>    if(!m_proctable){ <br>        DEBUGF( <br>            DBG_ERR, <br>            ("\nFailed to allocate WSPPROC_TABLE for provider object")); <br>        return WSA_NOT_ENOUGH_MEMORY; <br>    } <br> <br>    // Zero out contents of m_proctable <br>    ZeroMemory( <br>        (PVOID) m_proctable,      // Destination <br>        sizeof(LPWSPPROC_TABLE)); // Length <br> <br> <br>    // <br>    // Expand the library name to pickup environment/registry variables <br>    // <br>    wcstombs (lpszLibFileA, lpszLibFile, MAX_PATH); <br>    if (!( ExpandEnvironmentStrings(lpszLibFileA, <br>                                    LibraryPath, <br>                                    MAX_PATH))){ <br>        DEBUGF( <br>            DBG_ERR, <br>            ("\nExpansion of environment variables failed")); <br>        return WSASYSCALLFAILURE; <br>    } //if <br> <br> <br>m_lib_name = new char[strlen(LibraryPath)+1]; <br> <br>strcpy(m_lib_name,LibraryPath); <br> <br> <br>    // <br>    // First load the DLL for the service provider. Then get two functions that <br>    // init the service provider structures. <br>    // <br>    m_library_handle = LoadLibrary(LibraryPath); <br>    if(!m_library_handle){ <br>        DEBUGF( <br>            DBG_ERR, <br>            ("\nFailed to load DLL %s",LibraryPath)); <br>        return  WSAEPROVIDERFAILEDINIT; <br>    } <br> <br>    WSPStartupFunc = (LPWSPSTARTUP)GetProcAddress( <br>        m_library_handle, <br>        "WSPStartup" <br>        ); <br> <br>    if(!(WSPStartupFunc)){ <br> <br>        DEBUGF( DBG_ERR,("\nCould get startup entry point for %s", <br>                         lpszLibFile)); <br>        return  WSAEPROVIDERFAILEDINIT; <br>    } <br> <br>#if !defined(DEBUG_TRACING) <br>    error_code = (*WSPStartupFunc)( <br>        wVersionRequested, <br>        &amp; WSPData, <br>        lpProtocolInfo, <br>        gUpCallTable, <br>        m_proctable); <br>#else <br>    { // declaration block <br>        LPWSPDATA  pWSPData = &amp; WSPData; <br>        BOOL       bypassing_call; <br> <br>        bypassing_call = PREAPINOTIFY(( <br>            DTCODE_WSPStartup, <br>            &amp; error_code, <br>            LibraryPath, <br>            &amp; wVersionRequested, <br>            &amp; pWSPData, <br>            &amp; lpProtocolInfo, <br>            gUpCallTable, <br>            m_proctable)); <br>        if (! bypassing_call) { <br>            error_code = (*WSPStartupFunc)( <br>                wVersionRequested, <br>                &amp; WSPData, <br>                lpProtocolInfo, <br>                gUpCallTable, <br>                m_proctable); <br>            POSTAPINOTIFY(( <br>                DTCODE_WSPStartup, <br>                &amp; error_code, <br>                LibraryPath, <br>                &amp; wVersionRequested, <br>                &amp; pWSPData, <br>                &amp; lpProtocolInfo, <br>                gUpCallTable.lpWPUCloseEvent, <br>                m_proctable-&gt;lpWSPAccept)); <br>        } // if ! bypassing_call <br>    } // declaration block <br>#endif // !defined(DEBUG_TRACING) <br> <br>    if(ERROR_SUCCESS != error_code){ <br>        DEBUGF(DBG_ERR, ("\nWSPStartup for %s Failed",lpszLibFile)); <br>        return error_code; <br>    } <br> <br>    // <br>    // Make sure that all of the procedures at least have a non null pointer. <br>    // <br>    if( !m_proctable-&gt;lpWSPAccept              || <br>        !m_proctable-&gt;lpWSPAddressToString     || <br>        !m_proctable-&gt;lpWSPAsyncSelect         || <br>        !m_proctable-&gt;lpWSPBind                || <br>        !m_proctable-&gt;lpWSPCancelBlockingCall  || <br>        !m_proctable-&gt;lpWSPCleanup             || <br>        !m_proctable-&gt;lpWSPCloseSocket         || <br>        !m_proctable-&gt;lpWSPConnect             || <br>        !m_proctable-&gt;lpWSPDuplicateSocket     || <br>        !m_proctable-&gt;lpWSPEnumNetworkEvents   || <br>        !m_proctable-&gt;lpWSPEventSelect         || <br>        !m_proctable-&gt;lpWSPGetOverlappedResult || <br>        !m_proctable-&gt;lpWSPGetPeerName         || <br>        !m_proctable-&gt;lpWSPGetSockName         || <br>        !m_proctable-&gt;lpWSPGetSockOpt          || <br>        !m_proctable-&gt;lpWSPGetQOSByName        || <br>        !m_proctable-&gt;lpWSPIoctl               || <br>        !m_proctable-&gt;lpWSPJoinLeaf            || <br>        !m_proctable-&gt;lpWSPListen              || <br>        !m_proctable-&gt;lpWSPRecv                || <br>        !m_proctable-&gt;lpWSPRecvDisconnect      || <br>        !m_proctable-&gt;lpWSPRecvFrom            || <br>        !m_proctable-&gt;lpWSPSelect              || <br>        !m_proctable-&gt;lpWSPSend                || <br>        !m_proctable-&gt;lpWSPSendDisconnect      || <br>        !m_proctable-&gt;lpWSPSendTo              || <br>        !m_proctable-&gt;lpWSPSetSockOpt          || <br>        !m_proctable-&gt;lpWSPShutdown            || <br>        !m_proctable-&gt;lpWSPSocket              || <br>        !m_proctable-&gt;lpWSPStringToAddress ){ <br> <br>        DEBUGF(DBG_ERR, <br>               ("\nService provider %s returned an invalid procedure table", <br>                lpszLibFile)); <br>        return WSAEINVALIDPROCTABLE; <br>    } <br> <br>    // <br>    // Confirm that the WinSock service provider supports 2.0. If it supports a <br>    // version greater then 2.0 it will still return 2.0 since this is the <br>    // version  we requested. <br>    // <br>    if(WSPData.wVersion != MAKEWORD(2,2)){ <br>        if(m_proctable-&gt;lpWSPCleanup) { <br>            if(m_proctable-&gt;lpWSPCleanup(&amp;error_code)){ <br>                DEBUGF( DBG_ERR, <br>                        ("\nService Provider %s does not support version 2.2", <br>                         lpszLibFile)); <br>                return WSAVERNOTSUPPORTED; <br>            } <br>        } <br>        return WSAEINVALIDPROVIDER; <br>    } <br> <br>    return ERROR_SUCCESS; <br>} //Initailize <br> <br> <br>INT <br>DPROVIDER::InterceptExtensions ( <br>IN LPVOIDlpvInBuffer, <br>OUT LPVOIDlpvOutBuffer, <br>OUT LPINTlpErrno <br>) <br>{ <br>INTReturnValue=NO_ERROR; <br> <br>if (memcmp (lpvInBuffer, <br>&amp;TransmitFileGuid, <br>sizeof (GUID))==0) { <br>m_transmitfile = *((LPFN_TRANSMITFILE *)lpvOutBuffer); <br>*((LPFN_TRANSMITFILE *)lpvOutBuffer) = WSPTransmitFile; <br>} <br>else if (memcmp (lpvInBuffer, <br>&amp;AcceptExGuid, <br>sizeof (GUID))==0) { <br>m_acceptex = *((LPFN_ACCEPTEX *)lpvOutBuffer); <br>*((LPFN_ACCEPTEX *)lpvOutBuffer) = WSPAcceptEx; <br>} <br>else if (memcmp (lpvInBuffer, <br>&amp;GetAcceptExSockAddrsGuild, <br>sizeof (GUID))==0) <br>// No translation required because no socket handle is <br>// involved in this call <br>; <br>else { <br>ReturnValue = SOCKET_ERROR; <br>*lpErrno = WSAEOPNOTSUPP; <br>} <br> <br>return ReturnValue; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

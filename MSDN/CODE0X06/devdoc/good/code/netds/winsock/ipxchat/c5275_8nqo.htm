<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPXCHAT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5280"></a>IPXCHAT.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   ipxchat.c <br>// <br>//  PURPOSE:   Implement the windows procedure for the main application <br>//    windows.  Also implement the generic message and command dispatchers. <br>// <br>//  FUNCTIONS: <br>//    WndProc           - Processes messages for the main window. <br>//    MsgCreate         - Initializes Edit Controls for text input/output. <br>//    MsgSize           - Adjusts size of Edit Controls when window is resized. <br>//    MsgSetfocus       - Keeps window focus on edit control instead of parent. <br>//    MsgDataready      - Reads data from incoming IPC mechanism. <br>//    MsgRefreshdisplay - Refills Inbox edit control text contents <br>//    MsgDisconnected   - Cleans up connection killed by other side <br>//    MsgCommand        - Handle the WM_COMMAND messages for the main window. <br>//    MsgDestroy        - Handles the WM_DESTROY message by calling  <br>//                        PostQuitMessage(). <br>//    CmdOutbox         - Handles messages from Outbox edit control. <br>//    CmdDisconnected   - Disconnects current connection <br>//    CmdExit           - Handles the file exit command by calling destory  <br>//                        window on the main window. <br>// <br>//  COMMENTS: <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#include &lt;wsipx.h&gt; <br>#include "globals.h"            // prototypes specific to this application <br> <br> <br>// Main window message table definition. <br>MSD rgmsd[] = <br>{ <br>    {WM_CREATE,         MsgCreate}, <br>    {WM_SIZE,           MsgSize}, <br>    {WM_SETFOCUS,       MsgSetfocus}, <br>    {WM_COMMAND,        MsgCommand}, <br>    {WM_DESTROY,        MsgDestroy}, <br>    {MW_DATAREADY,      MsgDataready}, <br>    {MW_DISCONNECTED,   MsgDisconnected}, <br>    {MW_DISPLAYREFRESH, MsgRefreshdisplay} <br>}; <br> <br>MSDI msdiMain = <br>{ <br>    sizeof(rgmsd) / sizeof(MSD), <br>    rgmsd, <br>    edwpWindow <br>}; <br> <br> <br>// Main window command table definition. <br>CMD rgcmd[] = <br>{ <br>    {IDM_CONNECT,    CmdConnect}, <br>    {IDM_LISTEN,     CmdListen}, <br>    {IDM_EXIT,       CmdExit}, <br>    {IDM_ABOUT,      CmdAbout}, <br>    {ID_OUTBOX,      CmdOutbox}, <br>    {IDM_DISCONNECT, CmdDisconnect} <br>}; <br> <br>CMDI cmdiMain = <br>{ <br>    sizeof(rgcmd) / sizeof(CMD), <br>    rgcmd, <br>    edwpWindow <br>}; <br> <br> <br>// <br>//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Processes messages for the main window. <br>// <br>//  PARAMETERS: <br>//    hwnd     - window handle <br>//    uMessage - message number <br>//    wparam   - additional information (dependant on message number) <br>//    lparam   - additional information (dependant on message number) <br>// <br>//  RETURN VALUE: <br>//    The return value depends on the message number.  If the message <br>//    is implemented in the message dispatch table, the return value is <br>//    the value returned by the message handling function.  Otherwise, <br>//    the return value is the value returned by the default window procedure. <br>// <br>//  COMMENTS: <br>//    Call the DispMessage() function with the main window's message dispatch <br>//    information (msdiMain) and the message specific information. <br>// <br> <br>LRESULT CALLBACK WndProc(HWND   hwnd,  <br>                         UINT   uMessage,  <br>                         WPARAM wparam,  <br>                         LPARAM lparam) <br>{ <br>    return DispMessage(&amp;msdiMain, hwnd, uMessage, wparam, lparam); <br>} <br> <br>// <br>//  FUNCTION: MsgCreate(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Creates Inbox and Outbox Edit controls <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgCreate(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    // Create Edit control for typing to be sent to server <br>    hOutWnd = CreateWindow("EDIT", <br>                           NULL, <br>                           WS_BORDER | WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_LEFT |  <br>                           ES_MULTILINE | ES_AUTOVSCROLL, <br>                           0,0,0,0, <br>                           hwnd, <br>                           (HMENU) ID_OUTBOX, <br>                           (HINSTANCE) GetWindowLong(hwnd, GWL_HINSTANCE), <br>                           0); <br>    // Create Edit control for typing to be received from server <br>    hInWnd = CreateWindow("EDIT", <br>                          NULL, <br>                          WS_BORDER | WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_LEFT |  <br>                          ES_MULTILINE | ES_AUTOVSCROLL, <br>                          0,0,0,0, <br>                          hwnd, <br>                          (HMENU) ID_INBOX, <br>                          (HINSTANCE) GetWindowLong(hwnd, GWL_HINSTANCE), <br>                          0); <br> <br>    return (TRUE); <br>} <br> <br>// <br>//  FUNCTION: MsgSize(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Adjust Size of Inbox and Outbox Edit controls <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Parent Window Size <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgSize(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    // Size OutBox Edit Control <br>    MoveWindow(hOutWnd, <br>               1,1,                    // Upper Left Corner <br>               LOWORD(lparam) - 2,         // Width of Parent Window <br>               (HIWORD(lparam) / 2) - 2 ,     // Half the height of Parent <br>               TRUE);                  // repaint <br> <br>    // Size Inbox Edit Control <br>    MoveWindow(hInWnd, <br>               1, (HIWORD(lparam) / 2) + 1,  // Half Way down right side <br>               LOWORD(lparam) - 2,         // Width of Parent Window <br>               (HIWORD(lparam) / 2) - 2,      // Half the height of Parent <br>               TRUE);                  // repaint <br>    return (TRUE); <br>} <br> <br>// <br>//  FUNCTION: MsgSetfocus(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Keeps Window focus on edit control <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgSetfocus(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    SetFocus(hOutWnd);  // Don't let main window have focus <br>    return (TRUE); <br>} <br> <br>// <br>//  FUNCTION: MsgDataready(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Read data and post message to display data <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle <br>//    uMessage  - Message number (Unused) <br>//    wparam    - forwarded to ReceiveInBox <br>//    lparam    - forwarded to ReceiveInBox <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgDataready(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    // Call protocol specific program to Read data and put in szRcvBuf <br>    if(ReceiveInBox(hwnd, wparam, lparam, szRcvBuf, sizeof(szRcvBuf))) <br>    { <br>        PostMessage(hwnd, MW_DISPLAYREFRESH, 0, 0); <br>    } <br>    return(TRUE); <br>} <br>// <br>//  FUNCTION: MsgRefreshdisplay(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Display socket data in inbox <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra Data     (Unused) <br>//    lparam    - Extra Data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgRefreshdisplay(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    MSG peekmsg; <br> <br>    // Don't bother displaying if there is already another update queued <br>    if(PeekMessage(&amp;peekmsg, hwnd, MW_DATAREADY, MW_DISPLAYREFRESH, PM_NOREMOVE)) <br>    { <br>       return(TRUE);                           <br>    } <br>    // Put data in szRcvBuf in InBox <br>    SendDlgItemMessage(hwnd, <br>                       ID_INBOX, <br>                       EM_SETSEL, <br>                       0,-1); <br>    SendDlgItemMessage(hwnd, <br>                       ID_INBOX, <br>                       EM_REPLACESEL, <br>                       0, <br>                       (LPARAM)szRcvBuf); <br>    return(TRUE); <br>} <br> <br>// <br>//  FUNCTION: MsgDisconnected(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Cleanup connection dropped from other side <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgDisconnected(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    HMENU hmenu; <br> <br>    // Let the user know <br>    MessageBox(hwnd, <br>               "Connection Disconnected", <br>               "Chat Dialog Stopped", <br>               MB_OK); <br>    // Protocol Specific Cleanup <br>    CleanUp(); <br>    // Fix menus <br>    hmenu = GetMenu(hwnd); <br>    EnableMenuItem(hmenu, IDM_CONNECT, MF_ENABLED); <br>    EnableMenuItem(hmenu, IDM_LISTEN, MF_ENABLED); <br>    EnableMenuItem(hmenu, IDM_DISCONNECT, MF_GRAYED); <br>    SetWindowText(hwnd, szTitle); <br>    return(TRUE); <br>} <br> <br>// <br>//  FUNCTION: MsgCommand(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Handle the WM_COMMAND messages for the main window. <br>// <br>//  PARAMETERS: <br>//    hwnd     - window handle <br>//    uMessage - WM_COMMAND (Unused) <br>//    GET_WM_COMMAND_ID(wparam, lparam)   - Command identifier <br>//    GET_WM_COMMAND_HWND(wparam, lparam) - Control handle <br>// <br>//  RETURN VALUE: <br>//    The return value depends on the message number.  If the message <br>//    is implemented in the message dispatch table, the return value is <br>//    the value returned by the message handling function.  Otherwise, <br>//    the return value is the value returned by the default window procedure. <br>// <br>//  COMMENTS: <br>//    Call the DispCommand() function with the main window's command dispatch <br>//    information (cmdiMain) and the command specific information. <br>// <br> <br>LRESULT MsgCommand(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    return DispCommand(&amp;cmdiMain, hwnd, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: MsgDestroy(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Calls PostQuitMessage(). <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle  (Unused) <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgDestroy(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    PostQuitMessage(0); <br>    return 0; <br>} <br> <br>// <br>//  FUNCTION: CmdOutbox(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Handle messages from Outbox--Send data if EN_CHANGE <br>// <br>//  PARAMETERS: <br>//    hwnd     - The window. <br>//    wCommand - ID_OUTBOX (unused) <br>//    wNotify  - Notification number (unused) <br>//    hwndCtrl - NULL (unused) <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - command handled. <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT CmdOutbox(HWND hwnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    int cSendLen; <br> <br>    if (wNotify != EN_CHANGE)  // We only care if text has changed <br>    { <br>        return 0; <br>    } <br>    // Text has changed!  Put OutBox's text in szSndBuf <br>    cSendLen = GetDlgItemText(hwnd, <br>                              ID_OUTBOX, <br>                              szSndBuf, <br>                              sizeof(szSndBuf)); <br> <br>    // Do protocol specific send <br>    SendOutBox(szSndBuf, cSendLen); <br>    return 0; <br>} <br> <br>// <br>//  FUNCTION: CmdDisconnect(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Cut off session and fix menus appropriately <br>// <br>//  PARAMETERS: <br>//    hwnd     - The window. <br>//    wCommand - ID_OUTBOX (unused) <br>//    wNotify  - Notification number (unused) <br>//    hwndCtrl - NULL (unused) <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - command handled. <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT CmdDisconnect(HWND hwnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    HMENU hmenu; <br> <br>    // Protocol Specific cleanup <br>    CleanUp(); <br> <br>    // Fix menus <br>    hmenu = GetMenu(hwnd); <br>    EnableMenuItem(hmenu, IDM_CONNECT, MF_ENABLED); <br>    EnableMenuItem(hmenu, IDM_LISTEN, MF_ENABLED); <br>    EnableMenuItem(hmenu, IDM_DISCONNECT, MF_GRAYED); <br>    SetWindowText(hwnd, szTitle); <br>    return 0; <br>} <br> <br>// <br>//  FUNCTION: CmdExit(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Exit the application. <br>// <br>//  PARAMETERS: <br>//    hwnd     - The window. <br>//    wCommand - IDM_EXIT            (unused) <br>//    wNotify  - Notification number (unused) <br>//    hwndCtrl - NULL                (unused) <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - command handled. <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT CmdExit(HWND hwnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    DestroyWindow(hwnd); <br>    return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONNECT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5276"></a>CONNECT.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   connect.c <br>// <br>//  PURPOSE:   Displays the "Connect" dialog box <br>// <br>//  FUNCTIONS: <br>//    CmdConnect        - Displays the "Connect" dialog box <br>//    Connect           - Processes messages for "Connect" dialog box. <br>//    MsgConnectInit    - Initializes edit controls <br>//    MsgConnectCommand - Process WM_COMMAND message sent to the connect box. <br>//    CmdConnectDone    - Free the connect box and related data. <br>//    CmdConnectNow     - Establishes connection to specified address. Kills <br>//                        dialog if successful. <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#include &lt;wsipx.h&gt;              // IPX sockets <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "globals.h"            // prototypes specific to this application <br> <br>//   Function Definitions <br> <br> <br>LRESULT CALLBACK Connect(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgConnectInit(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgConnectCommand(HWND, UINT, WPARAM, LPARAM); <br>LRESULT CmdConnectNow(HWND, WORD, WORD, HWND); <br>LRESULT CmdConnectDone(HWND, WORD, WORD, HWND); <br> <br>// Connect dialog message table definition. <br>MSD rgmsdConnect[] = <br>{ <br>    {WM_COMMAND,    MsgConnectCommand}, <br>    {WM_INITDIALOG, MsgConnectInit} <br>}; <br> <br>MSDI msdiConnect = <br>{ <br>    sizeof(rgmsdConnect) / sizeof(MSD), <br>    rgmsdConnect, <br>    edwpNone <br>}; <br> <br>// Connect dialog command table definition. <br>CMD rgcmdConnect[] = <br>{ <br>    {IDOK,     CmdConnectNow}, <br>    {IDCANCEL, CmdConnectDone} <br>}; <br> <br>CMDI cmdiConnect = <br>{ <br>    sizeof(rgcmdConnect) / sizeof(CMD), <br>    rgcmdConnect, <br>    edwpNone <br>}; <br> <br>// Module specific "globals"  Used when a variable needs to be <br>// accessed in more than one handler function. <br> <br>HFONT hfontDlg; <br> <br>// <br>//  FUNCTION: CmdConnect(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Displays the "Connect" dialog box <br>// <br>//  PARAMETERS: <br>//    hwnd      - Window handle <br>//    wCommand  - IDM_CONNECT (unused) <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl  - NULL (unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>//    To process the IDM_CONNECT message, call DialogBox() to display the <br>//    Connect dialog box. <br> <br>LRESULT CmdConnect(HWND hwnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    HMENU hmenu; <br> <br>    SetWindowText(hwnd, "IPX Chat Client");    // Change Window Title <br> <br>    // Start dialog box <br>    if(DialogBox(hInst, "ConnectBox", hwnd, (DLGPROC)Connect)) <br>    { <br>         <br>        // We have a connection!  Set up message notification if <br>        // data ready to be read or if connection is closed on us <br>        if (WSAAsyncSelect(sock, <br>                           hwnd, <br>                           MW_DATAREADY, <br>                           FD_READ | FD_CLOSE) == SOCKET_ERROR)  <br>        { <br>            MessageBox(hwnd, "WSAAsyncSelect Failed!", NULL, MB_OK); <br>            CleanUp(); <br>            return 0; <br>        } <br> <br>        // Connect has succeeded!  Fix menus <br>        hmenu = GetMenu(hwnd); <br>        EnableMenuItem(hmenu, IDM_CONNECT, MF_GRAYED); <br>        EnableMenuItem(hmenu, IDM_LISTEN, MF_GRAYED); <br>        EnableMenuItem(hmenu, IDM_DISCONNECT, MF_ENABLED); <br>        return 0; <br>    } <br> <br>    // Connection failed - reset window title <br>    SetWindowText(hwnd, szTitle); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: Connect(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Processes messages for "Connect" dialog box. <br>// <br>//  PARAMETERS: <br>//    hdlg - window handle of the dialog box <br>//    wMessage - type of message <br>//    wparam - message-specific information <br>//    lparam - message-specific information <br>// <br>//  RETURN VALUE: <br>//    TRUE - message handled <br>//    FALSE - message not handled <br>// <br>//  COMMENTS: <br>// <br>//     Gets connection information from user and then establishes a connection. <br>// <br>//     Connect when user clicks on the OK button.  Kill Dialog when connection <br>//     established. <br>// <br> <br>LRESULT CALLBACK Connect(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    return DispMessage(&amp;msdiConnect, hdlg, uMessage, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: MsgConnectInit(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: To center dialog and limit size of edit controls <br>// <br>//  PARAMETERS: <br>//    hdlg - The window handing the message. <br>//    uMessage - The message number. (unused). <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - message handled. <br>// <br>//  COMMENTS: <br>//    Set size of edit controls for the following <br>//           Network  8  chars (4 2-digit hex numbers) <br>//           Node     12 chars (6 2-digit hex numbers) <br>//           Socket   4  chars (2 2-digit hex numbers) <br>// <br> <br>LRESULT MsgConnectInit(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br> <br>    // Create a font to use <br>    hfontDlg = CreateFont(14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, <br>                          VARIABLE_PITCH | FF_SWISS, ""); <br> <br>    // Center the dialog over the application window <br>    CenterWindow (hdlg, GetWindow (hdlg, GW_OWNER)); <br> <br>    // Limit size of edit controls <br>    SendDlgItemMessage(hdlg, CD_NETWORK, EM_LIMITTEXT, 8, 0); <br>    SendDlgItemMessage(hdlg, CD_NODE, EM_LIMITTEXT, 12, 0); <br>    SendDlgItemMessage(hdlg, CD_SOCKET, EM_LIMITTEXT, 4, 0); <br> <br>    // Initialize Edit Controls <br>    SetDlgItemText(hdlg, CD_NETWORK, szConnectNetwork); <br>    SetDlgItemText(hdlg, CD_NODE, szConnectNode); <br>    SetDlgItemText(hdlg, CD_SOCKET, szConnectSocket); <br>      <br>    return (TRUE); <br>} <br> <br>// <br>//  FUNCTION: MsgConnectCommand(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Process WM_COMMAND message sent to the Connect box. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handing the message. <br>//    uMessage - The message number. (unused). <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - message handled. <br>// <br>//  COMMENTS: <br>//    Uses this DispCommand function defined in wndproc.c combined <br>//    with the cmdiConnect structure defined in this file to handle <br>//    the command messages for the Connect dialog box. <br>// <br> <br>LRESULT MsgConnectCommand(HWND   hwnd,  <br>                        UINT   uMessage,  <br>                        WPARAM wparam,  <br>                        LPARAM lparam) <br>{ <br>    return DispCommand(&amp;cmdiConnect, hwnd, wparam, lparam); <br>} <br> <br>// <br>//  FUNCTION: CmdConnectDone(HWND, WORD, HWND) <br>// <br>//  PURPOSE: Free the Connect box and related data. <br>// <br>//  PARAMETERS: <br>//    hdlg - The window handling the command. <br>//    wCommand - The command to be handled (unused). <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    Cleans up sockets then calls EndDialog to finish the dialog session. <br>// <br> <br>LRESULT CmdConnectDone(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br> <br>    CleanUp();               // Free any aborted socket resources <br>    EndDialog(hdlg, FALSE);  // Exit Dialog -- rtrn false since no connection <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: CmdConnectNow(HWND, WORD, HWND) <br>// <br>//  PURPOSE: Establish the connection <br>// <br>//  PARAMETERS: <br>//    hdlg - The window handling the command. <br>//    wCommand - The command to be handled (unused). <br>//    wNotify   - Notification number (unused) <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    Makes Connection calls <br>// <br> <br>LRESULT CmdConnectNow(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    char outtext[128]; <br>    WORD wVersionRequested; <br>    WSADATA wsaData; <br> <br>     <br>    GetDlgItemText(hdlg, CD_NETWORK, szConnectNetwork, 9);        // Get Network Number <br>    AtoH(szConnectNetwork, (char *)&amp;RemAddr.sa_netnum, 4);        // Network order <br> <br>    GetDlgItemText(hdlg, CD_NODE, szConnectNode, 13);             // Get Node Number <br>    AtoH((char *)szConnectNode, (char *)&amp;RemAddr.sa_nodenum, 6);  // Network order <br> <br>    GetDlgItemText(hdlg, CD_SOCKET, szConnectSocket, 5);          // Get Socket Number <br>    AtoH((char *)szConnectSocket, (char *)&amp;RemAddr.sa_socket, 2); // Network order                   <br> <br>    RemAddr.sa_family = AF_IPX;                                   // IPX Family <br>    wVersionRequested = MAKEWORD(1, 1); <br> <br>    SetDlgItemText(hdlg, CD_STATUS, "Calling WSAStartup"); <br> <br>    // Initialize winsock dll <br>    if(WSAStartup(wVersionRequested, &amp;wsaData) == SOCKET_ERROR) <br>    { <br>        SetDlgItemText(hdlg, CD_STATUS, "WSAStartup failed"); <br>        return TRUE; <br>    } <br> <br>    SetDlgItemText(hdlg, CD_STATUS, "WSAStartup Succeeded"); <br> <br>    SetDlgItemText(hdlg, CD_STATUS, "Calling socket()"); <br> <br>    // get socket handle <br>    sock = socket(AF_IPX,            // IPX family <br>                  SOCK_SEQPACKET,    // Message mode data xfers <br>                  NSPROTO_SPX);      // SPX = Connection Oriented <br> <br>    if(sock == INVALID_SOCKET) { <br>        SetDlgItemText(hdlg, CD_STATUS, "ERROR on socket()"); <br>        WSACleanup(); <br>        return TRUE; <br>    } <br> <br>    SetDlgItemText(hdlg, CD_STATUS, "socket() Succeeded"); <br> <br>    SetDlgItemText(hdlg, CD_STATUS, "Calling connect()"); <br> <br>    // Call specified address (we block here since I don't have anything better <br>    // to do). <br>    if(connect(sock, (struct sockaddr *)&amp;RemAddr, sizeof(RemAddr)) == SOCKET_ERROR) <br>    { <br>        // Failed!  Post status and cleanup <br>        sprintf(outtext, "connect() failed, error %u", WSAGetLastError()); <br>        SetDlgItemText(hdlg, CD_STATUS, outtext); <br>        closesocket(sock); <br>        WSACleanup(); <br>        return TRUE; <br>    } <br> <br>    // We've got a connection!  Kill the dialog <br>    SetDlgItemText(hdlg, CD_STATUS, "connect() succeeded!"); <br> <br>    EndDialog(hdlg, TRUE);          // Exit the dialog <br>    DeleteObject (hfontDlg); <br>    return (TRUE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

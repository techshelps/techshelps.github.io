<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINMAIN.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5284"></a>WINMAIN.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   winmain.c <br>// <br>//  PURPOSE:   Calls initialization functions and processes the message loop <br>// <br>// <br>//  PLATFORMS: Windows 95, Windows NT <br>// <br>//  FUNCTIONS: <br>//    WinMain() - calls initialization functions, processes message loop <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;wsipx.h&gt;              // IPX Socket defs <br>#include "globals.h"            // prototypes specific to this application <br> <br>// <br>//  FUNCTION: WinMain(HINSTANCE, HINSTANCE, LPSTR, int) <br>// <br>//  PURPOSE: calls initialization function, processes message loop <br>// <br>//  PARAMETERS: <br>// <br>//    hInstance - The handle to the instance of this application that <br>//          is currently being executed. <br>// <br>//    hPrevInstance - This parameter is always NULL in Win32 <br>//          applications. <br>// <br>//    lpCmdLine - A pointer to a null terminated string specifying the <br>//          command line of the application. <br>// <br>//    nCmdShow - Specifies how the main window is to be diplayed. <br>// <br>//  RETURN VALUE: <br>//    If the function terminates before entering the message loop, <br>//    return FALSE. <br>//    Otherwise, return the WPARAM value sent by the WM_QUIT message. <br>// <br>// <br>//  COMMENTS: <br>// <br>//    Windows recognizes this function by name as the initial entry point <br>//    for the program.  This function calls the initialization routine <br>//    It then executes a message retrieval and dispatch loop that is the <br>//    top-level control structure for the remainder of execution.  The <br>//    loop is terminated when a WM_QUIT  message is received, at which <br>//    time this function exits the application instance by returning the <br>//    value passed by PostQuitMessage(). <br>// <br>//    If this function must abort before entering the message loop, it <br>//    returns the conventional value NULL. <br>// <br> <br>int APIENTRY WinMain(HINSTANCE hInstance, <br>                     HINSTANCE hPrevInstance,  <br>                     LPSTR     lpCmdLine,  <br>                     int       nCmdShow) <br>{ <br>    MSG msg; <br>    HANDLE hAccelTable; <br> <br>    // Initialize application by setting up the main window. <br>    if (!InitApplication(hInstance, nCmdShow)) <br>    { <br>        return FALSE;           // Exits if unable to initialize <br>    } <br> <br>    hAccelTable = LoadAccelerators(hInstance, szAppName); <br> <br>    // Acquire and dispatch messages until a WM_QUIT message is received. <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg)) <br>        { <br>            TranslateMessage(&amp;msg);  // Translates virtual key codes <br>            DispatchMessage(&amp;msg);   // Dispatches message to window <br>        } <br>    } <br>    return msg.wParam;  // Returns the value from PostQuitMessage <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HANDLERS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5245"></a>HANDLERS.H</h2>
<pre><code>/*++ <br> <br>  Copyright (c) 1995 Intel Corp <br> <br>  Module Name: <br> <br>    handlers.h <br> <br>  Abstract: <br> <br>    Contains handler function prototypes and typedefs for handlers.cpp. <br> <br> <br>--*/ <br> <br>// <br>// Typedefs <br>// <br> <br>// This typedef defines a pointer to a handler function.  See <br>// dt_dll.cpp for examples of how this is used. <br>typedef BOOL (CALLBACK * LPFNDTHANDLER)( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>typedef LPFNDTHANDLER *LPLPFNDTHANDLER; <br> <br> <br> <br>// <br>// Function Prototypes <br>// <br> <br>BOOL <br>DTHandlerInit( <br>    OUT LPLPFNDTHANDLER HandlerFuncTable, <br>    int                 NumEntries); <br> <br> <br>BOOL CALLBACK <br>DTHandler_accept( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_bind( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_closesocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_connect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getpeername( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getsockname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getsockopt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_htonl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_htons( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_ioctlsocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_listen( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_ntohl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_ntohs( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_recv( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_recvfrom( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_select( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_send( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_sendto( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_setsockopt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_shutdown( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_socket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAccept( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSACancelBlockingCall( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSACleanup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSACloseEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAConnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSACreateEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSADuplicateSocketA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSADuplicateSocketW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumNetworkEvents( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumProtocolsA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumProtocolsW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAEventSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetLastError( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetOverlappedResult( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetQOSByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAHtonl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAHtons( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAIoctl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAIsBlocking( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAJoinLeaf( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSANtohl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSANtohs( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSARecv( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSARecvDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSARecvFrom( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAResetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASend( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASendDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASendTo( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASetBlockingHook( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASetLastError( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASocketA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASocketW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAStartup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAUnhookBlockingHook( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAWaitForMultipleEvents( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_gethostbyaddr( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_gethostbyname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_gethostname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getprotobyname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getprotobynumber( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getservbyname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_getservbyport( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_inet_addr( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_inet_ntoa( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetHostByAddr( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetHostByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetProtoByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetProtoByNumber( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetServByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetServByPort( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSACancelAsyncRequest( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPAccept( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPAsyncSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPBind( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPCancelBlockingCall( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPCleanup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPCloseSocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPConnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPDuplicateSocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPEnumNetworkEvents( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPEventSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetOverlappedResult( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetPeerName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetSockName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetSockOpt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetQOSByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPIoctl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPJoinLeaf( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPListen( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPRecv( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPRecvDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPRecvFrom( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPSend( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPSendDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPSendTo( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPSetSockOpt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPShutdown( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPSocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSPStartup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUCloseEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUCloseSocketHandle( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUCreateEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUCreateSocketHandle( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSCDeinstallProvider( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSCInstallProvider( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUModifyIFSHandle( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUQueryBlockingCallback( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, </code></pre>
<p>
</p>
<pre><code>IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUQuerySocketHandleContext( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUQueueApc( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUResetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUSetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUFDIsSet( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUGetProviderPath( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WPUPostMessage( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler___WSAFDIsSet( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSCEnumProtocols( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAddressToStringA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAAddressToStringW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAStringToAddressA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAStringToAddressW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceBeginA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceBeginW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceNextA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceNextW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceEnd( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetAddressByNameA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetAddressByNameW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAInstallServiceClassA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAInstallServiceClassW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASetServiceA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSASetServiceW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSARemoveServiceClass( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassInfoA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassInfoW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumNameSpaceProvidersA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumNameSpaceProvidersW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassNameByClassIdA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassNameByClassIdW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPCleanup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPLookupServiceBegin( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPLookupServiceNext( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPLookupServiceEnd( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPSetService( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPInstallServiceClass( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPRemoveServiceClass( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br>BOOL CALLBACK <br>DTHandler_NSPGetServiceClassInfo( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost); <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HANDLERS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5244"></a>HANDLERS.CPP</h2>
<pre><code>/*++ <br> <br>  Copyright (c) 1995 Intel Corp <br> <br>  Module Name: <br> <br>    handlers.cpp <br> <br>  Abstract: <br> <br>    Contains handler functions for each possible API or SPI hook. <br> <br>--*/ <br> <br>#include "nowarn.h"  /* turn off benign warnings */ <br>#ifndef _WINSOCKAPI_ <br>#define _WINSOCKAPI_   /* Prevent inclusion of winsock.h in windows.h */ <br>#endif <br> <br>#include "nowarn.h"  /* some warnings may have been turned back on */ <br>#include &lt;winsock2.h&gt; <br>#include &lt;ws2spi.h&gt; <br> <br>#include "handlers.h" <br>#include "dt_dll.h" <br>#include "dt.h" <br> <br>// turn off unreferenced local variable warning <br>#pragma warning(disable: 4100) <br> <br> <br> <br>// <br>// Function Definitions <br>// <br> <br>  <br>BOOL <br>DTHandlerInit( <br>    OUT LPLPFNDTHANDLER HandlerFuncTable, <br>    int                    NumEntries) <br>/*++ <br> <br>  Function Description: <br> <br>      Fills in the given HandlerFuncTable with pointers to all the <br>      appropriate handler functions, based on notification code. <br> <br>  Arguments: <br> <br>      HandlerFuncTable -- an uninitialized array of pointers of type <br>      LPFNDTHANDLER, which point to handler functions (see handlers.h) <br> <br>      NumEntries -- the number of entries in the array.  Currently <br>      only used to zero out the array. <br> <br>  Return Value: <br> <br>      Always returns TRUE. <br> <br>--*/ <br>{ <br>    memset((char *)HandlerFuncTable, 0, NumEntries * sizeof(LPFNDTHANDLER)); <br> <br>    HandlerFuncTable[DTCODE_accept] = DTHandler_accept; <br>    HandlerFuncTable[DTCODE_bind] = DTHandler_bind; <br>    HandlerFuncTable[DTCODE_closesocket] = DTHandler_closesocket; <br>    HandlerFuncTable[DTCODE_connect] = DTHandler_connect; <br>    HandlerFuncTable[DTCODE_getpeername] = DTHandler_getpeername; <br>    HandlerFuncTable[DTCODE_getsockname] = DTHandler_getsockname; <br>    HandlerFuncTable[DTCODE_getsockopt] = DTHandler_getsockopt; <br>    HandlerFuncTable[DTCODE_htonl] = DTHandler_htonl; <br>    HandlerFuncTable[DTCODE_htons] = DTHandler_htons; <br>    HandlerFuncTable[DTCODE_ioctlsocket] = DTHandler_ioctlsocket; <br>    HandlerFuncTable[DTCODE_listen] = DTHandler_listen; <br>    HandlerFuncTable[DTCODE_ntohl] = DTHandler_ntohl; <br>    HandlerFuncTable[DTCODE_ntohs] = DTHandler_ntohs; <br>    HandlerFuncTable[DTCODE_recv] = DTHandler_recv; <br>    HandlerFuncTable[DTCODE_recvfrom] = DTHandler_recvfrom; <br>    HandlerFuncTable[DTCODE_select] = DTHandler_select; <br>    HandlerFuncTable[DTCODE_send] = DTHandler_send; <br>    HandlerFuncTable[DTCODE_sendto] = DTHandler_sendto; <br>    HandlerFuncTable[DTCODE_setsockopt] = DTHandler_setsockopt; <br>    HandlerFuncTable[DTCODE_shutdown] = DTHandler_shutdown; <br>    HandlerFuncTable[DTCODE_socket] = DTHandler_socket; <br>    HandlerFuncTable[DTCODE_WSAAccept] = DTHandler_WSAAccept; <br>    HandlerFuncTable[DTCODE_WSAAsyncSelect] = DTHandler_WSAAsyncSelect; <br>    HandlerFuncTable[DTCODE_WSACancelBlockingCall] = <br>      DTHandler_WSACancelBlockingCall; <br>    HandlerFuncTable[DTCODE_WSACleanup] = DTHandler_WSACleanup; <br>    HandlerFuncTable[DTCODE_WSACloseEvent] = DTHandler_WSACloseEvent; <br>    HandlerFuncTable[DTCODE_WSAConnect] = DTHandler_WSAConnect; <br>    HandlerFuncTable[DTCODE_WSACreateEvent] = DTHandler_WSACreateEvent; <br>    HandlerFuncTable[DTCODE_WSADuplicateSocketA] = <br>      DTHandler_WSADuplicateSocketA; <br>    HandlerFuncTable[DTCODE_WSADuplicateSocketW] = <br>      DTHandler_WSADuplicateSocketW; <br>    HandlerFuncTable[DTCODE_WSAEnumNetworkEvents] = <br>      DTHandler_WSAEnumNetworkEvents; <br>    HandlerFuncTable[DTCODE_WSAEnumProtocolsA] = DTHandler_WSAEnumProtocolsA; <br>    HandlerFuncTable[DTCODE_WSAEnumProtocolsW] = DTHandler_WSAEnumProtocolsW; <br>    HandlerFuncTable[DTCODE_WSAEventSelect] = DTHandler_WSAEventSelect; <br>    HandlerFuncTable[DTCODE_WSAGetLastError] = DTHandler_WSAGetLastError; <br>    HandlerFuncTable[DTCODE_WSAGetOverlappedResult] = <br>      DTHandler_WSAGetOverlappedResult; <br>    HandlerFuncTable[DTCODE_WSAGetQOSByName] = DTHandler_WSAGetQOSByName; <br>    HandlerFuncTable[DTCODE_WSAHtonl] = DTHandler_WSAHtonl; <br>    HandlerFuncTable[DTCODE_WSAHtons] = DTHandler_WSAHtons; <br>    HandlerFuncTable[DTCODE_WSAIoctl] = DTHandler_WSAIoctl; <br>    HandlerFuncTable[DTCODE_WSAIsBlocking] = DTHandler_WSAIsBlocking; <br>    HandlerFuncTable[DTCODE_WSAJoinLeaf] = DTHandler_WSAJoinLeaf; <br>    HandlerFuncTable[DTCODE_WSANtohl] = DTHandler_WSANtohl; <br>    HandlerFuncTable[DTCODE_WSANtohs] = DTHandler_WSANtohs; <br>    HandlerFuncTable[DTCODE_WSARecv] = DTHandler_WSARecv; <br>    HandlerFuncTable[DTCODE_WSARecvDisconnect] = <br>      DTHandler_WSARecvDisconnect; <br>    HandlerFuncTable[DTCODE_WSARecvFrom] = DTHandler_WSARecvFrom; <br>    HandlerFuncTable[DTCODE_WSAResetEvent] = DTHandler_WSAResetEvent; <br>    HandlerFuncTable[DTCODE_WSASend] = DTHandler_WSASend; <br>    HandlerFuncTable[DTCODE_WSASendDisconnect] = <br>      DTHandler_WSASendDisconnect; <br>    HandlerFuncTable[DTCODE_WSASendTo] = DTHandler_WSASendTo; <br>    HandlerFuncTable[DTCODE_WSASetBlockingHook] = <br>      DTHandler_WSASetBlockingHook; <br>    HandlerFuncTable[DTCODE_WSASetEvent] = DTHandler_WSASetEvent; <br>    HandlerFuncTable[DTCODE_WSASetLastError] = DTHandler_WSASetLastError; <br>    HandlerFuncTable[DTCODE_WSASocketA] = DTHandler_WSASocketA; <br>    HandlerFuncTable[DTCODE_WSASocketW] = DTHandler_WSASocketW; <br>    HandlerFuncTable[DTCODE_WSAStartup] = DTHandler_WSAStartup; <br>    HandlerFuncTable[DTCODE_WSAUnhookBlockingHook] = <br>      DTHandler_WSAUnhookBlockingHook; <br>    HandlerFuncTable[DTCODE_WSAWaitForMultipleEvents] = <br>      DTHandler_WSAWaitForMultipleEvents; <br>    HandlerFuncTable[DTCODE_gethostbyaddr] = DTHandler_gethostbyaddr; <br>    HandlerFuncTable[DTCODE_gethostbyname] = DTHandler_gethostbyname; <br>    HandlerFuncTable[DTCODE_gethostname] = DTHandler_gethostname; <br>    HandlerFuncTable[DTCODE_getprotobyname] = DTHandler_getprotobyname; <br>    HandlerFuncTable[DTCODE_getprotobynumber] = DTHandler_getprotobynumber; <br>    HandlerFuncTable[DTCODE_getservbyname] = DTHandler_getservbyname; <br>    HandlerFuncTable[DTCODE_getservbyport] = DTHandler_getservbyport; <br>    HandlerFuncTable[DTCODE_inet_addr] = DTHandler_inet_addr; <br>    HandlerFuncTable[DTCODE_inet_ntoa] = DTHandler_inet_ntoa; <br>    HandlerFuncTable[DTCODE_WSAAsyncGetHostByAddr] = <br>      DTHandler_WSAAsyncGetHostByAddr; <br>    HandlerFuncTable[DTCODE_WSAAsyncGetHostByName] = <br>      DTHandler_WSAAsyncGetHostByName; <br>    HandlerFuncTable[DTCODE_WSAAsyncGetProtoByName] = <br>      DTHandler_WSAAsyncGetProtoByName; <br>    HandlerFuncTable[DTCODE_WSAAsyncGetProtoByNumber] = <br>      DTHandler_WSAAsyncGetProtoByNumber; <br>    HandlerFuncTable[DTCODE_WSAAsyncGetServByName] = <br>      DTHandler_WSAAsyncGetServByName; <br>    HandlerFuncTable[DTCODE_WSAAsyncGetServByPort] = <br>      DTHandler_WSAAsyncGetServByPort; <br>    HandlerFuncTable[DTCODE_WSACancelAsyncRequest] = <br>      DTHandler_WSACancelAsyncRequest; <br>    HandlerFuncTable[DTCODE_WSPAccept] = DTHandler_WSPAccept; <br>    HandlerFuncTable[DTCODE_WSPAsyncSelect] = DTHandler_WSPAsyncSelect; <br>    HandlerFuncTable[DTCODE_WSPBind] = DTHandler_WSPBind; <br>    HandlerFuncTable[DTCODE_WSPCancelBlockingCall] = <br>      DTHandler_WSPCancelBlockingCall; <br>    HandlerFuncTable[DTCODE_WSPCleanup] = DTHandler_WSPCleanup; <br>    HandlerFuncTable[DTCODE_WSPCloseSocket] = DTHandler_WSPCloseSocket; <br>    HandlerFuncTable[DTCODE_WSPConnect] = DTHandler_WSPConnect; <br>    HandlerFuncTable[DTCODE_WSPDuplicateSocket] = <br>      DTHandler_WSPDuplicateSocket; <br>    HandlerFuncTable[DTCODE_WSPEnumNetworkEvents] = <br>      DTHandler_WSPEnumNetworkEvents; <br>    HandlerFuncTable[DTCODE_WSPEventSelect] = DTHandler_WSPEventSelect; <br>    HandlerFuncTable[DTCODE_WSPGetOverlappedResult] = <br>      DTHandler_WSPGetOverlappedResult; <br>    HandlerFuncTable[DTCODE_WSPGetPeerName] = DTHandler_WSPGetPeerName; <br>    HandlerFuncTable[DTCODE_WSPGetSockName] = DTHandler_WSPGetSockName; <br>    HandlerFuncTable[DTCODE_WSPGetSockOpt] = DTHandler_WSPGetSockOpt; <br>    HandlerFuncTable[DTCODE_WSPGetQOSByName] = DTHandler_WSPGetQOSByName; <br>    HandlerFuncTable[DTCODE_WSPIoctl] = DTHandler_WSPIoctl; <br>    HandlerFuncTable[DTCODE_WSPJoinLeaf] = DTHandler_WSPJoinLeaf; <br>    HandlerFuncTable[DTCODE_WSPListen] = DTHandler_WSPListen; <br>    HandlerFuncTable[DTCODE_WSPRecv] = DTHandler_WSPRecv; <br>    HandlerFuncTable[DTCODE_WSPRecvDisconnect] = <br>      DTHandler_WSPRecvDisconnect; <br>    HandlerFuncTable[DTCODE_WSPRecvFrom] = DTHandler_WSPRecvFrom; <br>    HandlerFuncTable[DTCODE_WSPSelect] = DTHandler_WSPSelect; <br>    HandlerFuncTable[DTCODE_WSPSend] = DTHandler_WSPSend; <br>    HandlerFuncTable[DTCODE_WSPSendDisconnect] = <br>      DTHandler_WSPSendDisconnect; <br>    HandlerFuncTable[DTCODE_WSPSendTo] = DTHandler_WSPSendTo; <br>    HandlerFuncTable[DTCODE_WSPSetSockOpt] = DTHandler_WSPSetSockOpt; <br>    HandlerFuncTable[DTCODE_WSPShutdown] = DTHandler_WSPShutdown; <br>    HandlerFuncTable[DTCODE_WSPSocket] = DTHandler_WSPSocket; <br>    HandlerFuncTable[DTCODE_WSPStartup] = DTHandler_WSPStartup; <br>    HandlerFuncTable[DTCODE_WPUCloseEvent] = DTHandler_WPUCloseEvent; <br>    HandlerFuncTable[DTCODE_WPUCloseSocketHandle] = <br>      DTHandler_WPUCloseSocketHandle; <br>    HandlerFuncTable[DTCODE_WPUCreateEvent] = DTHandler_WPUCreateEvent; <br>    HandlerFuncTable[DTCODE_WPUCreateSocketHandle] = <br>      DTHandler_WPUCreateSocketHandle; <br>    HandlerFuncTable[DTCODE_WSCDeinstallProvider] = <br>      DTHandler_WSCDeinstallProvider; <br>    HandlerFuncTable[DTCODE_WSCInstallProvider] = <br>      DTHandler_WSCInstallProvider; <br>    HandlerFuncTable[DTCODE_WPUModifyIFSHandle] = <br>      DTHandler_WPUModifyIFSHandle; <br>    HandlerFuncTable[DTCODE_WPUQueryBlockingCallback] = <br>      DTHandler_WPUQueryBlockingCallback; <br>    HandlerFuncTable[DTCODE_WPUQuerySocketHandleContext] = <br>      DTHandler_WPUQuerySocketHandleContext; <br>    HandlerFuncTable[DTCODE_WPUQueueApc] = DTHandler_WPUQueueApc; <br>    HandlerFuncTable[DTCODE_WPUResetEvent] = DTHandler_WPUResetEvent; <br>    HandlerFuncTable[DTCODE_WPUSetEvent] = DTHandler_WPUSetEvent; <br>    HandlerFuncTable[DTCODE_WSCEnumProtocols] = DTHandler_WSCEnumProtocols; <br>    HandlerFuncTable[DTCODE_WPUGetProviderPath] = DTHandler_WPUGetProviderPath; <br>    HandlerFuncTable[DTCODE_WPUPostMessage] = DTHandler_WPUPostMessage; <br>    HandlerFuncTable[DTCODE_WPUFDIsSet] = DTHandler_WPUFDIsSet; <br>    HandlerFuncTable[DTCODE___WSAFDIsSet] = DTHandler___WSAFDIsSet; <br>    HandlerFuncTable[DTCODE_WSAAddressToStringA] = <br>        DTHandler_WSAAddressToStringA; <br>    HandlerFuncTable[DTCODE_WSAAddressToStringW] = <br>        DTHandler_WSAAddressToStringW; <br>    HandlerFuncTable[DTCODE_WSAStringToAddressA] = <br>        DTHandler_WSAStringToAddressA; <br>    HandlerFuncTable[DTCODE_WSAStringToAddressW] = <br>        DTHandler_WSAStringToAddressW; <br>    HandlerFuncTable[DTCODE_WSALookupServiceBeginA] = <br>        DTHandler_WSALookupServiceBeginA; <br>    HandlerFuncTable[DTCODE_WSALookupServiceBeginW] = <br>        DTHandler_WSALookupServiceBeginW; <br>    HandlerFuncTable[DTCODE_WSALookupServiceNextA] = <br>        DTHandler_WSALookupServiceNextA; <br>    HandlerFuncTable[DTCODE_WSALookupServiceNextW] = <br>        DTHandler_WSALookupServiceNextW; <br>    HandlerFuncTable[DTCODE_WSALookupServiceEnd] = <br>        DTHandler_WSALookupServiceEnd; <br>    HandlerFuncTable[DTCODE_WSAInstallServiceClassA] = <br>        DTHandler_WSAInstallServiceClassA; <br>    HandlerFuncTable[DTCODE_WSAInstallServiceClassW] = <br>        DTHandler_WSAInstallServiceClassW; <br>    HandlerFuncTable[DTCODE_WSASetServiceA] = <br>        DTHandler_WSASetServiceA; <br>    HandlerFuncTable[DTCODE_WSASetServiceW] = <br>        DTHandler_WSASetServiceW; <br>    HandlerFuncTable[DTCODE_WSARemoveServiceClass] = <br>        DTHandler_WSARemoveServiceClass; <br>    HandlerFuncTable[DTCODE_WSAGetServiceClassInfoA] = <br>        DTHandler_WSAGetServiceClassInfoA; <br>    HandlerFuncTable[DTCODE_WSAGetServiceClassInfoW] = <br>        DTHandler_WSAGetServiceClassInfoW; <br>    HandlerFuncTable[DTCODE_WSAEnumNameSpaceProvidersA] = <br>        DTHandler_WSAEnumNameSpaceProvidersA; <br>    HandlerFuncTable[DTCODE_WSAEnumNameSpaceProvidersW] = <br>        DTHandler_WSAEnumNameSpaceProvidersW; <br>    HandlerFuncTable[DTCODE_WSAGetServiceClassNameByClassIdA] = <br>        DTHandler_WSAGetServiceClassNameByClassIdA; <br>    HandlerFuncTable[DTCODE_WSAGetServiceClassNameByClassIdW] = <br>        DTHandler_WSAGetServiceClassNameByClassIdW; <br>    HandlerFuncTable[DTCODE_NSPLookupServiceBegin] = <br>        DTHandler_NSPLookupServiceBegin; <br>    HandlerFuncTable[DTCODE_NSPLookupServiceNext] = <br>        DTHandler_NSPLookupServiceNext; <br>    HandlerFuncTable[DTCODE_NSPLookupServiceEnd] = <br>        DTHandler_NSPLookupServiceEnd; <br>    HandlerFuncTable[DTCODE_NSPInstallServiceClass] = <br>        DTHandler_NSPInstallServiceClass; <br>    HandlerFuncTable[DTCODE_NSPSetService] = <br>        DTHandler_NSPSetService; <br>    HandlerFuncTable[DTCODE_NSPRemoveServiceClass] = <br>        DTHandler_NSPRemoveServiceClass; <br>    HandlerFuncTable[DTCODE_NSPGetServiceClassInfo] = <br>        DTHandler_NSPGetServiceClassInfo; <br> <br>    return(TRUE); <br>} <br> <br>/*++ <br> <br>  Note: <br> <br>      This comment applies to all DTHandler_xxxx functions. <br> <br>  Function Description: <br> <br>      For the present, each handler function simply adds "xxxx <br>      called." to the end of the string passed in, and calls <br>      DTTextOut to output the whole string to the Debug Window.  This <br>      allows handler functions to be disabled easily, or to output <br>      more information (like the arguments) via multiple calls to <br>      DTTextOut, etc.  See the Debug/Trace documentation for more <br>      information. <br> <br>  Arguments: <br> <br>      vl -- Variable used to strip arguments off the stack of <br>      WSA[Pre|Post]ApiNotify, the calling function. <br> <br>      ReturnValue -- A void pointer to the return value for the <br>      original API/SPI function.  Use a local variable to cast it to <br>      the appropriate type. <br> <br>      LibraryName -- For API functions, this should just be <br>      "WinSock2", but for SPI functions it is the name of the service <br>      provider.  This is to distinguish among the multiple service <br>      providers that WinSock2 may be calling. <br> <br>      Buffer -- A string containg some info about the thread and <br>      function call # of this call. <br> <br>      Index -- How many characters are in the above. <br> <br>      BufLen -- How big is the buffer. <br> <br>      PreOrPost -- TRUE if called by a WSAPreApiNotify, FALSE if <br>      called by WSAPostApiNotify. <br> <br>  Return Value: <br> <br>      If the PreOrPost argument is FALSE, then the return value is <br>      ignored.  If it's TRUE, then the return value indicates to <br>      WSAPreApiNotify whether or not we want to short-circuit the API <br>      or SPI function.  TRUE means short-circuit it, FALSE mean don't. <br> <br>--*/ <br> <br>  <br>BOOL CALLBACK <br>DTHandler_accept( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **addr = va_arg(vl, struct sockaddr FAR **); <br>    int FAR **addrlen = va_arg(vl, int FAR **); <br> <br>    wsprintf(Buffer + Index, "accept() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_bind( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    int *namelen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "bind() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_closesocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br> <br>    wsprintf(Buffer + Index, "closesocket() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_connect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    int *namelen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "connect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getpeername( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    int FAR **namelen = va_arg(vl, int FAR **); <br> <br>    wsprintf(Buffer + Index, "getpeername() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getsockname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    int FAR **namelen = va_arg(vl, int FAR **); <br> <br>    wsprintf(Buffer + Index, "getsockname() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getsockopt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    int *level = va_arg(vl, int *); <br>    int *optname = va_arg(vl, int *); <br>    char FAR **optval = va_arg(vl, char FAR **); <br>    int FAR **optlen = va_arg(vl, int FAR **); <br> <br>    wsprintf(Buffer + Index, "getsockopt() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_htonl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    u_long *RetVal = (u_long *)ReturnValue; <br>    u_long *hostlong = va_arg(vl, u_long *); <br> <br>    wsprintf(Buffer + Index, "htonl() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_htons( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    u_short *RetVal = (u_short *)ReturnValue; <br>    u_short *hostshort = va_arg(vl, u_short *); <br> <br>    wsprintf(Buffer + Index, "htons() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_ioctlsocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    long *cmd = va_arg(vl, long *); <br>    u_long FAR **argp = va_arg(vl, u_long FAR **); <br> <br>    wsprintf(Buffer + Index, "ioctlsocket() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_listen( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    int *backlog = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "listen() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_ntohl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    u_long *RetVal = (u_long *)ReturnValue; <br>    u_long *netlong = va_arg(vl, u_long *); <br> <br>    wsprintf(Buffer + Index, "ntohl() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_ntohs( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    u_short *RetVal = (u_short *)ReturnValue; <br>    u_short *netshort = va_arg(vl, u_short *); <br> <br>    wsprintf(Buffer + Index, "ntohs() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_recv( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *len = va_arg(vl, int *); <br>    int *flags = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "recv() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_recvfrom( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *len = va_arg(vl, int *); <br>    int *flags = va_arg(vl, int *); <br>    struct sockaddr FAR **from = va_arg(vl, struct sockaddr FAR **); <br>    int FAR **fromlen = va_arg(vl, int FAR **); <br> <br>    wsprintf(Buffer + Index, "recvfrom() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_select( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    int *nfds = va_arg(vl, int *); <br>    fd_set FAR **readfds = va_arg(vl, fd_set FAR **); <br>    fd_set FAR **writefds = va_arg(vl, fd_set FAR **); <br>    fd_set FAR **exceptfds = va_arg(vl, fd_set FAR **); <br>    struct timeval FAR **timeout = va_arg(vl, struct timeval FAR **); <br> <br>    wsprintf(Buffer + Index, "select() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_send( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *len = va_arg(vl, int *); <br>    int *flags = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "send() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_sendto( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *len = va_arg(vl, int *); <br>    int *flags = va_arg(vl, int *); <br>    struct sockaddr FAR **to = va_arg(vl, struct sockaddr FAR **); <br>    int *tolen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "sendto() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_setsockopt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    int *level = va_arg(vl, int *); <br>    int *optname = va_arg(vl, int *); <br>    char FAR **optval = va_arg(vl, char FAR **); <br>    int *optlen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "setsockopt() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_shutdown( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    int *how = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "shutdown() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_socket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    int *af = va_arg(vl, int *); <br>    int *type = va_arg(vl, int *); <br>    int *protocol = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "socket() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAccept( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **addr = va_arg(vl, struct sockaddr FAR **); <br>    LPINT *addrlen = va_arg(vl, LPINT *); <br>    LPCONDITIONPROC *lpfnCondition = va_arg(vl, LPCONDITIONPROC *); <br>    DWORD *dwCallbackData = va_arg(vl, DWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAAccept() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    long *lEvent = va_arg(vl, long *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncSelect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSACancelBlockingCall( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br> <br>    wsprintf(Buffer + Index, "WSACancelBlockingCall() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> </code></pre>
<p>
</p>
<pre><code>BOOL CALLBACK <br>DTHandler_WSACleanup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br> <br>    wsprintf(Buffer + Index, "WSACleanup() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSACloseEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    WSAEVENT *hEvent = va_arg(vl, WSAEVENT *); <br> <br>    wsprintf(Buffer + Index, "WSACloseEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAConnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    int *namelen = va_arg(vl, int *); <br>    LPWSABUF *lpCallerData = va_arg(vl, LPWSABUF *); <br>    LPWSABUF *lpCalleeData = va_arg(vl, LPWSABUF *); <br>    LPQOS *lpSQOS = va_arg(vl, LPQOS *); <br>    LPQOS *lpGQOS = va_arg(vl, LPQOS *); <br> <br>    wsprintf(Buffer + Index, "WSAConnect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSACreateEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    WSAEVENT *RetVal = (WSAEVENT *)ReturnValue; <br> <br>    wsprintf(Buffer + Index, "WSACreateEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSADuplicateSocketA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    DWORD *dwProcessId = va_arg(vl, DWORD *); <br>    LPWSAPROTOCOL_INFOA *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOA *); <br> <br>    wsprintf(Buffer + Index, "WSADuplicateSocketA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSADuplicateSocketW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    DWORD *dwProcessId = va_arg(vl, DWORD *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOW *); <br> <br>    wsprintf(Buffer + Index, "WSADuplicateSocketW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumNetworkEvents( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    WSAEVENT *hEventObject = va_arg(vl, WSAEVENT *); <br>    LPWSANETWORKEVENTS *lpNetworkEvents = va_arg(vl, LPWSANETWORKEVENTS *); <br> <br>    wsprintf(Buffer + Index, "WSAEnumNetworkEvents() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumProtocolsA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPINT *lpiProtocols = va_arg(vl, LPINT *); <br>    LPWSAPROTOCOL_INFOA *lpProtocolBuffer = va_arg(vl, LPWSAPROTOCOL_INFOA *); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAEnumProtocolsA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumProtocolsW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPINT *lpiProtocols = va_arg(vl, LPINT *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolBuffer = va_arg(vl, LPWSAPROTOCOL_INFOW *); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAEnumProtocolsW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAEventSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    WSAEVENT *hEventObject = va_arg(vl, WSAEVENT *); <br>    long *lNetworkEvents = va_arg(vl, long *); <br> <br>    wsprintf(Buffer + Index, "WSAEventSelect() %s.\r\n", <br>         PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetLastError( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br> <br>    wsprintf(Buffer + Index, "WSAGetLastError() %s.\r\n", <br>         PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetOverlappedResult( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPDWORD *lpcbTransfer = va_arg(vl, LPDWORD *); <br>    BOOL *fWait = va_arg(vl, BOOL *); <br>    LPDWORD *lpdwFlags = va_arg(vl, LPDWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAGetOverlappedResult() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetQOSByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpQOSName = va_arg(vl, LPWSABUF *); <br>    LPQOS *lpQOS = va_arg(vl, LPQOS *); <br> <br>    wsprintf(Buffer + Index, "WSAGetQOSByName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAHtonl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    u_long *hostlong = va_arg(vl, u_long *); <br>    u_long FAR **lpnetlong = va_arg(vl, u_long FAR **); <br> <br>    wsprintf(Buffer + Index, "WSAHtonl() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAHtons( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    u_short *hostshort = va_arg(vl, u_short *); <br>    u_short FAR **lpnetshort = va_arg(vl, u_short FAR **); <br> <br>    wsprintf(Buffer + Index, "WSAHtons() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAIoctl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    DWORD *dwIoControlCode = va_arg(vl, DWORD *); <br>    LPVOID *lpvInBuffer = va_arg(vl, LPVOID *); <br>    DWORD *cbInBuffer = va_arg(vl, DWORD *); <br>    LPVOID *lpvOutBuffer = va_arg(vl, LPVOID *); <br>    DWORD *cbOutBuffer = va_arg(vl, DWORD *); <br>    LPDWORD *lpcbBytesReturned = va_arg(vl, LPDWORD *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br> <br>    wsprintf(Buffer + Index, "WSAIoctl() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAIsBlocking( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br> <br>    wsprintf(Buffer + Index, "WSAIsBlocking() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAJoinLeaf( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    int *namelen = va_arg(vl, int *); <br>    LPWSABUF *lpCallerData = va_arg(vl, LPWSABUF *); <br>    LPWSABUF *lpCalleeData = va_arg(vl, LPWSABUF *); <br>    LPQOS *lpSQOS = va_arg(vl, LPQOS *); <br>    LPQOS *lpGQOS = va_arg(vl, LPQOS *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAJoinLeaf() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSANtohl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    u_long *netlong = va_arg(vl, u_long *); <br>    u_long FAR **lphostlong = va_arg(vl, u_long FAR **); <br> <br>    wsprintf(Buffer + Index, "WSANtohl() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSANtohs( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    u_short *netshort = va_arg(vl, u_short *); <br>    u_short FAR **lphostshort = va_arg(vl, u_short FAR **); <br> <br>    wsprintf(Buffer + Index, "WSANtohs() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSARecv( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesRecvd = va_arg(vl, LPDWORD *); <br>    LPDWORD *lpFlags = va_arg(vl, LPDWORD *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br> <br>    wsprintf(Buffer + Index, "WSARecv() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSARecvDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpInboundDisconnectData = va_arg(vl, LPWSABUF *); <br> <br>    wsprintf(Buffer + Index, "WSARecvDisconnect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSARecvFrom( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesRecvd = va_arg(vl, LPDWORD *); <br>    LPDWORD *lpFlags = va_arg(vl, LPDWORD *); <br>    struct sockaddr FAR **lpFrom = va_arg(vl, struct sockaddr FAR **); <br>    LPINT *lpFromlen = va_arg(vl, LPINT *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br> <br>    wsprintf(Buffer + Index, "WSARecvFrom() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAResetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    WSAEVENT *hEvent = va_arg(vl, WSAEVENT *); <br> <br>    wsprintf(Buffer + Index, "WSAResetEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASend( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesSent = va_arg(vl, LPDWORD *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br> <br>    wsprintf(Buffer + Index, "WSASend() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASendDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpOutboundDisconnectData = va_arg(vl, LPWSABUF *); <br> <br>    wsprintf(Buffer + Index, "WSASendDisconnect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASendTo( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesSent = va_arg(vl, LPDWORD *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br>    struct sockaddr FAR **lpTo = va_arg(vl, struct sockaddr FAR **); <br>    int *iTolen = va_arg(vl, int *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br> <br>    wsprintf(Buffer + Index, "WSASendTo() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASetBlockingHook( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    FARPROC *RetVal = (FARPROC *)ReturnValue; <br>    FARPROC *lpBlockFunc = va_arg(vl, FARPROC *); <br> <br>    wsprintf(Buffer + Index, "WSASetBlockingHook() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    WSAEVENT *hEvent = va_arg(vl, WSAEVENT *); <br> <br>    wsprintf(Buffer + Index, "WSASetEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASetLastError( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    // WSASetLastError returns void, so ReturnValue should be NULL <br>    int *iError = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSASetLastError() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASocketA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    int *af = va_arg(vl, int *); <br>    int *type = va_arg(vl, int *); <br>    int *protocol = va_arg(vl, int *); <br>    LPWSAPROTOCOL_INFOA *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOA *); <br>    GROUP *g = va_arg(vl, GROUP *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br> <br>    wsprintf(Buffer + Index, "WSASocketA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASocketW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    int *af = va_arg(vl, int *); <br>    int *type = va_arg(vl, int *); <br>    int *protocol = va_arg(vl, int *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOW *); <br>    GROUP *g = va_arg(vl, GROUP *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br> <br>    wsprintf(Buffer + Index, "WSASocketW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAStartup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    WORD *wVersionRequested = va_arg(vl, WORD *); <br>    LPWSADATA *lpWSAData = va_arg(vl, LPWSADATA *); <br> <br>    wsprintf(Buffer + Index, "WSAStartup() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAUnhookBlockingHook( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br> <br>    wsprintf(Buffer + Index, "WSAUnhookBlockingHook() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAWaitForMultipleEvents( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    DWORD *RetVal = (DWORD *)ReturnValue; <br>    DWORD *cEvents = va_arg(vl, DWORD *); <br>    WSAEVENT FAR **lphEvents = va_arg(vl, WSAEVENT FAR **); <br>    BOOL *fWaitAll = va_arg(vl, BOOL *); <br>    DWORD *dwTimeout = va_arg(vl, DWORD *); <br>    BOOL *fAlertable = va_arg(vl, BOOL *); <br> <br>    wsprintf(Buffer + Index, "WSAWaitForMultipleEvents() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_gethostbyaddr( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    struct hostent FAR **RetVal = (struct hostent FAR **)ReturnValue; <br>    char FAR **addr = va_arg(vl, char FAR **); <br>    int *len = va_arg(vl, int *); <br>    int *type = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "gethostbyaddr() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_gethostbyname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    struct hostent FAR **RetVal = (struct hostent FAR **)ReturnValue; <br>    char FAR **name = va_arg(vl, char FAR **); <br> <br>    wsprintf(Buffer + Index, "gethostbyname() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_gethostname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    char FAR **name = va_arg(vl, char FAR **); <br>    int *namelen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "gethostname() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getprotobyname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    struct protoent FAR **RetVal = (struct protoent FAR **)ReturnValue; <br>    char FAR **name = va_arg(vl, char FAR **); <br> <br>    wsprintf(Buffer + Index, "getprotobyname() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getprotobynumber( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    struct protoent FAR **RetVal = (struct protoent FAR **)ReturnValue; <br>    int *number = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "getprotobynumber() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getservbyname( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    struct servent FAR **RetVal = (struct servent FAR **)ReturnValue; <br>    char FAR **name = va_arg(vl, char FAR **); <br>    char FAR **proto = va_arg(vl, char FAR **); <br> <br>    wsprintf(Buffer + Index, "getservbyname() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_getservbyport( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    struct servent FAR **RetVal = (struct servent FAR **)ReturnValue; <br>    int *port = va_arg(vl, int *); <br>    char FAR **proto = va_arg(vl, char FAR **); <br> <br>    wsprintf(Buffer + Index, "getservbyport() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_inet_addr( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    unsigned long *RetVal = (unsigned long *)ReturnValue; <br>    char FAR **cp = va_arg(vl, char FAR **); <br> <br>    wsprintf(Buffer + Index, "inet_addr() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_inet_ntoa( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    char FAR **RetVal = (char FAR **)ReturnValue; <br>    struct in_addr *in = va_arg(vl, struct in_addr *); <br> <br>    wsprintf(Buffer + Index, "inet_ntoa() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); </code></pre>
<p>
</p>
<pre><code>return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetHostByAddr( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    HANDLE *RetVal = (HANDLE *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    char FAR **addr = va_arg(vl, char FAR **); <br>    int *len = va_arg(vl, int *); <br>    int *type = va_arg(vl, int *); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *buflen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncGetHostByAddr() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetHostByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    HANDLE *RetVal = (HANDLE *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    char FAR **name = va_arg(vl, char FAR **); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *buflen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncGetHostByName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetProtoByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    HANDLE *RetVal = (HANDLE *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    char FAR **name = va_arg(vl, char FAR **); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *buflen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncGetProtoByName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetProtoByNumber( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    HANDLE *RetVal = (HANDLE *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    int *number = va_arg(vl, int *); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *buflen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncGetProtoByNumber() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetServByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    HANDLE *RetVal = (HANDLE *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    char FAR **name = va_arg(vl, char FAR **); <br>    char FAR **proto = va_arg(vl, char FAR **); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *buflen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncGetServByName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAsyncGetServByPort( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    HANDLE *RetVal = (HANDLE *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    u_int *wMsg = va_arg(vl, u_int *); <br>    int *port = va_arg(vl, int *); <br>    char FAR **proto = va_arg(vl, char FAR **); <br>    char FAR **buf = va_arg(vl, char FAR **); <br>    int *buflen = va_arg(vl, int *); <br> <br>    wsprintf(Buffer + Index, "WSAAsyncGetServByPort() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSACancelAsyncRequest( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    HANDLE *hAsyncTaskHandle = va_arg(vl, HANDLE *); <br> <br>    wsprintf(Buffer + Index, "WSACancelAsyncRequest() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPAccept( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **addr = va_arg(vl, struct sockaddr FAR **); <br>    INT FAR **addrlen = va_arg(vl, INT FAR **); <br>    LPCONDITIONPROC *lpfnCondition = va_arg(vl, LPCONDITIONPROC *); <br>    DWORD *dwCallbackData = va_arg(vl, DWORD *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPAccept() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPAsyncSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    unsigned int *wMsg = va_arg(vl, unsigned int *); <br>    long *lEvent = va_arg(vl, long *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPAsyncSelect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPBind( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    INT *namelen = va_arg(vl, INT *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPBind() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPCancelBlockingCall( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPCancelBlockingCall() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPCleanup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPCleanup() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPCloseSocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPCloseSocket() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPConnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    INT *namelen = va_arg(vl, INT *); <br>    LPWSABUF *lpCallerData = va_arg(vl, LPWSABUF *); <br>    LPWSABUF *lpCalleeData = va_arg(vl, LPWSABUF *); <br>    LPQOS *lpSQOS = va_arg(vl, LPQOS *); <br>    LPQOS *lpGQOS = va_arg(vl, LPQOS *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPConnect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPDuplicateSocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    DWORD *dwProcessID = va_arg(vl, DWORD *); <br>    LPWSAPROTOCOL_INFO *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFO *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPDuplicateSocket() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPEnumNetworkEvents( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    WSAEVENT *hEventObject = va_arg(vl, WSAEVENT *); <br>    LPWSANETWORKEVENTS *lpNetworkEvents = va_arg(vl, LPWSANETWORKEVENTS *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPEnumNetworkEvents() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPEventSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    WSAEVENT *hEventObject = va_arg(vl, WSAEVENT *); <br>    long *lNetworkEvents = va_arg(vl, long *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPEventSelect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetOverlappedResult( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPDWORD *lpcbTransfer = va_arg(vl, LPDWORD *); <br>    BOOL *fWait = va_arg(vl, BOOL *); <br>    LPDWORD *lpdwFlags = va_arg(vl, LPDWORD *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPGetOverlappedResult() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetPeerName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    INT FAR **namelen = va_arg(vl, INT FAR **); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPGetPeerName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetSockName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    INT FAR **namelen = va_arg(vl, INT FAR **); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPGetSockName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetSockOpt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    INT *level = va_arg(vl, INT *); <br>    INT *optname = va_arg(vl, INT *); <br>    char FAR **optval = va_arg(vl, char FAR **); <br>    INT FAR **optlen = va_arg(vl, INT FAR **); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPGetSockOpt() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPGetQOSByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpQOSName = va_arg(vl, LPWSABUF *); <br>    LPQOS *lpQOS = va_arg(vl, LPQOS *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPGetQOSByName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPIoctl( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    DWORD *dwIoControlCode = va_arg(vl, DWORD *); <br>    LPVOID *lpvInBuffer = va_arg(vl, LPVOID *); <br>    DWORD *cbInBuffer = va_arg(vl, DWORD *); <br>    LPVOID *lpvOutBuffer = va_arg(vl, LPVOID *); <br>    DWORD *cbOutBuffer = va_arg(vl, DWORD *); <br>    LPDWORD *lpcbBytesReturned = va_arg(vl, LPDWORD *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br>    LPWSATHREADID *lpThreadId = va_arg(vl, LPWSATHREADID *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPIoctl() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPJoinLeaf( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    struct sockaddr FAR **name = va_arg(vl, struct sockaddr FAR **); <br>    INT *namelen = va_arg(vl, INT *); <br>    LPWSABUF *lpCallerData = va_arg(vl, LPWSABUF *); <br>    LPWSABUF *lpCalleeData = va_arg(vl, LPWSABUF *); <br>    LPQOS *lpSQOS = va_arg(vl, LPQOS *); <br>    LPQOS *lpGQOS = va_arg(vl, LPQOS *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPJoinLeaf() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPListen( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    INT *backlog = va_arg(vl, INT *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPListen() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPRecv( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesRecvd = va_arg(vl, LPDWORD *); <br>    LPDWORD *lpFlags = va_arg(vl, LPDWORD *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br>    LPWSATHREADID *lpThreadId = va_arg(vl, LPWSATHREADID *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPRecv() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPRecvDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpInboundDisconnectData = va_arg(vl, LPWSABUF *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPRecvDisconnect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPRecvFrom( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesRecvd = va_arg(vl, LPDWORD *); <br>    LPDWORD *lpFlags = va_arg(vl, LPDWORD *); <br>    struct sockaddr FAR **lpFrom = va_arg(vl, struct sockaddr FAR **); <br>    LPINT *lpFromlen = va_arg(vl, LPINT *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br>    LPWSATHREADID *lpThreadId = va_arg(vl, LPWSATHREADID *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPRecvFrom() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPSelect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    INT *nfds = va_arg(vl, INT *); <br>    fd_set FAR **readfds = va_arg(vl, fd_set FAR **); <br>    fd_set FAR **writefds = va_arg(vl, fd_set FAR **); <br>    fd_set FAR **exceptfds = va_arg(vl, fd_set FAR **); <br>    struct timeval FAR **timeout = va_arg(vl, struct timeval FAR **); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPSelect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPSend( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dwBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesSent = va_arg(vl, LPDWORD *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br>    LPWSATHREADID *lpThreadId = va_arg(vl, LPWSATHREADID *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPSend() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPSendDisconnect( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpOutboundDisconnectData = va_arg(vl, LPWSABUF *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPSendDisconnect() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPSendTo( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPWSABUF *lpBuffers = va_arg(vl, LPWSABUF *); <br>    DWORD *dbBufferCount = va_arg(vl, DWORD *); <br>    LPDWORD *lpNumberOfBytesSent = va_arg(vl, LPDWORD *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br>    struct sockaddr FAR **lpTo = va_arg(vl, struct sockaddr FAR **); <br>    INT *iTolen = va_arg(vl, INT *); <br>    LPWSAOVERLAPPED *lpOverlapped = va_arg(vl, LPWSAOVERLAPPED *); <br>    LPWSAOVERLAPPED_COMPLETION_ROUTINE *lpCompletionRoutine = <br>      va_arg(vl, LPWSAOVERLAPPED_COMPLETION_ROUTINE *); <br>    LPWSATHREADID *lpThreadId = va_arg(vl, LPWSATHREADID *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPSendTo() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPSetSockOpt( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    INT *level = va_arg(vl, INT *); <br>    INT *optname = va_arg(vl, INT *); <br>    char FAR **optval = va_arg(vl, char FAR **); <br>    INT *optlen = va_arg(vl, INT *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPSetSockOpt() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPShutdown( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    INT *how = va_arg(vl, INT *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPShutdown() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPSocket( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    INT *RetVal = (INT *)ReturnValue; <br>    int *af = va_arg(vl, int *); <br>    int *type = va_arg(vl, int *); <br>    int *protocol = va_arg(vl, int *); <br>    LPWSAPROTOCOL_INFO *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFO *); <br>    GROUP *g = va_arg(vl, GROUP *); <br>    DWORD *dwFlags = va_arg(vl, DWORD *); <br>    INT FAR **lpErrno = va_arg(vl, INT FAR **); <br> <br>    wsprintf(Buffer + Index, "WSPSocket() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSPStartup( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    WORD *wVersionRequested = va_arg(vl, WORD *); <br>    LPWSPDATA *lpWSPData = va_arg(vl, LPWSPDATA *); <br>    LPWSAPROTOCOL_INFOA *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOA *); <br>    WSPUPCALLTABLE *UpcallTable = va_arg(vl, WSPUPCALLTABLE *); <br>    LPWSPPROC_TABLE *lpProcTable = va_arg(vl, LPWSPPROC_TABLE *); <br> <br>    wsprintf(Buffer + Index, "WSPStartup() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUCloseEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    WSAEVENT *hEvent = va_arg(vl, WSAEVENT *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUCloseEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUCloseSocketHandle( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUCloseSocketHandle() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUCreateEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    WSAEVENT *RetVal = (WSAEVENT *)ReturnValue; <br>    LPINT *lpErrno = va_arg(vl, LPINT *); </code></pre>
<p>
</p>
<pre><code><br>    wsprintf(Buffer + Index, "WPUCreateEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUCreateSocketHandle( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    DWORD *dwCatalogEntryId = va_arg(vl, DWORD *); <br>    DWORD *dwContext = va_arg(vl, DWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUCreateSocketHandle() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSCDeinstallProvider( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    DWORD *dwProviderId = va_arg(vl, DWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WSCDeinstallProvider() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSCInstallProvider( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    char FAR **lpszProviderName = va_arg(vl, char FAR **); <br>    char FAR **lpszProviderDllPath = va_arg(vl, char FAR **); <br>    LPWSAPROTOCOL_INFO *lpProtocolInfoList = va_arg(vl, LPWSAPROTOCOL_INFO *); <br>    DWORD *dwNumberOfEntries = va_arg(vl, DWORD *); <br>    LPDWORD *lpdwProviderId = va_arg(vl, LPDWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WSCInstallProvider() %s.\r\n", <br>         PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUModifyIFSHandle( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    SOCKET *RetVal = (SOCKET *)ReturnValue; <br>    DWORD *dwCatalogEntryId = va_arg(vl, DWORD *); <br>    SOCKET *ProposedHandle = va_arg(vl, SOCKET *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUModifyIFSHandle() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUQueryBlockingCallback( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    DWORD *dwCatalogEntryId = va_arg(vl, DWORD *); <br>    LPBLOCKINGCALLBACK FAR **lplpfnCallback = <br>      va_arg(vl, LPBLOCKINGCALLBACK FAR **); <br>    LPDWORD *lpdwContext = va_arg(vl, LPDWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUQueryBlockingCallback() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUQuerySocketHandleContext( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    LPDWORD *lpContext = va_arg(vl, LPDWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUQuerySocketHandleContext() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUQueueApc( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSATHREADID *lpThreadId = va_arg(vl, LPWSATHREADID *); <br>    LPWSAUSERAPC *lpfnUserApc = va_arg(vl, LPWSAUSERAPC *); <br>    DWORD *dwContext = va_arg(vl, DWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUQueueApc() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUResetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    WSAEVENT *hEvent = va_arg(vl, WSAEVENT *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUResetEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUSetEvent( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    WSAEVENT *hEvent = va_arg(vl, WSAEVENT *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUSetEvent() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUFDIsSet( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    fd_set FAR **set = va_arg(vl, fd_set FAR **); <br> <br>    wsprintf(Buffer + Index, "WPUFDIsSet() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUGetProviderPath( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    DWORD *dwProviderId = va_arg(vl, DWORD *); <br>    char FAR **lpszProviderDllPath = va_arg(vl, char FAR **); <br>    LPINT *lpProviderDllPathLen = va_arg(vl, LPINT *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WPUGetProviderPath() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WPUPostMessage( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    BOOL *RetVal = (BOOL *)ReturnValue; <br>    HWND *hWnd = va_arg(vl, HWND *); <br>    UINT *Msg = va_arg(vl, UINT *); <br>    WPARAM *wParam = va_arg(vl, WPARAM *); <br>    LPARAM *lParam = va_arg(vl, LPARAM *); <br> <br>    wsprintf(Buffer + Index, "WPUPostMessage() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSCEnumProtocols( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPINT *lpiProtocols = va_arg(vl, LPINT *); <br>    LPWSAPROTOCOL_INFO *lpProtocolBuffer = va_arg(vl, LPWSAPROTOCOL_INFO *); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD *); <br>    LPINT *lpErrno = va_arg(vl, LPINT *); <br> <br>    wsprintf(Buffer + Index, "WSCEnumProtocols() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler___WSAFDIsSet( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    SOCKET *s = va_arg(vl, SOCKET *); <br>    fd_set FAR **set = va_arg(vl, fd_set FAR **); <br> <br>    wsprintf(Buffer + Index, "__WSAFDIsSet() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAddressToStringA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPSOCKADDR *lpsaAddress = va_arg(vl, LPSOCKADDR *); <br>    DWORD *dwAddressLength= va_arg(vl, DWORD *); <br>    LPWSAPROTOCOL_INFOA *lpProtocolInfo= va_arg(vl, LPWSAPROTOCOL_INFOA *); <br>    LPSTR *lpszAddressString= va_arg(vl, LPSTR *); <br>    LPDWORD *lpdwAddressStringLength= va_arg(vl, LPDWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAAddressToStringA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAAddressToStringW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPSOCKADDR *lpsaAddress = va_arg(vl, LPSOCKADDR *); <br>    DWORD *dwAddressLength= va_arg(vl, DWORD *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolInfo= va_arg(vl, LPWSAPROTOCOL_INFOW *); <br>    LPWSTR *lpszAddressString= va_arg(vl, LPWSTR *); <br>    LPDWORD *lpdwAddressStringLength= va_arg(vl, LPDWORD *); <br> <br>    wsprintf(Buffer + Index, "WSAAddressToStringW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAStringToAddressA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPSTR *AddressString = va_arg(vl, LPSTR*); <br>    INT *AddressFamily = va_arg(vl, INT *); <br>    LPWSAPROTOCOL_INFOA *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOA*); <br>    LPSOCKADDR *lpAddress = va_arg(vl, LPSOCKADDR*); <br>    LPINT *lpAddressLength = va_arg(vl, LPINT*); <br> <br>    wsprintf(Buffer + Index, "WSAStringToAddressA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAStringToAddressW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSTR *AddressString = va_arg(vl, LPWSTR*); <br>    INT *AddressFamily = va_arg(vl, INT *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOW*); <br>    LPSOCKADDR *lpAddress = va_arg(vl, LPSOCKADDR*); <br>    LPINT *lpAddressLength = va_arg(vl, LPINT*); <br> <br>    wsprintf(Buffer + Index, "WSAStringToAddressW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceBeginA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSAQUERYSETA *lpqsRestrictions = va_arg(vl, LPWSAQUERYSETA*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br>    LPHANDLE *lphLookup  = va_arg(vl, LPHANDLE*); <br> <br>    wsprintf(Buffer + Index, "WSALookupServiceBeginA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceBeginW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSAQUERYSETW *lpqsRestrictions = va_arg(vl, LPWSAQUERYSETW*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br>    LPHANDLE *lphLookup  = va_arg(vl, LPHANDLE*); <br> <br>    wsprintf(Buffer + Index, "WSALookupServiceBeginW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceNextA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    HANDLE *hLookup = va_arg(vl, HANDLE*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSAQUERYSETA *lpqsResults = va_arg(vl, LPWSAQUERYSETA*); <br> <br>    wsprintf(Buffer + Index, "WSALookupServiceNextA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceNextW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    HANDLE *hLookup = va_arg(vl, HANDLE*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSAQUERYSETW *lpqsResults = va_arg(vl, LPWSAQUERYSETW*); <br> <br>    wsprintf(Buffer + Index, "WSALookupServiceNextW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSALookupServiceEnd( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    HANDLE *hLookup = va_arg(vl, HANDLE*); <br> <br>    wsprintf(Buffer + Index, "WSALookupServiceEnd() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetAddressByNameA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPSTR *lpszServiceInstanceName = va_arg(vl, LPSTR*); <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    DWORD *dwNameSpace = va_arg(vl, DWORD*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSAQUERYSETA *lpqsResults = va_arg(vl, LPWSAQUERYSETA*); <br>    DWORD *dwResolution = va_arg(vl, DWORD*); <br>    LPSTR *lpszAliasBuffer = va_arg(vl, LPSTR*); <br>    LPDWORD *lpdwAliasBufferLength  = va_arg(vl, LPDWORD*); <br> <br>    wsprintf(Buffer + Index, "WSAGetAddressByNameA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetAddressByNameW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSTR *lpszServiceInstanceName = va_arg(vl, LPWSTR*); <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    DWORD *dwNameSpace = va_arg(vl, DWORD*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSAQUERYSETW *lpqsResults = va_arg(vl, LPWSAQUERYSETW*); <br>    DWORD *dwResolution = va_arg(vl, DWORD*); <br>    LPWSTR *lpszAliasBuffer = va_arg(vl, LPWSTR*); <br>    LPDWORD *lpdwAliasBufferLength  = va_arg(vl, LPDWORD*); <br> <br>    wsprintf(Buffer + Index, "WSAGetAddressByNameW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAInstallServiceClassA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSASERVICECLASSINFOA *lpServiceClassInfo = <br>        va_arg(vl, LPWSASERVICECLASSINFOA*); <br> <br>    wsprintf(Buffer + Index, "WSAInstallServiceClassA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAInstallServiceClassW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSASERVICECLASSINFOW *lpServiceClassInfo = <br>        va_arg(vl, LPWSASERVICECLASSINFOW*); <br> <br>    wsprintf(Buffer + Index, "WSAInstallServiceClassW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASetServiceA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSAQUERYSETA *lpqsRegInfo = va_arg(vl, LPWSAQUERYSETA*); <br>    WSAESETSERVICEOP *essOperation = va_arg(vl, WSAESETSERVICEOP*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br> <br>    wsprintf(Buffer + Index, "WSASetServiceA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSASetServiceW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSAQUERYSETW *lpqsRegInfo = va_arg(vl, LPWSAQUERYSETW*); <br>    WSAESETSERVICEOP *essOperation = va_arg(vl, WSAESETSERVICEOP*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br> <br>    wsprintf(Buffer + Index, "WSASetServiceW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSARemoveServiceClass( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br> <br>    wsprintf(Buffer + Index, "WSARemoveServiceClass() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassInfoA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpProviderId = va_arg(vl, LPGUID*); <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    LPDWORD *lpdwBufSize = va_arg(vl, LPDWORD*); <br>    LPWSASERVICECLASSINFOA *lpServiceClassInfo = <br>        va_arg(vl, LPWSASERVICECLASSINFOA*); <br> <br>    wsprintf(Buffer + Index, "WSAGetServiceClassInfoA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassInfoW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpProviderId = va_arg(vl, LPGUID*); <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    LPDWORD *lpdwBufSize = va_arg(vl, LPDWORD*); <br>    LPWSASERVICECLASSINFOW *lpServiceClassInfo = <br>        va_arg(vl, LPWSASERVICECLASSINFOW*); <br> <br>    wsprintf(Buffer + Index, "WSAGetServiceClassInfoW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumNameSpaceProvidersA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSANAMESPACE_INFOA *Lpnspbuffer = va_arg(vl,  LPWSANAMESPACE_INFOA*); <br> <br>    wsprintf(Buffer + Index, "WSAEnumNameSpaceProvidersA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAEnumNameSpaceProvidersW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSANAMESPACE_INFOW *Lpnspbuffer = va_arg(vl,  LPWSANAMESPACE_INFOW*); <br> <br>    wsprintf(Buffer + Index, "WSAEnumNameSpaceProvidersW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassNameByClassIdA( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    LPSTR *lpszServiceClassName = va_arg(vl, LPSTR*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br> <br>    wsprintf(Buffer + Index, "WSAGetServiceClassNameByClassIdA() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_WSAGetServiceClassNameByClassIdW( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    LPWSTR *lpszServiceClassName = va_arg(vl, LPWSTR*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br> <br>    wsprintf(Buffer + Index, "WSAGetServiceClassNameByClassIdW() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br>BOOL CALLBACK <br>DTHandler_NSPAddressToString( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPSOCKADDR *lpsaAddress = va_arg(vl, LPSOCKADDR *); <br>    DWORD *dwAddressLength= va_arg(vl, DWORD *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolInfo= va_arg(vl, LPWSAPROTOCOL_INFOW *); <br>    LPWSTR *lpszAddressString= va_arg(vl, LPWSTR *); <br>    LPDWORD *lpdwAddressStringLength= va_arg(vl, LPDWORD *); <br> <br>    wsprintf(Buffer + Index, "NSPAddressToString() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPStringToAddress( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSTR *AddressString = va_arg(vl, LPWSTR*); <br>    INT *AddressFamily = va_arg(vl, INT *); <br>    LPWSAPROTOCOL_INFOW *lpProtocolInfo = va_arg(vl, LPWSAPROTOCOL_INFOW*); <br>    LPSOCKADDR *lpAddress = va_arg(vl, LPSOCKADDR*); <br>    LPINT *lpAddressLength = va_arg(vl, LPINT*); <br> <br>    wsprintf(Buffer + Index, "NSPStringToAddress() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPLookupServiceBegin( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSAQUERYSETW *lpqsRestrictions = va_arg(vl, LPWSAQUERYSETW*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br>    LPHANDLE *lphLookup  = va_arg(vl, LPHANDLE*); <br> <br>    wsprintf(Buffer + Index, "NSPLookupServiceBegin() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPLookupServiceNext( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    HANDLE *hLookup = va_arg(vl, HANDLE*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSAQUERYSETW *lpqsResults = va_arg(vl, LPWSAQUERYSETW*); <br> <br>    wsprintf(Buffer + Index, "NSPLookupServiceNext() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPLookupServiceEnd( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    HANDLE *hLookup = va_arg(vl, HANDLE*); <br> <br>    wsprintf(Buffer + Index, "NSPLookupServiceEnd() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPGetAddressByName( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; </code></pre>
<p>
</p>
<pre><code>LPWSTR *lpszServiceInstanceName = va_arg(vl, LPWSTR*); <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    DWORD *dwNameSpace = va_arg(vl, DWORD*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br>    LPWSAQUERYSETW *lpqsResults = va_arg(vl, LPWSAQUERYSETW*); <br>    DWORD *dwResolution = va_arg(vl, DWORD*); <br>    LPWSTR *lpszAliasBuffer = va_arg(vl, LPWSTR*); <br>    LPDWORD *lpdwAliasBufferLength  = va_arg(vl, LPDWORD*); <br> <br>    wsprintf(Buffer + Index, "NSPGetAddressByName() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPInstallServiceClass( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSASERVICECLASSINFOW *lpServiceClassInfo = <br>        va_arg(vl, LPWSASERVICECLASSINFOW*); <br> <br>    wsprintf(Buffer + Index, "NSPInstallServiceClass() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPSetService( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPWSAQUERYSETW *lpqsRegInfo = va_arg(vl, LPWSAQUERYSETW*); <br>    WSAESETSERVICEOP *essOperation = va_arg(vl, WSAESETSERVICEOP*); <br>    DWORD *dwControlFlags = va_arg(vl, DWORD*); <br> <br>    wsprintf(Buffer + Index, "NSPSetService() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPRemoveServiceClass( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br> <br>    wsprintf(Buffer + Index, "NSPRemoveServiceClass() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPGetServiceClassInfo( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpProviderId = va_arg(vl, LPGUID*); <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    LPDWORD *lpdwBufSize = va_arg(vl, LPDWORD*); <br>    LPWSASERVICECLASSINFOW *lpServiceClassInfo = <br>        va_arg(vl, LPWSASERVICECLASSINFOW*); <br> <br>    wsprintf(Buffer + Index, "NSPGetServiceClassInfo() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br>BOOL CALLBACK <br>DTHandler_NSPGetServiceClassNameByClassId( <br>    IN     va_list vl, <br>    IN OUT LPVOID  ReturnValue, <br>    IN     LPSTR   LibraryName, <br>    OUT    char    *Buffer, <br>    IN     int     Index, <br>    IN     int     BufLen, <br>    IN     BOOL    PreOrPost) <br>{ <br>    int *RetVal = (int *)ReturnValue; <br>    LPGUID *lpServiceClassId = va_arg(vl, LPGUID*); <br>    LPWSTR *lpszServiceClassName = va_arg(vl, LPWSTR*); <br>    LPDWORD *lpdwBufferLength = va_arg(vl, LPDWORD*); <br> <br>    wsprintf(Buffer + Index, "NSPGetServiceClassNameByClassId() %s.\r\n", <br>             PreOrPost ? "called" : "returned"); <br>    DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle); <br>    return(FALSE); <br>} <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

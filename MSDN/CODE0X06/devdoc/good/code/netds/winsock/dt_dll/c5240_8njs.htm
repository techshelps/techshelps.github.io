<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NIDEQUE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5248"></a>NIDEQUE.H</h2>
<pre><code>/*++ <br> <br>  Copyright 1996 - 1998 Microsoft Corporation. <br> <br>  Copyright (c) 1995 Intel Corp <br>   <br>  File Name: <br>   <br>    nideque.h <br>   <br>  Abstract: <br>   <br>    Implements Deque structures.  These are double linked lists  that <br>    can place and remove data from the beginning and end. This file <br>    also contains an iterator for Deques.  Important to notice is that <br>    these are non-intrusive deques.  Meaning the use of these classes <br>    does not need to insert pointers into there classes to use these. <br>   <br>--*/ <br> <br>#ifndef _NIDEQUE_H_ <br>#define _NIDEQUE_H_ <br> <br>#include "nowarn.h"  /* turn off benign warnings */ <br>#ifndef _WINSOCKAPI_ <br>#define _WINSOCKAPI_   /* Prevent inclusion of winsock.h in windows.h */ <br>#endif <br>#include &lt;windows.h&gt; <br>#include "nowarn.h"  /* some warnings may have been turned back on */ <br>#include "huerror.h" <br> <br>template&lt;class T&gt; class NIDeque_c; <br>template&lt;class T&gt; class NIDequeIter_c; <br> <br>// Class Name:     NILNode_c <br>// Purpose:  Simply holds data and pointer to form a double linked <br>// list.  <br>// Context:  Can be used anywhere. <br>template&lt;class T&gt; class NILNode_c { <br>    friend class NIDeque_c&lt;T&gt;; <br>    friend class NIDequeIter_c&lt;T&gt;; <br> <br>    private: <br>        T           Data; <br>        NILNode_c   *Next, <br>                    *Back; <br> <br>    public: <br>        NILNode_c(); <br>}; <br> <br>template&lt;class T&gt; NILNode_c&lt;T&gt;::NILNode_c() <br>{ <br>    // Make sure the members are correctly initialized. <br>    Next = NULL; <br>    Back = NULL; <br>} // NILNode_c::NILNode_c <br> <br> <br> <br>// Class Name:     NIDeque_c    <br>// Purpose:  Non-intrusize deque                                        <br>// Context:  Can be used anywhere. <br>template&lt;class T&gt; class NIDeque_c { <br>    friend class NIDequeIter_c&lt;T&gt;; <br> <br>    private: <br>      NILNode_c&lt;T&gt;  *Root, <br>                    *Tail;    <br>    public:  <br>                NIDeque_c(); <br>            ~NIDeque_c(); <br>        BOOL    RemoveFromFront(T &amp;data);     <br>        BOOL    RemoveFromBack(T &amp;data); <br>        BOOL    InsertIntoFront(T data); <br>        BOOL    InsertIntoBack(T data); <br>        BOOL    GetFromFront(T &amp;data); <br>    BOOL    GetFromBack(T &amp;data); <br>    BOOL    IsEmpty(); <br>}; <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::NIDeque_c() <br>   <br>  Function Description: <br>   <br>      Constructor <br>   <br>  Arguments: <br>   <br>      None. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/                                             <br>template&lt;class T&gt; NIDeque_c&lt;T&gt;::NIDeque_c() <br>{ <br>    Root = NULL; <br>    Tail = NULL; <br>} // End of NINIDeque_c::NIDeque_c  <br> <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::~NIDeque_c() <br>   <br>  Function Description: <br>   <br>      Destructor <br>   <br>  Arguments: <br>   <br>      None. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; NIDeque_c&lt;T&gt;::~NIDeque_c() <br>{                                             <br>    NILNode_c&lt;T&gt;    *bptr    = NULL, <br>                    *cptr    = NULL; <br> <br>    for(bptr=NULL,cptr=Root;cptr;bptr=cptr,cptr=cptr-&gt;Next){   <br>        delete bptr; <br>    }                                            <br>    delete bptr; <br>}                 <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::InsertIntoFront() <br>   <br>  Function Description: <br>   <br>      Inserts a piece of data onto the linked list. <br>   <br>  Arguments: <br>   <br>      Data -- Data to put on the linked list. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::InsertIntoFront(T Data) <br>{        <br>    NILNode_c&lt;T&gt;    *nptr    = NULL; <br> <br>    /*  If the list contains something then move the root pointer down. <br>    //  Otherwise, put this new object on the root. <br>    */ <br>    if(!(nptr = new NILNode_c&lt;T&gt;)){ <br>         HUSetLastError(ALLOCERROR); <br>         return FALSE; <br>    }                  <br> <br>    nptr-&gt;Data = Data; <br> <br>    if(Root){ <br>        nptr-&gt;Next = Root; <br>        Root-&gt;Back = nptr; <br>        Root = nptr; <br>    }else{     <br>        Root = nptr; <br>        Tail = nptr; <br>    } <br>    return TRUE; <br>} // End of NIDeque_c::InsFront <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::RemoveFromFront() <br>   <br>  Function Description: <br>   <br>      Removes a piece of data from the front of the linked list. <br>   <br>  Arguments: <br>   <br>      Data -- Data to be taken off of the linked list. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::RemoveFromFront(T &amp;Data) <br>{            <br>    NILNode_c&lt;T&gt;    *nptr    = NULL;    <br>     <br>    if(Root){                  <br>        nptr = Root; <br>        Root = Root-&gt;Next; <br>        if(Root){ <br>            Root-&gt;Back = NULL;  <br>        }else{ <br>            Tail = NULL; <br>        } <br>        nptr-&gt;Next = NULL; <br>        nptr-&gt;Back = NULL;  <br>        Data = nptr-&gt;Data; <br>        delete nptr; <br>        return TRUE; <br>    }else{ <br>        Data = NULL; <br>        return FALSE; <br>    } <br>} // End of NIDeque_c::RemFront <br> <br> <br> <br>                                           <br>/*++ <br>   <br>  NIDeque_c::InsertIntoBack() <br>   <br>  Function Description: <br>   <br>      Inserts a piece of data onto the back of the linked list. <br>   <br>  Arguments: <br>   <br>      Data -- Data to be taken off of the linked list. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::InsertIntoBack(T Data) <br>{        <br>    NILNode_c&lt;T&gt;    *nptr    = NULL; <br>    if(!(nptr = new NILNode_c&lt;T&gt;)){ <br>        HUSetLastError(ALLOCERROR); <br>        return FALSE; <br>    }     <br> <br>    nptr-&gt;Data = Data; <br> <br>    if(Root){ <br>        nptr-&gt;Back = Tail; <br>        Tail-&gt;Next = nptr; <br>        Tail = nptr; <br>    }else{     <br>        Root = nptr; <br>        Tail = nptr; <br>    } <br>    return TRUE; <br>} // End of NIDeque_c::InsBack <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::RemoveFromBack() <br>   <br>  Function Description: <br>   <br>      Removes a piece of data from the back of the linked list. <br>   <br>  Arguments: <br>   <br>      Data -- Data to be taken off of the linked list. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::RemoveFromBack(T &amp;Data) <br>{ <br>    NILNode_c&lt;T&gt;    *nptr    = NULL; <br> <br>    if(Tail){ <br>        nptr = Tail; <br>        Tail = Tail-&gt;Back; <br>        if(Tail){ <br>            Tail-&gt;Next = NULL; <br>        }else{ <br>        Root = NULL; <br>    } <br>        nptr-&gt;Next = NULL; <br>        nptr-&gt;Back = NULL; <br>        Data = nptr-&gt;Data; <br>        delete nptr; <br>        return TRUE; <br>    }else{ <br>        Data = NULL; <br>        return FALSE; <br>    } <br>} <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::GetFromFront() <br>   <br>  Function Description: <br>   <br>      Gets a piece of data from the front of the linked list. <br>   <br>  Arguments: <br>   <br>      Data -- Data to be taken off of the linked list. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::GetFromFront(T &amp;Data) <br>{            <br>    NILNode_c&lt;T&gt;    *nptr    = NULL;    <br>     <br>    if(Root){                  <br>        Data = Root-&gt;Data; <br>        return TRUE; <br>    }else{ <br>        Data = NULL; <br>        return FALSE; <br>    } <br>} // End of NIDeque_c::GetFromFront <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::GetFromBack() <br>   <br>  Function Description: <br>   <br>      Gets a piece of data from the back of the linked list. <br>   <br>  Arguments: <br>   <br>      Data -- Data to be taken off of the linked list. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::GetFromBack(T &amp;Data) <br>{            <br>    NILNode_c&lt;T&gt;    *nptr    = NULL;    <br>     <br>    if(Tail){                  <br>        Data = Tail-&gt;Data; <br>        return TRUE; <br>    }else{ <br>        Data = NULL; <br>        return FALSE; <br>    } <br>} // End of NIDeque_c::RemFront <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDeque_c::IsEmpty() <br>   <br>  Function Description: <br>   <br>      Determines whether a deques is empty <br>   <br>  Arguments: <br>   <br>      None. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDeque_c&lt;T&gt;::IsEmpty() <br>{            <br>    NILNode_c&lt;T&gt;    *nptr    = NULL;    <br>     <br>    if(Root){                <br>        return FALSE; <br>    }else{ <br>        return TRUE; <br>    } <br>} // End of NIDeque_c::IsEmpty <br> <br> <br>// Name:     NIDequeIter_c <br>// Purpose:  An iterator for the Deque_c class.                         <br>// Context:  Of course only with Deque_c <br>template&lt;class T&gt; class NIDequeIter_c { <br>    private: <br>        NIDeque_c&lt;T&gt;  *NIDeque; <br>        NILNode_c&lt;T&gt;  *Current; <br> <br>    private: <br>        void    RemoveData(NILNode_c&lt;T&gt; *cptr,T &amp;data); <br> <br>    protected: // Derived class interface <br>    inline NILNode_c&lt;T&gt; *GetCurrent(); <br>    inline NIDeque_c&lt;T&gt; *GetNIDeque(); <br> <br>    public:  <br>                NIDequeIter_c(); <br>                NIDequeIter_c(NIDeque_c&lt;T&gt; &amp;ANIDeque); <br>                ~NIDequeIter_c(); <br>        BOOL    Initialize(NIDeque_c&lt;T&gt; &amp;ANIDeque); <br>        BOOL    First(T &amp;data); <br>        BOOL    Next(T &amp;data); <br>        BOOL    Last(T &amp;data); <br>        BOOL    Back(T &amp;data); <br>        BOOL    Remove(T &amp;data); <br>        BOOL    Replace(T &amp;src,T chg); <br>}; <br> <br>// <br>// Private members                                              <br>// <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::RemoveData() <br>   <br>  Function Description: <br>   <br>      To remove all of the data from the linked list. <br>   <br>  Arguments: <br>   <br>      cptr -- Current pointer in the linked list. <br>       <br>      ret_data -- Return the data before deleting. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; void NIDequeIter_c&lt;T&gt;::RemoveData(NILNode_c&lt;T&gt; *cptr, <br>                                                    T &amp;ret_data) <br>{ <br>    NILNode_c&lt;T&gt;  *bptr    = NULL, <br>                  *nptr    = NULL, <br>                  *fptr    = NULL; <br> <br>    if(Current == cptr){ <br>        Current = cptr-&gt;Next; <br>    } <br>    fptr = cptr; <br>    bptr = cptr-&gt;Back; <br>    nptr = cptr-&gt;Next; <br>    if(bptr != NULL){ <br>        bptr-&gt;Next = nptr; <br>    }                       <br>    if(nptr != NULL){ <br>        nptr-&gt;Back = bptr; <br>    } <br>    if(fptr == NIDeque-&gt;Root){ <br>        NIDeque-&gt;Root = nptr; <br>    }           <br>    if(fptr == NIDeque-&gt;Tail){ <br>        NIDeque-&gt;Tail = bptr; <br>    }                                              <br>    if(ret_data){ <br>        ret_data = fptr-&gt;Data; <br>    } <br>    delete fptr; <br>} // End of NINIDeque_c::RemoveData <br> <br> <br>// <br>// Public members                                              <br>// <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::NIDequeIter_c() <br>   <br>  Function Description: <br>   <br>      Constructor. <br>   <br>  Arguments: <br>   <br>      ANIDeque -- The deque to iterate over. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; NIDequeIter_c&lt;T&gt;::NIDequeIter_c(NIDeque_c&lt;T&gt; &amp;ANIDeque)  <br>{ <br>    NIDeque = &amp;ANIDeque; <br>    Current = NULL; <br>} <br> <br> <br> <br>template&lt;class T&gt; NIDequeIter_c&lt;T&gt;::NIDequeIter_c()  <br>{ <br>    NIDeque = NULL; <br>    Current = NULL; <br>} <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::~NIDequeIter_c() <br>   <br>  Function Description: <br>   <br>      Destructor. <br>   <br>  Arguments: <br>   <br>      None. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; NIDequeIter_c&lt;T&gt;::~NIDequeIter_c() <br>{ <br>} <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::Initialize() <br>   <br>  Function Description: <br>   <br>      Initializes the iterator. <br>   <br>  Arguments: <br>   <br>      ANIDeque -&gt; The deque to iterate over. <br>   <br>  Return Value: <br>   <br>      None. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::Initialize(NIDeque_c&lt;T&gt; &amp;ANIDeque)  <br>{ <br>    NIDeque = &amp;ANIDeque; <br>    Current = NULL; <br>    return TRUE; <br>} <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::First() <br>   <br>  Function Description: <br>   <br>      Returns the First data in the linked list.  This primes the <br>      current pointer so that next time the Next method is used to get <br>      more linked list data. <br>   <br>  Arguments: <br>   <br>      data -- The data from the linked list. <br>   <br>  Return Value: <br>   <br>      TRUE -- If data is valid. <br> <br>      FALSE -- If data is not valid. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::First(T &amp;Data) <br>{ <br>    Current = NIDeque-&gt;Root; <br>    if(Current != NULL){ <br>        Data = Current-&gt;Data; <br>        return TRUE; <br>    }else{ <br>        return FALSE; <br>    } <br>} // End of NIDeque_c::First <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::Next() <br>   <br>  Function Description: <br>   <br>      Returns the Next data in the linked list. <br>   <br>  Arguments: <br>   <br>      data -- The data from the linked list. <br>   <br>  Return Value: <br>   <br>      TRUE -- If data is valid. <br> <br>      FALSE -- If data is not valid. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::Next(T &amp;Data) <br>{ <br>    if(Current){ <br>        Current = Current-&gt;Next; <br>        if(Current){ <br>            Data = Current-&gt;Data; <br>            return TRUE; <br>        } <br>    }  <br>    Data = NULL;               <br>    return FALSE; <br>} // End of NIDeque_c::Next <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::Last() <br>   <br>  Function Description: <br>   <br>      Returns the Last data in the linked list. <br>   <br>  Arguments: <br>   <br>      data -- The data from the linked list. <br>   <br>  Return Value: <br>   <br>      TRUE -- If data is valid. <br> <br>      FALSE -- If data is not valid. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::Last(T &amp;Data) <br>{ <br>    Current = NIDeque-&gt;Tail; <br>    if(Current != NULL){ <br>        Data = Current-&gt;Data; <br>        return TRUE; <br>    }else{ <br>        return FALSE; <br>    } <br>} // End of NIDeque_c::First <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::Back() <br>   <br>  Function Description: <br>   <br>      Returns the previous data in the linked list. <br>   <br>  Arguments: <br>   <br>      data -- The data from the linked list. <br>   <br>  Return Value: <br>   <br>      TRUE -- If data is valid. <br> <br>      FALSE -- If data is not valid. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::Back(T &amp;Data) <br>{ <br>    if(Current &amp;&amp; (Current = Current-&gt;Back)){ <br>        Data = Current-&gt;Data; <br>        return TRUE; <br>    }else{  <br>        Data = NULL;               <br>        return FALSE; <br>    } <br>} // End of NIDeque_c::Next <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::Replace() <br>   <br>  Function Description: <br>   <br>      Replaces src by chg. <br>   <br>  Arguments: <br>   <br>      src -- Data to search for. <br> <br>      chg -- The new data. <br>   <br>  Return Value: <br>   <br>      TRUE -- If data is valid. <br> <br>      FALSE -- If data is not valid. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::Replace(T &amp;src,T chg) <br>{ <br>    NILNode_c&lt;T&gt; *cptr    = NULL;  <br>     <br>    if(Current != NULL){ <br>        src = Current-&gt;Data; <br>        Current-&gt;Data = chg; <br>        return TRUE; <br>    }                 <br>    return FALSE; <br>} // End of NIDeque_c::Replace <br> <br> <br> <br> <br>/*++ <br>   <br>  NIDequeIter_c::Remove() <br>   <br>  Function Description: <br>   <br>      Removes whatever the current pointer is pointing at. <br>   <br>  Arguments: <br>   <br>      data -- Data removed. <br>   <br>  Return Value: <br>   <br>      TRUE -- If data is valid. <br> <br>      FALSE -- If data is not valid. <br>   <br>--*/ <br>template&lt;class T&gt; BOOL NIDequeIter_c&lt;T&gt;::Remove(T &amp;data) <br>{             <br>    NILNode_c&lt;T&gt;    *cptr   = NULL; <br>    T               *vdata  = NULL; <br>                             <br>    if(Current != NULL){ <br>        RemoveData(Current,data); <br>        return TRUE; <br>    }                            <br>    return FALSE; <br>} // End of NIDeque_c&lt;T&gt;::Remove <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

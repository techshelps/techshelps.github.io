<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CHNGPASS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5225"></a>CHNGPASS.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1995, 1996  Microsoft Corporation <br> <br>Module Name: <br> <br>    chngpass.c <br> <br>Abstract: <br> <br>    This sample changes the password for an arbitrary user on an arbitrary <br>    target machine. <br> <br>    When targetting a domain controller for account update operations, <br>    be sure to target the primary domain controller for the domain. <br>    The account settings are replicated by the primary domain controller <br>    to each backup domain controller as appropriate.  The NetGetDCName() <br>    Lan Manager API call can be used to get the primary domain controller <br>    computer name from a domain name. <br> <br> <br>    Username is argv[1] <br>    new password is argv[2] <br>    optional target machine (or domain name) is argv[3] <br>    optional old password is argv[4].  This allows non-admin password <br>     changes. <br> <br>    Note that admin or account operator privilege is required on the <br>    target machine unless argv[4] is present and represents the correct <br>    current password. <br> <br>    NetUserSetInfo() at info-level 1003 is appropriate for administrative <br>    over-ride of an existing password. <br> <br>    NetUserChangePassword() allows for an arbitrary user to over-ride <br>    an existing password providing that the current password is confirmed. <br> <br>    Link with netapi32.lib <br> <br>Author: <br> <br>    Scott Field (sfield)    21-Dec-95 <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#include &lt;lm.h&gt; <br> <br>#define RTN_OK 0 <br>#define RTN_USAGE 1 <br>#define RTN_ERROR 13 <br> <br>void <br>DisplayErrorText( <br>    DWORD dwLastError <br>    ); <br> <br>// <br>// Unicode entry point and argv <br>// <br> <br>int <br>__cdecl <br>wmain( <br>    int argc, <br>    wchar_t *argv[] <br>    ) <br>{ <br>    LPWSTR          wUserName; <br>    LPWSTR          wComputerName = NULL; // default to local machine <br>    LPWSTR          wOldPassword; <br>    LPWSTR          wNewPassword; <br>    USER_INFO_1003  pi1003; <br>    NET_API_STATUS  nas; <br> <br>    if( argc &lt; 3 ) { <br>        fprintf(stderr, "Usage: %ls &lt;user&gt; &lt;new_password&gt; " <br>                        "[\\\\machine | domain] [old_password]\n", <br>                        argv[0]); <br>        return RTN_USAGE; <br>    } <br> <br>    // <br>    // process command line arguments <br>    // <br> <br>    wUserName = argv[1]; <br>    wNewPassword = argv[2]; <br> <br>    if( argc &gt;= 4 &amp;&amp; *argv[3] != L'\0' ) { <br> <br>        // <br>        // obtain target machine name, if appropriate <br>        // always in Unicode, as that is what the API takes <br>        // <br> <br>        if(argv[3][0] == L'\\' &amp;&amp; argv[3][1] == L'\\') { <br> <br>            // <br>            // target specified machine name <br>            // <br> <br>            wComputerName = argv[3]; <br>        } <br>        else { <br> <br>            // <br>            // the user specified a domain name.  Lookup the PDC <br>            // <br> <br>            nas = NetGetDCName( <br>                NULL, <br>                argv[3], <br>                (LPBYTE *)&amp;wComputerName <br>                ); <br> <br>            if(nas != NERR_Success) { <br>                DisplayErrorText( nas ); <br>                return RTN_ERROR; <br>            } <br>        } <br>    } <br> <br>    if(argc == 5) { <br>        wOldPassword = argv[4]; <br>    } else { <br>        wOldPassword = NULL; <br>    } <br> <br>    if(wOldPassword == NULL) { <br> <br>        // <br>        // administrative over-ride of existing password <br>        // <br> <br>        pi1003.usri1003_password = wNewPassword; <br> <br>        nas = NetUserSetInfo( <br>                wComputerName,  // computer name <br>                wUserName,      // username <br>                1003,           // info level <br>                (LPBYTE)&amp;pi1003,     // new info <br>                NULL <br>                ); <br>    } else { <br> <br>        // <br>        // allows user to change their own password <br>        // <br> <br>        nas = NetUserChangePassword( <br>                wComputerName, <br>                wUserName, <br>                wOldPassword, <br>                wNewPassword <br>                ); <br>    } <br> <br>    if(wComputerName != NULL &amp;&amp; wComputerName != argv[3]) { <br> <br>        // <br>        // a buffer was allocated for the PDC name, free it <br>        // <br> <br>        NetApiBufferFree(wComputerName); <br>    } <br> <br>    if(nas != NERR_Success) { <br>        DisplayErrorText( nas ); <br>        return RTN_ERROR; <br>    } <br> <br>    return RTN_OK; <br>} <br> <br>void <br>DisplayErrorText( <br>    DWORD dwLastError <br>    ) <br>{ <br>    HMODULE hModule = NULL; // default to system source <br>    LPSTR MessageBuffer; <br>    DWORD dwBufferLength; <br>    DWORD dwFormatFlags; <br> <br>    dwFormatFlags = FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>                    FORMAT_MESSAGE_IGNORE_INSERTS | <br>                    FORMAT_MESSAGE_FROM_SYSTEM ; <br> <br>    // <br>    // if dwLastError is in the network range, load the message source <br>    // <br>    if(dwLastError &gt;= NERR_BASE &amp;&amp; dwLastError &lt;= MAX_NERR) { <br>        hModule = LoadLibraryEx( <br>            TEXT("netmsg.dll"), <br>            NULL, <br>            LOAD_LIBRARY_AS_DATAFILE <br>            ); <br> <br>        if(hModule != NULL) <br>            dwFormatFlags |= FORMAT_MESSAGE_FROM_HMODULE; <br>    } <br> <br>    // <br>    // call FormatMessage() to allow for message text to be acquired <br>    // from the system or the supplied module handle <br>    // <br>    if(dwBufferLength = FormatMessageA( <br>        dwFormatFlags, <br>        hModule, // module to get message from (NULL == system) <br>        dwLastError, <br>        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language <br>        (LPSTR) &amp;MessageBuffer, <br>        0, <br>        NULL <br>        )) <br>    { <br>        DWORD dwBytesWritten; <br> <br>        // <br>        // Output message string on stderr <br>        // <br>        WriteFile( <br>            GetStdHandle(STD_ERROR_HANDLE), <br>            MessageBuffer, <br>            dwBufferLength, <br>            &amp;dwBytesWritten, <br>            NULL <br>            ); <br> <br>        // <br>        // free the buffer allocated by the system <br>        // <br>        LocalFree(MessageBuffer); <br>    } <br> <br>    // <br>    // if we loaded a message source, unload it <br>    // <br>    if(hModule != NULL) <br>        FreeLibrary(hModule); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

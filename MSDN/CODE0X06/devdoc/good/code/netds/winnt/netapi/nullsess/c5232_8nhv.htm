<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NULLSESS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5233"></a>NULLSESS.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    nullsess.c <br> <br>Abstract: <br> <br>    This module illustrates how to use a Null session to overcome access <br>    problems during network related query operations. <br> <br>    One example of the scenario this approach addresses is as follows: <br> <br>    User logs onto workstation A as the local administrator. <br> <br>    Administrator tries to query user information using the NetUserGetInfo() <br>    API call on server B.  This call fails with ERROR_ACCESS_DENIED. <br> <br>    The reason this problem occurs is that the administrator password on <br>    workstation A does not match the administrator password on server B. <br> <br>    During the network query operation, the default behavior is to establish <br>    a connection to the remote server using the credentials of the logged-in <br>    user.  In some scenarios, this behavior is not appropriate, and the <br>    solution is to establish a connection using either known credentials, <br>    or the Null credentials.  Null credentials are suitable for most query <br>    operations against a remote machine.  However, if administrator <br>    related actions are necessary, it is necessary to supply credentials <br>    which have administrative privilege on the remote machine.  Valid <br>    credentials consist of a username, password, and optional domain name. <br> <br>    Establishing a connection in this manner requires that no existing <br>    connections exist to the remote machine tied to the current logon <br>    session. <br> <br>    Note: Null sessions are those where the user credentials passed in the <br>    session setup SMB are null.  This sample only implements a function to <br>    establish a Null session, rather than a session with specific credentials. <br> <br>    Processes and Services running in the Local System account security context <br>    have Null credentials by default, so establishing Null sessions in this <br>    scenario is not required. <br> <br>    Applications that run only on Windows NT 4.0 and above can use <br>    WNetAddConnection2() rather than NetUseAdd() to establish a Null session. <br> <br>Author: <br> <br>    Scott Field (sfield)    13-Jun-96 <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;lm.h&gt; <br> <br>#include &lt;stdio.h&gt; <br> <br>BOOL <br>EstablishNullSession( <br>    LPCWSTR Server, <br>    BOOL bEstablish <br>    ); <br> <br>#define RTN_OK 0 <br>#define RTN_USAGE 1 <br>#define RTN_ERROR 13 <br> <br>int <br>__cdecl <br>wmain( <br>    int argc, <br>    wchar_t *argv[] <br>    ) <br>{ <br> <br>    if(argc != 2) { <br>        printf("Usage: %ls &lt;\\\\Server&gt;\n", argv[0]); <br>        return RTN_USAGE; <br>    } <br> <br>    // <br>    // try network operation here.  If this fails with an access denied <br>    // error message, retry the operation using a Null session. <br>    // <br> <br>    // <br>    // establish a session to the target machine with Null credentials <br>    // <br> <br>    if(EstablishNullSession( argv[1], TRUE )) { <br> <br>        // <br>        // retry network related operation here. <br>        // <br> <br>        // <br>        // break the existing connection we made <br>        // <br> <br>        EstablishNullSession( argv[1], FALSE ); <br>    } else { <br> <br>        // <br>        // error occurred establishing Null session <br>        // <br> <br>        printf("Error establishing Null session! (rc=%lu)\n", GetLastError()); <br>        return RTN_ERROR; <br>    } <br> <br>    return RTN_OK; <br>} <br> <br>BOOL <br>EstablishNullSession( <br>    LPCWSTR Server, <br>    BOOL bEstablish <br>    ) <br>{ <br>    LPCWSTR szIpc = L"\\IPC$"; <br>    WCHAR RemoteResource[UNCLEN + 5 + 1]; // UNC len + \IPC$ + NULL <br>    DWORD cchServer; <br> <br>    NET_API_STATUS nas; <br> <br>    // <br>    // do not allow NULL or empty server name <br>    // <br> <br>    if(Server == NULL || *Server == L'\0') { <br>        SetLastError(ERROR_INVALID_COMPUTERNAME); <br>        return FALSE; <br>    } <br> <br>    cchServer = lstrlenW( Server ); <br> <br>    if(Server[0] != L'\\' &amp;&amp; Server[1] != L'\\') { <br> <br>        // <br>        // prepend slashes and NULL terminate <br>        // <br> <br>        RemoteResource[0] = L'\\'; <br>        RemoteResource[1] = L'\\'; <br>        RemoteResource[2] = L'\0'; <br>    } <br>    else { <br>        cchServer -= 2; // drop slashes from count <br> <br>        RemoteResource[0] = L'\0'; <br>    } <br> <br>    if(cchServer &gt; CNLEN) { <br>        SetLastError(ERROR_INVALID_COMPUTERNAME); <br>        return FALSE; <br>    } <br> <br>    if(lstrcatW(RemoteResource, Server) == NULL) return FALSE; <br>    if(lstrcatW(RemoteResource, szIpc) == NULL) return FALSE; <br> <br>    // <br>    // disconnect or connect to the resource, based on bEstablish <br>    // <br> <br>    if(bEstablish) { <br>        USE_INFO_2 ui2; <br> <br>        ZeroMemory(&amp;ui2, sizeof(ui2)); <br> <br>        ui2.ui2_local = NULL; <br>        ui2.ui2_remote = (LPTSTR) RemoteResource; <br>        ui2.ui2_asg_type = USE_IPC; <br>        ui2.ui2_password = ui2.ui2_username = ui2.ui2_domainname = (LPTSTR) L""; <br> <br>        nas = NetUseAdd(NULL, 2, (LPBYTE)&amp;ui2, NULL); <br>    } <br>    else { <br>        nas = NetUseDel(NULL, (LPTSTR) RemoteResource, 0); <br>    } <br> <br>    if( nas == NERR_Success ) return TRUE; // indicate success <br> <br>    SetLastError( nas ); <br> <br>    return FALSE; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

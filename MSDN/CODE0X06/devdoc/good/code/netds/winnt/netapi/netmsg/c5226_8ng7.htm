<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NETMSG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5227"></a>NETMSG.C</h2>
<pre><code>/*++ <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    netmsg.c <br> <br>Abstract: <br> <br>    The following sample illustrates how to display error text associated with <br>    Networking related error codes, in addition to displaying error text <br>    associated with system related error codes. <br> <br>    If the supplied error number is in a specific range, the netmsg.dll <br>    message module is loaded and used to lookup the specified error number <br>    with the FormatMessage() Win32 API. <br> <br>Author: <br> <br>    Scott Field (sfield)    29-Mar-96 <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#include &lt;lmerr.h&gt; <br> <br>void <br>DisplayErrorText( <br>    DWORD dwLastError <br>    ); <br> <br>#define RTN_OK 0 <br>#define RTN_USAGE 1 <br>#define RTN_ERROR 13 <br> <br>int <br>__cdecl <br>main( <br>    int argc, <br>    char *argv[] <br>    ) <br>{ <br>    if(argc != 2) { <br>        fprintf(stderr,"Usage: %s &lt;error number&gt;\n", argv[0]); <br>        return RTN_USAGE; <br>    } <br> <br>    DisplayErrorText( atoi(argv[1]) ); <br> <br>    return RTN_OK; <br>} <br> <br>void <br>DisplayErrorText( <br>    DWORD dwLastError <br>    ) <br>{ <br>    HMODULE hModule = NULL; // default to system source <br>    LPSTR MessageBuffer; <br>    DWORD dwBufferLength; <br> <br>    DWORD dwFormatFlags = FORMAT_MESSAGE_ALLOCATE_BUFFER | <br>        FORMAT_MESSAGE_IGNORE_INSERTS | <br>        FORMAT_MESSAGE_FROM_SYSTEM ; <br> <br>    // <br>    // if dwLastError is in the network range, load the message source <br>    // <br> <br>    if(dwLastError &gt;= NERR_BASE &amp;&amp; dwLastError &lt;= MAX_NERR) { <br>        hModule = LoadLibraryEx( <br>            TEXT("netmsg.dll"), <br>            NULL, <br>            LOAD_LIBRARY_AS_DATAFILE <br>            ); <br> <br>        if(hModule != NULL) <br>            dwFormatFlags |= FORMAT_MESSAGE_FROM_HMODULE; <br>    } <br> <br>    // <br>    // call FormatMessage() to allow for message text to be acquired <br>    // from the system or the supplied module handle <br>    // <br> <br>    if(dwBufferLength = FormatMessageA( <br>        dwFormatFlags, <br>        hModule, // module to get message from (NULL == system) <br>        dwLastError, <br>        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language <br>        (LPSTR) &amp;MessageBuffer, <br>        0, <br>        NULL <br>        )) <br>    { <br>        DWORD dwBytesWritten; <br> <br>        // <br>        // Output message string on stderr <br>        // <br>        WriteFile( <br>            GetStdHandle(STD_ERROR_HANDLE), <br>            MessageBuffer, <br>            dwBufferLength, <br>            &amp;dwBytesWritten, <br>            NULL <br>            ); <br> <br>        // <br>        // free the buffer allocated by the system <br>        // <br>        LocalFree(MessageBuffer); <br>    } <br> <br>    // <br>    // if we loaded a message source, unload it <br>    // <br>    if(hModule != NULL) <br>        FreeLibrary(hModule); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

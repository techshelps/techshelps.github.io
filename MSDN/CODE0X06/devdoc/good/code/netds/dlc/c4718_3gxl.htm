<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLCDEBUG.H</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4719"></a>DLCDEBUG.H</h2>
<pre><code>/*++ <br> <br>Copyright 1991-1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    dlcdebug.h <br> <br>Abstract: <br> <br>    Contains debugging prototypes and manifests for ACSLAN <br> <br>Author: <br> <br>    Richard L Firth (rfirth) 28-May-1992 <br> <br>Revision History: <br> <br>--*/ <br> <br>#define ARRAY_ELEMENTS(a)   (sizeof(a)/sizeof((a)[0])) <br>#define LAST_ELEMENT(a)     (ARRAY_ELEMENTS(a)-1) <br> <br>#if DBG <br> <br>#define PRIVATE <br> <br>#define ACSLAN_DEBUG_ENV_VAR    "ACSLAN_DEBUG_FLAGS" <br>#define ACSLAN_DUMP_FILE_VAR    "ACSLAN_DUMP_FILE" <br>#define ACSLAN_DUMP_FILTER_VAR  "ACSLAN_DUMP_FILTER" <br> <br>#define DEBUG_DUMP_INPUT_CCB    0x00000001L // dump CCB input to AcsLan <br>#define DEBUG_DUMP_OUTPUT_CCB   0x00000002L // dump CCB output from AcsLan <br>#define DEBUG_DUMP_TX_INFO      0x00000004L // dump transmit buffers <br>#define DEBUG_DUMP_RX_INFO      0x00000008L // dump receive buffers <br>#define DEBUG_DUMP_TX_DATA      0x00000010L // dump data buffer in TRANSMIT commands <br>#define DEBUG_DUMP_RX_DATA      0x00000020L // dump received data frames <br>#define DEBUG_DUMP_DATA_CHAIN   0x00000040L // dump entire chain of received data buffers <br>#define DEBUG_DUMP_FRAME_CHAIN  0x00000080L // dump entire chain of received frames <br>#define DEBUG_DUMP_TX_ASCII     0x00000100L // dump transmitted data as hex &amp; ASCII <br>#define DEBUG_DUMP_RX_ASCII     0x00000200L // dump received data as hex &amp; ASCII <br>#define DEBUG_DUMP_ASYNC_CCBS   0x00000400L // dump READ async. completed CCBs <br>#define DEBUG_RETURN_CODE       0x01000000L // dump return code from AcsLan/NtAcsLan <br>#define DEBUG_DUMP_NTACSLAN     0x02000000L // dump CCBs for NtAcsLan, not AcsLan <br>#define DEBUG_DUMP_ACSLAN       0x04000000L // dump CCBs for AcsLan, not NtAcsLan <br>#define DEBUG_DUMP_TIME         0x08000000L // dump relative time between commands <br>#define DEBUG_DLL_INFO          0x10000000L // dump info about DLL attach/detach <br>#define DEBUG_BREAKPOINT        0x20000000L // break at conditional breakpoints <br>#define DEBUG_TO_FILE           0x40000000L // dump info to file <br>#define DEBUG_TO_TERMINAL       0x80000000L // dump info to console <br> <br>#define IF_DEBUG(c)             if (AcslanDebugFlags &amp; DEBUG_##c) <br>#define PUT(x)                  AcslanDebugPrint x <br>#define DUMPCCB                 DumpCcb <br> <br>// <br>// misc. <br>// <br> <br>#define DEFAULT_FIELD_WIDTH     16          // amount of description before a number <br> <br>// <br>// DumpData options <br>// <br> <br>#define DD_DEFAULT_OPTIONS      0x00000000  // use defaults <br>#define DD_NO_ADDRESS           0x00000001  // don't display address of data <br>#define DD_LINE_BEFORE          0x00000002  // linefeed before first dumped line <br>#define DD_LINE_AFTER           0x00000004  // linefeed after last dumped line <br>#define DD_INDENT_ALL           0x00000008  // indent all lines <br>#define DD_NO_ASCII             0x00000010  // don't dump ASCII respresentation <br>#define DD_UPPER_CASE           0x00000020  // upper-case hex dump (F4 instead of f4) <br>#define DD_DOT_DOT_SPACE        0x00000040  // fill unused hex space with '..' <br> <br>// <br>// Filters for individual CCB commands: 4 flags max, because each command is <br>// represented by a single ASCII character <br>// <br> <br>#define CF_DUMP_CCB_IN          0x00000001  // dump CCB on input <br>#define CF_DUMP_CCB_OUT         0x00000002  // dump CCB on output <br>#define CF_DUMP_PARMS_IN        0x00000004  // dump parameter table on input <br>#define CF_DUMP_PARMS_OUT       0x00000008  // dump parameter table on output <br> <br>// <br>// global data <br>// <br> <br>#ifndef ACSLAN_DEBUG_FLAGS <br>#define ACSLAN_DEBUG_FLAGS      (DEBUG_DUMP_INPUT_CCB \ <br>                                 | DEBUG_DUMP_OUTPUT_CCB \ <br>                                 | DEBUG_DUMP_TX_INFO \ <br>                                 | DEBUG_DUMP_RX_INFO \ <br>                                 | DEBUG_DUMP_TX_DATA \ <br>                                 | DEBUG_DUMP_RX_DATA \ <br>                                 | DEBUG_DUMP_DATA_CHAIN \ <br>                                 | DEBUG_DUMP_FRAME_CHAIN \ <br>                                 | DEBUG_DUMP_TX_ASCII \ <br>                                 | DEBUG_DUMP_RX_ASCII \ <br>                                 | DEBUG_DUMP_ASYNC_CCBS \ <br>                                 | DEBUG_RETURN_CODE \ <br>                                 | DEBUG_DUMP_NTACSLAN \ <br>                                 | DEBUG_DUMP_ACSLAN \ <br>                                 | DEBUG_DUMP_TIME \ <br>                                 | DEBUG_TO_TERMINAL \ <br>                                 ) <br>#endif <br> <br>extern DWORD AcslanDebugFlags; <br>extern FILE* hDumpFile; <br> <br>// <br>// prototypes <br>// <br> <br>VOID <br>GetAcslanDebugFlags( <br>    VOID <br>    ); <br> <br>VOID <br>SetAcslanDebugFlags( <br>    IN DWORD Flags <br>    ); <br> <br>VOID <br>AcslanDebugPrint( <br>    IN LPSTR Format, <br>    IN ... <br>    ); <br> <br>VOID <br>DumpCcb( <br>    IN PLLC_CCB Ccb, <br>    IN BOOL DumpAll, <br>    IN BOOL CcbIsInput <br>    ); <br> <br>VOID <br>DumpData( <br>    IN LPSTR Title, <br>    IN PBYTE Address, <br>    IN DWORD Length, <br>    IN DWORD Options, <br>    IN DWORD Indent <br>    ); <br> <br>LPSTR <br>MapCcbRetcode( <br>    IN BYTE Retcode <br>    ); <br> <br>#else <br> <br>#define PRIVATE                 static <br> <br>#define IF_DEBUG(c)             if (0) <br>#define PUT(x) <br>#define DUMPCCB                 (void) <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

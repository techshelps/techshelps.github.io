<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADMINDLL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5061"></a>ADMINDLL.C</h2>
<pre><code>/****************************************************************************** <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       MprAdmin API usage and  is meant to help users with <br>*       MprAdmin API calling conventions. Use this code at your own risk. <br>*       Microsoft disclaims any implied warranty. This sample code can <br>*       be copied and distributed. <br>* <br>******************************************************************************/ <br> <br>/******************************************************************** <br>*  admindll.c -- Sample program demonstrating the use of MprAdmin <br>*                     CallOut API's <br>* <br>*****************************************************************************/ <br>/*************************************************************************** <br>*  Functions: <br>*        Init(void); <br>*        Init2(void); <br>*        Debug_Print_RasConnection( <br>*                       IN RAS_CONNECTION_0 *   pRasConnection0, <br>*                       IN RAS_CONNECTION_1 *   pRasConnection1) <br>* <br>*        File_Print_RasConnection( <br>*                       IN RAS_CONNECTION_0 *   pRasConnection0, <br>*                       IN RAS_CONNECTION_1 *   pRasConnection1) <br>* <br>*        Debug_Print_RasPort( <br>*                       IN RAS_PORT_0 *   pRasPort0, <br>*                       IN RAS_PORT_1 *   pRasPort1) <br>* <br>*        File_Print_RasPort( <br>*                       IN RAS_PORT_0 *   pRasPort0, <br>*                       IN RAS_PORT_1 *   pRasPort1) <br>*****************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;lm.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;mprapi.h&gt; <br>#include &lt;memory.h&gt; <br> <br>//Functions <br>VOID <br>Debug_Print_RasConnection( <br>   IN RAS_CONNECTION_0 *   pRasConnection0, <br>   IN RAS_CONNECTION_1 *   pRasConnection1 <br>   ); <br> <br>VOID <br>File_Print_RasConnection(IN RAS_CONNECTION_0 *   pRasConnection0, <br>   IN RAS_CONNECTION_1 *   pRasConnection1 <br>   ); <br> <br>VOID <br>Debug_Print_RasPort( <br>   IN RAS_PORT_0 *   pRasPort0, <br>   IN RAS_PORT_1 *   pRasPort1 <br>   ); <br> <br>VOID <br>File_Print_RasPort( <br>   IN RAS_PORT_0 *   pRasPort0, <br>   IN RAS_PORT_1 *   pRasPort1 <br>); <br> <br>VOID Init(void); <br>VOID Init2(void); <br> <br>//Global Variables <br>#define Number_Of_Flags 6 <br>#define Num_Ip_Address 254 <br> <br>DWORD  TempIpAddress = 0x010A0F0E; <br>HANDLE IPFile = NULL; <br>HANDLE ConDisFile = NULL; <br>HANDLE ErrLogFile = NULL; <br>HANDLE ErrLogFileIP = NULL; <br>BOOL IPFileInValid = FALSE; <br>BOOL ConnectDisconnectInValid = FALSE; <br>BOOL ErrorLogInValid = FALSE; <br>BOOL ErrLogIPInValid = FALSE; <br>BOOL First_Call = TRUE; <br> <br>WCHAR* <br>StrDupWFromA( <br>    CHAR* psz ); <br> <br>static DWORD Multilink_Count = 0; <br>HANDLE Connection_Handle; <br>/* the above two variables are to control the number of ports a connection */ <br>/* can use for multilink.  Multilink_Count can be set via regedit.exe to   */ <br>/* make it little more portable */ <br> <br> <br>typedef struct Static_Info_Database <br>   { <br>      BOOL bTaken; <br>      HANDLE hConnection; <br>      RAS_CONNECTION_0 pRasConnection0; <br>      RAS_CONNECTION_1 pRasConnection1; <br>   } Static_Info_Database; <br> <br>Static_Info_Database  Static_Connection_Info[Num_Ip_Address]; <br> <br>typedef struct Static_Statistic <br>   { <br>      WCHAR wszUserName[UNLEN+1]; <br>      WCHAR wszPortName[MAX_PORT_NAME]; <br>      DWORD IpAddress; <br>      BOOL bTaken; <br>   } Static_Statistic; <br> <br>Static_Statistic  Static_Check_Stats[Num_Ip_Address]; <br> <br> <br>WCHAR* <br>StrDupWFromA( <br>    CHAR* psz ) <br> <br>    /* Returns heap block containing a copy of 0-terminated string 'psz' or <br>    ** NULL on error or if 'psz' is NULL.  The output string is converted to <br>    ** UNICODE.  It is caller's responsibility to Free the returned string. <br>    */ <br>{ <br>   WCHAR* pszNew = NULL; <br> <br>   if (psz) <br>   { <br>      DWORD cb; <br> <br>      cb = MultiByteToWideChar( CP_ACP, 0, psz, -1, NULL, 0 ); <br>      pszNew = malloc( cb * sizeof(TCHAR) ); <br>      if (!pszNew) <br>      { <br>         return NULL; <br>      } <br> <br>      cb = MultiByteToWideChar( CP_ACP, 0, psz, -1, pszNew, cb ); <br>      if (cb == 0) <br>      { <br>         free( pszNew ); <br>         return NULL; <br>      } <br>   } <br> <br>   return pszNew; <br> <br>} <br> <br> <br> <br>// <br>// Format and write debug information to OutputDebugString <br>// <br>ULONG <br>_cdecl <br>DbgPrint( <br>    PCH Format, <br>    ... <br>    ) <br>{ <br>    CHAR szbuffer[255]; <br>    WCHAR buffer[255]; <br>    WCHAR *temp=NULL; <br>    LPINT lpResult=0; <br>    va_list marker; <br>    va_start (marker,Format); <br>    if (IsTextUnicode(marker, sizeof(marker),lpResult)) <br>    { <br>       temp=StrDupWFromA(Format); <br>       wvsprintfW (buffer,temp, marker); <br>       OutputDebugString (buffer); <br>       free(temp); <br>    } <br>    else <br>    { <br>       wvsprintfA (szbuffer,Format, marker); <br>       temp=StrDupWFromA(szbuffer); <br>       OutputDebugString (temp); <br>       free(temp); <br>    } <br>    return TRUE; <br> <br>} <br> <br> <br> <br>// <br>// Called from MprAdminGetIpAddressForUser, which itself gets called by RasMan <br>// <br>VOID Init(void) <br>{ <br>INT i=0; <br> <br>   IPFile = CreateFile(TEXT("IpAddress.log"), <br>                       GENERIC_READ|GENERIC_WRITE, <br>                       FILE_SHARE_READ, <br>                       (LPSECURITY_ATTRIBUTES) NULL, <br>                       CREATE_ALWAYS, <br>                       0, <br>                       (HANDLE) NULL); <br>   if (IPFile== INVALID_HANDLE_VALUE) <br>   { <br>      IPFileInValid = TRUE; <br>   } <br>   ErrLogFileIP = CreateFile(TEXT("IpAddError.log"), <br>                             GENERIC_READ|GENERIC_WRITE, <br>                             FILE_SHARE_READ, <br>                             (LPSECURITY_ATTRIBUTES) NULL, <br>                             CREATE_ALWAYS, <br>                             0, <br>                             (HANDLE) NULL); <br> <br>   if (ErrLogFileIP== INVALID_HANDLE_VALUE) <br>   { <br>      ErrLogIPInValid = TRUE; <br>   } <br> <br>} <br> <br> <br>// <br>// Called by MprAdminAcceptNewConnection, itself gets called by RAS Server <br>// <br>VOID Init2(void) <br>{ <br>INT i=0; <br> <br>   ConDisFile = CreateFile(TEXT("ConDis.log"), <br>                           GENERIC_READ|GENERIC_WRITE, <br>                           FILE_SHARE_READ, <br>                           (LPSECURITY_ATTRIBUTES) NULL, <br>                           OPEN_ALWAYS, <br>                           0, <br>                           (HANDLE) NULL); <br>   if (ConDisFile== INVALID_HANDLE_VALUE) <br>   { <br>      ConnectDisconnectInValid = TRUE; <br>   } <br> <br>   ErrLogFile = CreateFile(TEXT("AdminErr.log"), <br>                           GENERIC_READ|GENERIC_WRITE, <br>                           FILE_SHARE_READ, <br>                           (LPSECURITY_ATTRIBUTES) NULL, <br>                           OPEN_ALWAYS, <br>                           0, <br>                           (HANDLE) NULL); <br> <br>   if (ErrLogFile == INVALID_HANDLE_VALUE) <br>   { <br>      ErrorLogInValid = TRUE; <br>   } <br> <br>   for (i=0;i &lt; Num_Ip_Address; i++) <br>   { <br>      Static_Check_Stats[i].bTaken=FALSE; <br>      TempIpAddress += 0x01000000; <br> <br>      if ((TempIpAddress | 0x0ff000000) == 0x0ff000000) <br>         TempIpAddress = 0x010A0F0E; <br> <br>      Static_Check_Stats[i].IpAddress = TempIpAddress; <br>      Static_Connection_Info[i].bTaken = FALSE; <br>   } <br> <br>} <br> <br> <br> <br>BOOL DllMain( <br>    HINSTANCE hinstDLL,  // handle to DLL module <br>    DWORD fdwReason,     // reason for calling function <br>    LPVOID lpReserved )  // reserved <br>{ <br>    // Perform actions based on the reason for calling. <br>    switch( fdwReason ) <br>    { <br>       case DLL_PROCESS_ATTACH: <br>       // Initialize once for each new process. <br>       // Return FALSE to fail DLL load. <br>    break; <br> <br>       case DLL_THREAD_ATTACH: <br>       // Do thread-specific initialization. <br>       break; <br> <br> <br>       case DLL_THREAD_DETACH: <br>       // Do thread-specific cleanup. <br>       break; <br> <br>       case DLL_PROCESS_DETACH: <br>       // Perform any necessary cleanup. <br>       break; <br> <br>    } <br> <br>    return TRUE;  // Successful DLL_PROCESS_ATTACH. <br>} <br> <br> <br> <br>DWORD  APIENTRY <br>MprAdminGetIpAddressForUser( <br>    IN WCHAR *      lpszUserName, <br>    IN WCHAR *      lpszPortName, <br>    IN OUT DWORD * pipAddress, <br>    OUT BOOL *      pfNotifyDLL <br>) <br>{ <br>DWORD i=0; <br>DWORD dwBytesWritten=0; <br>CHAR buf[120]; <br> <br>   //to check if the call is first rasman call out. If yes, call Initialize routine <br>   if (First_Call) <br>   { <br>      Init(); <br>      Init2(); <br>      First_Call=FALSE; <br>   } <br>   DbgPrint("First_Call  %d\n",First_Call); <br>   DbgPrint("\nGetIpAddressForUser called UserName=%ws,Port=%ws,IpAddress=%d\n", <br>            lpszUserName,lpszPortName,(DWORD)*pipAddress ); <br> <br>   for (i=0;i &lt; Num_Ip_Address;i++) <br>   { <br>      if (Static_Check_Stats[i].bTaken == FALSE) <br>      { <br>         wcscpy(Static_Check_Stats[i].wszUserName, lpszUserName); <br>         wcscpy(Static_Check_Stats[i].wszPortName, lpszPortName); <br>         *pipAddress = Static_Check_Stats[i].IpAddress; <br>         DbgPrint("Trying to get the IP Address   %d",(DWORD) *pipAddress); <br>         Static_Check_Stats[i].bTaken=TRUE; <br>         break; <br>      } <br>   } <br>   DbgPrint("GetIpAddressForUser setting IpAddress=%d\n",(DWORD)*pipAddress ); <br>   sprintf(buf,"GetIpAddressForUser setting IpAddress=%d\n",(DWORD)*pipAddress ); <br>   WriteFile(IPFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   *pfNotifyDLL = TRUE; <br> <br>   return( NO_ERROR ); <br>} <br> <br> <br>VOID APIENTRY <br>MprAdminReleaseIpAddress( <br>    IN WCHAR *      lpszUserName, <br>    IN WCHAR *      lpszPortName, <br>    IN OUT DWORD * pipAddress <br>) <br>{ <br>DWORD dwBytesWritten=0; <br>CHAR buf[120]; <br>int i=0; <br> <br>    DbgPrint( "\nReleaseIpAddressr called UserName=%ws,Port=%ws,IpAddress=%d\n", <br>              lpszUserName,lpszPortName,(DWORD)*pipAddress ); <br> <br>    for (i=0;i &lt; Num_Ip_Address;i++) <br>    { <br>       if (Static_Check_Stats[i].IpAddress == (DWORD) *pipAddress) <br>       { <br>          if (Static_Check_Stats[i].bTaken == TRUE) <br>          { <br>             if (wcscmp(Static_Check_Stats[i].wszUserName,lpszUserName) == 0) <br>             { <br>                if (wcscmp(Static_Check_Stats[i].wszPortName,lpszPortName) == 0) <br>                { <br>                   Static_Check_Stats[i].bTaken = FALSE;break; <br>                } <br>                else <br>                { <br>                   DbgPrint("ERROR ReleaseIP PortName, Cannot free IP Address    %ws\n", <br>                            Static_Check_Stats[i].wszPortName); <br>                   if (!(ErrLogIPInValid)) <br>                   { <br>                      sprintf(buf,"ERROR ReleaseIP PortName, Cannot free IP Address   %ws\n", <br>                              Static_Check_Stats[i].wszPortName); <br>                      WriteFile(ErrLogFileIP, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>                      break; <br>                   } <br>                } <br>             } <br>             else <br>             { <br>                DbgPrint("ERROR ReleaseIP UserName Incorrect, Cannot free IP Address   %ws\n", <br>                         Static_Check_Stats[i].wszUserName); <br>                if (!(ErrLogIPInValid)) <br>                { <br>                   sprintf(buf,"ERROR ReleaseIP UserName Incorrect, Cannot free IP Address   %ws\n", <br>                           Static_Check_Stats[i].wszUserName); <br>                   WriteFile(ErrLogFileIP, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>                } <br>                break; <br>             } <br>          } <br>          else <br>          { <br>             DbgPrint("ERROR ReleaseIP Wrong IP address, doesn't exist, Cannot free IP Address    %d\n", <br>                      Static_Check_Stats[i].IpAddress); <br>             if (!(ErrLogIPInValid)) <br>             { <br>                sprintf(buf,"ERROR ReleaseIP Wrong IP Address, doesn't exist Cannot free IP Address   %d\n", <br>                        Static_Check_Stats[i].IpAddress); <br>                WriteFile(ErrLogFileIP, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>             } <br>             break; <br>          } <br>       } <br>    } <br> <br>} <br> <br> <br>BOOL APIENTRY <br>MprAdminAcceptNewConnection( <br>   IN RAS_CONNECTION_0 *   pRasConnection0, <br>   IN RAS_CONNECTION_1 *   pRasConnection1 <br>) <br>{ <br>INT i=0; <br>CHAR buf[512]; <br>DWORD dwBytesWritten=0; <br> <br>   DbgPrint("MprAdminAcceptNewConnection Called\n"); <br>   Debug_Print_RasConnection(pRasConnection0,pRasConnection1); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"MprAdminAcceptNewConnection Called::dumping pRasConnection0\n\n"); <br>   File_Print_RasConnection(pRasConnection0,pRasConnection1); <br> <br>   if (( lstrcmp( pRasConnection0-&gt;wszUserName, TEXT("aDministrator") ) ) == 0) <br>   { <br>      DbgPrint("Do not Accept Connection\n"); <br>      FlushFileBuffers(ErrLogFile); <br>      FlushFileBuffers(ConDisFile); <br>      return( FALSE ); <br>   } <br>   else <br>   { <br>      for (i=0;i &lt; Num_Ip_Address; i++) <br>         if (!(Static_Connection_Info[i].bTaken)) <br>         { <br>            Static_Connection_Info[i].bTaken = TRUE; <br>            Static_Connection_Info[i].hConnection=pRasConnection0-&gt;hConnection; <br>            memcpy(&amp;Static_Connection_Info[i].pRasConnection0,pRasConnection0, sizeof(RAS_CONNECTION_0)); <br>            memcpy(&amp;Static_Connection_Info[i].pRasConnection1,pRasConnection1, sizeof(RAS_CONNECTION_1)); <br>            break; <br>         } <br> <br>       DbgPrint("Accept Connection\n"); <br>       FlushFileBuffers(ErrLogFile); <br>       FlushFileBuffers(ConDisFile); <br>       return( TRUE ); <br>    } <br>    return( TRUE ); <br>} <br> <br> <br>BOOL APIENTRY <br>MprAdminAcceptNewLink( <br>   IN RAS_PORT_0 *   pRasPort0, <br>   IN RAS_PORT_1 *   pRasPort1 <br>) <br>{ <br>CHAR  buf[512]; <br>DWORD dwBytesWritten = 0; <br> <br>   Multilink_Count++; <br>   /* Multilink_Count can be set through regedit.exe to make it little more portable */ <br>   /* Currently it is hard coded in this sample, so that no connection can have more than 2 ports */ <br>   if (Multilink_Count == 1) <br>      Connection_Handle = pRasPort0-&gt;hConnection;/* this is the first port */ <br> <br>   //to check if the call is first rassrv call out. If yes, call Initialize routine <br>   DbgPrint("MprAdminAcceptNewLink Called, times  %d\n",Multilink_Count); <br>   Debug_Print_RasPort(pRasPort0,pRasPort1); <br> <br>   //dumping pRasPort0 to a file <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"MprAdminAcceptNewLink Called time %d::dumping pRasPort0 to file\n",Multilink_Count); <br>   File_Print_RasPort(pRasPort0,pRasPort1); <br> <br>   /* if the Connection_Handle is not same then it is a new call, reset the counter to 1 */ <br>   if (Connection_Handle != pRasPort0-&gt;hConnection) <br>   { <br>      if (Multilink_Count &gt; 1) <br>      { <br>         Connection_Handle = pRasPort0-&gt;hConnection; <br>         Multilink_Count = 1; <br>         return TRUE; <br>      } <br>      else <br>         return FALSE; <br>   } <br>   /* Connection_Handle same as previous port then restrict the number of ports. */ <br>   /* Just return FALSE */ <br>   if (Multilink_Count &gt; 2) <br>   { <br>      DbgPrint("MprAdminAcceptNewLink(): Multilink_Count=%d &gt; 2  so return FALSE\n", Multilink_Count); <br>      return FALSE; <br>   } <br> <br>   return TRUE; <br> <br>} <br> <br> <br>VOID APIENTRY <br>MprAdminLinkHangupNotification( <br>   IN RAS_PORT_0 *   pRasPort0, <br>   IN RAS_PORT_1 *   pRasPort1 <br>) <br>{ <br>   char buf[512]; <br>   DWORD dwBytesWritten = 0; <br> <br>   DbgPrint("MprAdminLinkHangupNotification Called\n"); <br>   Debug_Print_RasPort(pRasPort0,pRasPort1); <br>   //dumping pRasPort0 to a file <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"MprAdminLinkHangupNotification Called::dumping pRasPort0 to file\n"); <br>   File_Print_RasPort(pRasPort0,pRasPort1); <br> <br>} <br> <br> <br>VOID APIENTRY <br>MprAdminConnectionHangupNotification( <br>   IN RAS_CONNECTION_0 *   pRasConnection0, <br>   IN RAS_CONNECTION_1 *   pRasConnection1 <br>) <br>{ <br>INT i = 0; <br>DWORD dwBytesWritten = 0; <br>CHAR  buf[120]; <br> <br>   DbgPrint( "\nMprAdminConnectionHangupNotification called \n" ); <br>   Debug_Print_RasConnection(pRasConnection0,pRasConnection1); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"MprAdminConnectionHangupNotification called::dumping pRasConnection0\n\n"); <br>   File_Print_RasConnection(pRasConnection0,pRasConnection1); <br> <br>   //Sanity checks <br>   for (i=0; i &lt; Num_Ip_Address; i++) <br>   { <br>      if ((Static_Connection_Info[i].bTaken) &amp;&amp; (Static_Connection_Info[i].hConnection == pRasConnection0-&gt;hConnection)) <br>      { <br>         Static_Connection_Info[i].bTaken = FALSE; <br>         if (ErrorLogInValid) <br>         { <br>            if (Static_Connection_Info[i].pRasConnection0.hConnection != pRasConnection0-&gt;hConnection) <br>               DbgPrint("ERROR Connection Handle differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.hConnection, pRasConnection0-&gt;hConnection); <br> <br>            if (Static_Connection_Info[i].pRasConnection0.hInterface != pRasConnection0-&gt;hInterface) <br>               DbgPrint("ERROR Interface Handle differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.hInterface, pRasConnection0-&gt;hInterface); <br> <br>            if (Static_Connection_Info[i].pRasConnection0.dwConnectDuration &gt; pRasConnection0-&gt;dwConnectDuration) <br>               DbgPrint("ERROR Duration time is less the   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.dwConnectDuration, pRasConnection0-&gt;dwConnectDuration); <br> <br>            if (Static_Connection_Info[i].pRasConnection0.dwInterfaceType != pRasConnection0-&gt;dwInterfaceType) <br>               DbgPrint("ERROR Interface Type differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.dwInterfaceType != pRasConnection0-&gt;dwInterfaceType); <br> <br>            if (Static_Connection_Info[i].pRasConnection0.dwConnectionFlags != pRasConnection0-&gt;dwConnectionFlags) <br>               DbgPrint("ERROR Connection Flags differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.dwConnectionFlags, pRasConnection0-&gt;dwConnectionFlags); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszInterfaceName,pRasConnection0-&gt;wszInterfaceName) == 0) <br>               DbgPrint("ERROR Interface Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.wszInterfaceName,pRasConnection0-&gt;wszInterfaceName); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszUserName,pRasConnection0-&gt;wszUserName) != 0) <br>               DbgPrint("ERROR User Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.wszUserName,pRasConnection0-&gt;wszUserName); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszLogonDomain,pRasConnection0-&gt;wszLogonDomain) != 0) <br>               DbgPrint("ERROR Logon Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.wszLogonDomain,pRasConnection0-&gt;wszLogonDomain); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszRemoteComputer,pRasConnection0-&gt;wszRemoteComputer) != 0) <br>               DbgPrint("ERROR Remote Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                        Static_Connection_Info[i].pRasConnection0.wszRemoteComputer,pRasConnection0-&gt;wszRemoteComputer); <br>         } <br>         else <br>         { <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>            if (Static_Connection_Info[i].pRasConnection0.hConnection != pRasConnection0-&gt;hConnection) <br>               sprintf(buf,"ERROR Connection Handle differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.hConnection, pRasConnection0-&gt;hConnection); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>            if (Static_Connection_Info[i].pRasConnection0.hInterface != pRasConnection0-&gt;hInterface) <br>               sprintf(buf,"ERROR Interface Handle differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.hInterface, pRasConnection0-&gt;hInterface); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>            if (Static_Connection_Info[i].pRasConnection0.dwConnectDuration &lt;= pRasConnection0-&gt;dwConnectDuration) <br>               sprintf(buf,"ERROR Duration time is less the   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.dwConnectDuration, pRasConnection0-&gt;dwConnectDuration); <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>            if (Static_Connection_Info[i].pRasConnection0.dwInterfaceType != pRasConnection0-&gt;dwInterfaceType) <br>               sprintf(buf,"ERROR Interface Type differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.dwInterfaceType != pRasConnection0-&gt;dwInterfaceType); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>            if (Static_Connection_Info[i].pRasConnection0.dwConnectionFlags != pRasConnection0-&gt;dwConnectionFlags) <br>               sprintf(buf,"ERROR Connection Flags differs   %d-&gt; Stored,    %d-&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.dwConnectionFlags, pRasConnection0-&gt;dwConnectionFlags); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszInterfaceName,pRasConnection0-&gt;wszInterfaceName) == 0) <br>               sprintf(buf,"ERROR Interface Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.wszInterfaceName,pRasConnection0-&gt;wszInterfaceName); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszUserName,pRasConnection0-&gt;wszUserName) != 0) <br>               sprintf(buf,"ERROR User Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.wszUserName,pRasConnection0-&gt;wszUserName); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszLogonDomain,pRasConnection0-&gt;wszLogonDomain) != 0) <br>               sprintf(buf,"ERROR Logon Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.wszLogonDomain,pRasConnection0-&gt;wszLogonDomain); <br> <br>            WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>            if (wcscmp(Static_Connection_Info[i].pRasConnection0.wszRemoteComputer,pRasConnection0-&gt;wszRemoteComputer) != 0) <br>               sprintf(buf,"ERROR Remote Name Differs    %ws -&gt;Stored,   %ws -&gt;Passed\n", <br>                       Static_Connection_Info[i].pRasConnection0.wszRemoteComputer,pRasConnection0-&gt;wszRemoteComputer); <br>         } <br>      } <br>      FlushFileBuffers(ErrLogFile); <br>      FlushFileBuffers(ConDisFile); <br>   } <br> <br>} <br> <br>VOID Debug_Print_RasConnection( <br>   IN RAS_CONNECTION_0 *   pRasConnection0, <br>   IN RAS_CONNECTION_1 *   pRasConnection1 <br>) <br>{ <br>WCHAR *Interface_Type[] = <br>   { <br>   TEXT("ROUTER_IF_TYPE_CLIENT"), <br>   TEXT("ROUTER_IF_TYPE_HOME_ROUTER"), <br>   TEXT("ROUTER_IF_TYPE_FULL_ROUTER"), <br>   TEXT("ROUTER_IF_TYPE_DEDICATED"), <br>   TEXT("ROUTER_IF_TYPE_INTERNAL"), <br>   TEXT("ROUTER_IF_TYPE_INTERNAL") <br>   }; <br> <br>INT i = 0; <br>DWORD dwBytesWritten = 0; <br> <br> <br>   //dumping pRasConnection0 <br>   DbgPrint("pRasConnection0-&gt;hConnection  %d\n",pRasConnection0-&gt;hConnection); <br>   DbgPrint("pRasConnection0-&gt;hInterface   %d\n",pRasConnection0-&gt;hInterface); <br>   DbgPrint("pRasConnection0-&gt;dwConnectDuration  %d\n",pRasConnection0-&gt;dwConnectDuration); <br>   DbgPrint("pRasConnection0-&gt;dwInterfaceType  %ws\n",Interface_Type[pRasConnection0-&gt;dwInterfaceType]); <br>   DbgPrint("pRasConnection0-&gt;dwConnectionFlags  %d\n",pRasConnection0-&gt;dwConnectionFlags); <br>   DbgPrint("pRasConnection0-&gt;wszInterfaceName  %ws\n",pRasConnection0-&gt;wszInterfaceName); <br>   DbgPrint("pRasConnection0-&gt;wszUserName  %ws\n",pRasConnection0-&gt;wszUserName); <br>   DbgPrint("pRasConnection0-&gt;wszLogonDomain  %ws\n",pRasConnection0-&gt;wszLogonDomain); <br>   DbgPrint("pRasConnection0-&gt;wszRemoteComputer  %ws\n",pRasConnection0-&gt;wszRemoteComputer); <br> <br>   //dumping pRasConnection1 <br>   DbgPrint( "\n\npRasConnection1-&gt;hConnection  %d\n",pRasConnection1-&gt;hConnection); <br>   DbgPrint( "pRasConnection1-&gt;hInterface   %d\n",pRasConnection1-&gt;hInterface); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.nbf.dwError %d\n",pRasConnection1-&gt;PppInfo.nbf.dwError); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.nbf.wszWksta %ws\n",pRasConnection1-&gt;PppInfo.nbf.wszWksta); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.ip.dwError %d\n",pRasConnection1-&gt;PppInfo.ip.dwError); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.ip.wszAddress %ws\n",pRasConnection1-&gt;PppInfo.ip.wszAddress); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.ip.wszRemoteAddress %ws\n",pRasConnection1-&gt;PppInfo.ip.wszRemoteAddress); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.ipx.dwError %d\n",pRasConnection1-&gt;PppInfo.ipx.dwError); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.ipx.wszAddress %ws\n",pRasConnection1-&gt;PppInfo.ipx.wszAddress); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.at.dwError  %d\n",pRasConnection1-&gt;PppInfo.at.dwError ); <br>   DbgPrint( "pRasConnection1-&gt;PppInfo.at.wszAddress %ws\n",pRasConnection1-&gt;PppInfo.at.wszAddress); <br> <br>   //connection stats <br>   DbgPrint( "pRasConnection1-&gt;dwBytesXmited=%d\n", pRasConnection1-&gt;dwBytesXmited ); <br>   DbgPrint( "pRasConnection1-&gt;dwBytesRcved=%d\n", pRasConnection1-&gt;dwBytesRcved ); <br>   DbgPrint( "pRasConnection1-&gt;dwFramesXmited=%d\n", pRasConnection1-&gt;dwFramesXmited ); <br>   DbgPrint( "pRasConnection1-&gt;dwFramesRcved=%d\n", pRasConnection1-&gt;dwFramesRcved); <br>   DbgPrint( "pRasConnection1-&gt;dwCrcErr=%d\n", pRasConnection1-&gt;dwCrcErr); <br>   DbgPrint( "pRasConnection1-&gt;dwTimeoutErr=%d\n", pRasConnection1-&gt;dwTimeoutErr); <br>   DbgPrint( "pRasConnection1-&gt;dwAlignmentErr=%d\n", pRasConnection1-&gt;dwAlignmentErr); <br>   DbgPrint( "pRasConnection1-&gt;dwHardwareOverrunErr=%d\n", pRasConnection1-&gt;dwHardwareOverrunErr); <br>   DbgPrint( "pRasConnection1-&gt;dwFramingErr=%d\n", pRasConnection1-&gt;dwFramingErr); <br>   DbgPrint( "pRasConnection1-&gt;dwBufferOverrunErr=%d\n", pRasConnection1-&gt;dwBufferOverrunErr); <br>} <br> <br> <br> <br>VOID File_Print_RasConnection(IN RAS_CONNECTION_0 *   pRasConnection0, <br>IN RAS_CONNECTION_1 *   pRasConnection1 <br>) <br>{ <br>   WCHAR *Interface_Type[] = <br>     { <br>     TEXT("ROUTER_IF_TYPE_CLIENT"), <br>     TEXT("ROUTER_IF_TYPE_HOME_ROUTER"), <br>     TEXT("ROUTER_IF_TYPE_FULL_ROUTER"), <br>     TEXT("ROUTER_IF_TYPE_DEDICATED"), <br>     TEXT("ROUTER_IF_TYPE_INTERNAL"), <br>     TEXT("ROUTER_IF_TYPE_INTERNAL") <br>     }; <br> <br> <br>   INT  i = 0; <br>   CHAR buf[512]; <br>   DWORD dwBytesWritten = 0; <br> <br>   //write to file <br>   //dumping pRasConnection0 <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;hConnection  %d\n",pRasConnection0-&gt;hConnection); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;hInterface   %d\n",pRasConnection0-&gt;hInterface); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;dwConnectDuration  %d\n",pRasConnection0-&gt;dwConnectDuration); <br> <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;dwInterfaceType  %ws\n",Interface_Type[pRasConnection0-&gt;dwInterfaceType]); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;dwConnectionFlags  %d\n",pRasConnection0-&gt;dwConnectionFlags); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;wszInterfaceName  %ws\n",pRasConnection0-&gt;wszInterfaceName); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;wszUserName  %ws\n",pRasConnection0-&gt;wszUserName); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;wszLogonDomain  %ws\n",pRasConnection0-&gt;wszLogonDomain); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"pRasConnection0-&gt;wszRemoteComputer  %ws\n",pRasConnection0-&gt;wszRemoteComputer); <br> <br>   //dumping pRasConnection1 <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf,"dumping pRasConnection1\n"); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "\n\npRasConnection1-&gt;hConnection  %d\n",pRasConnection1-&gt;hConnection); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;hInterface   %d\n",pRasConnection1-&gt;hInterface); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.nbf.dwError %d\n",pRasConnection1-&gt;PppInfo.nbf.dwError); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.nbf.wszWksta %ws\n",pRasConnection1-&gt;PppInfo.nbf.wszWksta); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.ip.dwError %d\n",pRasConnection1-&gt;PppInfo.ip.dwError); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); </code></pre>
<p>
</p>
<pre><code>sprintf(buf, "pRasConnection1-&gt;PppInfo.ip.wszAddress %ws\n",pRasConnection1-&gt;PppInfo.ip.wszAddress); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.ip.wszRemoteAddress %ws\n",pRasConnection1-&gt;PppInfo.ip.wszRemoteAddress); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.ipx.dwError %d\n",pRasConnection1-&gt;PppInfo.ipx.dwError); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.ipx.wszAddress %ws\n",pRasConnection1-&gt;PppInfo.ipx.wszAddress); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.at.dwError  %d\n",pRasConnection1-&gt;PppInfo.at.dwError ); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;PppInfo.at.wszAddress %ws\n",pRasConnection1-&gt;PppInfo.at.wszAddress); <br> <br>   //connection stats <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwBytesXmited=%d\n", pRasConnection1-&gt;dwBytesXmited ); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwBytesRcved=%d\n", pRasConnection1-&gt;dwBytesRcved ); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwFramesXmited=%d\n", pRasConnection1-&gt;dwFramesXmited ); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwFramesRcved=%d\n", pRasConnection1-&gt;dwFramesRcved); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwCrcErr=%d\n", pRasConnection1-&gt;dwCrcErr); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwTimeoutErr=%d\n", pRasConnection1-&gt;dwTimeoutErr); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwAlignmentErr=%d\n", pRasConnection1-&gt;dwAlignmentErr); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwHardwareOverrunErr=%d\n", pRasConnection1-&gt;dwHardwareOverrunErr); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwFramingErr=%d\n", pRasConnection1-&gt;dwFramingErr); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   sprintf(buf, "pRasConnection1-&gt;dwBufferOverrunErr=%d\n", pRasConnection1-&gt;dwBufferOverrunErr); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>} <br> <br>VOID Debug_Print_RasPort( <br>IN RAS_PORT_0 *   pRasPort0, <br>IN RAS_PORT_1 *   pRasPort1 <br>) <br>{ <br>   WCHAR *Line_Condition[] = <br>      { <br>      TEXT("RAS_PORT_NON_OPERATIONAL"), <br>      TEXT("RAS_PORT_DISCONNECTED"), <br>      TEXT("RAS_PORT_CALLING_BACK"), <br>      TEXT("RAS_PORT_LISTENING"), <br>      TEXT("RAS_PORT_AUTHENTICATING"), <br>      TEXT("RAS_PORT_AUTHENTICATED"), <br>      TEXT("RAS_PORT_INITIALIZING") <br>      }; <br> <br>   WCHAR *Hdw_Error[] = <br>      { <br>      TEXT("RAS_HARDWARE_OPERATIONAL"), <br>      TEXT("RAS_HARDWARE_FAILURE") <br>      }; <br> <br>   DWORD dwBytesWritten = 0; <br> <br>  //dumping pRasPort0 <br>   DbgPrint("pRasPort0-&gt;hPort  %d\n",pRasPort0-&gt;hPort); <br>   DbgPrint("pRasPort0-&gt;hConnection   %d\n",pRasPort0-&gt;hConnection); <br>   DbgPrint("pRasPort0-&gt;dwPortCondition  %ws\n",Line_Condition[pRasPort0-&gt;dwPortCondition-1]); <br>   DbgPrint("pRasPort0-&gt;dwTotalNumberOfCalls  %d\n",pRasPort0-&gt;dwTotalNumberOfCalls); <br>   DbgPrint("pRasPort0-&gt;dwConnectDuration  %d\n",pRasPort0-&gt;dwConnectDuration); <br>   DbgPrint("pRasPort0-&gt;wszPortName  %ws\n",pRasPort0-&gt;wszPortName); <br>   DbgPrint("pRasPort0-&gt;wszMediaName  %ws\n",pRasPort0-&gt;wszMediaName); <br>   DbgPrint("pRasPort0-&gt;wszDeviceName  %ws\n",pRasPort0-&gt;wszDeviceName); <br>   DbgPrint("pRasPort0-&gt;wszDeviceType  %ws\n",pRasPort0-&gt;wszDeviceType); <br> <br>   //dumping pRasPort1 <br>   DbgPrint("pRasPort1-&gt;hPort  %d\n",pRasPort1-&gt;hPort); <br>   DbgPrint("pRasPort1-&gt;hConnection   %d\n",pRasPort1-&gt;hConnection); <br>   DbgPrint("pRasPort1-&gt;dwHardwareCondition  %ws\n",Hdw_Error[pRasPort1-&gt;dwHardwareCondition]); <br> <br>   //connection stats <br>   DbgPrint( "pRasPort1-&gt;dwLineSpeed=%d\n", pRasPort1-&gt;dwLineSpeed ); <br>   DbgPrint( "pRasPort1-&gt;dwBytesXmited=%d\n", pRasPort1-&gt;dwBytesXmited ); <br>   DbgPrint( "pRasPort1-&gt;dwBytesRcved=%d\n", pRasPort1-&gt;dwBytesRcved ); <br>   DbgPrint( "pRasPort1-&gt;dwFramesXmited=%d\n", pRasPort1-&gt;dwFramesXmited ); <br>   DbgPrint( "pRasPort1-&gt;dwFramesRcved=%d\n", pRasPort1-&gt;dwFramesRcved); <br>   DbgPrint( "pRasPort1-&gt;dwCrcErr=%d\n", pRasPort1-&gt;dwCrcErr); <br>   DbgPrint( "pRasPort1-&gt;dwTimeoutErr=%d\n", pRasPort1-&gt;dwTimeoutErr); <br>   DbgPrint( "pRasPort1-&gt;dwAlignmentErr=%d\n", pRasPort1-&gt;dwAlignmentErr); <br>   DbgPrint( "pRasPort1-&gt;dwHardwareOverrunErr=%d\n", pRasPort1-&gt;dwHardwareOverrunErr); <br>   DbgPrint( "pRasPort1-&gt;dwFramingErr=%d\n", pRasPort1-&gt;dwFramingErr); <br>   DbgPrint( "pRasPort1-&gt;dwBufferOverrunErr=%d\n", pRasPort1-&gt;dwBufferOverrunErr); <br>} <br> <br>VOID File_Print_RasPort( <br>IN RAS_PORT_0 *   pRasPort0, <br>IN RAS_PORT_1 *   pRasPort1 <br>) <br>{ <br>    WCHAR *Line_Condition[] = <br>    { <br>      TEXT("RAS_PORT_NON_OPERATIONAL"), <br>      TEXT("RAS_PORT_DISCONNECTED"), <br>      TEXT("RAS_PORT_CALLING_BACK"), <br>      TEXT("RAS_PORT_LISTENING"), <br>      TEXT("RAS_PORT_AUTHENTICATING"), <br>      TEXT("RAS_PORT_AUTHENTICATED"), <br>      TEXT("RAS_PORT_INITIALIZING") <br>     }; <br> <br>    WCHAR *Hdw_Error[] = <br>    { <br>      TEXT("RAS_HARDWARE_OPERATIONAL"), <br>      TEXT("RAS_HARDWARE_FAILURE") <br>     }; <br> <br>    CHAR  buf[512]; <br>    DWORD dwBytesWritten = 0; <br> <br>    //dumping pRasPort0 to a file <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;hPort  %d\n",pRasPort0-&gt;hPort); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;hConnection   %d\n",pRasPort0-&gt;hConnection); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;dwPortCondition  %ws\n",Line_Condition[pRasPort0-&gt;dwPortCondition-1]); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;dwTotalNumberOfCalls  %d\n",pRasPort0-&gt;dwTotalNumberOfCalls); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;dwConnectDuration  %d\n",pRasPort0-&gt;dwConnectDuration); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;wszPortName  %ws\n",pRasPort0-&gt;wszPortName); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;wszMediaName  %ws\n",pRasPort0-&gt;wszMediaName); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;wszDeviceName  %ws\n",pRasPort0-&gt;wszDeviceName); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort0-&gt;wszDeviceType  %ws\n",pRasPort0-&gt;wszDeviceType); <br> <br>    //dumping pRasPort1 <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"\n dumping pRasPort1\n"); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;hPort  %d\n",pRasPort1-&gt;hPort); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;hConnection   %d\n",pRasPort1-&gt;hConnection); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;dwHardwareCondition  %ws\n",Hdw_Error[pRasPort1-&gt;dwHardwareCondition]); <br> <br>    //connection stats <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwLineSpeed=%d\n", pRasPort1-&gt;dwLineSpeed ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwBytesXmited=%d\n", pRasPort1-&gt;dwBytesXmited ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwBytesRcved=%d\n", pRasPort1-&gt;dwBytesRcved ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwFramesXmited=%d\n", pRasPort1-&gt;dwFramesXmited ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwFramesRcved=%d\n", pRasPort1-&gt;dwFramesRcved); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwCrcErr=%d\n", pRasPort1-&gt;dwCrcErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwTimeoutErr=%d\n", pRasPort1-&gt;dwTimeoutErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwAlignmentErr=%d\n", pRasPort1-&gt;dwAlignmentErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwHardwareOverrunErr=%d\n", pRasPort1-&gt;dwHardwareOverrunErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwFramingErr=%d\n", pRasPort1-&gt;dwFramingErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;dwBufferOverrunErr=%d\n", pRasPort1-&gt;dwBufferOverrunErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STRUCTS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5066"></a>STRUCTS.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1995  Microsoft Corporation <br> <br>Module Name: <br> <br>    net\ip\lookup\structs.h <br> <br>Abstract: <br> <br> <br>Revision History: <br> <br> <br> <br>--*/ <br> <br>#ifndef __LOOKUP_STRUCTS_H__ <br>#define __LOOKUP_STRUCTS_H__ <br> <br>#define LEFT    0 <br>#define RIGHT   1 <br> <br>// <br>//  BYTE <br>//  ComplementPosition( <br>//      IN BYTE byPos <br>//      ) <br>// <br> <br>#define ComplementPosition(X)   ((X)^0x01) <br> <br>typedef struct _TRIE_KEY <br>{ <br>    DWORD   dwAddr; <br>    DWORD   dwMask; <br>    BYTE    byPosition; <br>    BYTE    byLength; <br>}TRIE_KEY, *PTRIE_KEY; <br> <br>// <br>//  ULONG <br>//  Length( <br>//      IN PTRIE_KEY ptkKey <br>//      ) <br>// <br> <br>#define Length(X)    (X)-&gt;byLength <br> <br>typedef struct _TRIE_NODE TRIE_NODE *PTRIE_NODE; <br> <br>struct _TRIE_NODE <br>{ <br>    PTRIE_NODE  ptnParent; <br>    PTRIE_NODE  ptnTrie[2]; <br>    PTRIE_KEY   ptkKey[2]; <br>    BYTE        byPosition; <br>    BYTE        byIndex; <br>}; <br> <br>// <br>//  BYTE <br>//  Index( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define Index(X)    (X)-&gt;byIndex <br> <br>// <br>//  PTRIE_NODE <br>//  Parent( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define Parent(X)   (X)-&gt;ptnParent <br> <br>// <br>//  PTRIE_NODE <br>//  LeftTrie( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define LeftTrie(X) (X)-&gt;ptnTrie[LEFT] <br> <br>// <br>//  PTRIE_NODE <br>//  RightTrie( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define RightTrie(X) (X)-&gt;ptnTrie[RIGHT] <br> <br>// <br>//  PTRIE_NODE <br>//  LeftKey( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define LeftKey(X) (X)-&gt;rgptkKey[LEFT] <br> <br>// <br>//  PTRIE_NODE <br>//  RightKey( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define RightKey(X) (X)-&gt;rgptkKey[RIGHT] <br> <br>// <br>//  BOOL <br>//  IsLeafNode( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define IsLeafNode(X)   ((RightTrie((X)) == NULL) &amp;&amp; (LeftTrie((X)) == NULL)) <br> <br>// <br>//  BOOL <br>//  IsSingleKeyNode( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define IsSingleKeyNode(X) ((RightKey((X)) &amp;&amp; (LeftKey((X)) == NULL)) ||    \ <br>                            (LeftKey((X)) &amp;&amp; (RightKey((X)) == NULL))) <br> <br>// <br>//  BOOL <br>//  IsSingleKeyLeafNode( <br>//      IN PTRIE_NODE ptnNode <br>//      ) <br>// <br> <br>#define IsSingleKeyLeafNode(X) (IsLeafNode((X)) &amp;&amp; IsSingleKeyNode((X))) <br> <br>// <br>//  PTRIE_KEY <br>//  GetKeyByPosition( <br>//      IN PTRIE_NODE ptnNode, <br>//      IN ULONG      ulPosition <br>//      ) <br>// <br> <br>#define GetKeyByPosition(X,Y)   ((X)-&gt;rgptkKey[(Y)]) <br> <br>// <br>//  PTRIE_NODE <br>//  GetSubTrieByPosition( <br>//      IN PTRIE_NODE ptnNode, <br>//      IN ULONG      ulPosition <br>//      ) <br>// <br> <br>#define GetSubTrieByPosition(X,Y)  ((X)-&gt;ptnNode[(Y)]) <br> <br> <br> <br> <br> <br> <br> <br> <br>     <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

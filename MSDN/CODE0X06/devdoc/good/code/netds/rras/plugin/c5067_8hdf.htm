<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PLUGIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5073"></a>PLUGIN.CPP</h2>
<pre><code>// plugin.cpp : Implementation of CPluginApp and DLL registration. <br> <br>#include "stdafx.h" <br>#include &lt;initguid.h&gt; <br>#include "plugin.h" <br>#include "pluginc.h" <br>#include "afxpriv.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br> <br>CPluginApp NEAR theApp; <br> <br>const GUID CDECL BASED_CODE _tlid = <br>{ 0x85df111, 0x10e, 0x11d0, { 0xaa, 0x6b, 0, 0x80, 0x5f, 0xc, 0x92, 0x32 } }; <br>const WORD _wVerMajor = 1; <br>const WORD _wVerMinor = 0; <br> <br> <br>//////////////////////////////////////////////////////////////////////////// <br>// CPluginApp::InitInstance - DLL initialization <br> <br>BOOL CPluginApp::InitInstance() <br>{ <br>BOOL bInit = COleControlModule::InitInstance(); <br> <br>if (bInit) <br>{ <br>// TODO: Add your own module initialization code here. <br>} <br> <br>return bInit; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////////// <br>// CPluginApp::ExitInstance - DLL termination <br> <br>int CPluginApp::ExitInstance() <br>{ <br>// TODO: Add your own module termination code here. <br> <br>return COleControlModule::ExitInstance(); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllRegisterServer - Adds entries to the system registry <br> <br>STDAPI DllRegisterServer(void) <br>{ <br>AFX_MANAGE_STATE(_afxModuleAddrThis); <br> <br>if (!AfxOleRegisterTypeLib(AfxGetInstanceHandle(), _tlid)) <br>return ResultFromScode(SELFREG_E_TYPELIB); <br> <br>if (!COleObjectFactoryEx::UpdateRegistryAll(TRUE)) <br>return ResultFromScode(SELFREG_E_CLASS); <br> <br>return NOERROR; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// DllUnregisterServer - Removes entries from the system registry <br> <br>STDAPI DllUnregisterServer(void) <br>{ <br>AFX_MANAGE_STATE(_afxModuleAddrThis); <br> <br>if (!AfxOleUnregisterTypeLib(_tlid, _wVerMajor, _wVerMinor)) <br>return ResultFromScode(SELFREG_E_TYPELIB); <br> <br>if (!COleObjectFactoryEx::UpdateRegistryAll(FALSE)) <br>return ResultFromScode(SELFREG_E_CLASS); <br> <br>return NOERROR; <br>} <br>///////////////////////////////////////////////////////////////////////////// <br>// CPluginObj <br> <br>IMPLEMENT_DYNCREATE(CPluginObj, CCmdTarget) <br> <br>CPluginObj::CPluginObj() <br>{ <br>EnableAutomation(); <br> <br>m_pIMprUIHost = NULL; <br> <br>// To keep the application running as long as an OLE automation  <br>//object is active, the constructor calls AfxOleLockApp. <br>AfxOleLockApp(); <br>} <br> <br>CPluginObj::~CPluginObj() <br>{ <br>// To terminate the application when all objects created with <br>// with OLE automation, the destructor calls AfxOleUnlockApp. <br>AfxOleUnlockApp(); <br>} <br> <br> <br>void CPluginObj::OnFinalRelease() <br>{ <br>// When the last reference for an automation object is released <br>// OnFinalRelease is called.  The base class will automatically <br>// deletes the object.  Add additional cleanup required for your <br>// object before calling the base class. <br> <br>CCmdTarget::OnFinalRelease(); <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CPluginObj, CCmdTarget) <br>//{{AFX_MSG_MAP(CPluginObj) <br>// NOTE - the ClassWizard will add and remove mapping macros here. <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>BEGIN_INTERFACE_MAP(CPluginObj, CCmdTarget) <br>INTERFACE_PART(CPluginObj, IID_IMprUIPlugin, MprUIPlugin) <br>END_INTERFACE_MAP() <br> <br>// {085DF11A-010E-11D0-AA6B-00805F0C9232} <br>IMPLEMENT_OLECREATE(CPluginObj, "PLUGIN.PLUGINOBJ", 0x85df11a, 0x10e, 0x11d0, 0xaa, 0x6b, 0x0, 0x80, 0x5f, 0xc, 0x92, 0x32) <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPluginObj message handlers <br> <br>HRESULT CPluginObj::XMprUIPlugin::QueryInterface(REFIID riid, LPVOID FAR* ppvObj) <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>return (HRESULT)pThis-&gt;ExternalQueryInterface(&amp;riid, ppvObj); <br>} <br> <br>ULONG CPluginObj::XMprUIPlugin::AddRef() <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>return pThis-&gt;ExternalAddRef(); <br>} <br> <br>ULONG CPluginObj::XMprUIPlugin::Release() <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>return pThis-&gt;ExternalRelease(); <br>} <br> <br>HRESULT CPluginObj::XMprUIPlugin::ConnectToRouter <br>(LPCTSTR pRouterName, IMprUIHost *pIMprUIHost) <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>ASSERT(pRouterName &amp;&amp; pIMprUIHost); <br> <br>pThis-&gt;m_pIMprUIHost = pIMprUIHost; <br>return S_OK; <br>} <br> <br>HRESULT CPluginObj::XMprUIPlugin::GetTitle(PWSTR* ppszTitle) <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>ASSERT(ppszTitle); <br>CString str; <br>WCHAR *pwc; <br> <br>VERIFY(str.LoadString(IDS_TITLE)); <br>*ppszTitle = (WCHAR*)::CoTaskMemAlloc((str.GetLength() + 1) * sizeof(WCHAR)); <br>if (*ppszTitle == NULL) <br>return E_OUTOFMEMORY; <br> <br>#ifndef _UNICODE <br>USES_CONVERSION; <br>pwc = A2W(str); <br>#else <br>pwc = (LPTSTR)(LPCTSTR)str; <br>#endif <br> <br>wcscpy(*ppszTitle, pwc); <br>return S_OK; <br>} <br> <br>HRESULT CPluginObj::XMprUIPlugin::GetContextMenu(HMENU* phMenu) <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>ASSERT(phMenu); <br>CMenu menu; <br> <br>VERIFY(menu.LoadMenu(IDR_PLUGIN)); <br>*phMenu = menu.Detach(); <br> <br>return S_OK; <br>} <br> <br>HRESULT CPluginObj::XMprUIPlugin::ProcessCommand <br>(WPARAM wParam, LPARAM lParam, HWND hWndParent) <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br> <br>if (LOWORD(wParam) != ID_CREATEFLOATER) <br>return E_INVALIDARG; <br> <br>if (pThis-&gt;m_pIMprUIHost == NULL) <br>return E_FAIL; <br> <br>CString str; <br>VERIFY(str.LoadString(IDS_FLOAT)); <br>WCHAR *pwc; <br> <br>#ifndef _UNICODE <br>USES_CONVERSION; <br>pwc = A2W(str); <br>#else <br>pwc = (LPTSTR)(LPCTSTR)str; <br>#endif <br> <br>HRESULT hr = pThis-&gt;m_pIMprUIHost-&gt;FloatWindow( <br>CPluginObj::guid,              // CLSID representing the object <br>CPluginCtrl::guid,             // CLSID of Ole Control to create <br>(IMprUIPlugin*)this,           // Plugin in node making request <br>0x00000001,                    // constant context passed back to Ole Control <br>pwc                            // Title of floating window <br>); <br> <br>ASSERT(hr == S_OK); <br> <br>return hr; <br>} <br> <br>HRESULT CPluginObj::XMprUIPlugin::GetCLSID(CLSID** ppClsid) <br>{ <br>METHOD_PROLOGUE(CPluginObj, MprUIPlugin); <br>ASSERT(ppClsid); <br>HRESULT hr = S_OK; <br> <br>*ppClsid = (CLSID*)CoTaskMemAlloc(sizeof(CLSID)); <br>if (*ppClsid == NULL) <br>return E_OUTOFMEMORY; <br> <br>memcpy(*ppClsid, &amp;CPluginCtrl::guid, sizeof(CLSID)); <br> <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

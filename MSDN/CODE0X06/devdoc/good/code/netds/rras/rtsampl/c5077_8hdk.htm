<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEFS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5078"></a>DEFS.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name: <br> <br>    sample\ip\api.c <br> <br>Abstract: <br>    Functions exported by the Sample Routing Protocol DLL  <br> <br>Revision History: <br> <br> <br>--*/ <br> <br>#include "logtrdef.h" <br> <br> <br>#define PROTOCOL_STATE_STOPPED      0 <br>#define PROTOCOL_STATE_STOPPING     1 <br>#define PROTOCOL_STATE_RUNNING      2 <br> <br>#define NUM_STATES                  3 <br> <br>#define BINDING_DOWN            0 <br>#define BINDING_UP              1 <br> <br>#define QUERY_TYPE_GET          0 <br>#define QUERY_TYPE_GET_NEXT     1 <br>#define QUERY_TYPE_GET_FIRST    2 <br>#define QUERY_TYPE_SET          3 <br>#define QUERY_TYPE_CREATE       4 <br>#define QUERY_TYPE_DELETE       5 <br> <br>#define NUM_WAIT_EVENTS         3 <br> <br>// <br>// Define this to be your compiler's ASSERTs <br>// <br> <br>#define ASSERT( exp ) <br> <br>// <br>//  VOID <br>//  InitializeListHead( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define InitializeListHead(ListHead) (\ <br>    (ListHead)-&gt;Flink = (ListHead)-&gt;Blink = (ListHead)) <br> <br>// <br>//  BOOLEAN <br>//  IsListEmpty( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define IsListEmpty(ListHead) \ <br>    ((ListHead)-&gt;Flink == (ListHead)) <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveHeadList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveHeadList(ListHead) \ <br>    (ListHead)-&gt;Flink;\ <br>    {RemoveEntryList((ListHead)-&gt;Flink)} <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveTailList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveTailList(ListHead) \ <br>    (ListHead)-&gt;Blink;\ <br>    {RemoveEntryList((ListHead)-&gt;Blink)} <br> <br>// <br>//  VOID <br>//  RemoveEntryList( <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define RemoveEntryList(Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    _EX_Flink = (Entry)-&gt;Flink;\ <br>    _EX_Blink = (Entry)-&gt;Blink;\ <br>    _EX_Blink-&gt;Flink = _EX_Flink;\ <br>    _EX_Flink-&gt;Blink = _EX_Blink;\ <br>    } <br> <br>// <br>//  VOID <br>//  InsertTailList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertTailList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Blink = _EX_ListHead-&gt;Blink;\ <br>    (Entry)-&gt;Flink = _EX_ListHead;\ <br>    (Entry)-&gt;Blink = _EX_Blink;\ <br>    _EX_Blink-&gt;Flink = (Entry);\ <br>    _EX_ListHead-&gt;Blink = (Entry);\ <br>    } <br> <br>// <br>//  VOID <br>//  InsertHeadList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertHeadList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Flink = _EX_ListHead-&gt;Flink;\ <br>    (Entry)-&gt;Flink = _EX_Flink;\ <br>    (Entry)-&gt;Blink = _EX_ListHead;\ <br>    _EX_Flink-&gt;Blink = (Entry);\ <br>    _EX_ListHead-&gt;Flink = (Entry);\ <br>    } <br> <br>// <br>// Macros called each time an api is called and exited. This is to <br>// facilitate StopProtocol() functionality. <br>// <br> <br>#define EnterProtocolApi()                                      \ <br>{                                                               \ <br>    EnterCriticalSection(&amp;g_csProtocolStateLock);               \ <br>                                                                \ <br>    if(g_dwProtocolState == PROTOCOL_STATE_RUNNING)             \ <br>    {                                                           \ <br>        g_dwProtocolRefCount++;                                 \ <br>        LeaveCriticalSection(&amp;g_csProtocolStateLock);           \ <br>    }                                                           \ <br>    else                                                        \ <br>    {                                                           \ <br>        LeaveCriticalSection(&amp;g_csProtocolStateLock);           \ <br>        return ERROR_CAN_NOT_COMPLETE;                          \ <br>    }                                                           \ <br>} <br> <br>#define ExitProtocolApi()                                       \ <br>{                                                               \ <br>    EnterCriticalSection(&amp;g_csProtocolStateLock);               \ <br>    g_dwProtocolRefCount++;                                     \ <br>    LeaveCriticalSection(&amp;g_csProtocolStateLock);               \ <br>} <br> <br>#define PRINT_ADDRESS(x)    \ <br>    ((x)&amp;0x000000FF),(((x)&amp;0x0000FF00)&gt;&gt;8),(((x)&amp;0x00FF0000)&gt;&gt;16),(((x)&amp;0xFF000000)&gt;&gt;24) <br> <br>// <br>// VOID <br>// PrintRoute(PRTM_IP_ROUTE pRoute) <br>// <br> <br>#define PrintRoute(FL,pRoute)   \ <br>{                               \ <br>    Trace4(FL,                  \ <br>           "Dest: %d.%d.%d.%d(%d.%d.%d.%d) Nexthop: %d.%d.%d.%d(%d.%d.%d.%d)", \ <br>           PRINT_ADDRESS((pRoute)-&gt;RR_Network.N_NetNumber),         \ <br>           PRINT_ADDRESS((pRoute)-&gt;RR_Network.N_NetMask),           \ <br>           PRINT_ADDRESS((pRoute)-&gt;RR_NextHopAddress.N_NetNumber),  \ <br>           PRINT_ADDRESS((pRoute)-&gt;RR_NextHopAddress.N_NetMask));   \ <br>    Trace5(FL,"I/F: %d Proto: %d Metric: %d Priority: %d Validity: %s.\n",    \ <br>           (pRoute)-&gt;RR_InterfaceID,                       \ <br>           (pRoute)-&gt;RR_RoutingProtocol,                   \ <br>           (pRoute)-&gt;RR_FamilySpecificData.FSD_Metric,     \ <br>           (pRoute)-&gt;RR_FamilySpecificData.FSD_Priority,   \ <br>           (IsRouteValid((pRoute)))?"TRUE":"FALSE");       \ <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

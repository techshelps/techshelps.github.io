<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LOGTRDEF.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5083"></a>LOGTRDEF.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1995  Microsoft Corporation <br> <br>Module Name: <br> <br>    net\ip\rtrmgr\logtrdefs.c <br> <br>Abstract: <br>    IP Router Manager defines for tracing and logging <br> <br>Revision History: <br> <br>    Gurdeep Singh Pall          6/16/95  Created <br> <br>--*/ <br> <br>#ifndef __LOGTRDEF_H__ <br>#define __LOGTRDEF_H__ <br> <br>// <br>// constants and macros used for tracing <br>// <br> <br>#define SAMP_TRACE_ANY              ((DWORD)0xFFFF0000 | TRACE_USE_MASK) <br>#define SAMP_TRACE_ERR              SAMP_TRACE_ANY <br>#define SAMP_TRACE_ENTER            ((DWORD)0x00010000 | TRACE_USE_MASK) <br>#define SAMP_TRACE_INTF             ((DWORD)0x00020000 | TRACE_USE_MASK) <br>#define SAMP_TRACE_GLOBAL           ((DWORD)0x00040000 | TRACE_USE_MASK) <br>#define SAMP_TRACE_ROUTE            ((DWORD)0x00080000 | TRACE_USE_MASK) <br> <br>#define TRACEID         g_dwTrace <br> <br> <br>#define Trace0(l,a)             \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a) <br>#define Trace1(l,a,b)           \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b) <br>#define Trace2(l,a,b,c)         \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b, c) <br>#define Trace3(l,a,b,c,d)       \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b, c, d) <br>#define Trace4(l,a,b,c,d,e)     \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b, c, d, e) <br>#define Trace5(l,a,b,c,d,e,f)   \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b, c, d, e, f) <br>#define Trace6(l,a,b,c,d,e,f,g) \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b, c, d, e, f, g) <br>#define Trace7(l,a,b,c,d,e,f,g,h) \ <br>            TracePrintfEx(TRACEID, SAMP_TRACE_ ## l, a, b, c, d, e, f, g, h) <br> <br>#if DBG <br> <br>#define TraceEnter(X)   TracePrintfEx(TRACEID, SAMP_TRACE_ENTER, "Entered: "X) <br>#define TraceLeave(X)   TracePrintfEx(TRACEID, SAMP_TRACE_ENTER, "Leaving: "X"\n") <br> <br>#else   // DBG <br> <br>#define TraceEnter(X) <br>#define TraceLeave(X) <br> <br>#endif // DBG <br> <br> <br>// <br>// Event logging macros <br>// <br> <br>#define LOGLEVEL        g_dwLogLevel <br>#define LOGHANDLE       g_hLogHandle <br> <br>#define LOGERR          RouterLogError <br>#define LOGERRDATA      RouterLogErrorData <br>#define LOGWARN         RouterLogWarning <br>#define LOGWARNDATA     RouterLogWarningData <br>#define LOGINFO         RouterLogInformation <br>#define LOGINFODATA     RouterLogInformationData <br> <br>// <br>// Error logging <br>// <br> <br>// <br>// VOID <br>// Log{Err|Warn|Info}{NumArgs}( <br>//                             DWORD    dwLogMsgId, <br>//                             PSTR     pszInsertString1, <br>//                             .... <br>//                             PSTR     pszInsertString{NumArgs}, <br>//                             DWORD    dwErrorCode <br>//                             ); <br>// <br>// VOID <br>// Log{Err|Warn|Info}Data{NumArgs}( <br>//                                 DWORD    dwLogMsgId, <br>//                                 PSTR     pszInsertString1, <br>//                                 .... <br>//                                 PSTR     pszInsertString{NumArgs}, <br>//                                 DWORD    dwDataSize, <br>//                                 PBYTE    pbData  <br>//                                 ); <br>// <br> <br> <br>#define LogErr0(msg,err)                                    \ <br>if (LOGLEVEL &gt;= PROTO_LOGGING_ERROR)                    \ <br>            LOGERR(LOGHANDLE,SAMPLOG_ ## msg,0,NULL,(err)) <br>#define LogErr1(msg,a,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_ERROR) \ <br>            LOGERR(LOGHANDLE,SAMPLOG_ ## msg,1,&amp;(a),(err)) <br>#define LogErr2(msg,a,b,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_ERROR) { \ <br>            LPSTR _asz[2] = { (a), (b) }; \ <br>            LOGERR(LOGHANDLE,SAMPLOG_ ## msg,2,_asz,(err)); \ <br>        } <br>#define LogErr3(msg,a,b,c,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_ERROR) { \ <br>            LPSTR _asz[3] = { (a), (b), (c) }; \ <br>            LOGERR(LOGHANDLE,SAMPLOG_ ## msg,3,_asz,(err)); \ <br>        } <br>#define LogErr4(msg,a,b,c,d,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_ERROR) { \ <br>            LPSTR _asz[4] = { (a), (b), (c), (d) }; \ <br>            LOGERR(LOGHANDLE,SAMPLOG_ ## msg,4,_asz,(err)); \ <br>        } <br> <br> <br>// Warning logging <br> <br>#define LogWarn0(msg,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) \ <br>            LOGWARN(LOGHANDLE,SAMPLOG_ ## msg,0,NULL,(err)) <br>#define LogWarn1(msg,a,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) \ <br>            LOGWARN(LOGHANDLE,SAMPLOG_ ## msg,1,&amp;(a),(err)) <br>#define LogWarn2(msg,a,b,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) { \ <br>            LPSTR _asz[2] = { (a), (b) }; \ <br>            LOGWARN(LOGHANDLE,SAMPLOG_ ## msg,2,_asz,(err)); \ <br>        } <br>#define LogWarn3(msg,a,b,c,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) { \ <br>            LPSTR _asz[3] = { (a), (b), (c) }; \ <br>            LOGWARN(LOGHANDLE,SAMPLOG_ ## msg,3,_asz,(err)); \ <br>        } <br>#define LogWarn4(msg,a,b,c,d,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) { \ <br>            LPSTR _asz[4] = { (a), (b), (c), (d) }; \ <br>            LOGWARN(LOGHANDLE,SAMPLOG_ ## msg,4,_asz,(err)); \ <br>        } <br> <br>#define LogWarnData2(msg,a,b,dw,buf) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) { \ <br>            LPSTR _asz[2] = { (a), (b) }; \ <br>            LOGWARNDATA(LOGHANDLE,SAMPLOG_ ## msg,2,_asz,(dw),(buf)); \ <br>        } <br> <br>#define LogWarnData5(msg,a,b,c,d,e,dw,buf) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_WARN) { \ <br>            LPSTR _asz[5] = { (a), (b), (c), (d), (e)}; \ <br>            LOGWARNDATA(LOGHANDLE,SAMPLOG_ ## msg,5,_asz,(dw),(buf)); \ <br>        } <br> <br> <br>// Information logging <br> <br>#define LogInfo0(msg,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_INFO) \ <br>            LOGINFO(LOGHANDLE,SAMPLOG_ ## msg,0,NULL,(err)) <br>#define LogInfo1(msg,a,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_INFO) \ <br>            LOGINFO(LOGHANDLE,SAMPLOG_ ## msg,1,&amp;(a),(err)) <br>#define LogInfo2(msg,a,b,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_INFO) { \ <br>            LPSTR _asz[2] = { (a), (b) }; \ <br>            LOGINFO(LOGHANDLE,SAMPLOG_ ## msg,2,_asz,(err)); \ <br>        } <br>#define LogInfo3(msg,a,b,c,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_INFO) { \ <br>            LPSTR _asz[3] = { (a), (b), (c) }; \ <br>            LOGINFO(LOGHANDLE,SAMPLOG_ ## msg,3,_asz,(err)); \ <br>        } <br>#define LogInfo4(msg,a,b,c,d,err) \ <br>        if (LOGLEVEL &gt;= PROTO_LOGGING_INFO) { \ <br>            LPSTR _asz[4] = { (a), (b), (c), (d) }; \ <br>            LOGINFO(LOGHANDLE,SAMPLOG_ ## msg,4,_asz,(err)); \ <br>        } <br> <br> <br>#endif // __LOGTRDEF_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DISPATCH.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4830"></a>DISPATCH.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   dispatch.c <br>// <br>//  PURPOSE:  Implement the generic message and command dispatchers. <br>//     <br>// <br>//  FUNCTIONS: <br>//    DispMessage - Call the function associated with a message. <br>//    DispCommand - Call the function associated with a command. <br>//    DispDefault - Call the appropriate default window procedure. <br>// <br>//  COMMENTS: <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#ifdef WIN16 <br>#include "win16ext.h"           // required only for win16 applications <br>#endif <br>#include "globals.h"            // prototypes specific to this application <br> <br>LRESULT DispDefault(EDWP, HWND, UINT, WPARAM, LPARAM); <br> <br>// <br>//  FUNCTION: DispMessage(LPMSDI, HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Call the function associated with a message. <br>// <br>//  PARAMETERS: <br>//    lpmsdi - Structure containing the message dispatch information. <br>//    hwnd - The window handle <br>//    uMessage - The message number <br>//    wparam - Message specific data <br>//    lparam - Message specific data <br>// <br>//  RETURN VALUE: <br>//    The value returned by the message function that was called. <br>// <br>//  COMMENTS: <br>//    Runs the table of messages stored in lpmsdi-&gt;rgmsd searching <br>//    for a message number that matches uMessage.  If a match is found, <br>//    call the associated function.  Otherwise, call DispDefault to <br>//    call the default function, if any, associated with the message <br>//    structure.  In either case, return the value recieved from the <br>//    message or default function. <br>// <br> <br>LRESULT DispMessage(LPMSDI lpmsdi,  <br>                    HWND   hwnd,  <br>                    UINT   uMessage,  <br>                    WPARAM wparam,  <br>                    LPARAM lparam) <br>{ <br>    int  imsd = 0; <br> <br>    MSD *rgmsd = lpmsdi-&gt;rgmsd; <br>    int  cmsd  = lpmsdi-&gt;cmsd; <br> <br>    for (imsd = 0; imsd &lt; cmsd; imsd++) <br>    { <br>        if (rgmsd[imsd].uMessage == uMessage) <br>            return rgmsd[imsd].pfnmsg(hwnd, uMessage, wparam, lparam); <br>    } <br> <br>    return DispDefault(lpmsdi-&gt;edwp, hwnd, uMessage, wparam, lparam); <br>} <br> <br>// <br>//  FUNCTION: DispCommand(LPCMDI, HWND, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Call the function associated with a command. <br>// <br>//  PARAMETERS: <br>//    lpcmdi - Structure containing the command dispatch information. <br>//    hwnd - The window handle <br>//    GET_WM_COMMAND_ID(wparam, lparam) - Identifier of the menu item, <br>//      control, or accelerator. <br>//    GET_WM_COMMAND_CMD(wparam, lparam) - Notification code. <br>//    GET_WM_COMMAND_HWND(wparam, lparam) - The control handle or NULL. <br>// <br>//  RETURN VALUE: <br>//    The value returned by the command function that was called. <br>// <br>//  COMMENTS: <br>//    Runs the table of commands stored in lpcmdi-&gt;rgcmd searching <br>//    for a command number that matches wCommand.  If a match is found, <br>//    call the associated function.  Otherwise, call DispDefault to <br>//    call the default function, if any, associated with the command <br>//    structure.  In either case, return the value recieved from the <br>//    command or default function. <br>// <br> <br> <br>LRESULT DispCommand(LPCMDI lpcmdi,  <br>                    HWND   hwnd,  <br>                    WPARAM wparam,  <br>                    LPARAM lparam) <br>{ <br>    LRESULT lRet = 0; <br>    WORD    wCommand = GET_WM_COMMAND_ID(wparam, lparam); <br>    int     icmd; <br> <br>    CMD    *rgcmd = lpcmdi-&gt;rgcmd; <br>    int     ccmd  = lpcmdi-&gt;ccmd; <br> <br>    // Message packing of wparam and lparam have changed for Win32, <br>    // so use the GET_WM_COMMAND macro to unpack the commnad <br> <br>    for (icmd = 0; icmd &lt; ccmd; icmd++) <br>    { <br>        if (rgcmd[icmd].wCommand == wCommand) <br>        { <br>            return rgcmd[icmd].pfncmd(hwnd, <br>                                      wCommand, <br>                                      GET_WM_COMMAND_CMD(wparam, lparam), <br>                                      GET_WM_COMMAND_HWND(wparam, lparam)); <br>        } <br>    } <br> <br>    return DispDefault(lpcmdi-&gt;edwp, hwnd, WM_COMMAND, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: DispDefault(EDWP, HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Call the appropriate default window procedure. <br>// <br>//  PARAMETERS: <br>//    edwp - Enumerate specifying the appropriate default winow procedure. <br>//    hwnd - The window handle <br>//    uMessage - The message number <br>//    wparam - Message specific data <br>//    lparam - Message specific data <br>// <br>//  RETURN VALUE: <br>//    If there is a default proc, return the value returned by the <br>//    default proc.  Otherwise, return 0. <br>// <br>//  COMMENTS: <br>//    Calls the default procedure associated with edwp using the specified <br>//    parameters. <br>// <br> <br>LRESULT DispDefault(EDWP   edwp,  <br>                    HWND   hwnd,  <br>                    UINT   uMessage,  <br>                    WPARAM wparam,  <br>                    LPARAM lparam) <br>{ <br>    switch (edwp) <br>    { <br>        case edwpNone: <br>            return 0; <br>        case edwpWindow: <br>            return DefWindowProc(hwnd, uMessage, wparam, lparam); <br>        case edwpDialog: <br>            return DefDlgProc(hwnd, uMessage, wparam, lparam); <br>        case edwpMDIFrame: <br>            return DefFrameProc(hwnd, hwndMDIClient, uMessage, wparam, lparam); <br>        case edwpMDIChild: <br>            return DefMDIChildProc(hwnd, uMessage, wparam, lparam); <br>    } <br>    return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

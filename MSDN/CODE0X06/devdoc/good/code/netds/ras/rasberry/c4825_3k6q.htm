<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INIT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4832"></a>INIT.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   init.c <br>// <br>//  PURPOSE:   Performs application and instance specific initialization. <br>// <br>//  FUNCTIONS: <br>//    InitApplication() - Initializes window data and registers window. <br>//    InitInstance() - Saves instance handle and creates main window. <br>// <br>//  COMMENTS: <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#ifdef WIN16 <br>#include "win16ext.h"           // required only for win16 applications <br>#endif <br>#include "globals.h"            // prototypes specific to this application <br> <br>HINSTANCE hInst;                // current instance <br> <br>char szAppName[9];              // The name of this application <br>char szTitle[40];               // The title bar text <br> <br>// <br>//  FUNCTION: InitApplication(HINSTANCE) <br>// <br>//  PURPOSE: Initializes window data and registers window class. <br>// <br>//  PARAMETERS: <br>//    hInstance - The handle to the instance of this application that <br>//          is currently being executed. <br>// <br>//  RETURN VALUE: <br>//    TRUE - Success <br>//    FALSE - Initialization failed <br>// <br>//  COMMENTS: <br>// <br>//    This function is called at initialization time only if no other <br>//    instances of the application are running.  This function performs <br>//    initialization tasks that can be done once for any number of running <br>//    instances. <br>// <br>//    In this case, we initialize a window class by filling out a data <br>//    structure of type WNDCLASS and calling the Windows RegisterClass() <br>//    function.  Since all instances of this application use the same <br>//    window class, we only need to do this when the first instance is <br>//    initialized. <br>// <br> <br>BOOL InitApplication(HINSTANCE hInstance) <br>{ <br>    WNDCLASS  wc; <br> <br>    // Load the application name and description strings. <br> <br>    LoadString(hInstance, IDS_APPNAME, szAppName, sizeof(szAppName)); <br>    LoadString(hInstance, IDS_DESCRIPTION, szTitle, sizeof(szTitle)); <br> <br>    // Fill in window class structure with parameters that describe the <br>    // main window. <br> <br>    wc.style         = CS_HREDRAW | CS_VREDRAW; // Class style(s). <br>    wc.lpfnWndProc   = (WNDPROC)WndProc;        // Window Procedure <br>    wc.cbClsExtra    = 0;                       // No per-class extra data. <br>    wc.cbWndExtra    = 0;                       // No per-window extra data. <br>    wc.hInstance     = hInstance;               // Owner of this class <br>    wc.hIcon         = LoadIcon(hInstance, szAppName); // Icon name from .RC <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); // Cursor <br>    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1); // Default color <br>    wc.lpszMenuName  = szAppName;               // Menu name from .RC <br>    wc.lpszClassName = szAppName;               // Name to register as <br> <br>    // Register the window class and return FALSE if unsuccesful. <br> <br>    if (!RegisterClass(&amp;wc)) <br>    { <br>        return FALSE; <br>    } <br>    // <br>    // **TODO** Call module specific application initialization functions here. <br>    // <br> <br>    return TRUE; <br>} <br> <br> <br>// <br>//  FUNCTION:  InitInstance(HINSTANCE, int) <br>// <br>//  PURPOSE:  Saves instance handle and creates main window. <br>// <br>//  PARAMTERS: <br>//    hInstance - The handle to the instance of this application that <br>//          is currently being executed. <br>//    nCmdShow - Specifies how the main window is to be diplayed. <br>// <br>//  RETURN VALUE: <br>//    TRUE - Success <br>//    FALSE - Initialization failed <br>// <br>//  COMMENTS: <br>//    This function is called at initialization time for every instance of <br>//    this application.  This function performs initialization tasks that <br>//    cannot be shared by multiple instances. <br>// <br>//    In this case, we save the instance handle in a static variable and <br>//    create and display the main program window. <br>// <br> <br>BOOL InitInstance(HINSTANCE hInstance, int nCmdShow) <br>{ <br>    HWND    hwnd; // Main window handle. <br> <br>    // Save the instance handle in static variable, which will be used in <br>    // many subsequence calls from this application to Windows. <br> <br>    hInst = hInstance; // Store instance handle in our global variable <br> <br>    // Create a main window for this application instance. <br>    hwnd = CreateWindow(szAppName,           // See RegisterClass() call. <br>                        szTitle,             // Text for window title bar. <br>                        WS_OVERLAPPEDWINDOW, // Window style. <br>                        CW_USEDEFAULT, 0,    // Use default positioning <br>                        CW_USEDEFAULT, 0,    // Use default size <br>                        NULL,                // Overlapped has no parent. <br>                        NULL,                // Use the window class menu. <br>                        hInstance,            <br>                        NULL);                <br>     <br>    // If window could not be created, return "failure" <br>    if (!hwnd) <br>        return FALSE; <br> <br>    // <br>    // **TODO** Call module specific instance initialization functions here. <br>    // <br> <br>    // Make the window visible; update its client area; and return "success" <br>    ShowWindow(hwnd, nCmdShow); // Show the window <br>    UpdateWindow(hwnd);         // Sends WM_PAINT message <br> <br>    return TRUE;                // We succeeded... <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATDLG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4840"></a>STATDLG.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   statdlg.c <br>// <br>//  PURPOSE:   Displays the "StatDlg" dialog box <br>// <br>//  FUNCTIONS: <br>//    StatDlg           - Processes messages for "StatDlg" dialog box. <br>//    MsgStatDlgInit    - To initialize the statdlg box. <br>//    MsgStatDlgCommand - Process WM_COMMAND message sent to the statdlg box. <br>//    CmdStatDlgRefresh - Display the connection status. <br>//    CmdStatDlgOK      - Free the statdlg box and related data. <br>// <br>//  COMMENTS: <br>//    Dialog box to display the status of the selected connection <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br> <br>#ifdef WIN16 <br>#include "win16ext.h"           // required only for win16 applications <br>#endif <br> <br>#include "globals.h"            // prototypes specific to this application <br>#include &lt;stdlib.h&gt; <br>#include &lt;ras.h&gt; <br>#include &lt;raserror.h&gt; <br>#include "rasutil.h" <br>#include "statdlg.h" <br> <br>LRESULT MsgStatDlgInit(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgStatDlgCommand(HWND, UINT, WPARAM, LPARAM); <br>LRESULT CmdStatDlgRefresh(HWND, WORD, WORD, HWND); <br>LRESULT CmdStatDlgOK(HWND, WORD, WORD, HWND); <br> <br>// StatDlg dialog message table definition. <br>MSD rgmsdStatDlg[] = <br>{ <br>    {WM_COMMAND,    MsgStatDlgCommand}, <br>    {WM_INITDIALOG, MsgStatDlgInit} <br>}; <br> <br>MSDI msdiStatDlg = <br>{ <br>    sizeof(rgmsdStatDlg) / sizeof(MSD), <br>    rgmsdStatDlg, <br>    edwpNone <br>}; <br> <br>// StatDlg dialog command table definition. <br>CMD rgcmdStatDlg[] = <br>{ <br>    {IDB_REFRESH, CmdStatDlgRefresh}, <br>    {IDOK,        CmdStatDlgOK} <br>}; <br> <br>CMDI cmdiStatDlg = <br>{ <br>    sizeof(rgcmdStatDlg) / sizeof(CMD), <br>    rgcmdStatDlg, <br>    edwpNone <br>}; <br> <br>// Module specific "globals"  Used when a variable needs to be <br>// accessed in more than on handler function. <br> <br> <br>// <br>//  FUNCTION: StatDlg(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Processes messages for "StatDlg" dialog box. <br>// <br>//  PARAMETERS: <br>//    hdlg - window handle of the dialog box <br>//    wMessage - type of message <br>//    wparam - message-specific information <br>//    lparam - message-specific information <br>// <br>//  RETURN VALUE: <br>//    TRUE - message handled <br>//    FALSE - message not handled <br>// <br>//  COMMENTS: <br>//    Dispatch messages <br>// <br> <br>LRESULT CALLBACK StatDlg(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    return DispMessage(&amp;msdiStatDlg, hdlg, uMessage, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: MsgStatDlgInit(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: To initialize the statdlg box. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handing the message. <br>//    uMessage - The message number. WM_INITDLG. <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - message handled. <br>// <br>//  COMMENTS: <br>// <br> <br>LRESULT MsgStatDlgInit(HWND hdlg, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    // Center the dialog over the application window <br>    CenterWindow(hdlg, GetWindow(hdlg, GW_OWNER)); <br> <br>    SendMessage(hdlg, WM_COMMAND, (WPARAM) IDB_REFRESH, 0L ); <br> <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: MsgStatDlgCommand(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Process WM_COMMAND message sent to the statdlg box. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handing the message. <br>//    uMessage - The message number. WM_COMMAND. <br>//    wparam - Message specific data (unused). <br>//    lparam - Message specific data (unused). <br>// <br>//  RETURN VALUE: <br>//    TRUE for message handled. <br>//    FALSE for message not handled. <br>// <br>//  COMMENTS: <br>//    Uses this DispCommand function defined in wndproc.c combined <br>//    with the cmdiStatDlg structure defined in this file to handle <br>//    the command messages for the statdlg dialog box. <br>// <br> <br>LRESULT MsgStatDlgCommand(HWND   hwnd,  <br>                        UINT   uMessage,  <br>                        WPARAM wparam,  <br>                        LPARAM lparam) <br>{ <br>    return DispCommand(&amp;cmdiStatDlg, hwnd, wparam, lparam); <br>} <br> <br>// <br>//  FUNCTION: CmdStatDlgRefresh(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Refresh the information displayed in the dialog box. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handling the command. <br>//    wCommand - The command to be handled IDB_REFRESH. <br>//    wNotify  - The notifcation message (unused). <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    Calls RasGetConnectStatus to populate dialog box. <br>// <br> <br>LRESULT CmdStatDlgRefresh(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    HRASCONN hrasconn; <br>    RASCONNSTATUS rasStatus; <br>    DWORD dwRet; <br>    CHAR  szBuf[256]; <br>    HWND  hwndConn; <br>    UINT  ndx; <br> <br>    // get the connection text from previous window <br>    hwndConn = GetDlgItem( GetParent(hdlg), IDL_CONN); <br>    ndx = (UINT) SendMessage( hwndConn, LB_GETCURSEL, 0,  0L ); <br>    SendMessage( hwndConn, LB_GETTEXT, ndx, (LPARAM)(LPSTR)szBuf ); <br>    SetDlgItemText(hdlg, IDE_CONNECTION, (LPSTR)szBuf ); <br> <br>    // get to HRASCONN <br>    hrasconn = g_lphRasConn[ndx]; <br>        <br>    // get connection status <br>    rasStatus.dwSize = sizeof(RASCONNSTATUS); <br>    dwRet = RasGetConnectStatus( hrasconn, &amp;rasStatus ); <br>    if ( dwRet ) <br>    { <br>        if ( RasGetErrorString( (UINT)dwRet, (LPSTR)szBuf, 256 ) != 0 ) <br>            wsprintf( (LPSTR)szBuf, "Undefined RAS Connect Status Error (%ld).", dwRet ); <br> <br>        MessageBox(hdlg, (LPSTR)szBuf, szAppName, MB_OK | MB_ICONSTOP ); <br>        EndDialog(hdlg, FALSE); <br>        return TRUE; <br>    } <br>    else  <br>    { <br>        LoadString( hInst, <br>                    GetRasConnState( rasStatus.rasconnstate ), <br>                    (LPSTR)szBuf, <br>                    256 ); <br>        SetDlgItemText(hdlg, IDE_STATUS, (LPSTR)szBuf); <br> <br>        if ( rasStatus.dwError ) // there is an error <br>        { <br>            if ( RasGetErrorString( (UINT)rasStatus.dwError, (LPSTR)szBuf, 256 ) != 0 ) <br>                wsprintf( (LPSTR)szBuf, "Undefined Connection Error (%ld).", rasStatus.dwError ); <br>        } <br>        else <br>        { <br>            wsprintf( (LPSTR)szBuf, "No Error" ); <br>        } <br>        SetDlgItemText(hdlg, IDE_ERROR, (LPSTR)szBuf); <br> <br>        SetDlgItemText(hdlg, IDE_DEVICE, rasStatus.szDeviceName); <br> <br>        SetDlgItemText(hdlg, IDE_TYPE, rasStatus.szDeviceType); <br> <br>    } <br> <br>    return TRUE; <br>} <br> <br>// <br>//  FUNCTION: CmdStatDlgOK(HWND, WORD, HWND) <br>// <br>//  PURPOSE: Free the statdlg box and related data. <br>// <br>//  PARAMETERS: <br>//    hwnd - The window handling the command. <br>//    wCommand - The command to be handled (unused). <br>//    wNotify  - The notifcation message (unused). <br>//    hwndCtrl - NULL (unused). <br>// <br>//  RETURN VALUE: <br>//    Always returns TRUE. <br>// <br>//  COMMENTS: <br>//    Calls EndDialog to finish the dialog session. <br>// <br> <br>LRESULT CmdStatDlgOK(HWND hdlg, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    EndDialog(hdlg, TRUE);          // Exit the dialog <br>    return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADMAPI.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4851"></a>ADMAPI.C</h2>
<pre><code>/****************************************************************************** <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This sample source code is only intended as a supplement to  <br>*       RasAdmin API usage and is meant to help user with <br>*       RasAdmin API Calling convention. Use this code at your own risk.  <br>*       Microsoft disclaims any implied warranty. This sample code can <br>*       be copied and distributed. <br>  <br>******************************************************************************/ <br> <br>/******************************************************************** <br>*  admapit.c -- Sample program demonstrating the use of different <br>*                     RasAdmin API <br>*                                                                     <br>*  Comments:                                                  <br>*                   RasAdmin expects \\Servername  as it's arguments. <br>* RasAdminGetErrorString API returns error string. However  <br>* this API may return an Error 87 (Invalid Parameter) for the Non  <br>* RAS Error codes. This API is design for  only Ras related error codes.  <br>* For more Info. check the documentation. I am using this API to for all the  <br>* errors but I print the error codes before calling this API  <br>*****************************************************************************/ <br>/*************************************************************************** <br>*  Functions: <br>*      Init2(void); <br>*      Init1(void); <br>*      PrintGetStringError(DWORD dwResult); <br>*      ServerGetInfo(WCHAR *RasSrv); <br>*      PrintPriv(void); <br>*      UserPrivilege(void); <br>*      PrintClearStats(WCHAR * RasSrv, WCHAR *wszPortName); <br>*      RasAdminClearDisc(LPVOID param); <br>*****************************************************************************/ <br> <br> <br>#define sleeptime 60000 <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;lm.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;conio.h&gt; <br>#include &lt;rassapi.h&gt; <br> <br>#include &lt;memory.h&gt; <br>WCHAR* <br>StrDupWFromA( <br>    CHAR* psz ); <br> <br> <br>#define Number_Of_Flags 6 <br>HANDLE LogFile = NULL; <br>HANDLE cLogFile = NULL; <br>HANDLE ErrLogFile = NULL; <br>VOID File_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>); <br>VOID Debug_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>); <br>VOID Init2(void); <br>VOID Init1(void); <br>VOID PrintGetStringError(DWORD dwResult); <br>INT ServerGetInfo(WCHAR *RasSrv); <br>VOID PrintPriv(void); <br>VOID UserPrivilege(void); <br>VOID PrintClearStats(WCHAR * RasSrv, WCHAR *wszPortName); <br>DWORD WINAPI RasAdminClearDisc(LPVOID param); <br> <br>PRAS_PORT_1             pRasPort1; <br>PRAS_PORT_STATISTICS    pRasStats; <br>RAS_PARAMETERS *        pRasParams; <br>PRAS_SERVER_0           pRasServer0; <br>PRAS_PORT_0             pRasPort0; <br>RAS_PORT_1             RasPort1; <br>RAS_PORT_STATISTICS    RasStats; <br>RAS_SERVER_0           RasServer0; <br> <br>BOOL First_Call = TRUE; <br>DWORD Status =0; <br>DWORD dwResult = 0; <br>DWORD dwBytesWritten=0; <br>CHAR szBuf[120]; <br>BOOL ErrLogInValid = FALSE; <br>BOOL cErrLogInValid = FALSE; <br>BOOL LogInValid = TRUE; <br>WCHAR szUserAccountServer[UNLEN+1]; <br>PRAS_USER_0 ppRasUser0; <br>RAS_USER_0 RasUser0; <br>WCHAR lpszServerName[50]; <br>WCHAR RasSrv[64]; <br>BOOL Quit=FALSE; <br>/*************************************************************************/ <br>/***************** Start Main ********************************************/ <br>/*************************************************************************/ <br> <br>WCHAR* <br>StrDupWFromA( <br>    CHAR* psz ) <br> <br>    /* Returns heap block containing a copy of 0-terminated string 'psz' or <br>    ** NULL on error or if 'psz' is NULL.  The output string is converted to <br>    ** UNICODE.  It is caller's responsibility to Free the returned string. <br>    */ <br>{ <br>    WCHAR* pszNew = NULL; <br> <br>    if (psz) <br>    { <br>DWORD cb; <br> <br>cb = MultiByteToWideChar( CP_ACP, 0, psz, -1, NULL, 0 ); <br> <br>pszNew = malloc( cb * sizeof(TCHAR) ); <br>if (!pszNew) <br>{ <br>    return NULL; <br>} <br> <br>cb = MultiByteToWideChar( CP_ACP, 0, psz, -1, pszNew, cb ); <br>if (cb == 0) <br>{ <br>    free( pszNew ); <br>    return NULL; <br>} <br>    } <br> <br>    return pszNew; <br>} <br> <br> <br> <br> <br>// Format and write debug information to OutputDebugString <br>ULONG <br>_cdecl <br>DbgPrint( <br>    PCH Format, <br>    ... <br>    ) <br>{    <br>    CHAR szbuffer[255]; <br>    WCHAR buffer[255]; <br>    WCHAR *temp=NULL; <br>    LPINT lpResult=0; <br>    va_list marker; <br>    va_start (marker,Format); <br>    if (IsTextUnicode(Format, sizeof(Format),lpResult)) <br>{ <br>temp=StrDupWFromA(Format); <br>     wvsprintfW (buffer,temp, marker); <br>     OutputDebugString (buffer); <br>      free(temp); <br>} <br>    else <br>{ <br>     wvsprintfA (szbuffer,Format, marker); <br>     temp=StrDupWFromA(szbuffer); <br>     OutputDebugString (temp); <br>     free(temp); <br>     } <br>    return TRUE; <br>} <br> <br> <br> <br> <br> <br>// Init Functions <br>VOID Init1(void) <br>{ <br>//Stores port  information in this file <br>LogInValid = FALSE; <br>     LogFile = CreateFile(TEXT("Admin.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>CREATE_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (LogFile== INVALID_HANDLE_VALUE) { <br>LogInValid = TRUE; <br>    } <br> <br>} <br>VOID Init2(void) <br>{ <br>cErrLogInValid = FALSE; <br>ErrLogInValid = FALSE; <br>//Stores Statistics and port disconnect information in this file <br>     cLogFile = CreateFile(TEXT("AdminStats.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>CREATE_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (cLogFile== INVALID_HANDLE_VALUE) { <br>cErrLogInValid = TRUE; <br>    } <br>//Stores Privlege changes information of a user in this file <br>     ErrLogFile = CreateFile(TEXT("AdminUser.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>CREATE_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (ErrLogFile== INVALID_HANDLE_VALUE) { <br>ErrLogInValid = TRUE; <br>    } <br>     <br>} <br> <br>//Function to Print Error Strings <br> <br>VOID PrintGetStringError(DWORD dwResult) <br>{ <br>CHAR szBuf[120]; <br>DWORD dwBytesWritten=0; <br> <br>     DbgPrint("ERROR  RasAdminGetErrorString      %d\n",dwResult); <br>     sprintf(szBuf, "ERROR  RasAdminGetErrorString      %d\n",dwResult);      <br>     WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>} <br> <br>// Function to get Server  Info. <br>INT ServerGetInfo(WCHAR *RasSrv) <br>{ <br>DWORD Status; <br>DWORD dwResult; <br>CHAR szBuf[120]; <br>DWORD dwBytesWritten=0; <br>WCHAR Buf[512]; <br>WCHAR *lpszString; <br>lpszString=&amp;Buf[0]; <br> <br>// Calling RasAdminServerGetInfo  <br>// Paramters: <br>// IN   WCHAR * lpszServerName              //name of the RAS Server <br>// OUT PRAS_SERVER_0 pRasServer0    // Pointer to server inf. <br> <br> <br>Status=RasAdminServerGetInfo(RasSrv, pRasServer0); <br>if (Status != ERROR_SUCCESS) <br>   { <br>sprintf(szBuf, "ERROR RasAdminServerGetInfo   %d\n",Status); <br>dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>    DbgPrint("ERROR  RasAdminServerGetInfo      %ws\n",lpszString); <br>     sprintf(szBuf, "ERROR  RasAdminServerGetInfo      %ws\n",lpszString);      <br>  WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> else <br>    PrintGetStringError(dwResult); <br>      return(1); <br>   } <br>else <br>   { <br>    sprintf(szBuf, "TotalPorts =  %d   PortsInUse = %d   RasVersion = %d  \n", <br>       pRasServer0-&gt;TotalPorts, pRasServer0-&gt;PortsInUse, pRasServer0-&gt;RasVersion);      <br>    WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>   } <br>return(0); <br>} <br> <br>// Function to print Privileges of a user <br>VOID PrintPriv(void) <br>{ <br>DWORD Permission; <br>DWORD dwBytesWritten=0; <br>CHAR szBuf[120]; <br> <br>     sprintf(szBuf,"\n User Privileges\n"); <br>     WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>     sprintf(szBuf,"Account Server Name= %ws     UserName= %ws\n",szUserAccountServer, pRasPort1-&gt;rasport0.wszUserName); <br>     WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>     sprintf(szBuf," Priviledge   %d\n",ppRasUser0-&gt;bfPrivilege); <br>     WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>     Permission = ppRasUser0-&gt;bfPrivilege - (ppRasUser0-&gt;bfPrivilege &amp; RASPRIV_DialinPrivilege); <br>     sprintf(szBuf,"CallBack Permission %d\n",Permission); <br>     WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>} <br> <br>//Function to get and change User Dialin Privileges. It goes through all the Dialin Privileges for a user. <br> <br>VOID UserPrivilege(void) <br>{ <br>DWORD dwResult; <br>CHAR szBuf[120]; <br>DWORD dwBytesWritten=0; <br>WCHAR Buf[512]; <br>WCHAR *lpszString; <br>static DWORD LoopPriv=0; <br>static BYTE Dialin=1; <br>lpszString=&amp;Buf[0]; <br> <br>// API Called:     RasAdminGetUserAccountServer <br>// Parameters: <br>//  IN WCHAR * lpszDomainName <br>// IN WCHAR * lpszServerName <br>// OUT WCHAR * lpszUserAccountServer <br> <br>   if (pRasPort1-&gt;rasport0.fAdvancedServer &gt; 0) <br>     { <br>      dwResult = RasAdminGetUserAccountServer(pRasPort1-&gt;rasport0.wszLogonDomain,  <br> NULL, &amp;szUserAccountServer[0]); <br>     } <br>  else  <br>      {   <br>      wcscpy(lpszServerName, RasSrv); <br>      dwResult = RasAdminGetUserAccountServer(NULL, &amp;lpszServerName[0], &amp;szUserAccountServer[0]); <br>      } <br> <br>// API Called:     RasAdmimUserGetInfo <br>// Parameters: <br>//  IN WCHAR * lpszUserAccountServer <br>// IN WCHAR * lpszUserName <br>// OUT RAS_USER_0 * ppRasUser0 <br> <br>  if (dwResult == ERROR_SUCCESS) <br>     { <br>     dwResult = RasAdminUserGetInfo(szUserAccountServer, pRasPort1-&gt;rasport0.wszUserName, ppRasUser0); <br>     if (dwResult == ERROR_SUCCESS) <br> { <br>  PrintPriv(); <br> } <br>     else <br>{ <br>sprintf(szBuf,"RasAdminUserGetInfo     %d\n",dwResult); <br>WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>dwResult = RasAdminGetErrorString((UINT) dwResult, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>    sprintf(szBuf, "ERROR  RasAdminUserGetInfo      %ws\n",lpszString);      <br>    WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br>else <br>    PrintGetStringError(dwResult); <br>} <br>      if (LoopPriv &gt; 3)  <br>{LoopPriv =0; Dialin = 1;} <br>      if (LoopPriv &lt; 4) <br> { <br>  if (LoopPriv == 3) wcscpy(ppRasUser0-&gt;szPhoneNumber, TEXT("99999999")); <br>  if (LoopPriv == 0) {ppRasUser0-&gt;bfPrivilege =  Dialin;Dialin = Dialin * 2;LoopPriv++;} <br>  else {ppRasUser0-&gt;bfPrivilege = (RASPRIV_DialinPrivilege | Dialin  ); <br>Dialin = Dialin * 2 ; <br>LoopPriv++;} <br> } <br>// API Called:     RasAdmimUserSetInfo <br>// Parameters: <br>//  IN WCHAR * lpszUserAccountServer <br>// IN WCHAR * lpszUserName <br>// IN RAS_USER_0 * ppRasUser0 <br>   <br>     dwResult = RasAdminUserSetInfo(szUserAccountServer, pRasPort1-&gt;rasport0.wszUserName,ppRasUser0); <br>     if (dwResult != ERROR_SUCCESS) <br>{ <br>sprintf(szBuf,"ERROR: RasAdminUserSetInfo     %d\n",dwResult); <br>WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>dwResult = RasAdminGetErrorString((UINT) dwResult, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>     sprintf(szBuf, "ERROR  RasAdminUserSetInfo      %ws\n",lpszString);      <br>     WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> else <br>    PrintGetStringError(dwResult); <br> } <br>// API Called:     RasAdmimUserSetInfo <br>// Parameters: <br>//  IN WCHAR * lpszUserAccountServer <br>// IN WCHAR * lpszUserName <br>// IN RAS_USER_0 * ppRasUser0 <br>     if (LoopPriv == 0)  <br>     { <br>      ppRasUser0-&gt;bfPrivilege = (ppRasUser0-&gt;bfPrivilege | RASPRIV_DialinPrivilege); <br>      dwResult = RasAdminUserSetInfo(szUserAccountServer, pRasPort1-&gt;rasport0.wszUserName, ppRasUser0); <br>if (dwResult == ERROR_SUCCESS) <br>   { <br>   PrintPriv(); <br>   } <br>else <br>   { <br>   sprintf(szBuf,"RasAdminUserSetInfo     %d\n",dwResult); <br>   WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>   dwResult = RasAdminGetErrorString((UINT) dwResult, lpszString, 512); <br>   if (dwResult == ERROR_SUCCESS) <br>      { <br>      sprintf(szBuf, "ERROR  RasAdminUserSetInfo      %ws\n",lpszString);      <br>      WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>      } <br>   else <br>      PrintGetStringError(dwResult); <br>   } <br>     } <br>// API Called:     RasAdmimUserGetInfo <br>// Parameters: <br>//  IN WCHAR * lpszUserAccountServer <br>// IN WCHAR * lpszUserName <br>// OUT RAS_USER_0 * ppRasUser0 <br> dwResult = RasAdminUserGetInfo(szUserAccountServer, pRasPort1-&gt;rasport0.wszUserName, ppRasUser0); <br> if (dwResult != ERROR_SUCCESS) <br>     { <br>    sprintf(szBuf,"ERROR: RasAdminUserGetInfo     %d\n",dwResult); <br>    WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    dwResult = RasAdminGetErrorString((UINT) dwResult, lpszString, 512); <br>    if (dwResult == ERROR_SUCCESS) <br>       { <br>       sprintf(szBuf, "ERROR  RasAdminUserGetInfo      %ws\n",lpszString);      <br>       WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>       } <br>    else <br>      PrintGetStringError(dwResult); <br>    } <br>     } <br>  else <br>    { <br>    DbgPrint("RasAdminGetUserAccountServer     %d\n",dwResult); <br>    dwResult = RasAdminGetErrorString((UINT)dwResult, lpszString, 512); <br>     if (dwResult == ERROR_SUCCESS) <br>  { <br>  sprintf(szBuf, "ERROR  RasAdminUserAccountServer      %ws\n",lpszString);      <br>  WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>  } <br>      else <br> PrintGetStringError(dwResult); <br>    } <br> <br> <br>} <br> <br>//To print port information, statistics and rasparams on debugger. <br> <br>VOID Debug_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>) <br>{ <br>TCHAR *Media_Name[] = {TEXT("MEDIA_UNKNOWN"),TEXT( "MEDIA_SERIAL"), <br>  TEXT("MEDIA_RAS10_SERIAL"),TEXT( "MEDIA_ISDN")}; <br>TCHAR *Flag_Name[] = {TEXT("USER_AUTHENTICATED"),TEXT( "MESSENGER_PRESENT"), <br> TEXT("PPP_CLIENT"),TEXT("GATEWAY_ACTIVE"),TEXT("REMOTE_LISTEN"),TEXT("PORT_MULTILINKED")}; <br>TCHAR *Line_Condition[]={TEXT("RAS_PORT_NON_OPERATIONAL"),TEXT("RAS_PORT_DISCONNECTED"), <br>  TEXT("RAS_PORT_CALLING_BACK"),TEXT("RAS_PORT_LISTENING"),TEXT("RAS_PORT_AUTHENTICATING"), <br>  TEXT("RAS_PORT_AUTHENTICATED"),TEXT("RAS_PORT_INITIALIZING")}; <br>TCHAR *Hdw_Error[]={TEXT("RAS_MODEM_OPERATIONAL"),TEXT("RAS_MODEM_NOT_RESPONDING"),TEXT("RAS_MODEM_HARDWARE_FAILURE"), <br>  TEXT("RAS_MODEM_INCORRECT_RESPONSE"),TEXT("RAS_MODEM_UNKNOWN")}; <br>INT  i=0; <br>INT temp = 0; <br>INT temp1 =0; <br>DWORD dwsize=0; <br>CHAR szBuf[100]; <br>DWORD dwBytesWritten=0; <br> <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszPortName=%ws\n", <br>pRasPort1-&gt;rasport0.wszPortName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszDeviceType=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceType ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszDeviceName=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszMediaName=%ws\n", <br>pRasPort1-&gt;rasport0.wszMediaName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.reserved=%d\n", <br>    pRasPort1-&gt;rasport0.reserved ); <br>    DbgPrint("                 %s\n",Media_Name[pRasPort1-&gt;rasport0.reserved]); <br>    DbgPrint( "pRasPort1-&gt;rasport0.Flags=%d\n", <br>pRasPort1-&gt;rasport0.Flags ); <br>//printing Flags <br>    temp1 = 1; <br>    for (i=0; i &lt;= Number_Of_Flags; i++) <br> { <br> temp = (pRasPort1-&gt;rasport0.Flags &amp; temp1); <br> if (temp) <br>     { <br>       DbgPrint("Flag       %s   \n",Flag_Name[i]); <br>     } <br>  temp1 = temp1*2; <br> } <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszUserName=%ws\n", <br>pRasPort1-&gt;rasport0.wszUserName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszComputer=%ws\n", <br>pRasPort1-&gt;rasport0.wszComputer ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.dwStartSessionTime;=%d\n", <br>    pRasPort1-&gt;rasport0.dwStartSessionTime ); <br>    sprintf(szBuf,"Formatted session start time/date :  %s\n",ctime(&amp;pRasPort1-&gt;rasport0.dwStartSessionTime)); <br>    DbgPrint("%s",szBuf); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszLogonDomain=%ws\n", <br>    pRasPort1-&gt;rasport0.wszLogonDomain ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.fAdvancedServer=%d\n", <br>    pRasPort1-&gt;rasport0.fAdvancedServer ); <br>    DbgPrint( "pRasPort1-&gt;LineCondition=%d\n", pRasPort1-&gt;LineCondition ); <br>    DbgPrint("                     %s\n",Line_Condition[pRasPort1-&gt;LineCondition-1]); <br>    DbgPrint( "pRasPort1-&gt;HardwareCondition=%d\n",pRasPort1-&gt;HardwareCondition); <br>    DbgPrint("                     %s\n",Hdw_Error[pRasPort1-&gt;HardwareCondition-1]); <br>    DbgPrint( "pRasPort1-&gt;LineSpeed=%d   bits/sec\n",pRasPort1-&gt;LineSpeed); <br>    DbgPrint( "pRasPort1-&gt;NumStatistics=%d\n",pRasPort1-&gt;NumStatistics); <br>    DbgPrint( "pRasPort1-&gt;NumMediaParms=%d\n",pRasPort1-&gt;NumMediaParms); <br>    DbgPrint( "pRasPort1-&gt;SizeMediaParms=%d\n",pRasPort1-&gt;SizeMediaParms); <br>    DbgPrint( "\npRasPort1-&gt;ProjResult.nbf.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.nbf.dwError ); <br>    if (pRasPort1-&gt;ProjResult.nbf.dwError == NO_ERROR) <br>       { <br>DbgPrint( "pRasPort1-&gt;ProjResult.nbf.dwNetBiosError=%d\n", <br>    pRasPort1-&gt;ProjResult.nbf.dwNetBiosError ); <br>DbgPrint( "pRasPort1-&gt;ProjResult.nbf.szName=%s\n",  <br>    pRasPort1-&gt;ProjResult.nbf.szName ); <br>DbgPrint( "pRasPort1-&gt;ProjResult.nbf.wszWksta=%ws\n", <br>    pRasPort1-&gt;ProjResult.nbf.wszWksta ); <br>      } <br>   DbgPrint( "pRasPort1-&gt;ProjResult.ip.dwError=%d\n",  <br>pRasPort1-&gt;ProjResult.ip.dwError ); <br>   if (pRasPort1-&gt;ProjResult.ip.dwError == NO_ERROR) <br>      {  <br>DbgPrint( "pRasPort1-&gt;ProjResult.ip.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ip.wszAddress ); <br>       } <br>    DbgPrint( "pRasPort1-&gt;ProjResult.ipx.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.ipx.dwError ); <br>    if (pRasPort1-&gt;ProjResult.ipx.dwError == NO_ERROR) <br>      { <br>     DbgPrint( "pRasPort1-&gt;ProjResult.ipx.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ipx.wszAddress ); <br>      } <br>    DbgPrint( "pRasPort1-&gt;ProjResult.at.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.at.dwError ); <br>    if (pRasPort1-&gt;ProjResult.at.dwError == NO_ERROR) <br>      { <br>      DbgPrint( "pRasPort1-&gt;ProjResult.at.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.at.wszAddress ); <br>       } <br>    DbgPrint( "\ndwBytesXmited=%d\n", pRasStats-&gt;dwBytesXmited ); <br>    DbgPrint( "dwBytesRcved=%d\n", pRasStats-&gt;dwBytesRcved ); <br>    DbgPrint( "dwFramesXmited=%d\n", pRasStats-&gt;dwFramesXmited ); <br>    DbgPrint( "dwFramesRcved=%d\n", pRasStats-&gt;dwFramesRcved); <br>    DbgPrint( "dwCrcErr=%d\n", pRasStats-&gt;dwCrcErr); <br>    DbgPrint( "dwTimeoutErr=%d\n", pRasStats-&gt;dwTimeoutErr); <br>    DbgPrint( "dwAlignmentErr=%d\n", pRasStats-&gt;dwAlignmentErr); <br>    DbgPrint( "dwHardwareOverrunErr=%d\n", pRasStats-&gt;dwHardwareOverrunErr); <br>    DbgPrint( "dwFramingErr=%d\n", pRasStats-&gt;dwFramingErr); <br>    DbgPrint( "dwBufferOverrunErr=%d\n", pRasStats-&gt;dwBufferOverrunErr); <br>    DbgPrint( "dwBytesXmitedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedUncompressed); <br>    DbgPrint( "dwBytesRcvedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedUncompressed); <br>    DbgPrint( "dwBytesXmitedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedCompressed); <br>    DbgPrint( "dwBytesRcvedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedCompressed); <br>    for (i=0; i&lt;pRasPort1-&gt;NumMediaParms;i++) <br>      { <br>      DbgPrint( "pRasParams-&gt;P_Key= %s\n",pRasParams[i].P_Key); <br>      DbgPrint( "pRasParams-&gt;P_Type= %d\n",pRasParams[i].P_Type); <br>      if (pRasParams[i].P_Type == 1) <br>  { <br>  DbgPrint("pRasParams-&gt;P_Value.Length=%d\n",pRasParams[i].P_Value.String.Length); <br>  sprintf(szBuf,"                                                                \n"); <br>  strncpy(szBuf, pRasParams[i].P_Value.String.Data, pRasParams[i].P_Value.String.Length); <br>  DbgPrint("pRasParams-&gt;P_Value.Data= %s\n",szBuf); <br>  } <br>      if (pRasParams[i].P_Type == 0) <br> { <br> DbgPrint("pRasParams-&gt;P_Value.Number=%d\n", pRasParams[i].P_Value.Number); <br> } <br>      DbgPrint( "pRasParams-&gt;P_Attributes= %d\n",pRasParams[i].P_Attributes); <br>      } <br>} <br> <br> <br>//Function to print Port Info, statistics and rasparam to a file <br>VOID File_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>) <br>{ <br>char *Media_Name[] = {"MEDIA_UNKNOWN", "MEDIA_SERIAL", <br>  "MEDIA_RAS10_SERIAL", "MEDIA_ISDN"}; <br>char *Flag_Name[] = {"USER_AUTHENTICATED", "MESSENGER_PRESENT", <br> "PPP_CLIENT","GATEWAY_ACTIVE","REMOTE_LISTEN","PORT_MULTILINKED"}; <br>char *Line_Condition[]={"RAS_PORT_NON_OPERATIONAL","RAS_PORT_DISCONNECTED", <br>  "RAS_PORT_CALLING_BACK","RAS_PORT_LISTENING","RAS_PORT_AUTHENTICATING", <br>  "RAS_PORT_AUTHENTICATED","RAS_PORT_INITIALIZING"}; <br>char *Hdw_Error[]={"RAS_MODEM_OPERATIONAL","RAS_MODEM_NOT_RESPONDING","RAS_MODEM_HARDWARE_FAILURE", <br>  "RAS_MODEM_INCORRECT_RESPONSE","RAS_MODEM_UNKNOWN"}; <br>INT  i=0; <br>INT temp = 0; <br>INT temp1 =0; <br>DWORD dwsize=0; <br>CHAR szBuf[50]; <br>CHAR buf[120]; <br>DWORD dwBytesWritten=0; <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszPortName=%ws\n", <br>pRasPort1-&gt;rasport0.wszPortName ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;rasport0.wszDeviceType=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceType ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;rasport0.wszDeviceName=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceName ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszMediaName=%ws\n", <br>pRasPort1-&gt;rasport0.wszMediaName ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;rasport0.reserved=%d\n", <br>    pRasPort1-&gt;rasport0.reserved ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"                 %s\n",Media_Name[pRasPort1-&gt;rasport0.reserved]); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.Flags=%d\n", <br>pRasPort1-&gt;rasport0.Flags ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>//printing Flags <br>    temp1 = 1; <br>    for (i=0; i &lt;= Number_Of_Flags; i++) <br> { <br> temp = (pRasPort1-&gt;rasport0.Flags &amp; temp1); <br> if (temp) <br>     { <br>       sprintf(buf,"Flag       %s   \n",Flag_Name[i]); <br>     WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>     } <br>  temp1 = temp1*2; <br> } <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszUserName=%ws\n", <br>pRasPort1-&gt;rasport0.wszUserName ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszComputer=%ws\n", <br>pRasPort1-&gt;rasport0.wszComputer ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.dwStartSessionTime;=%d\n", <br>    pRasPort1-&gt;rasport0.dwStartSessionTime ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"Formatted session start time/date :  %s\n",ctime(&amp;pRasPort1-&gt;rasport0.dwStartSessionTime)); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszLogonDomain=%ws\n", <br>    pRasPort1-&gt;rasport0.wszLogonDomain ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.fAdvancedServer=%d\n", <br>    pRasPort1-&gt;rasport0.fAdvancedServer ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;LineCondition=%d\n", pRasPort1-&gt;LineCondition ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"                     %s\n",Line_Condition[pRasPort1-&gt;LineCondition-1]); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;HardwareCondition=%d\n",pRasPort1-&gt;HardwareCondition); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"                     %s\n",Hdw_Error[pRasPort1-&gt;HardwareCondition-1]); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;LineSpeed=%d   bits/sec\n",pRasPort1-&gt;LineSpeed); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;NumStatistics=%d\n",pRasPort1-&gt;NumStatistics); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;NumMediaParms=%d\n",pRasPort1-&gt;NumMediaParms); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;SizeMediaParms=%d\n",pRasPort1-&gt;SizeMediaParms); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "\npRasPort1-&gt;ProjResult.nbf.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.nbf.dwError ); <br>    if (pRasPort1-&gt;ProjResult.nbf.dwError == NO_ERROR) <br>       { <br>sprintf(buf, "pRasPort1-&gt;ProjResult.nbf.dwNetBiosError=%d\n", <br>    pRasPort1-&gt;ProjResult.nbf.dwNetBiosError ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>sprintf(buf, "pRasPort1-&gt;ProjResult.nbf.szName=%s\n",  <br>    pRasPort1-&gt;ProjResult.nbf.szName ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>sprintf(buf, "pRasPort1-&gt;ProjResult.nbf.wszWksta=%ws\n", <br>    pRasPort1-&gt;ProjResult.nbf.wszWksta ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      } <br>   sprintf(buf, "pRasPort1-&gt;ProjResult.ip.dwError=%d\n",  <br>pRasPort1-&gt;ProjResult.ip.dwError ); <br>   WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   if (pRasPort1-&gt;ProjResult.ip.dwError == NO_ERROR) <br>      {  <br>sprintf(buf, "pRasPort1-&gt;ProjResult.ip.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ip.wszAddress ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>       } <br>    sprintf(buf, "pRasPort1-&gt;ProjResult.ipx.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.ipx.dwError ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    if (pRasPort1-&gt;ProjResult.ipx.dwError == NO_ERROR) <br>      { <br>     sprintf(buf, "pRasPort1-&gt;ProjResult.ipx.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ipx.wszAddress ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      } <br>    sprintf(buf, "pRasPort1-&gt;ProjResult.at.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.at.dwError ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    if (pRasPort1-&gt;ProjResult.at.dwError == NO_ERROR) <br>      { <br>      sprintf(buf, "pRasPort1-&gt;ProjResult.at.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.at.wszAddress ); <br>       } <br>    sprintf(buf, "\ndwBytesXmited=%d\n", pRasStats-&gt;dwBytesXmited ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesRcved=%d\n", pRasStats-&gt;dwBytesRcved ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwFramesXmited=%d\n", pRasStats-&gt;dwFramesXmited ); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwFramesRcved=%d\n", pRasStats-&gt;dwFramesRcved); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwCrcErr=%d\n", pRasStats-&gt;dwCrcErr); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwTimeoutErr=%d\n", pRasStats-&gt;dwTimeoutErr); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwAlignmentErr=%d\n", pRasStats-&gt;dwAlignmentErr); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwHardwareOverrunErr=%d\n", pRasStats-&gt;dwHardwareOverrunErr); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwFramingErr=%d\n", pRasStats-&gt;dwFramingErr); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBufferOverrunErr=%d\n", pRasStats-&gt;dwBufferOverrunErr); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesXmitedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedUncompressed); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesRcvedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedUncompressed); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesXmitedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedCompressed); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesRcvedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedCompressed); <br>    WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    for (i=0; i&lt;pRasPort1-&gt;NumMediaParms;i++) <br>      { <br>      sprintf(buf, "pRasParams-&gt;P_Key= %s\n",pRasParams[i].P_Key); <br>      WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      sprintf(buf, "pRasParams-&gt;P_Type= %d\n",pRasParams[i].P_Type); <br>      WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      if (pRasParams[i].P_Type == 1) <br>  { <br>  sprintf(buf,"pRasParams-&gt;P_Value.Length=%d\n",pRasParams[i].P_Value.String.Length); <br>WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(szBuf,"                                                                \n"); <br>  strncpy(szBuf, pRasParams[i].P_Value.String.Data, pRasParams[i].P_Value.String.Length); <br>  sprintf(buf,"pRasParams-&gt;P_Value.Data= %s\n",szBuf); </code></pre>
<p>
</p>
<pre><code>WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>      if (pRasParams[i].P_Type == 0) <br> { <br> sprintf(buf,"pRasParams-&gt;P_Value.Number=%d\n", pRasParams[i].P_Value.Number); <br>      WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> } <br>      sprintf(buf, "pRasParams-&gt;P_Attributes= %d\n",pRasParams[i].P_Attributes); <br>      WriteFile(LogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      } <br>} <br> <br>//Function to  clear port statistics. <br> <br>VOID PrintClearStats(WCHAR * RasSrv, WCHAR *wszPortName) <br>{ <br>RAS_PORT_1             RasPort1; <br>RAS_PORT_STATISTICS    RasStats; <br>RAS_PORT_STATISTICS    NewRasStats; <br>RAS_PARAMETERS *        pRasParams=NULL; <br>DWORD dwBytesWritten=0; <br>CHAR szBuf[120]; <br>CHAR buf[120]; <br>WCHAR Buf[512]; <br>WCHAR *lpszString; <br>lpszString=&amp;Buf[0]; <br> <br>// API Called:     RasAdmimPortGetInfo <br>// Parameters: <br>//  IN WCHAR * lpszUserAccountServer <br>// IN WCHAR * lpszPortName <br>// OUT RAS_PORT_1 * pRasPort1 <br>// OUT RAS_PORT_STATISTICS * pRasPortStatistics <br>// OUT RAS_PARAMETERS ** ppRasParams <br> <br>// ppRasParams should be freed by calling RasAdminFreeBuffer <br> <br>Status = RasAdminPortGetInfo ( RasSrv, wszPortName, &amp;RasPort1, &amp;RasStats, &amp;pRasParams);  <br>     if (Status != ERROR_SUCCESS)        <br>  { <br>  sprintf(szBuf, "ERROR RasAdminGetInfo   %d\n",Status); <br>  WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>  dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br> if (dwResult == ERROR_SUCCESS) <br>     { <br>     DbgPrint("ERROR  RasAdminPortGetInfo      %ws\n",lpszString); <br>     sprintf(szBuf, "ERROR  RasAdminPortGetInfo      %ws\n",lpszString);      <br>     WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>     } <br> else <br>     PrintGetStringError(dwResult); <br>} <br>     else <br>{ <br> <br>// API Called:     RasAdmimPortClearStatistics <br>// Parameters: <br>//  IN WCHAR * lpszServerName <br>// IN WCHAR * lpszPortName <br> <br>Status = RasAdminPortClearStatistics(RasSrv, wszPortName); <br>if (Status != ERROR_SUCCESS)     <br>  { <br>  sprintf(szBuf, "ERROR RasAdminPortClearStatistics   %d\n",Status); <br>  WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>  dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br> if (dwResult == ERROR_SUCCESS) <br>     { <br>     DbgPrint("ERROR  RasAdminPortClearStatistics      %ws\n",lpszString); <br>     sprintf(szBuf, "ERROR  RasAdminPortClearStatistics      %ws\n",lpszString);      <br>     WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>     } <br> else <br>     PrintGetStringError(dwResult); <br>  } <br>       else <br>  { <br>  if (pRasParams != NULL) <br>RasAdminFreeBuffer(pRasParams); <br> <br>  Status = RasAdminPortGetInfo ( RasSrv, wszPortName, &amp;RasPort1, &amp;NewRasStats,&amp;pRasParams);  <br>  sprintf(buf,"Port name is   %ws\n",wszPortName); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "\ndwBytesXmited=%d                    new= %d\n", RasStats.dwBytesXmited,NewRasStats.dwBytesXmited ); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwBytesRcved=%d                       new= %d\n", RasStats.dwBytesRcved,NewRasStats.dwBytesRcved ); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwFramesXmited=%d                   new= %d\n", RasStats.dwFramesXmited, NewRasStats.dwFramesXmited ); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwFramesRcved=%d                    new= %d\n", RasStats.dwFramesRcved, NewRasStats.dwFramesRcved); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwCrcErr=%d                              new= %d\n", RasStats.dwCrcErr, NewRasStats.dwCrcErr); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwTimeoutErr=%d                       new= %d\n", RasStats.dwTimeoutErr, NewRasStats.dwTimeoutErr); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwAlignmentErr=%d                  new= %d\n", RasStats.dwAlignmentErr, NewRasStats.dwAlignmentErr); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwHardwareOverrunErr=%d        new= %d\n", RasStats.dwHardwareOverrunErr, NewRasStats.dwHardwareOverrunErr); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwFramingErr=%d                     new= %d\n", RasStats.dwFramingErr, NewRasStats.dwFramingErr); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwBufferOverrunErr=%d             new= %d\n", RasStats.dwBufferOverrunErr, NewRasStats.dwBufferOverrunErr); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwBytesXmitedUncompressed=%d   new= %d\n",  <br>    RasStats.dwBytesXmitedUncompressed, NewRasStats.dwBytesXmitedUncompressed); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwBytesRcvedUncompressed=%d   new= %d\n",  <br>    RasStats.dwBytesRcvedUncompressed, NewRasStats.dwBytesRcvedUncompressed); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwBytesXmitedCompressed=%d     new= %d\n",  <br>    RasStats.dwBytesXmitedCompressed, NewRasStats.dwBytesXmitedCompressed); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(buf, "dwBytesRcvedCompressed=%d      new= %d\n",  <br>    RasStats.dwBytesRcvedCompressed, NewRasStats.dwBytesRcvedCompressed); <br>  printf("%s",buf); <br>  WriteFile(cLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>} <br>     if (pRasParams != NULL) <br>RasAdminFreeBuffer(pRasParams); <br>   } <br>} <br> <br>//Function to reset Port statistic <br> <br>DWORD WINAPI RasAdminClearDisc(LPVOID param) <br>{ <br>CHAR option= ' '; <br>WORD i=0; <br>DWORD Status=0; <br>WORD Entries=0; <br>DWORD PortOption = 0; <br>RAS_PORT_0 *            pRasPort0=NULL; <br>DWORD dwBytesWritten=0; <br>CHAR szBuf[120]; <br>WCHAR Buf[512]; <br>WCHAR *lpszString; <br>INT k=0; <br>lpszString=&amp;Buf[0]; <br>while (!Quit) <br>  { <br>    Status = RasAdminPortEnum( RasSrv, &amp;pRasPort0, &amp;Entries); <br>    if (Status != ERROR_SUCCESS) <br>{ <br>sprintf(szBuf, "ERROR RasAdminPortEnum   %d\n",Status); <br>dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>    sprintf(szBuf,"ERROR  RasAdminPortEnum      %ws\n",lpszString); <br>    WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    sprintf(szBuf, "ERROR  RasAdminPortEnum      %ws\n",lpszString);      <br>    WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> else <br>    PrintGetStringError(dwResult); <br>} <br>    else <br>{ <br>// Print the configured ports on the screen and ask user to choose the port to reset the statistic or disconnect. <br>// Right now, it lists all the ports  and lets the user pick up the port. A good idea is to let user only delete <br>// connected ports. <br>printf("Select to C - Clear Statistic, D - Disconnect Port Q - Quit\n"); <br>do <br>     {option=_getch(); <br>       option =toupper(option); <br>      printf("%c\n",option);}   while (((option) != 'C') &amp;&amp; ((option) != 'D') &amp;&amp; ((option) != 'Q')); <br>if (option == 'Q') <br>   { <br>  Quit = TRUE; <br>     }               <br>if (option == 'C') <br>   { <br>// Print all the ports and then let user  choose the port to clear statistics <br> i = 0;          <br> while (i &lt; Entries) <br>      { <br>      while ((i &lt; Entries) &amp;&amp; (k &lt;=5)) <br>  { <br>//Better to check if the port is connected here <br>  printf(" %d=%ws",i,pRasPort0[i].wszPortName); <br>  i++; <br>  k++; <br>  } <br>      printf("\n"); <br>      k=1; <br>      } <br>  printf("Enter your option 0 - %d  ",Entries-1); <br>  while ((scanf("%i",&amp;PortOption) &lt; 0) &amp;&amp; (scanf("%i",&amp;PortOption)&gt; Entries-1)) <br>       {}; <br> <br>  PrintClearStats(RasSrv, pRasPort0[PortOption].wszPortName);           <br>  } <br>if (option == 'D') <br>   { <br>// Print all the ports and then let user  choose the port to clear statistics <br> i = 0;          <br> while (i &lt; Entries) <br>      { <br>      while ((i &lt; Entries) &amp;&amp; (k &lt;=5)) <br>  { <br>//better to check if the port is connected here <br>  printf(" %d=%ws",i,pRasPort0[i].wszPortName); <br>  i++; <br>  k++; <br>  } <br>      printf("\n"); <br>      k=1; <br>      } <br>  printf("Enter your option 0 - %d ",Entries-1); <br>  while ((scanf("%i",&amp;PortOption) &lt; 0) &amp;&amp; (scanf("%i",&amp;PortOption) &gt; Entries-1)) <br>       {}; <br> <br>// API Called:     RasAdmimPortDisconnect <br>// Parameters: <br>//  IN WCHAR * lpszServerName <br>// IN WCHAR * lpszPortName <br> <br>  Status = RasAdminPortDisconnect(RasSrv, pRasPort0[PortOption].wszPortName); <br>    if (Status != ERROR_SUCCESS) <br>{ <br>sprintf(szBuf, "ERROR RasAdminPortDisconnect   %d\n",Status); <br>dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>    sprintf(szBuf,"ERROR  RasAdminPortDisconnect      %ws\n",lpszString); <br>    WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    sprintf(szBuf, "ERROR  RasAdminPortDisconnect      %ws\n",lpszString);      <br>    WriteFile(cLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> else <br>    PrintGetStringError(dwResult); <br>} <br>    else <br>{ <br>printf("Port Disconnected successfully\n"); <br>} <br>     } <br>   } <br> if (pRasPort0 != NULL) <br>     RasAdminFreeBuffer(pRasPort0); <br>  } <br>return(0); <br>} <br> <br>void _cdecl main(int argc, char **argv) <br>{ <br>INT LoopPriv=0; <br>INT Error = 0; <br>CHAR szBuf[120]; <br>DWORD dwBytesWritten=0; <br>DWORD Dialin = 1; <br>WCHAR Buf[512]; <br>WCHAR *lpszString; <br>WORD Entries; <br>WORD i=0; <br>DWORD id=0; <br>HANDLE ConnectDiscThread; <br>lpszString=&amp;Buf[0]; <br>pRasPort1 = &amp;RasPort1; <br>pRasStats = &amp;RasStats; <br>pRasServer0 = &amp;RasServer0; <br>ppRasUser0 = &amp;RasUser0; <br>if (argc &gt; 1) <br>    { <br>    mbstowcs(RasSrv, argv[1], 32) ; <br>    } <br>else <br>    { <br>    printf ("to start type Admapit \\\\RasServerName\n"); <br>    exit(0); <br>    } <br>Init1(); <br>Init2(); <br>Error=ServerGetInfo(RasSrv); <br>if (Error) <br>    { <br>    printf ("Ras Server is not started on the system"); <br>    exit(0); <br>    } <br>    ConnectDiscThread = CreateThread (NULL, <br> 0, <br>&amp;RasAdminClearDisc, <br>       (LPVOID) id, <br> 0, <br>       &amp;id); <br> <br>while (!Quit) <br>  { <br>// API Called:     RasAdmimPortEnum <br>// Parameters: <br>//  IN WCHAR * lpszServerName <br>// OUT PRAS_PORT_0 *  ppRasPort0 <br>// OUT WORD *  pcEntriesRead <br> <br>// Free up ppRasPort0 by calling RasAdminFreeBuffer API <br> <br>    Status = RasAdminPortEnum( RasSrv, &amp;pRasPort0, &amp;Entries); <br>    if (Status != ERROR_SUCCESS) <br>{ <br>sprintf(szBuf, "ERROR RasAdminPortEnum   %d\n",Status); <br>      WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>    sprintf(szBuf,"ERROR  RasAdminPortEnum      %ws\n",lpszString); <br>    WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    sprintf(szBuf, "ERROR  RasAdminPortEnum      %ws\n",lpszString);      <br>    WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> else <br>    PrintGetStringError(dwResult); <br>} <br>    else <br>{ <br>//A good idea is to check for port Authentication before making this call <br>for (i=0; i&lt;Entries; i++) <br>     { <br>// API Called:     RasAdmimPortGetInfo <br>// Parameters: <br>//  IN WCHAR * lpszUserAccountServer <br>// IN WCHAR * lpszPortName <br>// OUT RAS_PORT_1 * pRasPort1 <br>// OUT RAS_PORT_STATISTICS * pRasPortStatistics <br>// OUT RAS_PARAMETERS ** ppRasParams <br> <br>// ppRasParams should be freed by calling RasAdminFreeBuffer <br> <br>     Status = RasAdminPortGetInfo ( RasSrv, pRasPort0[i].wszPortName, pRasPort1, pRasStats, &amp;pRasParams);  <br>     if (Status != ERROR_SUCCESS)        <br>{ <br> sprintf(szBuf, "ERROR RasAdminGetInfo   %d\n",Status); <br> WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br> dwResult = RasAdminGetErrorString((UINT) Status, lpszString, 512); <br> if (dwResult == ERROR_SUCCESS) <br>     { <br>     DbgPrint("ERROR  RasAdminPortGetInfo      %ws\n",lpszString); <br>     sprintf(szBuf, "ERROR  RasAdminPortGetInfo      %ws\n",lpszString);      <br>     WriteFile(LogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>     } <br> else <br>    PrintGetStringError(dwResult); <br>} <br>     else <br>{ <br> File_Print(pRasPort1, pRasStats, pRasParams); <br>     Debug_Print(pRasPort1, pRasStats, pRasParams); <br>} <br>//Call user privilege API only if the user is connected, or you provide the user name. If you pass NULL for all the paramters to user priv API's then the API <br>// will hit an Assert <br>   if ( pRasPort1-&gt;LineCondition == RAS_PORT_AUTHENTICATED) <br>     UserPrivilege(); <br>     if (pRasParams != NULL) { <br>    RasAdminFreeBuffer(pRasParams); <br>    } <br>     }//End Loop <br>}  <br>     CloseHandle(LogFile); <br>     if (pRasPort0 != NULL) <br>RasAdminFreeBuffer(pRasPort0); <br>     Sleep(sleeptime); <br>     Init1(); <br>     ServerGetInfo(RasSrv); <br>  }  <br> <br>  WaitForSingleObject(ConnectDiscThread,INFINITE); <br>CloseHandle(LogFile); <br>CloseHandle(cLogFile); <br>CloseHandle(ErrLogFile); <br> <br>   <br> <br>} // Main End <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

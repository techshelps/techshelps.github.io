<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADMINDLL.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4850"></a>ADMINDLL.C</h2>
<pre><code>/****************************************************************************** <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       RasAdmin API usage and  is meant to help user with <br>*       RasAdmin API Calling convention. Use this code at your own risk.  <br>*       Microsoft disclaims any implied warranty. This sample code can <br>*       be copied and distributed. <br>  <br>******************************************************************************/ <br> <br>/******************************************************************** <br>*  admindll.c -- Sample program demonstrating the use of RasAdmin <br>*                     CallOut API's <br>*                                                                     <br>*****************************************************************************/ <br>/*************************************************************************** <br>*  Functions: <br>*        Init(void); <br>*        Init2(void); <br>*****************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;lm.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;rassapi.h&gt; <br>#include &lt;memory.h&gt; <br>WCHAR* <br>StrDupWFromA( <br>    CHAR* psz ); <br> <br> <br> <br>#define Number_Of_Flags 6 <br>#define Num_Ip_Address 256 <br>#define ConstIpAddress 0x010A0F0E <br>HANDLE IPFile = NULL; <br>HANDLE ConDisFile = NULL; <br>HANDLE ErrLogFile = NULL; <br>HANDLE ErrLogFileIP = NULL; <br>BOOL IPFileInValid = FALSE; <br>BOOL ConnectDisconnectInValid = FALSE; <br>BOOL ErrorLogInValid = FALSE; <br>BOOL ErrLogIPInValid = FALSE; <br>VOID File_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>); <br>VOID Debug_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>); <br>VOID Init(void); <br>VOID Init2(void); <br>typedef struct Static_IP_Database <br>{ <br>WCHAR wszUserName[UNLEN+1]; <br>WCHAR wszPortName[RASSAPI_MAX_PORT_NAME]; <br>DWORD IpAddress; <br>} Static_IP_Database; <br>Static_IP_Database  Static_IP[Num_Ip_Address]; <br> <br>typedef struct Static_Statistic{ <br>      BOOL bTaken; <br>WCHAR wszUserName[UNLEN+1]; <br>WCHAR wszPortName[RASSAPI_MAX_PORT_NAME]; <br>DWORD NumMediaParms; <br>DWORD SizeMediaParms; <br>DWORD dwStartSessionTime; <br>RAS_PORT_STATISTICS  pRasStats; <br>      RAS_PARAMETERS        pRasParams; <br>} Static_Statistic; <br> <br>Static_Statistic  Static_Check_Stats[Num_Ip_Address]; <br>BOOL First_Call = TRUE; <br> <br>WCHAR* <br>StrDupWFromA( <br>    CHAR* psz ) <br> <br>    /* Returns heap block containing a copy of 0-terminated string 'psz' or <br>    ** NULL on error or if 'psz' is NULL.  The output string is converted to <br>    ** UNICODE.  It is caller's responsibility to Free the returned string. <br>    */ <br>{ <br>    WCHAR* pszNew = NULL; <br> <br>    if (psz) <br>    { <br>DWORD cb; <br> <br>cb = MultiByteToWideChar( CP_ACP, 0, psz, -1, NULL, 0 ); <br> <br>pszNew = malloc( cb * sizeof(TCHAR) ); <br>if (!pszNew) <br>{ <br>    return NULL; <br>} <br> <br>cb = MultiByteToWideChar( CP_ACP, 0, psz, -1, pszNew, cb ); <br>if (cb == 0) <br>{ <br>    free( pszNew ); <br>    return NULL; <br>} <br>    } <br> <br>    return pszNew; <br>} <br> <br> <br> <br> <br>// Format and write debug information to OutputDebugString <br>ULONG <br>_cdecl <br>DbgPrint( <br>    PCH Format, <br>    ... <br>    ) <br>{    <br>    CHAR szbuffer[255]; <br>    WCHAR buffer[255]; <br>    WCHAR *temp=NULL; <br>    LPINT lpResult=0; <br>    va_list marker; <br>    va_start (marker,Format); <br>    if (IsTextUnicode(Format, sizeof(marker),lpResult)) <br>{ <br>temp=StrDupWFromA(Format); <br>     wvsprintfW (buffer,temp, marker); <br>     OutputDebugString (buffer); <br>      free(temp); <br>} <br>    else <br>{ <br>     wvsprintfA (szbuffer,Format, marker); <br>     temp=StrDupWFromA(szbuffer); <br>     OutputDebugString (temp); <br>     free(temp); <br>     } <br>    return TRUE; <br>} <br> <br> <br> <br> <br> <br> <br> <br>//Called from RasAdminGetIpAddressForUser which in trun gets called by RasMan <br>VOID Init(void) <br>{ <br>INT i=0; <br>   <br>     IPFile = CreateFile(TEXT("IpAddress.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>CREATE_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (IPFile== INVALID_HANDLE_VALUE) { <br>IPFileInValid = TRUE; <br>    } <br>     ErrLogFileIP = CreateFile(TEXT("IpAddError.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>CREATE_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (ErrLogFileIP== INVALID_HANDLE_VALUE) { <br>ErrLogIPInValid = TRUE; <br>    } <br>     <br>//First call initialize my Stats Database, I Fill out the struct if Call is Accepted the call. <br>    First_Call=FALSE; <br>} <br>//Called by RasAdminAcceptNewConnection which in trun gets called by RAS Server (Rassrv) <br>VOID Init2(void) <br>{ <br>INT i=0; <br>     ConDisFile = CreateFile(TEXT("ConDis.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>OPEN_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (ConDisFile== INVALID_HANDLE_VALUE) { <br>  ConnectDisconnectInValid = TRUE;         <br>    } <br>     ErrLogFile = CreateFile(TEXT("AdminErr.log"), <br>GENERIC_READ|GENERIC_WRITE, <br>FILE_SHARE_READ, <br>(LPSECURITY_ATTRIBUTES) NULL, <br>OPEN_ALWAYS, <br>0, <br>       (HANDLE) NULL); <br>     if (ErrLogFile == INVALID_HANDLE_VALUE) { <br>ErrorLogInValid = TRUE; <br>    } <br>    for (i=0;i &lt; Num_Ip_Address; i++); <br>  Static_Check_Stats[i].bTaken=FALSE; <br>} <br> <br> <br>DWORD <br>APIENTRY <br>RasAdminGetIpAddressForUser( <br>    IN WCHAR *      lpwszUserName, <br>    IN WCHAR *      lpwszPortName, <br>    IN OUT IPADDR * pIpAddress, <br>    OUT BOOL *      pfNotifyDLL <br>) <br>{ <br>DWORD i=0; <br>DWORD dwBytesWritten=0; <br>CHAR buf[120]; <br>//to check if the call is first rasman call out. If yes, call Initialize routine <br>    if (First_Call) Init(); <br>    DbgPrint("First_Call  %d\n",First_Call); <br>    DbgPrint("\nGetIpAddressForUser called UserName=%ws,Port=%ws,IpAddress=%d\n", <br>      lpwszUserName,lpwszPortName,(DWORD)*pIpAddress ); <br> <br>    for (i=1;i &lt; Num_Ip_Address;i++) <br>{ <br>if (Static_IP[i].IpAddress != 1) <br>    { <br>     Static_IP[i].IpAddress = 1; <br>     wcscpy(Static_IP[i].wszUserName, lpwszUserName); <br>     wcscpy(Static_IP[i].wszPortName, lpwszPortName); <br>     *pIpAddress = i + ConstIpAddress; <br>      break; <br>    } <br>} <br>    if (IPFileInValid) <br> { <br> DbgPrint("GetIpAddressForUser setting IpAddress=%d\n",(DWORD)*pIpAddress ); <br> } <br>    else <br>{ <br> sprintf(buf,"GetIpAddressForUser setting IpAddress=%d\n",(DWORD)*pIpAddress ); <br>       WriteFile(IPFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> <br>      }  <br>    *pfNotifyDLL = TRUE; <br>     <br>    return( NO_ERROR ); <br>} <br> <br> <br>VOID <br>APIENTRY <br>RasAdminReleaseIpAddress( <br>    IN WCHAR *      lpwszUserName, <br>    IN WCHAR *      lpwszPortName, <br>    IN OUT IPADDR * pIpAddress <br>) <br>{ <br>DWORD dwBytesWritten=0; <br>CHAR buf[120]; <br>    DbgPrint( "\nReleaseIpAddressr called UserName=%ws,Port=%ws,IpAddress=%d\n", <br>      lpwszUserName,lpwszPortName,(DWORD)*pIpAddress ); <br>     if (wcscmp(Static_IP[(DWORD)*pIpAddress-ConstIpAddress].wszUserName,lpwszUserName) == 0) <br> { <br>  if (wcscmp(Static_IP[(DWORD)*pIpAddress-ConstIpAddress].wszPortName,lpwszPortName) == 0) <br>      { <br>       Static_IP[(DWORD)*pIpAddress-ConstIpAddress].IpAddress = 0; <br>      } <br>      else <br>      { <br>       DbgPrint("ERROR ReleaseIP PortName Incorrect, Cannot free IP Address       %ws\n",Static_IP[(DWORD)*pIpAddress-ConstIpAddress].wszPortName); <br>       if (!(ErrLogIPInValid)) <br>    { <br> sprintf(buf,"ERROR ReleaseIP PortName Incorrect, Cannot free IP Address       %ws\n",Static_IP[(DWORD)*pIpAddress-ConstIpAddress].wszPortName); <br>    WriteFile(ErrLogFileIP, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    } <br>      } <br> } <br> else <br> { <br> DbgPrint("ERROR ReleaseIP UserName Incorrect, Cannot free IP Address       %ws\n",Static_IP[(DWORD)*pIpAddress-ConstIpAddress].wszUserName); <br> if (!(ErrLogIPInValid)) <br>   { <br>     sprintf(buf,"ERROR ReleaseIP UserName Incorrect, Cannot free IP Address       %ws\n",Static_IP[(DWORD)*pIpAddress-ConstIpAddress].wszUserName); <br>   WriteFile(ErrLogFileIP, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   } <br> }  <br>} <br> <br> <br>BOOL <br>APIENTRY <br>RasAdminAcceptNewConnection( <br>    RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>) <br>{ <br>INT i=0; <br>DWORD dwResult; <br>WCHAR szUserAccountServer[UNLEN+1]; <br>PRAS_USER_0 ppRasUser0; <br>RAS_USER_0 RasUser0; <br>WCHAR Buf[512]; <br>WCHAR *lpszString; <br>DWORD dwBytesWritten=0; <br>CHAR szBuf[120]; <br>WCHAR lpszServerName[50]; <br>DWORD Permission; <br>lpszString = &amp;Buf[0]; <br>ppRasUser0 = &amp;RasUser0; <br> <br>//to check if the call is first rassrv call out. If yes, call Initialize routine <br> <br>if (First_Call) {Init2(); First_Call = FALSE;} <br>DbgPrint("ConnectDisconnect   %d\n",ConDisFile); <br>DbgPrint("ConnectDisconnectInValid %d\n",ConnectDisconnectInValid); <br>DbgPrint("ErrorLogFile   %d\n",ErrLogFile); <br>DbgPrint("ErrorLogInValid %d\n",ErrorLogInValid); <br>if (ConnectDisconnectInValid) <br>   { <br>    DbgPrint( "\nRasAdminAcceptNewConnection called \n" ); <br>    Debug_Print( pRasPort1, pRasStats, pRasParams); <br>  } <br>else <br>  { <br>    sprintf(szBuf, "\nRasAdminAcceptNewConnection called \n" ); <br>    WriteFile(ConDisFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    File_Print( pRasPort1, pRasStats, pRasParams); <br>  } <br>   if (pRasPort1-&gt;rasport0.fAdvancedServer &gt; 0){ <br>  dwResult = RasAdminGetUserAccountServer(pRasPort1-&gt;rasport0.wszLogonDomain, NULL, &amp;szUserAccountServer[0]);} <br>  else {   <br>      lstrcpy(lpszServerName, TEXT("\\\\")); <br>      lstrcat(&amp;lpszServerName[0], pRasPort1-&gt;rasport0.wszLogonDomain); <br>      DbgPrint("%ws\n",lpszServerName); <br>      dwResult = RasAdminGetUserAccountServer(NULL, &amp;lpszServerName[0], &amp;szUserAccountServer[0]); <br>      } <br> <br>  if (dwResult == ERROR_SUCCESS) <br>     { <br>     DbgPrint("UserAccount Succeeded\n"); <br>     dwResult = RasAdminUserGetInfo(szUserAccountServer, pRasPort1-&gt;rasport0.wszUserName, ppRasUser0); <br>     if (dwResult == ERROR_SUCCESS) <br> { <br>       DbgPrint("AdminUserGetInfo Succeeded"); <br>       DbgPrint(" Priviledge   %d\n",ppRasUser0-&gt;bfPrivilege); <br>       Permission = ppRasUser0-&gt;bfPrivilege - (ppRasUser0-&gt;bfPrivilege &amp; RASPRIV_DialinPrivilege); <br>       DbgPrint("Permission %d\n",Permission); <br> if (Permission == RASPRIV_AdminSetCallback || Permission == RASPRIV_CallerSetCallback) <br>    { <br>    DbgPrint ("Don't Accept Call\n"); <br>    return (FALSE); <br>    } <br> } <br>     else <br>{ <br>      DbgPrint("RasAdminUserGetInfo     %d\n",dwResult); <br>dwResult = RasAdminGetErrorString((UINT) dwResult, lpszString, 512); <br>if (dwResult == ERROR_SUCCESS) <br>    { <br>    DbgPrint("ERROR  RasAdminUserGetInfo      %s\n",lpszString); <br>     sprintf(szBuf, "ERROR  RasAdminUserGetInfo      %s\n",lpszString);      <br>  WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> else <br>    { <br>    DbgPrint("ERROR  RasAdminGetErrorString      %d\n",dwResult); <br>    sprintf(szBuf, "ERROR  RasAdminGetErrorString      %d\n",dwResult);      <br>  WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br> } <br>    } <br>  else <br>    { <br>    DbgPrint("RasAdminGetUserAccountServer     %d\n",dwResult); <br>    dwResult = RasAdminGetErrorString((UINT)dwResult, lpszString, 512); <br>     if (dwResult == ERROR_SUCCESS) <br>  { <br>  DbgPrint("ERROR  RasAdminUserAccountServer      %s\n",lpszString); <br>  sprintf(szBuf, "ERROR  RasAdminUserAccountServer      %s\n",lpszString);      <br>WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>  } <br>  else <br>    { <br>    DbgPrint("ERROR  RasAdminGetErrorString      %d\n",dwResult); <br>    sprintf(szBuf, "ERROR  RasAdminGetErrorString      %d\n",dwResult);      <br>  WriteFile(ErrLogFile, (LPSTR)szBuf, strlen(szBuf), &amp;dwBytesWritten, NULL); <br>    } <br>    } <br> <br>  if (( lstrcmp( pRasPort1-&gt;rasport0.wszUserName, TEXT("Administrator") ) ) == 0) <br>       { <br>DbgPrint("Do not Accept Connection\n"); <br>      FlushFileBuffers(ErrLogFile); <br>      FlushFileBuffers(ConDisFile); <br>return( FALSE ); <br>       } <br>    else <br>       { <br>  for (i=0;i &lt; Num_Ip_Address; i++) <br>     if (!(Static_Check_Stats[i].bTaken)) <br>  { <br>   wcscpy(Static_Check_Stats[i].wszUserName, pRasPort1-&gt;rasport0.wszUserName); <br>   wcscpy(Static_Check_Stats[i].wszPortName, pRasPort1-&gt;rasport0.wszPortName); <br>       Static_Check_Stats[i].bTaken = TRUE; <br>   Static_Check_Stats[i].NumMediaParms = pRasPort1-&gt;NumMediaParms; <br>   Static_Check_Stats[i].SizeMediaParms = pRasPort1-&gt;SizeMediaParms; <br>   Static_Check_Stats[i].dwStartSessionTime = pRasPort1-&gt;rasport0.dwStartSessionTime; <br>   memcpy(&amp;Static_Check_Stats[i].pRasStats,pRasStats, sizeof(RAS_PORT_STATISTICS)); <br>   memcpy(&amp;Static_Check_Stats[i].pRasParams,pRasParams, sizeof(pRasParams)); <br>   break; <br>  } <br>       DbgPrint("Accept Connection\n"); <br>       FlushFileBuffers(ErrLogFile); <br>       FlushFileBuffers(ConDisFile); <br>       return( TRUE ); <br>       } <br>} <br> <br>VOID <br>APIENTRY <br>RasAdminConnectionHangupNotification( <br>    RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>) <br>{ <br>INT i=0; <br>DWORD dwBytesWritten=0; <br>CHAR buf[120]; <br>//if (First_Call) Init2(); <br>if (ConnectDisconnectInValid) <br>   { <br>    DbgPrint( "\nRasAdminConnectionHangupNotification called \n" ); <br>    Debug_Print( pRasPort1, pRasStats, pRasParams); <br>  } <br>else <br>  { <br>    sprintf(buf, "\nRasAdminConnectionHangupNotification called \n" ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    File_Print( pRasPort1, pRasStats, pRasParams); <br>  } <br> <br> <br>//Sanity checks <br>      for (i=0; i &lt; Num_Ip_Address; i++) <br>       { <br>if (Static_Check_Stats[i].bTaken) <br>     { <br>      if (wcscmp(Static_Check_Stats[i].wszPortName,pRasPort1-&gt;rasport0.wszPortName) == 0) <br>  { <br>if (ErrorLogInValid) <br>   {        <br>   if (wcscmp(Static_Check_Stats[i].wszUserName,pRasPort1-&gt;rasport0.wszUserName) != 0) <br>DbgPrint("ERROR User Name Differs    %ws -&gt;Passed,   %ws -&gt;Stored\n",pRasPort1-&gt;rasport0.wszUserName,Static_Check_Stats[i].wszUserName); <br>       Static_Check_Stats[i].bTaken = FALSE; <br>   if (Static_Check_Stats[i].NumMediaParms != pRasPort1-&gt;NumMediaParms) <br> DbgPrint("ERROR NumMediaParm    %d -&gt;Passed,   %d  -&gt;Stored\n",Static_Check_Stats[i].NumMediaParms != pRasPort1-&gt;NumMediaParms); <br>   if (Static_Check_Stats[i].SizeMediaParms != pRasPort1-&gt;SizeMediaParms) <br> DbgPrint("ERROR SizeMediaParm    %d -&gt;Passed,   %d  -&gt;Stored\n",Static_Check_Stats[i].SizeMediaParms != pRasPort1-&gt;SizeMediaParms); <br>   if (Static_Check_Stats[i].dwStartSessionTime != pRasPort1-&gt;rasport0.dwStartSessionTime) <br> DbgPrint("ERROR StartSessionTime    %d -&gt;Passed,   %d  -&gt;Stored\n",Static_Check_Stats[i].dwStartSessionTime, pRasPort1-&gt;rasport0.dwStartSessionTime); <br>   if (pRasStats-&gt;dwBytesXmited &lt; Static_Check_Stats[i].pRasStats.dwBytesXmited)  <br>  DbgPrint( "ERROR dwBytesXmited Passed=%d   , dwBytesXmited Stored=%d\n", pRasStats-&gt;dwBytesXmited,Static_Check_Stats[i].pRasStats.dwBytesXmited); <br>   if (pRasStats-&gt;dwBytesRcved &lt; Static_Check_Stats[i].pRasStats.dwBytesRcved)  <br>  DbgPrint( "ERROR dwBytesRcved Passed=%d    , dwBytesRcved Stored=%d\n", pRasStats-&gt;dwBytesRcved,Static_Check_Stats[i].pRasStats.dwBytesRcved ); <br>   if (pRasStats-&gt;dwFramesXmited &lt; Static_Check_Stats[i].pRasStats.dwFramesXmited)  <br> DbgPrint( "ERROR dwFramesXmited Passed=%d , dwFramesXmited Stored=%d\n", pRasStats-&gt;dwFramesXmited,Static_Check_Stats[i].pRasStats.dwFramesXmited ); <br>   if (pRasStats-&gt;dwFramesRcved &lt; Static_Check_Stats[i].pRasStats.dwFramesRcved)  <br> DbgPrint( "ERROR dwFramesRcved Passed=%d , dwFramesRcved Stored=%d\n", pRasStats-&gt;dwFramesRcved,Static_Check_Stats[i].pRasStats.dwFramesRcved); <br>   if (pRasStats-&gt;dwCrcErr &lt; Static_Check_Stats[i].pRasStats.dwCrcErr)  <br>DbgPrint( "ERROR dwCrcErr Passed=%d , dwCrcErr Stored=%d\n", pRasStats-&gt;dwCrcErr,Static_Check_Stats[i].pRasStats.dwCrcErr); <br>   if (pRasStats-&gt;dwTimeoutErr &lt; Static_Check_Stats[i].pRasStats.dwTimeoutErr)  <br>DbgPrint( "ERROR dwTimeoutErr Passed=%d  , dwTimeoutErr Stored=%d\n", pRasStats-&gt;dwTimeoutErr,Static_Check_Stats[i].pRasStats.dwTimeoutErr); <br>   if (pRasStats-&gt;dwAlignmentErr &lt; Static_Check_Stats[i].pRasStats.dwAlignmentErr)  <br>DbgPrint( "ERROR dwAlignmentErr Passed=%d , dwAlignmentErr Stored=%d\n", pRasStats-&gt;dwAlignmentErr,Static_Check_Stats[i].pRasStats.dwAlignmentErr); <br>   if (pRasStats-&gt;dwHardwareOverrunErr &lt; Static_Check_Stats[i].pRasStats.dwHardwareOverrunErr)  <br>DbgPrint( "ERROR dwHardwareOverrunErr Passed=%d  , dwHardwareOverrunErr Stored=%d\n", pRasStats-&gt;dwHardwareOverrunErr,Static_Check_Stats[i].pRasStats.dwHardwareOverrunErr); <br>   if (pRasStats-&gt;dwFramingErr &lt; Static_Check_Stats[i].pRasStats.dwFramingErr)  <br>       DbgPrint( "ERROR dwFramingErr Passed=%d , dwFramingErr Stored=%d\n", pRasStats-&gt;dwFramingErr,Static_Check_Stats[i].pRasStats.dwFramingErr); <br>   if (pRasStats-&gt;dwBufferOverrunErr &lt; Static_Check_Stats[i].pRasStats.dwBufferOverrunErr)  <br>       DbgPrint( "ERROR dwBufferOverrunErr Passed=%d , dwBufferOverrunErr Stored=%d\n", pRasStats-&gt;dwBufferOverrunErr,Static_Check_Stats[i].pRasStats.dwBufferOverrunErr); <br>   if (pRasStats-&gt;dwBytesXmitedUncompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesXmitedUncompressed)  <br>       DbgPrint( "ERROR dwBytesXmitedUncompressed Passed=%d   ,  dwBytesXmitedUncompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesXmitedUncompressed,Static_Check_Stats[i].pRasStats.dwBytesXmitedUncompressed); <br>   if (pRasStats-&gt;dwBytesRcvedUncompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesRcvedUncompressed)  <br>       DbgPrint( "ERROR dwBytesRcvedUncompressed  Passed=%d    ,dwBytesRcvedUncompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesRcvedUncompressed,Static_Check_Stats[i].pRasStats.dwBytesRcvedUncompressed); <br>   if (pRasStats-&gt;dwBytesXmitedCompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesXmitedCompressed)  <br>       DbgPrint( "ERROR dwBytesXmitedCompressed Passed=%d   ,dwBytesXmitedCompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesXmitedCompressed,Static_Check_Stats[i].pRasStats.dwBytesXmitedCompressed); <br>   if (pRasStats-&gt;dwBytesRcvedCompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesRcvedCompressed)  <br>      DbgPrint( "ERROR dwBytesRcvedCompressed Passed=%d    ,dwBytesRcvedCompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesRcvedCompressed,Static_Check_Stats[i].pRasStats.dwBytesRcvedCompressed); <br>      if (memcmp(&amp;Static_Check_Stats[i].pRasParams,pRasParams, sizeof(pRasParams)) != 0) <br>      DbgPrint( "ERROR RASParams Passed   &amp;  RASParasms Stored are different\n"); <br> } <br>     else <br> { <br>   if (wcscmp(Static_Check_Stats[i].wszUserName,pRasPort1-&gt;rasport0.wszUserName) != 0) <br>{sprintf(buf,"ERROR User Name Differs    %ws -&gt;Passed,   %ws -&gt;Stored\n",pRasPort1-&gt;rasport0.wszUserName,Static_Check_Stats[i].wszUserName); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>       Static_Check_Stats[i].bTaken = FALSE; <br>   if (Static_Check_Stats[i].NumMediaParms != pRasPort1-&gt;NumMediaParms) <br> {sprintf(buf,"ERROR NumMediaParm    %d -&gt;Passed,   %d  -&gt;Stored\n",Static_Check_Stats[i].NumMediaParms != pRasPort1-&gt;NumMediaParms); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (Static_Check_Stats[i].SizeMediaParms != pRasPort1-&gt;SizeMediaParms) <br> {sprintf(buf,"ERROR SizeMediaParm    %d -&gt;Passed,   %d  -&gt;Stored\n",Static_Check_Stats[i].SizeMediaParms != pRasPort1-&gt;SizeMediaParms); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (Static_Check_Stats[i].dwStartSessionTime != pRasPort1-&gt;rasport0.dwStartSessionTime) <br> {sprintf(buf,"ERROR StartSessionTime    %d -&gt;Passed,   %d  -&gt;Stored\n",Static_Check_Stats[i].dwStartSessionTime != pRasPort1-&gt;rasport0.dwStartSessionTime); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBytesXmited &lt; Static_Check_Stats[i].pRasStats.dwBytesXmited)  <br> { sprintf(buf, "ERROR dwBytesXmited Passed=%d   , dwBytesXmited Stored=%d\n", pRasStats-&gt;dwBytesXmited,Static_Check_Stats[i].pRasStats.dwBytesXmited); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBytesRcved &lt; Static_Check_Stats[i].pRasStats.dwBytesRcved)  <br> { sprintf(buf, "ERROR dwBytesRcved Passed=%d    , dwBytesRcved Stored=%d\n", pRasStats-&gt;dwBytesRcved,Static_Check_Stats[i].pRasStats.dwBytesRcved ); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwFramesXmited &lt; Static_Check_Stats[i].pRasStats.dwFramesXmited)  <br> {sprintf(buf, "ERROR dwFramesXmited Passed=%d , dwFramesXmited Stored=%d\n", pRasStats-&gt;dwFramesXmited,Static_Check_Stats[i].pRasStats.dwFramesXmited ); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwFramesRcved &lt; Static_Check_Stats[i].pRasStats.dwFramesRcved)  <br> {sprintf(buf, "ERROR dwFramesRcved Passed=%d , dwFramesRcved Stored=%d\n", pRasStats-&gt;dwFramesRcved,Static_Check_Stats[i].pRasStats.dwFramesRcved); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwCrcErr &lt; Static_Check_Stats[i].pRasStats.dwCrcErr)  <br>{sprintf(buf, "ERROR dwCrcErr Passed=%d , dwCrcErr Stored=%d\n", pRasStats-&gt;dwCrcErr,Static_Check_Stats[i].pRasStats.dwCrcErr); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwTimeoutErr &lt; Static_Check_Stats[i].pRasStats.dwTimeoutErr)  <br>{sprintf(buf, "ERROR dwTimeoutErr Passed=%d  , dwTimeoutErr Stored=%d\n", pRasStats-&gt;dwTimeoutErr,Static_Check_Stats[i].pRasStats.dwTimeoutErr); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwAlignmentErr &lt; Static_Check_Stats[i].pRasStats.dwAlignmentErr)  <br>{sprintf(buf, "ERROR dwAlignmentErr Passed=%d , dwAlignmentErr Stored=%d\n", pRasStats-&gt;dwAlignmentErr,Static_Check_Stats[i].pRasStats.dwAlignmentErr); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwHardwareOverrunErr &lt; Static_Check_Stats[i].pRasStats.dwHardwareOverrunErr)  <br>{sprintf(buf, "ERROR dwHardwareOverrunErr Passed=%d  , dwHardwareOverrunErr Stored=%d\n", pRasStats-&gt;dwHardwareOverrunErr,Static_Check_Stats[i].pRasStats.dwHardwareOverrunErr); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwFramingErr &lt; Static_Check_Stats[i].pRasStats.dwFramingErr)  <br>      {sprintf(buf, "ERROR dwFramingErr Passed=%d , dwFramingErr Stored=%d\n", pRasStats-&gt;dwFramingErr,Static_Check_Stats[i].pRasStats.dwFramingErr); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBufferOverrunErr &lt; Static_Check_Stats[i].pRasStats.dwBufferOverrunErr)  <br>      {sprintf(buf, "ERROR dwBufferOverrunErr Passed=%d , dwBufferOverrunErr Stored=%d\n", pRasStats-&gt;dwBufferOverrunErr,Static_Check_Stats[i].pRasStats.dwBufferOverrunErr); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBytesXmitedUncompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesXmitedUncompressed)  <br>     { sprintf(buf, "ERROR dwBytesXmitedUncompressed Passed=%d   ,  dwBytesXmitedUncompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesXmitedUncompressed,Static_Check_Stats[i].pRasStats.dwBytesXmitedUncompressed); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBytesRcvedUncompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesRcvedUncompressed)  <br>      {sprintf(buf, "ERROR dwBytesRcvedUncompressed  Passed=%d    ,dwBytesRcvedUncompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesRcvedUncompressed,Static_Check_Stats[i].pRasStats.dwBytesRcvedUncompressed); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBytesXmitedCompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesXmitedCompressed)  <br>      {sprintf(buf, "ERROR dwBytesXmitedCompressed Passed=%d   ,dwBytesXmitedCompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesXmitedCompressed,Static_Check_Stats[i].pRasStats.dwBytesXmitedCompressed); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>   if (pRasStats-&gt;dwBytesRcvedCompressed &lt; Static_Check_Stats[i].pRasStats.dwBytesRcvedCompressed)  <br>{ sprintf(buf, "ERROR dwBytesRcvedCompressed Passed=%d    ,dwBytesRcvedCompressed Stored=%d\n", <br>    pRasStats-&gt;dwBytesRcvedCompressed,Static_Check_Stats[i].pRasStats.dwBytesRcvedCompressed); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>     } <br>      if (memcmp(&amp;Static_Check_Stats[i].pRasParams,pRasParams, sizeof(pRasParams)) != 0) <br>{ sprintf(buf, "ERROR RASParams Passed   &amp;  RASParasms Stored are different\n"); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>     } <br> <br>  } <br>  break; <br>    } <br>     else <br>  {       if (i == 255){ <br>  if (ErrorLogInValid)  <br>       {DbgPrint("ERROR Port Name  Differs    %ws -&gt;Passed,   %ws -&gt;Stored\n",pRasPort1-&gt;rasport0.wszPortName,Static_Check_Stats[i].wszPortName);} <br>     else <br>       {sprintf(buf,"ERROR Port Name  Differs    %ws -&gt;Passed,   %ws -&gt;Stored\n",pRasPort1-&gt;rasport0.wszPortName,Static_Check_Stats[i].wszPortName); <br>   WriteFile(ErrLogFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>  } <br> } <br>       } <br>     } <br>    FlushFileBuffers(ErrLogFile); <br>    FlushFileBuffers(ConDisFile); <br> <br>} <br> <br>VOID Debug_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>) <br>{ <br>WCHAR *Media_Name[] = {TEXT("MEDIA_UNKNOWN"),TEXT( "MEDIA_SERIAL"), <br>  TEXT("MEDIA_RAS10_SERIAL"),TEXT( "MEDIA_ISDN")}; <br>WCHAR *Flag_Name[] = {TEXT("USER_AUTHENTICATED"),TEXT( "MESSENGER_PRESENT"), <br> TEXT("PPP_CLIENT"),TEXT("GATEWAY_ACTIVE"),TEXT("REMOTE_LISTEN"),TEXT("PORT_MULTILINKED")}; <br>WCHAR *Line_Condition[]={TEXT("RAS_PORT_NON_OPERATIONAL"),TEXT("RAS_PORT_DISCONNECTED"), <br>  TEXT("RAS_PORT_CALLING_BACK"),TEXT("RAS_PORT_LISTENING"),TEXT("RAS_PORT_AUTHENTICATING"), <br>  TEXT("RAS_PORT_AUTHENTICATED"),TEXT("RAS_PORT_INITIALIZING")}; <br>WCHAR *Hdw_Error[]={TEXT("RAS_MODEM_OPERATIONAL"),TEXT("RAS_MODEM_NOT_RESPONDING"),TEXT("RAS_MODEM_HARDWARE_FAILURE"), <br>  TEXT("RAS_MODEM_INCORRECT_RESPONSE"),TEXT("RAS_MODEM_UNKNOWN")}; <br>INT  i=0; <br>INT temp = 0; <br>INT temp1 =0; <br>DWORD dwsize=0; <br>CHAR szBuf[100]; <br>    DbgPrint( "\nRasAdminAcceptNewConnection called \n" ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszPortName=%ws\n", <br>pRasPort1-&gt;rasport0.wszPortName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszDeviceType=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceType ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszDeviceName=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszMediaName=%ws\n", <br>pRasPort1-&gt;rasport0.wszMediaName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.reserved=%d\n", <br>    pRasPort1-&gt;rasport0.reserved ); <br>    DbgPrint("                 %ws\n",Media_Name[pRasPort1-&gt;rasport0.reserved]); <br>    DbgPrint( "pRasPort1-&gt;rasport0.Flags=%d\n", <br>pRasPort1-&gt;rasport0.Flags ); <br>//printing Flags <br>    temp1 = 1; <br>    for (i=0; i &lt;= Number_Of_Flags; i++) <br> { <br> temp = (pRasPort1-&gt;rasport0.Flags &amp; temp1); <br> if (temp) <br>     { <br>       DbgPrint("Flag       %ws   \n",Flag_Name[i]); <br>     } <br>  temp1 = temp1*2; <br> } <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszUserName=%ws\n", <br>pRasPort1-&gt;rasport0.wszUserName ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszComputer=%ws\n", <br>pRasPort1-&gt;rasport0.wszComputer ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.dwStartSessionTime;=%d\n", <br>    pRasPort1-&gt;rasport0.dwStartSessionTime ); <br>    DbgPrint("Formatted session start time/date :  %s\n",ctime(&amp;pRasPort1-&gt;rasport0.dwStartSessionTime)); <br>    DbgPrint( "pRasPort1-&gt;rasport0.wszLogonDomain=%ws\n", <br>    pRasPort1-&gt;rasport0.wszLogonDomain ); <br>    DbgPrint( "pRasPort1-&gt;rasport0.fAdvancedServer=%d\n", <br>    pRasPort1-&gt;rasport0.fAdvancedServer ); <br>    DbgPrint( "pRasPort1-&gt;LineCondition=%d\n", pRasPort1-&gt;LineCondition ); <br>    DbgPrint("                     %ws\n",Line_Condition[pRasPort1-&gt;LineCondition-1]); <br>    DbgPrint( "pRasPort1-&gt;HardwareCondition=%d\n",pRasPort1-&gt;HardwareCondition); <br>    DbgPrint("                     %ws\n",Hdw_Error[pRasPort1-&gt;HardwareCondition-1]); <br>    DbgPrint( "pRasPort1-&gt;LineSpeed=%d   bits/sec\n",pRasPort1-&gt;LineSpeed); <br>    DbgPrint( "pRasPort1-&gt;NumStatistics=%d\n",pRasPort1-&gt;NumStatistics); <br>    DbgPrint( "pRasPort1-&gt;NumMediaParms=%d\n",pRasPort1-&gt;NumMediaParms); <br>    DbgPrint( "pRasPort1-&gt;SizeMediaParms=%d\n",pRasPort1-&gt;SizeMediaParms); <br>    DbgPrint( "\npRasPort1-&gt;ProjResult.nbf.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.nbf.dwError ); <br>    if (pRasPort1-&gt;ProjResult.nbf.dwError == NO_ERROR) <br>       { <br>DbgPrint( "pRasPort1-&gt;ProjResult.nbf.dwNetBiosError=%d\n", <br>    pRasPort1-&gt;ProjResult.nbf.dwNetBiosError ); <br>DbgPrint( "pRasPort1-&gt;ProjResult.nbf.szName=%s\n",  <br>    pRasPort1-&gt;ProjResult.nbf.szName ); <br>DbgPrint( "pRasPort1-&gt;ProjResult.nbf.wszWksta=%ws\n", <br>    pRasPort1-&gt;ProjResult.nbf.wszWksta ); <br>      } <br>   DbgPrint( "pRasPort1-&gt;ProjResult.ip.dwError=%d\n",  <br>pRasPort1-&gt;ProjResult.ip.dwError ); </code></pre>
<p>
</p>
<pre><code>if (pRasPort1-&gt;ProjResult.ip.dwError == NO_ERROR) <br>      {  <br>DbgPrint( "pRasPort1-&gt;ProjResult.ip.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ip.wszAddress ); <br>       } <br>    DbgPrint( "pRasPort1-&gt;ProjResult.ipx.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.ipx.dwError ); <br>    if (pRasPort1-&gt;ProjResult.ipx.dwError == NO_ERROR) <br>      { <br>     DbgPrint( "pRasPort1-&gt;ProjResult.ipx.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ipx.wszAddress ); <br>      } <br>    DbgPrint( "pRasPort1-&gt;ProjResult.at.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.at.dwError ); <br>    if (pRasPort1-&gt;ProjResult.at.dwError == NO_ERROR) <br>      { <br>      DbgPrint( "pRasPort1-&gt;ProjResult.at.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.at.wszAddress ); <br>       } <br>    DbgPrint( "\ndwBytesXmited=%d\n", pRasStats-&gt;dwBytesXmited ); <br>    DbgPrint( "dwBytesRcved=%d\n", pRasStats-&gt;dwBytesRcved ); <br>    DbgPrint( "dwFramesXmited=%d\n", pRasStats-&gt;dwFramesXmited ); <br>    DbgPrint( "dwFramesRcved=%d\n", pRasStats-&gt;dwFramesRcved); <br>    DbgPrint( "dwCrcErr=%d\n", pRasStats-&gt;dwCrcErr); <br>    DbgPrint( "dwTimeoutErr=%d\n", pRasStats-&gt;dwTimeoutErr); <br>    DbgPrint( "dwAlignmentErr=%d\n", pRasStats-&gt;dwAlignmentErr); <br>    DbgPrint( "dwHardwareOverrunErr=%d\n", pRasStats-&gt;dwHardwareOverrunErr); <br>    DbgPrint( "dwFramingErr=%d\n", pRasStats-&gt;dwFramingErr); <br>    DbgPrint( "dwBufferOverrunErr=%d\n", pRasStats-&gt;dwBufferOverrunErr); <br>    DbgPrint( "dwBytesXmitedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedUncompressed); <br>    DbgPrint( "dwBytesRcvedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedUncompressed); <br>    DbgPrint( "dwBytesXmitedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedCompressed); <br>    DbgPrint( "dwBytesRcvedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedCompressed); <br>    for (i=0; i&lt;pRasPort1-&gt;NumMediaParms;i++) <br>      { <br>      DbgPrint( "pRasParams-&gt;P_Key= %s\n",pRasParams[i].P_Key); <br>      DbgPrint( "pRasParams-&gt;P_Type= %d\n",pRasParams[i].P_Type); <br>      if (pRasParams[i].P_Type == 1) <br>  { <br>  DbgPrint("pRasParams-&gt;P_Value.Length=%d\n",pRasParams[i].P_Value.String.Length); <br>  sprintf(szBuf,"                                                                \n"); <br>  strncpy(szBuf, pRasParams[i].P_Value.String.Data, pRasParams[i].P_Value.String.Length); <br>  DbgPrint("pRasParams-&gt;P_Value.Data= %s\n",szBuf); <br>  } <br>      if (pRasParams[i].P_Type == 0) <br> { <br> DbgPrint("pRasParams-&gt;P_Value.Number=%d\n", pRasParams[i].P_Value.Number); <br> } <br>      DbgPrint( "pRasParams-&gt;P_Attributes= %d\n",pRasParams[i].P_Attributes); <br>      } <br>} <br> <br> <br> <br>VOID File_Print(RAS_PORT_1 *            pRasPort1, <br>    RAS_PORT_STATISTICS *   pRasStats, <br>    RAS_PARAMETERS *        pRasParams <br>) <br>{ <br>char *Media_Name[] = {"MEDIA_UNKNOWN", "MEDIA_SERIAL", <br>  "MEDIA_RAS10_SERIAL", "MEDIA_ISDN"}; <br>char *Flag_Name[] = {"USER_AUTHENTICATED", "MESSENGER_PRESENT", <br> "PPP_CLIENT","GATEWAY_ACTIVE","REMOTE_LISTEN","PORT_MULTILINKED"}; <br>char *Line_Condition[]={"RAS_PORT_NON_OPERATIONAL","RAS_PORT_DISCONNECTED", <br>  "RAS_PORT_CALLING_BACK","RAS_PORT_LISTENING","RAS_PORT_AUTHENTICATING", <br>  "RAS_PORT_AUTHENTICATED","RAS_PORT_INITIALIZING"}; <br>char *Hdw_Error[]={"RAS_MODEM_OPERATIONAL","RAS_MODEM_NOT_RESPONDING","RAS_MODEM_HARDWARE_FAILURE", <br>  "RAS_MODEM_INCORRECT_RESPONSE","RAS_MODEM_UNKNOWN"}; <br>INT  i=0; <br>INT temp = 0; <br>INT temp1 =0; <br>DWORD dwsize=0; <br>CHAR szBuf[50]; <br>CHAR buf[120]; <br>DWORD dwBytesWritten=0; <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszPortName=%ws\n", <br>pRasPort1-&gt;rasport0.wszPortName ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;rasport0.wszDeviceType=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceType ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;rasport0.wszDeviceName=%ws\n", <br>    pRasPort1-&gt;rasport0.wszDeviceName ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszMediaName=%ws\n", <br>pRasPort1-&gt;rasport0.wszMediaName ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"pRasPort1-&gt;rasport0.reserved=%d\n", <br>    pRasPort1-&gt;rasport0.reserved ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"                 %s\n",Media_Name[pRasPort1-&gt;rasport0.reserved]); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.Flags=%d\n", <br>pRasPort1-&gt;rasport0.Flags ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>//printing Flags <br>    temp1 = 1; <br>    for (i=0; i &lt;= Number_Of_Flags; i++) <br> { <br> temp = (pRasPort1-&gt;rasport0.Flags &amp; temp1); <br> if (temp) <br>     { <br>       sprintf(buf,"Flag       %s   \n",Flag_Name[i]); <br>     WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>     } <br>  temp1 = temp1*2; <br> } <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszUserName=%ws\n", <br>pRasPort1-&gt;rasport0.wszUserName ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszComputer=%ws\n", <br>pRasPort1-&gt;rasport0.wszComputer ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.dwStartSessionTime;=%d\n", <br>    pRasPort1-&gt;rasport0.dwStartSessionTime ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"Formatted session start time/date :  %s\n",ctime(&amp;pRasPort1-&gt;rasport0.dwStartSessionTime)); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.wszLogonDomain=%ws\n", <br>    pRasPort1-&gt;rasport0.wszLogonDomain ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;rasport0.fAdvancedServer=%d\n", <br>    pRasPort1-&gt;rasport0.fAdvancedServer ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;LineCondition=%d\n", pRasPort1-&gt;LineCondition ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"                     %s\n",Line_Condition[pRasPort1-&gt;LineCondition-1]); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;HardwareCondition=%d\n",pRasPort1-&gt;HardwareCondition); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf,"                     %s\n",Hdw_Error[pRasPort1-&gt;HardwareCondition-1]); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;LineSpeed=%d   bits/sec\n",pRasPort1-&gt;LineSpeed); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;NumStatistics=%d\n",pRasPort1-&gt;NumStatistics); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;NumMediaParms=%d\n",pRasPort1-&gt;NumMediaParms); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "pRasPort1-&gt;SizeMediaParms=%d\n",pRasPort1-&gt;SizeMediaParms); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "\npRasPort1-&gt;ProjResult.nbf.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.nbf.dwError ); <br>    if (pRasPort1-&gt;ProjResult.nbf.dwError == NO_ERROR) <br>       { <br>sprintf(buf, "pRasPort1-&gt;ProjResult.nbf.dwNetBiosError=%d\n", <br>    pRasPort1-&gt;ProjResult.nbf.dwNetBiosError ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>sprintf(buf, "pRasPort1-&gt;ProjResult.nbf.szName=%s\n",  <br>    pRasPort1-&gt;ProjResult.nbf.szName ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>sprintf(buf, "pRasPort1-&gt;ProjResult.nbf.wszWksta=%ws\n", <br>    pRasPort1-&gt;ProjResult.nbf.wszWksta ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      } <br>   sprintf(buf, "pRasPort1-&gt;ProjResult.ip.dwError=%d\n",  <br>pRasPort1-&gt;ProjResult.ip.dwError ); <br>   WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>   if (pRasPort1-&gt;ProjResult.ip.dwError == NO_ERROR) <br>      {  <br>sprintf(buf, "pRasPort1-&gt;ProjResult.ip.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ip.wszAddress ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>       } <br>    sprintf(buf, "pRasPort1-&gt;ProjResult.ipx.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.ipx.dwError ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    if (pRasPort1-&gt;ProjResult.ipx.dwError == NO_ERROR) <br>      { <br>     sprintf(buf, "pRasPort1-&gt;ProjResult.ipx.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.ipx.wszAddress ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      } <br>    sprintf(buf, "pRasPort1-&gt;ProjResult.at.dwError=%d\n", <br>pRasPort1-&gt;ProjResult.at.dwError ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    if (pRasPort1-&gt;ProjResult.at.dwError == NO_ERROR) <br>      { <br>      sprintf(buf, "pRasPort1-&gt;ProjResult.at.wszAddress=%ws\n", <br>pRasPort1-&gt;ProjResult.at.wszAddress ); <br>       } <br>    sprintf(buf, "\ndwBytesXmited=%d\n", pRasStats-&gt;dwBytesXmited ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesRcved=%d\n", pRasStats-&gt;dwBytesRcved ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwFramesXmited=%d\n", pRasStats-&gt;dwFramesXmited ); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwFramesRcved=%d\n", pRasStats-&gt;dwFramesRcved); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwCrcErr=%d\n", pRasStats-&gt;dwCrcErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwTimeoutErr=%d\n", pRasStats-&gt;dwTimeoutErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwAlignmentErr=%d\n", pRasStats-&gt;dwAlignmentErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwHardwareOverrunErr=%d\n", pRasStats-&gt;dwHardwareOverrunErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwFramingErr=%d\n", pRasStats-&gt;dwFramingErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBufferOverrunErr=%d\n", pRasStats-&gt;dwBufferOverrunErr); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesXmitedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedUncompressed); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesRcvedUncompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedUncompressed); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesXmitedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesXmitedCompressed); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    sprintf(buf, "dwBytesRcvedCompressed=%d\n",  <br>    pRasStats-&gt;dwBytesRcvedCompressed); <br>    WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>    for (i=0; i&lt;pRasPort1-&gt;NumMediaParms;i++) <br>      { <br>      sprintf(buf, "pRasParams-&gt;P_Key= %s\n",pRasParams[i].P_Key); <br>      WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      sprintf(buf, "pRasParams-&gt;P_Type= %d\n",pRasParams[i].P_Type); <br>      WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      if (pRasParams[i].P_Type == 1) <br>  { <br>  sprintf(buf,"pRasParams-&gt;P_Value.Length=%d\n",pRasParams[i].P_Value.String.Length); <br>WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  sprintf(szBuf,"                                                                \n"); <br>  strncpy(szBuf, pRasParams[i].P_Value.String.Data, pRasParams[i].P_Value.String.Length); <br>  sprintf(buf,"pRasParams-&gt;P_Value.Data= %s\n",szBuf); <br>       WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>  } <br>      if (pRasParams[i].P_Type == 0) <br> { <br> sprintf(buf,"pRasParams-&gt;P_Value.Number=%d\n", pRasParams[i].P_Value.Number); <br>      WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br> } <br>      sprintf(buf, "pRasParams-&gt;P_Attributes= %d\n",pRasParams[i].P_Attributes); <br>      WriteFile(ConDisFile, (LPSTR)buf, strlen(buf), &amp;dwBytesWritten, NULL); <br>      } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VBADS.BAS</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4645"></a>VBADS.BAS</h2>
<pre><code>Attribute VB_Name = "Module1" <br>' DSBROWSE <br>' This is a simple browser for Active Directory which demonstrates <br>' the use of the basic Active Directory Automation interfaces from <br>' VB. Browsing starts automatically at the Namespaces <br>' Collection Object. The user can expand the browser tree <br>' to any level desired. The properties option allows viewing <br>' of the current Active Directory object's properties, while the Set <br>' button allows changing property values. <br> <br>Option Explicit <br> <br>Public currentADsObj As IADs <br>Public currentADsObjCont As IADsContainer <br>Public currentADsObjSchema   As IADs <br>Public currentNewObj   As IADs <br>Public strPath As String <br>Public bStartup As Boolean <br>Public errstring As String <br>Public ERRNUMB As Long <br>Public bAbort As Boolean <br>Public Sub enumerate_path(ByVal Node As Node) <br>' <br>'Name: enumerate_path <br>'Input: Node As Node <br>'Desc: Does the actual enumerating of input node. <br>'   All child object are enumerated and placed under <br>'   the input node as children. <br>'Return: none <br>' <br>     <br>    ' <br>    ' Set Error handler <br>    ' <br>    On Error GoTo ErrorHandler <br>     <br>    Dim st As Variant <br>    Dim nodX As Node    ' Create variable. <br>    Dim ChildNode As Node    ' Create variable. <br>    Dim I As Integer    ' Create a counter variable. <br>    Dim Container As IADsContainer <br>    Dim Class As IADsClass <br>    Dim Child As IADs <br>    Dim classobj As IADsClass <br>    Dim tempClass As String <br>     <br>    bAbort = False <br>    ' <br>    ' Get the object selected <br>    ' <br>    Set currentADsObj = GetObject(strPath) <br>    frmBrwsTree.txtName.Caption = currentADsObj.Name <br>    frmBrwsTree.txtPath.Caption = currentADsObj.ADsPath <br>    On Error Resume Next <br>    ' <br>    ' Set the node if not passed into this sub as the current <br>    ' node we are working on (for the collection coming up). <br>    ' <br>    If Node Is Nothing Then <br>       Set Node = frmBrwsTree.TreeView1.Nodes.Item(currentADsObj.ADsPath) <br>       Node.Sorted = True <br>    End If <br> <br>    On Error GoTo ErrorHandler <br>     <br>    If frmBrwsTree.TreeView1.Nodes.Count = 0 Then <br>        ' <br>        ' This means we are enumerating the namespaces container <br>        ' No nodes expanded yet, <br>        ' <br>        tempClass = SetClass(currentADsObj.Class) <br>        Set nodX = frmBrwsTree.TreeView1.Nodes.Add(, , currentADsObj.ADsPath, _ <br>            currentADsObj.Name, tempClass) <br>        nodX.Sorted = True <br>        ' <br>        'Get namespace IDs <br>        ' <br>        Set Container = currentADsObj <br>        For Each Child In Container <br>            tempClass = SetClass(Child.Class) <br>            Set Node = frmBrwsTree.TreeView1.Nodes.Add(nodX, tvwChild, _ <br>                Child.ADsPath, Child.Name, tempClass) <br>            Node.Sorted = True <br>            ' <br>            ' If the child is a container, then add a temporary nod <br>            ' to show that it can be expanded later. <br>            ' <br>            Set ChildNode = frmBrwsTree.TreeView1.Nodes.Add(Node, _ <br>                tvwChild, Child.ADsPath &amp; "/Dummy", "Dummy", tempClass) <br>            ChildNode.Sorted = True <br>        Next Child <br>        bStartup = True 'disable expand processing <br>        frmBrwsTree.TreeView1.Nodes(1).Expanded = True <br>        bStartup = False <br>        Set Node = Nothing <br>     <br>    Else <br>     <br>        Set Container = Nothing <br>        Node.Sorted = True <br>        ' <br>        ' Now, see if it's a container and if so, enumerate <br>        ' all objects below it. <br>        ' <br>        On Error Resume Next <br>     <br>        Set Container = currentADsObj <br>        If Err = 0 Then <br>            For Each Child In Container <br>                If Child Is Nothing Then Exit For <br>                Err = 0 <br>                I = I + 1 <br>                ' <br>                ' Every 80 objects we check for user input <br>                ' <br>                If I = 80 Then <br>                    DoEvents <br>                    If bAbort Then GoTo quitloop <br>                    I = 0 <br>                End If <br>                tempClass = SetClass(Child.Class) 'Gets the image <br>                If tempClass = "" Then tempClass = "Dummy" <br>                <br>                Set nodX = frmBrwsTree.TreeView1.Nodes.Add(Node, tvwChild, _ <br>                    Child.ADsPath, Child.Name, tempClass) <br>                nodX.Sorted = True <br>                ' <br>                ' If New node is a container then add temporary child node <br>                ' <br>                If IsContainer(Child) Then <br>                       <br>                    Set ChildNode = frmBrwsTree.TreeView1.Nodes.Add(nodX, _ <br>                        tvwChild, Child.ADsPath &amp; "Dummy", "Dummy", tempClass) <br>                    ChildNode.Sorted = True <br>                End If <br>skip: <br>           Next Child <br>        End If <br>         <br>quitloop: <br>        Set currentADsObj = Nothing <br>skip2: <br>    End If <br>    GoTo finish <br>     <br>ErrorHandler: <br>     <br>        errstring = "Had an error:" &amp; Err.Number <br>        ERRNUMB = Err.Number <br>        MsgBox errstring <br>        Resume Next <br> <br>finish: <br> <br>End Sub <br>Public Function SetClass(classString As String) As String <br>'Name: SetClass <br>'Input: classString As String <br>'Desc: Used to determine what classname is <br>'   used for the imagelist <br>'Return: SetClass As String <br> <br>    SetClass = "img" &amp; classString <br>     <br>    ' <br>    ' Evaluate input class to set image to all classes <br>    ' <br>    Select Case classString <br>     <br>    Case "Computer" <br>    Case "NameSpace" <br>    Case "Namespaces" <br>    Case "User" <br>    Case "Domain" <br>    Case "Service" <br>    Case "Group" <br>    Case "PrintQueue" <br>    Case "FileShare" <br>    Case "Organization" <br>    Case "Country" <br>    Case "Organizational Unit" <br>        SetClass = "imgOrganization" <br>    ' Here we set all others <br>    Case Else <br>        SetClass = "imgDefault" <br>    End Select <br> <br>End Function <br> <br>Public Function IsContainer(objADS As IADs) As Boolean <br>' <br>' This Function returns True or False depending on whether the <br>' object referred to by objADs is a container or not <br>' <br>    Dim Cont As IADsContainer <br>     <br>    On Error Resume Next <br>     <br>    Set Cont = objADS <br>    If Err Then <br>        IsContainer = False <br>    Else <br>        IsContainer = True <br>    End If <br>End Function <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

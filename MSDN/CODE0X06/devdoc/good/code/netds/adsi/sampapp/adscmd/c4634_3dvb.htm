<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DUMP.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4637"></a>DUMP.CXX</h2>
<pre><code>//---------------------------------------------------------------------- <br>// <br>//  Microsoft Active Directory 1.0 Sample Code <br>// <br>//  Copyright (C) Microsoft Corporation, 1996 <br>// <br>//  File:       dump.cxx <br>// <br>//  Contents:   Functions for dumping the properties for an object. <br>// <br>// <br>//---------------------------------------------------------------------- <br> <br>#include "main.hxx" <br> <br>// <br>// Given an ADsPath, bind to the object and call the DumpObject routine. <br>// <br> <br>int <br>DoDump(char *AnsiADsPath) <br>{ <br> HRESULT hr = E_OUTOFMEMORY ; <br> LPWSTR pszADsPath = NULL; <br> IADs * pADs = NULL; <br> <br> // <br> // Convert path to unicode and then bind to the object. <br> // <br> <br> BAIL_ON_NULL(pszADsPath = AllocateUnicodeString(AnsiADsPath)); <br> <br> hr = ADsGetObject( <br>             pszADsPath, <br>             IID_IADs, <br>             (void **)&amp;pADs <br>             ); <br> <br> if (FAILED(hr)) { <br> <br>     printf("Failed to bind to object: %S\n", pszADsPath) ; <br> } <br> else { <br> <br>     // <br>     // Dump the object <br>     // <br> <br>     hr = DumpObject(pADs); <br> <br>     if (FAILED(hr)) { <br> <br>         printf("Unable to read properties of: %S\n", pszADsPath) ; <br>     } <br> <br>     pADs-&gt;Release(); <br> } <br> <br>error: <br> <br> FreeUnicodeString(pszADsPath); <br> <br> return (FAILED(hr) ? 1 : 0) ; <br>} <br> <br>// <br>// Given an ADs pointer, dump the contents of the object <br>// <br> <br>HRESULT <br>DumpObject( <br> IADs * pADs <br> ) <br>{ <br> HRESULT hr; <br>HRESULT hrSA; <br> IADs * pADsProp = NULL; <br> VARIANT var; <br>ZeroMemory(&amp;var,sizeof(var)); <br>VARIANT *   pvarPropName = NULL; <br> DWORD i = 0; <br>VARIANT varProperty; <br> IDispatch * pDispatch = NULL; <br> <br> // <br> // Access the schema for the object <br> // <br> <br> hr = GetPropertyList( <br>             pADs, <br>             &amp;var); <br> BAIL_ON_FAILURE(hr); <br> <br> // <br> // List the Properties <br>// <br>hr = SafeArrayAccessData(var.parray, (void **) &amp;pvarPropName); <br>BAIL_ON_FAILURE(hr); <br> <br>for (i = 0; i &lt; var.parray-&gt;rgsabound[0].cElements; i++){ <br> <br>   // <br>     // Get a property and print it out. The HRESULT is passed to <br>     // PrintProperty. <br>     // <br> <br>     hr = pADs-&gt;Get( <br>             pvarPropName[i].bstrVal, <br>             &amp;varProperty <br>             ); <br>   PrintProperty( <br>         pvarPropName[i].bstrVal, <br>         hr, <br>         varProperty <br>         ); <br> <br>} <br> <br>hr = SafeArrayUnaccessData(var.parray); <br> <br>error: <br>// Don't destroy hr in case we're here from BAIL_ON_FAILURE <br>if(var.parray) hrSA = SafeArrayDestroy(var.parray); <br> <br>return(hr); <br>} <br> <br> <br>HRESULT <br>GetPropertyList( <br> IADs * pADs, <br> VARIANT * pvar ) <br>{ <br> HRESULT hr= S_OK; <br> BSTR bstrSchemaPath = NULL; <br>IADsClass * pADsClass = NULL; <br> <br> hr = pADs-&gt;get_Schema(&amp;bstrSchemaPath); <br> BAIL_ON_FAILURE(hr); <br> <br> hr = ADsGetObject( <br>             bstrSchemaPath, <br>             IID_IADsClass, <br>             (void **)&amp;pADsClass); <br> BAIL_ON_FAILURE(hr); <br> <br>//Put SafeArray of bstr's into input variant struct <br>hr = pADsClass-&gt;get_MandatoryProperties(pvar); <br>BAIL_ON_FAILURE(hr); <br> <br>error: <br> if (bstrSchemaPath) { <br>     SysFreeString(bstrSchemaPath); <br> } <br> <br> if (pADsClass) { <br>     pADsClass-&gt;Release(); <br> } <br> <br> return(hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

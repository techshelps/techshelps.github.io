<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMMON.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4677"></a>COMMON.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    Common.h <br> <br>Abstract: <br> <br>   Contains Sample Provider routines and properties that are common to <br>   all objects.  Objects get the routines and properties through C++  <br>   inheritance. <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#ifndef _COMMON_H_ <br>#define _COMMON_H_ <br> <br>#define MAX_DWORD 0xFFFFFFFF <br>#define SCHEMA_NAME L"Schema"  //Name of Schema object off of RootObject <br> <br>HRESULT xx_put_BSTR( <br>    BSTR* lppItemName, <br>    BSTR lpName <br>    ); <br> <br>HRESULT xx_put_LONG( <br>    long *plnItem, <br>    long Item <br>    ); <br> <br>HRESULT <br>xx_put_DATE( <br>    DATE * pdaItem, <br>    DATE daItem <br>    ); <br> <br>HRESULT <br>xx_put_VARIANT_BOOL( <br>    VARIANT_BOOL * pfItem, <br>    VARIANT_BOOL fItem <br>    ); <br> <br>HRESULT <br>xx_put_VARIANT( <br>    VARIANT * * pvItem, <br>    VARIANT vItem <br>    ); <br> <br>HRESULT <br>LoadTypeInfoEntry( <br>    CDispatchMgr * pDispMgr, <br>    REFIID libid, <br>    REFIID iid, <br>    void * pIntf, <br>    DISPID SpecialId <br>    ); <br> <br> <br>HRESULT <br>MakeUncName( <br>    LPWSTR szSrcBuffer, <br>    LPWSTR szTargBuffer <br>    ); <br> <br>HRESULT <br>ValidateOutParameter( <br>    BSTR * retval <br>    ); <br> <br>HRESULT <br>BuildADsPath( <br>    BSTR Parent, <br>    BSTR Name, <br>    BSTR *pADsPath <br>    ); <br> <br>HRESULT <br>BuildSchemaPath( <br>    BSTR bstrADsPath, <br>    BSTR bstrClass, <br>    BSTR *pSchemaPath <br>    ); <br> <br>HRESULT <br>BuildADsGuid( <br>    REFCLSID clsid, <br>    BSTR *pADsClass <br>    ); <br> <br> <br>// <br>// Accessing Well-known object types <br>// <br>//RHA  will have to do filters as whatever user passes in <br>typedef struct _filters { <br>    WCHAR szObjectName[MAX_PATH]; <br>    DWORD dwFilterId; <br>} FILTERS, *PFILTERS; <br> <br> <br>extern PFILTERS  gpFilters; <br>extern DWORD gdwMaxFilters; <br> <br> <br>HRESULT <br>BuildADsPathFromDSPath( <br>    LPWSTR szDSRootRDN, <br>    LPWSTR szDSDNName, <br>    LPWSTR szADsPathName <br>    ); <br> <br>HRESULT <br>BuildDSPathFromADsPath( <br>    LPWSTR szADsPathName, <br>    LPWSTR szDSPathName <br>    ); <br> <br>HRESULT <br>BuildDSParentPathFromDSPath( <br>    LPWSTR szDSPathName, <br>    LPWSTR szDSParentPathName, <br>    LPWSTR szCommonName <br>    ); <br> <br>HRESULT <br>BuildDSPathFromDSParentPath( <br>    LPWSTR szDSParentPathName, <br>    LPWSTR szDSObjectCommonName, <br>    LPWSTR szDSPathName <br>    ); <br> <br> <br>typedef struct _KEYDATA { <br>    DWORD   cTokens; <br>    LPWSTR  pTokens[1]; <br>} KEYDATA, *PKEYDATA; <br> <br> <br>PKEYDATA <br>CreateTokenList( <br>    LPWSTR   pKeyData, <br>    WCHAR ch <br>    ); <br> <br>HRESULT LoadTypeInfo(CLSID clsidTL, CLSID clsidTI, LPTYPEINFO *ppTI); <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CENUMNS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4661"></a>CENUMNS.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CEnumNS.c <br> <br>Abstract: <br> <br>    Sample Provider Namespace Enumerator Code <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>#define ENUM_BUFFER_SIZE (1024 * 16) <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSNamespaceEnum::Create <br>// <br>//  Synopsis: <br>// <br>//  Arguments:  [pCollection] <br>//              [ppEnumVariant] <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>HRESULT <br>CSampleDSNamespaceEnum::Create( <br>    CSampleDSNamespaceEnum FAR* FAR* ppenumvariant, <br>    VARIANT var <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    CSampleDSNamespaceEnum FAR* penumvariant = NULL; <br> <br>    penumvariant = new CSampleDSNamespaceEnum(); <br> <br>    if (penumvariant == NULL){ <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    hr = SampleDSRDNEnum(  <br>                     &amp;penumvariant-&gt;_hEnum,  <br>                     NULL <br>                     ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = ObjectTypeList::CreateObjectTypeList( <br>                                        var, <br>                                        &amp;penumvariant-&gt;_pObjList <br>                                        ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    *ppenumvariant = penumvariant; <br>    RRETURN(hr); <br> <br>error: <br>    if (penumvariant) { <br>        delete penumvariant; <br>    } <br>    RRETURN(hr); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSNamespaceEnum::CSampleDSNamespaceEnum <br>// <br>//  Synopsis: <br>// <br>// <br>//  Arguments: <br>// <br>// <br>//  Returns: <br>// <br>//---------------------------------------------------------------------------- <br>CSampleDSNamespaceEnum::CSampleDSNamespaceEnum() <br>{ <br>    _pObjList = NULL; <br>    _dwEntriesRead = 0; <br>    _dwCurrentEntry = 0; <br>    _hEnum = NULL; <br>    _pBuffer = NULL; <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSNamespaceEnum::~CSampleDSNamespaceEnum <br>// <br>//  Synopsis: <br>// <br>// <br>//  Arguments: <br>// <br>//  Returns: <br>// <br>//---------------------------------------------------------------------------- <br>CSampleDSNamespaceEnum::~CSampleDSNamespaceEnum() <br>{ <br>    if (_pBuffer) <br>        FreeProvMem(_pBuffer); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSNamespaceEnum::Next <br>// <br>//  Synopsis:   Returns cElements number of requested ADs objects in the <br>//              array supplied in pvar. <br>// <br>//  Arguments:  [cElements] -- The number of elements requested by client <br>//              [pvar] -- ptr to array of VARIANTs to for return objects <br>//              [pcElementFetched] -- if non-NULL, then number of elements <br>//                                 -- actually returned is placed here <br>// <br>//  Returns:    HRESULT -- S_OK if number of elements requested are returned <br>//                      -- S_FALSE if number of elements is &lt; requested <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP <br>CSampleDSNamespaceEnum::Next( <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    ULONG cElementFetched = 0; <br>    HRESULT hr = S_OK; <br> <br>    hr = EnumObjects( <br>            cElements, <br>            pvar, <br>            &amp;cElementFetched <br>            ); <br> <br>    if (pcElementFetched) { <br>        *pcElementFetched = cElementFetched; <br>    } <br>    RRETURN(hr); <br>} <br> <br> <br>HRESULT <br>CSampleDSNamespaceEnum::EnumObjects( <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    DWORD           i; <br>    ULONG           cRequested = 0; <br>    ULONG           cTotalFetched = 0; <br>    HRESULT         hr; <br> <br>    for (i = 0; i &lt; cElements; i++)  { <br>        VariantInit(&amp;pvar[i]); <br>    } <br>    cRequested = cElements; <br> <br>        hr = FetchObjects(cElements, pvar, &amp;cTotalFetched); <br>    <br>    if (pcElementFetched) { <br>        *pcElementFetched = cTotalFetched; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br>// <br>// Load IDispatch pointers of Next cElements Root Objects into pvar array <br>// <br>HRESULT <br>CSampleDSNamespaceEnum::FetchObjects( <br> <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    HRESULT hr; <br>    IDispatch *pDispatch = NULL; <br>    DWORD i = 0; <br> <br>    while (i &lt; cElements) { <br> <br>        hr = FetchNextObject(&amp;pDispatch); <br>        if (hr == S_FALSE) { <br>            break; <br>        } <br> <br>        VariantInit(&amp;pvar[i]); <br>        pvar[i].vt = VT_DISPATCH; <br>        pvar[i].pdispVal = pDispatch; <br>        (*pcElementFetched)++; <br>        i++; <br>    } <br>    return(hr); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSNamespaceEnum::FetchNextObject <br>// <br>//  Synopsis:   Gets IDispatch pointer of next object in namespace. <br>// <br>//  Arguments:  [ppDispatch] -- Pointer to where to return IDispatch pointer. <br>// <br>//  Returns:    HRESULT -- S_OK if got the next object <br>//                      -- S_FALSE if not <br>// <br>//  Modifies:   [*ppDispatch] <br>// <br>//---------------------------------------------------------------------------- <br>HRESULT <br>CSampleDSNamespaceEnum::FetchNextObject( <br>    IDispatch ** ppDispatch <br>    ) <br>{ <br>    HRESULT hr; <br>    LPTSTR lpRootRDN=NULL ; <br>    LPTSTR lpClassName=NULL ; <br>    *ppDispatch = NULL; <br> <br>    hr = SampleDSNextRDN(_hEnum, <br>                         &amp;lpRootRDN, <br>                         &amp;lpClassName  <br>                         );     <br> <br>    if (hr != S_OK) { <br>        if (_hEnum) { <br>            SampleDSFreeEnum(_hEnum); <br>            _hEnum = NULL; <br>        } <br>        goto error; <br>    } <br> <br>    hr = CSampleDSGenObject::CreateGenericObject( <br>                                         L"Sample:", <br>                                        lpRootRDN, <br>                                        lpClassName, <br>                                        ADS_OBJECT_BOUND, <br>                                        IID_IDispatch, <br>                                        (void **)ppDispatch <br>                                        ); <br>error: <br>    if (lpClassName) <br>        FreeProvMem(lpClassName);   <br>    if (lpRootRDN) <br>        FreeProvMem(lpRootRDN);   <br>    RRETURN_ENUM_STATUS(hr);  <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

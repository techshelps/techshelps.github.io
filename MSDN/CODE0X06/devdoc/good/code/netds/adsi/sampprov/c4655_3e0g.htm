<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDISPMGR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4660"></a>CDISPMGR.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CDispMgr.h <br> <br>Abstract: <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#ifndef _CDISPMGR_H_ <br>#define _CDISPMGR_H_ <br> <br>typedef struct _typeinfoentry <br>{ <br>    LONG TypeInfoId; <br>    void FAR *ptypeinfo; <br>    void * pInterfacePointer; <br>    struct _typeinfoentry *pNext; <br>} TYPEINFOENTRY, *PTYPEINFOENTRY; <br> <br>class CDispatchMgr; <br> <br>class CDispatchMgr <br>{ <br>public: <br> <br>    DECLARE_IDispatch_METHODS <br> <br>    CDispatchMgr::CDispatchMgr(); <br> <br>    CDispatchMgr::~CDispatchMgr(); <br> <br>    DISPID <br>    CDispatchMgr::getDISPID(DISPID InputDispId); <br> <br>    DISPID <br>    CDispatchMgr::getTypeinfoID(DISPID InputDispId); <br> <br>    void * <br>    CDispatchMgr::getInterfacePtr(DISPID TypeinfoID <br>                                      ); <br>     void <br>     CDispatchMgr::generate_newids(LONG TypeInfoId, <br>             DISPID FAR* rgdispid, unsigned int cNames); <br> <br>    PTYPEINFOENTRY <br>    CDispatchMgr::FindTypeInfoEntry(LONG TypeInfoId); <br> <br>    HRESULT <br>    CDispatchMgr::AddTypeInfo(void FAR *ptypeinfo, void * pIntfptr); <br> <br> <br>    STDMETHODIMP <br>    CDispatchMgr::TypeInfoInvoke(DISPID dispidMember, REFIID iid, LCID lcid, <br>            unsigned short wFlags, DISPPARAMS FAR* pdispparams, <br>            VARIANT FAR* pvarResult, EXCEPINFO FAR* pexcepinfo, <br>            unsigned int FAR* puArgErr); <br> <br>   HRESULT <br>   CDispatchMgr::getTypeInfo(DISPID typeinfoid, ITypeInfo FAR * FAR * ppTypeInfo) ; <br> <br>   HRESULT <br>   CDispatchMgr::MarkAsNewEnum(void *pTypeInfo); <br> <br>   PTYPEINFOENTRY <br>   CDispatchMgr::FindTypeInfo(void *pTypeInfo); <br> <br>   LONG <br>   CDispatchMgr::gentypeinfoid(); <br> <br>protected: <br> <br>    LONG        _dwTypeInfoId; <br>    PTYPEINFOENTRY _pTypeInfoEntry; <br>    PTYPEINFOENTRY _pDispidNewEnum; <br>}; <br> <br>#define BAIL_IF_ERROR(hr) \ <br>        if (FAILED(hr)) {       \ <br>                goto cleanup;   \ <br>        } <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MACRO.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4700"></a>MACRO.H</h2>
<pre><code>#define BAIL_IF_ERROR(hr) \ <br>        if (FAILED(hr)) {       \ <br>                goto cleanup;   \ <br>        }\ <br> <br>#define BAIL_ON_FAILURE(hr) \ <br>        if (FAILED(hr)) {       \ <br>                goto error;   \ <br>        }\ <br> <br>#define CONTINUE_ON_FAILURE(hr) \ <br>        if (FAILED(hr)) {       \ <br>                continue;   \ <br>        }\ <br> <br>#define BAIL_ON_SUCCESS(hr) \ <br>        if (SUCCEEDED(hr)) {       \ <br>                goto error;   \ <br>        }\ <br> <br>#define QUERY_INTERFACE(hr, ptr, iid, ppObj) \ <br>        hr = ptr-&gt;QueryInterface(iid, (void **)ppObj); \ <br>        if (FAILED(hr)) {    \ <br>                goto cleanup;\ <br>        }\ <br> <br> <br>#define RRETURN_ENUM_STATUS(hr) \ <br>        if (hr != S_OK) {       \ <br>            RRETURN(S_FALSE);   \ <br>        }                       \ <br>        RRETURN(S_OK); <br> <br> <br> <br> <br>#define DEFINE_IDispatch_Implementation_Unimplemented(cls) \ <br>STDMETHODIMP                                                          \ <br>cls::GetTypeInfoCount(unsigned int FAR* pctinfo)        \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::GetTypeInfo(unsigned int itinfo, LCID lcid,        \ <br>        ITypeInfo FAR* FAR* pptinfo)                                  \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::GetIDsOfNames(REFIID iid, LPWSTR FAR* rgszNames,   \ <br>        unsigned int cNames, LCID lcid, DISPID FAR* rgdispid)         \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::Invoke(DISPID dispidMember, REFIID iid, LCID lcid, \ <br>        unsigned short wFlags, DISPPARAMS FAR* pdispparams,           \ <br>        VARIANT FAR* pvarResult, EXCEPINFO FAR* pexcepinfo,           \ <br>        unsigned int FAR* puArgErr)                                   \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>} <br> <br> <br> <br> <br>#define DEFINE_IDispatch_Implementation(cls)                          \ <br>STDMETHODIMP                                                          \ <br>cls::GetTypeInfoCount(unsigned int FAR* pctinfo)                      \ <br>{                                                                     \ <br>        RRETURN(_pDispMgr-&gt;GetTypeInfoCount(pctinfo));                \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::GetTypeInfo(unsigned int itinfo, LCID lcid,                      \ <br>        ITypeInfo FAR* FAR* pptinfo)                                  \ <br>{                                                                     \ <br>        RRETURN(_pDispMgr-&gt;GetTypeInfo(itinfo,                        \ <br>                                       lcid,                          \ <br>                                       pptinfo                        \ <br>                                       ));                            \ <br>}                                                                     \ <br>STDMETHODIMP                                                          \ <br>cls::GetIDsOfNames(REFIID iid, LPWSTR FAR* rgszNames,                 \ <br>        unsigned int cNames, LCID lcid, DISPID FAR* rgdispid)         \ <br>{                                                                     \ <br>        RRETURN(_pDispMgr-&gt;GetIDsOfNames(iid,                         \ <br>                                         rgszNames,                   \ <br>                                         cNames,                      \ <br>                                         lcid,                        \ <br>                                         rgdispid                     \ <br>                                         ));                          \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::Invoke(DISPID dispidMember, REFIID iid, LCID lcid,               \ <br>        unsigned short wFlags, DISPPARAMS FAR* pdispparams,           \ <br>        VARIANT FAR* pvarResult, EXCEPINFO FAR* pexcepinfo,           \ <br>        unsigned int FAR* puArgErr)                                   \ <br>{                                                                     \ <br>        RRETURN (_pDispMgr-&gt;Invoke(dispidMember,                      \ <br>                                   iid,                               \ <br>                                   lcid,                              \ <br>                                   wFlags,                            \ <br>                                   pdispparams,                       \ <br>                                   pvarResult,                        \ <br>                                   pexcepinfo,                        \ <br>                                   puArgErr                           \ <br>                                   ));                                \ <br>} <br> <br>#define DEFINE_IADs_Implementation(cls)                             \ <br>STDMETHODIMP                                                          \ <br>cls::get_Name(THIS_ BSTR FAR* retval)                                 \ <br>{                                                                     \ <br>    RRETURN(get_CoreName(retval));                                    \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::get_ADsPath(THIS_ BSTR FAR* retval)                            \ <br>{                                                                     \ <br>                                                                      \ <br>    RRETURN(get_CoreADsPath(retval));                               \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::get_Class(THIS_ BSTR FAR* retval)                                \ <br>{                                                                     \ <br>                                                                      \ <br>    RRETURN(get_CoreADsClass(retval));                              \ <br>}                                                                     \ <br>                                                                      \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::get_Parent(THIS_ BSTR FAR* retval)                               \ <br>{                                                                     \ <br>    RRETURN(get_CoreParent(retval));                                  \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::get_Schema(THIS_ BSTR FAR* retval)                               \ <br>{                                                                     \ <br>    RRETURN(get_CoreSchema(retval));                                  \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::get_GUID(THIS_ BSTR FAR* retval)                                 \ <br>{                                                                     \ <br>    RRETURN(get_CoreGUID(retval));                                    \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::GetEx(THIS_ BSTR bstrName, VARIANT FAR* pvProp)                  \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>}                                                                     \ <br>                                                                      \ <br>STDMETHODIMP                                                          \ <br>cls::PutEx(THIS_ long lnControlCode, BSTR bstrName, VARIANT vProp)    \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>}                                                                     \ <br>STDMETHODIMP                                                          \ <br>cls::GetInfoEx(THIS_ VARIANT vProperties, long lnReserved)            \ <br>{                                                                     \ <br>    RRETURN(E_NOTIMPL);                                               \ <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CNAMESP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4674"></a>CNAMESP.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CNameSp.cpp <br> <br>Abstract: <br> <br>    Sample Namespace Object  <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br> <br>DEFINE_IDispatch_Implementation(CSampleDSNamespace) <br>DEFINE_IADs_Implementation(CSampleDSNamespace) <br> <br>//  Class CSampleDSNamespace <br>CSampleDSNamespace::CSampleDSNamespace() <br>{ <br>    VariantInit(&amp;_vFilter); <br>} <br> <br>HRESULT <br>CSampleDSNamespace::CreateNamespace( <br>    BSTR Parent, <br>    BSTR NamespaceName, <br>    DWORD dwObjectState, <br>    REFIID riid, <br>    void **ppvObj <br>    ) <br>{ <br>    CSampleDSNamespace FAR * pNamespace = NULL; <br>    HRESULT hr = S_OK; <br> <br>    hr = AllocateNamespaceObject(&amp;pNamespace); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = pNamespace-&gt;InitializeCoreObject( <br>                Parent, <br>                NamespaceName, <br>                L"Namespace", <br>                L"", <br>                CLSID_SampleDSNamespace, <br>                dwObjectState <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = pNamespace-&gt;QueryInterface(riid, ppvObj); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pNamespace-&gt;Release(); <br> <br>    RRETURN(hr); <br> <br>error: <br> <br>    delete pNamespace; <br>    RRETURN(hr); <br>} <br> <br> <br>CSampleDSNamespace::~CSampleDSNamespace( ) <br>{ <br>    delete _pDispMgr; <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::QueryInterface(REFIID iid, LPVOID FAR* ppv) <br>{ <br>    if (IsEqualIID(iid, IID_IUnknown)) <br>    { <br>        *ppv = (IADs FAR *)this; <br>    }else if (IsEqualIID(iid, IID_IDispatch)) <br>    { <br>        *ppv = (IADs FAR *)this; <br>    } <br>    else if (IsEqualIID(iid, IID_IADsContainer)) <br>    { <br>        *ppv = (IADsContainer FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IADs)) <br>    { <br>        *ppv = (IADs FAR *) this; <br>    } <br>    else <br>    { <br>        *ppv = NULL; <br>        return E_NOINTERFACE; <br>    } <br>    AddRef(); <br>    return NOERROR; <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSNamespace::SetInfo(THIS) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::GetInfo(THIS) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>/* IADsContainer methods */ <br> <br>STDMETHODIMP <br>CSampleDSNamespace::get_Count(long FAR* retval) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::get_Filter(THIS_ VARIANT FAR* pVar) <br>{ <br>    VariantInit(pVar); <br>    RRETURN(VariantCopy(pVar, &amp;_vFilter)); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::put_Filter(THIS_ VARIANT Var) <br>{ <br>    RRETURN(VariantCopy(&amp;_vFilter, &amp;Var)); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::put_Hints(THIS_ VARIANT Var) <br>{ <br>    RRETURN( E_NOTIMPL); <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSNamespace::get_Hints(THIS_ VARIANT FAR* pVar) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSNamespace::GetObject( <br>    THIS_ BSTR ClassName, <br>    BSTR RelativeName, <br>    IDispatch* FAR* ppObject <br>    ) <br>{ <br>    RRETURN(::RelativeGetObject(_ADsPath, <br>                                ClassName, <br>                                RelativeName, <br>                                ppObject, <br>                                TRUE)); <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSNamespace::get__NewEnum(THIS_ IUnknown * FAR* retval) <br>{ <br>    HRESULT hr; <br>    IUnknown FAR* punkEnum=NULL; <br>    IEnumVARIANT * penum = NULL; <br> <br> <br>    *retval = NULL; <br> <br>    // <br>    // Create new enumerator for items currently <br>    // in collection and QI for IUnknown <br>    // <br> <br>    hr = CSampleDSNamespaceEnum::Create( <br>                (CSampleDSNamespaceEnum **)&amp;penum, <br>                _vFilter <br>                ); <br>    if (FAILED(hr)){ <br> <br>        goto error; <br>    } <br>    hr = penum-&gt;QueryInterface( <br>                IID_IUnknown, <br>                (VOID FAR* FAR*)retval <br>                ); <br> <br>    if (FAILED(hr)){ <br>       goto error; <br>    } <br> <br>    if (penum) { <br>        penum-&gt;Release(); <br>    } <br> <br>    return NOERROR; <br> <br>error: <br> <br>    if (penum) { <br>        delete penum; <br>    } <br> <br>    return hr; <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::Create(THIS_ BSTR ClassName, BSTR RelativeName, IDispatch * FAR* ppObject) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::Delete(THIS_ BSTR SourceName, BSTR Type) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::CopyHere(THIS_ BSTR SourceName, BSTR NewName, IDispatch * FAR* ppObject) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSNamespace::MoveHere(THIS_ BSTR SourceName, BSTR NewName, IDispatch * FAR* ppObject) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br>HRESULT <br>CSampleDSNamespace::AllocateNamespaceObject(CSampleDSNamespace ** ppNamespace) <br>{ <br>    CSampleDSNamespace FAR * pNamespace = NULL; <br>    CDispatchMgr FAR * pDispMgr = NULL; <br>    HRESULT hr = S_OK; <br> <br>    pNamespace = new CSampleDSNamespace(); <br>    if (pNamespace == NULL) { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    BAIL_ON_FAILURE(hr); <br> <br>    pDispMgr = new CDispatchMgr; <br>    if (pDispMgr == NULL) { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = LoadTypeInfoEntry(pDispMgr, <br>                           LIBID_ADs, <br>                           IID_IADs, <br>                           (IADs *)pNamespace, <br>                           DISPID_REGULAR <br>                           ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = LoadTypeInfoEntry(pDispMgr, <br>                           LIBID_ADs, <br>                           IID_IADsContainer, <br>                           (IADsContainer *)pNamespace, <br>                           DISPID_NEWENUM <br>                           ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pNamespace-&gt;_pDispMgr = pDispMgr; <br>    *ppNamespace = pNamespace; <br> <br>    RRETURN(hr); <br> <br>error: <br>    delete  pDispMgr; <br> <br>    RRETURN(hr); <br> <br>} <br> <br> <br> <br>STDMETHODIMP <br>CSampleDSNamespace::Get( <br>    THIS_ BSTR bstrName, <br>    VARIANT FAR* pvProp <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br> <br>STDMETHODIMP <br>CSampleDSNamespace::Put( <br>    THIS_ BSTR bstrName, <br>    VARIANT vProp <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CORE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4678"></a>CORE.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    Core.cpp <br> <br>Abstract: <br> <br>    CCoreADsObject - Implementation <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>HRESULT <br>CCoreADsObject::InitializeCoreObject( <br>        BSTR Parent, <br>        BSTR Name, <br>        BSTR ClassName, <br>        BSTR Schema, <br>        REFCLSID rclsid, <br>        DWORD dwObjectState <br>        ) <br>{ <br>    HRESULT hr = S_OK; <br>    ADsAssert(Parent); <br>    ADsAssert(Name); <br>    ADsAssert(ClassName); <br> <br>    hr = BuildADsPath( <br>            Parent, <br>            Name, <br>            &amp;_ADsPath <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = BuildADsGuid( <br>            rclsid, <br>            &amp;_ADsGuid <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = xx_put_BSTR(&amp;_Parent, Parent); <br>    BAIL_ON_FAILURE(hr); <br> <br> <br>    hr = xx_put_BSTR(&amp;_Name, Name); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = xx_put_BSTR(&amp;_ADsClass, ClassName); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = BuildSchemaPath( <br>            _ADsPath, <br>            ClassName, <br>            &amp;_Schema <br>            ); <br>    BAIL_ON_FAILURE(hr); <br>     <br>    _dwObjectState = dwObjectState; <br> <br>error: <br>    RRETURN(hr); <br> <br>} <br> <br>CCoreADsObject::CCoreADsObject(): <br>                        _Name(NULL), <br>                        _ADsPath(NULL), <br>                        _Parent(NULL), <br>                        _ADsClass(NULL), <br>                        _Schema(NULL), <br>                        _ADsGuid(NULL), <br>                        _dwObjectState(0) <br>{ <br>} <br> <br>CCoreADsObject::~CCoreADsObject() <br>{ <br>    if (_Name) { <br>        ProvFreeString(_Name); <br>    } <br> <br>    if (_ADsPath) { <br>        ProvFreeString(_ADsPath); <br>    } <br> <br>    if (_Parent) { <br>        ProvFreeString(_Parent); <br>    } <br> <br>    if (_ADsClass) { <br>        ProvFreeString(_ADsClass); <br>    } <br> <br>    if (_Schema) { <br>        ProvFreeString(_Schema); <br>    } <br> <br>    if (_ADsGuid) { <br>        ProvFreeString(_ADsGuid); <br>    } <br> <br>} <br> <br>HRESULT <br>CCoreADsObject::get_CoreName(BSTR * retval) <br>{ <br>    HRESULT hr; <br> <br>    if (FAILED(hr = ValidateOutParameter(retval))){ <br>        RRETURN(hr); <br>    } <br> <br>    RRETURN(ProvAllocString(_Name, retval)); <br>} <br> <br> <br>HRESULT <br>CCoreADsObject::get_CoreADsPath(BSTR * retval) <br>{ <br>    HRESULT hr; <br> <br>    if (FAILED(hr = ValidateOutParameter(retval))){ <br>        RRETURN(hr); <br>    } <br> <br>    RRETURN(ProvAllocString(_ADsPath, retval)); <br> <br>} <br> <br>HRESULT <br>CCoreADsObject::get_CoreADsClass(BSTR * retval) <br>{ <br>    HRESULT hr; <br> <br>    if (FAILED(hr = ValidateOutParameter(retval))){ <br>        RRETURN(hr); <br>    } <br> <br>    RRETURN(ProvAllocString(_ADsClass, retval)); <br>} <br> <br>HRESULT <br>CCoreADsObject::get_CoreParent(BSTR * retval) <br>{ <br> <br>    HRESULT hr; <br> <br>    if (FAILED(hr = ValidateOutParameter(retval))){ <br>        RRETURN(hr); <br>    } <br> <br>    RRETURN(ProvAllocString(_Parent, retval)); <br>} <br> <br>HRESULT <br>CCoreADsObject::get_CoreSchema(BSTR * retval) <br>{ <br> <br>    HRESULT hr; <br> <br>    if (FAILED(hr = ValidateOutParameter(retval))){ <br>        RRETURN(hr); <br>    } <br> <br>    if ( _Schema == NULL || *_Schema == 0 ) <br>        RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br> <br>    RRETURN(ProvAllocString(_Schema, retval)); <br>} <br> <br>HRESULT <br>CCoreADsObject::get_CoreGUID(BSTR * retval) <br>{ <br>    HRESULT hr; <br> <br>    if (FAILED(hr = ValidateOutParameter(retval))){ <br>        RRETURN(hr); <br>    } <br> <br>    RRETURN(ProvAllocString(_ADsGuid, retval)); <br>} <br> <br>STDMETHODIMP <br>CCoreADsObject::GetInfo( <br>    BOOL fExplicit <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

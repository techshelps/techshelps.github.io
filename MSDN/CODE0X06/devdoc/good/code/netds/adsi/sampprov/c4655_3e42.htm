<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPROV.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4682"></a>CPROV.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CProv.cpp <br> <br>Abstract: <br> <br>    ADsSampleDS Provider Object <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>CSampleDSProvider::CSampleDSProvider() <br>{ <br> <br>} <br> <br>HRESULT <br>CSampleDSProvider::Create(CSampleDSProvider FAR * FAR * ppProvider) <br>{ <br>    CSampleDSProvider FAR * pProvider = NULL; <br>    HRESULT hr = S_OK; <br> <br>    //Create the Provider Object <br> <br>    pProvider = new CSampleDSProvider(); <br>    if (pProvider == NULL) { <br>        RRETURN(ResultFromScode(E_OUTOFMEMORY)); <br>    } <br> <br>    if (FAILED(hr)) { <br>        delete pProvider; <br>        RRETURN(hr); <br>    } <br> <br> <br>    *ppProvider = pProvider; <br>    RRETURN(hr); <br>} <br> <br>CSampleDSProvider::~CSampleDSProvider( ) <br>{ <br>    ENLIST_TRACKING(CSampleDSProvider); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProvider::QueryInterface(REFIID iid, LPVOID FAR* ppv) <br>{ <br>    if (IsEqualIID(iid, IID_IUnknown)) <br>    { <br>        *ppv = this; <br>    } <br>    else if (IsEqualIID(iid, IID_IParseDisplayName)) <br>    { <br>        *ppv = (IADs FAR *) this; <br>    } <br>    else <br>    { <br>        *ppv = NULL; <br>        return E_NOINTERFACE; <br>    } <br>    AddRef(); <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP <br>CSampleDSProvider::ParseDisplayName(IBindCtx* pbc, WCHAR* szDisplayName, ULONG* pchEaten, IMoniker** ppmk) <br>{ <br>    HRESULT hr; <br> <br>    *ppmk = NULL; <br> <br>    if (pchEaten != NULL){ <br>        *pchEaten = 0; <br>    } <br> <br>    hr = ResolvePathName( <br>                pbc, <br>                szDisplayName, <br>                pchEaten, <br>                ppmk <br>                ); <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSProvider::ResolvePathName(IBindCtx* pbc, <br>                WCHAR* szDisplayName, <br>                ULONG* pchEaten, <br>                IMoniker** ppmk <br>                ) <br>{ <br>    HRESULT hr; <br>    LPUNKNOWN pUnknown = NULL; <br> <br>    *pchEaten = 0; <br>    hr = GetObject(szDisplayName, (LPVOID *)&amp;pUnknown); <br>    BAIL_IF_ERROR(hr); <br> <br>    hr = CreatePointerMoniker(pUnknown, ppmk); <br>    BAIL_IF_ERROR(hr); <br> <br>    *pchEaten += wcslen(szDisplayName); <br> <br>cleanup: <br> <br>    if (pUnknown) { <br>        pUnknown-&gt;Release(); <br>    } <br> <br>    RRETURN (hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CCLSOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4657"></a>CCLSOBJ.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CClsObj.cpp <br> <br>Abstract: <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>//  Class CSampleDSClass <br> <br>DEFINE_IDispatch_Implementation(CSampleDSClass) <br>DEFINE_IADs_Implementation(CSampleDSClass) <br> <br> <br>CSampleDSClass::CSampleDSClass(): <br>      _pDispMgr( NULL ), <br>      _lpClassName(0), <br>      _dwNumberOfMandatoryAttributes(0), <br>      _lpMandatoryAttributes(0) <br> <br>{ <br>    ENLIST_TRACKING(CSampleDSClass); <br>} <br> <br>HRESULT <br>CSampleDSClass::CreateClass( <br>    BSTR Parent, <br>    BSTR CommonName, <br>    LPSampleDS_CLASS_DEF lpClassDefs, <br>    DWORD dwObjectState, <br>    REFIID riid, <br>    void **ppvObj <br>    ) <br>{ <br>    CSampleDSClass FAR * pClass = NULL; <br>    HRESULT hr = S_OK; <br> <br>    hr = AllocateClassObject(&amp;pClass); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = pClass-&gt;InitializeCoreObject( <br>                Parent, <br>                CommonName, <br>                CLASS_CLASS_NAME, <br>                L"", <br>                CLSID_SampleDSClass, <br>                dwObjectState <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = pClass-&gt;QueryInterface(riid, ppvObj); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pClass-&gt;_dwNumberOfMandatoryAttributes = <br>                    lpClassDefs-&gt;dwNumberOfMandatoryAttributes; <br>    pClass-&gt;_lpMandatoryAttributes = CreatePropertyList( <br>                                          lpClassDefs-&gt;lpMandatoryAttributes <br>                                          ); <br>     <br>    pClass-&gt;Release(); <br> <br>    RRETURN(hr); <br> <br>error: <br> <br>    delete pClass; <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSClass::CreateClass( <br>    BSTR Parent, <br>    BSTR CommonName, <br>    HANDLE hTree, <br>    DWORD dwObjectState, <br>    REFIID riid, <br>    void **ppvObj <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    LPSampleDS_CLASS_DEF lpClassDefs = NULL; <br> <br>    hr = SampleDSGetClassDefinition(&amp;lpClassDefs, <br>                                    CommonName); <br>    BAIL_ON_FAILURE(hr); <br>     <br>    if (!lpClassDefs) { <br>        hr = E_FAIL; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    hr = CSampleDSClass::CreateClass( <br>                    Parent, <br>                    CommonName, <br>                    lpClassDefs, <br>                    dwObjectState, <br>                    riid, <br>                    ppvObj <br>                    ); <br> <br>error: <br>    if (lpClassDefs) { <br>        SampleDSFreeClassDefinition(lpClassDefs, <br>                                    1); <br>    }; <br>    RRETURN(hr); <br>} <br> <br> <br>CSampleDSClass::~CSampleDSClass( ) <br>{ <br>    delete _pDispMgr; <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::QueryInterface( <br>    REFIID iid, <br>    LPVOID FAR* ppv <br>    ) <br>{ <br>    if (IsEqualIID(iid, IID_IUnknown)) <br>    { <br>        *ppv = (IADsClass FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IADsClass)) <br>    { <br>        *ppv = (IADsClass FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IADs)) <br>    { <br>        *ppv = (IADsClass FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IDispatch)) <br>    { <br>        *ppv = (IADsClass FAR *) this; <br>    } <br>    else <br>    { <br>        *ppv = NULL; <br>        return E_NOINTERFACE; <br>    } <br>    AddRef(); <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::SetInfo(THIS) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::GetInfo(THIS) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>HRESULT <br>CSampleDSClass::AllocateClassObject( <br>    CSampleDSClass ** ppClass <br>    ) <br>{ <br>    CSampleDSClass FAR * pClass = NULL; <br>    CDispatchMgr FAR * pDispMgr = NULL; <br>    HRESULT hr = S_OK; <br> <br>    pClass = new CSampleDSClass(); <br>    if (pClass == NULL) { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    BAIL_ON_FAILURE(hr); <br> <br>    pDispMgr = new CDispatchMgr; <br>    if (pDispMgr == NULL) { <br>        hr = E_OUTOFMEMORY; <br>    } <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = LoadTypeInfoEntry( <br>                pDispMgr, <br>                LIBID_ADs, <br>                IID_IADsClass, <br>                (IADsClass *)pClass, <br>                DISPID_REGULAR <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = LoadTypeInfoEntry( <br>                pDispMgr, <br>                LIBID_ADs, <br>                IID_IADsContainer, <br>                (IADsContainer *)pClass, <br>                DISPID_NEWENUM <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pClass-&gt;_pDispMgr = pDispMgr; <br>    *ppClass = pClass; <br> <br>    RRETURN(hr); <br> <br>error: <br>    delete  pDispMgr; <br> <br>    RRETURN(hr); <br> <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSClass::GetInfo( <br>    THIS_ DWORD dwApiLevel, <br>    BOOL fExplicit <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSClass::Get( <br>    THIS_ BSTR bstrName, <br>    VARIANT FAR* pvProp <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br> <br>STDMETHODIMP <br>CSampleDSClass::Put( <br>    THIS_ BSTR bstrName, <br>    VARIANT vProp <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>PPROPENTRY <br>CreatePropertyList( <br>    LPWSTR_LIST  lpStringList <br>    ) <br>{ <br>    PPROPENTRY pStart = NULL; <br>    PPROPENTRY pPropEntry = NULL; <br> <br>    while (lpStringList) { <br> <br>        pPropEntry = CreatePropertyEntry( <br>                            lpStringList-&gt;lpString, <br>                            0 <br>                            ); <br> <br>        pPropEntry-&gt;pNext = pStart; <br>        pStart = pPropEntry; <br> <br>        lpStringList = lpStringList-&gt;Next; <br>    } <br> <br>    return(pStart); <br>} <br> <br> <br>PPROPENTRY <br>CreatePropertyEntry( <br>    LPWSTR pszPropertyName, <br>    DWORD dwSyntaxId <br>    ) <br>{ <br>    LPWSTR pszTemp = NULL; <br>    PPROPENTRY pPropName = NULL; <br> <br>    pszTemp = (LPWSTR)AllocProvStr( <br>                    pszPropertyName <br>                    ); <br>    if (!pszTemp) { <br>        return(NULL); <br>    } <br> <br>    pPropName = (PPROPENTRY)AllocProvMem( <br>                        sizeof(PROPENTRY) <br>                        ); <br>    if (!pPropName) { <br>        FreeProvStr(pszTemp); <br>        return(NULL); <br>    } <br> <br>    pPropName-&gt;pszPropName = pszTemp; <br>    pPropName-&gt;dwSyntaxId = dwSyntaxId; <br> <br>    return(pPropName); <br>} <br> <br>void <br>FreePropertyEntry( <br>    PPROPENTRY pPropName <br>    ) <br>{ <br>    if (pPropName-&gt;pszPropName) { <br>        FreeProvStr(pPropName-&gt;pszPropName); <br>    } <br> <br>    FreeProvMem(pPropName); <br> <br>    return; <br>} <br> <br>HRESULT <br>MakeVariantFromPropList( <br>    PPROPENTRY pPropList, <br>    DWORD dwNumEntries, <br>    VARIANT * pVarList <br>    ) <br>{ <br>    SAFEARRAYBOUND sabNewArray; <br>    SAFEARRAY * pFilter = NULL; <br>    HRESULT hr = S_OK; <br>    DWORD dwSLBound = 0; <br>    DWORD dwSUBound = 0; <br>    DWORD i = 0; <br>    VARIANT v; <br> <br>    VariantInit(pVarList); <br> <br>    sabNewArray.cElements = dwNumEntries; <br>    sabNewArray.lLbound = 0; <br> <br>    pFilter = SafeArrayCreate( <br>                    VT_VARIANT, <br>                    1, <br>                    &amp;sabNewArray <br>                    ); <br> <br>    if (!pFilter) { <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    for (i = dwSLBound; i &lt; (dwSLBound + dwNumEntries); i++) { <br>        VariantInit(&amp;v); <br>        V_VT(&amp;v) = VT_BSTR; <br> <br>        V_BSTR(&amp;v) = SysAllocString(pPropList-&gt;pszPropName); <br> <br>        hr = SafeArrayPutElement( <br>                pFilter, <br>                (long*)&amp;i, <br>                (void *)&amp;v <br>                ); <br>        BAIL_ON_FAILURE(hr); <br> <br>        pPropList = pPropList-&gt;pNext; <br> <br>    } <br> <br>    V_VT(pVarList) = VT_ARRAY | VT_VARIANT; <br>    V_ARRAY(pVarList) = pFilter; <br> <br>    RRETURN(S_OK); <br> <br>error: <br> <br>    if (pFilter) { <br>        SafeArrayDestroy(pFilter); <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br>/* IADsClass methods */ <br> <br>STDMETHODIMP <br>CSampleDSClass::get_PrimaryInterface( THIS_ BSTR FAR *pbstrGUID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_CLSID( THIS_ BSTR FAR *pbstrCLSID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_CLSID( THIS_ BSTR bstrCLSID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_OID( THIS_ BSTR FAR *pbstrOID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_OID( THIS_ BSTR bstrOID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_Abstract( THIS_ VARIANT_BOOL FAR *pfAbstract ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_Abstract( THIS_ VARIANT_BOOL fAbstract ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_MandatoryProperties( THIS_ VARIANT FAR *pvMandatoryProperties ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    hr = MakeVariantFromPropList( <br>            _lpMandatoryAttributes, <br>            _dwNumberOfMandatoryAttributes, <br>            pvMandatoryProperties <br>            ); <br>    RRETURN(hr); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_MandatoryProperties( THIS_ VARIANT vMandatoryProperties ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_DerivedFrom( THIS_ VARIANT FAR *pvDerivedFrom ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_DerivedFrom( THIS_ VARIANT vDerivedFrom ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_Containment( THIS_ VARIANT FAR *pvContainment ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_Containment( THIS_ VARIANT vContainment ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_Container( THIS_ VARIANT_BOOL FAR *pfContainer ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_Container( THIS_ VARIANT_BOOL fContainer ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_HelpFileName( THIS_ BSTR FAR *pbstrHelpFileName ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_HelpFileName( THIS_ BSTR bstrHelpFile ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_HelpFileContext( THIS_ long FAR *plHelpContext ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_HelpFileContext( THIS_ long lHelpContext ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::Qualifiers(THIS_ IADsCollection FAR* FAR* ppQualifiers) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_Auxiliary( THIS_ VARIANT_BOOL FAR *pfAuxiliary ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_Auxiliary( THIS_ VARIANT_BOOL fAuxiliary ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_OptionalProperties( THIS_ VARIANT FAR *retval ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_OptionalProperties( THIS_ VARIANT vOptionalProperties ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_NamingProperties( THIS_ VARIANT FAR *retval ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_NamingProperties( THIS_ VARIANT vNamingProperties ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br>STDMETHODIMP <br>CSampleDSClass::get_AuxDerivedFrom( THIS_ VARIANT FAR *pvAuxDerivedFrom ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_AuxDerivedFrom( THIS_ VARIANT vAuxDerivedFrom ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::get_PossibleSuperiors( THIS_ VARIANT FAR *pvPossSuperiors) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSClass::put_PossibleSuperiors( THIS_ VARIANT vPossSuperiors ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

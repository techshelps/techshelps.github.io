<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMPTYPES.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4715"></a>SMPTYPES.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    SmpTypes.h <br> <br>Abstract: <br> <br>    Definitions for Sample DS Data Types and structures used by <br>    the SampleDS Regsitry APIs to exchange data <br>     <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#ifndef __SampleDSTYPES_H <br>#define __SampleDSTYPES_H <br> <br> <br>// Two data types are supported <br>#define SampleDS_DATATYPE_1  1 <br>#define SampleDS_DATATYPE_2  2 <br> <br>typedef struct <br>{ <br>    LPWSTR DNString; <br> <br>} SampleDS_TYPE_1, * LPSampleDS_TYPE_1; <br> <br>typedef struct <br>{ <br>    DWORD Integer; <br> <br>} SampleDS_TYPE_2, * LPSampleDS_TYPE_2; <br> <br>typedef struct _SampleDStype{ <br>    DWORD SampleDSType; <br>    union { <br>        SampleDS_TYPE_1 value_1; <br>        SampleDS_TYPE_2 value_2; <br>    }SampleDSValue; <br>}SampleDSOBJECT, *PSampleDSOBJECT, *LPSampleDSOBJECT; <br> <br>#define SampleDS_MAX_TYPE1_LEN        32 <br> <br>typedef struct WSTR_LIST_ELEM <br>{ <br>    struct WSTR_LIST_ELEM * Next; <br>    LPWSTR lpString; <br> <br>}  WSTR_LIST,* LPWSTR_LIST; <br> <br>typedef struct <br>{ <br>    LPWSTR  lpAttributeName; <br>    DWORD   dwSyntaxID; <br> <br>} SampleDS_ATTR_DEF, * LPSampleDS_ATTR_DEF; <br> <br>typedef struct <br>{ <br>    LPWSTR lpAttributeName; <br>    DWORD  dwSyntaxId; <br>    DWORD  dwNumberOfValues; <br>    LPBYTE lpValue; <br> <br>} SampleDS_ATTR_INFO, * LPSampleDS_ATTR_INFO; <br> <br>typedef struct <br>{ <br>    LPSampleDS_ATTR_INFO pAttrInfo; <br>    DWORD dwAttr; <br>} SampleDS_ATTRS_INFO, * LPSampleDS_ATTRS_INFO; <br> <br>typedef struct <br>{ <br>    LPWSTR lpObjectFullName; <br>    LPWSTR lpObjectName; <br>    LPWSTR lpObjectClass; <br> <br>} DS_OBJECT_INFO, * LPDS_OBJECT_INFO; <br> <br>typedef struct <br>{ <br>    LPWSTR lpObjectClass; <br> <br>} DS_FILTER, * LPDS_FILTER; <br> <br>typedef struct <br>{ <br>    DWORD      dwNumberOfFilters; <br>    DS_FILTER Filters[1]; <br> <br>} DS_FILTER_LIST, * LPDS_FILTER_LIST; <br> <br>typedef struct <br>{ <br>    LPWSTR  lpClassName; <br>    DWORD   dwNumberOfMandatoryAttributes; <br>    LPWSTR_LIST lpMandatoryAttributes; <br>} SampleDS_CLASS_DEF, * LPSampleDS_CLASS_DEF; <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

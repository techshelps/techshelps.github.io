<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPRPOBJ.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4686"></a>CPRPOBJ.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CPrpObj.cpp <br> <br>Abstract: <br> <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>// Class CSampleDSProperty <br> <br>DEFINE_IDispatch_Implementation(CSampleDSProperty) <br>DEFINE_IADs_Implementation(CSampleDSProperty) <br> <br>CSampleDSProperty::CSampleDSProperty() <br>    : _pDispMgr( NULL ), <br>      _bstrSyntax( NULL ) <br>{ <br> <br>    ENLIST_TRACKING(CSampleDSProperty); <br>} <br> <br>CSampleDSProperty::~CSampleDSProperty() <br>{ <br>    delete _pDispMgr; <br>} <br> <br>HRESULT <br>CSampleDSProperty::CreateProperty( <br>    BSTR   bstrParent, <br>    BSTR   bstrName, <br>    LPSampleDS_ATTR_DEF lpAttrDef, <br>    DWORD  dwObjectState, <br>    REFIID riid, <br>    void **ppvObj <br>    ) <br>{ <br>    CSampleDSProperty FAR * pProperty = NULL; <br>    HRESULT hr = S_OK; <br>    WCHAR szADsSyntax[MAX_PATH]; <br>    WCHAR szSampleDSSyntax[MAX_PATH]; <br> <br>    hr = AllocatePropertyObject( &amp;pProperty ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = pProperty-&gt;InitializeCoreObject( <br>             bstrParent, <br>             bstrName, <br>             PROPERTY_CLASS_NAME, <br>             L"", <br>             CLSID_SampleDSProperty, <br>             dwObjectState <br>             ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = pProperty-&gt;QueryInterface( riid, ppvObj ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    MapSyntaxIdtoADsSyntax( <br>            lpAttrDef-&gt;dwSyntaxID, <br>            szADsSyntax <br>            ); <br> <br>    hr = ProvAllocString( <br>                szADsSyntax, <br>                &amp;pProperty-&gt;_bstrSyntax <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    MapSyntaxIdtoSampleDSSyntax( <br>            lpAttrDef-&gt;dwSyntaxID, <br>            szSampleDSSyntax <br>            ); <br>     <br>    pProperty-&gt;Release(); <br> <br>    RRETURN(hr); <br> <br>error: <br> <br>    delete pProperty; <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSProperty::CreateProperty( <br>    BSTR   bstrParent, <br>    BSTR   bstrName, <br>    HANDLE hTree, <br>    DWORD  dwObjectState, <br>    REFIID riid, <br>    void **ppvObj <br>    ) <br>{ <br>    DWORD dwStatus = 0; <br>    HRESULT hr = S_OK; <br>    LPSampleDS_ATTR_DEF lpAttrDefs = NULL; <br>    DWORD dwNumberOfEntries = 0; <br>    DWORD dwInfoType = 0; <br>    HANDLE hOperationData = NULL; <br>    hr = SampleDSGetPropertyDefinition(&amp;lpAttrDefs, <br>                                       bstrName); <br>    BAIL_ON_FAILURE(hr); <br> <br>    if (!lpAttrDefs) { <br>        hr = E_FAIL; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    hr = CSampleDSProperty::CreateProperty( <br>                bstrParent, <br>                bstrName, <br>                lpAttrDefs, <br>                dwObjectState, <br>                riid, <br>                ppvObj <br>                ); <br>error: <br>    if (lpAttrDefs) <br>        SampleDSFreePropertyDefinition(lpAttrDefs, <br>                                       1 <br>                                      ); <br>    RRETURN(hr); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::QueryInterface( <br>    REFIID iid, <br>    LPVOID FAR* ppv <br>    ) <br>{ <br>    if (IsEqualIID(iid, IID_IUnknown)) <br>    { <br>        *ppv = (IADsProperty FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IDispatch)) <br>    { <br>        *ppv = (IADsProperty FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IADsProperty)) <br>    { <br>        *ppv = (IADsProperty FAR *) this; <br>    } <br>    else if (IsEqualIID(iid, IID_IADs)) <br>    { <br>        *ppv = (IADsProperty FAR *) this; <br>    } <br>    else <br>    { <br>        *ppv = NULL; <br>        return E_NOINTERFACE; <br>    } <br> <br>    AddRef(); <br>    return NOERROR; <br>} <br> <br>/* IADs methods */ <br> <br>STDMETHODIMP <br>CSampleDSProperty::SetInfo(THIS) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::GetInfo(THIS) <br>{ <br>    RRETURN(S_OK); <br>} <br> <br> <br>HRESULT <br>CSampleDSProperty::AllocatePropertyObject( <br>    CSampleDSProperty FAR * FAR * ppProperty <br>    ) <br>{ <br>    CSampleDSProperty FAR *pProperty = NULL; <br>    CDispatchMgr FAR *pDispMgr = NULL; <br>    HRESULT hr = S_OK; <br> <br>    pProperty = new CSampleDSProperty(); <br>    if ( pProperty == NULL ) <br>        hr = E_OUTOFMEMORY; <br>    BAIL_ON_FAILURE(hr); <br> <br>    pDispMgr = new CDispatchMgr; <br>    if ( pDispMgr == NULL ) <br>        hr = E_OUTOFMEMORY; <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = LoadTypeInfoEntry( <br>            pDispMgr, <br>            LIBID_ADs, <br>            IID_IADsProperty, <br>            (IADsProperty *) pProperty, <br>            DISPID_REGULAR <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pProperty-&gt;_pDispMgr = pDispMgr; <br>    *ppProperty = pProperty; <br> <br>    RRETURN(hr); <br> <br>error: <br> <br>    delete pDispMgr; <br>    delete pProperty; <br> <br>    RRETURN(hr); <br> <br>} <br> <br> <br>STDMETHODIMP <br>CSampleDSProperty::Get( <br>    THIS_ BSTR bstrName, <br>    VARIANT FAR* pvProp <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br> <br>STDMETHODIMP <br>CSampleDSProperty::Put( <br>    THIS_ BSTR bstrName, <br>    VARIANT vProp <br>    ) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br> <br> <br>HRESULT <br>MapSyntaxIdtoADsSyntax( <br>    DWORD dwSyntaxId, <br>    LPWSTR pszADsSyntax <br>    ) <br>{ <br> <br>    if (dwSyntaxId &gt; g_cSampleDSSyntaxMap) { <br>        wcscpy(pszADsSyntax, L"Out of Bounds"); <br>    }else { <br>        wcscpy(pszADsSyntax, g_aSampleDSSyntaxMap[dwSyntaxId - 1].bstrName); <br>    } <br>    RRETURN(S_OK); <br> <br>} <br> <br>HRESULT <br>MapSyntaxIdtoSampleDSSyntax( <br>    DWORD dwSyntaxId, <br>    LPWSTR pszSampleDSSyntax <br>    ) <br>{ <br> <br>    if (dwSyntaxId &gt; g_cSampleDSSyntaxMap) { <br>        wcscpy(pszSampleDSSyntax, L"Out of Bounds"); <br>    }else { <br>        wcscpy(pszSampleDSSyntax, g_aSampleDSSyntaxMap[dwSyntaxId - 1].bstrSampleDSName); <br>    } <br>    RRETURN(S_OK); <br> <br>} <br>/* IADsProperty methods */ <br> <br>STDMETHODIMP <br>CSampleDSProperty::get_OID( THIS_ BSTR FAR *pbstrOID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::put_OID( THIS_ BSTR bstrOID ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::get_Syntax( THIS_ BSTR FAR *pbstrSyntax ) <br>{ <br>    if ( !pbstrSyntax ) <br>        RRETURN(E_ADS_BAD_PARAMETER); <br> <br>    RRETURN( ProvAllocString( _bstrSyntax, pbstrSyntax )); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::put_Syntax( THIS_ BSTR bstrSyntax ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::get_MaxRange( THIS_ long FAR *plMaxRange ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::put_MaxRange( THIS_ long lMaxRange ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::get_MinRange( THIS_ long FAR *plMinRange ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::put_MinRange( THIS_ long lMinRange ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::get_MultiValued( THIS_ VARIANT_BOOL FAR *pfMultiValued ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::put_MultiValued( THIS_ VARIANT_BOOL fMultiValued ) <br>{ <br>    RRETURN(E_ADS_PROPERTY_NOT_SUPPORTED); <br>} <br> <br>STDMETHODIMP <br>CSampleDSProperty::Qualifiers(THIS_ IADsCollection FAR* FAR* ppQualifiers) <br>{ <br>    RRETURN(E_NOTIMPL); <br>} <br>     </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMPOPER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4713"></a>SMPOPER.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    SmpOper.cpp <br> <br>Abstract: <br> <br>    SampleDS DataType Operation routines  <br>     <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br> <br>HRESULT <br>SampleDSTypeFreeSampleDSSynId1( <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    FreeProvStr(lpSampleDSDestObject-&gt;SampleDSValue.value_1.DNString); <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>SampleDSTypeFreeSampleDSSynId2( <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    // <br>    // Do nothing - Integer <br>    // <br> <br>    RRETURN(hr); <br> <br>} <br> <br>HRESULT <br>SampleDSTypeClear( <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    switch (lpSampleDSDestObject-&gt;SampleDSType) { <br>    case 1: <br>        hr = SampleDSTypeFreeSampleDSSynId1( <br>                lpSampleDSDestObject <br>                ); <br>        break; <br>    case 2: <br>        hr = SampleDSTypeFreeSampleDSSynId2( <br>                lpSampleDSDestObject <br>                ); <br>        break; <br> <br> <br>    default: <br>        hr = E_FAIL; <br>        break; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br>void <br>SampleDSTypeFreeSampleDSObjects( <br>    PSampleDSOBJECT pSampleDSObject, <br>    DWORD dwNumValues <br>    ) <br>{ <br>    DWORD i = 0; <br> <br>    for (i = 0; i &lt; dwNumValues; i++ ) { <br>         SampleDSTypeClear(pSampleDSObject + i); <br>    } <br> <br>    FreeProvMem(pSampleDSObject); <br> <br>    return; <br>} <br> <br> <br>HRESULT <br>SampleDSTypeCopySampleDSSynId1( <br>    PSampleDSOBJECT lpSampleDSSrcObject, <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    lpSampleDSDestObject-&gt;SampleDSType = lpSampleDSSrcObject-&gt;SampleDSType; <br> <br>    lpSampleDSDestObject-&gt;SampleDSValue.value_1.DNString = <br>                    (LPWSTR)AllocProvStr( <br>                            lpSampleDSSrcObject-&gt;SampleDSValue.value_1.DNString <br>                            ); <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>SampleDSTypeCopySampleDSSynId2( <br>    PSampleDSOBJECT lpSampleDSSrcObject, <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    lpSampleDSDestObject-&gt;SampleDSType = lpSampleDSSrcObject-&gt;SampleDSType; <br> <br> <br>    lpSampleDSDestObject-&gt;SampleDSValue.value_2.Integer = <br>                        lpSampleDSSrcObject-&gt;SampleDSValue.value_2.Integer; <br> <br>    RRETURN(hr); <br> <br>} <br> <br>HRESULT <br>SampleDSTypeCopy( <br>    PSampleDSOBJECT lpSampleDSSrcObject, <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    switch (lpSampleDSSrcObject-&gt;SampleDSType) { <br>    case 1: <br>        hr = SampleDSTypeCopySampleDSSynId1( <br>                lpSampleDSSrcObject, <br>                lpSampleDSDestObject <br>                ); <br>        break; <br>    case 2: <br>        hr = SampleDSTypeCopySampleDSSynId2( <br>                lpSampleDSSrcObject, <br>                lpSampleDSDestObject <br>                ); <br>        break; <br> <br> <br>    default: <br>        hr = E_FAIL; <br>        break; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br> <br> <br>HRESULT <br>SampleDSTypeCopyConstruct( <br>    LPSampleDSOBJECT pSampleDSSrcObjects, <br>    DWORD dwNumObjects, <br>    LPSampleDSOBJECT * ppSampleDSDestObjects <br>    ) <br>{ <br> <br>    DWORD i = 0; <br>    LPSampleDSOBJECT pSampleDSDestObjects = NULL; <br>    HRESULT hr = S_OK; <br> <br>    pSampleDSDestObjects = (LPSampleDSOBJECT)AllocProvMem( <br>                                    dwNumObjects * sizeof(SampleDSOBJECT) <br>                                    ); <br> <br>    if (!pSampleDSDestObjects) { <br>        RRETURN(E_FAIL); <br>    } <br> <br>     for (i = 0; i &lt; dwNumObjects; i++ ) { <br>         hr = SampleDSTypeCopy(pSampleDSSrcObjects + i,  <br>                               pSampleDSDestObjects + i <br>                               ); <br>     } <br> <br>     *ppSampleDSDestObjects = pSampleDSDestObjects; <br> <br>     RRETURN(S_OK); <br> <br>} <br> <br>HRESULT <br>UnMarshallSampleDSToSampleDSSynId( <br>    DWORD dwSyntaxId, <br>    DWORD dwNumValues, <br>    LPBYTE lpValue, <br>    PSampleDSOBJECT * ppSampleDSObject <br>    ) <br>{ <br>    LPBYTE lpByte = lpValue; <br>    DWORD  i = 0; <br>    PSampleDSOBJECT pSampleDSObject = NULL; <br> <br>    pSampleDSObject = (PSampleDSOBJECT)AllocProvMem( <br>                            dwNumValues * sizeof(SampleDSOBJECT) <br>                            ); <br> <br>    if (!pSampleDSObject) { <br>        RRETURN(E_FAIL); <br>    } <br> <br> <br>    for (i = 0; i &lt; dwNumValues; i++) { <br> <br>        lpByte = CopySampleDSToSampleDSSynId( <br>                         dwSyntaxId, <br>                         lpByte, <br>                         (pSampleDSObject + i) <br>                         ); <br> <br>    } <br> <br>    *ppSampleDSObject = pSampleDSObject; <br> <br>    RRETURN(S_OK); <br>} <br> <br>LPBYTE <br>CopySampleDS1ToSampleDSSynId1( <br>    LPBYTE lpByte, <br>    PSampleDSOBJECT lpSampleDSObject <br>    ) <br>{ <br>    LPSampleDS_TYPE_1 lpData_1 = (LPSampleDS_TYPE_1) lpByte; <br> <br>    lpSampleDSObject-&gt;SampleDSType = 1; <br> <br>    lpSampleDSObject-&gt;SampleDSValue.value_1.DNString = <br>                    (LPWSTR)AllocProvStr(lpData_1-&gt;DNString); <br> <br>    lpByte = (LPBYTE ) lpData_1 + sizeof(SampleDS_TYPE_1); <br> <br>    return(lpByte); <br>} <br>        <br>LPBYTE <br>CopySampleDS2ToSampleDSSynId2( <br>    LPBYTE lpByte, <br>    PSampleDSOBJECT lpSampleDSObject <br>    ) <br> <br>{ <br>    LPSampleDS_TYPE_2 lpData_2 = (LPSampleDS_TYPE_2) lpByte; <br> <br>    lpSampleDSObject-&gt;SampleDSType = 2; <br> <br>    lpSampleDSObject-&gt;SampleDSValue.value_2.Integer = lpData_2-&gt;Integer; <br> <br>    lpByte = (LPBYTE ) lpData_2 + sizeof(SampleDS_TYPE_2); <br> <br>    return(lpByte); <br>} <br> <br>LPBYTE <br>CopySampleDSToSampleDSSynId( <br>    DWORD dwSyntaxId, <br>    LPBYTE lpByte, <br>    PSampleDSOBJECT lpSampleDSObject <br>    ) <br>{ <br>    switch (dwSyntaxId) { <br>    case 1: <br>        lpByte = CopySampleDS1ToSampleDSSynId1( <br>                         lpByte, <br>                         lpSampleDSObject <br>                         ); <br>        break; <br>    case 2: <br>        lpByte = CopySampleDS2ToSampleDSSynId2( <br>                         lpByte, <br>                         lpSampleDSObject <br>                         ); <br>        break; <br> <br>    default: <br>        break; <br> <br>    } <br> <br>    return(lpByte); <br>} <br> <br>HRESULT <br>MarshallSampleDSSynIdToSampleDS( <br>    DWORD dwSyntaxId, <br>    PSampleDSOBJECT pSampleDSObject, <br>    DWORD dwNumValues, <br>    LPBYTE lpValue <br>    ) <br>{ <br> <br>    DWORD  i = 0; <br> <br> <br>    for (i = 0; i &lt; dwNumValues; i++) { <br> <br>        lpValue = CopySampleDSSynIdToSampleDS( <br>                         dwSyntaxId, <br>                         lpValue, <br>                         (pSampleDSObject + i) <br>                         ); <br> <br>    } <br> <br>    RRETURN(S_OK); <br>} <br> <br>LPBYTE <br>CopySampleDSSynId1ToSampleDS1( <br>    LPBYTE lpByte, <br>    PSampleDSOBJECT lpSampleDSObject <br>    ) <br>{ <br>    LPSampleDS_TYPE_1 lpData_1 = (LPSampleDS_TYPE_1) lpByte; <br> <br>    lpData_1-&gt;DNString = <br>                (LPWSTR)AllocProvStr( <br>                        lpSampleDSObject-&gt;SampleDSValue.value_1.DNString <br>                        ); <br> <br>    lpByte = (LPBYTE ) lpData_1 + sizeof(SampleDS_TYPE_1); <br> <br>    return(lpByte); <br> <br>} <br> <br>LPBYTE <br>CopySampleDSSynId2ToSampleDS2( <br>    LPBYTE lpByte, <br>    PSampleDSOBJECT lpSampleDSObject <br>    ) <br> <br>{ <br>    LPSampleDS_TYPE_2 lpData_2 = (LPSampleDS_TYPE_2) lpByte; <br> <br> <br>    lpData_2-&gt;Integer = lpSampleDSObject-&gt;SampleDSValue.value_2.Integer; <br> <br>    lpByte = (LPBYTE ) lpData_2 + sizeof(SampleDS_TYPE_2); <br> <br>    return(lpByte); <br>} <br> <br> <br>LPBYTE <br>CopySampleDSSynIdToSampleDS( <br>    DWORD dwSyntaxId, <br>    LPBYTE lpByte, <br>    PSampleDSOBJECT lpSampleDSObject <br>    ) <br>{ <br>    switch (dwSyntaxId) { <br>    case 1: <br>        lpByte = CopySampleDSSynId1ToSampleDS1( <br>                         lpByte, <br>                         lpSampleDSObject <br>                         ); <br>        break; <br> <br>    case 2: <br>        lpByte = CopySampleDSSynId2ToSampleDS2( <br>                         lpByte, <br>                         lpSampleDSObject <br>                         ); <br>        break; <br> <br>    default: <br>        break; <br> <br>    } <br> <br>    return(lpByte); <br>} <br> <br> <br>void <br>VarTypeFreeVarObjects( <br>    VARIANT *pVarObject, <br>    DWORD dwNumValues <br>    ) <br>{ <br>    DWORD i = 0; <br> <br>    for (i = 0; i &lt; dwNumValues; i++ ) { <br>         VariantClear(pVarObject + i); <br>    } <br> <br>    FreeProvMem(pVarObject); <br> <br>    return; <br>} <br> <br> <br>HRESULT <br>SampleDSTypeToVarTypeCopySampleDSSynId1( <br>    PSampleDSOBJECT lpSampleDSSrcObject, <br>    VARIANT *lpVarDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    lpVarDestObject-&gt;vt = VT_BSTR; <br> <br>    hr = ProvAllocString( <br>            lpSampleDSSrcObject-&gt;SampleDSValue.value_1.DNString, <br>            &amp;(lpVarDestObject-&gt;bstrVal) <br>            ); <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>SampleDSTypeToVarTypeCopySampleDSSynId2( <br>    PSampleDSOBJECT lpSampleDSSrcObject, <br>    PVARIANT lpVarDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    lpVarDestObject-&gt;vt = VT_I4; <br> <br>    lpVarDestObject-&gt;lVal = <br>                lpSampleDSSrcObject-&gt;SampleDSValue.value_2.Integer; <br> <br>    RRETURN(hr); <br> <br>} <br> <br> <br>HRESULT <br>SampleDSTypeToVarTypeCopy( <br>    PSampleDSOBJECT lpSampleDSSrcObject, <br>    VARIANT* lpVarDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    switch (lpSampleDSSrcObject-&gt;SampleDSType) { <br>    case 1: <br>        hr = SampleDSTypeToVarTypeCopySampleDSSynId1( <br>                lpSampleDSSrcObject, <br>                lpVarDestObject <br>                ); <br>        break; <br>    case 2: <br>        hr = SampleDSTypeToVarTypeCopySampleDSSynId2( <br>                lpSampleDSSrcObject, <br>                lpVarDestObject <br>                ); <br>        break; <br> <br> <br>    default: <br>        hr = E_FAIL; <br>        break; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>SampleDSTypeToVarTypeCopyConstruct( <br>    LPSampleDSOBJECT pSampleDSSrcObjects, <br>    DWORD dwNumObjects, <br>    VARIANT *pVarDestObjects <br>    ) <br>{ <br>    long i = 0; <br>    HRESULT hr = S_OK; <br> <br>    VariantInit(pVarDestObjects); <br> <br>    if ( dwNumObjects == 1 ) <br>    { <br>        hr = SampleDSTypeToVarTypeCopy( pSampleDSSrcObjects, <br>                                   pVarDestObjects ); <br> <br>        RRETURN(hr); <br>    } <br> <br>    // <br>    // The following are for handling are multi-value properties <br>    // <br> <br>    SAFEARRAY *aList = NULL; <br>    SAFEARRAYBOUND aBound; <br> <br>    aBound.lLbound = 0; <br>    aBound.cElements = dwNumObjects; <br> <br>    aList = SafeArrayCreate( VT_VARIANT, 1, &amp;aBound ); <br> <br>    if ( aList == NULL ) <br>    { <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    for ( i = 0; i &lt; (long) dwNumObjects; i++ ) <br>    { <br>        VARIANT v; <br> <br>        VariantInit(&amp;v); <br>        hr = SampleDSTypeToVarTypeCopy( pSampleDSSrcObjects + i, <br>                                   &amp;v ); <br>        BAIL_ON_FAILURE(hr); <br> <br>        hr = SafeArrayPutElement( aList, &amp;i, &amp;v ); <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    V_VT(pVarDestObjects) = VT_ARRAY | VT_VARIANT; <br>    V_ARRAY(pVarDestObjects) = aList; <br> <br>    RRETURN(S_OK); <br> <br>error: <br> <br>    if ( aList ) <br>        SafeArrayDestroy( aList ); <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>VarTypeToSampleDSTypeCopySampleDSSynId1( <br>    PVARIANT lpVarSrcObject, <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    if(lpVarSrcObject-&gt;vt != VT_BSTR){ <br>        RRETURN(hr = E_ADS_CANT_CONVERT_DATATYPE); <br>    } <br> <br>    lpSampleDSDestObject-&gt;SampleDSType = 1; <br> <br>    lpSampleDSDestObject-&gt;SampleDSValue.value_1.DNString = <br>                        AllocProvStr( <br>                            lpVarSrcObject-&gt;bstrVal <br>                        ); <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>VarTypeToSampleDSTypeCopySampleDSSynId2( <br>    PVARIANT lpVarSrcObject, <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    if(lpVarSrcObject-&gt;vt != VT_I4){ <br>        RRETURN(hr = E_ADS_CANT_CONVERT_DATATYPE); <br>    } <br> <br>    lpSampleDSDestObject-&gt;SampleDSType = 2; <br> <br>    lpSampleDSDestObject-&gt;SampleDSValue.value_2.Integer = <br>                        lpVarSrcObject-&gt;lVal; <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>VarTypeToSampleDSTypeCopy( <br>    DWORD dwSampleDSType, <br>    PVARIANT lpVarSrcObject, <br>    PSampleDSOBJECT lpSampleDSDestObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    switch (dwSampleDSType){ <br>    case 1: <br>        hr = VarTypeToSampleDSTypeCopySampleDSSynId1( <br>                lpVarSrcObject, <br>                lpSampleDSDestObject <br>                ); <br>        break; <br> <br>    case 2: <br>        hr = VarTypeToSampleDSTypeCopySampleDSSynId2( <br>                lpVarSrcObject, <br>                lpSampleDSDestObject <br>                ); <br>        break; <br>    default: <br>        hr = E_FAIL; <br>        break; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br> <br> <br>HRESULT <br>VarTypeToSampleDSTypeCopyConstruct( <br>    DWORD dwSampleDSType, <br>    LPVARIANT pVarSrcObjects, <br>    DWORD dwNumObjects, <br>    LPSampleDSOBJECT * ppSampleDSDestObjects <br>    ) <br>{ <br> <br>    DWORD i = 0; <br>    LPSampleDSOBJECT pSampleDSDestObjects = NULL; <br>    HRESULT hr = S_OK; <br> <br>    pSampleDSDestObjects = (LPSampleDSOBJECT)AllocProvMem( <br>                                    dwNumObjects * sizeof(SampleDSOBJECT) <br>                                    ); <br> <br>    if (!pSampleDSDestObjects) { <br>        RRETURN(E_FAIL); <br>    } <br> <br>     for (i = 0; i &lt; dwNumObjects; i++ ) { <br>         hr = VarTypeToSampleDSTypeCopy( <br>                    dwSampleDSType, <br>                    pVarSrcObjects + i, <br>                    pSampleDSDestObjects + i <br>                    ); <br>         BAIL_ON_FAILURE(hr); <br> <br>     } <br> <br>     *ppSampleDSDestObjects = pSampleDSDestObjects; <br> <br>     RRETURN(S_OK); <br> <br>error: <br> <br>     if (pSampleDSDestObjects) { <br> <br>        SampleDSTypeFreeSampleDSObjects( <br>                pSampleDSDestObjects, <br>                dwNumObjects <br>                ); <br>     } <br> <br>     *ppSampleDSDestObjects = NULL; <br> <br>     RRETURN(hr); <br>} <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

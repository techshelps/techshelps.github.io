<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CENUMVAR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4667"></a>CENUMVAR.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CEnumVar.cpp <br> <br>Abstract: <br> <br>    Base Implementation for xxxEnumVariant derived classes <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::CSampleDSEnumVariant <br>// <br>//  Synopsis: <br>// <br>// <br>//  Arguments: <br>// <br>// <br>//  Returns: <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>CSampleDSEnumVariant::CSampleDSEnumVariant() <br>{ <br>    // <br>    // Set the reference count on the enumerator. <br>    // <br>    m_cRef = 1; <br> <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::~CSampleDSEnumVariant <br>// <br>//  Synopsis: <br>// <br>// <br>//  Arguments: <br>// <br>//  Returns: <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>CSampleDSEnumVariant::~CSampleDSEnumVariant() <br>{ <br>    // <br>    // Bump down the reference count on the Collection object <br>    // <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::QueryInterface <br>// <br>//  Synopsis: <br>// <br>//  Arguments:  [iid] <br>//              [ppv] <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP <br>CSampleDSEnumVariant::QueryInterface(REFIID iid, void FAR* FAR* ppv) <br>{ <br>    *ppv = NULL; <br> <br>    if (iid == IID_IUnknown || iid == IID_IEnumVARIANT) { <br> <br>        *ppv = this; <br> <br>    } <br>    else { <br> <br>        return ResultFromScode(E_NOINTERFACE); <br>    } <br> <br>    AddRef(); <br>    return NOERROR; <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::AddRef <br>// <br>//  Synopsis: <br>// <br>//  Arguments: <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP_(ULONG) <br>CSampleDSEnumVariant::AddRef(void) <br>{ <br> <br>    return ++m_cRef; <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::Release <br>// <br>//  Synopsis: <br>// <br>// <br>//  Arguments:  [void] <br>// <br>//  Returns: <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP_(ULONG) <br>CSampleDSEnumVariant::Release(void) <br>{ <br> <br> <br>    if(--m_cRef == 0){ <br> <br>        delete this; <br>        return 0; <br>    } <br> <br>    return m_cRef; <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::Skip <br>// <br>//  Synopsis: <br>// <br>//  Arguments:  [cElements] <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP <br>CSampleDSEnumVariant::Skip(ULONG cElements) <br>{ <br> <br>    RRETURN(ResultFromScode(E_FAIL)); <br> <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::Reset <br>// <br>//  Synopsis: <br>// <br>//  Arguments:  [] <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP <br>CSampleDSEnumVariant::Reset() <br>{ <br> <br>    RRETURN(ResultFromScode(S_OK)); <br>} <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSEnumVariant::Clone <br>// <br>//  Synopsis: <br>// <br>//  Arguments:  [pCollection] <br>//              [ppEnumVariant] <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP <br>CSampleDSEnumVariant::Clone(IEnumVARIANT FAR* FAR* ppenum) <br>{ <br>    RRETURN(ResultFromScode(E_FAIL)); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4703"></a>OBJECT.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    Object.cpp <br> <br>Abstract: <br> <br>    ObjectTypeList class <br>     <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>ObjectTypeList::ObjectTypeList() <br>{ <br>    _pObjList = NULL; <br>    _dwCurrentIndex = 0; <br>    _dwMaxElements = 0; <br>    _dwUBound  = 0; <br>    _dwLBound = 0; <br> <br>} <br> <br>HRESULT <br>ObjectTypeList::CreateObjectTypeList( <br>    VARIANT vFilter, <br>    ObjectTypeList ** ppObjectTypeList <br>){ <br>    ObjectTypeList * pObjectTypeList = NULL; <br>    HRESULT hr = S_OK; <br> <br>    pObjectTypeList = new ObjectTypeList; <br> <br>    if (!pObjectTypeList) { <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    hr = BuildObjectArray( <br>            vFilter, <br>            &amp;pObjectTypeList-&gt;_pObjList, <br>            &amp;pObjectTypeList-&gt;_dwMaxElements <br>            ); <br> <br>    if (FAILED(hr)) { <br> <br>        hr = BuildDefaultObjectArray( <br>                gpFilters, <br>                gdwMaxFilters, <br>                &amp;pObjectTypeList-&gt;_pObjList, <br>                &amp;pObjectTypeList-&gt;_dwMaxElements <br>                ); <br> <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    hr = SafeArrayGetUBound( <br>                pObjectTypeList-&gt;_pObjList, <br>                1, <br>                (long FAR *)&amp;pObjectTypeList-&gt;_dwUBound <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = SafeArrayGetLBound( <br>                pObjectTypeList-&gt;_pObjList, <br>                1, <br>                (long FAR *)&amp;pObjectTypeList-&gt;_dwLBound <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pObjectTypeList-&gt;_dwCurrentIndex = pObjectTypeList-&gt;_dwLBound; <br> <br>    *ppObjectTypeList = pObjectTypeList; <br> <br>    RRETURN(S_OK); <br> <br> <br>error: <br>    if (pObjectTypeList) { <br>        delete pObjectTypeList; <br>    } <br>    RRETURN(hr); <br> <br>} <br> <br> <br>ObjectTypeList::~ObjectTypeList() <br>{ <br>    HRESULT hr = S_OK; <br>    if (_pObjList) { <br>        hr = SafeArrayDestroy(_pObjList); <br>    } <br>} <br> <br> <br>HRESULT <br>ObjectTypeList::GetCurrentObject(PDWORD pdwObject) <br>{ <br>    HRESULT hr = S_OK; <br> <br>    if (_dwCurrentIndex &gt; _dwUBound) { <br>        return(E_FAIL); <br>    } <br> <br>    hr = SafeArrayGetElement( <br>                    _pObjList, <br>                    (long FAR *)&amp;_dwCurrentIndex, <br>                    (void *)pdwObject <br>                    ); <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>ObjectTypeList::Next() <br>{ <br>    HRESULT hr = S_OK; <br> <br>    _dwCurrentIndex++; <br> <br>    if (_dwCurrentIndex &gt; _dwUBound) { <br>        return(E_FAIL); <br>    } <br> <br>    return(hr); <br>} <br> <br> <br> <br>HRESULT <br>ObjectTypeList::Reset() <br>{ <br>    HRESULT hr = S_OK; <br> <br>    return(hr); <br> <br>} <br> <br> <br>HRESULT <br>IsValidFilter( <br>    LPWSTR ObjectName, <br>    DWORD *pdwFilterId, <br>    PFILTERS pFilters, <br>    DWORD dwMaxFilters <br>){ <br> <br>    DWORD i = 0; <br> <br>    for (i = 0; i &lt; dwMaxFilters; i++) { <br> <br>        if (!_wcsicmp(ObjectName, (pFilters + i)-&gt;szObjectName)) { <br>            *pdwFilterId = (pFilters + i)-&gt;dwFilterId; <br>            RRETURN(S_OK); <br>        } <br> <br>    } <br>    *pdwFilterId = 0; <br>    RRETURN(E_FAIL); <br>} <br> <br> <br> <br>HRESULT <br>BuildDefaultObjectArray( <br>    PFILTERS  pFilters, <br>    DWORD dwMaxFilters, <br>    SAFEARRAY ** ppFilter, <br>    DWORD * pdwNumElements <br>){ <br>    DWORD i; <br>    HRESULT hr = S_OK; <br>    SAFEARRAYBOUND sabNewArray; <br>    SAFEARRAY * pFilter = NULL; <br> <br>    sabNewArray.cElements = dwMaxFilters; <br>    sabNewArray.lLbound =  0; <br> <br>    pFilter =   SafeArrayCreate( <br>                        VT_I4, <br>                        1, <br>                        &amp;sabNewArray <br>                        ); <br>    if (!pFilter){ <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    for (i = 0; i &lt; dwMaxFilters; i++) { <br> <br>        hr = SafeArrayPutElement( <br>                pFilter, <br>                (long *)&amp;i, <br>                (void *)&amp;((pFilters + i)-&gt;dwFilterId) <br>            ); <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    *ppFilter = pFilter; <br>    *pdwNumElements = dwMaxFilters; <br> <br>    RRETURN(S_OK); <br> <br>error: <br>    if (pFilter) { <br>        SafeArrayDestroy(pFilter); <br>    } <br> <br>    *ppFilter = NULL; <br>    *pdwNumElements = 0; <br>    RRETURN(hr); <br>} <br> <br> <br> <br>HRESULT <br>BuildObjectArray( <br>    VARIANT var, <br>    SAFEARRAY ** ppFilter, <br>    DWORD * pdwNumElements <br>){ <br>    LONG uDestCount = 0; <br>    LONG dwSLBound = 0; <br>    LONG dwSUBound = 0; <br>    VARIANT v; <br>    LONG i; <br>    HRESULT hr = S_OK; <br>    SAFEARRAYBOUND sabNewArray; <br>    DWORD dwFilterId; <br>    SAFEARRAY * pFilter = NULL; <br> <br>    if(!((V_VT(&amp;var) &amp;  VT_VARIANT) &amp;&amp;  V_ISARRAY(&amp;var))) { <br>        RRETURN(E_FAIL); <br>    } <br> <br>    // <br>    // Check that there is only one dimension in this array <br>    // <br> <br>    if ((V_ARRAY(&amp;var))-&gt;cDims != 1) { <br>        hr = E_FAIL; <br>        BAIL_ON_FAILURE(hr); <br>    } <br>    // <br>    // Check that there is atleast one element in this array <br>    // <br> <br>    if ((V_ARRAY(&amp;var))-&gt;rgsabound[0].cElements == 0){ <br>        hr = E_FAIL; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    // <br>    // We know that this is a valid single dimension array <br>    // <br> <br>    hr = SafeArrayGetLBound(V_ARRAY(&amp;var), <br>                            1, <br>                            (long FAR *)&amp;dwSLBound <br>                            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = SafeArrayGetUBound(V_ARRAY(&amp;var), <br>                            1, <br>                            (long FAR *)&amp;dwSUBound <br>                            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    sabNewArray.cElements = dwSUBound - dwSLBound + 1; <br>    sabNewArray.lLbound = dwSLBound; <br> <br>    pFilter = SafeArrayCreate( <br>                    VT_I4, <br>                    1, <br>                    &amp;sabNewArray <br>                    ); <br> <br> <br>    if (!pFilter) { <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    for (i = dwSLBound; i &lt;= dwSUBound; i++) { <br>        VariantInit(&amp;v); <br>        hr = SafeArrayGetElement(V_ARRAY(&amp;var), <br>                                (long FAR *)&amp;i, <br>                                &amp;v <br>                                ); <br>        if (FAILED(hr)) { <br>            continue; <br>        } <br> <br> <br>        hr = IsValidFilter( <br>                V_BSTR(&amp;v), <br>                &amp;dwFilterId, <br>                gpFilters, <br>                gdwMaxFilters <br>                ); <br> <br>        if (FAILED(hr)) { <br>            continue; <br>        } <br> <br>        hr = SafeArrayPutElement( <br>                pFilter, <br>                (long*)&amp;uDestCount, <br>                (void *)&amp;dwFilterId <br>                ); <br> <br>        if(FAILED(hr)){ <br>            continue; <br>        } <br> <br>        uDestCount++; <br> <br>    } <br> <br>    // <br>    // There was nothing of value that could be retrieved from the <br>    // filter. <br>    // <br> <br>    if (!uDestCount ) { <br>        hr = E_FAIL; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br> <br>    *pdwNumElements  = uDestCount; <br>    *ppFilter = pFilter; <br> <br>    RRETURN(S_OK); <br> <br>error: <br> <br>    if (pFilter) { <br> <br>        SafeArrayDestroy(pFilter); <br>    } <br>    *ppFilter = NULL; <br>    *pdwNumElements = 0; <br>    RRETURN(hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LIBMAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4698"></a>LIBMAIN.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    LibMain.cpp <br> <br>Abstract: <br> <br>    LibMain for ADsSmp.dll <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br> <br>//  Globals <br>HINSTANCE g_hInst = NULL; <br> <br>ULONG g_ulObjCount = 0L;        // Number of objects alive in adssmp.dll <br>ULONG g_ulLockCount = 0L;       // Number of server locks on adssmp.dll <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Macro that calculates the number of elements in a statically-defined <br>//  array. <br>//------------------------------------------------------------------------- <br>#define ARRAY_SIZE(_a)  (sizeof(_a) / sizeof(_a[0])) <br> <br>//+------------------------------------------------------------------------ <br>// Create static Namespace and Provider class factory objects <br>//------------------------------------------------------------------------- <br>CSampleDSProviderCF g_cfProvider; <br>CSampleDSNamespaceCF g_cfNamespace; <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  ads class factory lookup table <br>// <br>//------------------------------------------------------------------------- <br> <br>struct CLSTABLE <br>{ <br>    const CLSID *   pclsid; <br>    IClassFactory * pCF; <br>}; <br> <br> <br> <br>CLSTABLE g_aclscache[] = <br>{ <br>    &amp;CLSID_SampleDSProvider,                      &amp;g_cfProvider, <br>    &amp;CLSID_SampleDSNamespace,                     &amp;g_cfNamespace, <br>}; <br> <br> <br>//+--------------------------------------------------------------- <br>// <br>//  Function:   DllGetClassObject <br>// <br>//  Synopsis:   Standard DLL entrypoint for locating class factories <br>// <br>//---------------------------------------------------------------- <br> <br>STDAPI <br>DllGetClassObject(REFCLSID clsid, REFIID iid, LPVOID FAR* ppv) <br>{ <br>    HRESULT         hr; <br>    size_t          i; <br> <br>    for (i = 0; i &lt; ARRAY_SIZE(g_aclscache); i++) <br>    { <br>        if (IsEqualCLSID(clsid, *g_aclscache[i].pclsid)) <br>        { <br>            hr = g_aclscache[i].pCF-&gt;QueryInterface(iid, ppv); <br>            RRETURN(hr); <br>        } <br>    } <br> <br>    *ppv = NULL; <br> <br>    return E_NOINTERFACE; <br>} <br> <br>//+--------------------------------------------------------------- <br>// <br>//  Function:   DllCanUnloadNow <br>// <br>//  Synopsis:   Standard DLL entrypoint to determine if DLL can be unloaded <br>// <br>//--------------------------------------------------------------- <br> <br>STDAPI DllCanUnloadNow(void) { <br>    if (0L==g_ulObjCount &amp;&amp; 0L==g_ulLockCount) return ResultFromScode(S_OK); <br>    else return ResultFromScode(S_FALSE); <br>}      <br> <br>//+--------------------------------------------------------------- <br>// <br>//  Function:   DllMain <br>// <br>//  Synopsis:   Standard DLL initialization entrypoint <br>// <br>//--------------------------------------------------------------- <br> <br>BOOL WINAPI <br>LibMain(HINSTANCE hInst, DWORD dwReason, LPVOID pvReserved) <br>{ <br>         <br>    // Check our compatibility with the OLE runtime. <br>    // We are compatible with any later major version, <br>    // or the same major version with equal or greater minor version. <br>    if (!IsCompatibleOleVersion(OLE_MAJ_VER, OLE_MIN_VER)) <br>    { <br>        return FALSE; <br>    } <br> <br>    switch (dwReason){ <br>    case DLL_PROCESS_ATTACH: <br> <br>        g_hInst = hInst; <br>        break; <br> <br> <br>    case DLL_PROCESS_DETACH: <br> <br> <br>    default: <br>        break; <br>    } <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>IsCompatibleOleVersion(WORD wMaj, WORD wMin) <br>{ <br>    // Check our compatibility with the OLE runtime. <br>    // We are compatible with any later major version, <br>    // or the same major version with equal or greater minor version. <br>    DWORD ov = OleBuildVersion(); <br>    return HIWORD(ov) &gt; wMaj || (HIWORD(ov) == wMaj &amp;&amp; LOWORD(ov) &gt;= wMin); <br>} <br> <br> <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   DllMain <br>// <br>//  Synopsis:   entry point for NT - post .546 <br>// <br>//---------------------------------------------------------------------------- <br>EXTERN_C BOOL WINAPI <br>DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved) <br>{ <br>    return LibMain((HINSTANCE)hDll, dwReason, lpReserved); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

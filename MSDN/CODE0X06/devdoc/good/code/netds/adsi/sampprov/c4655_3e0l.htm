<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CENUMSCH.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4665"></a>CENUMSCH.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CEnumSch.cpp <br> <br>Abstract: <br> <br>    Sample Provider Enum Schema functionality <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSSchemaEnum::Create <br>// <br>//  Synopsis: <br>// <br>//  Arguments:  [pCollection] <br>//              [ppEnumVariant] <br>// <br>//  Returns:    HRESULT <br>// <br>//  Modifies: <br>// <br>//  History:    01-30-95   yihsins     Created. <br>// <br>//---------------------------------------------------------------------------- <br>HRESULT <br>CSampleDSSchemaEnum::Create( <br>    CSampleDSSchemaEnum FAR* FAR* ppenumvariant, <br>    BSTR bstrSampleDSTreeName, <br>    BSTR bstrADsPath, <br>    BSTR bstrName, <br>    VARIANT var <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    CSampleDSSchemaEnum FAR* penumvariant = NULL; <br> <br>    *ppenumvariant = NULL; <br> <br>    penumvariant = new CSampleDSSchemaEnum(); <br>    if (!penumvariant) <br>    { <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    hr = ProvAllocString( bstrSampleDSTreeName, &amp;penumvariant-&gt;_bstrSampleDSTreeName); <br>    BAIL_ON_FAILURE(hr); <br>    hr = ProvAllocString( bstrADsPath, &amp;penumvariant-&gt;_bstrADsPath); <br>    BAIL_ON_FAILURE(hr); <br>         <br>    hr = ProvAllocString( bstrName, &amp;penumvariant-&gt;_bstrName); <br>    BAIL_ON_FAILURE(hr); <br> <br>    hr = ObjectTypeList::CreateObjectTypeList( <br>            var, <br>            &amp;penumvariant-&gt;_pObjList <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    *ppenumvariant = penumvariant; <br> <br>    RRETURN(hr); <br> <br>error: <br> <br>    delete penumvariant; <br> <br>    RRETURN(hr); <br>} <br> <br>CSampleDSSchemaEnum::CSampleDSSchemaEnum() <br>    : _bstrADsPath( NULL ), <br>      _bstrName( NULL ), <br>      _bstrSampleDSTreeName( NULL ), <br>      _pObjList( NULL ) <br>{ <br>    _lpClassDefs = NULL; <br>    _dwClassCurrent = 0; <br>    _dwClassReturned = 0; <br> <br>    _lpAttrDefs = NULL; <br>    _dwAttrCurrent = 0; <br>    _dwAttrReturned = 0; <br> <br>} <br> <br>CSampleDSSchemaEnum::~CSampleDSSchemaEnum() <br>{ <br>   ProvFreeString( _bstrName ); <br>   ProvFreeString( _bstrADsPath ); <br>   ProvFreeString( _bstrSampleDSTreeName ); <br> <br> <br>   if ( _pObjList != NULL ) <br>   { <br>       delete _pObjList; <br>       _pObjList = NULL; <br>   } <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Function:   CSampleDSSchemaEnum::Next <br>// <br>//  Synopsis:   Returns cElements number of requested NetOle objects in the <br>//              array supplied in pvar. <br>// <br>//  Arguments:  [cElements] -- The number of elements requested by client <br>//              [pvar] -- ptr to array of VARIANTs to for return objects <br>//              [pcElementFetched] -- if non-NULL, then number of elements <br>//                                 -- actually returned is placed here <br>// <br>//  Returns:    HRESULT -- S_OK if number of elements requested are returned <br>//                      -- S_FALSE if number of elements is &lt; requested <br>// <br>//  Modifies: <br>// <br>//  History:    11-3-95   yihsins     Created. <br>// <br>//---------------------------------------------------------------------------- <br>STDMETHODIMP <br>CSampleDSSchemaEnum::Next( <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    ULONG cElementFetched = 0; <br>    HRESULT hr = S_OK; <br> <br>    hr = EnumObjects( <br>                cElements, <br>                pvar, <br>                &amp;cElementFetched <br>                ); <br> <br>    if ( pcElementFetched ) <br>        *pcElementFetched = cElementFetched; <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSSchemaEnum::EnumObjects( <br>    DWORD ObjectType, <br>    ULONG cElements, <br>    VARIANT FAR * pvar, <br>    ULONG FAR * pcElementFetched <br>    ) <br>{ <br>    switch (ObjectType) <br>    { <br>        case SampleDS_CLASS_ID: <br>            RRETURN (EnumClasses(cElements, pvar, pcElementFetched)); <br>         <br>        case SampleDS_PROPERTY_ID: <br>            RRETURN (EnumProperties(cElements, pvar, pcElementFetched)); <br> <br>        default: <br>            RRETURN(S_FALSE); <br>    } <br>} <br> <br>HRESULT <br>CSampleDSSchemaEnum::EnumObjects( <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    DWORD           i; <br>    ULONG           cRequested = 0; <br>    ULONG           cFetchedByPath = 0; <br>    ULONG           cTotalFetched = 0; <br>    VARIANT FAR*    pPathvar = pvar; <br>    HRESULT         hr; <br>    DWORD           ObjectType; <br> <br>    for (i = 0; i &lt; cElements; i++) <br>        VariantInit(&amp;pvar[i]); <br> <br>    cRequested = cElements; <br> <br>    while (  SUCCEEDED( _pObjList-&gt;GetCurrentObject(&amp;ObjectType)) <br>          &amp;&amp; ((hr = EnumObjects( ObjectType, <br>                                 cRequested, <br>                                 pPathvar, <br>                                 &amp;cFetchedByPath)) == S_FALSE ) <br>          ) <br>    { <br>        pPathvar += cFetchedByPath; <br>        cRequested -= cFetchedByPath; <br>        cTotalFetched += cFetchedByPath; <br> <br>        cFetchedByPath = 0; <br> <br>        if ( FAILED(_pObjList-&gt;Next()) ) <br>        { <br>            if ( pcElementFetched ) <br>                *pcElementFetched = cTotalFetched; <br>            RRETURN(S_FALSE); <br>        } <br>    } <br> <br>    if ( pcElementFetched ) <br>        *pcElementFetched = cTotalFetched + cFetchedByPath; <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSSchemaEnum::EnumClasses( <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    DWORD i = 0; <br>    IDispatch *pDispatch = NULL; <br> <br>    while ( i &lt; cElements ) <br>    { <br>        hr = GetClassObject(&amp;pDispatch); <br>        if ( hr == S_FALSE ) <br>            break; <br> <br>        VariantInit( &amp;pvar[i] ); <br>        pvar[i].vt = VT_DISPATCH; <br>        pvar[i].pdispVal = pDispatch; <br>        (*pcElementFetched)++; <br>        i++; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSSchemaEnum::GetClassObject( <br>    IDispatch ** ppDispatch <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    LPSampleDS_CLASS_DEF lpCurrentObject = NULL; <br>     <br>    if (!_lpClassDefs) { <br>        _dwClassCurrent = 0; <br>        hr = SampleDSGetClassDefinition(&amp;_lpClassDefs, <br>                                        &amp;_dwClassReturned); <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    if (_dwClassCurrent == _dwClassReturned) { <br>        goto error; <br>    } <br> <br>    if (_dwClassCurrent &lt; _dwClassReturned) { <br> <br>        // <br>        // Now send back the current object <br>        // <br> <br>        lpCurrentObject = _lpClassDefs + _dwClassCurrent; <br> <br> <br>        hr = CSampleDSClass::CreateClass( <br>                            _bstrADsPath, <br>                            lpCurrentObject-&gt;lpClassName, <br>                            lpCurrentObject, <br>                            ADS_OBJECT_BOUND, <br>                            IID_IDispatch, <br>                            (void **)ppDispatch <br>                            ); <br>        BAIL_ON_FAILURE(hr); <br>        _dwClassCurrent++; <br> <br>        RRETURN(S_OK); <br> <br>    } <br> <br>error: <br>    if (_lpClassDefs) { <br>        SampleDSFreeClassDefinition(_lpClassDefs, <br>                                    _dwClassReturned); <br>    } <br>    *ppDispatch = NULL; <br>    RRETURN(S_FALSE); <br>} <br> <br>HRESULT <br>CSampleDSSchemaEnum::EnumProperties( <br>    ULONG cElements, <br>    VARIANT FAR* pvar, <br>    ULONG FAR* pcElementFetched <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    DWORD i = 0; <br>    IDispatch *pDispatch = NULL; <br> <br>    while ( i &lt; cElements ) <br>    { <br>        hr = GetPropertyObject(&amp;pDispatch); <br>        if ( hr == S_FALSE ) <br>            break; <br> <br>        VariantInit( &amp;pvar[i] ); <br>        pvar[i].vt = VT_DISPATCH; <br>        pvar[i].pdispVal = pDispatch; <br>        (*pcElementFetched)++; <br>        i++; <br>    } <br> <br>    RRETURN(hr); <br>} <br> <br>HRESULT <br>CSampleDSSchemaEnum::GetPropertyObject( <br>    IDispatch ** ppDispatch <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>     <br>    LPSampleDS_ATTR_DEF lpCurrentObject = NULL; <br>     <br>    if (!_lpAttrDefs) { <br>        _dwAttrCurrent = 0; <br>        hr = SampleDSGetPropertyDefinition(&amp;_lpAttrDefs, <br>                                           &amp;_dwAttrReturned); <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br>    if (_dwAttrCurrent == _dwAttrReturned) { <br>        goto error; <br>    } <br> <br>    if (_dwAttrCurrent &lt; _dwAttrReturned) { <br> <br>        lpCurrentObject = _lpAttrDefs + _dwAttrCurrent; <br> <br>        hr = CSampleDSProperty::CreateProperty( <br>                            _bstrADsPath, <br>                            lpCurrentObject-&gt;lpAttributeName, <br>                            lpCurrentObject, <br>                            ADS_OBJECT_BOUND, <br>                            IID_IDispatch, <br>                            (void **)ppDispatch <br>                            ); <br>        BAIL_ON_FAILURE(hr); <br>        _dwAttrCurrent++; <br>        RRETURN(S_OK); <br>    } <br> <br>error: <br>    if (_lpAttrDefs) <br>        SampleDSFreePropertyDefinition(_lpAttrDefs, <br>                                       _dwAttrReturned); <br>    *ppDispatch = NULL; <br>    RRETURN(S_FALSE); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STDFACT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4716"></a>STDFACT.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    StdFact.cpp <br> <br>Abstract: <br> <br>    Standard IClassFactory implementation <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br> <br>STDMETHODIMP <br>StdClassFactory::QueryInterface(REFIID riid, LPVOID FAR* ppv) <br>{ <br>    if (!ppv) <br>        RRETURN(E_INVALIDARG); <br> <br>    if (IsEqualIID(riid, IID_IUnknown) || <br>        IsEqualIID(riid, IID_IClassFactory)) <br>    { <br>        *ppv = (IClassFactory *) this; <br>    } <br>    else <br>    { <br>        *ppv = NULL; <br>        return E_NOINTERFACE; <br>    } <br> <br>    ((IUnknown *)*ppv)-&gt;AddRef(); <br>    return S_OK; <br>} <br> <br>STDMETHODIMP_(ULONG) <br>StdClassFactory::AddRef(void) <br>{ <br>    ADsAssert(_ulRefs); <br> <br>    if (_ulRefs == 1) <br>        INC_OBJECT_COUNT(); <br> <br>    return ++_ulRefs; <br>} <br> <br>STDMETHODIMP_(ULONG) <br>StdClassFactory::Release(void) <br>{ <br>    ADsAssert(_ulRefs &gt; 1); <br> <br>    if (--_ulRefs == 1) <br>        DEC_OBJECT_COUNT(); <br> <br>    return _ulRefs; <br>} <br> <br>STDMETHODIMP <br>StdClassFactory::LockServer (BOOL fLock) <br>{ <br>    if (fLock) <br>        INC_OBJECT_COUNT(); <br>    else <br>        DEC_OBJECT_COUNT(); <br>    return NOERROR; <br>} <br> <br>CDynamicCF::CDynamicCF(void) <br>{ <br>    _ulRefs = 1; <br> <br>    INC_OBJECT_COUNT(); <br>} <br> <br>CDynamicCF::~CDynamicCF(void) <br>{ <br>    DEC_OBJECT_COUNT(); <br>} <br> <br>STDMETHODIMP <br>CDynamicCF::QueryInterface(REFIID riid, LPVOID FAR* ppv) <br>{ <br>    if (!ppv) <br>        RRETURN(E_INVALIDARG); <br> <br>    if (IsEqualIID(riid, IID_IUnknown) || <br>        IsEqualIID(riid, IID_IClassFactory)) <br>    { <br>        *ppv = (IClassFactory *) this; <br>    } <br>    else <br>    { <br>        *ppv = NULL; <br>        return E_NOINTERFACE; <br>    } <br> <br>    ((IUnknown *)*ppv)-&gt;AddRef(); <br>    return S_OK; <br>} <br> <br>STDMETHODIMP <br>CDynamicCF::LockServer (BOOL fLock) <br>{ <br>    if (fLock) <br>    { <br>        _ulRefs++; <br>    } <br>    else <br>    { <br>        _ulRefs--; <br>    } <br> <br>    return S_OK; <br>} <br> <br>#ifdef DOCGEN <br> <br>STDMETHODIMP <br>StdClassFactory::CreateInstance(LPUNKNOWN pUnkOuter, <br>        REFIID iid, <br>        LPVOID FAR* ppv) {}; <br>#endif  // DOCGEN <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

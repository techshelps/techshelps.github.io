<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPROPS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4680"></a>CPROPS.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1996 Microsoft Corporation <br> <br>Module Name: <br> <br>    CProps.cpp <br> <br>Abstract: <br> <br>    Property Cache functionality  <br> <br>Author: <br> <br>Environment: <br> <br>    User mode <br> <br>Revision History : <br> <br>--*/ <br>#include "adssmp.h" <br>#pragma hdrstop <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache::addproperty <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments:  [szPropertyName]    -- <br>//              [vt]                -- <br>//              [vaData]            -- <br>// <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>addproperty( <br>    LPWSTR szPropertyName, <br>    DWORD  dwSyntaxId, <br>    DWORD  dwNumValues, <br>    PSampleDSOBJECT pSampleDSObject <br>    ) <br>{ <br>    HRESULT hr = S_OK; <br>    PPROPERTY pNewProperty = NULL; <br> <br>    // <br>    //  extend the property cache by adding a new property entry <br>    // <br> <br>    _pProperties = (PPROPERTY)ReallocProvMem( <br>                                _pProperties, <br>                                _cb, <br>                                _cb + sizeof(PROPERTY) <br>                                ); <br>    if (!_pProperties) { <br>        hr = E_OUTOFMEMORY; <br>        BAIL_ON_FAILURE(hr); <br>    } <br> <br> <br>    pNewProperty = (PPROPERTY)((LPBYTE)_pProperties + _cb); <br> <br>    wcscpy(pNewProperty-&gt;szPropertyName, szPropertyName); <br> <br>    // <br>    // Update the index <br>    // <br> <br>    _dwMaxProperties++; <br>    _cb += sizeof(PROPERTY); <br> <br>error: <br>    RRETURN(hr); <br>} <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache::updateproperty <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments:  [szPropertyName]    -- <br>//              [vaData]    -- <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>updateproperty( <br>    LPWSTR szPropertyName, <br>    DWORD  dwSyntaxId, <br>    DWORD  dwNumValues, <br>    PSampleDSOBJECT pSampleDSObject, <br>    BOOL fExplicit <br>    ) <br>{ <br>    HRESULT hr; <br>    DWORD dwIndex; <br>    PSampleDSOBJECT pNdsTempObject = NULL; <br>    PPROPERTY pThisProperty = NULL; <br> <br>    hr = findproperty( <br>            szPropertyName, <br>            &amp;dwIndex <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pThisProperty = _pProperties + dwIndex; <br> <br>    if (!fExplicit) { <br>        if (PROPERTY_FLAGS(pThisProperty) &amp; CACHE_PROPERTY_MODIFIED) { <br>            hr = S_OK; <br>            goto error; <br>        } <br>    } <br> <br> <br>    if (PROPERTY_SampleDSOBJECT(pThisProperty)) { <br> <br>        SampleDSTypeFreeSampleDSObjects( <br>                PROPERTY_SampleDSOBJECT(pThisProperty), <br>                PROPERTY_NUMVALUES(pThisProperty) <br>                ); <br>        PROPERTY_SampleDSOBJECT(pThisProperty) = NULL; <br>    } <br>    PROPERTY_SYNTAX(pThisProperty) = dwSyntaxId; <br>    PROPERTY_NUMVALUES(pThisProperty) = dwNumValues; <br> <br>    hr = SampleDSTypeCopyConstruct( <br>            pSampleDSObject, <br>            dwNumValues, <br>            &amp;pNdsTempObject <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    PROPERTY_SampleDSOBJECT(pThisProperty) = pNdsTempObject; <br> <br>    PROPERTY_FLAGS(pThisProperty)  &amp;= ~CACHE_PROPERTY_MODIFIED; <br> <br>error: <br> <br>    RRETURN(hr); <br> <br>} <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache::findproperty <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments:  [szPropertyName] -- <br>//              [pdwIndex]       -- <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>findproperty( <br>    LPWSTR szPropertyName, <br>    PDWORD pdwIndex <br>    ) <br> <br>{ <br>    DWORD i = 0; <br>    PPROPERTY pThisProperty = NULL; <br> <br>    for (i = 0; i &lt; _dwMaxProperties; i++) { <br> <br>        pThisProperty = _pProperties + i; <br> <br>        if (!_wcsicmp(pThisProperty-&gt;szPropertyName, szPropertyName)) { <br>            *pdwIndex = i; <br>            RRETURN(S_OK); <br>        } <br>    } <br>    *pdwIndex = 0; <br>    RRETURN(E_ADS_PROPERTY_NOT_FOUND); <br>} <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache::getproperty <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments:  [szPropertyName]    --  Property to retrieve from the cache <br>//              [pvaData]           --  Data returned in a variant <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>getproperty( <br>    LPWSTR szPropertyName, <br>    PDWORD  pdwSyntaxId, <br>    PDWORD  pdwNumValues, <br>    PSampleDSOBJECT * ppSampleDSObject <br>    ) <br>{ <br>    HRESULT hr; <br>    DWORD dwIndex = 0L; <br>    PPROPERTY pThisProperty = NULL; <br> <br>    hr = findproperty( <br>            szPropertyName, <br>            &amp;dwIndex <br>            ); <br> <br>    if (hr == E_ADS_PROPERTY_NOT_FOUND) { <br> <br>        // <br>        // Now call the GetInfo function <br>        // <br> <br>        hr = _pCoreADsObject-&gt;GetInfo( <br>                    FALSE <br>                    ); <br>        BAIL_ON_FAILURE(hr); <br> <br>        hr = findproperty( <br>                    szPropertyName, <br>                    &amp;dwIndex <br>                    ); <br> <br>    } <br>    BAIL_ON_FAILURE(hr); <br> <br>    pThisProperty = _pProperties + dwIndex; <br> <br>    if (PROPERTY_SampleDSOBJECT(pThisProperty)) { <br> <br>        *pdwSyntaxId = (DWORD)PROPERTY_SYNTAX(pThisProperty); <br>        *pdwNumValues = (DWORD)PROPERTY_NUMVALUES(pThisProperty); <br> <br>        hr = SampleDSTypeCopyConstruct( <br>                PROPERTY_SampleDSOBJECT(pThisProperty), <br>                PROPERTY_NUMVALUES(pThisProperty), <br>                ppSampleDSObject <br>                ); <br>        BAIL_ON_FAILURE(hr); <br> <br>    }else { <br> <br>        *ppSampleDSObject = NULL; <br>        *pdwNumValues = 0; <br>        *pdwSyntaxId = 0; <br>        hr = E_FAIL; <br> <br>    } <br> <br>error: <br> <br>   RRETURN(hr); <br>} <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache::putproperty <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments:  [szPropertyName]    --  Clsid index <br>//              [vaData]    --  Matching clsid returned in *pclsid <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>putproperty( <br>    LPWSTR szPropertyName, <br>    DWORD  dwSyntaxId, <br>    DWORD  dwNumValues, <br>    PSampleDSOBJECT pSampleDSOBJECT <br>    ) <br>{ <br>    HRESULT hr; <br>    DWORD dwIndex = 0L; <br>    PSampleDSOBJECT pSampleDSTempObject = NULL; <br>    PPROPERTY pThisProperty = NULL; <br> <br>    hr = findproperty( <br>            szPropertyName, <br>            &amp;dwIndex <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pThisProperty = _pProperties + dwIndex; <br> <br>    if (PROPERTY_SampleDSOBJECT(pThisProperty)) { <br> <br>        SampleDSTypeFreeSampleDSObjects( <br>                PROPERTY_SampleDSOBJECT(pThisProperty), <br>                PROPERTY_NUMVALUES(pThisProperty) <br>                ); <br>        PROPERTY_SampleDSOBJECT(pThisProperty) = NULL; <br>    } <br> <br>    PROPERTY_SYNTAX(pThisProperty) = dwSyntaxId; <br>    PROPERTY_NUMVALUES(pThisProperty) = dwNumValues; <br> <br>    hr = SampleDSTypeCopyConstruct( <br>            pSampleDSOBJECT, <br>            dwNumValues, <br>            &amp;pSampleDSTempObject <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    PROPERTY_SampleDSOBJECT(pThisProperty) = pSampleDSTempObject; <br> <br>    PROPERTY_FLAGS(pThisProperty) |= CACHE_PROPERTY_MODIFIED; <br> <br>error: <br>    RRETURN(hr); <br>} <br> <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments: <br>// <br>// <br>//------------------------------------------------------------------------- <br>CPropertyCache:: <br>CPropertyCache(): <br>        _dwMaxProperties(0), <br>        _pProperties(NULL), <br>        _cb(0), <br>        _pCoreADsObject(NULL) <br>{ <br> <br>} <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   ~CPropertyCache <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments: <br>// <br>// <br>//------------------------------------------------------------------------- <br>CPropertyCache:: <br>~CPropertyCache() <br>{ <br>    DWORD i = 0; <br>    PPROPERTY pThisProperty = NULL; <br> <br>    if (_pProperties) { <br> <br>        for (i = 0; i &lt; _dwMaxProperties; i++) { <br> <br>            pThisProperty = _pProperties + i; <br> <br>            if (PROPERTY_SampleDSOBJECT(pThisProperty)) { <br> <br>                SampleDSTypeFreeSampleDSObjects( <br>                        PROPERTY_SampleDSOBJECT(pThisProperty), <br>                        PROPERTY_NUMVALUES(pThisProperty) <br>                        ); <br>                PROPERTY_SampleDSOBJECT(pThisProperty) = NULL; <br>            } <br>        } <br> <br>        FreeProvMem(_pProperties); <br>    } <br>} <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function: <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments: <br>// <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>createpropertycache( <br>    CCoreADsObject FAR * pCoreADsObject, <br>    CPropertyCache FAR *FAR * ppPropertyCache <br>    ) <br>{ <br>    CPropertyCache FAR * pPropertyCache = NULL; <br> <br>    pPropertyCache = new CPropertyCache(); <br> <br>    if (!pPropertyCache) { <br>        RRETURN(E_FAIL); <br>    } <br> <br>    pPropertyCache-&gt;_pCoreADsObject = pCoreADsObject; <br> <br>    *ppPropertyCache = pPropertyCache; <br> <br>    RRETURN(S_OK); <br>} <br> <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function:   CPropertyCache::getproperty <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments:  [szPropertyName]    --  Property to retrieve from the cache <br>//              [pvaData]           --  Data returned in a variant <br>// <br>//------------------------------------------------------------------------- <br>HRESULT <br>CPropertyCache:: <br>unboundgetproperty( <br>    LPWSTR szPropertyName, <br>    PDWORD  pdwSyntaxId, <br>    PDWORD  pdwNumValues, <br>    PSampleDSOBJECT * ppSampleDSOBJECT <br>    ) <br>{ <br>    HRESULT hr; <br>    DWORD dwIndex = 0L; <br>    PPROPERTY pThisProperty = NULL; <br> <br>    hr = findproperty( <br>            szPropertyName, <br>            &amp;dwIndex <br>            ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    pThisProperty = _pProperties + dwIndex; <br> <br>    if (PROPERTY_SampleDSOBJECT(pThisProperty)) { <br> <br>        *pdwSyntaxId = (DWORD)PROPERTY_SYNTAX(pThisProperty); <br>        *pdwNumValues = (DWORD)PROPERTY_NUMVALUES(pThisProperty); <br> <br>        hr = SampleDSTypeCopyConstruct( <br>                PROPERTY_SampleDSOBJECT(pThisProperty), <br>                PROPERTY_NUMVALUES(pThisProperty), <br>                ppSampleDSOBJECT <br>                ); <br>        BAIL_ON_FAILURE(hr); <br> <br>    }else { <br> <br>        *ppSampleDSOBJECT = NULL; <br>        *pdwNumValues = 0; <br>        *pdwSyntaxId = 0; <br>        hr = E_FAIL; <br> <br>    } <br> <br>error: <br> <br>   RRETURN(hr); <br>} <br> <br> <br> <br>HRESULT <br>CPropertyCache:: <br>SampleDSMarshallProperties( <br>    HANDLE hOperationData <br>    ) <br>{ <br>    LPSampleDS_ATTRS_INFO pAttrsInfo = (LPSampleDS_ATTRS_INFO)hOperationData; <br>    HRESULT hr = S_OK; <br>    DWORD i = 0; <br>    PPROPERTY pThisProperty = NULL; <br>    BYTE lpBuffer[2048]; <br>    DWORD cProperty = 0; <br>    LPSampleDS_ATTR_INFO pAttrInfoMemStart = NULL;  <br>    LPSampleDS_ATTR_INFO pAttrInfoMem = NULL;  <br>    pAttrInfoMemStart = (LPSampleDS_ATTR_INFO)AllocProvMem( <br>                                     sizeof(SampleDS_ATTR_INFO)*_dwMaxProperties); <br>    if (!pAttrInfoMemStart) <br>        goto Error; <br> <br>    pAttrInfoMem = pAttrInfoMemStart; <br> <br>    for (i = 0; i &lt; _dwMaxProperties ; i++) { <br> <br>        pThisProperty = _pProperties + i; <br> <br>        // <br>        // Bypass any property that has not been <br>        // modified <br>        // <br> <br>        if (PROPERTY_FLAGS(pThisProperty) == 0) { <br> <br>            continue; <br>        } <br> <br>        hr = MarshallSampleDSSynIdToSampleDS( <br>                PROPERTY_SYNTAX(pThisProperty), <br>                PROPERTY_SampleDSOBJECT(pThisProperty), <br>                PROPERTY_NUMVALUES(pThisProperty), <br>                lpBuffer <br>                ); <br>        CONTINUE_ON_FAILURE(hr); <br> <br> <br>        hr = marshallproperty( <br>                pAttrInfoMem, <br>                PROPERTY_NAME(pThisProperty), <br>                lpBuffer, <br>                PROPERTY_NUMVALUES(pThisProperty), <br>                PROPERTY_SYNTAX(pThisProperty) <br>                ); <br>        CONTINUE_ON_FAILURE(hr); <br>        cProperty++; <br>        pAttrInfoMem++; <br>    } <br> <br>    if (cProperty != _dwMaxProperties) { <br>        LPSampleDS_ATTR_INFO pAttrInfoNew;  <br>        pAttrInfoNew = (LPSampleDS_ATTR_INFO)AllocProvMem( <br>                                         sizeof(SampleDS_ATTR_INFO)*cProperty); <br>        if (!pAttrInfoNew) { <br>            hr = E_FAIL; <br>            goto Error; <br>        } <br>        memcpy( (void*)pAttrInfoNew, <br>                (void*)pAttrInfoMemStart, <br>                sizeof(SampleDS_ATTR_INFO)*cProperty); <br>        FreeProvMem(pAttrInfoMemStart); <br>        pAttrInfoMemStart = pAttrInfoNew; <br>    } <br>    pAttrsInfo-&gt;pAttrInfo = pAttrInfoMemStart; <br>    pAttrsInfo-&gt;dwAttr = cProperty; <br>    RRETURN(hr); <br> <br>Error: <br>    if (pAttrInfoMem) <br>        FreeProvMem(pAttrInfoMem); <br>    RRETURN(hr); <br> <br>} <br> <br>HRESULT <br>CPropertyCache:: <br>marshallproperty( <br>    LPSampleDS_ATTR_INFO pAttrInfo, <br>    LPWSTR szPropertyName, <br>    LPBYTE lpValues, <br>    DWORD  dwNumValues, <br>    DWORD  dwSyntaxId <br>    ) <br>{ <br>    pAttrInfo-&gt;lpAttributeName = (LPWSTR)AllocProvStr(szPropertyName); <br>    if (!pAttrInfo-&gt;lpAttributeName) <br>        RRETURN(E_FAIL); <br>     <br>    DWORD dwMemSize; <br>    switch (dwSyntaxId) { <br>        case SampleDS_DATATYPE_1: <br>            dwMemSize = sizeof(SampleDS_TYPE_1); <br>            break; <br>        case SampleDS_DATATYPE_2: <br>            dwMemSize = sizeof(SampleDS_TYPE_2); <br>            break; <br>        default: <br>            goto Error; <br>    } <br>    pAttrInfo-&gt;lpValue = (BYTE*)AllocProvMem(dwMemSize); <br>    if (!pAttrInfo-&gt;lpValue) <br>        goto Error; <br>    memcpy( (void*)pAttrInfo-&gt;lpValue, <br>            (void*)lpValues, <br>            dwMemSize); <br>     <br>    pAttrInfo-&gt;dwSyntaxId = dwSyntaxId; <br>    pAttrInfo-&gt;dwNumberOfValues = dwNumValues; <br>    RRETURN(S_OK); <br>Error: <br>    if (pAttrInfo-&gt;lpAttributeName) <br>        FreeProvMem(pAttrInfo-&gt;lpAttributeName); <br>    if (pAttrInfo-&gt;lpValue) <br>        FreeProvMem(pAttrInfo-&gt;lpValue); <br>    RRETURN(E_FAIL); <br>} <br> <br>HRESULT <br>CPropertyCache:: <br>SampleDSUnMarshallProperties( <br>    HANDLE hOperationData, <br>    BOOL fExplicit <br>    ) <br> <br>{ <br>    LPSampleDS_ATTRS_INFO pAttrsInfo = (LPSampleDS_ATTRS_INFO)hOperationData; <br>     <br>    DWORD dwNumberOfEntries = 0L; <br>    LPSampleDS_ATTR_INFO lpEntries = pAttrsInfo-&gt;pAttrInfo; <br>    DWORD dwEntry = pAttrsInfo-&gt;dwAttr; <br>    HRESULT hr = S_OK; <br>    DWORD i = 0; <br>    DWORD dwStatus = 0L; <br> <br>    for (i = 0; i &lt; dwEntry; i++) { <br> <br>        // <br>        // unmarshall this property into the <br>        // property cache <br>        // <br>         <br>        hr = unmarshallproperty( <br>                    lpEntries[i].lpAttributeName, <br>                    lpEntries[i].lpValue, <br>                    lpEntries[i].dwNumberOfValues, <br>                    lpEntries[i].dwSyntaxId, <br>                    fExplicit <br>                    ); <br> <br>        CONTINUE_ON_FAILURE(hr); <br> <br>    } <br> <br>    RRETURN(hr); <br> <br>} <br> <br>//+------------------------------------------------------------------------ <br>// <br>//  Function: <br>// <br>//  Synopsis: <br>// <br>// <br>// <br>//  Arguments: <br>// <br>// <br>//------------------------------------------------------------------------- <br> <br>HRESULT <br>CPropertyCache:: <br>unmarshallproperty( <br>    LPWSTR szPropertyName, <br>    LPBYTE lpValue, <br>    DWORD  dwNumValues, <br>    DWORD  dwSyntaxId, <br>    BOOL fExplicit <br>    ) <br>{ <br> <br>    DWORD dwIndex = 0; <br>    HRESULT hr = S_OK; <br>    PSampleDSOBJECT pSampleDSObject = NULL; <br> <br>    hr = UnMarshallSampleDSToSampleDSSynId( <br>                dwSyntaxId, <br>                dwNumValues, <br>                lpValue, <br>                &amp;pSampleDSObject  <br>                ); <br>    BAIL_ON_FAILURE(hr); <br> <br>    // <br>    // Find this property in the cache <br>    // <br> <br>    hr = findproperty( <br>                szPropertyName, <br>                &amp;dwIndex <br>                ); <br> <br>    // <br>    // If this property does not exist in the <br>    // cache, add this property into the cache. <br>    // <br> <br> <br>    if (FAILED(hr)) { <br>        hr = addproperty( <br>                    szPropertyName, <br>                    dwSyntaxId, <br>                    dwNumValues, <br>                    pSampleDSObject  <br>                    ); <br> <br>        // <br>        // If the operation fails for some reason <br>        // move on to the next property <br>        // <br>        BAIL_ON_FAILURE(hr); <br> <br>    } <br> <br>    // <br>    // Now update the property in the cache <br>    // <br> <br>    hr = updateproperty( <br>                    szPropertyName, <br>                    dwSyntaxId, <br>                    dwNumValues, <br>                    pSampleDSObject, <br>                    fExplicit <br>                    ); <br>    BAIL_ON_FAILURE(hr); <br> <br> <br>    if (pSampleDSObject) { <br>        SampleDSTypeFreeSampleDSObjects( <br>                pSampleDSObject, <br>                dwNumValues <br>                ); <br> <br>    } <br> <br> <br>error: <br>    RRETURN(hr); <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

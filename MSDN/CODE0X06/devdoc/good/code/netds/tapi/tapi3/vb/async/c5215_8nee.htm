<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ASYNC.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5216"></a>ASYNC.FRM</h2>
<pre><code>VERSION 5.00 <br>Begin VB.Form Form1  <br>   Caption         =   "Async" <br>   ClientHeight    =   4260 <br>   ClientLeft      =   60 <br>   ClientTop       =   345 <br>   ClientWidth     =   4680 <br>   LinkTopic       =   "Form1" <br>   MaxButton       =   0   'False <br>   ScaleHeight     =   4260 <br>   ScaleWidth      =   4680 <br>   StartUpPosition =   3  'Windows Default <br>   Begin VB.ComboBox cmbAddressTypes  <br>      Height          =   315 <br>      Left            =   1920 <br>      Style           =   2  'Dropdown List <br>      TabIndex        =   0 <br>      Top             =   720 <br>      Width           =   2295 <br>   End <br>   Begin VB.CommandButton pbDial  <br>      Caption         =   "Dial" <br>      Default         =   -1  'True <br>      Height          =   375 <br>      Index           =   0 <br>      Left            =   960 <br>      TabIndex        =   2 <br>      Top             =   1920 <br>      Width           =   3135 <br>   End <br>   Begin VB.CommandButton pbDisconnect  <br>      Caption         =   "Disconnect" <br>      Height          =   375 <br>      Index           =   1 <br>      Left            =   960 <br>      TabIndex        =   3 <br>      Top             =   2520 <br>      Width           =   3135 <br>   End <br>   Begin VB.TextBox txtDestAddress  <br>      Height          =   375 <br>      Left            =   1920 <br>      TabIndex        =   1 <br>      Top             =   1320 <br>      Width           =   2295 <br>   End <br>   Begin VB.Label lblStatus  <br>      Height          =   855 <br>      Left            =   1800 <br>      TabIndex        =   7 <br>      Top             =   3120 <br>      Width           =   2415 <br>   End <br>   Begin VB.Label lblStatusTitle  <br>      Caption         =   "Status:" <br>      Height          =   255 <br>      Left            =   480 <br>      TabIndex        =   6 <br>      Top             =   3120 <br>      Width           =   855 <br>   End <br>   Begin VB.Label Label2  <br>      Caption         =   "Address:" <br>      Height          =   255 <br>      Left            =   480 <br>      TabIndex        =   5 <br>      Top             =   1320 <br>      Width           =   1095 <br>   End <br>   Begin VB.Label Label1  <br>      Caption         =   "Address Type:" <br>      Height          =   255 <br>      Left            =   480 <br>      TabIndex        =   4 <br>      Top             =   720 <br>      Width           =   1215 <br>   End <br>End <br>Attribute VB_Name = "Form1" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br> <br>' ASYNC.EXE <br>' <br>' Example of making an asynchronous outgoing call with TAPI 3.0 <br>' <br>' This application will allow a user to make an asynchronous call <br>' by using TAPI 3.0. The application will simply look for the 1st address <br>' that matches the address type selected by the user in the combo box. <br>' It will actually pick up the address that also supports at least the <br>' media types audio in and audio out (therefore it will skip all others, <br>' even if they match the desired address type). <br>' It will then use that address to make calls. On the call, it will <br>' select the media types "audio in" and "audio out", and, if these are supported <br>' too, it will also select the media types "video in" and "video out"; for each <br>' of these media types it will use their default terminals; except for video in <br>' which needs a dynamic terminal to be created. <br>' The name of the destination address is taken by means of an edit box. <br>' The app will display messages to announce whenever a state event fires. <br>' <br>' This application has the limitation that it only supports one call <br>' at a time. But Tapi 3.0 has support for multiple calls per address, <br>' and the number of calls per address is dictated actually by the <br>' provider. (e.g. Unimodem would allow only 1 call per address at a time) <br>' <br>' This application doesn't have code for error handling. <br>' <br>' This application does not handle incoming calls. <br>' <br>' TBD: there is a bug when null terminal is selected for video out <br>' (this happens when no video card is installed). The sample has some <br>' temporary code to handle it, this code must be removed when the bug is <br>' fixed. <br>' <br> <br>Option Explicit <br> <br>Dim gnPreviousAddressIndex As Long <br>Dim WithEvents gobjAddressWithEvents As Address <br>Attribute gobjAddressWithEvents.VB_VarHelpID = -1 <br>Dim gobjOrigAddress As Address <br>Dim gobjTapi As TAPI <br>Dim gobjCall As ITBasicCallControl <br> <br>Private Sub Form_Load() <br>     <br>    gnPreviousAddressIndex = 0  'valid indexes are between 1 and addresses count <br>     <br>    'populate combo box with names of all addresses types <br>    'attach to each combo item the address type itself <br>     <br>    cmbAddressTypes.AddItem ("Phone Number") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_PHONENUMBER <br>     <br>    cmbAddressTypes.AddItem ("Email Name") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_EMAILNAME <br>     <br>    cmbAddressTypes.AddItem ("Machine Name") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_DOMAINNAME <br>     <br>    cmbAddressTypes.AddItem ("IP Address") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_IPADDRESS <br>     <br>    cmbAddressTypes.AddItem ("Conference Name") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_CONFERENCENAME <br>     <br>    'set selection on 1st item <br>    cmbAddressTypes.ListIndex = 0 <br> <br>End Sub <br> <br>Private Sub Form_Unload(Cancel As Integer) <br> <br>    'release all global variables <br>     <br>    Set gobjCall = Nothing <br>    Set gobjAddressWithEvents = Nothing <br>    Set gobjOrigAddress = Nothing <br>    If Not (gobjTapi Is Nothing) Then <br>        gobjTapi.Shutdown <br>    End If <br>    Set gobjTapi = Nothing <br>     <br>    'empty combo box <br>    Dim i <br>    For i = 1 To cmbAddressTypes.ListCount <br>        cmbAddressTypes.RemoveItem (0) <br>    Next i <br>End Sub <br> <br>Private Sub PrintCallState(State As CALL_STATE) <br>    Select Case State <br>        Case CS_CONNECTED <br>            lblStatus.Caption = "call state: CS_CONNECTED" <br>        Case CS_DISCONNECTED <br>            Dim strMsg <br>            strMsg = "call state: CS_DISCONNECTED" <br>            strMsg = strMsg &amp; Chr(13) &amp; "Call was disconnected. " <br>            strMsg = strMsg &amp; "Now you can press Connect again or just quit." <br>            lblStatus.Caption = strMsg <br>        Case CS_HOLD <br>            lblStatus.Caption = "call state: CS_HOLD" <br>        Case CS_IDLE <br>            lblStatus.Caption = "call state: CS_IDLE" <br>        Case CS_INPROGRESS <br>            lblStatus.Caption = "call state: CS_INPROGRESS" <br>        Case CS_OFFERING <br>            lblStatus.Caption = "call state: CS_OFFERING" <br>        Case CS_QUEUED <br>            lblStatus.Caption = "call state: CS_QUEUED" <br>        Case Else <br>            lblStatus.Caption = "call state: unknown!!" <br>    End Select <br>End Sub <br> <br> <br>Private Sub gobjAddressWithEvents_CallEventNotification(ByVal pAddress As TAPI3Lib.ITAddress, ByVal CallEventType As TAPI3Lib.CALL_EVENT_TYPE, ByVal pEvent As Object) <br>    Dim objCallStateEvent As ITCallStateEvent <br>     <br>    If CallEventType &lt;&gt; CET_CALLSTATEEVENT Then <br>        'I am interested only by CallStateEvent-s <br>        lblStatus.Caption = "Event type &lt;&gt; CET_CALLSTATEEVENT ignored." <br>        Set pEvent = Nothing <br>        Exit Sub <br>    End If <br>     <br>    'pEvent is an unknown object; query its ITCallStateEvent interface <br>    Set objCallStateEvent = pEvent <br>     <br>    PrintCallState (objCallStateEvent.State) <br>     <br>    If objCallStateEvent.State = CS_DISCONNECTED Then <br>         <br>        'release call, you don't need it anymore <br>        Set gobjCall = Nothing <br>         <br>        Set objCallStateEvent = Nothing <br>        Set pEvent = Nothing <br>        Exit Sub <br>         <br>    End If <br>     <br>    'release all objects that aren't needed anymore <br>    'it is important to release also the received pEvent <br>     <br>    Set objCallStateEvent = Nothing <br>    Set pEvent = Nothing <br>    Exit Sub <br>End Sub <br> <br>Private Sub pbDial_Click(index As Integer) <br>    Dim bVideoIn As Boolean, bVideoOut As Boolean <br>    Dim objTerminalAudioIn As Terminal, objTerminalAudioOut As Terminal <br>    Dim objTerminalVideoIn As Terminal, objTerminalVideoOut As Terminal <br>     <br>    Dim nOrigAddressIndex As Long <br>    Dim strDestAddress As String <br>     <br>    'second call not supported by this app <br>    If Not (gobjCall Is Nothing) Then <br>        lblStatus.Caption = "Cannot connect new call. Wait for the previous one to be disconnected." <br>        Exit Sub <br>    End If <br>     <br>    'check if user typed input data <br>    strDestAddress = txtDestAddress.Text <br>    If strDestAddress = "" Then <br>        lblStatus.Caption = "Enter destination addres!" <br>        Exit Sub <br>    End If <br>     <br>    'global variables might already contain something, from previous run <br>     <br>    If gobjTapi Is Nothing Then <br>     <br>        'create the Tapi object <br>        Set gobjTapi = CreateObject("TAPI.TAPI.1") <br>         <br>        'call Initialize.  this must be called before <br>        'any other tapi functions are called. <br>        gobjTapi.Initialize <br>         <br>    End If <br>     <br>    'pick up the collection of Address objects <br>    Dim objCollAddresses As ITCollection <br>    Set objCollAddresses = gobjTapi.Addresses <br>     <br>    'find address that supports the desired type (the one selected in combo) <br>    nOrigAddressIndex = FindOriginationAddressIndex(objCollAddresses) <br>     <br>    'validate the returned value <br>    If nOrigAddressIndex &lt; 1 Or nOrigAddressIndex &gt; objCollAddresses.Count Then <br>        lblStatus.Caption = "Could not find an appropriate address to make the call from." <br>         <br>        'release not needed objects <br>        Set objCollAddresses = Nothing <br>         <br>        Exit Sub <br>    End If <br>     <br>    ' <br>    'pick up the found address <br>    ' <br>     <br>    If gnPreviousAddressIndex &lt;&gt; nOrigAddressIndex Then <br>        'If another address was selected, release the previous one <br>        'and save a "pointer" to the new one. <br>        'If the same address was selected, don't release/save it again, <br>        'just keep the previous one. <br>         <br>        'release previous objects <br>        Set gobjAddressWithEvents = Nothing <br>        Set gobjOrigAddress = Nothing <br>         <br>        'save new address <br>        Set gobjOrigAddress = objCollAddresses.Item(nOrigAddressIndex) <br>         <br>        'can't register the outgoing interface here, we'll do it <br>        'later, after RegisterCallTypes; <br>        'so, for now, leave empty the variable gobjAddressWithEvents <br>         <br>        'save also the new index <br>        gnPreviousAddressIndex = nOrigAddressIndex <br>    End If <br>     <br>    'release objects that are not needed anymore <br>    '(this decrements the reference count) <br>    Set objCollAddresses = Nothing <br>     <br>    ' <br>    'find out if media types video in/out are supported as well <br>    ' <br>     <br>    Dim objMediaSupport As ITMediaSupport <br>     <br>    'query ITMediaSupport interface from Address object <br>    Set objMediaSupport = gobjOrigAddress <br>     <br>    'find out if video is supported <br>    bVideoIn = False <br>    bVideoOut = False <br>    If objMediaSupport.QueryMediaType(TAPIMEDIATYPE_String_VideoIn) Then <br>        bVideoIn = True <br>    End If <br>     <br>    If objMediaSupport.QueryMediaType(TAPIMEDIATYPE_String_VideoOut) Then <br>     <br>        'Temporary: TBD: the null terminal causes a bug, so refuse it: <br>         <br>        'If there is no static terminal for video out, <br>        'better don't use the Null terminal, instead consider video out <br>        'as being not supported. <br>         <br>        Dim objTerminalSupport As ITTerminalSupport <br>        Set objTerminalSupport = gobjOrigAddress <br>        Set objTerminalVideoOut = objTerminalSupport.GetDefaultTerminal(TAPIMEDIATYPE_String_VideoOut) <br>        Set objTerminalSupport = Nothing <br>         <br>        If Not (objTerminalVideoOut Is Nothing) Then <br>            bVideoOut = True <br>        End If <br>             <br>        Set objTerminalVideoOut = Nothing <br>    End If <br>    <br>    'release not needed objects <br>    Set objMediaSupport = Nothing <br>    <br>    ' <br>    'pick up the default terminal for each media type (except for VideoIn, which <br>    'needs a dynamic "video window" terminal to be created) <br>    ' <br>     <br>    'Dim objTerminalSupport As ITTerminalSupport    TBD: when bug fixed, decomment this <br>     <br>    'query ITTerminalSupport from Address object <br>    Set objTerminalSupport = gobjOrigAddress <br>     <br>    Set objTerminalAudioIn = objTerminalSupport.GetDefaultTerminal(TAPIMEDIATYPE_String_AudioIn) <br>    Set objTerminalAudioOut = objTerminalSupport.GetDefaultTerminal(TAPIMEDIATYPE_String_AudioOut) <br>     <br>    If bVideoIn = True Then <br>        Set objTerminalVideoIn = objTerminalSupport.CreateTerminal(CLSID_String_VideoWindowTerm) <br>    End If <br>    If bVideoOut = True Then <br>        Set objTerminalVideoOut = objTerminalSupport.GetDefaultTerminal(TAPIMEDIATYPE_String_VideoOut) <br>    End If <br>     <br>    Set objTerminalSupport = Nothing <br>     <br>    ' <br>    'create MediaTerminals then put them in array <br>    ' <br>     <br>    Dim arrMediaTerminals() As ITMediaTerminal <br>    If bVideoIn = False And bVideoOut = False Then <br>        ReDim arrMediaTerminals(1 To 2) As ITMediaTerminal <br>    ElseIf bVideoIn = True And bVideoOut = False Or bVideoIn = False And bVideoOut = True Then <br>        ReDim arrMediaTerminals(1 To 3) As ITMediaTerminal <br>    Else <br>        ReDim arrMediaTerminals(1 To 4) As ITMediaTerminal <br>    End If <br>     <br>    Dim objMediaTerminal As ITMediaTerminal <br>     <br>    Set objMediaTerminal = gobjTapi.CreateMediaTerminal( _ <br>        TAPIMEDIATYPE_String_AudioIn, objTerminalAudioIn) <br>    Set arrMediaTerminals(1) = objMediaTerminal <br>    Set objMediaTerminal = Nothing <br>    Set objTerminalAudioIn = Nothing <br>     <br>    Set objMediaTerminal = gobjTapi.CreateMediaTerminal( _ <br>        TAPIMEDIATYPE_String_AudioOut, objTerminalAudioOut) <br>    Set arrMediaTerminals(2) = objMediaTerminal <br>    Set objMediaTerminal = Nothing <br>    Set objTerminalAudioOut = Nothing <br>     <br>    If bVideoIn = True Then <br>        Set objMediaTerminal = gobjTapi.CreateMediaTerminal( _ <br>            TAPIMEDIATYPE_String_VideoIn, objTerminalVideoIn) <br>        Set arrMediaTerminals(3) = objMediaTerminal <br>        Set objMediaTerminal = Nothing <br>        Set objTerminalVideoIn = Nothing <br>    End If <br>     <br>    If bVideoOut = True Then <br>        Set objMediaTerminal = gobjTapi.CreateMediaTerminal( _ <br>            TAPIMEDIATYPE_String_VideoOut, objTerminalVideoOut) <br>        If bVideoIn = True Then <br>            Set arrMediaTerminals(4) = objMediaTerminal <br>        Else <br>            Set arrMediaTerminals(3) = objMediaTerminal <br>        End If <br>        Set objMediaTerminal = Nothing <br>        Set objTerminalVideoOut = Nothing <br>    End If <br>     <br>    ' <br>    'register for receiving events: call RegisterCallTypes, then <br>    'register the outgoing interface. This tells Tapi what type of events <br>    'you want to receive, and for what media types; use the <br>    'same media types that are used for making the call <br>    ' <br>     <br>    If gobjAddressWithEvents Is Nothing Then <br>        'this variable will contain Nothing only if address was changed; <br>        'if it already contains a value, it means the address did not change, <br>        'so there is no need to register the outgoing interface again. <br>         <br>        'bOutgoing must be set on True in order to receive call state events <br>        'for calls that the application owns <br>        Dim bOutgoing, bOwner, bMonitor <br>        bOutgoing = True <br>        bOwner = False      'this is for receiving incoming calls <br>        bMonitor = False    'this is for monitoring calls on the address <br>         <br>        'put media type in array, then put array in a variant, <br>        'as required by RegisterCallTypes <br>        Dim arrMediaTypes() As String <br>        If bVideoIn = False And bVideoOut = False Then <br>            ReDim arrMediaTypes(1 To 2) As String <br>        ElseIf bVideoIn = True And bVideoOut = False Or bVideoIn = False And bVideoOut = True Then <br>            ReDim arrMediaTypes(1 To 3) As String <br>        Else <br>            ReDim arrMediaTypes(1 To 4) As String <br>        End If <br>        Dim MediaTypes As Variant <br>         <br>        arrMediaTypes(1) = TAPIMEDIATYPE_String_AudioIn <br>        arrMediaTypes(2) = TAPIMEDIATYPE_String_AudioOut <br>        If bVideoIn = True Then <br>            arrMediaTypes(3) = TAPIMEDIATYPE_String_VideoIn <br>        End If <br>        If bVideoOut = True Then <br>            If bVideoIn = True Then <br>                arrMediaTypes(4) = TAPIMEDIATYPE_String_VideoOut <br>            Else <br>                arrMediaTypes(3) = TAPIMEDIATYPE_String_VideoOut <br>            End If <br>        End If <br>        MediaTypes = arrMediaTypes <br>         <br>        Call gobjOrigAddress.RegisterCallTypes(bOutgoing, bOwner, bMonitor, MediaTypes) <br>         <br>        ' <br>        'register the outgoing interface that will receive the events <br>        ' <br>         <br>        Set gobjAddressWithEvents = gobjOrigAddress <br>         <br>    End If <br>     <br>    ' <br>    'create the call <br>    ' <br>    Set gobjCall = gobjOrigAddress.CreateCall(strDestAddress) <br>     <br>    'put the array of media terminals in a variant <br>    Dim MediaTerminals As Variant <br>    MediaTerminals = arrMediaTerminals <br>     <br>    ' <br>    'select on the call the MediaTerminal <br>    ' <br>    gobjCall.SelectMediaTerminals (MediaTerminals) <br>     <br>    'release media terminals <br>    Set arrMediaTerminals(1) = Nothing <br>    Set arrMediaTerminals(2) = Nothing <br>    Set MediaTerminals(1) = Nothing <br>    Set MediaTerminals(2) = Nothing <br>    If bVideoIn = True Or bVideoOut = True Then <br>        Set arrMediaTerminals(3) = Nothing <br>        Set MediaTerminals(3) = Nothing <br>    End If <br>    If bVideoIn = True And bVideoOut = True Then <br>        Set arrMediaTerminals(4) = Nothing <br>        Set MediaTerminals(4) = Nothing <br>    End If <br>     <br>    ' <br>    'Connect the call; False means that the call is made asynchronously. <br>    'The call to Connect will return immediately, before the call <br>    'gets to "connected" state; events will fire each time the <br>    'state of the call changes (to "connected", "disconnected"), <br>    'meanwhile the application can go on. <br>    ' <br>    On Error Resume Next <br>    gobjCall.Connect (False) <br>    If Err.Number &lt;&gt; 0 Then <br>        lblStatus.Caption = "Connect failed." <br>        Err.Clear <br>         <br>        'don't need this failed call anymore <br>        Set gobjCall = Nothing <br>    End If <br>     <br>End Sub <br> <br>Private Sub pbDisconnect_Click(index As Integer) <br>     <br>    If gobjCall Is Nothing Then <br>        lblStatus.Caption = "There is no call to be disconnected." <br>        Exit Sub <br>    End If <br>     <br>    gobjCall.Disconnect (DC_NORMAL) <br>     <br>End Sub <br> <br>'Search through all addresses and return the index of the one that matches <br>'the address type selected in the combo box with address types. Also, the <br>'found address must support at least the media types "audio in" and "audio out" <br>'Return 0 if no address found. Otherwise return its index, which will be <br>'between 1 and Addresses.Count <br>Private Function FindOriginationAddressIndex(objCollAddresses As ITCollection) As Long <br>    Dim nSelectedType As Long <br>    Dim indexAddr As Long, indexType As Long <br>    Dim objCrtAddress As Address <br>    Dim objCollAddrTypes As ITCollection <br>    Dim objMediaSupport As ITMediaSupport <br>    Dim bFound As Boolean <br>     <br>    ' <br>    'retrieve from combo box the type of the selected address type <br>    ' <br>    nSelectedType = cmbAddressTypes.ItemData(cmbAddressTypes.ListIndex) <br>     <br>    ' <br>    'search through all addresses the first one that matches this type <br>    'and also supports at least the media types "audio in" and "audio out" <br>    ' <br>    bFound = False <br>     <br>    For indexAddr = 1 To objCollAddresses.Count <br>        Set objCrtAddress = objCollAddresses.Item(indexAddr) <br>        Set objMediaSupport = objCrtAddress <br>         <br>        If (objMediaSupport.QueryMediaType(TAPIMEDIATYPE_String_AudioIn) And _ <br>        objMediaSupport.QueryMediaType(TAPIMEDIATYPE_String_AudioOut)) Then <br>            Set objCollAddrTypes = objCrtAddress.AddressTypes <br>             <br>            For indexType = 1 To objCollAddrTypes.Count <br>                If nSelectedType = objCollAddrTypes.Item(indexType) Then <br>                    bFound = True <br>                    Exit For <br>                End If <br>            Next indexType <br>             <br>            Set objCollAddrTypes = Nothing <br>        End If <br>         <br>        Set objMediaSupport = Nothing <br>        Set objCrtAddress = Nothing <br>         <br>        If bFound = True Then Exit For <br>    Next indexAddr <br>     <br>    ' <br>    'return the index of the found address, or 0 if no address found <br>    ' <br>    If bFound = True Then <br>        FindOriginationAddressIndex = indexAddr <br>    Else <br>        FindOriginationAddressIndex = 0 <br>    End If <br>    Exit Function <br>End Function <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

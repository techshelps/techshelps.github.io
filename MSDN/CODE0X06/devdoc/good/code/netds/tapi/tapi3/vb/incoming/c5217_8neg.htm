<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INCOMING.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5218"></a>INCOMING.FRM</h2>
<pre><code>VERSION 5.00 <br>Begin VB.Form Form1  <br>   Caption         =   "Incoming" <br>   ClientHeight    =   5025 <br>   ClientLeft      =   60 <br>   ClientTop       =   345 <br>   ClientWidth     =   4800 <br>   LinkTopic       =   "Form1" <br>   ScaleHeight     =   5025 <br>   ScaleWidth      =   4800 <br>   StartUpPosition =   3  'Windows Default <br>   Begin VB.CommandButton pbDisconnect  <br>      Caption         =   "Disconnect" <br>      Height          =   375 <br>      Index           =   1 <br>      Left            =   1440 <br>      TabIndex        =   3 <br>      Top             =   2760 <br>      Width           =   2055 <br>   End <br>   Begin VB.CommandButton pbAnswer  <br>      Caption         =   "Answer" <br>      Default         =   -1  'True <br>      Height          =   375 <br>      Index           =   0 <br>      Left            =   1440 <br>      TabIndex        =   2 <br>      Top             =   2160 <br>      Width           =   2055 <br>   End <br>   Begin VB.CommandButton RegisterForReceiveCall  <br>      Caption         =   "Register the Application  for Receiving Calls" <br>      Height          =   615 <br>      Left            =   1440 <br>      TabIndex        =   1 <br>      Top             =   1200 <br>      Width           =   2055 <br>   End <br>   Begin VB.Frame Frame1  <br>      Caption         =   "Register" <br>      Height          =   1815 <br>      Left            =   240 <br>      TabIndex        =   4 <br>      Top             =   240 <br>      Width           =   4335 <br>      Begin VB.ComboBox cmbAddressTypes  <br>         Height          =   315 <br>         Left            =   1800 <br>         TabIndex        =   0 <br>         Top             =   360 <br>         Width           =   2175 <br>      End <br>      Begin VB.Label Label1  <br>         Caption         =   "Calls you want to receive:" <br>         Height          =   495 <br>         Left            =   360 <br>         TabIndex        =   5 <br>         Top             =   360 <br>         Width           =   1095 <br>      End <br>   End <br>   Begin VB.Label lblStatus  <br>      Height          =   1335 <br>      Left            =   1080 <br>      TabIndex        =   7 <br>      Top             =   3480 <br>      Width           =   3495 <br>   End <br>   Begin VB.Label lblStatusTitle  <br>      Caption         =   "Status:" <br>      Height          =   255 <br>      Left            =   360 <br>      TabIndex        =   6 <br>      Top             =   3480 <br>      Width           =   615 <br>   End <br>End <br>Attribute VB_Name = "Form1" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br>' INCOMING.EXE <br>' <br>' Example of receiving calls with TAPI 3.0 <br>' <br>' This application will allow a user to receive audio calls <br>' by using TAPI 3.0. <br>' <br>' The application will simply look for the 1st address that is able <br>' to receive calls of the specified type (phone calls, or h323 calls - <br>' the user is allowed to decide). The address is also chosen <br>' only if it supports at least 2 media types (the idea is that <br>' usually the first 2 media types will be "audio in" and "audio out"). <br>' It will register then itself on this address to receive calls. <br>' On the received calls, it will select 2 media terminals before <br>' calling answer. The media terminals are created by using the <br>' first 2 media types enumerated by the address, with their default <br>' terminals. <br>' The app will display messages to announce whenever a new call <br>' arrives and also when a call state event fires. <br>' <br>' This application does not make outgoing calls. <br>' <br> <br>Option Explicit <br> <br>Dim gobjTapi As TAPI <br>Dim gobjDestAddress As Address <br>Dim WithEvents gobjAddressWithEvents As Address <br>Attribute gobjAddressWithEvents.VB_VarHelpID = -1 <br>Dim gobjTerminal1 As Terminal <br>Dim gobjTerminal2 As Terminal <br>Dim gguidMediaType1 <br>Dim gguidMediaType2 <br>Dim gobjReceivedCallInfo As ITCallInfo <br> <br>Dim gbSupportedCall As Boolean <br> <br>Private Sub Form_Load() <br>     <br>    pbAnswer(0).Enabled = False <br>     <br>    'populate combo box with names of call types <br>    'attach to each combo item the address type that <br>    'can receive that type of call <br>     <br>    cmbAddressTypes.AddItem ("Phone Calls") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_PHONENUMBER <br>     <br>    cmbAddressTypes.AddItem ("H323 Calls") <br>    cmbAddressTypes.ItemData(cmbAddressTypes.NewIndex) = ADDRESSTYPE_IPADDRESS <br>     <br>    'set selection on 1st item <br>    cmbAddressTypes.ListIndex = 0 <br> <br>End Sub <br> <br>Private Sub Form_Unload(Cancel As Integer) <br>     <br>    'release all global objects <br>     <br>    Set gobjReceivedCallInfo = Nothing <br>    Set gobjTerminal1 = Nothing <br>    Set gobjTerminal2 = Nothing <br>    Set gobjAddressWithEvents = Nothing <br>    Set gobjDestAddress = Nothing <br>    If Not (gobjTapi Is Nothing) Then <br>        gobjTapi.Shutdown <br>    End If <br>    Set gobjTapi = Nothing <br>     <br>    'empty combo box <br>    Dim i <br>    For i = 1 To cmbAddressTypes.ListCount <br>        cmbAddressTypes.RemoveItem (0) <br>    Next i <br>End Sub <br> <br>Private Sub DisplayCallState(State As CALL_STATE) <br>    Dim strMsg As String <br>     <br>    Select Case State <br>        Case CS_CONNECTED <br>            strMsg = "call state: CS_CONNECTED" &amp; Chr(13) <br>            strMsg = strMsg &amp; "The call was answered, now you can disconnect " <br>            strMsg = strMsg &amp; "or wait for disconnected state. " <br>            strMsg = strMsg &amp; "Don't press Answer before new call arrives. " <br>            lblStatus.Caption = strMsg <br>         <br>        Case CS_DISCONNECTED <br>            strMsg = "call state: CS_DISCONNECTED" &amp; Chr(13) <br>            strMsg = strMsg &amp; "Call will be released. " <br>            strMsg = strMsg &amp; "New incoming calls will be accepted. " <br>            lblStatus.Caption = strMsg <br>             <br>        Case CS_HOLD <br>            lblStatus.Caption = "call state: CS_HOLD" <br>        Case CS_IDLE <br>            lblStatus.Caption = "call state: CS_IDLE" <br>         <br>        Case CS_INPROGRESS <br>            lblStatus.Caption = "call state: CS_INPROGRESS" <br>         <br>        Case CS_OFFERING <br>            If gbSupportedCall = True Then <br>                strMsg = "call state: CS_OFFERING" <br>                strMsg = strMsg &amp; Chr(13) &amp; "A call was received. You can answer it" <br>                lblStatus.Caption = strMsg <br>            End If <br>         <br>        Case CS_QUEUED <br>            lblStatus.Caption = "call state: CS_QUEUED" <br>        Case Else <br>            lblStatus.Caption = "call state: unknown!!" <br>    End Select <br>End Sub <br> <br>Private Sub pbAnswer_Click(index As Integer) <br>    Dim strMsg <br>     <br>    If gobjReceivedCallInfo Is Nothing Then <br>        strMsg = "There is no call to be answered!" <br>        lblStatus.Caption = strMsg <br>        Exit Sub <br>    End If <br>         <br>    If Not (gobjReceivedCallInfo.CallState = CS_OFFERING) Then <br>        strMsg = "Cannot answer call that doesn't have offering state." <br>        strMsg = strMsg &amp; " Did you already press Answer?" <br>        lblStatus.Caption = strMsg <br>        Exit Sub <br>    End If <br>         <br>    'query ITBasicCallControl, the call control interface <br>    Dim objCallControl As ITBasicCallControl <br>    Set objCallControl = gobjReceivedCallInfo <br>     <br>    ' <br>    'prepare the terminals (take the default terminals) <br>    ' <br>    'query ITTerminalSupport from Address object <br>    Dim objTerminalSupport As ITTerminalSupport <br>     <br>    Set objTerminalSupport = gobjDestAddress <br>     <br>    Set gobjTerminal1 = objTerminalSupport.GetDefaultTerminal(gguidMediaType1) <br>    Set gobjTerminal2 = objTerminalSupport.GetDefaultTerminal(gguidMediaType2) <br>     <br>    'release not needed objects <br>    Set objTerminalSupport = Nothing <br>     <br>    'Select the media-terminals before answering <br>     <br>    'Create the media-terminals, then put them in array, <br>    'then put array in variant <br>    Dim MediaTerminals As Variant <br>    Dim arrMediaTerminals(0 To 1) As ITMediaTerminal <br>    MediaTerminals = arrMediaTerminals <br>    Set MediaTerminals(0) = gobjTapi.CreateMediaTerminal( _ <br>        gguidMediaType1, gobjTerminal1) <br>    Set MediaTerminals(1) = gobjTapi.CreateMediaTerminal( _ <br>        gguidMediaType2, gobjTerminal2) <br>    objCallControl.SelectMediaTerminals (MediaTerminals) <br>     <br>    Set MediaTerminals(0) = Nothing <br>    Set MediaTerminals(1) = Nothing <br>    Set gobjTerminal1 = Nothing <br>    Set gobjTerminal2 = Nothing <br>     <br>     <br>    'Answer <br>    objCallControl.Answer <br>     <br>    'disable the button <br>    pbAnswer(0).Enabled = False <br>     <br>    'release the call control interface <br>    Set objCallControl = Nothing <br>     <br>End Sub <br> <br>Private Sub pbDisconnect_Click(index As Integer) <br>     <br>    If gobjReceivedCallInfo Is Nothing Then <br>        Dim strMsg As String <br>        strMsg = "There is no call to be disconnected." <br>        lblStatus.Caption = strMsg <br>        Exit Sub <br>    End If <br>     <br>    'disconnect the call: need to query its call control interface for this <br>    Dim objCallControl As ITBasicCallControl <br>     <br>    Set objCallControl = gobjReceivedCallInfo <br>     <br>    objCallControl.Disconnect (DC_NORMAL) <br>     <br>    'release the call control interface <br>    Set objCallControl = Nothing <br>         <br>End Sub <br> <br>'this "callback" function must be reentrant <br>Private Sub gobjAddressWithEvents_CallEventNotification(ByVal pAddress As TAPI3Lib.ITAddress, ByVal CallEventType As TAPI3Lib.CALL_EVENT_TYPE, ByVal pEvent As Object) <br>     <br>    Dim strMsg <br>     <br>    If CallEventType = CET_CALLOWNER Then <br>         <br>        gbSupportedCall = True <br>         <br>        If Not (gobjReceivedCallInfo Is Nothing) Then <br>            gbSupportedCall = False <br>             <br>            strMsg = "This app doesn't support a second call. " <br>            strMsg = strMsg &amp; "Unsupported second call will be rejected!" <br>            lblStatus.Caption = strMsg <br>             <br>            'pEvent is declared as Object, so for using it you must <br>            'query its call control interface, ITBasicCallControl <br>            Dim objReceivedCallControl As ITBasicCallControl <br>            Set objReceivedCallControl = pEvent <br>             <br>            'Reject the not supported call by calling Disconnect <br>            'Note: this second call will arrive only if tapi provider <br>            'supports more than 1 call per address. <br>            Dim code As DISCONNECT_CODE <br>            code = DC_REJECTED <br>            objReceivedCallControl.Disconnect (code) <br>             <br>            'release all objects that are not needed any longer <br>            'it is important to release also the received object pEvent <br>             <br>            Set objReceivedCallControl = Nothing <br>            Set pEvent = Nothing <br>             <br>            Exit Sub <br>        End If <br>         <br>        'query ITCallInfo interface from pEvent, and store it <br>        Set gobjReceivedCallInfo = pEvent <br>         <br>        'reenable the button <br>        pbAnswer(0).Enabled = True <br>     <br>    End If <br>     <br>    If CallEventType = CET_CALLSTATEEVENT Then <br>         <br>        'for this type of event, the object pEvent must be <br>        'queried for its ITCallStateEvent interface <br>        Dim objCallStateEvent As ITCallStateEvent <br>        Set objCallStateEvent = pEvent <br>         <br>        Dim State As CALL_STATE <br>        Dim objEventCallInfo As ITCallInfo <br>         <br>        'extract the call object from pEvent (from its <br>        'ITCallStateEvent interface) <br>        Set objEventCallInfo = objCallStateEvent.Call <br>        State = objCallStateEvent.State <br>         <br>        DisplayCallState (State) <br>         <br>        If objEventCallInfo Is gobjReceivedCallInfo Then <br>         <br>            If State = CS_DISCONNECTED Then <br>                'after call is disconnected, you don't need <br>                'its object anymore; you can only release it <br>                Set gobjReceivedCallInfo = Nothing <br>            End If <br>         <br>        End If <br>         <br>        'release not needed objects <br>        Set objEventCallInfo = Nothing <br>        Set objCallStateEvent = Nothing <br>    End If <br>     <br>    'always release the received pEvent <br>    Set pEvent = Nothing <br>    Exit Sub <br>End Sub <br> <br>Private Sub RegisterForReceiveCall_Click() <br>     <br>    If Not (gobjTapi Is Nothing) Then <br>        Dim strMsg <br>        strMsg = "You already did that :-)" <br>        strMsg = strMsg &amp; Chr(13) <br>        strMsg = strMsg &amp; "Restart the app if you want to register another address." <br>        lblStatus.Caption = strMsg <br>        Exit Sub <br>    End If <br>     <br>    RegisterForReceiveCall.MousePointer = vbHourglass <br>     <br>    'create the tapi object <br>    Set gobjTapi = New TAPI <br>     <br>    'call Initialize before calling any other tapi function <br>    gobjTapi.Initialize <br>     <br>    'pick up the collection of addresses <br>    Dim objcollAddress As ITCollection <br>    Set objcollAddress = gobjTapi.Addresses <br>     <br>    'search address that supports the desired address type <br>    Dim nAddressIndex <br>    nAddressIndex = FindAddressIndex(objcollAddress) <br>     <br>    If nAddressIndex &lt; 1 Or nAddressIndex &gt; objcollAddress.Count Then <br>         <br>        strMsg = "Could not find an appropriate address for this address type!" &amp; _ <br>            Chr(13) &amp; "Need 2 media types at least to be available on that address." <br>        lblStatus.Caption = strMsg <br>         <br>        'release all objects <br>        Set objcollAddress = Nothing <br>        If Not (gobjTapi Is Nothing) Then <br>            gobjTapi.Shutdown <br>        End If <br>        Set gobjTapi = Nothing <br>        RegisterForReceiveCall.MousePointer = vbDefault <br>        Exit Sub <br>    End If <br>     <br>    'pick up the "N"-th address - the address on which <br>    'you want to receive calls <br>    Set gobjDestAddress = objcollAddress.Item(nAddressIndex) <br>    Set objcollAddress = Nothing    'no more needed, release <br>     <br>    ' <br>    'pick up first 2 media types supported by this address <br>    ' <br>     <br>    Dim objMediaSupport As ITMediaSupport <br>    Dim objCollMediaTypes As ITCollection <br>     <br>    'query ITMediaSupport interface from Address object <br>    Set objMediaSupport = gobjDestAddress <br>     <br>    'pick up the collection of media types <br>    Set objCollMediaTypes = objMediaSupport.MediaTypes <br>     <br>    gguidMediaType1 = objCollMediaTypes.Item(1) <br>    gguidMediaType2 = objCollMediaTypes.Item(2) <br>     <br>    'release not needed objects <br>    Set objMediaSupport = Nothing <br>    Set objCollMediaTypes = Nothing <br>    <br>    ' <br>    'pick up the default terminal for each media type <br>    ' <br>     <br>'    Dim objTerminalSupport As ITTerminalSupport <br>' <br>'    'query ITTerminalSupport from Address object <br>'    Set objTerminalSupport = gobjDestAddress <br>' <br>'    Set gobjTerminal1 = objTerminalSupport.GetDefaultTerminal(gguidMediaType1) <br>'    Set gobjTerminal2 = objTerminalSupport.GetDefaultTerminal(gguidMediaType2) <br>' <br>'    'release not needed objects <br>'    Set objTerminalSupport = Nothing <br>' <br>    'register (specify) media types for which you want <br>    'to receive calls; <br>    'only calls that have this media type will be offered to the app <br>    'the media types must be passed to RegisterCallTypes in <br>    'an array contained in a variant <br>    Dim arrMediaTypes(0 To 1) As String <br>    Dim bOutgoing, bOwner, bMonitor <br>    Dim MediaTypes  As Variant <br>    bOutgoing = False <br>    'bOwner = True ensures that app receives incoming calls <br>    'and their call state events <br>    bOwner = True <br>    bMonitor = False <br>    arrMediaTypes(0) = gguidMediaType1 <br>    arrMediaTypes(1) = gguidMediaType2 <br>    MediaTypes = arrMediaTypes <br>    Call gobjDestAddress.RegisterCallTypes(bOutgoing, bOwner, _ <br>        bMonitor, MediaTypes) <br>     <br>    'register the outgoing interface (the one that will actually <br>    'receive and process the events) <br>    On Error Resume Next <br>    Set gobjAddressWithEvents = gobjDestAddress <br>    If Err.Number &lt;&gt; 0 Then <br>        strMsg = "Registering for receiving calls failed." &amp; Chr(13) &amp; _ <br>            "If you have a data modem, replace it with a voice modem" <br>        strMsg = strMsg &amp; "Quit the app and try again." <br>        lblStatus.Caption = strMsg <br>        RegisterForReceiveCall.MousePointer = vbDefault <br>        Exit Sub <br>    End If <br>     <br>    'from now on the app is able to receive calls made on the <br>    'specified address, with the specified media type <br>     <br>    RegisterForReceiveCall.MousePointer = vbDefault <br> <br>    lblStatus.Caption = "Waiting for a call..." <br>     <br>End Sub <br> <br>'Search through all addresses and return the index of the one that matches <br>'the address type selected in the combo box with address types. Also, the <br>'found address must support at least 2 media types (so that later we can <br>'safely use the first and second media type). <br>'Note: usually, the first 2 media types are "audio in" and "audio out". <br>'Return 0 if no address found. Otherwise return its index, which will be <br>'between 1 and Addresses.Count <br>Private Function FindAddressIndex(objCollAddresses As ITCollection) As Long <br>    Dim nSelectedType As Long <br>    Dim indexAddr As Long, indexType As Long <br>    Dim objCrtAddress As Address <br>    Dim objCollAddrTypes As ITCollection <br>    Dim objMediaSupport As ITMediaSupport <br>    Dim objCollMediaTypes As ITCollection <br>    Dim bFound As Boolean <br>     <br>    ' <br>    'retrieve from combo box the type of the selected address type <br>    ' <br>    nSelectedType = cmbAddressTypes.ItemData(cmbAddressTypes.ListIndex) <br>     <br>    ' <br>    'search through all addresses the first one that matches this type <br>    'and also supports at least one media type <br>    ' <br>    bFound = False <br>     <br>    For indexAddr = 1 To objCollAddresses.Count <br>        Set objCrtAddress = objCollAddresses.Item(indexAddr) <br>        Set objMediaSupport = objCrtAddress <br>        Set objCollMediaTypes = objMediaSupport.MediaTypes <br>         <br>        If objCollMediaTypes.Count &gt;= 2 Then <br>            Set objCollAddrTypes = objCrtAddress.AddressTypes <br>             <br>            For indexType = 1 To objCollAddrTypes.Count <br>                If nSelectedType = objCollAddrTypes.Item(indexType) Then <br>                    bFound = True <br>                    Exit For <br>                End If <br>            Next indexType <br>             <br>            Set objCollAddrTypes = Nothing <br>        End If <br>         <br>        Set objCollMediaTypes = Nothing <br>        Set objMediaSupport = Nothing <br>        Set objCrtAddress = Nothing <br>         <br>        If bFound = True Then Exit For <br>    Next indexAddr <br>     <br>    ' <br>    'return the index of the found address, or 0 if no address found <br>    ' <br>    If bFound = True Then <br>        FindAddressIndex = indexAddr <br>    Else <br>        FindAddressIndex = 0 <br>    End If <br>    Exit Function <br>End Function <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

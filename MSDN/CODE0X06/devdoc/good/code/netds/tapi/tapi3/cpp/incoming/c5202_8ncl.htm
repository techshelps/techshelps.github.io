<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CALLNOT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5205"></a>CALLNOT.CPP</h2>
<pre><code>////////////////////////////////////////////////////////////////////// <br>// callnot.cpp <br>// <br>// Implementation of the ITCallNotification interface. <br>// <br>// This is an outgoing interface that is defined by TAPI 3.0.  This <br>// is basically a callback function that TAPI 3.0 calls to inform <br>// the application of events related to calls (on a specific address) <br>// <br>// Please refer to COM documentation for information on outgoing <br>// interfaces. <br>//  <br>// An application must implement and register this interface in order <br>// to receive calls and events related to calls <br>// <br>////////////////////////////////////////////////////////////////////// <br> <br> <br>#include "windows.h" <br>#include "tapi3.h" <br>#include "callnot.h" <br>#include "resource.h" <br> <br>extern ITBasicCallControl * gpCall; <br>extern HWND ghDlg; <br> <br>void <br>DoMessage( <br>          LPWSTR pszMessage <br>         ); <br> <br>void <br>SetStatusMessage( <br>                 LPWSTR pszMessage <br>                ); <br> <br>void <br>EnableButton( <br>             int ID <br>            ); <br>void <br>DisableButton( <br>              int ID <br>             ); <br> <br> <br>/////////////////////////////////////////////////////////////////// <br>// CallEventNotification <br>// <br>// The only method in the ITCallEventNotification interface.  This gets <br>// called by TAPI 3.0 when there is a call event to report <br>// <br>/////////////////////////////////////////////////////////////////// <br>HRESULT <br>STDMETHODCALLTYPE <br>CCallNotification::CallEventNotification( <br>                                         ITAddress * pAddress, <br>                                         CALL_EVENT_TYPE EventType, <br>                                         IDispatch * pEvent <br>                                        ) <br>{ <br>    HRESULT hr; <br> <br>    // EventType can be CET_CALLMONITOR, CET_CALLOWNER, or CET_CALLSTATEEVENT <br>    switch ( EventType ) <br>    { <br>        case CET_CALLMONITOR: <br>        { <br>            // CET_CALLMONITOR means that the application is being notified <br>            // of a new call, and the application has monitor privileges on <br>            // that call.  pEvent is the Call object. <br> <br>            // We should not get any CET_CALLMONTOR notifications in <br>            // this application, since we only registered for owner <br>            // in RegisterCallTypes <br> <br>            break; <br>        } <br>         <br>        case CET_CALLOWNER: <br>        { <br>            // CET_CALLOWNER means that the application is being notified <br>            // of a call, and the applications has owner privileges on <br>            // that call.  pEvent is the Call object. <br>            // <br>            // Note that we don't answer to call at this point.  The application <br>            // should wait for a CS_OFFERING CallState message before answering <br>            // the call. <br> <br>            // pEvent should be the call.  Get the ITBasicCallControl interface <br>            hr = pEvent-&gt;QueryInterface( IID_ITBasicCallControl, (void **)&amp;gpCall ); <br> <br>            if (S_OK != hr) <br>            { <br>                DoMessage( L"Incoming call, but failed to get the interface"); <br>                gpCall-&gt;Release(); <br>            } <br>            else <br>            { <br>                EnableButton( IDC_ANSWER ); <br>                DisableButton( IDC_DISCONNECT ); <br>                SetStatusMessage(L"Incoming Owner Call"); <br>            } <br>             <br>            break; <br>        } <br>         <br>        case CET_CALLSTATEEVENT: <br>        { <br>            // CET_CALLSTATEEVENT is a call state event.  pEvent is <br>            // an ITCallStateEvent object <br> <br>            CALL_STATE       cs; <br>            ITCallStateEvent * pCallStateEvent; <br> <br>            // Get the interface <br>            pEvent-&gt;QueryInterface( IID_ITCallStateEvent, (void **)&amp;pCallStateEvent ); <br> <br>            // get the CallState that we are being notified of. <br>            pCallStateEvent-&gt;get_State( &amp;cs ); <br> <br>            // if it's offering, update our UI <br>            if (CS_OFFERING == cs) <br>            { <br>                SetStatusMessage(L"Click the Answer button"); <br>            } <br>            else if (CS_DISCONNECTED == cs) <br>            { <br>                PostMessage(ghDlg, WM_COMMAND, IDC_DISCONNECTED, 0); <br>            } <br> <br>            // Release the interface <br>            pCallStateEvent-&gt;Release(); <br> <br>            break; <br>        } <br>    } <br> <br>     <br>    return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

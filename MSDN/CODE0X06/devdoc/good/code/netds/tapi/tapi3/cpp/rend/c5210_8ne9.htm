<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REND.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5211"></a>REND.CPP</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1995 Microsoft Corporation <br> <br>Module Name: <br> <br>    rend.cpp <br> <br>Abstract: <br> <br>    This demonstrates how to use TAPI 3.0 Rendezvous Controls APIs to : <br>    . initialize conference directory, get directory server name and path, <br>    . create a conference, get a conference, and delete a conference, <br>    . and enumerate conferences. <br> <br>Notes: <br> <br>    1. Build the program, and the exe is obj\*\rend.exe <br>    2. To run it, type "rend" on the command line.  <br>    3. The directory server and path should be specified in registry: <br>        HKLM\Software\Microsoft\Windows\CurentVersion\Dynamic Directory <br>        as "ServerName" (REG_SZ), and "DirectoryPath" (REG_SZ) <br> <br>Author: <br> <br>    Bin Li 17-Aug-1997 <br> <br>Revision History: <br> <br>    dd-mmm-yyyy &lt;email&gt; <br> <br>--*/ <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//                                                                           // <br>// include                                                                   // <br>//                                                                           // <br> <br>#include &lt;windows.h&gt; <br>#include &lt;objbase.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;oleauto.h&gt; <br>#include &lt;rend.h&gt; <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//                                                                           // <br>// define                                                                    // <br>//                                                                           // <br> <br>#define MAX_STRING_LENGTH255 <br>#define MAX_NUM_CONFERENCES5 <br>#define CONF_NAME_PREFIXL"Rendezvous Controls Sample Program - CONFERENCE No. " <br> <br>#define RETURN_ON_FAILURE_NODIR(hr)   \ <br>    {if (FAILED(hr)) {  wprintf(L"Error 0x%x\n", hr); return hr; } } <br> <br>#define RETURN_ON_FAILURE_DIR(hr)\ <br>    {if (FAILED(hr))                \ <br>     {  wprintf(L"Error 0x%x\n", hr);\ <br>        pITDir-&gt;Release();          \ <br>        return hr;                  \ <br>     }                              \ <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//                                                                           // <br>// functions                                                                 // <br>//                                                                           // <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//                                                                           // <br>// main                                                                      // <br>//                                                                           // <br> <br>INT _CRTAPI1 <br>main() <br>{ <br>ITConferenceDirectory*pITDir; <br>BSTRbszConfName[MAX_NUM_CONFERENCES]; <br> <br>    /* <br>     * 1. initialize conference directory server and path <br>     */ <br> <br>wprintf(L"\n\nInitialize conference directory ...\n"); <br> <br>::CoInitialize( NULL ); <br> <br>// query for conference directory interface <br>HRESULT hr = ::CoCreateInstance(CLSID_ConferenceDirectory, <br>                                    NULL, <br>                                    CLSCTX_INPROC_SERVER, <br>                                    IID_ITConferenceDirectory, <br>                                    (void **)&amp;pITDir <br>                                    ); <br> <br>    RETURN_ON_FAILURE_NODIR( hr ); <br> <br>// initialize conference directory with default values in registry <br>    // you can also specify different directoy server or path by replacing <br>    // "NULL" with the respective name or path <br>hr = pITDir-&gt;Init( NULL, NULL ); <br> <br>RETURN_ON_FAILURE_NODIR( hr ); <br> <br>    BSTR    bszServer   = NULL; <br>    BSTR    bszDirPath  = NULL; <br> <br>    // query the server name <br>hr = pITDir-&gt;get_ServerName( &amp;bszServer ); <br>RETURN_ON_FAILURE_DIR( hr ); <br> <br>    // query the directoy path <br>hr = pITDir-&gt;get_DirectoryPath( &amp;bszDirPath ); <br>RETURN_ON_FAILURE_DIR( hr ); <br> <br>wprintf(L"\tServer = %s\tDirectoryPath=%s\n",  <br>bszServer, bszDirPath); <br> <br>::SysFreeString( bszServer ); <br>::SysFreeString( bszDirPath ); <br> <br> <br>/* <br> * 2. create conferences <br> */ <br> <br>wprintf(L"Create conference ...\n"); <br>for (int i = 0; i &lt; MAX_NUM_CONFERENCES; i ++) <br>{ <br>WCHARtszConfName[MAX_STRING_LENGTH]; <br> <br>swprintf( tszConfName, L"%s%d",CONF_NAME_PREFIX,i );  <br>bszConfName[i]  = ::SysAllocString( tszConfName ); <br> <br>ITConference*pITConf; <br> <br>        // to ensure a successful creating, delete it first in case a same <br>        // name conference already exists <br>hr = pITDir-&gt;DeleteConference( bszConfName[i] ); <br> <br>wprintf(L"\t%s", bszConfName[i]); <br>hr = pITDir-&gt;CreateConference( bszConfName[i], &amp;pITConf ); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br> <br>        // release the interface, as we don't need it now <br>        // also, (RefCount == 0) will cause the conferenc blob to be written <br>        // to the ILS server <br>        pITConf-&gt;Release(); <br>  <br>wprintf(L"\n"); <br>} <br> <br>/* <br> * 3. enumerate conferences <br> */ <br> <br>// set a filter used for enumeration to limit the set of conferences <br>    // that will be enumerated. <br>    // if no filter is set, all conferences will be retrieved <br>     <br>WCHARtszFilter[MAX_STRING_LENGTH]; <br> <br>swprintf( tszFilter, L"uid=%s*", CONF_NAME_PREFIX ); <br>BSTRbszFilter = SysAllocString( tszFilter ); <br> <br>wprintf(L"Set a filter \"%s\" ...", bszFilter ); <br>hr = pITDir-&gt;put_Filter( bszFilter ); <br> <br>::SysFreeString( bszFilter ); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br>wprintf(L"\n"); <br> <br>// get the enumerator <br>IEnumVARIANT*pIEnumConf; <br> <br>wprintf(L"Get an enumerator ..."); <br>hr = pITDir-&gt;get__NewEnum( (IUnknown **) &amp;pIEnumConf ); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br>wprintf(L"\n"); <br> <br>// enumerate each conference <br>wprintf(L"Enumerate conference ...\n"); <br>i = 0; <br>do <br>{ <br>VARIANTvarITConf; <br>ULONGcConferencesGet; <br> <br>// initialization is required for NT5 Beta-1 <br>::VariantInit( &amp;varITConf ); <br> <br>wprintf(L"\t%d - ", i); <br>hr = pIEnumConf-&gt;Next(1, &amp;varITConf, &amp;cConferencesGet); <br> <br>if ( SUCCEEDED(hr) &amp;&amp; (hr != S_FALSE) ) <br>{ <br>ITConference*pITConference = (ITConference *) <br>     V_DISPATCH( &amp;varITConf ); <br>BSTR bConfNameGet = NULL; <br> <br>hr = pITConference-&gt;get_Name( &amp;bConfNameGet ); <br> <br>            pITConference-&gt;Release(); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br> <br>wprintf(L"%s\n", bConfNameGet); <br>::SysFreeString( bConfNameGet ); <br>i = i + 1; <br>} <br>} <br>while ( SUCCEEDED(hr) &amp;&amp; (hr != S_FALSE) ); <br> <br>    pIEnumConf-&gt;Release(); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br> <br>wprintf(L"\n"); <br> <br>/* <br> *  4. get and delete conferences <br> */ <br> <br>wprintf(L"Get then delete conference ...\n"); <br>for (i = 0; i &lt; MAX_NUM_CONFERENCES; i ++) <br>{ <br>// get a conference <br>ITConference*pITConf; <br> <br>wprintf(L"\t%d - %s", i, bszConfName[i]); <br>hr = pITDir-&gt;GetConference( bszConfName[i], &amp;pITConf ); <br> <br>        pITConf-&gt;Release(); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br> <br>// delete the conference <br>hr = pITDir-&gt;DeleteConference( bszConfName[i] ); <br>wprintf(L"\n"); <br> <br>::SysFreeString( bszConfName[i] ); <br> <br>RETURN_ON_FAILURE_DIR( hr ); <br>} <br> <br>pITDir-&gt;Release(); <br> <br>::CoUninitialize(); <br> <br>    wprintf(L"\n\n"); <br> <br>return 0; <br> <br>} // end of main <br> <br> <br> <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FRMUSING.FRM</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5220"></a>FRMUSING.FRM</h2>
<pre><code>VERSION 5.00 <br>Begin VB.Form frmUsing  <br>   Caption         =   "Connect Using" <br>   ClientHeight    =   3195 <br>   ClientLeft      =   60 <br>   ClientTop       =   345 <br>   ClientWidth     =   6780 <br>   LinkTopic       =   "Form1" <br>   MaxButton       =   0   'False <br>   MinButton       =   0   'False <br>   ScaleHeight     =   3195 <br>   ScaleWidth      =   6780 <br>   StartUpPosition =   3  'Windows Default <br>   Begin VB.CommandButton pbCancel  <br>      Caption         =   "Cancel" <br>      Height          =   375 <br>      Left            =   5160 <br>      TabIndex        =   4 <br>      Top             =   1680 <br>      Width           =   1335 <br>   End <br>   Begin VB.CommandButton pbOK  <br>      Caption         =   "OK" <br>      Height          =   375 <br>      Left            =   5160 <br>      TabIndex        =   3 <br>      Top             =   960 <br>      Width           =   1335 <br>   End <br>   Begin VB.ComboBox cmbTerminals  <br>      Height          =   315 <br>      Left            =   1200 <br>      TabIndex        =   2 <br>      Top             =   2040 <br>      Width           =   3615 <br>   End <br>   Begin VB.ComboBox cmbMediaTypes  <br>      Height          =   315 <br>      Left            =   1200 <br>      TabIndex        =   1 <br>      Top             =   1320 <br>      Width           =   3615 <br>   End <br>   Begin VB.ComboBox cmbAddresses  <br>      Height          =   315 <br>      Left            =   1200 <br>      TabIndex        =   0 <br>      Top             =   600 <br>      Width           =   3615 <br>   End <br>   Begin VB.Label lblTerminal  <br>      Caption         =   "Terminal" <br>      Height          =   255 <br>      Left            =   240 <br>      TabIndex        =   7 <br>      Top             =   2160 <br>      Width           =   855 <br>   End <br>   Begin VB.Label lblMediaType  <br>      Caption         =   "Media Type" <br>      Height          =   255 <br>      Left            =   240 <br>      TabIndex        =   6 <br>      Top             =   1440 <br>      Width           =   855 <br>   End <br>   Begin VB.Label lblAddress  <br>      Caption         =   "Origination Address" <br>      Height          =   375 <br>      Left            =   240 <br>      TabIndex        =   5 <br>      Top             =   600 <br>      Width           =   855 <br>   End <br>End <br>Attribute VB_Name = "frmUsing" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br>' <br>'frmUsing.frm <br>'Contains implementation of dialog box that allows user to make <br>'a selection of tapi objects that are going to be used in making <br>'the call: the origination address + the mediaterminal to be <br>'selected on call. <br>' <br>'Create/Destroy behaviour: <br>'This form reads all Tapi objects when it's created, and releases <br>'all Tapi objects (including Tapi obj itself) when it's destroyed. <br>'That's why I don't want this dialog to be destroyed every time <br>'when user closes the window (with Ok, Cancel or control menu). <br>'Instead, I simply hide it when it is closed by the user (by means <br>'of Ok, Close or control menu), and I destroy it only when parent <br>'ActiveX Document terminates. (It also is created by the parent <br>'ActiveX Document when this one is created.) <br>' <br> <br>Option Explicit <br> <br>'Global variables <br>Private mnTapiRefCount As Long  'Reference count: incremented when <br>                                'InitializeTapiObjects is called <br>                                'decremented when <br>                                'ReleaseTapiObjects is called <br> <br>' <br>'Global variables that don't change along the form's life <br>'Next arrays have the same dimension = number of addresses <br>'Each index in each array corresponds to one address <br>'For address "i": <br>' - marrobjAddresses(i) contains the address object <br>' - marrMediaTypesPerAddr(i) contains an arrguidMediaTypes for that address <br>' - marrTerminalsPerAddr(i) contains an arrobjTerminals for that address <br>' <br>Private mobjTapi As TAPI <br>Private mcollobjAddresses As Collection         'collection of Address objects <br>Private mcollMediaTypesPerAddr As Collection    'collection of collections of guidMediaTypes <br>Private mcollTerminalsPerAddr As Collection     'collection of collections of Terminal objects <br> <br>' <br>'Global variables that change depending on comboboxes selection <br>' <br>Private mobjCrtAddress As Address <br>Private mobjCrtMediaTerminal As ITMediaTerminal <br> <br>'next function populates Tapi objects and increments reference count <br>'Tapi objects are populated only when RefCount becomes 1 <br>Public Sub InitializeTapiObjects() <br>    mnTapiRefCount = mnTapiRefCount + 1 <br>     <br>    If mnTapiRefCount &lt;&gt; 1 Then <br>        Exit Sub <br>    End If <br>        <br>    Call PopulateTapiObjects <br>         <br>    'because Tapi objects are now known, UI can also be populated <br>    Call PopulateCmbAddresses <br>End Sub <br> <br>'next function releases Tapi objects and decrements reference count <br>'Tapi objects are released only when RefCount becomes 0 <br>Public Sub ReleaseTapiObjects() <br>    mnTapiRefCount = mnTapiRefCount - 1 <br>     <br>    If mnTapiRefCount &lt;&gt; 0 Then <br>        Exit Sub <br>    End If <br>        <br>    Call DepopulateTapiObjects <br>         <br>End Sub <br> <br>'Next function returns the selected address <br>'The returned Address is Nothing if there is something wrong <br>'with the selection <br>Public Property Get Address() As Address <br>    Debug.Assert (mnTapiRefCount &gt; 0) <br>     <br>    Set Address = mobjCrtAddress <br> <br>End Property <br> <br>'next function returns an array with the selected media terminals <br>'The returned MediaTerminal is Nothing if there is something wrong <br>'with the selection <br>Public Property Get MediaTerminals() As Variant <br>    Debug.Assert (mnTapiRefCount &gt; 0) <br>     <br>    Dim arrMediaTerminals(1 To 1) As ITMediaTerminal <br>    Set arrMediaTerminals(1) = mobjCrtMediaTerminal <br> <br>    MediaTerminals = arrMediaTerminals <br>     <br>    Set arrMediaTerminals(1) = Nothing <br>End Property <br> <br>'When User tries to close the dialog, don't destroy the window, <br>'just hide it. <br>Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer) <br>    If UnloadMode = vbFormControlMenu Then <br>        Cancel = True <br>        Me.Hide <br>        Debug.Print "Form_QueryUnload: unload refused. Instead, it was just hidden." <br>    Else <br>        Cancel = False <br>    End If <br>End Sub <br> <br>'When User tries to close the dialog, don't destroy the window, <br>'just hide it. <br>Private Sub pbCancel_Click() <br>    frmUsing.Hide <br>End Sub <br> <br>'When User tries to close the dialog, don't destroy the window, <br>'just hide it. <br>'Check selection made by user, and if it's wrong, don't let him <br>'close the dialog <br>Private Sub pbOK_Click() <br>    'Calling ChangeSelectedObjects() will set new values <br>    'for mobjCrtAddress and mobjCrtMediaTerminal. <br>    'It will also display an error message if new values <br>    'selected by the user are invalid. <br>    If ChangeSelectedObjects() Then <br>        frmUsing.Hide <br>    End If <br>End Sub <br> <br>Private Sub Form_Load() <br>    Debug.Print ("frmUsing: Form_Load") <br>    mnTapiRefCount = 0 <br>End Sub <br> <br>Private Sub Form_Unload(Cancel As Integer) <br>    Debug.Print ("frmUsing: Form_Unload") <br>     <br>    'refuse Unload if reference count &lt;&gt; 0, there still exists <br>    'an ActiveXDocument that might want to use the Tapi objects <br>    'from this form. <br>    If mnTapiRefCount &lt;&gt; 0 Then <br>        Dim strMsg <br>        strMsg = "Form_Unload: unload refused, " <br>        strMsg = strMsg &amp; "Tapi reference count still not zero." <br>        Debug.Print strMsg <br>        Cancel = True <br>    End If <br>     <br>End Sub <br> <br>Private Sub PopulateTapiObjects() <br>On Error GoTo ErrHandle <br>     <br>    'populate Tapi object <br>    Set mobjTapi = New TAPI <br>    mobjTapi.Initialize <br>     <br>    'populate collection of Addresses <br>    PopulateAddresses <br>     <br>    'populate collection of MediaTypes (one collection for each address) <br>    PopulateMediaTypes <br>             <br>    'populate collection of Terminals (one collection for each address) <br>    PopulateTerminals <br>     <br>cleanup: <br>    Exit Sub <br>     <br>ErrHandle: <br>    'On error, I Resume Next, because I want all collections to be <br>    'created, at least as empty collections (with count = 0) <br>     <br>    Call PrintError("PopulateTapiObjects", Err) <br>    Resume Next <br>End Sub <br> <br>'create a collection that contains all addresses <br>Private Sub PopulateAddresses() <br>On Error GoTo ErrHandle <br> <br>    Dim objcollAddresses As ITCollection <br>    Dim nAddrCount As Long <br>    Dim nIterator As Long <br>     <br>    'read all addresses from Tapi <br>    Set objcollAddresses = mobjTapi.Addresses <br>    nAddrCount = objcollAddresses.Count <br> <br>    'populate collection of Addresses <br>    Set mcollobjAddresses = New Collection <br>    For nIterator = 1 To nAddrCount <br>        mcollobjAddresses.Add _ <br>            Item:=objcollAddresses.Item(nIterator) <br>    Next <br> <br>cleanup: <br>    Set objcollAddresses = Nothing <br>    Exit Sub <br>     <br>ErrHandle: <br>    'On error, I Resume Next, because I want all collections to be <br>    'created, at least as empty collections (with count = 0) <br>     <br>    Call PrintError("PopulateAddresses", Err) <br>    Resume Next <br>End Sub <br> <br>'create a collection of collections: a collection for each <br>'address, each collection containing all media types for that <br>'address <br>Private Sub PopulateMediaTypes() <br>On Error GoTo ErrHandle <br>     <br>    Dim objcollAddresses As ITCollection <br>    Dim nAddrCount As Long, nCrtCount As Long <br>    Dim nAddrIndex As Long, nMTIndex As Long <br>     <br>    Dim objcrtMediaSupport As ITMediaSupport <br>    Dim collCrtMediaTypes As Collection     'collection of guids <br>    Dim strCrtGuidName As String <br>     <br>    'read all addresses from Tapi <br>    Set objcollAddresses = mobjTapi.Addresses <br>    nAddrCount = objcollAddresses.Count <br> <br>    'populate collections of MediaTypes (one collection for each address) <br> <br>    Set mcollMediaTypesPerAddr = New Collection <br>    For nAddrIndex = 1 To nAddrCount <br>        'create a collection with all media types for this address <br>        Set collCrtMediaTypes = New Collection <br> <br>        Set objcrtMediaSupport = objcollAddresses.Item(nAddrIndex) <br>        nCrtCount = 0 <br>        nCrtCount = objcrtMediaSupport.MediaTypes.Count <br>        For nMTIndex = 1 To nCrtCount <br>             <br>            strCrtGuidName = "" <br>            strCrtGuidName = MTGuidToName( _ <br>                objcrtMediaSupport.MediaTypes.Item(nMTIndex)) <br>             <br>            'reject unknown "guid"s (for which I don't know the name) <br>            If strCrtGuidName &lt;&gt; "" Then <br>                collCrtMediaTypes.Add _ <br>                    Item:=objcrtMediaSupport.MediaTypes.Item(nMTIndex) <br>            End If <br>        Next nMTIndex <br> <br>        'save collection in array of collections <br>        On Error Resume Next <br>        mcollMediaTypesPerAddr.Add Item:=collCrtMediaTypes <br>        On Error GoTo ErrHandle <br> <br>        If Err.Number &lt;&gt; 0 Then <br>            Call PrintError("PopulateMediaTypes: adding collections", Err) <br>            Err.Clear <br>             <br>            'this collection is useless, release it, but first <br>            'remove its items <br>            nCrtCount = 0 <br>            nCrtCount = collCrtMediaTypes.Count <br>            For nMTIndex = 1 To nCrtCount <br>                'collections are reindexed automatically, <br>                'so remove the 1st element on each iteration <br>                collCrtMediaTypes.Remove 1 <br>            Next <br>        End If <br>         <br>        'Cleanup "crt" variables (that change in each iteration) <br>        'Note: don't remove items from CrtCollection, because <br>        'the corresponding items from "collection of collections" <br>        'will also be removed! <br>        Set collCrtMediaTypes = Nothing <br>        Set objcrtMediaSupport = Nothing <br>    Next nAddrIndex <br> <br>cleanup: <br>    Set objcollAddresses = Nothing <br>    Exit Sub <br>     <br>ErrHandle: <br>    'On error, I Resume Next, because I want all collections to be <br>    'created, at least as empty collections (with count = 0) <br>     <br>    Call PrintError("PopulateMediaTypes", Err) <br>    Resume Next <br>End Sub <br> <br>'create a collection of collections: a collection for each <br>'address, each collection containing all terminals for that <br>'address: static + dynamic + the Null terminal <br>Private Sub PopulateTerminals() <br>On Error GoTo ErrHandle <br>     <br>    Dim objcollAddresses As ITCollection <br>    Dim nAddrCount As Long, nCrtCount As Long <br>    Dim nAddrIndex As Long, nTerminalIndex As Long, nIndex As Long <br>     <br>    Dim objcrtTerminalSupport As ITTerminalSupport <br>    Dim collCrtTerminals As Collection     'collection of Terminal objects <br>    Dim collCrtStaticTerminals As ITCollection <br>    Dim objCrtTerminal As Terminal <br>     <br>    'read all addresses from Tapi <br>    Set objcollAddresses = mobjTapi.Addresses <br>    nAddrCount = objcollAddresses.Count <br> <br>    'populate collections of Terminals (one collection for each address) <br> <br>    Set mcollTerminalsPerAddr = New Collection <br>    For nAddrIndex = 1 To nAddrCount <br>        'create a collection with all terminals for this address: <br>        'static + dynamic + the Null terminal <br>        Set collCrtTerminals = New Collection <br> <br>        Set objcrtTerminalSupport = objcollAddresses.Item(nAddrIndex) <br>         <br>        'add static terminals <br>        nCrtCount = 0 <br>        Set collCrtStaticTerminals = objcrtTerminalSupport.StaticTerminals <br>        nCrtCount = collCrtStaticTerminals.Count <br>        For nTerminalIndex = 1 To nCrtCount <br>             <br>            Set objCrtTerminal = collCrtStaticTerminals.Item(nTerminalIndex) <br>             <br>            collCrtTerminals.Add Item:=objCrtTerminal <br>             <br>            Set objCrtTerminal = Nothing <br>             <br>        Next nTerminalIndex <br>        Set collCrtStaticTerminals = Nothing <br>         <br>        'add dynamic terminals: create 1 terminal for each dynamic class <br>        nCrtCount = 0 <br>        nCrtCount = objcrtTerminalSupport.DynamicTerminalClasses.Count <br>        For nIndex = 1 To nCrtCount <br>             <br>            Set objCrtTerminal = _ <br>                objcrtTerminalSupport.CreateTerminal( _ <br>                    objcrtTerminalSupport.DynamicTerminalClasses.Item(nIndex)) <br>             <br>            collCrtTerminals.Add Item:=objCrtTerminal <br>             <br>            Set objCrtTerminal = Nothing <br>             <br>        Next nIndex <br>         <br>        'add the Null Terminal <br>        collCrtTerminals.Add Item:=Nothing <br> <br>        'save collection in array of collections <br>        On Error Resume Next <br>        mcollTerminalsPerAddr.Add Item:=collCrtTerminals <br>        On Error GoTo ErrHandle <br>         <br>        If Err.Number &lt;&gt; 0 Then <br>            Call PrintError("PopulateTerminals: adding collections", Err) <br>            Err.Clear <br>             <br>            'this collection is useless, release it, but first <br>            'remove its items <br>            nCrtCount = 0 <br>            nCrtCount = collCrtTerminals.Count <br>            For nTerminalIndex = 1 To nCrtCount <br>                'collections are reindexed automatically, <br>                'so remove the 1st element on each iteration <br>                collCrtTerminals.Remove 1 <br>            Next <br>        End If <br>         <br>        'Cleanup "crt" variables (that change in each iteration) <br>        'Note: don't remove items from CrtCollection, because <br>        'the corresponding items from "collection of collections" <br>        'will also be removed! <br>        Set collCrtTerminals = Nothing <br>        Set objcrtTerminalSupport = Nothing <br>    Next nAddrIndex <br> <br>cleanup: <br>    Set objcollAddresses = Nothing <br>    Exit Sub <br>     <br>ErrHandle: <br>    'On error, I Resume Next, because I want all collections to be <br>    'created, at least as empty collections (with count = 0) <br>     <br>    Call PrintError("PopulateTerminals", Err) <br>    Resume Next <br>End Sub <br> <br>Private Sub DepopulateTapiObjects() <br>On Error GoTo ErrHandle <br>     <br>    Dim collCrt As Collection <br>    Dim nIterator As Long, nIndex As Long <br>    Dim nCount As Long, nCrtCount As Long <br>         <br>    'depopulate collection of Terminals (one collection for each address) <br>    nCount = 0 <br>    nCount = mcollTerminalsPerAddr.Count <br>    For nIterator = 1 To nCount <br>        'collections are reindexed automatically, <br>        'so remove the 1st element on each iteration <br>         <br>        Set collCrt = mcollTerminalsPerAddr.Item(1) <br>        nCrtCount = 0 <br>        nCrtCount = collCrt.Count <br>        For nIndex = 1 To nCrtCount <br>            collCrt.Remove 1 <br>        Next nIndex <br>        Set collCrt = Nothing <br>         <br>        mcollTerminalsPerAddr.Remove 1 <br>    Next nIterator <br>    Set mcollTerminalsPerAddr = Nothing <br> <br>    'depopulate collection of MediaTypes (one collection for each address) <br>    nCount = 0 <br>    nCount = mcollMediaTypesPerAddr.Count <br>    For nIterator = 1 To nCount <br>        'collections are reindexed automatically, <br>        'so remove the 1st element on each iteration <br>         <br>        Set collCrt = mcollMediaTypesPerAddr.Item(1) <br>        nCrtCount = 0 <br>        nCrtCount = collCrt.Count <br>        For nIndex = 1 To nCrtCount <br>            collCrt.Remove 1 <br>        Next nIndex <br>        Set collCrt = Nothing <br>         <br>        mcollMediaTypesPerAddr.Remove 1 <br>    Next nIterator <br>    Set mcollMediaTypesPerAddr = Nothing <br>             <br>    'depopulate collection of Addresses <br>    nCount = 0 <br>    nCount = mcollobjAddresses.Count <br>    For nIterator = 1 To nCount <br>        'collections are reindexed automatically, <br>        'so remove the 1st element on each iteration <br>         <br>        mcollobjAddresses.Remove 1 <br>    Next nIterator <br>    Set mcollobjAddresses = Nothing <br>     <br>    'depopulate Tapi object <br>    If Not (mobjTapi Is Nothing) Then <br>        mobjTapi.Shutdown <br>    End If <br>    Set mobjTapi = Nothing <br>     <br>cleanup: <br>    Exit Sub <br> <br>ErrHandle: <br>    'On error, I Resume Next, because I want all release actions <br>    'to be performed <br>     <br>    Call PrintError("DepopulateTapiObjects", Err) <br>    Resume Next <br>End Sub <br> <br>'This function is called only once: after dialog is created, <br>'when it is asked to load the Tapi objects. <br>'When this function is called, the combo cmbAddresses is <br>'populated, and the 1st item is selected; this determines <br>'automatical populate for dependent comboboxes cmbMediaTypes <br>'and cmbTerminals, and automatical selection of their 1st <br>'item. <br>Private Sub PopulateCmbAddresses() <br>On Error GoTo ErrHandle <br> <br>    Dim nIterator As Long, nCount As Long <br>     <br>    'don't need to clean combo of previous contents, <br>    'because this function is called only once <br>    'cmbAddresses.Clear <br>     <br>    'populate combobox with names of all addresses from mcollobjAddresses <br>    'attach to each combo item the index of the corresponding address <br>    nCount = 0 <br>    nCount = mcollobjAddresses.Count <br>    For nIterator = 1 To nCount <br>        On Error Resume Next <br>        cmbAddresses.AddItem (mcollobjAddresses.Item(nIterator).AddressName) <br>        On Error GoTo ErrHandle <br>        If Err.Number &lt;&gt; 0 Then <br>            'there was an error therefore don't call NewIndex <br>            Call PrintError("PopulateCmbAddresses", Err) <br>            Err.Clear <br>        Else <br>            cmbAddresses.ItemData(cmbAddresses.NewIndex) = nIterator <br>        End If <br>    Next nIterator <br>     <br>    'set selection on 1st item <br>    If cmbAddresses.ListCount &gt; 0 Then <br>        cmbAddresses.ListIndex = 0 <br>        'This automatically called cmbAddresses_Click <br>         <br>    End If <br>     <br>cleanup: <br>    Exit Sub <br> <br>ErrHandle: <br>    'I resume next, because I want to add as many items as possible <br>     <br>    Call PrintError("PopulateCmbAddresses", Err) <br>    Resume Next <br>End Sub <br> <br>'Note: cmbMediaTypes depends on cmbAddresses: it is always <br>'populated only with those media types that correspond <br>'to the Address currently selected in cmbAddresses <br>'This is why each time the selection changes in cmbAddresses <br>'this combo is repopulated. This means that this function is <br>'called each time when another address is selected; thus it must <br>'first clear the combo's contents before refilling it. <br>Private Sub PopulateCmbMediaTypes(nAddrIndex As Long) <br>On Error GoTo ErrHandle <br> <br>    Dim collguidMediaTypes As Collection <br>    Dim nIterator As Long, nCount As Long <br>     <br>    'clean combo of all previous contents, because <br>    'this might be a repopulating action <br>    cmbMediaTypes.Clear <br>     <br>    'pick up the media types corresponding to <br>    'the address received as parameter <br>    Set collguidMediaTypes = mcollMediaTypesPerAddr.Item(nAddrIndex) <br>     <br>    'populate combobox with the names corresponding to all guids <br>    'from this particular collection of MediaTypes <br>    'attach to each combo item the index of the corresponding media type <br>    nCount = 0 <br>    nCount = collguidMediaTypes.Count <br>    For nIterator = 1 To nCount <br>        On Error Resume Next <br>        cmbMediaTypes.AddItem ( _ <br>            MTGuidToName(collguidMediaTypes.Item(nIterator))) <br>        On Error GoTo ErrHandle <br>        If Err.Number &lt;&gt; 0 Then <br>            'there was an error therefore don't call NewIndex <br>            Call PrintError("PopulateCmbMediaTypes", Err) <br>            Err.Clear <br>        Else <br>            cmbMediaTypes.ItemData(cmbMediaTypes.NewIndex) = nIterator <br>        End If <br>    Next nIterator <br>     <br>    'set selection on 1st item <br>    If cmbMediaTypes.ListCount &gt; 0 Then <br>        cmbMediaTypes.ListIndex = 0 <br>        'this automatically called cmbMediaTypes_Click <br>    End If <br>     <br>cleanup: <br>    Set collguidMediaTypes = Nothing <br>    Exit Sub <br> <br>ErrHandle: <br>    'I resume next, because I want to add as many items as possible <br>     <br>    Call PrintError("PopulateCmbMediaTypes", Err) <br>    Resume Next <br>End Sub <br> <br>'Note: cmbTerminals depends on cmbAddresses: it is always <br>'populated only with those terminals that correspond <br>'to the Address currently selected in cmbAddresses <br>'This is why each time the selection changes in cmbAddresses <br>'this combo is repopulated. This means that this function is <br>'called each time another address is selected; thus it must <br>'first clear the combo's contents before refilling it. <br>Private Sub PopulateCmbTerminals(nAddrIndex As Long) <br>On Error GoTo ErrHandle <br> <br>    Dim collobjTerminals As Collection <br>    Dim nIterator As Long, nCount As Long <br>    Dim objCrtTerminal As Terminal <br>     <br>    'clean combo of all previous contents, because <br>    'this might be a repopulating action <br>    cmbTerminals.Clear <br>     <br>    'pick up the terminals corresponding to <br>    'the address received as parameter <br>    Set collobjTerminals = mcollTerminalsPerAddr.Item(nAddrIndex) <br>     <br>    'populate combobox with the names corresponding to all terminals <br>    'from this particular collection of Terminals <br>    'attach to each combo item the index of the corresponding terminal <br>    nCount = 0 <br>    nCount = collobjTerminals.Count <br>    For nIterator = 1 To nCount <br>         <br>        'special case: the Null terminal <br>        '(objcrtTerminal = Nothing but Err.Number=0) <br>         <br>        On Error Resume Next <br>        Set objCrtTerminal = collobjTerminals.Item(nIterator) <br>        On Error GoTo ErrHandle <br>         <br>        If Err.Number &lt;&gt; 0 Then <br>            'there was an error when retrieving item <br>            'therefore there's no item to add <br>            Call PrintError("PopulateCmbTerminals", Err) <br>            Err.Clear <br>        Else <br>            'there was success when retrieving item <br>            'therefore there is a item to add <br>            On Error Resume Next <br>            cmbTerminals.AddItem (TerminalToCompleteName(objCrtTerminal)) <br>            On Error GoTo ErrHandle <br>            If Err.Number &lt;&gt; 0 Then <br>                'there was an error therefore don't call NewIndex <br>                Call PrintError("PopulateCmbTerminals", Err) <br>                Err.Clear <br>            Else <br>                cmbTerminals.ItemData(cmbTerminals.NewIndex) = nIterator <br>            End If <br>        End If <br>         <br>        Set objCrtTerminal = Nothing <br>    Next nIterator <br>     <br>    'set selection on 1st item <br>    If cmbTerminals.ListCount &gt; 0 Then <br>        cmbTerminals.ListIndex = 0 <br>        'this automatically called cmbTerminals_Click <br>    End If <br>     <br>cleanup: <br>    Set collobjTerminals = Nothing <br>    Exit Sub <br> <br>ErrHandle: <br>    'I resume next, because I want to add as many items as possible <br>     <br>    Call PrintError("PopulateCmbTerminals", Err) <br>    Resume Next <br>End Sub <br> <br>Private Sub cmbAddresses_Click() <br>On Error GoTo ErrHandle <br> <br>    Dim nSelectedAddrIndex As Long <br>     <br>    'each time the address changes, repopulate <br>    'the dependent comboboxes (cmbMediaTypes &amp; cmbTerminals) <br>     <br>    'retrieve the index of the selected address <br>    nSelectedAddrIndex = cmbAddresses.ItemData(cmbAddresses.ListIndex) <br>     <br>    PopulateCmbMediaTypes (nSelectedAddrIndex) <br>    PopulateCmbTerminals (nSelectedAddrIndex) <br> <br>cleanup: <br>    Exit Sub <br>     <br>ErrHandle: <br>    'I resume next, because I want to populate <br>    'as many controls (comboboxes) as possible <br>     <br>    Call PrintError("cmbAddresses_Click", Err) <br>    Resume Next <br>End Sub <br> <br>'ChangeSelectedObjects <br>'Returns: <br>'True if valid new values were selected by the user, False otherwise <br>'Action: <br>'Each time when OK is pressed, it means that the user <br>'decided for a new OriginationAddress and MediaTerminal; <br>'therefore check if the comboboxes have valid values <br>'then set new values in mobjCrtAddress and mobjCrtMediaTerminal. <br>'If new values are not valid (they correspond to Null objects) <br>'leave the old values unchanged. <br>Private Function ChangeSelectedObjects() As Boolean <br>On Error GoTo ErrHandle <br> <br>    ChangeSelectedObjects = False <br>         <br>    Dim nSelectedAddrIndex As Long <br>    Dim nSelectedMTIndex As Long <br>    Dim nSelectedTerminalIndex As Long <br>     <br>    Dim guidMediaType As String <br>    Dim objTerminal As Terminal <br>     <br>    Dim objNewAddress As Address <br>    Dim objNewMediaTerminal As ITMediaTerminal <br>     <br>    Dim strMsg As String <br>     <br>    'pick up the address object that has the name selected in cmbAddresses <br>    nSelectedAddrIndex = cmbAddresses.ItemData(cmbAddresses.ListIndex) <br>    Set objNewAddress = mcollobjAddresses.Item(nSelectedAddrIndex) <br>     <br>    'pick up the media type guid that has the name selected in cmbMediaTypes <br>    nSelectedMTIndex = cmbMediaTypes.ItemData(cmbMediaTypes.ListIndex) <br>    guidMediaType = mcollMediaTypesPerAddr.Item( _ <br>        nSelectedAddrIndex).Item(nSelectedMTIndex) <br>     <br>    'pick up the terminal object that has the name selected in cmbTerminals <br>    nSelectedTerminalIndex = cmbTerminals.ItemData(cmbTerminals.ListIndex) <br>    Set objTerminal = mcollTerminalsPerAddr.Item( _ <br>        nSelectedAddrIndex).Item(nSelectedTerminalIndex) <br>     <br>    Set objNewMediaTerminal = mobjTapi.CreateMediaTerminal( _ <br>        guidMediaType, objTerminal) <br>     <br>    If (Not (objNewAddress Is Nothing)) And _ <br>       (Not (objNewMediaTerminal Is Nothing)) Then <br>         <br>        'release old references <br>        Set mobjCrtAddress = Nothing <br>        Set mobjCrtMediaTerminal = Nothing <br>         <br>        'set new values <br>        Set mobjCrtAddress = objNewAddress <br>        Set mobjCrtMediaTerminal = objNewMediaTerminal <br>         <br>        'set True in return value <br>        ChangeSelectedObjects = True <br>    Else <br>        If objNewAddress Is Nothing Then <br>            strMsg = "A valid origination address must be selected!" <br>        End If <br>        If objNewMediaTerminal Is Nothing Then <br>            strMsg = "A valid pair Media+Terminal must be selected!" <br>        End If <br>        Call MessageBox(0, strMsg, "Connect Using - Error", MB_OK Or MB_USERICON) <br>    End If <br> <br>cleanup: <br>    Set objNewAddress = Nothing <br>    Set objNewMediaTerminal = Nothing <br>     <br>    Exit Function <br>     <br>ErrHandle: <br>    'I resume Next, because I want to execute the <br>    'same code in case of both types of failures: <br>    'code failure OR user failure (wrong selection) <br>    'In both cases, the same MsgBox is displayed, <br>    'explaining which object could not be created <br>    Call PrintError("ChangeSelectedObjects", Err) <br>    Resume Next <br>End Function <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

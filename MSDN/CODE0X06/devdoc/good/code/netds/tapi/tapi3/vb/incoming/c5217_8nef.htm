<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5217"></a>README.TXT</h2>
<pre><code><br>TAPI 3.0 <br>INCOMING Sample Application <br> <br> <br>Overview: <br> <br>INCOMING is a Visual Basic sample TAPI 3.0 application that waits for  <br>and answers incoming calls: phone calls or H323 audio calls. <br>This sample was developed using Visual Basic 5. <br> <br>In order to receive incoming call notifications, as well as any call <br>state event notifications, the application must call RegisterCallTypes <br>specifying the media types for which it wants to be notified (therefore <br>not all incoming calls will be offered to the app, but only those that <br>have the desired media types). This sample registers the first two  <br>media types, that are expected to be audio in and out. <br> <br>The application must also declare an Address object "with events", and  <br>implement for it the event procedure that processes the event  <br>"CallEventNotification". This is actually the function that will get  <br>called by Tapi3.dll each time when a new call is offered, and also when  <br>the call changes its state. <br> <br>In order for Tapi3.dll to know about this event procedure, the address  <br>with events must be assigned the value of the real address object  <br>that corresponds to the address on which calls are to be received. <br>This is equivalent with "registering an outgoing interface" from C/C++. <br>For more information about declaring and using objects with events, see <br>Visual Basic's Books Online. <br> <br>INCOMING shows how to use an address object with events in order to  <br>receive incoming calls, and how to answer and eventually disconnect  <br>the incoming call. <br> <br> <br>How to use: <br> <br>To run the INCOMING sample application, simply build and run incoming.exe, <br>using Visual Basic 5. <br>A small dialog box will appear, and the user is supposed to select the  <br>desired call type and press "Register". After that, the status will be  <br>"Waiting for a call." <br>The 2 possible call types (for this application) are: phone calls and  <br>H323 calls. In order to succesfully register for receiving phone calls, <br>a voice modem must be used. <br> <br>In the case of phone calls, a phone set is needed to be plugged into  <br>the modem. Whenever a phone call is received, the application will  <br>display the "offering" state of the call, and allow the call to be  <br>answered, and after that the phone set must be used to actually talk  <br>with the phone from the other end of the call. <br> <br>In the case of an H323 call, the application counts on the existence  <br>of a sound card (full duplex). The app selects on the call the  <br>first 2 media types (that should be "audio in" and "audio out") and  <br>their default terminals (that should be "speakers" and "microphone"), <br>therefore after the call is answered you should be able to use  <br>the microphone and the speakers currently existing on the computer <br>to speak with the person from the other end of the call. Note that  <br>the other end of the call should be an H323 client too. <br> <br> <br>Limitations: <br> <br>The way this sample was implemented, in the case of phone calls it  <br>will allow only "interactive voice" calls, which means that a phone <br>set must be plugged into the modem and used for talking, after the  <br>connection is established. But Tapi 3.0 actually allows also two  <br>other types of phone calls: "automated voice" calls, and "data" calls. <br>In order to support those too, the application should be changed in <br>the following way: <br>- for "automated voice" calls: "audio in" and "audio out" are the  <br>media types that must be registered, but instead of using their  <br>default terminals, the terminals that correspond to the devices  <br>"speakers" and "microphone" should be used. <br>- for "data" calls: "data modem" is the media type that should be  <br>registered instead of "audio in" and "audio out", in conjunction  <br>with the "Null" terminal, which anyway corresponds to the default  <br>terminal. <br> <br>The "Register" button can be pressed only once. This actually means <br>that the application must be restarted in order to change the type  <br>of calls that the application can listen for.  <br> <br> <br>What functionality does this sample show: <br> <br>The incoming sample application demostrates how to receive new call <br>notification and call state event notifications.  It also demonstrates <br>the basic TAPI 3.0 functions involved in answering a call. <br> <br> <br>What this sample does not show: <br> <br>This sample does not let the user choose the TAPI address for the <br>application to use (in case there are several addresses that meet the  <br>same criteria, the sample will always use the first one). It does not  <br>allow the user to decide what media types to listen for, and it does  <br>not allow the user to decide what terminals to use: the sample always <br>selects the first 2 media types (which are expected to be audio in  <br>and audio out) and their default terminals. <br> <br> <br>Hints: <br> <br>In the case of an H323 call: if the sound card installed on the  <br>computer is not full duplex, the sample should be changed to select  <br>only 1 media type on the call, instead of 2. <br>An H323 address will exist on your computer if H323 provider is  <br>installed, and if the computer is part of a network: the H323 provider <br>uses the machine's IP address to actually implement the "H323 address". <br>Control Panel - Telephony applet should be use for adding TSPs <br>(telephony service providers). <br> <br>In case you want to use the sample for receiving phone calls, a voice <br>modem should be installed; the data modems will not work with this sample <br>because they don't support registering for receving "interactive voice"  <br>calls (which is the only case illustrated by this sample). </code></pre>
<p>&nbsp;</p></body>
</HTML>

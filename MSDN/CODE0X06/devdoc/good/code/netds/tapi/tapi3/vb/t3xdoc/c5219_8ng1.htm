<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>T3XDOC.DOB</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5221"></a>T3XDOC.DOB</h2>
<pre><code>VERSION 5.00 <br>Begin VB.UserDocument Tapi3XDoc  <br>   ClientHeight    =   3600 <br>   ClientLeft      =   0 <br>   ClientTop       =   0 <br>   ClientWidth     =   5085 <br>   HScrollSmallChange=   225 <br>   ScaleHeight     =   3600 <br>   ScaleWidth      =   5085 <br>   VScrollSmallChange=   225 <br>   Begin VB.CommandButton Using  <br>      Caption         =   "What To Use for Connect" <br>      Height          =   375 <br>      Left            =   1320 <br>      TabIndex        =   4 <br>      Top             =   480 <br>      Width           =   2295 <br>   End <br>   Begin VB.CommandButton Disconnect  <br>      Caption         =   "Disconnect" <br>      Height          =   375 <br>      Left            =   1320 <br>      TabIndex        =   3 <br>      Top             =   2880 <br>      Width           =   2295 <br>   End <br>   Begin VB.CommandButton Connect  <br>      Caption         =   "Connect Sync" <br>      Default         =   -1  'True <br>      Height          =   375 <br>      Left            =   1320 <br>      TabIndex        =   2 <br>      Top             =   2160 <br>      Width           =   2295 <br>   End <br>   Begin VB.TextBox txtDestAddress  <br>      Height          =   285 <br>      Left            =   1320 <br>      TabIndex        =   0 <br>      Top             =   1320 <br>      Width           =   2295 <br>   End <br>   Begin VB.Label lblDestAddress  <br>      Caption         =   "Destination Address" <br>      Height          =   375 <br>      Left            =   240 <br>      TabIndex        =   1 <br>      Top             =   1320 <br>      Width           =   855 <br>   End <br>End <br>Attribute VB_Name = "Tapi3XDoc" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = True <br>Attribute VB_PredeclaredId = False <br>Attribute VB_Exposed = True <br>' <br>'T3XDoc.DLL <br>' <br>'This is a sample that shows how to write an ActiveX Document <br>'that uses Tapi3.0 for making a synchronous outgoing call. <br>' <br>'The ActiveX document must be loaded in Internet Explorer. <br>'It allows the user to select the address on which to make the call, <br>'and indicate one terminal and one media type to be used on that call. <br>'After the call is connected, the user can disconnect the call. <br>' <br>'In order to obtain the ActiveX Document, the Application Setup Wizard <br>'must be used. It will create the dll, the cab file as <br>'well as the htm file that points to the ActiveXDocument. <br>'Internet Explorer must be pointed to the HTM file, and this <br>'will automatically load the ActiveX Document. <br>' <br> <br>Option Explicit <br> <br>Private mbFirstShow As Boolean <br>Private mobjCallControl As ITBasicCallControl <br> <br>Private Sub UserDocument_Initialize() <br>On Error GoTo ErrHandle <br>     <br>    Debug.Print ("UserDocument_Initialize") <br>     <br>    'set initial value in global variables <br>    Set mobjCallControl = Nothing <br>    mbFirstShow = True <br>     <br>    'init user interface <br>    Load frmUsing <br>     <br>    'init tapi objects <br>    Call frmUsing.InitializeTapiObjects <br>     <br>cleanup: <br>    Exit Sub <br> <br>ErrHandle: <br>    Debug.Print ("Error: " &amp; Err.Number &amp; " " &amp; Err.Description) <br>    Call PrintError("UserDocument_Initialize", Err) <br>     <br>    GoTo cleanup <br> <br>End Sub <br> <br>Private Sub UserDocument_Terminate() <br>On Error Resume Next <br>     <br>    Debug.Print ("UserDocument_Terminate") <br>     <br>    'release tapi objects <br>    Set mobjCallControl = Nothing <br>    frmUsing.ReleaseTapiObjects     'this releases also objTapi itself <br>     <br>    'release user interface <br>    Unload frmUsing <br> <br>cleanup: <br>    Exit Sub <br>     <br>End Sub <br> <br>Private Sub Using_Click() <br>    If Not (mobjCallControl Is Nothing) Then <br>        'a previous call exists; <br>        Dim strMsg As String <br>        strMsg = "Current call is not yet disconnected!" <br>        Call MessageBox(0, strMsg, "T3XDoc", MB_OK Or MB_USERICON) <br>    Else <br>        frmUsing.Show vbModal <br>    End If <br>End Sub <br> <br>' <br>'Connect_Click: check if connect is allowed, then make call <br>' <br>Private Sub Connect_Click() <br>On Error GoTo ErrHandle <br>     <br>    Dim strMsg As String <br>    Dim objAddress As Address <br>    Dim MediaTerminals <br>    Dim bSync As Boolean <br>    Dim objCallInfo As ITCallInfo <br>    Dim bConnectReturned As Boolean, bCallStateDisplayed As Boolean <br>     <br>     <br>    bConnectReturned = False <br>    bCallStateDisplayed = False <br>     <br>    ' <br>    'Connect is allowed only if there is no previous call or <br>    'the previous call is in disconnected state <br>    ' <br>    If Not (mobjCallControl Is Nothing) Then <br>        ' <br>        'a previous call exists; query for its state <br>        ' <br>        If CallIsConnected(mobjCallControl) Then <br>            strMsg = "Cannot make new call while previous one is still connected." <br>            Call MessageBox(0, strMsg, "T3XDoc", MB_OK Or MB_USERICON) <br>             <br>            Exit Sub <br>             <br>        Else <br>            ' <br>            'Release previous call, which is not needed anymore <br>            ' <br>            Set mobjCallControl = Nothing <br>        End If <br>    End If <br>     <br>    ' <br>    ' Go on to create and connect a call, using the tapi objects <br>    ' selected by the user in the secondary form "frmUsing": <br>    ' user must have selected the origination address + the <br>    ' mediaterminal <br>    ' <br>     <br>    Set objAddress = frmUsing.Address <br>    If objAddress Is Nothing Then <br>        strMsg = "No address is selected, go in What To Use for Connect, " <br>        strMsg = strMsg &amp; "select something, then press OK." <br>        Call MessageBox(0, strMsg, "T3XDoc", MB_OK Or MB_USERICON) <br>        GoTo cleanup <br>    End If <br>    Set mobjCallControl = objAddress.CreateCall(txtDestAddress.Text) <br>     <br>    MediaTerminals = frmUsing.MediaTerminals <br>    mobjCallControl.SelectMediaTerminals (MediaTerminals) <br>     <br>    ' <br>    'Calling Connect with bSync = True, means that the <br>    'call is synchronous; the function Connect will not <br>    'return until it has a result, i.e. until the call reaches <br>    'either the connected or the disconnected state. <br>    'This might take a while, depending on the Tapi service provider, <br>    'and meanwhile the calling app will appear as "hanging" <br>    ' <br>     <br>    bSync = True <br>    mobjCallControl.Connect (bSync) <br>    bConnectReturned = True <br>     <br>    'query the ITCallInfo interface, which can tell us the state <br>    Set objCallInfo = mobjCallControl <br>    DisplayCallState (objCallInfo.CallState) <br>    bCallStateDisplayed = True <br> <br>cleanup: <br>On Error Resume Next        'otherwise there would be a loop <br>    Set objCallInfo = Nothing <br>     <br>    If Not IsEmpty(MediaTerminals) Then <br>        Dim nIterator As Long <br>        For nIterator = LBound(MediaTerminals) To UBound(MediaTerminals) <br>            Set MediaTerminals(nIterator) = Nothing <br>        Next <br>    End If <br>     <br>    Set objAddress = Nothing <br>    Exit Sub <br>     <br>ErrHandle: <br>     <br>    Call PrintError("Connect_Click", Err) <br>     <br>    'display a message <br>    If bConnectReturned = False Then <br>        strMsg = "Connect didn't succeed, there was an error." <br>        Call MessageBox(0, strMsg, "T3XDoc", MB_OK Or MB_USERICON) <br>    ElseIf bCallStateDisplayed = False Then <br>        strMsg = "Can't find out the state of the call, there was an error." <br>        Call MessageBox(0, strMsg, "T3XDoc", MB_OK Or MB_USERICON) <br>    End If <br>     <br>    'finish <br>    GoTo cleanup <br>End Sub <br> <br>Private Sub Disconnect_Click() <br>On Error GoTo ErrHandle <br>     <br>Dim strMsg As String <br> <br>    If mobjCallControl Is Nothing Then <br>        strMsg = "There is no call to be disconnected." <br>        Call MessageBox(0, strMsg, "T3XDoc", MB_OK Or MB_USERICON) <br>        Exit Sub <br>    End If <br>     <br>    'disconnect the call by calling Disconnect, method <br>    'of ITBasicCallControl <br>    If CallIsConnected(mobjCallControl) Then <br>        mobjCallControl.Disconnect (DC_NORMAL) <br>    End If <br>     <br>    Set mobjCallControl = Nothing <br> <br>cleanup: <br>    Exit Sub <br>     <br>ErrHandle: <br>    Call PrintError("Disconnect_Click", Err) <br>    GoTo cleanup <br>End Sub <br> <br>Private Function CallIsConnected(objCall As ITBasicCallControl) As Boolean <br>On Error GoTo ErrHandle <br>     <br>    Dim objCallInfo As ITCallInfo <br>    Dim State As CALL_STATE <br>     <br>    CallIsConnected = False <br>     <br>    'to find out the state, we must query the ITCallInfo interface <br>    Set objCallInfo = objCall <br>    State = objCallInfo.CallState <br>     <br>    If State = CS_CONNECTED Then <br>        CallIsConnected = True <br>    End If <br>     <br>cleanup: <br>On Error Resume Next        'otherwise there would be a loop <br>    Set objCallInfo = Nothing <br>    Exit Function <br>     <br>ErrHandle: <br>    Call PrintError("CallIsConnected", Err) <br>    GoTo cleanup <br>End Function <br> <br>'I don't want the message boxes to beep, so instead of using <br>'MsgBox, I call the Win32 function MessageBox with MB_USERICON <br>'See Tools.bas for declarations <br>Private Sub DisplayCallState(State As CALL_STATE) <br>    Select Case State <br>        Case CS_CONNECTED <br>            Call MessageBox(0, "CS_CONNECTED", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case CS_DISCONNECTED <br>            Call MessageBox(0, "CS_DISCONNECTED", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case CS_HOLD <br>            Call MessageBox(0, "CS_HOLD", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case CS_IDLE <br>            Call MessageBox(0, "CS_IDLE", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case CS_INPROGRESS <br>            Call MessageBox(0, "CS_INPROGRESS", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case CS_OFFERING <br>            Call MessageBox(0, "CS_OFFERING", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case CS_QUEUED <br>            Call MessageBox(0, "CS_QUEUED", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>        Case Else <br>            Call MessageBox(0, "Call state unknown!!", "Call State", _ <br>                MB_OK Or MB_USERICON) <br>    End Select <br>End Sub </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBALS.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5187"></a>GLOBALS.H</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>// PURPOSE: <br>// <br>//  Contains declarations for all globally scoped names in the program <br>// <br> <br>// <br>// Product identifier string defines <br>// <br>//  **TODO** Change these strings to the name of your application. <br> <br>#define APPNAME  TAPICOMM <br>#define ICONFILE TAPICOMM.ICO <br>#define SZAPPNAME "TAPICOMM" <br>#define SZDESCRIPTION "TAPI/COMM Sample" <br>#define SZABOUT "About TAPICOMM" <br>#define SZVERSION "4.0" <br> <br>//------------------------------------------------------------------------- <br>// Functions for handling main window messages.  The message-dispatching <br>// mechanism expects all message-handling functions to have the following <br>// prototype: <br>// <br>//     LRESULT FunctionName(HWND, UINT, WPARAM, LPARAM); <br> <br>// **TODO**  Add message-handling function prototypes here.  Be sure to <br>//           add the function names to the main window message table in <br>//           TapiComm.c. <br> <br>LRESULT MsgCommand   (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgCreate    (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgDestroy   (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgSize      (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgSetFocus  (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgTimer     (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgMousemove (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgMenuSelect(HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgNotify    (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgClose     (HWND, UINT, WPARAM, LPARAM); <br>LRESULT MsgPaint     (HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//------------------------------------------------------------------------- <br>// Functions for handling main window commands--ie. functions for <br>// processing WM_COMMAND messages based on the wParam value. <br>// The message-dispatching mechanism expects all command-handling <br>// functions to have the following prototype: <br>// <br>//     LRESULT FunctionName(HWND, WORD, WORD, HWND); <br> <br>// **TODO**  Add message-handling function prototypes here.  Be sure to <br>//           add the function names to the main window command table in <br>//           TapiComm.c. <br> <br>LRESULT CmdExit (HWND, WORD, WORD, HWND); <br>LRESULT CmdAbout(HWND, WORD, WORD, HWND); <br>LRESULT CmdStub (HWND, WORD, WORD, HWND); <br>LRESULT CmdMakeCall   (HWND, WORD, WORD, HWND); <br>LRESULT CmdHangupCall (HWND, WORD, WORD, HWND); <br> <br> <br> <br> <br>//------------------------------------------------------------------------- <br>// Global function prototypes. <br> <br>// **TODO**  Add global function prototypes here. <br> <br>BOOL InitApplication(HINSTANCE, int); <br>BOOL CenterWindow(HWND, HWND); <br> <br>    // Callback functions.  These are called by Windows. <br> <br>// **TODO**  Add new callback function prototypes here. <br> <br>LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>//------------------------------------------------------------------------- <br>// Command ID definitions.  These definitions are used to associate menu <br>// items with commands. <br> <br>// **TODO**  Add IDs for all menu commands here.  Be sure that the IDs you <br>//           add are also added to the main window command table in TapiComm.c <br>//           and the menu statements in the resource file. <br> <br>// File menu <br>#define IDS_FILEMENU       1000 <br>#define IDM_FILENEW        1001 <br>#define IDM_FILEOPEN       1002 <br>#define IDM_FILESAVE       1003 <br>#define IDM_FILESAVEAS     1004 <br>#define IDM_FILECLOSE      1005 <br>#define IDM_FILEPRINT      1006 <br>#define IDM_FILEPAGESU     1007 <br>#define IDM_FILEPRINTSU    1008 <br>#define IDM_EXIT           1009 <br>#define IDM_MAKECALL       1010 <br>#define IDM_HANGUPCALL     1011 <br> <br>// Edit menu <br>#define IDS_EDITMENU       2000 <br>#define IDM_EDITUNDO       2001 <br>#define IDM_EDITCUT        2002 <br>#define IDM_EDITCOPY       2003 <br>#define IDM_EDITPASTE      2004 <br>#define IDM_EDITCLEAR      2005 <br> <br>// Help menu <br>#define IDS_HELPMENU       3000 <br>#define IDM_ABOUT          3001 <br> <br>//------------------------------------------------------------------------- <br>// String Table ID definitions. <br> <br>#define IDS_APPNAME     1 <br>#define IDS_DESCRIPTION 2 <br> <br>//------------------------------------------------------------------------- <br>//  About dialog defines. <br> <br>#define IDD_VERFIRST    100 <br>#define IDD_VERLAST     104 <br> <br> <br>// ----------------------------------------------------------------------- <br>// Global Variable declarations <br>// <br> <br>extern HINSTANCE hInst;     // The current instance <br>extern char szAppName[];    // The name of this application <br>extern char szTitle[];      // The title bar text <br> <br>// **TODO**  For NON-MDI applications, uncomment line 1 below and comment <br>//           line 2.  For MDI applications, uncomment line 2 below, comment <br>//           line 1, and then define hwndMDIClient as a global variable in <br>//           INIT.C <br>#define hwndMDIClient NULL        /* (1) Stub for NON-MDI applications. */ <br>// extern HWND hwndMDIClient;     /* (2) For MDI applications.          */ <br> <br> <br>//------------------------------------------------------------------------- <br>// Message and command dispatch infrastructure.  The following type <br>// definitions and functions are used by the message and command dispatching <br>// mechanism and do not need to be changed. <br> <br>    // Function pointer prototype for message handling functions. <br>typedef LRESULT (*PFNMSG)(HWND,UINT,WPARAM,LPARAM); <br> <br>    // Function pointer prototype for command handling functions. <br>typedef LRESULT (*PFNCMD)(HWND,WORD,WORD,HWND); <br> <br>    // Enumerated type used to determine which default window procedure <br>    // should be called by the message- and command-dispatching mechanism <br>    // if a message or command is not handled explicitly. <br>typedef enum <br>{ <br>   edwpNone,            // Do not call any default procedure. <br>   edwpWindow,          // Call DefWindowProc. <br>   edwpDialog,          // Call DefDlgProc (This should be used only for <br>                        // custom dialogs - standard dialog use edwpNone). <br>   edwpMDIChild,        // Call DefMDIChildProc. <br>   edwpMDIFrame         // Call DefFrameProc. <br>} EDWP;                // Enumeration for Default Window Procedures <br> <br>    // This structure maps messages to message handling functions. <br>typedef struct _MSD <br>{ <br>    UINT   uMessage; <br>    PFNMSG pfnmsg; <br>} MSD;                 // MeSsage Dispatch structure <br> <br>    // This structure contains all of the information that a window <br>    // procedure passes to DispMessage in order to define the message <br>    // dispatching behavior for the window. <br>typedef struct _MSDI <br>{ <br>    int  cmsd;          // Number of message dispatch structs in rgmsd <br>    MSD *rgmsd;         // Table of message dispatch structures <br>    EDWP edwp;          // Type of default window handler needed. <br>} MSDI, FAR *LPMSDI;   // MeSsage Dipatch Information <br> <br>    // This structure maps command IDs to command handling functions. <br>typedef struct _CMD <br>{ <br>    WORD   wCommand; <br>    PFNCMD pfncmd; <br>} CMD;                 // CoMmand Dispatch structure <br> <br>    // This structure contains all of the information that a command <br>    // message procedure passes to DispCommand in order to define the <br>    // command dispatching behavior for the window. <br>typedef struct _CMDI <br>{ <br>    int  ccmd;          // Number of command dispatch structs in rgcmd <br>    CMD *rgcmd;         // Table of command dispatch structures <br>    EDWP edwp;          // Type of default window handler needed. <br>} CMDI, FAR *LPCMDI;   // CoMmand Dispatch Information <br> <br>    // Message and command dispatching functions.  They look up messages <br>    // and commands in the dispatch tables and call the appropriate handler <br>    // function. <br>LRESULT DispMessage(LPMSDI, HWND, UINT, WPARAM, LPARAM); <br>LRESULT DispCommand(LPCMDI, HWND, WPARAM, LPARAM); <br> <br>    // Message dispatch information for the main window <br>extern MSDI msdiMain; <br>    // Command dispatch information for the main window <br>extern CMDI cmdiMain; <br> <br> <br>#define SZRCOMPANYNAME "CompanyName" <br>#define SZRDESCRIPTION "FileDescription" <br>#define SZRVERSION     "FileVersion" <br>#define SZRAPPNAME     "InternalName" <br>#define SZRCOPYRIGHT   "LegalCopyright" <br>#define SZRTRADEMARK   "LegalTrademarks" <br>#define SZRPRODNAME    "ProductName" <br>#define SZRPRODVER     "ProuctVersion" </code></pre>
<p>&nbsp;</p></body>
</HTML>

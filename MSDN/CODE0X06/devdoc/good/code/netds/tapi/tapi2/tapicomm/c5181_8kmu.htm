<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TAPICOMM.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5196"></a>TAPICOMM.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE: TapiComm.c <br>// <br>//  PURPOSE: Handles general routines for the TapiComm sample. <br>// <br>//  FUNCTIONS: <br>//    WndProc     - Processes messages for the main window. <br>//    MsgCommand  - Handle the WM_COMMAND messages for the main window. <br>//    MsgCreate   - Handle the WM_CREATE messages for the main window. <br>//    MsgSize     - Handles the WM_SIZE message by calling SendMessage() to <br>//                  pass the WM_SIZE message onto the status bar and tool bar <br>//                  controls.  <br>//    MsgDestroy  - Handles the WM_DESTROY message by calling  <br>//                  PostQuitMessage(). <br>//    CmdExit     - Handles the file exit command by calling destory  <br>//                  window on the main window. <br>// <br>//  COMMENTS: <br>//    Message dispatch table - <br>//      For every message to be handled by the main window procedure <br>//      place the message number and handler function pointer in <br>//      rgmsd (the message dispatch table).  Place the prototype <br>//      for the function in globals.h and the definition of the <br>//      function in the appropriate module. <br>//    Command dispatch table - <br>//      For every command to be handled by the main window procedure <br>//      place the command number and handler function pointer in <br>//      rgcmd (the command dispatch table).  Place the prototype <br>//      for the function in globals.h and the definition of the <br>//      function in the appropriate module. <br>//    Globals.h Contains the definitions of the structures and dispatch.c <br>//      contains the functions that use these structures. <br>// <br> <br> <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#include &lt;commctrl.h&gt;           // prototypes and defs for common controls <br>#include "globals.h"            // prototypes specific to this application <br>#include "statbar.h"            // prototypes specific to statbar.c <br>#include "toolbar.h"            // prototypes specific to toolbar.c <br>#include "EditCtls.h" <br>#include "TapiCode.h" <br>#include "resource.h" <br> <br>LRESULT CmdCreateFile1(HWND hWnd, WORD wCommand, WORD wNotify, HWND hwndCtrl); <br>LRESULT CmdCreateFile2(HWND hWnd, WORD wCommand, WORD wNotify, HWND hwndCtrl); <br> <br> <br>// Main window message table definition. <br>MSD rgmsd[] = <br>{ <br>    {WM_COMMAND,    MsgCommand   }, <br>    {WM_MENUSELECT, MsgMenuSelect}, <br>    {WM_SIZE,       MsgSize      }, <br>    {WM_NOTIFY,     MsgNotify    }, <br>    {WM_CLOSE,      MsgClose     }, <br>    {WM_CREATE,     MsgCreate    }, <br>    {WM_SETFOCUS,   MsgSetFocus  }, <br>    //{WM_PAINT,      MsgPaint     }, <br>    {WM_DESTROY,    MsgDestroy   } <br>}; <br> <br>MSDI msdiMain = <br>{ <br>    sizeof(rgmsd) / sizeof(MSD), <br>    rgmsd, <br>    edwpWindow <br>}; <br> <br> <br>// Main window command table definition. <br>CMD rgcmd[] = <br>{ <br>    {IDM_MAKECALL,    CmdMakeCall}, <br>    {IDM_HANGUPCALL,  CmdHangupCall}, <br>    {IDM_EXIT,        CmdExit}, <br> <br>    {IDM_EDITUNDO,    CmdStub}, <br>    {IDM_EDITCUT,     CmdStub}, <br>    {IDM_EDITCOPY,    CmdStub}, <br>    {IDM_EDITPASTE,   CmdStub}, <br>    {IDM_EDITCLEAR,   CmdStub}, <br> <br>    {IDM_ABOUT,       CmdAbout}, <br>}; <br> <br>CMDI cmdiMain = <br>{ <br>    sizeof(rgcmd) / sizeof(CMD), <br>    rgcmd, <br>    edwpWindow <br>}; <br> <br> <br>// <br>//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Processes messages for the main window. <br>// <br>//  PARAMETERS: <br>//    hwnd     - window handle <br>//    uMessage - message number <br>//    wparam   - additional information (dependant on message number) <br>//    lparam   - additional information (dependant on message number) <br>// <br>//  RETURN VALUE: <br>//    The return value depends on the message number.  If the message <br>//    is implemented in the message dispatch table, the return value is <br>//    the value returned by the message handling function.  Otherwise, <br>//    the return value is the value returned by the default window procedure. <br>// <br>//  COMMENTS: <br>//    Call the DispMessage() function with the main window's message dispatch <br>//    information (msdiMain) and the message specific information. <br>// <br> <br>LRESULT CALLBACK WndProc(HWND   hwnd,  <br>                         UINT   uMessage,  <br>                         WPARAM wparam,  <br>                         LPARAM lparam) <br>{ <br>    return DispMessage(&amp;msdiMain, hwnd, uMessage, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: MsgCommand(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Handle the WM_COMMAND messages for the main window. <br>// <br>//  PARAMETERS: <br>//    hwnd     - window handle <br>//    uMessage - WM_COMMAND (Unused) <br>//    GET_WM_COMMAND_ID(wparam, lparam)   - Command identifier <br>//    GET_WM_COMMAND_HWND(wparam, lparam) - Control handle <br>// <br>//  RETURN VALUE: <br>//    The return value depends on the message number.  If the message <br>//    is implemented in the message dispatch table, the return value is <br>//    the value returned by the message handling function.  Otherwise, <br>//    the return value is the value returned by the default window procedure. <br>// <br>//  COMMENTS: <br>//    Call the DispCommand() function with the main window's command dispatch <br>//    information (cmdiMain) and the command specific information. <br>// <br> <br>LRESULT MsgCommand(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    return DispCommand(&amp;cmdiMain, hwnd, wparam, lparam); <br>} <br> <br> <br>// <br>//  FUNCTION: MsgCreate(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Handle the WM_CREATE messages for the main window. <br>//           and call InitCommonControls() API to initialize the <br>//           common control library.  <br>// <br>//  PARAMETERS: <br>//    hwnd     - window handle <br>// <br>//  RETURN VALUE: <br>//    Return 0 if the StatusBar and ToolBar Windows could be created <br>//    successfully. Otherwise, returns -1 to abort the main window <br>//    creation. <br>// <br>//  COMMENTS: <br>//    Call the CreateTSBars function with the main window's window handle <br>//    information (msdiMain).  <br>// <br>//    Must also initialize TAPI. <br>// <br> <br>LRESULT MsgCreate(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    InitCommonControls() ; // Initialize the common control library. <br> <br>    if (InitEditCtls(hwnd) == FALSE) <br>        return -1; <br> <br>    InitializeTAPI(hwnd); <br> <br>    if(!(CreateTBar(hwnd) &amp;&amp; CreateSBar(hwnd))) <br>        return -1;   // Tool and status bars were not created, so return -1. <br> <br>    UpdateStatusBar("Ready to make a call.",1,0); <br> <br>    EnableMakeCall(hwnd, TRUE); <br>    EnableHangupCall(hwnd, FALSE); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: MsgSize(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  This function resizes the toolbar and statusbar controls.  <br>// <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle  (Used) <br>//    uMessage  - Message number (Used) <br>//    wparam    - Extra data     (Used) <br>//    lparam    - Extra data     (Used) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>//    When the window procdure that has the status and tool bar controls <br>//    receive the WM_SIZE message, it has to pass the message on to these  <br>//    controls so that these controls can adjust their size accordingly.  <br>//    <br>//    It also has to resize the edit controls that are the UI for TAPI. <br>// <br>// <br> <br>LRESULT MsgSize(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam)  <br>{ <br>    SendMessage(hWndStatusbar,  uMessage, wparam, lparam); <br>    SendMessage(hWndToolbar, uMessage, wparam, lparam); <br> <br>    // Re-position the panes in the status bar <br>    InitializeStatusBar(hwnd); <br> <br>    SizeEditCtls(); <br> <br>    return 0 ; <br>} <br> <br> <br>// <br>//  FUNCTION: MsgSetFocus(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  This function puts the focus where is should be. <br>// <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle  (Used) <br>//    uMessage  - Identifies window that lost focus (Used) <br>//    wparam    - Extra data     (Used) <br>//    lparam    - Extra data     (Used) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>//    Just signal the edit controls to set the focus where it belongs. <br>// <br>// <br> <br>LRESULT MsgSetFocus(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam)  <br>{ <br>    SetFocusEditCtls(); <br> <br>    return 0 ; <br>} <br> <br> <br>// <br>//  FUNCTION: MsgDestroy(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Calls PostQuitMessage(). <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle  (Unused) <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>LRESULT MsgDestroy(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    PostQuitMessage(0); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: MsgClose(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Exits the application. <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - The window. <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>//     <br>//    Make sure TAPI is stopped before exiting. <br>// <br>// <br> <br>LRESULT MsgClose(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    ShutdownTAPI(); <br> <br>    DestroyWindow(hwnd); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: MsgPaint(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE: Paints the client area of the window. <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - The window. <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - Extra data     (Unused) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>//     <br>//    Not sure what needs to be painted, maybe text <br>//    labeling the edit controls? <br>// <br>// <br> <br>LRESULT MsgPaint(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    HDC hdc; <br>    PAINTSTRUCT ps; <br> <br>    hdc = BeginPaint(hwnd, &amp;ps); <br> <br>    EndPaint(hwnd, &amp;ps); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: CmdExit(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Exit the application. <br>// <br>//  PARAMETERS: <br>//    hwnd     - The window. <br>//    wCommand - IDM_EXIT (unused) <br>//    wNotify  - Notification number (unused) <br>//    hwndCtrl - NULL (unused) <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - command handled. <br>// <br>//  COMMENTS: <br>// <br>//    Make sure TAPI is stopped before exiting. <br>// <br>// <br> <br>LRESULT CmdExit(HWND hwnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    char szBuffer[50];    <br>    int  cbWritten = 0; <br> <br>    ShutdownTAPI(); <br> <br>    cbWritten = LoadString(hInst, wCommand, szBuffer, sizeof(szBuffer));  <br>    if(cbWritten == 0)  <br>        lstrcpy(szBuffer, "Unknown Command"); <br> <br>    UpdateStatusBar(szBuffer, 0, 0); <br>  <br>    DestroyWindow(hwnd); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: CmdHangupCall(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Stops TAPI <br>// <br>//  PARAMETERS: <br>//    hwnd     - The window. <br>//    wCommand - IDM_HANGUPCALL (unused) <br>//    wNotify  - Notification number (unused) <br>//    hwndCtrl - NULL (unused) <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - command handled. <br>// <br>//  COMMENTS: <br>// <br>//    Tells TAPI to close any opened lines. <br>// <br>// <br> <br> <br>LRESULT CmdHangupCall(HWND hWnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    HangupCall(); <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: CmdMakeCall(HWND, WORD, WORD, HWND) <br>// <br>//  PURPOSE: Starts TAPI <br>// <br>//  PARAMETERS: <br>//    hwnd     - The window. <br>//    wCommand - IDM_MAKECALL (unused) <br>//    wNotify  - Notification number (unused) <br>//    hwndCtrl - NULL (unused) <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - command handled. <br>// <br>//  COMMENTS: <br>// <br>//    Starts TAPI by calling the Dialing Dialog box. <br>//    Code for this dialog is with the rest of the TAPI code. <br>// <br>// <br> <br>LRESULT CmdMakeCall(HWND hWnd, WORD wCommand, WORD wNotify, HWND hwndCtrl) <br>{ <br>    DialCall(); <br>    return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

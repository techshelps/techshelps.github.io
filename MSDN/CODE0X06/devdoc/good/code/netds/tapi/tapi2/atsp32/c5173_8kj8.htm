<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ATSP.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5174"></a>ATSP.H</h2>
<pre><code>/*++ <br> <br>Copyright 1995 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    atsp.h <br> <br>Notes: <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include "tapi.h" <br>#include "tspi.h" <br>#include &lt;stdarg.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;string.h&gt; <br>#include "resource.h" <br> <br> <br>#define  MAX_DEV_NAME_LENGTH    63 <br>#define  ATSP_TIMEOUT           60000   // milliseconds <br> <br> <br>typedef struct _DRVLINE <br>{ <br>    HTAPILINE               htLine; <br> <br>    LINEEVENT               pfnEventProc; <br> <br>    DWORD                   dwDeviceID; <br> <br>    char                    szComm[8]; <br> <br>    HTAPICALL               htCall; <br> <br>    DWORD                   dwCallState; <br> <br>    DWORD                   dwCallStateMode; <br> <br>    DWORD                   dwMediaMode; <br> <br>    HANDLE                  hComm; <br> <br>    BOOL                    bDropInProgress; <br> <br>    OVERLAPPED              Overlapped; <br> <br>} DRVLINE, FAR *PDRVLINE; <br> <br> <br>typedef struct _DRVLINECONFIG <br>{ <br>    char                    szPort[8]; <br> <br>    char                    szCommands[64]; <br> <br>} DRVLINECONFIG, FAR *PDRVLINECONFIG; <br> <br> <br>typedef struct _ASYNC_REQUEST <br>{ <br>    DWORD                   dwRequestID; <br> <br>    DWORD                   dwCommand; <br> <br>    char                    szCommand[32]; <br> <br>    struct _ASYNC_REQUEST  *pNext; <br> <br>} ASYNC_REQUEST, *PASYNC_REQUEST; <br> <br> <br>#if DBG <br> <br>typedef struct _FUNC_PARAM <br>{ <br>    char        *lpszVal; <br> <br>    DWORD       dwVal; <br> <br>} FUNC_PARAM, *PFUNC_PARAM; <br> <br>#endif <br> <br>typedef struct _FUNC_INFO <br>{ <br> <br>#if DBG <br> <br>    char        *lpszFuncName; <br> <br>    DWORD       dwNumParams; <br> <br>    PFUNC_PARAM aParams; <br> <br>#endif <br> <br>    LONG        lResult; <br> <br>} FUNC_INFO, *PFUNC_INFO; <br> <br> <br>DWORD               gdwLineDeviceIDBase; <br>DWORD               gdwPermanentProviderID; <br>HANDLE              ghInst; <br>ASYNC_COMPLETION    gpfnCompletionProc; <br> <br>char gszAtspKey[]      = "Software\\Microsoft\\ATSP"; <br>char gszNumLines[]     = "NumLines"; <br>char gszDefLineConfigParams[] = "my new line,COM1,L0"; <br> <br>#if DBG <br> <br>char gszTab[]          = "    "; <br>char gszhdLine[]       = "hdLine"; <br>char gszhdCall[]       = "hdCall"; <br>char gszdwSize[]       = "dwSize"; <br>char gszhwndOwner[]    = "hwndOwner"; <br>char gszdwDeviceID[]   = "dwDeviceID"; <br>char gszdwRequestID[]  = "dwRequestID"; <br>char gszlpCallParams[] = "lpCallParams"; <br>char gszdwPermanentProviderID[] = "dwPermanentProviderID"; <br> <br>DWORD   gdwDebugLevel = 0; <br> <br>void <br>CDECL <br>DebugOutput( <br>    DWORD   dwLevel, <br>    LPCSTR  lpszFormat, <br>    ... <br>    ); <br> <br>#define DBGOUT(arg) DebugOutput arg <br> <br>LONG <br>PASCAL <br>Epilog( <br>    PFUNC_INFO  pInfo, <br>    LONG        lResult <br>    ); <br> <br>void <br>PASCAL <br>Prolog( <br>    PFUNC_INFO  pInfo <br>    ); <br> <br>#else <br> <br>#define DBGOUT(arg) <br> <br>#define Epilog(pAsyncRequestInfo, lResult) (lResult) <br> <br>#define Prolog(pAsyncRequestInfo) <br> <br>#endif <br> <br> <br>LPWSTR <br>PASCAL <br>My_lstrcpyW( <br>    WCHAR   *pString1, <br>    WCHAR   *pString2 <br>    ); <br> <br>LPVOID <br>PASCAL <br>DrvAlloc( <br>    DWORD dwSize <br>    ); <br> <br>VOID <br>PASCAL <br>DrvFree( <br>    LPVOID lp <br>    ); <br> <br>void <br>PASCAL <br>SetCallState( <br>    PDRVLINE    pLine, <br>    DWORD       dwCallState, <br>    DWORD       dwCallStateMode <br>    ); <br> <br>BOOL <br>CALLBACK <br>ConfigDlgProc( <br>    HWND    hwnd, <br>    UINT    msg, <br>    WPARAM  wParam, <br>    LPARAM  lParam <br>    ); <br> <br>LONG <br>PASCAL <br>ProviderInstall( <br>    char   *pszProviderName, <br>    BOOL    bNoMultipleInstance <br>    ); <br> <br>void <br>PASCAL <br>DropActiveCall( <br>    PDRVLINE    pLine <br>    ); </code></pre>
<p>&nbsp;</p></body>
</HTML>

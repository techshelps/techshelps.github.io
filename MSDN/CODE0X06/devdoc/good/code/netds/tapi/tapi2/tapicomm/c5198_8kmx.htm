<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOOLBAR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5199"></a>TOOLBAR.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE: toolbar.c <br>// <br>//  PURPOSE: Handles general routines for the Toolbar control <br>// <br>//  FUNCTIONS: <br>//    CreateTBar    - Creates the Toolbar control for the sample. <br>//    MsgNotify     - Handles the WM_NOTIFY message that gets sent to <br>//                    the parent window to get ToolTip Text. <br>//  COMMENTS: <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#include &lt;commctrl.h&gt;           // prototypes and defs for common controls <br>#include "globals.h"            // prototypes specific to this application <br>#include "toolbar.h"            // prototypes and #defines for toolbar.c <br> <br>// Global Variable for the toolbar control. <br> <br>HWND    hWndToolbar; <br> <br>//  **TODO**  Change the following values to match your toolbar bitmap <br>// <br>// NUMIMAGES    = Number of images in toolbar.bmp.  Note that this is not <br>//                the same as the number of elements on the toolbar. <br>// IMAGEWIDTH   = Width of a single button image in toolbar.bmp <br>// IMAGEHEIGHT  = Height of a single button image in toolbar.bmp <br>// BUTTONWIDTH  = Width of a button on the toolbar (zero = default) <br>// BUTTONHEIGHT = Height of a button on the toolbar (zero = default) <br> <br>#define NUMIMAGES       9 <br>#define IMAGEWIDTH      18 <br>#define IMAGEHEIGHT     17 <br>#define BUTTONWIDTH     0 <br>#define BUTTONHEIGHT    0 <br> <br>//  **TODO**  Add/remove entries in the following array to define the  <br>//            toolbar buttons (see documentation for TBBUTTON). <br> <br>TBBUTTON tbButton[] = <br>{ <br>    {1, IDM_MAKECALL,   TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {2, IDM_HANGUPCALL, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {0, 0,              TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0}, <br>    {7, IDM_ABOUT,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>}; <br> <br> <br>// <br>//  FUNCTION: CreateTBar(HWND) <br>// <br>//  PURPOSE:  Calls CreateToolBarEx() <br>// <br>// <br>//  PARAMETERS: <br>// <br>//  hwnd - Window handle : Used for the hWndParent parameter of the control. <br>// <br>//  RETURN VALUE: <br>// <br>//  If toolbar control was created successfully Return TRUE, <br>//  else returns FALSE. <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>BOOL CreateTBar(HWND hwnd) <br>{ <br>    hWndToolbar = CreateToolbarEx(hwnd, <br>                                  WS_CHILD | WS_VISIBLE | TBSTYLE_TOOLTIPS, <br>                                  IDM_TOOLBAR, <br>                                  NUMIMAGES, <br>                                  hInst, <br>                                  IDB_BMP, <br>                                  tbButton, <br>                                  sizeof(tbButton)/sizeof(TBBUTTON), <br>                                  BUTTONWIDTH, <br>                                  BUTTONHEIGHT, <br>                                  IMAGEWIDTH, <br>                                  IMAGEHEIGHT, <br>                                  sizeof(TBBUTTON)); <br> <br>    return (hWndToolbar != NULL); <br>} <br> <br>// <br>//  FUNCTION: MsgNotify(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  WM_NOTIFY is sent to the parent window to get the <br>//            tooltip text assoc'd with that toolbar button. <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle  (Unused) <br>//    uMessage  - Message number (Unused) <br>//    wparam    - Extra data     (Unused) <br>//    lparam    - TOOLTIPTEXT FAR* <br>// <br>//  RETURN VALUE: <br>//    Always returns 0 - Message handled <br>// <br>// <br>//  COMMENTS: <br>//    This message fills in the lpszText field of the TOOLTIPTEXT <br>//    structure if code == TTN_NEEDTEXT <br>// <br> <br>LRESULT MsgNotify(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    LPTOOLTIPTEXT lpToolTipText; <br>    static char   szBuffer[64]; <br> <br>    lpToolTipText = (LPTOOLTIPTEXT)lparam; <br>    if (lpToolTipText-&gt;hdr.code == TTN_NEEDTEXT) <br>    { <br>        LoadString(hInst, <br>                   lpToolTipText-&gt;hdr.idFrom,   // string ID == command ID <br>                   szBuffer, <br>                   sizeof(szBuffer)); <br> <br>        lpToolTipText-&gt;lpszText = szBuffer; <br>    } <br>    return 0; <br>} <br> <br>void EnableMakeCall(HWND hWnd, BOOL bEnable) <br>{ <br>    EnableMenuItem(GetMenu(hWnd), IDM_MAKECALL, MF_BYCOMMAND |  <br>        (bEnable ? MF_ENABLED : MF_GRAYED)); <br>    SendMessage(hWndToolbar, TB_ENABLEBUTTON, (WPARAM) IDM_MAKECALL, <br>        (LPARAM) MAKELONG(bEnable, 0)); <br> <br>} <br> <br>void EnableHangupCall(HWND hWnd, BOOL bEnable) <br>{ <br>    EnableMenuItem(GetMenu(hWnd), IDM_HANGUPCALL, MF_BYCOMMAND |  <br>        (bEnable ? MF_ENABLED : MF_GRAYED)); <br>    SendMessage(hWndToolbar, TB_ENABLEBUTTON, (WPARAM) IDM_HANGUPCALL, <br>        (LPARAM) MAKELONG(bEnable, 0)); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

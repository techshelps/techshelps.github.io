<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATBAR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5192"></a>STATBAR.C</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE: statbar.c <br>// <br>//  PURPOSE: Handles general routines for the TapiComm sample. <br>// <br>//  FUNCTIONS: <br>//    MsgTimer      - Handles the WM_TIMER messages to set the time on <br>//                    the status bar. <br>//    MsgMouseMove  - Handles the WM_MOUSEMOVE to display the cursor position. <br>//    MsgMenuSelect - Handle the WM_MENUSELECT message. This message will <br>//                    enable the status bar control to update when the user <br>//                    moves across menu items on the main window. <br>//    InitializeStatusBar - Sets the pane positions in the statusbar control <br>//    CreateSBar    - Calls CreateStatusWindow() to create the status bar <br>//    UpdateStatusBar - Updates the statusbar control with appropriate text <br>// <br> <br>#include &lt;windows.h&gt;            // required for all Windows applications <br>#include &lt;windowsx.h&gt; <br>#include &lt;commctrl.h&gt;           // prototypes and defs for common controls <br>#include "globals.h"            // prototypes specific to this application <br>#include "statbar.h"            // prototypes specific to statbar.c <br> <br> <br>// Global Variables for the status bar control. <br> <br>HWND  hWndStatusbar; <br> <br>//  **TODO**  Add entries to the string table in TapiComm.rc for each menu <br>//            command.  MsgMenuSelect (below) loads these strings to display <br>//            information in the status bar.  MsgMenuSelect assumes that the <br>//            string ID is the same as the command ID and that a string <br>//            exists for every command. <br>// <br>// The following array contains resource string ID's for popup menus <br>// in the main application menu.  This array is used by MsgMenuSelect <br>// to display information in the status bar. <br>// <br>//  **TODO**  Add entries to this array for each popup menu in the same <br>//            positions as they appear in the main menu.  Remember to define <br>//            the ID's in globals.h and add the strings to TapiComm.rc. <br> <br>UINT idPopup[] = <br>{ <br>    IDS_FILEMENU, <br>    IDS_EDITMENU, <br>    IDS_HELPMENU, <br>}; <br> <br> <br> <br>// <br>//  FUNCTION: MsgMenuSelect(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Upadates menu selections on the staus bar. <br>// <br>// <br>//  PARAMETERS: <br>// <br>//    hwnd      - Window handle  (Used) <br>//    uMessage  - Message number (Used) <br>//    wparam    - Extra data     (Used) <br>//    lparam    - Extra data     (Used) <br>// <br>//  RETURN VALUE: <br>// <br>//    Always returns 0 - Message handled <br>// <br>//  COMMENTS: <br>//    This message is sent when the user selects menu items by <br>//    by pulling down  a popup menu move the mouse around to highlite <br>//    different menu items. <br>// <br>// <br> <br>#define MENUHACK 1              // Menu Select message has a bug..so workaround <br> <br>LRESULT MsgMenuSelect(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam) <br>{ <br>    static char szBuffer[128]; <br>    UINT   nStringID = 0; <br>    UINT   fuFlags = GET_WM_MENUSELECT_FLAGS(wparam, lparam) &amp; 0xffff; <br>    UINT   uCmd    = GET_WM_MENUSELECT_CMD(wparam, lparam); <br>    HMENU  hMenu   = GET_WM_MENUSELECT_HMENU(wparam, lparam); <br> <br> <br>    szBuffer[0] = 0;                            // First reset the buffer <br> <br> <br>    if (fuFlags == 0xffff &amp;&amp; hMenu == NULL)     // Menu has been closed <br>        nStringID = IDS_DESCRIPTION; <br> <br>    else if (fuFlags &amp; MFT_SEPARATOR)           // Ignore separators <br>        nStringID = 0; <br> <br>    else if (fuFlags &amp; MF_POPUP)                // Popup menu <br>    { <br>#ifdef MENUHACK                 // This code shouldn't be necessary... <br>        UINT i; <br>        for (i = 0; i &lt; sizeof(idPopup)/sizeof(idPopup[0]); i++) <br>        { <br>            if(GetSubMenu(hMenu, i) == (HMENU)uCmd) <br>            { <br>                uCmd = i; <br>                break; <br>            } <br>        } <br>#endif <br>        if (fuFlags &amp; MF_SYSMENU)               // System menu <br>            nStringID = IDS_SYSMENU; <br> <br>        else <br>            // Get string ID for popup menu from idPopup array. <br>            nStringID = ((uCmd &lt; sizeof(idPopup)/sizeof(idPopup[0])) ? <br>                            idPopup[uCmd] : 0); <br>    }  // for MF_POPUP <br> <br>    else                                        // Must be a command item <br>        nStringID = uCmd;                       // String ID == Command ID <br> <br>    // Load the string if we have an ID <br>    if (0 != nStringID) <br>        LoadString(hInst, nStringID, szBuffer, sizeof(szBuffer)); <br> <br>    // Finally... send the string to the status bar <br>    UpdateStatusBar(szBuffer, 0, 0); <br> <br>    return 0; <br>} <br> <br> <br>// <br>//  FUNCTION: InitializeStatusBar(HWND) <br>// <br>//  PURPOSE:  Initialize statusbar control with time and mouse positions. <br>// <br>// <br>//  PARAMETERS: <br>// <br>//  hwndParent - Window handle of the status bar's parent <br>// <br>// <br>//  RETURN VALUE:  NONE <br>// <br>// <br>//  COMMENTS: <br>// <br>//   This function initializes the time  and mouse positions sections of <br>//   the statubar window. The Date for the time section is obtained by <br>//   calling SetTimer API. When the timer messages start comming in, <br>//   GetSytemTime() to fill the time section. <br>//   The WPARAM of SB_SETTEXT is divided into 2 parameters. The LOWORD <br>//   determines which section/part the text goes into, and the HIWORD <br>//   tells how the bar is drawn (popin or popout). <br>// <br> <br>void InitializeStatusBar(HWND hwndParent) <br>{ <br>    const cSpaceInBetween = 8; <br>    int   ptArray[2];   // Array defining the number of parts/sections <br>    SIZE  size = {0,0};         // the Status bar will display. <br>    RECT  rect; <br>    HDC   hDC; <br> <br>   /* <br>    * Fill in the ptArray... <br>    */ <br> <br>    hDC = GetDC(hwndParent); <br>    GetClientRect(hwndParent, &amp;rect); <br>    ReleaseDC(hwndParent, hDC); <br> <br>    ptArray[0] = (rect.right) / 2; <br>    ptArray[1] = rect.right; <br> <br>    SendMessage(hWndStatusbar, <br>                SB_SETPARTS, <br>                sizeof(ptArray)/sizeof(ptArray[0]), <br>                (LPARAM)(LPINT)ptArray); <br> <br>    UpdateStatusBar(SZDESCRIPTION, 0, 0); <br>} <br> <br> <br>// <br>//  FUNCTION: CreateSBar(HWND, UINT, WPARAM, LPARAM) <br>// <br>//  PURPOSE:  Calls CreateStatusWindow() to create the status bar <br>// <br>// <br>//  PARAMETERS: <br>// <br>//  hwndParent - Window handle of the status bar's parent <br>// <br>//  RETURN VALUE: <br>// <br>//  If both controls were created successfully Return TRUE, <br>//  else returns FALSE. <br>// <br>//  COMMENTS: <br>// <br>// <br> <br>BOOL CreateSBar(HWND hwndParent) <br>{ <br>    hWndStatusbar = CreateStatusWindow(WS_CHILD | WS_VISIBLE | WS_BORDER, <br>                                       SZDESCRIPTION, <br>                                       hwndParent, <br>                                       IDM_STATUSBAR); <br>    if(hWndStatusbar) <br>    { <br>        InitializeStatusBar(hwndParent); <br>        return TRUE; <br>    } <br> <br>    return FALSE; <br>} <br> <br> <br>// <br>//  FUNCTION: UpdateStatusBar(HWND) <br>// <br>//  PURPOSE:  Updates the statusbar control with appropriate text <br>// <br>// <br>//  PARAMETERS: <br>// <br>//  lpszStatusString - text to be displayed <br>//  partNumber       - which part of the status bar to display text in <br>//  displayFlags     - display flags <br>// <br>// <br>//  RETURN VALUE: NONE <br>// <br>// <br>//  COMMENTS: <br>//      None <br>// <br>// <br> <br>void UpdateStatusBar(LPSTR lpszStatusString, WORD partNumber, WORD displayFlags) <br>{ <br>    SendMessage(hWndStatusbar, <br>                SB_SETTEXT, <br>                partNumber | displayFlags, <br>                (LPARAM)lpszStatusString); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

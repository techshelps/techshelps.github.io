<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACDSMPL.C</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5168"></a>ACDSMPL.C</h2>
<pre><code>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  ACDSMPL.C <br>// <br>//  Handles all the UI for ACDSample <br>// <br>////////////////////////////////////////////////////////////////////////////// <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;tapi.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "resource.h" <br>#include "acdsmpl.h" <br> <br> <br>////////////////////////////////////////////////////////////////////////////// <br>//  PROTOTYPES <br>////////////////////////////////////////////////////////////////////////////// <br>static BOOL CreateMainWindow (int nCmdShow); <br> <br>static LRESULT CALLBACK MainDlgProc (HWND   hwnd, <br>                                     UINT   uMsg, <br>                                     WPARAM wParam, <br>                                     LPARAM lParam); <br>void MySetWindow(HWND, int); <br>void MySaveWindow(HWND); <br>BOOL ResizeWindows(BOOL bSizeBar, DWORD dwBarLocation); <br>HTREEITEM AddItemToTree(HTREEITEM hParent, <br>                        LPTSTR lpszName, <br>                        LPARAM lParam, <br>                        HTREEITEM * phItem); <br>BOOL DoPopupMenu(HTREEITEM hItem, POINT pt); <br>BOOL DeleteLeafAndStruct(HTREEITEM hItem); <br>BOOL CALLBACK ChangeGroupDlgProc(HWND   hWnd, <br>                            UINT   uMsg, <br>                            WPARAM wParam, <br>                            LPARAM lParam); <br>BOOL CALLBACK ChangeAgentDlgProc(HWND   hWnd, <br>                            UINT   uMsg, <br>                            WPARAM wParam, <br>                            LPARAM lParam); <br>BOOL CALLBACK AddGroupDlgProc(HWND   hWnd, <br>                         UINT   uMsg, <br>                         WPARAM wParam, <br>                         LPARAM lParam); <br>BOOL CALLBACK AddAgentDlgProc(HWND   hWnd, <br>                         UINT   uMsg, <br>                         WPARAM wParam, <br>                         LPARAM lParam); <br>LRESULT DoCommand(WPARAM wParam, LPARAM lParam); <br>void AddGroupsToMenu(HTREEITEM hItem, <br>                     HMENU hMenu); <br>BOOL CALLBACK GroupAddToListProc(HWND   hWnd, <br>                            UINT   uMsg, <br>                            WPARAM wParam, <br>                            LPARAM lParam); <br>BOOL CALLBACK AgentAddToListProc(HWND   hWnd, <br>                            UINT   uMsg, <br>                            WPARAM wParam, <br>                            LPARAM lParam); <br>BOOL BuildLineList(HWND hWnd, <br>                   DWORD dwDeviceID); <br>BOOL BuildAddressList(HWND hWnd, <br>                      HWND hParentWnd, <br>                      DWORD dwDeviceID); <br>BOOL InitializeTapi(); <br>BOOL CleanUp(); <br>BOOL UpdateGroupLeaf(PGROUP pGroup); <br>BOOL DoAgentView(); <br>BOOL DoGroupView(); <br>BOOL ReadInFile(); <br>BOOL WriteToDisk(); <br> <br> <br> <br>////////////////////////////////////////////////////////////////////////////// <br>//  GLOBALS <br>////////////////////////////////////////////////////////////////////////////// <br>ACDGLOBALS      g; <br> <br>TCHAR gszACDSampleKey[]     = TEXT("Software\\Microsoft\\ACDSample"); <br>TCHAR gszPlacementValue[]   = TEXT("WindowPlacement"); <br>TCHAR gszBarLocation[]      = TEXT("BarLocation"); <br> <br> <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>// WinMain() <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>int WINAPI WinMain (HINSTANCE hInstance, <br>                    HINSTANCE hPrevInstance, <br>                    LPSTR     lpszCmdLine, <br>                    int       nCmdShow) <br>{ <br>    MSG msg; <br> <br>    // initialize global variables <br>    g.hInstance = hInstance; <br>    g.pAgents = NULL; <br>    g.pGroups = NULL; <br> <br>    // init tapi stuff <br>    if (!InitializeTapi()) <br>    { <br>        MessageBox(NULL, <br>                   TEXT("TAPI could not be initialized.\nVerify that") <br>                   TEXT("your machine has TAPI devices installed"), <br>                   TEXT("Cannot start ACDSMPL"), <br>                   MB_OK); <br>    } <br> <br>    if (!CreateMainWindow(nCmdShow)) <br>    { <br>        return 0; <br>    } <br> <br>    // main message loop <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>        if (!IsDialogMessage(g.hMainWnd, <br>                             &amp;msg)) <br>        { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>        } <br>    } <br> <br>    return 1; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>//  CreateMainWindow() <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>BOOL CreateMainWindow (int nCmdShow) <br>{ <br> <br>    // InitCommonControls for TreeView control <br>    InitCommonControls(); <br> <br>    // Create the main window <br>    g.hMainWnd = CreateDialog(g.hInstance, <br>                             MAKEINTRESOURCE(IDD_MAINDLG), <br>                             NULL, <br>                             MainDlgProc); <br> <br>    if (g.hMainWnd == NULL) <br>    { <br>        return FALSE; <br>    } <br> <br>    // restore default location <br>    MySetWindow(g.hMainWnd, nCmdShow); <br>     <br>    // store global hwnds <br>    g.hTreeWnd = GetDlgItem(g.hMainWnd, <br>                            IDC_TREEWND); <br> <br>    g.hLogWnd = GetDlgItem(g.hMainWnd, <br>                           IDC_EDITWND); <br> <br>    if ((g.hTreeWnd == FALSE) || (g.hLogWnd == FALSE)) <br>    { <br>        return FALSE; <br>    } <br> <br>    ResizeWindows(FALSE, 0); <br> <br>    return TRUE; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// <br>//  MainDlgProc() <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>LRESULT CALLBACK MainDlgProc (HWND   hWnd, <br>                              UINT   uMsg, <br>                              WPARAM wParam, <br>                              LPARAM lParam) <br>{ <br>    static BOOL     bButtonDown = FALSE; <br>     <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>        { <br>            LRESULT lResult; <br>             <br>            lResult = DoCommand(wParam, lParam); <br>            return lResult; <br>        } <br> <br>        // button and mousemove messages tracked to move <br>        // the bar between the treeview control and the <br>        // edit control <br>        case WM_LBUTTONDOWN: <br>        { <br>            bButtonDown = TRUE; <br>            SetCapture(hWnd); <br>            return 0; <br>        } <br> <br>        case WM_LBUTTONUP: <br>        { <br>            bButtonDown = FALSE; <br>            ReleaseCapture(); <br>            return 0; <br>        } <br> <br>        case WM_MOUSEMOVE: <br>        { <br>            if (bButtonDown) <br>            { <br>                ResizeWindows(TRUE, (DWORD)LOWORD(lParam)); <br>                return 1; <br>            } <br>            break; <br>        } <br> <br>        case WM_SIZE: <br>        { <br>            ResizeWindows(FALSE, 0); <br>            return 1; <br>        } <br> <br>        // catch right click in tree view to make <br>        // popup menu <br>        case WM_NOTIFY: <br>        { <br>            LPNMHDR     pnmhdr; <br>            POINT       pt; <br>            HTREEITEM   hItem; <br>            TV_HITTESTINFO  hittestinfo; <br>            RECT        rc; <br> <br>            pnmhdr = (LPNMHDR)lParam; <br> <br>            // make sure it's a right click and it's in the treeview <br>            if ((pnmhdr-&gt;code != NM_RCLICK) || (pnmhdr-&gt;hwndFrom != g.hTreeWnd)) <br>            { <br>                break; <br>            } <br> <br>            GetCursorPos(&amp;pt); <br>            GetWindowRect(g.hTreeWnd, <br>                          &amp;rc); <br>             <br>            hittestinfo.pt.x = pt.x - rc.left; <br>            hittestinfo.pt.y = pt.y - rc.top; <br> <br>            // hittest to get the tree view item <br>            hItem = TreeView_HitTest(g.hTreeWnd, <br>                                     &amp;hittestinfo); <br> <br>            // only display a menu if the mouse is actually <br>            // over the item (TVHT_ONITEM) <br>            if (hItem == NULL || (!(hittestinfo.flags &amp; TVHT_ONITEM)) ) <br>            { <br>                return TRUE; <br>            } <br> <br>            // select that item (right clicking will not select <br>            // by default <br>            TreeView_Select(g.hTreeWnd, <br>                            hItem, <br>                            TVGN_CARET); <br> <br>            // create the menu <br>            DoPopupMenu(hItem, pt); <br> <br>            return TRUE; <br>                            <br>             <br>        } <br>         <br>        case WM_CLOSE: <br> <br>            // save the current window location <br>            WriteToDisk(); <br>            CleanUp(); <br>            MySaveWindow(hWnd); <br>            PostQuitMessage(0); <br>            return 1; <br> <br>        default: <br>            break; <br>    } <br>    return 0; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////////////// <br>// <br>//  ResizeWindows - Handles resizing the two child windows of the <br>//      main window.  If bSizeBar is true, then the sizing is happening <br>//      because the user is moving the bar.  if bSizeBar is false, the sizing <br>//      is happening because of the WM_SIZE or something like that. <br>// <br>//////////////////////////////////////////////////////////////////////////////// <br>BOOL ResizeWindows(BOOL bSizeBar, DWORD dwBarLocation) <br>{ <br>    RECT            rc, rc2; <br>    int             x; <br> <br>    // is the user moving the bar? <br>    if (!bSizeBar) <br>    { <br>        dwBarLocation = g.dwBarLocation; <br>    } <br> <br>    GetClientRect(g.hMainWnd, &amp;rc); <br> <br>    // make sure the bar is in a OK location <br>    if (bSizeBar) <br>    { <br>        if ((LONG)dwBarLocation &lt; GetSystemMetrics(SM_CXSCREEN)/WINDOWSCALEFACTOR) <br>            return FALSE; <br> <br>        if ((LONG)(rc.right - dwBarLocation) &lt; GetSystemMetrics(SM_CXSCREEN)/WINDOWSCALEFACTOR) <br>            return FALSE; <br>    } <br> <br>    // save the bar location <br>    g.dwBarLocation = dwBarLocation; <br> <br>    // get the size of the frame <br>    x = GetSystemMetrics(SM_CXFRAME); <br> <br>    // move tree windows <br>    MoveWindow(g.hTreeWnd, <br>               0, <br>               0, <br>               dwBarLocation, <br>               rc.bottom, <br>               TRUE); <br> <br>    // get the size of the window (in case move window failed <br>    GetClientRect(g.hTreeWnd, &amp;rc2); <br> <br>    // move the edit window with respect to the tree window <br>    MoveWindow(g.hLogWnd, <br>               rc2.right-rc2.left+x+SIZEBAR, <br>               0, <br>               rc.right-(rc2.right-rc2.left)-x-SIZEBAR, <br>               rc.bottom, <br>               TRUE); <br> <br>    return TRUE; <br>} <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  MySetWindow - reads in the window placement from registry <br>//  and sets the window and bar. <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>void MySetWindow(HWND hWnd, int nCmdShow) <br>{ <br>    WINDOWPLACEMENT     pwp; <br>    HKEY                hKey; <br>    DWORD               dwDataSize; <br>    DWORD               dwDataType; <br>    RECT                rc; <br> <br>    pwp.length = sizeof(WINDOWPLACEMENT); <br> <br>    // open the key and read in the WINDOWPLACEMENT structure <br>    RegOpenKeyEx(HKEY_CURRENT_USER, <br>                 gszACDSampleKey, <br>                 0, <br>                 KEY_ALL_ACCESS, <br>                 &amp;hKey); <br> <br>    dwDataSize = sizeof(pwp); <br>     <br>    if ( RegQueryValueEx(hKey, <br>                         gszPlacementValue, <br>                         0, <br>                         &amp;dwDataType, <br>                         (LPBYTE)&amp;pwp, <br>                         &amp;dwDataSize) ) <br>    { <br>        // if it fails, default <br>        ShowWindow(g.hMainWnd, nCmdShow); <br>        GetWindowRect(g.hMainWnd, &amp;rc); <br>        g.dwBarLocation = (rc.right - rc.left) / 2; <br>    } <br>    else <br>    { <br>        // if it succeeds, set the window and bar <br>        dwDataSize = sizeof(DWORD); <br>         <br>        if (RegQueryValueEx(hKey, <br>                            gszBarLocation, <br>                            0, <br>                            &amp;dwDataType, <br>                            (LPBYTE)&amp;g.dwBarLocation, <br>                            &amp;dwDataSize)) <br>        { <br>            g.dwBarLocation = (pwp.rcNormalPosition.right - pwp.rcNormalPosition.left) / 2; <br>        } <br> <br>        SetWindowPlacement(g.hMainWnd, &amp;pwp); <br>    } <br> <br> <br>    RegCloseKey( hKey ); <br>} <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  MySaveWindow() - save the current window placement and bar <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>void MySaveWindow(HWND hWnd) <br>{ <br>    WINDOWPLACEMENT     pwp; <br>    HKEY                hKey; <br>    DWORD               dwDisposition; <br> <br> <br>    pwp.length = sizeof(WINDOWPLACEMENT); <br> <br>    // get and save <br>    GetWindowPlacement(hWnd, &amp;pwp); <br> <br>    RegCreateKeyEx(HKEY_CURRENT_USER, <br>                   gszACDSampleKey, <br>                   0, <br>                   TEXT(""), <br>                   REG_OPTION_NON_VOLATILE, <br>                   KEY_ALL_ACCESS, <br>                   0, <br>                   &amp;hKey, <br>                   &amp;dwDisposition); <br> <br>    RegSetValueEx(hKey, <br>                  gszPlacementValue, <br>                  0, <br>                  REG_BINARY, <br>                  (LPBYTE)&amp;pwp, <br>                  sizeof(WINDOWPLACEMENT)); <br> <br>    RegSetValueEx(hKey, <br>                  gszBarLocation, <br>                  0, <br>                  REG_DWORD, <br>                  (LPBYTE)&amp;g.dwBarLocation, <br>                  sizeof(DWORD)); <br> <br>    RegCloseKey( hKey ); <br> <br>} <br> <br>  <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  AddItemToTree <br>// <br>//    add a new leaf to the tree <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>HTREEITEM AddItemToTree(HTREEITEM hParent, <br>                        LPTSTR lpszName, <br>                        LPARAM lParam, <br>                        HTREEITEM * phItem) <br>{  <br>    TV_ITEM         tvi;  <br>    TV_INSERTSTRUCT tvins;  <br>    HTREEITEM       hti;  <br>  <br>    tvi.mask = TVIF_TEXT | TVIF_PARAM; <br>  <br>    // Set the text of the item.  <br>    tvi.pszText = lpszName;  <br>    tvi.cchTextMax = lstrlen(lpszName) * sizeof(TCHAR); <br> <br>    // Save the pointer to the buffer <br>    tvi.lParam = lParam; <br>  <br>    tvins.item = tvi;  <br>    tvins.hInsertAfter = TVI_SORT; <br>  <br>    // Set the parent item <br>    tvins.hParent = hParent; <br>     <br>    // Add the item to the tree-view control.  <br>    hti = (HTREEITEM) SendMessage(g.hTreeWnd, <br>                                  TVM_INSERTITEM, <br>                                  0,  <br>                                  (LPARAM) (LPTV_INSERTSTRUCT) &amp;tvins); <br> <br>    // save hitem <br>    if (phItem) <br>    { <br>        *phItem = hti; <br>    } <br> <br>    // select the item so it has focus <br>    TreeView_Select(g.hTreeWnd, <br>                    hti, <br>                    TVGN_CARET); <br>  <br>    return hti; <br>}  <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  DoPopupMenu(HTREEITEM hItem, <br>//              POINT pt) <br>// <br>//      hItem - item to create menu for <br>//      pt - location of mouse so we can create menu where it is <br>// <br>//   creates a popup menu, depending on what kind of item is selected  <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>BOOL DoPopupMenu(HTREEITEM hItem, POINT pt) <br>{ <br> <br>    HMENU       hMenu; <br>    TV_ITEM     tvi; <br>    TCHAR       szNewGroup[]        = TEXT("&amp;New Group..."); <br>    TCHAR       szNewAgent[]        = TEXT("New &amp;Agent..."); <br>    TCHAR       szAddAgent[]        = TEXT("A&amp;dd Agent..."); <br>    TCHAR       szGroupProperties[] = TEXT("&amp;Group Properties..."); <br>    TCHAR       szAgentStatus[]     = TEXT("Agent Status..."); <br>    TCHAR       szAddGroup[]        = TEXT("Add Group..."); <br>    TCHAR       szAgentProperties[] = TEXT("Agent Properties..."); <br>    TCHAR       szGroupDelete[]     = TEXT("Group Delete"); <br>    TCHAR       szAgentDelete[]     = TEXT("Agent Delete"); <br>    TCHAR       szSignIn[]          = TEXT("Agent Sign In"); <br>    TCHAR       szSignOut[]         = TEXT("Agent Sign Out");     <br> <br>    // get the selected item <br>    g.hTreeItemWithMenu = hItem; <br> <br>    // create the menu <br>    hMenu = CreatePopupMenu(); <br> <br>    // get the lParam, which is a pointer to the item <br>    tvi.mask = TVIF_HANDLE | TVIF_PARAM; <br>    tvi.hItem = hItem; <br> <br>    TreeView_GetItem(g.hTreeWnd, <br>                     &amp;tvi); <br> <br>    if (!tvi.lParam) <br>    { <br>        return TRUE; <br>    } <br>     <br>    switch (((PGROUP)tvi.lParam)-&gt;dwKey) <br>    { <br>        // root item <br>        case GROUPROOTKEY: <br>             <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       IDM_NEWGROUP, <br>                       szNewGroup); <br>            break; <br> <br>        // root item <br>        case AGENTROOTKEY: <br>             <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       IDM_NEWAGENT, <br>                       szNewAgent); <br>            break; <br>        // group leaf <br>        case GROUPKEY: <br>             <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       (UINT)IDM_GROUPADDTOLIST, <br>                       szAddAgent); <br>             <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       (UINT)IDM_GROUPAGENTSTATUS, <br>                       szAgentStatus); <br> <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       IDM_GROUPPROPERTIES, <br>                       szGroupProperties); <br> <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       IDM_GROUPDELETE, <br>                       szGroupDelete); <br> <br>            break; <br>        // agent leaf     <br>        case AGENTKEY: <br> <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       (UINT)IDM_AGENTADDTOLIST, <br>                       szAddGroup); <br>             <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       IDM_AGENTPROPERTIES, <br>                       szAgentProperties); <br> <br>            AppendMenu(hMenu, <br>                       MF_ENABLED | MF_STRING, <br>                       IDM_AGENTDELETE, <br>                       szAgentDelete); <br> <br>            break; <br>             <br>        default: <br>            break; <br>    } <br> <br>    // actually show menu <br>    TrackPopupMenu(hMenu, <br>                   TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RIGHTBUTTON, <br>                   pt.x, <br>                   pt.y, <br>                   0, <br>                   g.hMainWnd, <br>                   NULL); <br>     <br>    return TRUE; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  LRESULT DoCommand(WPARAM wParam, LPARAM lParam) <br>//      handle WM_COMMAND messages for MainDlgProc <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>LRESULT DoCommand(WPARAM wParam, LPARAM lParam) <br>{ <br>    switch (LOWORD(wParam)) <br>    { <br>        // New - create a new tree, so just init <br>        // the items and return <br>        case ID_FILE_NEW: <br>            DoGroupView(); <br>            return 1; <br> <br>        // Open - read in a file <br>        case ID_FILE_OPEN: <br>            ReadInFile(); <br>            return 1; <br>         <br>        case ID_FILE_EXIT: <br>            // save the current window location <br>            WriteToDisk(); <br>            CleanUp(); <br>            MySaveWindow(g.hMainWnd); <br>            PostQuitMessage(0); <br>            return 1; <br> <br>        // new group <br>        case ID_EDIT_ADDGROUP: <br>        case IDM_NEWGROUP: <br>            DialogBox(g.hInstance, <br>                      MAKEINTRESOURCE(IDD_ADD), <br>                      g.hTreeWnd, <br>                      AddGroupDlgProc); <br> <br>            return 1; <br> <br>        // new agent     <br>        case ID_EDIT_ADDAGENT: <br>        case IDM_NEWAGENT: <br>            DialogBox(g.hInstance, <br>                      MAKEINTRESOURCE(IDD_ADDAGENT), <br>                      g.hTreeWnd, <br>                      AddAgentDlgProc); <br>            return 1; <br> <br>        // properties <br>        case IDM_GROUPPROPERTIES: <br>            DialogBox(g.hInstance, <br>                      MAKEINTRESOURCE(IDD_ADD), <br>                      g.hMainWnd, <br>                      ChangeGroupDlgProc); <br> <br>            return 1; <br> <br>        // properties             <br>        case IDM_AGENTPROPERTIES: <br>            DialogBox(g.hInstance, <br>                      MAKEINTRESOURCE(IDD_ADDAGENT), <br>                      g.hMainWnd, <br>                      ChangeAgentDlgProc); <br> <br>            return 1; <br> <br>        // delete             <br>        case IDM_GROUPDELETE:             <br>        case IDM_AGENTDELETE: <br>        { <br>            DeleteLeafAndStruct(g.hTreeItemWithMenu); <br>             <br>            return 1; <br>        } <br> <br> <br>        // add to list <br>        case IDM_GROUPADDTOLIST: <br>            DialogBoxParam(g.hInstance, <br>                           MAKEINTRESOURCE(IDD_ADDTOLIST), <br>                           g.hMainWnd, <br>                           GroupAddToListProc, <br>                           TRUE); <br>             <br>            return 1; <br>                      <br>        // add to list <br>        case IDM_AGENTADDTOLIST: <br>            DialogBoxParam(g.hInstance, <br>                           MAKEINTRESOURCE(IDD_ADDTOLIST), <br>                           g.hMainWnd, <br>                           AgentAddToListProc, <br>                           FALSE); <br> <br>            return 1; <br> <br>        case ID_VIEW_GROUP: <br>            DoGroupView(); <br>            return 1; <br>             <br>        case ID_VIEW_AGENT: <br>            DoAgentView(); <br>            return 1; <br> <br>        default: <br>            break; <br>             <br>    } <br> <br>    return 0; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////////////////////////////// <br>// <br>//  AddGroupDlgProc - Window proc for the add agent/group dialog box <br>// <br>///////////////////////////////////////////////////////////////////////////////////////////////////// <br>BOOL CALLBACK AddGroupDlgProc(HWND   hWnd, <br>                              UINT   uMsg, <br>                              WPARAM wParam, <br>                              LPARAM lParam) <br>{ <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br> <br>            // set text appropriately <br>            SetWindowText(hWnd, <br>                          TEXT("Add Group")); <br> <br>            BuildLineList(GetDlgItem(hWnd, <br>                                     IDC_LINECOMBO), <br>                          0); <br> <br>            BuildAddressList(GetDlgItem(hWnd, <br>                                        IDC_ADDRESSCOMBO), <br>                             hWnd, <br>                             0); <br>                           <br>            // set focus on first control <br>            SetFocus(GetDlgItem(hWnd, <br>                                IDC_NAME)); <br> <br>            return 0; <br> <br>        case WM_COMMAND: <br> <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDC_LINECOMBO: <br>                { <br>                    if (HIWORD(wParam) == CBN_SELENDOK) <br>                    { <br>                        // need to redo addresses <br>                        BuildAddressList(GetDlgItem(hWnd, <br>                                                    IDC_ADDRESSCOMBO), <br>                                         hWnd, <br>                                         0); <br> <br>                        return 1; <br>                    } <br>                     <br>                    return 0; <br>                } <br>                case IDOK: <br>                { <br>                    TCHAR       szName[128]; <br>                    PGROUP      pGroup; <br>                    DWORD       dwLine, dwAddress; <br>                    int         item; <br> <br>                    // get info <br>                    SendDlgItemMessage(hWnd, <br>                                       IDC_NAME, <br>                                       WM_GETTEXT, <br>                                       128, <br>                                       (LPARAM)szName); <br> <br>                    item = SendDlgItemMessage(hWnd, <br>                                              IDC_LINECOMBO, <br>                                              CB_GETCURSEL, <br>                                              0, <br>                                              0); <br>                     <br>                    dwLine = (DWORD)SendDlgItemMessage(hWnd, <br>                                                       IDC_LINECOMBO, <br>                                                       CB_GETITEMDATA, <br>                                                       item, <br>                                                       0); <br> <br>                    dwAddress = (DWORD)SendDlgItemMessage(hWnd, <br>                                                          IDC_ADDRESSCOMBO, <br>                                                          CB_GETCURSEL, <br>                                                          0, <br>                                                          0); <br>                     <br>                    // create a structure <br>                    pGroup = AddGroup(szName, <br>                                      dwLine, <br>                                      dwAddress); <br> <br>                    if (!pGroup) <br>                    { <br>                        return 1; <br>                    } <br> <br>                    if (g.bGroupView) <br>                    { <br>                        // add it to the tree <br>                        AddItemToTree(g.hGroupParent, <br>                                      pGroup-&gt;lpszName, <br>                                      (LPARAM)pGroup, <br>                                      &amp;pGroup-&gt;hItem); <br>                    } <br> <br>                    EndDialog(hWnd, 1); <br>                    return 1; <br>                } <br> <br>                case IDCANCEL: <br>                { <br>                    EndDialog(hWnd, 0); <br>                    return 1; <br>                } <br> <br>                default: <br>                    return 0; <br> <br>            } <br> <br>    } <br> <br>    return 0; <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////////////////////////////////////// <br>// <br>//  AddAgentDlgProc - Window proc for the add agent/group dialog box <br>// <br>///////////////////////////////////////////////////////////////////////////////////////////////////// <br>BOOL CALLBACK AddAgentDlgProc(HWND   hWnd, <br>                              UINT   uMsg, <br>                              WPARAM wParam, <br>                              LPARAM lParam) <br>{ <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br> <br>            BuildLineList(GetDlgItem(hWnd, <br>                                     IDC_LINECOMBO), <br>                          0); <br> <br>            // set focus on first control <br>            SetFocus(GetDlgItem(hWnd, <br>                                IDC_NAME)); <br> <br>            return 0; <br> <br>        case WM_COMMAND: <br> <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDOK: <br>                { <br>                    TCHAR       szName[128]; <br>                    TCHAR       szNumber[128]; <br>                    PAGENT      pAgent; <br>                    DWORD       dwLine; <br>                    int         item; <br> <br>                    // get info <br>                    SendDlgItemMessage(hWnd, <br>                                       IDC_NAME, <br>                                       WM_GETTEXT, <br>                                       128, <br>                                       (LPARAM)szName); <br> <br>                    SendDlgItemMessage(hWnd, <br>                                       IDC_DESTADDRESS, <br>                                       WM_GETTEXT, <br>                                       128, <br>                                       (LPARAM)szNumber); <br> <br>                    item = SendDlgItemMessage(hWnd, <br>                                              IDC_LINECOMBO, <br>                                              CB_GETCURSEL, <br>                                              0, <br>                                              0); <br>                     <br>                    dwLine = (DWORD)SendDlgItemMessage(hWnd, <br>                                                       IDC_LINECOMBO, <br>                                                       CB_GETITEMDATA, <br>                                                       item, <br>                                                       0); <br> <br>                    // create a structure <br>                    pAgent = AddAgent(szName, <br>                                      szNumber, <br>                                      dwLine); <br> <br>                    if (!pAgent) <br>                    { <br>                        return 1; <br>                    } <br> <br> <br>                    if (!g.bGroupView) <br>                    { <br>                    // add it to the tree <br>                        AddItemToTree(g.hAgentParent, <br>                                      pAgent-&gt;lpszName, <br>                                      (LPARAM)pAgent, <br>                                      &amp;pAgent-&gt;hItem); <br>                    } <br> <br>                    EndDialog(hWnd, 1); <br>                    return 1; <br>                } <br> <br>                case IDCANCEL: <br>                { <br>                    EndDialog(hWnd, 0); <br>                    return 1; <br>                } <br> <br>                default: <br>                    return 0; <br> </code></pre>
<p>
</p>
<pre><code>} <br>    } <br>    return 0; <br>} <br> <br>////////////////////////////////////////////////////////////////////////////////// <br>// <br>//  ChangeGroupDlgProc - Window proc for the change (properties) dialog box <br>//     for agents/groups <br>// <br>////////////////////////////////////////////////////////////////////////////////// <br>BOOL CALLBACK ChangeGroupDlgProc(HWND   hWnd, <br>                                 UINT   uMsg, <br>                                 WPARAM wParam, <br>                                 LPARAM lParam) <br>{ <br>    static TV_ITEM      tvi; <br>     <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br> <br>            // set text appropriately <br>            SetWindowText(hWnd, <br>                          TEXT("Change Group")); <br> <br>            // get PGROUP and set edit controls <br>            tvi.mask    = TVIF_HANDLE | TVIF_PARAM; <br>            tvi.hItem   = g.hTreeItemWithMenu; <br> <br>            TreeView_GetItem(g.hTreeWnd, <br>                             &amp;tvi); <br> <br>            SendDlgItemMessage(hWnd, <br>                               IDC_NAME, <br>                               WM_SETTEXT, <br>                               0, <br>                               (LPARAM)((PGROUP)tvi.lParam)-&gt;lpszName); <br> <br>            BuildLineList(GetDlgItem(hWnd, <br>                                     IDC_LINECOMBO), <br>                          (((PGROUP)tvi.lParam)-&gt;dwDeviceID)); <br> <br>             <br>            BuildAddressList(GetDlgItem(hWnd, <br>                                        IDC_ADDRESSCOMBO), <br>                             hWnd, <br>                             (((PGROUP)tvi.lParam)-&gt;dwAddress)); <br> <br>            SetFocus(GetDlgItem(hWnd, <br>                                IDC_NAME)); <br> <br>            return 0; <br> <br>        case WM_COMMAND: <br> <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDC_LINECOMBO: <br>                { <br>                    if (HIWORD(wParam) == CBN_SELENDOK) <br>                    { <br>                        // need to redo addresses <br>                        BuildAddressList(GetDlgItem(hWnd, <br>                                                    IDC_ADDRESSCOMBO), <br>                                         hWnd, <br>                                         0); <br> <br>                        return 1; <br>                    } <br>                     <br>                    return 0; <br>                } <br>                case IDOK: <br>                { <br>                    TCHAR       szName[128]; <br>                    PGROUP      pGroup; <br> <br>                    // get info <br>                    SendDlgItemMessage(hWnd, <br>                                       IDC_NAME, <br>                                       WM_GETTEXT, <br>                                       128, <br>                                       (LPARAM)szName); <br> <br>                    // get struct <br>                    pGroup = (PGROUP)tvi.lParam; <br> <br>                    /// get device and address <br>                    pGroup-&gt;dwDeviceID = SendDlgItemMessage(hWnd, <br>                                            IDC_LINECOMBO, <br>                                            CB_GETCURSEL, <br>                                            0, <br>                                            0); <br> <br>                    pGroup-&gt;dwDeviceID = SendDlgItemMessage(hWnd, <br>                                                            IDC_LINECOMBO, <br>                                                            CB_GETITEMDATA, <br>                                                            (WPARAM)pGroup-&gt;dwDeviceID, <br>                                                            0); <br> <br>                    pGroup-&gt;dwAddress = SendDlgItemMessage(hWnd, <br>                                                           IDC_ADDRESSCOMBO, <br>                                                           CB_GETCURSEL, <br>                                                           0, <br>                                                           0); <br> <br>                    // save new info and free old info <br>                    ACDFree(pGroup-&gt;lpszName); <br>                    pGroup-&gt;lpszName = ACDAlloc((lstrlen(szName) + 1) * sizeof(TCHAR)); <br>                    lstrcpy(pGroup-&gt;lpszName, szName); <br> <br>                    // update item name <br>                    tvi.mask = TVIF_TEXT; <br>                    tvi.pszText = szName; <br>                    tvi.cchTextMax = lstrlen(szName) * sizeof(TCHAR); <br>                    TreeView_SetItem(g.hTreeWnd, <br>                                     &amp;tvi); <br>                     <br>                    EndDialog(hWnd, 1); <br>                    return 1; <br>                } <br> <br>                case IDCANCEL: <br>                { <br>                    EndDialog(hWnd, 0); <br>                    return 1; <br>                } <br> <br>                default: <br>                    return 0; <br> <br>            } <br>    } <br>    return 0; <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////////////////// <br>// <br>//  ChangeGroupDlgProc - Window proc for the change (properties) dialog box <br>//     for agents/groups <br>// <br>////////////////////////////////////////////////////////////////////////////////// <br>BOOL CALLBACK ChangeAgentDlgProc(HWND   hWnd, <br>                                 UINT   uMsg, <br>                                 WPARAM wParam, <br>                                 LPARAM lParam) <br>{ <br>    static TV_ITEM      tvi; <br>     <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br> <br>            // set text appropriately <br>            SetWindowText(hWnd, <br>                          TEXT("Change Agent")); <br> <br>            // get PGROUP and set edit controls <br>            tvi.mask    = TVIF_HANDLE | TVIF_PARAM; <br>            tvi.hItem   = g.hTreeItemWithMenu; <br> <br>            TreeView_GetItem(g.hTreeWnd, <br>                             &amp;tvi); <br> <br>            SendDlgItemMessage(hWnd, <br>                               IDC_NAME, <br>                               WM_SETTEXT, <br>                               0, <br>                               (LPARAM)((PAGENT)tvi.lParam)-&gt;lpszName); <br> <br>            SendDlgItemMessage(hWnd, <br>                               IDC_DESTADDRESS, <br>                               WM_SETTEXT, <br>                               0, <br>                               (LPARAM)((PAGENT)tvi.lParam)-&gt;lpszNumber); <br> <br>            BuildLineList(GetDlgItem(hWnd, <br>                                     IDC_LINECOMBO), <br>                          (((PAGENT)tvi.lParam)-&gt;dwDeviceID)); <br> <br>            SetFocus(GetDlgItem(hWnd, <br>                                IDC_NAME)); <br> <br>            return 0; <br> <br>        case WM_COMMAND: <br> <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDOK: <br>                { <br>                    TCHAR       szName[128]; <br>                    TCHAR       szNumber[128]; <br>                    PAGENT      pAgent; <br> <br>                    // get info <br>                    SendDlgItemMessage(hWnd, <br>                                       IDC_NAME, <br>                                       WM_GETTEXT, <br>                                       128, <br>                                       (LPARAM)szName); <br> <br>                    SendDlgItemMessage(hWnd, <br>                                       IDC_DESTADDRESS, <br>                                       WM_GETTEXT, <br>                                       128, <br>                                       (LPARAM)szNumber); <br> <br>                    // get struct <br>                    pAgent = (PAGENT)tvi.lParam; <br> <br>                    /// get device and address <br>                    pAgent-&gt;dwDeviceID = SendDlgItemMessage(hWnd, <br>                                            IDC_LINECOMBO, <br>                                            CB_GETCURSEL, <br>                                            0, <br>                                            0); <br> <br>                    pAgent-&gt;dwDeviceID = SendDlgItemMessage(hWnd, <br>                                                            IDC_LINECOMBO, <br>                                                            CB_GETITEMDATA, <br>                                                            (WPARAM)pAgent-&gt;dwDeviceID, <br>                                                            0); <br> <br>                    // save new info and free old info <br>                    ACDFree(pAgent-&gt;lpszName); <br>                    pAgent-&gt;lpszName = ACDAlloc((lstrlen(szName) + 1) * sizeof(TCHAR)); <br>                    lstrcpy(pAgent-&gt;lpszName, szName); <br> <br> <br>                    ACDFree(pAgent-&gt;lpszNumber); <br>                    pAgent-&gt;lpszNumber = ACDAlloc((lstrlen(szNumber) + 1) * sizeof(TCHAR)); <br>                    lstrcpy(pAgent-&gt;lpszNumber, szNumber); <br> <br>                    // update item name <br>                    tvi.mask = TVIF_TEXT; <br>                    tvi.pszText = szName; <br>                    tvi.cchTextMax = lstrlen(szName) * sizeof(TCHAR); <br>                    TreeView_SetItem(g.hTreeWnd, <br>                                     &amp;tvi); <br>                     <br>                    EndDialog(hWnd, 1); <br>                    return 1; <br>                } <br> <br>                case IDCANCEL: <br>                { <br>                    EndDialog(hWnd, 0); <br>                    return 1; <br>                } <br> <br>                default: <br>                    return 0; <br> <br>            } <br>    } <br>    return 0; <br>} <br> <br>////////////////////////////////////////////////////////////////////////////////////// <br>// <br>//  AddToList() - Window proc for Add Agent To Group and Add Group To Agent <br>//    dialog box <br>// <br>////////////////////////////////////////////////////////////////////////////////////// <br>BOOL CALLBACK GroupAddToListProc(HWND   hWnd, <br>                                 UINT   uMsg, <br>                                 WPARAM wParam, <br>                                 LPARAM lParam) <br>{ <br>    static PGROUP           pGroup; <br>    PAGENT                  pAgent; <br>    PLISTITEM               pList; <br>    TV_ITEM                 tvi; <br>    DWORD                   dwListBox; <br>    BOOL                    bFound; <br>    int                     item; <br>    TCHAR                   szBuffer[128]; <br>     <br>     <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br> <br>            // get the item in question <br>            tvi.mask    = TVIF_HANDLE | TVIF_PARAM; <br>            tvi.hItem   = g.hTreeItemWithMenu; <br> <br>            TreeView_GetItem(g.hTreeWnd, <br>                             &amp;tvi); <br> <br>            pGroup = (PGROUP)tvi.lParam; <br> <br>            // init lists <br>            if (pGroup) <br>            { <br>                // initialize text in dialog <br>                wsprintf(szBuffer, TEXT("Add To %s"), pGroup-&gt;lpszName); <br> <br>                SetWindowText(hWnd, <br>                              TEXT("Add To Group")); <br> <br>                SetDlgItemText(hWnd, <br>                               IDC_STATICNOTINLIST, <br>                               TEXT("Not in Group")); <br>                SetDlgItemText(hWnd, <br>                               IDC_STATICINLIST, <br>                               TEXT("Group Members")); <br> <br>                pAgent = g.pAgents; <br> <br>                // walk list and initialize list boxes <br>                while (pAgent) <br>                { <br>                    pList = pGroup-&gt;pAgentList; <br> <br>                    bFound = FALSE; <br>                 <br>                    while (pList) <br>                    { <br>                        if (pList-&gt;pAgent == pAgent) <br>                        { <br>                            bFound = TRUE; <br>                            break; <br>                        } <br> <br>                        pList = pList-&gt;pNext; <br>                    } <br> <br>                    // if it was found, it is already a member of <br>                    // the group <br>                    if (bFound) <br>                    { <br>                        dwListBox = IDC_LIST2; <br>                    } <br>                    else <br>                    { <br>                        dwListBox = IDC_LIST1; <br>                    } <br> <br>                    // add to correct list box <br>                    item = SendDlgItemMessage(hWnd, <br>                                              dwListBox, <br>                                              LB_ADDSTRING, <br>                                              0, <br>                                              (LPARAM)pAgent-&gt;lpszName); <br> <br>                    // set the item data to be the item so we can get back it. <br>                    if (item != LB_ERR) <br>                    { <br>                        SendDlgItemMessage(hWnd, <br>                                           dwListBox, <br>                                           LB_SETITEMDATA, <br>                                           (WPARAM)item, <br>                                           (LPARAM)pAgent); <br>                    } <br> <br>                    pAgent = pAgent-&gt;pNext; <br>                } <br>            } <br> <br>             <br>             <br>            return 1; <br> <br>        case WM_COMMAND: <br> <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDC_ADD: <br>                { <br>                    // get the item <br>                    item = SendDlgItemMessage(hWnd, <br>                                              IDC_LIST1, <br>                                              LB_GETCURSEL, <br>                                              0, <br>                                              0); <br> <br>                    if (item == 0) <br>                    { <br>                        if (!SendDlgItemMessage(hWnd, <br>                                                IDC_LIST1, <br>                                                LB_GETSEL, <br>                                                (WPARAM)item, <br>                                                0)) <br>                        { <br>                            item == -1; <br>                        } <br>                    } <br> <br>                    if (item != -1) <br>                    { <br>                        // get the PAGENT associated with it <br>                        pAgent = (PAGENT)SendDlgItemMessage(hWnd, <br>                                                            IDC_LIST1, <br>                                                            LB_GETITEMDATA, <br>                                                            (WPARAM)item, <br>                                                            0); <br> <br>                        // delete it from this listbox <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST1, <br>                                           LB_DELETESTRING, <br>                                           (WPARAM)item, <br>                                           0); <br> <br>                        // add it to this list box <br>                        item = SendDlgItemMessage(hWnd, <br>                                                  IDC_LIST2, <br>                                                  LB_ADDSTRING, <br>                                                  0, <br>                                                  (LPARAM)pAgent-&gt;lpszName); <br> <br>                        // set the item data again <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST2, <br>                                           LB_SETITEMDATA, <br>                                           item, <br>                                           (WPARAM)pAgent); <br> <br>                        // add it to the group's list <br>                        InsertIntoGroupList(pGroup, <br>                                            pAgent); <br>                         <br>                        return 1; <br>                         <br>                    } <br>                } <br>                break; <br>                 <br>                case IDC_REMOVE: <br>                { <br>                    // get the item <br>                    item = SendDlgItemMessage(hWnd, <br>                                              IDC_LIST2, <br>                                              LB_GETCURSEL, <br>                                              0, <br>                                              0); <br> <br>                    if (item == 0) <br>                    { <br>                        if (!SendDlgItemMessage(hWnd, <br>                                                IDC_LIST2, <br>                                                LB_GETSEL, <br>                                                (WPARAM)item, <br>                                                0)) <br>                        { <br>                            item == -1; <br>                        } <br>                    } <br> <br>                    if (item != -1) <br>                    { <br>                        // get the struct associated with it <br>                        pAgent = (PAGENT)SendDlgItemMessage(hWnd, <br>                                                                IDC_LIST2, <br>                                                                LB_GETITEMDATA, <br>                                                                (WPARAM)item, <br>                                                                0); <br> <br>                        // delete it from this list <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST2, <br>                                           LB_DELETESTRING, <br>                                           (WPARAM)item, <br>                                           0); <br> <br>                        // add it to this list <br>                        item = SendDlgItemMessage(hWnd, <br>                                                  IDC_LIST1, <br>                                                  LB_ADDSTRING, <br>                                                  0, <br>                                                  (LPARAM)pAgent-&gt;lpszName); <br> <br>                        // set the item data <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST1, <br>                                           LB_SETITEMDATA, <br>                                           item, <br>                                           (WPARAM)pAgent); <br> <br>                        // remove it from the lists <br>                        RemoveFromGroupList(pGroup, <br>                                            pAgent); <br>                         <br>                        return 1; <br>                         <br>                    } <br>                     <br>                } <br>                break; <br> <br> <br>                // bug idcancel doesn't cancel <br>                case IDOK: <br>                case IDCANCEL: <br>                { <br>                    UpdateGroupLeaf(pGroup); <br> <br>                    EndDialog(hWnd, 1); <br>                    return 1; <br>                } <br> <br>                default: <br>                    return 0; <br> <br>            } <br> <br>    } <br> <br>    return 0; <br>} <br> <br> <br>BOOL CALLBACK AgentAddToListProc(HWND   hWnd, <br>                                 UINT   uMsg, <br>                                 WPARAM wParam, <br>                                 LPARAM lParam) <br>{ <br>    static PAGENT           pAgent; <br>    PGROUP                  pGroup; <br>    PLISTITEM               pList; <br>    TV_ITEM                 tvi; <br>    DWORD                   dwListBox; <br>    BOOL                    bFound; <br>    int                     item; <br>    TCHAR                   szBuffer[128]; <br>     <br>     <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br> <br>            // get the item in question <br>            tvi.mask    = TVIF_HANDLE | TVIF_PARAM; <br>            tvi.hItem   = g.hTreeItemWithMenu; <br> <br>            TreeView_GetItem(g.hTreeWnd, <br>                             &amp;tvi); <br> <br>            pAgent = (PAGENT)tvi.lParam; <br> <br>            // init lists <br>            if (pAgent) <br>            { <br>                // initialize text in dialog <br>                wsprintf(szBuffer, TEXT("Add To %s"), pAgent-&gt;lpszName); <br> <br>                SetWindowText(hWnd, <br>                              TEXT("Add To Agent")); <br> <br>                SetDlgItemText(hWnd, <br>                               IDC_STATICNOTINLIST, <br>                               TEXT("Not Member Of")); <br>                SetDlgItemText(hWnd, <br>                               IDC_STATICINLIST, <br>                               TEXT("Member Of")); <br> <br>                pGroup = g.pGroups; <br> <br>                // walk list and initialize list boxes <br>                while (pGroup) <br>                { <br>                    pList = pGroup-&gt;pAgentList; <br> <br>                    bFound = FALSE; <br>                 <br>                    while (pList) <br>                    { <br>                        if (pList-&gt;pAgent == pAgent) <br>                        { <br>                            bFound = TRUE; <br>                            break; <br>                        } <br> <br>                        pList = pList-&gt;pNext; <br>                    } <br> <br>                    // if it was found, it is already a member of <br>                    // the group <br>                    if (bFound) <br>                    { <br>                        dwListBox = IDC_LIST2; <br>                    } <br>                    else <br>                    { <br>                        dwListBox = IDC_LIST1; <br>                    } <br> <br>                    // add to correct list box <br>                    item = SendDlgItemMessage(hWnd, <br>                                              dwListBox, <br>                                              LB_ADDSTRING, <br>                                              0, <br>                                              (LPARAM)pGroup-&gt;lpszName); <br> <br>                    // set the item data to be the item so we can get back it. <br>                    if (item != LB_ERR) <br>                    { <br>                        SendDlgItemMessage(hWnd, <br>                                           dwListBox, <br>                                           LB_SETITEMDATA, <br>                                           (WPARAM)item, <br>                                           (LPARAM)pGroup); <br>                    } <br> <br>                    pGroup = pGroup-&gt;pNext; <br>                } <br>            } <br> <br>             <br>             <br>            return 1; <br> <br>        case WM_COMMAND: <br> <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDC_ADD: <br>                { <br>                    // get the item <br>                    item = SendDlgItemMessage(hWnd, <br>                                              IDC_LIST1, <br>                                              LB_GETCURSEL, <br>                                              0, <br>                                              0); <br> <br>                    if (item == 0) <br>                    { <br>                        if (!SendDlgItemMessage(hWnd, <br>                                                IDC_LIST1, <br>                                                LB_GETSEL, <br>                                                (WPARAM)item, <br>                                                0)) <br>                        { <br>                            item == -1; <br>                        } <br>                    } <br> <br>                    if (item != -1) <br>                    { <br>                        // get the PGROUP associated with it <br>                        pGroup = (PGROUP)SendDlgItemMessage(hWnd, <br>                                                                IDC_LIST1, <br>                                                                LB_GETITEMDATA, <br>                                                                (WPARAM)item, <br>                                                                0); <br> <br>                        // delete it from this listbox <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST1, <br>                                           LB_DELETESTRING, <br>                                           (WPARAM)item, <br>                                           0); <br> <br>                        // add it to this list box <br>                        item = SendDlgItemMessage(hWnd, <br>                                                  IDC_LIST2, <br>                                                  LB_ADDSTRING, <br>                                                  0, <br>                                                  (LPARAM)pGroup-&gt;lpszName); <br> <br>                        // set the item data again <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST2, <br>                                           LB_SETITEMDATA, <br>                                           item, <br>                                           (WPARAM)pGroup); <br> <br>                        // add it to the item's list <br>                        InsertIntoGroupList(pGroup, <br>                                            pAgent); <br>                         <br>                        return 1; <br>                         <br>                    } <br>                } <br>                break; <br>                 <br>                case IDC_REMOVE: <br>                { <br>                    // get the item <br>                    item = SendDlgItemMessage(hWnd, <br>                                              IDC_LIST2, <br>                                              LB_GETCURSEL, <br>                                              0, <br>                                              0); <br> <br>                    if (item == 0) <br>                    { <br>                        if (!SendDlgItemMessage(hWnd, <br>                                                IDC_LIST2, <br>                                                LB_GETSEL, <br>                                                (WPARAM)item, <br>                                                0)) <br>                        { <br>                            item == -1; <br>                        } <br>                    } <br> <br>                    if (item != -1) <br>                    { <br>                        // get the struct associated with it <br>                        pGroup = (PGROUP)SendDlgItemMessage(hWnd, <br>                                                                IDC_LIST2, <br>                                                                LB_GETITEMDATA, <br>                                                                (WPARAM)item, <br>                                                                0); <br> <br>                        // delete it from this list <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST2, <br>                                           LB_DELETESTRING, <br>                                           (WPARAM)item, <br>                                           0); <br> <br>                        // add it to this list <br>                        item = SendDlgItemMessage(hWnd, <br>                                                  IDC_LIST1, <br>                                                  LB_ADDSTRING, <br>                                                  0, <br>                                                  (LPARAM)pGroup-&gt;lpszName); <br> <br>                        // set the item data <br>                        SendDlgItemMessage(hWnd, <br>                                           IDC_LIST1, <br>                                           LB_SETITEMDATA, <br>                                           item, <br>                                           (WPARAM)pGroup); <br> <br>                        // remove it from the lists <br>                        RemoveFromGroupList(pGroup, <br>                                            pAgent); <br>                         <br>                        return 1; <br>                         <br>                    } <br>                     <br>                } <br>                break; <br> <br> <br>                // bug idcancel doesn't cancel <br>                case IDOK: <br>                case IDCANCEL: <br>                { <br>                    EndDialog(hWnd, 1); <br>                    return 1; <br>                } <br> <br>                default: <br>                    return 0; <br>            } <br>    } <br>    return 0; <br>} <br> <br>////////////////////////////////////////////////////////////// <br>// <br>//  BOOL DeleteLeafAndStruct(HTREEITEM hItem) <br>//    delete hItem from the tree and deleted associated <br>//    structure <br>// <br>////////////////////////////////////////////////////////////// <br>BOOL DeleteLeafAndStruct(HTREEITEM hItem) <br>{ <br>    TV_ITEM     tvi; <br> <br>    // get the item <br>    tvi.mask = TVIF_PARAM; <br>    tvi.hItem = hItem; <br> <br>    TreeView_GetItem(g.hTreeWnd, <br>                     &amp;tvi); <br> <br>    // delete the structure <br>    if (((PGENERICSTRUCT)tvi.lParam)-&gt;dwKey == GROUPKEY) <br>    { <br>        DeleteGroup((PGROUP)tvi.lParam); <br>    } <br>    else <br>    { <br>        DeleteAgent((PAGENT)tvi.lParam); <br>    } <br> <br>    // remove it from the tree <br>    TreeView_DeleteItem(g.hTreeWnd, <br>                        hItem); <br> <br>    return TRUE; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL BuildLineList(HWND hWnd, <br>//                     DWORD dwDeviceID) <br>// <br>//  Fill in ComboBox with names of all available TAPI <br>//  devices <br>// <br>//////////////////////////////////////////////////////////////////// <br>BOOL BuildLineList(HWND hWnd, <br>                   DWORD dwDeviceID) <br>{ <br>    DWORD               dwDev; <br>    LPLINEDEVCAPS       pLineDevCaps; <br>    int                 item; <br>    BOOL                bSet = FALSE; <br> <br>    // clear dropdown box <br>    SendMessage(hWnd, <br>                CB_RESETCONTENT, <br>                0, <br>                0); <br> <br>    // loop through all devices <br>    for (dwDev = 0; dwDev &lt; g.dwNumDevs; dwDev++) <br>    { <br>        pLineDevCaps = LineGetDevCaps(g.hLineApp, <br>                                      dwDev); <br> <br>        // add the string to to list <br>        if (pLineDevCaps == NULL || pLineDevCaps-&gt;dwLineNameSize == 0) <br>        { <br>            item = SendMessage(hWnd, <br>                               CB_ADDSTRING, </code></pre>
<p>
</p>
<pre><code>0, <br>                               (LPARAM)TEXT("NoName")); <br>        } <br>        else <br>        { <br>            item = SendMessage(hWnd, <br>                               CB_ADDSTRING, <br>                               0, <br>                               (LPARAM)((LPTSTR)((LPBYTE)pLineDevCaps + pLineDevCaps-&gt;dwLineNameOffset))); <br>        } <br> <br>        // save the device ID <br>        SendMessage(hWnd, <br>                    CB_SETITEMDATA, <br>                    item, <br>                    dwDev); <br> <br>        // if this is the device we are looking for <br>        // set it to be selected <br>        if (dwDev == dwDeviceID) <br>        { <br>            SendMessage(hWnd, <br>                        CB_SETCURSEL, <br>                        (WPARAM)item, <br>                        0); <br> <br>            bSet = TRUE; <br>        } <br>         <br>        if (pLineDevCaps != NULL) <br>        { <br>            ACDFree((HLOCAL)pLineDevCaps); <br>        } <br>    } <br> <br>    // if we didn't set the selection, default <br>    if (!bSet) <br>    { <br>        SendMessage(hWnd, <br>                    CB_SETCURSEL, <br>                    0, <br>                    0); <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL BuildAddressList() <br>// <br>//  Fill combo box with list of addresses on selected device ID <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL BuildAddressList(HWND hWnd, <br>                      HWND hParentWnd, <br>                      DWORD dwAddress) <br>{ <br>    TCHAR               szBuffer[32]; <br>    LPLINEDEVCAPS       pLineDevCaps; <br>    LPLINEADDRESSCAPS   pLineAddressCaps; <br>    DWORD               dwCurAddress, dwDeviceID; <br>    int                 iCurSel; <br> <br>    // clear box <br>    SendMessage(hWnd, <br>                CB_RESETCONTENT, <br>                0, <br>                0); <br> <br>    // get the current selected device <br>    iCurSel = SendDlgItemMessage(hParentWnd, <br>                                 IDC_LINECOMBO, <br>                                 CB_GETCURSEL, <br>                                 0, <br>                                 0); <br> <br>    // get associated deviceid <br>    dwDeviceID = (DWORD)SendDlgItemMessage(hParentWnd, <br>                                           IDC_LINECOMBO, <br>                                           CB_GETITEMDATA, <br>                                           (WPARAM)iCurSel, <br>                                           0); <br>     <br>    pLineDevCaps = LineGetDevCaps(g.hLineApp, <br>                                  dwDeviceID); <br> <br>    // loop through all addresses <br>    for (dwCurAddress = 0; dwCurAddress &lt; pLineDevCaps-&gt;dwNumAddresses; dwCurAddress++) <br>    { <br>        pLineAddressCaps = LineGetAddressCaps(g.hLineApp, <br>                                              dwDeviceID, <br>                                              dwCurAddress); <br> <br>        // add name to list box <br>        if (pLineAddressCaps == NULL || pLineAddressCaps-&gt;dwAddressSize == 0) <br>        { <br>            wsprintf(szBuffer, TEXT("Address %d"), dwCurAddress); <br>             <br>            SendMessage(hWnd, <br>                        CB_ADDSTRING, <br>                        0, <br>                        (LPARAM)szBuffer); <br>        } <br>        else <br>        { <br>            SendMessage(hWnd, <br>                        CB_ADDSTRING, <br>                        0, <br>                        (LPARAM)((LPTSTR)((LPBYTE)pLineAddressCaps + pLineAddressCaps-&gt;dwAddressOffset))); <br>        } <br>         <br>        ACDFree((HLOCAL)pLineAddressCaps); <br>    } <br> <br>    SendMessage(hWnd, <br>                CB_SETCURSEL, <br>                (WPARAM)dwAddress, <br>                0); <br> <br>    ACDFree(pLineDevCaps); <br>     <br>    return TRUE; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL UpdateGroupLeaf(PGROUP pStruct) <br>// <br>//  Updates a group in the tree view when a new agent is added to that <br>//  group <br>// <br>/////////////////////////////////////////////////////////////////////////// <br>BOOL UpdateGroupLeaf(PGROUP pStruct) <br>{ <br>    HTREEITEM   hItem; <br>    PLISTITEM   pItem; <br>    TV_ITEM     tvi; <br> <br>    // get the item's first child <br>    hItem = TreeView_GetChild(g.hTreeWnd, <br>                              pStruct-&gt;hItem); <br> <br>     <br>    while (hItem) <br>    { <br>        // delete all childre <br>        TreeView_DeleteItem(g.hTreeWnd, <br>                            hItem); <br>        hItem = TreeView_GetChild(g.hTreeWnd, <br>                                  pStruct-&gt;hItem); <br>     <br>    } <br> <br>    pItem = pStruct-&gt;pAgentList; <br> <br>    // walk the agent list <br>    while (pItem) <br>    { <br>        // add all the agents <br>        hItem = AddItemToTree(pStruct-&gt;hItem, <br>                              ((PAGENT)pItem-&gt;pAgent)-&gt;lpszName, <br>                              (LPARAM)NULL, <br>                              (HTREEITEM *)NULL); <br> <br> <br>        // if currently logged into that group <br>        /// bold that item <br>        if (pItem-&gt;bLoggedIn) <br>        { <br>            tvi.mask = TVIF_STATE | TVIF_HANDLE; <br>            tvi.hItem = hItem; <br>            tvi.state = TVIS_BOLD; <br>            tvi.stateMask = TVIS_BOLD; <br> <br>            TreeView_SetItem(g.hTreeWnd, <br>                             &amp;tvi); <br>        } <br>  <br>        pItem = pItem-&gt;pNext; <br>    } <br> <br>     <br>    return TRUE; <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL DoGroupView() <br>// <br>//  Display the tree in a "group view" (show groups, and under the <br>//  group, the agents that can log into that group) <br>// <br>/////////////////////////////////////////////////////////////////////// <br>BOOL DoGroupView() <br>{ <br>    PGROUP      pGroupParent, pGroup; <br>    TCHAR       szGroupParentName[] = TEXT("Groups"); <br>    HTREEITEM   hItem; <br>    TV_ITEM     tvi; <br> <br>    g.bGroupView = TRUE; <br> <br>    // get the root <br>    hItem = TreeView_GetRoot(g.hTreeWnd); <br> <br>    // free resources allocated for root <br>    if (hItem) <br>    { <br>        tvi.mask = TVIF_PARAM | TVIF_HANDLE; <br>        tvi.hItem = hItem; <br>        TreeView_GetItem(g.hTreeWnd, <br>                         &amp;tvi); <br> <br>        ACDFree((PAGENT)tvi.lParam); <br>    } <br> <br>    // clear tree <br>    TreeView_DeleteAllItems(g.hTreeWnd); <br> <br>    // alloc memory for the structure for the Group parent <br>    pGroupParent = (PGROUP)ACDAlloc(sizeof(GROUP)); <br> <br>    // alloc memory and copy the fixed name <br>    pGroupParent-&gt;lpszName = (LPTSTR)ACDAlloc((lstrlen(szGroupParentName) + 1) * sizeof(TCHAR)); <br>    pGroupParent-&gt;dwKey = GROUPROOTKEY; <br>     <br>    lstrcpy(pGroupParent-&gt;lpszName, szGroupParentName); <br> <br>    // add it to the tree <br>    g.hGroupParent = AddItemToTree(TVI_ROOT, <br>                                   pGroupParent-&gt;lpszName, <br>                                   (LPARAM)pGroupParent, <br>                                   &amp;pGroupParent-&gt;hItem); <br> <br>    pGroup = g.pGroups; <br> <br>    // walk groups and add them to tree <br>    while (pGroup) <br>    { <br>        AddItemToTree(g.hGroupParent, <br>                      pGroup-&gt;lpszName, <br>                      (LPARAM)pGroup, <br>                      &amp;pGroup-&gt;hItem); <br> <br>        UpdateGroupLeaf(pGroup); <br> <br>        pGroup = pGroup-&gt;pNext; <br>    } <br>     <br>    return TRUE; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL DoAgentView() <br>// <br>//  Displays the tree in an "agent view" <br>// <br>//////////////////////////////////////////////////////////////////// <br>BOOL DoAgentView() <br>{ <br>    PAGENT      pAgentParent,pAgent; <br>    TCHAR       szAgentParentName[] = TEXT("Agents"); <br>    HTREEITEM   hItem; <br>    TV_ITEM     tvi; <br> <br>    g.bGroupView = TRUE; <br> <br>    // get root, free resources <br>    // and clear tree <br>    hItem = TreeView_GetRoot(g.hTreeWnd); <br> <br>    if (hItem) <br>    { <br>        tvi.mask = TVIF_PARAM | TVIF_HANDLE; <br>        tvi.hItem = hItem; <br>        TreeView_GetItem(g.hTreeWnd, <br>                         &amp;tvi); <br> <br>        ACDFree((PGROUP)tvi.lParam); <br>    } <br>     <br>    TreeView_DeleteAllItems(g.hTreeWnd); <br> <br>    // alloc memory for the structure for the Agent parent <br>    pAgentParent = (PAGENT)ACDAlloc(sizeof(AGENT)); <br> <br>    // alloc memory and copy the fixed name <br>    pAgentParent-&gt;lpszName = (LPTSTR)ACDAlloc((lstrlen(szAgentParentName) + 1) * sizeof(TCHAR)); <br>    pAgentParent-&gt;dwKey = GROUPROOTKEY; <br>     <br>    lstrcpy(pAgentParent-&gt;lpszName, szAgentParentName); <br> <br>    // add it to the tree <br>    g.hAgentParent = AddItemToTree(TVI_ROOT, <br>                                   pAgentParent-&gt;lpszName, <br>                                   (LPARAM)pAgentParent, <br>                                   &amp;pAgentParent-&gt;hItem); <br> <br>    pAgent = g.pAgents; <br> <br>    // walk agents and add all of them <br>    while (pAgent) <br>    { <br>        AddItemToTree(g.hAgentParent, <br>                      pAgent-&gt;lpszName, <br>                      (LPARAM)pAgent, <br>                      &amp;pAgent-&gt;hItem); <br> <br>        pAgent = pAgent-&gt;pNext; <br>    } <br>     <br>    return TRUE; <br>} <br> <br>////////////////////////////////////////////////////////////////////////////////////// <br>// <br>// FOLLOWING ARE ROUTINES TO SAVE AND RESTORE GROUP / AGENT INFORMATION <br>// <br>// An INI file has been used for this implementation. <br>// <br>// This format is used to make it easy for users to create an INI file that can be <br>// read in <br>// <br>// However, a real implementation <br>// may want to use the registry, or a private data file to store more detailed and/or <br>// secure information <br>// <br>// <br> <br>#define SZGROUPS        TEXT("Groups") <br>#define SZAGENTS        TEXT("Agents") <br>#define SZGROUP         TEXT("GROUP") <br>#define SZAGENT         TEXT("AGENT") <br>#define SZINIFILE       TEXT("ACDSMPL.INI") <br>#define SZGENERAL       TEXT("General") <br>#define SZNUMAGENTS     TEXT("NumAgents") <br>#define SZNUMGROUPS     TEXT("NumGroups") <br> <br>////////////////////////////////////////////////////////////////////////////// <br>// <br>//  void MakeAgentIndex(PAGENT * ppAgents) <br>// <br>//  creates an array of pagents <br>// <br>////////////////////////////////////////////////////////////////////////////// <br>void MakeAgentIndex(PAGENT * ppAgents) <br>{ <br>    PAGENT pAgent; <br> <br>    pAgent = g.pAgents; <br>     <br>    while (pAgent) <br>    { <br>        *ppAgents = pAgent; <br>        pAgent = pAgent-&gt;pNext; <br>        ppAgents++; <br>    } <br>                 <br>} <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// int GetAgentIndex() <br>// <br>// retreives agent index <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>int GetAgentIndex(PAGENT * ppAgents, <br>                  PAGENT pAgent) <br>{ <br>    DWORD   dwCount; <br> <br>    for (dwCount = 0; dwCount &lt; g.dwNumAgents; dwCount++) <br>    { <br>        if (ppAgents[dwCount] == pAgent) <br>        { <br>            return dwCount; <br>        } <br>    } <br> <br>    return -1; <br> <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL WriteToDisk() <br>// <br>//  save current group/agent config to acdsmpl.ini <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL WriteToDisk() <br>{ <br>    int         i; <br>    PGROUP      pGroup; <br>    PAGENT      pAgent; <br>    PLISTITEM   pEntry; <br>    TCHAR       szGroupName[32], szAgentName[32], szLineBuffer[512]; <br>    PAGENT *    ppAgents; <br> <br>    // create an index of agents <br>    ppAgents = (PAGENT *)ACDAlloc(sizeof(PAGENT) * g.dwNumAgents); <br>    MakeAgentIndex(ppAgents); <br>     <br>    pGroup = g.pGroups; <br> <br>    i = 0; <br> <br>    // walk groups <br>    while (pGroup) <br>    { <br>        wsprintf(szGroupName, <br>                 TEXT("%s%d"), <br>                 SZGROUP, <br>                 i); <br> <br>        wsprintf(szLineBuffer, <br>                 TEXT("%s,%d,%d"), <br>                 pGroup-&gt;lpszName, <br>                 g.pdwPermIDs[pGroup-&gt;dwDeviceID], <br>                 pGroup-&gt;dwAddress); <br> <br>        // add group to [groups] section <br>        WritePrivateProfileString(SZGROUPS, <br>                                  szGroupName, <br>                                  szLineBuffer, <br>                                  SZINIFILE); <br> <br>        pEntry = pGroup-&gt;pAgentList; <br> <br>        // walk agents in group <br>        while (pEntry) <br>        { <br>            wsprintf(szAgentName, <br>                     TEXT("%s%d"), <br>                     SZAGENT, <br>                     GetAgentIndex(ppAgents, <br>                                   pEntry-&gt;pAgent)); <br> <br>            // write agent index to [groupx] section <br>            WritePrivateProfileString(szGroupName, <br>                                      szAgentName, <br>                                      TEXT("1"), <br>                                      SZINIFILE); <br> <br>            pEntry = pEntry-&gt;pNext; <br>        } <br> <br>        pGroup = pGroup-&gt;pNext; <br> <br>        i++; <br>    } <br> <br>    pAgent = g.pAgents; <br> <br>    i = 0; <br> <br>    //walk agents <br>    while (pAgent) <br>    { <br>        wsprintf(szAgentName, <br>                 TEXT("%s%d"), <br>                 SZAGENT, <br>                 i); <br> <br>        wsprintf(szLineBuffer, <br>                 TEXT("%s,%s,%lu"), <br>                 pAgent-&gt;lpszName, <br>                 pAgent-&gt;lpszNumber, <br>                 g.pdwPermIDs[pAgent-&gt;dwDeviceID]); <br> <br>        // write agent to [agents] section <br>        WritePrivateProfileString(SZAGENTS, <br>                                  szAgentName, <br>                                  szLineBuffer, <br>                                  SZINIFILE); <br> <br>        pAgent = pAgent-&gt;pNext; <br> <br>        i++; <br>                  <br>    } <br> <br>    // save # of agents and groups <br>    wsprintf(szLineBuffer, <br>             TEXT("%lu"), <br>             g.dwNumGroups); <br>     <br>    WritePrivateProfileString(SZGENERAL, <br>                              SZNUMGROUPS, <br>                              szLineBuffer, <br>                              SZINIFILE); <br>     <br>    wsprintf(szLineBuffer, <br>             TEXT("%lu"), <br>             g.dwNumAgents); <br> <br>    WritePrivateProfileString(SZGENERAL, <br>                              SZNUMAGENTS, <br>                              szLineBuffer, <br>                              SZINIFILE); <br> <br>    ACDFree(ppAgents); <br>     <br>    return TRUE; <br>} <br> <br> <br>//////////////////////////////////////////////////////////////////////////////////// <br>// <br>//  BOOL ReadInFile() <br>// <br>//   Read in ACDSMPL.INI <br>// <br>//////////////////////////////////////////////////////////////////////////////////// <br>BOOL ReadInFile() <br>{ <br>    TCHAR       szAgentLabel[32], <br>                szGroupLabel[32]; <br>    DWORD       dwID, dwAddress, dwNumAgents, dwNumGroups; <br>    DWORD       dwCount, dwCount2; <br>    PAGENT *    ppAgents = NULL; <br>    LPTSTR      lpszName, lpszNumber, lpszDeviceID; <br>    LPTSTR      lpszHold, szLineBuffer = NULL; <br>    PGROUP      pGroup; <br>     <br>    dwNumAgents = GetPrivateProfileInt(SZGENERAL, <br>                                         SZNUMAGENTS, <br>                                         0, <br>                                         SZINIFILE); <br> <br>    dwNumGroups = GetPrivateProfileInt(SZGENERAL, <br>                                         SZNUMGROUPS, <br>                                         0, <br>                                         SZINIFILE); <br> <br>    ppAgents = (PAGENT *)ACDAlloc(sizeof(PAGENT) * dwNumAgents); <br>    szLineBuffer = (LPTSTR)ACDAlloc(512 * sizeof(WCHAR)); <br> <br>    if (!ppAgents || !szLineBuffer) <br>    { <br>        ACDFree(ppAgents); <br>        ACDFree(szLineBuffer); <br>        return FALSE; <br>    } <br> <br>    lpszHold = szLineBuffer; <br> <br>    for (dwCount = 0; dwCount &lt; dwNumAgents; dwCount++) <br>    { <br>        wsprintf(szAgentLabel, <br>                 TEXT("%s%lu"), <br>                 SZAGENT, <br>                 dwCount); <br> <br>        GetPrivateProfileString(SZAGENTS, <br>                                szAgentLabel, <br>                                TEXT(""), <br>                                szLineBuffer, <br>                                512, <br>                                SZINIFILE); <br> <br>        lpszName = (LPTSTR)szLineBuffer; <br>         <br>        while (szLineBuffer &amp;&amp; *szLineBuffer) <br>        { <br>            if (*szLineBuffer == TEXT(',')) <br>            { <br>                *szLineBuffer = TEXT('\0'); <br>                szLineBuffer++; <br>                break; <br>            } <br> <br>            szLineBuffer++; <br>        } <br> <br>        lpszNumber = (LPTSTR)szLineBuffer; <br>         <br>        while (szLineBuffer &amp;&amp; *szLineBuffer) <br>        { <br>            if (*szLineBuffer == TEXT(',')) <br>            { <br>                *szLineBuffer = TEXT('\0'); <br>                szLineBuffer++; <br>                dwID = _wtol(szLineBuffer); <br>                dwID = GetDeviceID(dwID); <br>                 <br>                ppAgents[dwCount] = AddAgent(lpszName, <br>                                             lpszNumber, <br>                                             dwID); <br> <br>                break; <br>            } <br> <br>            szLineBuffer++; <br>        } <br> <br>    } <br> <br>    for (dwCount = 0; dwCount &lt; dwNumGroups; dwCount++) <br>    { <br>        wsprintf(szGroupLabel, <br>                 TEXT("%s%lu"), <br>                 SZGROUP, <br>                 dwCount); <br> <br>        GetPrivateProfileString(SZGROUPS, <br>                                szGroupLabel, <br>                                TEXT(""), <br>                                szLineBuffer, <br>                                512, <br>                                SZINIFILE); <br> <br>        lpszName = (LPTSTR)szLineBuffer; <br> <br>        while (szLineBuffer &amp;&amp; *szLineBuffer) <br>        { <br>            if (*szLineBuffer == TEXT(',')) <br>            { <br>                *szLineBuffer = TEXT('\0'); <br>                szLineBuffer++; <br>                lpszDeviceID = szLineBuffer; <br>                break; <br>            } <br> <br>            szLineBuffer++; <br>        } <br> <br>        while (szLineBuffer &amp;&amp; *szLineBuffer) <br>        { <br>            if (*szLineBuffer == TEXT(',')) <br>            { <br>                *szLineBuffer = TEXT('\0'); <br>                szLineBuffer++; <br> <br>                dwAddress = _wtol(szLineBuffer); <br> <br>                break; <br>            } <br> <br>            szLineBuffer++; <br>        } <br> <br>        dwID = _wtol(lpszDeviceID); <br>        dwID = GetDeviceID(dwID); <br> <br> <br>        pGroup = AddGroup(lpszName, <br>                          dwID, <br>                          dwAddress); <br> <br>        if (!pGroup) <br>        { <br>            continue; <br>        } <br>         <br>        for (dwCount2 = 0; dwCount2 &lt; dwNumAgents; dwCount2++) <br>        { <br>            wsprintf(szAgentLabel, <br>                     TEXT("%s%lu"), <br>                     SZAGENT, <br>                     dwCount2); <br>             <br>            if (GetPrivateProfileString(szGroupLabel, <br>                                        szAgentLabel, <br>                                        TEXT(""), <br>                                        szLineBuffer, <br>                                        512, <br>                                        SZINIFILE) != 0) <br>            { <br>                InsertIntoGroupList(pGroup, <br>                                    ppAgents[dwCount2]); <br>            } <br>             <br>        }  // for dwcount2 <br> <br>    }  // for dwcount <br> <br>    ACDFree(ppAgents); <br>    ACDFree(lpszHold); <br> <br>    DoGroupView(); <br>     <br>    return TRUE; <br>} <br> <br> <br>           </code></pre>
<p>&nbsp;</p></body>
</HTML>

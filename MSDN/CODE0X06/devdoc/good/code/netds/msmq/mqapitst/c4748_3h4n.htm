<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAINFRM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4757"></a>MAINFRM.H</h2>
<pre><code>// MainFrm.h : interface of the CMainFrame class <br>// <br>///////////////////////////////////////////////////////////////////////////// <br> <br> <br>class CMainFrame : public CFrameWnd <br>{ <br>protected: // create from serialization only <br>CMainFrame(); <br>DECLARE_DYNCREATE(CMainFrame) <br> <br>// Attributes <br>public: <br> <br>// Operations <br>public: <br> <br>// Overrides <br>// ClassWizard generated virtual function overrides <br>//{{AFX_VIRTUAL(CMainFrame) <br>virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs); <br>//}}AFX_VIRTUAL <br> <br>// Implementation <br>public: <br>virtual ~CMainFrame(); <br>#ifdef _DEBUG <br>virtual void AssertValid() const; <br>virtual void Dump(CDumpContext&amp; dc) const; <br>#endif <br> <br>protected:  // control bar embedded members <br>CStatusBar  m_wndStatusBar; <br>CToolBar    m_wndToolBar; <br> <br>// Generated message map functions <br>protected: <br>//{{AFX_MSG(CMainFrame) <br>afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct); <br>afx_msg void OnApiCreateQueue(); <br>afx_msg void OnApiDeleteQueue(); <br>afx_msg void OnApiOpenQueue(); <br>afx_msg void OnApiCloseQueue(); <br>afx_msg void OnApiSendMessage(); <br>afx_msg void OnApiReceiveMessage(); <br>afx_msg void OnApiLocate(); <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br> <br>protected: <br> <br>    void OnUpdateFrameTitle(BOOL bAddToTitle); <br> <br>protected: <br>// <br>// An array to hold the pathnames of the queues that were created so far. <br>// <br> <br>    // <br>    // Holds information about all "located" queues <br>    // <br>CArray&lt;ARRAYQ*, ARRAYQ*&gt; m_PathNameArray; <br> <br>    // <br>    // Holds information about all "opened" queues <br>    // <br>CArray&lt;ARRAYQ*, ARRAYQ*&gt; m_OpenedQueuePathNameArray; <br> <br>public: <br> <br>// <br>// Utility function to display status string based on received msg Class property <br>// <br>void ClassToString(unsigned short MsgClass,LPTSTR pszStatus); <br> <br> <br> <br>// <br>// functions to manipulate the path names array. <br>// <br> <br>    // <br>    // Adds a given ARRAYQ pointer to the PathName array. <br>    // <br>void Add2PathNameArray(ARRAYQ* NewPath) {m_PathNameArray.Add(NewPath);} <br>    // <br>    // Removes an ARRAYQ pointer whose pathname matches <br>    // the given pathname form the PathName array. <br>    // <br>ARRAYQ* RemoveFromPathNameArray(TCHAR szPathName[MAX_Q_PATHNAME_LEN]); <br>    // <br>    // Empties the PathName array and frees all allocated memory. <br>    // <br>void CleanPathNameArray(); <br>    // <br>    // Looks for an ARRAYQ pointer whose pathname matches the given one, <br>    // and returns the formatname of that ARRAYQ. <br>    // <br>    BOOL TranslatePathNameToFormatName(TCHAR szPathName[MAX_Q_PATHNAME_LEN], <br>                                       TCHAR szFormatName[MAX_Q_FORMATNAME_LEN]); <br>    // <br>    // Prints to screen the pathname of all ARRAYQ's in the PathName array. <br>    // <br>    void DisplayPathNameArray(); <br> <br>// <br>// functions to manipulate the opened queues path name array. <br>// <br> <br>    // <br>    // Adds a given ARRAYQ pointer to the Opened Queue PathName array. <br>    // <br>    void Add2OpenedQueuePathNameArray(ARRAYQ* NewPath) <br>{m_OpenedQueuePathNameArray.Add(NewPath);} <br>    // <br>    // Removes an ARRAYQ pointer whose pathname matches <br>    // the given pathname form the Opened Queue PathName array. <br>    // <br>ARRAYQ* RemoveFromOpenedQueuePathNameArray(TCHAR szPathName[MAX_Q_PATHNAME_LEN]); <br>    // <br>    // Checks if the Opened Queue PathName array is Empty. <br>    // <br>BOOL IsOpenedQueueArrayEmpty(); <br>    // <br>    // Looks for an ARRAYQ pointer whose pathname matches the given one, <br>    // and returns the formatname of that ARRAYQ. <br>    // <br>    BOOL TranslateOpenedQueuePathNameToFormatName( <br>                                           TCHAR szPathName[MAX_Q_PATHNAME_LEN], <br>                                           TCHAR szFormatName[MAX_Q_FORMATNAME_LEN]); <br>    // <br>    // Looks for an ARRAYQ pointer whose pathname matches the given one, <br>    // and returns the Queue Handle of that ARRAYQ. <br>    // <br>BOOL GetQueueHandle(TCHAR szPathName[MAX_Q_PATHNAME_LEN], <br> QUEUEHANDLE* phClosedQueueHandle); <br>    // <br>    // Prints to screen the pathname of all ARRAYQ's in the PathName array. <br>    // <br>    void DisplayOpenedQueuePathNameArray(); <br> <br> <br>// <br>// functions to manipulate both of the queues. <br>// <br> <br>    // <br>    // Moves an ARRAYQ pointer from the PathName array to the Opened Queue PathName array. <br>    // <br>    void MoveToOpenedQueuePathNameArray(TCHAR szPathName[MAX_Q_PATHNAME_LEN], <br>                                           QUEUEHANDLE hQueue, DWORD dwAccess); <br>    // <br>    // Moves an ARRAYQ pointer from the Opened Queue PathName array array to the PathName. <br>    // <br>void MoveToPathNameArray(TCHAR szPathName[MAX_Q_PATHNAME_LEN]); <br>    // <br>    // Looks for ARRAYQ's that are found in both arrays <br>    // and removes them from the PathName array. <br>    // <br>    void UpdatePathNameArrays(); <br> <br>}; <br> <br>extern "C" void  PrintToScreen(const TCHAR * Format, ...); <br>extern CWnd* pMainView; <br> <br>///////////////////////////////////////////////////////////////////////////// </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SENDMDLG.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4768"></a>SENDMDLG.H</h2>
<pre><code>// SendMDlg.h : header file <br>// <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CSendMessageDialog dialog <br> <br>class CSendMessageDialog : public CDialog <br>{ <br>// Construction <br>public: <br>CSendMessageDialog(CArray &lt;ARRAYQ*, ARRAYQ*&gt;*, CWnd* pParent = NULL);   // standard constructor <br> <br>// Dialog Data <br>//{{AFX_DATA(CSendMessageDialog) <br>enum { IDD = IDD_SEND_MESSAGE_DIALOG }; <br>CComboBoxm_AdminPathNameCB; <br>CComboBoxm_PathNameCB; <br>CStringm_strBody; <br>CStringm_strLabel; <br>BYTEm_bPriority; <br>intm_iAck; <br>intm_iDelivery; <br>CStringm_szPathName; <br>CStringm_szAdminPathName; <br>BOOLm_Journal; <br>BOOLm_DeadLetter; <br>BOOL    m_Authenticated; <br>BOOL    m_Encrypted; <br>longm_dwTimeToReachQueue; <br>long    m_dwTimeToBeReceived; <br>//}}AFX_DATA <br> <br>/* pointer to the array with the strings for the combo box (Queues PathName). */ <br>CArray &lt;ARRAYQ*, ARRAYQ*&gt;* m_pStrArray ; <br> <br>// Overrides <br>// ClassWizard generated virtual function overrides <br>//{{AFX_VIRTUAL(CSendMessageDialog) <br>protected: <br>virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support <br>//}}AFX_VIRTUAL <br> <br>// Implementation <br>protected: <br> <br>// Generated message map functions <br>//{{AFX_MSG(CSendMessageDialog) <br>virtual BOOL OnInitDialog(); <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br> <br>public: <br>// BUGBUG - set the 256 to BUFFERSIZE definition <br>void GetPathName(TCHAR szPathName[256]) <br>{ <br>_tcscpy (szPathName, m_szPathName); <br>} <br> <br>// BUGBUG - set the 256 to BUFFERSIZE definition <br>void GetAdminPathName(TCHAR szAdminPathName[256]) <br>{ <br>_tcscpy (szAdminPathName, m_szAdminPathName); <br>} <br> <br>unsigned char GetDelivery() <br>{ <br>return (m_iDelivery); <br>} <br> <br>    unsigned char GetJournal() <br>{ <br>return (m_Journal); <br>} <br> <br>    unsigned char GetDeadLetter() <br>{ <br>return (m_DeadLetter); <br>} <br> <br>unsigned char GetAuthenticated() <br>{ <br>return (m_Authenticated); <br>} <br> <br>unsigned char GetEncrypted() <br>{ <br>return (m_Encrypted); <br>} <br> <br>unsigned char GetPriority() <br>{ <br>return (m_bPriority); <br>} <br> <br>unsigned char GetAcknowledge() <br>{ <br>switch (m_iAck) <br>{ <br>case 1 : return MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE; <br>case 2 : return MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE; <br>case 3 : return MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE; <br>case 4 : return MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE; <br>default: return MQMSG_ACKNOWLEDGMENT_NONE; <br>} <br>} <br> <br>void GetMessageBody(TCHAR* pszMessageBodyBuffer) <br>{ <br>_tcsncpy (pszMessageBodyBuffer, m_strBody, BUFFERSIZE); <br>} <br> <br>void GetMessageLabel(TCHAR szMessageLabelBuffer[BUFFERSIZE]) <br>{ <br>_tcsncpy (szMessageLabelBuffer, m_strLabel, BUFFERSIZE); <br>} <br> <br>DWORD GetTimeToReachQueue() <br>{ <br>return (m_dwTimeToReachQueue); <br>} <br> <br>DWORD GetTimeToBeReceived() <br>{ <br>return (m_dwTimeToBeReceived); <br>} <br> <br>}; <br> <br>// <br>// Two buffers to hold the last message label and body. <br>// <br>extern TCHAR szLastMessageLabel[BUFFERSIZE]; <br>extern TCHAR szLastMessageBody[BUFFERSIZE]; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4810"></a>MAIN.CPP</h2>
<pre><code>#import "mqoa.dll"no_namespace// MSMQ COM object <br> <br>#import "..\bin\GraphObj.dll" no_namespace// Point and Line object <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;tchar.h&gt; <br>#include &lt;iostream.h&gt; <br>#include &lt;mq.h&gt; <br>#include "../GraphObj/GraphObj_i.c" // For IID_IPoint and IID_ILine <br>#include "../QueueDef.h" <br> <br>// COM exception handler <br>void dump_com_error(_com_error &amp;e) <br>{ <br>    _tprintf(_T("Oops - hit an error!\n")); <br>    _tprintf(_T("\a\tCode = %08lx\n"), e.Error()); <br>    _tprintf(_T("\a\tCode meaning = %s\n"), e.ErrorMessage()); <br>    _bstr_t bstrSource(e.Source()); <br>    _bstr_t bstrDescription(e.Description()); <br>    _tprintf(_T("\a\tSource = %s\n"), (LPCTSTR) bstrSource); <br>    _tprintf(_T("\a\tDescription = %s\n"), (LPCTSTR) bstrDescription); <br>} <br> <br> <br>// Initialize OLE library <br>struct InitOle  _init_InitOle_; <br> <br>void main() <br>{ <br>    try { <br> <br>// For these ActiveX components we need only smart interface pointer <br>IMSMQQueueInfosPtrpQueueInfos;  <br>IMSMQQueueInfoPtrpQueueInfo;  <br>IMSMQQueuePtrpQueue; <br>IUnknownPtrpIUnknown; <br> <br>// Instanciate the follwing ActiveX components <br>IMSMQQueryPtrpQuery(__uuidof(MSMQQuery)); <br>IMSMQMessagePtrpMessage(__uuidof(MSMQMessage)); <br>ILinePtrpLine(__uuidof(Line)); <br>IPointPtrpPoint(__uuidof(Point)); <br> <br>intn = 1; <br>_variant_tvarQueueNameInit(STR_QUEUE_LABEL); <br>VARIANTvarQueueName; <br> <br>cout &lt;&lt; "\n\nMSMQ IPersistStream Test\n"; <br>cout &lt;&lt; "==========================\n\n"; <br> <br>varQueueName = varQueueNameInit.Detach(); <br> <br>// Find the queue <br>pQueueInfos = pQuery-&gt;LookupQueue(&amp;vtMissing, &amp;vtMissing, &amp;varQueueName); <br>varQueueNameInit.Attach(varQueueName); <br>pQueueInfos-&gt;Reset(); <br> <br>if ((pQueueInfo = pQueueInfos-&gt;Next()) == NULL) { <br> <br>//  The queue was not found create it on the local system <br>pQueueInfo = new IMSMQQueueInfoPtr( __uuidof(MSMQQueueInfo) ); <br>pQueueInfo-&gt;PathName = STR_QUEUE_NAME; <br>pQueueInfo-&gt;Label = STR_QUEUE_LABEL; <br>pQueueInfo-&gt;Create(); <br>cout &lt;&lt; "\nNew Queue created\n"; <br>} <br> <br>cout &lt;&lt; "Which object should be send ?\n"; <br>cout &lt;&lt; "1 - Point\n"; <br>cout &lt;&lt; "2 - Line\n"; <br>cout &lt;&lt; ":"; <br>cin &gt;&gt; n; <br> <br> <br>// Open the queue <br>pQueue = pQueueInfo-&gt;Open(MQ_SEND_ACCESS, MQ_DENY_NONE); <br> <br>if (n == 1) { <br>// Initialize point object <br>pPoint-&gt;x = 8; <br>pPoint-&gt;y = 9; <br>pMessage-&gt;Body = static_cast&lt;IUnknown*&gt;(pPoint); // The message body gets the IUnknown pointer <br> <br>} <br>else { <br>// Initialize line object <br>pLine-&gt;x1 = 1; <br>pLine-&gt;y1 = 2; <br>pLine-&gt;x2 = 3; <br>pLine-&gt;y2 = 4; <br>pMessage-&gt;Body = static_cast&lt;IUnknown*&gt;(pLine); // The message body gets the IUnknown pointer <br>} <br>cout &lt;&lt; "Sending Object\n"; <br>pMessage-&gt;Send(pQueue); <br> <br>// Close the Queue <br>pQueue-&gt;Close(); <br> <br>    } catch (_com_error&amp; e) { <br>dump_com_error(e); <br>    } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

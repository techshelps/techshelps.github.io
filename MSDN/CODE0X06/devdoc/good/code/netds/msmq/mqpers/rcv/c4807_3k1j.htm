<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4807"></a>MAIN.CPP</h2>
<pre><code>#include "stdafx.h" <br>#import "mqoa.dll"    no_namespace // MSMQ COM object <br> <br> <br> <br> <br>#import "..\bin\GraphObj.dll" no_namespace// Point and Line object <br> <br> <br> <br>// COM exception handler <br>void dump_com_error(_com_error &amp;e) <br>{ <br>    _tprintf(_T("Oops - hit an error!\n")); <br>    _tprintf(_T("\a\tCode = %08lx\n"), e.Error()); <br>    _tprintf(_T("\a\tCode meaning = %s\n"), e.ErrorMessage()); <br>    _bstr_t bstrSource(e.Source()); <br>    _bstr_t bstrDescription(e.Description()); <br>    _tprintf(_T("\a\tSource = %s\n"), (LPCTSTR) bstrSource); <br>    _tprintf(_T("\a\tDescription = %s\n"), (LPCTSTR) bstrDescription); <br>} <br> <br> <br>// Initialize OLE library <br>struct InitOle  _init_InitOle_; <br> <br> <br> <br>void main() <br>{ <br>    try { <br>// For these ActiveX components we need only smart interface pointer <br>IMSMQQueuePtrpQueue; <br>IMSMQMessagePtrpMessage; <br> <br>// Instanciate the follwing ActiveX components <br>IMSMQQueueInfoPtrpQueueInfo(__uuidof(MSMQQueueInfo)); <br> <br>intn = 1; <br> <br>cout &lt;&lt; "\n\nMSMQ IPersistStream Test Object Receiver\n"; <br>cout &lt;&lt; "==========================================\n\n"; <br> <br> <br>// Open the queue <br>pQueueInfo-&gt;PathName = ".\\IStreamTest"; <br>try { <br>pQueue = pQueueInfo-&gt;Open(MQ_RECEIVE_ACCESS, MQ_DENY_NONE); <br>} catch (_com_error&amp; e) { <br>if (e.Error() == MQ_ERROR_QUEUE_NOT_FOUND) { <br>cout &lt;&lt; "\n\nERROR queue does not exist\n"; <br>exit(-1); <br>} else <br>dump_com_error(e); <br>} <br> <br>// Get the next message <br>pMessage = pQueue-&gt;Receive(); <br> <br>IPointPtrpPoint((IUnknown*)pMessage-&gt;Body); <br> <br>// Check if it's a Point object <br>if (pPoint != NULL) { <br> <br>cout &lt;&lt; "\nGot a Point Object: " &lt;&lt; pPoint-&gt;x &lt;&lt; "   " &lt;&lt; pPoint-&gt;y &lt;&lt; "\n"; <br> <br>} <br>else { <br>ILinePtrpLine((IUnknown*)pMessage-&gt;Body); <br> <br>// Check if it's a Line object <br>if (pLine != NULL) { <br>cout &lt;&lt; "\nGot a Line Object: " &lt;&lt; pLine-&gt;x1 &lt;&lt; " " &lt;&lt; pLine-&gt;y1 &lt;&lt; " " &lt;&lt; pLine-&gt;x2 &lt;&lt; " " &lt;&lt; pLine-&gt;y2 &lt;&lt; "\n"; <br>} <br>else <br>cout &lt;&lt; "\nUnknown Object !!!\n"; <br>} <br>pQueue-&gt;Close(); <br> <br> <br>    } catch (_com_error&amp; e) { <br>dump_com_error(e); <br>    } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

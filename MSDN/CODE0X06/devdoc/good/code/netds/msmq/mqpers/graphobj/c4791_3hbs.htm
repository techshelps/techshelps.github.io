<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GRAPHOBJ_P.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4798"></a>GRAPHOBJ_P.C</h2>
<pre><code>/* this ALWAYS GENERATED file contains the proxy stub code */ <br> <br> <br>/* File created by MIDL compiler version 3.01.75 */ <br>/* at Thu Sep 25 08:51:38 1997 <br> */ <br>/* Compiler settings for GraphObj.idl: <br>    Oicf (OptLev=i2), W1, Zp8, env=Win32, ms_ext, c_ext <br>    error checks: none <br>*/ <br>//@@MIDL_FILE_HEADING(  ) <br> <br>#define USE_STUBLESS_PROXY <br> <br>#include "rpcproxy.h" <br>#include "GraphObj.h" <br> <br>#define TYPE_FORMAT_STRING_SIZE   5                                  <br>#define PROC_FORMAT_STRING_SIZE   193                                <br> <br>typedef struct _MIDL_TYPE_FORMAT_STRING <br>    { <br>    short          Pad; <br>    unsigned char  Format[ TYPE_FORMAT_STRING_SIZE ]; <br>    } MIDL_TYPE_FORMAT_STRING; <br> <br>typedef struct _MIDL_PROC_FORMAT_STRING <br>    { <br>    short          Pad; <br>    unsigned char  Format[ PROC_FORMAT_STRING_SIZE ]; <br>    } MIDL_PROC_FORMAT_STRING; <br> <br> <br>extern const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString; <br>extern const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString; <br> <br> <br>/* Object interface: IUnknown, ver. 0.0, <br>   GUID={0x00000000,0x0000,0x0000,{0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}} */ <br> <br> <br>/* Object interface: IDispatch, ver. 0.0, <br>   GUID={0x00020400,0x0000,0x0000,{0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}} */ <br> <br> <br>/* Object interface: IPoint, ver. 0.0, <br>   GUID={0xBEEDC08A,0xEBD2,0x11D0,{0xA7,0x8F,0x00,0x80,0x5F,0x0D,0x20,0x83}} */ <br> <br> <br>extern const MIDL_STUB_DESC Object_StubDesc; <br> <br> <br>extern const MIDL_SERVER_INFO IPoint_ServerInfo; <br> <br>#pragma code_seg(".orpc") <br>static const unsigned short IPoint_FormatStringOffsetTable[] =  <br>    { <br>    (unsigned short) -1, <br>    (unsigned short) -1, <br>    (unsigned short) -1, <br>    (unsigned short) -1, <br>    0, <br>    24, <br>    48, <br>    72 <br>    }; <br> <br>static const MIDL_SERVER_INFO IPoint_ServerInfo =  <br>    { <br>    &amp;Object_StubDesc, <br>    0, <br>    __MIDL_ProcFormatString.Format, <br>    &amp;IPoint_FormatStringOffsetTable[-3], <br>    0, <br>    0, <br>    0, <br>    0 <br>    }; <br> <br>static const MIDL_STUBLESS_PROXY_INFO IPoint_ProxyInfo = <br>    { <br>    &amp;Object_StubDesc, <br>    __MIDL_ProcFormatString.Format, <br>    &amp;IPoint_FormatStringOffsetTable[-3], <br>    0, <br>    0, <br>    0 <br>    }; <br> <br>CINTERFACE_PROXY_VTABLE(11) _IPointProxyVtbl =  <br>{ <br>    &amp;IPoint_ProxyInfo, <br>    &amp;IID_IPoint, <br>    IUnknown_QueryInterface_Proxy, <br>    IUnknown_AddRef_Proxy, <br>    IUnknown_Release_Proxy , <br>    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ , <br>    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ , <br>    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ , <br>    0 /* IDispatch_Invoke_Proxy */ , <br>    (void *)-1 /* IPoint::get_x */ , <br>    (void *)-1 /* IPoint::put_x */ , <br>    (void *)-1 /* IPoint::get_y */ , <br>    (void *)-1 /* IPoint::put_y */ <br>}; <br> <br> <br>static const PRPC_STUB_FUNCTION IPoint_table[] = <br>{ <br>    STUB_FORWARDING_FUNCTION, <br>    STUB_FORWARDING_FUNCTION, <br>    STUB_FORWARDING_FUNCTION, <br>    STUB_FORWARDING_FUNCTION, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2 <br>}; <br> <br>CInterfaceStubVtbl _IPointStubVtbl = <br>{ <br>    &amp;IID_IPoint, <br>    &amp;IPoint_ServerInfo, <br>    11, <br>    &amp;IPoint_table[-3], <br>    CStdStubBuffer_DELEGATING_METHODS <br>}; <br> <br> <br>/* Object interface: ILine, ver. 0.0, <br>   GUID={0xBEEDC08B,0xEBD2,0x11D0,{0xA7,0x8F,0x00,0x80,0x5F,0x0D,0x20,0x83}} */ <br> <br> <br>extern const MIDL_STUB_DESC Object_StubDesc; <br> <br> <br>extern const MIDL_SERVER_INFO ILine_ServerInfo; <br> <br>#pragma code_seg(".orpc") <br> <br>static const MIDL_STUB_DESC Object_StubDesc =  <br>    { <br>    0, <br>    NdrOleAllocate, <br>    NdrOleFree, <br>    0, <br>    0, <br>    0, <br>    0, <br>    0, <br>    __MIDL_TypeFormatString.Format, <br>    0, /* -error bounds_check flag */ <br>    0x20000, /* Ndr library version */ <br>    0, <br>    0x301004b, /* MIDL Version 3.1.75 */ <br>    0, <br>    0, <br>    0,  /* Reserved1 */ <br>    0,  /* Reserved2 */ <br>    0,  /* Reserved3 */ <br>    0,  /* Reserved4 */ <br>    0   /* Reserved5 */ <br>    }; <br> <br>static const unsigned short ILine_FormatStringOffsetTable[] =  <br>    { <br>    (unsigned short) -1, <br>    (unsigned short) -1, <br>    (unsigned short) -1, <br>    (unsigned short) -1, <br>    0, <br>    24, <br>    48, <br>    72, <br>    96, <br>    120, <br>    144, <br>    168 <br>    }; <br> <br>static const MIDL_SERVER_INFO ILine_ServerInfo =  <br>    { <br>    &amp;Object_StubDesc, <br>    0, <br>    __MIDL_ProcFormatString.Format, <br>    &amp;ILine_FormatStringOffsetTable[-3], <br>    0, <br>    0, <br>    0, <br>    0 <br>    }; <br> <br>static const MIDL_STUBLESS_PROXY_INFO ILine_ProxyInfo = <br>    { <br>    &amp;Object_StubDesc, <br>    __MIDL_ProcFormatString.Format, <br>    &amp;ILine_FormatStringOffsetTable[-3], <br>    0, <br>    0, <br>    0 <br>    }; <br> <br>CINTERFACE_PROXY_VTABLE(15) _ILineProxyVtbl =  <br>{ <br>    &amp;ILine_ProxyInfo, <br>    &amp;IID_ILine, <br>    IUnknown_QueryInterface_Proxy, <br>    IUnknown_AddRef_Proxy, <br>    IUnknown_Release_Proxy , <br>    0 /* (void *)-1 /* IDispatch::GetTypeInfoCount */ , <br>    0 /* (void *)-1 /* IDispatch::GetTypeInfo */ , <br>    0 /* (void *)-1 /* IDispatch::GetIDsOfNames */ , <br>    0 /* IDispatch_Invoke_Proxy */ , <br>    (void *)-1 /* ILine::get_x1 */ , <br>    (void *)-1 /* ILine::put_x1 */ , <br>    (void *)-1 /* ILine::get_y1 */ , <br>    (void *)-1 /* ILine::put_y1 */ , <br>    (void *)-1 /* ILine::get_x2 */ , <br>    (void *)-1 /* ILine::put_x2 */ , <br>    (void *)-1 /* ILine::get_y2 */ , <br>    (void *)-1 /* ILine::put_y2 */ <br>}; <br> <br> <br>static const PRPC_STUB_FUNCTION ILine_table[] = <br>{ <br>    STUB_FORWARDING_FUNCTION, <br>    STUB_FORWARDING_FUNCTION, <br>    STUB_FORWARDING_FUNCTION, <br>    STUB_FORWARDING_FUNCTION, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2, <br>    NdrStubCall2 <br>}; <br> <br>CInterfaceStubVtbl _ILineStubVtbl = <br>{ <br>    &amp;IID_ILine, <br>    &amp;ILine_ServerInfo, <br>    15, <br>    &amp;ILine_table[-3], <br>    CStdStubBuffer_DELEGATING_METHODS <br>}; <br> <br>#pragma data_seg(".rdata") <br> <br>#if !defined(__RPC_WIN32__) <br>#error  Invalid build platform for this stub. <br>#endif <br> <br>#if !(TARGET_IS_NT40_OR_LATER) <br>#error You need a Windows NT 4.0 or later to run this stub because it uses these features: <br>#error   -Oif or -Oicf. <br>#error However, your C/C++ compilation flags indicate you intend to run this app on earlier systems. <br>#error This app will die there with the RPC_X_WRONG_STUB_VERSION error. <br>#endif <br> <br> <br>static const MIDL_PROC_FORMAT_STRING __MIDL_ProcFormatString = <br>    { <br>        0, <br>        { <br> <br>/* Procedure get_x1 */ <br> <br> <br>/* Procedure get_x */ <br> <br>0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/*  2 */NdrFcShort( 0x7 ),/* 7 */ <br>#ifndef _ALPHA_ <br>/*  4 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/*  6 */NdrFcShort( 0x0 ),/* 0 */ <br>/*  8 */NdrFcShort( 0x10 ),/* 16 */ <br>/* 10 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter pVal */ <br> <br> <br>/* Parameter pVal */ <br> <br>/* 12 */NdrFcShort( 0x2150 ),/* 8528 */ <br>#ifndef _ALPHA_ <br>/* 14 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 16 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br> <br>/* Return value */ <br> <br>/* 18 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 20 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 22 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure put_x1 */ <br> <br> <br>/* Procedure put_x */ <br> <br>/* 24 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 26 */NdrFcShort( 0x8 ),/* 8 */ <br>#ifndef _ALPHA_ <br>/* 28 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 30 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 32 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 34 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter newVal */ <br> <br> <br>/* Parameter newVal */ <br> <br>/* 36 */NdrFcShort( 0x48 ),/* 72 */ <br>#ifndef _ALPHA_ <br>/* 38 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 40 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br> <br>/* Return value */ <br> <br>/* 42 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 44 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 46 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure get_y1 */ <br> <br> <br>/* Procedure get_y */ <br> <br>/* 48 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 50 */NdrFcShort( 0x9 ),/* 9 */ <br>#ifndef _ALPHA_ <br>/* 52 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 54 */NdrFcShort( 0x0 ),/* 0 */ <br>/* 56 */NdrFcShort( 0x10 ),/* 16 */ <br>/* 58 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter pVal */ <br> <br> <br>/* Parameter pVal */ <br> <br>/* 60 */NdrFcShort( 0x2150 ),/* 8528 */ <br>#ifndef _ALPHA_ <br>/* 62 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 64 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br> <br>/* Return value */ <br> <br>/* 66 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 68 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 70 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure put_y1 */ <br> <br> <br>/* Procedure put_y */ <br> <br>/* 72 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 74 */NdrFcShort( 0xa ),/* 10 */ <br>#ifndef _ALPHA_ <br>/* 76 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 78 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 80 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 82 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter newVal */ <br> <br> <br>/* Parameter newVal */ <br> <br>/* 84 */NdrFcShort( 0x48 ),/* 72 */ <br>#ifndef _ALPHA_ <br>/* 86 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 88 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br> <br>/* Return value */ <br> <br>/* 90 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 92 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 94 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure get_x2 */ <br> <br>/* 96 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 98 */NdrFcShort( 0xb ),/* 11 */ <br>#ifndef _ALPHA_ <br>/* 100 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 102 */NdrFcShort( 0x0 ),/* 0 */ <br>/* 104 */NdrFcShort( 0x10 ),/* 16 */ <br>/* 106 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter pVal */ <br> <br>/* 108 */NdrFcShort( 0x2150 ),/* 8528 */ <br>#ifndef _ALPHA_ <br>/* 110 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 112 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br>/* 114 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 116 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 118 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure put_x2 */ <br> <br>/* 120 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 122 */NdrFcShort( 0xc ),/* 12 */ <br>#ifndef _ALPHA_ <br>/* 124 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 126 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 128 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 130 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter newVal */ <br> <br>/* 132 */NdrFcShort( 0x48 ),/* 72 */ <br>#ifndef _ALPHA_ <br>/* 134 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 136 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br>/* 138 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 140 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 142 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure get_y2 */ <br> <br>/* 144 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 146 */NdrFcShort( 0xd ),/* 13 */ <br>#ifndef _ALPHA_ <br>/* 148 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 150 */NdrFcShort( 0x0 ),/* 0 */ <br>/* 152 */NdrFcShort( 0x10 ),/* 16 */ <br>/* 154 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter pVal */ <br> <br>/* 156 */NdrFcShort( 0x2150 ),/* 8528 */ <br>#ifndef _ALPHA_ <br>/* 158 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 160 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br>/* 162 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 164 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 166 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Procedure put_y2 */ <br> <br>/* 168 */0x33,/* FC_AUTO_HANDLE */ <br>0x64,/* 100 */ <br>/* 170 */NdrFcShort( 0xe ),/* 14 */ <br>#ifndef _ALPHA_ <br>/* 172 */NdrFcShort( 0xc ),/* x86, MIPS, PPC Stack size/offset = 12 */ <br>#else <br>NdrFcShort( 0x18 ),/* Alpha Stack size/offset = 24 */ <br>#endif <br>/* 174 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 176 */NdrFcShort( 0x8 ),/* 8 */ <br>/* 178 */0x4,/* 4 */ <br>0x2,/* 2 */ <br> <br>/* Parameter newVal */ <br> <br>/* 180 */NdrFcShort( 0x48 ),/* 72 */ <br>#ifndef _ALPHA_ <br>/* 182 */NdrFcShort( 0x4 ),/* x86, MIPS, PPC Stack size/offset = 4 */ <br>#else <br>NdrFcShort( 0x8 ),/* Alpha Stack size/offset = 8 */ <br>#endif <br>/* 184 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>/* Return value */ <br> <br>/* 186 */NdrFcShort( 0x70 ),/* 112 */ <br>#ifndef _ALPHA_ <br>/* 188 */NdrFcShort( 0x8 ),/* x86, MIPS, PPC Stack size/offset = 8 */ <br>#else <br>NdrFcShort( 0x10 ),/* Alpha Stack size/offset = 16 */ <br>#endif <br>/* 190 */0x8,/* FC_LONG */ <br>0x0,/* 0 */ <br> <br>0x0 <br>        } <br>    }; <br> <br>static const MIDL_TYPE_FORMAT_STRING __MIDL_TypeFormatString = <br>    { <br>        0, <br>        { <br>0x11, 0xc,/* FC_RP [alloced_on_stack] [simple_pointer] */ <br>/*  2 */0x8,/* FC_LONG */ <br>0x5c,/* FC_PAD */ <br> <br>0x0 <br>        } <br>    }; <br> <br>const CInterfaceProxyVtbl * _GraphObj_ProxyVtblList[] =  <br>{ <br>    ( CInterfaceProxyVtbl *) &amp;_IPointProxyVtbl, <br>    ( CInterfaceProxyVtbl *) &amp;_ILineProxyVtbl, <br>    0 <br>}; <br> <br>const CInterfaceStubVtbl * _GraphObj_StubVtblList[] =  <br>{ <br>    ( CInterfaceStubVtbl *) &amp;_IPointStubVtbl, <br>    ( CInterfaceStubVtbl *) &amp;_ILineStubVtbl, <br>    0 <br>}; <br> <br>PCInterfaceName const _GraphObj_InterfaceNamesList[] =  <br>{ <br>    "IPoint", <br>    "ILine", <br>    0 <br>}; <br> <br>const IID *  _GraphObj_BaseIIDList[] =  <br>{ <br>    &amp;IID_IDispatch, <br>    &amp;IID_IDispatch, <br>    0 <br>}; <br> <br> <br>#define _GraphObj_CHECK_IID(n)IID_GENERIC_CHECK_IID( _GraphObj, pIID, n) <br> <br>int __stdcall _GraphObj_IID_Lookup( const IID * pIID, int * pIndex ) <br>{ <br>    IID_BS_LOOKUP_SETUP <br> <br>    IID_BS_LOOKUP_INITIAL_TEST( _GraphObj, 2, 1 ) <br>    IID_BS_LOOKUP_RETURN_RESULT( _GraphObj, 2, *pIndex ) <br>     <br>} <br> <br>const ExtendedProxyFileInfo GraphObj_ProxyFileInfo =  <br>{ <br>    (PCInterfaceProxyVtblList *) &amp; _GraphObj_ProxyVtblList, <br>    (PCInterfaceStubVtblList *) &amp; _GraphObj_StubVtblList, <br>    (const PCInterfaceName * ) &amp; _GraphObj_InterfaceNamesList, <br>    (const IID ** ) &amp; _GraphObj_BaseIIDList, <br>    &amp; _GraphObj_IID_Lookup,  <br>    2, <br>    2 <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

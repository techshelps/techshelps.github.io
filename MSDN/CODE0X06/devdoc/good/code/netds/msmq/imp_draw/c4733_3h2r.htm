<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRAWAREA.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4743"></a>DRAWAREA.CPP</h2>
<pre><code>// drawarea.cpp : implementation file <br>// <br> <br>#include "stdafx.h" <br>#include "Imp_draw.h" <br>#include "Imp_drawdlg.h" <br> <br>#ifdef _DEBUG <br>#define new DEBUG_NEW <br>#undef THIS_FILE <br>static char THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CDrawArea <br> <br>CDrawArea::CDrawArea() <br>{ <br>} <br> <br>CDrawArea::~CDrawArea() <br>{ <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CDrawArea, CEdit) <br>//{{AFX_MSG_MAP(CDrawArea) <br>ON_WM_LBUTTONDOWN() <br>ON_WM_MOUSEMOVE() <br>ON_WM_PAINT() <br>ON_WM_RBUTTONUP() <br>ON_WM_CTLCOLOR_REFLECT() <br>ON_WM_KEYDOWN() <br>ON_WM_CHAR() <br>ON_WM_SETFOCUS() <br>ON_WM_SETCURSOR() <br>ON_WM_LBUTTONDBLCLK() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CDrawArea message handlers <br> <br>void CDrawArea::AddKeystroke(char *mbsKey) <br>{ <br>// <br>// The backspace keystroke should erase the last character <br>// <br>if (mbsKey[0] == VK_BACK) <br>{ <br>int nStart, nEnd; <br>GetSel(nStart, nEnd); <br>SetSel(nEnd-1, nEnd); <br>mbsKey[0] = '\0'; <br> <br>        // <br>        // Erasing a line feed should erase the preceding carriage return <br>        // <br>        CString strText; <br>        GetWindowText(strText); <br>        int iLength = strText.GetLength(); <br>        if (iLength &gt; 0 &amp;&amp; strText.GetAt(strText.GetLength() - 1) == '\n') <br>            SetSel(nEnd-2, nEnd); <br>} <br> <br>// <br>// Append a line feed to a carriage return <br>// <br>else if (mbsKey[0] == VK_RETURN) <br>strcat(mbsKey, "\xa"); <br> <br>// <br>// Store the new keystroke <br>// <br>ReplaceSel(mbsKey); <br>} <br> <br> <br>void CDrawArea::AddLine(LINE line) <br>{ <br>// <br>// Set the clipping region for the drawing <br>// <br>CClientDC dc(this); <br>RECT rect; <br>GetClientRect(&amp;rect); <br>CRgn rgn; <br>rgn.CreateRectRgnIndirect(&amp;rect);  <br>dc.SelectClipRgn(&amp;rgn); <br> <br>// <br>// Draw the line and save it for redrawing <br>// <br>dc.MoveTo(line.ptStart); <br>dc.LineTo(line.ptEnd); <br>    m_listLines.AddTail(line); <br>} <br> <br> <br>void CDrawArea::OnLButtonDown(UINT nFlags, CPoint point)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br> <br>m_ptLast = point; <br>SetFocus(); <br>} <br> <br> <br>void CDrawArea::OnMouseMove(UINT nFlags, CPoint point)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br> <br>if (nFlags &amp; MK_LBUTTON) <br>{ <br>// <br>// Add the drawn line to the drawing <br>// <br>LINE line; <br>line.ptStart = m_ptLast; <br>line.ptEnd = point; <br>        AddLine(line); <br> <br>// <br>// Send the line to the friend <br>// <br>((CImp_DrawDlg *)GetParent())-&gt;SendMouseMovement(line); <br> <br>// <br>// Remember the end point of the line  <br>// <br>m_ptLast = point; <br>} <br>} <br> <br> <br>void CDrawArea::OnPaint()  <br>{ <br>CPaintDC dc(this); // device context for painting <br> <br>// TODO: Add your message handler code here <br> <br>// <br>// Set the clipping region for the drawing <br>// <br>RECT rect; <br>GetClientRect(&amp;rect); <br>CRgn rgn; <br>rgn.CreateRectRgnIndirect(&amp;rect);  <br>dc.SelectClipRgn(&amp;rgn); <br> <br>// <br>// Erase the drawing area <br>// <br>dc.FillSolidRect(&amp;rect, GetSysColor(COLOR_MENU)); <br> <br>// <br>// Redisplay the text <br>// <br>    CString strText; <br>    GetWindowText(strText); <br>    dc.SelectStockObject(ANSI_VAR_FONT); <br>    rect.top++; <br>    rect.left++; <br>    dc.DrawText(strText, &amp;rect, DT_TOP | DT_WORDBREAK); <br> <br>// <br>// Redraw each line <br>// <br>LINE line; <br>POSITION posLine = m_listLines.GetHeadPosition(); <br>while (posLine != NULL) <br>{ <br>line = m_listLines.GetNext(posLine); <br>dc.MoveTo(line.ptStart); <br>dc.LineTo(line.ptEnd); <br>} <br> <br>// Do not call CEdit::OnPaint() for painting messages <br>} <br> <br> <br>void CDrawArea::OnRButtonUp(UINT nFlags, CPoint point)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br> <br>// <br>// Clear the drawing area <br>// <br>SetSel(0, -1); <br>Clear(); <br>m_listLines.RemoveAll(); <br>RedrawWindow(); <br>} <br> <br> <br>BOOL CDrawArea::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br> <br>return 0; <br>} <br> <br> <br>void CDrawArea::OnSetFocus(CWnd* pOldWnd)  <br>{ <br>CEdit::OnSetFocus(pOldWnd); <br> <br>// TODO: Add your message handler code here <br> <br>HideCaret(); <br>} <br> <br> <br>HBRUSH CDrawArea::CtlColor(CDC* pDC, UINT nCtlColor)  <br>{ <br>// TODO: Change any attributes of the DC here <br>pDC-&gt;SetBkColor(GetSysColor(COLOR_MENU)); <br> <br>// TODO: Return a non-NULL brush if the parent's handler should not be called <br>return HBRUSH((CBrush *)pDC-&gt;SelectStockObject(LTGRAY_BRUSH)); <br>} <br> <br> <br>void CDrawArea::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br> <br>switch (nChar) <br>{ <br>case VK_LEFT: <br>case VK_RIGHT: <br>case VK_UP: <br>case VK_DOWN: <br>case VK_HOME:break; <br>default:CEdit::OnKeyDown(nChar, nRepCnt, nFlags); <br>} <br>} <br> <br> <br>void CDrawArea::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br>((CImp_DrawDlg *)GetParent())-&gt;SendKeystroke(nChar); <br> <br>CEdit::OnChar(nChar, nRepCnt, nFlags); <br> <br>RedrawWindow(); <br>} <br> <br> <br>void CDrawArea::OnLButtonDblClk(UINT nFlags, CPoint point)  <br>{ <br>// TODO: Add your message handler code here and/or call default <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DISDRAW.FRM</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context4824"></a>DISDRAW.FRM</h2>
<pre><code>VERSION 5.00 <br>Begin VB.Form Form1  <br>   Caption         =   "Form1" <br>   ClientHeight    =   5820 <br>   ClientLeft      =   3345 <br>   ClientTop       =   2295 <br>   ClientWidth     =   6330 <br>   LinkTopic       =   "Form1" <br>   ScaleHeight     =   5820 <br>   ScaleWidth      =   6330 <br>   Begin VB.Frame Frame1  <br>      Caption         =   "Sent Messages" <br>      Height          =   975 <br>      Left            =   3120 <br>      TabIndex        =   6 <br>      Top             =   4680 <br>      Width           =   2535 <br>      Begin VB.OptionButton Option1  <br>         Caption         =   "&amp;Express" <br>         Height          =   252 <br>         Index           =   0 <br>         Left            =   240 <br>         TabIndex        =   4 <br>         Top             =   240 <br>         Value           =   -1  'True <br>         Width           =   2052 <br>      End <br>      Begin VB.OptionButton Option1  <br>         Caption         =   "&amp;Recoverable" <br>         Height          =   252 <br>         Index           =   1 <br>         Left            =   240 <br>         TabIndex        =   5 <br>         Top             =   600 <br>         Width           =   2052 <br>      End <br>   End <br>   Begin VB.PictureBox Picture1  <br>      Height          =   3855 <br>      Left            =   240 <br>      MousePointer    =   1  'Arrow <br>      ScaleHeight     =   253 <br>      ScaleMode       =   3  'Pixel <br>      ScaleWidth      =   389 <br>      TabIndex        =   3 <br>      Top             =   120 <br>      Width           =   5895 <br>   End <br>   Begin VB.CommandButton Attach  <br>      Caption         =   "&amp;Attach" <br>      Default         =   -1  'True <br>      BeginProperty Font  <br>         Name            =   "MS Sans Serif" <br>         Size            =   8.25 <br>         Charset         =   0 <br>         Weight          =   700 <br>         Underline       =   0   'False <br>         Italic          =   0   'False <br>         Strikethrough   =   0   'False <br>      EndProperty <br>      Height          =   375 <br>      Left            =   4800 <br>      TabIndex        =   2 <br>      Top             =   4200 <br>      Width           =   1335 <br>   End <br>   Begin VB.TextBox FriendName  <br>      Height          =   285 <br>      Left            =   1440 <br>      TabIndex        =   1 <br>      Top             =   4200 <br>      Width           =   2055 <br>   End <br>   Begin VB.Label Label1  <br>      Caption         =   "Remote &amp;Friend:" <br>      Height          =   255 <br>      Left            =   240 <br>      TabIndex        =   0 <br>      Top             =   4200 <br>      Width           =   1215 <br>   End <br>End <br>Attribute VB_Name = "Form1" <br>Attribute VB_GlobalNameSpace = False <br>Attribute VB_Creatable = False <br>Attribute VB_PredeclaredId = True <br>Attribute VB_Exposed = False <br>' ------------------------------------------------------------------------ <br>'               Copyright (C) 1995 Microsoft Corporation <br>' <br>' You have a royalty-free right to use, modify, reproduce and distribute <br>' the Sample Application Files (and/or any modified version) in any way <br>' you find useful, provided that you agree that Microsoft has no warranty, <br>' obligations or liability for any Sample Application Files. <br>' ------------------------------------------------------------------------ <br>' <br>' Type Guid <br>' <br>Const guidDraw = "{151ceac0-acb5-11cf-8b51-0020af929546}" <br>Option Explicit <br>Const MaxNumLen = 7 <br>Private Type Line <br>    X1 As Long <br>    Y1 As Long <br>    X2 As Long <br>    Y2 As Long <br>End Type <br> <br>Dim lLastX As Long <br>Dim lLastY As Long <br>Dim Lines() As Line <br>Dim cLines As Integer <br>Dim lArraySize As Integer <br>Dim strScreenText As String <br>Dim fWasText As Integer <br>Dim strLogin As String <br>Dim q As MSMQQueue <br>Attribute q.VB_VarHelpID = -1 <br>Dim WithEvents qevent As MSMQEvent <br>Attribute qevent.VB_VarHelpID = -1 <br>Dim qFriend As MSMQQueue <br>Dim msgOut As MSMQMessage <br> <br>' <br>'Locate a remote queue <br>' <br>Private Sub Attach_Click() <br>    Dim queryFriend As New MSMQQuery <br>    Dim qinfoFriend As MSMQQueueInfo <br>    Dim qinfos As MSMQQueueInfos <br>    FriendName = UCase(FriendName) <br>    Set qinfos = queryFriend.LookupQueue( _ <br>        Label:=(FriendName), _ <br>        ServiceTypeGuid:=guidDraw) <br>    qinfos.Reset <br>    Set qinfoFriend = qinfos.Next <br>    If qinfoFriend Is Nothing Then                   'And locate it <br>        MsgBox "No Such friend, Sorry..."   'No queue defined <br>    Else <br>        If Not qFriend Is Nothing Then <br>          If qFriend.IsOpen Then qFriend.Close <br>        End If <br> <br>        Set qFriend = qinfoFriend.Open(MQ_SEND_ACCESS, 0) <br>        Caption = strLogin + " - Connected to " + FriendName <br>        Attach.Enabled = False <br>    End If <br>End Sub <br> <br>' <br>' Application Initialization <br>' <br>Private Sub Form_Load() <br>    Dim strDefaultQueueName As String <br>    Dim lTempPointer As Long <br>    Dim query As New MSMQQuery <br>    Dim qinfo As MSMQQueueInfo <br>    Dim qinfos As MSMQQueueInfos <br>    Dim strComputerName As String <br>     <br>    Set msgOut = New MSMQMessage <br>    strDefaultQueueName = Environ("USERNAME") <br>    strLogin = InputBox("Your Name Please", "Login", strDefaultQueueName) <br>    If strLogin = "" Then End <br>    strLogin = UCase(strLogin) <br>    Caption = strLogin <br>    Set qinfos = query.LookupQueue( _ <br>        Label:=strLogin, _ <br>        ServiceTypeGuid:=guidDraw) <br>    qinfos.Reset             'And locate this queue <br>    Set qinfo = qinfos.Next <br>    If qinfo Is Nothing Then <br>        Set qinfo = New MSMQQueueInfo <br>        strComputerName = "." <br>        qinfo.PathName = strComputerName + "\" + strLogin <br>        qinfo.Label = strLogin <br>        qinfo.ServiceTypeGuid = guidDraw <br>        qinfo.Create                 'If there is no such create one. <br>    End If <br>    On Error GoTo retry_on_error <br>        lTempPointer = Screen.MousePointer <br>        Screen.MousePointer = 11 'ccArrowHourglass <br>        Set q = qinfo.Open(MQ_RECEIVE_ACCESS, 0) <br>        On Error GoTo 0 <br>        Screen.MousePointer = lTempPointer <br>        GoTo all_ok <br>retry_on_error: <br>    ' <br>    'We may still not see the queue until the next replication <br>    ' In this case, we get MQ_ERROR_QUEUE_NOT_FOUND and retry. <br>    ' <br>    If Err.Number = MQ_ERROR_QUEUE_NOT_FOUND Then <br>        Err.Clear <br>        DoEvents <br>        Resume <br>    Else <br>        MsgBox Err.Description, , "Error in Open" <br>        End <br>    End If <br>     <br>all_ok: <br>    'All messages will be received asynchronously <br>    ' So need an event handler <br>    Set qevent = New MSMQEvent <br>    q.EnableNotification qevent <br>End Sub <br>' <br>'Gets points and returns a line <br>' <br>Private Function PointsToLine(ByVal X1 As Long, ByVal Y1 As Long, ByVal X2 As Long, ByVal Y2 As Long) As Line <br>    Dim lineNew As Line <br>    lineNew.X1 = X1 <br>    lineNew.Y1 = Y1 <br>    lineNew.X2 = X2 <br>    lineNew.Y2 = Y2 <br>    PointsToLine = lineNew <br>End Function <br>' <br>'Draw a line in the picture control <br>' <br>Private Sub DrawLine(lineDraw As Line) <br>    Picture1.Line (lineDraw.X1, lineDraw.Y1)-(lineDraw.X2, lineDraw.Y2) <br>    fWasText = False <br>End Sub <br>' <br>'Display a line <br>' <br>Private Sub AddLine(lineNew As Line) <br>    DrawLine lineNew <br>    cLines = cLines + 1 <br>    If (cLines &gt; lArraySize) Then <br>        lArraySize = cLines * 2 <br>        ReDim Preserve Lines(lArraySize) <br>    End If <br>    Lines(cLines - 1) = lineNew <br>End Sub <br>' <br>'Clear the display <br>' <br>Private Sub ClearDraw() <br>    cLines = 0 <br>    strScreenText = "" <br>    Picture1.Refresh <br>End Sub <br>' <br>'Decode a string into a line <br>' <br>Private Function LineToString(lineIn As Line) As String <br>    Dim strFormat As String <br>    strFormat = String(MaxNumLen, "0") <br>    LineToString = Format$(lineIn.X1, strFormat) + Format$(lineIn.Y1, strFormat) + Format$(lineIn.X2, strFormat) + Format$(lineIn.Y2, strFormat) <br>End Function <br>' <br>'Encode a line into a string <br>' <br>Private Function StringToLine(strIn As String) As Line <br>    Dim lineOut As Line <br>    lineOut.X1 = Val(Mid$(strIn, 1, MaxNumLen)) <br>    lineOut.Y1 = Val(Mid$(strIn, MaxNumLen + 1, MaxNumLen)) <br>    lineOut.X2 = Val(Mid$(strIn, MaxNumLen * 2 + 1, MaxNumLen)) <br>    lineOut.Y2 = Val(Mid$(strIn, MaxNumLen * 3 + 1, MaxNumLen)) <br>    StringToLine = lineOut <br>End Function <br> <br>Private Sub Form_Unload(Cancel As Integer) <br>    If Not q Is Nothing Then <br>        q.Close <br>    End If <br>    If Not qFriend Is Nothing Then qFriend.Close <br>     <br>End Sub <br> <br> <br> <br>Private Sub FriendName_Change() <br>        Attach.Enabled = True <br>End Sub <br> <br> <br>' <br>'Message Receive event <br>' <br>Private Sub qevent_Arrived(ByVal q As Object, ByVal lCursor As Long) <br>    Dim msgIn As MSMQMessage <br>    Dim lineNew As Line <br>    Dim strTextIn As String <br>     <br>    On Error GoTo ErrorHandler <br>    Set msgIn = q.Receive(ReceiveTimeout:=100) <br>    If Not msgIn Is Nothing Then <br>        strTextIn = msgIn.Body          'Read the body of the message <br>        If Len(strTextIn) = 1 Then         'If 1 byte long <br>            TypeChar strTextIn             'it is a character - so display it <br>        Else <br>            lineNew = StringToLine(msgIn.Body)   'Otherwise it is a line <br>            AddLine lineNew                         'so draw it <br>        End If <br>    End If <br>ErrorHandler: <br>    ' reenable event firing <br>    q.EnableNotification qevent <br>End Sub <br> <br> <br> <br> <br>Private Sub qevent_ArrivedError(ByVal pdispQueue As Object, ByVal lErrorCode As Long, ByVal lCursor As Long) <br>    MsgBox Hex$(lErrorCode), , "Receive Error!" <br>    q.EnableNotification qevent <br>End Sub <br> <br>Private Sub Option1_Click(Index As Integer) <br>    msgOut.Delivery = Index <br>End Sub <br> <br> <br>' <br>'Key press event <br>' <br>Private Sub Picture1_KeyPress(KeyAscii As Integer) <br>    TypeChar (Chr(KeyAscii))                'Display the character <br>    If Not qFriend Is Nothing Then <br>        If qFriend.IsOpen Then <br>            msgOut.Priority = 4                 'Set the priority to 4 (high) <br>            msgOut.Body = Chr(KeyAscii)         'Fill the body with the character <br>            msgOut.Label = "Key: " + msgOut.Body <br>            msgOut.Send qFriend                 'And send the message <br>        End If <br>    End If <br>End Sub <br>' <br>'Display a character <br>'(Handles backspace) <br>' <br>Private Sub TypeChar(Key As String) <br>    If Asc(Key) = 8 Then 'BackSpace <br>        If strScreenText &lt;&gt; "" Then <br>            strScreenText = Left$(strScreenText, Len(strScreenText) - 1) <br>            Picture1.Refresh <br>        End If <br>    Else <br>        strScreenText = strScreenText + Key <br>        If fWasText Then <br>            Picture1.Print Key; <br>        Else <br>            Picture1.Refresh <br>        End If <br>    End If <br>End Sub <br>' <br>'Mouse Down Event <br>' <br>Private Sub Picture1_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single) <br>    If Button = 1 Then      'Remember the <br>        lLastX = X           'Mouse location <br>        lLastY = Y <br>    End If <br>End Sub <br>' <br>'Mouse Move Event <br>' <br>Private Sub Picture1_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single) <br>    If Button = 1 And X &gt; 0 And Y &gt; 0 Then          'Something to draw? <br>        Dim lineNew As Line <br>        lineNew = PointsToLine(lLastX, lLastY, X, Y)  'Get a new line <br>        AddLine lineNew                             'And display it <br>        If Not qFriend Is Nothing Then <br>            If qFriend.IsOpen Then <br>                msgOut.Priority = 3                     'Set the priority to 3 (low) <br>                msgOut.Body = LineToString(lineNew)     'Fill the body with the line <br>                msgOut.Label = Str(lLastX) + "," + Str(lLastY) + " To " + Str(X) + "," + Str(Y) <br>                msgOut.Send qFriend                     'And send the message <br>            End If <br>        End If <br>        lLastX = X <br>        lLastY = Y <br>    End If <br>End Sub <br>' <br>'2nd button click == Clear the display <br>' <br>Private Sub Picture1_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single) <br>    If Button = 2 Then ClearDraw <br>End Sub <br>' <br>'Repaint the display event <br>' <br>Private Sub Picture1_Paint() <br>    Dim I As Integer <br>    For I = 0 To cLines - 1 <br>        DrawLine Lines(I) <br>    Next <br>    Picture1.CurrentX = 0 <br>    Picture1.CurrentY = 0 <br>    Picture1.Print strScreenText; <br>    fWasText = True <br>End Sub <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

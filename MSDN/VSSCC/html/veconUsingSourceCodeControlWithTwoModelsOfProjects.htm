<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Different Project Models in Source Code Control</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconusingsourcecodecontrolwithtwomodelsofprojects"></a>Different Project Models in Source Code Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUsingSourceCodeControlWithTwoModelsOfProjects_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUsingSourceCodeControlWithTwoModelsOfProjects_T">
</object></p>
<p>
When working in the Microsoft development environment, you are using one of two kinds of projects: reference-based or directory-based. These distinctions are not presented as categories within the environment, but they influence how your projects will be treated in source control tasks.</p>
<p>
The <i>reference-based project </i>is similar to a Microsoft<sup>®</sup> Visual Basic<sup>®</sup> or Visual C++<sup>®</sup> project, in that it uses a project file to list and track files contained in the project, source code control information on those files, and other data. These project files may be physically located anywhere on the developer's system. Examples of a reference-based project (in the development environment) include Utility Projects or Database Projects.</p>
<p>
The <i>directory-based project </i>is similar to a Visual J++™ project, in that it uses the directory that holds the project to define the list of files to build for that project. The directory-based project contains a project file but does not use that file as its only method of defining the list of files and their respective locations. All files in a directory-based project must be in the project's root directory or a subdirectory of the project's root directory.</p>
<p>
The following table lists and compares characteristics of these two project models:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Reference-based projects</b></td>
<td class=label width=50%><b>Directory-based projects</b></td>
</tr>
<tr valign=top>
<td width=50%>You use the project file as the current list of files to build. This is also how a reference-based project tracks dependency files for builds.</td>
<td width=50%>You use the actual presence of the files in the specified directory as the current list of files in a project (along with maintaining a file list in the project file).</td>
</tr>
<tr valign=top>
<td width=50%>You track source code control issues in the project file.</td>
<td width=50%>You track source code control issues by altering directory contents.</td>
</tr>
<tr valign=top>
<td width=50%>Only files you choose in your settings for your build configuration are included in builds.</td>
<td width=50%>You can choose files to drop out of the build in the Project Explorer by removing them from the project. This will not delete the files but make them appear a lighter gray in the display. </td>
</tr>
<tr valign=top>
<td width=50%>You can build multiple projects that reference a single item in one location.</td>
<td width=50%>You must keep a separate copy of an item in a different directory for each project in which it builds.</td>
</tr>
<tr valign=top>
<td width=50%>You can keep files in the directory that are not part of the project.</td>
<td width=50%>You only include files that are completed and built in the directory. The files in progress are kept locally. </td>
</tr>
<tr valign=top>
<td width=50%>You can have placeholder or incomplete (or not built) files in the directory.</td>
<td width=50%>All files in the project directory will be built. Use the Exclude feature in the Project Explorer to ensure that the project contains only files that can be built.</td>
</tr>
<tr valign=top>
<td width=50%>A project can span subdirectories. You can use this to sort file types, possibly storing core files in one directory, user interface files in another, and so on. The project's files may be anywhere on the developer's system.</td>
<td width=50%>Each project is completely contained within its directory or a subdirectory of the project's root directory.</td>
</tr>
<tr valign=top>
<td width=50%>Multiple projects can be located in the same directory.</td>
<td width=50%>One project is contained in a given directory.</td>
</tr>
<tr valign=top>
<td width=50%>Only files referred to in the project file will be synchronized with source code control.</td>
<td width=50%>Files contained in the project directory are included in the next build after you synchronize with source code control.</td>
</tr>
<tr valign=top>
<td width=50%>When moving files, file paths must be updated in the project file.</td>
<td width=50%>No absolute path names in the project file, so the project can be moved as an entire unit, by moving the entire directory.</td>
</tr>
</table><br>
</BODY>
</HTML>

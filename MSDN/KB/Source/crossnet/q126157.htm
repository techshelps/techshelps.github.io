

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Purpose of All OLE APIs and Interfaces </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126157">
<META NAME="KBModify" CONTENT="1996/09/06">
<META NAME="KBCreate" CONTENT="1995/02/15">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; crossnet">
<META NAME="Description" CONTENT="  OLE is a set of implemented services, mechanisms to customize these services, and mechanisms to install custom services according to various protocols. Every OLE API function and every currently-defined interface (that is, those found in shipping O...">
<META NAME="Product" CONTENT="Networking Issues">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBV8,QAB9,QAPN,QA9Q,QAW6,QABD,QABE,QABB,QA1S,QABA,QAB5,QBBS,QDN9,QA9N V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Purpose of All OLE APIs and Interfaces</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 6, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126157</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft OLE
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
OLE is a set of implemented services, mechanisms to customize these
services, and mechanisms to install custom services according to various
protocols. Every OLE API function and every currently-defined interface
(that is, those found in shipping OLE technologies) have a purpose in this
framework. Listed below are API functions and interfaces along with their
purposes, categorized in the following functional groups:

<UL><LI>General
<LI>Initialization and Memory Management
<LI>Remoting
<LI>Custom Services
<LI>Service Registration
<LI>DLL Server Management
<LI>Miscellaneous COM Functions
<LI>Naming (Monikers)
<LI>Structured Storage
<LI>Persistent Objects
<LI>Notifications/Events
<LI>Uniform Data Transfer
<LI>Viewable Objects
<LI>Standard Types
<LI>OLE Clipboard
<LI>OLE Drag &amp; Drop
<LI>Type Libraries
<LI>OLE Automation
<LI>OLE Property Pages
<LI>OLE Documents: General
<LI>OLE Documents: Handlers and Caching
<LI>OLE Documents: Embedding
<LI>OLE Documents: Linking
<LI>OLE Documents: In-Place Activation
<LI>OLE Documents: OLE 1 Compatibility
<LI>OLE Controls
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following list helps illustrate why the various APIs and interfaces
exist and includes the following information:
<P>
<PRE>   Functions: &lt;List of OLE API Functions and Interfaces&gt;
     Purpose: &lt;Purpose Description&gt;

</PRE>NOTE: The collection of functions in the OLE UI library is not included at
this time. Some recently-added interfaces are also missing.
<P>
<P><h3>GENERAL</h3>
 
<P>
Functions: IUnknown
<PRE>  Purpose: Control of object lifetime, interface negotiation. Ubiquitous
           for any component regardless of implementation. QueryInterface
           exposes incoming interfaces.

</PRE>Functions: IEnum
<PRE>  Purpose: Enumeration of various types of lists. Used in many cases
           throughout OLE.

</PRE>Functions: IProvideClassInfo
<PRE>  Purpose: Expose the type information about an object's incoming and
           outgoing interfaces.

</PRE>Functions: IConnectionPointContainer, IEnumConnectionPoints,
<PRE>           IConnectionPoint, IEnumConnections
  Purpose: Expose an object's outgoing interfaces.

</PRE><h3>Initialization and Memory Management</h3>
 
<P>
Functions: CoBuildVersion, OleBuildVersion
<PRE>  Purpose: Check OLE library version numbers.

</PRE>Functions: IMalloc
<PRE>  Purpose: Task memory allocation.

</PRE>Functions: CoInitialize, CoUninitialize, OleInitialize, OleUninitialize
<PRE>  Purpose: Initialize/Uninitialize COM/OLE libraries and installs an OLE-
           provided task allocator (most OLE implementations also allow
           installation of a custom allocator).

</PRE>Functions: CoCreateStandardMalloc
<PRE>  Purpose: Access standard task memory allocator.

</PRE>Functions: CoGetMalloc
<PRE>  Purpose: Access currently installed task allocator.

</PRE><h3>Remoting</h3>
 
<P>
Functions: IExternalConnection
<PRE>  Purpose: Notification - connection/disconnection from remote process.

</PRE>Functions: CoLockObjectExternal
<PRE>  Purpose: Lock a remote object implementation.

</PRE>Functions: CoDisconnectObject
<PRE>  Purpose: Forcibly disconnect any remote connections.

</PRE>Functions: IMarshal
<PRE>  Purpose: Standard marshaling (OLE impl); custom marshaling (custom impl).

</PRE>Functions: CoGetStandardMarshal
<PRE>  Purpose: Access standard implementation of IMarshal.

</PRE>Functions: IStdMarshalInfo
<PRE>  Purpose: Support for Custom Interfaces.

</PRE>Functions: CoMarshalHresult, CoUnmarshalHresult, CoMarshalInterface,
<PRE>           CoUnmarshalInterface, CoReleaseMarshalData
  Purpose: Helpers for marshaling both standard and custom.
           CoMarshalInterface, for example, is always called whenever any
           object needs to create the server-side remoting support for an
           interface pointer to a new object. CoUnmarshalInterface creates
           the client side to match.

</PRE>Functions: CoIsHandlerConnected
<PRE>  Purpose: Helper to determine if an in-process component is connected to a
           remote process.

</PRE>Functions: Custom Interface
<PRE>  Purpose: Installs a custom IMessageFilter implementation.

</PRE>Functions: IMessageFilter
<PRE>  Purpose: Helper functions for OLE 1 container document compatibility.

</PRE>Functions: CoRegisterMessageFilter
<PRE>  Purpose: Concurrency management handling interface. A default
           implementation is always installed when remoting occurs.

</PRE><h3>Custom Services</h3>
 
<P>
Functions: CoCreateInstance
<PRE>  Purpose: Access custom component implementation given a CLSID.

</PRE>Functions: IClassFactory[2]
<PRE>  Purpose: Creation of custom component based on CLSID.

</PRE>Functions: CoGetClassObject
<PRE>  Purpose: Access custom class factory implementation given a CLSID.

</PRE>Functions: DllGetClassObject
<PRE>  Purpose: Expose a custom class factory implementation from a DLL.

</PRE>Functions: CoRegisterClassObject, CoRevokeClassObject
<PRE>  Purpose: Install/remove a custom class factory implementation.

</PRE><h3>Service Registration</h3>
 
<P>
Functions: CoCreateGuid, IsEqualGUID, IsEqualIID, IsEqualCLSID
<PRE>  Purpose: Helper for creation and comparison of GUIDs.

</PRE>Functions: DllRegisterServer, DllUnregisterServer
<PRE>  Purpose: Expose self-registration functionality from a DLL server module.

</PRE>Functions: CoGetTreatAsClass, CoTreatAsClass, OleDoAutoConvert,
<PRE>           OleGetAutoConvert, OleSetAutoConvert, GetConvertStg,
           SetConvertStg
  Purpose: Conversion/Emulation manipulation (only customization is
           registry information that describes which classes are
           interchangeable).

</PRE><h3>DLL Server Management</h3>
 
<P>
Functions: DllCanUnloadNow
<PRE>  Purpose: Control DLL server unloading.

</PRE>Functions: CoLoadLibrary, CoFreeLibrary, CoFreeAllLibraries,
<PRE>           CoFreeUnusedLibraries
  Purpose: Load and unload in-process server modules.

</PRE><h3>Miscellaneous COM Functions</h3>
 
<P>
Functions: CLSIDFrom[ProgID | String], [ProgID | String]FromCLSID,
<PRE>           IIDFromString, StringFromIID, StringFromGUID2
  Purpose: Helper functions for conversion between GUIDs, strings, and
           ProgIDs.

</PRE>Functions: CoGetCurrentProcess
<PRE>  Purpose: Miscellaneous helper.

</PRE>Functions: CoDosDateTimeToFileTime, CoFileTimeToDosDateTime, CoFileTimeNow
<PRE>  Purpose: Miscellaneous helper functions for date/time conversion. (More
           appropriate to be a Win32 API).

</PRE>Functions: IsValidIid, IsValidInterface, IdValidPtrIn, IsValidPtrOut
<PRE>  Purpose: Miscellaneous validation functions (16-bit only).

</PRE><h3>Naming (Monikers)</h3>
 
<P>
Functions: IMoniker
<PRE>  Purpose: Exposes moniker functionality. OLE provides five moniker
           implementations (five different classes). Custom implementations
           can be exposed via object creation functions or custom API.

</PRE>Functions: BindMoniker
<PRE>  Purpose: Wrapper for IMoniker::BindToObject.

</PRE>Functions: CreateFileMoniker, CreateItemMoniker, CreateAntiMoniker,
<PRE>           CreatePointerMoniker, CreateGenericComposite
  Purpose: Access OLE standard moniker implementations.

</PRE>Functions: IParseDisplayName
<PRE>  Purpose: Implemented on a custom object to parse a user-readable display
           name into a moniker object, standard or custom.

</PRE>Functions: IOleContainer, IOleItemContainer
<PRE>  Purpose: While generally related to OLE Documents, these interfaces are
           implemented on an object that contains items and is necessary to
           bind item monikers.

</PRE>Functions: IBindCtx
<PRE>  Purpose: Implemented on the OLE standard "bind context" object.

</PRE>Functions: CreateBindCtx
<PRE>  Purpose: Instantiates a bind context object returning an IBindCtx
           pointer.

</PRE>Functions: IRunningObjectTable
<PRE>  Purpose: Exposed from the OLE implemented "running object table" service.
           No customizations.

</PRE>Functions: GetRunningObjectTable
<PRE>  Purpose: Access the running object table.

</PRE>Functions: MkParseDisplayName
<PRE>  Purpose: Converts a string into a moniker which includes the intelligence
           to determine whose implementation of IParseDisplayName to use.

</PRE>Functions: MonikerRelativePathTo, MonikerCommonPrefixWith
<PRE>  Purpose: Helpers to manipulate file monikers to create absolute and
           relative paths using IMoniker::RelativePathTo and
           IMoniker::CommonPrefixWith.

</PRE><h3>Structured Storage</h3>
 
<P>
Functions: IStorage
<PRE>  Purpose: Expose storage object functionality (directory).

</PRE>Functions: IStream
<PRE>  Purpose: Expose stream object functionality (files).

</PRE>Functions: IRootStorage
<PRE>  Purpose: Control underlying file attached to an IStorage in a Compound
           File.

</PRE>Functions: ILockBytes
<PRE>  Purpose: Customize underlying storage medium in a Compound File.

</PRE>Functions: StgCreateDocfile, StgOpenStorage
<PRE>  Purpose: Create or open OLE's Compound File (IStorage/IRootStorage)
           implementation using default file-based ILockBytes
           implementation.

</PRE>Functions: StgCreateDocfileOnILockBytes, StgOpenStorageOnILockBytes
<PRE>  Purpose: Create or open OLE's Compound File (IStorage/IRootStorage)
           implementation using a custom ILockBytes implementation.

</PRE>Functions: StgIsStorageFile, StgIsStorageILockBytes
<PRE>  Purpose: Checks if a file is a Compound File with the default
           implementation of ILockBytes or a custom implementation.

</PRE>Functions: CreateILockBytesOnHGlobal, GetHGlobalFromILockBytes
<PRE>  Purpose: Access memory-based ILockBytes implementation.

</PRE>Functions: CreateStreamOnHGlobal, GetHGlobalFromStream.
<PRE>  Purpose: Access memory-based IStream implementation.

</PRE>Functions: [Read | Write]Class[Stg | Stm], [Read | Write]FmtUserTypeStg,
<PRE>           GetClassFile
  Purpose: Retrieve or save CLSID, data format, and user type information
           to a storage or stream.

</PRE>Functions: StgSetTimes
<PRE>  Purpose: Helper function to manipulate Compound File timestamp.

</PRE><h3>Persistent Objects</h3>
 
<P>
Functions: IPersist, IPersistFile, IPersist-Storage, IPersistStream[Init]
<PRE>  Purpose: Expose from a persistent object based on storage model: file-
           based, IStorage-based, IStream-based (with or without
           initialization).

</PRE><h3>Notification/Events</h3>
 
<P>
Functions: IAdviseSink[2]
<PRE>  Purpose: Receive notifications of data change, view change, compound
           document object changes.

</PRE>Functions: IPropertyNotifySink
<PRE>  Purpose: Receive notifications of property changes and control
           overridable changes.

</PRE>Functions: Events sets
<PRE>  Purpose: Interfaces defined by an object, implemented by an outside
           event sink.

</PRE><h3>Uniform Data Transfer</h3>
 
<P>
Functions: IDataObject, (IAdviseSink), IEnumFORMATETC
<PRE>  Purpose: Expose ability to exchange formatted data structures and notify
           an advise sink of data changes.

</PRE>Functions: OleDuplicateData
<PRE>  Purpose: Helper function for copying data structures.

</PRE>Functions: ReleaseStgMedium
<PRE>  Purpose: Helper to free data structures.

</PRE><h3>Viewable Objects</h3>
 
<P>
Functions: IViewObject[2], (IAdviseSink)
<PRE>  Purpose: Expose ability to draw visual presentations to device contexts
           and notify an advise sink of view changes.

</PRE>Functions: OleDraw
<PRE>  Purpose: Simple wrapper around IViewObject::Draw.

</PRE>Functions: OleGetIconOfFile, OleMetafilePictFromIconAnd-Label,
<PRE>           OleGetIconOfClass
  Purpose: Helper function for manipulation of iconic views of objects.

</PRE>Functions: OleTranslateColor
<PRE>  Purpose: Helper to translates between COLORREF and OLE_COLOR types.

</PRE><h3>Standard Types</h3>
 
<P>
Functions: IFont, IFontDisp
<PRE>  Purpose: Exposes standard font object implementation (OLE Controls).

</PRE>Functions: OleCreateFontIndirect
<PRE>  Purpose: Accesses standard font object implementation.

</PRE>Functions: IPicture, IPictureDisp
<PRE>  Purpose: Exposes standard picture object implementation (OLE Controls).

</PRE>Functions: OleCreatePictureIndirect
<PRE>  Purpose: Accesses standard picture object implementation.

</PRE>Functions: OleLoadPicture
<PRE>  Purpose: Creates a picture object from stream information.

</PRE>Functions: OleIconToCursor
<PRE>  Purpose: Helper function to turn an icon into a cursor for simple Win32
           API based drag-and-drop (not OLE drag &amp; drop).

</PRE><h3>OLE Clipboard</h3>
 
<P>
Functions: OleSetClipboard, OleGetClipboard, OleFlushClipboard,
<PRE>           OleIsCurrentClipboard
  Purpose: API for clipboard handling service via IDataObject. No
           customization except for whatever IDataObject implementation is
           involved.

</PRE><h3>OLE Drag and Drop</h3>
 
<P>
Functions: IDropSource
<PRE>  Purpose: Exposes source-side functionality in a drag &amp; drop operation.

</PRE>Functions: IDropTarget
<PRE>  Purpose: Exposes target-side functionality in a drag &amp; drop operation.

</PRE>Functions: DoDragDrop
<PRE>  Purpose: Installs IDropSource (and IDataObject) implementations to begin
           a drag &amp; drop operation.

</PRE>Functions: RegisterDragDrop, RevokeDragDrop
<PRE>  Purpose: Installs/uninstalls a drop target implementation. Drop target is
           exposed to DoDragDrop only.

</PRE><h3>Type Libraries</h3>
 
<P>
Functions: ITypeLib, ITypeInfo
<PRE>  Purpose: Standard OLE implementations to navigate through a type library
           structure.

</PRE>Functions: ITypeComp
<PRE>  Purpose: Standard OLE implementation to bind to interface functions
           defined in a type library in a much more efficient manner,
           useful for compilers.

</PRE>Functions: LHashValOfName[Sys]
<PRE>  Purpose: Create a hash value used in ITypeComp functions.

</PRE>Functions: LoadTypeLib, LoadRegTypeLib, LoadTypeLibFromResource,
<PRE>           RegisterTypeLib, QueryPathOfRegTypeLib
  Purpose: Helpers for registering and loading a type library. Loading a
           type library means instantiating the type library object with
           ITypeLib on it. In other words, Load[Reg]TypeLib[FromResource]
           accesses the standard ITypeLib implementation.

</PRE>Functions: CreateTypeLib
<PRE>  Purpose: Creates a brand new type library (as opposed to loading an
           existing one). The type library implements ICreateTypeLib.
           Generally used from type library compilers.

</PRE>Functions: ICreateTypeLib, ICreateTypeInfo
<PRE>  Purpose: Implementations in OLE for creating a type library. Used from
           type library compilers.

</PRE>Functions: CreateDispTypeInfo
<PRE>  Purpose: Creates an type information object with ITypeInfo based on
           INTERFACEDATA structures.

</PRE>Functions: CompareStringA, LCMap-StringA, GetLocaleInfoA, Get-StringTypeA,
<PRE>           GetSystemDefault-[LangID | LCID], GetUser-Default[LangID | LCID]
  Purpose: Helper functions for working with locale-specific information in
           OLE Automation. These are primarily for Win16 platforms as the
           same functions are part of the standard Win32 API.

</PRE><h3>OLE Automation</h3>
 
<P>
Functions: IDispatch, IEnumVARIANT
<PRE>  Purpose: Expose methods and properties through a dispatch (DISPID)
           mechanism as well as "collections."

</PRE>Functions: CreateStdDispatch
<PRE>  Purpose: Installs a custom interface into a standard IDispatch
           implementation. In other words, accesses a standard IDispatch
           that internally depends on a custom interface implementation.

</PRE>Functions: DispGetIDOfNames, DispGetParams, DispInvoke
<PRE>  Purpose: Helper functions for direct implementations or uses of
           IDispatch.

</PRE>Functions: RegisterActiveObject, RevokeActiveObject, GetActiveObject
<PRE>  Purpose: Helper functions to register automation objects as running and
           access running object. Basically wrappers around the running
           object table.

</PRE>Functions: SafeArray- AccessData, AllocData, AllocDescriptor, Copy, Create,
<PRE>           Destroy, DestroyData, DestroyDescriptor, GetDim, GetElement,
           GetElemSize, GetLBound, GetUBound, Lock, PutElement, Redim,
           UnAccessData, Unlock
  Purpose: Helper functions for manipulating arrays passed through
           IDispatch.

</PRE>Functions: Sys- AllocString, AllocStringLen, FreeString, ReAllocString,
<PRE>           ReAllocStringLen, StringLen
  Purpose: Helper functions to manipulate BSTR types.

</PRE>Functions: Variant- ChangeType[Ex], Clear, Copy, CopyInf, Init,
<PRE>           TimeToDosDateTime; (DosDateTimeToVarantTime)
  Purpose: Helper functions to manipulate variables passed in VARIANT
           structures, such as type conversion and duplication.

</PRE><h3>OLE Property Pages</h3>
 
<P>
Functions: OleCreatePropertyFrame-[Indirect]
<PRE>  Purpose: Access standard implementation of a property page frame that
           implements IPropertyPageSite.

</PRE>Functions: IPropertyPageSite
<PRE>  Purpose: Expose capability as a property page frame.

</PRE>Functions: ISpecifyPropertyPages
<PRE>  Purpose: Expose CLSIDs of an object's property pages (which are separate
           objects).

</PRE>Functions: IPropertyPage[2]
<PRE>  Purpose: Expose property page functionality.

</PRE>Functions: IPerPropertyBrowsing
<PRE>  Purpose: Expose the ability to manipulate individual properties.

</PRE><h3>OLE Documents: General</h3>
 
<P>
Functions: OleRegGetUserType, OleRegGetMiscStatus, OleRegEnumFormatEtc,
<PRE>           OleRegEnumVerbs
  Purpose: Helper functions for default registry handling (OLE
           Documents, mostly).

</PRE>Functions: IRunnableObject
<PRE>  Purpose: Notifications of when an object is going between loaded and
           running.

</PRE>Functions: OleIsRunning, OleLockRunning, OleRun, OleNoteObjectVisible,
<PRE>           OleSetContainedObject
  Purpose: Helpers for control of running objects in compound documents.
           Most of these functions call IRunnableObject members.

</PRE>Functions: IOleAdviseHolder
<PRE>  Purpose: Helper functions for managing IAdviseSink pointers from within a
           compound document object implementation.

</PRE>Functions: CreateOleAdviseHolder
<PRE>  Purpose: Access OLE implementation of IOleAdviseHolder object. No
           customization.

</PRE>Functions: OleLoad, OleLoadFromStream, OleSave, OleSaveToStream
<PRE>  Purpose: Functions to load and save compound document objects in IStorage
           or IStream instances. Wrappers for IPersistStorage and
           IPersistStream calls.

</PRE>Functions: OleCreateStaticFromData
<PRE>  Purpose: Access OLE implementation of a static object.

</PRE><h3>OLE Documents: Handlers and Caching</h3>
 
<P>
Functions: OleCreateDefaultHandler, OleCreateEmbeddingHelper
<PRE>  Purpose: Access OLE implementation of default handler or "embedding
           helper" (a cut-rate default handler for same-process objects).

</PRE>Functions: IOleCache[2]
<PRE>  Purpose: Implemented by default provided by OLE, in-process handlers and
           servers in compound document uses can customize.

</PRE>Functions: CreateDataCache
<PRE>  Purpose: Access OLE's data cache implementation (service). Cache object
           implements a number of interfaces including IOleCache[2],
           IOleCacheControl, IDataObject, IViewObject[2], and
           IPersistStorage.

</PRE>Functions: IOleCacheControl
<PRE>  Purpose: Implemented in OLE's default handler to access remote server's
           IDataObject implementation. Used in OLE Documents.

</PRE><h3>OLE Documents: Embedding</h3>
 
<P>
Functions: IOleObject
<PRE>  Purpose: Expose compound document object functionality.

</PRE>Functions: IOleClientSite
<PRE>  Purpose: Provide container-side information and functions to compound
           document objects.

</PRE>Functions: OleCreate, OleCreate-FromData, OleCreateFromFile;
<PRE>           OleQueryCreateFromData
  Purpose: Access custom implementations of embedded compound document
           objects depending on where the source information exists).
           OleQueryCreate-FromData checks if OleCreateFromData will work.

</PRE><h3>OLE Documents: Linking</h3>
 
<P>
Functions: IOleLink
<PRE>  Purpose: Expose from in-process implementations of linked compound
           document objects (usually taken from OLE's default handler).

</PRE>Functions: OleCreateLink, OleCreateLinkFromData, OleCreateLinkToFile;
<PRE>           OleQueryCreateLinkFromData
  Purpose: Access custom implementations of linked compound document
           objects depending on where the source information exists).
           OleQueryCreate-LinkFromDat a checks if OleCreateLinkFromData
           will work.

</PRE>Functions: IOleContainer, IOleItemContainer
<PRE>  Purpose: Enumerate objects within a generic container (usually
           compound document container, but not necessarily).
           IOleItemContainer supports the additional step of binding an
           item moniker.

</PRE><h3>OLE Documents: In-Place Activation</h3>
 
<P>
Functions: IOleInPlaceObject, IOleInPlaceActiveObject
<PRE>  Purpose: Expose object-side functionality for in-place activation support
           (interfaces derive from IOleWindow).

</PRE>Functions: IOleInPlaceFrame, IOleInPlaceUIWindow, IOleInPlaceSite
<PRE>  Purpose: Expose container-side functionality for in-place activation
           support (interfaces derive from IOleWindow).

</PRE>Functions: OleCreateMenuDescriptor, OleDestroyMenuDescriptor,
<PRE>           OleSetMenuDescriptor, OleTranslateAccelerator
  Purpose: OLE-provided helper functions for in-place activation.

</PRE><h3>OLE Documents: OLE 1 Compatibility</h3>
 
<P>
Functions: CoIsOle1Class
<PRE>  Purpose: Helper to check if a class is an OLE 1 compound document object.

</PRE>Functions: OleConvertIStorageToOLE-STREAM[Ex],
<PRE>           OleConvertOLE-STREAMToIStorage[Ex]
  Purpose: Helper functions for a container providing compatibility with
           OLE 1 compound documents.

</PRE><h3>OLE Controls</h3>
 
<P>
Functions: IOleControl
<PRE>  Purpose: Expose OLE Control specifics to a container dealing with
           keyboard mnemonics and ambient property changes.

</PRE>Functions: IOleControlSite
<PRE>  Purpose: Expose OLE Control Container specifics to an OLE Control.

</PRE>Functions: ISimpleFrameSite
<PRE>  Purpose: Expose an OLE Control that is merely a visual frame around a set
           of other controls that filters messages going to the controls
           within it to provide group behavior for a set of controls (like
           radio buttons).
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbref<BR>
KBSubcategory: ntgeneral<BR>
Additional reference words: 1.00 2.00 wfwg win<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 6, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TCP Connection States and Netstat Output </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137984">
<META NAME="KBModify" CONTENT="1996/09/09">
<META NAME="KBCreate" CONTENT="1995/10/10">
<META NAME="Keywords" CONTENT="kbnetwork kbusage">
<META NAME="KBArea" CONTENT="Support; KB; crossnet">
<META NAME="Description" CONTENT="  This article describes TCP connection states and how to read Netstat (NETSTAT.EXE) output.  Before data transfer takes place in TCP, a connection must be established. TCP employs a three-way handshake (the details of this can be found in RFC793, Ch...">
<META NAME="Product" CONTENT="Networking Issues">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAI5,QBG2,QARL,QALS,QBWO,QAGB,QAH6,QDNT,QAXC,QAAW,QALQ,QDL9,QBWN,QAY2,QAWI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>TCP Connection States and Netstat Output</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 9, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137984</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows NT Workstation versions 3.5 and 3.51
<LI>Microsoft Windows NT Server versions 3.5 and 3.51
<LI>Microsoft TCP/IP-32 for Windows for Workgroups, version 3.11
<LI>Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes TCP connection states and how to read Netstat
(NETSTAT.EXE) output.
<P>
Before data transfer takes place in TCP, a connection must be established.
TCP employs a three-way handshake (the details of this can be found in
RFC793, Chapter 3: "Functional Specification").
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>TCP Connection States</h3>
 
<P>
Following is a brief explanation of this handshake. In this context the
"client" is the peer requesting a connection and the "server" is the peer
accepting a connection. Note that this notation does not reflect
Client/Server relationships as an architectural principal.

<OL><P><LI>Connection Establishment
<P>
   a. The client sends a SYN message which contains the server's port and
<P><PRE>      the client's Initial Sequence Number (ISN) to the server (active
      open).
</PRE><P>
   b. The server sends back its own SYN and ACK (which consists of the
<P><PRE>      client's ISN + 1).
</PRE><P>
   c. The Client sends an ACK (which consists of the server's ISN + 1).

<P><LI>Connection Tear-down (modified three way handshake).
<P>
   a. The client sends a FIN (active close). This is a now a half-closed
<P><PRE>      connection. The client does no longer sends data, but is still able
      to receive data from the server. Upon receiving this FIN, the server
      enters a passive close state.
</PRE><P>
   b. The server sends an ACK (which is the clients FIN sequence + 1)
<P>
   c. The server sends its own FIN.
<P>
   d. The client sends an ACK (which is server's FIN sequence + 1). Upon
<P><PRE>      receiving this ACK, the server closes the connection.
</PRE><P>
</OL>A half-closed connection can be used to terminate sending data while sill
receiving data. Socket applications can call shutdown with the second
argument set to 1 to enter this state.
<P>
<P><h3>Netstat Output</h3>
 
<P>
The above TCP connection states can be monitored in a network trace under
the TCP flags. It is also possible to determine the status of the
connection by running the Netstat utility and looking at the State column.
Netstat is shipped with Windows NT, Windows 95, and TCP/IP-32 for Windows
for Workgroups.
<P>
State explanations as shown in Netstat:
<P>
<PRE>State          Explanation
------------   --------------------------------------------------------

SYN_SEND       Indicates active open.

SYN_RECEIVED   Server just received SYN from the client.

ESTABLISHED    Client received server's SYN and session is established.

LISTEN         Server is ready to accept connection.
               NOTE: See documentation for listen() socket call. TCP
               sockets in listening state are not shown - this is a
               limitation of NETSTAT. For additional information, please
               see the following article in the Microsoft Knowledge Base:

                  ARTICLE-ID: <B><A HREF="../WINNT/Q134404.htm">Q134404</A></B>
                  TITLE     : NETSTAT.EXE Does Not Show TCP Listen Sockets

FIN_WAIT_1     Indicates active close.

TIMED_WAIT     Client enters this state after active close.

CLOSE_WAIT     Indicates passive close. Server just received first FIN
               from a client.

FIN_WAIT_2     Client just received acknowledgment of its first FIN from
               the server.

LAST_ACK       Server is in this state when it sends its own FIN.

CLOSED         Server received ACK from client and connection is closed.

</PRE></OL>As an example, consider the following scenario:
<P>
A socket application has been terminated, but Netstat reports the socket in
a CLOSE_WAIT state. This could indicate that the client properly closed the
connection (FIN has been sent), but the server still has its socket open.
This could be the result of one instance (among all threads or processes)
of the socket not being closed.
<P>
NOTE: It is normal to have a socket in the TIME_WAIT state for a long
period of time. The time is specified in RFC793 as twice the Maximum
Segment Lifetime (MSL). MSL is specified to be 2 minutes. So, a socket
could be in a TIME_WAIT state for as long as 4 minutes. Some systems
implement different values (less than 2 minutes) for the MSL.
<P>
Additional references:

<UL><LI>"Internetworking with TCP/IP, Volume 1" by Douglas Comer

<LI>"TCP/IP Illustrated, Volume 1" by Richard Stevens.

<LI>"Computer Networks" by Andrew Tanenbaum
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbnetwork kbusage<BR>
KBSubcategory: nttcp ntutil nthowto<BR>
Additional reference words: prodtcp prodnt 3.11 3.50 3.51 95 NtwkWinsock
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 9, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

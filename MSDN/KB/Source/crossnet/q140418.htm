

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Detailed Explanation of FAT Boot Sector </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140418">
<META NAME="KBModify" CONTENT="1996/09/09">
<META NAME="KBCreate" CONTENT="1995/11/29">
<META NAME="Keywords" CONTENT="kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; crossnet">
<META NAME="Description" CONTENT="  Understanding the content and function of a file system  boot sector  can be helpful when troubleshooting boot failures or disk corruption.  From time to time, usually due to hardware failure or virus infection, a boot sector may become corrupted. ...">
<META NAME="Product" CONTENT="Networking Issues">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDIV,QAKC,QAC9,QA7T,QA7O,QBWP,QA7N,QDIR,QBC6,QABX,QAH4,QAKD,QAMB,QAG8,QAFI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Detailed Explanation of FAT Boot Sector</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 9, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140418</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows NT operating system version 3.1
<LI>Microsoft Windows NT Advanced Server version 3.1
<LI>Microsoft Windows NT Workstation versions 3.5 and 3.51
<LI>Microsoft Windows NT Server versions 3.5 and 3.51
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Understanding the content and function of a file system "boot sector" can
be helpful when troubleshooting boot failures or disk corruption.
<P>
From time to time, usually due to hardware failure or virus infection, a
boot sector may become corrupted.  If the partition is the active primary
partition, or a partition containing operating system files, this can
prevent the system from starting.  Otherwise, it may simply prevent access
to data on the drive.
<P>
Usually, if you suspect disk corruption, it is best to use commercial anti-
virus or disk recovery software.  In some cases, however, detailed
knowledge of the boot sector can come in handy.
<P>
This article explains the various fields of a FAT boot sector.  Using the
following information, it may be possible to manually repair a damaged FAT
boot sector.  In order to attempt such a repair, disk editing tools capable
of editing raw disk sectors are required.  This article does not
discuss specific tools which can be used to perform such a repair
operations.
<P>
While every effort has been made to ensure the accuracy of the following
information, different operating systems, including future versions of
Microsoft operating systems, may use different data structures. Therefore
you should make use of the following information at your own risk.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Background and Terminology</h3>
 
<P>
In this document, a "file system boot sector" is the first physical sector
on a logical volume. A logical volume might be a primary partition, a
logical drive in an extended partition, or a composite of two or more
partitions, as is the case with mirrors, stripe sets, and volume sets.
<P>
On floppy disks, the boot sector is the first sector on the disk. In the
case of hard drives, the first sector is referred to as the "Master Boot
Record" or "MBR." This MBR is different from a file system boot sector and
contains a partition table, which describes the layout of logical
partitions on that hard drive. The file system boot sector would be the
first sector in one of those partitions.
<P>
<P><h3>The Boot Process</h3>
 
<P>
The boot process of 80x86-based personal computers (as opposed to RISC-
based systems) makes direct use of a file system boot sector for executing
instructions.  The initial boot process can be summarized as follows:

<OL><P><LI>Power On Self Test (or POST) initiated by system BIOS and CPU.
</OL>2. BIOS determines which device to use as the "boot device."
3. BIOS loads the first physical sector from the boot device into memory
<PRE>   and transfers CPU execution to the start of that memory address.

</PRE></OL>If the boot device is a hard drive, the sector loaded in step 3 is the MBR,
and the boot process proceeds as follows:

<OL><P><LI>MBR code loads the boot sector referenced by the partition table for
   the "active primary partition" into memory and transfers CPU execution
   to the start of that memory address.
<P>
</OL>Up to this point, the boot process is entirely independent of how the disk
is formatted and what operating system is being loaded.  From this point
on, both the operating and file systems in use play a part.
<P>
In the case of FAT volumes which have Windows NT installed, the FAT boot
sector is responsible for identifying the location of the file "NTLDR" on
the volume, loading it into memory, and transferring control to it.
<P>
<P><h3>Inside the FAT Boot Sector</h3>
 
<P>
Because the MBR transfers CPU execution to the boot sector, the first few
bytes of the FAT boot sector must be valid executable instructions for an
80x86 CPU.  In practice these first instructions constitute a "jump"
instruction and occupy the first 3 bytes of the boot sector.  This jump
serves to skip over the next several bytes which are not "executable."
<P>
Following the jump instruction is an 8 byte "OEM ID".  This is typically a
string of characters that identifies the operating system that formatted
the volume.
<P>
Following the OEM ID is a structure known as the BIOS Parameter Block, or
"BPB." Taken as a whole, the BPB provides enough information for the
executable portion of the boot sector to be able to locate the NTLDR file.
Because the BPB always starts at the same offset, standard parameters are
always in a known location.  Because the first instruction in the boot
sector is a jump, the BPB can be extended in the future, provided new
information is appended to the end.  In such a case, the jump instruction
would only need a minor adjustment.  Also, the actual executable code can
be fairly generic.  All the variability associated with running on disks of
different sizes and geometries is encapsulated in the BPB.
<P>
The BPB is stored in a packed (that is, unaligned) format. The following
table lists the byte offset of each field in the BPB. A description of each
field follows the table.
<P>
<PRE>Field               Offset     Length
-----               ------     ------
Bytes Per Sector      11         2
Sectors Per Cluster   13         1
Reserved Sectors      14         2
FATs                  16         1
Root Entries          17         2
Small Sectors         19         2
Media Descriptor      21         1
Sectors Per FAT       22         2
Sectors Per Track     24         2
Heads                 26         2
Hidden Sectors        28         4
Large Sectors         32         4

</PRE></OL>Bytes Per Sector: This is the size of a hardware sector and for most disks
in use in the United States, the value of this field will be 512.
<P>
Sectors Per Cluster: Because FAT is limited in the number of clusters (or
"allocation units") that it can track, large volumes are supported by
increasing the number of sectors per cluster.  The cluster factor for a FAT
volume is entirely dependent on the size of the volume.  Valid values for
this field are 1, 2, 4, 8, 16, 32, 64, and 128. Query in the Microsoft
Knowledge Base for the term "Default Cluster Size" for more information on
this subject.
<P>
Reserved Sectors: This represents the number of sectors preceding the start
of the first FAT, including the boot sector itself.  It should always have
a
value of at least 1.
<P>
FATs: This is the number of copies of the FAT table stored on the disk.
Typically, the value of this field is 2.
<P>
Root Entries: This is the total number of file name entries that can be
stored in the root directory of the volume.  On a typical hard drive, the
value of this field is 512.  Note, however, that one entry is always used
as a Volume Label, and that files with long file names will use up multiple
entries per file.  This means the largest number of files in the root
directory is typically 511, but that you will run out of entries before
that if long file names are used.
<P>
Small Sectors: This field is used to store the number of sectors on the
disk if the size of the volume is small enough.  For larger volumes, this
field has a value of 0, and we refer instead to the "Large Sectors" value
which comes later.
<P>
Media Descriptor: This byte provides information about the media being
used.  The following table lists some of the recognized media descriptor
values and their associated media.  Note that the media descriptor byte may
be associated with more than one disk capacity.
<P>
<PRE>Byte   Capacity   Media Size and Type
</PRE> 
<PRE>F0     2.88 MB    3.5-inch, 2-sided, 36-sector
F0     1.44 MB    3.5-inch, 2-sided, 18-sector
F9     720 KB     3.5-inch, 2-sided, 9-sector
F9     1.2 MB     5.25-inch, 2-sided, 15-sector
FD     360 KB     5.25-inch, 2-sided, 9-sector
FF     320 KB     5.25-inch, 2-sided, 8-sector
FC     180 KB     5.25-inch, 1-sided, 9-sector
FE     160 KB     5.25-inch, 1-sided, 8-sector
F8     -----      Fixed disk

</PRE>Sectors Per FAT: This is the number of sectors occupied by each of the FATs
on the volume.  Given this information, together with the number of FATs
and reserved sectors listed above, we can compute where the root directory
begins.  Given the number of entries in the root directory, we can also
compute where the user data area of the disk begins.
<P>
Sectors Per Track and Heads: These values are a part of the apparent disk
geometry in use when the disk was formatted.
<P>
Hidden Sectors: This is the number of sectors on the physical disk
preceding the start of the volume. (that is, before the boot sector itself)
It is used during the boot sequence in order to calculate the absolute
offset to the root directory and data areas.
<P>
Large Sectors: If the Small Sectors field is zero, this field contains the
total number of sectors used by the FAT volume.
<P>
Some additional fields follow the standard BIOS Parameter Block and
constitute an "extended BIOS Parameter Block." The next fields are:
<P>
<PRE>Field                  Offset   Length
-----                  ------   ------
Physical Drive Number    36        1
Current Head             37        1
Signature                38        1
ID                       39        4
Volume Label             43       11
System ID                54        8

</PRE>Physical Drive Number: This is related to the BIOS physical drive number.
Floppy drives are numbered starting with 0x00 for the A: drive, while
physical hard disks are numbered starting with 0x80.  Typically, you would
set this value prior to issuing an INT 13 BIOS call in order to specify the
device to access.  The on-disk value stored in this field is typically
0x00 for floppies and 0x80 for hard disks, regardless of how many physical
disk drives exist, because the value is only relevant if the device is a
boot device.
<P>
Current Head: This is another field typically used when doing INT13 BIOS
calls.  The value would originally have been used to store the track on
which the boot record was located, but the value stored on disk is not
currently used as such.  Therefore, Windows NT uses this field to store two
flags:

<UL><LI>The low order bit is a "dirty" flag, used to indicate that autochk
   should run chkdsk against the volume at boot time.
<LI>The second lowest bit is a flag indicating that a surface scan should
   also be run.
<P>
</UL>Signature: The extended boot record signature must be either 0x28 or 0x29
in order to be recognized by Windows NT.
<P>
ID: The ID is a random serial number assigned at format time in order to
aid in distinguishing one disk from another.
<P>
Volume Label: This field was used to store the volume label, but the volume
label is now stored as a special file in the root directory.
<P>
System ID: This field is either "FAT12" or "FAT16," depending on the format
of the disk.
<P>
On a bootable volume, the area following the Extended BIOS Parameter Block
is typically executable boot code.  This code is responsible for
performing whatever actions are necessary to continue the boot-strap
process.  On Windows NT systems, this boot code will identify the location
of the NTLDR file, load it into memory, and transfer execution to that
file.  Even on a non-bootable floppy disk, there is executable code in this
area.  The code necessary to print the familiar message,  Non-system disk
or disk error  is found on most standard, MS-DOS formatted floppy disks
that were not formatted with the  system  option.
<P>
Finally, the last two bytes in any boot sector always have the hexidecimal
values: 0x55 0xAA.
<P>
<P><h3>Troubleshooting</h3>
 
<P>
If you suspect that a FAT boot sector is corrupt, you can check several of
the fields listed above to see whether the values listed there make sense.
For example, BytesPerSector will be 512 in the vast majority of cases.  You
would also expect to see text strings in the executable code section of the
boot sector that are appropriate for the operating system that formatted
the disk.
<P>
Typical text strings on FAT volumes formatted by MS-DOS include: "Invalid
system disk."; "Disk I/O error."; "Replace the disk, and then press any
key"; "Non-System disk or disk error"; "Replace and press any key when
ready."; and "Disk Boot failure." Text strings on FAT volumes formatted by
Windows NT include: "BOOT: Couldn t find NTLDR."; "I/O error reading
disk."; and "Please insert another disk." You should not regard this list
as being all-inclusive. If you find other messages in the boot sector, this
does not necessarily indicate that there is a problem with the boot sector.
Different versions of MS-DOS and Windows NT will sometimes have slightly
different message strings in their boot sectors. On the other hand, if you
find no text whatsoever, or if the text is clearly not related to MS-DOS or
Windows NT, you should consider the possibility that your boot sector may
have been infected by a virus or that some other form of data corruption
may have taken place.
<P>
To recover from a boot sector that has been infected by a virus, it is
usually best to use a commercial anti-virus program.  Many viruses will do
much more than just write data to the boot sector, so manual repair of the
boot sector is not recommended, as it may not completely eliminate the
virus and in some cases, may do more harm than good.
<P>
If you suspect that the boot sector was damaged for some other reason, it
is usually best to use commercial disk recovery tools.  While it may be
possible to recover from boot sector damage without resorting to
reformatting the drive by manually modifying the fields described above,
manual editing of boot sectors should only be attempted as a last resort
and cannot be guaranteed to work in situations where other disk structures
may also have been damaged.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbhowto<BR>
KBSubcategory: nthowto<BR>
Additional reference words: 3.10 3.50 3.51 prodnt
<P>

<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 9, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The OSI Model's Seven Layers Defined and Functions Explained </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q103884">
<META NAME="KBModify" CONTENT="1997/02/25">
<META NAME="KBCreate" CONTENT="1993/09/01">
<META NAME="Keywords" CONTENT="kbnetwork">
<META NAME="KBArea" CONTENT="Support; KB; crossnet">
<META NAME="Description" CONTENT="...">
<META NAME="Product" CONTENT="Networking Issues">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATR,QAH6,QAIB,QAIA,QAVZ,QAEV,QASC,QAYC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>The OSI Model's Seven Layers Defined and Functions Explained</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q103884</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



The Open Systems Interconnect (OSI) model has seven layers. This
article describes and explains them, beginning with the 'lowest' in
the hierarchy (the physical) and proceeding to the 'highest' (the
application). The layers are stacked this way:
<P>
<PRE>     Application
     Presentation
     Session
     Transport
     Network
     Data Link
     Physical


</PRE><h2>PHYSICAL LAYER</h2>
 
<P>
The physical layer, the lowest layer of the OSI model, is concerned
with the transmission and reception of the unstructured raw bit stream
over a physical medium. It describes the electrical/optical,
mechanical, and functional interfaces to the physical medium, and
carries the signals for all of the higher layers. It provides:

<UL><LI>Data encoding: modifies the simple digital signal pattern
   (1s and 0s) used by the PC to better accommodate the
   characteristics of the physical medium, and to aid in bit
   and frame synchronization. It determines:
<P>
<P><PRE>    - What signal state represents a binary 1
    - How the receiving station knows when a "bit-time" starts
    - How the receiving station delimits a frame
</PRE>
<LI>Physical medium attachment, accommodating various possibilities
   in the medium:
<P>
<P><PRE>    - Will an external transceiver (MAU) be used to connect
      to the medium?
    - How many pins do the connectors have and what is each
      pin used for?
</PRE>
<LI>Transmission technique: determines whether the encoded bits
   will be transmitted by baseband (digital) or broadband
   (analog) signaling.

<LI>Physical medium transmission: transmits bits as electrical
   or optical signals appropriate for the physical medium, and
   determines:
<P>
<P><PRE>    - What physical medium options can be used
    - How many volts/db should be used to represent a given
      signal state, using a given physical medium
</PRE><P>
</UL><h2>DATA LINK LAYER</h2>
 
<P>
The data link layer provides error-free transfer of data frames from
one node to another over the physical layer, allowing layers above it
to assume virtually error-free transmission over the link. To do this,
the data link layer provides:

<UL><LI>Link establishment and termination: establishes and terminates
   the logical link between two nodes.

<LI>Frame traffic control: tells the transmitting node to
   "back-off" when no frame buffers are available.

<LI>Frame sequencing: transmits/receives frames sequentially.

<LI>Frame acknowledgment: provides/expects frame acknowledgments.
   Detects and recovers from errors that occur in the physical
   layer by retransmitting non-acknowledged frames and handling
   duplicate frame receipt.

<LI>Frame delimiting: creates and recognizes frame boundaries.

<LI>Frame error checking: checks received frames for integrity.

<LI>Media access management: determines when the node "has the
   right" to use the physical medium.
<P>
</UL><h2>NETWORK LAYER</h2>
 
<P>
The network layer controls the operation of the subnet, deciding which
physical path the data should take based on network conditions,
priority of service, and other factors. It provides:

<UL><LI>Routing: routes frames among networks.

<LI>Subnet traffic control: routers (network layer intermediate
   systems) can instruct a sending station to "throttle back"
   its frame transmission when the router's buffer fills up.

<LI>Frame fragmentation: if it determines that a downstream router's
   maximum transmission unit (MTU) size is less than the frame size,
   a router can fragment a frame for transmission and re-assembly at
   the destination station.

<LI>Logical-physical address mapping: translates logical addresses,
   or names, into physical addresses.

<LI>Subnet usage accounting: has accounting functions to keep
   track of frames forwarded by subnet intermediate systems,
   to produce billing information.
<P>
</UL><h3>Communications Subnet</h3>
 
<P>
The network layer software must build headers so that the network
layer software residing in the subnet intermediate systems can
recognize them and use them to route data to the destination address.
<P>
This layer relieves the upper layers of the need to know anything
about the data transmission and intermediate switching technologies
used to connect systems. It establishes, maintains and terminates
connections across the intervening communications facility (one or
several intermediate systems in the communication subnet).
<P>
In the network layer and the layers below, peer protocols exist
between a node and its immediate neighbor, but the neighbor may be a
node through which data is routed, not the destination station. The
source and destination stations may be separated by many intermediate
systems.
<P>
<P><h2>TRANSPORT LAYER</h2>
 
<P>
The transport layer ensures that messages are delivered error-free,
in sequence, and with no losses or duplications. It relieves the
higher layer protocols from any concern with the transfer of data
between them and their peers.
<P>
The size and complexity of a transport protocol depends on the type
of service it can get from the network layer. For a reliable
network layer with virtual circuit capability, a minimal transport
layer is required. If the network layer is unreliable and/or only
supports datagrams, the transport protocol should include extensive
error detection and recovery.
<P>
The transport layer provides:

<UL><LI>Message segmentation: accepts a message from the (session) layer
   above it, splits the message into smaller units (if not already
   small enough), and passes the smaller units down to the network
   layer. The transport layer at the destination station reassembles
   the message.

<LI>Message acknowledgment: provides reliable end-to-end message
   delivery with acknowledgments.

<LI>Message traffic control: tells the transmitting station to
   "back-off" when no message buffers are available.

<LI>Session multiplexing: multiplexes several message streams, or
   sessions onto one logical link and keeps track of which messages
   belong to which sessions (see session layer).
<P>
</UL>Typically, the transport layer can accept relatively large messages,
but there are strict message size limits imposed by the network (or
lower) layer. Consequently, the transport layer must break up the
messages into smaller units, or frames, prepending a header to each
frame.
<P>
The transport layer header information must then include control
information, such as message start and message end flags, to enable
the transport layer on the other end to recognize message boundaries.
In addition, if the lower layers do not maintain sequence, the
transport header must contain sequence information to enable the
transport layer on the receiving end to get the pieces back together
in the right order before handing the received message up to the layer
above.
<P>
<P><h3>End-to-end layers</h3>
 
<P>
Unlike the lower "subnet" layers whose protocol is between immediately
adjacent nodes, the transport layer and the layers above are true
"source to destination" or end-to-end layers, and are not concerned
with the details of the underlying communications facility. Transport
layer software (and software above it) on the source station carries
on a conversation with similar software on the destination station by
using message headers and control messages.
<P>
<P><h2>SESSION LAYER</h2>
 
<P>
The session layer allows session establishment between processes
running on different stations. It provides:

<UL><LI>Session establishment, maintenance and termination: allows
   two application processes on different machines to establish,
   use and terminate a connection, called a session.

<LI>Session support: performs the functions that allow these
   processes to communicate over the network, performing security,
   name recognition, logging, and so on.
<P>
</UL><h2>PRESENTATION LAYER</h2>
 
<P>
The presentation layer formats the data to be presented to the
application layer. It can be viewed as the translator for the network.
This layer may translate data from a format used by the application
layer into a common format at the sending station, then translate the
common format to a format known to the application layer at the
receiving station.
<P>
The presentation layer provides:

<UL><LI>Character code translation: for example, ASCII to EBCDIC.

<LI>Data conversion: bit order, CR-CR/LF, integer-floating point,
   and so on.

<LI>Data compression: reduces the number of bits that need to be
   transmitted on the network.

<LI>Data encryption: encrypt data for security purposes. For example,
   password encryption.
<P>
</UL><h2>APPLICATION LAYER</h2>
 
<P>
The application layer serves as the window for users and application
processes to access network services. This layer contains a variety of
commonly needed functions:

<UL><LI>Resource sharing and device redirection
<LI>Remote file access
<LI>Remote printer access
<LI>Inter-process communication
<LI>Network management
<LI>Directory services
<LI>Electronic messaging (such as mail)
<LI>Network virtual terminals
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbnetwork<BR>
KBSubCategory: msna
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Performance Monitor To Identify A Pool Leak </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130926">
<META NAME="KBModify" CONTENT="1998/02/12">
<META NAME="KBCreate" CONTENT="1995/05/30">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; winnt, crossnet, iis">
<META NAME="Description" CONTENT="  A memory leak occurs when a memory pool allocates some of its memory to a process and the process does not return the memory. When this happens repeatedly, the memory pool is depleted.  MORE INFORMATION  Finding a Pool Leak  To identify a pool leak...">
<META NAME="Product" CONTENT="Windows NT">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBW6,QAPN,QAW6,QBTX,QAU3,QALX,QAM9,QAMR,QAY5,QBWS,QADX,QBVV,QACK,QA2Q,QAX6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Performance Monitor To Identify A Pool Leak</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 12, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130926</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Windows NT operating system version 3.1
<LI>Microsoft Windows NT Advanced Server version 3.1
<LI>Microsoft Windows NT Workstation versions 3.5, 3.51, and 4.0
<LI>Microsoft Windows NT Server versions 3.5, 3.51, and 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A memory leak occurs when a memory pool allocates some of its memory to a
process and the process does not return the memory. When this happens
repeatedly, the memory pool is depleted.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Finding a Pool Leak</h3>
 
<P>
To identify a pool leak:

<OL><P><LI>Find a trend that shows pool memory is being allocated, and the
   available amount of pool memory is continuously being depleted.

<P><LI>Identify the process that is allocating the memory, but not returning
   it.
<P>
</OL><h3>Using Performance Monitor to Identify a Pool Leak</h3>
 
<P>
The Memory, Objects, and Processes objects should always be selected when
you are looking for a pool leak. All counters under each object should be
selected. Other object counters can also be selected to help you identify a
specific problem. You then simply view all charted objects until one or
more objects show a trend that could be a pool leak and then investigate
the problem.

<OL><P><LI>By charting the memory resources, it should be clear that one or more
   memory pools are allocating memory and the available memory in one or
   more memory pools is being continuously depleted. When charted, a memory
   pool may display a continuously climbing stair step effect while the
   process leaking memory is running. However, during times of inactivity,
   it is common to see the charted line remain flat. The charted line will
   continue stair pattern the next time the process leaking memory is
   started and run.

<P><LI>By charting the object counter Object - Threads, it should be evident
   that the thread count grows in a manor similar to the tagged pool memory
   allocs and bytes listed in step one. Depending on the amount of threads
   that are created, the object counter Object - Threads may jump to a high
   value immediately.

<P><LI>The object Processes should help determine which process is causing the
   leak. Object counters Pool Nonpaged Bytes, Pool Paged Bytes, and Thread
   Count should all be selected. Chart all instances of these counters. The
   process leaking memory should chart in a manor similar to the pool
   memory that was charted in step one.
<P>
</OL><h3>An Alternate Method for Identifying a Process that is Leaking Memory</h3>
 
<P>
Although Performance Monitor usually provides the necessary information to
determine which process is creating a pool leak, it does not always provide
the information necessary to determine the exact cause of a memory leak.
A trend can often be identified that shows a memory leak, but an exact
process may not be identifiable as the cause of the memory leak.
<P>
If the process leaking memory is a service, you can identify the
process using Control Panel (Services) and Performance Monitor:

<OL><P><LI>If the process has been running long enough to show signs of the memory
   leak, use Performance Monitor to chart the object counter Objects -
   Threads. The number of threads running will depend on many factors, but
   the number will grow larger as the process leaking memory continues to
   run.

<P><LI>Run Control Panel and choose Services.

<P><LI>Tile the windows so you can see both Control Panel and Performance
   Monitor.

<P><LI>Using Control Panel, start and stop the services one at a time.
<P>
</OL>If the process that is leaking memory has been running long enough, there
will be a drastic reduction in threads when that process is stopped.
<P>
NOTE: The process leaking memory does not have to be a service to use this
method. If the process leaking memory is a regular program, closing the
program will also cause the thread count to drop.
 
Version           : WinNT:3.1,3.5,3.51,4.0</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 12, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

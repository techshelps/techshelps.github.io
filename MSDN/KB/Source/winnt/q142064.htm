

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RPC Authentication Option Under Windows NT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142064">
<META NAME="KBModify" CONTENT="1996/02/13">
<META NAME="KBCreate" CONTENT="1996/01/03">
<META NAME="Keywords" CONTENT="kbnetwork">
<META NAME="KBArea" CONTENT="Support; KB; winnt, crossnet, iis">
<META NAME="Description" CONTENT="  This article discuss the authentication options available under Windows NT for a RPC Client-Server application.   MORE INFORMATION  Currently there are two methods that can be used to add security to a RPC Client-Server application.  Microsoft RPC ...">
<META NAME="Product" CONTENT="Windows NT">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QAGI,QAAD,QAK7,QARL,QAH6,QAIF,QA3P,QASC,QAHT,QAVY,QAUJ,QBV8,QBXJ,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>RPC Authentication Option Under Windows NT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 13, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142064</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows NT Workstation versions 3.5 and 3.51
<LI>Microsoft Windows NT Server versions 3.5 and 3.51
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discuss the authentication options available under Windows NT
for a RPC Client-Server application.
<P>
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Currently there are two methods that can be used to add security to a RPC
Client-Server application.
<P>
Microsoft RPC can use the security features of Windows NT which are built
into the name pipes (ncacn_np) and local RPC (ncalrpc) transports. However
this restrict the application to use only one of the two listed transports.
To impersonate the remote client Using Name Pipes as the RPC "Protocol
Sequence", The server-side process simply calls the Win32
RpcImpersonateClient() function. This function resolves through the RPC
runtime to an ImpersonateNamePipeClient() call. To un-ipmersonate the
client the RPC server-side process simply call the RpcRevertToSelf()
function. The function will resolve through the RPC runtime to
RevertToSelf() call.
<P>
The other option is to use an RPC accessible Security Package for
"Authenticated RPC", This form of security is transport independent, so
your application can use other transports in addition to the named pipes
and local RPC. Currently the only security packaged supported in Windows NT
is the Windows NT Security service.
<P>
On client systems you can use the RPC security by including the
RpcBindingSetAuthInfo() call in the client program. This routine places the
client identity information into the binding handle which is passed to the
server as the first parameter in a remote procedure call. Servers extract
the client authentication information from the client binding handle using
the RpcBindingInqAuthClient() call. This will identify the authentication
service to be used (Windows NT Security service only) and the
authentication level desired.
<P>
The server system supplies its identity information to the client by
registering itself with RpcServerRegisterAuthInfo() call. Clients or other
servers can extract this information to authenticate the server identity.
Use the RpcBindingInqAuthInfo() call to extract the server authentication
from the server binding handle.
<P>
Generally the transport level security built into the named pipes and local
RPC does not necessarily add lots of new code to an application, However if
you want to use security over transport other then named pipes and Local
RPC ( For Instance TCP/IP or IPC/SPX), you must use the RPC security
features which can require extra programming overhead.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbnetwork<BR>
KBSubcategory: nthowto<BR>
Additional reference words: prodnt 3.50 3.51<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 13, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

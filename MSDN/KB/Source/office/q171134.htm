

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OFF97: CALL Statement Cannot Accept Variable Argument </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171134">
<META NAME="KBModify" CONTENT="1997/07/15">
<META NAME="KBCreate" CONTENT="1997/07/08">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; office, convert, crossnet, odbc, access, word, excel, powerpt, outlook, winprint, setup, exchange">
<META NAME="Description" CONTENT="  In Word, you can use the Visual Basic for Applications CALL statement to run another subroutine; however, you cannot specify the name of the subroutine by using a string variable or concatenated strings. Attempting to do so may result in the follow...">
<META NAME="Product" CONTENT="Office">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBS0,QAH4,QAPN,QAIF,QAB9,QAYL,QAUJ,QAH6,QAHE,QAAP,QAB4,QAJH,QA5F,QAMA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OFF97: CALL Statement Cannot Accept Variable Argument</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 15, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171134</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic for Applications included with:
<P>
<P><PRE>    - Microsoft Word 97 for Windows
    - Microsoft PowerPoint 97 for Windows
    - Microsoft Excel 97 for Windows
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Word, you can use the Visual Basic for Applications CALL statement to
run another subroutine; however, you cannot specify the name of the
subroutine by using a string variable or concatenated strings. Attempting
to do so may result in the following error:
<P>
<PRE>   Compile Error: Syntax error

</PRE><h2>WORKAROUND</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
In cases where the name of the macro originates from a string variable
(such as when you type information in a dialog box), you can use the
following macro code:
<P>
If A$ contains the name of the macro, use this statement:
<P>
<PRE>   Application.Run A$

</PRE>Or, if you are using literal strings:
<P>
<PRE>   Application.Run "Normal.Module1.MAIN"

   Application.Run "MyProject.MyModule.MyProcedure"

   Application.Run "'My Document.doc'!ThisModule.ThisProcedure"

</PRE>If you specify the document name, your code can run macros only in
documents related to the current context: it cannot run any macro in
any document.
<P>
Although Visual Basic code can call a macro directly (without using this
method), this method is useful when the macro name is stored in a
variable. The following two statements are functionally equivalent:
<P>
<PRE>   Normal.Module2.Macro1

   Application.Run MacroName:="Normal.Module2.Macro1"

</PRE>In cases where you call a literal string such as "AutoExec.Main," you
must remove the quotation marks, as shown in the following example:
<P>
<PRE>   CALL AutoExec.Main

</PRE>NOTE: You cannot pass parameters to a macro by using the Run method.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The CALL statement uses the following syntax to call another subroutine
<P>
<PRE>   CALL &lt;subroutinename&gt;

</PRE>where &lt;subroutinename&gt; is the name of the subroutine.
<P>
In Visual Basic for Applications, you can use the following command
<P>
<PRE>   Call [&lt;Template&gt;].[&lt;Module&gt;].&lt;Macro_or_ProcedureName&gt;

</PRE>where &lt;Template&gt; is the name of the template, &lt;Module&gt; is the name of the
module, and &lt;Macro_or_ProcedureName&gt; is the name of the macro or procedure.
<P>
In all cases, the argument for the CALL statement must be explicitly
defined. For example, both
<P>
<PRE>   CALL A$

   -and-

   CALL "AutoExec.main"

</PRE>cause the error:
<P>
<PRE>   Compile Error: Syntax error

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about the Call statement, please see the following
articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../URJump.htm">Q164058</A></B>
   TITLE     : Passing Procedure Arguments in Visual Basic for Applications

   ARTICLE ID: <B><A HREF="../vbapps/Q165518.htm">Q165518</A></B>
   TITLE     : Calling Macros Using OLE from MS Visual Basic for
               Applications

   ARTICLE ID: <B><A HREF="../vbapps/Q114696.htm">Q114696</A></B>
   TITLE     : Error Using Call Statement with Function Procedure

</PRE>For more information about the Call Statement, switch to the Visual Basic
Editor, click the Office Assistant, type "Call," click Search, and then
click to view "Call Statement."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: offcon vb vba vbe<BR>
Keywords            : kbprg<BR>
Version             : 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 15, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

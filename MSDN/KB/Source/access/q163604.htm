

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Manipulating ZIP Codes in Microsoft Access </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q163604">
<META NAME="KBModify" CONTENT="1997/05/21">
<META NAME="KBCreate" CONTENT="1997/02/12">
<META NAME="Keywords" CONTENT="ExrStrg FmsHowto GnlDe GnlFrmt GnlInpt IntpPrtm kbusage MdlEdit">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  You can manipulate ZIP codes in Microsoft Access by changing the data type, input mask, or format of a ZIP Code field. This article shows you how to manipulate ZIP codes that are...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBTQ,QDOG,QA1S,QAH4,QAXB,QDN9,QAEF,QAUR,QADK,QA7O,QAUD,QAC1,QBD2,QA7N,QA5V P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Manipulating ZIP Codes in Microsoft Access</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q163604</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
You can manipulate ZIP codes in Microsoft Access by changing the data type,
input mask, or format of a ZIP Code field. This article shows you how to
manipulate ZIP codes that are already stored in a table and how to format
ZIP codes when you enter them on a form.
<P>
This article contains the following sections:

<UL><LI>Creating the PostalCodeExample Table Used in this Article
<LI>Restoring Leading Zeros That Are Missing
<LI>Saving Formatted ZIP Codes
<LI>Removing Trailing Dashes from Existing ZIP Codes
<LI>Inserting Dashes in Existing Nine-Digit (ZIP+4) ZIP Codes
<LI>Formatting ZIP Codes for Use in Reports or for Use by Other
   Applications
<P>
</UL>Portions of this article assume that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Creating the PostalCodeExample Table Used in this Article</h3>
 
<P>
The following example table is used in this article. Follow these steps to
create the table:

<OL><P><LI>Start Microsoft Access and create a new blank database.

<P><LI>Create the following new table in Design view:
<P>
<P><PRE>       Table: PostalCodeExample
       -----------------------
       Field Name: PCode
<PRE></PRE>          Data Type: Text

</PRE><P><LI>Save the PostalCodeExample table. Do not create a primary key.
<P>
</OL><h3>Restoring Leading Zeros That Are Missing</h3>
 
<P>
Store ZIP codes in a Text field in your table rather than in a Number
field. Microsoft Access follows standard mathematical conventions when
storing numeric data, so if you enter a ZIP code that contains leading
zeros in a Number field, Microsoft Access removes the leading zeros when
you save the data. For example, if you enter 01002 in a Number field,
Microsoft Access stores the number as 1002.
<P>
Follow these steps to restore leading zeros to ZIP codes that have been
stored in a Number field:

<OL><P><LI>Open the PostalCodeExample table in Datasheet view and enter the
   following five- and nine-digit ZIP Code records:
<P>
<P><PRE>       PCode
       ---------
       00345
       023456789
</PRE>
<P><LI>Open the PostalCodeExample table in Design view.

<P><LI>Change the data type of the PCode field to Number, and set the Field
   Size property to Long Integer.

<P><LI>Save the table and open it in Datasheet view. Note that the leading
   zeros have been removed.

<P><LI>Open the PostalCodeExample table in Design view and change the data
   type of the PCode field to Text again so it can store the restored
   leading zeros in your ZIP codes. Save the table.

<P><LI>Create the following update query in Design view based on the
   PostalCodeExample table.
<P>
   NOTE: In this query definition, an underscore (_) at the end of the
   Update To line is used as a line-continuation character. Remove the
   underscore from the end of the line when you create this query.
<P>
<P><PRE>       Query: RestoreLeadingZeros
       ------------------------------------------------------------
       Type:  Update Query
</PRE><P>
<P><PRE>       Field: PCode
<PRE></PRE>          Table: PostalCodeExample
          Update To: IIf(Len([PCode])&lt;6, Format([PCode],"00000"), _
                     Format([PCode],"000000000"))

</PRE><P><LI>Run the query and confirm the update when prompted. Open the
   PostalCodeExample table in Datasheet view. Note that the leading
   zeros have been restored.
<P>
</OL><h3>Saving Formatted ZIP Codes</h3>
 
<P>
The Input Mask Wizard helps you to create an input mask for ZIP codes that
stores a dash after the fifth digit as a literal character. However, when
the dash is stored as a literal character, it is saved in all ZIP codes,
whether it is a five- or nine-digit code. The U.S. Postal Service will
accept ZIP codes with trailing dashes, but you may want to avoid trailing
dashes for aesthetic reasons.
<P>
If you omit the input mask, you can avoid trailing dashes in your 5-digit
ZIP codes. Then you can either manually include the dash when you enter
nine-digit (ZIP+4) ZIP codes, or you can use a form to programmatically
insert the dash after a nine-digit (ZIP+4) ZIP code has been entered. In
either case, you also gain the ability to enter foreign postal codes in
your table.
<P>
Follow these steps to create a form that will programmatically insert a
dash when a nine-digit (ZIP+4) ZIP Code is entered:

<OL><P><LI>Create a new form based on the PostalCodeExample table using the
   AutoForm: Columnar Wizard in Microsoft Access 97 and 7.0, or the
   AutoForm Wizard in Microsoft Access 2.0.

<P><LI>Save the form as frmFormatZIP, and then switch it to Design view.

<P><LI>On the View menu, click Code.

<P><LI>Type the following line in the Declarations section of the form's class
   module:
<P>
<P><PRE>       Dim mvarZip
</PRE>
<P><LI>Type the following procedures:
<P>
<P><PRE>      Private Sub PCode_AfterUpdate()
<PRE></PRE>         If IsEmpty(mvarZip) Then Exit Sub
         If Len(mvarZip) = 6 Then
            Screen.ActiveControl = Left(mvarZip, Len(mvarZip)-1)
         Else
            Screen.ActiveControl = Format(mvarZip, "@@@@@-@@@@")
         End If
         mvarZip = Empty
      End Sub

      Private Sub PCode_BeforeUpdate(Cancel As Integer)
         Dim ctlZip As Control
         Dim strTitle As String
         Dim strMsg As String
         Const cYesNoButtons = 4
         Const cNoChosen = 7

         mvarZip = Empty
         Set ctlZip = Screen.ActiveControl

         If ctlZip Like "#####-####" Or ctlZip Like "#####" Then
            Exit Sub
         ElseIf ctlZip Like "#########" Or ctlZip Like "#####-" Then
            mvarZip = ctlZip
         Else
            strTitle = "Not a ZIP Code."
            strMsg = "Save as entered?"
            If MsgBox(strMsg, cYesNoButtons, strTitle) = cNoChosen Then
               Cancel = True
            End If
         End If
      End Sub

</PRE><P><LI>Switch the form to Form view, and add the following new records:
<P>
<P><PRE>       PCode
       ---------
       01234
       987651011
       WA1 1DP
       1010
</PRE><P>
   Note that when you enter WA1 1DP and 1010, you are prompted whether you
   want to save the ZIP Codes as entered. Click Yes.

<P><LI>Save and close the frmFormatZIP form, and then open the
   PostalCodeExample table in Datasheet view. Note that the five-digit ZIP
   code you entered does not contain a dash, the nine-digit ZIP code you
   entered does contain a dash, and the other two records you entered are
   stored as entered.
<P>
</OL><h3>Removing Trailing Dashes from Existing ZIP Codes</h3>
 
<P>
You can use an update query to remove trailing dashes from existing ZIP
codes. Follow these steps to remove the trailing dashes:

<OL><P><LI>Open the PostalCodeExample table in Datasheet view and enter the
   following records:
<P>
<P><PRE>       PCode
       ----------
       12345-
       987654321
       12345-6789
</PRE>
<P><LI>Create the following update query in Design view based on the
   PostalCodeExample table:
<P>
<P><PRE>       Query: RemoveTrailingDashes
       -------------------------------------------
       Type: Update Query
</PRE><P>
<P><PRE>       Field: [PCode] Like "#####-"
<PRE></PRE>          Criteria: True
       Field: PCode
          Table: PostalCodeExample
          Update To: Left([PCode], Len([PCode])-1)

</PRE><P><LI>Run the query and confirm the update when prompted.

<P><LI>Open the PostalCodeExample table in Datasheet view. Note that the
   trailing dash after 12345 has been removed.
<P>
</OL><h3>Inserting Dashes in Existing Nine-Digit (ZIP+4) ZIP Codes</h3>
 
<P>
You can use an update query to insert missing dashes in nine-digit ZIP
codes. Follow these steps to insert a dash in nine-digit ZIP codes:

<OL><P><LI>Open the PostalCodeExample table in Datasheet view and enter the
   following records:
<P>
<P><PRE>       PCode
       ----------
       12345
       987654321
       12345-6789
</PRE>
<P><LI>Create the following update query in Design view based on the
   PostalCodeExample table:
<P>
<P><PRE>       Query:  InsertDashes
       ------------------------------------------
       Type:  Update Query
</PRE><P>
<P><PRE>       Field: [PCode] Like "#########"
<PRE></PRE>          Criteria: True
       Field: PCode
          Update To: Format([PCode],"@@@@@-@@@@")

</PRE><P><LI>Run the query and confirm the update when prompted.

<P><LI>Open the PostalCodeExample table in Datasheet view. Note that the
   nine-digit (ZIP+4) ZIP codes all contain dashes after the fifth digit.
<P>
</OL><h3>Formatting ZIP Codes for Use in Reports or for Use by Other Applications</h3>
 
<P>
You can use your ZIP codes in a Microsoft Access report or in another
application (such as Microsoft Word) without modification if they already
are saved in the desired format. Earlier sections in this article
demonstrate how to change the way your existing ZIP code formats are stored
in the table. However, if you want to format ZIP codes without changing the
way they are stored, you can follow these steps to temporarily create the
ZIP code format you want to use.
<P>
Follow these steps to display formatted ZIP codes in a select query:

<OL><P><LI>Open the PostalCodeExample table in Datasheet view and enter the
   following records:
<P>
<P><PRE>       PCode
       ----------
       54321
       12345-
       987654321
       12345-6789
</PRE>
<P><LI>Create the following query in Design view based on the PostalCodeExample
   table.
<P>
   NOTE: In this query definition, an underscore (_) at the end of the
   Field line is used as a line-continuation character. Remove the
   underscore from the end of the line when you create this query.
<P>
<P><PRE>       Query:  FormatZIPCodes
       ----------------------------------------------------------------
       Type:  Select Query
</PRE><P>
<P><PRE>       Field: Postal Code: IIf([PCode] Like "#####-", Left([PCode], _
<PRE></PRE>                           Len([PCode])-1), IIf([PCode] Like _
                           "#########",Format([PCode], "@@@@@-@@@@"), _
                           [PCode]))

</PRE><P><LI>Run the query. Note that trailing dashes are not displayed and that a
   dash appears after the fifth digit in nine-digit ZIP codes. You can use
   this query instead of your table when you create your report or
   share the data with another application. This select query displays
   formatted ZIP codes but it does not alter your table's existing ZIP code
   data.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about update queries, search the Help Index for
"update queries."
<P>
For more information about the Format() function, search the Help Index for
"Format function" or "Format$ function."
<P>
For more information about input masks, search the Help Index for "input
masks."
<P>
For more information about using Microsoft Access data in Microsoft Word,
search the Help Index for "Word (Microsoft)."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: merge merging postal code<BR>
Keywords            : ExrStrg FmsHowto GnlDe GnlFrmt GnlInpt IntpPrtm kbusage MdlEdit<BR>
Version             : 2.0 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

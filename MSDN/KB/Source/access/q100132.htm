

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Four Ways to Move to a Record from a Combo Box Selection </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100132">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1993/06/16">
<META NAME="Keywords" CONTENT="FmsCmbo kbusage kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article lists four different methods of moving to a specific record based on a combo box selection.   Method 1: In the AfterUpdate property of the combo box, call a macro   ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QA1S,QA7O,QA5V,QDN9,QBT6,QAHP,QBV4,QA7N,QBXS,QBE7,QBE6,QA2O,QAMN,QABA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Four Ways to Move to a Record from a Combo Box Selection</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100132</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article lists four different methods of moving to a specific record
based on a combo box selection.
<P>
<PRE> Method 1: In the AfterUpdate property of the combo box, call a macro
           using the FindRecord action.

 Method 2: In the AfterUpdate property of the combo box, call a macro
           using the ApplyFilter action.

 Method 3: Use a Form/Subform, with the combo box in the main form and
           the data in the subform, bound by the LinkMasterFields and
           LinkChildFields properties.

 Method 4: Base the form on a query joining two tables and bind the combo
           box to the field that controls the join, using the AutoLookup
           technique.

</PRE>These four methods are outlined in the "More Information" section and are
based on the sample database Northwind.mdb (or NWIND.MDB in Microsoft
Access 2.0 or earlier).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following table compares the features (benefits and drawbacks) of
the four methods:
<P>
<PRE>   Method Number:                  1   2   3   4
   ---------------------------------------------
   Requires no code/macros                 x   x
   Saves on subforms               x   x       x
   Can scroll to other records     x       x   x
   Does not require a query        x   x   x
   Can edit records                x   x   x

</PRE>NOTE: These methods can also apply to text boxes.
<P>
<P><h3>Method 1 (For Microsoft Access 97 and 7.0)</h3>
 

<OL><P><LI>Create a form called frmComboTest based on the Products table, and set
   the form's DefaultView property to Single Form.

<P><LI>Add an unbound combo box using the Control Wizard. Make sure that
   the Control Wizards button is depressed in the toolbox before
   creating the combo box. In the Control Wizard dialog box, follow these
   steps:
<P>
<P><PRE>    a. Click the "Find a record on my form based on the value I selected in
       my combo box" button, and then click Next.
</PRE><P>
<P><PRE>    b. Include the ProductID and ProductName fields, and then click Next.
</PRE><P>
<P><PRE>    c. Click Finish.
</PRE><P>
   The Control Wizard creates an event procedure similar to the following:
<P>
<PRE>      Sub ComboNN_AfterUpdate()
         'Find the record that matches the control.
         Me.RecordsetClone.Findfirst "[ProductID] = " &amp; Me![ComboNN]
         Me.Bookmark = Me.RecordSetClone.Bookmark
      End Sub

</PRE><P><LI>View the frmComboTest form in Form view. Note that when you choose a
   product name in the combo box, you are moved to the record selected.
<P>
   (NOTE: This event procedure can also be used in Microsoft Access 2.0.)
<P>
</OL><h3>Method 1 (For all versions)</h3>
 

<OL><P><LI>Create a form called frmComboTest based on the Products table, and set
   the DefaultView property to Single Form.

<P><LI>Add the following text box to the form:
<P>
<P><PRE>      Text Box
      ------------------------
      ControlName: ProductID
      ControlSource: ProductID
      Visible: Yes
</PRE><P>
   NOTE: There is a space in the Product ID field in Microsoft Access 2.0
   and earlier.
<P>
   NOTE: Include at least the ProductID field on the new form. However,
   additional fields may help to illustrate that you have changed
   records based on the value selected in the combo box.

<P><LI>Add an unbound combo box called cboLookup, and set the control's
   properties as follows. The combo box can be located anywhere on the
   form, but preferably in the form header or footer.
<P>
<P><PRE>      Combo Box
      ------------------------------
      ControlName: cboLookup
      ControlSource: &lt;leave blank&gt;
      RowSourceType: Table/Query
      RowSource: Products
      ColumnCount: 4
      ColumnWidths: 0";2"
      BoundColumn: 1
      After Update: mcrLocateProduct
</PRE><P>
   NOTE: If you are using Microsoft Access 2.0 or earlier, set the
   ColumnWidths property to the following value: 0";0";0";2".

<P><LI>Create the following new macro called mcrLocateProduct:
<P>
<PRE>      Macro Name        Action
      -----------------------------
      mcrLocateProduct  GoToControl
                        FindRecord

      mcrLocateProduct  Actions
      ---------------------------
      GoToControl
         ControlName: [ProductID]
      FindRecord
         Find What: =cboLookup
         Find First: Yes

</PRE><P><LI>View the frmComboTest form in Form view. Note that when you choose a
   product name in the combo box, you are moved to the record selected and
   the appropriate ProductID is displayed.
<P>
</OL>NOTE: An example of this method is illustrated with the Products And
Suppliers form in NWIND.MDB in Microsoft Access 2.0.
<P>
<P><h3>Method 2 (For Microsoft Access 97 and 7.0)</h3>
 

<OL><P><LI>Create a form called frmComboTest based on the Products table, and set
   the form's DefaultView property to Single Form.

<P><LI>Set the following property for the frmComboTest form:
<P>
<P><PRE>      Filter: [ProductName] = Forms![frmComboTest]![cboLookup]
</PRE>
<P><LI>Add an unbound combo box called cboLookup, and set the control's
   properties as follows. The combo box can be located anywhere on the
   form, but preferably in the form header or footer.
<P>
<P><PRE>      Combo Box
      ----------------------------------------------
      ControlName: cboLookup
      ControlSource: &lt;leave blank&gt;
      RowSourceType: Table/Query
      RowSource: Select [ProductName] from Products;
      BoundColumn: 1
      ColumnWidths: 1"
      AfterUpdate: mcrLocateProduct
</PRE>
<P><LI>Create the following macro called mcrLocateProduct:
<P>
<PRE>      Macro Name          Action
      ----------------------------
      mcrLocateProduct    SetValue
                          Requery

      mcrLocateProduct Actions
      --------------------------------------
      SetValue
         Item: Forms![frmComboTest].FilterOn
         Expression: True

</PRE></OL>When you open frmComboTest and select a product name from the cboLookup
combo box, the filter will be set to that value.
<P>
<P><h3>Method 2 (For all versions)</h3>
 

<OL><P><LI>Repeat steps 1, 2, and 3 from Method 1 (For all versions).

<P><LI>Create the following macro called mcrLocateProduct:
<P>
<PRE>      Macro Name          Action
      -------------------------------
      mcrLocateProduct    ApplyFilter

      mcrLocateProduct Actions
      -----------------------------------------------------
      ApplyFilter
         Where:[ProductID]=Forms![frmComboTest]![cboLookup]

</PRE></OL>The ProductID field (or Product ID in Microsoft Access 2.0 or earlier) is
the bound field in the combo box. While the combo box displays the
ProductName information, it is bound to (or, holds internally) the value of
the ProductID.
<P>
NOTE: This method is similar to the Suppliers form in NWIND.MDB in
Microsoft Access 2.0, which uses the buttons to filter records from A to Z.
Also, see the Alpha Apply Filter Buttons macro.
<P>
<P><h3>Method 3 (For all versions)</h3>
 

<OL><P><LI>Create a new form not based on any table or query. Add a combo box, and
   set the control's properties as follows:
<P>
<P><PRE>      Combo Box
      ----------------------------
      ControlName: cboLookup
      ControlSource: &lt;leave blank&gt;
      RowSourceType: Table/Query
      RowSource: Products
      ColumnCount: 4
      ColumnWidths: 0";2"
      BoundColumn: 1
</PRE><P>
   NOTE: If you are using Microsoft Access 2.0 or earlier, set the
   ColumnWidths property to the following value: 0";0";0";2".

<P><LI>Create a second form based on the Products table to use as a subform,
   and set the form's DefaultView property to Single Form.

<P><LI>Add the following text box to the form:
<P>
<P><PRE>      Text Box
      ------------------------
      ControlName: ProductID
      ControlSource: ProductID
      Visible: Yes
</PRE><P>
   NOTE: There is a space in the Product ID field in Microsoft Access 2.0
   or earlier.
<P>
   NOTE: Include at least the ProductID field on the new form. However,
   additional fields may help to illustrate that you have changed records
   based on the value selected in the combo box.

<P><LI>Save the form, and then use it to create a subform control on the first
   form by dragging it from the Database window to the detail section of
   the first form.

<P><LI>Set the subform control properties as follows:
<P>
<P><PRE>      Subform
      ----------------------------
      LinkChildFields: [ProductID]
      LinkMasterFields: cboLookup
</PRE><P>
</OL>By changing the value in cboLookup, Microsoft Access ensures that the
records in the subform match the combo box.
<P>
The Orders form in Northwind.mdb in Microsoft Access 97 and 7.0 (or
NWIND.MDB Microsoft Access 2.0 or earlier) illustrate this method. The
Order Details subform is related by the LinkMasterFields and
LinkChildFields properties.
<P>
<P><h3>Method 4 (For all versions)</h3>
 

<OL><P><LI>Create a table called tblProductSelect, containing a single field
   ProductID (or Product ID in Microsoft Access 2.0 and earlier). Set the
   Data Type to Number and the Field Size to Long Integer. No primary key
   is necessary.

<P><LI>Create a single blank record.

<P><LI>Create the following query called qryProductSelect, based on a join
   between the ProductID fields of the tblProductSelect and Products
   tables. Include the following attributes in the query:
<P>
<P><PRE>      Query: qryProductSelect
      -----------------------------------------------
      Field: ProductID
      Table Name: tblProductSelect
      Show: X (checked on)
</PRE><P>
<P><PRE>      Field: &lt;any other fields you are interested in&gt;
      TableName: Products
</PRE>
<P><LI>Create a form based on qryProductSelect, and add all fields. You must
   add at least the ProductID field.

<P><LI>Delete the text box control for ProductID and recreate it as a
   combo box, as follows:
<P>
<P><PRE>      Combo Box
      --------------------------
      ControlName: ProductID
      ControlSource: ProductID
      RowSourceType: Table/Query
      RowSource: Products
      ColumnCount: 4
      ColumnWidths: 0";0";0";2"
      BoundColumn: 1
</PRE><P>
</OL>The Orders form in Northwind.mdb in Microsoft Access 97 and 7.0 (or
NWIND.MDB in Microsoft Access 2.0 and earlier) illustrate this method. It
allows the customer name and address to be selected based on the CustomerID
combo box (or Customer ID in Microsoft Access 2.0 and earlier). By changing
the CustomerID in the Orders table, the related Customers record is
changed, and the corresponding fields are updated on the form.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about AutoLookup queries, type "AutoLookup" in the
Office Assistant, click Search, and then click to view "About AutoLookup
queries that enter data automatically."
<P>
For more information about referencing controls on a form, type
"Identifiers" in the Office Assistant, click Search, and then click to view
"Use values in expresions."
<P>
For more information about using the Control Wizard, type "control wizard
find record" in the Office Assistant, click Search, and then click to view
"Find a record by selecting a value from a list."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Auto lookup forms text box move<BR>
Keywords          : FmsCmbo kbusage kbfaq<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

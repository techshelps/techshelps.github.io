

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC1x: Five Parameters to Set in ISAM Section of MSACCESS.INI </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q101323">
<META NAME="KBModify" CONTENT="1997/06/03">
<META NAME="KBCreate" CONTENT="1993/07/11">
<META NAME="Keywords" CONTENT="GnlAcini IsmGnrl IsmHowto kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  This article describes five parameters for Microsoft Access version 1.x that you can set in the ISAM section of the MSACCESS.INI file, found in the WINDOWS directory. For information on setting these parameters for version 2.0, search for  MSACC20....">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QBF0,QBXS,QABA,QBWA,QAHE,QBAO,QBW6,QBFN,QAKC,QAY2,QAGI,QAYY,QBC6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC1x: Five Parameters to Set in ISAM Section of MSACCESS.INI</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q101323</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes five parameters for Microsoft Access version 1.x
that you can set in the ISAM section of the MSACCESS.INI file, found in
the WINDOWS directory. For information on setting these parameters for
version 2.0, search for "MSACC20.INI" then "Customizing MSACC20.INI
Settings" using the Help menu.
<P>
The MSACCESS.INI file can contain the following five parameters:
<P>
<PRE>   MaxBufferSize
   ReadAheadPages
   PageTimeout
   LockRetry
   CommitLockRetry

</PRE>NOTE: These parameters are not automatically placed in the MSACCESS.INI
file. If necessary, you must add them.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
ISAM parameters are read at only one time: during the launch of the
first instance of Microsoft Access. While the parameters can be
changed while Microsoft Access is running, these changes do not take
effect until all instances of Microsoft Access are closed and
Microsoft Access is restarted.
<P>
The examples in the following five sections assume the sample
parameter values below:
<P>
<PRE>   MaxBufferSize = 512
   ReadAheadPages = 5
   PageTimeout=20 (sets PageTimeout to 2 seconds)
   LockRetry = 100
   CommitLockRetry = 100

</PRE><h3>MaxBufferSize</h3>
 
<P>
Microsoft Access physically stores all database data in 2K-memory
pages, generally in a large storage medium, such as a hard disk, RAM
drive, or CD-ROM. Once placed in the page cache, memory pages are then
used by Microsoft Access to hold data for tables, reports, and so
forth.
<P>
The MaxBufferSize ISAM parameter defines, in kilobytes, how large a
memory page cache to set up. A memory page cache is a section of
memory used to temporarily store (or, buffer) the 2K-memory pages that
Microsoft Access creates. Microsoft Access uses physical memory (RAM),
and, if necessary, virtual memory (for example, a hard disk) to create
the page cache that you specify.
<P>
Because the page cache stores data in 2K segments, you should set the
MaxBufferSize parameter only to an even number (for example, 18, 512,
1024, and so forth). If the parameter is set to an odd number,
Microsoft Access uses a MaxBufferSize setting of the given number
minus 1.
<P>
Because the page cache size is measured in kilobytes, and because each
memory page is 2K in size, you can calculate how many memory pages
will fit in your new page cache by using the following formula:
<P>
<PRE>   maximum number of memory pages = (MaxBufferSize / 2)

</PRE>For example, if you set the MaxBufferSize to 18, you set up a memory
page cache of 18K. Applying this number to the above formula yields
the following result:
<P>
<PRE>   (18 / 2) = 9 possible memory pages

</PRE>Microsoft Access responds to data read requests by checking the page
cache to verify whether or not the requested data is already present.
<P>
NOTE: The PageTimeout parameter can also be a factor in this process.
Please read the section below titled "PageTimeout."
<P>
If the data you need is present in the page cache, Microsoft Access is
able to immediately read the memory pages from it. Since Microsoft
Access does not have to wait for the cache to be filled from the
storage medium, this feature saves you time. However, if the data does
not appear on a memory page already present in the page cache,
Microsoft Access fills the cache from the storage medium and then
retrieves the data from the cache itself.
<P>
All memory pages stay in the page cache indefinitely, either until it
becomes full or until the computer is turned off. If the page cache
becomes full, pages are purged as necessary to make room for the new
data.
<P>
<PRE>   Specifications
   ---------------------------------------------------------
   Maximum Setting: 4096 (4096 = 4MB)
   Minimum Setting: 18   (18 = 18K)
   Default Setting: 512
   Granularity: 2 (for example, 512 is valid, but 511 is not)

</PRE><h3>ReadAheadPages</h3>
 
<P>
The ReadAheadPages ISAM parameter specifies the size of another cache,
known as the "read-ahead" cache. The read-ahead cache is used by
Microsoft Access to cache sequential page reads from a database.
Reading data from a read-ahead cache is more efficient than reading it
from a storage medium, since sequential data reads can occur more
quickly. This is especially true when you are accessing data stored on
a network, where speed is increased by sending small numbers of large
packets, rather than large numbers of small packets.
<P>
The read-ahead cache is not used for all reads, but triggered instead
when Microsoft Access detects that a sequential read is taking place.
Microsoft Access attempts to detect a sequential read in the following
manner:
<P>
When Microsoft Access receives a read request, it checks to see if the
previous read is adjacent to the current request. If it is, Microsoft
Access reads the requested page, plus the next &lt;n&gt; pages (where &lt;n&gt; is
the value that the ReadAheadPages parameter is set to) in that
direction and places the data in the read-ahead cache. If Microsoft
Access correctly detects a sequential read, it then reads the next &lt;n&gt;
reads directly from the read-ahead cache, thus improving the speed.
<P>
When the read-ahead cache is created, Microsoft Access attempts to
place it in the first 640K of memory (also called conventional memory)
to benefit from the ability of Microsoft Windows to directly read from
and write to conventional memory. A separate read-ahead cache is
created for each database open on the host machine. Each library
database has its own read-ahead cache.
<P>
<PRE>   Specifications
   -----------------------------
   Maximum Setting: 31
   Minimum Setting: 0
   Default Setting: 16
   Granularity: 1   (1 = 1 page)

</PRE><h3>PageTimeout</h3>
 
<P>
NOTE: The PageTimeout parameter is enabled for non-exclusive (shared)
data only.
<P>
The PageTimeout ISAM parameter defines the amount of time, in tenths
of a second, that a page is held in the memory page cache before it
must be refreshed to fulfill the next read of the same page. The
following scenario describes how the PageTimeout parameter is used:
<P>
If page &lt;x&gt; is read and placed in the memory page cache at time T1,
and later another read request is made for page &lt;x&gt; at time T2, the
memory page can be read directly from the memory page cache, if T2
minus T1 is less than the PageTimeout setting. Otherwise, Microsoft
Access must reread the data from the storage medium to refresh that
particular memory page.
<P>
NOTE: PageTimeout applies only to situations in which a database or
database object is opened with shared access. When a database is
opened with exclusive access, only one user has access to the data; as
a result, that user always holds the most current data and has no need
for refreshed data.
<P>
The PageTimeout parameter is used only when operating through the
Microsoft Access user interface. It is ignored when running an Access
Basic program, unless you allow background processing to occur by
periodically calling the DoEvents() statement.
<P>
<PRE>   Specifications
   --------------------------------------------------
   Maximum Setting: 2147483647 (maximum long integer)
   Minimum Setting: 0
   Default Setting: 20
   Granularity: 1 (1 = 1/10 second)

</PRE><h3>LockRetry</h3>
 
<P>
The LockRetry ISAM parameter defines the number of times Microsoft
Access tries to lock a page before it reports an error.
<P>
For example, if user A tries to lock page &lt;x&gt;, which was previously
locked by another user, user A's lock attempt fails. After this
failure, Microsoft Access tries &lt;n&gt; more times (where &lt;n&gt; is the value
LockRetry is set to) to lock the page. If the lock cannot be secured
by the &lt;n&gt;th retry, an error is reported either in the user interface
or in Access Basic code.
<P>
<PRE>   Specifications
   --------------------------------------------------
   Maximum Setting: 2147483647 (maximum long integer)
   Minimum Setting: 0
   Default Setting: 20
   Granularity: 1

</PRE><h3>CommitLockRetry</h3>
 
<P>
The CommitLockRetry ISAM parameter is used in conjunction with the
LockRetry parameter to determine the number of retries performed when
locking pages within transactions. The total number of retries
performed is determined by multiplying the two parameters (LockRetry
and CommitLockRetry).
<P>
For example, if LockRetry has a value of 5 and CommitLockRetry has a
value of 6, 30 more retries (5 * 6 = 30) are made after the initial
failure to secure a lock.
<P>
<PRE>   Specifications
   --------------------------------------------------
   Maximum Setting: 2147483647 (maximum long integer)
   Minimum Setting: 0
   Default Setting: 20
   Granularity: 1

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about Customizing MSACC20.INI settings, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q122246.htm">Q122246</A></B>
   TITLE:      ACC2: Sample MSACC20.INI File for MS Access Version 2.0

</PRE>For more information on the MSACCESS.INI file, search for
"MSACCESS.INI" using the Help menu. Also, see both "Setting ODBC
Options in the MSACCESS.INI File" in the README.TXT file and the
PERFORM.TXT file in your ACCESS directory.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: MSACCESS.INI memory page cache setable parameters<BR>
ISAM<BR>
Keywords            : GnlAcini IsmGnrl IsmHowto kbusage<BR>
Version             : 1.0 1.1<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

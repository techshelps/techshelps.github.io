

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Writing Functions Called from Events or Expressions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97514 ">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1993/04/13">
<META NAME="Keywords" CONTENT="kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  Functions can be used in a variety of places in Microsoft Access. How you write your functions depends on where the functions are going to be called from.  This article assumes t...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAB9,QA7O,QAPN,QBV8,QAGI,QAML,QA1S,QA7N,QAY2,QDN9,QAUJ,QAB5,QAO4,QAOE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Writing Functions Called from Events or Expressions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97514 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
Functions can be used in a variety of places in Microsoft Access. How
you write your functions depends on where the functions are going to
be called from.
<P>
This article assumes that you are familiar with Access Basic and with
creating applications for Microsoft Access using the programming tools
provided with Microsoft Access.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two main styles for writing Access Basic functions:

<UL><LI>Functions can be called from event properties, such as the
   AfterUpdate property for a control on a form. Typically, you would
   call the function with a parameter. The function then acts on or
   modifies the parameter.

<LI>Functions can be used in expressions, such as calculated controls.
   The difference is in how the result is returned when the function
   exits.
<P>
</UL>NOTE: This article does not address event procedures in Microsoft Access
version 2.0, because these are Sub procedures and not functions.
<P>
The examples below use the Proper() function to illustrate the
differences between the two function styles. Proper() converts the
first letter of a word to uppercase and the other letters to
lowercase.
<P>
<P><h3>Calling a Function from an Event Property</h3>
 
<P>
The Proper() function can be written so it can be called from an
event, such as the AfterUpdate property of a control on a form. In
this example we will call it ProperAU() as a reminder that it should
be called from the AfterUpdate property.
<P>
Enter the following function in a module:
<P>
<PRE>   Function ProperAU(Field As Control)
      Field=UCase(Left(Field,1)) &amp; LCase(Mid(Field,2))
   End Function

</PRE>NOTE: The result of the calculation updates the field that was
passed as a parameter.
<P>
<P><h3>Example</h3>
 

<OL><P><LI>Open the Customers form in Design view.

<P><LI>View the Property sheet by choosing Properties from the View menu.

<P><LI>Add the following statement to the AfterUpdate property of the
   First Name field:
<P>
<P><PRE>      Object: Text Box
      ----------------
      ControlName: First Name
      AfterUpdate: =ProperAU([First Name])
</PRE><P>
</OL>Now, whenever the employees name is typed into the Employee form,
it will be converted to the correct format when the user presses
TAB or ENTER.
<P>
<P><h3>Calling a Function from an Expression</h3>
 
<P>
The Proper() function can be written so it can be called from an
expression, or calculated control. In this example we will call it
ProperCC() as a reminder that it should be used in calculations.
<P>
Enter the following function in a module:
<P>
<PRE>   Function ProperCC(Field)
      ProperCC=UCase(Left(Field,1)) &amp; LCase(Mid(Field,2))
   End Function

</PRE></OL>NOTE: The result of the calculation is assigned to the function.
This way, it can be used in an expression or calculated control.
<P>
<P><h3>Example</h3>
 

<OL><P><LI>Open the Customers form in Design view.

<P><LI>Add the following calculated control to the form:
<P>
<P><PRE>      Object: Text Box
      ----------------
      ControlName: Proper Last Name
      ControlSource: =ProperCC([Last Name])
</PRE><P>
   Now when you type in the Last Name field, you will see the correct
   capitalization in the Proper Last Name field.
<P>
   NOTE: You will not be able to type in the Proper Last Name field.
   ProperCC() does not change underlying data like ProperAU() does.
   For this reason, ProperCC() is useful in reports and expressions
   and can be used more places than ProperAU().
<P>
   You can use ProperCC in the same manner as any of the built-in
   functions listed in the "Language Reference," such as UCase, LCase,
   and so on.
<P>
</OL><h3>Determining the Type of Function You Need</h3>
 
<P>
<PRE>   Where used                                   Function style
   -----------------------------------------------------------

   AfterUpdate, BeforeUpdate, and so on         Event

   RunCode macro action                         Event

   Calculated controls on forms and reports     Expression

   Calculated fields in a query                 Expression

   SetValue macro action expression             Expression

   Default values in a table or form            Expression

   Called from another function or sub          Expression
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg PgmOthr<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

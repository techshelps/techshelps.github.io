

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Determine Whether a Menu Item Is Checked </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q95935 ">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1993/03/01">
<META NAME="Keywords" CONTENT="kbprg PgmApi">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article discusses how you can make application programming interface (API) calls to determine whether or not a menu item is checked (selected). This method can be used,...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVI,QBJZ,QADK,QAY5,QAZW,QAH4,QBV8,QAB9,QABH,QABI,QBT6,QA1S,QBV4,QAHE,QAF0 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Determine Whether a Menu Item Is Checked</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q95935 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article discusses how you can make application programming interface
(API) calls to determine whether or not a menu item is checked (selected).
This method can be used, for example, when you want to determine whether a
form is in Form view or Datasheet view. If a form is in Datasheet view, the
Datasheet menu item on the View menu is checked. Thus, determining whether
this menu item is checked allows you to determine whether the form is in
Datasheet view.
<P>
The program code in this article comes from the ORDENTRY.MDB sample
database and is presented in this article in a condensed version.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To determine whether a menu item is selected, you can use the
IsMenuChecked() function listed in the code at the end of this article.
IsMenuChecked() accepts two parameters indicating the position of the
desired menu item; IsMenuChecked() returns true if the item is selected and
false if it is not.
<P>
To find the position of the menu item you want to select, begin at 0
(zero) and count from the left-most menu item until you reach the item
you want. This determines the first number. Then, from the selected
menu, begin with zero and count down the submenu until you reach the
submenu item you want. This determines the second number. (NOTE: separator
bars are considered submenu items, and always return a True from the
IsMenuChecked() function.)
<P>
For example, suppose you have the following menus:
<P>
<PRE>   File   Edit    View
   --------------------------
   Open   Cut     Form Design
   Close  Copy    Form
   Exit   Paste   Datasheet

</PRE>To determine whether Datasheet is checked, you would call IsMenuChecked()
with the values 2 and 2, because the View menu is in position 2 and the
Datasheet item on the View submenu is in position 2. Note the same menu
with numbered rows and columns to illustrate this further:
<P>
<PRE>         0       1      2
       File     Edit   View
       ---------------------------
    0  Open     Cut    Form Design
    1  Close    Copy   Form
    2  Exit     Paste  Datasheet

</PRE>When determining the position of a menu command, separator bars count as
commands. For example, to get to the Import menu command on the File menu
in the Database window, use the arguments 0 (for the File menu) and 7 (for
the Import command). Positions 3 and 6 correspond to the separator bars on
the File menu.
<P>
For an example of how to use this function, follow these steps in the
sample database NWIND.MDB:

<OL><P><LI>Copy the Access Basic code at the bottom of this article to a new
   module.

<P><LI>Open the Customers form in Design view.

<P><LI>Select the Customer ID text box.

<P><LI>Specify the following for the OnDblClick property in the property
   sheet:
<P>
<P><PRE>      OnDblClick: =MsgBox(Str(IsMenuChecked(2,2)))
</PRE>
<P><LI>Switch to Form view. Note that Datasheet on the View menu is not checked
   because the form is not in Datasheet view.

<P><LI>Double-click the Customer ID text box. Note that a zero appears
   indicating that the Datasheet item on the View menu is not checked.

<P><LI>Switch to Datasheet view. Note that the Datasheet item on the View menu
   is now checked because the form is in Datasheet view.

<P><LI>Double-click the Customer ID text box. Note that this time a -1 appears,
   indicating that the Datasheet item on the View menu is checked.
<P>
</OL>The following is the code for the sample function IsMenuChecked().
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.
<P>
<PRE>   Option Compare Database   'Use database order for string comparisons.
   Option Explicit

   Declare Function IsZoomed% Lib "User" (ByVal hWnd%)
   Declare Function GetMenu% Lib "User" (ByVal hWnd%)
   Declare Function GetSubMenu% Lib "User" (ByVal hMenu%, ByVal nPos%)
   Declare Function GetMenuState% Lib "User" (ByVal hMenu%, ByVal idItem%,_
                       ByVal fuFlags%)
   Declare Function GetActiveWindow% Lib "User" ()
   Declare Function GetParent% Lib "User" (ByVal hwin%)
   Declare Function GetClassName% Lib "User" (ByVal hwin%, ByVal stBuf$,_
                       ByVal cch%)

   Const WU_MF_BYPOSITION = &amp;H400
   Const WU_MF_CHECKED = &amp;H8
   ' OMain is the predefined classname of the
   Global Const WU_WC_ACCESS = "OMain"

   Function IsMenuChecked (iMenu%, iItem%) As Integer
      Dim hMainMenu%
      Dim hMenu%
      Dim Flags%

      '--------------------------------------------------
      'If the window is maximized, there is an additional
      'Control menu added to the MDI window.
      '--------------------------------------------------
      If (IsZoomed(Screen.ActiveForm.hWnd)) Then
         iMenu% = iMenu% + 1
      End If

      '--------------------------------------------------
      ' Get the appropriate handle to the menu item.
      '--------------------------------------------------
      hMainMenu% = GetMenu(GetAccessHwnd())
      hMenu% = GetSubMenu(hMainMenu%, iMenu%)
      Flags% = WU_MF_BYPOSITION Or WU_MF_CHECKED

      '--------------------------------------------------
      ' Call the API that returns the state of the menu.
      '--------------------------------------------------
      IsMenuChecked = (GetMenuState(hMenu%, iItem%, Flags%) &lt;&gt; 0)
   End Function

   Function StWindowClass (hWnd As Integer) As String
      Const cchMax = 255
      Dim cch%
      Dim stBuff As String * cchMax

      '--------------------------------------------------
      ' Get the class name of the window relating to hWnd
      ' and return this as the function.
      '--------------------------------------------------
      cch% = GetClassName(hWnd, stBuff, cchMax)
      If (hWnd% = 0) Then
         StWindowClass = ""
      Else
         StWindowClass = (Left$(stBuff, cch%))
      End If
   End Function

   Function GetAccessHwnd () As Integer
      Dim hWnd%

      '--------------------------------------------------
      ' Keep getting the handle of the parent, until the
      ' ClassName = "OMain", which is the class name of
      ' the Microsoft Access window.
      '--------------------------------------------------
      hWnd% = GetActiveWindow()
      While ((StWindowClass(hWnd%) &lt;&gt; WU_WC_ACCESS) And (hWnd% &lt;&gt; 0))
         hWnd% = GetParent(hWnd%)
      Wend
      GetAccessHwnd = hWnd%
   End Function

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information about this topic, please see the following article
here in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q90811.htm">Q90811</A></B>
   TITLE:      ACC: How to Check a Menu Item Using Access Basic
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: basic<BR>
Keywords            : kbprg PgmApi<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Create, Debug, and Use a Microsoft Access Library </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88175 ">
<META NAME="KBModify" CONTENT="1997/06/06">
<META NAME="KBCreate" CONTENT="1992/08/19">
<META NAME="Keywords" CONTENT="kbprg MdlLib">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes a Microsoft Access library and discusses how to create and debug a library as well as some things to watch out for.  This article assumes that you are fami...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QBHQ,QAH4,QDN9,QAZV,QAMA,QA5F,QAJH,QAGU,QAPN,QDKY,QAIK,QAW6,QBWS,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Create, Debug, and Use a Microsoft Access Library</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88175 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes a Microsoft Access library and discusses how to
create and debug a library as well as some things to watch out for.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools
provided with Microsoft Access. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x, or the "Building Applications" manual in version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Access Basic Library Definition</h3>
 
<P>
When you write a Microsoft Access application, such as the sample database
NWIND.MDB, the application works only within the database in which it was
created. This is satisfactory for many applications that specifically use
the data that resides in the application's database.
<P>
However, many Microsoft Access developers write generic applications,
programs, and utilities that are designed to work on any user database. An
example of this is wizards. Wizards are Access Basic programs that reside
in their own database but are available in any open database. If this were
not the case, you could not use a wizard outside of the database that the
wizard program and system objects reside in. In order to make a program's
code and objects available to any user database, you must load the
database containing the program and its objects as a library.
<P>
To load a database as a library, you must open the .INI file (MSACCESS.INI
in Microsoft Access version 1.x, MSACC20.INI in version 2.0) and add a
line to the Libraries section. When you open the .INI file initially, you
will probably see a Libraries section with an entry for the Wizards
library:
<P>
<PRE>   [Libraries]
   wizard.mda=ro

</PRE>NOTE: If there is no Libraries section, add it to the end of the file and
continue. The .INI file can be found in your Windows directory.
<P>
The "ro" in the wizard entry means that the library is read-only. If you
have an application that uses its own tables that are to be written to at
any point in your program, you would specify "rw" rather than "ro." For
example, to add an application called STOCKAPP.MDB that uses its own
tables that can be modified, add the following line to the .INI file:
<P>
<PRE>   stockapp.mdb=rw

</PRE>The complete [Libraries] section might look like:
<P>
<PRE>   [Libraries]
   wizard.mda=ro
   stockapp.mdb=rw

</PRE>Given these library entries, the WIZARD.MDA library will be loaded read-
only, and the STOCKAPP.MDB library will be loaded as read-write. After
restarting Microsoft Access you would be able to open an Immediate window
in a user database and invoke Sub and function procedures from
STOCKAPP.MDB, or open tables, queries, forms, or reports with DoCmd
statements. Even though you can access the code and database objects from
STOCKAPP.MDB, you cannot see them in the Database window.
<P>
Note that when a database is loaded as a library, it cannot be opened as a
user database.
<P>
<P><h3>Writing and Debugging Access Basic Library Code</h3>
 
<P>
When you write an Access Basic application for use as a library, you are
doing little more than writing the application in a user database with the
intention of using it as a library at a later point. Because of this, a
rule of thumb is to make sure the application works completely before
you try to use it as a library.
<P>
Although this rule of thumb is enough to successfully create many types of
library applications, there are some important pitfalls to watch for when
writing a library application, even if the application works perfectly as
a user database.
<P>
<P><h3>Debugging an Error in a Library Database</h3>
 
<P>
Microsoft Access version 1.x:
<P>
If the library database generates an error that only occurs while it is a
library, it can be very difficult to locate. An error might occur that
gives you some idea of the general area of the problem, but there may be
little or no indication of the offending line. Because you cannot set and
use breakpoints and stepping in library applications, you should design
error traps that convey meaningful messages and indicate the location of
the problem.
<P>
Another debugging tip is to place message boxes at milestone areas of the
code so that you always have an idea of which code is being run.
<P>
Microsoft Access version 2.0:
<P>
Add the following line to the [Options] section of the MSACC20.INI file.
If the [Options] section does not exist, add it to the bottom of the file.
<P>
<PRE>   DebugLibraries=True

</PRE>The completed section might look like:
<P>
<PRE>   [Options]
   DebugLibraries=True

</PRE>This enables the code debugger to appear when a run-time error occurs in a
library module. You can also get to the library code using the View
Procedures command when you are in a module's Design view. Note that this
will tend to reduce performance because all the library code will have to
be recompiled. Remove this option when the code debugger is not necessary.
<P>
<P><h3>CodeDB() Versus CurrentDB()</h3>
 
<P>
Access Basic includes the CodeDB() function for opening library databases.
The CodeDB() function works identically to the CurrentDB() function if you
are running the application as a user database. However, if you are
running the application as a library, CodeDB() returns the database object
for the library database from which it was called, while CurrentDB()
returns the database object from the current open user database. Because
of this, it is easy to confuse one for the other.
<P>
<P><h3>Domain Functions</h3>
 
<P>
Domain functions should be used with caution in library modules because
they can only process user tables and not library tables.
<P>
<P><h3>Macros in a Library</h3>
 
<P>
Microsoft Access version 1.x:
<P>
Of all the objects you can create in a Microsoft Access database, macros
are the only type of object you cannot use in a library application. The
most obvious problem this presents is that forms require the use of macros
in order to have menus. Because of this limitation, you must make sure to
use only Access Basic code for programming.
<P>
Microsoft Access version 2.0:
<P>
In Microsoft Access 2.0, you can call a macro from a Library database.
However, because you cannot use error trapping in macros, macros should be
avoided except for implementing custom menus.
<P>
<P><h3>Keys May Be Redefined in User Database</h3>
 
<P>
Because the user database may contain an AutoKeys macro to redefine the
meaning of keys, you should use caution when using SendKeys in your
Library application. Use other macro actions where appropriate and use
hotkeys and the TAB key rather than the ARROW keys when manipulating a
dialog box.
<P>
<P><h3>USysAddIns Table</h3>
 
<P>
The Microsoft Access 2.0 Add-In Manager will process entries in the
USysAddIns table of a library database to update the MSACC20.INI
[Libraries] and [Menu Add-Ins] sections. This makes installing and
uninstalling libraries more manageable for users. See Chapter 15 of the
Microsoft Access "Building Applications" manual for more information.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg MdlLib<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

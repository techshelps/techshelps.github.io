

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC2: How to Create a Multiple-Selection List Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q121356">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1994/10/03">
<META NAME="Keywords" CONTENT="FmrCodeb kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  In a typical list box, you can select only one item at a time. This article describes how to create a multiple-selection list box in which you can select more than one item ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QA1S,QBCF,QA2Q,QAE1,QDN9,QAY5,QA5V,QAM3,QAH4,QBCE,QAG2,QAGX,QAPF,QAUJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC2: How to Create a Multiple-Selection List Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q121356</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
In a typical list box, you can select only one item at a time. This article
describes how to create a multiple-selection list box in which you can
select more than one item at a time.
<P>
NOTE: Microsoft Access version 7.0 has incorporated the MultiSelect
property for list box controls. The MultiSelect property of a list box
specifies whether a user can make multiple selections in a list box and
how the multiple selections can be made.
<P>
The following example demonstrates how to create a two-column list box in
Microsoft Access version 2.0. The first column displays an "X" if the row
is selected, or is blank if the row is not selected. The second column
will contain the values that you can select. This article also
demonstrates how to create a semicolon-delimited list of the items
selected in the list box.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Introduction to Programming" manual in Microsoft Access version
1.x, or the "Building Applications" manual in version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example demonstrates how to create and use a multiple-
selection list box. This example uses user-defined Access Basic functions
to fill the list box.

<OL><P><LI>Start Microsoft Access and open the sample database NWIND.MDB.

<P><LI>Create a new module and type the following lines in the Declarations
   section.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Type MultiSelectArray_TYPE
<PRE></PRE>         Selected As String     ' Holds "X" or "" indicating selection
         Display As Variant     ' The value to display in the list box
                                ' row. Example: John Smith
         Value As Variant       ' The value to store for the row
                                ' selection. Example: 535-86-9328 (John's
                                ' SSN)
      End Type

      Dim MultiSelectArray() As MultiSelectArray_TYPE
      Dim MultiSelectRows

      ' Flag indicating if the list is being updated (new selection)
      ' or being filled.
      Global UpdateMultiSelect

</PRE><P><LI>Add the following two functions to the module:
<P>
<P><PRE>      Function MultiSelect (fld As Control, id As Long, Row As _
      Long, Col As Long, Code As Integer)
      '*******************************************************
      ' CALLED FROM: The RowSourceType property of a list box.
      ' EXAMPLE:
<PRE></PRE>      '    RowSourceType: MultiSelect
      '*******************************************************
         Dim RetVal: RetVal = Null

         Select Case Code
            Case LB_INITIALIZE
               ' Is the list being updated by a new selection?
               If UpdateMultiSelect Then
                  ' If so, ignore refilling the list.
                  UpdateMultiSelect = False
               Else
                  ' Otherwise, fill the MultiSelect array.
                  MultiSelectRows = MultiSelectFillArray()
               End If
               RetVal = MultiSelectRows

            Case LB_OPEN
               RetVal = Timer     ' Unique ID number for control.

            Case LB_GETROWCOUNT
               ' Return the number of rows in the MultiSelect array.
               RetVal = UBound(MultiSelectArray) + 1

            Case LB_GETCOLUMNCOUNT
               ' Return the number of columns to display.
               RetVal = 2

            Case LB_GETCOLUMNWIDTH
               RetVal = -1        ' Use the default width.

            Case LB_GETVALUE
               Select Case Col
                  Case 0  ' Selected
                     RetVal = MultiSelectArray(Row).Selected
                  Case 1  ' Display
                     RetVal = MultiSelectArray(Row).Display
               End Select

            Case LB_END           ' End

         End Select

         MultiSelect = RetVal

      End Function

      Function MultiSelectUpdate (C As Control)
      '********************************************************
      ' CALLED FROM: The AfterUpdate property of the list box.
      ' EXAMPLE:
      '    AfterUpdate: =MultiSelectUpdate([&lt;YourListBoxName&gt;])
      '********************************************************
         ' Update the MultiSelect array selection by toggling
         ' the "X" in the selected row.
         Select Case MultiSelectArray(C).Selected
            Case ""
               MultiSelectArray(C).Selected = "X"
            Case "X"
               MultiSelectArray(C).Selected = ""
         End Select

         ' Set the flag indicating an update.
         UpdateMultiSelect = True

         ' Requery the list.
         C.Requery

      End Function

</PRE><P><LI>Create a user-defined function called MultiSelectFillArray() that will
   fill the MultiSelect array with the values to be displayed in the list
   box. Following are two examples of the MultiSelectFillArray() function.
   The first example demonstrates how to fill the array with a list of
   names from the Employees table. The second example demonstrates how
   to fill the array with a list of field names from the Employees table.
   Enter only one of these functions in the module:
<P>
<P><PRE>      Function MultiSelectFillArray ()
      '**********************************************************
      ' PURPOSE: Fills the MultiSelect array with a list of
<PRE></PRE>      '          names from the Employees table.
      ' CALLED FROM: The MultiSelect() function's initialization
      '              code to fill the list box array with values.
      '**********************************************************
         Dim DB As Database
         Dim RS As Recordset
         Dim i As Integer
         Dim RecordCount As Integer

         Set DB = DBEngine.Workspaces(0).Databases(0)
         Set RS = DB.OpenRecordset("Employees", DB_OPEN_SNAPSHOT)

         ' Get record count.
         RS.MoveLast
         RecordCount = RS.RecordCount
         RS.MoveFirst

         ' Resize the MultiSelect array to the number of Employee
         ' records.
         ReDim MultiSelectArray(0 To RecordCount - 1)

         ' Fill the MultiSelect array by setting:
         '    Selected to "" (clearing "X").
         '    Display to [First Name] space [Last Name].
         '    Value to [Employee ID].
         For i = 0 To RecordCount - 1
            MultiSelectArray(i).Selected = ""
            MultiSelectArray(i).Display = RS![First Name] &amp; " " _
            &amp; RS![Last Name]
            MultiSelectArray(i).Value = RS![Employee ID]
            RS.MoveNext
         Next i

         ' Return the number of rows in the array (RecordCount).
         MultiSelectFillArray = RecordCount

      End Function

      Function MultiSelectFillArray ()
      '**********************************************************
      ' PURPOSE: Fills the MultiSelect array with a list of
      '          field names from the Employees table.
      ' CALLED FROM: The MultiSelect() function's initialization
      '              code to fill the list box array with values.
      '**********************************************************
         Dim DB As Database
         Dim RS As Recordset
         Dim i As Integer

         Set DB = DBEngine.Workspaces(0).Databases(0)
         Set RS = DB.OpenRecordset("Employees", DB_OPEN_SNAPSHOT)

         ' Resize the MultiSelect array to the number of Employee
         ' fields.
         ReDim MultiSelectArray(0 To RS.Fields.Count - 1)

         ' Fill the MultiSelect array by setting:
         '    Selected to "" (clearing "X").
         '    Display to the name of the field.
         '    Value to the name of the field.
         For i = 0 To RS.Fields.Count - 1
            MultiSelectArray(i).Selected = ""
            MultiSelectArray(i).Display = RS(i).Name
            MultiSelectArray(i).Value = RS(i).Name
         Next i

         ' Return the number of rows in the array (the number of
         ' fields).
         MultiSelectFillArray = RS.Fields.Count

      End Function

</PRE><P><LI>Create a form not based on any table or query.

<P><LI>Add a list box with the following properties to the form:
<P>
<P><PRE>      Name: EmployeeFields
      ControlSource: &lt;blank&gt;
      RowSourceType: MultiSelect
      RowSource: &lt;blank&gt;
      ColumnCount: 2
      ColumnWidths: 0.15 in.
      BoundColumn: 0
      Width: 1.6 in
      Height: 1.5 in
      AfterUpdate: =MultiSelectUpdate([EmployeeFields])
</PRE>
<P><LI>View the form in Form view. Depending on which example you chose in
   step 4, you will see a list box containing either a list of names
   from the Employees table or a list of field names from the Employees
   table. You can select or unselect an item in the list box by clicking
   the item. An item is selected if an "X" appears in the column to the
   left of the item. Note that if you press the UP ARROW and DOWN ARROW
   keys to move the pointer up or down in the list box, each item that you
   move past is toggled.
<P>
</OL>NOTE: If you manually requery the list box by using the Requery macro
action or the Requery method, or by pressing the F9 key in the list box,
all the selections in the list box will be cleared.
<P>
<P><h3>How to Create a Semicolon-Delimited List of Items Selected in List Box</h3>
 
<P>
The following example demonstrates how to use the MultiSelect array to
create a semicolon-delimited list of the items selected in the list box:

<OL><P><LI>Add the following function to the module that you created in step 2
   above:
<P>
<P><PRE>      Function MultiSelectSemicolonList ()
<PRE></PRE>         Dim i
         Dim Result
         Result = ""
         For i = 0 To UBound(MultiSelectArray)
            If MultiSelectArray(i).Selected = "X" Then
               Result = Result &amp; MultiSelectArray(i).Display &amp; "; "
            End If
         Next i

         ' Remove the last semicolon.
         If Result &lt;&gt; "" Then Result = Left(Result, Len(Result) - 1)

         MultiSelectSemicolonList = Result
      End Function

</PRE><P><LI>Add a text box with the following property to the form that you
   created in step 5 above:
<P>
<P><PRE>      ControlSource: =MultiSelectSemicolonList()
</PRE>
<P><LI>View the form in Form view. Note that when you make selections in the
   list box, the text box is updated to display a list of the items
   selected.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using an Access Basic function to fill a list
box, search for "filling list boxes/combo boxes," and then "Filling a List
Box or Combo Box Using an Access Basic Function" using the Microsoft Access
version 2.0 Help menu.
<P>
For more information about MultiSelect list boxes in Microsoft Access
version 7.0, search for "MultiSelect Property" using the Microsoft Access
for Windows 95 Help Index.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: multiselection<BR>
Keywords            : FmrCodeb kbusage<BR>
Version             : 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

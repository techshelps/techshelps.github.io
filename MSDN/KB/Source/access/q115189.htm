

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC2: How to Find a Record Using a Bound Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115189">
<META NAME="KBModify" CONTENT="1997/05/14">
<META NAME="KBCreate" CONTENT="1994/05/19">
<META NAME="Keywords" CONTENT="FmsOthr kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article demonstrates how to use a single bound control both for finding records and entering data in a form.  You can use this technique to find whether the value entered in...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QA7O,QAKD,QA1S,QAB5,QAOE,QAMN,QAY5,QAPN,QAGB,QDN9,QDMH,QBFY,QBXS,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC2: How to Find a Record Using a Bound Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 14, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115189</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article demonstrates how to use a single bound control both for
finding records and entering data in a form.
<P>
You can use this technique to find whether the value entered in a field
already exists in another record. If the value does exist in another
record, the record containing that value will be displayed. If the value
does not exist in another record, you can continue entering data for the
current record.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Microsoft Access "User's Guide" demonstrates a method that you can use
to find records in your database by selecting a key value from a list. (See
"Finding a Record by Selecting a Value from a List.") This method is
limited in that it requires two controls. One control is an unbound control
that is used to select the value to look for, and the other control is a
bound control in which data entry for that value occurs.
<P>
The following example demonstrates how to use a single, bound control to
achieve the same functionality.
<P>
NOTE: The field to which the control is bound cannot be a required field
and it cannot have a validation rule that allows null values. Make sure
that the field's Required property is set to No and that its ValidationRule
property does not allow null values.

<OL><P><LI>Open the sample database NWIND.MDB. Create a new module with the
   following declarations and functions:
<P>
<P><PRE>      ' *******************************************************
      ' DECLARATIONS SECTION
      ' *******************************************************
      Option Explicit
      Dim Found
</PRE><P>
<P><PRE>      Function Find_BeforeUpdate (F As Form)
<PRE></PRE>         Dim RS As Recordset, C As Control
         Set C = Screen.ActiveControl
         Set RS = F.RecordsetClone

         On Error Goto Err_Find_BeforeUpdate

         ' Try to find a record with a matching value.
         Select Case RS.Fields(C.ControlSource).Type
            ' Find using numeric data type key value?
            Case DB_INTEGER, DB_LONG, DB_CURRENCY, DB_SINGLE, _
            DB_DOUBLE, DB_BYTE
               RS.FindFirst "[" &amp; C.ControlSource &amp; "]=" &amp; C
            ' Find using date data type key value?
            Case DB_DATE
               RS.FindFirst "[" &amp; C.ControlSource &amp; "]=#" &amp; C &amp; "#"
            ' Find using text data type key value?
            Case DB_TEXT
               RS.FindFirst "[" &amp; C.ControlSource &amp; "] = """ &amp; C &amp; """"
            Case Else
               MsgBox "ERROR: Invalid data type for '" &amp; C.Name &amp; "'!"
               DoCmd CancelEvent
               Exit Function
         End Select

         ' If a record was found, save the found record's bookmark.
         If RS.NoMatch Then
            Found = Null
         Else
            Found = RS.Bookmark
         End If

         ' If the record was found...
         ' ...cancel the BeforeUpdate event
         ' ...undo changes made to the current record
         ' ...and TAB to the next control to trigger the OnExit routine.
         If Not IsNull(Found) Then
            DoCmd CancelEvent
            SendKeys "{ESC 2}{TAB}", False
         End If

         Exit Function

      Err_Find_BeforeUpdate:
         MsgBox "ERROR: Err " &amp; Err &amp; ": " &amp; Error$, 48
         DoCmd CancelEvent
         Exit Function

      End Function

      Function Find_OnExit ()
         ' If the record was found, cancel the OnExit routine to stay
         ' in the control and go find the record.
         If Not IsNull(Found) And Found &lt;&gt; "" Then
            DoCmd CancelEvent

            ' Synchronize the form record with the found record.
            Screen.ActiveForm.Bookmark = Found

            Found = Null
         End If
      End Function

</PRE><P><LI>Open the Customers form in Design view. Change the following properties
   for the Customer ID field:
<P>
<P><PRE>      BeforeUpdate: =Find_BeforeUpdate(Form)
      OnExit: =Find_OnExit()
</PRE>
<P><LI>View the form in Form view. In the Customer ID field, type "AROUT"
   (without quotation marks) and then press ENTER. Microsoft Access will
   find and display the Around The Horn customer.

<P><LI>In the Customer ID field, type "POPSI" (without quotation marks) and
   then press ENTER. Since this key value does not exist, you can
   continue entering data for the record.
<P>
</OL><h3>How the Sample Functions Work</h3>
 
<P>
The Find_BeforeUpdate() function uses the FindFirst method to search the
dynaset the form is based on to see if the value entered in the control
exists in the table.
<P>
If the value does not exist, the global variable Found is set to NULL and
the function exits. If the value does exist, the global variable Found is
set to the bookmark of the found record to be used by the Find_OnExit()
function.
<P>
Before the found record can be presented, the BeforeUpdate event must be
canceled, and a SendKeys action must send two ESC keys to undo changes to
the current record.
<P>
Next, the SendKeys action sends a TAB key to exit the field. This event
triggers the Find_OnExit() function, which checks to see if the find was
successful. If it was, the CancelEvent action is run to prevent exiting the
control, and then the form record is synchronized with the found record by
setting its bookmark equal to the bookmark of the found record. Found is
then reset back to NULL.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Access "User's Guide," version 2.0, Chapter 25, "Using Macros
and Forms," pages 651-652
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: findrecord<BR>
Keywords            : FmsOthr kbusage<BR>
Version             : 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 14, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Check a Menu Item Using Access Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90811 ">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1992/10/22">
<META NAME="Keywords" CONTENT="kbprg PgmApi">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  Microsoft Access does not have any built-in macro or Access Basic commands you can use to place a check mark beside or remove a check mark from a menu command. To do this in...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVI,QABH,QABI,QA1S,QBJZ,QAF0,QA4Q,QDN9,QAH4,QBRD,QAEF,QAY5,QA5F,QAMA,QAHE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Check a Menu Item Using Access Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90811 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
Microsoft Access does not have any built-in macro or Access Basic commands
you can use to place a check mark beside or remove a check mark from a
menu command. To do this in Microsoft Access, you must use Access Basic
code to call Microsoft Windows application programming interface (API)
functions.
<P>
NOTE: In Microsoft Access 7.0 and 97, you can use the SetMenuItem macro
action to set the state of menu items (enabled or disabled, checked or
cleared) on a custom menu bar or the global menu bar for the active window.
For more information about the SetMenuItem action, search the Help Index
for "SetMenuItem Action."
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following Windows API function is used to check or clear a menu
item.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.
<P>
<PRE>   CheckMenuItem (ByVal hMenu As Integer, _
                  ByVal wIDCheckItem As Integer, _
                  ByVal wCheck As Integer) _
                  As Integer

</PRE>This function places check marks next to or removes check marks from
menu items in the pop-up menu specified by the hMenu% parameter as
follows:
<P>
<PRE>   hMenu%         Identifies the handle to the menu.

   wIDCheckItem%  Specifies the menu item to be checked.

   wCheck%        Specifies how to check the menu item. The
                  wCheck% parameter can be a combination of the
                  MF_CHECKED or MF_UNCHECKED with MF_BYPOSITION or
                  MF_BYCOMMAND flags. These flags can be combined
                  by using the bitwise OR operator. The values are
                  described as follows:

                  Value          Meaning
                  ----------------------------------------------------
                  MF_BYCOMMAND   Specifies that the idCheckItem%
                                 parameter gives the menu-item
                                 identifier (MF_BYCOMMAND is the
                                 default).

                  MF_BYPOSITION  Specifies that the idCheckItem%
                                 parameter gives the position of the
                                 menu item (the first item is at
                                 position zero).

                  MF_CHECKED     Selects the item (adds check mark).

                  MF_UNCHECKED   Clears the item (removes check mark).

   Return Value   The return value specifies the previous state of
                  the item. It is either MF_CHECKED or
                  MF_UNCHECKED. The return value is -1 if the menu
                  item does not exist.

</PRE>NOTE: Top-level menu items (items on the Microsoft Access menu bar) cannot
have a check mark.
<P>
When determining the position of a menu command, separator bars count as
commands. For example, to get to the Import menu command on the File menu
in the Database window, use the arguments 0 (for the File menu) and 7 (for
the Import command). Positions 3 and 6 correspond to the separator bars on
the File menu.
<P>
<P><h3>Example</h3>
 
<P>
The example below creates a menu, associated with a form, that can be
used to check or clear a menu command:

<OL><P><LI>Create the following new macro and save it as Menu Checking:
<P>
<PRE>      Macro Name             Action
      ------------------------------
      &amp;Check Test            RunCode

      &amp;Check Test Actions
      ----------------------------------
      RunCode
         Function Name: ChkMenuItem(0,0)

   The first parameter in the function indicates which menu on the
   menu bar to use. All menus are zero based. For example, if your
   menu bar contains the File, Edit, Window, and Help menus, and you
   specify 2 as the first parameter for one of these functions, the
   function will work on the Window menu. A 2 indicates the Window
   menu instead of the Edit menu because the parameter starts at 0
   instead of 1; therefore, 0 indicates the File menu, 1 indicates
   the Edit menu, and so on.

   The second parameter in the function indicates which menu command
   (on the menu indicated in the first parameter) to place the check
   mark beside. This parameter also starts at 0. To refer to the first
   command on the menu, use 0, to refer to the second, use 1, and so
   on.

</PRE><P><LI>Create the following new macro and save the macro as Custom Menu.
<P>
<PRE>      Macro Name    Action
      ---------------------
      Custom Menu   AddMenu

      Custom Menu Actions
      ---------------------------------------
      AddMenu
         Menu Name: &amp;Menu Check
         Menu Macro Name: Menu Checking

</PRE><P><LI>Create a new blank form.

<P><LI>In Microsoft Access 1.x, set the form's OnMenu property to the Custom
   Menu macro. In Microsoft Access 2.0, set the form's MenuBar property to
   the Custom Menu macro.

<P><LI>Save the form as Menu Checking.

<P><LI>Create a module and type the following lines in the Declarations
   section:
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      ' 16-bit API declarations.
      Declare Function GetMenu Lib "user" (ByVal hWnd As Integer) _
<PRE></PRE>         As Integer
      Declare Function GetMenuState Lib "user" (ByVal hMenu As Integer, _
         ByVal wID As Integer, ByVal wFlags As Integer) As Integer
      Declare Function GetSubMenu Lib "user" (ByVal hSubMenu As Integer, _
         ByVal nPos As Integer) As Integer
      Declare Function CheckMenuItem Lib "user" (ByVal hSubMenu As _
         Integer, ByVal nPos As Integer, ByVal Flag As Integer) As Integer
      Declare Function FindWindow Lib "user" (ByVal lpClassName As Any, _
         ByVal lpCaption As Any) As Integer
      Declare Function IsZoomed Lib "user" (ByVal hWnd As Integer) _
         As Integer

      ' Menu constants.
      Const MF_BYPOSITION = &amp;H400
      Const MF_BYCOMMAND = &amp;H0
      Const MF_CHECK = &amp;H8
      Const MF_UNCHECKED = &amp;H0
      Const MyNull = 0&amp;
      Const ClassName = "OMain"

</PRE><P><LI>Type the following procedure:
<P>
<P><PRE>      Function ChkMenuItem (TopLevel As Integer, SubLevel As Integer)
</PRE><P>
<PRE>         Dim ChWnd As Integer     ' Handle to the Microsoft Access window.
         Dim hMenuTop As Integer  ' Handle to the Microsoft Access menu.
         Dim hSubMenu As Integer  ' Handle to the sub menu.
         Dim ItemID As Integer    ' Ordinal position of menu item.

         ' If the form is maximized, the system menu is added to the forms
         ' menu bar, so increment the actual TopLevel value by one.
         If (IsZoomed(Screen.ActiveForm.hWnd)) Then
            TopLevel = TopLevel + 1
         End If

         ' Assign the menu handles so the API
         ' can find the items we are referring to...
         ChWnd = FindWindow(ClassName, 0&amp;)
         hMenuTop = GetMenu(ChWnd)
         hSubMenu = GetSubMenu(hMenuTop, TopLevel)
         ' toggle based upon state of menu item...
         Select Case GetMenuState(hSubMenu, SubLevel, MF_BYPOSITION)
            Case MF_UNCHECKED
               ChkMenuItem = CheckMenuItem(hSubMenu, SubLevel, _
                                           MF_BYPOSITION Or MF_CHECK)
            Case MF_CHECK
               ChkMenuItem = CheckMenuItem(hSubMenu, SubLevel, _
                                           MF_BYPOSITION Or MF_UNCHECKED)
         End Select
      End Function

</PRE><P><LI>Open the Menu Checking form in Form view. Note that the usual
   Microsoft Access menu disappears and is replaced by the custom menu
   you designed in these steps.
<P>
   Note that as you click Check Test on the Menu Check menu, a check mark
   toggles on and off next to the menu item.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about custom menus, search for "customizing menus"
using the Microsoft Access Help menu.
<P>
For more information about similar programming features, please see the
following articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q88940.htm">Q88940</A></B>
   TITLE     : How to Dim (Gray) Menu Items with Access Basic

   ARTICLE-ID: <B><A HREF="../ACCESS/Q95935.htm">Q95935</A></B>
   TITLE     : How to Determine Whether a Menu Item Is Checked
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg PgmApi<BR>
Version             : 1.0 1.10 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

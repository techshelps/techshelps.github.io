

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: "Too few parameters. Expected 1" Error Message </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105522">
<META NAME="KBModify" CONTENT="1997/07/11">
<META NAME="KBCreate" CONTENT="1993/10/20">
<META NAME="Keywords" CONTENT="kberrmsg kbprg PgmObj QryParm">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  When you run a parameter query in Visual Basic (or Access Basic), you may receive one of the following error messages.  In Microsoft Access 7.0 and 97     Too few parameters...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QAHE,QBXS,QAH4,QBS0,QBE7,QBE6,QAKD,QA5F,QAMA,QAB4,QANF,QAY5,QACF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: "Too few parameters. Expected 1" Error Message</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105522</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
When you run a parameter query in Visual Basic (or Access Basic), you may
receive one of the following error messages.
<P>
<P><h3>In Microsoft Access 7.0 and 97</h3>
 
<P>
<PRE>   Too few parameters. Expected 1

</PRE><h3>In Microsoft Access 1.x and 2.0</h3>
 
<P>
<PRE>   # parameters were expected, but only 0 were supplied.

</PRE>This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0.
<P>
<P><h2>CAUSE</h2>
 
<P>
You receive one of these error messages if you do not set the values of all
the parameters in the parameter query in Visual Basic (or Access Basic).
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This section contains an example of the syntax you use to set the values of
a parameter, the sample code to create a query to set the values of a
parameter, and the sample code to create a function to set the values of a
parameter in parameter queries.
<P>
NOTE: You have to explicitly assign the parameter in DAO; you do not have
to explicitly assign the parameter with the DoCmd.OpenQuery (or
DoCmdOpenQuery in Microsoft Access 1.x and 2.0). The reason for this is
that DAO uses low-level operations that give you more flexibility (that is,
you can assign a variable to a parameter rather than a forms reference) but
you have to do the housekeeping that Microsoft Access does behind the
scenes with DoCmd actions. On the other hand, the DoCmd actions operate at
a higher level than DAO. When executing a DoCmd action, Microsoft Access
makes some assumptions about what to do with parameters--you don't have any
flexibility in making them accept a different value.
<P>
<P><h3>Syntax to Set the Value of a Parameter</h3>
 
<P>
To set the value of a parameter that references a form, use the following
syntax.
<P>
<P><h3>In Microsoft Access 7.0 and 97</h3>
 
<P>
<PRE>   Dim MyDB As Database
   Dim MyQDef As QueryDef

   Set MyDB = CurrentDB()
   Set MyQDef = MyDB.QueryDefs("Parameter Query")
   MyQDef![Forms!Form Name!ControlName] = Forms![Form Name]![ControlName]

</PRE><h3>In Microsoft Access 1.x and 2.0</h3>
 
<P>
NOTE: In the following sample code, an underscore (_) is used as a
line-continuation character. Remove the underscore from the end of the
line when re-creating this code.
<P>
<PRE>   Dim MyDB As Database
   Dim MyQDef As QueryDef

   Set MyDB = CurrentDB()
   Set MyQDef = MyDB.OpenQueryDef("Parameter Query")
   MyQDef![Forms!Form Name!ControlName] = Forms![Form _
      Name]![ControlName]

</PRE>In the examples, the definition variable, the exclamation point, and the
parameter, which is enclosed in brackets, are to the left of the equal
sign. Note that if the form name or control name in a form reference
contains spaces, it is usually enclosed in brackets. Do not include the
brackets if you are setting the value of the form reference parameter.
However, do include the brackets if you are referencing the form listed to
the right of the equal sign.
<P>
<P><h3>Code to Create a Query to Set the Value of a Parameter</h3>
 
<P>
To create a query that prompts you to enter the date when you run the
query, create a module and enter the following code:
<P>
<P><h3>In Microsoft Access 7.0 and 97</h3>
 
<P>
<PRE>   Dim MyDB As Database, MyQDef As QueryDef

   Set MyDB = CurrentDb()
   Set MyQDef = MyDB.QueryDefs("Parameter Query")
   MyQDef![Please enter date:] = #8/8/94#


</PRE><h3>In Microsoft Access 1.x and 2.0</h3>
 
<P>
<PRE>   Dim MyDB As Database
   Dim MyQDef As QueryDef

   Set MyDB = CurrentDB()
   Set MyQDef = MyDB.OpenQueryDef("Parameter Query")
   MyQDef![Please enter date:] = "#12/12/93#"

</PRE>NOTE: If you have more than one parameter in the query, add a line
similar to the last line in the code for each parameter.
<P>
<P><h3>Sample Function to Set the Value of a Parameter</h3>
 
<P>
The following example uses the Orders table from the sample database
Northwind.mdb (or NWIND.MDB in Microsoft Access 1.x or 2.0).
<P>
To create a function that sets the value of a parameter in a parameter
query, follow these steps:

<OL><P><LI>Open the sample database Northwind.mdb (or NWIND.MDB in Microsoft Access
   1.x or 2.0) and create the following query:
<P>
<P><PRE>      Query: Customer Orders Parameter Query
      -----------------------------------------------------------------
      Type: Select Query
      Field: CustomerID  (or Customer ID in Microsoft Access 1.x or 2.0)
<PRE></PRE>         Table: Orders
         Criteria: [Forms]![Search Form]![Customer To Find]
      Field: OrderID     (or Order ID in Microsoft Access 1.x or 2.0)
         Table: Orders
      Field: OrderDate  (or Order Date in Microsoft Access 1.x or 2.0)
         Table: Orders

</PRE><P><LI>Create the following form based on the Orders table:
<P>
<P><PRE>      Form: Search Form
      --------------------------------
      Text box:
<PRE></PRE>         ControlName: Customer To Find
         ControlSource: CustomerID
      Command button:
         ControlName: Button0
         Caption: ParamQD
         OnClick: =ParamQD()

   NOTE: The OnClick property is called the OnPush property in Microsoft
   Access version 1.x.

</PRE><P><LI>Create a module and add the following code.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      '****************************************************************
      ' Declarations Section
      '****************************************************************
      Option Compare Database
      Option Explicit
</PRE><P>
<P><PRE>      '****************************************************************
      ' Function ParamQD()
      '
      ' Purpose: To demonstrate how to set the value of a parameter that
<PRE></PRE>      '          references a form.
      '****************************************************************

      Function ParamQD()
         Dim MyDB As Database
         Dim MyQDef As QueryDef
         Dim MyDyna As Recordset    '(in Microsoft Access 7.0 and 97 only)

         'Dim MyDyna As Dynaset     '(in Microsoft Access 1.x and 2.0 only)

         Set MyDB = CurrentDB()

         Set MyQDef = MyDB.QueryDefs("Customer Orders Parameter Query")
         '(above line in Microsoft Access 7.0 and 97 only)

         'Set MyQDef = MyDB.OpenQueryDef("Customer Orders Parameter_
         ' Query")
         '(above line in Microsoft Access 1.x and 2.0 only)

         ' Set the value of the parameter.
         MyQDef![Forms!Search Form!Customer To Find] = Forms![Search _
            Form]![Customer To Find]

         ' Create the recordset (or dynaset).
         Set MyDyna = MyQDef.OpenRecordset()  '(in Microsoft Access 7.0 and
                                              ' 97 only)

         ' Set MyDyna = MyQDef.CreateDynaset()'(in Microsoft Access 1.x
                                              ' and 2.0 only)
         MyDyna.MoveLast
         MsgBox MyDyna.RecordCount
         MyDyna.Close
         MyQDef.Close
      End Function

</PRE></OL>When you enter a CustomerID on the Orders form and choose the ParamQD
button, the ParamQD() function runs and a message box is displayed
indicating how many orders that customer has.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about setting the values of a parameter, search the
Help Index for "parameter queries, creating" and then view the available
topics.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: expected supplied<BR>
Keywords            : kberrmsg kbprg PgmObj QryParm<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbprb<BR>
Resolution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

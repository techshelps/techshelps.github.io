

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Tips for Optimizing Queries on Attached SQL Tables </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99321 ">
<META NAME="KBModify" CONTENT="1997/05/20">
<META NAME="KBCreate" CONTENT="1993/05/26">
<META NAME="Keywords" CONTENT="kbusage OdbcOthr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  Special considerations must be made for performance optimization of queries built on attached SQL database tables. An SQL database, for this article, is defined as any clien...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QA1S,QAY5,QAZV,QDN9,QA39,QA2Q,QAY2,QACF,QBVV,QAUD,QABB,QAG2,QBWS,QAKD P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Tips for Optimizing Queries on Attached SQL Tables</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 20, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99321 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
Special considerations must be made for performance optimization of
queries built on attached SQL database tables. An SQL database, for
this article, is defined as any client/server database that supports
some level of ANSI SQL as an intrinsic part of the database's
programming language. Optimal query strategy for these queries is to
ensure that all query operations are performed on the server. This
article outlines tips on how to ensure that queries against attached
SQL database tables are performed on the server.
<P>
This article assumes a basic understanding of client/server computing
environments and architectures.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The key to improving query performance on attached SQL database tables
is to ensure that no data is filtered on the client. Filtering data on
the client increases network traffic and does not allow for leveraging
of advanced server hardware, essentially turning a client/server
system into a file server system. To this end, keeping the query
evaluation on the server reduces overhead and keeps an application
running as fast as possible.
<P>
Generic query optimization techniques should not be ignored when you are
using attached SQL database tables. "WHERE clause" restrictions, such as
equality or range comparisons, and sorting should still be performed on
indexed fields. For more information on query optimization, call Microsoft
Sales Information Center at 800 426-9400 to order a "white paper" on SQL
Server optimization. Other SQL database vendors may provide the same
information for their customers.
<P>
Use care when implementing intrinsic or user defined functions (UDFs)
in query fields or when using criteria that are not supported on the
server. Generally, SQL databases have functionality that corresponds
to most standard Microsoft Access functions, but each server will be
different.
<P>
Many intrinsic Microsoft Access functions have direct back-end
correspondents. Microsoft Access asks the ODBC driver about intrinsic
function support and performs the appropriate mappings.
<P>
You can use UDFs and Microsoft Access intrinsic functions without server
equivalents when they are accompanied by server-capable restrictions
that restrict the data. For example, the following query
<P>
<PRE>   Query1a: SELECT * FROM MillionRowTable WHERE Funk1(col1) = 10

</PRE>returns the whole table and evaluates Funk1(col1) = 10 locally, whereas
the following query
<P>
<PRE>   Query1b: SELECT * FROM MillionRowTable WHERE Funk1(col1) = 10
                      AND LastName BETWEEN 'g' AND 'h'

</PRE>sends the BETWEEN 'g' AND 'h' restriction to the server, returns the
qualifying rows, and evaluates Funk1(col1) on only those rows.
<P>
Non-remote-capable SELECT list items do not force a query to be
executed locally, unless they are used with unique values or a totals
query (DISTINCT/GROUP BY). For example, the following query
<P>
<PRE>    Query2a: SELECT * FROM MyTable WHERE Format(col1, ...) = 10

</PRE>returns the whole table and causes the WHERE clause to be evaluated
locally. However, the following query
<P>
<PRE>    Query2b: SELECT Format(col1,...) FROM MyTable WHERE col2 = 10

</PRE>sends "SELECT col1 FROM MyTable WHERE col2 = 10" to the server,
presumably returning far less data over the network. It then locally
evaluates Format() on the col1 values returned.
<P>
Of the following two queries, Query3a is sent completely to the
server. Query3b sends "SELECT col1 FROM MyTable" and performs the
Format() function, and therefore the DISTINCT clause, locally.
<P>
<PRE>    Query3a: SELECT DISTINCT col1 FROM MyTable
    Query3b: SELECT DISTINCT Format(col1,...) FROM MyTable

</PRE>The following two queries are performed as follows: Query4a is sent
completely to the server. Query4b sends "SELECT col1 FROM MyTable" and
performs the StdDev() aggregate function locally, since it's not a SQL
standard function.
<P>
<PRE>    Query4a: SELECT Sum(col1) FROM MyTable
    Query4b: SELECT StdDev(col1) FROM MyTable

</PRE>Crosstab queries present unique restrictions, some pertinent to all
queries, some to crosstab queries only:

<OL><P><LI>Only standard aggregate (totals) functions, such as Count(), Sum(),
   Min(), Max(), and Avg(), can be used.

<P><LI>Aggregate functions cannot be used as row or column headers.

<P><LI>Only one aggregate function can be used in the "value."

<P><LI>Nothing can be sorted.

<P><LI>If a fixed-value list of column headers is supplied, the value
   cannot be embedded in an expression.
<P>
</OL>Restriction #1 applies to all queries against SQL databases from
Microsoft Access. Except for #4, the others are uncommon and are
crosstab/SQL database specific. Crosstab queries are not SQL standard,
and are not generally supported on SQL database servers. However, if
the rules above are not violated (which is the case for most simple
crosstab queries), Microsoft Access can reformulate the query as a
standard GROUP BY query, send it remotely, return only the aggregation
result, and transform it into a crosstab locally.
<P>
Open-ended restrictions do not use indexes on SQL databases.
Typically, a SQL WHERE clause reading
<P>
<PRE>   WHERE col1 &gt; 1000

</PRE></OL>will be slower than
<P>
<PRE>   WHERE col1 between 1000 and 1000000000

</PRE>This is a server problem, not a Microsoft Access problem, but it can
affect Microsoft Access performance when a SQL database is used as a
back end.
<P>
When you are using wildcard characters, take special care to ensure
that the correct wildcards are used. SQL Server supports the use of %
and _ rather than ? and * for wildcards. For more information about using
wildcards, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q92682.htm">Q92682</A></B>
   TITLE     : ACC1x: Parameter Queries, Wildcards, and SQL Server
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbusage OdbcOthr<BR>
Version             : 1.0 1.1 2.0 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 20, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Retrieve the Path for Linked OLE Objects (7.0/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170531">
<META NAME="KBModify" CONTENT="1997/06/24">
<META NAME="KBCreate" CONTENT="1997/06/23">
<META NAME="Keywords" CONTENT="IntpOle kbcode kbole PgmHowTo PgmParse">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN RISK. Microsoft provides this code  as is  without warranty of any kind, either express or implie...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QA9Q,QA1S,QAFI,QBT6,QBS0,QBPG,QATX,QBV4,QBVV,QA7O,QAO4,QBWS,QDN9 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Retrieve the Path for Linked OLE Objects (7.0/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170531</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR
OWN RISK. Microsoft provides this code "as is" without warranty of any
kind, either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
Microsoft Access provides no way to determine the path for a linked OLE
object stored in a table. Therefore, the recommended approach is to create
an additional text field in the table and store the path to the linked OLE
object in that field.
<P>
This article demonstrates how to use a Visual Basic for Applications
procedure to retrieve the path for a linked OLE object from the object's
OLE header. However, it is possible that this procedure may not work in
some circumstances. Storing the path in a separate text field when you link
the OLE object is the best way to ensure that you will be able to retrieve
the path later.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Access stores the path of a linked OLE object as part of the
object's definition in the OLE object field. Because the definition of OLE
object storage is not documented, the following procedure searches the
object's OLE header for characters consistent with a file path.
<P>
Specifically, the procedure searches for the first occurrence of the string
":\", which indicates a mapped drive path. From this, it derives the drive
letter by obtaining the character which immediately precedes the ":\"
occurrence. Then, it derives the remainder of the path by searching for the
first null character following the ":\" occurrence. If the procedure cannot
find an occurrence of the string ":\", it searches for the first occurrence
of the string "\\", which indicates a UNC path. From this, it derives the
remainder of the path by searching for the first null character following
the "\\" occurrence. If the procedure does not find an occurrence of "\:"
or "\\", it assumes the object is not linked and returns a Null value.
<P>
NOTE: It is possible for the OLE header to contain an occurrence of either
string pattern in a location that does not store the path to the linked
object. If this occurs, the procedure returns a result that consists of
garbage characters rather than the path to the linked object.
<P>
To programmatically determine the path for a linked OLE object, follow
these steps:

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create a module and type the following line in the Declarations
    section if it is not already there:
<P>
       Option Explicit

<P><LI>Type the following procedure:
<P>
       Function GetLinkedPath(objOLE As Variant) As Variant
<PRE>          Dim strChunk As String
          Dim pathStart As Long
          Dim pathEnd As Long
          Dim path As String
          If Not IsNull(objOLE) Then
             ' Convert string to Unicode.
             strChunk = StrConv(objOLE, vbUnicode)
             pathStart = InStr(1, strChunk, ":\", 1) - 1

             ' If mapped drive path not found, try UNC path.
             If pathStart &lt;= 0 Then pathStart = _
                              InStr(1, strChunk, "\\", 1)

             ' If either drive letter path or UNC path found, determine
             ' the length of the path by searching for the first null
             ' character Chr(0) after the path was found.
             If pathStart &gt; 0 Then
                pathEnd = InStr(pathStart, strChunk, Chr(0), 1)
                path = Mid(strChunk, pathStart, pathEnd - pathStart)
                GetLinkedPath = path
                Exit Function
             End If
          Else
             GetLinkedPath = Null
          End If
       End Function

</PRE><P><LI>Close and save the module as Module1.

<P><LI>Open the Categories form in Design view.

<P><LI>Add a text box with the following properties:
<P>
       Text box:
       Name: RetrieveLinkedPath
       ControlSource: =GetLinkedPath([Forms]![Categories]![Picture])
       Width: 2.5"

<P><LI>Open the Categories form in Form view, and go to a new record.

<P><LI>In the Category Name field, type "Test". (The Category Name field is a
    required field.)

<P><LI>Click the Picture OLE object frame so that it is the selected control.

<P><LI>On the Insert menu, click Object.

<P><LI>In the Insert Object dialog box, select "Create From File," and then
    click Browse.

<P><LI>Browse your Windows folder, select a .BMP file, and then click Open.

<P><LI>Click to select the Link check box, and then click OK.

<P><LI>On the Records menu, click Save Record, or move the focus by clicking
    another control.
<P>
    Note that after the OLE object is inserted, the path to the linked
    object is displayed in the text box.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the StrConv () function, search the Help Index
for "StrConv."
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : IntpOle kbcode kbole PgmHowTo PgmParse<BR>
Version             : 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

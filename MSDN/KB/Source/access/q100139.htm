

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Database Normalization Basics </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100139">
<META NAME="KBModify" CONTENT="1997/12/29">
<META NAME="KBCreate" CONTENT="1993/06/16">
<META NAME="Keywords" CONTENT="TblOthr kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Novice: Requires knowledge of the user interface on single-user computers.  This article explains database normalization terminology for beginners. A basic understanding of this terminology is helpful when discussing the design of a relational data...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABA,QAN1,QBVV,QA5V,QAPF,QARR,QAZV,QABO,QAH4,QA7O,QA7N,QAYY,QAIB,QAGU,QAMA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Database Normalization Basics</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100139</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Novice: Requires knowledge of the user interface on single-user computers.
<P>
This article explains database normalization terminology for beginners. A
basic understanding of this terminology is helpful when discussing the
design of a relational database.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Description of Normalization</h3>
 
<P>
Normalization is the process of organizing data in a database. This
includes creating tables and establishing relationships between those
tables according to rules designed both to protect the data and to
make the database more flexible by eliminating two factors: redundancy and
inconsistent dependency.
<P>
Redundant data wastes disk space and creates maintenance problems. If
data that exists in more than one place must be changed, the data must
be changed in exactly the same way in all locations. A customer
address change is much easier to implement if that data is stored only
in the Customers table and nowhere else in the database.
<P>
What is an "inconsistent dependency"? While it is intuitive for a user
to look in the Customers table for the address of a particular
customer, it may not make sense to look there for the salary of the
employee who calls on that customer. The employee's salary is related
to, or dependent on, the employee and thus should be moved to the
Employees table. Inconsistent dependencies can make data difficult to
access; the path to find the data may be missing or broken.
<P>
There are a few rules for database normalization. Each rule is called
a "normal form." If the first rule is observed, the database is said
to be in "first normal form." If the first three rules are observed,
the database is considered to be in "third normal form." Although
other levels of normalization are possible, third normal form is
considered the highest level necessary for most applications.
<P>
As with many formal rules and specifications, real world scenarios do
not always allow for perfect compliance. In general, normalization
requires additional tables and some customers find this cumbersome. If
you decide to violate one of the first three rules of normalization,
make sure that your application anticipates any problems that could
occur, such as redundant data and inconsistent dependencies.
<P>
NOTE: The following descriptions include examples.
<P>
<P><h3>First Normal Form</h3>
 

<UL><LI>Eliminate repeating groups in individual tables.

<LI>Create a separate table for each set of related data.

<LI>Identify each set of related data with a primary key.
<P>
</UL>Do not use multiple fields in a single table to store similar data.
For example, to track an inventory item that may come from two
possible sources, an inventory record may contain fields for Vendor
Code 1 and Vendor Code 2.
<P>
But what happens when you add a third vendor? Adding a field is not
the answer; it requires program and table modifications and does not
smoothly accommodate a dynamic number of vendors. Instead, place all
vendor information in a separate table called Vendors, then link
inventory to vendors with an item number key, or vendors to inventory
with a vendor code key.
<P>
<P><h3>Second Normal Form</h3>
 

<UL><LI>Create separate tables for sets of values that apply to multiple
   records.

<LI>Relate these tables with a foreign key.
<P>
</UL>Records should not depend on anything other than a table's primary key
(a compound key, if necessary). For example, consider a customer's
address in an accounting system. The address is needed by the
Customers table, but also by the Orders, Shipping, Invoices, Accounts
Receivable, and Collections tables. Instead of storing the customer's
address as a separate entry in each of these tables, store it in one
place, either in the Customers table or in a separate Addresses table.
<P>
<P><h3>Third Normal Form</h3>
 

<UL><LI>Eliminate fields that do not depend on the key.
<P>
</UL>Values in a record that are not part of that record's key do not
belong in the table. In general, any time the contents of a group of
fields may apply to more than a single record in the table, consider
placing those fields in a separate table.
<P>
For example, in an Employee Recruitment table, a candidate's
university name and address may be included. But you need a complete
list of universities for group mailings. If university information is
stored in the Candidates table, there is no way to list universities
with no current candidates. Create a separate Universities table and
link it to the Candidates table with a university code key.
<P>
EXCEPTION: Adhering to the third normal form, while theoretically
desirable, is not always practical. If you have a Customers table
and you want to eliminate all possible interfield dependencies, you
must create separate tables for cities, ZIP codes, sales
representatives, customer classes, and any other factor that may
be duplicated in multiple records. In theory, normalization is
worth pursing; however, many small tables may degrade performance
or exceed open file and memory capacities.
<P>
It may be more feasible to apply third normal form only to data that
changes frequently. If some dependent fields remain, design your
application to require the user to verify all related fields when any
one is changed.
<P>
<P><h3>Other Normalization Forms</h3>
 
<P>
Fourth normal form, also called Boyce Codd Normal Form (BCNF), and
fifth normal form do exist, but are rarely considered in practical
design. Disregarding these rules may result in less than perfect
database design, but should not affect functionality.
<P>
<PRE>               **********************************
                 Examples of Normalized Tables
               **********************************

</PRE>Normalization Examples:
<P>
Unnormalized table:
<P>
<PRE>    Student#   Advisor   Adv-Room  Class1   Class2   Class3
    -------------------------------------------------------
    1022       Jones      412      101-07   211-02   214-01

</PRE><P><LI>First Normal Form:  NO REPEATING GROUPS
<P>
   Tables should have only two dimensions. Since one student has
   several classes, these classes should be listed in a separate
   table. Fields Class1, Class2, &amp; Class3 in the above record are
   indications of design trouble.
<P>
   Spreadsheets often use the third dimension, but tables should not.
   Another way to look at this problem: with a one-to-many
   relationship, do not put the one side and the many side in the same
   table. Instead, create another table in first normal form by
   eliminating the repeating group (Class#), as shown below:
<P>
<PRE>     Student#   Advisor   Adv-Room    Class#
     ---------------------------------------
     1022      Jones      412       101-07
     1022      Jones      412       143-01
     1022      Jones      412       159-02
     4123      Smith      216       201-01
     4123      Smith      216       211-02
     4123      Smith      216       214-01

</PRE><P><LI>Second Normal Form:  ELIMINATE REDUNDANT DATA
<P>
   Note the multiple Class# values for each Student# value in the
   above table. Class# is not functionally dependent on Student#
   (primary key), so this relationship is not in second normal form.
<P>
   The following two tables demonstrate second normal form:
<P>
<PRE>    Students:   Student#    Advisor   Adv-Room
                ------------------------------
                1022        Jones       412
                4123        Smith       216

    Registration:   Student#    Class#
                    ------------------
                    1022        101-07
                    1022        143-01
                    1022        159-02
                    4123        201-01
                    4123        211-02
                    4123        214-01

</PRE><P><LI>Third Normal Form: ELIMINATE DATA NOT DEPENDENT ON KEY
<P>
   In the last example, Adv-Room (the advisor's office number) is
   functionally dependent on the Advisor attribute. The solution is to
   move that attribute from the Students table to the Faculty table,
   as shown below:
<P>
<PRE>    Students:   Student#    Advisor
                -------------------
                1022        Jones
                4123        Smith

    Faculty:    Name    Room    Dept
                --------------------
                Jones   412     42
                Smith   216     42

</PRE></OL><h2>REFERENCES</h2>
 
<P>
"FoxPro 2 A Developer's Guide," Hamilton M. Ahlo Jr. et al., pages
220-225, M &amp; T Books, 1991
<P>
"Using Access for Windows," Roger Jennings, pages 799-800, Que
Corporation, 1993
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: BCNF relational normal model normalize<BR>
Keywords          : TblOthr kbusage<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Store Subform Totals in a Main Form Field (1.x/2.0) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119993">
<META NAME="KBModify" CONTENT="1997/05/08">
<META NAME="KBCreate" CONTENT="1994/08/30">
<META NAME="Keywords" CONTENT="FmsSubf kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes how to compute a sum of values in a subform, and store that value in a field on a main form.  This article assumes that you are familiar with constructing ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAE5,QAB6,QA7O,QA1S,QAWH,QAPN,QA7N,QAKD,QAH4,QDN9,QAB9,QADP,QAEN,QAMA,QAWI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Store Subform Totals in a Main Form Field (1.x/2.0)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119993</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes how to compute a sum of values in a subform, and
store that value in a field on a main form.
<P>
This article assumes that you are familiar with constructing and using a
main form and subform in a one-to-many relationship.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Drawbacks to Storing Calculated Values</h3>
 
<P>
Although this article demonstrates how to store a subform total in a field
on a main form, it should be noted that it is not good database design
to store computed values for the following reasons:

<UL><LI>Storing calculated values occupies additional space in your database.

<LI>You run the risk of violating the integrity of your data. If you open
   the subform and change one of the values that is summed, this change
   will not be reflected in the total stored in the main form, making
   the data inconsistent.
<P>
   Note that the sample database NWIND.MDB shipped with Microsoft Access
   version 2.0 does not store the order amount from the Order Details table
   in the Orders table as earlier versions did. Instead, it computes the
   totals in a query that is based on the Order Details table. This query
   is grouped on the Order ID field in the first column, and computes the
   total in the second column. This query can be joined to the Orders table
   in another query to see order information just as though the total had
   been stored in the Orders table. This method is not only the preferred
   database design, it is also easier to implement than storing the total
   as described below.
<P>
</UL><h3>How to Store Computed Subform Totals in a Main Form</h3>
 
<P>
This section describes how the sample database NWIND.MDB shipped with
Microsoft Access version 1.1 computes the order amount in the Order Details
subform and stores that value in the Order Amount field in the main form
based on the Orders table.
<P>
In order to correctly compute and store the order amount, a macro must be
run to recompute and store the amount whenever information for the order
changes. This is accomplished in the Orders form by running the macro
specified in the AfterUpdate property setting of the Unit Price, Quantity,
and Discount fields. A macro is also specified in the AfterUpdate property
setting of the Orders Subform form so that when the record is saved, the
order amount is recomputed and stored.
<P>
The following macro, called Orders.Update Order Amount, is specified in the
AfterUpdate property setting of the Unit Price, Quantity, and Discount
fields:
<P>
<PRE>   Action       Description
   -----------------------------------------------------------------
   DoMenuItem   Update the Order Subtotal control after changing
                values in any of the following controls: Unit Price,
                Quantity, or Discount.
   RunMacro     Run the Write Order Amount macro.

   Orders.Update Order Amount Actions
   ----------------------------------
   DoMenuItem
      Menu Bar: Form
      Menu Name: File
      Command: Save Record
   RunMacro
      Macro Name: Orders.Write Order Amount

</PRE>The DoMenuItem action saves the Order Details record with the call to the
Orders.Write Order Amount macro so that the new order can be computed.
<P>
The Orders.Write Order Amount macro is specified in the AfterUpdate
property setting of the Order Details subform and, as seen above, is
invoked from the Orders.Update Order Amount macro. The Orders.Write Order
Amount macro has the following actions:
<P>
<PRE>   Action     Description
   -----------------------------------------------------------
   SetValue   Write the value in the Order Amount control into
              the Order Amount field in the Orders table.

   Orders.Write Order Amount Actions
   -----------------------------------------------------------
   SetValue
      Item: Forms![Orders]![Order Amount]
      Expression: DSum("[Extended Price]","[Order Details2]",
                       "[Order ID]=Forms![Orders]![Order ID]")

</PRE>It should be noted that the description for the SetValue action above is
misleading. The action is not really writing the value in the Order Amount
control, it is instead computing the total using a DSum() function and
writing this value to the Order Amount field.
<P>
The DSum() expression computes the sum of line item values by summing the
Extended Price field in the Order Details2 query where the Order ID in the
Order Details table matches the current Order ID in the Orders form.
<P>
<P><h3>Using the DSum() Function Instead of Summing in the Subform Footer</h3>
 
<P>
A common technique for computing the sum of values in subform fields is to
include an expression in the subform footer that uses the Sum() function,
and then reference this sum field from the main form. The Orders form
demonstrates this technique. The subform footer has a text box called Order
Subtotal with the following expression:
<P>
<PRE>   =Sum([Extended Price])

</PRE>The Extended Price field is computed in the Order Details2 query that the
subform is based on. The Extended Price field is computed by multiplying
the Unit Price and Quantity fields, and includes a discount. This
expression is displayed on the main Orders form in a text box called
Subtotal with the following expression:
<P>
<PRE>   =[Orders Subform].Form![Order Subtotal]

</PRE>It would seem that you could use this value in the Orders.Write Order
Amount macro instead of the DSum() expression. However, there are problems
associated with doing this. The Orders.Write Order Amount macro in the
NWIND database shipped with Microsoft Access version 1.0 does use the
subform Sum() expression. In place of the DSum() expression, the SetValue
action writes the following:
<P>
<PRE>   Forms![Orders]![Orders Subform].Form![Order Subtotal]

</PRE>The problem with this method is that the expression may not always
immediately reflect the current order amount. The value is computed
independently of other actions on the form. When a field that affects this
calculation is altered in the subform, the Orders.Write Order Amount macro
may be run by the form's AfterUpdate property before Microsoft Access has a
chance to recompute the new order amount in the subform. This results in
incorrect values being stored.
<P>
This problem is described in more detail in the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q101090.htm">Q101090</A></B>
   TITLE     : ACC1x: NWIND Order Form Updates Order Amount Field with Zero

</PRE>This problem no longer occurs in the NWIND database shipped with Microsoft
Access version 1.1 because the DSum() expression is used instead of
referencing the Order Subtotal field. This explains why the description for
the SetValue action in the NWIND database shipped with Microsoft Access 1.1
incorrectly reads "Write the value in the Order Amount control..." as
described earlier.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the DSum() function, search for "DSum," and then
"DSum Function" using the Microsoft Access Help menu.
<P>
For more information about domain aggregate functions such as the DSum()
function, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q108098.htm">Q108098</A></B>
   TITLE     : ACC1x: DLookup() Usage, Examples, and Troubleshooting Tips
               (1.x)

</PRE>Microsoft Access "User's Guide," version 1.0, Chapter 11, "Using
Expressions in Forms," pages 296-298
<P>
Microsoft Access "User's Guide," version 1.1, Chapter 11, "Using
Expressions in Forms," pages 300-302
<P>
Microsoft Access "User's Guide," version 2.0, Chapter 18, "Using
Expressions in Forms," pages 457-459
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : FmsSubf kbusage<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

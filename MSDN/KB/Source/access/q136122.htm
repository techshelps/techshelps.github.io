

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: DLookup() Usage, Examples, and Troubleshooting (95/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136122">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1995/08/31">
<META NAME="Keywords" CONTENT="kbusage kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Novice: Requires knowledge of the user interface on single-user computers.  This article describes how to use the DLookup() function and includes examples and tips.  The following topics are addressed in this article:   - The DLookup() function syn...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPF,QAB9,QA5V,QAKD,QA7O,QA7N,QAUD,QAY5,QBBI,QA50,QAGU,QAVX,QA1S,QAPN,QBS0 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: DLookup() Usage, Examples, and Troubleshooting (95/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136122</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Novice: Requires knowledge of the user interface on single-user computers.
<P>
This article describes how to use the DLookup() function and includes
examples and tips.
<P>
The following topics are addressed in this article:

<UL><LI>The DLookup() function syntax and usage.

<LI>The following DLookup() function examples:
<P>
<P><PRE>    - A function with no criteria
    - Specifying numeric criteria
    - Specifying numeric criteria that comes from a field on a form
    - Specifying textual criteria
    - Specifying textual criteria that comes from a field on a form
    - Specifying date criteria
    - Specifying multiple fields in the criteria
</PRE>
<LI>Tips for troubleshooting and debugging DLookup() expressions.
<P>
</UL>Note that many difficulties in using the DLookup() function happen when you
do not set up and supply the criteria expression correctly. The criteria
expression is common to many other aggregate (totals) functions, such as
DSum(), DFirst(), DLast(), DMin(), DMax(), and DCount(). Therefore, the
following material is useful in helping you understand the domain
aggregate functions as well as the DLookup() function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>The DLookup() Function Syntax and Usage</h3>
 
<P>
You can use the DLookup() function in an expression or in a Visual Basic
for Applications function to return a field value in a domain, or specified
set of records.
<P>
The syntax of the DLookup() function is as follows:
<P>
<PRE>   DLookup(Expression, Domain [, Criteria])

</PRE>The function has three arguments: the expression, the domain, and the
criteria. (Note that the criteria argument is optional.)
<P>
You use the expression argument to identify the field that contains the
data in the domain that you want returned or to perform calculations using
the data in that field.
<P>
The domain argument is the name of the record set that identifies the
domain. It can be a table or a query name.
<P>
The criteria argument is an optional string expression you can use to
restrict the range of the data that the DLookup() function is performed
on. Note that the criteria argument is identical to the WHERE clause in an
SQL expression (except that you do not use the keyword WHERE).
<P>
The DLookup() function returns one value from a single field even if more
than one record satisfies the criteria. If no record satisfies the
criteria, or if the domain contains no records, DLookup() returns a null.
<P>
<P><h3>DLookup() Function Examples</h3>
 
<P>
The following examples demonstrate how you can use DLookup() to find or
return values from a table or query. These examples refer to the sample
database Northwind.mdb, and you can type the examples in the ControlSource
property of a text box on a form or report.
<P>
NOTE: In the following sample expressions, an underscore (_) at the end of
a line is used as a line-continuation character. Remove the underscore from
the end of the line when re-creating these expressions.
<P>
A Function with No Criteria:
<P>
This example demonstrates how to use the DLookup() function in its simplest
form: without specifying any criteria. This example returns the value
contained in the LastName field of the first record in the Employees table:
<P>
<PRE>   =DLookUp("[LastName]", "Employees")

</PRE>Specifying Numeric Criteria:
<P>
To find the last name of the employee with ID number 7, specify a criteria
to limit the range of records used:
<P>
<PRE>   =DLookUp("[LastName]", "Employees", "[EmployeeID] = 7")

</PRE>Specifying Numeric Criteria That Comes from a Field on a Form:
<P>
If you do not want to specify a particular value in the expression (as in
the previous example), use a parameter in the criteria instead. The
following examples demonstrate how to specify criteria from another field
on the current form. You can try these on the Orders form in the sample
database Northwind.mdb.
<P>
<PRE>   =DLookUp("[LastName]", "Employees", _
         "[EmployeeID] = Form![EmployeeID]")

   =DLookUp("[LastName]", "Employees", _
         "[EmployeeID] = " &amp; [EmployeeID])

   =DLookUp("[LastName]", "Employees", _
         "[EmployeeID] = " &amp; Forms![Orders]![EmployeeID])

</PRE>These three examples return the same results.
<P>
In the first example, Form![EmployeeID] appears inside the criteria's
quotation marks. "Form" tells Microsoft Access that the field reference,
"EmployeeID," comes from the current form. If you omit it, Microsoft Access
compares EmployeeID to itself in the Employees table and returns
the last name from the first record in the Employees table (the same result
as if you did not specify any criteria). This is because the first record
in the Employees table has a 1 in the EmployeeID field, so the argument
<P>
<PRE>   "[EmployeeID] = [EmployeeID]"

</PRE>computes to
<P>
<PRE>   "1 = 1"

</PRE>and would therefore be the first record that matched the criteria.
<P>
The criteria for the other two examples are made by concatenating two
string expressions with an ampersand (&amp;). In the third example, the
criteria ends with a form field reference.
<P>
When criteria are being evaluated, first the individual pieces of the
criteria are evaluated and appended or concatenated; then the whole
value is computed.
<P>
If the current value in the EmployeeID field on the Orders form is 7, the
original criteria expression
<P>
<PRE>   "[EmployeeID] = " &amp; [EmployeeID]

</PRE>would compute to
<P>
<PRE>   "[EmployeeID] = " &amp; 7

</PRE>which, when concatenated, computes to:
<P>
<PRE>   "[EmployeeID] = 7"

</PRE>If you do not specify the full form reference (as in the second example
above), Microsoft Access assumes that you are referring to the current
form.
<P>
The following example is a derivative of the third example above:
<P>
<PRE>   =DLookUp("[LastName]", "Employees", _
         "[EmployeeID] = Forms![Orders]![EmployeeID]")

</PRE>In this example, the full form reference is enclosed inside the criteria's
quotation marks. In this case, Microsoft Access correctly looks up the
value when the form first opens, but only until the EmployeeID field is
changed by modifications to a record or the addition of a record. Microsoft
Access does not automatically recompute the new employee last name value
after such a change. You can manually recompute the expression by placing
the insertion point on the control and pressing F9.
<P>
If you want the field to update automatically when the criteria changes,
make the criteria a variable by using the method of concatenating the
expression's parts as described earlier. Note that when you move to a new
record, the DLookup() text boxes that update automatically will have
"#Error" in them until you enter something in the EmployeeID text box.
<P>
Specifying Textual Criteria:
<P>
All the examples above demonstrate how to use the DLookup() function with
numeric criteria. If the criteria fields are text, enclose the text in
single quotation marks, as in the following example:
<P>
<PRE>   =DLookUp("[Title]", "Employees", "[LastName] = 'Callahan'")

</PRE>Note that you can use double quotation marks instead of single quotation
marks, although single quotation marks are preferred. Use two double
quotation marks to replace one single quotation mark. The following example
uses double quotation marks and is equivalent to the example above:
<P>
<PRE>   =DLookUp("[Title]", "Employees", "[LastName] = ""Callahan""")

</PRE>Specifying Textual Criteria That Comes from a Field on a Form:
<P>
The following example demonstrates how to find the contact name for a
customer on the Orders form. The CustomerID field is a textual key field
for the criteria, so the DLookup() statement is:
<P>
<PRE>   =DLookup("[ContactName]", "[Customers]", _
      "[CustomerID]='" &amp; [CustomerID] &amp; "'")

   -or-

   =DLookup("[ContactName]", "[Customers]", _
      "[CustomerID]='" &amp; Forms![Orders]![CustomerID] &amp; "'")

</PRE>In the second example, the criteria is made up by concatenating three
string expression pieces. The first is "[CustomerID] = '", the second is
the value contained in the actual CustomerID field, and the third is the
closing single quotation mark enclosed in double quotation marks.
<P>
When this criteria is evaluated, first the individual pieces are
evaluated and their results appended or concatenated, then the whole
value is computed.
<P>
If the current value selected in the CustomerID combo box on the Orders
form is Alfreds Futterkiste, the bound column for the combo box returns
ALFKI as the CustomerID. The original criteria expression
<P>
<PRE>   "[CustomerID] = '" &amp; [CustomerID] &amp; "'"

</PRE>evaluates as
<P>
<PRE>   "[CustomerID] = '" &amp; "ALFKI" &amp; "'"

</PRE>which, when concatenated, evaluates as:
<P>
<PRE>   "[CustomerID] = 'ALFKI'"

</PRE>Specifying Date Criteria:
<P>
If the criteria fields are date or time values, enclose the date or time
value in number signs (#). To find an employee whose birthday is on a given
date, use the following sample criteria:
<P>
<PRE>   =DLookUp("[LastName]", "Employees", "[BirthDate] = #01-27-66#")

</PRE>Specifying Multiple Fields in the Criteria:
<P>
The criteria expression can be any valid SQL WHERE clause (without the
keyword WHERE). This implies that more than one field can be used to
specify criteria for a DLookup() function.
<P>
To find the OrderID for one of the orders sold by employee
"Andrew Fuller", with an EmployeeID of 2 (numeric), for customer "Simons
<PRE> bistro", with a CustomerID of SIMOB (textual), use the following sample
 DLookup() statement:

   =DLookUp("[OrderID]", "Orders", _
         "[CustomerID] = 'SIMOB' And [EmployeeID] = 2")

</PRE>This statement returns OrderID 10556, which is the first OrderID
that matches the criteria. OrderID 10669 also matches the criteria.
<P>
The example above uses hard-coded, or specific, CustomerID and EmployeeID
values. To use variables instead of specific values for the criteria, you
can use Visual Basic for Applications to concatenate multiple string
expressions. The following Visual Basic example demonstrates this method:
<P>
<PRE>   ' Declare the variables.
   Dim CustID As String
   Dim EmpID As Long
   Dim Result

   ' Assign values to the variables to be used in the criteria.
   CustID = "SIMOB"
   EmpID = 2

   Result = DLookup("[OrderID]", "Orders", _
      "[CustomerID] = '" &amp; CustID &amp; "' And [EmployeeID] = " &amp; EmpID)
   MsgBox Result

</PRE>If the DLookup() function is unsuccessful, the variable Result contains
a null.
<P>
Note that the criteria is made up of four pieces that are evaluated
individually. The results are appended, then evaluated as a whole. The
original criteria expression
<P>
<PRE>   "[CustomerID] = '" &amp; CustID &amp; "' And [EmployeeID] = " &amp; EmpID

</PRE>evaluates as
<P>
<PRE>   "[CustomerID] = '" &amp; "SIMOB" &amp; "' And [EmployeeID] = " &amp; 2

</PRE>which, when concatenated, evaluates as:
<P>
<PRE>   "[CustomerID] = 'SIMOB' And [EmployeeID] = 2"

</PRE>You can use the next example to find an employee whose birthday falls on
today's date:
<P>
<PRE>   =DLookUp("[LastName]", "Employees", _
      "Month([BirthDate]) = " &amp; Month(Date) &amp; " And Day([BirthDate]) _
      = " &amp; Day(Date))

</PRE>If today's date is 12/2/93, the original criteria expression
<P>
<PRE>   "Month([BirthDate]) = " &amp; Month(Date) &amp; " And Day([BirthDate]) = " _
      &amp; Day(Date)

</PRE>evaluates as
<P>
<PRE>   "Month([BirthDate]) = " &amp; 12 &amp; " And Day([BirthDate]) = " &amp; 2

</PRE>which, when concatenated, evaluates as:
<P>
<PRE>   "Month([BirthDate]) = 12 And Day([BirthDate]) = 2"

</PRE><h3>Tips for Troubleshooting and Debugging DLookup() Expressions</h3>
 
<P>
To troubleshoot expressions, break down the expression into smaller
components and test the components individually in the Debug window to
ensure they work correctly. If the smaller components work correctly, they
can be put back together, piece by piece, until the final expression works
correctly.
<P>
The Debug window is a tool you can use to help debug Visual Basic
modules. Use the Debug window to test and evaluate expressions
independently of the form or macro the expression is to be used in. You can
set up expressions in the Debug window, run them, and see the results
immediately.
<P>
The following example demonstrates a strategy to break down a DLookup()
expression into smaller components you can test in the Debug window.
Assume you are having difficulty with the following statement:
<P>
<PRE>   =DLookUp("[OrderID]", "Orders", _
      "[CustomerID] = '" &amp; Forms![MyForm]![CustomerID] _
      &amp; "' And [EmployeeID] = " &amp; Forms![MyForm]![EmployeeID])

</PRE>Note that the criteria includes multiple fields in the lookup criteria, one
of which is numeric and one of which is textual.
<P>
To troubleshoot this expression, try the following:

<OL><P><LI>Press CTRL+G to open the Debug window.

<P><LI>Try the function without any criteria. To do so, type the following in
   the Debug window, then press ENTER:
<P>
<P><PRE>      ? DLookUp("[OrderID]", "Orders")
</PRE><P>
   Microsoft Access performs the calculation and displays the result on
   the next line in the Debug window.

<P><LI>Make sure the form references are correct. To do so, open the Orders
   form in the sample database Northwind.mdb and type each of the following
   lines in the Debug window, then press ENTER:
<P>
<P><PRE>      ? Forms![MyForm]![CustomerID]
</PRE><P>
<P><PRE>      -and-
</PRE><P>
<P><PRE>      ? Forms![MyForm]![EmployeeID]
</PRE>
<P><LI>Try to get the criteria fields to work independently by hard coding
   values into the expression. To do so, type each of the following lines
   in the Debug window, and then press ENTER:
<P>
<P><PRE>      ? DLookUp("[OrderID]", "Orders", "[CustomerID] = 'SIMOB'")
</PRE><P>
<P><PRE>      -and-
</PRE><P>
<P><PRE>      ? DLookUp("[OrderID]", "Orders", "[EmployeeID] = 2)
</PRE>
<P><LI>Try to get the criteria fields to work independently with a parameter in
   the query. To do so, type each of the following in the Debug window,
   and then press ENTER:
<P>
<P><PRE>      ? DLookUp("[OrderID]", "Orders", _
<PRE></PRE>         "[CustomerID] = '" &amp; Forms![MyForm]![CustomerID] &amp; "'")

      -and-

      ? DLookUp("[OrderID]", "Orders", _
         "[EmployeeID] = " &amp; Forms![MyForm]![EmployeeID])

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information about DLookup, search for "DLookup" and then
"Dlookup function" using the Microsoft Access 97 Help Index.
 
<PRE>Keywords          : kbusage kbfaq
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbtshoot</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

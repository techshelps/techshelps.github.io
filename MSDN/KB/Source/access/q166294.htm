

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: How to Create ASP Form That Can Filter Another ASP Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166294">
<META NAME="KBModify" CONTENT="1997/05/23">
<META NAME="KBCreate" CONTENT="1997/04/02">
<META NAME="Keywords" CONTENT="IntAsp IntpOthr kbusage OtpOthr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  You can create an ASP form with a combo box that will dynamically filter the Microsoft Access data displayed on another ASP Form. One way to accomplish this is to export a M...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDNQ,QA1S,QBWS,QAGI,QAPF,QBVX,QDN9,QAUR,QAH4,QBWA,QAI2,QAMB,QAHE,QBXT,QA5V P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: How to Create ASP Form That Can Filter Another ASP Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166294</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
You can create an ASP form with a combo box that will dynamically filter
the Microsoft Access data displayed on another ASP Form. One way to
accomplish this is to export a Microsoft Access 97 form that is based on a
parameter query. This creates an ASP form that uses criteria passed to it
from an HTML form. However, instead of using the HTML form that is created
automatically, you can export a second Microsoft Access 97 form to ASP
format. Then you can use the second form to filter the first form. The ASP
scripts that Microsoft Access generates for both forms need slight
modifications to achieve the desired results.
<P>
WARNING: In order for the example in this article to work correctly, you
must follow the steps in the example in the exact order in which they are
presented.
<P>
This article contains a step-by-step example that creates an ASP form with
a combo box containing a list of company names and a submit button. The
button calls an ASP form that displays only the orders for the company that
you selected in the first form's combo box.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example contains four sections:

<UL><LI>Creating the Parameter Query That the OrdersWeb Form Will Use
<LI>Creating and Exporting the OrdersWeb and CustList Forms
<LI>Customizing the ASP Files
<LI>Testing the Query
<P>
</UL>NOTE: This example contains information about editing ASP files. It
assumes that you are familiar with Active Server, Visual Basic Scripting,
and editing HTML files. Microsoft Access Technical Support engineers do not
support modification of any HTML, HTX, IDC, or ASP files.
<P>
CAUTION: Following the steps in this example will modify the sample
database Northwind.mdb. You may want to back up the Northwind.mdb file
and perform these steps on a copy of the database.
<P>
<P><h3>Creating the Parameter Query That the OrdersWeb Form Will Use</h3>
 

<OL><P><LI>Start Microsoft Access 97 and open the sample database Northwind.mdb.

<P><LI>Create a new query in Design view based on the Orders table:
<P>
<P><PRE>      Query: qryOrdersWeb
      ---------------------
      Type: Select Query
</PRE><P>
<P><PRE>      Field: Orders.*
<PRE></PRE>         Table: Orders
         Show: Yes
      Field: CustomerID
         Table: Orders
         Show: No
         Criteria: [CustID]

</PRE><P><LI>On the Query menu, click Parameters.

<P><LI>Type the following in the Query Parameters dialog box, and then click
   OK.
<P>
<PRE>      Parameter          Data Type
      ----------------------------
      [CustID]           Text

</PRE><P><LI>Save the qryOrdersWeb query and close it.
<P>
</OL><h3>Creating and Exporting the OrdersWeb and CustList Forms</h3>
 

<OL><P><LI>Use the AutoForm: Columnar Wizard to create a form based on the query
   qryOrdersWeb.

<P><LI>Click OK when prompted to enter a parameter value for CustID.

<P><LI>Save the form as OrdersWeb and then close it.

<P><LI>Create a new form in Design view based on the Customers Table.
<P>
   NOTE: In the following sample, an underscore (_) at the end of a line
   is used as a line-continuation character. Remove the underscore from
   the end of the line when re-creating the RowSource for the combo box.
<P>
<P><PRE>      Form: CustList
      ---------------------------------------------------------
      RecordSource: Customers
      NavigationButtons: No
</PRE><P>
<P><PRE>      Command button:
<PRE></PRE>         Name: CallOrdersWeb
         Caption: Display Orders
      Combo box:
         Name: CustomerFilter
         RowSource: SELECT [Customers].[CustomerID], _
                    [Customers].[CompanyName] FROM [Customers];
         ColumnCount: 2
         ColumnWidths: 0";1"
         BoundColumn: 1

</PRE><P><LI>Save and close the CustList form.

<P><LI>On the File menu, click Save As HTML. When the "Publish to the Web"
   Wizard appears, click Next on the opening screen.

<P><LI>On the "What do you want to publish?" screen, click the CustList form
   and the OrdersWeb form, and then click Next.

<P><LI>Click Next on the screen that prompts you to select a default template.

<P><LI>On the "What default format type do you want to create?" screen, click
   Dynamic ASP, and then click Next.

<P><LI>In the Data Source Name box of the "What are, or will be, the settings
<P><PRE>    for the Internet database?" screen, enter the name of a System DSN
    on your Web server that points to the Northwind sample database.
</PRE><P>
<P><PRE>    For more information on how to define a system DSN, search the Help
    index for "ODBC, setting up data sources," and see the following
    article in the Microsoft Knowledge Base:
</PRE><P>
<P><PRE>       ARTICLE-ID: <B><A HREF="../ACCESS/Q159682.htm">Q159682</A></B>
<PRE></PRE>       TITLE     : "Data Source Name Not Found" Err Msg Opening Web Page

</PRE><P><LI>In the Server URL box of that same screen, enter the URL that points to
<P><PRE>    the Web Server location where your ASP files will be stored. For
    example, if you store the ASP files in the \ASPsamp folder on the
    \\PubTest server, type <B>http://pubtest/aspsamp/</B> as your Server URL.
    Click Next.
</PRE>
<P><LI>On the "Where do you want to publish to?" screen, select the folder on
<P><PRE>    your Web server indicated by the Server URL you typed in step 11. You
    must have Execute permission for this folder. Click Finish. The
    "Publish to the Web" Wizard creates five files: CustList_1.asp,
    CustList_1alx.asp, OrdersWeb_1.asp, OrdersWeb_1alx.asp, and
    OrdersWeb_1.HTML. OrdersWeb_1.HTML is not be used for this example,
    and you can delete it.
</PRE><P>
</OL><h3>Customizing the ASP Files</h3>
 

<OL><P><LI>Use Notepad or another text editor to open the CustList_1alx.asp file,
   and locate the following VB Script procedure:
<P>
<PRE>      Sub CustomerFilter_AfterUpdate()
         call AddCtrlToList("CustomerFilter", "")
         call UpdateRefreshBtn()
      End Sub

   You must modify this procedure and add another Sub procedure that will
   handle the Click event of the CallOrdersWeb command button. Modify the
   code so that it looks like the following (you do not have to enter the
   lines that begin with apostrophes because they are comments):

      Sub CustomerFilter_AfterUpdate()
         call AddCtrlToList("CustomerFilter", "[CustID]")
         '[CustID] is the name of the parameter that will be passed to
         'OrdersWeb_1.asp.
         'The following line is commented out because this form does not
         'have navigation buttons.
         'call UpdateRefreshBtn()
      End Sub

      Sub CallOrdersWeb_Click()
         window.location.href = "OrdersWeb_1.asp?" &amp; GetCtrlQueryString()
      End Sub

</PRE><P><LI>Save and close CustList_1alx.asp.

<P><LI>Use Notepad or another text editor to open the OrdersWeb_1.asp file.
   Near the top of the file you will find the following line of code:
<P>
<P><PRE>      If IsObject(Session("Form_OrdersWeb_rs")) Then
</PRE><P>
   You must modify this line of code so that it checks to see if the
   [CustID] parameter is being passed because using the navigation buttons
   on the orders form will call OrdersWeb_1.asp without passing the
   [CustID] parameter. Change the line of code to the following:
<P>
<P><PRE>      If IsObject(Session("Form_OrdersWeb_rs")) and _
<PRE></PRE>         Request.QueryString("[CustID]").count=0 Then

</PRE><P><LI>Save and close OrdersWeb_1.asp.

<P><LI>Use Notepad or another text editor to open the OrdersWeb_1alx.asp file.
   Near the top of the file you will find the following line of code:
<P>
<P><PRE>      If IsObject(Session("Form_OrdersWeb_rs")) Then
</PRE><P>
   Change this line of code to match the following:
<P>
<P><PRE>      If IsObject(Session("Form_OrdersWeb_rs")) and _
<PRE></PRE>         Request.QueryString("[CustID]").count=0 Then

</PRE><P><LI>Save and close OrdersWeb_1alx.asp.
<P>
</OL><h3>Testing the Query</h3>
 

<OL><P><LI>Start Microsoft Internet Explorer 3.0.

<P><LI>Type the Uniform Resource Locator (URL) in the address box of your Web
   browser to view CustList_1.asp. For example, if you saved your ASP
   files in a folder called Test in the wwwroot folder of your Web
   Server, type:
<P>
<P><PRE>      <B>http://&lt;servername&gt;/test/CustList_1.asp</B>
</PRE><P>
   Note that the URL depends upon where your files are located on the Web
   Server and that Internet Explorer 3.0 with the HTML Layout Control is
   necessary to view forms exported to ASP.

<P><LI>The CustList_1.asp form opens in your Web browser with a combo box that
   contains company names and a Display Orders button. Select a company
   in the combo box, and then click the Display Orders button. The
   OrdersWeb_1.asp form displays the orders for the company that you
   selected.
<P>
   NOTE: If the CustList_1.asp form appears and works correctly, but the
   OrdersWeb_1.asp form opens to a blank page, check the [CustomerID] field
   in the query to see if the Show check box has been cleared. If it has
   not been cleared, you must clear it, and then rebuild the AutoForm
   OrdersWeb.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about exporting ASP files, search the Help Index for
"ASP files," or ask the Microsoft Access 97 Office Assistant.
<P>
For more information on how to create and modify ASP files, please refer
to your Microsoft ASP documentation.
<P>
For more information about creating a dynamic HTML combo box to filter data
in an IDC query, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q165359.htm">Q165359</A></B>
   TITLE     : Dynamic Combo Box to Filter Access Data in IDC Format
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : IntAsp IntpOthr kbusage OtpOthr<BR>
Version             : 97<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

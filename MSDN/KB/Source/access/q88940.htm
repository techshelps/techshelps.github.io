

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Dim (Gray) Menu Items with Access Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88940 ">
<META NAME="KBModify" CONTENT="1997/06/06">
<META NAME="KBCreate" CONTENT="1992/09/03">
<META NAME="Keywords" CONTENT="kbprg PgmApi">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  Access Basic does not have a command that enables you to make unavailable (to dim or gray) a menu item. There are also no form properties that enable you to set this menu ch...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVI,QA1S,QAH4,QAF0,QANF,QAY5,QBV8,QAB9,QDN9,QAPN,QBRD,QBJZ,QBWR,QBBI,QAG9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Dim (Gray) Menu Items with Access Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88940 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
Access Basic does not have a command that enables you to make unavailable
(to dim or gray) a menu item. There are also no form properties that
enable you to set this menu characteristic. However, you can use Windows
application programming interface (API) functions to change such menu item
characteristics.
<P>
NOTE: In Microsoft Access for Windows 95 version 7.0, you can accomplish
this task by using a macro or by using Visual Basic for Applications. For
more information about making a menu item unavailable, search for
"SetMenuBar action," and then "Make a custom menu commands appear dimmed
or selected" using the Microsoft Access for Windows 95 Help Index.
<P>
NOTE: These API functions will only work for custom menus created with
macros. They will not work for the default Microsoft Access menus. This
technique will also not work for custom menu items created with the
DoMenuItem action. For example, if you add a command to the menu with the
DoMenuItem action and specify the PrintPreview arguments for the action,
Microsoft Access overrides any API function that you write to check or to
dim this menu command.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following Windows API function is used to make a menu item appear
dimmed:
<P>
<PRE>    EnableMenuItem% (hMenu%, wIDEnableItem%, wEnable%)

</PRE>This function enables or disables a menu item as follows:
<P>
<PRE>   hMenu%         Specifies the menu.
   wIDEnableItem% Specifies the menu item to be checked. The
                  wIDEnableItem% parameter can specify pop-up menu
                  items as well as menu items.
   wEnable%       Specifies the action to take. It can be a
                  combination of MF_DISABLED, MF_ENABLED, and
                  MF_GRAYED. These values can be combined by using
                  the bitwise OR operator.
   Return Value   The return value specifies the previous state of the
                  menu item. The return value is -1 if the menu item
                  does not exist.

</PRE><h3>Example</h3>
 
<P>
The following example designs a menu that makes a menu item appear dimmed:

<OL><P><LI>Create the following new macro and save the macro as Menu Manipulation
   Macro:
<P>
<PRE>      Macro Name             Action        Function Name
      ----------------------------------------------------------
      GrayItem               RunCode       Gray_Menu_Item(0,0)
      UnGray                 RunCode       UnGray_Menu_Item(0,0)

   When determining the position of a menu command, separator bars
   count as commands. For example, to reference the position of the Import
   command on the File menu in the Database window, use the arguments
   0 (for the File menu) and 7 (for the Import command). Positions 3
   and 6 correspond to the separator bars on the File menu.

</PRE><P><LI>Create the following new macro and save the macro as Custom Demo Menu:
<P>
<PRE>      Macro Name             Action        Function Name
      --------------------------------------------------
      Top Level Menu         AddMenu

      [Top Level Menu].AddMenu Action Arguments
      ------------------------------------------
      Menu Name          &amp;Gray
      Menu Macro Name    Menu Manipulation Macro

</PRE><P><LI>Create a new blank form.

<P><LI>Set the MenuBar property to the Custom Demo Menu macro.
<P>
   NOTE: In version 1.x the MenuBar property is called the OnMenu
   property.

<P><LI>Save the form as Menu Manipulation Form.

<P><LI>Create a new module, type the following code, and then save the
   module as Menu Manipulation Code.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code.
<P>
<PRE>   '********************************************************************
   '            Declarations section of the module
   '********************************************************************
      Option Explicit

      Declare Function FindWindow% Lib "user" (ByVal lpClassName_
                          As Any, ByVal lpCaption As Any)
      Declare Function GetMenu% Lib "user" (ByVal hWnd%)
      Declare Function GetSubMenu% Lib "user" (ByVal hSubMenu%,_
                          ByVal nPos%)
      Declare Function EnableMenuItem% Lib "user" (ByVal hMenu%,_
                          ByVal wItem%, ByVal wEnable%)
      Declare Function IsZoomed% Lib "User" (ByVal hWnd%)
      Declare Sub DrawMenuBar Lib "User" (ByVal hWnd%)

      Const MF_BYPOSITION = &amp;H400
      Const MF_GRAYED = &amp;H1
      Const MF_UNGRAYED = &amp;H0

      Const MyNull = 0&amp;
      Const ClassName = "OMain"

      Dim ChWnd%       'handle to the Microsoft Access window.
      Dim hMenuTop%    'handle to the Microsoft Access menu.
      Dim hSubMenu%    'handle to the pop-up menu
      Dim ItemID%      'command ID associated with menu item.
      Dim ReturnVal%

      '===========================================================
      'This function initializes:
      '
      ' - The window handles associated with the Microsoft Access form.
      ' - The handle to the menu of the specified window.
      ' - The menu handle of the specified pop-up menu of the window menu.
      '
      'The variables here are global to the database.
      '===========================================================
      Sub Get_Menu_Handles (TopLevel%)

         ChWnd% = FindWindow(ClassName, MyNull)
         hMenuTop% = GetMenu(ChWnd%)
         hSubMenu% = GetSubMenu(hMenuTop%, TopLevel%)

         End Sub

      '===========================================================
      'This function dims a menu item. The text of a dimmed
      'menu item appears in light gray text on the menu,
      'but does not allow the user to select the item either by
      'mouse or keypad. The macro action associated with the
      'menu item does not execute when the user tries to select
      'the menu item.
      '===========================================================
      Function Gray_Menu_Item (TopLevel%, SubLevel%)

         'If the form is maximized, the system menu is added to the forms
         'menu bar, so increment the actual TopLevel%
         If (IsZoomed(Screen.ActiveForm.hWnd)) Then
            TopLevel% = TopLevel% + 1
         End If

         Call Get_Menu_Handles(TopLevel%)
         Gray_Menu_Item = EnableMenuItem(hSubMenu, SubLevel%,_
                              MF_GRAYED Or MF_BYPOSITION)

         DrawMenuBar ChWnd%
      End Function

      '===========================================================
      'This function does not ungray a menu item that also enables
      'the menu item so the user can select the item and run the
      'macro associated with the menu.
      '===========================================================
      Function UnGray_Menu_Item% (TopLevel%, SubLevel%)

         'If the form is maximized, the system menu is added to the forms
         'menu bar, so increment the actual TopLevel%
         If (IsZoomed(Screen.ActiveForm.hWnd)) Then
            TopLevel% = TopLevel% + 1
         End If

         Call Get_Menu_Handles(TopLevel%)
         UnGray_Menu_Item = EnableMenuItem(hSubMenu, SubLevel%,_
                                MF_UNGRAYED Or MF_BYPOSITION)

         DrawMenuBar ChWnd%
      End Function

</PRE><P><LI>Open the Menu Manipulation Form form in Form view. Note that the
   usual Microsoft Access menu disappears and is replaced by the
   custom menu you created in the previous steps.
<P>
   There are two options on the new menu. Choose the GrayItem command and
   the command appears dimmed. Choose the UnGray command and the
   GrayItem menu command is available.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: disabled enabled<BR>
Keywords            : kbprg PgmApi<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Fill a Table with Random Records from Another Table </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170986">
<META NAME="KBModify" CONTENT="1997/07/03">
<META NAME="KBCreate" CONTENT="1997/07/02">
<META NAME="Keywords" CONTENT="kbcode MdlDao MdlGnrl">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates a method that you can use to fill a table with random records from another table. The sample procedure in this article uses data access objects (DA...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QAKC,QA1S,QBC6,QAND,QAG8,QBCF,QAY2,QDN9,QA7O,QA7N,QAPN,QANF,QABI,QARR P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Fill a Table with Random Records from Another Table</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170986</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates a method that you can use to fill a table with
random records from another table. The sample procedure in this article
uses data access objects (DAO) to fill a table with a user-specified number
of records from an existing table. The following  example randomly selects
records from the Orders table in the Northwind sample database and adds
them to a new table.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
One method of obtaining a certain number of random records from a table is
to create a query based on the table. You can create an expression that
applies the Rnd() function to a number field in the table; if there is no
number field available, you can apply the Len() function to a text field
and then apply the Rnd() function to the result. Next, you set the sort
order of this calculated field to ascending or descending, and then select
from the table the other fields that you want to see in the query result.
Finally, you set the query's TopValues property to the number of records
you want.
<P>
However, there is a disadvantage to this method. When you start Microsoft
Access and run the query, a particular set of records is returned, which
can be referred to as "Recordset A." You may run the query several more
times with different results, and then quit Microsoft Access. The next time
you start Microsoft Access and run the query, the result is again Recordset
A.
<P>
One resolution is to run a procedure that uses DAO to fill a table with a
specified number of records from an existing table; this procedure also
uses the Randomize statement to reinitialize the random-number generator.
The following steps demonstrate how to use the sample subroutine
BuildRandomTable.

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create the following table:
<P>
<P><PRE>      Table: tblRandom
      -------------------------------
      Field Name: lngGuessNumber
<PRE></PRE>         Data Type: Number
         Field Size: Long Integer
         Indexed: Yes (No Duplicates)
      Field Name: lngOrderNumber
         Data Type: Number
         Field Size: Long Integer
         Indexed: No

      Table Properties: tblRandom
      ---------------------------
      PrimaryKey: lngGuessNumber

</PRE><P><LI>Create a module and type the following line in the Declarations section
   if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure:
<P>
<PRE>      Sub BuildRandomTable(lngRequest as Long)

         Dim dbsRandom As Database
         Dim rstOrders As Recordset
         Dim rstRandom As Recordset
         Dim UpperLimit As Long
         Dim LowerLimit As Long
         Dim lngCounter As Long
         Dim lngGuess As Long
         Dim lngRecordCount As Long

         ' Assumes that this module is in the Northwind database.
         Set dbsRandom = CurrentDb
         ' Delete any existing records from tblRandom table.
         dbsRandom.Execute "Delete * from tblRandom;"
         ' Open Orders as a Table Type recordset.
         Set rstOrders = dbsRandom.OpenRecordset("Orders", dbOpenTable)
         rstOrders.MoveFirst
         LowerLimit = rstOrders!OrderID
         rstOrders.MoveLast
         UpperLimit = rstOrders!OrderID
         lngRecordCount = rstOrders.RecordCount

         Set rstRandom = dbsRandom.OpenRecordset("tblRandom", _
                         dbOpenDynaset)
         lngCounter = 1

         ' Check to make sure the number of
         ' records requested is reasonable.
         If lngRequest &gt; lngRecordCount Then
            MsgBox "Request is greater than the total number of records."
            Exit Sub
         Else
            lngRequest = lngRequest + 1
         End If

         Randomize
         Do Until lngCounter = lngRequest
            ' Generate a random number
            lngGuess = Int((UpperLimit - LowerLimit + 1) _
               * Rnd + LowerLimit)
         ' Ensure that it exists in the Orders table.
         rstOrders.Index = "PrimaryKey"
         rstOrders.Seek "=", lngGuess
         If rstOrders.NoMatch Then
            ' Drop through and generate a new number.
         Else
            ' Check to see if it's already been used in the new table.
            rstRandom.FindFirst "lngOrderNumber =" &amp; lngGuess
            ' If not, add it to the new table.
            If rstRandom.NoMatch Then
                With rstRandom
                    .AddNew
                    !lngGuessNumber = lngCounter
                    !lngOrderNumber = lngGuess
                    .Update
                End With
                lngCounter = lngCounter + 1
            End If
          End If
          Loop
          ' Clean up.
          dbsRandom.Close
      End Sub

</PRE><P><LI>To test this procedure, type the following line in the Debug window,
   and then press ENTER:
<P>
<P><PRE>      BuildRandomTable 5
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using a query to select random records, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q128874.htm">Q128874</A></B>
   TITLE     : ACC: Find N Records in Random Order

</PRE></OL>For more information about the Rnd function and the Randomize statement,
search the Help Index for "random numbers."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: seed<BR>
Keywords            : kbcode MdlDao MdlGnrl<BR>
Version             : 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Create For Next Loops in a Macro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90815 ">
<META NAME="KBModify" CONTENT="1997/05/14">
<META NAME="KBCreate" CONTENT="1992/10/22">
<META NAME="Keywords" CONTENT="kbusage McrOthr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  To perform a For Next loop in a Microsoft Access macro, you need to use a combination of correct macro structure and the RunMacro action with appropriate information supplied in either the Repeat Count or Repeat Expression parameters.  To enhance y...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALX,QAM9,QAH4,QA1S,QAPN,QAA7,QAWF,QAKJ,QAKD,QAY5,QAB9,QDN9,QBT6,QAPF,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Create For Next Loops in a Macro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 14, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90815 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, and 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To perform a For Next loop in a Microsoft Access macro, you need to
use a combination of correct macro structure and the RunMacro action
with appropriate information supplied in either the Repeat Count or
Repeat Expression parameters.
<P>
To enhance your macro, you can use a different macro structure and
include a call to an Access Basic function that maintains a
counter, or use the SetValue macro action to maintain and update a
counter value in a text box on a hidden form. The benefit of
maintaining a counter is that you can use the value of the counter in
your macro processing just as in a Access Basic For Next loop.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To perform a For Next loop in a macro, you would use a macro similar
to the following examples. To create the following sample macros, open
a new macro and choose Macro Names from the View menu. Add the
following macro names and actions, then save this macro group as
"For_Next_Loops".
<P>
<P><h3>For Next Loop Using Repeat Count</h3>
 
<P>
<PRE>   Macro Name       Action
   -------------------------
   For_Next_Loop1   RunMacro
   Loop1            MsgBox

   For_Next_Loop1 Actions
   ----------------------------------
   RunMacro
      MacroName: For_Next_Loops.Loop1
      Repeat Count: 10

   Loop1 Actions
   -------------------
   MsgBox
      Message: ="Loop"

</PRE>In this example, the For_Next_Loop1 macro calls the Loop1 macro 10
times. The number of times the macro is called is specified in the
Repeat Count parameter of the RunMacro action.
<P>
The limitation of this example is that a counter value is not
available to indicate which instance of the loop is being executed. As
a result, there is no way to tell if this is the first, fifth, or
tenth time the loop is being executed.
<P>
<P><h3>For Next Loop That Maintains a Counter in a Text Box on a Form</h3>
 
<P>
<PRE>   Macro Name       Action
   -------------------------
   For_Next_Loop2   SetValue
                    RunMacro
   Loop3            MsgBox
                    SetValue

   For_Next_Loop2 Actions
   ----------------------
   SetValue
      Item: Forms![CounterForm]![Counter]
      Expression: 1
   RunMacro
      MacroName: For_Next_Loops.Loop2
      Repeat Expression: Forms![CounterForm]![Counter]&lt;=10

   Loop2 Actions
   -------------------
   MsgBox
      Message: ="Loop Count: " &amp; Forms![CounterForm]![Counter]
   SetValue
      Item: Forms![CounterForm]![Counter]
      Expression: Forms![CounterForm]![Counter]+1

</PRE>In this example, the For_Next_Loop2 macro uses the SetValue macro
action to initialize (set to a value of 1) a counter in a text box
called Counter on a form called CounterForm. It then runs the Loop2
macro until the Repeat Expression parameter evaluates to false. In
this example, the loop executes 10 times. The Loop2 macro displays a
message box that indicates which instance of the loop is being
executed by referring to the counter value in the Counter text box.
The Loop2 macro then increments the counter (adds 1 to the current
counter value) by using the SetValue macro action.
<P>
The benefit of this example is that a counter value is available to
indicate which instance of the loop is being executed. The drawback to
this example is that it depends on a form that must be created and
opened prior to the execution of the loop. The form can be hidden or
visible, but it must be open for this example to work.
<P>
<P><h3>For Next Loop Using Access Basic Function to Maintain a Counter</h3>
 
<P>
<PRE>   Macro Name       Action
   -------------------------
   For_Next_Loop3   RunCode
                    RunMacro
   Loop3            MsgBox
                    RunCode

   For_Next_Loop3 Actions
   --------------------------------------
   RunCode
      Function Name: =LoopCount(1)
   RunMacro
      MacroName: For_Next_Loops.Loop3
      Repeat Expression: LoopCount(3)&lt;=10

   Loop3 Actions
   -----------------------------------------
   MsgBox
      Message: ="Loop Count: " &amp; LoopCount(3)
   RunCode
      Function Name: =LoopCount(2)

</PRE>In this example, the For_Next_Loop3 macro runs the LoopCount(1)
function by using the RunCode macro action. This causes the function
to initialize the counter to a value of 1. It then runs the Loop2
macro using the RunMacro action until the Repeat Expression parameter
is false. LoopCount(3), which is used in the conditional expression,
returns the current value of the counter. Therefore, when the counter
reaches 11, the loop has executed 10 times, and when the RunMacro
action checks the condition, it evaluates to false and will not call
the Loop3 macro again. The Loop3 macro displays a message box that
indicates which instance of the loop is being executed by referring to
the counter value returned by the LoopCount(3) function call. The
Loop3 macro then increments the counter using the RunCode macro
action, which calls the function LoopCount(2).
<P>
The benefits of this example are that a counter is available that
indicates which instance of the loop is being executed and you do not
need to create and open a form with a control on it to contain the
counter value. The drawback to this example is that you need to create
the LoopCount() Access Basic function prior to using this
example; however, after you create the function it is available
anywhere in Microsoft Access.
<P>
The Access Basic function procedure LoopCount() returns the
current value of a counter that the function declares and maintains.
Depending on which parameter is passed (1, 2, or any other number),
LoopCount() will initialize, increment, or return the counter's
current value. Below is the Access Basic code for the LoopCount()
function procedure.
<P>
<PRE>   Function LoopCount (Action)
      Static LoopCounter             ' Static variable to hold counter
      If Action = 1 Then             ' Initialize counter
         LoopCounter = 0
      ElseIf Action = 2 Then         ' Increment counter
         LoopCounter = LoopCounter + 1
      End If
      LoopCount = LoopCounter        ' Return value
   End Function

</PRE><h2>REFERENCES</h2>
 
<P>
Microsoft Access "Introduction to Programming," version 1.0, chapter 3,
pages 6-7 and 10-11
<P>
Microsoft Access "Language Reference," version 1.0, pages 246-248,
316-317, 412-414, and 437-438
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbusage McrOthr<BR>
Version             : 1.0 1.10 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 14, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

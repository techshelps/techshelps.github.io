

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Create a Multiuser Custom Counter (1.x/2.0) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88159 ">
<META NAME="KBModify" CONTENT="1997/07/16">
<META NAME="KBCreate" CONTENT="1992/08/18">
<META NAME="Keywords" CONTENT="kbusage TblDatyp">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  You can define a field as a counter in a Microsoft Access table. When you define a field as a counter, Microsoft Access manages the numbering in the field. When you add a record,...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALX,QAM9,QA1S,QBJZ,QDN9,QA7O,QAMA,QAKD,QBXS,QA59,QA5F,QAUR,QA7N,QAKC,QA5V V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Create a Multiuser Custom Counter (1.x/2.0)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88159 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
You can define a field as a counter in a Microsoft Access table. When you
define a field as a counter, Microsoft Access manages the numbering in
the field. When you add a record, Microsoft Access assigns the next
available value to the field. You have no control over this value.
<P>
You may want to use a unique counter that is not immediately sequential in
nature. For example, you may want to use a counter that decrements, or a
counter that steps according to some value.
<P>
This article demonstrates a sample user-defined Access Basic function that
you can use to create a custom counter field.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools
provided with Microsoft Access. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x, or the "Building Applications" manual in version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following steps outline in general how to create a custom counter.
Later in the article, you will find a more detailed description of how
to create a custom counter.

<OL><P><LI>Create a separate table that will maintain the next available custom
   counter. This table will have one field and one record, with the value
   of the next available counter in this one record.

<P><LI>From within Access Basic, open this counter table and retrieve the
   value stored there.

<P><LI>Increment the value retrieved and store the number back into the
   database.

<P><LI>Close the table and use the value in the appropriate table as the
   next available counter.
<P>
</OL>In a single-user environment, you can accomplish the steps described above
with macro actions. In a multiuser environment, you need Access Basic to
handle the event where this counter table is locked. Macro actions do not
provide the locking control needed in a multiuser environment.
<P>
The following example describes how to create a custom counter field with
positive number values divisible by 10 (that is, 10, 20, 30, and so on) in
sequential order:
<P>
<P><h3>The Table</h3>
 

<OL><P><LI>From the File menu, choose New, and then select Table.

<P><LI>Add a field to the table called Next Available Counter. Set the
   data type of the Next Available Counter field to Number.

<P><LI>From the Edit menu, choose Primary Key to make the Next Available
   Counter field the primary key.

<P><LI>From the View menu, choose Datasheet View.

<P><LI>A dialog box appears, prompting you to save the table. Save the table
   as Counter Table.

<P><LI>In Datasheet view, enter a value of 10 in the Next Available Counter
   field.

<P><LI>From the File menu, choose Close to close the table.
<P>
</OL><h3>The Module</h3>
 

<OL><P><LI>From the File menu, choose New, and then select Module to create a new
   module.

<P><LI>Type the following function in the module:
<P>
<P><PRE>       Function Next_Custom_Counter ()
</PRE><P>
<PRE>          On Error GoTo Next_Custom_Counter_Err

          Dim MyDB As Database
          Dim MyTable As Table

          Dim NextCounter As Integer
          ' If the control is large, you may need to make this a Double.

          '==============================================================
          ' Open table and get the next available number, increment value
          '    by 10 and save the number back into the table.
          '==============================================================

          Set MyDB = CurrentDB()
          Set MyTable = MyDB.OpenTable("Counter Table")

          MyTable.Edit
          NextCounter = MyTable("Next Available Counter")

          '===============================================================
          ' The next line can be changed to conform to your custom counter
          ' preferences. This example only increments the value by +10
          ' each time.
          '===============================================================

          MyTable("Next Available Counter") = NextCounter + 10
          MyTable.Update

          MsgBox "Next available counter value is " &amp; Str$(NextCounter)
          Next_Custom_Counter = NextCounter

          Exit Function

   '================================================================
   ' The following error routine should be replaced with a custom
   ' error routine. This example only resumes execution if an error
   ' occurs. If a record locking error occurs, this is fine. But any
   ' non-record locking error will result in an infinite loop.
   '================================================================

          Next_Custom_Counter_Err:
             Msgbox "Error " &amp; err &amp; ": " &amp; error$
             If ERR &lt;&gt; 0 then Resume
          End
       End Function

</PRE><P><LI>On the File menu, choose Save. Save the module as Custom Counter
   Demo.
<P>
</OL><h3>The Form</h3>
 

<OL><P><LI>From the File menu, choose New, and then select Form. Choose the
   Blank Form button to start with a blank form.

<P><LI>Add a command button to the form, and set the control's OnPush
   property to:
<P>
<P><PRE>      =Next_Custom_Counter()
</PRE><P>
   NOTE: In Microsoft Access version 2.0, the OnPush property is called
   the OnClick property.

<P><LI>Save the form as Custom Counter Demo.
<P>
</OL><h3>Execution</h3>
 

<OL><P><LI>Switch the form to Form view.

<P><LI>Click the command button. Note that a message box appears, displaying
   the value of the next counter.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: network duplicate<BR>
Keywords            : kbusage TblDatyp<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

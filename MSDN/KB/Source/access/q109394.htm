

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Add an Icon to Program Manager Using DDE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109394">
<META NAME="KBModify" CONTENT="1997/06/03">
<META NAME="KBCreate" CONTENT="1994/01/02">
<META NAME="Keywords" CONTENT="IntpDde kbinterop PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes a sample Access Basic function called CreatePROGMANIcon() that you can use to create an icon in the Microsoft Windows Program Manager using dynamic da...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABO,QAH4,QA1S,QDN9,QAMA,QAH5,QAGU,QBBI,QAY5,QBV8,QAB9,QA5F,QDL9,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Add an Icon to Program Manager Using DDE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109394</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes a sample Access Basic function called
CreatePROGMANIcon() that you can use to create an icon in the Microsoft
Windows Program Manager using dynamic data exchange (DDE).
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Introduction to Programming" manual in Microsoft Access version
1.x, or the "Building Applications" manual, Chapter 3, "Introducing Access
Basic" in version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To set up the CreatePROGMANIcon() function, create a new module and enter
the code below.
<P>
NOTE: In the following sample code, an underscore (_) is used as a line-
continuation character. Remove the underscore from the end of the line when
re-creating this code in Access Basic.
<P>
<PRE>   Option Explicit

   '**************************************************
   ' FUNCTION: CreatePROGMANIcon
   '
   ' PURPOSE:
   '   To create an icon in the Windows Program Manager.
   '
   ' ARGUMENTS:
   '   CommandLine - The command line argument to execute
   '                 when the icon is double-clicked.
   '   IconText    - The text to appear under the icon.
   '   GroupName   - The name of the group to place the
   '                 icon in.
   ' RESULT:
   '   An icon is placed in the specified group. If the
   '   group does not exist, a new group is created.
   '
   ' *************************************************
   Function CreatePROGMANIcon (CommandLine$, IconText$, GroupName$)
      Dim ChanNum As Integer
      Dim Groups As String
      Dim Exe As String

      ' Begin a DDE conversation with Program Manager.
      ChanNum = DDEInitiate("PROGMAN", "PROGMAN")

      ' Request a tab delimited list of Program Manager groups.
      Groups = DDERequest(ChanNum, "Progman")

      ' See if the requested group exists in the list.
      ' If not, create the group.
      If Not InStr(1, Groups, GroupName) Then
         DDEExecute ChanNum, "[CreateGroup(" &amp; GroupName &amp; ")]"
      End If

      ' Add an icon to the group with the specified text underneath.
      Exe = "[AddItem(" &amp; CommandLine &amp; ", " &amp; IconText &amp; ",,)]"
      DDEExecute ChanNum, Exe
      DDETerminate ChanNum

   End Function

</PRE><h3>How to Use the CreatePROGMANIcon() Function</h3>
 
<P>
Type the command below in an Immediate window and then press ENTER.
<P>
NOTE: In the following example, an underscore (_) is used as a line-
continuation character. Remove the underscore when re-creating this
example.
<P>
<PRE>   ? CreatePROGMANIcon("C:\WINDOWS\NOTEPAD.EXE C:\AUTOEXEC.BAT", _
      "AUTOEXEC", "MAIN")

</PRE>The sample command above uses the CreatePROGMANIcon() function to add an
icon to the Main group in Program Manager. The icon will open the Windows
Notepad text editor and load the C:\AUTOEXEC.BAT file into Notepad.
<P>
Note that when the icon is created, Program Manager uses the default icon
supplied with the application specified in the command line. The following
function is a modified version of the CreatePROGMANIcon() function with two
additional arguments. These arguments are IconFile, which specifies the
name of a file containing custom icons, and IconNum, which specifies which
icon in the IconFile to use. Note that if you specify "", or null, for both
of these arguments, the default icon will be used.
<P>
<PRE>   Function CreatePROGMANIcon2 (CommandLine$, IconText$, GroupName$, _
      IconFile$, IconNum$)

      Dim ChanNum As Integer
      Dim Groups As String
      Dim Exe As String

      ' Begin a DDE conversation with Program Manager.
      ChanNum = DDEInitiate("PROGMAN", "PROGMAN")

      ' Request a tab delimited list of Program Manager groups.
      Groups = DDERequest(ChanNum, "Progman")

      ' See if the requested group exists in the list.
      ' If not, create the group.
      If Not InStr(1, Groups, GroupName) Then
         DDEExecute ChanNum, "[CreateGroup(" &amp; GroupName &amp; ")]"
      End If

      ' Add an icon to the group with the specified text underneath.
      Exe$ = "[AddItem(" &amp; CommandLine &amp; ", " &amp; IconText &amp; ", _
             " &amp; IconFile &amp; ", " &amp; IconNum &amp; ")]"
      DDEExecute ChanNum, Exe
      DDETerminate ChanNum

   End Function

</PRE>The following sample command uses the fourth icon in the MORICONS.DLL file
that is supplied with Windows. This file contains multiple custom icons:
<P>
<PRE>   CreatePROGMANIcon2("C:\TEST\TEST.EXE ","My App","My Group",_
      "C:\WINDOWS\MOREICONS.DLL","4")

</PRE>The next sample command uses an icon in an .ICO file. Since there is only
one icon in each .ICO file, leave the IconNum argument empty:
<P>
<PRE>   CreatePROGMANIcon2("C:\TEST\TEST.EXE ","My App","My Group",_
      "C:\ICONS\MY.ICO","")

</PRE><h2>REFERENCES</h2>
 
<P>
Windows Software Development Kit "Guide to Programming," pages 19-22
<P>
For more information about DDE and Program Manager, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCOTHER/Q119724.htm">Q119724</A></B>
   TITLE:      ADT2: How to Add an Icon to Program Manager Using DDE
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : IntpDde kbinterop PgmHowTo<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

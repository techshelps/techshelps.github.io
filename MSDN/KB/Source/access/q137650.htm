

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Simulate Drag-And-Drop Capabilities (95/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137650">
<META NAME="KBModify" CONTENT="1997/11/12">
<META NAME="KBCreate" CONTENT="1995/10/02">
<META NAME="Keywords" CONTENT="FmsHowto kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  Microsoft Access does not have a built-in DragDrop event for controls as does Visual Basic. This article describes how to create a DragDrop procedure that will run in respon...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMN,QACI,QA9N,QA7O,QAB5,QAOE,QAFF,QBVR,QA4Q,QBE7,QBE6,QAPN,QAO4,QAPF,QAH4 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Simulate Drag-And-Drop Capabilities (95/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 12, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137650</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
Microsoft Access does not have a built-in DragDrop event for controls as
does Visual Basic. This article describes how to create a DragDrop
procedure that will run in response to a Microsoft Access control being
dragged to another control.
<P>
This article provides two examples that demonstrate the use of the DragDrop
procedure. The first example demonstrates how to drag the value in a
control on one form to a control on a second form. The second example
demonstrates how to move items from one list box to a second list box using
a drag-and-drop procedure. If you perform a drag-and-drop procedure with
the CTRL key held down, all items from one list will be moved to the second
list.
<P>
NOTE: This article explains a technique demonstrated in the sample
files, FrmSampl.exe (for Microsoft Access for Windows 95 version 7.0)
and FrmSmp97.exe (for Microsoft Access 97). For information about how
to obtain these sample files, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q150895.htm">Q150895</A></B>
   TITLE     : ACC95: Microsoft Access Sample Forms Available on MSL

   ARTICLE-ID: <B><A HREF="../ACCESS/Q175066.htm">Q175066</A></B>
   TITLE     : ACC97: Microsoft Access 97 Sample Forms Available on MSL

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The four procedures below, DragStart, DragStop, DropDetect, and DragDrop,
are required to implement drag-and-drop capabilities between controls in
Microsoft Access.
<P>
<P><h3>DragStart, DragStop</h3>
 
<P>
Enables a control to be dragged. DragStart and DragStop are called from the
MouseDown and MouseUp events respectively for each control that you want to
be capable of being dragged.
<P>
<PRE>   Syntax:

      Sub DragStart (DragFrm As Form)
      Sub DragStop ()

      DragFrm: The form containing the control being dragged.

   Example:

      Private Sub MyControl_MouseDown (Button As Integer, Shift As ...
         DragStart Me
      End Sub

      Private Sub MyControl_MouseDown (Button As Integer, Shift As ...
         DragStop
      End Sub

</PRE><h3>DropDetect</h3>
 
<P>
Enables a control to be a drop target. DropDetect should be called from the
MouseMove event for each control that you want to be a drop target for a
control being dragged.
<P>
<PRE>   Syntax:

      Sub DropDetect (DropFrm As Form, DropCtrl As Control,
                      Button As Integer, Shift As Integer,
                      X As Single, Y As Single)

      DropFrm: The form containing the control being dropped on.
      DropCtrl: The control being dropped on.
      Button, Shift, X, Y: The parameters from the MouseMove event.

   Example:

      Private Sub MyControl_MouseMove (Button As Integer, Shift As ...
         DropDetect Me, Me![Employee ID], Button, Shift, X, Y
      End Sub

</PRE>NOTE: A control can be dragged and be a drop target by calling DragStart,
DragStop, and DropDetect from the MouseDown, MouseUp, and MouseMove events
respectively.
<P>
<P><h3>DragDrop</h3>
 
<P>
This procedure will be called in response to a drag-enabled control being
dragged to a drop-enabled control. You will add your own code to this
procedure to control what happens in response to a drop operation.
For example you could copy the contents of the dragged control to the
dropped control.
<P>
<PRE>   Syntax:

      Sub DragDrop (DragFrm As Form, DragCtrl As Control, DropFrm As Form,
                    DropCtrl As Control, Button As Integer, Shift As _
                         Integer,
                    X As Single, Y As Single)

   DragFrm:  The form containing the control being dragged.
   DragCtrl: The control being dragged.
   DropFrm:  The form containing the control being dropped on.
   DropCtrl: The control being dropped on.
   Button:   The state of the mouse buttons when the drop occurred.
   Shift:    The state of the SHIFT, CTRL, ALT keys when the drop occurred.
   X, Y:     The x and y coordinates of the mouse where the drop occurred.

   NOTE: For more information on Button, Shift, X, Y arguments, search
   Help for the MouseMove event.

</PRE>Example:
<P>
The following example will copy the contents of the drag control to the
drop control, trapping and displaying any error that occurs:
<P>
<PRE>   Sub DragDrop (DragFrm As Form, DragCtrl As Control, ...
      On Error Resume Next
      DropCtrl = DragCtrl
      If Err Then MsgBox Error$
   End Sub

</PRE><h3>EXAMPLE 1: Drag and Drop Between Controls on Two Forms</h3>
 
<P>
The following example demonstrates how to set the Salesperson combo box on
the Northwind Orders form by dragging the EmployeeID field from the
Employees form and dropping it into the Salesperson combo box.
<P>
<PRE>  1. Open the sample database Northwind.mdb.

  2. Create a new module and type the following lines in the Declarations
     section:

       Option Explicit

       Dim DragFrm As Form
       Dim DragCtrl As Control
       Dim DropTime

       Const MAX_DROP_TIME = .1

       Dim CurrentMode As Integer
       Const NO_MODE = 0
       Const DROP_MODE = 1
       Const DRAG_MODE = 2

  3. Type the following three procedures:

       Sub DragStart (SourceFrm As Form)
          ' NOTE: You should not use Screen.ActiveForm in place of
          ' SourceFrm because you may be dragging from a subform.
          Set DragFrm = SourceFrm
          Set DragCtrl = Screen.ActiveControl
          CurrentMode = DRAG_MODE
       End Sub

       Sub DragStop ()
          CurrentMode = DROP_MODE
          DropTime = Timer
       End Sub

       Sub DropDetect (DropFrm As Form, DropCtrl As Control, _
                       Button As Integer, Shift As Integer, _
                       X As Single, Y As Single)
          ' If a drop hasn't happened, then exit.
          If CurrentMode &lt;&gt; DROP_MODE Then Exit Sub
          CurrentMode = NO_MODE

          ' The timer interval is permitted between the MouseUp event and
          ' the MouseMove event. This ensures that the MouseMove event does
          ' not invoke the Drop procedure unless it is the MouseMove event
          ' that Microsoft Access automatically fires for the Drop control
          ' following the MouseUp event of a drag control. Subsequent
          ' MouseMove events will fail the timer test and be ignored.

          If Timer - DropTime &gt; MAX_DROP_TIME Then Exit Sub

          ' Did we drag/drop onto ourselves?
          If (DragCtrl.Name &lt;&gt; DropCtrl.Name) Or _
             (DragFrm.hWnd &lt;&gt; DropFrm.hWnd) Then
             ' If not, then a successful drag/drop occurred.
         DragDrop DragFrm, DragCtrl, DropFrm, DropCtrl, Button, Shift, X, Y
         End If
       End Sub

  4. Type the following DragDrop procedure.

     NOTE: This procedure does not have to appear in the same module as the
     procedures typed above. Because you will be customizing the contents
     of the DragDrop procedure to respond to a successful drag-and-drop
     operation, it may be better to place it in a separate module.

       Sub DragDrop (DragFrm As Form, DragCtrl As Control, _
                     DropFrm As Form, DropCtrl As Control, _
                     Button As Integer, Shift As Integer, _
                     X As Single, Y As Single)
          On Error Resume Next
          DropCtrl = DragCtrl
          If Err Then MsgBox Error$
       End Sub

  5. Open the Orders form in Design view and add the following OnMouseMove
     event procedure code for the Salesperson combo box:

       Sub EmployeeID_MouseMove (Button As Integer, Shift As Integer, _
          X As Single, Y As Single)
          DropDetect Me, Me![EmployeeID], Button, Shift, X, Y
       End Sub

     NOTE: This control will only be a drop target.

  6. Open the Employees form in Design view and set the Enabled property of
     the EmployeeID text box to Yes.

  7. Add the following OnMouseDown event procedure code for the EmployeeID
     control:

       Sub EmployeeID_MouseDown (Button As Integer, Shift As Integer, _
       X As Single, Y As Single)
          DragStart Me
       End Sub

     NOTE: This control will only be a drag target.

  8. Add the following OnMouseUp event procedure code for the EmployeeID
     control:

       Sub EmployeeID_MouseUp (Button As Integer, Shift As Integer, _
       X As Single, Y As Single)
          DragStop
       End Sub

  9. View the Orders form in Form view and position it in the upper-left
     corner of the screen.

 10. View the Employees form in Form view and position it on top of the
     Orders form, but to the right in such a way that the Salesperson combo
     box on the Orders form is still visible.

 11. Hold down the mouse button in the EmployeeID text box in the Employees
     form, then move the mouse pointer (still holding the button down) over
     the Salesperson combo box on the Orders form, and then release the
     mouse button.

</PRE>RESULT: The Salesperson combo box will contain the salesperson that you
dragged from the Employees form. Try navigating to different Employee
records and dragging the Employee ID to the Salesperson combo box.
<P>
<P><h3>EXAMPLE 2: Drag and Move Items from One List Box to Another List Box</h3>
 
<P>
The following example demonstrates how to present a list of items to a user
in one list box and how to move these items back and forth to a second list
box using a drag-and-drop operation.

<OL><P><LI>Complete the first four steps of EXAMPLE 1 to create the Drag and Drop
   procedures in the Northwind database.

<P><LI>Open the Customers table in Design view and add the following new field:
<P>
<P><PRE>      Field Name: Selected
      Data Type : Yes/No
</PRE>
<P><LI>Create a new, blank form called List Box Example with the following
   properties:
<P>
<P><PRE>      RecordSelectors: No
      NavigationButtons: No
      ScrollBars: Neither
</PRE>
<P><LI>Add a list box to the form with the following properties:
<P>
<P><PRE>      Name: List1
      RowSourceType: Table/Query
      RowSource: SELECT CustomerID, CompanyName FROM Customers WHERE
      Selected=False ORDER BY CompanyName;
      ColumnCount: 2
      ColumnWidths: 0
      Width: 1.5"
      Height: 1.5"
</PRE>
<P><LI>Add a second list box next to the first list box with the following
   properties:
<P>
<P><PRE>      Name: List2
      RowSourceType: Table/Query
      RowSource: SELECT CustomerID, CompanyName FROM Customers WHERE
      Selected=True ORDER BY CompanyName;
      ColumnCount: 2
      ColumnWidths: 0
      Width: 1.5"
      Height: 1.5"
</PRE>
<P><LI>On the View menu click Code and enter the following event procedure
   code for the List1 and List2 mouse events:
<P>
<P><PRE>      Private Sub List1_MouseDown (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
<PRE></PRE>         DragStart Me
      End Sub

      Private Sub List1_MouseMove (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
         DropDetect Me, Me![List1], Button, Shift, X, Y
      End Sub

      Private Sub List1_MouseUp (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
         DragStop
      End Sub

      Private Sub List2_MouseDown (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
         DragStart Me
      End Sub

      Private Sub List2_MouseMove (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
         DropDetect Me, Me![List2], Button, Shift, X, Y
      End Sub

      Private Sub List2_MouseUp (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
         DragStop
      End Sub

</PRE><P><LI>Modify the DragDrop procedure created in step 4 in Example 1 to read
   as follows:
<P>
<PRE>      Sub DragDrop (DragFrm As Form, DragCtrl As Control, _
                    DropFrm As Form, DropCtrl As Control, _
                    Button As Integer, Shift As Integer, _
                    X As Single, Y As Single)
         ' Which form was dropped on?
         ' It is a good idea to use the DragDrop procedure to
         ' determine which drag-and-drop operation occurred; then call
         ' appropriate code to handle the special cases.
         Select Case DropFrm.Name
            Case "List Box Example"
               ListBoxExample DragFrm, DragCtrl, DropFrm, DropCtrl, _
                              Button, Shift, X, Y
            Case Else
               ' For all other cases, copy contents of Drag to Drop
               ' control.
               On Error Resume Next
               DropCtrl = DragCtrl
               If Err Then MsgBox Error$
         End Select
      End Sub

</PRE><P><LI>Type the following new procedure in the module with the DragDrop
   procedure:
<P>
<PRE>      Sub ListBoxExample (DragFrm As Form, DragCtrl As Control, _
                          DropFrm As Form, DropCtrl As Control, _
                          Button As Integer, Shift As Integer, _
                          X As Single, Y As Single)
         Dim DB As Database
         Dim SQL As String

         Set DB = CurrentDB()

         ' Create SQL statement to update Selected field of
         ' .. drag/dropped list box item.
         SQL = "UPDATE Customers SET Selected="

         ' Drag from List1 toggle Selected=True, List2 toggles False.
         SQL = IIF(DragCtrl.Name = "List1", SQL &amp; "True", SQL &amp; "False")
         ' If CTRL key not used, alter dragged value only.
         If (Shift And CTRL_MASK) = 0 Then
               SQL = SQL &amp; " WHERE [CustomerID]='" &amp; DragCtrl &amp; "'"
         End If

         ' Run update query to toggle Selected field of Customer record(s).
         DB.Execute SQL

         ' Requery the list box controls to show update lists.
         DragCtrl.Requery
         DropCtrl.Requery

      End Sub

</PRE><P><LI>View the List Box Example form in Form view, and then drag company names
   from one list to the other and vice versa. Press the CTRL key and drag
   to move ALL rows from one list to the other list.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 7.00<BR>
Keywords          : FmsHowto kbusage<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 12, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

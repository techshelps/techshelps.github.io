

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Tips for Debugging Access Basic Code </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108438">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1993/12/12">
<META NAME="Keywords" CONTENT="kbprg PgmErr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article contains tips to help you debug your Access Basic code. This article assumes that your code compiles correctly, but does not perform as you expect.  MORE INFORMATION...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAB9,QAY5,QABI,QABH,QA1S,QBV8,QAVX,QAKD,QBWS,QAPN,QAYL,QDN9,QAL3,QA5F V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Tips for Debugging Access Basic Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108438</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article contains tips to help you debug your Access Basic code. This
article assumes that your code compiles correctly, but does not perform as
you expect.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The general procedure for debugging Access Basic code is to break larger
procedures apart into smaller sub-procedures, verify that the individual
steps in each sub-procedure work correctly, and then combine the sub-
procedures one by one until the code works correctly.
<P>
<P><h3>Using the Immediate Window</h3>
 
<P>
You can use the Immediate window to execute individual lines of Access
Basic code, or to check the values of variables. Therefore, you can use the
Immediate window to:

<UL><LI>Test and debug Function and Sub procedures.

<LI>Check the value of a field, control, property setting, variable, or
   expression.

<LI>Display the result of an expression when the code is running.
<P>
</UL>The following steps demonstrate how to use the Immediate window to debug
your Access Basic functions:

<OL><P><LI>Open the module containing your function in Design view.

<P><LI>From the View menu, choose Immediate Window.

<P><LI>Run your function in the Immediate window by typing "?&lt;FunctionName&gt;()"
   (without the quotation marks) and then pressing ENTER. Substitute the
   name of your function for &lt;FunctionName&gt;, and be sure to place all
   arguments expected by your function inside the parentheses.
<P>
</OL>For more information on the Immediate window, search for "immediate window"
then "Immediate Window" using the Microsoft Access Help menu.
<P>
<P><h3>Using Breakpoints with the Immediate Window</h3>
 
<P>
A breakpoint suspends execution of the code, allowing you to check the
values of variables. You can use the Immediate window with breakpoints to
pinpoint code problems quickly.
<P>
For example, if the first part of your code runs correctly, but other parts
do not, you can follow the sample steps below to find the malfunctioning
part:

<OL><P><LI>Set a breakpoint right after the part that you know works correctly. To
   set a breakpoint:
<P>
<P><PRE>    a. Move your cursor to the line of code where you want to set the
       breakpoint.
</PRE><P>
<P><PRE>    b. Click the Breakpoint button (the five-fingered hand) on the toolbar.
       Or, press F9, or choose Toggle Breakpoint from the Run menu. The
       line  will appear in bold type, indicating that there is a
       breakpoint set at that line.
</PRE>
<P><LI>Run the function in the Immediate window (see "Using The Immediate
   Window" above). When code execution reaches the breakpoint, processing
   is suspended and the breakpoint line is selected. You can then check the
   value of variables in the code.
<P>
   For example, to check the value of a variable called MyName, type the
   following in the Immediate window and then press ENTER:
<P>
<P><PRE>     ?MyName
</PRE><P>
   The value of MyName is displayed in the Immediate window. If the value
   is correct, check other variables. If the value is incorrect, check the
   previous lines of code to see where this variable is assigned an
   incorrect value.
<P>
</OL><h3>Using the Debug.Print Statement</h3>
 
<P>
You can use the Debug.Print statement in your code to display the values of
your variables in the Immediate window. Good places to include Debug.Print
statements include:

<UL><LI>The beginnings of functions, to check the arguments passed to the
   function. For example, to check the values of two arguments passed to
   the DoSomeCalcs() function, place the following sample Debug.Print
   statement at the beginning of the function:
<P>
<P><PRE>      Function DoSomeCalcs(Arg1, Arg2)
<PRE></PRE>         Debug.Print "Function DoSomeCalcs " &amp; Arg1 &amp; " " &amp; Arg2

   When the DoSomeCalcs() function is run, the text "Function DoSomeCalcs"
   and the values of the two arguments Arg1 and Arg2 will be displayed in
   the Immediate window. If the values of the arguments are not correct,
   the problem is occurring before the function is run.

   You can also use the Debug.Print statement at the beginning of each
   function if you have a complex application and you are not sure which
   function might be causing the problem. This allows you to check the
   Immediate window to see the order in which functions were called, and
   determine which was the last function called. In Microsoft Access 2.0,
   you can also select Calls from the View menu to list the current
   function call stack, and show the order that functions were called.

</PRE><LI>Decision structures, to check that you are using the correct logic
   for the function. For example, the sample code on page 23 of the
   Microsoft Access "Introduction to Programming" manual uses a Select
   Case statement. You can add a Debug.Print statement to this sample
   code, as demonstrated below, to verify that the code is doing what
   you expect:
<P>
<P><PRE>      Function DueDate (anyDate)
      Debug.Print "Function DueDate " &amp; anyDate
      Dim Result
<PRE></PRE>         If Not IsNull(anyDate) Then
            Result = DateSerial(Year(anyDate), Month(anyDate) + 1, 1)
            Debug.Print "Result: " &amp; Result
            Debug.Print "Weekday(Result): " &amp; Weekday(Result)
            Select Case Weekday(Result)
               Case 1:      'Sunday
                  Debug.Print "Case 1"
                  DueDate = Result + 1
               Case 7:      'Saturday
                  Debug.Print "Case 7"
                  DueDate = Result + 2
               Case 6:      'Friday
                  Debug.Print "Case 6"
                  DueDate = Result - 1
               Case Else
                  Debug.Print "Case Else"
                  DueDate = Result
            End Select
         Else
            Result = Null
         End If
      End Function

   Run this function in the Immediate window by typing the following
   and then pressing ENTER:

      ?DueDate(#10/1/93#)

   The following results will be displayed in the Immediate window:

      Function DueDate 10/1/93
      Result: 11/1/93
      Weekday(Result): 2
      Case Else
      11/1/93

   These results show that you are using the correct logic for this
   function. If you had received different results (the wrong case, for
   example) you could then check the values of other values and expressions
   to determine where the problem is.

</PRE><LI>In loops, to check the values of variables. If you use a breakpoint
   to check the value of a variable in a loop, you cannot see how the
   value of the variable changes as the loop executes. However, if you
   include the statement "Debug.Print MyName" (without the quotation marks)
   in your loop structure, the value of variable MyName will be displayed
   in the Immediate window each time the function cycles through the loop.
<P>
   This method is also a good way to verify that the loop is executing
   the number of times you expect. If the loop executes four times, you
   should see four values for the value in the Immediate window.

<LI>Where clauses, to check the values of criteria in SQL statements.
   For example, the following sample function creates a dynaset from
   a SQL statement. If there is a problem in a SQL statement (such as
   in this function), it can be difficult to locate the problem. However,
   this function uses the Debug.Print statement to display the SQL
   statement as Microsoft Access sees it and uses it:
<P>
<P><PRE>      Function TestMe()
<PRE></PRE>         Dim db As Database, ds As Dynaset
         Dim empnum As Long
         Dim sql As String
         Set db = CurrentDB()
         empnum = 5
         sql = "select * from orders where [employee id]=empnum;"
         Debug.Print sql
         Set ds = db.CreateDynaset(sql)
      End Function

   Run this function in the Immediate window by typing the following
   and then pressing ENTER:

      ?TestMe()

   The following result is displayed:

      select * from orders where [employee id]=empnum;

   Note that the Where condition shows [employee id] = empnum, not
   [employee id] = 5, as you assigned it. To fix this particular problem,
   change the Where condition to concatenate the empnum variable, as
   follows:

      Function testme()
         Dim db As Database, ds As Dynaset
         Dim empnum As Long
         Dim sql As String
         Set db = CurrentDB()
         empnum = 5
         sql = "select * from orders where [employee id]=" &amp; empnum &amp; ";"
         Debug.Print sql
         Set ds = db.CreateDynaset(sql)
      End Function

   When you run the corrected function, the following statement will be
   displayed:

      select * from orders where [employee id]=5;

</PRE></OL><h3>Stepping Through the Code</h3>
 
<P>
Stepping through your code means executing the code one line at a time.
This is sometimes referred to as tracing. Access Basic has two ways of
stepping through code: single stepping, and procedure stepping.
<P>
Single stepping executes each step of a called procedure, stopping at each
line in the procedure. Procedure stepping executes a called procedure all
at once, then returns to the next line in the current procedure.
<P>
To step through your code:

<OL><P><LI>Set a breakpoint in your code at the line where you want to begin
   stepping. (See "Using Breakpoints with the Immediate Window", above).
   To step through an entire function, set the breakpoint on the first
   line of the function.

<P><LI>Start the function. When program execution reaches the breakpoint, the
   line with the breakpoint will be selected in the function's module.

<P><LI>To single step, click the Single Step button (single foot) on the
   toolbar. Or, press F8, or choose Single Step from the Run menu. The
   selected line of code will be executed, and then the next line of code
   will be selected. You can continue through your code one line at at time
   in this fashion.
<P>
</OL>If your code calls other functions or procedures you will single step
through them as well. If you do not want to single step through these other
procedures, click the Procedure Step button (double foot) on the toolbar.
Or, press SHIFT+F8, or choose Procedure Step from the Run menu.
<P>
Note that as you step through your code, you can check the values of
variables in the Immediate window (see "Using the Immediate Window",
above).
<P>
If you want to continue running your code normally (without single or
procedure stepping), click the Run button (exclamation point) on the
toolbar. Or, press F5, or choose Continue from the Run menu.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Access "Introduction to Programming," version 1.x, Chapter 4,
"Debugging Your Access Basic Code"
<P>
Microsoft Access "Building Applications," version 2.0, Chapter 9,
"Debugging"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: kbtshoot trouble shoot<BR>
Keywords            : kbprg PgmErr<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

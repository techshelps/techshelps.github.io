

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC2: How to Detect When MS Access Is Activated or Deactivated </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124393">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1994/12/29">
<META NAME="Keywords" CONTENT="kbprg PgmApi">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes how to detect and run code when Microsoft Access is activated or deactivated. Switching to Microsoft Access from another application activates Microso...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QAH4,QAB9,QBXS,QAY5,QBWS,QA4Q,QAHE,QAFF,QAY2,QAKR,QA5V,QAPN,QBJZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC2: How to Detect When MS Access Is Activated or Deactivated</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124393</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes how to detect and run code when Microsoft Access is
activated or deactivated. Switching to Microsoft Access from another
application activates Microsoft Access, and switching from Microsoft Access
to another application deactivates Microsoft Access.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information about Access Basic, please
refer to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following steps demonstrate how to create a form called
Access_Activation that will detect when Microsoft Access is activated or
deactivated. The form contains two empty procedures called Access_Activate
and Access_Deactivate into which you can insert the code you want to run
when Microsoft Access is activated or deactivated. When the
Access_Activation form is open in Form view, switching to Microsoft Access
from another application will cause the Access_Activate procedure to run.
Switching from Microsoft Access to another application will cause the
Access_Deactivate procedure to run.
<P>
The Access_Activation form must be open in order to detect when Microsoft
Access is activated and deactivated. To make sure the form is always open,
you could open the form in a hidden state in your database's Autoexec
macro. To open the form in a hidden state, set the Window Mode argument of
the OpenForm macro action to Hidden.

<OL><P><LI>Open any database and create a blank new form. Set the following
   properties for the form:
<P>
<P><PRE>      OnTimer: [Event Procedure]
      TimerInterval: 500
</PRE>
<P><LI>From the View menu, choose Code. Type the following lines in the
   form module's Declarations section.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      Option Explicit
      Declare Function GetActiveWindow Lib "User" () As Integer
      Declare Function GetParent Lib "User" (ByVal hWnd As Integer) _
      As Integer
      Declare Function GetFocus Lib "User" () As Integer
</PRE>
<P><LI>Enter the following code for the OnTimer property event procedure:
<P>
<PRE>      Sub Form_Timer ()
         Dim RetVal As Integer
         Dim CurrhWnd As Integer
         Dim AccesshWnd As Integer
         Static ActiveApphWnd As Integer

         ' Get the Microsoft Access window handle (hWnd).
         AccesshWnd = GetAccesshWnd()

         ' Get the active application window handle (hWnd).
         CurrhWnd = GetActiveApphWnd()

         ' The first time through, just record the current
         ' window handle.
         If ActiveApphWnd = 0 Then
            ActiveApphWnd = CurrhWnd
            Exit Sub
         End If

         ' Determine if the current window handle differs from the
         ' previous window handle (focus change).
         If CurrhWnd &lt;&gt; ActiveApphWnd Then
            ' Record the current window handle.
            ActiveApphWnd = CurrhWnd

            ' Determine if the current handle is the Microsoft Access
            ' handle (activate Microsoft Access?).
            If ActiveApphWnd = AccesshWnd Then
               Access_Activate
            Else
               Access_Deactivate
            End If
         End If
      End Sub

</PRE><P><LI>Enter the following procedures in the form module:
<P>
<PRE>      Sub Access_Activate ()
         ' Insert the code that you want to run when Microsoft Access
         ' is activated here.
      End Sub

      Sub Access_Deactivate ()
         ' Insert the code that you want to run when Microsoft Access
         ' is deactivated here.
      End Sub

      Function GetAccesshWnd ()
         GetAccesshWnd = GetTopMosthWnd(Me.hWnd)
      End Function

      Function GetActiveApphWnd ()
         GetActiveApphWnd = GetTopMosthWnd(GetActiveWindow())
      End Function

      Function GetTopMosthWnd (ByVal hWnd)
         Dim hWndTopMost As Integer
         hWndTopMost = hWnd

         ' Find the top window without a parent window.
         While hWnd &lt;&gt; 0
            hWndTopMost = hWnd
            hWnd = GetParent(hWnd)
         Wend

         GetTopMosthWnd = hWndTopMost
      End Function

</PRE><P><LI>Close the module and save the form as Access_Activation.
<P>
</OL><h3>How to Use the Access_Activation Form</h3>
 
<P>
The following steps demonstrate how to use the Access_Activation form:

<OL><P><LI>Open any database and create the Access_Activation form as described
   above.

<P><LI>Substitute the following Access_Activate procedure for the
   Access_Activate procedure you created in step 4 above:
<P>
<PRE>      Sub Access_Activate ()
         MsgBox "Microsoft Access was activated"
      End Sub

</PRE><P><LI>View the Access_Activation form in Form view.

<P><LI>Press ALT+TAB to switch from Microsoft Access to another application.

<P><LI>Press ALT+TAB to switch back to Microsoft Access. A message box with
   the text "Microsoft Access was activated" is displayed.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using the Declare Function, search on "Declare"
then "Declare statement", using the Microsoft Access Help menu.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg PgmApi<BR>
Version             : 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

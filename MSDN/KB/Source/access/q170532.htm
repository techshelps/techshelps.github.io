

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Cannot Call Class Module Methods from MS Access Objects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170532">
<META NAME="KBModify" CONTENT="1997/06/24">
<META NAME="KBCreate" CONTENT="1997/06/23">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmCM PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  When you call a class module method directly from a query, form, report, or macro, you receive an error message.  This article assumes that you are familiar with Visual Basi...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGI,QAPN,QA1S,QABO,QAB9,QDN9,QAB4,QBT6,QBV4,QABB,QAIF,QAY2,QAUJ,QABA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Cannot Call Class Module Methods from MS Access Objects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170532</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
When you call a class module method directly from a query, form, report, or
macro, you receive an error message.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
<P><h2>CAUSE</h2>
 
<P>
In order to call a class module procedure, the calling object must
initialize an instance of the class. Microsoft Access objects, such as
queries, forms, reports, and macros, cannot automatically initialize new
instances of a user-defined class. Only a Visual Basic for Applications
procedure can initialize a new instance of a user-defined class.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are two possible workarounds.
<P>
<P><h3>Method 1</h3>
 
<P>
Store the procedure in a standard module if you plan to call it from a
query, form, report, or macro. If the procedure is in a standard module,
you do not need to create a new instance of a user-defined class every time
you call it.  This is the recommended method.
<P>
<P><h3>Method 2</h3>
 
<P>
Create a procedure in a standard module that initializes an instance of the
class. The procedure in the standard module then calls the procedure stored
in the class module and passes it any necessary arguments. This is
typically known as a "wrapper" procedure.
<P>
Using a wrapper procedure in this manner is not recommended because
additional overhead is created when the object is initialized. In some
instances, this can cause more overhead to be created than expected.
For instance, calling a wrapper procedure from a query causes additional
overhead to be created for each record that the query contains. To make the
query more efficient and use less resources, move the code in the class
module to a standard module so that the additional overhead can be
eliminated.
<P>
The following example demonstrates how to create a class module method
named MultiplyByTen and a wrapper procedure named CallMultiplyByTen, that
makes the class method available to other Microsoft Access objects. It then
demonstrates how to call the wrapper procedure from a query.

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>On the Insert menu, click Class module.

<P><LI>Type the following line in the Declarations section if it is not
    already there:
<P>
       Option Explicit

<P><LI>Type the following procedure:
<P>
       Function MultiplyByTen(clsVar As Variant) As Variant
<PRE>          MultiplyByTen = clsVar * 10
       End Function

</PRE><P><LI>Close and save the class module as MultiplyClass.

<P><LI>Create a standard module and type the following line in the
    Declarations section if it is not already there:
<P>
       Option Explicit

<P><LI>Type the following procedure:
<P>
       Function CallMultiplyByTen(stdVar As Variant) As Variant
<PRE>          Dim clsMultiply As New MultiplyClass
          CallMultiplyByTen = clsMultiply.MultiplyByTen(stdVar)
       End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
    and then press ENTER.
<P>
       ?CallMultiplyByTen(5)
<P>
    Note that the procedure returns the number 50 to the Debug window.

<P><LI>Close and save the module as Module1.

<P><LI>Create a new query based on the Orders table with the following fields:
<P>
       Query: Query1
       -----------------------------------------
       Type: Select Query
<P>
       Field: OrderID
<PRE>          Table: Orders
       Field: Freight
          Table: Orders
       Field: EXPR1: CallMultiplyByTen([Freight])

</PRE><P><LI>Run the query. Note that the class module method returns a value for
    each record.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 
<P>
Create a class module method:

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>On the Insert menu, click Class module.

<P><LI>Type the following line in the Declarations section if it is not
   already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>      Function MultiplyByTen(clsVar As Variant) As Variant
<PRE></PRE>         MultiplyByTen = clsVar * 10
      End Function

</PRE><P><LI>Close and save the class module as MultiplyClass.
<P>
</OL>Call the class module method from a query:

<OL><P><LI>Create a new query based on the Orders table:
<P>
<P><PRE>      Query: ClassTestQuery
      -------------------------------------
      Type: Select Query
</PRE><P>
<P><PRE>      Field: Freight
<PRE></PRE>         Table: Orders
      Field: Expr1:MultiplyByTen([Freight])

</PRE><P><LI>Run the query. Note that you receive the following error message:
<P>
<P><PRE>      Undefined function 'MultiplyByTen' in expression.
</PRE><P>
</OL>Call the class module method from a form:

<OL><P><LI>Create a new form based on the Orders table:
<P>
<P><PRE>      Form: ClassTestForm
      -------------------------------------
      ControlSource: Orders Table
</PRE><P>
<P><PRE>      Text box:
      Name: Freight
      Caption: Freight
      ControlSource: Freight
      Text box:
      Name: Text1
      Caption: Text1
      ControlSource: =MultiplyByTen([Freight])
</PRE>
<P><LI>Switch the form to Form view. Note that the error "#Name?" appears in
   Text1.
<P>
</OL>Call the class module method from a report:

<OL><P><LI>Create a new report based on the Orders table:
<P>
<P><PRE>      Report: ClassTestReport
      ---------------------------------------
      ControlSource: Orders Table
</PRE><P>
<P><PRE>      Text box:
      Name: Freight
      Caption: Freight
      ControlSource: Freight
      Text box:
      Name: Text1
      Caption: Text1
      ControlSource: =MultiplyByTen([Freight])
</PRE>
<P><LI>Preview the report. An "Enter Parameter Value" dialog box appears and
   prompts you to enter the value of MultiplyByTen. Click OK.
<P>
   Note that Text1 contains "#Error."
<P>
</OL>Call the class module method from a macro:

<OL><P><LI>Create a new macro:
<P>
<PRE>      Macro Name            Action
      ----------------------------
      ClassTestMacro        MsgBox

      ClassTestMacro Action
      -----------------------------
      MsgBox
         Message: =MultiplyByTen(5)
         Beep: Yes
         Type: None

</PRE><P><LI>Save the macro and run it. Note that you receive the following error
   message:
<P>
<P><PRE>      The expression you entered has a function name that Microsoft
      Access can't find.
</PRE><P>
   You may also receive the following error message when you call a class
   module method directly from a macro:
<P>
<P><PRE>      Microsoft Access can't find the name &lt;class name&gt; you entered in
      the expression.
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about class modules, search the Help Index for "class
modules, overview."
<P>
For more information about programming with class modules, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q160007.htm">Q160007</A></B>
   TITLE     : ACC97: Introduction to Stand-Alone Class Module Programming
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode kbprg PgmCM PgmHowTo<BR>
Version             : 97<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbprb<BR>
Resolution Type     : kbworkaround<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

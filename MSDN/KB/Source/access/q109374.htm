

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC1x: Sample Function to Check Whether an Entry Exists </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109374">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1994/01/02">
<META NAME="Keywords" CONTENT="kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  This article demonstrates a sample function called CheckPrimaryKey() that you can use to check whether an entry in a text box already exists in the form's underlying table.  This article assumes that you are familiar with Access Basic and with crea...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBT6,QBV4,QA1S,QAHP,QA4H,QDN9,QAY5,QAH4,QBWJ,QABH,QABI,QAGB,QA01,QBV8,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC1x: Sample Function to Check Whether an Entry Exists</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109374</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates a sample function called CheckPrimaryKey() that
you can use to check whether an entry in a text box already exists in the
form's underlying table.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Introduction to Programming" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the following example, the CheckPrimaryKey() function checks whether the
entry in the Customer ID field on the Customers form already exists in the
Customers table. The function is attached to the BeforeUpdate event of the
Customer ID text box on the form.
<P>
NOTE: In the following sample code, an underscore (_) is used as a line-
continuation character. Remove the underscore when re- creating this code
in Access Basic.

<OL><P><LI>Open the sample database NWIND.MDB. Create a new module.

<P><LI>In the Declarations section, type the following:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Enter the following code in the module:
<P>
<P><PRE>      Function CheckPrimaryKey(MyCustID)
</PRE><P>
<PRE>         Dim MyDB As Database, MyDyna As Dynaset

      ' Create a dynaset of Customer IDs from the Customers table. The
      ' function may encounter an empty dynaset. If so, the function will
      ' fail attempting to move to the first record of the dynaset, and
      ' execute the error handling routine labeled MyCustErrTrap.

         Set MyDB = CurrentDB()
         Set MyDyna = MyDB.CreateDynaset("SELECT [Customer ID] FROM _
            Customers WHERE [Customer ID] = '" &amp; MyCustID &amp; "';")

         On Error GoTo MyCustErrTrap:
         MyDyna.MoveFirst

      ' The Customer ID entered in the form is compared to the Customer IDs
      ' in the dynaset. If there is a match, display a message saying so,
      ' then cancel the event of updating the text box, and send the Escape
      ' (ESC) keystroke to undo the data entry. If there is no match, leave
      ' the Customer ID in the text box and select the next control on the
      ' form.

         If MyDyna![Customer ID] = MyCustID Then
            MsgBox "You've entered an existing Customer ID, please enter _
               a new one"
            DoCmd CancelEvent
            SendKeys "{ESC}"
         End If

      ' This is the Error trap routine.
      MyCustErrTrap:

         Exit Function

      End Function

</PRE><P><LI>Save the module as Customer ID Test Module.

<P><LI>Open the Customers form in Design view, and select the Customer ID text
   box.

<P><LI>Add the following expression to the BeforeUpdate event:
<P>
<P><PRE>      =CheckPrimaryKey([Customer ID])
</PRE>
<P><LI>Switch to Form view and choose Go To from the Records Menu, then choose
   New.

<P><LI>Type "ALWAO" (without quotation marks) in the Customer ID text box. The
   message box will appear, and when you select OK your data entry will be
   undone.

<P><LI>Type "ZZZZZ" (without quotation marks) in the Customer ID text box. The
   message box will not appear, and Microsoft Access will accept the data
   entry.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
Microsoft Access "Language Reference," version 1.0, pages 88, 311, and
432
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg PgmOthr<BR>
Version             : 1.0 1.1<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

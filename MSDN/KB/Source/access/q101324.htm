

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Access Basic Error-Handling Supplemental Information </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q101324">
<META NAME="KBModify" CONTENT="1997/06/06">
<META NAME="KBCreate" CONTENT="1993/07/11">
<META NAME="Keywords" CONTENT="kbprg PgmErr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article supplements the information available in the Microsoft Access  Language Reference  manual about how to handle errors in an Access Basic application.  MORE INFORMATIO...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAH4,QAB9,QAPN,QA1S,QAKP,QAMA,QAFF,QBXT,QA5V,QA5F,QAMB,QAIB,QAC2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Access Basic Error-Handling Supplemental Information</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q101324</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article supplements the information available in the Microsoft Access
"Language Reference" manual about how to handle errors in an Access Basic
application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are times when your code becomes susceptible to user error
problems, even though the code itself is proven. The larger the
program, the more often situations arise that were not anticipated at
the time the code was written. For this reason, always include
error-handling routines in your code to prevent your application from
crashing when unexpected errors occur. Error-trapping routines offer
significant help in the debugging process.
<P>
<P><h3>On Error Statement</h3>
 
<P>
Access Basic includes the On Error statement for error trapping, as
well as several other commands for reporting and processing errors.
The On Error statement is followed by either a GoTo clause, which
causes program control to branch to a predefined label when an error
occurs, or by a Resume Next clause, which tells Access Basic to ignore
the error condition and continue to the next statement.
<P>
To create a label for an On Error GoTo statement, type the name of the
label, followed by a colon (:). The commands that follow the label are
executed when control is passed to the label by the On Error GoTo
statement.
<P>
Generally, you should place the label and its accompanying error-handling
routine at the bottom of the procedure, preceded by an End Sub or End
Function statement, to ensure that the routine executes only when branched
to and not by mistake.
<P>
NOTE: A label does not necessarily indicate a break in program flow.
<P>
Shown below is a Sub procedure that performs a SQL action based on a
SQL string value. The On Error Resume Next statement is used to handle
any errors generated by the first DeleteQueryDef method (for example,
if "TempQuery" does not exist). On Error GoTo SQLError means that if
any other errors occur, program control passes to the SQLError
error-handling routine. The On Error GoTo 0 statement is used at the
end of the procedure to disable error trapping.
<P>
<PRE>   Sub PerformSQLAction (InDB As String, SQLStmt As String)
      Dim SQLDb As Database, SQLQuery As QueryDef

      On Error Resume Next
         Set SQLDb = OpenDatabase(InDB)
         SQLDb.DeleteQueryDef ("TempQuery")
      On Error GoTo SQLError:
         Set SQLQuery = SQLDb.CreateQueryDef("TempQuery", SQLStmt)
         SQLQuery.Execute
         SQLQuery.Close
         SQLDb.DeleteQueryDef ("TempQuery")
      On Error GoTo 0
      Exit Sub

   SQLError:
      MsgBox "An error occurred while executing the SQL statement."
      Exit Sub
   End Sub

</PRE>The Exit Sub statement is required at the end of the error-handling
routine, even though the End Sub statement follows. In place of the
Exit Sub statement, you could use a Resume Next statement to return
control to the line following the line of code that caused the error.
<P>
<P><h3>Err(), Erl(), and Error$() Functions</h3>
 
<P>
Access Basic includes the Err(), Erl(), and Error$() functions, all of
which return information about the error that occurred. The Error$()
function returns the error message as a string, the Err() function
returns a number representing the error message, and the Erl()
function returns the number of the line in which the error occurred.
Using these functions, you can code your error-trapping routine to
display meaningful error messages and trap for specific errors.
<P>
A generic error-trapping routine that uses both Error$() and Erl()
functions is shown below. This type of routine tells you what error
occurred and where; it also allows you to either ignore the error and
continue or cancel execution and further investigate the problem.
<P>
<PRE>   On Error GoTo ErrorHandler

   ErrorHandler:
      If MsgBox("The following error has occurred at line " &amp;_
         Trim(Str(Erl)) &amp; ":" &amp; Chr(13) &amp; Chr(10) &amp; Chr(13) &amp;_
         Chr(10) &amp; Error$, 17) = 1 Then Resume Next Else Stop

</PRE>The following Sub procedure illustrates how the Error$() function can
create informative error messages to help you and your users debug
your program:
<P>
<PRE>   Sub MyError ()
      On Error GoTo ErrorHandler
      INTEGERVAL% = 99999 'Generates Numeric Overflow error
      Debug.Print "Error was ignored"
      Exit Sub

   ErrorHandler:
      If MsgBox("The following error has occurred at line " &amp;_
         Trim(Str(Erl)) &amp; ":" &amp; Chr(13) &amp; Chr(10) &amp; Chr(13) &amp;_
         Chr(10) &amp; Error$, 17) = 1 Then Resume Next Else Stop
      Exit Sub
   End Sub

</PRE>You can use the Err() function to build a SQL SELECT statement that
traps for specific errors and takes a different action depending on
the error number. You can use the Erl() function to pinpoint exactly
which line is causing the problem in your program, to anticipate error
conditions in your program, and to handle errors more smoothly.
<P>
If you use the Erl() function, you do not need to number every line of
your code to find the offending line number. Instead, number only
those lines of code most likely to cause problems. (The line numbers
represent labels, rather than classic line numbers, as in other Basic
languages.) Then, if an error occurs in one of the numbered lines, the
Erl() function reports only that line number.
<P>
You can also use this method if you have two lines of code that may
generate the same error and you want to handle each case separately,
as in the following example:
<P>
<PRE>   Function ErlTest()
      On Error Goto ErlTest_Err
      10: Open "AUTOEXECBAT" For Input As #1 'causes an error.
      20: Open "CONFIG.SYS" For Input As #2
      Close
   Exit Sub

   ErlTest_Err:
      If Erl = 10 Then
         MsgBox "Could not open AUTOEXEC.BAT file."
      ElseIf Erl = 20 Then
         MsgBox "Could not open CONFIG.SYS file."
      End If
      Exit Sub
   End Sub

</PRE>Because there is no possibility that a file called "AUTOEXECBAT" exists,
this line of code errors out and program control passes to the error-
handling routine "ErlTest_Err". The Erl() function detects the number
of the line in which the error occurred and displays the "Could not
open AUTOEXEC.BAT file" error message.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Access "Language Reference," version 1.0, pages 331-333
<P>
For more information about error-handling routines, search for "Error
handling" using the Microsoft Access Help menu.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: debugging<BR>
Keywords            : kbprg PgmErr<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

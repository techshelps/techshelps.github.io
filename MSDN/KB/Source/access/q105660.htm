

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC1x: How to Find a Record Using a Bound Control (1.x) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105660">
<META NAME="KBModify" CONTENT="1997/05/14">
<META NAME="KBCreate" CONTENT="1993/10/22">
<META NAME="Keywords" CONTENT="GnlDe kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  This article demonstrates how to use a single bound control for both data entry and for finding records in a form.  You can use this technique to find whether the value entered in a field already exists in another record. If the value does exist, t...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QA7O,QA1S,QAB5,QAOE,QAMN,QDN9,QAKD,QAY5,QAPN,QAGB,QDMH,QBXS,QA7N,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC1x: How to Find a Record Using a Bound Control (1.x)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 14, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105660</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to use a single bound control for both data
entry and for finding records in a form.
<P>
You can use this technique to find whether the value entered in a field
already exists in another record. If the value does exist, the record
containing that value will be displayed. If the value does not exist, you
can continue entering data for the new record.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Introduction to Programming" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Microsoft Access "User's Guide" demonstrates a method that you can use
to find records in your database by selecting a key value from a list. (See
"Finding a Record by Selecting a Value from a List.") This method is
limited in that it requires two controls. One control is an unbound control
that is used to select the value to look for, and the other control is a
bound control in which data entry for that value occurs.
<P>
The following example demonstrates how to use a single, bound control to
achieve the same functionality:

<OL><P><LI>Open the sample database NWIND.MDB. Create a new module with the
   following declarations and functions:
<P>
<P><PRE>      ' *******************************************************
      ' DECLARATIONS SECTION
      ' *******************************************************
      Option Explicit
      Dim Found
</PRE><P>
<P><PRE>      Function FindBeforeUpdate ()
<PRE></PRE>         Dim DS As Dynaset, C As Control
         Set C = Screen.ActiveControl
         Set DS = Screen.ActiveForm.Dynaset

         On Error Resume Next

         ' Try to find a record with a matching entry in
         ' the form's dynaset as a numeric field
         DS.FindFirst "[" &amp; C.ControlName &amp; "]=" &amp; C

         ' If it was not a numeric field (error 3070) then
         ' try finding the record as a text field
         If Err = 3070 Then
            Err = 0
            DS.FindFirst "[" &amp; C.ControlName &amp; "]='" &amp; C &amp; "'"
         End If

         On Error GoTo 0

         ' If any unexpected error happened, present to user and exit
         If Err &lt;&gt; 0 Then
           MsgBox Error(Err), 48
           DoCmd CancelEvent
           Exit Function
         End If

         ' If we found a record, save the bookmark of the found record
         If DS.NoMatch Then
              Found = Null
         Else
              Found = DS.Bookmark
         End If

         ' If we found the record...
         ' .. Cancel the BeforeUpdate
         ' .. Undo changes made to the current record
         ' .. TAB to the next control to trigger the OnExit routine
         If Not IsNull(Found) Then
            DoCmd CancelEvent
            SendKeys "{ESC 2}{TAB}", False
         End If
      End Function

      Function FindOnExit ()
         ' If we found the record, cancel the OnExit event to
         ' keep us in the control and go find the record
         If Not IsNull(Found) And Found &lt;&gt; "" Then
            DoCmd CancelEvent

            ' Synchronize form record with found record
            Screen.ActiveForm.Bookmark = Found

            Found = Null
         End If
      End Function

</PRE><P><LI>Open the Categories form in Design view. Change the following
   properties for the Category ID field:
<P>
<P><PRE>      BeforeUpdate: =FindBeforeUpdate()
      OnExit: =FindOnExit()
</PRE>
<P><LI>Switch to Form view. The first category that appears is the Beverages
   category. Type "COND" (without the quotation marks) in the Category ID
   field and press TAB or ENTER. Microsoft Access will automatically find
   and present the Condiments category record.

<P><LI>Type "NEW" (without the quotation marks) in the Category ID field and
   then press TAB or ENTER. Since this key value does not exist, no record
   is presented and you can continue to enter data for the new record.
<P>
</OL><h3>How the Sample Functions Work</h3>
 
<P>
The FindBeforeUpdate() function uses the FindFirst method to search the
dynaset the form is based on to see if the value entered in the control
exists in the table.
<P>
If the value does not exist, the global variable Found is set to NULL and
the function exits. If the value does exist, the global variable Found is
set to the bookmark of the found record to be used by the FindOnExit()
function.
<P>
Before the FindRecord action can be run, the BeforeUpdate event must be
canceled, and a SendKeys action must send two ESC keys to undo changes to
the current record.
<P>
Next, a SendKeys action sends a TAB key to exit the field. This event
triggers the FindOnExit() function, which checks to see if the find was
successful. If it was, the CancelEvent action is run to prevent exiting the
control, and then the form record is synchronized with the found record by
setting its bookmark equal to the bookmark of the found record.
Found is then reset back to NULL.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Access "User's Guide," version 1.0, pages 547-548
<P>
Microsoft Access "User's Guide," version 1.1, pages 551-552
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : GnlDe kbusage<BR>
Version             : 1.0 1.1<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 14, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

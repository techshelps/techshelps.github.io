

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC1x: Sample Functions to Check User, Group Information (1.x) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123012">
<META NAME="KBModify" CONTENT="1997/05/23">
<META NAME="KBCreate" CONTENT="1994/11/20">
<META NAME="Keywords" CONTENT="kbusage ScrtUsr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  This article contains several sample user-defined functions. You can use these functions to:   - Return a list of users in the current system database.  - Return a list of groups in the current system database.  - Return a list of users in a specif...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABO,QAY5,QAGU,QBV8,QDN9,QA1S,QAUD,QAB9,QAB4,QAAP,QAZV,QAGB,QBBI,QBMW,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC1x: Sample Functions to Check User, Group Information (1.x)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123012</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article contains several sample user-defined functions. You can use
these functions to:

<UL><LI>Return a list of users in the current system database.
<LI>Return a list of groups in the current system database.
<LI>Return a list of users in a specified group.
<LI>Return a list of groups to which a specified user belongs.
<LI>Determine if the current user belongs to a specified group.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information about Access Basic, please
refer to the "Introduction to Programming" manual.
<P>
The techniques described in this article rely on the use of system tables
stored with the SYSTEM.MDA file. These tables are undocumented and are
subject to change in future versions of Microsoft Access. Use of the system
tables is not supported by Microsoft.
<P>
You can use the following sample functions to return user and group
information in the current system database. By default, only members of
the Admins group have permission to read data from the MSysAccounts and
MSysGroups tables stored with the SYSTEM.MDA file. If your Microsoft Access
account is not a member of the Admins group, use of these functions may
cause errors. If this presents a problem, you may want to consider
upgrading to Microsoft Access version 2.0, where you can use data access
objects (DAO) to view user and group information.
<P>
<P><h3>The Sample Functions</h3>
 
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.
<P>
<P>
<PRE>   '********************************************************
   'Declarations section of the module
   '********************************************************

   Option Compare Database
   Option Explicit

   Declare Function GetPrivateProfileString% Lib "Kernel" (ByVal _
   lpApplicationName$, ByVal lpKeyName$, ByVal lpDefault$, ByVal _
   lpReturnedString$, ByVal nSize%, ByVal lpFileName$)

   Function ListUsersInSystem ()
   '**************************************************************
   'Purpose: Lists users in the current system database.
   'Accepts: No arguments.
   'Returns: A list of users in the current system database.
   'Assumes: The MSACCESS.INI file is located in the Windows path.
   '**************************************************************

   On Error GoTo err_ListUsersInSystem

   Dim MyDB As Database, MySnap As Snapshot
   Dim lpReturnedString$, nSize%, GetInfo%, SysDB$

   lpReturnedString$ = Space$(255)
   nSize% = Len(lpReturnedString$)
   GetInfo% = GetPrivateProfileString("Options", "SystemDB", "", _
   lpReturnedString$, nSize%, "MSACCESS.INI")
   SysDB$ = lpReturnedString$

   Set MyDB = OpenDatabase(SysDB$)
   Set MySnap = MyDB.CreateSnapshot("MSysUserList")
   MySnap.MoveFirst

   Do Until MySnap.EOF
        Debug.Print MySnap![Name]
        MySnap.MoveNext
   Loop

   MySnap.Close
   MyDB.Close
   Exit Function

   err_ListUsersInSystem:
     If Err = 3112 Then
       MsgBox UCase(User()) &amp; " is not a member of the Admins Group", 16, _
       "Error"
          Exit Function
     Else
          MsgBox Err &amp; ": " &amp; Error
          Exit Function
     End If

    End Function

    Function ListGroupsInSystem ()
    '**************************************************************
    'Purpose: Lists groups in the current system database.
    'Accepts: No arguments.
    'Returns: A list of groups in the current system database.
    'Assumes: The MSACCESS.INI file is located in the Windows path.
    '**************************************************************

    On Error GoTo err_ListGroupsInSystem

    Dim MyDB As Database, MySnap As Snapshot
    Dim lpReturnedString$, nSize%, GetInfo%, SysDB$

    lpReturnedString$ = Space$(255)
    nSize% = Len(lpReturnedString$)
    GetInfo% = GetPrivateProfileString("Options", "SystemDB", "", _
    lpReturnedString$, nSize%, "MSACCESS.INI")
    SysDB$ = lpReturnedString$

    Set MyDB = OpenDatabase(SysDB$)
    Set MySnap = MyDB.CreateSnapshot("MSysGroupList")
    MySnap.MoveFirst

    Do Until MySnap.EOF
         Debug.Print MySnap![Name]
         MySnap.MoveNext
    Loop

    MySnap.Close
    MyDB.Close
    Exit Function

    err_ListGroupsInSystem:
    If Err = 3112 Then
      MsgBox UCase(User()) &amp; " is not a member of the Admins Group", 16, _
      "Error"
         Exit Function
    Else
         MsgBox Err &amp; ": " &amp; Error
         Exit Function
    End If
    End Function

    Function ListUsersOfGroup (GroupName As String)
    '**************************************************************
    'Purpose: Lists the users belonging to a particular group.
    'Accepts: The name of a group.
    'Returns: A list of users for the specified group.
    'Assumes: The MSACCESS.INI file is located in the Windows path.
    '         Also, the current user is a member of the Admins
    '         group.
    '**************************************************************

    Dim SQL_String As String, SysDB$
    Dim lpReturnedString$, nSize%, GetInfo%
    Dim MyDB As Database, MySnap As Snapshot
    On Error GoTo err_ListUsersOfGroup

    lpReturnedString$ = Space$(255)
    nSize% = Len(lpReturnedString$)
    GetInfo% = GetPrivateProfileString("Options", "SystemDB", "", _
    lpReturnedString$, nSize%, "MSACCESS.INI")
    SysDB$ = lpReturnedString$

    Set MyDB = OpenDatabase(SysDB$)

    SQL_String = "SELECT MSysAccounts.Name FROM MSysAccounts AS B, _
    MSysGroups, MSysAccounts, "
    SQL_String = SQL_String &amp; "B INNER JOIN MSysGroups ON B.SID = _
    MSysGroups.GroupSID, "
    SQL_String = SQL_String &amp; "MSysGroups INNER JOIN MSysAccounts ON_
    MSysGroups.UserSID = MSysAccounts.SID "
    SQL_String = SQL_String &amp; "WHERE ((B.Name= '" &amp; GroupName &amp; "'));"

    Set MySnap = MyDB.CreateSnapshot(SQL_String)

    MySnap.MoveFirst
    Do Until MySnap.EOF
         Debug.Print MySnap.[Name]
         MySnap.MoveNext
    Loop

    MySnap.Close
    MyDB.Close
    Exit Function

    err_ListUsersOfGroup:
    If Err = 3021 Then
         MsgBox UCase(GroupName) &amp; " is not a valid group", 16, "Error"
         Resume Next
    ElseIf Err = 3112 Then
      MsgBox UCase(User()) &amp; " is not a member of the Admins Group", 16, _
      "Error"
         Exit Function
    Else
         MsgBox Err &amp; ": " &amp; Error
         Exit Function
    End If

    End Function

    Function ListGroupsOfUser (UserName As String)
    '**************************************************************
    'Purpose: Lists the groups to which a particular user belongs.
    'Accepts: The name of a user.
    'Returns: A list of groups for the specified user.
    'Assumes: The MSACCESS.INI file is located in the Windows path.
    '**************************************************************

    On Error GoTo err_ListGroupsOfUser

    Dim MyDB As Database, MyQueryDef As QueryDef, MySnap As Snapshot
    Dim lpReturnedString$, nSize%, GetInfo%, SysDB$

    lpReturnedString$ = Space$(255)
    nSize% = Len(lpReturnedString$)
    GetInfo% = GetPrivateProfileString("Options", "SystemDB", "", _
    lpReturnedString$, nSize%, "MSACCESS.INI")
    SysDB$ = lpReturnedString$

    Set MyDB = OpenDatabase(SysDB$)
    Set MyQueryDef = MyDB.OpenQueryDef("MSysUserMemberships")
    MyQueryDef![UserName] = UserName
    Set MySnap = MyQueryDef.CreateSnapshot()
    MySnap.MoveFirst

    Do Until MySnap.EOF
         Debug.Print MySnap![Name]
         MySnap.MoveNext
    Loop

    MySnap.Close
    MyQueryDef.Close
    MyDB.Close
    Exit Function

    err_ListGroupsOfUser:
    If Err = 3021 Then
         MsgBox UCase(UserName) &amp; " is not a valid User Name!", 16, "Error"
         Resume Next
    ElseIf Err = 3112 Then
      MsgBox UCase(User()) &amp; " is not a member of the Admins Group", 16, _
      "Error"
         Exit Function
    Else
         MsgBox Err &amp; ": " &amp; Error
         Exit Function
    End If

    End Function

    Function CurrentUserInGroup (GroupName As String)
    '**************************************************************
    'Purpose: Determines if the current user is in a specified
    '         group.
    'Accepts: The name of a group.
    'Returns: True if the current user is a member of the specified
    '         group, False if the current user is not a member of
    '         the group.
    'Assumes: The MSACCESS.INI file is located in the Windows path.
    '         Also, the current user is a member of the Admins
    '         group.
    '**************************************************************

    Dim SQL_String As String, SysDB$
    Dim lpReturnedString$, nSize%, GetInfo%
    Dim MyDB As Database, MySnap As Snapshot
    CurrentUserInGroup = False

    On Error GoTo err_CurrentUserInGroup

    lpReturnedString$ = Space$(255)
    nSize% = Len(lpReturnedString$)
    GetInfo% = GetPrivateProfileString("Options", "SystemDB", "", _
    lpReturnedString$, nSize%, "MSACCESS.INI")
    SysDB$ = lpReturnedString$

    Set MyDB = OpenDatabase(SysDB$)

    SQL_String = "SELECT MSysAccounts.Name FROM MSysAccounts AS B, _
    MSysGroups, MSysAccounts, "
    SQL_String = SQL_String &amp; "B INNER JOIN MSysGroups ON B.SID = _
    MSysGroups.GroupSID, "
    SQL_String = SQL_String &amp; "MSysGroups INNER JOIN MSysAccounts ON _
    MSysGroups.UserSID = MSysAccounts.SID "
    SQL_String = SQL_String &amp; "WHERE ((B.Name= '" &amp; GroupName &amp; "'));"

    Set MySnap = MyDB.CreateSnapshot(SQL_String)

    MySnap.MoveFirst
    Do Until MySnap.EOF
         If MySnap![Name] = User() Then
              CurrentUserInGroup = True
              GoSub err_Exit
         Else
              MySnap.MoveNext
         End If
    Loop

    err_Exit:
    MySnap.Close
    MyDB.Close
    Exit Function

    err_CurrentUserInGroup:
    If Err = 3021 Then
         MsgBox UCase(GroupName) &amp; " is not a valid group", 16, "Error"
    ElseIf Err = 3112 Then
      MsgBox UCase(User()) &amp; " is not a member of the Admins Group", 16, _
      "Error"
         Exit Function
    Else
         MsgBox Err &amp; ": " &amp; Error
         Exit Function
    End If
    GoSub err_Exit
    End Function

</PRE>To test these functions, run them in the Immediate window. For example, to
test the ListGroupsOfUser() function, follow these steps:

<OL><P><LI>Open the sample database NWIND.MDB.

<P><LI>Create a new module and enter the sample functions above.

<P><LI>From the View menu, choose Immediate Window.

<P><LI>In the Immediate window, type the following line and then press ENTER:
<P>
<P><PRE>      ? ListGroupsOfUser("Admin")
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
Microsoft Access "User's Guide," version 1.1, Chapter 25, "Administering a
Database System," pages 616-636
<P>
Microsoft Access "Introduction to Programming," version 1.1, Chapter 8,
"Manipulating Data," pages 124-127
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: security secure<BR>
Keywords            : kbusage ScrtUsr<BR>
Version             : 1.0 1.1<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

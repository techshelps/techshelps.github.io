

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC2: How to Simulate Multiple Record Selections in a Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120275">
<META NAME="KBModify" CONTENT="1997/05/14">
<META NAME="KBCreate" CONTENT="1995/11/07">
<META NAME="Keywords" CONTENT="FmsOthr kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  In Microsoft Access, you can select multiple records in a form by using the record selector at the left side of the form. However, there is no built-in method to determine f...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QA2Q,QA7O,QA7N,QAEF,QAG2,QAZV,QA1S,QBTV,QBM2,QAGB,QBNG,QBXS,QAPN,QAGC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC2: How to Simulate Multiple Record Selections in a Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 14, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120275</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
In Microsoft Access, you can select multiple records in a form by using the
record selector at the left side of the form. However, there is no built-in
method to determine from a macro or Access Basic code which records have
been selected.
<P>
This article describes how to simulate the record selector using a Yes/No
field, so that you can make multiple, noncontiguous selections, which you
cannot do using the standard record selector. This article also describes
how to create buttons to select all the records, unselect the records, and
delete the selected records. This technique will work in either a single-
user or a multiuser environment.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This method of simulating the record selector uses a Yes/No field in the
form's underlying table. You can place the Yes/No field on the form bound
to either a toggle button (to look like the built-in record selector) or a
check box or option button.
<P>
You can determine which records are selected using a select query to find
all the records where the Yes/No field is set to Yes, or by checking the
form's Recordset to see which records have the Yes/No field set to Yes.
<P>
This method is simple and works well in a single-user environment where the
table will not be shared. In a multiuser environment, the Yes/No field must
be placed in a separate selection table unique to each user. The selection
table should include the key fields from the original table in addition to
the Yes/No field. The form can then be based on a query that joins the
original table with the selection table on the key fields. There must be
one record in the selection table for each record in the original table in
order to have a one-to-many relationship.
<P>
The selection table must be unique for each user on the system, and cannot
by shared with other users on the system. In multiuser environments, you
should consider dividing the database into two databases, with one database
(the application database) containing all the forms, reports, macros, and
modules, and the other database (the data database) containing all the
tables. You can then attach the tables in the data database to the
application database. In such a two-database system, you can put the
selection table in the local application database to be used only by the
individual user.
<P>
<P><h3>How to Create a Multiple Selection, Multiuser Customers Form</h3>
 
<P>
The following example demonstrates how to create a toggle selection button
on the Customers form in the sample database NWIND.MDB, using a separate
selection table to maintain a list of selected records for use in a
multiuser environment.
<P>
Note that to run best in a multiuser environment, the Customers table
should be stored in a different, shared database attached to the NWIND
database. For this example, assume that the table is an attached, shared,
Microsoft Access table.
<P>
CAUTION: Following the steps in this example will modify the sample
database NWIND.MDB. You may want to back up the NWIND.MDB file, or perform
these steps on a copy of the NWIND database.

<OL><P><LI>Open the sample database NWIND.MDB.

<P><LI>Create the following new table and then save it as Customers Selected:
<P>
<P><PRE>      Table: Customers Selected
      -------------------------
      Field Name: Customer ID
<PRE></PRE>         Data Type: Text
         Field Size: 5
      Field Name: Selected
         Data Type: Yes/No

      Indexes: Customers Selected
      ---------------------------
      Index Name: PrimaryKey
         Field Name: Customer ID

</PRE><P><LI>Create a new select query based on the Customers and Customers Selected
   tables. Join the tables on the Customer ID field and include all the
   fields from the Customers table and the Selected field from the
   Customers Selected table in the query grid. Save the query as Customer
   Query.

<P><LI>Open the Customers form in Design view and set the form's RecordSource
   property to the Customer Query query.

<P><LI>Create a toggle button with the following properties on the form:
<P>
<P><PRE>      ControlSource: Selected (the name of the Yes/No field)
      DefaultValue: False
</PRE>
<P><LI>Set the form's OnOpen property to the following event procedure.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<PRE>      Sub Form_Open (Cancel As Integer)
         Dim DB As Database
         Set DB = CurrentDB()

         ' Clean out the Customers Selected table.
         DB.Execute "DELETE * FROM [Customers Selected]"

         ' Create a matching record in the Customers Selected table
         ' for each record in the Customers table.
         DB.Execute "INSERT INTO [Customers Selected] ([Customer ID]) _
            SELECT [Customer ID] FROM [Customers]"

         ' Requery the form to make sure it sees the new Customers
         ' Selected records.
         Me.Requery

      End Sub

</PRE><P><LI>View the Customers form in Form view. When you open the form, the
   event procedure specified in the OnOpen property setting will run,
   ensuring that the Customers Selected table contains a record with the
   Selected field set to No for each record in the Customers table. You can
   move among the records, using the toggle button to mark records for
   selection. If you create a new record, the DefaultValue property setting
   for the toggle button will cause a new record to be created in the
   Customers Selected table.
<P>
</OL>To determine which records are selected, you can create a simple select
query to find all the records in the Customers Selected table with the
Selected field set to Yes.
<P>
How to Create Buttons to Select All the Records, Clear the Selection, and
Delete the Selected Records
 
<P>
You can create buttons on the form so that the form's users can easily
select all the records in the form or clear the current selection. You can
also create a button to delete all the selected records. To create these
buttons, add three command buttons with the following properties to the
Customers form:
<P>
<PRE>   Command Button 1
   ------------------------------------------------------------------
   Name: btnSelectAll
   Caption: Select All
   OnClick: [Event Procedure]

      Sub btnSelectAll_Click ()
         Dim DB As Database
         Set DB = CurrentDB()

      On Error Goto Err_btnSelectAll_Click

         ' Update the Selected field for all customers to Yes (True).
         DB.Execute "UPDATE [Customers Query] SET [Selected] = True;"

         ' Refresh the form to display the changes.
         DoCmd DoMenuItem A_FORMBAR, A_RECORDSMENU, A_REFRESH

      Bye_btnSelectAll_Click:
         Exit Sub
      Err_btnSelectAll_Click:
         Beep: MsgBox Error$, 48
         Resume Bye_btnSelectAll_Click:
      End Sub

   Command Button 2
   -------------------------------------------------------------------
   Name: btnUnSelectAll
   Caption: Unselect All
   OnClick: [Event Procedure]

      Sub btnUnSelectAll_Click ()
         Dim DB As Database
         Set DB = CurrentDB()

      On Error Goto Err_btnUnSelectAll_Click

         ' Update the Selected field for all customers to No (False).
         DB.Execute "UPDATE [Customers Query] SET [Selected] = False;"

         ' Refresh the form to display the changes.
         DoCmd DoMenuItem A_FORMBAR, A_RECORDSMENU, A_REFRESH

      Bye_btnUnSelectAll_Click:
         Exit Sub
      Err_btnUnSelectAll_Click:
         Beep: MsgBox Error$, 48
         Resume Bye_btnUnSelectAll_Click:
      End Sub

   Command Button 3
   -----------------------------------------------------------------------
   Name: btnDeleteSelected
   Caption: Delete Selected
   OnClick: [Event Procedure]

   NOTE: In the following sample code, an underscore (_) at the end of
   a line is used as a line-continuation character. Remove the under-
   score from the end of the line when re-creating this code in Access
   Basic.

      Sub btnDeleteSelected_Click ()
         Dim DB As Database
         Set DB = CurrentDB()

      On Error Goto Err_btnDeleteSelected_Click

         ' If the current record has been edited and is selected, save it.
         If Me.Dirty And Me![Selected] Then
            DoCmd DoMenuItem A_FORMBAR, A_FILE, A_SAVERECORD
         End If

         ' Delete all customers where the Selected field is marked.
         DB.Execute "DELETE Customers.*, [Customers Selected].Selected _
            FROM Customers INNER JOIN [Customers Selected] ON _
            Customers.[Customer ID] = [Customers Selected].[Customer ID] _
            WHERE [Customers Selected].Selected=True"

         ' Refresh the form to display the changes.
         DoCmd DoMenuItem A_FORMBAR, A_RECORDSMENU, A_REFRESH

      Bye_btnDeleteSelected_Click:
         Exit Sub
      Err_btnDeleteSelected_Click:
         Beep: MsgBox Error$, 48
         Resume Bye_btnDeleteSelected_Click:
      End Sub

</PRE></OL>NOTE: When you use the Delete Selected button, customers who currently have
orders in the NWIND database will not be deleted, due to referential
integrity. You can modify the relationship between the Customers and the
Orders tables to include cascading deletes, so that the removal of a
customer will cause the removal of all of that customer's orders. To set up
cascading deletes for the Customers and the Orders tables, follow these
steps:

<OL><P><LI>Select the Database window and then choose Relationships from the
   Edit menu.

<P><LI>Double-click the join line between the Customers and the Orders
   tables.

<P><LI>Select the Cascade Delete Related Records check box.

<P><LI>Choose OK.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : FmsOthr kbusage<BR>
Version             : 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 14, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

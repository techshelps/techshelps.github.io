

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC2: How to Add ToolTips to Form Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119991">
<META NAME="KBModify" CONTENT="1997/04/02">
<META NAME="KBCreate" CONTENT="1994/08/30">
<META NAME="Keywords" CONTENT="FmsHowto kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes how to add ToolTips to form controls. ToolTips refers to the  balloon help  feature that displays the name of a control when the user passes the point...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAO3,QAB4,QANE,QAO2,QAPN,QAGI,QAMN,QA1S,QA4Q,QAY2,QAO4,QAFF,QAB5,QA7O,QAKJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC2: How to Add ToolTips to Form Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119991</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes how to add ToolTips to form controls. ToolTips
refers to the "balloon help" feature that displays the name of a control
when the user passes the pointer over a particular control.
<P>
This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NOTE: Microsoft Access for Windows 95 introduces the new ControlTip Text
property for controls on a form to implement tooltips.
<P>
The following steps demonstrate how to create a pop-up form to display
ToolTips for a form control, and how to create an Access Basic module with
procedures for displaying and hiding the ToolTips form.
<P>
NOTE: The following technique cannot be used to tooltip enable controls on
pop-up or dialog forms. The tooltip itself is a pop-up form. Pop-up forms
cannot float on top of other pop-up forms.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.

<OL><P><LI>Create a new, unbound form with the following properties:
<P>
<P><PRE>      RecordSource: &lt;blank&gt;
      ScrollBars: Neither
      RecordSelectors: No
      NavigationButtons: No
      PopUp: Yes
      BorderStyle: None
      Width: 4 in
      OnTimer: [Event Procedure]
</PRE><P>
<P><PRE>      OnTimer Event Procedure
      -----------------------
<PRE></PRE>      Sub Form_Timer ()
         ShowToolTips Me
      End Sub

   NOTE: To create the event procedure, click in the OnTimer property
   field, then choose the Build button to the right of the field. Select
   Code Builder, and then choose OK. After you enter the code in the form
   module, close the module.

</PRE><P><LI>Add a text box with the following properties to the form:
<P>
<P><PRE>      Name: TipText
      Left: 0
      Top: 0
      Width: 4 in
      Height: 0.166 in
      BackColor: 8454143
      BorderStyle: Clear
      FontName: MS Sans Serif
      FontSize: 8
      TextAlign: Center
      OnMouseMove: [Event Procedure]
</PRE><P>
<P><PRE>      OnMouseMove Event Procedure
      -------------------------------------------------------------
<PRE></PRE>      Sub TipText_MouseMove (Button As Integer, Shift As Integer, _
         X As Single, Y As Single)
         HideToolTips
      End Sub

</PRE><P><LI>Delete the text box's label.

<P><LI>Set the detail section's Height property to:
<P>
<P><PRE>      0.166 in
</PRE>
<P><LI>Save the form as ToolTips, and then close it.

<P><LI>Create a new module and type the following lines in the Declarations
   section:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      ' Tip Delay (time to wait to display tip) constants (in
      ' milliseconds).
      Const TipDelayIfHidden = 1000
      Const TipDelayIfVisible = 100
</PRE><P>
<P><PRE>      ' Tip size and placement adjustment constants.
      Const AdjustTipWidth = .75
      Const AdjustTipWidthPixel = 5
      Const AdjustTipLeft = .3
      Const AdjustTipTop = .6
</PRE><P>
<P><PRE>      ' Windows API constants and Declarations.
      Type POINTAPI
<PRE></PRE>         X As Integer
         Y As Integer
      End Type

      Type RECT
         Left As Integer
         Top As Integer
         Right As Integer
         Bottom As Integer
      End Type

      Global Const SM_CXCURSOR = 13
      Global Const SM_CYCURSOR = 14
      Global Const SW_SHOWNOACTIVATE = 4
      Global Const TwipsPerPixel = 15

      Declare Sub GetCursorPos Lib "User" (lpPoint As POINTAPI)
      Declare Sub GetWindowRect Lib "User" (ByVal hWnd%, lpRect As RECT)
      Declare Sub MoveWindow Lib "User" (ByVal hWnd%, ByVal X%, _
         ByVal Y%, ByVal nWidth%, ByVal nHeight%, ByVal bRepaint%)
      Declare Function GetDC Lib "User" (ByVal hWnd%) As Integer
      Declare Function GetSystemMetrics Lib "User" (ByVal nIndex%) _
         As Integer
      Declare Function GetTextExtent Lib "GDI" (ByVal hDC%, _
         ByVal lpString As String, ByVal nCount%) As Long
      Declare Function ReleaseDC Lib "User" (ByVal hWnd%, ByVal hDC%) _
         As Integer
      Declare Function ShowWindow Lib "User" (ByVal hWnd%, _
         ByVal CmdShow%) As Integer

      ' ToolTips variables to store tip information.
      Global TipPoint As POINTAPI
      Global TipText As String
      Global TipTextLast As String

</PRE><P><LI>Type the following four Access Basic procedures in the module:
<P>
<PRE>      Sub ToolTips (MyTipText)
      ' **********************************************************
      ' PURPOSE: Sets up ToolTips for view after a delay of
      '    TipDelayIfHidden or TipDelayIfVisible milliseconds
      '    using the ToolTips form's Timer event.
      ' USAGE: Call this procedure from the MouseMove event of any
      '    control for which you want to display ToolTips.
      ' PARAMETERS:
      '    MyTipText: The ToolTips caption text.
      ' **********************************************************
         Dim Tip As Form

         ' Get tip form and open if not yet opened.
         On Error Resume Next
         Set Tip = Forms!ToolTips
         If Err Then StartToolTips

         ' If the tip is already visible with the desired
         ' text, then exit.
         If Tip.Visible And TipText = MyTipText Then Exit Sub

         ' Record new tip information.
         TipTextLast = TipText   ' Save last tip.
         TipText = MyTipText     ' Save new tip text.
         GetCursorPos TipPoint   ' Get and save the current mouse
                                 ' pointer position.

         ' Set new tip delay (time to wait before displaying the tip).

         ' If the tip is NOT visible...
         If Not Tip.Visible Then
            ' ...then set the standard delay to display the tip
            '    from a hidden state.
            Tip.TimerInterval = TipDelayIfHidden
         Else
            ' ...otherwise the pointer is moving from tip to tip, so
            '    set a shorter delay. Set a shorter delay only if the
            '    shorter delay has not yet been set.
            If Tip.TimerInterval &lt;&gt; TipDelayIfVisible Then
               Tip.TimerInterval = TipDelayIfVisible
            End If
         End If
      End Sub

      Sub HideToolTips ()
      ' **********************************************************
      ' PURPOSE: Hides ToolTips from view.
      ' USAGE: Call from the MouseMove event of all form sections
      '   that contain ToolTips-enabled controls.
      '   OPTIONAL (but recommended): Call from the MouseMove event
      '   of all form sections on all forms and from MouseMove
      '   events of controls that are not ToolTips-enabled.
      ' CALLED FROM: MouseMove event of the TipText text box, the
      '    ShowToolTips procedure, the MouseMove event of form
      '    sections, and non-ToolTips-enabled controls.
      ' **********************************************************
         Dim F As Form

         ' Get tip form and open if not yet opened
         On Error Resume Next
         Set F = Forms!ToolTips
         If Err Then StartToolTips

         ' Hide tip and turn delay off
         F.Visible = False
         F.TimerInterval = 0
      End Sub

      Sub ShowToolTips (Tip As Form)
      ' **********************************************************
      ' PURPOSE: Displays ToolTips caption.
      ' CALLED FROM: ToolTips form Timer event only.
      ' **********************************************************
         Dim P As POINTAPI
         Dim R As RECT
         Dim hDC As Integer
         Dim RetVal As Integer
         Dim TipLeft As Integer, TipTop As Integer
         Dim TipWidth As Integer, TipHeight As Integer

         ' Get the current mouse pointer position.
         GetCursorPos P

         ' If displaying the tip from a hidden state was delayed...
         If Tip.TimerInterval = TipDelayIfHidden Then
            ' ...and the mouse pointer position does not match the
            '    pre-delay position...
            If Not (P.X = TipPoint.X And P.Y = TipPoint.Y) Then
               ' ...then hide the tip and exit.
               HideToolTips
               Exit Sub
            End If
         End If

         ' Turn the tip delay off.
         Tip.TimerInterval = 0

         ' Compute approximate TipWidth.
         hDC = GetDC(0)
         TipWidth = GetTextExtent(hDC, TipText, Len(TipText)) And &amp;HFFFF&amp;
         RetVal = ReleaseDC(0, hDC)
         TipWidth = (TipWidth * AdjustTipWidth) + AdjustTipWidthPixel

         ' Compute TipHeight.
         GetWindowRect Tip.hWnd, R
         TipHeight = R.Bottom - R.Top

         ' Compute TipLeft.
         TipLeft = P.X + (GetSystemMetrics(SM_CXCURSOR) * AdjustTipLeft)
         TipLeft = TipLeft - (TipWidth / 2)

         ' Compute TipTop.
         TipTop = P.Y + (GetSystemMetrics(SM_CYCURSOR) * AdjustTipTop)

         ' Hide tip form.
         Tip.Visible = False

         ' Set tip text.
         Tip!TipText = TipText

         ' Set tip text box width.
         Tip!TipText.Width = TipWidth * TwipsPerPixel

         ' Move and size tip form.
         MoveWindow Tip.hWnd, TipLeft, TipTop, TipWidth, TipHeight, False

         ' Show tip form.
         RetVal = ShowWindow(Tip.hWnd, SW_SHOWNOACTIVATE)
      End Sub

      Private Sub StartToolTips ()
      ' **********************************************************
      ' PURPOSE: Opens the ToolTips form.
      ' CALLED FROM: HideToolTips, ShowToolTips procedures only.
      ' **********************************************************
          DoCmd OpenForm "ToolTips", , , , , A_HIDDEN
      End Sub

</PRE><P><LI>Save the module as ToolTips.
<P>
</OL><h3>How to Use the ToolTips Form and ToolTips Procedures</h3>
 
<P>
To enable ToolTips for a control on a form, follow these steps:

<OL><P><LI>Call the ToolTips procedure from the control's MouseMove event,
   supplying the text for the tip as an argument. For example, the
   MouseMove event procedure for a command button called SaveRecord
   would look as follows:
<P>
<PRE>      Sub SaveRecord_MouseMove (Button As Integer, Shift As Integer, _
                                X As Single, Y As Single)
         ToolTips "Save Record"
      End Sub

</PRE><P><LI>Call the HideToolTips procedure from the MouseMove event of form
   sections holding any ToolTips-enabled controls. For example, the
   MouseMove event of a form detail section containing the SaveRecord
   button from the above example would look like:
<P>
<PRE>      Sub Detail0_MouseMove (Button As Integer, Shift As Integer, _
      X As Single, Y As Single)
         HideToolTips
      End Sub

</PRE></OL>NOTE: You must call the HideToolTips procedure to dismiss ToolTips. To be
sure that tips are dismissed when unnecessary, you should call the
HideToolTips procedure from the MouseMove event of all controls that are
not ToolTips-enabled, as well as from all form section MouseMove events.
You should also call this procedure from forms that do not contain
ToolTips, but that may be running in conjunction with ToolTips-enabled
forms.
<P>
For example, if you have two buttons next to each other on a form, and one
of the buttons is ToolTips-enabled and the other is not, ToolTips will not
be dismissed if the mouse pointer passes from the ToolTips-enabled button
to the other button unless the other button calls the HideToolTips
procedure from its MouseMove event.
<P>
If you plan to use ToolTips for buttons on a toolbar, make sure to leave
some part of the section surrounding the buttons visible, so that the
section's MouseMove event can call the HideToolTips procedure.
<P>
<P><h3>Fine-Tuning the Size and Placement of ToolTips</h3>
 
<P>
The Declarations section of the ToolTips module contains some constants
that you can use to adjust the size, placement, and behavior of the
ToolTips form.
<P>
ToolTips Delay Constants:
<P>
The TipDelayIfHidden and TipDelayIfVisible constants specify the amount of
time (in milliseconds) to wait before the ToolTips form is displayed. The
TipDelayIfHidden constant specifies how long to wait if the mouse pointer
is positioned over a ToolTips-enabled control and the tip is not yet
visible. The TipDelayIfVisible constant specifies how long to wait if the
mouse pointer is being moved from one visible tip to another.
<P>
ToolTips Size Constants:
<P>
The width of the ToolTips form is based on the width of the tip text, and
is approximated using the GetTextExtent Windows API call and the
AdjustTipWidth and AdjustTipWidthPixel constants. To increase the amount of
empty space to the left and right of the centered tip text, increase the
value of the constants. To decrease the amount of empty space, decrease the
constants.
<P>
NOTE: Tips with a number of wide letters (like "M" and "W") using a
proportionally-spaced font may be truncated if the values of the
AdjustTipWidth and AdjustTipWidthPixel constants are too small. Tips with a
number of narrow characters (like "i" and "j") may contain too much empty
space if these constants are too small.
<P>
ToolTips Position Constants:
<P>
The AdjustTipLeft and AdjustTipTop constants specify the position of the
ToolTips in relation to the mouse pointer. Increase these values to
position the ToolTips lower and further to the right. Decrease these values
to position the ToolTips higher and further to the left. Note that you can
use negative numbers for these values.
<P>
<P><h3>Closing the ToolTips Form</h3>
 
<P>
When you are working with and debugging the ToolTips form and ToolTips
code, the ToolTips form may get "stuck" on. If this happens, you will have
to close the running, hidden ToolTips form manually. To close the form, run
the following statement in the Immediate window:
<P>
<PRE>   DoCmd Close A_FORM, "ToolTips"

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about using ToolTips in Microsoft Access, search for
"ToolTips: using," and then "Displaying Information about a Toolbar or its
Buttons" using the Microsoft Access Help menu.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : FmsHowto kbusage<BR>
Version             : 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

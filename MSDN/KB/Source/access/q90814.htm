

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Create Do While and Do Until Loops in a Macro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90814 ">
<META NAME="KBModify" CONTENT="1997/08/06">
<META NAME="KBCreate" CONTENT="1992/10/22">
<META NAME="Keywords" CONTENT="McrCond kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  To perform a Do While or Do Until loop in a Microsoft Access macro, you need to use a combination of correct macro structure and the RunMacro action with appropriate information ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAA7,QAH4,QAZM,QAZL,QAPN,QAWF,QAKJ,QA1S,QA5F,QAMA,QAUJ,QAMW,QBS0,QA5C,QAGI P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Create Do While and Do Until Loops in a Macro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90814 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
To perform a Do While or Do Until loop in a Microsoft Access macro, you
need to use a combination of correct macro structure and the RunMacro
action with appropriate information supplied in the Repeat Expression
parameter. These requirements are described in more detail later in this
article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are several types of Do loops. Each type handles the looping
procedure and conditions differently. The different types of Do loops
are as follows:

<OL><P><LI>Do While &lt;condition&gt;... Loop
<P>
   This loop will execute while the condition is true. If the loop is
   encountered and the condition is already false, the loop will not
   be performed.

<P><LI>Do Until &lt;condition&gt;... Loop
<P>
   This loop will execute until the condition is true. If the loop is
   encountered and the condition is already true, the loop will not be
   performed.

<P><LI>Do... Loop While &lt;condition&gt;
<P>
   This loop will execute the first time unconditionally, and then loop
   while the condition is true. If the loop is encountered and the
   condition is already false, the loop will be performed once.

<P><LI>Do... Loop Until &lt;condition&gt;
<P>
   This loop will execute the first time unconditionally, and then loop
   until the condition is true. If the loop is encountered and the
   condition is already true, the loop will be performed once.
<P>
</OL>To perform a Do While or Do Until loop in a macro, use a macro similar to
the following examples. To create the following examples, open a new macro
and click Macro Names on the View menu. Add the following macro names and
actions and save this macro group as Do_Loops.
<P>
<P><h3>Do While &lt;Condition&gt;... Loop and Do Until &lt;Condition&gt;... Loop</h3>
 
<P>
<PRE>   Macro Name       Action
   -------------------------
   Do_Loop1         RunMacro
   Loop1            MsgBox

   Do_Loop1 Actions
   --------------------------------------
   RunMacro
      Macro Name: Do_Loops.Loop1
      Repeat Expression: &lt;your_condition&gt;

   Loop1 Actions
   -------------------
   MsgBox
      Message: ="Loop"

</PRE></OL>In this example, the Do_Loop1 macro calls the Loop1 macro while the
Repeat Expression parameter of the RunMacro action is true.
<P>
<P><h3>Do... Loop While &lt;Condition&gt; and Do... Loop Until &lt;Condition&gt;</h3>
 
<P>
<PRE>   Macro Name       Action
   -------------------------
   Do_Loop1         RunMacro
                    RunMacro
   Loop1            MsgBox

   Do_Loop1 Actions
   --------------------------------------
   RunMacro
      Macro Name: Do_Loops.Loop1
   RunMacro
      Macro Name: Do_Loops.Loop1
      Repeat Expression: &lt;your_condition&gt;

   Loop1 Actions
   -------------------
   MsgBox
      Message: ="Loop"

</PRE>In this example, the Do_Loop1 macro calls the Loop1 macro once
unconditionally, and then continues to call the Loop1 macro while the
Repeat Expression parameter of the RunMacro action is True.
<P>
<P><h3>Conditions</h3>
 
<P>
The condition used in the loop, which is supplied in the Repeat Expression
parameter of the RunMacro action, can be based on a value in a field on a
form, a property of a control on a form, or the value returned from a
Visual Basic or Access Basic function. If the condition is based on a
field in a form or a property of a control on a form, it will have syntax
similar to:
<P>
<PRE>   Forms![CounterForm]![Counter]&lt;=10

   -or-

   Forms![EntryForm]![InvoiceNo].Visible=True

</PRE>If the condition is based on the value returned from a Visual Basic or
Access Basic function, it will have syntax similar to:
<P>
<PRE>   Time()&gt;=TimeEntry()

</PRE><h3>Do While Loops vs. Do Until Loops</h3>
 
<P>
Whether a loop is a Do While loop or a Do Until loop depends on the
condition. The RunMacro action runs the macro until the condition in the
Repeat Expression parameter is false. This behavior is exactly what is
needed for a Do While loop. It is, however, the opposite of what is needed
for a Do Until loop. Therefore, to make a condition for a Do Until loop
work correctly, precede the condition in the RunMacro action with the NOT
operator.
 
<PRE>Keywords          : McrCond kbusage
Version           : 1.0 1.10 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Determining How Many Instances of Application Are Active </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96591 ">
<META NAME="KBModify" CONTENT="1997/06/08">
<META NAME="KBCreate" CONTENT="1993/03/22">
<META NAME="Keywords" CONTENT="kbprg PgmApi">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  You can use Windows API calls in Access Basic to determine how many instances of an application are running. You can use this to prevent re- entrance of an application that ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QAY5,QDN9,QA5F,QAMA,QAH4,QAJH,QBV8,QAB9,QAUD,QAIJ,QADK,QAGB,QA62,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Determining How Many Instances of Application Are Active</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96591 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
You can use Windows API calls in Access Basic to determine how many
instances of an application are running. You can use this to prevent re-
entrance of an application that is already running, to determine how many
instances of an application are active, or to start a loop in which you
remain until the application quits.
<P>
For information about how to determine the number of active instances of
Microsoft Access 7.0 or 97, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q167843.htm">Q167843</A></B>
   TITLE     : ACC: Determining How Many Instances of Application Are
               Active

</PRE>This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Introduction to Programming" manual in Microsoft Access version
1.x, or the "Building Applications" manual, Chapter 3, "Introducing Access
Basic" in version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This article outlines three uses of two Windows APIs in Access Basic.
<P>
Open a new module or a previously created module and enter the
following code:
<P>
NOTE: In the following sample code, an underscore (_) is used as a line-
continuation character. Remove the underscore from the end of the line when
re-creating this code in Access Basic.
<P>
<PRE>   '------------------------------------------
   'Global Declarations Section Of The Module.
   '------------------------------------------
   Option Explicit

   Declare Function GetModuleHandle% Lib "Kernel" (ByVal lpModuleName$)
   Declare Function GetModuleUsage% Lib "Kernel" (ByVal hModule%)

   1. Prevent re-entrance:

   '------------------------------------------------------------------
   ' The following function will test for re-entrance and return
   ' True if there is already an instance of the application active,
   ' or it returns False. This function requires an argument that is
   ' the name of the application.
   '------------------------------------------------------------------
      Function TestForReentrance% (ApplicationName$)
         If ApplicationName$ = "" Then Exit Function
         If GetModuleUsage(GetModuleHandle(ApplicationName$)) Then _
                           TestForReentrance = True
      End Function

</PRE><h3>Example of Using this Code</h3>
 
<P>
You can use this function to keep from starting an application that
is already running
<P>
<PRE>   Function RunMyApp$ (szAppToRun$)
      Dim x%
      If Not TestForReentrance(szAppToRun) Then
         x = Shell(szAppToRun)
         Exit Function
      End If
      RunMyApp = "AppToRun is presently active."
   End Function

   and a call to this in the Immediate window such as:

   ?RunMyApp$("Clock.exe")

   2. Count the number of instances:

   '------------------------------------------------------------------
   ' The following function will return the number of instances of an
   ' application that are currently active.
   '------------------------------------------------------------------

   Function CountInstance% (szAppName$)
       CountInstance = GetModuleUsage(GetModuleHandle(szAppName))
   End Function

   3. Remain idle until an application quits:

   '------------------------------------------------------------------
   ' The following function will attempt to start an MS-DOS application
   ' and remain in a loop until that application quits.
   '------------------------------------------------------------------

   Sub RunDosAppUntil (szAppToRun$)
      Dim hMod%
      hMod% = Shell(szAppToRun, 1)
         If (hMod% &gt; 32) Then
            While (GetModuleUsage(hMod%))
               DoEvents
            Wend
         Else
           MsgBox "Unable to start the Application"
        End If
   End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: multiple detect more than one<BR>
Keywords            : kbprg PgmApi<BR>
Version             : 1.0 1.1 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

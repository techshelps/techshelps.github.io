

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Dynamically Create a Filter </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109334">
<META NAME="KBModify" CONTENT="1997/04/02">
<META NAME="KBCreate" CONTENT="1994/01/02">
<META NAME="Keywords" CONTENT="kbusage McrActn">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes a method of dynamically creating a filter by applying expressions on a form using a macro. The same technique can also be adapted to a Query by Form (QBF) ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBV4,QBT6,QAMB,QAPN,QATX,QAHP,QAH4,QAUJ,QA1S,QDN9,QAWI,QAPF,QA7O,QAI4,QAKD P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Dynamically Create a Filter</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109334</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes a method of dynamically creating a filter by
applying expressions on a form using a macro. The same technique can
also be adapted to a Query by Form (QBF) method.
<P>
NOTE: Although this article will work with Microsoft Access 7.0 and
97, a new feature has been introduced called Filter by Form. For
more information on this new feature, query on the words "Filter by Form"
using the Microsoft Access 97 Help Index.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The "+" and "&amp;" operators are used to concatenate (join) two string
values. However, each operator behaves differently when used on Null-
valued strings. For example, if you use a Null variable "Name" in the
expression "Dear "+[Name], then the expression evaluates to Null,
whereas if you have the expression "Dear "&amp;[Name], then the expression
evaluates to "Dear ."
<P>
You can use these different behaviors to build a string for use in the
Where condition of an ApplyFilter or OpenForm macro action. You combine
the strings using the + operator to concatenate values to dynamically
build each separate part of the filter (which becomes Null if no value
is entered), and then use the &amp; operator to concatenate the separate
strings.
<P>
To dynamically create a filter by applying expressions on a form by using a
macro, follow these steps:

<OL><P><LI>Open the sample database Northwind.mdb (or NWIND.MDB in versions 1.x,
   2.0).

<P><LI>Open the Employees form in Design view.

<P><LI>Click Save As on the File menu and save the form as Employees 2.

<P><LI>Widen the Employees 2 form and add the following controls to the
   new blank area in the detail section to the right of the photo.
<P>
   NOTE: The labels should be to the left of their corresponding text
   boxes.
<P>
<P><PRE>      Label
      ------------------
      Caption: Search ID
</PRE><P>
<P><PRE>      Text Box
      -------------------------------
      Name: SID
      ControlSource: &lt;leave blank&gt;
      AfterUpdate: Filter.Make null 2
</PRE><P>
<P><PRE>      NOTE: In versions 1.x, the Name property is called the ControlName
      property.
</PRE><P>
<P><PRE>      Label
      --------------------------
      Caption: Search First Name
</PRE><P>
<P><PRE>      Text Box
      -----------------------------------------------------
      Name: SName
      ControlSource: &lt;leave blank&gt;
      Validation Rule: Not Like "*'*" Or Is Null
      Validation Text: Can't use apostrophe in filter text.
      AfterUpdate: Filter.Make null
</PRE><P>
<P><PRE>      NOTE: In the following example, an underscore (_) is used as a
      line-continuation character. Remove the underscore when re-creating
      this example.
</PRE><P>
<P><PRE>      In Microsoft Access 7.0:
</PRE><P>
<P><PRE>      Text Box
      -------------------------------------------------------------------
      Name: Where Text
      ControlSource: =Mid((" And [Employee ID]="+[SID]) &amp; _
<PRE></PRE>                             (" And [First Name] Like '"+[SName]+"'"),2)

      In Microsoft Access 1.x, 2.0 and 97:

      Text Box
      -------------------------------------------------------------------
      Name: Where Text
      ControlSource: =Mid((" And [Employee ID]="+[SID]) &amp; _
                             (" And [First Name] Like '"+[SName]+"'"),6)

      Command Button
      ---------------------------
      Caption: Apply Filter
      OnClick: Filter.Apply Filter

      NOTE: In versions 1.x, the OnClick property is called the OnPush
      property.

</PRE><P><LI>Close and Save the form.

<P><LI>Create the following macro group:
<P>
<P><PRE>      Macro Group: Filter
      --------------------------------------------------------------
      Macro Name: Make null
<PRE></PRE>         Condition:  IsNull(Screen.ActiveControl)
         Action: StopMacro
         Description: This macro is for text fields.

         Condition: Len(Screen.ActiveControl)=0
         Action: SetValue
         Item: Screen.ActiveControl
         Expression: Null
         Description: Make an empty text field null.

      Macro Name: Make null 2
         Condition: IsNull(Screen.ActiveControl)
         Action: StopMacro
         Description: This macro is for numeric fields.

         Condition: Not IsNumeric(Screen.ActiveControl)
         Action: SetValue
         Item: Screen.ActiveControl
         Expression: Null
         Description: Turn non-numeric values into nulls.

      Macro Name: Apply Filter
         Condition: IsNull([Where Text])
         Action: ApplyFilter
         Where Condition: True
         Description: No Where Text, so select all records and stop.

         Condition: ...
         Action: StopMacro

         Condition: Len([Where Text]) &gt; 255
         Action: MsgBox
         Message: You have selected too many criteria in the filter.
         Title: Apply Filter
         Description: If filter too long, display warning and stop.

         Condition: ...
         Action: StopMacro

         Action: ApplyFilter
         Where Condition: =[Where Text]
         Description: Apply the filter.

</PRE><P><LI>Save the macro as Filter.

<P><LI>View the form in Form view and enter values in the search fields.
<P>
</OL>Note that the data for the Apply Filter's Where condition is
constructed in the Where text control. If you do not want users to see
this, set the Visible property of the Where text field to False.
<P>
<P><h3>Limitations</h3>
 

<UL><LI>The length of the ControlSource property for the Where text box cannot
   exceed 255 characters. Microsoft Access will not let you type an
   expression longer than this. One workaround to this limitation is to
   use several text boxes to build each part of the criteria, and then use
   a final text box to combine the various parts into a single Where
   clause.

<LI>The string that the expression produces cannot exceed 255 characters.
   The second test in the Apply Filter macro above tests for this
   condition. If the filter string is longer than 255 characters, you
   will receive a warning that the filter is too long and the macro
   will stop.
<P>
</UL>To modify the above example for a QBF method, add the controls to a blank
form not based on any table or query and change the ApplyFilter actions to
OpenForm actions. To select all the records using OpenForm actions, leave
the Where condition blank instead of using True.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: dynamic QBE query by example<BR>
Keywords            : kbusage McrActn<BR>
Version             : 1.0 1.1 2.0 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

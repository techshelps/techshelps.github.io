

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Cannot Open Multiple Instances of the Same Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q101312">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1993/07/11">
<META NAME="Keywords" CONTENT="FmsOthr kbusage">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  When you try to open a second instance of an open form with an OpenForm macro action, the instance of the form that is already open is activated.  NOTE: In Microsoft Access ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QAUJ,QAY5,QAH4,QBWS,QAJQ,QAMA,QBV8,QA5F,QAB9,QAI2,QA9N,QAG8,QBJZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Cannot Open Multiple Instances of the Same Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q101312</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
When you try to open a second instance of an open form with an OpenForm
macro action, the instance of the form that is already open is activated.
<P>
NOTE: In Microsoft Access for Windows 95 version 7.0 there is a new feature
that allows multiple instances of the same form. For more information about
this feature, search on the phrase "Displaying Multiple Instances of a
Form" using Answer Wizard in Microsoft Access for Windows 95 Help.
<P>
<P><h2>CAUSE</h2>
 
<P>
You can have only one copy of a form open at a time.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
NOTE: This article assumes that you are familiar with Access Basic and with
creating Microsoft Access applications using the programming tools provided
with Microsoft Access. For more information on Access Basic, please refer
to the "Introduction to Programming" manual in Microsoft Access version
1.x, or the "Building Applications" manual in version 2.0.
<P>
The following information describes how to create and use an Access Basic
function called OpenFormInstance(), which allows you to open more than one
copy of the same form in Microsoft Access. To make OpenFormInstance work,
you must first make &lt;x&gt; number of copies of your original form, giving each
copy a numeric suffix greater than zero. That is, if your form is called
"Customers," make copies of the form renaming them to "Customers1,"
"Customers2," "Customers3," and so forth.
<P>
When OpenFormInstance() is invoked with "Customers," it checks to see if a
copy of the form is available for display. It returns the following error
message if all instances are currently open:
<P>
<PRE>   Could not open form "Customers"
   Please close another instance and try again.

</PRE>To use the OpenFormInstance() function, create a new module with the
following Access Basic functions:
<P>
NOTE: In the following sample code, an underscore (_) is used as a
line-continuation character. Remove the underscore from the end of
the line when re-creating this code in Access Basic.
<P>
<PRE>   '*****************************************************************
   ' DECLARATION SECTION
   '*****************************************************************
   Option Explicit

   '*****************************************************************
   ' FUNCTION: OpenFormInstance()
   '
   ' PURPOSE:
   '   Allows you to open more than one copy of the same form
   '   on screen at a time.
   '
   ' PREREQUISITES:
   '   You must make X number of copies of the the
   '   form, renaming them with a numeric suffix greater than zero.
   '   Example:
   '
   '        "Customers1," "Customers2," "Customers3," ...
   '
   ' REQUIRES:
   '   Function IsLoaded() - Determines if form is loaded.
   '   Function GetFormNames() - Supplied in this module.
   '
   ' ARGUMENTS:
   '   FormName - The generic name of the form to open.
   '   Example:
   '
   '        "Customers"
   '
   ' RETURNS:
   '   True  - if an instance of FormName was opened.
   '   False - if no instance of FormName was found or all available
   '           instances are active.
   '
   ' NOTES:
   '   You can customize the OpenForm action in the code below to add
   '   additional (optional) parameters, such as a Where condition or
   '   or alternate view.
   '
   '********************************************************************
   Function OpenFormInstance (ByVal FormName As String)
      Dim Count, i, Msg As String, InstanceCount
      ReDim Names(0) As String

      ' Get a list of all the forms in the current database.
      Count = GetFormNames(Names())

      ' Loop through the list of forms for a match with
      ' .. the requested form.
      For i = 0 To Count - 1
         ' Is the name of the form, minus the suffix, the same?
         If FormName = Left(Names(i), Len(FormName)) Then

            ' .. is the suffix a number greater than zero?
            If Val(Mid(Names(i), Len(FormName) + 1)) &gt; 0 Then

               ' Count the number of instances.
               InstanceCount = InstanceCount + 1

               ' If the form is NOT loaded,load it.
               If Not IsLoaded(Names(i)) Then
                  DoCmd OpenForm Names(i)
                  OpenFormInstance = True
                  Exit Function
               End If
            End If
         End If
      Next i

      ' No form was found or all instances are being used.
      OpenFormInstance = False

      ' If no instance was found, just return.
      If InstanceCount = 0 Then Exit Function

      ' If all instances are being used, display error message.
      Msg = "Couldn't open form """ &amp; FormName &amp; """."
      Msg = Msg &amp; Chr$(13) &amp; Chr$(13)
      Msg = Msg &amp; "Please close another instance and try again."
      MsgBox Msg, 48

   End Function

   '****************************************************************
   ' FUNCTION: GetFormNames()
   '
   ' PURPOSE:
   '   Fills the string array with a list of forms names.
   '
   ' ARGUMENTS:
   '    Names      - A single dimensional array of type string.
   '
   ' RETURN:
   '   The number(zero based) of names stored in the Names array.
   '
   ' NOTES:
   '   This function uses information stored in the
   '   MySysObject table of the currently opened database.
   '   The system tables are undocumented and are subject to
   '   change in future versions of Microsoft Access.
   '
   '****************************************************************
   Function GetFormNames (Names() As String)
      Dim db As Database, ss As Snapshot
      Dim Count, SQL
      Dim Msg As String

      SQL = "Select Name,Type from MSysObjects Where Type="
      SQL = SQL &amp; "-32768 And Left(Name,1)&lt;&gt;'~' Order By Name;"
      Set db = CurrentDB()
      Set ss = db.CreateSnapshot(SQL)

      ss.MoveLast
      If ss.RecordCount &gt; 0 Then
         ReDim Names(0 To ss.RecordCount - 1)
      Else
         GetFormNames = 0
         Exit Function
      End If

      ss.MoveFirst
      Count = 0
      Do While Not ss.EOF
         Names(Count) = ss![name]
         Count = Count + 1
         ss.MoveNext
      Loop

      GetFormNames = ss.RecordCount
   End Function

</PRE><h3>How to Use the OpenFormInstance() Function</h3>
 
<P>
The following steps assume there is a need to see more than one
customer form on the screen at a given time in the sample database
NWIND.MDB:

<OL><P><LI>Open NWIND.MDB and choose the Form button in the Database window.

<P><LI>Click once on the Customers form, and choose Copy from the Edit
   menu.

<P><LI>Choose Paste from the Edit menu. Type "Customers1" (without the
   quotation marks) in the Form Name box and then press ENTER.

<P><LI>Repeat step 3 for however many instances you expect your users to
   need ("Customers2," "Customers3," and so on).

<P><LI>Open the module containing the OpenFormInstance() function in Design
   view, and then choose Immediate Window from the View menu.

<P><LI>Type the following and press ENTER:
<P>
<P><PRE>      ? OpenFormInstance("Customers")
</PRE><P>
   NOTE: The first instance of the Customers form opens.

<P><LI>Repeat step 6.
<P>
   NOTE: The second instance of the Customers form opens.

<P><LI>Repeat step 6 until you receive an error message indicating that no
   more instances are available.
<P>
</OL><h3>Problems to Consider When Using OpenFormInstance()</h3>
 
<P>
Since you are not actually opening the same form multiple times (you
are opening copies), it is important that any macros and module code
that make direct references to the form using "Forms!FormName"
references be reconsidered.
<P>
If you have more than one instance of the form opened, it is best to
use the following techniques when you reference controls on the form.

<UL><LI>User Screen.ActiveForm form notation wherever possible.
<P>
<P><PRE>      MsgBox Screen.ActiveForm![ControlName]
</PRE>
<LI>When Screen.Active form is not appropriate, pass the name of the
   form to the Access Basic function to call.
<P>
<P><PRE>      Function MyFunction(MyForm)
<PRE></PRE>         MsgBox Forms(MyForm)![ControlName]
      End Function

</PRE><LI>Because you cannot pass arguments to macros, consider reworking the
   macro as an Access Basic function. You could call the function above,
   MyFunction(), using a RunCode macro action as follows:
<P>
<P><PRE>      RunCode
<PRE></PRE>         Function Name: =MyFunction(Screen.ActiveForm.FormName)

</PRE></OL><h2>STATUS</h2>
 
<P>
This behavior no longer occurs in Microsoft Access version 7.0.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Access, "Introduction to Programming," version 1.1, Chapter 7,
"Forms and Report Variables"
<P>
Microsoft Access, "Building Applications," version 2.0, Chapter 4, "Using
Forms to Collect, Display, and Filter Information"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: open twice isloaded running<BR>
Keywords          : FmsOthr kbusage<BR>
Version           : 1.0 1.1 2.0<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbprb<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC2: DLookup() Usage, Examples, and Troubleshooting Tips </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136460">
<META NAME="KBModify" CONTENT="1997/05/21">
<META NAME="KBCreate" CONTENT="1995/09/07">
<META NAME="Keywords" CONTENT="kbusage SynFnc">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Novice: Requires knowledge of the user interface on single-user computers.  This article describes how to use the DLookup() function, and includes examples and tips. The following topics are addressed in this article:   - The DLookup() function syn...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPF,QA4H,QAGU,QAML,QAB9,QA5V,QA7O,QA1S,QA7N,QAUD,QAY5,QAKD,QAE5,QBBI,QA50 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC2: DLookup() Usage, Examples, and Troubleshooting Tips</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136460</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Novice: Requires knowledge of the user interface on single-user computers.
<P>
This article describes how to use the DLookup() function, and includes
examples and tips. The following topics are addressed in this article:

<UL><LI>The DLookup() function syntax and usage

<LI>DLookup() function examples:
<P>
<P><PRE>    - A function with no criteria
    - Specifying numeric criteria
    - Specifying numeric criteria that comes from a field on a form
    - Specifying textual criteria
    - Specifying textual criteria that comes from a field on a form
    - Specifying date criteria
    - Specifying multiple fields in the criteria
    - Tips for troubleshooting and debugging DLookup() expressions
</PRE><P>
</UL>When you use the DLookup() function, difficulties may result if you do not
set up and supply the criteria expression correctly. The criteria
expression is common to many other aggregate (totals) functions, such as
DSum(), DFirst(), DLast(), DMin(), DMax(), and DCount(). Therefore, the
following material may help you understand those domain aggregate
functions as well as the DLookup() function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>The DLookup() Function Syntax and Usage</h3>
 
<P>
The DLookup() function can be used in an expression or in a user-defined
function to return a field value in a domain or a specified set of records.
<P>
The syntax of the DLookup() function is as follows:
<P>
<PRE>   DLookup(Expression, Domain [, Criteria] )

</PRE>The function has three arguments: the expression, the domain, and the
criteria. (Note that the criteria argument is optional.)
<P>
The expression argument is used to identify the field that contains the
data in the domain that you want returned or is used to perform
calculations using the data in that field.
<P>
The domain argument is the name of the recordset that identifies the
domain. It can be a table or a query name.
<P>
The criteria argument is an optional string expression that is used to
restrict the range of the data that the DLookup() function is performed
on.
<P>
Note that the criteria argument is identical to the WHERE clause in an SQL
expression (except that you do not use the keyword WHERE).
<P>
The DLookup() function returns one value from a single field even if more
than one record satisfies the criteria. If no record satisfies the
criteria, or if the domain contains no records, the DLookup() function
returns a null.
<P>
<P><h3>DLookup() Function Examples</h3>
 
<P>
The following examples demonstrate how to use the DLookup() function to
find or return values from a table or query. These examples refer to the
sample database NWIND.MDB and can be entered in the ControlSource property
of a text box on a form or report.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code.
<P>
A Function with No Criteria:
<P>
This example demonstrates how to use the DLookup() function without any
criteria specified. This example returns the value contained in the Last
Name field of the first record in the Employees table:
<P>
<PRE>   =DLookUp("[Last Name]", "Employees")

</PRE>Specifying Numeric Criteria:
<P>
To find the last name of the employee with ID number 7, specify a criteria
to limit the range of records used:
<P>
<PRE>   =DLookUp("[Last Name]", "Employees", "[Employee ID] = 7")

</PRE>Specifying Numeric Criteria That Comes from a Field on a Form:
<P>
If you do not want to specify a particular value in the expression (as in
the example above), use a parameter in the criteria instead. The following
examples demonstrate how to specify criteria from another field on the
current form. You can try these examples on the Orders form in the sample
database NWIND.MDB:
<P>
<PRE>   =DLookUp("[Last Name]", "Employees", _
         "[Employee ID] = Form![Employee ID]")

   =DLookUp("[Last Name]", "Employees", _
         "[Employee ID] = " &amp; [Employee ID])

   =DLookUp("[Last Name]", "Employees", _
         "[Employee ID] = " &amp; Forms![Orders]![Employee ID])

</PRE>The three examples above return the same results.
<P>
In the first example, Form![Employee ID] appears inside the criteria's
quotation marks. "Form" tells Microsoft Access that the field reference
"Employee ID" comes from the current form. If you omit it, Microsoft
Access compares Employee ID to itself in the Employees table, and returns
the last name from the first record in the Employees table (the same
result as if you did not specify any criteria). This is because the first
record in the Employees table has a 1 in the Employee ID field, so the
argument
<P>
<PRE>   "[Employee ID] = [Employee ID]"

</PRE>computes to
<P>
<PRE>   "1 = 1"

</PRE>and would therefore be the first record that matched the criteria.
<P>
The criteria for the second two examples are made by concatenating two
string expressions with an ampersand (&amp;). In the third example, the
criteria ends with a form field reference.
<P>
When criteria are being evaluated, the individual pieces of the criteria
are first evaluated, and then appended or concatenated. Then, the whole
value is computed.
<P>
If the current value in the Employee ID field on the Orders form is 7, the
original criteria expression
<P>
<PRE>   "[Employee ID] = " &amp; [Employee ID]

</PRE>computes to
<P>
<PRE>   "[Employee ID] = " &amp; 7

</PRE>which, when concatenated, computes to:
<P>
<PRE>   "[Employee ID] = 7"

</PRE>If you do not specify the full form reference (which the second example
above does not), Microsoft Access assumes that you are referring to the
current form.
<P>
The following example is a derivative of the third example above:
<P>
<PRE>   =DLookUp("[Last Name]", "Employees", _
         "[Employee ID] = Forms![Orders]![Employee ID]")

</PRE>In this example, the full form reference is enclosed inside the criteria's
quotation marks. In this case, Microsoft Access correctly looks up the
value when the form first opens, but only until the Employee ID field is
changed by modifications to a record or the addition of a record.
Microsoft Access does not automatically recompute the new employee last
name value after such a change. You can manually recompute the expression
by placing the insertion point on the control and then pressing F9.
<P>
If you want the field to automatically update when the criteria changes,
make the criteria a variable by using the method of concatenating the
expression's parts as described earlier. Note that when you move to a new
record, the DLookup() text boxes that update automatically will have
"#Error" in them until you enter something in the Employee ID text box.
<P>
Specifying Textual Criteria:
<P>
All the examples above demonstrate how to use the DLookup() function with
numeric criteria. If the criteria fields are textual, enclose the text in
single quotation marks, as in the following example:
<P>
<PRE>   =DLookUp("[Title]", "Employees", "[Last Name] = 'Callahan'")

</PRE>Note that you can use double quotation marks instead of single quotation
marks, although single quotation marks are preferred. Use two double
quotation marks to replace one single quotation mark. The following
example uses double quotation marks and is equivalent to the example above:
<P>
<PRE>   =DLookUp("[Title]", "Employees", "[Last Name] = ""Callahan""")

</PRE>Specifying Textual Criteria That Comes from a Field on a Form:
<P>
The following example demonstrates how to find the contact name for a
customer on the Orders form. The Customer ID field is a textual key field
for the criteria, so the DLookup() statement is
<P>
<PRE>   =DLookup("[Contact Name]", "Customers", _
    "[Customer ID]='" &amp; [Customer ID]&amp; "'")

</PRE>-or-
<P>
<PRE>   =DLookup("[Contact Name]", "Customers", _
    "[Customer ID]='" &amp; Forms![Orders]![Customer ID]&amp; "'")

</PRE>In the second example, the criteria is made up by concatenating three
string expression pieces. The first is "[Customer ID]= '", the second is
the value contained in the actual Customer ID field, and the third is the
closing single quotation mark enclosed in double quotation marks.
<P>
When this criteria is being evaluated, the individual pieces are first
evaluated, and then their results appended or concatenated. Then the whole
value is computed.
<P>
If the current value selected in the Customer ID combo box on the Orders
form is Alfreds Futterkiste, the bound column for the combo box returns
ALFKI as the Customer ID. The original criteria expression
<P>
<PRE>   "[Customer ID]= '" &amp; [Customer ID]&amp; "'"

</PRE>computes to
<P>
<PRE>   "[Customer ID]= '" &amp; "ALFKI" &amp; "'"

</PRE>which, when concatenated, computes to:
<P>
<PRE>   "[Customer ID]= 'ALFKI'"

</PRE>Specifying Date Criteria:
<P>
If the criteria fields are date or time values, enclose the date or time
value in number signs (#). To find an employee whose birthday is on a given
date, use the following sample criteria:
<P>
<PRE>   =DLookUp("[Last Name]", "Employees", "[Birth Date] = #01-27-66#")

</PRE>Specifying Multiple Fields in the Criteria:
<P>
The criteria expression can be any valid SQL WHERE clause (without the
keyword WHERE). This implies that more than one field can be used to
specify criteria for a DLookup() function.
<P>
To find the Order ID for one of the orders sold by employee "Andrew
Fuller", with an Employee ID of 2 (numeric), for customer "Simons bistro",
with a Customer ID of SIMOB (textual), use the following sample DLookup()
statement:
<P>
<PRE>   =DLookUp("[Order ID]", "Orders", _
         "[Customer ID]= 'SIMOB' And [Employee ID] = 2")

</PRE>This statement returns Order ID 10556, which is the first Order ID that
matches the criteria. Order ID 10669 also matches the criteria.
<P>
The example above uses hard-coded (or specific) Customer ID and Employee ID
values. To use variables instead of specifics for the criteria, you can
use Access Basic to concatenate multiple string expressions. The following
Access Basic example demonstrates this method:
<P>
<PRE>   ' Declare the variables
   Dim CustID As String
   Dim EmpID As Long
   Dim Result

   ' Assign values to the variables to be used in the criteria
   CustID = "SIMOB"
   EmpID = 2

   Result = DLookup("[Order ID]", "Orders", _
      "[Customer ID]= '" &amp; CustID &amp; "' And [Employee ID] = " &amp; EmpID)
   MsgBox Result

</PRE>If the DLookup() function is unsuccessful, the variable Result contains
Null.
<P>
Note that the criteria is made up of four pieces that are evaluated
individually. The results are appended, and then evaluated as a whole. The
original criteria expression
<P>
<PRE>   "[Customer ID]= '" &amp; CustID &amp; "' And [Employee ID] = " &amp; EmpID

</PRE>computes to
<P>
<PRE>   "[Customer ID]= '" &amp; "SIMOB" &amp; "' And [Employee ID] = " &amp; 2

</PRE>which, when concatenated, computes to:
<P>
<PRE>   "[Customer ID]= 'SIMOB' And [Employee ID] = 2"

</PRE>You can use the next example to find an employee whose birthday falls on
today's date:
<P>
<PRE>   =DLookUp("[Last Name]", "Employees", _
      "Month([Birth Date]) = " &amp; Month(Date) &amp; " And Day([Birth Date]) _
      = " &amp; Day(Date))

</PRE>If today's date is 12/2/93, the original criteria expression:
<P>
<PRE>   "Month([Birth Date]) = " &amp; Month(Date) &amp; " And Day([Birth Date]) = " _
   &amp; Day(Date)

</PRE>computes to
<P>
<PRE>   "Month([Birth Date]) = " &amp; 12 &amp; " And Day([Birth Date]) = " &amp; 2

</PRE>which, when concatenated, computes to:
<P>
<PRE>   "Month([Birth Date]) = 12 And Day([Birth Date]) = 2"

</PRE><h3>Tips for Troubleshooting and Debugging DLookup() Expressions</h3>
 
<P>
To troubleshoot expressions, break down the expression into smaller
components and test the components individually in the Immediate window to
ensure they work correctly. If the smaller components work correctly, they
can be put back together, piece by piece, until the final expression works
correctly.
<P>
The Immediate window is a tool that you can use to help debug Access Basic
modules. You can use the Immediate window to test and evaluate expressions
independently of the form or macro the expression is to be used in. You
can set up expressions in the Immediate window, run them, and see the
results immediately.
<P>
The following example demonstrates a strategy you can use to break down a
DLookup() expression into smaller components that you can test in the
Immediate window. Assume you are having difficulty with the following
statement:
<P>
<PRE>   =DLookUp("[Order ID]", "Orders", _
      "[Customer ID]= '" &amp; Forms![MyForm]![Customer ID] _
      &amp; "' And [Employee ID] = " &amp; Forms![MyForm]![Employee ID])

</PRE>Note that the criteria includes multiple fields in the lookup criteria, one
of which is numeric and one of which is textual.
<P>
To troubleshoot this expression, try the following:

<OL><P><LI>Open or create a module. From the View menu, choose Immediate window.

<P><LI>Try the function without any criteria. Type the following line in the
   Immediate window, and then press ENTER:
<P>
<P><PRE>      ? DLookUp("[Order ID]", "Orders")
</PRE><P>
   Microsoft Access will perform the calculation and display the result on
   the next line in the Immediate window.

<P><LI>Make sure the form references data correctly data. Type each of the
   following lines in the Immediate window, and then press ENTER:
<P>
<P><PRE>      ? Forms![MyForm]![Customer ID]
</PRE><P>
<P><PRE>      -and-
</PRE><P>
<P><PRE>      ? Forms![MyForm]![Employee ID]
</PRE>
<P><LI>Try to make the criteria fields work independently by hard coding
   values into the expression. Type each of the following lines in the
   Immediate window, and then press ENTER:
<P>
<P><PRE>      ? DLookUp("[Order ID]", "Orders", "[Customer ID]= 'SIMOB'")
</PRE><P>
<P><PRE>      -and-
</PRE><P>
<P><PRE>      ? DLookUp("[Order ID]", "Orders", "[Employee ID] = 2")
</PRE>
<P><LI>Try to make the criteria fields work independently with a parameter in
   the query. Type each of the following lines in the Immediate window, and
   then press ENTER:
<P>
<P><PRE>      ? DLookUp("[Order ID]", "Orders", _
<PRE></PRE>         "[Customer ID]= '" &amp; Forms![MyForm]![Customer ID]&amp; "'")

      -and-

      ? DLookUp("[Order ID]", "Orders", _
         "[Employee ID] = " &amp; Forms![MyForm]![Employee ID])

</PRE></OL><h2>REFERENCES</h2>
 
<P>
Microsoft Access "User's Guide," Chapter 18, "Using Expressions in Forms,"
page 459
<P>
Microsoft Access "Language Reference," pages 194-195
<P>
Microsoft Access "Building Applications," Chapter 9, "Debugging," pages 213-
216
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbusage SynFnc<BR>
Version             : 2.0<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

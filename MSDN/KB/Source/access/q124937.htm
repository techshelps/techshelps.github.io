

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Explanation of "Ambiguous Outer Joins" Error Message </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124937">
<META NAME="KBModify" CONTENT="1997/05/07">
<META NAME="KBCreate" CONTENT="1995/01/17">
<META NAME="Keywords" CONTENT="kberrmsg kbusage QryJoin">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Novice: Requires knowledge of the user interface on single-user computers.  This article discusses the error message  The SQL statement couldn't be executed because it contains ambiguous outer joins.  This error message occurs when you try to run a...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBPJ,QAB4,QDNB,QA7O,QA7N,QA62,QAJN,QAPN,QACF,QABI,QAUD,QA1S,QBWS,QBC9,QBC8 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Explanation of "Ambiguous Outer Joins" Error Message</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124937</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Novice: Requires knowledge of the user interface on single-user computers.
<P>
This article discusses the error message "The SQL statement couldn't be
executed because it contains ambiguous outer joins." This error message
occurs when you try to run a query that contains certain combinations of
joins. (The three types of joins in Microsoft Access are left outer joins,
right outer joins, and equi-joins.) For example, running the following
query results in the error message:
<P>
<PRE>   Consultants ---&gt; Active Consultants ---- Projects

</PRE>The SQL statement for this query reads:
<P>
<PRE>   Consultants LEFT JOIN [Active Consultants] EQUI-JOIN Projects

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The Microsoft Access Help topic for the error message states:
<P>
<PRE>   You tried to execute an SQL statement that contains multiple
   joins; the results of the query can differ depending on
   the order in which the joins are performed.

</PRE>The sample query above (Consultants LEFT JOIN [Active Consultants] EQUI-
JOIN Projects) can be processed in two ways. The result of the left
outer join between the Consultants and Active Consultants tables can be
equi-joined to the Projects table:
<P>
<PRE>   (Consultants ---&gt; Active Consultants) ---- Projects

</PRE>Or, the Consultants table can be left outer joined to the result of the
equi-join between the Active Consultants and Projects tables:
<P>
<PRE>   Consultants ---&gt; (Active Consultants ---- Projects)

</PRE>You must specify which method should be used by changing one of the joins
or by separating the query into two queries.
<P>
The following example demonstrates the different results that a query with
ambiguous joins can generate:

<OL><P><LI>Start Microsoft Access, open a new database, and create the following
   tables:
<P>
<P><PRE>      Table: Consultants
      ---------------------
      Field Name: ConsID
<PRE></PRE>         Data Type: AutoNumber
      Field Name: FName
         Data Type: Text
      Primary Key: ConsID

      Table: Active Consultants
      --------------------------
      Field Name: ConsID
         Data Type: Number
         FieldSize: Long Integer
      Field Name: ProjID
         Data Type: Text
      Field Name: StartDate
         Data Type: Date/Time
      Primary Key: none

      Table: Projects
      ------------------
      Field Name: ProjID
         Data Type: Text
      Field Name: Desc
         Data Type: Text
      Primary Key: ProjID

</PRE><P><LI>View the tables in Datasheet view and add the following data:
<P>
<P><PRE>      Consultants:
</PRE><P>
<PRE>         ConsID   FName
         -----------------
         1        Taylor
         2        Brad
         3        Sharlene
         4        Marla

      Active Consultants:

         ConsID   ProjID   StartDate
         ---------------------------
         1        A1       7/8/95
         2        D4       9/1/95
         3                 8/15/95

      Projects:

         ProjID   Desc
         -----------------------------
         A1       ACME Payroll Upgrade
         D4       Efficiency Study

</PRE></OL><h3>Method 1: Process "Consultants LEFT JOIN on Active Consultants" First</h3>
 

<OL><P><LI>Create the following query:
<P>
<P><PRE>      Query: AllConsInfo
      ---------------------------------------------------------------
      Type: Select Query
      Join: [Consultants].[ConsID] ---&gt; [Active Consultants].[ConsID]
      Field: FName
<PRE></PRE>         Table: Consultants
      Field: StartDate
         Table: Active Consultants
      Field: ProjID
         Table: Active Consultants

   NOTE: Make sure that the following property is selected for the join
   (double-click the join line to check the join property):

      Include ALL records from 'Consultants' and only those records from
      'Active Consultants' where the joined fields are equal.

</PRE><P><LI>Save and then run the query. The query should return:
<P>
<PRE>      FName      StartDate   ProjID
      -----------------------------
      Taylor     7/8/95      A1
      Brad       9/1/95      D4
      Sharlene   8/15/95
      Marla

   Note the following items about the query's result:

    - All the consultants are returned.
    - If a consultant is active, his or her start date is returned.
    - If a consultant is assigned to a project, the project ID is
      returned.

</PRE><P><LI>Create the following query:
<P>
<P><PRE>      Query: AllConsInfoAndProjects
      ------------------------------------------------------
      Type: Select Query
      Join: [AllConsInfo].[ProjID] &lt;---&gt; [Projects].[ProjID]
      Field: FName
<PRE></PRE>         Table: AllConsInfo
      Field: StartDate
         Table: AllConsInfo
      Field: Desc
         Table: Projects

   NOTE: Make sure that the join property is type 1.

</PRE><P><LI>Save and then run the query. The query should return:
<P>
<PRE>      FName    StartDate   Desc
      -----------------------------------------
      Taylor   7/8/95      ACME Payroll Upgrade
      Brad     9/1/95      Efficiency Study

</PRE></OL><h3>Method 2: Process "Active Consultants EQUI-JOIN on Properties" First</h3>
 

<OL><P><LI>Create the following query:
<P>
<P><PRE>      Query: ProjInfo
      -------------------------------------------------------------
      Type: Select Query
      Join: [Active Consultants].[ProjID] &lt;---&gt; [Projects].[ProjID]
      Field: ConsID
<PRE></PRE>         Table: Active Consultants
      Field: StartDate
         Table: Active Consultants
      Field: Desc
         Table: Projects

</PRE><P><LI>Save and then run the query. The query should return:
<P>
<PRE>      ConsID   StartDate   Desc
      -----------------------------------------
      1        7/8/95      ACME Payroll Upgrade
      2        9/1/95      Efficiency Study

</PRE><P><LI>Create the following query:
<P>
<P><PRE>      Query: ProjInfoAndConsultants
      -----------------------------------------------------
      Type: Select Query
      Join: [ProjInfo].[ConsID] &lt;--- [Consultants].[ConsID]
      Field: FName
<PRE></PRE>         Table: Consultants
      Field: StartDate
         Table: Consultants
      Field: Desc
         Table: ProjInfo

   NOTE: Make sure that the following property is selected for the join:

      Include ALL records from 'Consultants' and only those records from
      'ProjectInfo' where the joined fields are equal.

</PRE><P><LI>Save and then run the query. The query should return:
<P>
<PRE>      FName      StartDate   Desc
      -------------------------------------------
      Taylor     7/8/95      ACME Payroll Upgrade
      Brad       9/1/95      Efficiency Study
      Sharlene
      Marla

</PRE></OL>Note that the results of method 1 and method 2 differ. When a query is
defined like
<P>
<PRE>   Consultants ---&gt; Active Consultants ---- Projects

</PRE>Microsoft Access produces an error message because the query can be
processed in multiple ways.
<P>
The following table lists all the join combinations for the sample query
above. Those combinations with "ERR" at the left will cause the "ambiguous
outer join" error message:
<P>
<PRE>   OK : Consultants ---- Active Consultants ---- Projects
   OK : Consultants ---- Active Consultants ---&gt; Projects
   ERR: Consultants ---- Active Consultants &lt;--- Projects

   ERR: Consultants ---&gt; Active Consultants ---- Projects
   OK : Consultants ---&gt; Active Consultants ---&gt; Projects
   ERR: Consultants ---&gt; Active Consultants &lt;--- Projects

   OK : Consultants &lt;--- Active Consultants ---- Projects
   OK : Consultants &lt;--- Active Consultants ---&gt; Projects
   OK : Consultants &lt;--- Active Consultants &lt;--- Projects

</PRE>There are three rules that can be derived from this table:

<OL><P><LI>Using all equi-joins in a query is acceptable.

<P><LI>Arrows pointing away from the middle table (pointing away from
   other joins) are acceptable.

<P><LI>Arrows pointing toward the middle table require that the other join
   point in the same direction (if an arrow points toward another join,
   that join must point in the same direction).
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kberrmsg kbusage QryJoin<BR>
Version             : 2.0 7.0 97<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

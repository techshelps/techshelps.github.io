

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC1x: GP Fault When Allocating Huge Arrays </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100175">
<META NAME="KBModify" CONTENT="1997/06/06">
<META NAME="KBCreate" CONTENT="1993/06/16">
<META NAME="Keywords" CONTENT="EvnGpf kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  When you try to allocate a huge array, you may receive a general protection (GP) fault. The following error message appears:     An error has occurred in your application. If you choose    Ignore, you should save your work in a new file. If you cho...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QAML,QBW5,QBKN,QAYY,QDN9,QAJQ,QAKC,QAB4,QACJ,QAFO,QBC6,QATX,QAPF,QAG8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC1x: GP Fault When Allocating Huge Arrays</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100175</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you try to allocate a huge array, you may receive a general
protection (GP) fault. The following error message appears:
<P>
<PRE>   An error has occurred in your application. If you choose
   Ignore, you should save your work in a new file. If you choose
   Close, your application will terminate.

</PRE><h2>CAUSE</h2>
 
<P>
If you have allocated an array element that includes a string or
variant data type and the size of the array exceeds 64K, you may
receive the error message described above, if the following criteria
are met:

<UL><LI>The array must be huge and span two or more data segments.

<LI>Each array element must contain at least one dynamic string or
   variant.

<LI>The number and size of the array elements must cause the last
   segment of data to be exactly the same size as the first segment of
   data.
<P>
</UL><h2>RESOLUTION</h2>
 
<P>
Declare the array so that the last data segment contains a different
number of elements from the first data segment.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in Microsoft Access versions
1.0 and 1.1. This problem no longer occurs in Microsoft Access version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Access Basic has the ability to define huge arrays, larger than the
normal 64K data segment. Any element or index of a huge array may not
extend across the 64K-segment boundary. If all elements of the array
cannot be allocated within the 64K segment, only the elements of the
array that fit evenly in the segment are allocated. Microsoft Access
then allocates another 64K segment to the array and continues to fill
the new segment with the remaining elements.
<P>
If the size of the data type defined in the array is a power of 2, the
64K segment is completely full. If the size is not a power of 2, the
segment contains wasted space, since Microsoft Access cannot place a
portion of one element in one segment and the rest of that element in
the next segment.
<P>
<P><h3>Example</h3>
 
<P>
<PRE>   Type Foosball
      A(3000) As double
      d As String
   End Type

</PRE>The size of this structure is 24,012 bytes (3000 * 8 bytes/double +
12 bytes/string). If you declare this array with three elements, you
have two data segments, as follows:
<P>
<PRE>   Data Segment  #1      Data Segment  #2
   -----------------     -----------------
   Free space 17512      Free space 41524
   Array(1)   24012      Array(3)   24012
   Array(2)   24012

</PRE>In Microsoft Access, you may receive a GP fault if the number of
elements in the first segment is equal to the number of elements in
the last segment and the data structure used to define the array is
made up of either a string or variant data type. If you define the
data structure above with six elements, your memory map looks like the
following:
<P>
<PRE>   Data Segment  #1      Data Segment  #2        Data Segment  #3
   -----------------     -----------------       -----------------
   Free space 17512      Free space 17512        Free space 17512
   Array(1)   24012      Array(3)   24012        Array(5)   24012
   Array(2)   24012      Array(4)   24012        Array(6)   24012

</PRE>The actual dimension statement looks like the following:
<P>
<PRE>   Function Sample()
      Redim Array(6) As Foosball
   End Function

</PRE>To work around this problem, declare the array so that the last data
segment does not contain the same number of elements as the first data
segment. In addition to the example above, you may choose to define
the array with seven elements instead of six. This causes Microsoft
Access to allocate four data segments, in which the first data segment
contains two elements of the array and the last data segment contains
only one element.
<P>
This example is very easy to duplicate with large data structures, but
is more difficult to duplicate with smaller data structures. With an
element size of 24,012 bytes, 4, 6, or 8 elements may cause a problem.
With a data size of 1K, numbers of elements that duplicate this
problem are 128, 192, 256, and so forth.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: GP fault GPF array<BR>
Keywords            : EvnGpf kbprg PgmOthr<BR>
Version             : 1.0 1.1<BR>
Platform            : WINDOWS<BR>
Hardware            : X86<BR>
Issue type          : kbbug<BR>
Resolution Type     : Info_Provided<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: IPF When Using Execute Method with dbFailOnError </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180348">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1998/02/02">
<META NAME="Keywords" CONTENT="MdlGnrl MdlProb EvnGpf">
<META NAME="KBArea" CONTENT="Support; KB; access, convert, crossnet, dbweb, odbc, winprint, setup, vbapp, office, officevba">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  When you run a Visual Basic for Applications procedure that uses the Execute method to update data in a Microsoft SQL Server ODBC data source, you may receive the following ...">
<META NAME="Product" CONTENT="Access">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ODBC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QATX,QAPN,QAB4,QAXB,QAH4,QAY5,QA7O,QA7N,QAKJ,QBWS,QAB9,QBD2,QAAP,QBS0 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: IPF When Using Execute Method with dbFailOnError</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180348</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
When you run a Visual Basic for Applications procedure that uses the
Execute method to update data in a Microsoft SQL Server ODBC data source,
you may receive the following error message.
<P>
<P><h3>In Microsoft Windows NT 4.0</h3>
 
<P>
<PRE>   An application error has occurred and an application error log is
   being generated.

   MSACCESS.exe
   Exception: access violation (0xc0000005)

</PRE><h3>In Microsoft Windows 95</h3>
 
<P>
<PRE>   This program has performed an illegal operation and will be shut
   down.

   When you click Details, you see the following message:

      MSACCESS caused an invalid page fault in module KERNEL32.DLL.

</PRE>However, the action originated by the Execute method is completed
successfully.
<P>
<P><h2>CAUSE</h2>
 
<P>
You receive this error message when all of the following conditions are
true:

<UL><LI>You are using the Execute method with the constant dbFailOnError.

<LI>You are updating a field with data that consists of a string longer
   than 60 characters. The length of the string that causes the error can
   vary, and you may receive the error when updating the field with a
   string longer than 45 characters.
<P>
</UL><h2>WORKAROUND</h2>
 
<P>
Create a temporary SQL pass-through query in your Visual Basic for
Applications procedure. Concatenate the text string with which you want to
update the field into the SQL statement; set the SQL property of the
QueryDef to the SQL statement. You can then use the Execute method of the
QueryDef with the constant dbFailOnError. The following example
demonstrates how to implement the procedure:

<OL><P><LI>Repeat steps 1-7 from the "Steps to Reproduce Behavior" section later in
   this article. If you link to the table in step 7, you can open the table
   later to verify that the procedure worked properly.

<P><LI>Open a new module and type the following code:
<P>
<P><PRE>      Function PassThruUpdate(strUpdateData As String)
</PRE><P>
<PRE>         Dim db As Database
         Dim qd As QueryDef
         Dim strSQLString As String
         On Error GoTo Err_PassThruUpdate
         Set db = CurrentDb
         Set qd = db.CreateQueryDef("")
         ' Modify the connect string in the following line
         ' to reflect the ODBC data source you are using.
         qd.Connect = "ODBC;DSN=sqltest;UID=sa;PWD=;DATABASE=pubs"
         strSQLString = "UPDATE tbltoSQL SET StringTest = '"
         strSQLString = strSQLString &amp; strUpdateData
         strSQLString = strSQLString &amp; "' WHERE id = 'a'"
         qd.ReturnsRecords = False
         qd.SQL = strSQLString
         qd.Execute dbFailOnError
         db.Close

      Exit_PassThruUpdate:
         Exit Function

      Err_PassThruUpdate:
         MsgBox CStr(Err) &amp; " " &amp; Err.Description
         Resume Exit_PassThruUpdate

      End Function

</PRE><P><LI>To test the sample function, type the following line in the Debug
   window, and then press ENTER:
<P>
<P><PRE>      ?PassThruUpdate(string(75,"X"))
</PRE><P>
   Note that although you are using the Execute method with the constant
   dbFailOnError, and the string with which you are updating the field is
   longer than 60 characters, you do not receive the error described in
   the "Symptoms" section.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 
<P>
<PRE>  1. Start Microsoft Access 97 and create a new blank database.

  2. Create the following table:

       Table: tblToSQL
       ----------------------
       Field Name: ID
          Data Type: Text
          Field Size: 2
       Field Name: StringTest
          Data Type: Text
          Field Size: 100

       Table Properties: tblToSQL
       --------------------------
       PrimaryKey: ID

  3. Save the table as tblToSQL and open it in Datasheet view.

  4. Enter the following data into the tblToSQL table:

       ID  FullName
       --  --------
       a   aaa
       b   bbb

  5. Close the table.

  6. Export the table to a Microsoft SQL Server database.

  7. Link to the table that you just exported. When prompted to select a
     unique record identifier, click ID, and then click OK.

  8. Open a new module and type the following code:

       Function TestExecute(intUpdateLength As Integer)

          Dim db As Database
          Dim strSQLString As String
          Dim strUpdateString As String
          strUpdateString = String(intUpdateLength, "X")
          strSQLString = "UPDATE dbo_tblToSQL SET StringTest = '" &amp; _
             strUpdateString
          strSQLString = strSQLString &amp; "' WHERE id = 'a';"
          Set db = CurrentDb
          db.Execute strSQLString, dbFailOnError
          db.Close

       End Function

  9. On the Debug menu, click Compile And Save All Modules. When prompted
     to save the module, type "modTest" (without the quotation marks) and
     then click OK.

 10. Type the following line in the Debug window, and then press ENTER:

       ?TestExecute(60)

     Note that you receive the error message described in the "Symptoms"
     section.

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information about the Execute method, search the Help Index for
"Execute method," and then display the "Execute Method (DAO)" topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Watson<BR>
Keywords          : MdlGnrl MdlProb EvnGpf<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbbug<BR>
Solution Type     : kbpending<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

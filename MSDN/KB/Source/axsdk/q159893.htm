

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Readme.txt for the ActiveX SDK (InetSDK\Bin) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q159893">
<META NAME="KBModify" CONTENT="1996/11/27">
<META NAME="KBCreate" CONTENT="1996/11/22">
<META NAME="Keywords" CONTENT="kbreadme kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  The following article contains the complete contents of the Readme.txt file distributed with the ActiveX SDK for Internet Explorer 3.01. (This is the Readme.txt installed on the \Inetsdk\Bin subdirectory.)  MORE INFORMATION  NOPROXY.REG    Quick se...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAK7,QBE7,QBE6,QAH6,QAPN,QAYZ,QAW6,QAVV,QAUJ,QBGF,QASR,QAH4,QAFI,QABH,QDNQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Readme.txt for the ActiveX SDK (InetSDK\Bin)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 27, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q159893</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft ActiveX SDK, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following article contains the complete contents of the Readme.txt file
distributed with the ActiveX SDK for Internet Explorer 3.01. (This is the
Readme.txt installed on the \Inetsdk\Bin subdirectory.)
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<PRE>NOPROXY.REG    Quick setup for INet SDK without a CERN proxy

PROXY.REG      Quick setup for INet SDK with a CERN proxy called "proxy"

MkTypLib.Exe   Unsupported build provided for this SDK.
               The official release will use MIDL.

STMTOOL.EXE    Now called ODS_TOOL.exe, Tool for creating .STM files for
               use in the &lt;OBJECT&gt; tag.


DIANTZ.EXE     Now called Diamond.exe, included in CABDevKt.exe.

</PRE>SHOW SCRIPT ERRORS.REG
<PRE>               Registry settings to enable reporting of script errors
               in Internet Explorer. By default, the browser displays
               a dialog when it encounters an error parsing or running
               a script on a page. The dialog contains a checkbox
               (on by default) for disabling the reporting of additional
               errors on the same  page.


</PRE><h2>Signing code for download</h2>
 
<P>
<P><h3>Introduction</h3>
 
<P><h3>Document Overview</h3>
 
This guide presents general information about how to use the tools provided
with IE30 to generate and use cryptographic certificates with IE30. It does
not attempt to provide an in-depth discussion of public key cryptography,
X.509 certificates, or certification policy. See the recommended reading
list for suggested books and documents that will help you understand those
and other background issues.
<P>
Following this introduction, this guide is divided into the following
sections:
<P>
- Terminology
<P>
<PRE> Describes the terms used in this document that may be new to you.

</PRE>- Procedural Overview
<P>
This section gives a brief description of each step of the signing
procedure and an example of how it would be used by walking through a
sample session from start to finish.
<P>
- Required Files List
<P>
- Recommended Reading
<P>
<P><h3>Terminology</h3>
 
X.509 Certificate - A cryptographic certificate that associates an entity's
name with its public key.
<P>
PKCS 7 "SIGNED DATA" - A widely used convention for containing the data
used to sign an image or a document, typically including the certificate of
the signer and a statement about the image made by the signer.
<P>
WIN_CERTIFICATE - A new Win32 defined data structure that contains either a
PKCS 7 signed data object or an X.509 Certificate.
<P>
Certification Authority (CA) - An entity that is making a statement
(represented by an X.509 Certificate) about the authenticity of some other
certificate.
<P>
SPC - Software Publishing Certificate. A statement that the recipient is an
approved software vendor, represented as an X.509 certificate.
<P>
PE Image - Portable Executable Image, the standard Win32 executable format.
<P>
Trust provider - A part of the operating system that verifies whether or
not a given image is trusted based on the certificates it contains.
<P>
<P><h3>Procedural Overview</h3>
 
We will now walk through an example of how to sign an image. Assume we are
going to sign an image named Image.exe.
<P>
This procedure is meant to illustrate the steps involved in signing an
image file. Since creating a verifiable certificate assumes the existence
of a fairly complex CA infrastructure, it is not possible to provide all of
the pieces necessary for a fully trustworthy signature at this time. In
particular, there does not exist a "top-level" certifying authority, which
would ultimately vouch for the integrity of the entire certificate chain.
Since such a top-level authority is a necessary part of the signing and
verification operations, the toolkit provided will create a pseudo top-
level entity when necessary. This will be called the root authority or root
key.
<P>
The present tools therefore allow any user of this development release to
authorize themselves as a "Software Publisher" for test purposes and to
sign their code, allowing for extensive testing of the tools and code used
but not actually providing a secure infrastructure. In future releases, the
tools will require software publishers to obtain certificates from
companies whose function is to verify the identity of the publishers,
providing end-users with a high level of assurance about the authenticity
and origin of code that they receive.
<P>
This sample root key will be used to generate an SPC (Software Publishing
Certificate), which is used to actually sign image files.
<P>
<P>
1) The first step is to run the MakeCert utility. MakeCert will perform the
following tasks:
<P>
- Create the end-user's public/private keypair suitable for digital
signatures, and associate the keypair with a friendly name.
<P>
- Associate the new keypair with an X.500 Distinguished Name, and
<P>
- Create an X.509 certificate signed by the root key that binds your name
to the public part of the newly created keypair.
<P>
A typical invocation of MakeCert is as follows:
<P>
c:\&gt;makecert -u:MyKey -n:CN=MySoftwareCompany Cert.cer
<P>
Cert.crt now contains an X.509 certificate that binds your newly created
key with your name. This certificate is itself signed by the example root
key described above.
<P>
A public key/private key pair will be generated and assigned the name
specified in the "-u" switch, or if such a key already exists, it will be
re-used.
<P>
Note that the name must be of the form "CN=[name-string]", as required by
the ITU x.509 standard.
<P>
2) The next step is to wrap the X.509 certificate created in step 1 into a
PKCS 7 signed-data object. PKCS 7 objects are commonly used as "carriers"
for X.509 certificates, because it is possible to put several X.509
certificates in a single PKCS 7 object.
<P>
In addition to the users's certificate, the root certificate will also be
inserted into the PKCS 7 object. This will allow passing around the entire
certificate chain in a single container.
<P>
Do this with the Cert2SPC utility, as follows:
<P>
c:\&gt;Cert2SPC Root.cer Cert.cer Cert.spc
<P>
Cert.spc now contains the Software Publishing Certificate in the correct
format.
<P>
3) The next step is to use the certificate just created to sign an actual
image file. Do this with the SignCode tool. It takes as input the Cert.spc
file created in step 2, the name of the key pair created in step 1, and the
name of the image file to sign.
<P>
SignCode will perform the following tasks:
<P>
- Create a cryptographic digest of the passed image file.
<P>
- Sign the digest with the passed private key information.
<P>
- Extract the X.509 certificates from the passed Cert.spc file.
<P>
- Create a new PKCS 7 signed-data object containing the serial number of
the passed X.509 certificate and the signed digest information.
<P>
- Embed the PKCS 7 object into the passed image file.
<P>
c:\&gt;SignCode -prog image.exe -spc cert.spc -pvk MyKey
<P>
If SignCode is successful, image.exe will have a PKCS7 certificate embedded
in it. Verify this by running PeSigMgr.exe on the image:
<P>
c:\&gt;PeSigMgr -l image.exe
<P>
<PRE>  Certificate   0 Revision 256 Type    PKCS7

</PRE>4) Now, check the validity of the image. Do this with the ChkTrust utility.
<P>
c:\&gt;ChkTrust image.exe
<P>
ChkTrust performs the following tasks:
<P>
- Extract the PKCS 7 signed data object from the image.
<P>
- Extract the X.509 certificates from the PKCS 7 object.
<P>
- Compute a new cryptographic checksum of the image file and compare it
with the signed checksum in the PKCS 7 object.
<P>
- If the image checks out, validate that the signer's X.509 certificate
points back to the root certificate, and that the root key used was
correct.
<P>
If all this succeeds, the system has verified that the image has not been
tampered with, and that whoever published this piece of software was
authorized to do so by the root authority.
<P>
<P><h3>List of Required Files</h3>
 
<PRE>WINTRUST.DLL   (In System/System32 directory)
DIGSIG.DLL     (In System/System32 directory)
</PRE>MAKECERT.EXE
CERT2SPC.EXE
SIGNCODE.EXE
PESIGMGR.EXE
CHKTRUST.EXE
ROOT.CER
ROOT.PVK
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbreadme kbhowto<BR>
KBSubcategory:<BR>
Additional reference words: 1.00 kbdsi
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 27, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

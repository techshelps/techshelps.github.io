

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Implementing IObjectSafety in an ActiveX Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q164119">
<META NAME="KBModify" CONTENT="1998/01/19">
<META NAME="KBCreate" CONTENT="1997/02/24">
<META NAME="Keywords" CONTENT="AXSDKControls AXSDKSripting kbfile kbprg">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  This sample shows the modifications that can be made to an MFC-based ActiveX control to indicate that the control is safe for scripting and safe to initialize from persistent data.  The following file is available for download from the Microsoft So...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QAHV,QBWA,QAPF,QDNQ,QBVV,QAPN,QBBS,QAH4,QA6A,QABI,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Implementing IObjectSafety in an ActiveX Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q164119</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<P>
 
The information in this article applies to:

<UL><LI>Microsoft ActiveX SDK, version 1.0
<LI>Microsoft Internet Client SDK, versions 4.0, 4.01
<LI>Microsoft Visual C++, 32-bit Editions, versions 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This sample shows the modifications that can be made to an MFC-based
ActiveX control to indicate that the control is safe for scripting and safe
to initialize from persistent data.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Safectl.exe">Safectl.exe</A> <I>(size: 65017 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services


</PRE><h2>MORE INFORMATION</h2>
 
<P>
Internet Explorer 3.0 (IE3) allows users to add code in the form of ActiveX
controls to their Web pages. The &lt;OBJECT&gt; tag is used to specify a control.
Once a control is instantiated, its attributes can be set through the
control’s persistence interfaces. For example, for each &lt;PARAM&gt; tag IE3
encounters within the context of an &lt;OBJECT&gt; tag while parsing an HTML
page, IE3 passes a property bag through the corresponding control’s
IPersistPropertyBag interface. Furthermore, the behavior of a control can
be customized through the use of scripts embedded in the page that execute
the methods and modify the properties exposed through the control’s
automation interface.
<P>
Authenticode code signing technology allows end-users to identify who
published the code and to verify that no one has tampered with that code
since it was signed. It does not guarantee that the code is safe when its
properties are initialized with untrusted values or when its automation
model is driven by untrusted scripts. To avoid such potential security
hazards, the default IE3 security settings, which are accessible via the
Security tab of the IE3 Options property sheet, require that a control
register itself as implementing the appropriate component categories or
that the control implement the IObjectSafety interface. The sample
illustrates both.
<P>
Before it sets the properties of a control embedded in an HTML page, IE3
queries the control for IObjectSafety. If supported, IE3 then calls the
SetInterfaceSafetyOptions on this interface passing the value
INTERFACESAFE_FOR_UNTRUSTED_DATA as well as the interface identifier (IID)
of a persistence interface. On HTML pages today, where properties tend to
be initialized via the &lt;PARAM&gt; tag, the IID is IID_IPersistPropertyBag. The
IID is provided for situations where you might want to be safe on some
interfaces but not on others, and in this example that is unimportant. The
sample implementation merely checks to make sure that the interface is
supported. If the control can do no harm to the client's system regardless
of the data with which it may be initialized through that persistence
interface and that persistence interface is supported, the control's
implementation of IObjectSafety::SetInterfaceSafetyOptions should return
S_OK. Otherwise, E_FAIL should be returned.
<P>
Before allowing any scripts embedded in the page to be run, IE3 similarly
calls through the control’s IObjectSafety:: SetInterfaceSafetyOptions but
instead passes the value INTERFACESAFE_FOR_UNTRUSTED_CALLER and the IID of
some scripting interface, which typically is IID_IDispatch. The control
should return S_OK or E_FAIL appropriately.
<P>
If the control does not support IObjectSafety, IE3 uses the component
categories manager to see if the control implements the safe for
initialization category, CATID_SafeForInitializing and the safe for
scripting category, CATID_SafeForScripting, respectively.
<P>
If the control does not support IObjectSafety and has not registered itself
as implementing the appropriate component categories, and the IE3 safety
level is set to high, the default, IE3 will not initialize the control’s
properties, nor will it execute any scripts embedded in the page. In this
scenario, end users will encounter a dialog box containing the following
text:
<P>
<PRE>   Potential safety violation avoided
   This page contains active content that is not verifiably safe to
   display. To protect your computer, this content will not be displayed.

</PRE>How does a developer determine that their control is safe? The following is
a list of guidelines taken from Paul Johns' article on signing and marking
ActiveX controls (see the REFERENCES section below):

<UL><LI>The control does not manipulate the file system.

<LI>The control does not manipulate the registry (except to register and
   unregister itself).

<LI>The control does not overindex arrays or otherwise manipulate memory
   incorrectly.

<LI>The control validates (and corrects) all input, including
   initialization, method parameters, and property set functions.

<LI>The control does not misuse any data provided by the user or
   about that user.

<LI>The control was tested in a variety of scenarios.
<P>
</UL>If a control author has verified that the above criteria have been met in
addition to any others they can think of, they should consider supporting
both IObjectSafety and registering their control as implementing the
appropriate component categories. For a discussion of the advantages and
disadvantages of each of these methods, see the corresponding section in
Paul Johns' signing and marking article cited below.
<P>
<P><h3>To Compile</h3>
 
<P>
Building the sample requires Microsoft Visual C++ version 5.0. Once the
files are extracted from the archive, load the project Safectl.dsw into
Microsoft Developer Studio and build the project. As part of the build
process, the control should register itself.
<P>
WARNING: Before modifying the sample through the manipulation of the two
pre-processor symbols mentioned below, you will need to unregister the
control if it has been built or registered on the machine already. This can
be done by running Regsvr32.exe with the /u switch for your control. You
can also add a custom tool entry in Developer Studio that will do this for
the current project. From the Tools menu, click customize and then select
the Tools tab. Create a new entry with the following information:
<P>
<PRE>                Name: &amp;Un-register ActiveX Control
             Command: e:\Program Files\DevStudio\SharedIDE\BIN\REGSVR32.EXE
           Arguments: /u /v "$(TargetPath)"
   Initial Directory: $(TargetDir)

</PRE>At this point you can use the "tools/Un-register ActiveX Control" entry to
unregister your control before adding or removing the sample specific
preprocessor definitions.
<P>
To build the control so that it registers itself as implementing the safe
for initializing and safe for scripting component categories, use the
following steps:

<OL><P><LI>From the Project menu choose Settings.

<P><LI>Under the C++ tab define the following preprocessor definition:
<P>
<P><PRE>      L_USE_COMCAT
</PRE>
<P><LI>Close the Settings dialog box by clicking OK, and rebuild the control.
<P>
</OL>To build the control so that it instead implements IObjectSafety, follow
the previous steps, but replace L_USE_COMCAT with L_IMPL_OBJECTSAFETY.
<P>
It is also valid to define both pre-processor symbols. Observe that these
symbols are specific to this project. By default, the build settings of the
project define both pre-processor symbols.
<P>
<P><h3>To Run</h3>
 
<P>
Once the sample control has been built and has been registered
successfully, launch IE3 and load the page, Safectl.htm, which is included
with the sample.
<P>
If the control has been configured to register itself as safe or implement
IObjectSafety, the controls caption should read "Safe for initializing!"
Clicking on the control should yield a message box that reads "I must be
safe for scripting!" Otherwise, with IE3 set to its highest safety setting
the caption reads "NOT safe for initializing!" and clicking on the control
does not produce a message box since the associated script does not
execute.
<P>
NOTE: If you are building and testing different configurations of this
sample, make sure that you refresh the Web page in the browser or you may
be using the cached version of the control instead of the latest build.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on the Safety APIs, see the Safety API reference in
the ActiveX SDK online documentation.
<P>
For more information on code signing, see Signing with Microsoft
Authenticode Technology in the ActiveX SDK online documentation.
<P>
For more information on Component Categories, see the Component Categories
topic in the ActiveX SDK online documentation.
<P>
For additional information on implementing a Component Object Model (COM)
interface in MFC, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q141277.htm">Q141277</A></B>
   TITLE     : How to Override an Interface in an MFC Application

</PRE></OL>For in depth coverage on developing an ActiveX control and deploying it on
the Web, see Paul Johns' article "The ABCs of MFC ActiveX Controls." For
topics relevant to this discussion see his companion article "Signing and
Marking ActiveX Controls."
<P>
<PRE>   <B><A HREF="http://microsoft.com/intdev/controls/stoplite">http://microsoft.com/intdev/controls/stoplite</A></B>
   <B><A HREF="http://microsoft.com/intdev/controls/signmark-f.htm">http://microsoft.com/intdev/controls/signmark-f.htm</A></B>

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: SAFE SAFETY SOFTLIB<BR>
Keywords          : AXSDKControls AXSDKSripting kbfile kbprg<BR>
Version           : 1.0,4.01,4.10,4.20<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbfile<BR>
Solution Type     : kbsample<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

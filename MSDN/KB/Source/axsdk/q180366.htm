

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Determine When a Page Is Done Loading in WebBrowser Ctrl </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180366">
<META NAME="KBModify" CONTENT="1998/02/05">
<META NAME="KBCreate" CONTENT="1998/02/02">
<META NAME="Keywords" CONTENT="AXSDKWebBrowser">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  The Internet Explorer WebBrowser control fires the DocumentComplete event when it is finished downloading a Web page. You can create a event handler function in your application for this event. This article describes the steps to take in determinin...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWA,QAPN,QAIA,QAIB,QAO4,QAB5,QABH,QABI,QAO0,QA7O,QAOE,QAMN,QAMH,QAVZ,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Determine When a Page Is Done Loading in WebBrowser Ctrl</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180366</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Internet Client SDK, versions 4.0, 4.01
<LI>Microsoft Internet Explorer (Programming), versions 4.0, 4.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Internet Explorer WebBrowser control fires the DocumentComplete event
when it is finished downloading a Web page. You can create a event handler
function in your application for this event. This article describes the
steps to take in determining if a the WebBrowser control is finished
downloading a Web page.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The WebBrowser control fires the DocumentComplete event when its ReadyState
property is changed to READYSTATE_COMPLETE. This indicates that the
WebBrowser control has completed downloading the Web page. Here are some
important points regarding this event:

<UL><LI>In the case of a page with no frames, DocumentComplete is fired once
   after everything is done.

<LI>In case of multiple frames, DocumentComplete gets fired multiple times.
   Not every frame fires this event, but each frame that fires a
   DownloadBegin event fires a corresponding DocumentComplete event.

<LI>The DocumentComplete event has a IDispatch* parameter, which is the
   IDispatch of the frame (shdocvw) for which DocumentComplete is fired.

<LI>The top-level frame fires the DocumentComplete in the end. So,
   to check if a page is done downloading, you need to check if the
   IDispatch* parameter is same as the IDispatch of the WebBrowser control.
<P>
   For Visual Basic, here is code that performs this check:
<P>
<P><PRE>      Private Sub WebBrowser1_DocumentComplete(ByVal pDisp As Object,
<PRE></PRE>                                               URL As Variant)
         If (pDisp Is WebBrowser1.Object) Then
            Debug.Print "Web document is finished downloading"
         End If
      End Sub

</PRE></UL>To handle the DocumentComplete event in Visual C++ and determine if the
download of the Web page is complete, follow these steps.
<P>
NOTE: These steps are done for you automatically if you add a handler for
the DocumentComplete event using the Class Wizard that comes with Visual
C++. The only code that you will have to add is what is given in the
OnDocumentComplete function:

<OL><P><LI>Define the OnDocumentComplete method in the header file for you CView-
   derived class:
<P>
<P><PRE>      afx_msg void OnDocumentComplete(LPDISPATCH lpDisp,
<PRE></PRE>                                      VARIANT FAR* URL);

</PRE><P><LI>Declare the event sink in the same header file:
<P>
<P><PRE>      DECLARE_EVENTSINK_MAP()
</PRE>
<P><LI>In the implementation file (.cpp) for your CView-derived class,
   implement the event sink map:
<P>
<P><PRE>      BEGIN_EVENTSINK_MAP(CYourView, CView)
<PRE></PRE>         ON_EVENT(CWBTstView, ID_WEB_BROWSE, 259 /* DocumentComplete */,
                  OnDocumentComplete, VTS_DISPATCH VTS_PVARIANT)
      END_EVENTSINK_MAP()

</PRE><P><LI>Implement the OnDocumentComplete method:
<P>
<P><PRE>      void CWBTstView::OnDocumentComplete(LPDISPATCH lpDisp,
<PRE></PRE>                                          VARIANT FAR* URL)
      {
         IUnknown*  pUnk;
         LPDISPATCH lpWBDisp;
         HRESULT    hr;

         pUnk = m_webBrowser.GetControlUnknown();
         ASSERT(pUnk);

         hr = pUnk-&gt;QueryInterface(IID_IDispatch, (void**)&amp;lpWBDisp);
         ASSERT(SUCCEEDED(hr));

         if (lpDisp == lpWBDisp )
         {
            // Top-level Window object, so document has been loaded
            TRACE("Web document is finished downloading\n");
         }

        lpWBDisp-&gt;Release();
        pUnk-&gt;Release();
      }

</PRE></OL>This approach works when the WebBrowser control navigates to a page that
changes the top-level frame. Say if the navigation occurs within a frame
itself, then the final DocumentComplete that is fired is that of the frame
and not the top-level frame. For example, consider the following scenario.
<P>
The WebBrowser control is hosting a frameset. Within one frame of the
frameset, the user clicks on a link that opens a new page in the frame
itself and keeps the rest of the frameset intact. The new page could
contain multiple frames again. So, there will be multiple DocumentComplete
notifications (one for each new frame). But, since the top-level frame has
not changed, the final DocumentComplete would be that of the frame that has
changed.
<P>
If you are interested in checking for the final document complete in this
scenario, you could do the following:

<UL><LI>Check if the IDispatch parameter of the DocumentComplete is the same as
   the IDispatch parameter of first NavigateComplete2 event. Since the
   first NavigateComplete2 is of the top-level frame and the last
   DocumentComplete is also of the top-level frame, doing a comparison in
   such a fashion will tell whether the page is done downloading.
<P>
</UL>Here is some sample C++ code:
<P>
<PRE>   LPDISPATCH glpDisp = NULL; // global LPDISPATCH, can also
                              // be of class scope

   // NavigateComplete2 event
   void CWebbrDlg::OnNavigateComplete2Explorer1(LPDISPATCH pDisp,
                                                VARIANT FAR* URL)
   {
      // Check if glpDisp is NULL. If NULL, that means it is
      // the top level NavigateComplete2. Save the LPDISPATCH
      if (!glpDisp)
         glpDisp = pDisp;
   }

   void CWebbrDlg::OnDocumentCompleteExplorer1(LPDISPATCH pDisp,
                                               VARIANT FAR* URL)
   {
      if (glpDisp &amp;&amp; glpDisp == pDisp)
      {
         // if the LPDISPATCH are same, that means
         // it is the final DocumentComplete. Reset glpDisp
         TRACE("Document is done downloading");
         glpDisp = NULL;
      }
   }


</PRE><h2>REFERENCES</h2>
 
<P>
Internet Client SDK Help (<B><A HREF="http://www.microsoft.com/msdn/sdk/inetsdk/help/);">http://www.microsoft.com/msdn/sdk/inetsdk/help/);</A></B>
Search on: "Reusing the WebBrowser Control" in the "Internet Tools and
Technologies" section.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: DocumentComplete<BR>
Keywords          : AXSDKWebBrowser<BR>
Technology        : kbinetdev internet<BR>
Version           : WINDOWS:4.0,4.01<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

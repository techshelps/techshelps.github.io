

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Calling WinVerifyTrust and Authenticating Files </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165021">
<META NAME="KBModify" CONTENT="1998/01/19">
<META NAME="KBCreate" CONTENT="1997/03/11">
<META NAME="Keywords" CONTENT="AXSDKCodeSign kbprg kbsample">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  This sample demonstrates how to programmatically authenticate files using the WinVerifyTrust function. This allows a programmer to verify whether a file is signed and allows a user to trust or not trust the signing authority.  The following file is...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4R,QA4S,QAUD,QAI4,QA6A,QAYZ,QAGI,QBVV,QAPF,QAO0,QAH4,QAEV,QAY5,QAY2,QAVX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Calling WinVerifyTrust and Authenticating Files</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165021</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft ActiveX SDK, version 1.0
<LI>Microsoft Internet Client SDK, versions 4.0, 4.01
<LI>Internet Explorer (Programming), versions 4.0, 4.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This sample demonstrates how to programmatically authenticate files using
the WinVerifyTrust function. This allows a programmer to verify whether a
file is signed and allows a user to trust or not trust the signing
authority.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/VFiles.exe">VFiles.exe</A> <I>(size: 57247 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
This sample is written with visual C++ 4.2b and requires the supporting
MFC DLLs.
<P>
If you do not want to install and run the sample, the following function
is all that you really need to illustrate how to call the WinVerifyTrust
function. If you are not using MFC, you need to substitute several small
details (CString, method of obtaining file name, etc.) with code
appropriate to your framework.
<P>
<PRE>   #include &lt;afxpriv.h&gt; // Needed for CONVERSION macros.

   void CGetHttpFileView::OnGitAndVerify()
   {
       USES_CONVERSION;

       CString message;

       typedef HRESULT
           (WINAPI *WINVERIFYTRUST)
               (HWND hwnd, GUID *ActionID, LPVOID ActionData);

       #define WINTRUST "wintrust.dll"

       WINVERIFYTRUST pwvt = NULL;
       HINSTANCE hinst;

       // Load wintrust.dll and locate the WinVerifyTrust function.

       if(hinst = LoadLibrary(WINTRUST))
           pwvt = (WINVERIFYTRUST)GetProcAddress(hinst,
   _T("WinVerifyTrust"));
       else
           return;

       if(NULL == pwvt)
       {
           FreeLibrary(hinst);
           return;
       }

       // Get the name of the file (m_strHttpFile) to test from the dialog
       // box.
       UpdateData(TRUE);

       TCHAR lpFileName[MAX_PATH];

       m_ctlStatusEdit.SetWindowText(_T("Loading File"));

       // It would make sense to put a Cancel button on the form to abort
       // long downloads. In fact, URLDownloadToCacheFile is a blocking
       // call so the button would be dead until the download is complete.

       // It is not necessary to use URLDownloadToCacheFile to
       // download the file.

       HRESULT hr = URLDownloadToCacheFile(NULL, m_strHttpFile,
         lpFileName, MAX_PATH, 0, m_pBindStatusCallback);

       if(FAILED(hr))
       {
           message.Format("Failed to Locate file.  Error: %X", hr);
           m_ctlStatusEdit.SetWindowText(message);
           FreeLibrary(hinst);
           return;
       }

       // Now verify the file.

       // For now, it is necessary to define this.
       #define WIN_SPUB_ACTION_PUBLISHED_SOFTWARE_NOBADUI         {
   0xc6b2e8d0, 0xe005, 0x11cf,             { 0xa1, 0x34, 0x0, 0xc0, 0x4f,
   0xd7, 0xbf, 0x43 } }

       GUID PublishedSoftware =
               WIN_SPUB_ACTION_PUBLISHED_SOFTWARE;
       GUID PublishedSoftwareNoBadUI =
               WIN_SPUB_ACTION_PUBLISHED_SOFTWARE_NOBADUI;

       // See winbase.h for available Subject Type Identifiers.
       GUID SubjectPeImage = WIN_TRUST_SUBJTYPE_PE_IMAGE;
       GUID SubjectCAB      = WIN_TRUST_SUBJTYPE_CABINET;
       GUID SubjectJava    = WIN_TRUST_SUBJTYPE_JAVA_CLASS;

       GUID * ActionGUID;

       if(0 == m_nUIOnBadVerification)
           ActionGUID = &amp;PublishedSoftware;
       else
           ActionGUID = &amp;PublishedSoftwareNoBadUI;

       WIN_TRUST_SUBJECT_FILE Subject;

       Subject.lpPath = T2OLE(lpFileName);
       // If hFile is set to the value INVALID_HANDLE_VALUE (defined in
       // WINBASE.H), then the trust provider will open the subject using
       // the lpPath field.
       Subject.hFile = INVALID_HANDLE_VALUE;

       // For now, WIN_TRUST_ACTDATA_SUBJECT_ONLY is not used.
       WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT ActionData;

       ActionData.Subject = &amp;Subject;
       ActionData.hClientToken = NULL;

       switch(m_nFileType)
       {
       case 0:
           ActionData.SubjectType = &amp;SubjectPeImage;
           break;
       case 1:
           ActionData.SubjectType = &amp;SubjectJava;
           break;
       case 2:
           ActionData.SubjectType = &amp;SubjectCAB;
       }

       hr =  pwvt( 0, ActionGUID, &amp;ActionData);

       // hr will tell you if the user accepted the certificate.
       // return codes include S_OK (user accepted),
       // TRUST_E_NOSIGNATURE (no certificate at all -- includes test
       // certificates!), etc.

       message.Format("WinVerifyTrust Returned Error: %X", hr);
       m_ctlStatusEdit.SetWindowText(message);

       FreeLibrary(hinst);
       return;
   }

</PRE>(c) Microsoft Corporation 1996, All Rights Reserved.
Contributions by Robert Duke, Microsoft Corporation
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: URLDownloadToCacheFile<BR>
WIN_SPUB_ACTION_PUBLISHED_SOFTWARE_NOBADUI wintrust.dll<BR>
Keywords          : AXSDKCodeSign kbprg kbsample<BR>
Version           : Win:1.0,4.01<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfile<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Automate Internet Explorer to POST Form Data </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167658">
<META NAME="KBModify" CONTENT="1998/01/19">
<META NAME="KBCreate" CONTENT="1997/04/28">
<META NAME="Keywords" CONTENT="kbinterop kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  An automation controller such as Microsoft Visual Basic can automate Internet Explorer (IE) to send data using the POST method to an HTTP server such as Internet Information Server (IIS). This article demonstrates how to automate IE to perform a PO...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALZ,QBS0,QAGI,QAYY,QBV9,QAFZ,QAUD,QAPN,QAVZ,QDNQ,QBV4,QAY2,QA3N,QAHP,QAMB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Automate Internet Explorer to POST Form Data</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167658</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft ActiveX SDK, version 1.0
<LI>Internet Client SDK, versions 4.0, 4.01
<LI>Microsoft Internet Explorer (Programming), versions 3.0, 3.01, 3.02,
   4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An automation controller such as Microsoft Visual Basic can automate
Internet Explorer (IE) to send data using the POST method to an HTTP server
such as Internet Information Server (IIS). This article demonstrates how to
automate IE to perform a POST of form data from Visual Basic and from a
simple Visual C++ application. While the examples illustrate automation of
the whole Internet Explorer application, the same techniques can be applied
to the Web Browser ActiveX control when it is hosted in an application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Several methods are available for sending data to an HTTP server. GET and
POST are currently the most common. POST is typically used to submit form
data to an HTTP server when that data exceeds the maximum allowable
transfer using the GET method. This limit is typically 2K.
<P>
IE exposes the IWebBrowser(App) interface to automation controllers. The
IWebBrowser(App) interface exposes a Navigate method. In interface
definition language (IDL) syntax (a universal representation from which
both the Visual Basic and Visual C++ syntax is derived), the Navigate
method looks like the following:
<P>
<PRE>   HRESULT Navigate([in] BSTR URL, [in] VARIANT* Flags,
                [in] VARIANT* TargetFrameName, [in] VARIANT* PostData,
                [in] VARIANT* Headers);

</PRE>For the purposes of performing a POST, only the URL, PostData, and Headers
parameters are relevant. See the Internet Client SDK documentation for
information on the other parameters.
<P>
To call Navigate and POST form data to an HTTP server, the URL parameter
must specify a valid address, the PostData parameter must contain a
SAFEARRAY of bytes, and the Headers parameter must contain a BSTR that
contains the following HTTP header:
<P>
<PRE>   Content-Type: application/x-www-form-urlencoded

</PRE>This header indicates that the data being posted is encoded according to
the rules specified in the HTML specification.
<P>
Internet Explorer versions 3.0, 3.01, and 3.02 do not support posting data
to an HTTP server via the Navigate method. WinInet and URL Monikers are two
possible alternatives. For more information on WinInet and Monikers, see
the REFERENCES section of this article.
<P>
Note that the Internet Explorer Script Object Model object "window" has a
"navigate" method as well. This navigate method will only accept a URL and
cannot be used to POST data to a web server.
<P>
To test the examples below, the following Active Server Page (ASP) should
be saved to the file NAVPOST.ASP in a directory on an NT 4.0 server
running Internet Information Server (IIS) version 3.0. The directory
should be recognized by IIS as a virtual root with execute permission:
<P>
<PRE>   &lt;HTML&gt;
   &lt;%
   cFlavor = Request("Flavor")
   cName = Request("FName")
   %&gt;
   &lt;BODY&gt;
   Hello, &lt;% =cName %&gt;. &lt;br&gt;
   One scoop of &lt;% =cFlavor %&gt; coming right up!
   &lt;/BODY&gt;
   &lt;/HTML&gt;

</PRE><h3>Visual Basic</h3>
 
<P>
To demonstrate a POST in Visual Basic, perform the following steps:

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default. Add the following controls to Form1:
<P>
<PRE>   Object                     Name                  Caption
   -------------------------------------------------------------------

   Label                      lblName                First Name
   Label                      lblFlavor              Flavor
   CommandButton              cmdSubmit              Submit

   ComboBox                   cboFlavor
   TextBox                    txtName
   TextBox                    edtPostData

   (edtPostData should be multi-line and have scroll bars)

</PRE><P><LI>Invoke "References" from the Project menu and add a reference to the
   project for "Microsoft Internet Controls" (SHDOCVW.DLL). Make sure this
   is done from the References dialog and not just from the Components
   dialog.

<P><LI>Insert the following code in the General Declarations section:
<P>
<P><PRE>      Dim g_oIE As InternetExplorer ' Global reference to an
<PRE></PRE>                                    ' instance of IE
      Private Sub cmdSubmit_Click()
      edtPostData.Text = ""  ' Initialize an edit box for testing
      ReDim aByte(0) As Byte ' Array of bytes to hold data to post

      ' Extract the URL encoded data from the UI,
      ' and pack it into an array of bytes
      cFlavor = cboFlavor.List(cboFlavor.ListIndex)
      cParamName = "FName="
      cParamFlavor = "Flavor="
      cSeparator = "&amp;"
      cPostData = cParamName &amp; txtName.Text _
         &amp; cSeparator &amp; cParamFlavor &amp; cFlavor
      PackBytes aByte(), cPostData

      ' For testing, rebuild the POST data and stuff
      ' it into an edit box
      For i = LBound(aByte) To UBound(aByte)
          edtPostData = edtPostData + Chr(aByte(i))
      Next

      Dim vPost As Variant
      vPost = aByte ' Assign the byte array to a VARIANT
      Dim vFlags As Variant
      Dim vTarget As Variant
      Dim vHeaders As Variant
      vHeaders = _
         "Content-Type: application/x-www-form-urlencoded" _
         + Chr(10) + Chr(13)

      ' You're done. Now call Navigate
      ' Note: modify path to server as appropriate
      g_oIE.Navigate "<B>http://&lt;server&gt;/scripts/navpost.asp</B>", _
         vFlags, vTarget, vPost, vHeaders

      End Sub

      Private Sub Form_Load()
      ' Create an instance of IE
      Set g_oIE = New InternetExplorer
      g_oIE.Visible = True

      ' Populate a combobox with some flavor choices
      cboFlavor.List(0) = "Vanilla"
      cboFlavor.List(1) = "Chocolate"
      cboFlavor.List(2) = "Strawberry"
      cboFlavor.ListIndex = 0 ' The default choice
      End Sub

      ' Utility function to pack the data to post into an array of bytes
      Private Sub PackBytes(ByteArray() As Byte, ByVal PostData As String)
      iNewBytes = Len(PostData)
      If iNewBytes = 0 Then
         Exit Sub
      End If
      iCursize = UBound(ByteArray) - LBound(ByteArray)
      ReDim Preserve ByteArray(iNewBytes + iCursize)
      For i = 1 To iNewBytes
         ch = Mid(PostData, i, 1)
         If ch = Space(1) Then
            ch = "+"
         End If
         ByteArray(i + iCursize - 1) = Asc(ch)
      Next
      End Sub

</PRE><P><LI>Modify the URL in the call to Navigate as appropriate, close all
   running instance of IE, and choose Start from the Run menu.

<P><LI>Enter your name in the first name textbox, choose a flavor, and click
   the Submit command button. The data from the Visual Basic form will be
   posted to the HTTP server and the response will appear in the visible
   browser window.
<P>
</OL><h3>Visual C++</h3>
 
<P>
To demonstrate a POST in Visual C++, perform the following steps:

<OL><P><LI>Ensure that the ActiveX or Internet Client SDK is installed.

<P><LI>Launch Visual C++, and create a new Win32 console project.

<P><LI>Create a new text document, and add the following code:
<P>
<P><PRE>      #include &lt;windows.h&gt;
      #define INITGUID
      #include &lt;initguid.h&gt;
      #include &lt;exdisp.h&gt;
      #include &lt;memory.h&gt;
</PRE><P>
<P><PRE>      HRESULT GetPostData(LPVARIANT pvPostData);
</PRE><P>
<P><PRE>      void main()
      {
<PRE></PRE>         HRESULT hr;
         IWebBrowserApp* pWBApp = NULL; // Derived from IWebBrowser
         BSTR bstrURL = NULL, bstrHeaders = NULL;
         VARIANT vFlags = {0},
            vTargetFrameName = {0},
            vPostData = {0},
            vHeaders = {0};

         if (FAILED(hr = CoInitialize(NULL)))
         {
            return;
         }

         if (FAILED(hr = CoCreateInstance(CLSID_InternetExplorer,
            NULL,
            CLSCTX_SERVER,
            IID_IWebBrowserApp,
            (LPVOID*)&amp;pWBApp)))
         {
            goto Error;
         }

         bstrURL = SysAllocString(L"<B>http://&lt;server&gt;/scripts/navpost.asp</B>");
         if (!bstrURL)
         {
            goto Error;
         }

         bstrHeaders = SysAllocString(
            L"Content-Type: application/x-www-form-urlencoded\r\n");
         if (!bstrHeaders)
         {
            goto Error;
         }

         V_VT(&amp;vHeaders) = VT_BSTR;
         V_BSTR(&amp;vHeaders) = bstrHeaders;

         hr = GetPostData(&amp;vPostData);
         hr = pWBApp-&gt;Navigate(bstrURL, &amp;vFlags,
                  &amp;vTargetFrameName, &amp;vPostData, &amp;vHeaders);
         pWBApp-&gt;put_Visible(VARIANT_TRUE);

      Error:
         if (bstrURL) SysFreeString(bstrURL);
         if (bstrHeaders) SysFreeString(bstrHeaders);
         VariantClear(&amp;vPostData);
         if (pWBApp) pWBApp-&gt;Release();
         CoUninitialize();
      }

      // Pack some data into a SAFEARRAY of BYTEs. Return in a VARIANT
      HRESULT GetPostData(LPVARIANT pvPostData)
      {
         HRESULT hr;
         LPSAFEARRAY psa;
         LPCTSTR cszPostData = "FName=Matt&amp;Flavor=Mocha+Chip";
         UINT cElems = lstrlen(cszPostData);
         LPSTR pPostData;

         if (!pvPostData)
         {
            return E_POINTER;
         }

         VariantInit(pvPostData);

         psa = SafeArrayCreateVector(VT_UI1, 0, cElems);
         if (!psa)
         {
            return E_OUTOFMEMORY;
         }

         hr = SafeArrayAccessData(psa, (LPVOID*)&amp;pPostData);
         memcpy(pPostData, cszPostData, cElems);
         hr = SafeArrayUnaccessData(psa);

         V_VT(pvPostData) = VT_ARRAY | VT_UI1;
         V_ARRAY(pvPostData) = psa;
         return NOERROR;
      }

</PRE><P><LI>Modify the URL reference as appropriate, and save the code. Add it to
   the project, and then build.

<P><LI>Close all browser instances and run the application.

<P><LI>Switch to the running instance of IE to see that the data was posted.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
Berners-Lee, T. RFC 1866. "Hypertext Markup Language - 2.0."
Internet Client SDK documentation
<P>
For more information on how to use WinInet to simulate a form POST request,
please refer to the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q165298.htm">Q165298</A></B>
   TITLE     : HOWTO: Simulate a Form POST Request Using WinInet

</PRE></OL>For more information on how to use a URL Moniker to simulate a form POST
request, please refer to the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../AXSDK/Q165800.htm">Q165800</A></B>
   TITLE     : SAMPLE: Using a URL Moniker to POST Data
</PRE> 
<PRE>Keywords          : kbinterop kbhowto
Technology        : kbole
Version           : Win:1.0,3.0,3.01,3.02,4.0,4.01
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

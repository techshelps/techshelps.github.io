

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: Using HttpSendRequestEx for Large POST Requests </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177188">
<META NAME="KBModify" CONTENT="1998/01/19">
<META NAME="KBCreate" CONTENT="1997/11/21">
<META NAME="Keywords" CONTENT="AXSDKMisc">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  This sample demonstrates proper usage of the HttpSendRequestEx function introduced in the Internet Explorer 4.0 WinInet.dll and documented in the Internet Client SDK.  The original HttpSendRequest function has a significant limitation: all the data...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QALZ,QDNQ,QAY5,QAY2,QAH4,QAYY,QAVZ,QARL,QAPF,QALG,QAWH,QBFY,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: Using HttpSendRequestEx for Large POST Requests</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177188</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Internet Client SDK, versions 4.0, 4.01
<LI>Internet Explorer (Programming), versions 4.0 4.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This sample demonstrates proper usage of the HttpSendRequestEx function
introduced in the Internet Explorer 4.0 WinInet.dll and documented in the
Internet Client SDK.
<P>
The original HttpSendRequest function has a significant limitation: all the
data for the request has to be provided in a single buffer when the
function is called. This is often inconvenient, leads to poor performance
in certain client applications, and may make it impossible to upload large
amounts of data from client machines with limited memory. The new
HttpSendRequestEx function allows a program to start a request, send out
the data in small pieces as available, then end the request once all the
data has been sent. Internet Explorer 4.0 must be installed on the computer
in order for this function to work.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Hsrex.exe">Hsrex.exe</A> <I>(size: 25380 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Hsrex.exe is a self-extracting archive that contains BigPost.cpp (the code
for the demonstration program) and Readall.asp, an Active Server Pages
(ASP) script that will read all data sent in a POST request. Readall.asp is
provided as a sample target for BigPost, which can be used on Microsoft
Internet Information Server (IIS) versions that support ASP. For other Web
servers, you will need to provide a corresponding server script to read the
data.
<P>
To compile the program with Microsoft Visual C++ 5.0, follow these steps:

<OL><P><LI>Run Visual C++ and create a new Win32 Console Application called
   "BigPost."

<P><LI>In the directory where the project was created, run Hsrex.exe.

<P><LI>Add BigPost.cpp to the BigPost project.

<P><LI>Go to the Project Settings dialog box, click the Link tab, and add
   WinInet.lib to the "Object/library modules:" field.

<P><LI>Ensure that Visual C++ is configured so that the compiler and linker
   will use the Wininet.h and Wininet.lib from the Internet Client SDK. If
   this is not done, a compiler or linker error will result. The include
   and library files included in Visual C++ do not contain the prototype
   and export of HttpSendRequestEx.

<P><LI>Build the project. It will create BigPost.exe.
<P>
</OL>The program is run as follows:
<P>
<PRE>   BigPost &lt;Size&gt; &lt;Server&gt; &lt;Path&gt;

</PRE></OL>For example, the following would POST 1 megabyte (1024KB) to
<B>http://yourserver/scripts/ReadAll.asp:</B>
<P>
<PRE>   BigPost 1024 yourserver /scripts/ReadAll.asp

</PRE>The output from this would be as follows:
<P>
<PRE>   Test of POSTing 1024KB with WinInet
   1048576 bytes sent.
   The following was returned by the server:
   1048576 bytes were read.

   Finished.

</PRE><h3>Notes</h3>
 

<UL><LI>When using HttpSendRequestEx, the flag INTERNET_FLAG_NO_CACHE_WRITE
   should be used in the call to HttpOpenRequest, as shown in the following
   line from BigPost.cpp:
<P>
<P><PRE>      HINTERNET hRequest = HttpOpenRequest(hConnect, "POST", argv[3], NULL,
<PRE></PRE>         NULL, NULL, INTERNET_FLAG_NO_CACHE_WRITE, 0);

</PRE><LI>The functionality demonstrated in this sample represents the full
   implementation of HttpSendRequestEx at this time. The other flags and
   parameters present in the documentation for this function are not yet
   implemented.

<LI>Even though the data can be sent in multiple buffers of whatever sizes
   are convenient to the programmer, the total number of bytes that will be
   sent in the request must be known before the request is begun, and the
   total number of bytes that are actually sent must match this number
   exactly, or an error will be returned by HttpEndRequest.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../AXSDK/Q177190.htm">Q177190</A></B>
   TITLE     : BUG: Error 12019 When Calling InternetWriteFile

</PRE> 
<PRE>Keywords          : AXSDKMisc
Technology        : kbInetDev
Version           : WINDOWS:4.0
Platform          : WINDOWS
Issue type        : kbfile
Solution Type     : kbsample</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Header Required Posting HTML Form Encoded Data to ASP Page </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175474">
<META NAME="KBModify" CONTENT="1998/01/19">
<META NAME="KBCreate" CONTENT="1997/10/21">
<META NAME="Keywords" CONTENT="AXSDKMisc kbcode">
<META NAME="KBArea" CONTENT="Support; KB; axsdk">
<META NAME="Description" CONTENT="  When writing an Internet client application that posts HTML form data to an ASP page using Wininet API or Visual Basic Internet Transfer Control, it is necessary to add the following HTTP header in the POST request:     Content-Type: application/x-...">
<META NAME="Product" CONTENT="ActiveX SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT="ActiveX ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALZ,QATX,QDNQ,QANF,QBS0,QBWA,QAGI,QAY5,QAVZ,QAB5,QACJ,QA3N,QAH4,QAFF,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Header Required Posting HTML Form Encoded Data to ASP Page</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175474</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Internet Client SDK, versions 4.0, 4.01
<LI>Microsoft ActiveX SDK, version 1.0
<LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When writing an Internet client application that posts HTML form data to an
ASP page using Wininet API or Visual Basic Internet Transfer Control, it is
necessary to add the following HTTP header in the POST request:
<P>
<PRE>   Content-Type: application/x-www-form-urlencoded

</PRE>This header indicates that the data being posted is encoded according to
the rules in the HTML specification (RFC 1866). ASP will not retrieve your
HTML form variables if this header is not present in the POST request.
<P>
The following Visual Basic example demonstrates adding a custom HTTP header
to a POST request using either Wininet API or the Internet Transfer Control
(SP2). Please note that you need the Internet Transfer Control from at
least Visual Basic 5.0 Service Pack 2 or Visual Studio Service Pack 2 to
implement POST. The original control cannot post correctly due to a bug.
The code fragment in the CommandButton1 Click event in the following
example uses Wininet API. The code fragment in the CommandButton2 Click
event uses Internet Transfer Control (SP2).
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new Standard EXE project. Form1 is added by default.

<P><LI>From the Project menu, choose Components, and select the Internet
   Transfer Control(SP2) into the project.

<P><LI>Place an Internet Transfer Control 5.0(SP2), Inet1, on Form1.

<P><LI>Place two CommandButtons, Command1 and Command2, on Form1.

<P><LI>Add the following code to the project code window:
<P>
<P><PRE>      Private Declare Function InternetOpen Lib "wininet.dll" _
<PRE></PRE>         Alias "InternetOpenA" _
            (ByVal lpszCallerName As String, _
             ByVal dwAccessType As Long, _
             ByVal lpszProxyName As String, _
             ByVal lpszProxyBypass As String, _
             ByVal dwFlags As Long) As Long

      Private Declare Function InternetConnect Lib "wininet.dll" _
            Alias "InternetConnectA" _
            (ByVal hInternetSession As Long, _
             ByVal lpszServerName As String, _
             ByVal nProxyPort As Integer, _
             ByVal lpszUsername As String, _
             ByVal lpszPassword As String, _
             ByVal dwService As Long, _
             ByVal dwFlags As Long, _
             ByVal dwContext As Long) As Long

   Private Declare Function InternetReadFile Lib "wininet.dll" _
            (ByVal hFile As Long, _
             ByVal sBuffer As String, _
             ByVal lNumBytesToRead As Long, _
             lNumberOfBytesRead As Long) As Integer

   Private Declare Function HttpOpenRequest Lib "wininet.dll" _
            Alias "HttpOpenRequestA" _
            (ByVal hInternetSession As Long, _
             ByVal lpszVerb As String, _
             ByVal lpszObjectName As String, _
             ByVal lpszVersion As String, _
             ByVal lpszReferer As String, _
             ByVal lpszAcceptTypes As Long, _
             ByVal dwFlags As Long, _
             ByVal dwContext As Long) As Long

   Private Declare Function HttpSendRequest Lib "wininet.dll" _
            Alias "HttpSendRequestA" _
            (ByVal hHttpRequest As Long, _
             ByVal sHeaders As String, _
             ByVal lHeadersLength As Long, _
             ByVal sOptional As String, _
             ByVal lOptionalLength As Long) As Boolean

   Private Declare Function InternetCloseHandle Lib "wininet.dll" _
            (ByVal hInternetHandle As Long) As Boolean

   Private Declare Function HttpAddRequestHeaders Lib "wininet.dll" _
             Alias "HttpAddRequestHeadersA" _
             (ByVal hHttpRequest As Long, _
             ByVal sHeaders As String, _
             ByVal lHeadersLength As Long, _
             ByVal lModifiers As Long) As Integer

   Private Sub Command1_Click()
            Dim hInternetOpen As Long
            Dim hInternetConnect As Long
            Dim hHttpOpenRequest As Long
            Dim bRet As Boolean

            hInternetOpen = 0
            hInternetConnect = 0
            hHttpOpenRequest = 0

            'Use registry access settings.
            Const INTERNET_OPEN_TYPE_PRECONFIG = 0
            hInternetOpen = InternetOpen("http generic", _
                            INTERNET_OPEN_TYPE_PRECONFIG, _
                            vbNullString, _
                            vbNullString, _
                            0)

            If hInternetOpen &lt;&gt; 0 Then
               'Type of service to access.
               Const INTERNET_SERVICE_HTTP = 3
               Const INTERNET_DEFAULT_HTTP_PORT = 80
               'Change the server to your server name
               hInternetConnect = InternetConnect(hInternetOpen, _
                                  "yourserver", _
                                  INTERNET_DEFAULT_HTTP_PORT, _
                                  vbNullString, _
                                  "HTTP/1.0", _
                                  INTERNET_SERVICE_HTTP, _
                                  0, _
                                  0)

               If hInternetConnect &lt;&gt; 0 Then
                'Brings the data across the wire even if it locally cached.
                 Const INTERNET_FLAG_RELOAD = &amp;H80000000
                 hHttpOpenRequest = HttpOpenRequest(hInternetConnect, _
                                     "POST", _
                                     "/scripts/testpost.asp", _
                                     "HTTP/1.0", _
                                     vbNullString, _
                                     0, _
                                     INTERNET_FLAG_RELOAD, _
                                     0)

                  If hHttpOpenRequest &lt;&gt; 0 Then
                     Dim sHeader As String
                     Const HTTP_ADDREQ_FLAG_ADD = &amp;H20000000
                     Const HTTP_ADDREQ_FLAG_REPLACE = &amp;H80000000
           sHeader = "Content-Type: application/x-www-form-urlencoded" _
                       &amp; vbCrLf
                     bRet = HttpAddRequestHeaders(hHttpOpenRequest, _
                       sHeader, Len(sHeader), HTTP_ADDREQ_FLAG_REPLACE _
                       Or HTTP_ADDREQ_FLAG_ADD)

                     Dim lpszPostData As String
                     Dim lPostDataLen As Long

                     lpszPostData = "lname=Doe&amp;fname=John"
                     lPostDataLen = Len(lpszPostData)
                     bRet = HttpSendRequest(hHttpOpenRequest, _
                            vbNullString, _
                            0, _
                            lpszPostData, _
                            lPostDataLen)

                     Dim bDoLoop             As Boolean
                     Dim sReadBuffer         As String * 2048
                     Dim lNumberOfBytesRead  As Long
                     Dim sBuffer             As String
                     bDoLoop = True
                     While bDoLoop
                      sReadBuffer = vbNullString
                      bDoLoop = InternetReadFile(hHttpOpenRequest, _
                         sReadBuffer, Len(sReadBuffer), lNumberOfBytesRead)
                      sBuffer = sBuffer &amp; _
                           Left(sReadBuffer, lNumberOfBytesRead)
                      If Not CBool(lNumberOfBytesRead) Then bDoLoop = False
                     Wend
                     MsgBox sBuffer
                     bRet = InternetCloseHandle(hHttpOpenRequest)
                  End If
                  bRet = InternetCloseHandle(hInternetConnect)
               End If
               bRet = InternetCloseHandle(hInternetOpen)
            End If

   End Sub

   Private Sub Command2_Click()
         Dim strURL As String, strFormData As String
         'Change the server to your server name
         strURL = "<B>http://yourserver/scripts/testpost.asp</B>"
         strFormData = "lname=Doe&amp;fname=John"
         Inet1.Execute strURL, "Post", strFormData, _
            "Content-Type: application/x-www-form-urlencoded"
   End Sub

   Private Sub Inet1_StateChanged(ByVal State As Integer)
       Dim vtData As Variant ' Data variable.

       Select Case State
       ' ... Other cases not shown.
       Case icError ' 11
           ' In case of error, return ResponseCode and
   ' ResponseInfo.
           vtData = Inet1.ResponseCode &amp; ":" &amp; _
           Inet1.ResponseInfo

       Case icResponseCompleted  ' 12
           Dim strData As String: strData = ""
           Dim bDone As Boolean: bDone = False

           ' Get first chunk.
           vtData = Inet1.GetChunk(1024, icString)
           DoEvents

           Do While Not bDone

               strData = strData &amp; vtData
               ' Get next chunk.
               vtData = Inet1.GetChunk(1024, icString)
               DoEvents

               If Len(vtData) = 0 Then
                   bDone = True
               End If
           Loop

          MsgBox strData
       End Select
   End Sub

   Private Sub Form_Load()
       Inet1.Cancel
   End Sub

</PRE><P><LI>From the File menu, choose Make Project1.exe to compile the project.
<P>
   Note that tracing the Inet1_StateChanged event callback function in the
   VB debugger may not work properly because this callback function needs
   to be repeated called and can't be stopped in debugger before a complete
   HTTP response is received. If you need to trace the Inet1_StateChanged
   event callback function in the debugger, use Debug.Print.

<P><LI>Create a testpost.asp file and place it in your Web server scripts
   directory:
<P>
<P><PRE>      &lt;HTML&gt;
      &lt;HEAD&gt;
      &lt;TITLE&gt;test asp&lt;/TITLE&gt;
      &lt;/HEAD&gt;
      &lt;BODY BGCOLOR=#FFFFFF&gt;
      &lt;H3&gt;test asp&lt;/H3&gt;
      fname is
      &lt;% =Request("fname") %&gt;
      &lt;BR&gt;
      lname is
      &lt;% =Request("lname") %&gt;
      &lt;/BODY&gt;
      &lt;/HTML&gt;
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
RFC 1866 -  Hypertext Markup Language - 2.0 at:
<B>http://nic.merit.edu/internet/documents/rfc/rfc1866.txt</B>
<P>
Section 8.2, "Form Submission"
<P>
 
<PRE>Keywords          : AXSDKMisc kbcode
Technology        : kbInetDev
Version           : WINDOWS:1.0,4.0,4.01,5.0
Platform          : WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

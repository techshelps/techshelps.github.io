

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: GlobalSmartPageLock Documentation for Device Drivers </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180586">
<META NAME="KBModify" CONTENT="1998/02/06">
<META NAME="KBCreate" CONTENT="1998/02/05">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win95ddk">
<META NAME="Description" CONTENT="  The Windows 95 Device Driver Kit display driver sample code uses the GlobalSmartPageLock() API, but this API is not documented in currently released development kits or the MSDN Library. This article documents the API for display driver developers....">
<META NAME="Product" CONTENT="win95ddk">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWQ,QBWO,QAY5,QAUD,QBW6,QAGI,QBV8,QAB9,QAW6,QAPN,QAU9,QBVV,QAMB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: GlobalSmartPageLock Documentation for Device Drivers</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180586</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Windows 95 Device Driver Kit (DDK), version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Windows 95 Device Driver Kit display driver sample code uses the
GlobalSmartPageLock() API, but this API is not documented in currently
released development kits or the MSDN Library. This article documents the
API for display driver developers.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
UINT GlobalSmartPageLock(hglb)
HGLOBAL  hglb;
<P>
Parameters:
hglb - handle to the global memory object to be locked.
<P>
Return value:
This function does not return a value.
<P>
Comments:
This information is provided as a supplement to the Windows 95 Device
Driver Kit sample code and documentation. Applications should not use the
GlobalSmartPageLock() API since it violates several Windows programming
practices.
<P>
The GlobalSmartPageLock() API was originally developed in Windows 3.0. It's
purpose was to allow one system call to "smartly" lock a memory region
regardless of how virtual memory paging is being managed. This API will
internally determine if the operating system is paging through real mode MS-
DOS drivers, or through protected mode Windows drivers. Based on this
determination, GlobalSmartPageLock() will call either GlobalFix() or
GlobalPageLock() API. Currently, it is very unlikely that a end-user will
be using real mode MS-DOS drivers, so in most cases GlobalSmartPageLock()
will call GlobalPageLock(). However, the display system driver developer
cannot assume that this is always true, which is why the DDK sample code
uses GlobalSmartPageLock().
<P>
See the comments below for GlobalPageLock() and GlobalFix(). The
GlobalSmartPageLock() functionality is useful to the Windows system drivers
during the initialization process. This article does not document the
corresponding xxxUnlock API since the display driver is not unloaded while
Windows is still running and there is no need to unlock the memory. This
situation may change with new multiple monitor capabilities in future
versions of Windows that will use dynamically loaded hardware devices.
Please contact Microsoft Technical Support if you need more information.
<P>
<P><h3>Windows 3.1 SDK References</h3>
 
<P>
The following information was copied from the Windows 3.1 SDK references:
<P>
Windows version 3.0:
<P>
<PRE>   UINT GlobalPageLock(hglb)
   HGLOBAL hglb;   /* selector of global memory to lock   */

</PRE>The GlobalPageLock function increments (increases by one) the page-lock
count for the memory associated with the given global selector. As long as
its page-lock count is nonzero, the data that the selector references is
guaranteed to remain in memory at the same physical address.
<P>
Parameters:
hglb - Specifies the selector of the memory to be page-locked.
<P>
Return Value
The return value specifies the page-lock count after the function has
incremented it. If the function fails, the return value is zero.
<P>
Comments:
Because using this function violates preferred Windows programming
practices, an application should not use it unless absolutely necessary.
The function is intended to be used for dynamically allocated data that
must be accessed at interrupt time. For this reason, it must be called only
from a dynamic-link library (DLL). The GlobalPageLock function increments
the page-lock count for the block of memory, and the GlobalPageUnlock
function decrements (decreases by one) the page-lock count. Page-locking
operations can be nested, but each page-locking must be balanced by a
corresponding unlocking.
<P>
See also GlobalPageUnlock.
<P>
Windows version 3.0:
<P>
<PRE>   void GlobalFix(hglb)
   HGLOBAL hglb;   /* handle of object to fix   */

</PRE>The GlobalFix function prevents the given global memory object from moving
in linear memory. This function interferes with effective Windows memory
management and can result in linear-address fragmentation. Few applications
need to fix memory in linear address space.
<P>
Parameters:
hglb - Identifies the global memory object to be fixed in linear memory.
<P>
Return Value:
This function does not return a value.
<P>
Comments:
The object is locked into linear memory at its current address, and its
lock count is incremented (increased by one). Locked memory is not subject
to moving or discarding except when the memory object is being reallocated
by the GlobalReAlloc function. The object remains locked in memory until
its lock count is decreased to zero. Each time an application calls the
GlobalFix function for a memory object, it must eventually call the
GlobalUnfix function, which decrements (decreases by one) the lock count
for the object. Other functions also can affect the lock count of a memory
object. For a list of these functions, see the description of the
GlobalFlags function.
<P>
See also GlobalFlags, GlobalReAlloc, GlobalUnfix.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Windows 3.1 SDK
<P>
Windows 95 DDK
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN16SDK/Q85329.htm">Q85329</A></B>
   TITLE     : BUG: GlobalPageLock() Moves Memory Fixed by GlobalFix()
</PRE> 
<PRE>Version           : WINDOWS:4.0
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

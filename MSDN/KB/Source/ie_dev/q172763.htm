

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Accessing the Object Model from Within an ActiveX Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172763">
<META NAME="KBModify" CONTENT="1998/02/19">
<META NAME="KBCreate" CONTENT="1997/08/15">
<META NAME="Keywords" CONTENT="AXSDKControls AXSDKIEAutomation AXSDKIESripting">
<META NAME="KBArea" CONTENT="Support; KB; ie_dev">
<META NAME="Description" CONTENT="  When writing an ActiveX control for the Internet, it may often be necessary to access the object model of the HTML page. The object model allows access to various elements within the HTML page.  This article discusses accessing the object model fro...">
<META NAME="Product" CONTENT="Internet Explorer (Programming)">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAPF,QBW7,QAI5,QDNQ,QAB5,QBWA,QA7O,QAOE,QAMN,QBS0,QBWG,QA2K,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Accessing the Object Model from Within an ActiveX Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172763</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Internet Explorer (Programming), versions 3.01, 3.02, 4.0
<LI>Internet Client SDK, version 4.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When writing an ActiveX control for the Internet, it may often be necessary
to access the object model of the HTML page. The object model allows access
to various elements within the HTML page.
<P>
This article discusses accessing the object model from Visual C++ and from
Visual Basic, and covers both Internet Explorer (IE) 3.x and 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h2>THE OBJECT MODEL</h2>
 
<P>
Documentation for the object model can be found in the ActiveX Software
Development Kit (SDK) and the Internet Client SDK for Internet Explorer 3.x
and 4.0, respectively. The object model is documented as follows:
<P>
<PRE>   window
      - location
      - frames
      - ...
      - document
         - links
         - forms
            - elements

</PRE>The window object is at the top level of this hierarchy. The window has a
document property, which in turn has its own set of properties. Please
consult the appropriate SDK for further details.
<P>
<P><h2>WHY SHOULD A CONTROL NEED TO ACCESS THE OBJECT MODEL?</h2>
 
<P>
A control can access (and in some cases modify) information about the page
that it is embedded in. To do so, the control must access the object model.
For example, a control can enumerate all of the elements on a page. In the
case of dynamic HTML, the control can access almost any HTML element in the
page.
<P>
<P><h2>ACCESSING THE OBJECT MODEL</h2>
 
<P>
The object model is implemented using automation and COM interfaces. Once
the control is able to access the top level of the object model, then it
can drill down the object model using automation or COM interfaces. This
article discusses both steps:

<OL><P><LI>Getting to the top level of the object model.
</OL>2. Drilling down into the object model.
<P>
<P><h2>GETTING TO THE TOP LEVEL OF THE OBJECT MODEL (VISUAL C++)</h2>
 
<P>
<P><h3>Using IWebBrowserApp (for Internet Explorer 3.x and 4.x)</h3>
 
<P>
IWebBrowserApp is an interface that is exposed by the Web Browser control.
It has a document property (or get_document method if using vtable
interface) that allows access to the automation object of the active
document. If the document is an HTML document, then the automation object
has a script property that gives the window object of the scripting object
model. So, for a control to reach the object model, the following must be
done:

<UL><LI>Obtain IWebBrowserApp from its containing HTML page.
<LI>Get the document property of IWebBrowserApp.
<LI>Get the script property of the document.
<P>
</UL>This will put you at the top level (window object) in the object model.
Then use automation to drill down further.
<P>
<P><h3>Obtaining the IWebBrowserApp</h3>
 
<P>
Getting the IWebBrowserApp is a two-step process:

<OL><P><LI>Use the IOleClientSite pointer to get IServiceProvider. The control has
   access to the IOleClientSite interface of its container. It can use that
   pointer to QI for IServiceProvider:
<P>
<P><PRE>      pClientSite-&gt;QueryInterface(IID_IServiceProvider,
<PRE></PRE>                          (void **)&amp;pISP);

</PRE><P><LI>Use the IServiceProvider to obtain IWebBrowserApp. Using the
   IServiceProvider, a QueryService can be done to get the IWebBrowserApp:
<P>
<P><PRE>      pISP-&gt;QueryService(IID_IWebBrowserApp, IID_IWebBrowserApp,
<PRE></PRE>                    (void **)&amp;pIWebBrowserApp));

</PRE></OL>QueryService is different from QueryInterface in that it does not have to
follow the identity rule in COM. So, if the object itself does not
implement IWebBrowserApp, it can delegate to the containing object and
QueryService it for a IWebBrowserApp.
<P>
<P><h3>Get the Document Property of IWebBrowserApp</h3>
 
<P>
IWebBrowserApp is a dual interface. It has a document property and also a
get_Document method. Either can be used to get the IDispatch of the active
document. Once you have the IDispatch, then the script property can be
obtained.
<P>
Get the Script Property of the Document
 
<P>
Using the IDispatch obtained above, get the script property using
automation. This will give the top level in the scripting object model, or
the window object.
<P>
<P><h2>GETTING THE TOP LEVEL OF THE OBJECT MODEL (VISUAL C++)</h2>
 
<P><h2>(Internet Explorer 4.0 ONLY)</h2>
 
<P>
Internet Explorer 4.0 makes accessing the object model much easier. This is
a one-step process:

<OL><P><LI>Get the IHTMLDocument2 from the IClientSite.
<P>
</OL><h3>Obtaining IHTMLDocument2 from IOleClientSite</h3>
 
<P>
Every control has access to IClientSite of its container. QI-ing for
IHTMLDocument2 from the client site should give the scripting object model.
<P>
<PRE>   IOleContainer* pContainer = NULL;
   IHTMLDocument2* pDoc = NULL;

   pClientSite-&gt;GetContainer( &amp;pContainer );
   if ( pContainer != NULL )
      pContainer-&gt;QueryInterface( &amp;IID_IHTMLDocument2, &amp;pDoc );

</PRE></OL>Check the return value from the above call. If the control is not embedded
within an HTML page, or if the container is not Internet Explorer 4.0, then
the above call will fail.
<P>
Getting IHTMLDocument2 gives the document object in the scripting object
model. Then either automation interfaces or vtable interfaces can be used
to drill down the object model.
<P>
<P><h2>GETTING THE TOP LEVEL OF OBJECT MODEL (VISUAL BASIC)</h2>
 
<P>
The parent property of the UserControl can be used to access the automation
object. From the Visual Basic documentation for the parent property,
Internet Explorer returns an object whose Script property returns the
IOmWindow object.
<P>
The example given in Visual Basic documentation is as follows:
<P>
<PRE>   Parent.Script.get_document.bgColor = "Blue"

</PRE>The Parent property gets to the automation object. Then the script property
gives us the window object of the scripting object model. Then the
different properties and methods can be accessed just like any other
automation object.
<P>
The above line of code should read as follows:
<P>
<PRE>   Parent.Script.document.bgColor = "Blue"

</PRE>Even though using get_document is correct in Internet Explorer 3.x, it will
not work in Internet Explorer 4.0. The correct method is to use the
document property. This will work both in Internet Explorer 3.x and 4.0.
<P>
<P><h2>DRILLING DOWN THE OBJECT MODEL</h2>
 
<P>
Drilling down the object model is as simple as calling the properties and
methods using automation. For Internet Explorer 3.x, use only automation.
For Internet Explorer 4.0, vtable interfaces can be used. For more
information refer to the driller sample in the Internet Client SDK.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: IE VB<BR>
Keywords          : AXSDKControls AXSDKIEAutomation AXSDKIESripting<BR>
Technology        : KBInetDev<BR>
Version           : WINDOWS:3.01,3.02,4.0,4.01<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

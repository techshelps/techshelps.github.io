

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XFOR: Customizing Dirsync Between Exchange and Notes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180517">
<META NAME="KBModify" CONTENT="1998/02/06">
<META NAME="KBCreate" CONTENT="1998/02/04">
<META NAME="Keywords" CONTENT="XFOR kbusage">
<META NAME="KBArea" CONTENT="Support; KB; exchange">
<META NAME="Description" CONTENT="  The article includes earlier material from LinkAge Software Inc. Help files that are not shipped with the product.  MORE INFORMATION  The Exchange Connector for Lotus Notes, new with Exchange 5.5, provides a component that synchronizes one or more ...">
<META NAME="Product" CONTENT="Exchange">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAUJ,QAPF,QA7O,QA7N,QATX,QBXB,QAML,QBL4,QAEF,QBDM,QATJ,QAIV,QARM,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XFOR: Customizing Dirsync Between Exchange and Notes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180517</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Exchange Server version 5.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The article includes earlier material from LinkAge Software Inc. Help files
that are not shipped with the product.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Exchange Connector for Lotus Notes, new with Exchange 5.5, provides a
component that synchronizes one or more Notes Name &amp; Address books with the
Exchange directory. Synchronization is bi-directional and can include
custom recipients as well as mailboxes. The names and addresses of
distribution lists (Notes "groups") can be synchronized; however, the
membership of the DL or group is not carried in the shadow entry, and all
mail routing must be done on the system where the DL or group is
maintained.
<P>
As delivered, the product synchronizes a useful subset of the many
attributes supported by the two directories. The purpose of this article
is to explain how attributes are synchronized, and how you can customize
the process to meet local requirements. Through customization, you can do
either of the following:

<UL><LI>Change the list of attributes that are synchronized between Notes and
   Exchange, adding or removing attributes.
<LI>Change the way attributes are mapped between the systems.
<P>
</UL>The synchronization process uses four control files, which are located in
two subdirectories of the Connector’s root directory. The UNC for the
Notes Connector’s root directory is:
<P>
<PRE>   \\&lt;servername&gt;\connect$\exchconn

</PRE>Important Note: If you edit these files using NotePad or another text
editor, ensure that you save backup copies of the shipped files. In
addition, do not use the [tab] key when making changes. All whitespace
characters should be entered using the space key.
<P>
Also, before you edit these files, ensure that directory synchronization is
not active (for example, by shutting down the Notes Connector). If you add
attributes to the synchronized schema or change any mapping rules for
existing attributes, you will most likely need to do a full directory
reload in one or both directions.
<P>
Schema definition files determine the subset of the native directory
schemas that are synchronized. Each line in the file that is not blank or
a comment defines a single attribute. The first column is a short name or
tag for a directory attribute used in the mapping rules (see below). The
second column has the maximum field length for the purpose of directory
synchronization. The total of all field lengths must not exceed
approximately 9500. The third column contains the internal name for the
attribute in the directory. See Appendix A for how to determine these
names for Exchange and Notes. For the Notes Address Book, the schema
definition includes a fourth column, which should be present but is not
used by the Connector.
<P>
The following definition of the Exchange directory schema is shipped in
Dxamex\amap.tbl:
<P>
<PRE>   ACCOUNT     32 Assoc-NT-Account
   COMPANY     64 Company
   DEPARTMENT  64 Department
   FULLNAME   128 Display-Name
   FIRSTNAME   64 Given-Name
   ALIAS       64 Mail-nickname
   OFFICE      64 Physical-Delivery-Office-Name
   LASTNAME    64 Surname
   NOTESADDR  128 Proxy-Addresses(NOTES:)
   USNCreated  12 USN-Created
   Initials     5 Initials
   Title       32 Title
   Phone       20 Telephone-Office1
   MobilePhn   20 Telephone-Mobile
   Fax         20 Telephone-Fax

</PRE>The following definition of the Notes address book schema is shipped in
Dxanotes\amap.tbl:
<P>
<PRE>   FULLNAME   220 FullName 1
   MAILDOMAIN  31 MailDomain 2
   COMPANY     64 CompanyName NULL
   DEPARTMENT  64 Department NULL
   FIRSTNAME   64 FirstName NULL
   LASTNAME    64 LastName NULL
   LOCATION   128 Location NULL
   SHORTNAME    8 ShortName NULL
   Initials     5 MiddleInitial NULL
   Title       32 JobTitle NULL
   Phone       20 OfficePhoneNumber NULL
   MobilePhn   20 CellPhoneNumber NULL
   Fax         20 OfficeFAXPhoneNumber NULL
   ; do not change the following definitions
   UNID        64 $$UNID NULL
   DN         256 $$DN NULL
   USNCreated  16 $$USN NULL

</PRE>Mapping rule files define how attributes from one schema are mapped to
attributes in the other schema. Each non-blank, non-comment line is a rule
that assigns a value to a single attribute in an entry in the target
directory. The right-hand side of the rule is a string expression made up
of string constants, numeric constants, references to attributes in the
source directory, and built-in string manipulation functions.
<P>
The following rules for mapping Notes attributes to Exchange attributes
are shipped in Dxamex\mapnotes.tbl:
<P>
<PRE>   Alias = ISEQUAL( ShortName, "", SUBSTR( FullName, 1, 64 ), ShortName )
   FullName = X500( FullName, "CN" )
   FirstName = FirstName
   LastName = LastName
   Company = Company
   Department = Department
   Office = Location
   Initials = Initials
   ; change the following rule only with care
   TA = "NOTES:" Strip( FullName, ";", "L", "R" ) "@" MailDomain
   ; do not change the following rule
   DN = UNID

</PRE>Note that the DN and TA attributes were not defined explicitly in the
Exchange schema. These attributes are required for directory
synchronization and are always synchronized. The TA (Target-Address)
attribute is the Notes user’s e-mail address and must be unique within the
Exchange directory. Although Notes does not enforce the uniqueness of this
name, for all practical purposes the name must be unique to allow the Notes
router to reliably deliver mail to the right mailbox. The DN (Distinguished
Name) mapping rule actually provides only a portion of the eventual full DN
created for the Notes entry in Exchange. The full DN is constructed by
concatenating the DN of the Import Container where Notes custom recipient
entries are stored, with the DN fragment created by the mapping rule.
<P>
The TA rule provides a good example of how the string expressions work.
For example, if the Notes user’s full name and mail domain are "Denise
Graham/Sales/Acme Corp; Denise Graham; Graham" and "Acme-HQ", then this
rule will result in an Exchange TA field containing "NOTES:Denise
Graham/Sales/Acme Corp@Acme-HQ". See below for a full description of the
built-in mapping functions that are available.
<P>
The following rules for mapping Notes attributes to Exchange attributes
are shipped in Dxanotes\mapmex:
<P>
<PRE>   FullName = Trim( Strip( NotesAddr, "@", "R" ), "B" )
   MailDomain = Trim( Strip( NotesAddr, "@", "L" ), "B" )
   ShortName = Alias
   LastName = ISEQUAL( LastName, "", FullName, LastName )
   FirstName = FirstName
   Company = Company
   Department = Department
   Location = Office
   Initials = Initials
   ; do not change the following rules
   UNID = "00000000-00000000-00000000-00000000"
   USN = USNCreated
   DN = DN


</PRE>Mapping Rules use a simple macro language that allows you to define how to
create entries in different directory systems. An important part of this
macro language is the mapping functions that manipulate a series of
arguments you supply and return a result in the form of a string. Your
mapping rules can combine this result with other constant strings and
function calls to build up the overall result of the rule.
<P>
Mapping functions operate on strings and numeric constants. Strings can be
either attribute tags (the short names defined in the schema definition
file) from the source directory, or string literals. A string literal is
an actual sequence of characters enclosed in quotation marks, such as "Star
<PRE>Mart", ".", or even "   " (three spaces). Note that you cannot use the
</PRE>real internal attribute names in mapping rules. You must use the attribute
tags defined in the schema definition files.
<P>
A function has the following format:
<P>
<PRE>   FUNCTION_NAME( arguments )

</PRE>For example:
<P>
<PRE>   LEFT (Fullname, 4)

</PRE>If this function is coded in a mapping rule, it will return the left-most
four characters of the contents of the Fullname field in the source
directory.
<P>
Functions can be combined with each other or with string literals, allowing
you to create arbitrarily complex result strings.  A rule and the resulting
string it returns can be as long as 2,048 characters.
<P>
The list below represents all the built-in mapping functions; more complete
explanations and examples are provided later in this document.
<P>
<PRE>   AND()

   Returns the concatenation of two non-null strings, or the null string if
   either of the two strings specified is null.

   CFGPARM()

   Returns a value from the connector’s INI file.

   ISEQUAL()

   Returns a configurable value, depending on whether or not two
   expressions are equal.

   LEFT()

   Returns the left n characters of an expression, padded on the right if
   necessary.

   LOWER()

   Converts a field to lower-case characters.

   NAMEF()

   Returns a person’s first name or initial from a pre-formatted string.

   NAMEL()

   Returns a person’s last name or initial from a pre-formatted string.

   NAMEM()

   Returns a person’s middle name or initial from a pre-formatted string.

   POS()

   Determines the position of a particular string within an attribute.

   PROPER()

   Converts a name field to proper-name format.

   REPLACE()

   Converts a name field to proper-name format.

   RIGHT()

   Returns the right n characters of an expression, padded on the left if
   necessary.

   SUBSTR()

   Returns a specified sub-string of a string, padded with extra characters
   if necessary.

   STRIP()

   Locates the left-most or right-most occurrence of one string in another
   and removes characters.

   TRIM()

   Returns a field with leading and/or trailing blanks removed.

   UPPER()

   Converts a field to upper-case characters.

   WORD()

   Returns a specified number of words from a string.

   X500()

   Extracts an attribute from an X.500-style hierarchical address.


</PRE>Mapping Functions: Detailed Descriptions
<P>
<PRE>   Notational conventions:

   UPPERCASE type

   used for function names

   [ ]

   used to indicate optional arguments.  If an optional argument is
   omitted, its default value is assumed.

</PRE>In the examples, each sample call is followed by the result it
produces. Although the examples use only string literals as arguments,
remember that each argument can itself be an arbitrarily complex string
expression, including nested function calls.
<P>
Syntax:
<P>
<PRE>   AND(exp1,exp2)

</PRE>Description:
<P>
Returns the concatenation of two non-null strings, or the null string if
either of the strings involved is null.
<P>
Examples:
<P>
<PRE>   AND("A", "B" )  "AB"
   AND ("", "B")  ""
   AND("A", "")  ""

</PRE>Syntax:
<P>
<PRE>   CFGPARM( exp1[,exp2] )

</PRE>Description:
<P>
CFGPARM returns the value of a parameter in the Exchconn.ini file. Exp1
specifies the parameter whose value is to be returned; exp2 specifies the
section within the INI file. If the section is omitted, then the DXA’s
home section is used. If neither the section nor the parameter is found,
the result is an empty string.
<P>
Examples:
<P>
<PRE>   CFGPARM( "executable")  "lsdxamex.exe"
   CFGPARM( "locale", "dxm")  "English"

</PRE>Syntax:
<P>
<PRE>   ISEQUAL( exp1, exp2, val1, val2 )

</PRE>Description:
<P>
ISEQUAL returns the value of val1 if exp1 equals exp2, otherwise it returns
the value of val2.
ISEQUAL is not case-sensitive.
<P>
Examples:
<P>
<PRE>   ISEQUAL( "remote", "remote", "R", "L")  "R"
   ISEQUAL( "remote", "local", "R", "L")  "L"
   ISEQUAL( "remote", "REMOTE", "R", "L")  "R"
</PRE>Syntax:
<P>
<PRE>   LEFT ( field, length, [, pad] )

</PRE>Description:
<P>
LEFT returns the left-most length characters of field. If field has fewer
than length characters, the result is padded on the right with the pad
character.
The default pad character is a blank.
<P>
Examples:
<P>
<PRE>   LEFT ( "416-862-7148", "3" )  "416"
   LEFT ( "triple", "9" )  "triple   "
   LEFT ( "triple", "9", "x" )  "triplexxx"

</PRE>Syntax:
<P>
<PRE>   LOWER ( field )

</PRE>Description:
<P>
LOWER returns the value of field with any upper-case letters converted to
lower-case.
<P>
Examples:
<P>
<PRE>   LOWER ( "LinkAge" )  "linkage"
   LOWER ( "Bonnie" )  "bonnie"

</PRE>Syntax:
<P>
<PRE>   NAMEF ( field, [, style] )

</PRE>Description:
<P>
If field contains a person's name in a specified format, NAMEF returns the
person's first name or initial. Two styles are supported:

<OL><P><LI>The name is in the form "First Middle Last".
</OL>2. The name is in the form "Last, First Middle".
<P>
The default style is 1 if field does not contain a comma, 2 if it does.
<P>
Initials or strings of initials are treated as first or middle names. If a
name has only one part, it is considered both first and last name,
regardless of the style.
<P>
Examples:
<P>
<PRE>   NAMEF ( "Sarah Elizabeth Turner" )  "Sarah"
   NAMEF ( "S. E. Turner" )  "S."
   NAMEF ( "SE Turner" )  "SE"
   NAMEF ( "Turner, Sarah E.", "2" )  "Sarah"
   NAMEF ( "Madonna", "2" )  "Madonna"

</PRE></OL>Syntax:
<P>
<PRE>   NAMEL ( field, [, style] )

</PRE>Description:
<P>
If field contains a person's name in a specified format, NAMEF returns the
person's last name. Two styles are supported:

<OL><P><LI>The name is in the form "First Middle Last".
</OL>2. The name is in the form "Last, First Middle".
<P>
The default style is 1 if field does not contain a comma, 2 if it does.
<P>
Initials or strings of initials are treated as first or middle names. If a
name has only one part, it is considered both first and last name,
regardless of the style.
<P>
Examples:
<P>
<PRE>   NAMEL ( "Sarah Elizabeth Turner" )  "Turner"
   NAMEL ( "S. E. Turner" )  "Turner"
   NAMEL ( "Sarah Turner" )  "Turner"
   NAMEL ( "Turner, Sarah E.", "2" )  "Turner"
   NAMEL ( "Madonna")  "Madonna"


</PRE></OL>Syntax:
<P>
<PRE>   NAMEM( field, [, style] )

</PRE>Description:
<P>
If field contains a person's name in a specified format, NAMEF returns the
person's middle name or initial.
Two styles are supported:

<OL><P><LI>The name is in the form "First Middle Last".
</OL>2. The name is in the form "Last, First Middle".
<P>
The default style is 1 if field does not contain a comma, 2 if it does.
<P>
Initials or strings of initials are treated as first or middle names. If a
name has only one part, it is considered both first and last name,
regardless of the style. Anything that is not identified as a first or last
name is considered a middle name.
<P>
Examples:
<P>
<PRE>   NAMEM ( "Sarah Elizabeth Turner" )  "Elizabeth "
   NAMEM ( "S. E. Turner" )  "E. "
   NAMEM ( "Turner, Sarah E." )  "E. "
   NAMEM ( "Turner, Sarah", "2" )  ""
   NAMEM ( "Turner, Sarah E.", "2" )  "E."
   NAMEM ( "Turner, Sarah E. M", "2" )  "E. M."

</PRE></OL>Syntax:
<P>
<PRE>   POS ( field, target )

</PRE>Description:
<P>
POS returns the position of the string target within field.
If the target is not in the field, POS returns zero.
<P>
Examples:
<P>
<PRE>   POS ( "Title: President", "Ti" )  "1"
   POS ( "Title: President", ":" )  "6"
   POS ( "Title: President", "Manager" )  "0"


</PRE>Syntax:
<P>
<PRE>   PROPER ( field )

</PRE>Description:
<P>
PROPER returns the value of field with lower-case and upper-case letters
converted to mixed-case, as if field were a proper name.
<P>
Examples:
<P>
<PRE>   PROPER ( "linkage" )  "Linkage"
   PROPER ( "john")  "John"
   PROPER ( "o'malley" )  "O'Malley"

</PRE>Syntax:
<P>
<PRE>   REPLACE ( field, what [,with] )

</PRE>Description:
<P>
This mapping function enables you to remove specific characters from an ID
or replace selected characters with substitute characters. It scans field
for any characters in the what string and replaces them with the
corresponding character from the with string. If the with string is shorter
or is not provided (meaning that one or more characters in what have no
corresponding characters in with), those characters are elided (removed)
from field.
<P>
Examples:
<P>
<PRE>   REPLACE ("James Martin"," ","_")  "James_Martin"

   REPLACE ("Sales &amp; Marketing Email Group"," ",".")
   "Sales.&amp;.Marketing.Email.Group"
   REPLACE ("Constantine Raîch'al", " î'", ".i")  "Constantine.Raichal"


</PRE>Syntax:
<P>
<PRE>   RIGHT ( field, length [,pad] )

</PRE>Description:
<P>
RIGHT returns the right-most length characters of field. If field has fewer
than length characters, the result is padded on the left with the pad
character. The default pad character is a blank.
<P>
Examples:
<P>
<PRE>   RIGHT ( "416-862-7148", "7" )  "62-7148"
   RIGHT ( "416-862-7148", "8" )  "862-7148"
   RIGHT ( "node", "5", "@" )  "@node"

</PRE>Syntax:
<P>
<PRE>   STRIP ( string1, string2, [scan-from-direction] , [strip-toward-
   direction]),

   where    [scan-from-direction]   = "L" | "R"
         [strip-toward-direction]   = "L" | "R"

</PRE>Description:
<P>
STRIP locates the left-most or right-most occurrence of string2 in string1
and removes characters from the right or left, including string2. The value
for scan-from-direction determines whether STRIP looks for the left-most or
right-most occurrence of string 2 in string 1; the value for strip-toward-
direction determines whether characters are removed from the left or right
of where string2 starts.
<P>
If the either the scan-from-direction or the strip-toward-direction
parameter is omitted, the value for the missing parameter is assumed to be
the same as the one that is specified. If both these parameters are
omitted, the default for both is assumed to be "R" (right).
<P>
Examples:
<P>
<PRE>   STRIP ( "Senior Vice President", "Vice", "L" )  " President"   (Note the
   leading space)
   STRIP ( "Senior Vice President", "Vice", "R" )  "Senior "   (Note the
   trailing space)
   STRIP ( "Senior Vice President", " " , "L")  "Vice President"
   STRIP ( "Senior Vice President", " ", "R" )  "Senior Vice"
   STRIP ( "Senior Vice President", " ", "R", "L" )  "President"


</PRE>Syntax:
<P>
<PRE>   SUBSTR ( field, start [,length [, pad] ] )

</PRE>Description:
<P>
SUBSTR returns the portion of field starting at position start, with length
characters, padded with the pad character if necessary.
<P>
The default for length is (length of string - start + 1). The default pad
character is a blank.
<P>
Examples:
<P>
<PRE>   SUBSTR( "Vice-President", "6" )  "President"
   SUBSTR( "Vice-President", "2", "3" )  "ice"
   SUBSTR( "Vice-President", "7", "9", "s" )  "residents"
   SUBSTR( "Vice-President", "11", "4" )  "dent"


</PRE>Syntax:
<P>
<PRE>   TRIM ( field [,option] )

</PRE>Description:
<P>
TRIM returns field with leading or trailing blanks removed. Option
specifies whether to remove leading blanks (L) trailing blanks (R), or both
(B).
<P>
Examples:
<P>
<PRE>   TRIM ( "   Title   ", "B" )  "Title"
   TRIM ( "   Title   ", "L" )  "Title   "
   TRIM ( "   Title   ", "R" )  "   Title"

</PRE>Syntax:
<P>
<PRE>   UPPER ( field )

</PRE>Description:
<P>
UPPER returns the value of field with any lower-case letters converted to
upper-case.
<P>
Examples:
<P>
<PRE>   UPPER ( "LinkAge" )  "LINKAGE"
   UPPER ( "Bonnie" )  "BONNIE"

</PRE>Syntax:
<P>
<PRE>   WORD ( field, n [, m] )

</PRE>Description:
<P>
WORD returns m blank-delimited words starting with the nth word in field.
WORD returns an empty string if field contains fewer than n words. The
default value for m is 1.
<P>
Examples:
<P>
<PRE>   WORD ( "one of a kind", "1" )  "one"
   WORD ( "one of a kind", "1", "2" )  "one of"
   WORD ( "one of a kind", "3", "2" )  "a kind"
   WORD ( "one of a kind", "5" )  ""
   WORD ( "Sarah E. Turner", "3" )  "Turner"

</PRE>Syntax:
<P>
<PRE>   X500 ( address, field name [,index] )

</PRE>Description:
<P>
X500 returns the contents of the named field for the specified address. If
the address has two or more components with the same field name, the index
value is used to specify the correct one.
<P>
The following X.500-type addresses are supported:
<P>
<PRE>   - Microsoft Exchange Canonical (for example,
     /o=org/ou=site[/cn=container])
   - Lotus Notes Canonical (for example, cn=name/ou=site./o=org/c=country)
   - Lotus Notes Abbreviated Canonical (for example, name/site/org/country)

</PRE>For example, suppose the value of the DN field is that provided in the
sample X500 address below:
<P>
<PRE>   /o=StarMart/ou=Sales Office/cn=Recipients/cn=Notes_Users

</PRE>The function would provide the following result:
<P>
<PRE>   X500 ( DN, "ou")  "Sales Office"
   X500 ( DN, "o")  "StarMart"
   X500 ( DN, "cn", 2)  "Notes_Users"


</PRE><h3>Appendix: How to determine the internal name of directory attributes</h3>
 
<P>
Both Exchange and Notes allow you to inspect internal names of directory
attributes and inspect detailed schema and content information for
specific attributes of a directory entry.
<P>
For the Exchange directory, run the Exchange Administrator with the /raw
option. Use shift-enter to view the attributes of a recipient object. You
will be able to view the detailed schema for recipients, including the
internal directory names for recipient attributes.
<P>
For the Notes address book, right-click the mouse on an address book entry
that contains the attributes of interest, and select Document Properties.
Select the Fields tab, and you will see a list box that shows you the
internal directory names for the attributes of the selected entry. You can
also display the contents of each attribute using this tab.
 
<PRE>Keywords          : XFOR kbusage
Version           : 5.5
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

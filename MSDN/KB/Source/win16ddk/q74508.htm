

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Lower Order Word of 32-Bit ROP Codes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q74508 ">
<META NAME="KBModify" CONTENT="1995/03/27">
<META NAME="KBCreate" CONTENT="1991/07/22">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16ddk">
<META NAME="Description" CONTENT="  In Chapter 14 of the  Microsoft Windows Device Development Kit Device Driver Adaptation Guide,  the interpretation of the raster operation (ROP) code is explained. However, only the higher-order word or most-significant word (MSW) of the 32-bit ROP...">
<META NAME="Product" CONTENT="Win16 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QA7R,QAY5,QAI3,QBVV,QATX,QATJ,QDL9,QBWO,QBWN,QA28,QAKM,QAU9,QABG,QAIH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>The Lower Order Word of 32-Bit ROP Codes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 27, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q74508 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Device Driver Kit (DDK) for Windows versions 3.0,
   3.1 and 3.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Chapter 14 of the "Microsoft Windows Device Development Kit Device
Driver Adaptation Guide," the interpretation of the raster operation (ROP)
code is explained. However, only the higher-order word or most-significant
word (MSW) of the 32-bit ROP code is explained. This word is an index in
the ROP table. The use of the lower-order word or least-significant word
(LSW) of the ROP code is not addressed in the Windows Device Development
Kit (DDK).
<P>
The LSW of the ROP code may be used by display drivers to assist in parsing
the ROP. A complete explanation of the LSW of the ROP code can be found in
the file COMMENT.BLT, which is included with the DDK display driver sample
source code. This file is found in the directory that contains the source
code for the BitBlt routine. For example, the file that relates to the
VGA/EGA driver is found in the DISPLAY\4PLANE\BITBLT directory.
<P>
Note: The LSW of the ROP code is NOT used by the VGA/EGA, 8514, and other
display drivers distributed by Microsoft. Windows Graphics Device Interface
(GDI) does not process the LSW. GDI simply passes it to the display driver.
<P>
The relevant section from the COMMENT.BLT file is included below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The low-order word in and of itself does not contain enough information to
generate the ROP code. What it contains is:

<OL><P><LI>An index specifying which predefined parse sting to use. A parse
   string has a format similar to
<P>
<P><PRE>      SDPSDPSD
</PRE><P>
   or
<P>
<P><PRE>      S+SD-PDS
</PRE><P>
   where S, D, and P represent source, destination, and pattern. The
   "+" represents a "push", and the "-" represents a "pop". Sixteen of
   the 256 ROPs cannot be represented without using "push" and "pop".

<P><LI>Amount to rotate the parse string. If the base string is
<P>
<P><PRE>      SDPSDPSD
</PRE><P>
   and an offset of 2 was given, the new base string will be:
<P>
<P><PRE>      PSDPSDSD
</PRE>
<P><LI>Five logic operations. The logic operations could be any of the
   following:
<P>
<P><PRE>      NOT
      XOR
      OR
      AND
</PRE>
<P><LI>A parity bit used to imply a sixth logic operation of NOT. Pairs of
   trailing NOTs are discarded since they cancel.
<P>
</OL>Example 1: 85, 0085 1E05, PDSPnoaxn,
<PRE>           D = not ((((not P) or S) and D) xor P)


</PRE></OL>1E08 = 00 01 11 10 00 0 001 01
<PRE>       |  |  |  |  |  |  |  |
       |  |  |  |  |  |  |  |___ bias start by 1
       |  |  |  |  |  |  |______ use string 1
       |  |  |  |  |  |_________ parity - no trailing NOT
       |  |  |  |  |____________ Logic operation #1 is a NOT
       |  |  |  |_______________ Logic operation #2 is a OR
       |  |  |__________________ Logic operation #3 is a AND
       |  |_____________________ Logic operation #4 is a XOR
       |________________________ Logic operation #5 is a NOT


String #1 is defined as:      SPDSPDSP

After the bias, it will be:   PDSPDSPS

</PRE>The number of binary logic operations + 1 gives an index into the new
string of the first operand. In this case, there are three binary
operations, so the first operand will be the fourth element of the string
(P), the second operand will be the third element (S), and so forth.
<P>
Example 2: 71, 0071 1D5C, SSDxPDxaxn,
<PRE>           D = not (((D xor P) and (D xor S)) xor S)

</PRE>1E08 = 00 01 11 01 01 0 111 00
<PRE>       |  |  |  |  |  |  |  |
       |  |  |  |  |  |  |  |___ don't bias start
       |  |  |  |  |  |  |______ use string 7
       |  |  |  |  |  |_________ parity - no trailing NOT
       |  |  |  |  |____________ Logic operation #1 is a XOR
       |  |  |  |_______________ Logic operation #2 is a XOR
       |  |  |__________________ Logic operation #3 is a AND
       |  |_____________________ Logic operation #4 is a XOR
       |________________________ Logic operation #5 is a NOT


String #7 is defined as:      S+SD-PDS

</PRE>The number of binary logic operations + 1 normally gives an index into the
string of the first operand. When a push/pop is involved, this must be
biased by 2 to account for the encoded push/pop. In this case, there are
four binary operations, plus a push and a pop, so the first operand will be
the seventh element of the string (D), the second operand will be the sixth
element (P), and so forth.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: D2DispQuest<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 27, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

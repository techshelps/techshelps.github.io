

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How a TSR Can Serialize Access to Its Data </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q84053 ">
<META NAME="KBModify" CONTENT="1995/04/12">
<META NAME="KBCreate" CONTENT="1992/04/29">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16ddk">
<META NAME="Description" CONTENT="  In the enhanced mode of the Microsoft Windows graphical environment, each virtual machine (MS-DOS applications and the Windows system) is scheduled for execution using a preemptive multitasking algorithm. A terminate-and- stay-resident program (TSR...">
<META NAME="Product" CONTENT="Win16 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHC,QADN,QDL9,QBWO,QBWN,QBW7,QAI5,QAHB,QAYY,QBWQ,QAB5,QBWG,QDH9,QBVV,QAYL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How a TSR Can Serialize Access to Its Data</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 12, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q84053 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Device Driver Kit (DDK) for Windows versions 3.0
   and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the enhanced mode of the Microsoft Windows graphical environment, each
virtual machine (MS-DOS applications and the Windows system) is scheduled
for execution using a preemptive multitasking algorithm. A terminate-and-
stay-resident program (TSR) that is visible to all processes running in
Windows at any given time (a so-called "global" TSR) must take precautions
to prevent two or more processes from accessing its data concurrently. This
article discusses techniques that a TSR can use to serialize other
applications' access to its data.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A TSR can employ any of the following four techniques to prevent conflicts
when more than one process accesses data simultaneously:

<OL><P><LI>Use the virtual memory manager (VMM) to instance the data in the
   TSR. This method requires either a virtual device (VxD) or
   processing the Windows startup broadcast (Interrupt 2Fh Function
   1605h) documented in the "Microsoft Windows Device Development Kit
   Virtual Device Adaptation Guide." This technique creates a copy of
   the critical data for each virtual machine that requires access.
   Because each instance has its own private copy, concurrent access
   to the data is impossible. A TSR cannot use instanced data to share
   information between virtual machines or to describe a system-wide
   state for the machine.

<P><LI>Encapsulate the global data in a VxD, which performs all data
   management. This article does not discuss this technique.

<P><LI>Use the critical section services described in the "Microsoft
   Windows DDK Virtual Device Adaptation Guide."

<P><LI>Use semaphores.
<P>
</OL>An application can implement the third technique by surrounding each access
to the data with calls to the Begin_Critical_Section (Interrupt 2Fh,
Function 1681h) and End_Critical_Section (Interrupt 2Fh, Function 1682h)
services. However, doing so can cause a significant performance hit for
three reasons:

<OL><P><LI>Interrupt 2Fh may be trapped by many TSRs or VxDs; traversing the
   interrupt chain can take a long time.
</OL>2. The critical section is claimed by Windows frequently; each call to
<PRE>   Begin_Critical_Section may block the process or Windows
   unnecessarily.

</PRE><P><LI>If the virtual timer device (VTD) reflects a timer interrupt into a
   virtual machine while another VM has claimed the critical section,
   processing blocks.
<P>
</OL>Note: The presence of an owned critical section does not suppress task
switches into VMs that receive reflections of hardware interrupts.
<P>
If the critical section is not required by the TSR for other reasons, the
TSR can perform serialization much more efficiently by using a semaphore. A
semaphore is a global variable in the TSR than can be maintained using the
following code:
<P>
<PRE>   Wait_On_Sem:
        mov     al,1
        xchg    al,[Semaphor]   ;; xchg is indivisible!!!
        test    al,0ffh
        je      Got_Access      ;; If Semaphor was 0, gained access;
        mov     ax,1680h        ;; otherwise,
        int     2fh             ;; release time slice
        jmp short Wait_On_sem   ;; and try again.

   Got_Access:

        &lt; access the data here &gt;

        xor     al,al           ;; Free semaphore.
        xchg    al,[Semaphor]

</PRE></OL>This code uses the variable Semaphor as a binary semaphore that has either
the value 1, indicating claimed, or 0, indicating free. Note that this
technique depends on the indivisibility of the XCHG instruction. If the
processor receives an interrupt while it is processing an indivisible
instruction, the processor completes the instruction before processing the
interrupt. In this example, the XCHG instruction transfers data between the
AL register and the Semaphor variable. If XCHG was not indivisible and an
interrupt occurred as the XCHG was being processed, two processes could
receive the semaphore simultaneously, which defeats the mutual exclusion
that the semaphore is designed to provide. Careful coding is required when
using the semaphore because there is always a possibility of deadlocking a
process.
<P>
<P><h2>REFERENCE</h2>
 
<P>
For more information on semaphores and mutual exclusion in general, refer
to an introductory text on operating systems. One such text is "An
Introduction to Operating Systems" by Harvey M. Deitel (Addison- Wesley).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 DDKTSR DDKVXD<BR>
KBCategory: kbprg<BR>
KBSubcategory: D3MiscTsrintr<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 12, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

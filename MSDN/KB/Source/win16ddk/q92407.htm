

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>API Translation Buffers in Enhanced Mode Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q92407 ">
<META NAME="KBModify" CONTENT="1995/04/12">
<META NAME="KBCreate" CONTENT="1992/11/05">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16ddk">
<META NAME="Description" CONTENT="  Because enhanced mode Windows provides an extended MS-DOS environment, at times it may invoke system code running in real mode or even V86 mode. This article describes the process that Windows employs to pass protected mode data to V86-mode address...">
<META NAME="Product" CONTENT="Win16 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QDL9,QBWO,QBWN,QBWQ,QA5W,QDH9,QAB5,QBXS,QA7H,QANG,QAH6,QACJ,QDIT,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>API Translation Buffers in Enhanced Mode Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 12, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q92407 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Device Development Kit (DDK) for Windows version
   3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Because enhanced mode Windows provides an extended MS-DOS environment, at
times it may invoke system code running in real mode or even V86 mode. This
article describes the process that Windows employs to pass protected mode
data to V86-mode addressable areas, and discusses some potential problems
arising from this scheme.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Data that resides outside of the V86-addressable area must be copied into
the affected VMs virtual 1 megabyte (MB) space to be accessible by code
running in V86 mode. Enhanced mode Windows (to be more precise, the V86
memory manager virtual device driver) provides two possibilities to do
this: local API translation buffers (accessible via the
V86MMGR_Allocate_Buffer and V86MMGR_Free_Buffer services) and global API
translation buffers. This article focuses on the global API translation
buffers.
<P>
At initialization time, virtual device drivers (VxDs) may ask enhanced mode
Windows to set up a global API translation buffer (APITB) via the
V86MMGR_Set_Mapping_Info service call, passing in a required (minimum) and
a desired (maximum) buffer size. As a result, Windows allocates one global
APITB in the corresponding address locations of all virtual machines (VMs)
according to the following algorithm:
<P>
The APITB is always aligned on 4K boundaries and is a multiple of 4K. It is
never smaller than the largest minimum size requested by all VxDs and never
larger than the largest maximum size requested. Unless the user sets
"ReservePageFrame=yes" in SYSTEM.INI, Windows attempts to allocate the
APITB in the 384K adapter segment; if necessary, Windows will shrink it to
the minimum size. If there is no space in the 384K adapter segment, the
APITB will be allocated in conventional memory.
<P>
Thus, in a sense, the term "global" has two meanings: It means that the
buffer is visible to all virtual machines and that the buffer is being
shared by all VxDs. Although any VxD can request participation in the
APITB, participation should be restricted to VxDs that need to provide
access to it asynchronously. The swap-file virtual device, as well as most
network protocol virtual devices (such as the virtual NetBIOS device),
utilize the APITB. Because (asynchronous) hardware interrupts from the hard
disk as well as the network can be reflected into any VM, the translation
buffer accessed by these virtual devices must be global to all VMs.
<P>
In the case of the virtual NetBIOS device, the NetHeapSize= parameter in
SYSTEM.INI is used to determine the APITB size that the virtual NetBIOS
device requests from Windows.
<P>
Note that the APITB is nothing more than a reserved area in the
corresponding memory locations of all virtual machines. A virtual device
driver claims parts of the buffer by submitting a V86MMGR_Map_Pages call
and releases it by calling the V86MMGR_Free_Map_Page_Region service. When
portions of the APITB are being claimed, Windows flags these portions as
unusable for other VxDs and maps physical pages into those portions. Any
request for buffer usage will be 4K aligned; that is, the memory manager
will always claim multiples of 4K from the APITB, regardless of the actual
size of the request.
<P>
This poses a potential problem with virtual device drivers that claim
portions of the APITB for unpredictable amounts of time. For example, the
virtual NetBIOS device claims a portion of the APITB when an asynchronous
NetBIOS request is being submitted from a protected mode VM and releases it
when the callback routine associated with the NetBIOS request is invoked.
Under heavy network-traffic conditions, one NetBIOS request may cause a new
portion of the APITB to be allocated while another request is pending; this
process may cause the APITB to become fragmented, thus failing bigger
NetBIOS calls although the overall number of pages available in the APITB
may be enough to satisfy the request (the V86MMGR always looks for a
contiguous number of pages to satisfy a buffer claim request and does not
compact memory within the APITB). That scenario may cause the following
problem to appear:
<P>
Although the NetHeapSize parameter in SYSTEM.INI is sufficiently large, a
full screen message with the following contents pops up:
<P>
<PRE>   This application requires a larger buffer for transferring
   information over the network. You can increase the
   buffer size by modifying the NetHeapSize setting in
   your SYSTEM.INI file.
   Include or modify the following setting in the [386Enh]
   section in your SYSTEM.INI file:
          NetHeapSize=&lt;suggested new value&gt;
   If the NetHeapSize value is still too low, this
   message will appear again, suggesting a new value.

</PRE>In pathologic cases, this may happen repeatedly, even if the NetHeapSize
parameter is set to a value significantly higher than the maximum size
needed.
<P>
To resolve this problem, you should either limit all NetBIOS requests to
NCBs smaller than 4K so that fragmentation does not become an issue, or
make sure that all pending NetBIOS requests have completed before
submitting a larger NetBIOS request.
<P>
The NetAsynchFallback= entry in SYSTEM.INI allows applications to bypass
the global APITB and work on a local APITB. This forces calls originating
in real mode to be synchronous, but if the call orginates in protected
mode, NetAsynchFallback has no effect; it does not transform the call
to synchronous. There is no method for forcing everything to be
synchronous.
<P>
The NoWaitNetIO option in the [386enh] section of SYSTEM.INI can be set to
translate everything from synchronous to asynchronous. If this option is
set to "=OFF", which is the default, requests will not be translated. If it
is set to "=ON", all synchronous requests will be translated to
asynchronous requests.
<P>
<P><h2>REFERENCE</h2>
 
<P>
Please refer to the application note WW0335 (Windows memory management) for
related information.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: DthreeMiscCoding<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 12, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

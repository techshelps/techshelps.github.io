

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual Communications Driver Functional Structure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q75006 ">
<META NAME="KBModify" CONTENT="1996/05/30">
<META NAME="KBCreate" CONTENT="1991/08/06">
<META NAME="Keywords" CONTENT="kbprg kbwebcontent">
<META NAME="KBArea" CONTENT="Support; KB; win16ddk">
<META NAME="Description" CONTENT="  In the Microsoft Windows graphical environment, the virtual communications driver (VCD) is the virtual device (VxD) that  virtualizes  COM ports. Its main role is to arbitrate COM port use between virtual machines (VMs). This article discusses the ...">
<META NAME="Product" CONTENT="Win16 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDJ9,QAHC,QADN,QAGI,QDJP,QAKG,QAHB,QBWO,QDL9,QBWN,QAIF,QAB5,QAUD,QAA1,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Virtual Communications Driver Functional Structure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 30, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q75006 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Device Development Kit (DDK) for
   Windows versionS 3.0, 3.1, 3.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the Microsoft Windows graphical environment, the virtual communications
driver (VCD) is the virtual device (VxD) that "virtualizes" COM ports. Its
main role is to arbitrate COM port use between virtual machines (VMs). This
article discusses the various functions of the VCD and the routines that it
uses.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The VCD is the ring 0 interrupt handler for COMM.DRV, the Windows
communication driver, in the system VM. The VCD arbitrates COM port
contention, by tracking port ownership. When Windows starts, VCD traps
input and output for every COM port, which allows VCD to monitor all I/O
activity from every VM. Under Windows 3.0, if a VM enables interrupts for a
COM port, or attempts to output data, then VCD determines that the VM
should own the port and attempts to assign ownership, or it displays a
message box informing the user of the contention.
<P>
The functions of the VCD are listed below by category.
<P>
<P><h3>Initialization</h3>
 
<P>
VCD_Sys_Crit_Init, VCD_Device_Init, VCD_Init_Complete, and VCD_Init_Port
initialize VCD.
<P>
VCD_Sys_Crit_Init attempts to read base and IRQ specifications from the
SYSTEM.INI file.
<P>
VCD_Device_Init calls VCD_Init_Port to allocate memory for each COM port
and to read its initial state. VCD_Device_Init also instances COM-related
data structures in the BIOS data area and hooks the Interrupt 14h chain to
enable VCD to process an Interrupt 14h before any virtual 8086 mode
terminate-and-stay-resident programs (V86 TSRs) or device drivers do.
<P>
VCD_Create_VM, VCD_Init_VM_CB, and VCD_Set_IRQ_Procs initialize the COM
structures VCD maintains for each VM. For each COM port in the system, VCD
allocates and maintains a separate chunk of control block memory for each
VM. VCD_Init_VM_CB initializes the control block structure for one COM
port. VCD_Create_VM calls VCD_Init_VM_CB for each COM port.
VCD_Set_IRQ_Procs sets up pointers to handler routines for IRQ processing;
this is required to support port virtualization when another VxD wants to
virtualize a COM port. When this happens, VCD cooperates and assists the
other VxD.
<P>
<P><h3>Port Handling</h3>
 
<P>
Port handling refers to a group of routines that maintain ownership of a
COM port.
<P>
VCD_Attach and VCD_Detach save and restore the state of the I/O ports that
control a COM port.
<P>
VCD_Enable_Trapping and VCD_Disable_Trapping enable and disable I/O port
trapping for a COM port.
<P>
VCD_Set_Owner_Event is an event procedure that sets up register parameters
for calling into VCD_Set_Owner. If a VCD receives a hardware interrupt and
the corresponding port is not currently owned, then VCD schedules an event
to assign the port to the current VM.
<P>
VCD_Set_Owner calls VCD_Attach and VCD_Detach as necessary to assign a COM
port to a VM.
<P>
VCD_Assign performs contention processing. When VCD detects that a new VM
wants to own a port, VCD calls VCD_Assign. VCD_Assign first checks to see
if the port is owned. If not, it can assign the port; otherwise, it must
determine what should be done about the contention.
<P>
VCD_Virtualize_IRQ is called the first time that a COM port is assigned. It
calls the virtual programmable interrupt controller device (VPICD) to
virtualize the IRQ that the COM port uses.
<P>
<P><h3>Port Trapping</h3>
 
<P>
The routines VCD_Trap_COM1, VCD_Trap_COM2, VCD_Trap_COM3, and VCD_Trap_COM4
are the front-line routines that trap the I/O ports that correspond to a
COM port. Each routine sets the ESI register to point to the correct COM
data structure and drops into VCD_Dispatch_IO.
<P>
VCD_Dispatch_IO determines how to handle the I/O. In some cases it just
handles it virtually by saving the written data or by returning the current
virtual state. VCD_Dispatch_IO can also perform physical I/O if the port is
already owned, and it can call VCD_Assign to assign the port.
<P>
The individual routines for the virtual I/O are:
<P>
VCD_Virt_In_Out_RxTxB, VCD_Virt_In_Out_IER, VCD_Virt_In_IIR,
VCD_Virt_In_LCR, VCD_Virt_Out_LCR, VCD_Virt_In_MCR, VCD_Virt_Out_MCR,
VCD_Virt_In_LSR, and VCD_Virt_In_MSR. These routines handle INs and OUTs
for a single I/O port associated with a COM port.
<P>
<P><h3>Miscellaneous</h3>
 
<P>
VCD_Control is the control procedure that is required in every VxD to
handle system control broadcasts (see System_Control service in Chapter 33
of the "Microsoft Windows Device Development Kit Virtual Device Adaptation
Guide").
<P>
VCD_Set_Focus forces ownership of "global" COM ports to the current VM.
This service is most often used for a serial mouse, so that COM interrupts
go to the VM that has the focus and, therefore, owns the mouse.
<P>
VCD_Suspend_VM calls VCD_Clear_Int to clear any outstanding interrupts for
a COM port when its owner VM is suspended.
<P>
VCD_Notify_VxD notifies another VxD about state changes for a COM port that
has been virtualized with the VCD_Virtualize_Port service.
<P>
VCD_Destroy_VM calls VCD_Detach through VCD_Detach_If_Owner for any COM
ports owned by the VM that is being destroyed.
<P>
VCD_Soft_Int_14h monitors Interrupt 14h calls and records the current
system time as an indication of "last use;" this time is used to determine
if a port can be stolen when contention is detected.
<P>
<P><h3>Interrupt Processing</h3>
 
<P>
VCD_Int_for_1, VCD_Int_for_2, VCD_Int_for_3, and VCD_Int_for_4 are the
front-line routines called by VPICD when a hardware interrupt for a COM
port requires service. Each routine sets up ESI to point to the correct COM
data structure and then jumps to the actual handler.
<P>
VCD_VirtInt_For_1, VCD_VirtInt_For_2, VCD_VirtInt_For_3, and
VCD_VirtInt_For_4 are all similar to VCD_Int_for_x, but handle VPICD calls
for virtual interrupts simulated into a VM.
<P>
VCD_EOI_for_1, VCD_EOI_for_2, VCD_EOI_for_3, and VCD_EOI_for_4 are also
similar, but handle VPICD calls for when a VM executes an EOI instruction
to end processing of a COM port's simulated interrupt.
<P>
VCD_Mask_for_1, VCD_Mask_for_2, VCD_Mask_for_3, and VCD_Mask_for_4 are also
similar and handle VPICD calls for when a VM masks or unmasks a COM port's
IRQ.
<P>
VCD_IRET_For_1, VCD_IRET_For_2, VCD_IRET_For_3, and VCD_IRET_For_4 are also
similar and handle VPICD calls for when a VM returns from a simulated
interrupt (IRET).
<P>
VCD_Sharable_Int is the default hardware interrupt handler when a COM
port's IRQ is shared with another device in the system, including another
COM port. VCD_Sharable_Int reads and records the interrupt identification
register for the port and checks to see if the port has requested an
interrupt. If the port has requested an interrupt, then it falls into
VCD_Int. If not, it chains the interrupt to the next handler.
<P>
VCD_Int is the default hardware interrupt handler. VCD_Int determines if
ownership needs to be assigned, in which case it schedules an event;
otherwise, it requests a virtual interrupt into the owner VM by calling
VPICD.
<P>
VCD_Sharable_EOI and VCD_EOI watch for the VM to enable an interrupt and
boost the execution time of the VM to give it some extra time to process
the interrupt.
<P>
VCD_Mask is the default mask handler that is called when a VM masks or
unmasks a COM port IRQ. VCD_Mask calls VCD_Assign to attempt to assign
ownership of the COM port to the current VM.
<P>
VCD_Xmit_CallBack, VCD_Enable_THRE, VCD_Sharable_COMM_Int, VCD_COMM_Int,
VCD_LineStat, VCD_DataAvail, VCD_XmitEmpty, VCD_ModemStatus, and
VCD_Eat_Interrupt essentially duplicate the functionality of the interrupt
handler built into COMM.DRV. This duplication provides a 32-bit ring 0
interrupt handler to an application developed for Windows through the
standard Windows COMM interface and significantly improves the performance
of enhanced mode Windows.
<P>
<P><h3>Services</h3>
 
<P>
The VCD_Virtualize_Port service provides a way for another VxD to claim
virtualization ownership of a COM port. The VxD can then handle trapped I/O
and hardware interrupts. VCD passes interrupts to this other VxD, maintains
port ownership state information, and handles contention between VMs.
<P>
VCD_Get_Version returns a VxD implementation version number.
<P>
VCD_Set_Port_Global is called by the virtual mouse driver (VMD) to indicate
that the COM port used by the mouse should be considered global and to
disable contention checking.
<P>
VCD_Get_Focus determines the current owner of a COM port.
<P>
<P><h3>Protected Mode Functions (Mainly Provided for COMM.DRV Interface)</h3>
 
<P>
A function in VCD enables COMM.DRV and the Windows Control Panel to send
data to VCD.
<P>
VCD_PM_Get_Version returns the current implementation version.
<P>
VCD_PM_Get_Port_Array returns an array of available COM ports.
<P>
VCD_PM_Get_Port_Behavior returns the current value of the "auto assign"
time limit used to determine how to handle contention.
<P>
VCD_PM_Set_Port_Behavior allows the Control Panel to modify the "auto
assign" value for a COM port.
<P>
VCD_PM_Acquire_Port and VCD_PM_Free_Port are used by COMM.DRV to enable and
disable the special ring 0 interrupt handler implemented in the VCD.
<P>
<P><h3>Debugging</h3>
 
<P>
VCD_Debug_Dump and VCD_Dump2 are available in the debugging version of VCD.
These routines dump a few of the internal data structures maintained by
VCD.
<P>
NOTE: For a detailed description of the communications driver functional
structure of Windows for Workgroups 3.11, please refer to the document
VCOMM.DOC in the DDK.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.11 3.x COMM DDKVCD<BR>
KBCategory: kbprg kbwebcontent<BR>
KBSubcategory: D3CommVcd<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 30, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

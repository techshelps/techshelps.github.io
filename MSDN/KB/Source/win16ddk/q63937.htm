

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: DMA in Windows 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q63937 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1990/07/17">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16ddk">
<META NAME="Description" CONTENT="  DMA requires special handling in the different modes of Windows version 3.0. The main concern of this article is the virtualization of the DMA ports that is done by the enhanced-mode Windows.  In real mode, DMA can be programmed and performed as us...">
<META NAME="Product" CONTENT="Win16 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDI6,QABB,QAC2,QA5W,QABA,QDL9,QBWO,QBWN,QBWQ,QANY,QAR5,QAJH,QACK,QAH4,QBWD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: DMA in Windows 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q63937 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Device Development Kit (DDK) for Windows version
   3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
DMA requires special handling in the different modes of Windows version
3.0. The main concern of this article is the virtualization of the DMA
ports that is done by the enhanced-mode Windows.
<P>
In real mode, DMA can be programmed and performed as usual, as in a normal
DOS application.
<P>
This article addresses the following topics:

<OL><P><LI>DMA in enhanced mode (including bus master DMA, the Virtual DMA
   Specification [VDS], and the DMABUFFERSIZE SYSTEM.INI switch)

<P><LI>DMA in standard mode
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>DMA in Enhanced Mode</h3>
 
<P>
In enhanced mode, standard (on AT-type machines) DMA channels are
virtualized. The Virtual DMA Device (VDMAD) translates (or maps) the linear
address to the physical address. As long as an application program can
obtain a linear address that is less than 24 bits, it can program the
standard DMA channels using the linear address as a physical address. For
example, programs (such as MS-DOS-based applications) running in Virtual 86
mode can program the standard DMA channels as they can in real mode. The
linear address in the Virtual 86 mode is calculated as (segment&lt;&lt;4)+offset.
When this address is used on the standard DMA channels, it is translated
(mapped) by the Virtual DMA Device. In other words, the translation is done
transparently through I/O virtualization.
<P>
However, there are two situations when an application cannot rely on VDMAD
to do the translation:

<OL><P><LI>A program running in protected mode, such as a Windows program,
   cannot usually obtain linear addresses that are less than 24 bits.

<P><LI>When dealing with a Bus Master DMA controller, because its I/O ports
   are not standard, there is no virtualization of its ports. Even if
   the application can obtain a linear address less than 24 bits,
   VDMAD cannot perform translation on ports that it doesn't know
   about.
<P>
</OL>In these cases, the application must use the Virtual DMA Specification
(VDS) services. VDS services are provided by enhanced-mode Windows as an
API through INT 4Bh. VDS provides services to lock a linear DMA region and
return a physical address for the region. The application can specify
whether an automatic remap should or should not be attempted when
necessary. The returned physical address can then be used to program the
DMA channels. VDS also provides a service to Scatter/Gather lock a linear
region. This service is typically used on DMA devices that can perform
Scatter/Gather.
<P>
To use VDS lock region services, an application needs to know either the
virtual address selector(segment):offset or the linear address. The linear
address in protected mode can be obtained using GetSelectorBase() (see
below for more information). Please be advised that due to a problem in
Windows 3.0, it is sometimes necessary to perform GlobalPageLock() on the
DMA regions before using the VDS locking services. [See the Windows SDK
reference for GlobalPageLock().]
<P>
Note that a program should disable the DMA translation using the VDS
enable/disable translation service before it uses the physical address to
program the standard DMA channels. It should enable the translation after
the DMA channel is programmed.
<P>
The following is information about the DMABUFFERSIZE switch in SYSTEM.INI.
In enhanced-mode Windows, when an application relies on VDMAD to do the
translation, VDMAD may use a buffer it has allocated during initialization
time to remap the DMA region. This buffer has a default size of 16K. The
size may be changed to a larger one by setting the switch DMABUFFERSIZE in
SYSTEM.INI to a value greater than 16. If a DMA region that requires
remapping has a size greater than that of the allocated remapping buffer,
Windows will crash and ask the user to set the DMABUFFERSIZE switch to a
greater value. It is the application's responsibility to inform the user
about this and have the user modify the SYSTEM.INI switch beforehand.
<P>
The Virtual DMA Specification supported by Windows enhanced mode and
standard mode can be found in the Microsoft Software Library.
<P>
Download VDS.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/VDS.EXE">VDS.EXE</A> <I>(size: 37293 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \softlib\mslfiles directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/VDS.EXE">VDS.EXE</A> <I>(size: 37293 bytes)</I> 
</PRE><P>
</UL>These services are necessary for applications that program DMA in Windows
3.0 enhanced mode. VDS contains the following files:
<P>
<PRE>   Filename       Description
   --------       -----------

   DMA_API.DOC    Virtual DMA Specification in Microsoft Word format
   WINDOC.STY     Style sheet used by DMA_API.DOC
   DMA_API.TXT    The same specification in text format

</PRE></OL><h3>DMA in Standard Mode</h3>
 
<P>
VDS services are also provided in Windows standard mode. Windows-based
applications can utilize the same services to do DMA in standard mode as in
enhanced mode. MS-DOS-based applications running under standard-mode
Windows may not have access to VDS services. Because MS-DOS-based
applications are running in real mode, they should do the DMA programming
as they would in the MS-DOS environment.
<P>
It is also possible for applications running in standard mode Windows to
perform DMA without using VDS. This is because in standard mode, the linear
address is the same as the physical address, the memory is contiguous, and
memory addressing is limited to 24 bits (the 16 MB address space limit of
the 80286 processor). Also, there is no virtualization on the DMA I/O
ports, or other I/O ports in standard mode. The Windows-based application
should obtain the linear address of the DMA region and program the DMA
directly.
<P>
To obtain the linear address, the application should call GetSelectorBase()
to obtain the base address first. GetSelectorBase() is documented in the
Windows SDK reference.
<P>
<PRE>   DWORD dwBase ;
   WORD wSelector ;
   DWORD dwPhyAddr ;

   wSelector = (WORD)(lpBuffer &gt;&gt; 16) ; // selector of the
   buffer address.

   dwBase = GetSelectorBase (wSelector) ;
   dwPhyAddr = dwBase + (0x0000FFFF &amp; lpBuffer) ; // base +
   offset

</PRE>Note that although dwPhyAddr is a 32-bit variable, only the lower 24 bits
will be nonzero. The 80286 can only address up to 24 bits of address space.
The DMA controller can usually take 24 bits. If it can only take up to 20
bits, GlobalDOSAlloc() should be used to allocate the memory.
GlobalDOSAlloc() allocates memory within the first 1 MB range. Please see
the SDK reference for information on GlobalDOSAlloc().
<P>
Memory allocated in standard mode is physically contiguous. However, it is
the application program's responsibility to make sure the memory block does
not overlap a segment boundary. Most DMA controllers wrap around when they
reach a segment boundary. The application program should break the DMA
transfer into two smaller transfers in this case: the first transfer ends
at the segment boundary and the second one begins at the segment boundary.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 softlib VDS.EXE<BR>
KBCategory: kbprg<BR>
KBSubcategory: DthreeMiscCoding<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

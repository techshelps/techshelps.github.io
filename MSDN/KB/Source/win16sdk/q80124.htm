

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving the Names of Simultaneous Tasks Under Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q80124 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1992/01/20">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  There are situations when it is necessary for an application to obtain a list of all applications that are running in the Windows environment at a particular time.  In Windows 3.0, instead of using the EnumWindows() function and an application-supp...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWQ,QAUJ,QAGQ,QAY5,QAE1,QALW,QBV8,QAB9,QAUD,QAJH,QARM,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Retrieving the Names of Simultaneous Tasks Under Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q80124 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are situations when it is necessary for an application to obtain
a list of all applications that are running in the Windows environment
at a particular time.
<P>
In Windows 3.0, instead of using the EnumWindows() function and
an application-supplied callback function to enumerate all parent
windows, the application can retrieve a handle to the first window in
the task list and walk through the list to obtain the names of all
windows in the task list.
<P>
In Windows 3.1, however, an application should instead use the ToolHelp
Library functions. More specifically, use TaskFirst(), TaskNext(),
ModuleFirst(), and ModuleNext().
<P>
NOTE: Since the ToolHelp functions work in Windows 3.0 and since ToolHelp
is itself a redistributable library, these functions can be safely used in
Windows 3.0 also.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The most efficient way to retrieve the name of each task running under
Windows 3.0 is to use the GetWindow() function. GetWindow (hwnd,
GW_HWNDFIRST) provides the handle to the first window in the task list. The
application can walk through the task list by calling GetWindow
(hwndCurrent, GW_HWNDNEXT). The following example demonstrates how to
obtain a handle to each top-level window. The GetWindowText() function
provides the name of each window from its handle.
<P>
<PRE>    hwndNext = GetWindow(hWnd, GW_HWNDFIRST);
    /* Where: hWnd is the original/current window. GW_HWNDFIRST will
       return the first sibling window for a child window, otherwise
       it returns the first top-level window in the system's list of
       top-level windows */
    while (hwndNext)
    {
       if ((hwndNext != hWnd) &amp;&amp;  // Do not get this application's
                                  // name.
           (IsWindowVisible(hwndNext)) &amp;&amp;
           (!GetWindow(hwndNext, GW_OWNER)))
       {
          if (GetWindowText(hwndNext, (LPSTR)szTemp, sizeof(szTemp)))
          {
            // This is a valid top-level window handle.
            // Its name is in szTemp...
          }
       }
       hwndNext = GetWindow(hwndNext, GW_HWNDNEXT);
    }

</PRE>The code above will retrieve the name of each visible window. To also
retrieve the names of invisible windows, remove the call to
IsWindowVisible().
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrTsksIns<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Code Demonstrates Multiple Instance DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q81335 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1992/03/03">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  A dynamic-link library (DLL) in the Windows environment has a single data segment that is used by each task (application instance) that links to the DLL. However, there are many situations in which a DLL must maintain data for each individual task....">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAL4,QAYY,QAKD,QAG0,QDNN,QDL9,QBWO,QBWN,QAUR,QAH4,QAHC,QAEF,QAIF,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Code Demonstrates Multiple Instance DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q81335 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A dynamic-link library (DLL) in the Windows environment has a single
data segment that is used by each task (application instance) that
links to the DLL. However, there are many situations in which a DLL
must maintain data for each individual task. This article discusses
the method used by the MULTINST sample application to create a
multiple instance DLL. The DLL creates a separate data segment for
each task that links to it.
<P>
Download MULTINST.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/MULTINST.EXE">MULTINST.EXE</A> <I>(size: 26551 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/MULTINST.EXE">MULTINST.EXE</A> <I>(size: 26551 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
Because each task in the system has a separate stack segment, the
value of the stack segment can be used as a unique identifier.
MULTINST stores data for each task in a block of memory obtained using
GlobalAlloc(). Each time a task calls the DLL, use the value of its
stack segment as an index into the table of selectors for the global
memory blocks. Load the corresponding selector into the DS register.
After this is done, all static data and the local heap correspond to
the calling task.
<P>
When a new task calls into the DLL for the first time, the DLL
allocates a new block of memory to hold data for the task. It copies
initial values for static variables into the data block, and
initializes a local heap.
<P>
When a task that uses the DLL shuts down, it calls the UnregisterTask()
function in the DLL, which frees the data block associated with the task
and removes the task from the DLL's task list. Failing to call
UnregisterTask() might cause serious problems because Windows could
reassign a stack segment value to a new task. If this task called the DLL,
it would receive the data values associated with the previous task, which
might be completely inappropriate.
<P>
Place the following six lines of code at the beginning of each
function exported by the DLL to load the correct data segment:
<P>
<PRE>   if ((wDS = LoadInstanceData()) == 0) // Get DS for this instance
      return;                           // If DS==0 then out of memory

   _asm {
        mov     ax,wDS
        mov     DS,ax
        }

</PRE>The following text describes each function in the MULTINST DLL:
<P>
AddTask(): Allocate data for the task, initialize the data, and add the
<PRE>           task to the task list.

</PRE>FillHeap(): Allocate memory in the local heap until LocalAlloc fails.
<PRE>            Used to demonstrate that the local heap will grow.

</PRE>InitInstanceData(): Save initial values of static variables and
<PRE>                    initialize the task list.

</PRE>LibMain(): Save the initial values of static variables and the initial
<PRE>           size of the data segment and the heap.

</PRE>LoadInstanceData(): Retrieve the segment address (selector) to the data
<PRE>                    for the task that called the DLL.

</PRE>LookUpTask(): Given the value of the stack segment for the task, look up
<PRE>              the segment address (selector) for the data for the task.
              If the task is not in the list, this function returns zero.

</PRE>StoreData(): Save a string in the local heap.
<P>
WEP(): Required by a DLL.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 softlib MULTINST.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: KrDll<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

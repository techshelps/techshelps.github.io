

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading and Writing Icons from ExtractIcon </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104570">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1993/09/22">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  This article is specifically about device dependent icons. The ExtractIcon() function does not save the contents of the icon to a file. The programmer needs to implement this in his or her application. Below are code samples that allow you to read ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QALW,QDMW,QBFN,QAY2,QDL9,QBWO,QBWN,QAI4,QBVV,QAUR,QAD7,QAH7,QAH6,QBW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Reading and Writing Icons from ExtractIcon</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104570</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10 3.00
WINDOWS
kbprg kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows,
   version 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article is specifically about device dependent icons. The
ExtractIcon() function does not save the contents of the icon to a
file. The programmer needs to implement this in his or her application.
Below are code samples that allow you to read and write the data to a file
so that DrawIcon() can be used.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following is a summary of the steps needed to save the hIcon to a file:

<OL><P><LI>Get the desired handle to the icon by using ExtractIcon().
</OL>2. Find the size of the global memory by using GlobalSize().
3. Lock the handle of the icon using GlobalLock().
4. Open a new file by using OpenFile().
5. Write the contents out to the file by using _lwrite().
6. Close the file.
<P>
<PRE>// -----------------------------------------------
//   Parameters: hIcon - passed in
//   Returns:    TRUE on success, FALSE on failure
// -----------------------------------------------
int NEAR _pascal SaveMyIcon( HICON hIcon)
</PRE></OL>{
<PRE>  int       fh, i, iResult;
  UINT      uiSize;
  DWORD     dwSize;
  OFSTRUCT  of;

    if (!hIcon)
      return FALSE;

    dwSize  = GlobalSize(hIcon);
    lpGMem  = GlobalLock(hIcon);
    fh = OpenFile ("myicon.bin", &amp;of, OF_WRITE | OF_CREATE);

    if (fh == -1)  // If NOT opened successfully.
    {
     MessageBox(NULL, "Unable to create file", NULL, MB_OK );
     return FALSE;
    }

    uiSize = _lwrite(fh, (LPSTR)lpGMem, (UINT)dwSize);
    _lclose(fh);

    if (uiSize == -1 || uiSize &lt; (UINT)dwSize)
    {
       MessageBox(NULL, "Unable to read file", NULL, MB_OK );
       return FALSE;
    }
    else // Everything worked, return hGMem.
    {
      return (HICON)hGMem;
    }
</PRE>}
<P>
The following is a summary of the steps needed to read the hIcon from
a file:

<OL><P><LI>Open the file with OpenFile.
</OL>2. Get the size of the file with _fstat.
3. Make a chunk of memory, hMem, for the file by using GlobalAlloc.
4. Lock the memory by using GlobalLock.
5. Read the file into memory by using _lread.
6. Close the file by using _lclose.
7. Unlock the memory by using GlobalUnlock.
8. Pass the hMem to DrawIcon.
<P>
<PRE>// --------------------------------------
// Read in the binary icon data from disk
// --------------------------------------
</PRE></OL>HICON NEAR _pascal LoadMyIcon()
{
<PRE>  int       iResult, fh;
  UINT      nBytesRead;
  struct    _stat   buf;
  OFSTRUCT  ofFileInfo;

  nBytesRead = 0;
  if ( OpenFile((LPSTR)"myicon.bin",(LPOFSTRUCT)&amp;ofFileInfo,OF_EXIST) != -1
</PRE>)
<PRE>  {
    // Open the file. Its existence has already been checked.
    fh = _lopen("myicon.bin", OF_READ);
    if (fh == -1)  // if NOT opened successfully
      return FALSE;

    // File the file structure to get the file size.
    iResult = _fstat(fh, &amp;buf);
    if ( !iResult)
    {
      hGMem = GlobalAlloc(GHND, (DWORD)buf.st_size);
      if (0==hGMem)
      {
        _lclose(fh);
        return(FALSE);
      }

      // Lock the memory.
      if (!(lpGMem = GlobalLock(hGMem)))
      {
        GlobalFree(hGMem);
        _lclose(fh);
        return(FALSE);
      }

      // Seek to the beginning of the file.
      _llseek(fh, 0, 0);
      nBytesRead = _lread(fh, (LPSTR)lpGMem, buf.st_size );
    }
    _lclose(fh);

    if (nBytesRead == -1 || nBytesRead &lt; buf.st_size)
    {
      MessageBox(NULL, "Unable to read file", NULL, MB_OK );
      return FALSE;
    }
    else // Everything worked, return hGMem.
    {
      return (HICON)hGMem;
    }
  }
  else
  {
    MessageBox( NULL, "File not found", NULL, MB_OK );
    return FALSE;
  }
</PRE>}
<P>
WARNING: This will work correctly until the user changes his or her
display-driver type to a different resolution, or from mono to color,
or from color to mono.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: GdiCurico<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: MCIWndClass Popup Window Palette Flashes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q121330">
<META NAME="KBModify" CONTENT="1996/05/16">
<META NAME="KBCreate" CONTENT="1994/10/02">
<META NAME="Keywords" CONTENT="kbmm kbbuglist kbtool kbusage">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  An MCIWndClass popup window realizes its logical palette in the foreground instead of the background as requested in a call to MCIWndRealize() with the fBkgnd flag set to TRUE. The foreground palette realization is seen as a flash.  The following c...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAEV,QAB9,QDL9,QBWO,QBWN,QAPG,QAH4,QAGQ,QAUD,QAHE,QAAF,QAIF,QAYC,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: MCIWndClass Popup Window Palette Flashes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 16, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q121330</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<P>
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
<LI>Microsoft Video for Windows, version 1.1
<P>
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An MCIWndClass popup window realizes its logical palette in the foreground
instead of the background as requested in a call to MCIWndRealize() with
the fBkgnd flag set to TRUE. The foreground palette realization is seen as
a flash.
<P>
The following code demonstrates the setting that results in the flash. The
flash occurs when the popup window receives the input focus from another
application using a different logical palette.
<P>
<PRE>   hwndPanel = MCIWndCreate(hwndParent, hInst,
      MCIWNDF_NOAUTOSIZEMOVIE | MCIWNDF_NOMENU |
      WS_OVERLAPPED | WS_BORDER | WS_CAPTION |
      WS_SYSMENU | WS_POPUP, NULL);
   MCIWndOpen(hwndPanel, fname, 0);
   MCIWndRealize(hwndPanel, TRUE);
   SetWindowPos(hwndPanel, HWND_TOP, X, Y, 0, 0,
      SWP_NOSIZE | SWP_DRAWFRAME | SWP_SHOWWINDOW);
   MCIWndPlay(hwndPanel);

</PRE><h2>CAUSE</h2>
 
<P>
When the MCIWndClass popup window receives the input focus from another
application that uses a different logical palette, the popup window
receives a WM_QUERYNEWPALETTE message that is processed for the popup
window by the MCIWndProc() procedure. In the MCIWndProc() procedure, the
"case WM_QUERYNEWPALETTE:" results in a call to MCIWndRealize() with the
flag fBkgnd set to FALSE. This occurs even if the popup window's palette
was originally realized in the background.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in Microsoft Video for Windows
Version 1.1. We are researching this problem and will post new information
as it becomes available in the Microsoft Knowledge Base.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The problem described in the SYMPTOMS section occurs only with popup
windows. It does not arise when the window style is WS_CHILD. When the
window is a child window, the WM_QUERYNEWPALETTE messages are processed by
the parent window's callback procedure instead of the MCIWndProc()
procedure.
<P>
When the window involved is a popup window, you can avoid the flash by
subclassing the MCIWndProc() procedure and allowing the subclassing
application to process the WM_QUERYNEWPALETTE message directly by calling
MCIWndRealize() with the fBkgnd flag set to TRUE. The following code
demonstrates this workaround:
<P>
<PRE>// MakeProcInstance() is called once in a convenient place such
// as the application's InitInstance() procedure. RealizeProc()
// is the procedure that subclasses MCIWndProc(). RealizeProc()
// will process WM_QUERYNEWPALETTE messages on behalf of
// MCIWndProc(). In the Module Definition File, list the
// RealizeProc() procedure under EXPORTS.

   lpfnRealizeProc = MakeProcInstance((FARPROC)
      RealizeProc, hinstCurrent);

// In the application's MainWndProc() under "case WM_DESTROY:",
// call FreeProcInstance().

   FreeProcInstance(lpfnRealizeProc);

// Add the next two function calls to the code shown in the
// Symptoms section just after the call to MCIWndCreate(). The
// GetWindowLong() call returns a pointer to the popup window's
// original window procedure, namely MCIWndProc(). The
// SetWindowLong() procedure specifies that the RealizeProc()
// procedure is the new window procedure for the popup window.

   lpfnOldRealizeProc = (FARPROC)GetWindowLong(hwndPanel,
      GWL_WNDPROC);

   SetWindowLong(hwndPanel, GWL_WNDPROC, (LONG)
      lpfnRealizeProc);

// The following procedure subclasses MCIWndProc(). It processes
// the WM_QUERYNEWPALETTE messages. All other messages
// are sent to MCIWndProc(), which is pointed to by the
// parameter lpfnOldRealizeProc.

</PRE>long FAR PASCAL RealizeProc(HWND hwndPanel, UINT message, WPARAM
<PRE>               wParam, LPARAM lParam)
{
   switch (message)
   {
      case WM_QUERYNEWPALETTE:
         return (MCIWndRealize(hwndPanel, TRUE));

      default:
          return (CallWindowProc((WNDPROC)lpfnOldRealizeProc,
            hwndPanel, message, wParam, lParam));
   }
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 1.10 mci buglist3.10 buglist1.10<BR>
KBCategory: kbmm kbbuglist kbtool kbusage<BR>
KBSubcategory: MMVideo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 16, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overcoming the 64 Kilobyte Limit for List Box Data </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q79055 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1991/12/10">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="   This article discusses a technique to overcome the 64K size limit for strings in a list box. It does not discuss many of the implementation details of owner-draw list boxes. For more information about these implementation details, please query on ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QATX,QA28,QATJ,QABN,QDL9,QBWO,QBWN,QAYY,QAOE,QAE1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Overcoming the 64 Kilobyte Limit for List Box Data</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q79055 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit for Windows version 3.0
</UL> 
<P>
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses a technique to overcome the 64K size limit for
strings in a list box. It does not discuss many of the implementation
details of owner-draw list boxes. For more information about these
implementation details, please query on the following words:
<P>
<PRE>   prod(winsdk) and odlist

</PRE>Standard list box controls are limited to 64K of data. An application
can overcome this barrier by implementing an owner-draw list box and
managing the data. This can be accomplished by using the list box to
store an index to the data, rather than storing the text of each
string.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In a standard list box control, the data strings are stored in a
global memory block that is allocated and managed by Windows. As the
number of strings in the list box grows, Windows increases the size of
the memory block as necessary to accommodate the data. However, this
block is limited to 64K.
<P>
One method to overcome this barrier is to implement an owner-draw list
box. For each string visible in the list box, Windows sends a
WM_DRAWITEM message to the window procedure of the parent window of an
owner-draw list box. When an application processes a WM_DRAWITEM
message, it displays the string.
<P>
For discussion purposes, assume that the application has an index into
a database of information. Each index identifies a string to be
displayed in the list box. When the application creates the list box,
it is important that the LBS_HASSTRINGS style NOT be specified.
Although the list box displays strings, the data stored in the list
box is a numeric index to the strings, not the strings themselves. Add
the data to the list box using a loop with the following statements:
<P>
<PRE>   SendMessage(hListbox, LB_ADDSTRING, 0, lMyLongIndex);

</PRE>The value lMyLongIndex is a value of type LONG that identifies the
string.
<P>
When the parent window's window procedure receives a WM_DRAWITEM
message, run the following code:
<P>
<PRE>   lMyLongIndex = (LONG)(((LPDRAWITEMSTRUCT)lParam)-&gt;itemData);
   GetString(lMyLongIndex, szString);

   ...

   // Other WM_DRAWITEM processing

   ...

   DrawText(hDC, szString, ...);

</PRE>This code retrieves the index of the selected item from the
DRAWITEMSTRUCT structure pointed to by lParam. GetString() is an
application-defined function that uses the index to retrieve the
string and place it into szString. Finally, the DrawText() function is
used to draw the string into the correct display context (identified
by hDC).
<P>
This method adds one level of indirection to each access of the list
box data. By storing an index to each string in the list box, rather
than storing the strings themselves, the amount of memory required to
maintain the strings in the list box is dramatically reduced. A list
box is limited to 64K of data. Storing a long value for each entry
allows up to 8160 entries in the list box. Each entry requires 8 bytes
(4 bytes for the long value and 4 bytes of overhead) and the list box
itself requires 256 bytes for overhead.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrCtl<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

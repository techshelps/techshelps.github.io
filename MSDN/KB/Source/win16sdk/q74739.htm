

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implicit Casting by C Compiler Can Cause Problems </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q74739 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/07/29">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  When a function call is made in ANSI C, the compiler implicitly casts the arguments passed to the function to the types specified in the function's prototype. Implicit casting to promote signed integers or characters (int, char) to longer unsigned ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKD,QAY5,QDL9,QBWO,QBWN,QA4Q,QBF9,QANY,QBFY,QAB9,QAKC,QAH7,QAH6,QAGI,QAD7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Implicit Casting by C Compiler Can Cause Problems</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q74739 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When a function call is made in ANSI C, the compiler implicitly casts
the arguments passed to the function to the types specified in the
function's prototype. Implicit casting to promote signed integers or
characters (int, char) to longer unsigned types (DWORD, WORD) can
cause unexpected behavior. The difficulties occur because the signed
shorter value is promoted by extending its sign bit to the high-order
bits of the unsigned longer type.
<P>
An application can avert the problems caused by sign extension by
explicitly casting function arguments to unsigned short types.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In accordance with the ANSI standard, if the shorter value has the
sign bit set, the compiler first converts the value to a signed longer
value by extending the sign. The compiler extends the sign by filling
the high-order bits with 1s. It then converts the signed longer value
to unsigned by adding to it the number that is one larger than the
largest unsigned value of that type. This does not change the bit
pattern in a 2s complement implementation. For more information, see
Section 3.2.1.2 of the ANSI C Standard.
<P>
To see how this can cause unexpected behavior, consider an application
in the Microsoft Windows graphical environment that calls the
GlobalAlloc function. The second parameter of the function, dwBytes,
is an unsigned long quantity. However, in this application, this
parameter contains an signed integer expression that evaluates to a
number greater than the largest positive signed integer value
(32,767):
<P>
<PRE>   HANDLE FAR PASCAL GlobalAlloc(WORD, DWORD);  // function prototype

   int a, b; // int = short (16-bit) signed integer

   a = 9500;
   b = 4;

   GlobalAlloc(GMEM_MOVEABLE, a*b);

</PRE>The result of a*b is 38,000 (1001010001110000), and the sign bit of
the int is set. To implement the implicit cast to an unsigned long
value (DWORD), the value is first converted to a signed long value:
<P>
<PRE>   11111111111111111001010001110000
</PRE>The value that is one greater than the largest unsigned long value is
then added, as follows:
<P>
<PRE>      11111111111111111001010001110000
   + 100000000000000000000000000000000
   -----------------------------------
      11111111111111111100101000111000 (4,294,939,760 decimal)

</PRE>GlobalAlloc attempts to allocate 4,294,939,760 bytes of memory rather
than 38,000, and it fails. The GlobalAlloc call in the application
should be as follows:
<P>
<PRE>   GlobalAlloc(GMEM_MOVEABLE, (WORD)a*(WORD)b);

</PRE>Problems caused by implicit casting and sign extension are also
encountered frequently when an application passes characters to the
AnsiUpper and AnsiLower functions. The prototypes for these functions
are as follows:
<P>
<PRE>   LPSTR FAR PASCAL AnsiUpper(LPSTR);
   LPSTR FAR PASCAL AnsiLower(LPSTR);

</PRE>To pass a signed character to AnsiUpper,
<P>
<PRE>   AnsiUpper((DWORD)(BYTE)c) is correct,
   AnsiUpper((DWORD)c) is incorrect.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: TlsMisc<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Determine When Another Application Has Finished </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q67673 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1990/12/08">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Two separate applications sometimes need to cooperate in the Windows environment. Two Windows-based applications may work in tandem, or a Windows-based application may require the services of a an application that is not based on Windows.  This art...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAJH,QDL9,QBWO,QBWN,QBWQ,QAV1,QAV0,QAEV,QAHT,QAY5,QABH,QABI,QBVV,QAYC,QATK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Determine When Another Application Has Finished</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q67673 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Two separate applications sometimes need to cooperate in the Windows
environment. Two Windows-based applications may work in tandem, or a
Windows-based application may require the services of a an application that
is not based on Windows.
<P>
This article examines the issues involved when a Windows-based application
requires notification that another application has completed processing.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
First, the following constraints should be considered:

<OL><P><LI>Windows was not designed to synchronize the operation of a Windows-based
   application with an MS-DOS-based application in any mode (real,
   standard, or 386 enhanced).

<P><LI>Windows does not provide any automatic way to determine if another
   application finished, or ran correctly.
<P>
</OL>This first section included below discusses techniques that can be
included in code that is written for cooperating applications (for
example, when both are Windows-based applications and when one is for
Windows and the other is not). The second section listed below
discusses techniques to apply when the other application is beyond the
programmer's direct influence.
<P>
<P><h3>Techniques to Use for Cooperating Applications</h3>
 
<P>
The following are two options that can be used if the programmer is
developing both applications and each runs under Windows:

<OL><P><LI>The two applications can communicate through a dynamic data
   exchange (DDE) messaging protocol that the programmer establishes.

<P><LI>Each application can register the same application-specific message
   text with Windows via the RegisterWindowMessage() function and
   receive a numeric value for the message. The terminating
   application then sends this value to the other application. This
   can be accomplished by broadcasting the message to all windows in
   the system. See the documentation for PostMessage().
<P>
</OL>When one of the cooperating applications that is being developed does
not run under Windows, the following must occur:

<OL><P><LI>When the MS-DOS-based application completes or encounters a fatal error,
   it should write a message into a specified file in the TEMP
   directory.

<P><LI>The Windows-based application should then perform the following steps:
<P>
   a. Use the SetTimer() function to create a system timer that will
<P><PRE>      fire at desired intervals. The estimated completion time of the
      function is one possible interval. Another would be "estimated
      time to first possible failure" if the MS-DOS-based application will
      be writing an error string for the Windows-based application to
      display.
</PRE><P>
   b. Initiate the execution of the MS-DOS-based application with the
<P><PRE>      WinExec() function and continue with any normal processing.
</PRE><P>
   c. Upon receipt of the timer message, the TEMP directory can be
<P><PRE>      checked to determine if a message file is present. If the file
      is present, the message in the file is parsed to see if
      termination was due to success or failure.
</PRE><P>
</OL><h3>Techniques to Use for Third-Party Applications</h3>
 
<P>
For a third-party application, the steps taken must access information
that is entirely external to the MS-DOS-based application. One possible
way to implement this method is to use the title of the WINOLDAP
window to determine if the application is still running. In this case,
the following steps should be taken:

<OL><P><LI>Use the SetTimer() function to create a system timer. Timer
   messages should be at least a few seconds apart. This allows
   WINOLDAP to create its window and begin processing.

<P><LI>In real and standard modes, Windows-based application processing stops
   while the MS-DOS-based application is processing. In enhanced mode,
   Windows' behavior depends on the settings in the program
   information file (PIF) that corresponds with the MS-DOS
   application. For more information about the allocation of the
   processor when an MS-DOS-based application is running, query on the
   following keywords:
<P>
   prod(winsdk) and WinExec() and dependent

<P><LI>When the timer message is received, the FindWindow() function is
   then used to search for the caption of the MS-DOS-based application's
   window. The caption is created from the "Window Title" section of
   its PIF file, or if it is blank or not found, the filename of the
   old application. If the caption is no longer present, the
   application is deemed to have completed its processing.
<P>
</OL>Another possible solution is to create a batch file in MS-DOS that
checks for error level information returned from the program, and then
creates files in the TEMP directory. The Windows-based application can then
check for these "result" files to determine the MS-DOS-based application's
status.
<P>
The following batch file creates a sentinel file named BEGIN.TMP.
Until this file is deleted, the MS-DOS-based application is considered to
be running. Successful completion creates the result file, END.TMP, and
then BEGIN.TMP is deleted. An execution error creates the result file
named STOP.TMP, and then removes BEGIN.TMP.
<P>
<PRE>     1:  echo start &gt; %TEMP%\begin.tmp
     2:  MyDosApp
     3:  if errorlevel 1 goto bad
     4:  if errorlevel 0 goto good
     5:  goto end
     6:  :bad
     7:  echo bad &gt; %TEMP%\stop.tmp
     9:  goto end
     10: :good
     11: echo good &gt; %TEMP%\end.tmp
     12: goto end
     13: :end
     14: del begin.tmp
     15: goto end

</PRE></OL>A system timer is employed as above to direct the Windows-based application
to check for the existence of the sentinel and result files.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrTsksIns<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Multiple Application Instance Data in a DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q40962 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1989/02/07">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  DLLINST is a file in the Microsoft Software Library that demonstrates how a dynamic-link library (DLL) can interact with more than one application at a time with each interaction independent from the others. To illustrate the independence of each i...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAJH,QAY5,QDNN,QAIF,QAF3,QAH6,QAYY,QBV8,QAB5,QAB9,QDL9,QBWO,QBWN,QA01 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Multiple Application Instance Data in a DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q40962 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
DLLINST is a file in the Microsoft Software Library that demonstrates how a
dynamic-link library (DLL) can interact with more than one application
at a time with each interaction independent from the others. To
illustrate the independence of each interaction, the DLL maintains
separate data for each application instance. This article discusses
the techniques used in DLLINST.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When a DLL receives a call from an application, nothing in the call
specifies the application instance involved. Because instance
information is required to ensure that each interaction is
independent, the application's instance is one of the parameters for
the interface functions provided by the DLL.
<P>
If the DLL contains global data that are used by each application
instance, the following techniques help avoid data access conflicts:

<OL><P><LI>Use a flag as a mutual-exclusion semaphore. This will ensure that
   only one application instance can use the DLL at any given time.

<P><LI>Use additional storage in the DLL to provide each application
   instance with its own data area. One way to implement this is
   through a list of records that is indexed by the instance.
<P>
</OL>DLLINST is a sample application in the Microsoft Software Library that
demonstrates the technique of tracking the identity of the calling
application. The DLL provides a primitive string edit functionality
within a dialog box, and keeps separate buffers indexed by the
application instance for each open dialog.
<P>
Download DLLINST.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/DLLINST.EXE">DLLINST.EXE</A> <I>(size: 27397 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/DLLINST.EXE">DLLINST.EXE</A> <I>(size: 27397 bytes)</I> 
</PRE><P>
</UL>The DLLINST file contains the source code to two modules, DLLINST.EXE
and DLGDLL.DLL. The DLGDLL file implements the second technique listed
above: instanced data for each calling application.
<P>
Multiple instances of the DLLINST application can call into the DLGDLL
DLL to demonstrate the techniques.
<P>
Note that the application passes hInst (the application's instance
handle) to the DLL through the call to the TestDLLDlg function in
MainWndProc.
<P>
As an alternative, the DLL can call the GetCurrentTask function to
determine which instance is calling. This eliminates the requirement
that hInst be passed in. If the DLL uses hWnd, the DLL can maintain a
separate data area for each window rather than for each instance. This
technique might be useful for a Multiple Document Interface (MDI)
application.
<P>
DLLINST "unregisters" each application before it returns, which frees
the buffer for use by another instance. This prevents data from
persisting across calls to the DLL. Although the DLL can recognize and
register a new instance that calls the DLL for the first time, to
implement persistent data, each instance must call a cleanup function
in the DLL before terminating. This prevents a possible problem where
an instance terminates and its handle is reused by a new instance.
<P>
In Windows version 3.1, the TOOLHELP DLL provides the NFY_EXITTASK
notification to inform a callback function that a task terminated.
The DLL can use this to unregister an application, even if it
terminated abnormally. The callback function can use the
GetCurrentTask and TaskFindHandle functions to determine if the
terminating task has called  the DLL.
<P>
The following relevant function is in the DLLINST.C file:
<P>
<PRE>MainWndProc    Processes messages for the application. Calls the
               TestDLLDlg function in DLGDLL to display a dialog box
               that edits data for a calling instance.

</PRE></OL>The following relevant functions are in the DLGDLL.C file:
<P>
<PRE>DlgProc        Processes messages for DLL dialog box and writes
               DlgItemText to the correct buffer.

TestDLLDlg     Called by each instance of the application to display a
               dialog box.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 softlib DLLINST.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: KrDll<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

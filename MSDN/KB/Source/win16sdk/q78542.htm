

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving MS-DOS Environment Vars from a Windows DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q78542 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1991/11/20">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The C run-time library function getenv() does not work when called from a Windows dynamic-link library (DLL). MS-DOS environment variables can be found by searching the environment block. This article explains a method to retrieve information from ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAX1,QAUD,QDL9,QBWO,QBWN,QAHC,QBWQ,QBVV,QAY5,QASR,QAO3,QAO2,QALW,QAHH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Retrieving MS-DOS Environment Vars from a Windows DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q78542 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The C run-time library function getenv() does not work when called
from a Windows dynamic-link library (DLL). MS-DOS environment variables
can be found by searching the environment block. This article explains
a method to retrieve information from environment variables.
<P>
NOTE: In Visual C++ version 1.0, getenv() does work correctly as long
as you do not link in LIBENTRY.OBJ (you need the default library
version that initializes the run time) and mark your DLL function as
_export to correctly load DS.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In a Windows system, an application's environment block is not
available to a DLL. For this reason, the getenv() C run-time library
function does not work when called from a DLL.
<P>
To gain access to environment variables, an application must use the
Windows GetDOSEnvironment() function, which returns a far pointer to
the environment block of the currently running task. Using this
pointer, the application can search the environment block for the
desired variable. The format of the environment block is as follows:

<OL><P><LI>Each environment variable is followed by an equal sign (=), the
   contents of the variable, and a NULL terminator (\0).

<P><LI>The last environment variable in the block is terminated with two
   NULL characters.
<P>
</OL>An environment variable set with the following MS-DOS command
<P>
<PRE>   set envvar=c:\this\is\a\test

</PRE></OL>is stored in memory as follows:
<P>
<PRE>   ENVVAR=c:\this\is\a\test\0

</PRE>MS-DOS converts environment variables to uppercase letters; therefore,
all searches for an environment variable must take this into account.
<P>
Below is source code to a function called DLLGetEnv() that acts as a
substitute for the getenv() function in a DLL:
<P>
<PRE>/* forward declaration */
</PRE>LPSTR FAR PASCAL DLLGetEnv ( LPSTR );
<P>
<PRE>/*********************************************************************
*  DLLGetEnv ( lpszVariableName )                                    *
*                                                                    *
</PRE>*  Takes a LPSTR to the name of an environment variable and returns  *
<PRE>*  the contents of that variable. Returns NULL if the environment    *
</PRE>*  variable does not exist. The search for the environment variable  *
<PRE>*  is case sensitive.                                                *
*                                                                    *
</PRE>*********************************************************************/
<P>
LPSTR FAR PASCAL DLLGetEnv ( LPSTR lpszVariableName )
<PRE>  {
  LPSTR lpEnvSearch;
  LPSTR lpszVarSearch;

  if ( !*lpszVariableName )  //  Check for a NULL pointer
    return NULL;

                        //  Get a pointer to the MS-DOS environment block
  lpEnvSearch = GetDOSEnvironment ();

  while ( *lpEnvSearch )  //  While there are strings to parse
    {     /*
           *  Make a copy of the pointer to the name of the
           *  environment variable to search for.
           */
    lpszVarSearch = lpszVariableName;

              //  Check to see if the variable names match
    while ( *lpEnvSearch &amp;&amp; * lpszVarSearch &amp;&amp;
            *lpEnvSearch == *lpszVarSearch )
      {
      lpEnvSearch++;
      lpszVarSearch++;
      }
        /*
         *  If the names match, the lpEnvSearch pointer is on the "="
         *  character and lpszVarSearch is on a null terminator.
         *  Increment and return lpszEnvSearch, which will point to the
         *  environment variable's contents.
         *
         *  If the names do not match, increment lpEnvSearch until it
         *  reaches the end of the current variable string.
         */
    if ( *lpEnvSearch == '=' &amp;&amp; *lpszVarSearch == '\0' )
      return ( lpEnvSearch + 1 );
    else
      while ( *lpEnvSearch )
        lpEnvSearch++;

        /*
         *  At this point the end of the environment variable's string
         *  has been reached. Increment lpEnvSearch to move to the
         *  next variable in the environment block. If it is NULL,
         *  the end of the environment block has been reached.
         */
    lpEnvSearch++;
    }

  return NULL;  /*
                 *  If this section of code is reached, the variable
                 *  was not found.
                 */
  }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrDll<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

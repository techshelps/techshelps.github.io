

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Profiling Time Between OutputDebugString and FatalExit </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q68624 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/01/23">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="   During the process of profiling an application, SHOWHITS.EXE typically reveals that a fairly large percentage of time was spent in the Microsoft Windows kernel between the FatalExit and OutputDebugString functions.  This phenomenon occurs because ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAU3,QAMR,QAFH,QAYV,QAYL,QDL9,QBWO,QBWN,QACE,QAY5,QABG,QAHC,QAJH,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Profiling Time Between OutputDebugString and FatalExit</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q68624 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit for Windows versions 3.0
   and 3.1
</UL> 
<P>
<P>
<P><h2>SUMMARY</h2>
 
<P>
During the process of profiling an application, SHOWHITS.EXE typically
reveals that a fairly large percentage of time was spent in the
Microsoft Windows kernel between the FatalExit and OutputDebugString
functions.
<P>
This phenomenon occurs because a large amount of code between
FatalExit and OutputDebugString is not public; however, this code is
common to many public entry points. Therefore, when SHOWHITS.EXE
compares the data generated from profiling an application to the data
in the kernel symbol file, it matches the closest public symbol to the
recorded information. Because the nonpublic code is present,
SHOWHITS.EXE reports that the closest public symbols are FatalExit and
OutputDebugString. However, the application may not be spending any
time in either of these functions; instead, it may be spending time in
some private function that is located between these functions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Because of the nonpublic code, determining exactly how much time the
application is spending in a particular block of code can be
difficult.
<P>
The GetCurrentTime function and conditional compilation can be very
helpful when timing specific sections of application code.
GetCurrentTime returns the amount of time that has elapsed since
Windows started. If an application calls this function before and
after a particular block of code, the application can generate
statistics on how much time is required for this block of code to
execute.
<P>
The following code demonstrates this idea:
<P>
<PRE>// This preprocessor variable should be defined to build a profiling
// version of the application.
#define PROFILING

// This section should be either in the global variable section of the
// application or in the variable declaration section of the function
// to be profiled.
</PRE>#ifdef PROFILING
<PRE>   static char szProfBuf[80];
   static DWORD dwPrevTime, dwCurTime;
</PRE>#endif
<P>
<PRE>// This code initializes the variable and should be placed just before
// the code that is used to time a block of code.
</PRE>#ifdef PROFILING
<PRE>   dwPrevTime = GetCurrentTime();
</PRE>#endif
<P>
<PRE>// This block of code is placed after each section of code timed. It
// will display the elapsed time and update the previous time variable
// so that a number of blocks of code can be timed.
</PRE>#ifdef PROFILING
<PRE>   dwCurTime = GetCurrentTime();
   wsprintf((LPSTR)szProfBuf, (LPSTR)"%lu\n\r\0",
            dwCurTime - dwPrevTime);
   OutputDebugString((LPSTR)szProfBuf);
   dwPrevTime = dwCurTime;
</PRE>#endif
<P>
The sample code listed above displays the elapsed time on a secondary
debugging monitor. If required, this code can be modified to write the
data to a file for analysis instead of displaying the data on a
monitor.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrDebug<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

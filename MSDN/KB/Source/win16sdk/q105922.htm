

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Determine Drive Types in Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105922">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1993/10/27">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The Windows versions 3.0 and 3.1 GetDriveType() function is useful for determining whether a given drive is on a network or uses fixed or removable media, but does not determine the specific type of device that is associated with the drive. This ar...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAC9,QAUD,QAB5,QAKC,QDLP,QAHE,QABH,QABI,QBC6,QAP2,QDL9,QBWO,QBWN,QAY5,QAYS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Determine Drive Types in Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105922</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows,
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Windows versions 3.0 and 3.1 GetDriveType() function is useful for
determining whether a given drive is on a network or uses fixed or
removable media, but does not determine the specific type of device
that is associated with the drive. This article presents a function,
GetDriveTypeEx(), that can determine whether a given drive exists and
whether it is one of the following types of devices:
<P>
<PRE>   Hard disk drive
   RAM disk drive
   CD-ROM drive
   Floppy disk drive
   Remote network drive
   Other removable media drive (such as a Bernoulli box)

</PRE>The function prototype for GetDriveTypeEx() is:
<P>
<PRE>   UINT GetDriveTypeEx(int nDrive);  // 0=A, 1=B, 2=C, etc.

</PRE>The return value of GetDriveTypeEx() is one of the following
constants:
<P>
<PRE>   EX_DRIVE_REMOVABLE       EX_DRIVE_FIXED
   EX_DRIVE_REMOTE          EX_DRIVE_CDROM
   EX_DRIVE_FLOPPY          EX_DRIVE_RAMDISK
   EX_DRIVE_INVALID

</PRE>IMPORTANT NOTE: GetDriveTypeEx() is designed only for 16-bit applications
and dynamic-link libraries (DLLs) for Windows; it will not work in 32-bit
applications or DLLs written for the Win32 application programming
interface (API).
<P>
The Windows 32-bit API version of the GetDriveType() function determines
whether a drive is a RAM disk or a CD-ROM in addition to categorizing the
drive as either removable media, fixed media, or remote. See the Microsoft
Win32 SDK for further information about how to use GetDriveType() in Win32
applications and DLLs.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
GetDriveTypeEx() works by first calling the Windows GetDriveType() function
to categorize the drive as being either fixed, removable, remote (network),
or not present. If the drive is remote, it could be either a CD-ROM drive
or a network drive because CD-ROM drives are mapped by the MS-DOS network
redirector. The best way to determine whether a drive is a CD-ROM drive is
to call the Microsoft CD-ROM Extensions (MSCDEX) CD-ROM Drive Check
function.
<P>
If the drive uses fixed media, it could be either a hard disk or a RAM
disk. A good way to determine whether the drive is a hard disk is to
call the MS-DOS Get Device Parameters IOCTL function and then check
the device type byte in the returned structure. If the drive is not a
hard disk, it can be assumed to be a RAM disk because these are the
only two fixed media devices.
<P>
Finally, if the drive uses removable media, it could be a floppy disk
drive or some other device, such as a Bernoulli box. The MS-DOS Get
Device Parameters IOCTL function can be used to determine whether the
drive is a floppy disk drive; if it is not, it could be a Bernoulli
box or some other less common device.
<P>
The following code for Microsoft C compilers implements GetDriveTypeEx()
and its support functions and all required structures:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>#include &lt;windows.h&gt;
#include &lt;string.h&gt;

   // Return values of GetDriveTypeEx().
#define EX_DRIVE_INVALID    0
#define EX_DRIVE_REMOVABLE  1
#define EX_DRIVE_FIXED      2
#define EX_DRIVE_REMOTE     3
#define EX_DRIVE_CDROM      4
#define EX_DRIVE_FLOPPY     5
#define EX_DRIVE_RAMDISK    6

   // See the "MS-DOS Programmer's Reference" for further information
   // about this structure.

</PRE>typedef struct tagDEVICEPARAMS
<PRE>   {
   BYTE  bSpecFunc;        // Special functions
   BYTE  bDevType;         // Device type
   WORD  wDevAttr;         // Device attributes
   WORD  wCylinders;       // Number of cylinders
   BYTE  bMediaType;       // Media type
                        // Beginning of BIOS parameter block (BPB)
   WORD  wBytesPerSec;     // Bytes per sector
   BYTE  bSecPerClust;     // Sectors per cluster
   WORD  wResSectors;      // Number of reserved sectors
   BYTE  bFATs;            // Number of FATs
   WORD  wRootDirEnts;     // Number of root-directory entries
   WORD  wSectors;         // Total number of sectors
   BYTE  bMedia;           // Media descriptor
   WORD  wFATsecs;         // Number of sectors per FAT
   WORD  wSecPerTrack;     // Number of sectors per track
   WORD  wHeads;           // Number of heads
   DWORD dwHiddenSecs;     // Number of hidden sectors
   DWORD dwHugeSectors;    // Number of sectors if wSectors == 0
                        // End of BIOS parameter block (BPB)
   } DEVICEPARAMS, FAR * LPDEVICEPARAMS;

   // Function prototypes

</PRE>BOOL GetDeviceParameters (int nDrive, LPDEVICEPARAMS dp);
BOOL IsCDRomDrive (int nDrive);
UINT GetDriveTypeEx (int nDrive);
<P>
<PRE>//-----------------------------------------------------------------
// GetDeviceParameters()
//
// Fills a DEVICEPARAMS struct with info about the given drive.
// Calls DOS IOCTL Get Device Parameters (440Dh, 60h) function.
//
// Parameters
//   nDrive   Drive number  0 = A, 1 = B, 2 = C, and so on.
//   dp       Pointer to a structure that will contain the drive's
//            parameters.
//
// Returns TRUE if it succeeded, FALSE if it failed.
//-----------------------------------------------------------------
</PRE>BOOL GetDeviceParameters (int nDrive, LPDEVICEPARAMS dp)
<PRE>   {
   BOOL bResult = TRUE;      // Assume success
   __asm {
         push ds
         mov  bx, nDrive
         inc  bx           // Convert 0-based #'s to 1-based #s
         mov  ch, 08h      // Device category--must be 08h
         mov  cl, 60h      // MS-DOS IOCTL Get Device Parameters
         lds  dx, dp
         mov  ax, 440Dh
         int  21h
         jnc  gdp_done     // CF SET if error
         mov  bResult, FALSE
      gdp_done:
         pop  ds
         }
   return (bResult);
   }

//-----------------------------------------------------------------
// IsCDRomDrive()
//
// Determines if a drive is a CD-ROM. Calls MSCDEX and checks
// that MSCDEX is loaded, and that MSCDEX reports the drive is a
// CD-ROM.
//
// Parameters
//    nDrive    Drive number  0 = A, 1 = B, 2 = C, and so forth.
//
// Returns TRUE if nDrive is a CD-ROM drive, FALSE if it isn't.
//-----------------------------------------------------------------
</PRE>BOOL IsCDRomDrive (int nDrive)
<PRE>   {
   BOOL bResult = FALSE;      // Assume not a CD-ROM drive
   __asm {
         mov  ax, 150Bh       // MSCDEX CD-ROM Drive Check
         xor  bx, bx
         mov  cx, nDrive
         int  2Fh
         cmp  bx, 0ADADh      // Check MSCDEX signature
         jne  not_cd_drive
         or   ax, ax          // Check the drive type
         jz   not_cd_drive    // 0 (zero) means not CD-ROM
         mov  bResult, TRUE
      not_cd_drive:
         }
   return (bResult);
   }

//-----------------------------------------------------------------
// GetDriveTypeEx()
//
// Determines the type of a drive. Calls Windows's GetDriveType
// to determine if a drive is valid, fixed, remote, or removeable,
// then breaks down these categories further to specific device
// types.
//
// Parameters
//    nDrive    Drive number  0 = A, 1 = B, 2 = C, etc.
//
// Returns one of:
//    EX_DRIVE_INVALID         -- Drive not detected
//    EX_DRIVE_REMOVABLE       -- Unknown removable-media type drive
//    EX_DRIVE_FIXED           -- Hard disk drive
//    EX_DRIVE_REMOTE          -- Remote drive on a network
//    EX_DRIVE_CDROM           -- CD-ROM drive
//    EX_DRIVE_FLOPPY          -- Floppy disk drive
//    EX_DRIVE_RAMDISK         -- RAM disk
//-----------------------------------------------------------------
</PRE>UINT GetDriveTypeEx (int nDrive)
<PRE>   {
   DEVICEPARAMS dp;
   UINT uType;

   _fmemset (&amp;dp, 0, sizeof(dp));    // Init device params struct
   uType = GetDriveType (nDrive);

   switch (uType)
      {
      case DRIVE_REMOTE:
            // GetDriveType() reports CD-ROMs as Remote drives. Need
            // to see if the drive is a CD-ROM or a network drive.
         if (IsCDRomDrive (nDrive))
            return (EX_DRIVE_CDROM);
         else
            return (EX_DRIVE_REMOTE);
         break;

      case DRIVE_REMOVABLE:
            // Check for a floppy disk drive. If it isn't, then we
            // don't know what kind of removable media it is.
            // For example, could be a Bernoulli box or something new...
         if (GetDeviceParameters (nDrive, &amp;dp))
            switch (dp.bDevType)
               {
                  // Floppy disk drive types
               case 0x0: case 0x1: case 0x2: case 0x3:
               case 0x4: case 0x7: case 0x8:
                  return (EX_DRIVE_FLOPPY);
               }
         return (EX_DRIVE_REMOVABLE);  // Unknown removable media type
         break;

      case DRIVE_FIXED:
            // GetDeviceParameters returns a device type of 0x05 for
            // hard disks. Because hard disks and RAM disks are the two
            // types of fixed-media drives, we assume that any fixed-
            // media drive that isn't a hard disk is a RAM disk.
         if (GetDeviceParameters (nDrive, &amp;dp) &amp;&amp; dp.bDevType == 0x05)
            return (EX_DRIVE_FIXED);
         else
            return (EX_DRIVE_RAMDISK);
         break;
      }
   return (EX_DRIVE_INVALID);   // Drive is invalid if we get here.
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrDsk<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced WDEB386 Features and Tips </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q74605 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/07/24">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  This article explains some of the more advanced WDEB386 commands and features, including:   - Breakpoint commands (BP/BR)  - Conditional execution command (J)  - Default command (Z)  MORE INFORMATION  Breakpoint Commands  Syntax:     BP[n]         ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB9,QBV8,QABA,QAVI,QANY,QA50,QAKJ,QBQU,QBLX,QAC2,QAR5,QBXS,QAJQ,QDL9,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Advanced WDEB386 Features and Tips</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q74605 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains some of the more advanced WDEB386 commands and
features, including:

<UL><LI>Breakpoint commands (BP/BR)
<LI>Conditional execution command (J)
<LI>Default command (Z)
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Breakpoint Commands</h3>
 
<P>
Syntax:
<P>
<PRE>   BP[n] &lt;address&gt; [&lt;passcount&gt;] ["&lt;breakpoint cmds&gt;"]
   BR[n] E|W|R|1|2|4 &lt;address&gt; [&lt;passcount&gt;] ["&lt;breakpoint cmds&gt;"]

</PRE>A breakpoint command is a string of debugger commands that are
executed when a breakpoint is hit. Semicolons (;) separate commands
from one another. All text is converted to uppercase except for text
surrounded by single quotation marks ('). Two single quotation marks
('') or two double quotation marks ("") in a row act as an escape
character and add one single quotation mark or one double quotation
mark to the string. The maximum length of a breakpoint command is 80
characters. Both normal (set with BP) and 386 debug register (set with
BR) breakpoints can have breakpoint commands.
<P>
The commands BP[n] "&lt;breakpoint command&gt;" or BR[n] "&lt;breakpoint
command&gt;", where n is the breakpoint number, can be used to add or to
change commands corresponding to existing breakpoints. Other
breakpoints or the last breakpoint encountered can be set, cleared,
disabled, or enabled.
<P>
If the breakpoint has no breakpoint command string, WDEB386 executes
the default (ZD) command. (See below for information about the default
command.) The conditional execution command (J) is very useful in
breakpoint commands (see below).
<P>
<P><h3>Conditional Execution Command</h3>
 
<P>
Syntax:
<P>
<PRE>   J &lt;expr&gt; ["&lt;command list&gt;"]

</PRE>This command executes the command list if the expression evaluates to
TRUE (nonzero); otherwise, it continues to the next command in the
command line (not including the ones in the command list parameter).
If the command list contains more than one command, it must be
enclosed in single or double quotation marks. Use a semicolon (;) to
separate commands. No quotation marks are required if the command list
contains zero or one command. The conditional execution command can be
used in breakpoint commands to halt execution when an expression
becomes true or in the default command (see below).
<P>
Any operator, number, or symbol value can be used in the conditional
expression. The following are the most common relational operators
used with this command:
<P>
<PRE>   &gt;    Greater than
   &lt;    Less than
   &gt;=   Greater than or equal to
   &lt;=   Less than or equal to
   ==   Equal to
   !=   Not equal
   &amp;&amp;   Logical AND
   ||   Logical OR

</PRE>The BY, WO, DW, and POI operators are very useful with the J command
because they allow access to bytes, words, or dwords of memory in
conditional expressions, as follows:
<P>
<PRE>   BY   1-byte value from the address
   WO   2-byte value from the address
   DW   4-byte value from the address
   POI  4-byte 16:16 address from the address

</PRE>DW can be used to get a 32-bit flat address in an expression--for
example %(DW ESI).
<P>
Always put a zero in front of a hexadecimal number that begins with a
nonnumeric character. Doing so will prevent the debugger from treating
the number as a symbol and searching all the loaded symbol files. For
example, using 0f000 is faster than f000.
<P>
In Windows version 3.0, the backslash (\) prefix in front of registers
skips the symbol lookup and speeds up the expression evaluation; that
is, \DS:\SI is faster than DS:SI if many symbols have been defined. In
Windows version 3.1, even though the \ prefix is allowed, the \ is not
required to speed up register evaluation because registers are
evaluated first.
<P>
<P><h3>Default Command (Z)</h3>
 
<P>
Syntax:
<P>
<PRE>   ZD                  Run the default command
   ZL                  List the default command
   ZS "&lt;command list&gt;" Set the default command

</PRE>The debugger's initial default command string is R (display
registers).
<P>
The debugger runs the default command string when:

<UL><LI>It reaches a G (go) breakpoint
<LI>It reaches a software breakpoint set by BP (set breakpoint) or by
   BR (set debug register breakpoint), and the breakpoint does not
   have a corresponding breakpoint command string
<LI>It runs a P (program trace) or a T (trace) command
<LI>The user enters ZD at the debugger prompt
<P>
</UL>The ZS command changes the default command. If any errors occur (for
example, if the command line is too long), the default command returns
to the R command. The default command can be any sequence of debugger
commands each separated by a semicolon (;). In the default command, J
commands can be useful.
<P>
<P>
<P><h3>Examples</h3>
 

<UL><LI>Display 8 bytes pointed to by DS:SI, display the registers, and
   stop when DoSomething is executed:
<P>
<P><PRE>      bp DoSomething "db ds:si l8;r"
</PRE>
<LI>Display 16 bytes pointed to by DS:ESI (the default segment register
   is DS) and continue execution every time DoSomething is executed:
<P>
<P><PRE>      bp DoSomething "db esi l10;g"
</PRE>
<LI>Display the window handle, message type, word parameter, and long
   parameter of a Windows message procedure. Specifying sp+4 skips the
   far return address:
<P>
<P><PRE>      bp MyWinProc "dw ss:sp+4 l6;g"
</PRE>
<LI>Display all the messages going to MyWndProc except for WM_TIMER
   messages:
<P>
<P><PRE>      bp MyWinProc "j wo(ss:sp+6) == 113 'g';dw ss:sp+4 l6;g"
</PRE>
<LI>Display and stop each time MyWinProc receives a WM_PAINT message:
<P>
<P><PRE>      bp MyWinProc "j wo(ss:sp+6) == 0f 'dw ss:sp+4 l6';g"
</PRE>
<LI>Break when the AX register equals zero:
<P>
<P><PRE>      bp 167:1454 "j ax == 0;g"
</PRE>
<LI>If the byte pointed to by DS:SI+3 equals 40h when this breakpoint
   is hit, display the register and continue; otherwise, print the
   descriptor table entry in DS:
<P>
<P><PRE>      bp 167:1452 "j by (ds:si+3) == 40 'r;g';dg ds"
</PRE>
<LI>Break when the BP address is reached in real mode:
<P>
<P><PRE>      bp 156:1455 "j (msw and 1) == 1 'g'"
</PRE>
<LI>Because WDEB386 uses C language conventions for Boolean
   expressions, a shortcut that achieves the same result as above is:
<P>
<P><PRE>      bp 156:1455 "j (msw and 1) 'g'"
</PRE>
<LI>Default command needed to continue execution each time the
   application or test program encounters an Interrupt 3:
<P>
<P><PRE>      zs "j (by cs:ip) == 0cc 'g'"
</PRE>
<LI>Trace until the word at 40:1234h is equal to 0EEDh (a primitive
   watchpoint). This operation must be started with a T, a P, or a ZD
   command so that the default command can be executed. If this
   operation is started by the G command, the default command will not
   execute unless execution is stopped on a go breakpoint or on a
   sticky breakpoint with no breakpoint command.
<P>
<P><PRE>      zs "j (wo 40:1234) == 0eed 'r';t"
      zd
</PRE>
<LI>Perform a trace that displays each instruction until control is
   returned to code segment or selector 2CFh. Notice that PN displays
   only the disassembly line and not the register set, saving line
   space on the debugger's terminal screen.
<P>
<P><PRE>      zs "u cs:ip l1; j cs == 2cf 'r';pn"
      zd
<P></BLOCKQUOTE>
</UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbtool<BR>
KBSubcategory: TlsWdeb<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

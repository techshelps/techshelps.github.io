

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>wsprintf() %s Parameters Not Cast to LPSTR </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q64759 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1990/08/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT=" Unrecoverable application errors (UAEs) can result from improperly using the wsprintf() function. Any parameter passed to wsprintf() that corresponds to an %s format string MUST be cast to a LPSTR.  The documentation for wsprintf() in the  Microsoft...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAO2,QAO3,QBF9,QAHE,QAGI,QDL9,QBWO,QBWN,QAAP,QAYL,QATX,QAPN,QAAW,QAIF,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>wsprintf() %s Parameters Not Cast to LPSTR</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q64759 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows,
   versions 3.0 and 3.1
</UL> 
<P>
Unrecoverable application errors (UAEs) can result from improperly
using the wsprintf() function. Any parameter passed to wsprintf() that
corresponds to an %s format string MUST be cast to a LPSTR.
<P>
The documentation for wsprintf() in the "Microsoft Windows Software
Development Kit Reference Volume 1" states:
<P>
<PRE>   Sequence        Meaning
   ----------------------------------------------------------------
   s               Insert a string argument referenced by a long
                   pointer. The argument corresponding to this
                   sequence MUST be passed as a long pointer (LPSTR).

</PRE>Wsprintf() is a function with a variable number of parameters. Therefore,
it must be prototyped using the following C calling convention for a
variable number of arguments:
<P>
<PRE>   int FAR cdecl wsprintf(LPSTR, LPSTR,...);

</PRE>Because the only type information in the prototype describes the output
buffer and the format string, the C compiler cannot perform implicit casts
on the other parameters at compile time. Normally, when a near pointer
(char *) is used as an argument to a function requiring a LPSTR, the
compiler will implicitly cast the (char *) to LPSTR, or (char far *).
<P>
Because the compiler cannot cast any of the additional parameters, in
small and medium model programs, any string pointer that is not
explicitly cast FAR will be passed to wsprintf() as a near pointer.
wsprintf() attempts to retrieve a far pointer from the stack, which
results in an invalid pointer and an unrecoverable application error.
<P>
The following two code fragments show incorrect and correct usage of
%s fields within wsprintf():
<P>
<PRE>//INCORRECT use of a near pointer. Assume small or medium model.

    {
    char        sz[30];      //sz is a NEAR pointer.
    char        szOut[50];   //szOut is also NEAR
    LPSTR       szFar = sz;  //szFar is FAR
        .
        .
        .
    /*
     * Because it is the output buffer, szOut is implicitly cast to a
     * LPSTR. However, sz is pushed on the stack as a NEAR pointer,
     * which wsprintf will pop as a FAR pointer.
     * This call will cause a UAE.
     */
    wsprintf(szOut, "sz=%s", sz);

    /*
     * This call will succeed since szFar is already a LPSTR.
     */
    wsprintf(szOut, "sz=%s", szFar);
        .
        .
        .
    }


//CORRECT--

    {
    char        sz[30];      //sz is a NEAR pointer.
    char        szOut[50];   //szOut is also NEAR
    LPSTR       szFar = sz;  //szFar is FAR
        .
        .
        .
    /*
     * Because it is the output buffer, szOut is implicitly cast to a
     * LPSTR. Due to the explicit cast, sz is pushed on the stack
     * as a FAR pointer.  This call will succeed.
     */
    wsprintf(szOut, "sz=%s", (LPSTR)sz);

    /*
     * This call will succeed since szFar is already an LPSTR.
     * The cast is redundant, but it's free insurance.
     */
    wsprintf(szOut, "sz=%s", (LPSTR)szFar);
        .
        .
        .
    }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: GdiDrw<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Possible Causes of Dialog Box Creation Failure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q80843 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1992/02/17">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The dialog box creation routines (CreateDialog(), CreateDialogParam(), CreateDialogIndirect(), CreateDialogIndirectParam(), DialogBox(), DialogBoxParam(), DialogBoxIndirect(), and DialogBoxIndirectParam()) can fail for several reasons. When one of ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QAIM,QAHP,QAUD,QDL9,QBWO,QBWN,QBVV,QBWQ,QAKD,QAB9,QAWI,QA2O,QAX6,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Possible Causes of Dialog Box Creation Failure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q80843 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The dialog box creation routines (CreateDialog(), CreateDialogParam(),
CreateDialogIndirect(), CreateDialogIndirectParam(), DialogBox(),
DialogBoxParam(), DialogBoxIndirect(), and DialogBoxIndirectParam()) can
fail for several reasons. When one of these functions fails, the
dialog box is not displayed on the screen. Of the causes for dialog
box creation failure, this article discusses nine, which are listed
below, and provides a resolution or explanation:

<OL><P><LI>Application runs out of file handles.

<P><LI>One or more text strings in a dialog resource starts with the
   character represented by the value 255 (0xFF).

<P><LI>Several small compiled resource (RES) files are combined using the
   MS-DOS command "COPY /b".

<P><LI>A dialog box with an edit control cannot be created when at least
   ten dialog boxes, each with one or more edit controls, are open
   simultaneously.
<P>
   NOTE: The above statement is not correct for Windows 3.1 because this is
   a problem relating to real mode and Windows 3.1 does not run in real
   mode.

<P><LI>The dialog resource is not included in the RC file.

<P><LI>Insufficient system resources.

<P><LI>In a dialog registered with a private dialog class, the dialog
   procedure does not return the value returned from DefDlgProc as its
   return value.

<P><LI>Wrong HINSTANCE value used.

<P><LI>A dialog box with an edit control or a combo box with an edit
   control must have a HEAPSIZE statement with a value &gt; 0 in the
   .DEF file.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
The order in which the causes are listed below does not provide any
indication of how often each cause occurs.
<P>
<P><h3>Cause 1</h3>
 
<P>
Application runs out of file handles.
<P>
<P><h3>Resolution 1</h3>
 
<P>
Use the SetHandleCount() function to open more file handles. For more
information on this procedure, query this Knowledge Base on the words:
<P>
<PRE>   resources and SetHandleCount


</PRE></OL><h3>Explanation 1</h3>
 
<P>
Windows requires a file handle to load a resource. Because each dialog box
creation routine loads dialog resources, an application must have at least
one file handle available for that purpose.
<P>
<P><h3>Cause 2</h3>
 
<P>
One or more text strings in a dialog resource start with the character
represented by the value 255 (0xFF).
<P>
<P><h3>Resolution 2</h3>
 
<P>
For an explanation of two methods to work around this cause, query this
Knowledge base on the words:
<P>
<PRE>   string and resource and 255


</PRE><h3>Explanation 2</h3>
 
<P>
Windows uses the number 255 to indicate that a resource is represented by
an ordinal value instead of by a string name. During the process of parsing
the resource that contains one of these characters, Windows incorrectly
skips the next two bytes and treats the new position in the resource as the
next piece of data.
<P>
<P><h3>Cause 3</h3>
 
<P>
Several small compiled resource (RES) files are combined using the MS-DOS
command "COPY /b".
<P>
<P><h3>Resolution 3</h3>
 
<P>
Use the #include directive to combine the files at the source level. If the
Windows Resource Compiler cannot handle the large RC file, consider storing
the resources in a resource-only DLL. For more information, query this
knowledge base on the words:
<P>
<PRE>   combined and res


</PRE><h3>Explanation 3</h3>
 
<P>
The Resource Compiler shipped with version 3.0 of the Windows Software
Development Kit (SDK) has been enhanced to handle resource files much
larger than its Windows 2.x counterpart. The format of the compiled
resource files in Windows 3.0 does not support concatenation of RES files.
<P>
<P><h3>Cause 4</h3>
 
<P>
A dialog box with an edit control cannot be created when at least ten
dialog boxes, each with one or more edit controls, are open simultaneously.
<P>
<P><h3>Resolution 4</h3>
 
<P>
Specify the DS_LOCALEDIT style in the dialog box template, or create the
edit control explicitly with the CreateWindow() function.
<P>
<P><h3>Explanation 4</h3>
 
<P>
For more information, query this Knowledge Base on the words:
<P>
<PRE>   dialog and GlobalAlloc and fails


</PRE><h3>Cause 5</h3>
 
<P>
The dialog resource is not included in the RC file.
<P>
<P><h3>Resolution 5</h3>
 
<P>
Use RCINCLUDE to include the dialog resource in the RC file.
<P>
<P><h3>Explanation 5</h3>
 
<P>
Include the DLG file created by the Dialog Editor into
the RC file so the Resource Compiler can add the dialog resource to
the executable file.
<P>
<P><h3>Cause 6</h3>
 
<P>
Insufficient system resources.
<P>
<P><h3>Resolution 6</h3>
 
<P>
Verify that system resources are not lost because an application does not
delete objects that it creates. For more information, query this Knowledge
Base on the words:
<P>
<PRE>   lost and heapwalk


</PRE>The article "Careful Windows Resource Allocation and Cleanup Improves
Application Hygiene," in the September 1991 issue of the "Microsoft
Systems Journal" discusses this issue further.
<P>
<P><h3>Explanation 6</h3>
 
<P>
Unless each application frees all the resources that it allocates,
eventually Windows does not have enough memory to create the controls
and/or the dialog box itself.
<P>
<P><h3>Cause 7</h3>
 
<P>
In a dialog registered with a private dialog class, the dialog procedure
does not return the value returned from DefDlgProc() as its return value.
<P>
<P><h3>Resolution 7</h3>
 
<P>
Whenever the private-class dialog procedure passes an unprocessed message
to DefDlgProc(), the dialog procedure must propagate the value returned by
DefDlgProc().
<P>
<P><h3>Explanation 7</h3>
 
<P>
When a private-class dialog procedure passes an unprocessed message to
DefDlgProc(), it must return the value returned from DefDlgProc(). This
behavior differs from that of a default-class dialog procedure, which
usually returns FALSE outside the message switch when it does not process a
message. If a private-class dialog procedure is implemented in this way,
and the procedure does not process the WM_NCCREATE message, it will return
FALSE. The CreateWindow() function sends the WM_NCCREATE message to create
the non- client area of the dialog window. CreateWindow() treats a response
of FALSE from the dialog procedure as failure and returns a NULL handle to
the application.
<P>
<P><h3>Cause 8</h3>
 
<P>
Wrong HINSTANCE value used.
<P>
<P><h3>Resolution 8</h3>
 
<P>
Specify the application's instance handle.
<P>
<P><h3>Explanation 8</h3>
 
<P>
The dialog box creation routine must specify the application's instance
because the dialog template is stored in the application instance.
<P>
<P><h3>Cause 9</h3>
 
<P>
A dialog box with an edit control or a combo box with an edit control must
have a HEAPSIZE statement with a value &gt; 0 in the .DEF file.
<P>
<P><h3>Resolution 9</h3>
 
<P>
Set the value of HEAPSIZE to &gt; 0 in your .DEF file.
<P>
<P><h3>Explanation 9</h3>
 
<P>
Windows allocates memory for edit controls out of your local heap. If you
do not have a HEAPSIZE statement, it cannot create the edit control.
<P>
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: fails modal modeless 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrDlgs<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

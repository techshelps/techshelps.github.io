

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: Segment and Handle Limits and Protected Mode Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q68644 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/01/23">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Page 16-25 of the  Microsoft Windows Software Development Kit Guide to Programming  for Windows 3.0 and page 350 of the  Windows Software Development Kit Guide to Programming  for Windows 3.1 state:     Under the Windows standard mode and 386 enhan...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWQ,QAHC,QBW6,QA5W,QABB,QAJH,QAGI,QABN,QAA8,QA7H,QANG,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: Segment and Handle Limits and Protected Mode Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q68644 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg kbdocerr
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Page 16-25 of the "Microsoft Windows Software Development Kit Guide to
Programming" for Windows 3.0 and page 350 of the "Windows Software
Development Kit Guide to Programming" for Windows 3.1 state:
<P>
<PRE>   Under the Windows standard mode and 386 enhanced mode memory
   configurations, there is a system-wide limit of 8192 global memory
   handles, only some of which are available to any given application.

</PRE>With regard to standard mode, this statement is incorrect. The limit is
4096 global memory handles when Microsoft Windows runs in standard mode and
8192 when Windows runs in enhanced mode. Standard mode uses two LDT entries
for each memory handle while enhanced mode uses one LDT entry for each
memory handle.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Each memory block has an associated handle that Windows and applications
running in the Windows environment use to access the block. The Intel 80286
or higher microprocessor maintains records of each segment using a
descriptor, which describes the attributes of each memory block such as its
base address, size, attributes (read, write, execute), and privilege level.
In enhanced mode, each memory block has one handle and at least one
descriptor. In standard mode, each memory block has at least two
descriptors. Because Windows and its applications run in 16-bit protected
mode, global memory blocks larger than 64K (the maximum segment size in 16-
bit protected mode) use several descriptors.
<P>
The architecture of the Intel CPUs requires that each descriptor table fit
into its own 64K segment. Because each descriptor is 8 bytes long, each
descriptor table can hold a maximum of 8192 descriptors (64K divided by 8
bytes equals 8K). Therefore, each descriptor table can manage up to 8192
segments. For more information, see the "386 DX Microprocessor Programmer's
Reference Manual," (Intel Corporation).
<P>
Windows creates a global descriptor table (GDT) for the system, and one
local descriptor table (LDT) for itself and all applications running under
Windows. Because all applications use the same LDT, a maximum of 8192
descriptors are available to Windows and applications. Enhanced mode can
manage a maximum of 8192 segments because each segment requires one
descriptor. Standard mode can manage a maximum of 4096 segments because
each segment requires two descriptors. Because descriptors are used for
code, data, and resource segments, the maximum number of descriptors
available for applications to use for global memory blocks is considerably
less than 8192 and 4096.
<P>
Windows does not provide a way to determine how many selectors are
available for a given application to use. All Windows API functions fail
when there is not enough free memory to satisfy a given request, or when
there are not enough descriptors available. Either way, Windows is unable
to satisfy the application's memory request. It is important that selectors
be used with deliberation because each Windows-based application must
cooperate with other Windows-based applications. Instead of allocating many
small blocks from the global heap, an application should allocate fewer
blocks that are larger in size. The application can then divide each larger
memory block into pieces for its own use.
<P>
If small memory blocks are required by the application, use the local
memory-management routines provided by Windows. A local handle does not
impact the selector limit at all because a local memory block is allocated
inside a global memory block. For example, the LocalAlloc() function
allocates a memory block from an application's or a dynamic-link library's
(DLL's) local heap.
<P>
In some circumstances, it may be advantageous to employ a more
sophisticated memory-management scheme called multiple FAR heaps. This
technique is useful if the application requires a number of blocks of
memory, say 100, and the total number of bytes in each block is not above
64K. Chapter 18 (pages 602-617) of "Windows 3.1 Power Programming
Techniques", 2nd edition by Peter Norton and Paul Yao, contains more
details on this technique. In this chapter, Norton and Yao state the steps
necessary to perform local heap allocation in a dynamically allocated
segment. This chapter effectively describes the technique of using multiple
FAR heaps and also provides some sample code.
<P>
This technique involves four steps:

<OL><P><LI>Globally allocate a block of memory with GlobalAlloc().

<P><LI>Lock the block of memory with GlobalLock().

<P><LI>Initialize the block of memory by calling LocalInit().

<P><LI>Modify the local memory-management routines so each updates the DS
   register to point to the new heap just before a call to a local memory-
   management routine. When access to the new heap is complete,
   immediately restore the DS register.
<P>
</OL>Overall, this technique uses fewer global handles and less memory overhead
with each call.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 docerr<BR>
KBCategory: kbprg kbdocerr<BR>
KBSubcategory: KrMm<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

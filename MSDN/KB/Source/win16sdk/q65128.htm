

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Int 21h and NetBIOS Support for DPMI </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q65128 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1990/08/22">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  This article is part of a set of seven articles, collectively called the  Windows Developer's Notes.  More information about the contents of the other articles can be found in the Microsoft Knowledge Base article:     ARTICLE-ID: Q65260    TITLE   ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAHC,QADN,QAY5,QDL9,QBWO,QBWN,QA5W,QAB9,QAHB,QBWQ,QBV8,QAH4,QAJH,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Windows Int 21h and NetBIOS Support for DPMI</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q65128 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article is part of a set of seven articles, collectively called the
"Windows Developer's Notes." More information about the contents of the
other articles can be found in the Microsoft Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN16SDK/Q65260.htm">Q65260</A></B>
   TITLE     : The Windows Developer's Notes

</PRE>Download WINDOS.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/WINDOS.EXE">WINDOS.EXE</A> <I>(size: 16236 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/WINDOS.EXE">WINDOS.EXE</A> <I>(size: 16236 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
This document provides a brief overview of the DOS Protected Mode
Interface (DPMI) version 0.9 and information on how to obtain a copy
of the specification. It also provides information on Microsoft
Windows version 3.0 support for the following:

<UL><LI>Applications that use DPMI functions whether or not the application
   is based on Windows

<LI>MS-DOS interrupts and function requests under Windows in
   protected mode, and the degree to which they are supported

<LI>NetBIOS in protected mode
<P>
</UL>DPMI enables MS-DOS-based applications to access the extended memory of PC
architecture computers while maintaining system protection. It also
defines a new interface, via software interrupt 31H, that
protected-mode applications use to do such things as allocate memory,
modify descriptors, and call real-mode software.
<P>
Throughout this document and the DPMI specification, the term
"real-mode software" is used to refer to code that runs in the low
1-megabyte address space and uses segment:offset addressing. Under
Windows version 3.0 in protected mode, so-called real-mode software is
actually executed in virtual 8086 mode. However, since virtual 8086
mode is a very close approximation of real mode, both are referred to
as "real mode" in this document.
<P>
For further information on, or to request a copy of, the DPMI
specification, call Intel at (800) 548-4725.
<P>
<P>
 
<PRE>               APPLICATIONS THAT USE DPMI FUNCTIONS
</PRE> 
<P>
Windows version 3.0 running in 386 enhanced mode supports DPMI version
0.9. Windows version 3.0 running in standard mode supports a subset of
DPMI that enables applications to call Terminate-and-Stay-Resident
(TSR) programs and device drivers running in real (or virtual 8086)
mode. All code that calls DPMI directly should reside in a
Dynamic-Link Library (DLL) to ease the porting of the application to
other operating environments.
<P>
Windows-based applications should only call the following AX values for
DPMI version 0.9 functions:
<P>
<PRE>   AX value       Description
   --------       -----------

   0200H          Get real mode interrupt vector
   0201H          Set real mode interrupt vector
   0300H          Simulate real mode interrupt
   0301H          Call real mode procedure with far return frame
   0302H          Call real mode procedure with Iret frame
   0303H          Allocate real mode call-back address
   0304H          Free real mode call-back address

</PRE>NOTE: The table listed above differs from that in the printed copy of
the "Windows 3.00 Developer's Notes" and reflects corrections.
<P>
Windows-based applications should NOT use DPMI's MS-DOS memory management
functions. The Windows version 3.0 Kernel has two functions,
GlobalDOSAlloc() and GlobalDOSFree(), that should be used by Windows
applications and DLLs for allocating and freeing MS-DOS addressable
memory.
<P>
Other than those listed above, no DPMI functions are required for
Windows-based applications because the Kernel provides functions for
allocating memory, manipulating descriptors, and locking memory.
Applications not based on Windows that are running in 386 enhanced mode can
use all the DPMI version 0.9 functions, since they are not restricted by
the Kernel.
<P>
<P>
 
<PRE>            OTHER APPLICATION PROGRAMMING INTERFACES (APIs)
</PRE> 
<P>
In general, any software interrupt API that passes parameters in the
EAX, EBX, ECX, EDX, ESI, EDI, and EBP registers will work as long as
none of the registers contains a selector value. In other words, if a
software interrupt API is completely register-based without any
pointers, segment registers, or stack parameters, that API should work
under Windows in protected mode.
<P>
More complex software interrupt APIs require the calling function to
use the DPMI translation functions.
<P>
<P>
 
<PRE>     SUPPORT FOR MS-DOS INTERRUPTS UNDER WINDOWS IN PROTECTED MODE
</PRE> 
<P>
This section discusses support for MS-DOS interrupts and function
requests made under Windows in protected mode. This discussion assumes
MS-DOS version 3.x or later is being used.
<P>
All the MS-DOS interrupts and function requests that are not mentioned
in this section should work exactly as documented in "The MS-DOS
Encyclopedia."
<P>
<P>
<P><h2>UNSUPPORTED MS-DOS INTERRUPTS AND FUNCTION REQUESTS</h2>
 
<P>
The following MS-DOS interrupts are not supported in protected mode
and will fail if called.
<P>
<PRE>   INT         Description
   ---         -----------

   20H         Terminate program
   25H         Absolute disk read
   26H         Absolute disk write
   27H         Terminate and stay resident

</PRE>The following MS-DOS INT 21H function requests are also not supported
in protected mode.
<P>
<PRE>   Function    Description
   --------    -----------

   00H         Terminate process
   0FH         Open file with FCB
   10H         Close file with FCB
   14H         Sequential read
   15H         Sequential write
   16H         Create file with FCB
   21H         Random read
   22H         Random write
   23H         Get file size
   24H         Set relative record
   27H         Random block read
   28H         Random block write
   67H         SetHandleCount

</PRE><h2>PARTIALLY SUPPORTED MS-DOS INT 21H FUNCTION REQUESTS</h2>
 
<P>
The following MS-DOS INT 21H function requests behave differently in
protected mode than they do in real mode. To use these function
requests, the application might require additional code.
<P>
<P>
<P><h3>Functions 25H and 35H, Set/Get Interrupt Vector</h3>
 
<P>
These functions set and get the protected-mode interrupt vector. They
can be used to hook hardware interrupts, such as the timer or keyboard
interrupt, as well as to hook software interrupts. Except for INT 23H,
INT 24H, and INT 1CH, software interrupts that are issued in real mode
are not reflected to protected-mode interrupt handlers. However, all
hardware interrupts are reflected to protected-mode interrupt handlers
before being reflected to real mode.
<P>
<P>
<P><h3>Function 38H, Get Country Data</h3>
 
<P>
This function returns a 34-byte buffer containing a double word
(DWORD) call address at offset 12H that is used for case mapping. The
DWORD contains a real-mode address. In order to call the case mapping
function, the DPMI translation function to simulate a real-mode FAR
call must be used. See the DPMI specification for more details.
<P>
<P>
<P><h3>Function 44H, Subfunctions 02H, 03H, 04H, and 05H</h3>
 
<P>
These I/O control (IOCTL) subfunctions are used to receive data from a
device or send data to a device. Since it is not possible to break the
transfers automatically into small pieces, the caller should assume
that a transfer of greater than 4K will fail unless the address of the
buffer is in the low 1 megabyte range.
<P>
<P>
<P><h3>Function 44H, Subfunction 0CH</h3>
 
<P>
Only the minor function codes 45H (Get Iteration Count) and 65H (Set
Iteration Count) are supported from protected mode. The extensions of
this IOCTL subfunction that are used for code-page switching (minor
function codes 4AH, 4CH, 4DH, 6AH, and 6BH) are not supported for
protected-mode programs. The DPMI translation functions must be used
if it is necessary to use this IOCTL subfunction to switch code pages.
<P>
<P>
<P><h3>Function 65H, Get Extended Country Information</h3>
 
<P>
This function is supported for protected-mode programs. However, all
the DWORD parameters returned will contain real-mode addresses. This
means that the case-conversion procedure address and all the pointers
to tables will contain real-mode segment:offset addresses. The DPMI
translation functions must be used to call the case-conversion
procedure in real mode.
<P>
<P>
 
<PRE>                          NETBIOS SUPPORT
</PRE> 
<P>
Windows supports standard NetBIOS calls in protected mode. All the
network control blocks and buffers must reside in fixed memory that is
page locked. All code that calls NetBIOS directly should reside in a
DLL to ease the porting of the application to other operating
environments.
<P>
Additional information on NetBIOS and DPMI support in Windows network
drivers is available in Chapter 6, "Network Support," in the
"Microsoft Windows Device Driver Adaptation Guide," which is part of
the Microsoft Windows Device Development Kit (DDK). Additional
information can be found in the Windows developer's note titled
"Developing Network Applications for Windows 3.00," available as
article <B><A HREF="../WIN16SDK/Q65125.htm">Q65125</A></B>.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 Windows 3 Developer's Notes softlib<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: KrDpmi<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

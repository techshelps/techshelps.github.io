

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the WM_CTLCOLOR Message </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q32685 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1988/07/11">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  A WM_CTLCOLOR message is sent to a window each time one of its child window controls (radio button, check box, scroll bar, and so forth) is to be painted on the screen. This message precedes the painting of the control. When it is desirable to chan...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QA7O,QAB5,QAOE,QAMN,QAG9,QDL9,QBWO,QBWN,QBWQ,QAEV,QALW,QAPG,QBVR,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using the WM_CTLCOLOR Message</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q32685 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A WM_CTLCOLOR message is sent to a window each time one of its child window
controls (radio button, check box, scroll bar, and so forth) is to be
painted on the screen. This message precedes the painting of the control.
When it is desirable to change the appearance of controls, this can be done
by processing the WM_CTLCOLOR message.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When WM_CTLCOLOR is sent, wParam contains a handle to the display context
for the child window (in this case the control). The LOWORD of lParam
identifies the child window by its ID number, and the HIWORD of lParam
contains one of the following values, specifying the type of control that
is to be drawn:
<P>
<PRE>   CTLCOLOR_BTN            button control
   CTLCOLOR_DLG            dialog box
   CTLCOLOR_EDIT           edit control
   CTLCOLOR_LISTBOX        list box
   CTLCOLOR_MSGBOX         message box
   CTLCOLOR_SCROLLBAR      scroll bar
   CTLCOLOR_STATIC         static text, frame, or rectangle

</PRE>When WM_CTLCOLOR is processed, a handle to a brush must be returned.
Failure to return a brush handle will result in a Windows FatalExit on the
debugging monitor in the debug version of Windows.
<P>
DefWindowProc() already returns a handle in response to this message;
however, an application can return a different handle to customize the
color of controls. The handle that is returned specifies the brush to be
used to paint the control. For example, in Windows 2.x, the following code
paints the background of all buttons light gray:
<P>
<PRE>        case WM_CTLCOLOR:
            if (HIWORD(lParam) == CTLCOLOR_BTN)
                return (GetStockObject(LTGRAY_BRUSH));

            return (GetStockObject(WHITE_BRUSH));

</PRE>In this case, the backgrounds for all other controls are painted white.
Note that GetStockObject() returns a handle to the stock brush specified by
the parameter. To change the background color of a button control in
Windows 3.0 and later, it is necessary to create an owner draw button.
<P>
Returning a brush handle presents some interesting possibilities because
brush handles are not limited to those returned from GetStockObject().
Pattern brushes can be built from bitmaps. If a pattern brush handle is
returned in response to a WM_CTLCOLOR message, the brush would be used to
paint the background of controls.
<P>
The following code changes the painting of a scroll bar's thumb track area
to the basket-weave pattern found in Paint:
<P>
<PRE>    /* Add these global variables. The array of WORDs specifies the */
    /* pattern for the brush                                        */
    HBRUSH  hBrush;
    HBITMAP hBitmap;
    WORD    wWeave[]={0x0F, 0x8B, 0xDD, 0xB8, 0x70, 0xE8, 0xDD, 0x8E};

     ...

    /* Add these lines to WinMain                                   */
    hBitmap = CreateBitmap(8, 8, 1, 1, (LPSTR)wWeave);
    hBrush = CreatePatternBrush(hBitmap);

     ...

   /* Add this case to the Windows procedure or wherever the       */
   /* messages are processed.                                      */
    case WM_CTLCOLOR:
        if (HIWORD(lParam) == CTLCOLOR_SCROLLBAR)
            return (hBrush);

        return (GetStockObject(WHITE_BRUSH));


</PRE>The WM_CTLCOLOR message also applies to the following five classes of
controls:

<OL><P><LI>Check boxes, radio buttons, and push buttons: Paints the
   rectangular area on which control is placed with selected brush;
   control shape and text is drawn over the painted pattern.

<P><LI>Edit control: Paints the editing area.

<P><LI>Group box: Paints the rectangular area behind the title text.

<P><LI>Scroll bars: Paints the area around the thumb track.

<P><LI>List box: Paints the listing area.
<P>
</OL>Static text, frames, and rectangles are unaffected by WM_CTLCOLOR.
<P>
NOTE: In Windows 3.0 and later, an application cannot change the color of a
button face. However, the user can use the Control Panel to change the
button colors for all applications in the system. This can also be
accomplished by modifying the [colors] section of the WIN.INI file to add a
"ButtonFace=" line that specifies the RGB color value for the button face
color.
<P>
Processing the WM_CTLCOLOR message only changes the color of child windows
created by an application. Windows sends the WM_CTLCOLOR message to the
parent window of each of these controls. Scroll bars that are included by
Windows as a part of edit controls or list boxes are not affected. The
thumb track area of system-generated scroll bars can only be changed in
WIN.INI or through the Control Panel.
<P>
It is also possible to paint the entire background of a dialog box.
The following code can be used to provide a dialog box color:
<P>
long FAR PASCAL MainWindowProc(....);
<P>
<PRE>            ...

      case WM_CREATE:
         hTempBrush = LoadBitmap(hInst, (LPSTR)"MyPatternBrush");
         hBrush = CreatePatternBrush(hTempBrush);
         DeleteObject(hTempBrush);

            ...

      case WM_DESTROY:
         DeleteObject(hBrush);

            ...

</PRE></OL>BOOL FAR PASCAL MyDialogProc(....);
<P>
<PRE>            ...

      case WM_CTLCOLOR:
         if (bMonoChrome)
            return (FALSE);   // Do nothing if on a monochrome monitor
                              // bMonoChrome is a global set during
                              // initialization.

         if (CTLCOLOR_DLG == HIWORD(lParam))
            UnrealizeObject(hBrush);

         SelectObject((HDC)wParam, hBrush);

         if (CTLCOLOR_DLG == HIWORD(lParam))
            SetBrushOrg((HDC)wParam, 0, 0);

         SetBkMode((HDC)wParam, TRANSPARENT);

         SetTextColor((HDC)wParam, RGB(0, 0, 0));

         return(hBrush);

            ...

</PRE>This code will ensure that a patterned bitmap will line up correctly
across the entire dialog box. "MyPatternBrush" is the name of a bitmap
created using SDKPaint. This bitmap must be included in the .RC file.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrPnt<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

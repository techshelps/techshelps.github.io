

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C Run-time Functions Can Use Far Pointers in Medium Model </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q66462 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1990/10/26">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Far pointers to data can be used in calls to the C Run-time library routines written using the medium model. This is often necessary because many Windows-based applications are written using the medium model, but must pass far data pointers to the ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAO2,QAO3,QAPF,QAY5,QAJQ,QAYY,QAOT,QAGI,QAH4,QBV8,QAB9,QAD7,QBLO,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>C Run-time Functions Can Use Far Pointers in Medium Model</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q66462 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Far pointers to data can be used in calls to the C Run-time library
routines written using the medium model. This is often necessary
because many Windows-based applications are written using the medium model,
but must pass far data pointers to the medium model C run-time library
routines. Unless precautions are taken, passing far pointers to medium
model C Run-time routines will fail.
<P>
To use far pointers in calls to medium model C Run-time routines, the
model-independent version of the C Run-time functions must be
explicitly specified. A model-independent version of a C Run-time
function requires specification of the size of the data pointers
required (NEAR or FAR) for both function parameters and return values.
<P>
Not all C Run-time routines have model-independent versions. To
determine if a routine has a model-independent version, please consult
the header file associated with the routine or the C Run-time source
manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When an application is compiled using the medium memory model, the C
compiler assumes that the application will have one data segment and
multiple code segments. Because the application has only one data
segment, all pointers to data are assumed to be near pointers.
Therefore, when the compiler encounters a C Run-time function in the
source code, it automatically assumes that any pointer parameters
contain near pointers. The compiler uses the appropriate medium model
declaration for the run-time functions. This is appropriate for NEAR
data items, but many Windows API functions require or return FAR
pointers, such as GlobalLock().
<P>
To override the compiler's assumptions specify the model-independent
version of the desired routine in the application source code. The
header file associated with the routine or the C Run-time source
manual can be used to determine which C Run-time routines have
model-independent versions. Typically, the model-independent versions
of C Run-time functions are preceded by an "_n" or an "_f". For
example, strdup(), a memory model-dependent function, has two
model-independent derivatives: _nstrdup() for NEAR pointers and
_fstrdup() for FAR pointers.
<P>
When using the model-independent versions of the C Run-time routines,
the compiler will not assume that the application's data is near.
Thus, far pointers can be used in medium model applications where near
pointers would normally be used.
<P>
Unfortunately, not all C Run-time routines offer this flexibility. If
the routine does not have a model-independent version, two options are
available:

<OL><P><LI>Write a model-independent routine that offers the same functionality
   as the C Run-time routine.

<P><LI>Copy the data into the default data segment so that near pointers,
   and the standard C Run-time routines, can be used.
<P>
</OL>One C Run-time routine that demonstrates model independence is
strncpy(). If the application source code includes a line similar to
the following
<P>
<PRE>   Char_ptr = strncpy(String1, Const_String2, Count);

</PRE></OL>the compiler will use the default declaration for the routine. That
declaration is found in the header file and resembles the following:
<P>
<PRE>   char *strncpy(char *string1, const char *string2, size_t);

</PRE>In this situation, the data must be in the default data segment
because the routine will use the DS register when referencing both
strings.
<P>
In the same medium model applications, if one or both of the strings
are in a data segment other than the default data segment, modify the
same source line as follows:
<P>
<PRE>   Char_ptr = _fstrncpy(String1, Const_String2, Count);

</PRE>In this case, the compiler will use the following function declaration
<P>
<PRE>   char _far * _far _fstrncpy(char _far *string1,
                              const char _far*strings,
                              size_t count);

</PRE>and the application will then properly access the data in the far
segments.
<P>
NOTE: When using the same C Run-time routine in a large model application,
the default function declaration will be the model-independent version.
Thus, in the example above, the compiler will replace the call to strncpy()
with an appropriate call to _fstrncpy().
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrModls<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

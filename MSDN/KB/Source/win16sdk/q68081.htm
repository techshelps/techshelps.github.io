

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Single Import Library for Multiple DLLs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q68081 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/01/04">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  A single import library that contains information about multiple dynamic-link libraries (DLLs) can sometimes be useful. One example in the Microsoft Windows graphical environment is LIBW.LIB, which serves as the single import library through which ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QAY5,QDL9,QBWO,QBWN,QBHQ,QAB9,QBVV,QBV8,QAGI,QAB4,QBWQ,QAEQ,QBJQ,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating a Single Import Library for Multiple DLLs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q68081 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A single import library that contains information about multiple
dynamic-link libraries (DLLs) can sometimes be useful. One example in
the Microsoft Windows graphical environment is LIBW.LIB, which serves
as the single import library through which an application can link to
the Windows system DLLs GDI.DLL, KERNEL.DLL, and USER.DLL.
<P>
An import library for many DLLs can be created by supplying multiple
module definition (DEF) files as input parameters to the IMPLIB
utility. However, one must make sure that none of the exported
functions is defined in more than one DEF file. IMPLIB issues an error
message when a function name is defined more than once, which occurs
most often with the Windows exit procedure (WEP) because each DLL must
export its own WEP in its DEF file.
<P>
To avoid an IMPLIB error indicating that the WEP routine is defined
many times, create modified DEF files that do not contain EXPORT
statements for the WEP routine and specify these files as input to
IMPLIB.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Defining a function in an import library more than once creates an
ambiguity when the loader resolves references to functions exported by
other modules. For example, suppose two DLLs that share a common
import library export an Open function. When an application refers to
a function in a DLL, the loader resolves a reference to the function
(known as a fix-up) to its true address (which is not known until run
time). The DLL containing the function must be loaded to provide a
true address for its functions. However, in this example, this poses a
dilemma: because both DLLs contain an Open function, which one should
be used? Because the application's source code makes no distinction
between the two Open functions, the loader cannot resolve the
reference correctly.
<P>
To avoid the potential for ambiguity, IMPLIB issues an error message
for each function that is defined in multiple DEF files and does not
create a combined import library. Two DLLs that share a common
function name cannot share a single import library. The one exception
to this rule is the WEP function, which every DLL must export. Because
an application does not call the WEP, the function need not be listed
in the combined import library.
<P>
To create a single import library, MYIMPLIB.LIB, that can be used to
link to the three DLLs (DLL1, DLL2, and DLL3), perform the following
four steps in this order:

<OL><P><LI>Compile and link all three DLLs as outlined in Chapter 20 of the
   "Microsoft Windows Software Development Kit: Guide to Programming"
   for versions 3.0 and 3.1. Use the original DEF file to link each
   DLL. Each file must list the WEP in its EXPORTS section with the
   RESIDENTNAME qualifier to properly export the WEP function.

<P><LI>Copy the module definition files for each DLL (DLL1.DEF, DLL2.DEF,
   and DLL3.DEF) into three dummy DEF files (DUMMY1.DEF, DUMMY2.DEF,
   and DUMMY3.DEF). These dummy DEF files are used to create the
   combined import library as outlined in Step 3 below. Do not link
   any DLL using its dummy DEF file.

<P><LI>Remove the WEP from the EXPORTS statement of each dummy DEF file.
   Only Windows calls the WEP procedure; the application does not.
   Therefore, the WEP does not need to be defined in the import
   library. Removing the WEP entries prevents an IMPLIB error about
   multiple definitions of the WEP routine.

<P><LI>Use DUMMY1.DEF, DUMMY2.DEF, and DUMMY3.DEF as input parameters to
   the IMPLIB utility, as follows:
<P>
<P><PRE>      IMPLIB MYIMPLIB.LIB DUMMY1.DEF DUMMY2.DEF DUMMY3.DEF
</PRE><P>
</OL>The four steps above build a combined import library that contains the
linkage information required for all of the exported functions in each
of the three DLLs. It does not contain any information about any of
the WEP functions. Because applications do not call the WEP function,
this omission does not cause any linkage problems.
<P>
A dummy DEF file must not be used to link a DLL because a dummy DEF
file does not export the WEP function. Every DLL must export a WEP
that Windows can call before removing the DLL from memory.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrDll<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: DLLSKEL Demonstrates DLL and Calling Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q84932 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1992/05/24">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  DLLSKEL is a file in the Microsoft Software Library that contains the source code for a minimal dynamic-link library (DLL) for the Windows environment. DLLSKEL demonstrates how to correctly implement and compile a multiple-segment DLL.  MORE INFORM...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QDL9,QBWO,QBWN,QBWQ,QAY5,QAH4,QAIF,QDNN,QAJH,QAB9,QAM1,QBV8,QAEF,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: DLLSKEL Demonstrates DLL and Calling Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q84932 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
DLLSKEL is a file in the Microsoft Software Library that contains the
source code for a minimal dynamic-link library (DLL) for the Windows
environment. DLLSKEL demonstrates how to correctly implement and
compile a multiple-segment DLL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This sample has two parts: the multiple-segment DLL and an application
for the Windows environment. The application has all the features of
the Generic sample application provided with the Windows Software
Development Kit and a menu item that calls a function exported from
the DLL. The DLL function creates a message box when it is called by
the application.
<P>
The DLLSKEL sample demonstrates implicitly loading a DLL. However, the
modifications required to explicitly load the DLL are straightforward.
<P>
Download DLLSKEL.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/DLLSKEL.EXE">DLLSKEL.EXE</A> <I>(size: 31727 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/DLLSKEL.EXE">DLLSKEL.EXE</A> <I>(size: 31727 bytes)</I> 
</PRE><P>
</UL>To properly implement a DLL, one must consider several program
details. DLLSKEL demonstrates how to address all these details to
create a simple DLL.
<P>
In the DLLSKEL sample, the DLL has multiple code segments. The Windows exit
procedure (WEP) is placed in a fixed segment while the remainder of the
code is placed in movable, discardable segments. The WEP must reside in a
fixed code segment so that it can be called at all times, even when the
system has very little free memory. Consider the situation in which Windows
has discarded the segment containing the WEP. When Windows calls the WEP,
the segment must be loaded back into the system and all relocations to
other segments must be fixed up, which might require other segments to be
loaded. If the system does not have enough memory to load all the required
segments, or if some of the segments no longer exist, Windows will report
an unrecoverable application error (UAE) or general protection (GP) fault
because it cannot completely load the segment containing the WEP. If the
WEP is placed in a fixed code segment, the relocations are fixed up only
once, which completely avoids this situation.
<P>
The WEP was originally designed to allow a DLL that hooked an interrupt to
unhook it before termination, not to provide a general-purpose cleanup
procedure for a DLL. Under Windows 3.0, the WEP is called on a very small
stack located in the Windows Kernel, which will overflow if the WEP calls
Windows functions. There is enough room to unhook an interrupt, however.
Under Windows 3.1, the WEP is called on a 4K stack in the Windows Kernel,
which provides enough room to call Windows functions and to perform general
DLL cleanup. Because the WEP is called only once during the lifetime of a
DLL, it cannot be used to clean up each application instance that uses the
DLL. Under Windows versions 3.0 and 3.1, if a DLL requires each application
instance to call a cleanup routine, the DLL must explicitly provide the
routine, which each application instance must explicitly call.
<P>
An implicitly loaded DLL is loaded into memory before the calling
application is completely loaded. Therefore, the LibMain() function, which
is analogous to an application's WinMain() function, will be called before
the application's message queue is initialized. Therefore, the DLL must not
call functions that send messages to the application in LibMain().
Similarly, an implicitly loaded DLL is terminated after the calling
application has been removed from memory. Therefore, nothing in the WEP
must require the application to exist.
<P>
The LoadLibrary() function loads a DLL explicitly; the FreeLibrary()
function unloads a DLL. To modify DLLSKEL to explicitly load and free the
DLL:

<OL><P><LI>Call the LoadLibrary() function to load the DLL. Save the library
   module handle.

<P><LI>Call the GetProcAddress() function, specifying the library module
   handle and the name of the function, to retrieve the pointer to the
   DLL function.

<P><LI>Call the FreeLibrary() function to free the DLL.

<P><LI>Modify the makefile to remove the call to IMPLIB and remove
   DLLSKEL.LIB from the linker command line.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.00 softlib DLLSKEL.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: KrDll<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

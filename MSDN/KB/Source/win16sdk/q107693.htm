

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Detect Mouse and Mouse Port </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q107693">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1993/11/24">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  A Windows-based application can use the GetSystemMetrics() function to determine whether or not a serial mouse is connected to the computer. However, there is no Windows application programming interface (API) to identify the serial port of the com...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAQ7,QAY5,QDL9,QBWO,QBWN,QBWQ,QBV8,QAB9,QAGI,QA6E,QAUD,QAU9,QBVV,QDJ9,QBXE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Detect Mouse and Mouse Port</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q107693</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A Windows-based application can use the GetSystemMetrics() function to
determine whether or not a serial mouse is connected to the computer.
However, there is no Windows application programming interface (API) to
identify the serial port of the computer that the mouse is connected to.
Instead, a Windows-based application must use the Inquire() function
documented in the Windows Device Driver Kit (DDK). You do not need the the
Windows DDK to call the Inquire() function in the MOUSE driver module.
Please see "MORE INFORMATION" for details.
<P>
Note, however, that the Inquire() function is only part of the Windows DDK
and is not a standard Windows SDK API. Because this function may change in
future versions of the Windows DDK, care must be taken in using this
function in a Windows-based application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If GetSystemMetrics() is called with its parameter set to SM_MOUSEPRESENT,
it will indicate whether or not a serial mouse is connected. However, no
information is provide as to which port of the computer the serial mouse is
connected to.
<P>
To obtain this information, use the mouse driver function Inquire(), which
is documented in the Windows DDK "Device Driver Adaptation Guide" as
follows:
<P>
<PRE>   WORD Inquire(lpMouseInfo)
   LPMOUSEINFO lpMouseInfo;

   The Inquire() function returns information about the mouse hardware.

   Parameter       lpMouseInfo

   Points to a MOUSEINFO structure containing information about the
   mouse hardware that is present, the number of buttons on the
   mouse, and the rate at which the mouse can issue interrupts.

   The MOUSEINFO structure has the following form.

   typedef struct {
     char msExist;
     char msRelative;
     short msNumButtons;
     short msRate;
     short msXThreshold;
     short msYThreshold;
     short msXRes;
     short msYRes;
     short msMouseCommPort;
   } MOUSEINFO, far *LPMOUSEINFO;

   Return Value: The return value is the number of bytes actually written
   into the MOUSEINFO structure.

   Comments: The export ordinal for this function is 1.

</PRE>This function can be called from within a Windows-based application without
the presence of the DDK. To call this function, the function address must
be retrieved as follows:
<P>
<PRE>   typedef WORD (FAR PASCAL * LPFNINQUIRE) (LPMOUSEINFO);

   HANDLE hMouse;
   LPMOUSEINFO lpMouseInfo;   // far pointer to MOUSEINFO struct
   LPFNINQUIRE lpfnInquire;  // function pointer to Inquire()

         if ((hMouse = GetModuleHandle ("MOUSE")) != NULL)
           lpfnInquire = (LPFNINQUIRE) GetProcAddress(hMouse, "Inquire");

</PRE>Then, the Inquire() function can be called using the lpfnInquire pointer.
The msExist and msMouseCommPort parameters in the MOUSEINFO structure
provide the needed information.
<P>
Note that the mouse driver is not called MOUSE.DRV on many systems, and
therefore it is suggested that GetModuleHandle() is used to obtain the
handle to the mouse driver instead of LoadLibrary, which requires the
filename of the mouse driver.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 mouse port driver detect<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrInp<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compatibility Issues for Microsoft Windows Versions 3.x </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q95783 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1993/02/24">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  This article provides guidelines for writing applications for the Microsoft Windows versions 3.x operating system in a manner that will produce the fewest compatibility problems when the application is run on future versions of Windows. The discuss...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWO,QBWQ,QBVV,QAJH,QAH4,QBW6,QAPF,QABI,QAGQ,QATO,QAGU,QAH6,QAC1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Compatibility Issues for Microsoft Windows Versions 3.x</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q95783 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides guidelines for writing applications for the
Microsoft Windows versions 3.x operating system in a manner that will
produce the fewest compatibility problems when the application is run
on future versions of Windows. The discussion focuses on compatibility
issues involving Windows-based applications, Windows display drivers,
and MS-DOS-based applications.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Guidelines for Windows-Based Application Developers</h3>
 
<P>
Keep these general rules in mind when developing applications for
Microsoft Windows:

<UL><LI>The golden rule of application compatibility is to adhere to the
   Microsoft Windows Software Development Kit (SDK) documentation.
   That is, do not use an application programming interface (API) that
   is not documented, and use only the features of an API that are
   documented.

<LI>Do not depend on the format of internal data structures to remain
   the same in the future. For example, the format of the internal
   structures used for windows (HWND), menus (HMENU), device contexts
   (HDC), regions (HRGN), bitmaps (HBITMAP), and tasks (HTASK) are
   guaranteed to change in a future version of Windows. Other internal
   structures may also change.

<LI>Do not assume objects are allocated in User's or GDI's data segment.
   In an attempt to remove system resource limitations, objects that
   are currently allocated in these data segments may be allocated
   elsewhere in the future. For example, assuming a window handle is
   an offset in User's data segment will probably be incorrect in
   future versions of Windows.

<LI>Do not replace system dynamic-link libraries (DLLs) such as
   TOOLHELP.DLL, SHELL.DLL, and COMMDLG.DLL unless you use the version
   APIs (VER.DLL). These DLLs will change in the future. The system
   will malfunction if applications replace these DLLs with the
   earlier 3.0 or 3.1 version. If your application installs these
   DLLs, double-check the code for correctness; many applications that
   attempt this do not do it correctly.

<LI>Test the Windows version number properly. The following code, for
   example, does not work correctly if it is run on a version of
   Windows that is numbered 4.0 because the first test of the minor
   version will fail. Surprisingly, this is a very common mistake.
<P>
<P><PRE>      winVer = LOWORD(GetVersion());
      if (HIGHBYTE(winVer) &gt;= 10 &amp;&amp; LOWBYTE(winVer) &gt;= 3)
<PRE></PRE>          // run
      else
          // exit

    Use the following code instead:

      winVer = LOWORD(GetVersion());
      winVer = (((WORD)(LOBYTE(winVer))) &lt;&lt; 8)|(WORD)HIBYTE(winVer);
      if (winVer &gt;= 0x030A)    // NOTE: Always use a HEX value here!!!
          // run
        else
          // exit

</PRE><LI>Applications written for Windows versions 2.x will not be supported
   under future versions of Windows. Make sure your applications have
   been tested and built using any of the Windows versions 3.x SDKs so
   that they are marked as applications written for Windows version
   3.0 or later and can run in protected mode.

<LI>Do not copy Program Manager group files onto a user's disk. Use the
   Program Manager's DDE interface to add groups and group items for
   your application.

<LI>Do not assume minimized application windows have icon title windows.
   If your application walks the window list and assumes that a window
   with a class name of "0x8004" or "#32772" is an icon title, the
   application will not function properly in future versions of
   Windows. If your application needs to perform this operation when
   running on Windows version 3.1, write your code so that the
   application will continue to work even if it does not find the icon
   title windows.

<LI>Do not hard-code the pixel dimensions of menus, scroll bars, sizes
   of captions, and so on. Instead, use GetSystemMetrics to get these
   sizes. The sizes will change depending on the active display
   driver, and may be user-adjustable in the future. Also, your code
   should watch for the WM_WININICHANGED message and reinitialize the
   values accordingly.

<LI>Do not hard-code button colors to be the standard three shades of
   gray. Use the GetSystemColors function to obtain these colors.
   Again, watch for the WM_WININICHANGED message, and reinitialize
   these colors accordingly.

<LI>Those writing debuggers must use the services provided by
   TOOLHELP.DLL, rather than the services provided by the earlier
   WINDEBUG.DLL. WINDEBUG.DLL will not work in future versions of
   Windows.

<LI>Do not assume that GlobalWire allocates MS-DOS addressable memory.
   Your application must use GlobalDOSAlloc to obtain this type of
   memory.

<LI>Do not assume that GlobalAlloc with the GMEM_FIXED option allocates
   MS-DOS addressable memory. Your application must use GlobalDOSAlloc
   to obtain this type of memory.

<LI>Printer soft font information is currently stored in WIN.INI and is
   associated with a particular port (LPT1, for example). In the
   future, this information will be associated with a printer in order
   to be independent of the port to which the printer is connected.

<LI>Your application must not assume the contents of any WINOLDAP
   (MS-DOS-based application manager) data structures allocated in
   WINOLDAP's data segment. These structures may change in the future.

<LI>Do not over tune your application's STACKSIZE or HEAPSIZE settings in
   the application's .DEF file. Some developers have tuned these
   settings (STACKSIZE, in particular) in their applications to supply
   exactly enough space to run on Windows version 3.0 or 3.1. These
   applications sometimes have problems because different Windows
   display drivers have different stack depth characteristics. Future
   versions of Windows will compound this problem because the stack
   depth will change for most of the core components (GDI, Kernel,
   User, and so forth). It is recommended that at least an additional
   2K be added to the minimum STACKSIZE and HEAPSIZE settings.
<P>
</UL><h3>Guidelines for Display Driver Developers</h3>
 
<P>
Keep these points in mind when developing display drivers for Windows:

<UL><LI>The meaning of the WindHand field in EXTPAINTSTRUC may be changed
   for enhanced-mode grabbers. WindHand is the HWND of the grabber
   child window inside the WINOLDAP window. All grabber painting
   should be restricted to this window. Grabbers were not supposed to
   use WindHand for anything beyond calling GetClientRect, GetDC, and
   so on.

<LI>Grabbers should not use the EPStatusFlags bits other than fFocus,
   fVValid, fSelect, and fGrbProb. Some bits that are private to
   WINOLDAPP were accidentally included in the DDK header files
   although not used in any Microsoft-distributed grabber sample
   source.
<P>
</UL><h3>Guidelines for MS-DOS-based Application Developers</h3>
 
<P>
If you develop applications for MS-DOS, keep these rules in mind:

<UL><LI>Make sure your application works properly in a Windows version 3.1
   MS-DOS box. Especially, make sure your Setup program functions in a
   Windows MS-DOS box. For example, writing over Program Manager group
   files or altering WIN.INI or SYSTEM.INI while Windows is running
   would be improper things to do. Even though the application is
   MS-DOS-based, consider writing a Windows-based Setup program,
   especially if your setup process needs to perform operations such
   as altering WIN.INI or SYSTEM.INI.

<LI>Do not assume the location of the system file table (SFT) or MS-DOS
   buffers. These may be moved into high memory to provide extra
   conventional memory. In general, all internal MS-DOS data
   structures may be moved into high memory in the future.

<LI>Do not assume sizes of internal MS-DOS data structures. For example,
   do not assume that a drive parameter block (DPB) is 21h bytes long
   as some applications have. The format of data structures, such as
   these that are easy to find and traverse, may change in future
   versions of MS-DOS. Use documented Interrupt 21h calls to obtain
   information such as this. For example, DPBs can be obtained using
   Interrupt 21h functions, 1Fh, and 32h.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: TlsCompat<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

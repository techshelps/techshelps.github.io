

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Program DMA for Linear Addresses under Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124727">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1995/01/10">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The process for programming DMA for linear addresses under Windows is similar to the process for programming physical addresses under MS-DOS. On byte (8-bit) channels (0-3), program the page register with bits A23-A16 and the base register with bit...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABA,QA2O,QAC2,QAR5,QDL9,QBWO,QBWN,QDI6,QBW4,QBWD,QAJQ,QAH4,QBWQ,QBWA,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Program DMA for Linear Addresses under Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124727</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10 3.11
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The process for programming DMA for linear addresses under Windows is
similar to the process for programming physical addresses under MS-DOS. On
byte (8-bit) channels (0-3), program the page register with bits A23-A16
and the base register with bits A15-A0 of the 24-bit address. On word
(16-bit) channels (5-7), program the page register with bits A23-A16 and
the base register with bits A16-A1, shifted right 1 bit (&gt;&gt; 1 in C, or SHR
&lt;reg&gt;,1 in ASM).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
It looks like bit A16 is used twice on word channels. Typically, bits
A23-A16 would be compared with the value 0FEh (0xFE) using an OR operator;
then the page register would be programmed with the result. It is not
necessary to strip off bit A16 in the page register because as the least
significant bit in the page register, it is ignored by the hardware.
<P>
As noted above, the base register on word channel transfer is programmed
with bits (A16-A1) &gt;&gt; 1. The hardware generates the address by
concatenating the 7 most significant bits from the page register with the
16 bits from the base register. Because the base is shifted left by one,
incrementing the programmed address actually increments the physical
address by 2. Because the LSB is always zero, the transfers are always word
aligned.
<P>
Word channels are actually somewhat of a hardware hack for a DMA controller
that really only supports byte transfers.
<P>
Given a 24-bit physical address, the controller would be programmed as
described above. If you have a 24-bit linear address, program it the same
way. The virual DMA device (VDMAD) will reconstitue the linear address from
the page/base registers the same way the hardware would.
<P>
There is one caveat to keep in mind when using linear addresses. If the
linear address is not below one megabyte, it will probably be above two
gigabytes (&gt; 24-bits). If it is, it cannot be virtually programmed into the
base register. If the DMA buffer comes from GlobalAlloc() instead of
GlobalDosAlloc(), you need to disable address translation using the Virtual
DMA Specification (VDS) API through INT 4Bh. Then use VDS again to get the
physical address and program the page/base with the physical address.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.11 VDMAD<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrMm<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

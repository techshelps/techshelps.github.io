

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Between Device-Dependent Bitmaps and DIBs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q80080 ">
<META NAME="KBModify" CONTENT="1995/01/05">
<META NAME="KBCreate" CONTENT="1992/01/16">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  This article explains the basic steps involved in converting between device- dependent bitmaps (DDBs) and Windows 3.0 style device-independent bitmaps (DIBs). This article assumes some background knowledge of bitmaps, DIBs, palettes, and memory all...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPG,QAG9,QDL9,QBWO,QBWN,QAH2,QAGI,QBFY,QAY5,QBWQ,QBXS,QA7O,QA7N,QAYV,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Converting Between Device-Dependent Bitmaps and DIBs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 5, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q80080 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains the basic steps involved in converting between device-
dependent bitmaps (DDBs) and Windows 3.0 style device-independent bitmaps
(DIBs). This article assumes some background knowledge of bitmaps, DIBs,
palettes, and memory allocation.
<P>
The SHOWDIB sample application provided in versions 3.0 and 3.1 of the
Windows SDK, the WINCAP sample application available in the Microsoft
Software Library, and the DIBVIEW sample application provided in version
3.1 of the Windows SDK and in the Professional Edition of Visual C++ each
demonstrate the steps described in this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Use the following steps to convert a DDB to a DIB:

<OL><P><LI>Initialize the BITMAPINFOHEADER data structure.
<P>
   a. Set biSize to sizeof(BITMAPINFOHEADER).
   b. Set biWidth to the width of the bitmap.
   c. Set biHeight to the height of the bitmap.
   d. Set biPlanes to 1.
   e. Set biBitCount to the bitmap bmPlanes multiplied by
<P><PRE>      bmBitsPixel. This value can contain only the values 1, 4, 8, or
      24.
</PRE>   f. Set biCompression to the desired format (usually BI_RGB).
   g. All other fields can be set to zero.
<P>
   Code to initialize the BITMAPINFOHEADER data structure might look
   like the following:
<P>
<P><PRE>      BITMAPINFOHEADER bmi;
<PRE></PRE>      BITMAP           bm;
      .
      .
      .
      bmi.biSize          = sizeof(BITMAPINFOHEADER);
      bmi.biWidth         = bm.bmWidth;
      bmi.biHeight        = bm.bmHeight;
      bmi.biPlanes        = 1;
      bmi.biBitCount      = bm.bmPlanes * bm.bmBitsPixel;

      if (bmi.biBitCount &lt;= 1)
        bmi.biBitCount = 1;
      else if (bmi.biBitCount &lt;= 4)
        bmi.biBitCount = 4;
      else if (bmi.biBitCount &lt;= 8)
        bmi.biBitCount = 8;
      else
        bmi.biBitCount = 24;

      bmi.biCompression   = BI_RGB;
      bmi.biSizeImage     = 0;
      bmi.biXPelsPerMeter = 0;
      bmi.biYPelsPerMeter = 0;
      bmi.biClrUsed       = 0;
      bmi.biClrImportant  = 0;

</PRE><P><LI>If there is a logical palette associated with the bitmap, select
   the palette into the desired device context using SelectObject(),
   then realize the palette with RealizePalette().

<P><LI>Allocate a block of memory large enough to store the
   BITMAPINFOHEADER structure and the color table for the DIB. The
   color table is an array of RGBQUAD structures that contain the
   colors used by the image. The size of the color table is the number
   of colors multiplied by sizeof(RGBQUAD). The number of colors is
   found using the biBitCount field in BITMAPINFOHEADER, which
   specifies the color resolution (bits per pixel). For example, 1
   bit-per-pixel means monochrome (2 colors), 4 bits-per-pixel means
   16 colors, and 8 bits-per-pixel means 256 colors. For a 24-bit
   color image, however, there is no color table.

<P><LI>Call the GetDIBits() function with the desired device context (DC), a
   pointer to the memory block as lpBitsInfo, and NULL as the lpBits
   parameter. Doing so instructs the device driver to fill in the
   biSizeImage field of the BITMAPINFOHEADER structure (this field
   should have been initialized to 0 in step 1). The biSizeImage field
   specifies the amount of memory required (in bytes) to store the
   bits that make up the image of the DIB. If this field remains 0
   after calling GetDIBits(), the application must calculate
   biSizeImage using the following formula:
<P>
<P><PRE>      ((((biWidth * biBitCount) + 31) &amp; ~31) &gt;&gt; 3) * biHeight
</PRE><P>
   This formula is required because each scan line of the image is
   aligned on a DWORD boundary.

<P><LI>Reallocate the memory block containing the BITMAPINFOHEADER and
   color table to provide additional memory to store the bits of the
   DIB.

<P><LI>Call GetDIBits() with the desired DC, a pointer to the memory block
   as lpBitsInfo, a pointer to the buffer for the bitmap bits as
   lpBits, and wUsage as DIB_RGB_COLORS. This stores the bits of the
   DIB with the BITMAPINFOHEADER structure and completes the color
   table.
<P>
</OL>In the sample applications listed above, the DibFromBitmap() function in
the DIB.C file of SHOWDIB, the BitmapToDIB() function in the DIBUTIL.C file
of WINCAP, and the BitmapToDIB() function in the DIB.C file of DIBVIEW
demonstrate the process above.
<P>
NOTE: The first two samples convert bitmaps into Windows 3.0 style DIBs and
do not support OS/2-style DIBs. DIBVIEW does support OS/2-style DIBs.
<P>
For more information on the Windows 3.0-style DIB format, see the
documentation for the BITMAPINFO, BITMAPINFOHEADER, and RGBQUAD structures
in the "Microsoft Windows Software Development Kit Reference Volume 2"
version 3.0 manual and in the Windows 3.1 SDK "Programmer's Reference,
Volume 3: Messages, Structures, and Macro's" manual.
<P>
To convert a DIB to a DDB, do the following:

<OL><P><LI>Create a logical palette from the information in the DIB color
   table. Complete a LOGPALETTE data structure using the color values
   found in the color table, then call CreatePalette().

<P><LI>Select the logical palette into the desired device context using
   SelectObject(), then realize the palette using RealizePalette().

<P><LI>Call CreateDIBitmap() using the desired DC and the pointer to the DIB
   as the lpInfoHeader parameter. This function returns a handle to a
   DDB.
<P>
</OL>In the sample applications listed above, the BitmapFromDib() function in
the DIB.C file of SHOWDIB, the DIBToBitmap() function in the DIBUTIL.C file
of WINCAP, and the DIBToBitmap() function in the DIB.C file of DIBVIEW
demonstrate the process above.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: GdiBmp<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 5, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

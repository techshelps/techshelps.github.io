

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Expanded BANDINFO Documentation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q33252 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1988/07/22">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The following is an expanded version of the documentation of the BANDINFO escape in earlier manuals. Refer to the index or table of contents section to determine where the BANDINFO information is located in the current versions of the documentation...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAU9,QAGB,QATX,QAMB,QADF,QAUD,QAJH,QAYV,QAH6,QBSO,QBWA,QBVV,QALQ,QDL9,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Expanded BANDINFO Documentation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q33252 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following is an expanded version of the documentation of the
BANDINFO escape in earlier manuals. Refer to the index or table of
contents section to determine where the BANDINFO information is
located in the current versions of the documentation.
<P>
<PRE>   short Escape(hDC, BANDINFO, nCount, lpInData, lpOutData)

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Purpose</h3>
 
<P>
Provides better communication between a banding driver and the
application.
<P>
<P><h3>Parameters</h3>
 
<P>
<PRE>   Parameter     Definition
   ---------     ----------

   hDC           A handle to the printer display context

   nCount        Not used and can be set to NULL

   lpInData      A long pointer to a data structure that has the
                 following structure:

                    typedef struct {
                        BOOL    GraphicsFlag;
                        BOOL    TextFlag;
                        RECT    GraphicsRect;
                        } BANDINFOSTRUCT;

                 This data structure provides the primary
                 communication between the driver and the
                 application as to what (graphics and/or text)
                 is actually on the page. The notes below
                 describe its use.

   lpOutData     A long pointer to a data structure having the same
                 items as lpInData, a BANDINFOSTRUCT

</PRE><h3>Return Value</h3>
 
<P>
<PRE>   Return Value  Result
   ------------  ------

   nResult       1 if the function is successful
                 0 if the function is not successful or if the escape
                 is not implemented

</PRE><h3>Notes</h3>
 
<P>
This escape is only implemented for devices that use banding to output
to the printer. The escape is called immediately after the NEXTBAND
escape, every time the NEXTBAND escape is called.
<P>
The BANDINFO data structure is used to communicate between the driver
and the application as follows:
<P>
<PRE>   Data structure  Used as lpInData            Used as lpOutData
   field           (application communicates   (driver communicates
                   to the driver)              back to the application)

   GraphicsFlag    TRUE if there are graphics  TRUE if the driver is
                   on the page                 expecting graphics in
                                               this band

   TextFlag        TRUE if there is text on    TRUE if the driver is
                   the page                    expecting text in this
                                               band

   GraphicsRect    The bounding rectangle for  No valid return data
                   all graphics on the page

</PRE>This escape is always executed immediately after a NEXTBAND escape and
is in reference to the band the driver returned to that escape. Listed
below are examples of how the BANDINFO escape can be used to
communicate between driver and application.

<OL><P><LI>On the first band, the driver gives the application a full-page
   band and asks for text only (GraphicsFlag == FALSE, TextFlag ==
   TRUE). The application sends only text to the driver.

<P><LI>If in the first band the application said it had graphics
   (GraphicsFlag == TRUE), or if the driver encountered any vector
   fonts, the driver will have to band the rest of the page. If
   there are no graphics or vector fonts, the next NEXTBAND escape
   will return an empty rectangle, indicating that the application
   should move on to the next page.

<P><LI>If there are graphics and no vector fonts, (that is, the application
   set GraphicsFlag == TRUE), the driver only has to band into the
   rectangle the application passed via NEXTBAND, which bounds all
   graphics on the page. If there are vector fonts, the driver will
   band the entire width and depth of the page with the TextFlag ==
   TRUE.
<P>
</OL>The driver assumes that an application using BANDINFO will send only
text in the first full-page text band because that is all the driver
asked for. Therefore, if the driver sees a vector font or any graphics
in the band, it assumes they were generated by a text primitive and
sets the TextFlag == TRUE for all of the subsequent graphics bands to
ensure that they can be output as graphics. If the application does
not meet this assumption, the image will still be generated properly;
however, some time will be wasted by sending spurious text primitives
to graphics bands.
<P>
<P><h3>Code Outline</h3>
 
<P>
The general outline of a routine using BANDINFO to output a page
should be as follows:
<P>
<PRE>   do {
       if (BandingDevice) {
           NEXTBAND
           BANDINFO
           }
       else {

           /* It is not a banding device. */

           /* Set the band to the entire page. */
           BandRect.left   = 0;
           BandRect.top    = 0;
           BandRect.right  = dxPrinter;
           BandRect.bottom = dyPrinter;

           /* Output everything. */
           BandInfoOut.GraphicsFlag = TRUE;
           BandInfoOut.TextFlag     = TRUE;
           }

       if (TextFlag) {
           Do any text.
           }
       if (GraphicsFlag) {
           Do any graphics.
           }

       } while (BandingDevice &amp;&amp;
                more bands to do);

   /* NEWFRAME and NEXTBAND are exclusive; however, at least one must
      be used. Hence we need to do a NEWFRAME if we are not banding. */
   if (!BandingDevice) {

       /* Put out the page. */
       if ((SpoolerError = Escape(hDC, NEWFRAME, 0, 0L, 0L)) &lt;= 0) {
           Result = ConvertSpoolerError(SpoolerError);
           Escape(hDC, ABORTDOC, 0, 0L, 0L);
           goto ErrorExit3;
           }
       }
</PRE></OL>For more information on full-page banding for text, query on the
following words:
<P>
<PRE>   prod(winsdk) and four and banding and nonraster

</PRE>For more information on BANDINFO, query on the following words:
<P>
<PRE>   NEXTBAND and NEWFRAME and BANDINFO and banding and printing
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: GdiPrn<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

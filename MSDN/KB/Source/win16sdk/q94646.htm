

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using GetCharABCWidths() to Calculate Text Extents </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94646 ">
<META NAME="KBModify" CONTENT="1995/01/05">
<META NAME="KBCreate" CONTENT="1993/01/12">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Version 3.1 of the Microsoft Windows graphical environment introduces a set of functions to manipulate TrueType fonts. An application can use the GetCharABCWidths() function to accurately determine the advance width, overhang, and underhang of a ch...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADF,QAUD,QAY5,QDL9,QBWO,QBWN,QA3M,QDKW,QBV8,QAB9,QBFY,QA4Q,QBWQ,QABX,QALW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using GetCharABCWidths() to Calculate Text Extents</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 5, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94646 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Version 3.1 of the Microsoft Windows graphical environment introduces a set
of functions to manipulate TrueType fonts. An application can use the
GetCharABCWidths() function to accurately determine the advance width,
overhang, and underhang of a character. Because GetCharABCWidths() was
designed for use only with TrueType fonts, it is less useful when it
calculates the width of characters in a font in which the TrueType
rasterizer simulates the bold attribute. This article describes a method to
work around this limitation and also demonstrates a useful technique to
calculate the bounding rectangle for a string of text that provides
accurate results regardless of the font technology involved.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The TrueType rasterizer generates ABC character spacing to enable an
application to position characters exactly. The "A" spacing is the distance
added to the final position of the previous character (or to the beginning
of the line) before placing the glyph. The "B" spacing is the width of the
black part of the glyph. The "C" spacing is the distance to add to the
current position to account for the white space to the right of the glyph.
The total advance width for the glyph if given by A + B + C. Using the
advance width of one character, an application can determine where to
position the following character.
<P>
The GetCharABCWidths() function retrieves the widths, in logical units, of
consecutive characters in a specified range from the current TrueType font.
When the GetCharABCWidths() function returns a negative value for the "A"
or "C" width for a character, that character includes underhang or
overhang, respectively. The GetCharABCWidths function works only for
TrueType fonts.
<P>
An application can use the GetCharWidth() function to determine the advance
width of a character in any font. However, because GetCharWidth() has no
mechanism to provide a negative "A" or "C" width, it cannot be used to
place text exactly.
<P>
Under Windows 3.1, if the TrueType rasterizer simulates the bold attribute,
the information returned by the GetCharABCWidths() function is less
accurate. (For example, the standard fonts provided with Windows 3.1
include the WingDings font in standard weight only. If an application
requests a bold version of WingDings, the TrueType rasterizer simulates the
bold attribute by manipulating the original, normal-weight font.) When an
application uses the GetCharABCWidths() function to determine the advance
width of a manipulated TrueType font, the difference between the returned
ABC width and the true ABC width is one for each character.
<P>
To work around this limitation, the application can add one to the ABC
width of each character. However, to use this method, the application must
determine that the rasterizer has simulated the bold attribute. The
following function demonstrates determining that a TrueType font has bold
enabled. Select a TrueType font into the display context (DC) before
calling this function.
<P>
NOTE: If you are not using the MM_TEXT mapping mode, you will need to
convert the value one from device coordinates to logical coordinates before
adding the value to the character width.
<P>
<PRE>  #include "windows.h"
  #include "windowsx.h"

  BOOL NEAR PASCAL IsBoldSimulated( HDC hDC )
  {
     TEXTMETRIC                 tm ;
     OUTLINETEXTMETRIC          otm ;

     GetTextMetrics( hDC, &amp;tm ) ;

     if (tm.tmWeight &lt;= FW_NORMAL)
        return FALSE ;

     otm.otmSize = sizeof( OUTLINETEXTMETRIC ) ;

     /* Call GOTM() with the pointer to the buffer.  It will
      * fill in the buffer.
      */
     if (!GetOutlineTextMetrics( hDC, otm.otmSize, &amp;otm ))
        return FALSE ;  // Probably not a TrueType font

     /* See the documentation on OUTLINETEXTMETRIC for a
      * description of the otmfsSelection member.
      */
     if (!(otm.otmfsSelection &amp; 0x0020)) // bit 5 means bold
           return TRUE ;

  } /* IsBoldSimulated()  */


</PRE>Note that this limitation occurs only in Windows 3.1 (the GDI.EXE file
dated March 10, 1992). Any application that uses the methods described in
this article to work around this limitation must version-bind its code.
<P>
The following function demonstrates how to use the GetCharABCWidths()
function to determine the bounding rectangle for a string of text. Although
this function is very similar to the GetTextExtent() and
GetTextExtentPoint() functions in Windows, it correctly accounts for
overhang and underhang caused by negative "A" and "C" widths. This function
also demonstrates how to version-bind the code that works around the
limitation in Windows 3.1.
<P>
<PRE>  /****************************************************************
   *  UINT WINAPI GetTextExtentABCPoint( HDC hDC, LPSTR lpsz,
   *                                     int cb, LPSIZE lpSize )
   *
   *    Just like GetTextExtentPoint() but only works on TT fonts
   *    and uses GetCharABCWidths().
   *
   *    Unlike GetTextExtent() and GetTextExtentPoint() which
   *    return a BOOL, this function returns the absolute value
   *    for the "A" value of the first character if it is
   *    negative otherwise it returns 0.
   *
   ****************************************************************/
  UINT WINAPI GetTextExtentABCPoint( HDC hDC, LPSTR lpsz,
                                     int cb, LPSIZE lpSize )
  {
     int          A, C ;
     UINT         nRet = 0 ;
     static LPABC lpABC ;

     GetTextExtentPoint( hDC, lpsz, cb, lpSize );

     if (lpABC ||
     (lpABC = (LPABC)GlobalAllocPtr( GHND, 256*sizeof(ABC) )))
     {
        if (GetCharABCWidths( hDC, 0, 255, lpABC ))
        {
           int         n ;

           /* We now have an array of ABC structures
            */
           for ( lpSize-&gt;cx = 0, n = 0 ; n &lt; cb ; n++ )
           {
              lpSize-&gt;cx += (
                             lpABC[(int)lpsz[n]].abcA +
                             lpABC[(int)lpsz[n]].abcB +
                             lpABC[(int)lpsz[n]].abcC ) ;
           }

           if( cb )
           {
              A = lpABC[(int)lpsz[0]].abcA;

              if( A &lt; 0 )
              {
                 nRet = -A ;
                 lpSize-&gt;cx -= A;
              }

              C = lpABC[(int)lpsz[cb-1]].abcC ;

              if ( C &lt; 0 )
                 lpSize-&gt;cx -= C ;    // two minus' make a plus
           }

           /* Bug in Windows 3.1.  If the tt font is embolded then
            * add one to the width for each char.
            */
           if ((BOOL)LOWORD( GetVersion() ) == 0x0A03 &amp;&amp;
               IsBoldSimulated( hDC ))
              lpSize-&gt;cx += cb ;
        }
        else
           GetTextExtentPoint( hDC, lpsz, cb, lpSize ) ;

        return nRet  ;
     }
     return nRet ;
  } /* GetTextExtentABCPoint()  */
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 GetCharABCWidths GetTextExtent TrueType<BR>
KBCategory: kbprg<BR>
KBSubcategory: GdiFnt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 5, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

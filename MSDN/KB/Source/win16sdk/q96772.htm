

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use WNetGetUser() in Windows for Workgroups </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96772 ">
<META NAME="KBModify" CONTENT="1995/08/28">
<META NAME="KBCreate" CONTENT="1993/03/25">
<META NAME="Keywords" CONTENT="kbnetwork kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  WNetGetUser() is documented on page 194 in the Microsoft Windows Device Driver Kit (DDK)  Device Driver Adaptation Guide  for version 3.1. This function can be used to retrieve the current user name of the user logged on to the network underlying W...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWO,QAUD,QBC9,QBC8,QANO,QAVZ,QAGI,QAY5,QALW,QAGU,QDL9,QBWN,QBV8,QAB9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use WNetGetUser() in Windows for Workgroups</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96772 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows for Workgroups Software Development Kit (SDK)
   for Windows for Workgroups versions 3.1 and 3.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
WNetGetUser() is documented on page 194 in the Microsoft Windows Device
Driver Kit (DDK) "Device Driver Adaptation Guide" for version 3.1. This
function can be used to retrieve the current user name of the user logged
on to the network underlying Windows. However, when using this function in
Microsoft Windows for Workgroups, WNetGetUser() returns WN_SUCCESS but the
user name string is empty. Because WFWNET.DRV is a multinet driver, the
network that supports WNetGetUser() must be activated before using this
function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Until the release of the Windows for Workgroups SDK, WNetGetUser() was used
internally by Windows. It is documented in the version 3.1 "Device Driver
Adaptation Guide" for network device driver developers. Now, the Windows
for Workgroups SDK allows you to call WNetGetUser() from an application;
however, when using this function on a system with a multinet driver, the
supporting network must be activated first using MNetSetNextTarget(). If
the target network has not been set, the function returns WN_SUCCESS but
the returned string for the user name is empty. This is documented in the
description of MNetSetNextTarget() in the Windows for Workgroups SDK.
<P>
It is not sufficient to just call MNetSetNextTarget() before WNetGetUser().
The current target network may not support WNetGetUser(). To properly set
the target network to use WNetGetUser(), the networks must be enumerated
and WNetGetUser() called for each network. If WNetGetUser() does not return
WN_SUCCESS, then enumerate the next target network and iterate this loop.
If the loop iterates through all of the networks but WNetGetUser() never
returns WN_SUCCESS, then none of the target networks support WNetGetUser().
<P>
To determine whether a system supports multinet operations, WNetGetCaps()
can be used with WNNC_NET_TYPE. The return value has the WNNC_NET_MultiNet
(0x8000) set if the system supports multinet operations.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>#include &lt;winnet.h&gt;

//
// Function:  NetGetCaps
//
// Purpose:   Attempts to Call WNetGetCaps from USER.EXE
//
// Returns:   See WNetGetCaps.  If the entry point cannot be located,
//            returns NULL
//

</PRE>WORD NetGetCaps( WORD wCaps )
{
<PRE>   typedef         WORD (CALLBACK *LPFNWNETGETCAPS)( WORD );

   LPFNWNETGETCAPS lpfnWNetGetCaps;
   WORD            wNetType = NULL;
   HINSTANCE       hInst;

   // Get the entry point for WNetGetUser from USER.EXE. USER implements
   // the function by calling through to the network driver.
   hInst = LoadLibrary( "USER.EXE" );
   if ( !( lpfnWNetGetCaps = (LPFNWNETGETCAPS)
                             GetProcAddress( hInst, "WNETGETCAPS" )) )
   {
      OutputDebugString("Could not locate WNetGetCaps entry point.\n");
   }
   else
      // Make the call
      wNetType = (*lpfnWNetGetCaps)( wCaps );

   return wNetType;
</PRE>}
<P>
<PRE>//
// Function:  NetGetUser
//
// Purpose:   Attempts to call WNetGetUser from USER.EXE
//
// Returns:   TRUE if the function succeeded, otherwise FALSE.
//

</PRE>BOOL NetGetUser (LPSTR lpszUserName, int *pcb )
{
<PRE>   typedef BOOL (CALLBACK *LPFNGETUSER)( LPSTR, int * );

   // Find the entry point for WNetGetUser in USER.EXE
   HINSTANCE   hInst       = LoadLibrary( "USER.EXE" );
   LPFNGETUSER lpfnGetUser =
      (LPFNGETUSER) GetProcAddress( hInst, "WNETGETUSER" );

   if (!lpfnGetUser)
      return FALSE;

   // See if this computer includes multinet support
   if ( NetGetCaps( WNNC_NET_TYPE ) &amp; WNNC_NET_MultiNet )
   {
      //
      // Multinet support found.  Get entry points to the MNet APIs
      //

      typedef WORD (CALLBACK *LPFNMNETNETWORKENUM)( HANDLE FAR * );
      typedef WORD (CALLBACK *LPFNMNETSETNEXTTARGET)( HANDLE );

      LPFNMNETNETWORKENUM   lpfnMNetNetworkEnum;
      LPFNMNETSETNEXTTARGET lpfnMNetSetNextTarget;

      OutputDebugString("GetUser: WNNC_NET_MultiNet is set.\n");

      // Get the module handle for the network driver
      hInst = (HINSTANCE) NetGetCaps( 0xFFFF );

      // Get the entry points
      lpfnMNetNetworkEnum   =
         (LPFNMNETNETWORKENUM)GetProcAddress( hInst, "MNETNETWORKENUM" );
      lpfnMNetSetNextTarget =
         (LPFNMNETSETNEXTTARGET)GetProcAddress(hInst,"MNETSETNEXTTARGET" );

      // If both entry points were located, use them
      if ( lpfnMNetNetworkEnum &amp;&amp; lpfnMNetSetNextTarget )
      {
         HANDLE hEnum   = NULL;
         WORD   wResult = lpfnMNetNetworkEnum( &amp;hEnum );

         while ( wResult == WN_SUCCESS )
         {
            lpfnMNetSetNextTarget( hEnum );     // activate that network
            wResult = lpfnGetUser( lpszUserName, pcb );

            if ( wResult == WN_SUCCESS )
               return TRUE;

            OutputDebugString( "WNetGetUser failed, try next provider.\n");

            // otherwise, try the next one for WNetGetUser support
            wResult = lpfnMNetNetworkEnum( &amp;hEnum );
         }

         return FALSE;
      }

      // Entry points for the MNet APIs we need weren't located.
      // Try calling WNetGetUser anyway. Note: Windows NT 3.51 gives
      // this behavior

      OutputDebugString("Warning - WFWNET.DRV doesn't contain \
         entry points for MNetNetworkEnum and/or MNetSetNextTarget.\n");
   }

   WORD wResult = lpfnGetUser( lpszUserName, pcb );

   return (wResult) ? FALSE : TRUE;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.11 username multi-net<BR>
KBCategory: kbnetwork kbprg<BR>
KBSubcategory: NtwkWinnet<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

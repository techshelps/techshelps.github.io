

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: DYNBEDIT Changes From Edit to Bedit Control @ Run Time </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90839 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1992/10/22">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  PENWIN.DLL by default changes an edit control to an hedit control at run time. However, the Pen Windows system does not have a built-in mechanism to change an edit control to a bedit control at run time.  DYNBEDIT demonstrates how to change a norma...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHP,QA7O,QAOE,QAMN,QAB5,QBNK,QADF,QAPF,QABA,QDL9,QBWO,QBWN,QBHF,QAHV,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: DYNBEDIT Changes From Edit to Bedit Control @ Run Time</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90839 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
PENWIN.DLL by default changes an edit control to an hedit control at run
time. However, the Pen Windows system does not have a built-in mechanism to
change an edit control to a bedit control at run time.
<P>
DYNBEDIT demonstrates how to change a normal edit control to a bedit
control at run time. This allows an application to run unmodified in either
Pen Windows or retail Windows.
<P>
Download DYNBEDIT.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/DYNBEDIT.EXE">DYNBEDIT.EXE</A> <I>(size: 30183 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/DYNBEDIT.EXE">DYNBEDIT.EXE</A> <I>(size: 30183 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The basic steps to perform this transition are to query the information
from the edit control, destroy the edit control, and then call
CreateWindow() to make the new bedit control. However, there is a problem
with this procedure when using a font other than the system default font in
a dialog box. If a font statement is given (for example: FONT 8,"Helv"),
the combs of the bedit control will appear below the bottom border of the
control. This problem occurs because the Pen system bases the size of the
combs on the system font only rather than on the font specified. To work
around this problem, the application must modify the GUIDE structure in the
RC structure for the new control. By reducing the size of the GUIDE
structure, the Pen system will pick a new font, which matches the new GUIDE
size.
<P>
To accomplish this, the following steps need to be performed at either
WM_INITDIALOG or WM_CREATE depending upon the location of the edit control:

<OL><P><LI>Check to see if Pen Windows is running. If so, proceed to step 2.

<P><LI>Get the handle to the edit control, the text in the edit control, and
    three different sets of dimensions:
<P>
    a. The location of the dialog box in screen coordinates.
    b. The location of the edit control in screen coordinates.
    c. The size of the edit control in pixels.
<P>
    The first two measurements can be accomplished with the
    GetWindowRect() function, and the third measurement can be
    accomplished with the GetClientRect() function.

<P><LI>Destroy the original edit control.

<P><LI>Create the new bedit control with a call to CreateWindow(). Use the
    following equations to calculate the values of x, y, dx, and dy:
<P>
       // EditRect is the location of the edit control in screen
       // coordinates.
       // DlgRect is the location of the dialog box in screen coordinates.
       // rect is the size of the edit control in pixels.
<P>
       x  = (EditRect.left - DlgRect.left)
       y  = (EditRect.top - DlgRect.top)
       dx = (rect.right - rect.left)
       dy = (rect.bottom - rect.top)
<P>
    You should also use the same ID number in the call to CreateWindow() as
    used by the original edit control.

<P><LI>Send a WM_HEDITCTL message to the new bedit control with the wParam set
    to HE_GETRC to retrieve the RC structure. This will allow the
    application to modify the GUIDE structure.

<P><LI>Calculate the new cyBox value. cyBox is the height of one cell in the
    bedit control. For example:
<P>
       // New cyBox value (height of one box).
       NewcyBox = (rect.bottom - rect.top);

<P><LI>Calculate the new cxBox value by using a ratio between the old cyBox
    and the new cyBox. cxBox is the width of one cell in the control. For
    example:
<P>
       // Calculate new cxBox value by changing window ratio.
       rc.guide.cxBox = NewcyBox * rc.guide.cxBox / rc.guide.cyBox;

<P><LI>Calculate the new cyBase value. cyBase is the distance from the top of
    the cell to the baseline of the comb. Again, use a ratio based upon the
    change between the old cyBox and the new cyBox. For example:
<P>
       // Calculate the new cyBase (distance from top of box to baseline).
       rc.guide.cyBase = NewcyBox * rc.guide.cyBase / rc.guide.cyBox;

<P><LI>Calculate the number of cells that can now fit inside of the control.
    This is done by taking the width of the control, and dividing it by the
    width of a single cell. For example:
<P>
       // Calculate the number of cells that can fit in the bedit control.
<P>
       rc.guide.cHorzBox = (rect.right - rect.left) / rc.guide.cxBox;

<P><LI>Complete any additional changes needed for the control, and then
    replace the RC structure with the new one by sending a WM_HEDITCTL
    message with the wParam set to HE_SETRC. For example:
<P>
       // Replace the RC structure.
       SendMessage (hBEdit, WM_HEDITCTL, HE_SETRC, (long)(LPRC) &amp;rc);
<P>
</OL>At this point, the Pen system will generate the correct font to fit inside
of the new GUIDE dimensions.
<P>
If the application chooses to send a WM_SETFONT message to the control, the
application then assumes responsibility for choosing a font that will fit
inside of the comb. The Pen system won't do any font picking if the
application uses the WM_SETFONT message. Using a WM_SETFONT message is
necessary if the application requires the use of any special font
characteristics (for example, italic).
<P>
The DYNBEDIT sample has been written to demonstrate the above process.
The code that makes the transition is located in ABOUT.C in the
WM_INITDIALOG case of PenDlgProc().
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 softlib DYNBEDIT.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

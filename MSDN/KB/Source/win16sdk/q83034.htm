

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Reading and Converting Between the Three GDI Resources </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83034 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1992/04/02">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  GDIRSRCS is a file in the Microsoft Software Library that demonstrates the following three techniques:  1. Reading a device independent bitmap (DIB) resource from a file and    using that data to create one of the following:      - A device depende...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAO2,QAY2,QAH2,QAB5,QBXR,QAB2,QAY5,QAXX,QAGI,QAJQ,QAIM,QAUR,QAPF,QABV,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Reading and Converting Between the Three GDI Resources</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83034 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
GDIRSRCS is a file in the Microsoft Software Library that demonstrates the
following three techniques:

<OL><P><LI>Reading a device independent bitmap (DIB) resource from a file and
   using that data to create one of the following:
<P>
<P><PRE>    - A device dependent bitmap (DDB)
    - A cursor
    - An icon
</PRE>
<P><LI>Reading a cursor resource from a file and using that data to create
   one of the following:
<P>
<P><PRE>    - A device dependent bitmap
    - A device independent bitmap
    - An icon
    - Another cursor
</PRE>
<P><LI>Reading an icon resource from a file and using that data to create
   one of the following:
<P>
<P><PRE>    - A device dependent bitmap
    - A device independent bitmap
    - A cursor
    - Another icon
</PRE><P>
</OL>Download GDIRSRCS.EXE, a self-extracting file, from the
Microsoft Software Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/GDIRSRCS.EXE">GDIRSRCS.EXE</A> <I>(size: 51017 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/GDIRSRCS.EXE">GDIRSRCS.EXE</A> <I>(size: 51017 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
Reading icon and cursor resources from a file is straightforward.
However, reading a device independent bitmap resource from a file is
not so straightforward for the following two reasons:

<UL><LI>The bitmap may be larger than 64K bytes. Therefore, an application
   must use a custom file-reading function that can deal with the
   64K-byte limit.

<LI>The device independent bitmap resource-file header has two
   different formats: one for OS/2 and another for Windows version 3.x.
   While the GDIRSRCS sample reads both formats, it stores bitmap
   information only in the Windows 3.x format.
<P>
</UL><h3>Creating a Device Dependent Bitmap</h3>
 
<P>
The process to create a DDB using the information in a DIB is
straightforward. Call the CreateBitmap() function to create a bitmap,
then read the image data from the DIB into the DDB.
<P>
Creating a DDB from a cursor or from an icon is also straightforward.
Note that a cursor and an icon each contain two bitmaps (the AND and
XOR bit masks) in a DIB. Extract the XOR bit mask and use it to create
a DDB.
<P>
In the GDIRSRCS sample, the functions that create bitmaps are in the
BMP.C file.
<P>
<P><h3>Creating a Cursor</h3>
 
<P>
In the GDIRSRCS sample, the functions that create cursors are in the
CUR.C file.
<P>
The procedure to create a cursor based on a DIB obtained from a cursor
or icon resource file has eight steps. While the following discussion
describes the process of creating a cursor based on a DIB from an icon
file, the procedure to create a cursor based on a DIB from another
cursor is the same.

<OL><P><LI>Obtain a pointer to the bits of the device independent bitmap from
   the icon.

<P><LI>Divide the height of the DIB by two because the DIB contains both
   the AND and XOR masks.

<P><LI>Calculate the offset to the AND mask bits.

<P><LI>Calculate the offset to the XOR mask bits.

<P><LI>Create a device dependent monochrome bitmap with the bits of the
   XOR mask.

<P><LI>Obtain the contents of the device dependent XOR bit mask and store
   it in memory. The AND bit mask is a monochrome bitmap. Because
   device independent and device dependent monochrome bitmaps share
   the same format, there is no need to convert the AND bit mask.

<P><LI>Because the image of a DIB is stored from bottom to top, flip the
   scanlines of the AND bit mask.

<P><LI>Create a cursor by calling the CreateCursor() function, specifying the
   AND and XOR bit masks.
<P>
</OL>To create a cursor from a bitmap DIB, use the following eight steps:

<OL><P><LI>Obtain a handle to the DIB in the bitmap.

<P><LI>Call the GetSystemMetrics() function with the SM_CXCURSOR and
   SM_CYCURSOR indexes to determine the width and height of cursors
   supported by the installed video driver.

<P><LI>Change the size of the bitmap to match the size of the system's
   cursors.

<P><LI>If the bitmap is a color bitmap, convert it to monochrome. (All
   cursors are monochrome.)

<P><LI>Save the XOR mask bits in memory.

<P><LI>Create a monochrome bitmap for the AND bit mask. Fill it with any
   desired pattern.

<P><LI>Save the AND mask bits in memory.

<P><LI>Create a cursor by calling the CreateCursor() function, specifying the
   AND and XOR bit masks.
<P>
</OL><h3>Creating Icons</h3>
 
<P>
In the GDIRSRCS sample, the functions that create icons are in the
ICON.C file.
<P>
The process to create an icon from a cursor or from another icon
resource file has eight steps. While the following discussion
describes the process of creating an icon based on a cursor, the
process to create an icon based on another icon is the same.

<OL><P><LI>Obtain a pointer to the bits of the DIB in the cursor.

<P><LI>Divide the height of the DIB by two because the DIB contains both
   the AND and XOR bitmaps.

<P><LI>Calculate the offset to the AND mask bits.

<P><LI>Calculate the offset to the XOR mask bits.

<P><LI>Create a device dependent monochrome bitmap with the bits of the
   XOR mask.

<P><LI>Obtain the contents of the device dependent XOR bit mask and store
   it in memory. The AND bit mask is a monochrome bitmap. Because
   device independent and device dependent monochrome bitmaps share
   the same format, there is no need to convert the AND bit mask.

<P><LI>Because the image of a DIB is stored from bottom to top, flip the
   scanlines of the AND bit mask.

<P><LI>Create a cursor by calling the CreateCursor() function, and specifying
   the AND and XOR bit masks.
<P>
</OL>To create an icon from a bitmap DIB, use the following seven steps:

<OL><P><LI>Obtain a handle to the DIB in the bitmap.

<P><LI>Call the GetSystemMetrics() function with the SM_CXICON and SM_CYICON
   indexes to determine the width and height of icons supported by the
   installed video driver.

<P><LI>Change the size of the bitmap to match the size of the system's
   icons.

<P><LI>Save the XOR mask bits in memory.

<P><LI>Create a monochrome bitmap for the AND bit mask. Fill it with any
   desired pattern.

<P><LI>Save the AND mask bits in memory.

<P><LI>Create an icon by calling the CreateIcon() function, and specifying
   the AND and XOR bit masks.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 softlib GDIRSRCS.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: GdiCurico<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

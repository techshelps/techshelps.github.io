

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rules for Using Far Pointers to Memory Objects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q77473 ">
<META NAME="KBModify" CONTENT="1997/08/12">
<META NAME="KBCreate" CONTENT="1991/10/16">
<META NAME="Keywords" CONTENT="kb16bitonly KrMm kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT=" In Windows version 3.0 standard and enhanced modes, rules for using far pointers have been relaxed substantially. This is due to the use of the protected mode of the 80286, 80386, and 80486 processors. In this mode, far pointers are no longer a segm...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAO2,QAO3,QBW6,QDL9,QBWO,QBWN,QA5W,QBFM,QAYY,QAJH,QBWQ,QAY5,QBJ1,QAY2,QAKD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Rules for Using Far Pointers to Memory Objects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 12, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q77473 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
In Windows version 3.0 standard and enhanced modes, rules for using
far pointers have been relaxed substantially. This is due to the use
of the protected mode of the 80286, 80386, and 80486 processors. In
this mode, far pointers are no longer a segment:offset value.
Protected mode far pointers are made up of a selector:offset value.
The selector is an index into a descriptor table. Each descriptor
contains information about a block of memory, such as size, location
in memory (linear memory if in enhanced mode, physical memory if in
standard mode), and access rights. For more information on the
descriptor table, refer to Chapter 3 of "The 80386/80486 Programming
Guide" by Ross P. Nelson (Microsoft Press).
<P>
The protected mode of the 80286, 80386, and 80486 processors allows
memory blocks to be moved in memory without invalidating their
selector:offset value. This is accomplished by changing the reference
to the location in memory in the descriptor rather than changing the
actual selector value.
<P>
Because of this functionality, using far pointers in standard and
enhanced modes is much easier. In the following four circumstances,
far pointers to data can be assumed to be valid:

<OL><P><LI>Global memory that is allocated with GlobalAlloc() as movable and
   nondiscardable
<P>
   The far pointer returned from GlobalLock() can be assumed to be valid
   as long as the GlobalUnlock() function has not been called. Once
   GlobalUnlock() has been called, the far pointer can no longer be
   assumed to be valid because the memory may be discarded. However,
   the far pointer will remain valid in the case of memory that is
   nondiscardable and is not an automatic data segment. Because of the
   selector technology discussed above, movable memory can move
   without invalidating the far pointer.
<P>
   NOTE: If a block is reallocated using GlobalReAlloc() and the new
   size requires a different number of selectors (for example 50K
   reallocated to 110K or 65K reallocated to 63K), the base selector
   value may be changed. Each selector can refer to a maximum of 64K
   of memory.

<P><LI>Far pointers to static or global data within an application
<P>
   Static and global data within an application is stored in the
   static data area of the application's DGROUP. Because the whole
   DGROUP segment is moved, the far pointer will still be valid after
   a move in protected mode.

<P><LI>Automatic data within a function as long as that function has not
   been exited
<P>
   Far pointers to automatic data will be valid as long as no return
   has been executed from the function that allocated the data.
   Automatic data is stored on the stack. When an application returns
   from a function, the memory allocated by that function is no longer
   allocated and cannot be assumed to be valid. This then makes memory
   that a far pointer references subject to corruption.

<P><LI>Local memory that has been locked with LocalLock()
<P>
   Memory allocated with LocalAlloc() comes from the local heap. Memory
   on the local heap can be moved around within the DGROUP segment,
   which will cause the offset value of its location to change. This
   will invalidate any far pointers to the memory. The LocalLock()
   function fixes the memory within the local heap.
<P>
</OL>For compatibility with future versions of Windows, far pointers to
data within an application should NEVER be passed to other
applications. The current version of Windows uses one LDT (local
descriptor table) for all descriptors associated with data. In the
future, one LDT may be used for each application's data, while a GDT
(global descriptor table) may be used for shared data. If a
selector:offset combination from one application is used in another
application in such an environment, the selector will be used to
reference a descriptor in the called application's LDT. The descriptor
in the called application's LDT will most likely not contain the
correct reference for the memory block. The only supported way to
share data between applications is global memory allocated with the
GMEM_SHARE (also known as the GMEM_DDESHARE) flag.
<P>
Selectors that are aliased, using AllocDStoCSAlias() or AllocSelector(),
will not be updated when the memory is moved. For this reason, far
pointers that include aliased selectors cannot be assumed to be valid
unless the memory has been fixed into place with GlobalFix().
<P>
For a more detailed description of memory management under protected
mode and Windows 3.0, see Chapters 17 and 18 of "Peter Norton's
Windows 3.0 Power Programming Techniques." This book is available from
Bantam Computer Books and is coauthored by Paul Yao.
<P>
KBSubcategory: KrMm
 
<PRE>Keywords          : kb16bitonly KrMm kbhowto
Version           : 3.0 3.1
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 12, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

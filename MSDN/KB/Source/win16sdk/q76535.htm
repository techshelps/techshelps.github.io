

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Creating a Custom Raster Font </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q76535 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1991/09/26">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Fonts are stored as resources in resource-only dynamic-link libraries (DLLs). The process of creating a custom font library involves creating new font resources and inserting them into a DLL that has no code. Fonts must be in a resource-only librar...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADF,QAH4,QDL9,QBWO,QBWN,QBWQ,QBHQ,QASR,QBXR,QBBI,QAUJ,QAPN,QABG,QAIM,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Creating a Custom Raster Font</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q76535 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Fonts are stored as resources in resource-only dynamic-link libraries
(DLLs). The process of creating a custom font library involves
creating new font resources and inserting them into a DLL that has no
code. Fonts must be in a resource-only library.
<P>
The Windows 3.x Font Editor supports editing raster fonts compatible
with Windows versions 2.x and Windows version 3.x.
<P>
It is also possible to create a font-resource DLL that does have a
code segment, which alleviates the problem of having to use a special
linker.
<P>
Sample code that demonstrates using the normal linker is also available in
the Software Library, in a file called MYFONT.
<P>
Download MYFONT.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/MYFONT.EXE">MYFONT.EXE</A> <I>(size: 16514 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/MYFONT.EXE">MYFONT.EXE</A> <I>(size: 16514 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Basic Steps (Overview)</h3>
 
<P>
<PRE>  I. Create font files using the Font Editor.
 II. Create a font-resource script.
</PRE>III. Create a dummy code module.
<PRE> IV. Create a module-definition file that describes the fonts.
  V. Compile and link the sources.

</PRE>NOTE: Read Chapter 18 of the "Microsoft Windows Software Development
Kit Guide to Programming." The following procedure is very similar.
<P>
<P><h3>Step I: Create a Font File</h3>
 

<OL><P><LI>Invoke the Font Editor.
</OL>2. Open an existing font file (FNT).
3. Edit the cell arrays and attributes of the existing font.
4. Save the new font under a different name.
<P>
Note 1: It is not possible to generate a new font from scratch; an
existing font file must be edited. Two fonts, ATRM1111.FNT and
VGASYS.FNT, are supplied with the Windows 3.x SDK to provide a font on
which to base new fonts.
<P>
Note 2: The names of the font formats are deceiving. Windows
3.0-compatible format works only in 386 enhanced mode. Window
2.0-compatible format works in all modes; therefore, it is usually
better to save fonts in 2.0 format.
<P>
<P><h3>Step II: Create a Font Resource Script</h3>
 

<OL><P><LI>Create a resource script (RC) file.
</OL>2. Add one FONT statement per font file created. For example:
<P>
<PRE>      MyFont1 FONT  MYFONT1.FNT
      MyFont2 FONT  MYFONT2.FNT

</PRE></OL><h3>Step III: Create a Dummy Code Module</h3>
 

<OL><P><LI>Write an assembly language procedure that generates no code.

<P><LI>Assemble the code to create an object file (OBJ). (This step may
   seem unnecessary but it is required; otherwise, the linker will
   complain because the linker will create an executable that does not
   have any object files. Creating the dummy code module with its null
   code segment forces the linker to create the required executable DLL).
<P>
</OL>The code for the dummy code segment might resemble the following:
<P>
<PRE>          .xlist
          include cmacros.inc
          .list

          sBegin CODE
          sEnd   CODE
          end

</PRE></OL><h3>Step IV: Create a Module Definition File</h3>
 

<OL><P><LI>Add a LIBRARY statement with the font resource title.
</OL>2. Add a DESCRIPTION statement that indicates the font characteristics.
3. Add a STUB statement in case the library is invoked from MS-DOS.
4. Add a DATA statement with the NONE attribute.
<P>
The DEF file for a font library might resemble the following:
<P>
<PRE>   LIBRARY FONTLIB
   DESCRIPTION 'FONTRES 133, 96, 72: MyFont, Terminal (7 point)'
   STUB 'WINSTUB.EXE'
   DATA NONE

</PRE></OL>Note: The DESCRIPTION statement specifies a string that describes the
font attributes, and supplies a comment that is displayed by the
Windows Control Panel when the font is loaded.
<P>
WINSTUB.EXE is a small file that prints the message "This application
requires Microsoft Windows" if the user tries to run the application
under MS-DOS.
<P>
The NONE attribute indicates that the library does not require its own
automatic data segment.
<P>
The description string MUST begin with the FONTRES text so that
Windows will know that this is a font resource library.
<P>
(See the "Microsoft Windows Software Development Kit Guide to
Programming" for more information and examples.)
<P>
<P><h3>Step V: Building the Font Resource Library</h3>
 

<OL><P><LI>Use MASM to assemble the dummy code into an object file.
</OL>2. Use LINK4 to generate the library body.
3. Use RC to insert the font into the library.
4. Rename the font library to have the FON extension.
<P>
The following is an sample makefile:
<P>
<PRE>     all: fontlib.exe

     fontlib.obj: fontlib.asm
         masm fontlib.asm;

     fontlib.exe: fontlib.mak fontlib.def fontlib.obj \
                  fontlib.rc fontlib.fnt
         link4 fontlib.obj, fontlib.exe, NUL, /NOD, fontlib.def
         rc fontlib.rc
         rename fontlib.exe fontlib.fon

</PRE></OL><h3>Using LINK Instead of LINK4:</h3>
 
<P>
Important note: The specification of LINK4 in the sample above is not
an error. The standard linkers supplied with Microsoft C version 5.1
and Microsoft C version 6.0 produce error messages when an attempt is
made to create an executable file that has no segments. LINK4.EXE is
not shipped with the Windows 3.x SDK. However, it is shipped with the
Windows 2.x SDK and with the Windows 3.x DDK.
<P>
If Steps III, IV, and V of the procedure given above are modified as
follows, LINK versions 5.12 and later can be used to create font
files:
<P>
<P><h3>NEW Step III: Create a Dummy Code Module</h3>
 
<P>
Create a code segment in the dummy code module by creating an empty
Windows Exit Procedure (WEP). This code might resemble the following:
<P>
<PRE>          .xlist
          include cmacros.inc
          .list

          sBegin CODE
          cProc WEP,&lt;FAR,PASCAL,PUBLIC&gt;,&lt;si,di&gt;
               parmW EntryCode
          cBegin WEP
          cEnd WEP
          cEnd CODE

          end

</PRE><h3>NEW Step IV: Create a Module Definition File</h3>
 
<P>
Modify the DEF file provided above to add the following lines:
<P>
<PRE>   EXETYPE   WINDOWS
   CODE      MOVEABLE DISCARDABLE
   EXPORTS   WEP @1 RESIDENTNAME

</PRE><h3>NEW Step V: Building the Font Resource Library</h3>
 
<P>
Modify the makefile to refer to LINK instead of to LINK4.
<P>
<P><h3>Using MASM 6.0 Instead of MASM 5.1</h3>
 
<P>
If the font file is built using version 6.0 of the Microsoft Macro
Assembler (MASM), use version 5.3 of the CMACROS.INC file included
with MASM instead of version 5.2 of the file included with the Windows
SDK.
<P>
To access the fonts, use AddFontResource() with the DLL name, and
RemoveFontResource(). Use CreateFont() or CreateFontIndirect() to
retrieve a handle to a font with the specified attributes. Use
SelectObject() to put the font into a specified DC.
<P>
The face name of the font (for example, "System" or "Helv") can be
specified when the font is created using the Font Editor. This same
face name is specified as the lpFaceName parameter when calling
CreateFont() or CreateFontIndirect(). The face name can be any name
desired.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 softlib MYFONT.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: GdiFnt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: GP Fault When Drawing on a Memory-Based DC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q111864">
<META NAME="KBModify" CONTENT="1995/01/05">
<META NAME="KBCreate" CONTENT="1994/02/22">
<META NAME="Keywords" CONTENT="kbprg kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  A general protection (GP) fault can occur on a memory-based device context (DC) when a bitmap previously selected in the DC is selected out and another is selected in. This is a common problem when using the SaveDC() and RestoreDC() functions with ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBKN,QAGI,QA2Q,QBE7,QBE6,QAG2,QDL9,QBWO,QBWN,QAIF,QABA,QAI4,QAKP,QAY5,QAY4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: GP Fault When Drawing on a Memory-Based DC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 5, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q111864</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A general protection (GP) fault can occur on a memory-based device context
(DC) when a bitmap previously selected in the DC is selected out and
another is selected in. This is a common problem when using the SaveDC()
and RestoreDC() functions with a memory DC.
<P>
<P><h2>CAUSE</h2>
 
<P>
In a regular (nonmemory-based) DC, when the SaveDC() and RestoreDC()
functions are used, the size of the window client area of the DC does not
change. The size of the drawable area in a memory-based DC is dependent on
the size of the current bitmap selected in the DC.
<P>
For example, suppose the default 1 x 1 monochrome bitmap is selected in a
memory DC and you call SaveDC(). Now, you select a 200 x 200 color bitmap
into the DC and you perform some drawing commands. Then, you call
RestoreDC() to restore the DC. This action will select the old 1 x 1 bitmap
back into the DC. Unfortunately, GDI does not update the clipping region
when this happens, and when you draw outside the 1 x 1 region, you can
receive a GP fault.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
After you call RestoreDC() on a memory-based DC, you need to call
SelectObject() to select the bitmap that was selected in the DC before
RestoreDC() was called.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in Windows version 3.1. We are
researching this problem and will post new information here in the
Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code exhibits the problem outlined above. When
CreateCompatibleDC() is called, a default 1 x 1 monochrome bitmap is
selected into the DC returned from the function. By restoring the initial 1
x 1 bitmap after getting a visible region of 200 x 200, GDI thinks the 1 x
1 surface has a clipping rectangle of 200 x 200. This is what causes the
overwrite.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   HBITMAP hbm1,hbm2;
   HDC     hdcBits,hdcScreen;

   hdcScreen = GetDC(NULL);
   hdcBits = CreateCompatibleDC(hdcScreen);
   hbm1 = CreateCompatibleBitmap(hdcScreen,200,200);
   hbm2 = CreateCompatibleBitmap(hdcScreen,200,200);

   SaveDC(hdcBits);
   SelectObject(hdcBits,hbm1);
   PatBlt(hdcBits,0,0,200,200,WHITENESS);
   RestoreDC(hdcBits,-1);
   SaveDC(hdcBits);
   SelectObject(hdcBits,hbm2);
   PatBlt(hdcBits,0,0,200,200,WHITENESS);
   Ellipse(hdcBits,0,0,200,200);
   RestoreDC(hdcBits,-1);
   Rectangle(hdcBits,0,0,200,200);
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: buglist3.10 3.10 gpf gp-fault 1x1 200x200<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubcategory: GdiDc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 5, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drawing a Different Icon for Each Application Instance </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q29733 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1988/05/03">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  An application can use the DrawIcon function in its paint procedure to display a different icon for each application instance. The method (outlined below) has five steps.  MORE INFORMATION  1. In the WNDCLASS data structure used to register the app...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAJH,QA28,QATJ,QDL9,QBWO,QBWN,QAB9,QAKR,QAH4,QAHE,QAGX,QBWQ,QAF3,QAY5,QAYL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Drawing a Different Icon for Each Application Instance</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q29733 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An application can use the DrawIcon function in its paint procedure to
display a different icon for each application instance. The method
(outlined below) has five steps.
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>In the WNDCLASS data structure used to register the application's
   main window class, set the hIcon field to NULL. This prevents
   Windows from drawing an icon when the application is minimized. The
   following code demonstrates this step:
<P>
<PRE>   int index;  // global variable to count application instances

   // This function initializes the first application instance
   void InitFirst(HANDLE hInstance)
   {
      WNDCLASS rClass;            // window class structure

      rClass.lpszClassName = "HELLO";
      rClass.hInstance     = hInstance;
      rClass.lpfnWndProc   = WindowProc;
      rClass.hCursor       = LoadCursor(NULL, IDC_ARROW);

      // If hIcon is NULL, Windows will not draw icon. Application
      // paints its own icon as appropriate.
      rClass.hIcon         = NULL;

      rClass.lpszMenuName  = NULL;
      rClass.hbrBackground = COLOR_WINDOW + 1;
      rClass.style         = CS_HREDRAW | CS_VREDRAW;
      rClass.cbClsExtra    = 0;
      rClass.cbWndExtra    = 0;

      RegisterClass(&amp;rClass);     //  register the class

      index = 1;  // set counter to indicate first instance
   }

</PRE><P><LI>The GetInstanceData function provides the value of the instance
   counter from the previous instance. Adding one to this value
   provides the value for the current instance, as follows:
<P>
<PRE>   void InitNext(HANDLE hInstance, HANDLE hPrevInstance)
   {
      GetInstanceData(hPrevInstance, (PSTR)&amp;index, sizeof(int));
      index++;
   }

</PRE><P><LI>During the instance initialization function, load the icon for the
   current instance from the application's resources. In this case,
   Icon1, Icon2, Icon3, and Icon4 are individual icons declared in the
   application's resources. The following code demonstrates this
   procedure:
<P>
   HICON hIcon; // icon handle for this instance
<P>
<PRE>   void InitEvery(HANDLE hInstance, int cmdShow)
   {
      HWND  hWnd;

      hInst = hInstance; // store instance in global variable for
                         // window procedures to use

      switch (index)
         {
      case 1: hIcon = LoadIcon(hInstance, "Icon1");
              break;

      case 2: hIcon = LoadIcon(hInstance, "Icon2");
              break;

      case 3: hIcon = LoadIcon(hInstance, "Icon3");
              break;

      default:
              hIcon = LoadIcon(hInstance, "Icon4");
         }

      CreateWindow( ... ); // and so forth
   }

</PRE><P><LI>When an application receives a WM_PAINT message while the window
   is minimized, draw the icon in the application's client area. The
   IsIconic function returns TRUE if the application is minimized.
   The following code demonstrates this step:
<P>
<PRE>   // In the switch(message) statement of the main window procedure

   case WM_PAINT:
      {
      PAINTSTRUCT ps;

      if (IsIconic(hWnd))
         {
         BeginPaint(hWnd, (LPPAINTSTRUCT)&amp;ps);

         // Paint the desktop window background.
         DefWindowProc(hWnd, WM_ICONERASEBKGND, (WORD)ps.hdc, 0L);

         // Draw the icon in the cleared area
         DrawIcon(ps.hdc, 0, 0, hIcon);

         EndPaint(hWnd, (LPPAINTSTRUCT)&amp;ps);
         }
      else
         // Paint the window as usual
      }

</PRE><P><LI>When the user drags an application's icon with the mouse and the
   application processes the WM_QUERYDRAGICON message as follows,
   Windows changes the mouse cursor to a black-and-white
   representation of the application's icon.
<P>
<PRE>   // In the switch(message) statement of the main window procedure

   case WM_QUERYDRAGICON:
      return (LONG)(WORD)hIcon;
      break;
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: GdiCurico<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Access Methods for Protected Mode Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q77226 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1991/10/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Applications that will run solely in one of Windows protected modes (standard mode or enhanced mode) can take advantage of the attributes of protected mode to reduce the size and improve the speed of the application.  These techniques do not apply ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5W,QDL9,QBW6,QBWO,QBWN,QAJH,QAGI,QBWQ,QAHC,QBVV,QAPN,QAK7,QAY5,QAW6,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Memory Access Methods for Protected Mode Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q77226 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Applications that will run solely in one of Windows protected modes
(standard mode or enhanced mode) can take advantage of the attributes
of protected mode to reduce the size and improve the speed of the
application.
<P>
These techniques do not apply to applications that can be run in Windows
real mode.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To assure compatibility with future versions of Windows, an application
should not make any assumptions about the protection ring of memory
selectors the system provides for memory allocations.
<P>
Using global memory can be more straightforward when an application is
developed for the protected-mode environment. The following four steps
provide a procedure for using memory:

<OL><P><LI>Use the GlobalAlloc() function to allocate memory. Applications
   should ALWAYS use the GMEM_MOVEABLE attribute, which signifies that
   the linear address of the memory block can be changed by the
   system. The selector or handle to this block will not change unless
   the application calls GlobalRealloc() to modify the handle, and
   changes the number of 64K blocks required to satisfy the request.
   For example, the selector can change if a 60K block is increased to
   70K or if a 70K block is reduced to 60K.

<P><LI>Use the GlobalLock() function to obtain the corresponding selector.
   In protected mode, there is no need to bracket each use of an
   object with GlobalLock/GlobalUnlock calls. These calls are required
   in real mode because the Windows memory management algorithm cannot
   move locked objects in memory. In protected mode, locked objects can
   be moved without changing the selector value that is used to refer
   to the object.

<P><LI>Use the selector and the range of offsets (from zero to the size of
   the block) to access the memory.

<P><LI>When the memory block is no longer required, unlock the memory
   block using the GlobalUnlock() function, and free the selector using
   the GlobalFree() function.
<P>
</OL>Some applications introduce incompatibilities by implementing a
private version of the GlobalLock() function to translate a handle to
a selector. While a private function can be made to work for any one
version of Windows, it is not guaranteed to work in future versions.
<P>
The four steps above may be used for discardable memory. However,
Windows cannot discard the memory while it is locked. Therefore, even
in protected mode, applications that use discardable memory objects
should unlock each object when it is not in use. This makes these
memory blocks candidates for discarding should the system run out of
memory.
<P>
Selectors should not be shared between applications unless the rules
outlined in the dynamic data exchange (DDE) specification are
followed. In particular, the GMEM_DDESHARE or GMEM_SHARE flag must be
specified in memory allocation requests. Future versions of Windows
may implement separate address spaces; any applications that
improperly share memory will not function properly in any such
release.
<P>
An application that uses any of these techniques should specify the
Resource Compiler -T switch when resources are added to the
application. This will prevent the application from running in real
mode.
<P>
Additional techniques to decrease the size and increase the speed of
an application developed for protected mode can be found by searching
on the words in this Knowledge Base:
<P>
<PRE>   streamlined
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrMm<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

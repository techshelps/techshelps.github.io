

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Int 21h Get/Set Media ID in the Windows Environment </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104790">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1993/09/29">
<META NAME="Keywords" CONTENT="kb16bitonly kbprg KrDosInt kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The Interrupt 21h Generic IOCTL for Block Devices functions Get Media ID and Set Media ID cannot be used directly from a protected mode application in the Windows operating environment. However, these functions can be used in conjunction with the D...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5W,QAHC,QADN,QAHB,QAYS,QA4H,QAY5,QDL9,QBWO,QBWN,QBXS,QAUD,QACJ,QBWQ,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Int 21h Get/Set Media ID in the Windows Environment</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104790</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Interrupt 21h Generic IOCTL for Block Devices functions Get Media
ID and Set Media ID cannot be used directly from a protected mode
application in the Windows operating environment. However, these
functions can be used in conjunction with the DPMI function Simulate
Real Mode Interrupt.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following Interrupt 21h AX=440Dh Generic IOCTL for Block Devices
functions are automatically translated from protected mode by the
DOSMGR VxD:
<P>
<PRE>   40h - Set Device Parameters
   41h - Write Track on Logical Drive
   42h - Format Track on Logical Drive
   60h - Get Device Parameters
   61h - Read Track on Logical Drive
   62h - Verify Track on Logical Drive
   68h - Sense Media Type

</PRE>The following are not automatically translated by the DOSMGR VxD:
<P>
<PRE>   46h - Set Media ID
   66h - Get Media ID

</PRE>To use the Get Media ID or Set Media ID functions from a protected
mode application in the Windows operating environment, the DPMI
function Simulate Real Mode Interrupt must be used to manually
translate the buffer pointer from protected mode to real mode.
<P>
The sample code below illustrates how the Get Media ID function can be
manually translated by:

<OL><P><LI>Allocating a real mode addressable buffer using GlobalDosAlloc().

<P><LI>Initializing a DPMI real mode register structure with a real mode
   pointer to the buffer.

<P><LI>Issuing the interrupt in real mode using the DPMI function Simulate
   Real Mode Interrupt.

<P><LI>If successful, the content of the real mode addressable buffer is
   copied to the protected mode destination buffer.

<P><LI>The real mode addressable buffer is freed.
<P>
</OL>To translate the Set Media ID function, the contents of the protected
mode source buffer would be copied to the real mode addressable buffer
before issuing the interrupt in real mode.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// This is a standard MS-DOS structure.
</PRE></OL>typedef struct tagMEDIAID
{
<PRE>    WORD  wInfoLevel;
    DWORD dwSerialNum;     // Serial number
    char  VolLabel[11];    // ASCII volume label
    char  FileSysType[8];  // File system type
</PRE>} MEDIAID, far *LPMEDIAID;
<P>
<PRE>// This is a standard DPMI structure.
</PRE>typedef struct tagREALMODEREG {
<PRE>    DWORD rmEDI, rmESI, rmEBP, Reserved, rmEBX, rmEDX, rmECX, rmEAX;
    WORD  rmCPUFlags, rmES, rmDS, rmFS, rmGS, rmIP, rmCS, rmSP, rmSS;
</PRE>} REALMODEREG, FAR *LPREALMODEREG;
<P>
<PRE>//********************************************************************
// RealInt()
//
// Simulate an interrupt in real mode using DPMI function 0300h
// When the interrupt is simulated in real mode, the registers will
// contain the values in lpRealModeReg. When the interrupt returns,
// lpRealModeReg will contain the values from real mode.
//
//********************************************************************

</PRE>BOOL RealInt (BYTE intnum, LPREALMODEREG lpRealModeReg)
{
<PRE>   BOOL bRetVal = TRUE;

   _asm
   {
       mov  ax, 0300h  // Simulate real mode interrupt
       mov  bl, intnum // Interrupt number to simulate
       mov  bh, 0      // Flags
       mov  cx, 0      // Number of words to copy on stack
       les  di, lpRealModeReg
       int  31h
       jnc  Done
       mov  bRetVal, FALSE
   Done:
   }
   return bRetVal;
</PRE>}
<P>
<PRE>//********************************************************************
// GetMediaID()
//
// Get Media ID by simulating an Interrupt 21h, AX=440Dh, CX=0866h in
// real mode. Set up RealModeReg to contain a real mode pointer to a
// MediaID structure.
//********************************************************************

BOOL GetMediaID (WORD      Drive,
                 LPMEDIAID lpMediaID)
{
   REALMODEREG RealModeReg;
   DWORD       dwGlobalDosBuffer;
   LPMEDIAID   lpRMMediaID;
   BOOL        bRetVal;

   // (1) Get a real mode addressable buffer for the MediaID structure.
   //
   dwGlobalDosBuffer = GlobalDosAlloc(sizeof(MEDIAID));
   if (dwGlobalDosBuffer == NULL)
   {
       return FALSE;
   }

   // (2) Initialize the real mode register structure.
   //
   memset(&amp;RealModeReg, 0, sizeof(RealModeReg));
   (WORD)RealModeReg.rmEAX = 0x440D;  // IOCTL for Block Device
   (WORD)RealModeReg.rmEBX = Drive;   // 0 = default, 1 = A, 2 = B
   (WORD)RealModeReg.rmECX = 0x0866;  // Get Media ID
   // Set the real mode DS:DX to a real mode pointer to the buffer.
   // The offset in DX is zero from the memset().
   RealModeReg.rmDS  = HIWORD(dwGlobalDosBuffer);

   // (3) Simulate the real mode interrupt.
   //
   if (RealInt(0x21, &amp;RealModeReg) &amp;&amp;         // Int simulation ok?
       (RealModeReg.rmCPUFlags &amp; 0x0001)==0)  // Carry clear?
   {
       // (4) Copy the content of the real mode addressable buffer
       //     to the protected mode destination buffer.
       //
       lpRMMediaID = (LPMEDIAID) MAKELP(LOWORD(dwGlobalDosBuffer), 0);
       *lpMediaID = *lpRMMediaID;  // Structure copy
       bRetVal = TRUE;
   }
   else
   {
       bRetVal = FALSE;
   }

   // (5) Free the real mode addressable buffer.
   //
   GlobalDosFree(LOWORD(dwGlobalDosBuffer));

   return bRetVal;
</PRE>}
<P>
For more information on the DOS Protected Mode Interface (DPMI), see
the DPMI version 0.9 specification, which is available on the
Microsoft Developer Network CD Disk Four.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: serial number volume label<BR>
Keywords            : kb16bitonly kbprg KrDosInt kbprg<BR>
Version             : 3.0 3.1<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>
Resolution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

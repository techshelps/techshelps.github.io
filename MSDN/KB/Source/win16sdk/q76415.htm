

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Progress Dialog with a Cancel Option </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q76415 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1991/09/24">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The following article describes the mechanisms necessary to implement a progress or activity indicator with a  Cancel Operation  option, to be used for lengthy and CPU-intensive subtasks of an application. Examples of operations using this include:...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGB,QAGC,QDL9,QBWO,QBWN,QA01,QAEV,QAUD,QAGI,QAYC,QA3R,QAY5,QAXB,QAKR,QAIJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating a Progress Dialog with a Cancel Option</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q76415 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following article describes the mechanisms necessary to implement
a progress or activity indicator with a "Cancel Operation" option, to
be used for lengthy and CPU-intensive subtasks of an application.
Examples of operations using this include: copying multiple files,
directory searches, or printing large files.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The progress dialog is implemented in two steps:

<OL><P><LI>Initialize the dialog before starting lengthy or CPU intensive
   subtask.

<P><LI>After each unit of the subtask is complete, call ProgressYield()
   to determine if the user has canceled the operation and to update
   the progress or activity indicator.
<P>
</OL>This is the description of the progress dialog procedure. The
procedure uses a global variable (Cancel) to inform the CPU-intensive
subtask that the user has indicated a desire to terminate the subtask.
<P>
<PRE>WORD Cancel = FALSE;    /* This must be global to all modules */
                        /* which call ProgressYield()         */

</PRE></OL>BOOL FAR PASCAL ProgressDlgProc(hDlg, message, wParam, lParam)
HWND hDlg;
unsigned message;
WORD wParam;
DWORD lParam;
{
<PRE>   switch (message)
      {
      .
      /* Use other messages to update the progress or activity */
      /* indicator.                                             */
      .
      case WM_COMMAND:
         switch (wParam)
            {
            case ID_CANCEL:    /* ID_CANCEL = 2 */
               Cancel = TRUE;

            default:
               return FALSE;
            }
      .
      .
      default:
         return FALSE;
      }
</PRE>}
<P>
The following describes the ProgressYield procedure, which should be
called after each unit of the CPU-intensive subtask is completed. The
ProgressYield procedure uses the IsDialogMessage function (described
in the "Microsoft Windows Software Development Kit Reference Volume
1"). IsDialogMessage will convert keyboard messages into selection
commands for the corresponding dialog box as outlined in Table 1.7
beginning on page 1-51.
<P>
<PRE>void ProgressYield(HWND hwnd)
</PRE>{
<PRE>   MSG   msg;

   /* Remove all available messages for any window that belong */
   /* to the current application.                               */
   while (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE))
      {
      /* Translate and Dispatch the given message if the window */
      /* handle is null or the given message is not for the    */
      /* modeless dialog box hwnd.                             */
      if (!hwnd || !IsDialogMessage(hwnd, &amp;msg))
         {
         TranslateMessage(&amp;msg);
         DispatchMessage(&amp;msg);
         }
      }
</PRE>}
<P>
The following describes how to incorporate the progress dialog as part
of an application's subtask that is CPU-intensive. The PROGRESS_DLG
resource should contain a button with an ID of 2, because this is the
wParam of the WM_COMMAND that will be sent when the user presses the
ESC key. The button should also have the BS_DEFPUSHBUTTON style so
that the ENTER key will also result in the termination of the
CPU-intensive subtask.
<P>
<PRE>   FARPROC lpProgressProc;
   HWND    hwndProgress;            /* This needs to be global if */
                                    /* accessed by other modules.  */
   .
   .
   /* Initialize before starting CPU-intensive work.               */

   lpProgressProc = MakeProcInstance(ProgressDlgProc,
                                     hInst);  /* Current instance. */

   hwndProgress = CreateDialog(hInst,         /* Current instance. */
                              "PROGRESS_DLG", /* Resource.         */
                              hwndParent,     /* Parent handle.    */
                              lpProgressProc);/* Instance address. */
   ShowWindow(hwndProgress);
   .
   .
   /* Start CPU intensive work here. */
      .
      .
      /* Before or after each unit of work, the application */
      /* should do the following:                           */
      ProgressYield(hwndProgress);
      if (Cancel == TRUE)
         break;   /* Terminate CPU-intensive work immediately. */
      .
      .
   /* End CPU-intensive work here. */
   .
   .
   DestroyWindow(hwndProgress);
   FreeProcInstance(lpProgressProc);
   .
   .
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrDlgs<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

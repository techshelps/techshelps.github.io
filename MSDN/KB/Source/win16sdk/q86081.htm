

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: DLL Function Returns Float or Double Value Incorrectly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q86081 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1992/06/28">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  When a function using the C calling convention and exported from a dynamic- link library (DLL) returns a data value of type float, double, or long double, the calling application receives unexpected values.  CAUSE =====  The pointer used to return ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAUD,QBC7,QAY5,QAIF,QBV8,QBFY,QAHH,QAB9,QALW,QAJH,QDNN,QAKD,QDL9,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: DLL Function Returns Float or Double Value Incorrectly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q86081 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg kbprb kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a function using the C calling convention and exported from a dynamic-
link library (DLL) returns a data value of type float, double, or long
double, the calling application receives unexpected values.
<P>
<P><h2>CAUSE</h2>
 
<P>
The pointer used to return a floating-point result under the C calling
convention is invalid once control returns to the application.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Declare the DLL function using the Pascal calling convention or allocate
memory from the global heap to hold the floating-point result and return
the handle from the DLL function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The DLL and any application that calls the DLL each have separate
floating-point accumulators. When an application calls a DLL function
declared with the Pascal calling convention, the application allocates
space on the stack to receive the returned data type. The DLL function
pushes the value onto the stack for the application to use.
<P>
When an application calls a DLL function that uses the C calling
convention, no stack space is allocated because the calling function
cleans up the stack. Under the C calling convention, the DLL function
returns a pointer (in DX:AX) to the floating-point accumulator, which
contains the result. However, once the application regains control,
the pointer is not valid.
<P>
The code examples below demonstrate returning a float value under the
C and Pascal calling conventions:
<P>
<P><h3>C Calling Convention</h3>
 
<P>
<PRE>// C calling convention - DLL
// Compile options required: /Asw /G2sw /Zp

</PRE>HANDLE _far floatcalc(float fl1, float fl2);
<P>
HANDLE _far floatcalc(float fl1, float fl2)
{
<PRE>   HANDLE hFloat;
   float _far *pFloat;

   hFloat = GlobalAlloc(GMEM_MOVEABLE, sizeof(float));
   pFloat = (float _far *)GlobalLock(hFloat);
   *pFloat = fl1 * fl2;
   GlobalUnlock(hFloat);
   return hFloat;
</PRE>}
<P>
<PRE>// C calling convention - Application
// Compile options required: /AS /G2sw /Zp

</PRE>extern HANDLE _far floatcalc(float fl1, float  fl2);
<P>
<PRE>void Calc(void)
</PRE>{
<PRE>   float _far *pFloat, fl;
   HANDLE lFloat;

   lFloat = floatcalc((float)3.0, (float)4.1);  // Call DLL function
   pFloat = (float _far *)GlobalLock(lFloat);
   fl = *pFloat;
   GlobalFree(lFloat);
</PRE>}
<P>
<P><h3>Pascal Calling Convention</h3>
 
<P>
<PRE>// Pascal calling convention - DLL
// Compile options required: /Asw /G2sw /Zp

</PRE>float _far _pascal FloatCalc(float fl1, float fl2);
<P>
float _far _pascal FloatCalc(float fl1, float fl2)
{
return fl1 * fl2;
}
<P>
<PRE>// Pascal calling convention - Application
// Compile options required: /G2sw /Zp

</PRE>extern float _far _pascal FloatCalc(float fl1, float fl2);
<P>
<PRE>void Calc(void)
</PRE>{
<PRE>   float temp;

   temp = FloatCalc((float)3.1, (float)4.2);  // Call DLL function
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg kbprb kbcode<BR>
KBSubcategory: KrFltPt<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tracking Down Lost System Resources </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71455 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/04/18">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The term  system resources  refers to two scarce system-wide resources: the USER heap and the GDI heap. These two segments are each limited to 64K, and they are both shared by all the applications running under Windows.  During development of a Win...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QDL9,QBWO,QBWN,QAGI,QAIM,QAGU,QAJH,QAGB,QBWQ,QBVV,QAKJ,QAEF,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Tracking Down Lost System Resources</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71455 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The term "system resources" refers to two scarce system-wide
resources: the USER heap and the GDI heap. These two segments are each
limited to 64K, and they are both shared by all the applications
running under Windows.
<P>
During development of a Windows-based application, it is important to make
sure that all the system resources allocated by the application at run
time are released when the application terminates.
<P>
If too many system resources are lost, and either the USER heap or the
GDI heap gets too full, performance will degrade for the entire
Windows system.
<P>
The information below discusses how system resources can be "lost" by
an application, and how to track down and correct such problems when
they occur. In particular, it discusses:

<OL><P><LI>Free System Resources -- A rough gauge of system resource use.

<P><LI>The GDI Heap -- The types of objects that are allocated in the GDI
   heap, and general rules for making sure that these objects are
   properly released.

<P><LI>The USER Heap -- The types of objects that are allocated in the
   USER heap, and general rules for making sure that these objects are
   properly released.

<P><LI>Troubleshooting and Heap Walker -- Specific techniques and tools for
   tracking down lost system resources.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Free System Resources</h3>
 
<P>
The Program Manager's About Program Manager dialog box displays a Free
System Resources value. This value indicates the amount of room left
in the heap (USER or GDI) with the smallest amount of free space.
There is no Windows API call that an application can use to obtain
this value.
<P>
The easiest way to tell if an application is losing system resources
is to examine Program Manager's Free System Resources value before and
after
running the application. It is acceptable if this value goes down a
little the first time the application is run, however if the value
decreases every time the application runs and exits, system resources
are being allocated and not released.
<P>
<P><h3>The GDI Heap</h3>
 
<P>
There are six GDI objects that a Windows program can create: pens,
brushes, fonts, bitmaps, regions, and palettes. Space for each of
these objects is allocated in the GDI heap.
<P>
Normally, the life cycle of a GDI object requires that the following
steps be performed:

<OL><P><LI>Create the GDI object.
</OL>2. Use the object.
3. Delete the object.
<P>
The DeleteObject call is used to delete most GDI objects.
<P>
The three general rules for deleting GDI objects are:

<OL><P><LI>An application deletes all GDI objects that it creates.

<P><LI>Do not delete GDI objects while they are selected into a valid
   device context.

<P><LI>Do not delete stock objects.
<P>
</OL>Also, the following calls should always be matched:
<P>
<PRE>   CreateDC           -&gt; DeleteDC
   CreateCompatibleDC -&gt; DeleteDC
   CreateIC           -&gt; DeleteDC
   GetDC              -&gt; ReleaseDC
   BeginPaint         -&gt; EndPaint

</PRE></OL>Creating GDI objects that are never destroyed is probably the most
common cause of lost system resources. A careful examination of every
place in the application's code that uses GDI objects will often
reveal the problem.
<P>
The debugging version of Windows 3.1 will FatalExit when an application
terminates if a GDI object owned by the application has not been deleted.
<P>
<P><h3>The USER Heap</h3>
 
<P>
When an application creates window classes, windows, and menus, these
objects take up room in the USER heap. When an application terminates,
Windows usually reclaims the memory used by objects in the USER heap.
<P>
Menus are a notable exception to this rule. Windows destroys the
current menu of a window that is being destroyed. Windows does not
destroy menus if they are not the current menu for any window. This
can cause problems for applications that switch between multiple
menus: the "extra" menus are not automatically destroyed when the
application terminates.
<P>
Therefore, if an application uses multiple menus, perform the
following steps:

<OL><P><LI>Keep the handle to each menu.

<P><LI>When the application is terminating, use the GetMenu function to
   discover which menu is currently being used. Do not call the
   DestroyMenu function on this menu, Windows will destroy it
   automatically.

<P><LI>Call the DestroyMenu function to destroy each of the other menus.
   This will reclaim the memory in the USER heap that these menus were
   using.
<P>
</OL>Because the USER heap is a shared system resource, it is important
that an application does not allocate too many USER objects at once.
If the USER heap becomes too full, subsequent calls to the
RegisterClass and CreateWindow functions will fail.
<P>
This means that an application cannot create an excessively large
number of windows. Also, when calling the RegisterClass functions,
make sure that the cbWndExtra and cbClassExtra fields of the WNDCLASS
structure are explicitly set to 0 (zero) if no extra bytes are needed.
<P>
Also, the following calls should always be matched:
<P>
<PRE>   CreateIcon   -&gt; DestroyIcon
   CreateCursor -&gt; DestroyCursor

</PRE></OL><h3>Troubleshooting and Heap Walker</h3>
 
<P>
As mentioned above, Program Manager's Free Systems Resources value can
provide evidence that memory objects are not being reclaimed in the
USER or GDI heaps.
<P>
It is sometimes unclear whether or not a particular Windows API call
that creates an object must be balanced by a later call to explicitly
delete the object. The following is a simple test that can be
performed to find out:

<OL><P><LI>Alter the Generic sample application to ensure that it contains a
   loop that makes the API call in question 50 times, creating 50 of
   the objects in question.

<P><LI>Run this version of Generic repeatedly. If the Program Manager's Free
   System Resources value goes down every time Generic runs and exits,
   a balancing API call must be made to reclaim the system resources
   before Generic terminates.
<P>
</OL>The most powerful tool for looking at problems with lost system
resources is the Heap Walker application. Heap Walker is included with
the Microsoft Windows Software Development Kit (SDK). Chapter 11 of
the "Microsoft Windows Software Development Kit Tools" guide explains
how to use Heap Walker. In particular, page 11-8 outlines the
procedure for checking for leftover GDI objects.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrRsc<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

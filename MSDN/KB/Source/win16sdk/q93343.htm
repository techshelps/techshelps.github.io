

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling Int86?, Intdos?, and DOS3Call() from Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q93343 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1992/12/07">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Int86/Int86x and Intdos/Intdosx functions, which are part of the C Run-time library, can be used to execute a documented MS-DOS-based software interrupt. The Windows (application programming interface (API) DOS3Call() also allows a Windows-based ap...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADN,QAHC,QDL9,QBWO,QBWN,QAGI,QBWQ,QAHB,QAY5,QAY2,QBVV,QBV8,QAJH,QAB9,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Calling Int86?, Intdos?, and DOS3Call() from Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q93343 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Int86/Int86x and Intdos/Intdosx functions, which are part of the C Run-time
library, can be used to execute a documented MS-DOS-based software
interrupt. The Windows (application programming interface (API) DOS3Call()
also allows a Windows-based application to call an MS-DOS Interrupt 21h
(Int 21h) function. Under the Windows versions 3.x environment, it is
acceptable to call any of these functions from within an application or a
DLL (dynamic-link library). This article discusses certain issues involved
with using these functions in Windows.
<P>
NOTE: The Win32 "Programmer's Reference, Volume 1" manual states that
DOS3Call() (or any 80x86 specific interrupt call) is NOT supported, and
therefore an application that uses ANY of the above mentioned functions, by
definition, will not run under Windows NT.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are certain issues that must be considered when calling any of the
above mentioned functions from within a Windows-based application or a DLL.
Some of these issues are listed below:

<UL><LI>Both the Int86x and Intdosx functions copy the DS and ES register
   values from the SREGS structure to the CPU registers before issuing
   the software interrupt. It is important to initialize the DS and ES
   register values in the SREGS structure BEFORE calling int86x() and
   intdosx(). Normally this is done by calling the _segread() function
   or the _FP_SEG macro. Otherwise, a general protection (GP) fault
   may occur as a result of attempting to load invalid selector values
   into the DS and ES registers from uninitialized values in the SREGS
   structure.

<LI>Another issue is related to memory models, DLLs, and passing correct
   parameters to the int86/int86x and intdos/intdosx functions. These
   functions take, as parameters, pointers to structures and unions.
   Therefore, while using small or medium model, you must ensure that
   these objects are always in the automatic data segment or the
   DGROUP. Thus, in a DLL, these objects cannot be allocated from the
   stack, such as a local variable, because SS != DS in a DLL. In
   addition, in an application these objects cannot be allocated from
   the global heap using the global memory APIs or be declared as
   being FAR (which would put them in a different data segment than
   the DGROUP).

<LI>Executing the software interrupt, Interrupt 21h, directly from
   within Windows is not significantly slower than calling DOS3Call().
   Because this speed factor depends on the type of the CPU being
   used, it should not be considered a major factor in using either
   the DOS3Call() or Interrupt 21h call in Windows. Also, the speed
   factor is only an implementation issue and not a conceptual issue.
   For more information on issues related to compatibility,
   portability, and so forth, please query on the following words in
   the Microsoft Knowledge Base:
<P>
<P><PRE>      low-level and interrupts and portability
</PRE>
<LI>Both standard mode MS-DOS extender and Windows enhanced mode provide
   translation services for most of the commonly used interrupts.
   However, when an application needs to communicate with a network, a
   TSR (terminate-and-stay-resident program), or any real mode
   software for which Windows does not provide automatic translation,
   it must use MS-DOS Protected Mode Interface (DPMI) services. For more
   information on the list of interrupts that are supported/translated
   by protected mode Windows or on DPMI, please query on the following
   words in the Microsoft Knowledge Base:
<P>
<P><PRE>      dpmi and INTEL and 31h
</PRE><P>
   (NOTE: One of the articles incorrectly states that the Int 25h and
   Int 26h interrupts are not translated by Windows.)
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrDosint<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: ENTER &amp; TAB Keys in Dialog Box Multiline Edit Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q76474 ">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1991/09/25">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  In an application running under Windows version 3.0 or 3.1, when the user interacts with a dialog box and presses the ENTER key, the application accepts any changes made to information in any control of the dialog box and dismisses the dialog box. ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAHP,QA01,QADO,QAEV,QDL9,QBWO,QBWN,QAPN,QBWQ,QAH4,QAYC,QAY5,QAB5,QANX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: ENTER &amp; TAB Keys in Dialog Box Multiline Edit Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q76474 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In an application running under Windows version 3.0 or 3.1, when the user
interacts with a dialog box and presses the ENTER key, the application
accepts any changes made to information in any control of the dialog box
and dismisses the dialog box. However, when the dialog box contains a
multiline edit control (MLE), it may be considered more intuitive for the
user to use the ENTER key to advance to the next line in the edit control.
Windows 3.0 and 3.1 use the CTRL+ENTER key combination for this purpose.
<P>
Similarly, Windows uses the TAB key to move the input focus to the next
control in the tabbing sequence in a dialog box. However, in an edit
control, it might be useful for the user to be able to enter TAB
characters. Windows uses the CTRL+TAB key combination for this purpose.
<P>
Windows version 3.1 defines the ES_WANTRETURN edit control style, which
changes the behavior of the ENTER key in an MLE in a dialog box. If an
application is designed to run only under Windows versions 3.1 and later,
specify the ES_WANTRETURN edit control style. None of the three techniques
described below is necessary.
<P>
This article discusses three different methods that can be used to modify
the behavior of the ENTER key in an MLE in an application's dialog box.
These methods are compatible with Windows versions 3.0 and 3.1. Methods 1
and 3 below can be adapted to modify the behavior of the TAB key, if
desired.
<P>
A major disadvantage of any of these methods is that the ENTER or TAB key
will no longer act as it does in other applications, and its behavior no
longer will be what an experienced Windows user would expect.
<P>
MLEENTER is a file in the Microsoft Software Library that demonstrates two
of the methods described in this document.
<P>
Download MLEENTER.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/MLEENTER.EXE">MLEENTER.EXE</A> <I>(size: 23472 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/MLEENTER.EXE">MLEENTER.EXE</A> <I>(size: 23472 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
Under versions of Windows earlier than 3.0, an edit control subclass
procedure could respond to the WM_GETDLGCODE message with DLGC_WANTALLKEYS
to receive all keyboard input. This technique is not effective in Windows
3.0 or later.
<P>
<P><h3>METHOD 1</h3>
 
<P>
This method involves subclassing the MLE. It is most useful when the edit
control is already subclassed for another reason because the amount of
additional code is minimal. This method involves three steps:

<OL><P><LI>Check for a WM_KEYDOWN message with wParam set to VK_RETURN.

<P><LI>Post a WM_CHAR message with wParam set to 0x0a to the edit control.

<P><LI>Do not pass the WM_KEYDOWN message to the original window procedure
   by returning immediately from the subclass procedure.
<P>
</OL>The following code fragment demonstrates this method:
<P>
<PRE>    // In the subclass procedure
    switch (msg)
        {
        case WM_KEYDOWN:
            if (VK_RETURN == wParam)
                {
                PostMessage(hWnd, WM_CHAR, 0x0A, 0L);
                return 0L;
                }
            break;

        ...
        }

    return CallWindowProc(...);

</PRE></OL>The disadvantage to subclassing is that it may be more fragile, with
respect to changes in future versions of Windows, than other methods.
<P>
<P>
<P><h3>METHOD 2</h3>
 
<P>
This method uses the DM_GETDEFID message that Windows sends to a dialog box
procedure when the user presses the ENTER key in a dialog box. This method
has the additional advantage of easily handling multiple multiline edit
controls in the same dialog box and involves three steps:

<OL><P><LI>Process WM_COMMAND messages with the HIWORD(lParam) set to
   EN_SETFOCUS and EN_KILLFOCUS to determine if an MLE has the focus.
   When EN_SETFOCUS signals that a MLE has the focus, set a static
   flag to TRUE. When EN_KILLFOCUS signals that a MLE has lost the
   focus, reset the flag to FALSE.

<P><LI>When the dialog procedure receives a DM_GETDEFID message, an edit
   control has the focus, and the ENTER key is down, post a WM_CHAR
   message with wParam set to 0x0a to the edit control with the focus.

<P><LI>If an edit control had the focus, return TRUE from the dialog
   function; otherwise, the function must return FALSE. Failing to
   return FALSE will prevent the ENTER key from behaving properly when
   an edit control does not have the focus.
<P>
</OL>The following code fragment demonstrates this procedure:
<P>
<PRE>    static fEditFocus;

    switch (msg)
        {
        case WM_COMMAND:
            // ID_EDIT is a multiline edit control
            if (ID_EDIT == wParam)
                {
                if (EN_KILLFOCUS == HIWORD(lParam))
                    fEditFocus = FALSE;

                if (EN_SETFOCUS == HIWORD(lParam))
                    fEditFocus = TRUE;
                }
            else
                ...
            break;

        case DM_GETDEFID:
            /*
             * Check if an edit control has the focus and that
             * the ENTER key is down. DM_GETDEFID may be sent
             * in other situations when the user did not press
             * the ENTER key.
             */
            if (fEditFocus &amp;&amp; (0x8000 &amp; GetKeyState(VK_RETURN)))
                {
                PostMessage(hEdit, WM_CHAR, 0x0A, 0L);
                return TRUE;
                }
            break;
        }
    return FALSE;


</PRE></OL><h3>METHOD 3</h3>
 
<P>
Applications that use modeless dialog boxes are required to filter messages
through the IsDialogMessage() function. The IsDialogMessage() function
modifies certain messages to implement dialog box behavior. For example,
the ENTER key message is modified to generate a WM_COMMAND message with
wParam set to IDOK.
<P>
An application is, however, free to modify the message before passing it to
the IsDialogMessage() function. The code example below modifies the
WM_KEYDOWN message containing a VK_RETURN to be a EM_REPLACESEL message
with a carriage return (CR) and linefeed (LF) combination.
<P>
The disadvantage to this method is that it places additional code in the
main message loop for the application, slowing the processing of every
message. In addition, code in the message loop is far removed from the
dialog procedure, and is therefore harder to maintain.
<P>
The following code fragment demonstrates this method:
<P>
<PRE>    /*
     * hWndEditControl is the handle to the multiline edit control.
     * hWndModeless is the handle to the modeless dialog box.
     */

    while (GetMessage(&amp;msg, NULL, 0, 0))
        {
        if (hWndEditControl == msg.hWnd
                &amp;&amp; WM_KEYDOWN == msg.message
                &amp;&amp; VK_RETURN == msg.wParam)
            /*
             * Normally, Windows will translate this to IDOK.
             * Perform a custom translation to something more useful
             * (replace selection with a carriage return-linefeed).
             */
            {
            msg.message = EM_REPLACESEL;
            msg.wParam  = 0;
            msg.lParam  = (long)(LPSTR)"\015\012";
            }

        if (!IsDialogMessage(hWndModeless, &amp;msg))
            {
            TranslateMessage(&amp;msg);
            DispatchMessage(&amp;msg);
            }
        }

</PRE>If the functionality of a modal dialog box is desired in an application, it
can be simulated by using a modeless dialog box that disables its parent
window when the dialog is created.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 softlib MLEENTER.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: UsrDlgs<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

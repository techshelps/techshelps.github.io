

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Explanation of Exporting Functions in Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105137">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1993/10/12">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Exporting functions under Windows is one of the least understood but most important concepts to understand. If string constants are garbage or global variables contain the wrong information, then exported functions are probably not doing their job....">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QAH4,QAY5,QAKD,QAB9,QBV8,QAY2,QAR4,QAKR,QAHE,QAEF,QDL9,QBWO,QBWN,QAA1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Explanation of Exporting Functions in Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105137</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Exporting functions under Windows is one of the least understood but
most important concepts to understand. If string constants are garbage
or global variables contain the wrong information, then exported
functions are probably not doing their job. Exported functions simply
establish the correct data segment (DS) value on function entry.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Function entry point code, referred to as "prolog" code, does the work
of setting up all the registers on function entry. Exported prolog
code works with the Windows loader to support all the different
techniques of establishing DS. There are three types of exported
prolog code: loading DS from the value in AX, loading DS from the
value in SS, and loading DS from a hard-coded value fixed up by the
loader. The first two techniques are used in applications, the last is
used by dynamic-link libraries.
<P>
<P><h3>Loading DS from the Value in AX</h3>
 
<P>
This is the classic application exporting technique. This works with
the MakeProcInstance function, which loads the correct DS value into
AX before calling the exported function's prolog code. As an
application is loaded, all exported functions built with the -Gw
switch or -GA -GEa pair are modified so that the first 3 bytes of
prolog code are NOPs. The following prolog code sets up the stack
frame and finally loads DS from the value in AX. In mixed mode, it
would appear as follows:
<P>
<PRE>  {
     nop
     nop
     nop
     push   bp
     mov    bp,sp
     push   ds
     mov    ds,ax

</PRE><h3>Loading DS from the Value in SS</h3>
 
<P>
This is a more recent technique that assumes that the SS register
contains the correct DS value on function entry. For applications that
don't switch their stack segment nor are called from other
applications, this is a valid assumption. The -GA default code loads
DS from the value in SS without the loader required to fix up the
prolog code. In mixed mode, it would appear as follows:
<P>
<PRE>  {
     mov    ax,ss
     push   bp
     mov    bp,sp
     push   ds
     mov    ds,ax

</PRE><h3>Loading DS from a Hard-Coded Value</h3>
 
<P>
This is the classic dynamic-link library exported function prolog
code. Because libraries are single instance, it's possible to get away
with hard-coded values to establish DS. As a library is loaded, all
exported functions built with -Gw or -GD are fixed up to load DS from
a hard-coded value. In mixed mode, it appears as follows:
<P>
<PRE>  {
     mov    ax,????
     push   bp
     mov    bp,sp
     push   ds
     mov    ds,ax

</PRE>In the two techniques that involve the loader, an EXPDEF record must
appear in the EXE header for the exported function. This can be done
by the classic EXPORTS statement in the module definition file (.DEF)
or via the -GEe compiler switch. At a minimum, the newer switches
require the __export keyword to brand exported functions at compile
time or the -GEf switch (which brands all far functions as __export).
An example of the use of the __export keyword is as follows:
<P>
<PRE>   void CALLBACK __export TheExportedFunction()
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrTsksIns<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

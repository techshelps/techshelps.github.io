

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: SpawnAndWait DLL Provides Synchronous Spawn Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q105116">
<META NAME="KBModify" CONTENT="1996/02/15">
<META NAME="KBCreate" CONTENT="1993/10/10">
<META NAME="Keywords" CONTENT="kbprg kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  The sample RUNWAIT demonstrates using TOOLHELP.DLL to provide a dynamic- link library (DLL) function that spawns applications and waits for their termination before returning from the function call. The sample is compatible with Visual Basic (VB) a...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBQU,QAY5,QATX,QAB4,QBBI,QAGI,QBV8,QAB9,QAUD,QAHE,QAJH,QAC2,QBWS,QAPF,QAOX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: SpawnAndWait DLL Provides Synchronous Spawn Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 15, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q105116</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample RUNWAIT demonstrates using TOOLHELP.DLL to provide a dynamic-
link library (DLL) function that spawns applications and waits for their
termination before returning from the function call. The sample is
compatible with Visual Basic (VB) and Windows 3.0. The sample loads a
hidden task at DLL startup time to own the Toolhelp callback.
<P>
Download RUNWAIT.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/RUNWAIT.EXE">RUNWAIT.EXE</A> <I>(size: 23229 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/RUNWAIT.EXE">RUNWAIT.EXE</A> <I>(size: 23229 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following is the VB function declaration (this must be on a single line
in VB):
<P>
<PRE>Declare Function SpawnAndWait&amp; Lib "RUNLIB.DLL" (ByVal parenthwnd%,
</PRE>ByVal lpszOp$, ByVal lpszFile$, ByVal lpszParams$, ByVal lpszDir$,
ByVal nShow%)
<P>
DWORD SpawnAndWait(hwnd, lpszOp, lpszFile, lpszParams, lpszDir, fsShowCmd)
<P>
<PRE>HWND   hwnd        /* Handle of parent window                          */
LPCSTR lpszOp      /* Address of string for operation to perform       */
LPCSTR lpszFile    /* Address of string for filename                   */
</PRE>LPCSTR lpszParams  /* Address of string for executable-file parameters */
<PRE>LPSCTR lpszDir     /* Address of string for default directory          */
int    fsCmdShow   /* Whether file is shown when opened                */

</PRE>The SpawnAndWait function executes and waits for termination of the
specified application or associated file.
<P>
Parameter  Description
 
<P>
<PRE>hwnd       Identifies the parent window. This window receives any message
           boxes an application produces (for example, for error
           reporting).

lpszOp     Points to a null-terminated string specifying the operation to
           perform. This string can be "open" or "print". If this parameter
           is NULL, "open" is the default value.

lpszFile   Points to a null-terminated string specifying the file to
           open.

</PRE>lpszParams Points to a null-terminated string specifying parameters
<PRE>           NULL; "open" is the default value. Passed to the application
           when the lpszFile parameter specifies an executable file. If
           lpszFile points to a string specifying a document file, this
           parameter is NULL.

lpszDir    Points to a null-terminated string specifying the default
           directory.

</PRE>fsShowCmd  Specifies whether the application window is to be shown when
<PRE>           the application is opened. See ShowWindow for valid values.

</PRE><h3>Returns</h3>
 
<P>
HIWORD == hInstance of started application. Values less than 32 are errors
<PRE>          returned from ShellExecute. 0xFFFF is a general error.

</PRE>LOWORD == Return code of spawned application. 0xFFFF is a general error.
<P>
<P><h3>Comments</h3>
 
<P>
The file specified by the lpszFile parameter can be a document file or an
executable file. If it is a document file, this function opens or prints
it, depending on the value of the lpszOp parameter. If it is an executable
file, this function opens it, even if the string "print" is pointed to by
lpszOp.
<P>
WARNING: This function will not wait on applications such as Word and Excel
that respond to the DDE broadcast made by ShellExecute or the second
instance of multiple data applications.
<P>
WARNING: This function supports only one block at a time per task. Calling
tasks should not call this function when it has a prior pending
SpawnAndWait call.
<P>
<P><h3>Sample Code</h3>
 
<P>
DWORD SpawnAndWaitIndirect(lpSpawnWait)
<P>
LPSPAWNWAIT lpSpawnWait /* Far reference to SPAWNWAIT structure
<P>
typedef struct tagSPAWNWAIT
{
<PRE>   HWND   hwnd;
   LPCSTR lpszOp;
   LPCSTR lpszFile;
   LPCSTR lpszParams;
   LPCSTR lpszDir;
   int    fsShowCmd;
   LPMSGPROC lpmsgproc;
</PRE>} SPAWNWAIT;
<P>
<PRE>Member       Description
</PRE> 
<P>
<PRE>hwnd         Handle of parent window
lpszOp       Address of string for operation to perform
lpszFile     Address of string for filename
lpszParams   Address of string for executable-file parameters
lpszDir      Address of string for default directory
fsShowCmd    Whether file is shown when opened
lpmsgproc    Address of application provided MessagePump (must load
             DS on entry)

void CALLBACK MessagePump(lpmsg)

LPSMG lpsg   /* Long pointer to MSG to process

</PRE>Message Proc is a place holder for an application-provided callback
function (which must load DS on entry) that will process messages retrieved
in RunLib's PeekMessage loop. It allows the calling application to do
modeless dialog box and accelerator message processing.
<P>
lpmsgproc should be set to NULL if it is not used. RunLib will do a default
TranslateMessage/DispatchMessage instead.
<P>
The following is an example of a message processing function for a MDI
application:
<P>
<PRE>void CALLBACK MyMessagePump(LPMSG lpmsg)
</PRE>{
<PRE>   if(!TranslateMDISysAccel(hClient, lpsmg) &amp;&amp;
      !TranslateAccelerator(hFram, hAccel, lpsmg))
      {
         TranslateMessage(lpsmg);
         DispatchMessage(lpmsg);
      }
</PRE>}
<P>
<P><h3>Returns</h3>
 
<P>
HIWORD == hInstance of started application. Values less than 32 are errors
<PRE>          returned from ShellExecute. 0xFFFF is a general error.

</PRE>LOWORD == Return code of spawned application. 0xFFFF is a general
<PRE>          error.

</PRE><h3>Comments</h3>
 
<P>
The file specified by the lpszFile parameter can be a document file or an
executable file. If it is a document file, this function opens or prints
it, depending on the value of the lpszOp parameter. If it is an executable
file, this function opens it, even if the string "print" is pointed to by
lpszOp.
<P>
WARNING: This function will not wait on applications such as Word and Excel
that respond to the DDE broadcast made by ShellExecute or the second
instance of multiple data applications.
<P>
WARNING: This function supports only one block at a time per task. Calling
tasks should not call this function when it has a prior pending
SpawnAndWait call.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 softlib RUNWAIT.EXE<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: KrToolHlp<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 15, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

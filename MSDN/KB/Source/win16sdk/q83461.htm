

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extended Characters Different Under Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83461 ">
<META NAME="KBModify" CONTENT="1998/01/15">
<META NAME="KBCreate" CONTENT="1992/04/13">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Applications in the Windows environment must typically deal with two different character sets: the ANSI (American National Standards Institute) character set and the OEM (original equipment manufacturer) character set. Conversely, applications in t...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAWP,QDJS,QATY,QATZ,QBXS,QDL9,QBWO,QBWN,QAWN,QBWQ,QAKE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Extended Characters Different Under Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 15, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83461 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.1 and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Applications in the Windows environment must typically deal with two
different character sets: the ANSI (American National Standards
Institute) character set and the OEM (original equipment manufacturer)
character set. Conversely, applications in the MS-DOS environment must
deal only with the OEM character set. This article describes how
Windows deals with the ANSI and OEM character sets.

<OL><P><LI>When ALT+xxx is used to enter a character from the OEM character
   set into an application in the Windows environment that uses the
   ANSI character set, Windows displays the character in the ANSI
   character set that most closely matches the entered character.

<P><LI>When a character from the OEM character set is entered into a file
   using a text editor under MS-DOS and the file is displayed under
   Windows, the character from the ANSI character set that has the
   same character code number as the OEM character is displayed.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>OEM and ANSI Character Sets</h3>
 
<P>
MS-DOS uses the OEM character set. This character set varies between
computers and depends on the code page ROM (read-only memory)
installed by the computer manufacturer. For example, personal
computers manufactured for use in the United States use a character
set called code page 437, while computers manufactured for use in
Portugal use code page 860. MS-DOS uses the OEM character set in
applications and to create files and filenames.
<P>
For the most part, Windows uses fonts organized according to the ANSI
character set (called ANSI-set fonts, in this article). Windows also
supports fonts that use the same OEM character set that MS-DOS uses
(called OEM-set fonts, in this article).
<P>
Character positions 32 through 127 are identical in the ANSI and OEM
character sets for most code pages (including code pages 437, 850,
852, 860, 861, and 865). The remaining characters of the OEM character
set (character positions 0 through 31 and 128 through 255) either do
not appear in the ANSI character set, or exist at a different position
in the ANSI character set. Therefore, some characters in the OEM
character set cannot be displayed in Windows using an ANSI-set font.
If an application must display such characters under Windows, an OEM-
set font is required.
<P>
<P><h3>Typing ANSI and OEM Characters in Windows</h3>
 
<P>
In the Windows environment, a user can enter any character in the
character set by holding down the ALT key and typing 0xxx, where "xxx"
is the decimal number of the desired character position in the font.
For example, with an ANSI-set font in use, ALT+0123 will display the
123rd character in the ANSI character set. Similarly, with an OEM-set
font in use, ALT+0123 will display the 123rd character in the OEM
character set.
<P>
In the MS-DOS environment, a user can enter any character in the OEM
character set by holding down the ALT key and typing xxx (no leading
zero), where "xxx" is the decimal number of the desired character
position in the font.
<P>
If a user enters an MS-DOS OEM character set code (ALT+xxx) in an
application for Windows that uses an ANSI-set font, Windows converts
the OEM-set character to the character that most closely matches in
the ANSI set. This conversion is governed by a mapping table that is
installed with Windows. Because some OEM-set characters with positions
greater than 127 do not exist in the ANSI character set, the result of
the conversion in Windows may differ from the character in the OEM
set. The OemToAnsi function uses the same mapping table to perform its
character conversions.
<P>
For example, while OEM character-set code page 437 contains a square-
root symbol at position 251, the ANSI character set does not contain
this character. Consequently, when the user types an ALT+251 in an
edit control that uses the ANSI character set, an underscore character
appears because Windows defines the character mapping in this manner.
As another example, the C-cedilla character exists in both the ANSI
character set and in the OEM character-set code page 437. Therefore,
typing ALT+128 in an edit control creates the desired C-cedilla
character. Note that while the character exists in both character
sets, its position is different in each set (128 in the OEM character
set and 199 in ANSI). The alternative method to request a C-cedilla is
to type ALT+0199, which specifies the character's position in the ANSI
character set.
<P>
An edit control that uses the ES_OEMCONVERT style and a combo box that
uses the CBS_OEMCONVERT style have a different behavior from that
described above. These two styles cause their text contents to be
converted from lowercase letters to uppercase letters, then from the
ANSI set to the OEM set and then back to the ANSI set for display.
This behavior is important for an edit control in which the user
specifies a filename. If the user enters characters that do not exist
in the underlying OEM character set, the name of the file will differ
from the name specified by the user, which would be confusing. Because
the characters are mapped into characters that exist in the OEM
character set, the filename specified always matches the filename
actually used. The contents are converted to uppercase characters
because it is customary in some languages to eliminate diacritical
marks when a character is in uppercase, and the OEM character set does
not contain uppercase characters with these diacritical marks.
<P>
<P>
Displaying a String Containing OEM-Set Characters
<P><h3>in an Application that Uses the ANSI Character Set</h3>
 
<P>
Text editors running under MS-DOS use the OEM character set for
display and in the files they create. When a Windows-based text editor
loads a file that uses the OEM character set, the editor interprets
the characters according to the ANSI character set. Character
positions 32 through 127 are not affected under most code pages
because both the ANSI and OEM character sets have identical
characters. However, character positions greater than 127 may be
displayed differently than in the MS-DOS-based text editor because the
character positions represent different characters in the ANSI
character set.
<P>
The solution to this difficulty is to use a Windows-based text editor
that uses the ANSI character set when the text contains characters in
both the OEM and ANSI character sets. A Windows-based editor accepts
ANSI-set characters directly and converts OEM-set characters to the
closest matching ANSI-set characters. The resulting text contains only
ANSI-set characters, which can be displayed by any application running
under the Windows environment. If an application must display OEM-set
characters that are not in the ANSI character set, it must use an OEM-
set font.
<P>
Consider the following example: An MS-DOS-based text editor is used to
edit a application's resource file on a system with OEM character-set
code page 437 installed. The user types ALT+129 as part of the static
text to label a button in a dialog box. However, when the dialog box
is displayed, the text is not as expected but contains a black
rectangle where the u-umlaut character belongs. The black rectangle is
used to signify character positions that are not defined in the ANSI
character set.
<P>
To workaround to this problem is to edit the resource file with a
Windows-based text editor that uses the ANSI character set. Typing
ALT+129 will create a u-umlaut as desired because the editor will
convert the OEM-set character to the closest matching ANSI-set
character. In this case OEM-set character position 129 maps to ANSI-
set character position 252. The alternative method to specify u-umlaut
in the Windows-based editor is to type ALT+0252, using its ANSI
character set character position directly.
<P>
As another example, an application requires the square-root symbol,
which does not exist in the ANSI character set, as part of a button
label. Assuming the code page 437 is installed, and that the resource
file is edited under Windows, enter ALT+0251 in the button label
because the square-root symbol is the 251st character of the OEM
character set. When the application is run, send a WM_SETFONT message
to the control, specifying an OEM-set font. An OEM-set font is always
available from the GetStockObject function through its OEM_FIXED_FONT
index.
<P>
For more information on code pages and character sets under Windows,
query on the following words in the Microsoft Knowledge Base:
<P>
<PRE>   prod(winsdk) and code and pages and character and sets

</PRE></OL>For a reference to a Windows Developer's Note regarding this subject,
query on the following word in the Microsoft Knowledge Base:
<P>
<PRE>   INTLAPPS
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 folding<BR>
KBCategory: kbprg<BR>
KBSubcategory: UsrLoc KBIntlDev<BR>
Keywords          : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 15, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

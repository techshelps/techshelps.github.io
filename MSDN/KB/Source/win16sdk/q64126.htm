

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of How to Share Memory Between Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q64126 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1990/07/24">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Listed below are three ways to share memory between Windows applications; these are the only methods that are guaranteed to work in all memory configurations and in future versions of Windows:  1. Using the Clipboard 2. Storing information in the d...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4B,QAGI,QDL9,QBWO,QBWN,QAGS,QAIF,QBWQ,QA3A,QBW6,QAJH,QAH6,QAYV,QARI,QAGU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Overview of How to Share Memory Between Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q64126 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Listed below are three ways to share memory between Windows
applications; these are the only methods that are guaranteed to work
in all memory configurations and in future versions of Windows:

<OL><P><LI>Using the Clipboard
</OL>2. Storing information in the data segment of a shared Dynamic-Link
<PRE>   Library (DLL)
</PRE></OL>3. Dynamic Data Exchange (DDE)
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>The Clipboard is the easiest method to use, and is discussed in
   the Windows Software Development Kit (SDK) as well as in such books
   as Charles Petzold's "Programming Windows."

<P><LI>Sharing data in the data segment of a DLL is possible because
   there is only one data segment for all instances of the DLL; DLLs
   are not "instanced." Because of this, it is possible to have the
   DLL do a LocalAlloc() out of its local heap, which is part of its
   DGROUP and thus is limited to 64K. Programmers must determine
   the memory scheme that best suits their needs and what calls they
   will make to the DLL to copy/share that memory to other applications
   that call into it.

<P><LI>DDE is designed to allow applications that follow the protocol to
   share/pass data back and forth. An "envelope and letter" analogy,
   which is listed below, provides an example of how this works:
<P>
   If some information needs to be sent from one person/application
   to another person/application, do the following:
<P>
   a. Address the envelope: Call GlobalAlloc() on a piece of global
<P><PRE>      memory with the GMEM_DDESHARE flag.
</PRE><P>
   b. Write the letter on a piece of paper: Call GlobalLock() and
<P><PRE>      write to the global memory.
</PRE><P>
   c. Seal the letter: Call the GlobalUnlock() function.
<P>
   d. Send the letter off to the other person: Use the PostMessage()
<P><PRE>      function with a WM_DDE_DATA message that has the hGlobalMemory
      in it.
</PRE><P>
   To receive and read the letter, the other person/application
   does the following:
<P>
   a. Get the letter: A WM_DDE_DATA message is found in the message
<P><PRE>      queue, along with the handle of the global memory,
      hGlobalMemory.
</PRE><P>
   b. Open the envelope: Call GlobalLock (hGlobalMemory).
<P>
   c. Make a copy of the letter and read it:
<P>
<P><PRE>      1) Create a new envelope: Call GlobalAlloc(hNewEnvelope) and
<PRE></PRE>         use the GMEM_DDESHARE flag IF the letter needs to be sent
         back.

      2) Open the new envelope: Call GlobalLock(hNewEnvelope).

      3) Copy the contents of the old letter to the new letter,
         modifying the contents at this time if necessary.

      4) Seal the envelope: Call GlobalUnlock().

      If the person/application wants to send the letter back to
      the person/application that originally sent the letter, perhaps
      with some answers to questions asked in the original letter, the
      following procedure should be used:

      5) Send the letter: Call PostMessage() with the new handle to
         global memory.

   d. When done with the old letter, throw it away: Use GlobalUnlock()
      on the handle and then call GlobalFree().

      According to the DDE specification, the rules for freeing the
      global memory object are as follows:

      Receiver deletes memory unless either of the following is true:

      1) fRelease flag is zero.

      2) The fRelease flag is 1; however, the receiving (client)
         application responds with a negative WM_DDE_ACK message.

         For more information, please refer to Chapter 15 in the
         Windows SDK reference manual.

</PRE></OL>For more information on sharing memory, please refer to Chapters 15
and 16 of the "Microsoft Windows Software Development Kit Guide to
Programming."
<P>
For more information on DDE, please refer to Chapter 22 of the
"Microsoft Windows Software Development Kit Guide to Programming."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrMm<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

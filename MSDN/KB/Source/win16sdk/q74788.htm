

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Near and Far Pointers with C Run-Time Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q74788 ">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1991/07/30">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT=" In an application designed for the Microsoft Windows graphical environment, many C run-time functions do not work with memory allocated by the GlobalAlloc() function when the application is developed in the small or medium memory model.  MS-DOS (non...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBFY,QDL9,QBWO,QBWN,QAH4,QBV8,QAB9,QAJH,QAPF,QAO3,QAO2,QBWQ,QAAP,QAB4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Near and Far Pointers with C Run-Time Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q74788 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
In an application designed for the Microsoft Windows graphical environment,
many C run-time functions do not work with memory allocated by the
GlobalAlloc() function when the application is developed in the small or
medium memory model.
<P>
MS-DOS (non-Windows) applications written in the small or medium memory
model assume the presence of only one data segment (DS). Therefore, the C
Run-time functions assume that DS will not change.
<P>
However, an application can store data in a block of memory allocated with
the GlobalAlloc() function and locked with the GlobalLock() function. The
segment returned from GlobalLock() will be different from the application's
data segment. Specifying the alternate data segment in a C run-time
function that assumes a near pointer results in the following C compiler
warning:
<P>
<PRE>   WARNING: Segment Lost in Conversion

</PRE>For example, the following code passes far pointers to a Run-time function
incorrectly:
<P>
<PRE>   hMem = GlobalAlloc (...);
   lpMem = GlobalLock (hMem);

   strcpy (szBuffer, lpMem);

   GlobalUnlock (hMem);

</PRE>This section of incorrect code produces one of two results.

<OL><P><LI>If the offset of lpMem extends past the end of application's data
   segment (DS), the application experiences an unrecoverable
   application error (UAE).

<P><LI>The function copies information from some random portion of the
   application's DS into the buffer.
<P>
</OL>If the following line of code is used, the function overwrites data in the
application's data segment, which causes the application to crash or run
incorrectly:
<P>
<PRE>   strcpy (lpMem, szBuffer);

</PRE></OL>Four ways to work around this situation are:

<OL><P><LI>For the most common C run-time functions, Windows provides
   equivalent functions that use far pointers. These functions
   include:
<P>
<P><PRE>      lstrcat()
      lstrcmp()
      lstrcmpi()
      lstrcpy()
      lstrlen()
</PRE>
<P><LI>Use the far pointer versions of these functions (_fstrcat(),
   _fstrcmp(), and so on) provided by the Microsoft C Optimizing
   Compiler versions 6.0 and later.

<P><LI>For the less common C Run-time functions, write a far-pointer
   version as part of the application code. Most of the Microsoft C
   Run-time library source code is available from Microsoft.

<P><LI>Use the large memory model.
<P>
   NOTE: Using the large memory model in Windows 3.0 had many disadvantages
   and doing so was not encouraged. These problems were corrected in
   Windows 3.1 and Microsoft C/C++ compiler. Hence, using the large memory
   model is not a problem.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: TlsMisc<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Information Regarding Dynamic-Link Libraries </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q76476 ">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1991/09/25">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win16sdk">
<META NAME="Description" CONTENT="  Dynamic-link libraries (DLLs) are very useful tools in Windows programming. Many applications can use the code in a DLL, meaning that only one copy of the code is resident in the system. It is possible to update a DLL without changing applications ...">
<META NAME="Product" CONTENT="Win16 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QDL9,QBWO,QBWN,QAH4,QBWQ,QBV8,QAPF,QAB9,QAHE,QAGI,QAYY,QBVV,QAKR,QBW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>General Information Regarding Dynamic-Link Libraries</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q76476 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.10
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   versions 3.0 and 3.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Dynamic-link libraries (DLLs) are very useful tools in Windows programming.
Many applications can use the code in a DLL, meaning that only one copy of
the code is resident in the system. It is possible to update a DLL without
changing applications that use the DLL, as long as the interface to the
functions in the DLL does not change.
<P>
This article provides some general information regarding DLLs.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The small and medium memory models are the preferred memory models for
Windows 3.0 applications and DLLs. By default, the compact and large
memory models create multiple data segments. These data segments are
fixed in the memory space and cause difficulties for all applications
running in Windows. Fixed segments in standard and enhanced modes can
cause fragmentation of the heap. Because of a problem in Windows 3.0,
all fixed segments are also page-locked, and can overburden the
enhanced-mode virtual memory manager.
<P>
In Windows 3.1 with the Microsoft C/C++ and later compilers, the large
model is the preferred method since the problem with Windows 3.0 has been
fixed in Windows 3.1.
<P>
If an application requires the large memory model, a method can be
used to unpage-lock the extra data segments of the DLL. For additional
information on large-model programming, query on the following words in
this Knowledge Base:
<P>
<PRE>   large and model and protected

</PRE>However, if the language compiler used supports the large memory model
with a single data segment, this method is not required.
<P>
When compiling a DLL with the Microsoft C Compiler, specify the -Aw
switch so that the code generator does not assume that the
application's stack segment is equal to its data segment (SS != DS).
The generated code will not automatically load DS at each module entry
point. The -An switch should be used to specify near data, and the -As
or -Al switch to specify near or far code, respectively.
<P>
When writing code in DLLs, it is important to remember that SS != DS.
This is an issue when an application function passes a pointer to one
of its local variables to the DLL function. In Microsoft C, all near
pointers are assumed to be relative to DS. The way to avoid problems
is to either:

<UL><LI>Use a function prototype declaring the parameter to be a FAR
   pointer.

<LI>Explicitly cast the parameter to FAR.
<P>
</UL>When using Microsoft C run-time functions, specify the model
independent functions; for example: _fmemcpy, _fmemset.
<P>
The -Gw compiler switch generates the Windows prolog and epilog code.
When a function is called, the prolog saves the current data segment
on the stack. When memory moves in real mode, Windows "walks" the
stack and changes the stored DS values to reflect the memory motion.
<P>
The prolog code is not required when a DLL will be used only in
protected mode. There are two restrictions when choosing not to use
the -Gw switch in protected mode:

<OL><P><LI>Windows debuggers will not be able to properly provide stack trace
   information.

<P><LI>Exported functions must include the _loadds attribute in the
   declaration of the function. The following is an example
   declaration:
<P>
<P><PRE>      BOOL FAR PASCAL _loadds ExportedFunction(VOID)
</PRE><P>
</OL>DLL functions that will be called from applications should be declared
with the FAR modifier because an intersegment jump is required from
the application. Functions that are only called from within the DLL
may be declared NEAR. The PASCAL or _cdecl calling conventions may be
used as appropriate. Functions called from Windows must be declared
using the PASCAL calling convention.
<P>
When exporting _cdecl functions in the module definition (DEF) file,
one must maintain the case of the function name and use an underscore
prefix. For example:
<P>
EXPORTS
<PRE>   WEP                  @1  RESIDENTNAME
   _ExportedFunction    @2

</PRE></OL>A DLL is limited to one instance. The DATA SINGLE or DATA NONE
statements can be used in the DEF file to specify that the DLL should
have a data segment of its own or not. Because a DLL does not have a
stack of its own, automatic variables are allocated from the stack of
the calling application.
<P>
DLLs can maintain data by using the local or global memory allocation
routines. In most cases, memory allocated by GlobalAlloc is owned by
the calling task. Global memory allocated by DLLs with GMEM_DDESHARE
specified is owned by the DLL. When using local memory management
functions, allocations are performed within the current data segment.
Therefore, the handles returned from these calls are only valid when
processed by the DLL.
<P>
Naming the segments within the DLL, keeping segment size less than 16K
and specifying the segment options PRELOAD, LOADONCALL, MOVEABLE, and
DISCARDABLE, as appropriate, will ease memory requirements and
simplify the task of the memory manager.
<P>
There are three methods to access the functions in the DLL:

<OL><P><LI>List the names of the functions in the IMPORTS section in the
   application's DEF file.

<P><LI>Link the application to an import library generated from the DLL's
   DEF file using the IMPLIB utility.

<P><LI>Use the LoadLibrary and GetProcAddress functions to load the
   library and retrieve a pointer to the function, respectively. This
   dynamic-dynamic linking method is the most powerful.
<P>
</OL>These methods are documented in Section 20.4.2 of the "Microsoft
Windows Guide to Programming," pages 20-31 through 20-34.
<P>
For additional information regarding linking DLL routines, please see page
178 of the Microsoft Visual C++ "C Language Reference".
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: KrDll<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

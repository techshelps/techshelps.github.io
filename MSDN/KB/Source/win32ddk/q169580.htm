

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Install Networking Components Programmatically </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q169580">
<META NAME="KBModify" CONTENT="1997/07/07">
<META NAME="KBCreate" CONTENT="1997/06/04">
<META NAME="Keywords" CONTENT="kbsetup kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32ddk">
<META NAME="Description" CONTENT="  Many cutting-edge software products require Internet or network access. Therefore, installation applications need to verify that critical networking components are installed, and possibly initiate installation of these components when necessary. Pr...">
<META NAME="Product" CONTENT="Win32 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAA1,QDI2,QBBI,QAVZ,QAB5,QAJH,QAUD,QATX,QAPF,QBWA,QAFI,QAJG,QDIT,QA4H,QAS6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Install Networking Components Programmatically</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q169580</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Windows 95 Device Driver Kit (DDK), version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Many cutting-edge software products require Internet or network access.
Therefore, installation applications need to verify that critical
networking components are installed, and possibly initiate installation of
these components when necessary. Programmatic detection and installation of
networking components can be accomplished using a 16-bit protected mode
Setup API on Windows 95. This API is documented in DevInst.Doc in the
Win95 DDK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
DevInst.Doc documents the Setup API itself and the parameters for each API
call without illuminating any of the implementation details for installing
a device. You can download a sample MFC application from the Microsoft
Software Library or from the Microsoft OEM/IHV DDK home page at:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/products/developer/ddk_hardware/">http://www.microsoft.com/support/products/developer/ddk_hardware/</A></B>

</PRE>Follow the links to the WinDDK Samples page. The sample is a MSVC 1.52 MFC
application. You should not try to install PCMCIA or PCI devices with this
application. These devices are installed when they are inserted for the
first time or during boot time. The sample makes use of DiCreateDevRegKey:
<P>
<PRE>   RETERR DiCreateDevRegKey( LPDEVICEINFO lpdi,
                             LPHKEY       lphKey,
                             HINF         hInf,
                             LPCSTR       lpszInfSection,
                             int          iFlags )

</PRE>Create a unique registry key under the class of the associated device.
<P>
It returns OK if it has been successful; otherwise, an ERR_DI_xxx error
code will be returned. If the return is OK, the lphKey will point to a
valid handle to the created key. It is the caller's responsibility to close
the returned registry key.
<P>
lpdi
<UL><LI>Pointer to a DEVICE_INFO struct for a device that is being installed.
<P>
</UL>lphKey
<UL><LI>Pointer to receive the address of the created registry key handle.
<P>
</UL>hInf
<UL><LI>Handle to an opened INF file. hInf and lpszInfSection are rarely used.
   These would be necessary only if some special information had to be
   added to the registry when the key is first created.
<P>
</UL>lpcInfSection
<UL><LI>Section of the INF file to be executed using the newly-created registry
   key.
<P>
</UL>iFlags
<UL><LI>Indicates which type of registry key to create:
<P>
   DIREG_DEV
   Create a hardware registry key for the device. This is a key that
   exists in the \\HKLM\\ENUM branch specified by lpdi-&gt;lpszRegSubkey. If
   lpdi-&gt;lpszRegSubkey is NULL, then the key will be created in
   \\HKLM\\ENUM\\ROOT\\lpdi-&gt;szClassName.
<P>
   DIREG_DRV
   Create a software, or driver, registry key for the device. This is a
   key that is in \\HKLM\\System\\CurrentControlSet\\Services\\Class\\
   lpdi-&gt;szClassName.
<P>
</UL>The sample will accept several command line arguments:

<UL><LI>Ipinst [-a[idstring]] [-&lt;h|?&gt;] [-f&lt;logfile&gt;] [-m[d|idstring]] [-
  p&lt;COM1|COM2&gt;] [-r] [-s] [-v]
<P>
 -a[PnP ID String]
  Install adapter. A PnP ID String can be specified. If no adapter is
  specified or detected, the user must select one.
<P>
 -f&lt;log file name&gt;
  Specify a log file. If the log file name is NULL, then the default is
  Ipdetect.txt.
<P>
 -&lt;h|?&gt;
  Display usage information.
<P>
 -m[d|Modem PnP String|Unimodem ID String]
  Install modem. A PnP ID or Unimodem String can be specified. If no modem
  is specified or detected, the Modem Wizard is invoked.
<P>
 -p&lt;COM1|COM2&gt;
  Attach modem to COM1 or COM2. The default is COM1. This is to be used
  with the 'm' option to attach the installed modem to the specified port.
  This is mainly for legacy modems with valid Unimodem ID's.
<P>
 -r
  Install remote networking. This includes RNA, Dial Up Adapter, and
  related RAS components.
<P>
 -s
<P>
 Show application. By default, the application runs hidden. The
 application will show up on the desktop only if the 's', 'h' or '?'
 options are used.
<P>
 -v
 Emit verbose messages to logfile. The contents of the logfile show up on
 the document client area when the application is visible.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
DDpr.Hlp, DevInst.Doc, Network.Doc
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbsetup kbhowto<BR>
Technology          : kbMfc<BR>
Version             : 4.0<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

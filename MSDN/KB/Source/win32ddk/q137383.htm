

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Necessary Changes to DriverEntry for PCI SCSI Miniport Driver </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137383">
<META NAME="KBModify" CONTENT="1995/09/28">
<META NAME="KBCreate" CONTENT="1995/09/26">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32ddk">
<META NAME="Description" CONTENT="  Minimal changes are necessary to modify a SCSI miniport's DriverEntry routine to support a PCI adapter because the SCSIPORT driver is responsible for locating and configuring the PCI device specified. This article describes the changes that do need...">
<META NAME="Product" CONTENT="Win32 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAU9,QAA1,QAB5,QDJV,QDI2,QDMR,QBBI,QBXN,QBC9,QBC8,QA4H,QAUD,QANO,QAHH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Necessary Changes to DriverEntry for PCI SCSI Miniport Driver</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 28, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137383</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Device Driver Kit (DDK) version 3.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Minimal changes are necessary to modify a SCSI miniport's DriverEntry
routine to support a PCI adapter because the SCSIPORT driver is responsible
for locating and configuring the PCI device specified. This article
describes the changes that do need to be made.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For each PCI device that matches the specified Vendor and Device ID, the
SCSIPORT driver calls the miniport's HwScsiFindAdapter routine. If there
are four devices that match the Vendor and Device ID, the HwScsiFindAdapter
routine is called four times.
<P>
The following sample SCSI miniport DriverEntry routine shows how to set up
and call ScsiPortInitialize assuming the Vendor ID is 0x1999 and the Device
ID is 0x0000. Note that this driver expect two access ranges - one for a
memory range and one for an I/O range. When the HwScsiFindAdapter is
called, these access ranges are already filled in and should be mapped by
calling ScsiPortGetDeviceBase. Usually, no other PCI-specific configuration
needs to be done.
<P>
<P><h3>DriverEntry Code Sample</h3>
 
<P>
ULONG
DriverEntry(
<PRE>        IN PVOID DriverObject,
        IN PVOID Argument2
        )
/*++

</PRE>Routine Description:
<PRE>    Installable driver initialization entry point for system.

</PRE>Arguments:
<PRE>    Driver Object

</PRE>Return Value:
<PRE>    Status from ScsiPortInitialize()

</PRE>--*/
{
<PRE>    HW_INITIALIZATION_DATA hwInitData;

    UCHAR vendorId[4] = {'1', '9', '9', '9'};
    UCHAR deviceId[4] = {'0', '0', '0', '0'};

    //
    // Initialize the hardware initialization data structure.
    //

    for ( i = 0; i &lt; sizeof( HW_INITIALIZATION_DATA); i++) {
        ((PUCHAR)&amp;hwInitData)[i] = 0;
    }

    //
    // Set size of hardware initialization structure.
    //

    hwInitData.HwInitializationDataSize = sizeof(HW_INITIALIZATION_DATA);

    //
    // Identify required miniport entry point routines.
    //

    hwInitData.HwInitialize = XyzInitialize;
    hwInitData.HwStartIo = XyzStartIo;
    hwInitData.HwInterrupt = XyzISR;
    hwInitData.HwFindAdapter = XyzFindAdapter;
    hwInitData.HwResetBus = XyzReset;
    hwInitData.HwAdapterState = XyzAdapterState;

    //
    // Specify adapter specific information.
    //

    hwInitData.NeedPhysicalAddresses = TRUE;

    //
    // Indicate how many I/O or memory ranges will be used.
    //

    hwInitData.NumberOfAccessRanges = 2;

    //
    // Set up PCI-specific information.
    //

    hwInitData.AdapterInterfaceType = PCIBus;
    hwInitData.VendorId = &amp;vendorId;
    hwInitData.VendorIdLength = 4;
    hwInitData.DeviceId = &amp;deviceId;
    hwInitData.DeviceIdLength = 4;

    //
    // Set required extension sizes.
    //

    hwInitData.DeviceExtensionSize = sizeof(HW_DEVICE_EXTENSION);
    hwInitData.SrbExtensionSize = sizeof(SRB_EXTENSION);
    hwInitData.SpecificLuExtensionSize =
      sizeof(SPECIFIC_LOGICAL_UNIT_EXTENSION);

    return ( ScsiPortInitialize(DriverObject,
                                Argument2,
                                &amp;hwInitializationData,
                                NULL
                                ) );

</PRE>} // end DriverEntry()
<P>
NOTE: Occasionally, a SCSI miniport will need to read or write the PCI
configuration space. The miniport can use the ScsiPortGetBusData and
ScsiPortSetBusDataByOffset functions to accomplish this task. Please see
the DDK documentation for details on these calls.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.50<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: ntddkstorage<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 28, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: I/O Request Packet (IRP) Cancellation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120171">
<META NAME="KBModify" CONTENT="1998/02/17">
<META NAME="KBCreate" CONTENT="1994/09/04">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win32ddk">
<META NAME="Description" CONTENT="  Under certain circumstances, before an I/O Request Packet (IRP) can be completed by a driver, you may want to have the I/O manager notify the driver that the IRP is being canceled. Although currently there is not a Win32 API expressly for canceling...">
<META NAME="Product" CONTENT="Win32 DDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGB,QAGC,QAU9,QAGI,QAA1,QDI2,QBB0,QBWP,QAH5,QAGU,QADP,QA5E,QAUQ,QBVV,QAH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: I/O Request Packet (IRP) Cancellation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120171</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Device Development Kit (DDK) for Windows NT,
   versions 3.1, 3.5, 3.51
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Under certain circumstances, before an I/O Request Packet (IRP) can be
completed by a driver, you may want to have the I/O manager notify the
driver that the IRP is being canceled. Although currently there is not a
Win32 API expressly for canceling I/O requests, the cancellation can happen
in the following situations:

<UL><LI>A user-mode service attempts to cancel an IRP.

<LI>When a thread is terminated with IRPs pending, the I/O manager attempts
   to cancel all the pending IRPs that belong to the thread.

<LI>A driver attempts to cancel an IRP that it has originated and issued to
   a lower-level driver. The function a driver uses to cancel an IRP is
   IoCancelIrp(). A driver cannot cancel an IRP that it has received from
   the I/O manager or higher-level drivers.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
For an IRP to be canceled, the IRP must be cancelable. The I/O manager
considers an IRP to be cancelable when the CancelRoutine field in the IRP
contains a non-NULL address. By calling this address, the I/O manager
notifies the owning driver that an IRP is being canceled. To set up a
cancel routine for an IRP (or in other words, make the IRP cancelable), a
driver calls the IoSetCancelRoutine() function. A driver can declare an IRP
cancelable only when the driver owns the IRP (that is, after the driver has
received the IRP and before it completes the IRP or passes the IRP to
another driver via IoCallDriver()). Before completing the IRP or passing it
on, the driver must set the cancel routine address to NULL, also using
IoSetCancelRoutine().
<P>
You do not have to make a driver set up cancel routines for all the IRPs it
receives. However, it is strongly recommended that you have a driver set up
cancel routines for IRPs that are not processed immediately.
<P>
Technically, an IRP can still be completed normally after it has been
canceled. However, a cancellation notice should not be ignored when it is
delivered to a driver. The only time a driver can let a canceled IRP be
completed normally is when the completion can be done immediately.
Otherwise, the driver should complete the IRP with STATUS_CANCELLED within
the cancel routine.
<P>
Regardless of whether an IRP is canceled, a driver should always complete
an IRP with whatever status that is appropriate.
<P>
As mentioned earlier, when a thread is terminated with I/O requests
pending, the I/O manager tries to cancel all the pending requests. The
cancel routine is called for each IRP associated with the thread if the IRP
exists. After this, the I/O manager delays the thread execution to give the
drivers some time to complete the IRPs. If the driver does not set up
cancel routines as it should, the total delay for all the IRPs can be more
than 5 minutes; if the IRPs cannot be completed in time, the I/O manager
considers that the driver has timed out, and a message box is displayed on
the screen naming the driver that has timed out. After that, any pending
IRPs are dissociated from the terminating thread.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Windows NT DDK Help: cancel routines
 
<PRE>Version           : WINNT:3.1,3.5,3.51;
Platform          : winnt
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL5: Macro Specified with OnSheetActivate/Deactivate Doesn't Run </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126315">
<META NAME="KBModify" CONTENT="1996/09/12">
<META NAME="KBCreate" CONTENT="1995/02/20">
<META NAME="Keywords" CONTENT="kbprg kbcode xlwin">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  In Microsoft Excel, if you use the OnSheetActivate property, or the OnSheetDeactivate property in a Visual Basic for applications, and you do not specify a specific sheet for the property to apply to, the assigned macro may not run when a sheet in ...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAH4,QAPN,QBWS,QAY5,QBXS,QAB9,QBBI,QBVV,QBXV,QBV8,QAML,QDNY,QA5F V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL5: Macro Specified with OnSheetActivate/Deactivate Doesn't Run</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 12, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126315</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft Excel, if you use the OnSheetActivate property, or the
OnSheetDeactivate property in a Visual Basic for applications, and you do
not specify a specific sheet for the property to apply to, the assigned
macro may not run when a sheet in Microsoft Excel is activated or
deactivated.
<P>
If you use the ON.SHEET function in an MS Excel 4.0 macro, and you do not
specify a specific sheet for the property or function to apply to, the
assigned macro may not run when a sheet in Microsoft Excel is activated or
deactivated.
<P>
<P><h2>CAUSE</h2>
 
<P>
<P><h3>Visual Basic Procedure</h3>
 
<P>
In a Visual Basic procedure, this behavior occurs if you use the
OnSheetActivate property and the OnSheetDeactivate property in the same
procedure. This behavior only occurs if you do not specify a specific sheet
for the function to apply to; that is, you use the property of the
Application object. The property that appears last in the procedure behaves
properly.
<P>
For example, when you run the following procedure
<P>
<PRE>   Sub Test()
      Application.OnSheetActivate = "Act"
      Application.OnSheetDeactivate = "Deact"
   End Sub

</PRE>only the procedure "Deact" runs when you activate another sheet in
Microsoft Excel. Note that in this case, both "Act" and "Deact" should run,
because when you activate another sheet, you are deactivating the
previously active sheet.
<P>
<P><h3>MS Excel 4.0 Macro</h3>
 
<P>
In an MS Excel 4.0 macro, this behavior occurs if you use the ON.SHEET
function with the activate_logical argument set to TRUE (or omitted) and
the ON.SHEET function with the activate_logical argument set to FALSE (to
assign a macro to run when a sheet is deactivated), in the same macro. This
behavior only occurs if you do not specify a specific sheet for the
function to apply to. The function that appears last in the macro behaves
properly.
<P>
For example, when you run the following macro
<P>
<PRE>   A1: =ON.SHEET(,"act")
   A2: =ON.SHEET(,"deact",FALSE)
   A3: =RETURN()

</PRE>only the macro "deact" runs when you activate another sheet in Microsoft
Excel. Note that in this case, both "act" and "deact" should run, because
when you activate another sheet, you are deactivating the previously active
sheet.
<P>
<P><h2>WORKAROUNDS</h2>
 
<P>
To work around this behavior, and to assign a specific macro to run when
any sheet in any open workbook is activated or deactivated, use the
following procedure.
<P>
<P><h3>Visual Basic Procedure</h3>
 
<P>
Use the For Each...Next method to loop through each of the sheets in each
of the open workbooks and apply the property to each sheet as in the
following example:
<P>
<PRE>   Sub Test()
      Dim osheet As Object, obook As Object
      For Each obook In Application.Workbooks
         For Each osheet In obook.Sheets
            ' assign macro 'act' to run when sheet is activated
            osheet.OnSheetActivate = "Act"
            ' assign macro 'deact' to run when sheet is deactivated
            osheet.OnSheetDeactivate = "Deact"
         Next osheet
      Next obook
   End Sub

</PRE>Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. This problem was corrected in
Microsoft Excel version 5.0c.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can use the OnSheetActivate property in a Visual Basic procedure to set
the name of a macro that you want to run when the specified sheet is
selected. If you use this property with the Application object, that is, if
you do not specify a specific sheet, the assigned macro runs when any sheet
in any open workbook is activated.
<P>
You can use the ON.SHEET function in an MS Excel 4.0 macro to set the name
of a macro that runs whenever the specified sheet is activated from another
sheet. If you omit the sheet_text argument when you use this function, the
assigned macro runs when any sheet in any open workbook is activated.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the OnSheetActivate Property, choose the
Search button in the Visual Basic Reference and type:
<P>
<PRE>   OnSheetActivate Property

</PRE>For more information about ON.SHEET, choose the Search button in the
Microsoft Excel Macro Functions Help and type:
<P>
<PRE>   ON.SHEET function
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode<BR>
KBSubcategory: xlwin
<P>

Additional reference words: 5.00
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 12, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

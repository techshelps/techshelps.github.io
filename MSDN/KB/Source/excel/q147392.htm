

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: How to Force Macro Code to Wait for Outside Procedure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147392">
<META NAME="KBModify" CONTENT="1998/02/18">
<META NAME="KBCreate" CONTENT="1996/02/25">
<META NAME="Keywords" CONTENT="kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  In the versions of Microsoft Excel listed at the beginning of this article, you can use a Visual Basic for Applications macro to run other Windows and MS-DOS applications and procedures. The macro code in Microsoft Excel continues to execute even a...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAH4,QBS0,QBFY,QBJZ,QA5A,QAHE,QAB9,QBRZ,QAPF,QBIC,QAGB,QAFI,QABH,QABI P2 T2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: How to Force Macro Code to Wait for Outside Procedure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147392</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, versions 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the versions of Microsoft Excel listed at the beginning of this
article, you can use a Visual Basic for Applications macro to run other
Windows and MS-DOS applications and procedures. The macro code in
Microsoft Excel continues to execute even after the external procedure
has been initiated. You must write code to handle delays if Microsoft
Excel is to wait for the output from the outside procedure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h3>Creating the Module</h3>
 
<P>
Before you use the examples in this article, perform the following
steps:

<OL><P><LI>Open a new workbook.

<P><LI>Insert a new module sheet. To do this in Microsoft Excel 97, point
   to Macro on the Tools menu, and click Visual Basic Editor. In the
   Visual Basic Editor, click Module on the Insert menu.
<P>
   In Microsoft Excel 7.0, point to Macro on the Insert menu and click
   Module.

<P><LI>Type the example macro code in the module sheet.
<P>
</OL><h3>Example 1: Creating a Flag</h3>
 
<P>
For the macro code in example 1 to work correctly, you need to make your
custom application create a flag when it has completed execution. In the
following example your custom application should create a text file at
C:\Flag.txt to act as this flag.
<P>
<PRE>   Sub Appacttest()

      ' Checks to see if Flag.txt already exists.
      FindIt = Dir("C:\Flag.txt")

      ' If the file Flag.txt has been found then delete it.
      If  Not Len(FindIt) = 0  Then
         Kill "C:\Flag.txt"
      End If

      ' Sets Myapp variable equal to the Shell statement.
      Myapp = Shell("C:\Custom.exe", 1)

      ' Executes the shell statement.
      AppActivate Myapp

      ' Checks to see if Flag.txt can be found yet.
      FindIt = Dir("C:\Flag.txt")

   ' The following While Wend loop will keep Microsoft Excel "suspended"
   ' until the custom application is complete. This will occur while the
   ' length of the FindIt variable is equal to 0. Microsoft Excel will
   ' remain busy until it finds the file Flag.txt, thus making the length
   ' of FindIt &gt; 0 and ending the loop.

      ' Check to see if the length of FindIt variable is equal to 0
      ' chars.
      While Len(FindIt) = 0

      ' Continue to check if flag was created yet.
      FindIt = Dir("C:\Flag.txt")

      Wend

      ' Continue with more code if needed.
   End Sub

</PRE></OL><h3>Example 2: Using an Intermediate File to Avoid a Sharing Violation</h3>
 
<P>
This example uses an intermediate file to allow the MS-DOS DIR command to
complete and close the output before Microsoft Excel attempts to open it.
If this method were not used, the Workbooks.Open method would generate a
sharing violation by attempting to open the output while it was still
being written.
<P>
While the example below illustrates one use of this procedure, you could
apply the same method to any MS-DOS or Windows application that generates
an output file that can be read by Microsoft Excel.
<P>
<PRE>   Sub WaitForOutput()

   If Len(Dir("c:\output.txt")) &gt; 0 Then Kill "c:\output.txt"
   If Len(Dir("c:\temp.txt")) &gt; 0 Then Kill "c:\temp.txt"
   ' Test for previous files and delete them.

   Shell "command.com /c dir c:\windows\*.* &gt;c:\temp.txt"
   ' Run MS-DOS DIR command to pipe the directory of
   ' c:\windows into an intermediate text file, temp.txt.

   On Error Resume Next
   ' Set error condition to skip to the next line,
   ' for Name statement below.

   Do Until Len(Dir("c:\output.txt")) &gt; 0
   ' Begin a loop to test for final output file, output.txt.

      Name "c:\temp.txt" As "c:\output.txt"
      ' Attempt to rename temp.txt to output.txt;
      ' will fail until temp.txt is closed

      DoEvents
      ' Allow for other processes, including the shelled
      ' procedure above, to continue in the background Loop
   'End the loop

   Workbooks.Open ("c:\output.txt")
   ' Open the resulting text file, output.txt, into an Excel worksheet.

   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q129796.htm">Q129796</A></B>
   TITLE     : How to Determine When a Shelled 32-bit Process Has
               Terminated

   ARTICLE-ID: <B><A HREF="../VBWIN/Q96844.htm">Q96844</A></B>
   TITLE     : How to Determine When a Shelled 16-bit Process Has
               Terminated

</PRE>For more information about Shell function in Microsoft Excel 97, click
the Index tab in Visual Basic for Applications Help, type the following
text
<P>
<PRE>   Shell

</PRE>and then double-click the selected text to go to the "Shell function"
topic.
<P>
For more information about the Shell function in Microsoft Excel 7.0,
click Answer Wizard on the Help menu and type:
<P>
<PRE>   tell me about the Shell function
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.0 5.0c 5.00 5.00c 7.00 8.00 97 xl97 pause<BR>
Keywords          : kbcode kbprg<BR>
Version           : WINDOWS:5.0,7.0,97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Nest Function Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q64094 ">
<META NAME="KBModify" CONTENT="1994/11/02">
<META NAME="KBCreate" CONTENT="1990/07/23">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  Function macros can be nested by either specifically stating the name of the submacro in the dependent function macro, or by dynamically passing the name of a function macro to the dependent macro as a parameter. (Note: this is true for version 5.0...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAY5,QAB9,QBV8,QAGI,QBVP,QAUD,QAPN,QAHE,QAMA,QBE7,QBE6,QAIF,QAUJ,QAYL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Nest Function Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1994</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q64094 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 2.x, 3.0, 4.0, 5.0
<LI>Microsoft Excel for OS/2, versions 2.2, 2.21, and 3.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Function macros can be nested by either specifically stating the name
of the submacro in the dependent function macro, or by dynamically
passing the name of a function macro to the dependent macro as a
parameter. (Note: this is true for version 5.0 macro sheets, but not
modules.)
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A function macro can call a second function macro by specifically
calling the second function macro. This would cause the main function
macro to execute, then call the second function macro. When the second
function macro is finished, it will return the calculated value to the
location where it was called.
<P>
For example:
<P>
<P><h3>Spreadsheet Call to the Function Macro "Function"</h3>
 
<P>
<PRE>   =MACRO1.XLM!MAIN(1,2)

</PRE><h3>Function Macros on MACRO1.XLM</h3>
 
<P>
<PRE>   A1:  Main                 B1:  Add
   A2:  =ARGUMENT("x",1)     B2:  =ARGUMENT("i")
   A3:  =ARGUMENT("y",1)     B3:  =ARGUMENT("j")
   A4:  =add(x,y)            B4:  =i+j
   A5:  =RETURN(A4)          B5:  =RETURN(B4)

</PRE>A function macro can also call a second function macro dynamically by
passing the name of the submacro to the main function macro. This is a
more advanced feature of function macros. You can define your own
special macro to be called through the main function macro. The name
of the submacro is stored in a variable on the macro sheet. This
variable can be used to call the actual submacro, which then follows
the same method as stated above.
<P>
For example:
<P>
<P><h3>Spreadsheet Call to the Function Macro "Function"</h3>
 
<P>
<PRE>   =MACRO1.XLM!MAIN(MACRO1.XLM!ADD,1,2)

</PRE><h3>Function Macros on MACRO1.XLM</h3>
 
<P>
<PRE>   A1:  Main                    B1:  Add
   A2:  =ARGUMENT("myfunc",8)   B2:  =ARGUMENT("i")
   A3:  =ARGUMENT("x",1)        B3:  =ARGUMENT("j")
   A4:  =ARGUMENT("y",1)        B4:  =i+j
   A5:  =myfunc(x,y)            B5:  =RETURN(B4)
   A6:  =RETURN(A5)

</PRE>Note: Both the macros, "Main" and "Add" must be defined as function
macros by choosing Define Name from the Formula menu.
<P>
For more information on function macros, see Pages 176-182 of the
"Microsoft Excel for Windows Functions and Macros" manual and the
"Microsoft Excel for OS/2 Functions and Macros" manual.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Functions and Macros," versions 2.x, pages 176-182
"User's Guide," version 3.0, pages 567-576
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage<BR>
KBSubcategory:
<P>

Additional reference words: 2.0 2.00 2.01 2.1 2.10 2.2 2.20 2.21 3.0 3.00<BR>
4.0 4.00 4.0a 4.00a 5.0 5.00<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1994</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL5: Incorrect Result Using Large Array in Worksheet Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120405">
<META NAME="KBModify" CONTENT="1997/05/30">
<META NAME="KBCreate" CONTENT="1994/09/11">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  In Microsoft Excel, if you create a large array in a Visual Basic procedure, and use a worksheet function to return an element of the array, the incorrect value is returned.  CAUSE =====  This behavior occurs because when you use a worksheet functi...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAUD,QAY5,QBVP,QAB9,QAVX,QAVW,QA28,QATJ,QAKD,QAAP,QBV8,QALW,QBJQ,QANY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL5: Incorrect Result Using Large Array in Worksheet Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120405</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.00
WINDOWS
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft Excel, if you create a large array in a Visual Basic
procedure, and use a worksheet function to return an element of the array,
the incorrect value is returned.
<P>
<P><h2>CAUSE</h2>
 
<P>
This behavior occurs because when you use a worksheet function to
access an element in a large array, Microsoft Excel assumes that the
elements wrap around, or start again at the 4096th element. Because of
this, the value of the 4096th element is returned as 0, the value of the
4097th element is returned as the value of the first element, the value of
the 4098th element is returned as the value of the second element, and so
on.
<P>
This problem occurs when you use the INDEX function to return an
element in a large array. For example, if you use the Visual Basic
function Test to return an array of 6000 elements, and you use this
array in the following function on a worksheet
<P>
<PRE>   =INDEX(Test(),5000)

</PRE>the value of the 904th element (5000-4096) is returned.
<P>
Note that this behavior also occurs if you use the INDEX function in
a Visual Basic procedure, as in the following example:
<P>
<PRE>   MsgBox Application.Index(Test(),5000)

</PRE>Note that this behavior does not occur when you use a Visual Basic
procedure to return an element of a large array, as in the following
example:
<P>
<PRE>   MsgBox Test(5000)

</PRE><h2>WORKAROUND</h2>
 
<P>
To avoid returning the incorrect value for an element of an array,
use a Visual Basic procedure to return the array element when your
array contains more than 4096 elements. For example, to return the
5000th element in the array Test, use the following syntax:
<P>
<PRE>   result = Test(5000)

</PRE>Microsoft provides examples of Visual Basic procedures for
illustration only, without warranty either expressed or implied,
including but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. This Visual Basic procedure
is provided 'as is' and Microsoft does not guarantee that it can be
used in all situations. Microsoft does not support modifications of
this procedure to suit customer requirements for a particular purpose.
Note that a line that is preceded by an apostrophe introduces a
comment in the code--comments are provided to explain what the code is
doing at a particular point in the procedure.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. This problem was corrected in
Microsoft Excel versions 5.0c for Windows and 7.0 for Windows 95.
<P>
Note that in Microsoft Excel versions 5.0c and 7.0, you cannot use an array
that has greater than 4096 elements in a worksheet function. The #VALUE!
error value is returned when you use an array with greater than 4096
elements in a function on a worksheet. If you use a worksheet function
such as INDEX in a Visual Basic procedure with an array that contains
more than 4096 elements, you receive the following error message:
<P>
<PRE>   Run-time error '1004':

   Index method of Application class failed

</PRE>Use the workaround provided above to avoid these errors.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the Function Statement, choose the Search
button in the Visual Basic Reference and type:
<P>
<PRE>    Function
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory:
<P>

Additional reference words: 1.00 5.00 5.00c 7.00<BR>
Keywords            : kbprg<BR>
Version             : 5.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

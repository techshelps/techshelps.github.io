

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Securing Visual Basic Code in Microsoft Excel </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167909">
<META NAME="KBModify" CONTENT="1997/12/23">
<META NAME="KBCreate" CONTENT="1997/05/01">
<META NAME="Keywords" CONTENT="xladdins xlvbahowto xlvbainfo kbmacro kbprg kbui">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  In Microsoft Excel 97, unlike earlier versions of Microsoft Excel, you cannot hide Visual Basic for Applications modules. If you want to prevent users from seeing Visual Basic code, you can lock the Visual Basic project in the workbook and prevent ...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAH4,QAVX,QAVW,QBJZ,QBWS,QAH0,QDNM,QAUR,QA9N,QAY4,QBVV P2 T2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Securing Visual Basic Code in Microsoft Excel</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167909</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel 97, unlike earlier versions of Microsoft Excel, you
cannot hide Visual Basic for Applications modules. If you want to prevent
users from seeing Visual Basic code, you can lock the Visual Basic project
in the workbook and prevent users from viewing it. However, if you save
the workbook in either the Microsoft Excel 5.0/95 or the Microsoft Excel 97
&amp; 5.0/95 file format, the module protection is lost when you open the
workbook in Microsoft Excel 5.0 or 7.0. Therefore, to use this method, you
must maintain separate versions of the workbook for users of Microsoft
Excel 97 and users of Microsoft Excel 5.0 and 7.0.
<P>
This article describes a method of protecting Visual Basic code while
allowing users of different versions of Microsoft Excel to use the same
version of your application. This method requires that you create the
application in Microsoft Excel 5.0 or 7.0 and then save it as an add-in
file. This method hides the code in all versions of Microsoft Excel. Any
add-in code you create in Microsoft Excel 5.0 or 7.0 is not visible when
the file is opened in Microsoft Excel 97.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the example in this article, you compile an application into an add-in
file. The interface for the application consists of two worksheets, which
are copied into a new workbook when the add-in file is opened.
<P>
NOTE: To create an add-in that is compatible with Microsoft Excel 5.0 and
7.0 and Microsoft Excel 97, use the earliest version of Microsoft Excel
in which the add-in will be used. For example, if you use Microsoft Excel
7.0 and Microsoft Excel 97, create the add-in in Microsoft Excel 7.0.
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h3>Creating the Source Workbook File for the Add-In</h3>
 
<P>
To create the workbook, do the following:

<OL><P><LI>Close and save any open workbooks, and then create a new workbook.

<P><LI>If the new workbook does not contain at least two worksheets, insert
    a new worksheet. To do this, click Worksheet on the Insert menu.

<P><LI>If the sheet tabs are not visible, click Options on the Tools menu,
    and then click the View tab. Click Sheet Tabs, and then click OK.

<P><LI>Double-click the Sheet1 tab. In the Rename Sheet dialog box, type
    "AddinSheet1" (without the quotation marks) in the Name Box, and then
    click OK.

<P><LI>Double-click the Sheet2 tab. In the Rename Sheet dialog box, type
    "AddinSheet2" (without the quotation marks) into the Name Box, and then
    click OK.

<P><LI>On the Insert menu, point to Macro, and then click Module to insert a
    Visual Basic module sheet into the workbook.

<P><LI>Type the following code into the module sheet:
<P>
       ' This subroutine copies the worksheets to use as the interface
       ' for the application into a new workbook each time that the
       ' add-in is opened.
<PRE>       Sub Auto_Open()

           Dim NewBook As Workbook
           Dim Ctr As Integer

           Application.ScreenUpdating = False
           Application.DisplayAlerts = False

           ' Create a new workbook.
           Set NewBook = Workbooks.Add

           ' Copy the two worksheets into the new workbook.
           ThisWorkbook.Sheets(Array("AddinSheet1", "AddinSheet2")).Copy _
           before:=NewBook.Sheets(1)

           ' Delete all of the other sheets in the new workbook. The
           ' initial value of the counter is 1 greater than the number of
           ' worksheets that you want to copy into the new workbook.
           For Ctr = 3 To NewBook.Sheets.Count

              NewBook.Sheets(3).Delete

           Next

       End Sub

       ' This sample demonstrates that any buttons that you place on the
       ' interface worksheets are still functional when the worksheets are
       ' copied into a new workbook.
       Sub Test()

           MsgBox "This is a test"

       End Sub

</PRE><P><LI>Click AddinSheet1.

<P><LI>On the View menu, click Toolbars. In the Toolbars list, click Forms,
    and then click OK.

<P><LI>Draw a button on the worksheet using the Create Button tool.

<P><LI>In the Assign Macro dialog box, click Test in the list of available
    macros, and then click OK.

<P><LI>On the file Menu, click save. In the File Name box, type "Test.xls"
    (without the quotation marks), and then click Save.
<P>
</OL><h3>Creating the Add-In File</h3>
 
<P>
To create the add-in file, do the following:

<OL><P><LI>Switch to Module1.

<P><LI>On the Tools menu, click Make Add-In. In the File Name box, type
   "Test.xla" (without the quotation marks), and then click Save.

<P><LI>Close Test.xls.
<P>
<P>
</OL>You should have two files, Test.xls and Test.xla. The add-in file,
Test.xla, is the file that you must distribute to your users. Microsoft
recommends that you keep a copy of Test.xls because you will need it to
update the add-in.
<P>
When you open Test.xla, a new workbook is created with two worksheets
that are exact copies of the worksheets in the add-in file. If you click
the button on AddinSheet1, the Test subroutine in the add-in file runs.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Visual Basic User's Guide," version 5.0, Chapter 13, "Converting a
Workbook to an Add-in Application"
<P>
For more information about creating add-ins in Microsoft Excel 7.0, click
the Index tab in Microsoft Excel Help, type the following text
<P>
<PRE>   add-ins, creating in Visual Basic

</PRE></OL>and then double-click the selected text to go to the "What is an add-in
application, and where can I learn more about add-ins?" topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 secure securing protect<BR>
Keywords          : xladdins xlvbahowto xlvbainfo kbmacro kbprg kbui<BR>
Version           : 5.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

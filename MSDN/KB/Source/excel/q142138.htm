

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Explanation of Trappable Errors in Visual Basic for Apps </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142138">
<META NAME="KBModify" CONTENT="1998/02/02">
<META NAME="KBCreate" CONTENT="1996/01/04">
<META NAME="Keywords" CONTENT="kberrmsg kbprg">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  This article a contains detailed descriptions of the trappable error messages that can be used with the Err function in Visual Basic for Applications.  MORE INFORMATION  Microsoft provides programming examples for illustration only, without warrant...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAAP,QAB4,QBVV,QAW6,QAB9,QBBI,QAH4,QABI,QAUJ,QAKP,QAGI,QATX,QAHE,QAYL P2 T2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>An Explanation of Trappable Errors in Visual Basic for Apps</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142138</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows 97, version 8.0
<LI>Microsoft Excel 98 Macintosh Edition
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Project for Windows, versions 4.0, 4.1
<LI>Microsoft Project for Macintosh, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article a contains detailed descriptions of the trappable error
messages that can be used with the Err function in Visual Basic for
Applications.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/supportnet/refguide/">http://www.microsoft.com/supportnet/refguide/</A></B>

</PRE><h3>Return without GoSub (Error 3)</h3>
 
<P>
A Return statement does not have a corresponding GoSub statement. Unlike
For...Next, While...Wend, and Sub...End Sub, which are matched at compile
time, GoSub and Return are matched at run time.
<P>
<P><h3>Invalid procedure call (Error 5)</h3>
 
<P>
An argument probably exceeds the range of permitted values. For example,
the Sin function can only accept values within a certain range. Positive
arguments less than 2147483648 are accepted, while 2147483648 generates
this error.
<P>
This error may also occur if an attempt is made to call a procedure that is
not valid on the current platform. For example, some procedures may only be
valid for the Macintosh, or for Microsoft Windows, and so forth.
<P>
<P><h3>Overflow (Error 6)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>The result of an assignment, calculation, or data type conversion is too
   large to be represented within the range allowed for that type of
   variable.
<P>
<P><PRE>    -or-
</PRE>
<LI>An assignment to a property exceeds the maximum value the property can
   accept.
<P>
</UL><h3>Out of memory (Error 7)</h3>
 
<P>
More memory was required than is available or a 64K segment boundary was
encountered. To prevent this error, try the following:

<UL><LI>Close any unnecessary applications, documents, or source files that are
   in memory.

<LI>If you have extremely large modules or procedures, consider breaking
   them into smaller ones. This procedure doesn't save memory, but it can
   prevent hitting 64K segment boundaries.

<LI>If you are running Microsoft Windows in standard mode on an 80386 or
   80486 computer, try running it in enhanced mode.

<LI>If you are running Microsoft Windows in enhanced mode, free up some disk
   space, or at least ensure that some space is available.

<LI>Eliminate terminate-and-stay-resident (tsr) programs.

<LI>Eliminate unnecessary device drivers.

<LI>Reduce the number of global variables.
<P>
</UL><h3>Subscript out of range (Error 9)</h3>
 
<P>
You have referenced a nonexistent array element or collection member. The
subscript may be larger or smaller than the range of possible subscripts,
or the array may not have dimensions assigned at this point in the
application.
<P>
<P><h3>Duplicate definition (Error 10)</h3>
 
<P>
This error usually occurs only when generated from code, as in the
following example:
<P>
<PRE>   Error 10

</PRE>However the error may also occur if you try to use ReDim to change the
number of elements of a fixed-size array. For example, in the following
code, the fixed array FixedArr is received by SomeArr in the procedure
NextOne, then an attempt is made to resize SomeArr:
<P>
<PRE>   Sub FirstOne

   Static FixedArr(25) As Integer   ' Create a fixed-size array
      NextOne FixedArr()            ' and pass it to another sub.

   End Sub

   Sub NextOne(SomeArr() As Integer)

   ReDim SomeArr(35)   ' Duplicate definition occurs here.
   . . .
   End Sub

</PRE><h3>Division by zero (Error 11)</h3>
 
<P>
The value of an expression being used as a divisor is zero. Check the
spelling of variables in the expression. A misspelled variable name can
implicitly create a numeric variable that is initialized to zero. Check
previous operations on variables in the expression, especially those passed
into the procedure as arguments from other procedures.
<P>
<P><h3>Type mismatch (Error 13)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>The variable or property is not of the correct type. For example, a
   variable that requires an integer value can't accept a string value.

<LI>An object has been passed to a procedure that is expecting a single
   property or value.

<LI>A module or project name was used where an expression was expected, for
   example:
<P>
<P><PRE>      Debug.Print MyModule
</PRE>
<LI>You attempted to mix traditional Basic error handling with variant
   values having the Error subtype (10, vbError); for example:

<LI>Error CVErr(n)
<P>
   A CVErr value can't be converted to Date or numeric types (Integer,
   Long, and so on); for example:
<P>
<P><PRE>      MyVar = CInt(CVErr(9))
</PRE><P>
   At run time, this error typically indicates that a Variant used in an
   expression has an incorrect subtype, or that a Variant containing an
   array appeared in a Print statement.
<P>
</UL><h3>Out of string space (Error 14)</h3>
 
<P>
Your system may have run out of memory, which has prevented a string from
being allocated. Similarly, expressions requiring that temporary strings be
created for evaluation may be causing this error. For example, the
following code will cause an Out of string space error:
<P>
<PRE>     MyString = "Hello"
       For Count = 1 To 100
     MyString = MyString &amp; MyString
     Next Count

</PRE>Visual Basic lets you allocate a string with a maximum length of 65,535
characters. However, in executing statements at run time, the host
application needs to use some string space for overhead. The amount of
overhead varies among hosts, but should not exceed 50 bytes. If you need to
allocate a string of the maximum length your host can support, reduce the
string size by 50 bytes, then increase the length incrementally until this
error is generated again. The value immediately preceding the error
represents the host's maximum string length.
<P>
<PRE>   Dim MyString As String * 65485
                      ' Start with (65535-50).
                      ' On successive runs, increment
                      ' length until "Out of string
                      ' space" error occurs.
   Sub MySub
        MyString = "string" ' Error occurs here when the
   End Sub                  ' maximum length is exceeded.

</PRE><h3>String formula too complex (Error 16)</h3>
 
<P>
A string expression is too complicated. Strings not assigned to variables
(such as those returned by functions) are assigned to temporary locations
during string expression evaluation. Having a large number of these strings
can cause this error. Try assigning these strings to variables and use the
variables in the expression instead.
<P>
<P><h3>Can't perform requested operation (Error 17)</h3>
 
<P>
The requested operation can't be performed because it would invalidate the
current state of the project. For example, the error occurs if you use the
References dialog box (on the Tools menu, click Rererences) to add a
reference to a new project or object library while a program is in break
mode.
<P>
<P><h3>User interrupt occurred (Error 18)</h3>
 
<P>
A CTRL+BREAK or other interrupt key has been pressed by the user.
<P>
<P><h3>Resume without error (Error 20)</h3>
 
<P>
A Resume statement has been encountered, but it is either outside the error
handler code, or it was encountered while there was no error-handling
routine active.
<P>
<P><h3>Out of stack space (Error 28)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>Too many active Function or Sub calls. Check that general recursive
   procedures are not nested too deeply and that they terminate properly.

<LI>Local variables require more local variable space than is available.
   Try declaring some variables at the module level instead. You can also
   declare all variables in the procedure static by preceding the
   Property, Sub, or Function keyword with Static. Or, you can use the
   Static statement to declare individual static variables within
   procedures.

<LI>Fixed-length strings use more stack space than variable-length strings.
   Try redefining some of your fixed-length strings as variable-length
   strings.

<LI>Too many nested DoEvents statements.
<P>
</UL>Use the Calls dialog box to view which procedures are active (on the
stack). To display the Calls dialog box, select the button to the right of
the Procedures box in the Debug window.
<P>
<PRE>Sub or function not defined (Error 35)
</PRE> 
<P>
A Sub, Function, or Property procedure is called but is not defined.
<P>
Possible causes for this error are:

<UL><LI>You have misspelled the name of your procedure.

<LI>The specified procedure is not visible to the calling procedure.
   Procedures declared Private in one module can't be called from
   procedures outside the module. If Option Private Module is in effect,
   procedures in the module are not available to other projects. Choose
   Find from the Edit menu to locate the procedure.

<LI>You have declared a dynamic-link library (DLL) routine, but the routine
   is not in the specified library.
<P>
</UL><h3>Error in loading DLL (Error 48)</h3>
 
<P>
The specified dynamic-link library (DLL) can't be loaded. This is usually
because the file specified with the Lib clause in the Declare statement is
not a valid DLL.
<P>
Possible causes for this error are:

<UL><LI>The file is not DLL-executable.

<LI>The file is not a Microsoft Windows DLL.

<LI>The file is an old Microsoft Windows DLL that is incompatible with
   Microsoft Windows protect mode.

<LI>The DLL references another DLL that is not present.

<LI>The DLL or one of the referenced DLLs is not in a directory specified by
   your path.
<P>
</UL><h3>Bad DLL calling convention (Error 49)</h3>
 
<P>
Your program is calling a routine in a dynamic-link library (DLL) that
either is being passed the wrong type or number of arguments or does not
use the Pascal calling convention. Make sure that the arguments passed to
the DLL routine exactly match the arguments expected by the routine. If the
DLL routine expects arguments by value, then make sure ByVal is specified
for those arguments in the declaration for the routine.
<P>
<P><h3>Internal error (Error 51)</h3>
 
<P>
An internal malfunction has occurred in Visual Basic. Unless this call was
generated by the Error statement, contact Microsoft Product Support
Services to report the conditions under which the message appeared.
<P>
<P><h3>Bad file name or number (Error 52)</h3>
 
<P>
A statement refers to a file with a file number or file name that is:

<UL><LI>An invalid name or number

<LI>Not specified in the Open statement

<LI>Specified in an Open statement, but has since been closed

<LI>Out of the range of file numbers (1-511)
<P>
</UL>In Microsoft Windows, use the following conventions for naming files and
directories:

<UL><LI>The name of a file or directory can have two parts: a name and an
   optional extension. The two parts are separated by a period, for
   example, Myfile.new.

<LI>The name can contain up to eight characters, and the extension can
   contain up to three characters.

<LI>The name must start with either a letter or number. It can contain any
   uppercase or lowercase (file names are not case-sensitive) characters
   except the following:
<P>
<PRE>   Character     Description
   ----------------------------------

    .           Period
    "           Quotation mark
    '           Single quotation mark (apostrophe)
    +           Plus sign
    /           Slash
    \           Backslash
    [ ]         Brackets
    :           Colon
    ;           Semicolon
    |           Vertical bar (pipe)
    =           Equal sign
    ,           Comma

</PRE><LI>The name should not contain any spaces. The following names are
   reserved and can't be used for files or directories: CON, AUX, COM1,
   COM2, COM3, COM4, LPT1, LPT2, LPT3, PRN, and NUL. For instance, if you
   try to name a file PRN in an Open statement, the default printer will
   simply become the destination for Print #, and Write # statements
   directed to the file number specified in the Open statement.

<LI>The following are examples of valid Microsoft Windows file names:
<P>
<P><PRE>      LETTER.DOC
      MEMO.TXT
      BUDGET.92
      12345678.901
      2NDTRY.RPT
</PRE>
<LI>On the Macintosh, a file can have any character except the colon (:),
   and may contain spaces. Null characters [Chr(0)] are not allowed in
   any file names.
<P>
</UL><h3>File not found (Error 53)</h3>
 
<P>
Possible causes for this error at run time are:

<UL><LI>A statement (for example, Kill, Name, or Open) refers to a file that
   does not exist.

<LI>An attempt has been made to call a procedure in a dynamic-link library
   (DLL), but the library file name specified in the Lib clause of the
   Declare statement can't be found.
<P>
</UL>In the development environment, this error occurs if you attempt to open a
project or load a text file that does not exist.
<P>
<P><h3>Bad file mode (Error 54)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>A Put or Get statement is specifying a sequential file. Note that Put
   and Get can only refer to files opened for Random access.

<LI>A Print # statement specifies a file opened for an access mode other
   than Output or Append.

<LI>An Input # statement specifies a file opened for an access mode other
   than Input.

<LI>Any attempt to write to a read-only file.
<P>
</UL><h3>File already open (Error 55)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>A sequential-output mode Open statement was executed for a file that is
   already open.

<LI>A statement (for example Kill, SetAttr, or Name) refers to an open file.
<P>
</UL><h3>Device I/O error (Error 57)</h3>
 
<P>
An input or output error occurred while your program was using a device
such as a printer or disk drive.
<P>
<P><h3>File already exists (Error 58)</h3>
 
<P>
At run time, this error occurs when the new file name (for example, one
specified in a Name statement) is identical to a file name that already
exists. It also occurs when you use Save As to save a currently loaded
project if the project name already exists.
<P>
<P><h3>Bad record length (Error 59)</h3>
 
<P>
The length of a record variable for a Get or Put statement does not match
the length specified in the corresponding Open statement. Because a two-
byte descriptor is always added to a variable-length string Put to a random
access file, the variable-length string must be at least two characters
shorter than the record length specified in the Len clause of the Open
statement.
<P>
Variant data types also require a two-byte descriptor. Variants containing
variable-length strings require a four-byte descriptor. Therefore, for
variable-length strings in a Variant, the string must be at least 4 bytes
shorter than the record length specified in the Len clause.
<P>
<P><h3>Disk full (Error 61)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>There is not enough room on the disk for the completion of a Print #,
   Write #, or Close operation.

<LI>There is not enough room on the disk to create required files.
<P>
</UL>To work around this situation, move some files to another disk, or delete
some files.
<P>
<P><h3>Input past end of line (Error 62)</h3>
 
<P>
An Input # or Line Input # statement is reading from a file in which all
data has already been read or from an empty file. To avoid this error, use
the EOF function (immediately before the Input # statement) to detect the
end of file.
<P>
<P><h3>Bad record number (Error 63)</h3>
 
<P>
The record number in a Put or Get statement is less than or equal to zero.
<P>
<P><h3>Too many files (Error 67)</h3>
 
<P>
Possible causes for this error are:

<UL><LI>There is a limit to the number of disk files that can be open at one
   time. For Microsoft Windows, this limit is a function of the Files=
   setting in your CONFIG.SYS file. Increase that number and reboot.

<LI>The operating system has a limit to the number of files in the root
   directory (usually 512). If your program is opening, closing, or
   saving files in the root directory, change your program so that it uses
   a subdirectory.

<LI>On the Macintosh, the standard limit is 40 files. This limit can be
   changed using a utility to modify the MaxFiles parameter of the boot
   block.
<P>
</UL><h3>Device unavailable (Error 68)</h3>
 
<P>
The device you are trying to access is either not online or does not exist.
<P>
<P><h3>Permission denied (Error 70)</h3>
 
<P>
An attempt was made to write to a write-protected disk or to access a
locked file. For example, this error will occur if an Open For Output
statement is performed on a write-protected file.
<P>
<P><h3>Disk not ready (Error 71)</h3>
 
<P>
There is either no disk in the drive specified or the drive door is open.
Insert a disk in the drive, close the door, and retry the operation.
<P>
<P><h3>Can't rename with different drive (Error 74)</h3>
 
<P>
You can't use the Name statement to rename a file with a new drive
designation. Use FileCopy to write the file to another drive, and delete
the old file with a Kill statement.
<P>
<P><h3>Path/File access error (Error 75)</h3>
 
<P>
During a file- or disk-access operation (for example, Open, MkDir, ChDir,
or RmDir), the operating system could not make a connection between the
path and the file name.
<P>
Make sure the file specification is formatted correctly. A file name can
contain a fully-qualified or relative path. A fully-qualified path starts
with the drive name (if the path is on another drive) and lists the
explicit path from the root to the file. Any path that is not fully
qualified is relative to the current drive and directory. This error can
also occur while attempting to save a file that would replace an existing
read-only file.
<P>
<P><h3>Path not found (Error 76)</h3>
 
<P>
During a file- or disk-access operation (for example, Open, MkDir, ChDir,
or RmDir), the operating system was unable to find the specified path. The
error also occurs in the debugging environment if you attempt to open a
project or insert a text file with an invalid path. Make sure the path is
typed correctly.
<P>
<P><h3>Object variable not set (Error 91)</h3>
 
<P>
You are attempting to use an object variable that is not yet referencing a
valid object, or one that has been set to Nothing. Specify or respecify a
reference for the object variable. For example, if the Set statement were
omitted in the following code, an error would be generated:
<P>
<PRE>   Dim MyObject As Object     ' Creates object variable.
   Set MyObject = Sheets(1)   ' Creates valid object reference.
   MyCount = MyObject.Count   ' Assigns Count value to MyCount.

</PRE><h3>For Loop not initialized (Error 92)</h3>
 
<P>
You've jumped into the middle of a For...Next loop. Placing labels inside a
For...Next loop is not recommended.
<P>
<P><h3>Invalid pattern string (Error 93)</h3>
 
<P>
The pattern string specified in the Like operation of a search is invalid.
A common example of an invalid character list expression is [a-b , where
the right bracket is missing.
<P>
<P><h3>Invalid use of Null (Error 94)</h3>
 
<P>
You are trying to obtain the value of a variant variable or an expression
that is Null. Null is a variant subtype used to indicate that a data item
contains no valid data. For example:
<P>
<PRE>   MyVar = Null
   For Count = 1 To MyVar
   . . .
   Next Count

</PRE><h3>Can't load module; invalid format (Error 323)</h3>
 
<P>
The module you attempted to load is not a text module. Some versions of
Visual Basic permit you to save code in both binary and text formats. If
possible, reload the file in the application in which it was last saved and
save it as text. This error code applies to Microsoft Excel for Windows 95,
version 7.0 only.
<P>
<P><h3>Property or method not found (Error 423)</h3>
 
<P>
Object.method or object.property is referred to, but method or property is
not defined, or you may have misspelled the name of the object. To see what
properties and methods are defined for an object, choose the Object Browser
from the View menu. Select the appropriate library and object to display
available properties and methods.
<P>
<P><h3>Object required (Error 424)</h3>
 
<P>
You have referred to an object property or method, but have not provided a
valid object qualifier.
<P>
<P><h3>Class doesn't support OLE Automation (Error 430)</h3>
 
<P>
The object specified in the GetObject or CreateObject function call was
found, but has not exposed a programmability interface. Therefore you can't
write code to control this object's behavior. Check the documentation of
the application that created the object for limitations on the use of OLE
Automation with this class of object.
<P>
<P><h3>Object doesn't support this property or method (Error 438)</h3>
 
<P>
This method or property does not exist for this OLE automation object. See
the object's documentation for more information on the object and to check
the spellings of properties and methods.
<P>
<P><h3>OLE Automation error (Error 440)</h3>
 
<P>
An error occurred while executing a method or accessing a property of an
object variable. The error was reported by the application that created the
object.
<P>
<P><h3>Object doesn't support this action (Error 445)</h3>
 
<P>
This method or property is not supported by this object. See the object's
documentation for more information on the object and to check the spellings
of properties and methods.
<P>
<P><h3>Object doesn't support named arguments (Error 446)</h3>
 
<P>
Arguments can only be specified by position when performing methods on this
object. See the object's documentation for more information on argument
positions and types.
<P>
<P><h3>Object doesn't support current locale settings (Error 447)</h3>
 
<P>
The object you are attempting to access does not support the locale setting
for the current project. For example, if your current project has the
locale setting Canadian French, the object you are trying to access must
support that locale setting. Check which locale settings the object
supports.
<P>
Also note that the object may rely on national language support in a
dynaminc-link library (DLL), for example OLE2NLS.DLL. If so, you may need a
more recent version that supports the current project locale.
<P>
<P><h3>Named argument not found (Error 448)</h3>
 
<P>
You specified a named argument, but the procedure was not defined to accept
an argument by that name. Check the spelling of the argument name.
<P>
<P><h3>Argument not optional (Error 449)</h3>
 
<P>
The number and types of arguments must match those expected. For instance,
the Left function requires two arguments, the first representing the
character string being operated on, and the second representing the number
of characters to return from the left side of the string. Because neither
argument is optional, both must be supplied.
<P>
An argument can only be omitted from a call to a user-defined procedure if
it was declared Optional in the procedure declaration.
<P>
<P><h3>Wrong number of arguments (Error 450)</h3>
 
<P>
The number of arguments in the call to the procedure was not the same as
the number of arguments expected by the procedure. Check the argument list
in the call against the procedure declaration.
<P>
<P><h3>Object not a collection (Error 451)</h3>
 
<P>
You have specified an operation or property that is exclusive to
collections, but the object is not a collection. Check the spelling of the
object or property name, or verify that the object is a collection.
<P>
<P><h3>Invalid ordinal (Error 452)</h3>
 
<P>
Your call to a dynamic-link library (DLL) indicated to use a number instead
of a procedure name, using the #num syntax. However, an attempt to convert
the expression num to an ordinal failed, or the num specified does not
specify any function in the DLL. Check to make sure the expression
represents a valid number, or call the procedure by name.
<P>
<P><h3>Specified DLL function not found (Error 453)</h3>
 
<P>
The dynamic-link library (DLL) in a user library reference was found, but
the DLL function specified was not found within the DLL. An invalid ordinal
may have been specified in the function declaration. Also, the DLL may have
the right name but is not the version that contains the specified function.
<P>
<P><h3>Code resource not found (Error 454)</h3>
 
<P>
A call was made to a procedure in a code resource, but the code resource
could not be found. This error can only occur on the Macintosh operating
system.
<P>
<P><h3>Code resource lock error (Error 455)</h3>
 
<P>
A call was made to a procedure in a code resource. The code resource was
found, but an error occurred when an attempt was made to lock the resource.
Check for an error returned by HLock (for example, "Illegal on empty
handle" or "Illegal on free block"). This error can only occur on the
Macintosh operating system.
<P>
<P><h3>[Object] does not have [property name] property (Error 1000)</h3>
 
<P>
The property does not exist for this object. To see a list of properties
for this object, choose Object Browser from the View menu, and click the
question mark button in the Object Browser dialog box to display the Visual
Basic Help topic for this object.
<P>
<P><h3>[Object] does not have [method name] method (Error 1001)</h3>
 
<P>
The method does not exist for this object. To see a list of methods for
this object, choose Object Browser from the View menu, and click the
question mark button in the Object Browser dialog box to display the Visual
Basic Help topic for this object.
<P>
<P><h3>Missing required argument [argument] (Error 1002)</h3>
 
<P>
The method expected a required argument that does not exist. Add the
argument to the code. To see a list of required arguments, choose Object
Browser from the View menu, and click the question mark button in the
Object Browser dialog box to display the Visual Basic Help topic.
<P>
<P><h3>Invalid number of arguments (Error 1003)</h3>
 
<P>
The method has the wrong number of arguments. This usually occurs when you
use comma-separated position arguments (instead of named arguments), and
you have too many arguments.
<P>
To see the valid arguments for this method, choose Object Browser from the
View menu, and click the question mark button in the Object Browser dialog
box to display the Visual Basic Help topic for this method.
<P>
<P><h3>[Method name] method of [object] class failed (Error 1004)</h3>
 
<P>
An external error occurred, such as a failure to read or write from a file.
The method cannot be used on the object. Possible reasons include the
following:

<UL><LI>An argument contains a value that isn't valid. A common cause of this
   problem is an attempt to access an object that doesn't exist [for
   example, you tried to use Workbooks(5) when there were only three
   workbooks open].

<LI>The method cannot be used in the applied context. For example, some
   Range object methods require that the range contain data; if the range
   doesn't contain data, the method fails.

<LI>An external error occurred, such as a failure to read or write from a
   file.
<P>
</UL>For more information about the method, search Help for the method name.
<P>
Unable to set the [property name] property of
the [object]class (Error 1005)
 
<P>
The property cannot be changed. Possible reasons include the following:

<UL><LI>The value you're using for the property isn't valid (for example, you
   set a property to a string value, but the property requires a Boolean
   value).

<LI>The property is read-only and can not be written to.
<P>
</UL>Unable to get the [property name] property
of the [object] class (Error 1006)
 
<P>
The property cannot be changed. Possible reasons include:

<UL><LI>The value you are using for the property is not valid; for example,
   setting a property to a string value when the property requires a
   Boolean value.

<LI>The property cannot be used in the applied context. For example, the
   code ActiveChart.Legend.Font.Color = RGB(255, 0, 0) will cause this
   error if the active chart does not contain a legend.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about error codes, choose the Search button in Help
and type:
<P>
<PRE>   Trappable errors
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00<BR>
Keywords          : kberrmsg kbprg<BR>
Version           : WINDOWS:5.0,5.0c,7.0; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto kbref<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

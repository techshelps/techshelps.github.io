

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Calling .DLL Function vs. Visual Basic Worksheet Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126806">
<META NAME="KBModify" CONTENT="1997/04/01">
<META NAME="KBCreate" CONTENT="1995/03/05">
<META NAME="Keywords" CONTENT="xlwin kbprg">
<META NAME="KBArea" CONTENT="Support; KB; excel, convert, crossnet, odbc, winprint, setup">
<META NAME="Description" CONTENT="  The following information discusses the relative speed and efficiency of calling a function from a dynamic link library (DLL) file versus calling a worksheet function in a Visual Basic, Applications Edition module. The performance issues described ...">
<META NAME="Product" CONTENT="Excel">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAGI,QAY5,QBVP,QAB9,QBV8,QAIF,QDNN,QA5F,QAMA,QDMR,QAPN,QAJ5,QAE5,QAU3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Calling .DLL Function vs. Visual Basic Worksheet Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126806</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel for Windows, versions 5.0, 5.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following information discusses the relative speed and efficiency of
calling a function from a dynamic link library (DLL) file versus calling a
worksheet function in a Visual Basic, Applications Edition module. The
performance issues described below make the assumption that both the Visual
Basic function and the DLL function are written equally well.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures
for illustration only, without warranty either expressed or implied,
including, but not limited to the implied warranties of merchantability
and/or
fitness for a particular purpose. The Visual Basic procedures in this
article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples
to provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
The performance you receive calling a Visual Basic function versus
calling a DLL function in a module in Microsoft Excel depends on the
following factors:

<OL><P><LI>When you call a function in a DLL, there is an initial overhead involved
   in loading the DLL (which only happens once but can be slow). Once the
   DLL is loaded, however, the DLL call is quite fast. In terms of pure
   call overhead, a DLL call is probably faster than calling an
   Application.WorksheetFunction() because the DLL call doesn't go through
   IDispatch. Note that the memory consumed by the DLL is in addition to
   the memory already used by Microsoft Excel.

<P><LI>If the function that you are calling from the DLL is performing
   operations on a Range, then a built-in worksheet function will probably
   perform faster than the external function. The reason for this is the
   overhead that is involved in transferring the contents of the range
   out of Microsoft Excel and into the external DLL. The built-in functions
   in Microsoft Excel can access the cell table much more efficiently than
   a DLL.
<P>
   For example, the following Visual Basic command
<P>
<P><PRE>      Application.Sum(Range("A1:T100"))
</PRE><P>
   is actually two calls; one to construct a range, and one to call the Sum
   function. Internally, the Sum function adds up the cell contents
   directly without allocating memory. By contrast, the following call to a
   function in a DLL
<P>
<P><PRE>      MyDllBasedSum(Range("A1:T100"))
</PRE><P>
   is one IDispatch call, and one DLL call (faster). However, within the
   DLL call, there is at least one IDispatch call to fetch the contents of
   the range as an array, an operation that allocates a lot of memory and
   performs a lot of type conversion and copying (much slower), only to
   have it all immediately freed once the sum is taken.
<P>
   NOTE: IDispatch is an OLE Automation function that exposes methods and
   properties through a dispatch (DISPID) mechanism as well as
   "collections." IDispatch provides mechanisms to access and retrieve
   information about an object's methods and properties.

<P><LI>Calculations that aren't bound by Range contents may be faster in an
   external DLL.
<P>
   Note, however, that the algorithms used by the built-in functions in
   Microsoft Excel are very efficient. Unless you can come up with a
   dramatic speed difference, it probably isn't worth the extra time and
   complexity to work with a DLL.

<P><LI>A function written in Visual Basic will usually perform more slowly than
   (or approximately even with) a DLL-based function or a worksheet
   function, depending on what the function does.
<P>
<P><PRE>    - For functions that simply make a number of IDispatch calls to other
      objects, there will probably be little difference between a DLL
      function and a Visual Basic function because the overhead of
      IDispatch and the Microsoft Excel-object is constant regardless of
      who is making the call.
</PRE><P>
<P><PRE>    - Pure math and memory computations are probably faster in a DLL;
      however, Visual Basic is pretty good at these, and you should weigh
      the complexity and cost of a DLL before deciding on this.
</PRE>
<P><LI>If there is a Visual Basic run-time function that performs the same
   action as a Microsoft Excel worksheet formula or a Microsoft Excel
   formula-expression, generally the run-time function calculates faster
   than the Microsoft Excel formula. The exception to this rule is factor 2
   above. For example, the following Visual Basic function
<P>
<P><PRE>      Application.Sum(5, 6)
</PRE><P>
   calculates slower than a Visual Basic expression of 5 + 6. Note that
   there is not a lot of overlap between these functions because the
   Microsoft Excel worksheet functions that overlapped with Visual Basic
   runtime functions were intentionally not made accessible from Visual
   Basic.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : xlwin kbprg<BR>
Version             : 5.0 5.0c<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

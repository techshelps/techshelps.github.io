

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: SQL Server and Caching Disk Controllers </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q86903 ">
<META NAME="KBModify" CONTENT="1997/04/28">
<META NAME="KBCreate" CONTENT="1992/07/20">
<META NAME="Keywords" CONTENT="kb3rdparty kbhw SSrvServer">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  Use of a write-caching disk controller can seriously jeopardize the normally reliable SQL Server data integrity. Significant data corruption can result from a system failure when a write-caching controller is used. The normally reliable SQL Server ...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QBF0,QA8T,QAZV,QDMH,QDIR,QAJG,QAYY,QAV1,QAV0,QDIO,QDIZ,QBVV,QAMA,QAL3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: SQL Server and Caching Disk Controllers</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q86903 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
<PRE>  - Microsoft SQL Server versions 4.2x for OS/2
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Use of a write-caching disk controller can seriously jeopardize the
normally reliable SQL Server data integrity. Significant data corruption
can result from a system failure when a write-caching controller is used.
The normally reliable SQL Server recovery mechanism can be compromised by
this type of controller.
<P>
Recent advances in hardware design coupled with a need for high disk
performance on server platforms make it increasingly likely that a SQL
Server hardware platform utilizes a write-caching disk controller. It is
advisable to determine whether a given SQL Server has a write-caching
controller, or whether the disk drives themselves contain a write cache.
You should check with the hardware vendor for this information. Explain to
the vendor that your system is to be used as a database server, and the
write-ahead log mechanism generally requires that writes not be cached.
<P>
The only exception is if the hardware write caching mechanism on the server
was designed with a database server in mind. It is technically possible for
a hardware write cache to be safe for SQL Server, but only if certain
criteria are met by the hardware write cache design. Essentially all
possible conditions that could result in the discarding of dirty or updated
pages in the write cache must be considered and protected against.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
SQL Server data modification statements generate logical page writes. This
stream of writes can be pictured as going two places: the log and the
database itself. For performance reasons, SQL Server defers writes to the
database via its own cache buffer system. Writes to the log are only
momentarily deferred until COMMIT time. They are not cached in the same
manner as data writes. Because log writes for a given page always precede
the page's data writes, the log is sometimes referred to as a "write-ahead"
log.
<P>
Transactional integrity is one of the fundamental concepts of a relational
database system. Transactions are considered to be atomic units of work
that are either totally applied or totally rolled back. The SQL Server
write-ahead transaction log is a vital component in implementing
transactional integrity.
<P>
Any relational database system must also deal with a concept closely
related to transactional integrity, which is recovery from unplanned system
failure. A variety of non-ideal, real-world effects may cause this failure.
On many database management systems, system failure may result in a lengthy
human-directed manual recovery process.
<P>
In contrast, the SQL Server recovery mechanism is completely automatic and
operates without human intervention. For example, SQL Server could be
supporting a mission-critical production application, and experience a
system failure due to a momentary power fluctuation. Upon restoration of
power, the server hardware would restart, networking software would load
and initialize, and SQL Server would restart. As SQL Server initializes, it
will automatically run its recovery process based on data in the
transaction log. This entire process occurs without human intervention.
Whenever the client workstations restarted, users would find all of their
data present, up to the last transaction they entered.
<P>
SQL Server transactional integrity and automatic recovery constitute a very
powerful time-and-labor saving capability. Unfortunately, use of a write-
caching disk controller can compromise the ability of SQL Server to
recover. Such a controller intercepts SQL Server transaction log writes,
buffering them in a hardware cache on the controller board. This improves
performance significantly, but if system failure occurs for any reason, the
volatile data in the hardware cache may be lost, jeopardizing data
integrity.
<P>
Most caching controllers perform write caching. The write caching
function cannot always be disabled.
<P>
Even if the server uses an uninterruptible power supply (UPS), this does
not guarantee the security of the cached writes. Many types of system
failures can occur that a UPS does not address. For example, a memory
parity error, an operating system trap, or a hardware glitch that causes a
system reset can produce an uncontrolled system interruption. A memory
failure in the hardware write cache can also result in the loss of vital
log information.
<P>
Another possible problem related to a write-caching controller may occur at
system shutdown. It is not uncommon to "cycle" the operating system or
reboot the system during configuration changes. Even if a careful operator
follows the operating system recommendation to wait until all disk activity
has ceased before rebooting the system, cached writes can still be present
in the controller. When the CTRL+ALT+DEL key combination is pressed, or the
RESET button is pressed, cached writes can be discarded, potentially
damaging the database.
<P>
It is possible to design a hardware write cache which takes into account
all possible causes of discarding dirty cache data, which would thus be
safe for use by a database server. Some of these design features would
include intercepting the RST bus signal to avoid uncontrolled reset of the
caching controller, on-board battery backup, and mirrored or ERC (error
checking &amp; correcting) memory. Check with your hardware vendor to ensure
that the write cache includes these and any other features necessary to
avoid data loss.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words:<BR>
Keywords            : kb3rdparty kbhw SSrvServer<BR>
Version             : 4.2<BR>
Platform            : OS/2<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: Deadlock Scenarios and Avoidance in SQL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q47162 ">
<META NAME="KBModify" CONTENT="1997/03/12">
<META NAME="KBCreate" CONTENT="1989/07/21">
<META NAME="Keywords" CONTENT="kbother ssrvlock">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  This article describes common deadlock scenarios and avoidance techniques.  In the classic deadlock, a transaction locks record 1 and later locks record 2. If a second transaction attempts to lock the same two records, but in the opposite order, an...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QAXB,QA5V,QAGI,QAJQ,QAC1,QBD2,QABT,QAA8,QAJH,QA4F,QAR4,QAL2,QAHT,QAA5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: Deadlock Scenarios and Avoidance in SQL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 12, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q47162 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
<PRE>  - Microsoft SQL Server versions 4.2x
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes common deadlock scenarios and avoidance
techniques.
<P>
In the classic deadlock, a transaction locks record 1 and later locks
record 2. If a second transaction attempts to lock the same two
records, but in the opposite order, and happens to run just after the
first transaction acquired its first lock, a deadlock occurs.
<P>
In a single-server environment, SQL Server detects this kind of
deadlock and abnormally terminates one of the transactions. If a
single client application is performing updates on multiple SQL
servers, permanent deadlocks are possible because the participating
SQL Servers do not communicate with each other regarding lock status
and requests. This is true even if 2 phase commit service is being
used.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Consider the following distributed update example:

<OL><P><LI>An application performs updates on its local server and also on a
   remote server.

<P><LI>When another copy of that application runs on the other server, a
   deadlock occurs because "local" and "remote" are relative to each
   application.
<P>
</OL>In absolute terms, the two applications are requesting their locks in
opposite order.
<P>
To correct this problem, request locks in the same absolute order.
<P>
It is also possible for two applications to deadlock even if they request
locks in the same order, as in the following example:

<OL><P><LI>An application reads a record with holdlock (to prevent others from
   updating what it has read) and later updates the record.

<P><LI>Two copies of this application can deadlock because both can get
   the readlock, but neither can update (each is waiting for the other
   to release the readlock).
<P>
</OL>SQL Server detects this kind of deadlock on a single server; however,
it cannot do so if the lock dependencies span multiple servers.
<P>
To correct this problem, use SQL Server BROWSE mode or timestamps
rather than read with holdlock. For more information, refer to the
"Maximizing Database Consistency and Concurrency" manual that ships
with SQL Server version 4.2.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 4.20 wait<BR>
Keywords            : kbother ssrvlock<BR>
Version             : 4.20<BR>
Issue type          : kbtshoot<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 12, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

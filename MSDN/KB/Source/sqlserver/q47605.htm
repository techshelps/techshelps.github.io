

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: Collisions During Multiple-User Updates </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q47605 ">
<META NAME="KBModify" CONTENT="1997/04/25">
<META NAME="KBCreate" CONTENT="1989/08/01">
<META NAME="Keywords" CONTENT="kbother SSrvServer">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  This article discusses several techniques for dealing with collisions when multiple users attempt to update the same data.  MORE INFORMATION  In an interactive application, there are four methods of handling collisions with other users:  1.  Last O...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAXB,QBD2,QAC1,QAA5,QAGU,QAML,QAKD,QABM,QDIX,QBXS,QBVV,QA5V,QA5E,QAKU,QAHT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: Collisions During Multiple-User Updates</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q47605 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
<PRE>  - Microsoft SQL Server version 4.2 for OS/2
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses several techniques for dealing with collisions
when multiple users attempt to update the same data.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In an interactive application, there are four methods of handling
collisions with other users:

<OL><P><LI>"Last One Wins" is best in cases where the new value does not
   depend on the old one, such as updating a customer's address or
   phone number.

<P><LI>If the new value depends on the old one in an algorithmic way, such
   as updating an inventory or balance, use an atomic update instead
   of a separate read, compute new value, and update sequence (i.e.,
   update inventory set count=count-1 instead of select count from
   inventory, count=count-1, update inventory).
<P>
   Use a trigger or additional WHERE conditions to guard against
   invalid conditions such as a negative inventory or balance.

<P><LI>In browse-type applications, timestamps can be used to detect that
   the data has changed since it was last read. The user can then be
   notified of the change (perhaps even shown the new values) and
   allowed to try again.

<P><LI>Method 3 is satisfactory in most cases, but if collisions are
   frequent or if a considerable amount of work must be redone (such
   as in an airline reservation system), it is better to "reserve" the
   item before investing a lot of work that may have to be redone.
   BROWSE provides no way to do this, and HOLDLOCK is not a solution
   because two users can get holdlocks and will later deadlock when
   they attempt to update.
<P>
   A set of rows can be "reserved" for update by doing a BEGIN
   TRANSACTION and then issuing an UPDATE that specifies the set,
   but changes nothing. This workaround performs an unnecessary update
   and prevents other users from reading the reserved rows,  but it
   also prevents other users from updating the rows. This works best
   on a set of data which is retrieved with a UNIQUE CLUSTERED index.
<P>
   To handle the case of reserving a "slot," receive an item being
   inserted, insert a row with all default or null values, then update
   them when the actual values are supplied by the user.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Transact SQL<BR>
Keywords            : kbother SSrvServer<BR>
Version             : 4.2<BR>
Platform            : OS/2<BR>
Issue type          : kbtshoot<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

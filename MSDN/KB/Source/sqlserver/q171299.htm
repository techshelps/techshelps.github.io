

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: Case-Sensitive Query Results w/ Case-Insensitive Sort Order </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q171299">
<META NAME="KBModify" CONTENT="1997/08/27">
<META NAME="KBCreate" CONTENT="1997/07/11">
<META NAME="Keywords" CONTENT="SSrvGen kbusage">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  A sort order is a set of rules that determines how SQL Server collates and presents data in response to database queries. The sort order determines the order in which data is presented in response to SQL Server statements involving GROUP BY, ORDER ...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBPM,QAL3,QAKD,QAKH,QACI,QAY2,QAWP,QA9N,QA5V,QA2Q,QAS1,QABO,QABM,QAB6,QAG2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: Case-Sensitive Query Results w/ Case-Insensitive Sort Order</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q171299</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft SQL Server, versions 6.0 and 6.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A sort order is a set of rules that determines how SQL Server collates and
presents data in response to database queries. The sort order determines
the order in which data is presented in response to SQL Server statements
involving GROUP BY, ORDER BY, and DISTINCT clauses. The sort order also
determines how certain queries are resolved, such as queries involving
WHERE and DISTINCT clauses.
<P>
During installation, SQL Server allows you to select a character set and a
sort order that the server will use. Several sort orders and character sets
are available. The default character set is ANSI (ISO 8859-1), and the
default sort order is dictionary order, case-insensitive.
<P>
If a case-insensitive sort order is chosen, SQL Server considers character
values that differ only in case as equal in value. That is, 'John' =
<PRE>'john'. With a case-insensitive sort order, it may often be necessary to
</PRE>obtain query results with case-sensitivity considered. This article
explains techniques to accomplish this.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To examine the ramifications of a case-insensitive sort order on query
results, consider the following scenario:
<P>
<PRE>   create table T1(col1 char(5) NOT NULL, col2 int NOT NULL)
   go
   insert T1 values('John',1)
   insert T1 values('John',1)
   insert T1 values('JOhn',1)
   insert T1 values('JOhn',1)
   insert T1 values('JoHn',1)
   insert T1 values('JoHn',1)
   insert T1 values('John',1)
   insert T1 values('JohN',1)
   insert T1 values('JohN',1)
   insert T1 values('john',1)
   insert T1 values('john',1)
   insert T1 values('john',1)
   go

</PRE>Executing the following query on a server with a case-insensitive sort
order returns the following results:
<P>
<PRE>   select DISTINCT(col1) from T1
   go

   col1
   -----
   John

   (1 row(s) affected)

</PRE>However, executing the same query on a server with a case-sensitive sort
order returns the following results:
<P>
<PRE>   col1
   -----
   John
   JOhn
   JoHn
   JohN
   john

   (5 row(s) affected)

</PRE>Regarding the usage of GROUP BY, ORDER BY, and WHERE clauses, observe the
results of these queries that are run on a server with a case-insensitive
sort order, and compare them with the modified queries below. Note that in
all cases, all of the values in col1 are treated as one distinct value:
<P>
<PRE>   SELECT sum(col2)'col2 Group Totals' from T1 group by col1
   go

   col2 Group Totals
   -----------------
   12

   (1 row(s) affected)

   SELECT * from T1 order by col1
   go

   col1  col2
   ----- -----------
   John  1
   John  1
   JOhn  1
   JOhn  1
   JoHn  1
   JoHn  1
   John  1
   JohN  1
   JohN  1
   john  1
   john  1
   john  1

   (12 row(s) affected)

   SELECT * from T1 where col1='john'
   go

   col1  col2
   ----- -----------
   John  1
   John  1
   JOhn  1
   JOhn  1
   JoHn  1
   JoHn  1
   John  1
   JohN  1
   JohN  1
   john  1
   john  1
   john  1

   (12 row(s) affected)

</PRE>The ability to obtain case-sensitive results with the DISTINCT function and
the GROUP BY, ORDER BY, and WHERE clauses relies on the fact that the
actual data is stored in binary form, with each character represented by a
unique hexadecimal value. You can use the CONVERT function to convert the
data from character format to a string of hexadecimal values. The results
of the conversion can be operated on by the DISTINCT function and the GROUP
BY, ORDER BY, and WHERE clauses without regard to case-sensitivity.
<P>
Consider the results of the following query, which displays the original
character data and its corresponding hexadecimal representation:
<P>
<PRE>   select col1,'=',CONVERT(binary(5),col1)'hex values' from T1

   col1    hex values
   ----- - ------------
   John  = 0x4a6f686e20
   John  = 0x4a6f686e20
   JOhn  = 0x4a4f686e20
   John  = 0x4a4f686e20
   JoHn  = 0x4a6f486e20
   JoHn  = 0x4a6f486e20
   John  = 0x4a6f686e20
   JohN  = 0x4a6f684e20
   JohN  = 0x4a6f684e20
   john  = 0x6a6f686e20
   john  = 0x6a6f686e20
   john  = 0x6a6f686e20

   (12 row(s) affected)

</PRE>Note that in the results, each unique value of col1 has a distinct
hexadecimal representation. To get the distinct values in character format,
run the next set of statements. It produces the same results as a query
using the DISTINCT function on a case-sensitive server.
<P>
<PRE>   select DISTINCT(CONVERT(binary(5),col1))'col1'
   into #t1
   from T1
   go
   select CONVERT(char(5),col1)'distinct character results' from #t1
   go

   (5 row(s) affected)

   -----
   JOhn
   JoHn
   JohN
   John
   john

   (5 row(s) affected)

</PRE>For queries using GROUP BY and/or ORDER BY clauses, consider the following
examples:
<P>
<PRE>   select DISTINCT(CONVERT(binary(5),col1))'col1',sum(col2)'col2'
   into #t1
   from T1
   group by CONVERT(binary(5),col1)
   go
   select CONVERT(char(5),col1)'distinct character results',col2'Group
   Totals'
   from #t1
   go

   (5 row(s) affected)

   distinct character results Group Totals
   -------------------------- ------------
   JOhn                       2
   JoHn                       2
   JohN                       2
   John                       3
   john                       3

   (5 row(s) affected)

   SELECT *
   from T1
   order by CONVERT(binary(5),col1)
   go

   col1  col2
   ----- -----------
   JOhn  1
   JOhn  1
   JoHn  1
   JoHn  1
   JohN  1
   JohN  1
   John  1
   John  1
   John  1
   john  1
   john  1
   john  1

   (12 row(s) affected)

</PRE>For a query using the WHERE clause, use the CONVERT function to convert the
constant and/or column values to comparable hexadecimal strings, as in the
following example:
<P>
<PRE>   SELECT *
   from T1
   where CONVERT(binary(5),col1)=CONVERT(binary(5),'john ')
   go

   col1  col2
   ----- -----------
   john  1
   john  1
   john  1

   (3 row(s) affected)

</PRE>It is important to understand that the results returned from queries can be
dramatically affected by the choice of sort order. Due consideration must
be given to the importance of case-sensitivity when planning the
installation and configuration of SQL Server. For further information on
this topic, see "Character Sets And Sort Orders" in the SQL Server Books
Online and the Administrator's Companion.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: hex<BR>
Keywords          : SSrvGen kbusage<BR>
Version           : WINDOWS NT:6.0 6.5<BR>
Platform          : winnt<BR>
Issue type        : kbhowto kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

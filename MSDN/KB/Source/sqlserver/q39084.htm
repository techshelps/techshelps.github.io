

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: Using dbdata() Versus dbbind() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q39084 ">
<META NAME="KBModify" CONTENT="1997/04/25">
<META NAME="KBCreate" CONTENT="1988/12/08">
<META NAME="Keywords" CONTENT="kbprg SSrvDB_Lib SSrvProg SSrvWinNT">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  This article explains the relative tradeoffs between dbdata() and dbbind() when processing SQL Server data in an application program.  MORE INFORMATION  If you use dbdata() instead of dbbind(), you must handle data conversion yourself. All data wil...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYY,QABM,QAU3,QAMR,QDNG,QAH4,QAZV,QAY2,QBSO,QAY5,QASS,QAH6,QACE,QAFH,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: Using dbdata() Versus dbbind()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q39084 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft SQL Server Programmer's Toolkit, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains the relative tradeoffs between dbdata()
and dbbind() when processing SQL Server data in an application
program.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If you use dbdata() instead of dbbind(), you must handle data
conversion yourself. All data will be in native SQL Server format.
Variable-length character data will not have a trailing NULL. Money
will be 8-byte scaled binary (1 = .01 cent). Datetime will be a pair
of 4-byte binary integers, the first of which is the days since
January 1, 1900 and the other of which is 1/300 of a second since
midnight. If you use the provided data-conversion routines, you will
be doing much the same thing that dbbind() does. For very large
amounts of data, there will be an advantage to using dbdata() if the
data is used in place. If it is copied somewhere else, that advantage
is lost.
<P>
If the data will remain in native format while being processed in the
program (that is, fixed-length character and binary data), there is a
performance disadvantage with dbbind() because it will spend some
time figuring out that it has nothing to do.
<P>
The biggest performance disadvantage with dbbind() is due to its
biggest advantage: dynamic handling of data type and length at
execution time. Note that you don't tell dbbind() the format or length
of the data in the database. It gets that at execution time. What you
do tell it is the format you want the data to be in for your program.
If the actual data format differs from what you specified, dbbind()
will convert it.
<P>
This provides insulation from changes in the definition of data in the
database. If you use dbdata() and the format of the data in the
database changes (such as ZIPCODE increasing from five to nine
digits), your program will probably give incorrect results (if it runs
at all); however, with dbbind(), the data will be converted and
clipped automatically, and the program will run correctly without even
being recompiled.
<P>
For highest performance, use dbdata(). For data independence and
insulation from changes in database format, use dbbind().
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: DB-Library DB-Lib dblib Windows NT<BR>
Keywords            : kbprg SSrvDB_Lib SSrvProg SSrvWinNT<BR>
Version             : 4.2 | 4.2  | 4.2<BR>
Platform            : MS-DOS OS/2 WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

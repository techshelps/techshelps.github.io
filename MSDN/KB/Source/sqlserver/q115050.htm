

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: When to Use Tempdb In RAM </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115050">
<META NAME="KBModify" CONTENT="1997/08/11">
<META NAME="KBCreate" CONTENT="1994/05/18">
<META NAME="Keywords" CONTENT="SSrvWinNT kbusage">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  Microsoft SQL Server provides a powerful feature called  tempdb in RAM.  This allows the temporary database tempdb, which is used for work space in sorting and for creating temporary tables in some join operations, to be made entirely memory reside...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBW6,QABM,QBF0,QAY5,QA59,QAU3,QAMR,QBWG,QAGX,QDIZ,QA3U,QBWP,QBVV,QAY2,QAH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: When to Use Tempdb In RAM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115050</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
<PRE>  - Microsoft SQL Server version 4.2, 6.0 and 6.5
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft SQL Server provides a powerful feature called "tempdb
in RAM." This allows the temporary database tempdb, which is used for work
space in sorting and for creating temporary tables in some join operations,
to be made entirely memory resident. In some specific situations, this can
provide a performance advantage. However if tempdb in ram is used
inappropriately, it can consume memory which would otherwise be used for
the SQL Server cache buffer system, and this can hurt performance.
<P>
This article discusses when and when not to use tempdb in RAM.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In most cases, the available RAM is best used as a data cache, rather than
as the location of tempdb. Data in tempdb will itself be cached using the
SQL cache buffer system's LRU algorithm.
<P>
This is analogous to the decision of using a RAM disk vs. using the
smartdrive cache program on a Microsoft Windows workstation. In this case,
the RAM consumed for the RAM disk is unavailable for smartdrive, and
can only be used for objects specifically placed on the RAM disk. In a
few cases where your knowledge of the application environment is such
that you know that most access is to a few files, and if they are small
enough to fit on the RAM disk, and if your remaining disk accesses have
such poor reference locality that no feasible amount of cache will
provide a good hit ratio, then a RAM Disk might be superior to
smartdrive. However in most cases smartdrive will be superior, since it
caches all accesses (not just those placed on the RAM disk).
<P>
Similarly, use of tempdb in RAM can accelerate tempdb operations but will
deplete memory available for the SQL cache buffer, which can lower the
cache hit ratio. Memory used for tempdb in RAM is allocated separately from
the pool seen in sp_configure "memory", and the server must be configured
appropriately. For example if you use 10MB for tempdb in RAM, the SQL NT
sp_configure "memory" setting must be reduced by 10MB to free up memory for
this. By contrast giving all available memory to SQL Server (as opposed to
setting some aside for tempdb in RAM) can increase the cache hit ratio. The
SQL cache buffer system will cache all disk I/O operations, including
tempdb.
<P>
Because of the limited amount of RAM available on many machines, this will
constrain the available size of tempdb when used in RAM. If unforeseen
growth requirements for tempdb materialize, this could be a problem. It
does no good to have tempdb partially in RAM and partially on disk. It also
does no good to exceed the available amount of physical memory when using
tempdb in RAM. Even if this worked, tempdb references would be simply paged
to disk, eliminating any possible benefit. See the SQL NT Configuration
Guide for configuring tempdb in RAM.
<P>
If using available RAM for the SQL cache buffer system is usually better
than using a large chunk of it for tempdb in RAM, are there ever any cases
where this is not true? Yes, if all of the following conditions are true,
using tempdb in RAM might be beneficial:

<OL><P><LI>You have a significant amount of available system RAM.
    This normally would equate to more than 64 MB, with
    amounts of 128 MB and above more typical.

<P><LI>Your applications have a locality of reference such that
    the SQL NT cache hit ratio is poor, even with a lot of available
    buffer cache.  This hit ratio can be monitored with Performance
    Monitor as the object "SQLServer", and the counter "Cache Hit Ratio."

<P><LI>Your applications do a lot of tempdb operations.  Rather
    than guess whether this is the case, this can be monitored
    by using sp_lock to observe the lock activity in tempdb while
    queries are running.  Also, you can do this or a similar query:
<P>
       SELECT SUM(DPAGES) FROM TEMPDB..SYSINDEXES
<P>
    either interactively or from a looping batch file to monitor
    tempdb space consumption.

<P><LI>The tempdb operations are sized such that they will
    fit on the tempdb made possible by your RAM configuration.
<P>
</OL>If the decision is made to place tempdb in RAM, it is best to objectively
verify the performance benefit obtained from this. Select a query or small
set of queries which typify your most frequently-performed tempdb-intensive
operations. Run these several times, noting the execution time. Then
reconfigure for tempdb in RAM, run the identical queries and note the
difference. If the amount of improvement isn't worthwhile, it is probably
best to give the RAM back to the SQL cache system.
<P>
Placing tempdb in RAM is safe and will not harm database integrity or
recoverability. This is because tempdb is only used for intermediate
operations, and is re-created from scratch upon each server restart.
<P>
Tempdb in RAM is an important performance tool that is available for cases
where analysis shows it to be beneficial. In some cases it can provide a
significant performance improvement, but it should not be used
indiscriminately.
<P>
For more information on SQL performance issues, see article <B><A HREF="../SQLSERVER/Q110352.htm">Q110352</A></B>,
"Optimizing SQL Server Performance." For more information on configuring
SQL NT memory, see article <B><A HREF="../SQLSERVER/Q110983.htm">Q110983</A></B>, "Recommended SQL Server for NT Memory
Configurations."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Windows NT<BR>
Keywords          : SSrvWinNT kbusage<BR>
Version           : 4.2<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

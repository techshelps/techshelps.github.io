

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: Updating Text/Image Columns With Cursors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110779">
<META NAME="KBModify" CONTENT="1997/04/03">
<META NAME="KBCreate" CONTENT="1994/01/28">
<META NAME="Keywords" CONTENT="kbprg SSrvDB_Lib SSrvProg">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  While it is possible to use the Transact-SQL TXTPTR function to obtain a text pointer with a call to dbcursorfetch(), there is currently no way to retrieve the text timestamp for use with dbwritetext(). This restriction introduces important conside...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QATX,QAGI,QAO2,QAXB,QAB5,QAPN,QAE1,QBD2,QAKD,QAJQ,QAGU,QAC1,QAIF,QABM V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: Updating Text/Image Columns With Cursors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110779</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft SQL Server Programmer's Toolkit, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
While it is possible to use the Transact-SQL TXTPTR function to obtain a
text pointer with a call to dbcursorfetch(), there is currently no way to
retrieve the text timestamp for use with dbwritetext(). This restriction
introduces important considerations when attempting to use DB-Library
(DB-Lib) cursors to scroll through a result set and selectively execute
positioned updates to both non-text/image and text/image columns.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
One of the following methods can be used to retrieve the text timestamp:
<P>
<P><h3>Optimistic Concurrency Control By Values</h3>
 
<P>
To implement this method, the cursor must be opened with CUR_OPTCCVAL and
an entire text/image column needs to be selected in the call to
dbcursoropen(). Thus, the optimistic concurrency control by values will
protect the text/image column by disallowing updates with dbcursor() if
another user has modified the text/image value after it was retrieved.
<P>
It is important to note that this method will be unacceptable for large
amounts of data, since dbcursor() must be called to perform updates. This
effectively limits the text/image column to a usable datalength of less
than 64K.
<P>
<P><h3>Locking Concurrency Control</h3>
 
<P>
To implement this method, the cursor must be opened with CUR_LOCKCC and the
text column does not need to be selected in the call to dbcursoropen(). In
order to insure that the value returned for the text/image column is the
same as the value which was present in the table at the time the row was
fetched, it is necessary to force an exclusive lock on the associated data
page when each row is fetched. This lock must be held until the next row is
fetched.
<P>
In order to achieve this, it is necessary to execute a BEGIN TRAN prior to
calling dbcursorfetch(). Once dbcursorfetch() is called, a single select
of the text/image column of the associated row in the fetch buffer is
executed on the same dbproc in which the cursor was opened (this insures
that select will not be blocked). In order to identify the appropriate
text/image value to select, a WHERE clause is used which references a
unique identifier returned by the previous call to dbcursorfetch().
<P>
Once this step is completed, the dbtxptr() and dbtxtimestamp() functions
can be successfully called, and in turn, subsequent calls to dbreadtext()
and dbwritetext() can be made.
<P>
It is important to note that while this method will allow the retrieval and
updating of large text/image values, it will only work properly if all
users access the text data using the same method to lock down the data page
containing the text pointer. In other words, cursor locking concurrency
control will not protect text pages from users who have obtained and saved
text pointers with some other front-end application (such as an ad-hoc
query program). These users could conceivably execute updates to the text
page at a later time without ever re-accessing the text pointer on the data
page.
<P>
However, if all users access the text data using the method described
above, then the cursor locking control will prevent users (other than the
one which currently holds the data page lock) from modifying the data in
the text page. As a result, they will not be able to access the text
pointer on the data page.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 4.20 DB-Library dblib<BR>
Keywords            : kbprg SSrvDB_Lib SSrvProg<BR>
Version             : 4.2<BR>
Platform            : Windows<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

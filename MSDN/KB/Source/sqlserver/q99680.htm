

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INF: Multithreaded Reentrancy and DB-LIBRARY </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99680 ">
<META NAME="KBModify" CONTENT="1997/04/28">
<META NAME="KBCreate" CONTENT="1993/06/03">
<META NAME="Keywords" CONTENT="kbprg SSrvDB_Lib">
<META NAME="KBArea" CONTENT="Support; KB; sqlserver">
<META NAME="Description" CONTENT="  DB-Library (DB-Lib) functions and routines that access the same DBPROCESS are not reentrant across multiple threads. Therefore, be sure that you serialize all DB-Lib calls that access the same DBPROCESS in multithreaded applications you develop.  I...">
<META NAME="Product" CONTENT="SQL Server">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAGI,QA7H,QAPN,QANG,QABM,QAY5,QAJQ,QAJH,QAO4,QAO3,QAO2,QAK7,QAH4,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INF: Multithreaded Reentrancy and DB-LIBRARY</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99680 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft SQL Server Programmer's Toolkit, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
DB-Library (DB-Lib) functions and routines that access the same DBPROCESS
are not reentrant across multiple threads. Therefore, be sure that you
serialize all DB-Lib calls that access the same DBPROCESS in multithreaded
applications you develop.
<P>
In applications where each thread uses a separate DBPROCESS, it is not
necessary to serialize the DB-Lib calls. However, there is one
important exception: You must serialize any calls that involve global
variables. You can do this by using a synchronization method such as a
flag variable, semaphore, or event.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following guidelines will help you determine where to protect
global variables:

<UL><LI>Protect error and message handling functions installed by dberrhandle
   and dbmsghandle, because these are global to the entire DB-LIBRARY
   application. These should be protected with a separate synchronization
   object to avoid colliding with the protection around certain
   DB-LIBRARY calls below.

<LI>Protect DB-Lib functions that do not take a DBPROCESS pointer or a
   DBCURSOR handle as the first parameter. For example, dberrhandle and
   dbsettime.

<LI>Protect DB-Lib functions wherever you pass a null DBPROCESS
   pointer. For example, dbsetopt.

<LI>Protect the dbopen function because it returns a DBPROCESS pointer.
   DBPROCESS pointers can potentially be null and can therefore use
   DB-LIBRARY global variables.
<P>
</UL>For example:
<P>
For OS/2

<UL><LI>// Make this variable global to the entire application
   HSEM semDblib;

<LI>// This code would be in a thread that uses DB-LIBRARY
   DosSemRequest(&amp;semDblib, SEM_INDEFINITE_WAIT);
   pDbproc = dbopen(pLoginRec, "myserver");
   DosSemClear(&amp;semDblib);
<P>
</UL>For the Win32 API

<UL><LI>// make this variable global to the entire application
   HANDLE hOpenEvent;

<LI>// create the event handle at application startup
<PRE>   // have it set on creation, with auto-reset
   hOpenEvent = CreateEvent(NULL,FALSE,TRUE,NULL);

</PRE><LI>// this code would be in a thread that uses DB-LIBRARY
<PRE>   // it waits for other threads to complete, opens a
   // connection, then sets the event so other threads
   // can continue
   WaitForSingleObject(hOpenEvent,INFINITE);
   pDbproc = dbopen(pLoginRec,"myserver");
   SetEvent(hOpenEvent);

</PRE><LI>// close the event handle at application exit
   CloseHandle(hOpenEvent);
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: thread dblib<BR>
Keywords            : kbprg SSrvDB_Lib<BR>
Version             : 4.2 | 4.2<BR>
Platform            : OS/2 WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

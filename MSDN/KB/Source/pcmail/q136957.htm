

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PC MAPI: How to Find a Currently Logged on User </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136957">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1995/09/19">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; pcmail">
<META NAME="Description" CONTENT="  By using a Simple Messaging Application Programming Interface (MAPI) application, you can find a user that is currently logged on to Microsoft Mail. The following code illustrates one way that this can be done using Microsoft Visual C++ version 1.5...">
<META NAME="Product" CONTENT="PC Mail">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAI4,QBDM,QAUD,QAAP,QAB4,QAEV,QAKP,QAGU,QAYC,QAL7,QALW,QAH4,QDMH,QBFY,QA4Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PC MAPI: How to Find a Currently Logged on User</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136957</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.00 3.20 3.50
WINDOWS
kbtool kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Mail for PC Networks, versions 3.0, 3.2, and 3.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By using a Simple Messaging Application Programming Interface (MAPI)
application, you can find a user that is currently logged on to Microsoft
Mail. The following code illustrates one way that this can be done using
Microsoft Visual C++ version 1.5 or any other C compiler.
<P>
MORE INFORMATION
 
<P>
NOTE: The following code implements MAPI.DLL as a static library.
<P>
<PRE>/* WHOAMI.C  */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;
#include &lt;mapi.h&gt;
#include &lt;string.h&gt;

int WhoAmI();

</PRE>long err;
LHANDLE lhSession;
<P>
MapiRecipDesc recip[1];
lpMapiMessage FAR *lppMessage;
lpMapiMessage lpMessage;
<PRE>char szSeedMessageID[512];
char szMessageID[512];
char szbuffer[80];

</PRE>LPSTR lpszSeedMessageID=&amp;szSeedMessageID[0];
LPSTR lpszMessageID=&amp;szMessageID[0];
<P>
MapiMessage note;
<P>
<PRE>int main()
</PRE>{
<P>
<PRE> WhoAmI();

 return(0);
</PRE>}
<P>
<PRE>int WhoAmI()
</PRE>{
<PRE>  char szMsg1[80];
  char szMsg2[80];

  recip[0].ulReserved = 0;
  recip[0].ulRecipClass = MAPI_TO;
  recip[0].lpszName = "Anybody";
  recip[0].lpszAddress = NULL;
  recip[0].ulEIDSize = 0;
  recip[0].lpEntryID = NULL;

  note.ulReserved = 0;
  note.lpszSubject = "WhoAmI message";
  note.lpszNoteText = "Test";
  note.lpszMessageType = "IPC.WhoAmI.Note";
  note.lpszDateReceived = NULL;
  note.lpszConversationID = NULL;
  note.flFlags = 0;
  note.lpOriginator = 0;
  note.nFileCount = 0;
  note.lpFiles = NULL;
  note.nRecipCount = 1;
  note.lpRecips = recip;

  strcpy(szMsg1, "Logged in user name:  ");
  strcpy(szMsg2, "Logged in user address:  ");

  /************  Logon  **********************/
  err = MAPILogon(0L, "", "", MAPI_LOGON_UI, 0L,
  &amp;lhSession);
  if(err != SUCCESS_SUCCESS)
  {
     MessageBox(0, "Error logging on", "Error", MB_OK);
     return(0);
  }

  /*********** Save Message ******************/
  err = MAPISaveMail(lhSession, 0L, &amp;note, 0L, 0L, "");
  if(err != SUCCESS_SUCCESS)
 {
    MessageBox(0, "Error saving message", "Error",
    MB_OK);
    err = MAPILogoff(lhSession, 0L, 0L, 0L);
    return(0);
  }

  /********* Find Message ********************/
  *lpszSeedMessageID = '\0';

  // reset MAPIFindNext back to the top again
  err = MAPIFindNext(lhSession, 0L, "IPC.WhoAmI.Note",
  lpszSeedMessageID, 0L, 0L, lpszMessageID);

  do
  {
    err = MAPIFindNext(lhSession, 0L, "IPC.WhoAmI.Note",
    lpszSeedMessageID, 0L, 0L, lpszMessageID);
    if(err != SUCCESS_SUCCESS)
    {
      MessageBox(0, "Error finding message", "Error",
      MB_OK);
      err = MAPILogoff(lhSession, 0L, 0L, 0L);
      return(0);
    }
    lppMessage=(lpMapiMessage FAR *) &amp;lpMessage;

    /******** Read Message *************/
    err = MAPIReadMail(lhSession, 0L, lpszMessageID,
    MAPI_PEEK, 0L, lppMessage);
    if(err != SUCCESS_SUCCESS)
    {
      MessageBox(0, "Error during message read", "Error",
      MB_OK);
      err = MAPILogoff(lhSession, 0L, 0L, 0L);
      return(0);
    }

    /* copy the user data into the buffers */
    _fstrcpy(szbuffer, lpMessage-&gt;lpszMessageType);

    /* Message Types compare               */
    if(strcmp(szbuffer,"IPC.WhoAmI.Note") == 0)
    {
      _fstrcpy(szbuffer, lpMessage-&gt;lpOriginator-&gt;
      lpszName);
      strcat(szMsg1, szbuffer);
      MessageBox(0, szMsg1, "Currently logged in user",
      MB_OK);
      _fstrcpy(szbuffer, lpMessage-&gt;lpOriginator-&gt;
      lpszAddress);
      strcat(szMsg2, szbuffer);
      MessageBox(0, szMsg2, "Currently logged in user
      address", MB_OK);

    /* Delete the message since we are done with it */
      err = MAPIDeleteMail(lhSession, 0L, lpszMessageID,
      0L, 0L);
      if(err != SUCCESS_SUCCESS)
      {
        MessageBox(0, "Error deleting message", "Error",
        MB_OK);
      }

      err = MAPIFreeBuffer(lpMessage);
      if(err != SUCCESS_SUCCESS)
      {
        MessageBox(0, "Error freeing memory", "Error",
        MB_OK);
      }
      err = MAPILogoff(lhSession, 0L, 0L, 0L);
      return(0);
    }
    //if necessary, get next message ID.
    lstrcpy(lpszSeedMessageID, lpszMessageID);


  }while(err == SUCCESS_SUCCESS);


 /************** Logoff  ***************/
  err = MAPILogoff(lhSession, 0L, 0L, 0L);

  return(0);
 //End whoami function
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.20 3.20a 3.50<BR>
KBCategory: kbtool kbcode<BR>
KBSubcategory: MailPCMAPI<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

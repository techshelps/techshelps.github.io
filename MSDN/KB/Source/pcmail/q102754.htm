

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PC Forms: Working with Data in Combo Boxes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102754">
<META NAME="KBModify" CONTENT="1995/11/01">
<META NAME="KBCreate" CONTENT="1993/08/10">
<META NAME="Keywords" CONTENT="kbprg kbtlc">
<META NAME="KBArea" CONTENT="Support; KB; pcmail">
<META NAME="Description" CONTENT="  With version 1.0 of the Microsoft Electronic Forms Designer, you can include Microsoft Visual Basic's combo box control on a form, giving users the option to choose from items in a list. When the form is sent, however, only the selection from the l...">
<META NAME="Product" CONTENT="PC Mail">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QAE1,QBV4,QAH4,QBFN,QAYL,QAHP,QAMB,QAPN,QBT6,QAY5,QATX,QANF,QAB9,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PC Forms: Working with Data in Combo Boxes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 1, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102754</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Electronic Forms Designer, version 1.0, running with
   Microsoft Mail for PC Networks, version 3.0 or 3.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With version 1.0 of the Microsoft Electronic Forms Designer, you can
include Microsoft Visual Basic's combo box control on a form, giving
users the option to choose from items in a list. When the form is
sent, however, only the selection from the list box is written to the
MEFPackage and sent. This can produce unexpected results when the form
is read, because the entire list of items in a list box is not
automatically packaged.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are three ways to handle list boxes in an E-form:

<OL><P><LI>Transfer the selection from the list box on the Compose form to a
   read-only text edit box on the Read form.

<P><LI>Duplicate the Compose form's list box on the Read form and display
   which option was selected by the user.

<P><LI>Manually package and send each of the items in the list box.
<P>
</OL><h3>Method 1</h3>
 
<P>
To transfer the selection from the list box on the Compose form to a
read-only text box on the Read form, you can add code to the
WriteMessage() and ReadMessage() functions in the EFORM.BAS file.
Comments in each function indicate where to add code.
<P>
In the following procedure, the variable "MyText" describes
the value of the list box control lstColor on the Compose
form. The control, txtColor, is the corresponding text edit
box on the Read form in which the value will be placed.

<OL><P><LI>Declare the variable and set its value:
<P>
<P><PRE>      Dim MyText As String
      MyText = frmCompose.lstColor.Text
</PRE>
<P><LI>Add the value of "MyText" to the package as a data item identified
   by the item ID "TheString" by calling MEFWriteText in the
   WriteMessage() function:
<P>
<P><PRE>      MEFWriteText gPackage, "TheString", MyText
</PRE>
<P><LI>Read the variable from the package and assign it to the text edit
   control box by adding the following code to the ReadMessage()
   function:
<P>
<P><PRE>      frmRead.txtColor.Text =
      MEFReadText(gPackage,"TheString","")
</PRE>
<P><LI>Make the control box read-only by adding the following line to the
   Load event procedure of the Read form:
<P>
<P><PRE>      MEFSetEditReadOnlyState txtColor, 1
</PRE><P>
</OL>Additionally, change the BackColor property of the text box control to
gray so users know they cannot modify the contents of the text box.
<P>
<P><h3>Method 2</h3>
 
<P>
To duplicate the list in both the Compose and Read forms, use the
Microsoft Visual Basic AddItem method in the Load event procedure on
each of the forms.
<P>
The following is an example that describes this process, where
lstColor is the list box control name on both the Compose and Read
forms:

<OL><P><LI>Add a list of items to the list box on the Compose form using the
   AddItem method in the Load event procedure.
<P>
<P><PRE>      lstColor.AddItem "Red"
      lstColor.AddItem "Green"
      lstColor.AddItem "Blue"
      lstColor.AddItem "Yellow"
</PRE>
<P><LI>Repeat step 1 for the Read form by copying the text entered above
   and pasting it into the Load event procedure of the Read form.
<P>
</OL>The WriteTaggedControls() function in EFORM.BAS will write both the
list index and the text of lstColor so data will be preserved even if
the user does not make a selection from the list.
<P>
<P><h3>Method 3</h3>
 
<P>
If the contents of the list box change based on options selected by
the user, you can manually package and unpackage the contents of the
list.
<P>
Using a For...Next loop with the List and ListCount properties of a
list box, you can cycle through each of the items in the list, calling
MEFWriteText to add each item to the MEFPackage. You can unpackage the
items in the list on the Read form in a similar manner, by adding code
to the WriteMessage() and ReadMessage() functions in EFORM.BAS.
Comments in each function indicate where to add code.
<P>
The following example lists the code you should add to each function.
In the example, the variable "TheTotal" stores the total number of
items in the list and is written to the package by MEFWriteLong. The
variable "theText" temporarily stores each item in the list so it can
be written to the package by MEFWriteText. Each of the items in the
list is written to the package separately and is defined by a unique
item ID. Finally, the variable "SelectedText" stores which item is
currently selected from the list and is written to the package using
MEFWriteText.

<OL><P><LI>Add the following code to the WriteMessage() function in EFORM.BAS.
   Note the comments that describe the various steps.
<P>
<P><PRE>      'Declare the variables
       Dim n As Integer
       Dim TheTotal As Long
       Dim theText As String
       Dim SelectedText As String
</PRE><P>
<P><PRE>      'Find the number of items in the list and write it to the
      'package
       TheTotal = frmCompose.lstColor.ListCount - 1
       MEFWriteLong gPackage, "Total", TheTotal
</PRE><P>
<P><PRE>      'Process the list, writing each item to the package using a
      'unique itemID, ("List0". "List1", etc.)
       For n = 0 To TheTotal
<PRE></PRE>         theText = frmCompose.lstColor.List(n)
         MEFWriteText gPackage, "List" &amp; Str$(n), theText
       Next

      'Write the current contents of the selection to the package
       SelectedText = frmCompose.lstColor.Text
       MEFWriteText gPackage, "SelText", SelectedText

</PRE><P><LI>Add the following code to the ReadMessage() function to unpackage
   the data.
<P>
<P><PRE>      'Declare variables
       Dim n As Integer
       Dim TheTotal As Long
</PRE><P>
<P><PRE>      'Find the number of items in the list by reading the package.
       TheTotal = MEFReadLong(gPackage, "Total", 0)
</PRE><P>
<P><PRE>      'Read in each of the items and add it to the list using AddItem
       For n = 0 To TheTotal
<PRE></PRE>         frmRead.lstColor.AddItem MEFReadText(gPackage, "List"&amp;
         Str$(n), "")
       Next

      'Read the selected text from the package and assign to the
      'list box
       frmRead.lstColor.Text = MEFReadText(gPackage, "SelText", "")
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 grey<BR>
KBCategory: kbprg kbtlc<BR>
KBSubcategory: MailPCForms<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 1, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

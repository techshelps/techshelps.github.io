

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Converting Between IEnumVARIANT and java.util.Enumeration </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q169764">
<META NAME="KBModify" CONTENT="1998/01/29">
<META NAME="KBCreate" CONTENT="1997/06/06">
<META NAME="Keywords" CONTENT="kbcode VJMisc">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  IEnumVARIANT is the COM interfaced used by Automation Collection objects. A COM object that supports the IEnumVARIANT interface is returned by a call to the get_NewEnum method of the Automation object that implements the collection. Due to the natu...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAUD,QAW6,QAB5,QBXF,QALW,QBBS,QA2K,QAYV,QAH4,QAG1,QAI4,QAGI,QAEQ,QA0K V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Converting Between IEnumVARIANT and java.util.Enumeration</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q169764</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual J++, versions 1.0, 1.1
   on the following platform: x86
<LI>Microsoft Win32 Virtual Machine for Java
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
IEnumVARIANT is the COM interfaced used by Automation Collection objects. A
COM object that supports the IEnumVARIANT interface is returned by a call
to the get_NewEnum method of the Automation object that implements the
collection. Due to the nature of type mapping between Java and COM,
controlling an IEnumVARIANT interface can sometimes be difficult.
<P>
The code in the MORE INFORMATION section can be used to wrap the Java
standard java.util.Enumeration interface around an IEnumVARIANT COM
interface.
<P>
The VarEnumeration class benefits any programmer dealing with Active Server
Pages (ASP) cookies and forms, Microsoft Office, or any Automation objects
that have collections.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Copy the source to a file named VarEnumeration.java and add it to your
project. Include the following line to all your source files that use the
VarEnumeration object:
<P>
<PRE>   import VarEnumeration;

</PRE>NOTE : the file name has to have the correct capitalization.
<P>
<PRE>   // VarEnumeration.java
   //
   // Written by Gregory W Singleton
   // of Microsoft Technical Support, Developer Support
   // Copyright (c) 1997 Microsoft Corporation. All rights reserved.
   //
   // This class implements Enumeration to support Conversion from
   // IEnumVARIANT.
   //
   // The constructor takes a reference to an existing IEnumVARIANT.

   import com.ms.com.*;
   import stdole2.*;
   import java.util.*;

   public class VarEnumeration implements Enumeration
   {
      private IEnumVARIANT enum = null;
      private Variant var = null;

      public VarEnumeration(IEnumVARIANT iev)
      {
         enum = iev;

         // Get first Element and store it
         nextElement();
      }

      public Object nextElement()
      {
         // Temporary variable to hold outgoing VARAINT
         Variant retval = var;

         // Create Variant to hold return from Next
         Variant tempVar = new Variant();
         tempVar.putEmpty();

         // Create Array of ints to hold number of returned items
         int[] numItems = new int[1];
         numItems[0] = 0;

         // Get next Item
         try
         {
            enum.Next(1, tempVar, numItems);
         }
         catch(Exception ex)
         {
            // enum.Next throws an exception when it cannot
            // return the amount of items requested
            numItems[0] = 0;
         }

         // Check to see if numItems == 0
         if(numItems[0] == 0)
            var = null; // If so, store null in var
         else
            var = tempVar; // If not, store it in var

         // Return previous VARAINT
         return retval;
      }

      public boolean hasMoreElements()
      {
         if(var == null)
            return false;
         else
            return true;
      }
   }


</PRE>The class VarEnumeration has two public member functions that are used to
implement the Enumeration interface. The first returns a Boolean if the
collection has more elements:
<P>
<PRE>   public boolean hasMoreElements()

</PRE>The second returns the next Object from the collection:
<P>
<PRE>   public Object nextElement()

</PRE>This object will always be of type com.ms.com.Variant or null.
<P>
The following code illustrates using these functions. m_autoObject is a
valid Automation object interface. The automation object exposes a method
named "get_NewEnum()" of type com.ms.com.IUnknown.
<P>
<PRE>   ...
   import stdole2.IEnumVARIANT;
   import com.ms.com.Variant;
   import java.util.Enumeration;
   import VarEnumeration;
   class TestEnum
   {
      ...
      public void tryTest
      {
         VarEnumeration varEnum = new
            VarEnumeration((IEnumVARIANT)m_autoObject.get_NewEnum());

         While(varEnum.hasMoreElements())
         {
            Variant var = (Variant)varEnum.nextElement();

            System.out.println("Variant Type: " + var.getvt());
         }
      }
      ...
   }

</PRE>Once the above code is executed the automation objects collection is
enumerated. A println call is made for each Variant returned showing its VT
type.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Win32 SDK Documentation
<P>
For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>

</PRE>(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by
Gregory W. Singleton, Microsoft Corporation
 
<PRE>Keywords          : kbcode VJMisc
Technology        : kbInetDev
Version           : WINDOWS:1.0,1.1
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

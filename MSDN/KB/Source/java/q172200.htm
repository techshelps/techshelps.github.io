

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Using Scratch Space From Your Java Applet </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172200">
<META NAME="KBModify" CONTENT="1998/01/29">
<META NAME="KBCreate" CONTENT="1997/07/31">
<META NAME="Keywords" CONTENT="CmdLnUtils IOPkg JVM VJMisc">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  This article describes how to access scratch space on a client machine from a Java applet. Scratch space requires features of Internet Explorer (IE) and the Microsoft Virtual Machine for Java. These features are available in Internet Explorer 4.0 a...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXF,QAHR,QBW5,QAT7,QAGI,QDIY,QAY2,QARL,QAEX,QBW7,QATQ,QAI5,QBWG,QBSO,QA1S V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Using Scratch Space From Your Java Applet</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172200</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>SDK for Java, version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to access scratch space on a client machine from
a Java applet. Scratch space requires features of Internet Explorer (IE)
and the Microsoft Virtual Machine for Java. These features are available in
Internet Explorer 4.0 and the Java Virtual Machine that includes Build
2252.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>What is Scratch Space?</h3>
 
<P>
Scratch space is storage on the client machine that an applet can safely
access without needing full access to the client file system. Scratch space
is managed by the Microsoft Java Virtual Machine to ensure that it cannot
be abused by malicious applets.
<P>
The following is true of scratch space:

<UL><LI>Persists across applet invocations and download sites. Applets with the
   same signer downloaded from multiple sites have access to one unified
   scratch space. This is ideal for storing configuration information for
   applets that may be used in many places.

<LI>Is allowed in most IE Security Zones by default. The user will generally
   not be asked if using scratch space is okay.

<LI>Is available only to the signer of the applet that created it.

<LI>Is safe. Access is restricted to a certain portion of the client
   directory structure. Applets cannot use scratch space to modify files
   outside the allowed scratch space area.

<LI>Is secure. Applets must be signed or run in a fully trusted zone to use
   scratch space. Unsigned applets run from a fully trusted zone or from
   the classpath have their own scratch space.

<LI>Is limited to a fixed amount of disk space. Applets may request more
   space before the applet starts running, but the user must approve these
   requests.

<LI>Can be allowed or denied by the security system separately from regular
   file operations.
<P>
</UL><h3>How to Use Scratch Space in Your Applet</h3>
 
<P>
Follow these steps to use scratch space in your applet:

<OL><P><LI>Import the Microsoft Client Storage library by placing the following
   line at the top of the file that will use scratch space:
<P>
<P><PRE>      import com.ms.io.clientstorage.*;
</PRE>
<P><LI>Declare a variable of type ClientStore to provide access to the storage
   system:
<P>
<P><PRE>      ClientStore m_store;
</PRE>
<P><LI>Retrieve the Client Store object from the system client storage manager.
   This action could throw an IOException:
<P>
<P><PRE>      m_store = ClientStorageManager.getStore();
</PRE>
<P><LI>Create an input or output stream. This could also throw an IOException:
<P>
<P><PRE>      OutputStream o = m_store.openWritable(m_filename);
      InputStream o = m_store.openReadable(m_filename);
</PRE>
<P><LI>Access the stream as you would any other stream.

<P><LI>Scratch space will work from your local machine for debugging, but for
   use on the Internet, place the compiled class into a CAB:
<P>
<P><PRE>      cabarc N MyApplet.cab MyApplet.class
</PRE>
<P><LI>Sign the cab with privilege information that requests client storage
   access. For IE 4.0 Preview 2, this means signing at either the Medium or
   Low level.
<P>
<P><PRE>      SignCode ... -j JavaSign.dll -jp Medium ... MyApplet.cab
</PRE><P>
</OL>Variations:
<P>
You can also open an output file where new data is appended onto the
existing file. To do so, call the following:
<P>
<PRE>   ClientStore.OpenWritable(String filename, boolean append)
       throws IOException;

</PRE></OL>If append is true, new data will be appended. Otherwise, the file will be
truncated if it already exists. In either case, the file is created if it
does not already exist.
<P>
If all you need to do is open a file for input or output, you can do so
without having to declare a ClientStore variable. Simply call one of the
following three functions directly. These three functions maintain the
store internally. Each function throws an IOException in the case of an
error.
<P>
<PRE>   InputStream ClientStorageManager.OpenReadable(String filename);
   OutputStream ClientStorageManager.OpenWritable(String filename);
   OutputStream ClientStorageManager.OpenWritable(String filename,
                                               boolean append);

</PRE>Example:
<P>
The following code fragment opens a scratch space file called "Demo.txt" on
the client machine, and appends a string to the file:
<P>
<PRE>   m_store = ClientStorageManager.getStore();
   OutputStream os = m_store.openWritable("demo.txt", true);
   os.write("This is stored in scratch space");

</PRE><h2>REFERENCES</h2>
 
<P>
More information on the clientstorage package, creating cabinet files, and
signing cabinet files with Java privileges is available in the SDK for Java
2.0, which is available for download at <B><A HREF="http://www.microsoft.com/java/">http://www.microsoft.com/java/.</A></B>
<P>
For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>

</PRE> 
<PRE>Keywords          : CmdLnUtils IOPkg JVM VJMisc
Technology        : internet kbInetDev
Version           : WINDOWS:2.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

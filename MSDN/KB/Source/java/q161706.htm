

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: How To Integrate Native Methods in a Java Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161706">
<META NAME="KBModify" CONTENT="1998/01/29">
<META NAME="KBCreate" CONTENT="1997/01/02">
<META NAME="Keywords" CONTENT="kbcode kbsample CmdLnUtils JVM">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  The GCDJAVA sample illustrates how to use Native Methods from a Java application. This sample contains two Java classes: NativeM and Main. In the NativeM class, you define a native method called ComputeGCD. In the Main class, you define the main() ...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAYK,QBXF,QA3P,QAPF,QAGI,QAJN,QAMA,QABO,QBXB,QAY2,QATJ,QAH4,QBFY,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: How To Integrate Native Methods in a Java Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161706</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual J++, version 1.0, 1.1
<LI>Microsoft SDK for Java, versions 1.5, 1.51, 2.0, 2.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The GCDJAVA sample illustrates how to use Native Methods from a Java
application. This sample contains two Java classes: NativeM and Main.
In the NativeM class, you define a native method called ComputeGCD. In
the Main class, you define the main() function in which you instantiate
an object of type NativeM to call the ComputeGCD method. The ComputeGCD
method in the NativeM class is actually implemented in C language, and
it calculates the greatest common factor (denominator) of two integers.
<P>
The following 27K self-extracting file is available for download from the
Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Gcdjava.exe">Gcdjava.exe</A> <I>(size: 21702 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The GCDJAVA sample contains two parts: A Java project and a DLL project.
Following are the files included in the projects.
<P>
<P><h3>The Java project</h3>
 

<OL><P><LI>NativeM.java - contains the ComputeGCD native method. It also loads the
   DLL that contains the native method implementation.

<P><LI>Main.java - the driver program that instantiates the native method class
   and calls the native method.
<P>
</OL><h3>The DLL project</h3>
 
<P>
This project is named Native and it includes the following:

<UL><LI>NativeM.h - the header file generated by msjavah and contains the native
   method declaration.

<LI>NativeM.c - contains the implementation for the native method.

<LI>Gcdjava.def - exports the Native method.
<P>
</UL>To use native methods in Java, you need MSJAVAH. MSJAVAH is a tool that is
installed by Microsoft SDK for Java, and is available at
<B><A HREF="http://www.microsoft.com/java">http://www.microsoft.com/java.</A></B> This tool helps you generate a header file
from a Java class file. The header file generated by MSJAVAH provides a
function declaration of the native method. In this sample, it is the
ComputeGCD method defined in the NativeM Java class. This header file can
then be used in the native language project. In this sample, it is the DLL
project in C.
<P>
The following steps give a short tutorial on how to use native methods in
Java:

<OL><P><LI>Use Visual J++ to create a Java WorkSpace.

<P><LI>Create a Java class. For example, name it NativeM, and declare a native
    method called ComputeGCD. (The method definition provides only the
    method signature and not the implementation for it.)

<P><LI>Create another class that defines the main() method. In this sample, we
    create a class named Main. In the main() function, instantiate a
    NativeM class object and call ComputeGCD.

<P><LI>Add the .java files to the project WorkSpace. Please refer to
    NativeM.java and Main.java in the GCDJAVA project directory.

<P><LI>Build the project, or use jvc (Java compiler) to compile the Java code
    you wrote in step 2.

<P><LI>Use Msjavah.exe (this is the tool that you get from Microsoft SDK for
    Java available at <B><A HREF="http://www.microsoft.com/java">http://www.microsoft.com/java)</A></B> to create the header
    file.
<P>
    Msjavah.exe is installed in the Sdk-java\Bin directory. It helps
    create a header file from the Java class (NativeM.java) you created in
    step 2. The header file defines a structure that represents the Java
    class on the native language side and provides a function declaration
    for the implementation of the native method defined in that class.
<P>
    Look at the header file NativeM.h to see what is added to this file.
    Notice that the Native.h is included in NativeM.h. Native.h is one of
    the header files from the Microsoft SDK for Java. It is located in the
    Sdk-java\Include directory. You need to add this directory to
    your MSDEV environment. See step 9 below.

<P><LI>Implement the corresponding .c file. The implementation is a
    regular function that is integrated with your Java class. Please refer
    to NativeM.c file in the Native (the DLL project) project directory.

<P><LI>Create a new DLL project and include the .h and .c files that you
    created in steps 6 and 7. Also create a .def file that exports the
    native method. Look at Gcdjava.def file in this sample.
<P>
   NOTE: If you prefer to export functions using __declspect(dllexport) in
   your source code, you do not need the .def file.

<P><LI>Make sure that you point the include files to SDK-java\Include in
   Tools.Options.Directories.

<P><LI>Build the DLL. Copy the resulting DLL to the Windows\System directory.

<P><LI>Run the Main program using jview.
<P>
</OL>If the following exception appears, then you have a library path set in
your environment, but the name of the directory where your library lives is
not in the environment:
<P>
<PRE>    java.lang.UnsatisfiedLinkError.

</PRE></OL>Or if you get the following exception, when trying to execute this sample
under Virtual Machine build 2252 or 2339 or later:
<P>
<PRE>   Error: java,lang.UnsatisfiedLinkError: native.dll
   cannot load because RNIGetCompatibleVersion export not found (new
   behavior)
   Press any key to continue...

</PRE>This exception occurs because several enhancements have been made to Raw
Native Interface in the SDK for Java versions 2.0x, which requires many RNI
DLLs, designed for earlier versions of the Microsoft Virtual Machine, to
be recompiled. To identify whether an RNI DLL is compatible with the
current version of the Virtual Machine, it will call the RNI DLLs
RNIGetCompatibleVersion export. RNI DLLs that do not export this API will
no be loaded by the current Virtual Machine.
<P>
To fix this exception , make sure you export RNIGetCompatibleVersion in the
Native.def file in the DLL project. Also include its implementation in the
NativeM.c file in the same DLL project:
<P>
<PRE>   DWORD __cdecl RNIGetCompatibleVersion()
   {
      return RNIVER;    /* RNIVER is defined in Native.h */
   }

</PRE>Rebuild the DLL. Copy the resulting DLL to the windows\system directory.
<P>
NOTE: It is also possible to access native code by creating COM objects
that can be accessed via Java. There are several a couple of advantages to
taking this approach:

<UL><LI>By using the COM model, you make the interfacing to the Garbage
   Collection system transparent to the programmer. In contrast, Garbage
   Collection does not take place automatically when you use the Native
   Methods.

<LI>It is generally easier to reuse the COM objects in non-Java programs
   than Native Methods.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Native Code SDK
<P>

Keywords          : kbcode kbsample CmdLnUtils JVM<BR>
Technology        : kbInetDev<BR>
Version           : 1.0 1.1<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>
Solution Type     : kbfile<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

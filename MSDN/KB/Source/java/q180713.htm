

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Getting "Unsatisfied Link Error" When Using J/Direct </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180713">
<META NAME="KBModify" CONTENT="1998/02/10">
<META NAME="KBCreate" CONTENT="1998/02/06">
<META NAME="Keywords" CONTENT="kberrmsg JDirectX">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  The following error message is generated when trying to run a Java application or applet that uses J/Direct:     Error: Java.lang.unsatisified link error...  CAUSE =====  This error can occur if an old version of the Java compiler (Jvc.exe) is used...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXF,QABI,QAPN,QBXB,QA3P,QATJ,QAFI,QAB4,QAUJ,QDNN,QBFY,QAM5,QAAP,QAY2,QAYK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Getting "Unsatisfied Link Error" When Using J/Direct</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 10, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180713</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>SDK for Java, versions 2.0, 2.01
<LI>Microsoft Win32 Virtual Machine for Java
<LI>Microsoft Visual J++, versions 1.0, 1.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The following error message is generated when trying to run a Java
application or applet that uses J/Direct:
<P>
<PRE>   Error: Java.lang.unsatisified link error...

</PRE><h2>CAUSE</h2>
 
<P>
This error can occur if an old version of the Java compiler (Jvc.exe) is
used. Make sure you are using Jvc.exe version 4337 or later. Version 4337
is shipped with the Microsoft SDK 2.0 for Java. Since J/Direct requires the
use of compile-time directives like @dll.import (to import native methods
from a DLL) it requires the latest version of Jvc.exe, which can recognize
these compile-time directives.
<P>
NOTE: Virtual Machine for Java build 2252 (or higher) is required for
J/Direct.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
After you have installed the SDK 2.0 or 2.01 for Java, if you are trying to
build your Java applet or application that uses J/Direct from within the
Developer Studio, then add the SDK-Java.20\Bin directory to the Visual J++
executable files path as follows:

<OL><P><LI>From the Tools menu, point to Options and click the Directories tab.

<P><LI>Under the Platform menu, make sure "Java Virtual Machine" is selected.

<P><LI>Under "Show directories for," choose "Executable files."

<P><LI>Include the directory "C:\SDK-Java.20\Bin" and click the up arrow
   until it is the first directory listed in the list box.
<P>
</OL>Or you can use the following steps instead:

<OL><P><LI>Back up your current Visual J++'s copy of Jvc.exe. You can locate this
   file in C:\Program Files\DevStudio\SharedIDE\bin.

<P><LI> Then copy the following files from your SDK-Java.20\Bin directory
   (C:\SDK-Java.20\Bin) to C:\Program Files\DevStudio\SharedIDE\bin:
<P>
<P><PRE>    - Jvc.exe
    - Jps.dll
    - Msjvc.dll.
</PRE><P>
</OL><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following is a check-list that you can use to trouble-shoot this
problem if you are still seeing this error after upgrading to the Jvc.exe
version 4337 or later.

<OL><P><LI>Make sure your DLL is visible on the system path. DLLs are searched for
   in the following locations (in order):
<P>
   a. The directory from which the application (typically jview) is loaded
   b. The current directory
   c. The Windows system directory
   d. The Windows directory
   e. The directories listed in the PATH environment variable

<P><LI>The Microsoft Virtual Machine will not attempt to load the DLL until a
   method requiring it is actually called. Therefore, do not assume that
   the DLL load was successful simply because the Java class loaded
   successfully. Check the method qualifiers. Methods declared with the
   @dll.import directive must be native and static. They can have any level
   of access (public, private, and so on) supported by the Java language.

<P><LI>Make sure that your method name matches the DLL export name exactly,
   including capitalization. The DLL linking mechanism in Win32 is
   case-sensitive.

<P><LI>If you still have trouble linking to a method, use a utility such as
   dumpbin /exports (shipped with Visual C++) to verify that the DLL
   exports the method by the name you are using. Some DLLs may require you
   to link to exports by ordinal (an integer) rather than a name. In such a
   case, use the entrypoint override on the method using the "#ordinal"
   syntax as in the following example:
<P>
<P><PRE>      // This method is exported as ordinal #34.
      /** @dll.import("MyDll",entrypoint="#34") */
      public static native void MySample();
</PRE>
<P><LI>Be aware that some so-called functions are actually C macros and the
   actual DLL export name may be quite different from the name of the
   macro.

<P><LI>Having a single @dll.import directive within a class definition, before
   all the method declarations inside that class, may also result in an
   UnsatisfiedLinkError. So try specifying the @dll.import prior to the
   class definition to set a library name for all native methods declared
   in that class. For example:
<P>
<P><PRE>      /** @dll.import("KERNEL32") */
      class Test
     {
<PRE></PRE>         public static native int GetEnvironmentStrings();
         public static native int GetEnvironmentVariable(String name,
                                                     StringBuffer value,
                                                     int ccbValue);
      }

</PRE></OL>This is equivalent to specifying @dll.import for each method. Also using
the @dll.import directive at the class level saves space in the .class file
and eliminates redundant information.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about J/Direct, see the following page on the
Microsoft Web site:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/java/sdk/">http://www.microsoft.com/java/sdk/</A></B>

</PRE>For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: J/Direct unsatisfiedlinkerror jvc<BR>
Keywords          : kberrmsg JDirectX<BR>
Technology        : kbInetDev internet<BR>
Version           : WINDOWS:1.0,1.1,2.0,2.01<BR>
Platform          : WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 10, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Using DllSurrogate Support for Java/DCOM Servers </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q173790">
<META NAME="KBModify" CONTENT="1998/01/29">
<META NAME="KBCreate" CONTENT="1997/09/12">
<META NAME="Keywords" CONTENT="JCOM">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  This article explains how to use a Java COM object as a Distributed COM (DCOM) server using the system surrogate provided by DCOM in Windows 95 and Windows NT 4.0 with SP2 or SP3.  MORE INFORMATION  DCOM allows COM objects to be activated on remote...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXF,QAPN,QAW6,QDK6,QABO,QBWS,QBWP,QARL,QAB5,QAA1,QAVX,QAVW,QANN,QA2O,QAHT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Using DllSurrogate Support for Java/DCOM Servers</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q173790</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>SDK for Java, version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to use a Java COM object as a Distributed COM
(DCOM) server using the system surrogate provided by DCOM in Windows 95 and
Windows NT 4.0 with SP2 or SP3.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
DCOM allows COM objects to be activated on remote machines. It allows
clients to create and invoke the methods of objects on other machines. Java
objects can be used remotely using DCOM. One way to remotely use a Java
object is by using the system surrogate support (DllSurrogate) in DCOM for
Windows 95 and Window NT 4.0 with SP2 or SP3 along with the Microsoft
Virtual Machine (VM) for Java. JAVAREG is a tool that supports remote
access to a COM class implemented in Java. It is a command-line tool that
is used for registering Java classes as COM components in the registry. In
fact many of JAVAREG's options are intended for use only with DCOM.
<P>
The JAVAREG (version 1.0) that shipped with Microsoft Visual J++, versions
1.0 and 1.1 implemented a surrogate process itself, but it had some bugs
making it difficult to set up Java DCOM servers and clients. There is also
a Knowledge Base article listed in the REFERENCES Section below that
addresses this problem. The DCOM support now in Windows 95 and Windows NT
4.0 with SP2 and SP3 supports a surrogate as part of the system, so the
surrogate support with JAVAREG 1.0 has been dropped.
<P>
JAVAREG 2.0 is a new tool that ships with SDK for Java 2.0. This tool
fixes the bugs associated with JAVAREG 1.0 and supports remote access to a
Java COM object using the system provided surrogate process. The following
steps explain how to set up a Java/COM object as a DCOM server using the
new JavaReg2.0 tool.
<P>
<P><h3>Server Side Steps</h3>
 
<P>
The following sample makes use of the AutoIDispatch mechanism where you do
not need to create an IDL file for your Java COM object. This method does
not require tools like JAVATLB or JACTIVEX that ship with the SDK for Java
2.0. For more information on the use of the AutoIDispatch
mechanism, see the REFERENCES section below.

<OL><P><LI>Using Visual J++ 1.1, create the following Java class:
<P>
<P><PRE>      public class TestDCOM
      {
<PRE></PRE>         public String getString()
         {
            String str = "SSSS";
            return str;
         }
      }

</PRE><P><LI>Build the class and move the .class file to the &lt;windir&gt;/Java/trustlib
   directory, where &lt;windir&gt; = WINNT or WIN95.

<P><LI>Run JAVAREG (version 2.0):
<P>
<P><PRE>      javareg /register /class:TestDCOM /progid:TestDCOM.1 /surrogate
</PRE><P>
   This step generates a class ID (CLSID) for your class and automatically
   adds the DllSurrogate (which is the system surrogate)to the APPID
   portion of your Java Class in the registry. So if you run Regedit.exe,
   you can find this key under HKEY_CLASSES_ROOT\APPID\{yourclsid}.
<P>
   If you want to use a CLSID that you have already allocated, you can use
   the /clsid: flag to specify it, and JavaReg2.0 will use the one you
   specify. In either case, you need to note your CLSID so that you can use
   it on your client machine.

<P><LI>Once you have registered the COM object successfully, run OLEVIEW, which
   is a tool that lets you view all the registered COM objects interfaces
   and Type_Libraries. Select View.ExpertMode and also set
   Object.CoCreateInstance flags to CLSCTX_LOCAL_SERVER and
   CLSCTX_REMOTE_SERVER. (Make sure that CLSCTX_INPROC_SERVER is not
   selected). Expand the Java classes node. Then expand the Java
   Class:TestDCOM node. This is the same as right-clicking and selecting
   CreateInstance on the class. If it expands showing all the interfaces,
   then your COM object has been created in a separate process on your
   machine. Getting your class to activate out-of-process on a single
   machine is the first step towards getting it to activate on another
   machine, so it is essential that you test this scenario first.

<P><LI>Configure your applications to run your Java COM object in a remote
   machine and provide both Launch and Access Permissions to the remote
   machine user. You can do this either using OLEVIEW or DCOMCONFG.
   DCOMCNFG is a utility included with DCOM for Windows 95 and Windows NT
   4.0 with SP2 or SP3.
<P>
</OL><h3>Client Side Steps</h3>
 

<OL><P><LI>Run JAVAREG 2.0:
<P>
<P><PRE>      javareg /register /class:TestDCOM /progid:TestDCOM.1
      /clsid:{yourclsid}
      /remote:servername
</PRE><P>
   Where /remote:servername is a new option that lets you specify the
   remote server machine name.

<P><LI>Use OLEVIEW to test that your class activates remotely. Run OLEVIEW on
   the client, find the Java Classes:TestDCOM class under the Java Classes
   component category, and double-click it. After a brief pause you will
   see the list of interfaces your class supports displayed by OLEVIEW. If
   you use the Task Manager on the server machine to look at the running
   processes, you will see Dllhost.exe running. This is the surrogate
   process under which your class is running on the server.

<P><LI>Now you can create a Visual Basic application (or any other client such
   as Visual C++ or VBScript) to create an instance of TestDCOM.1:
<P>
<P><PRE>      Dim X As Object
      Dim str As String
      Set X = CreateObject("TestDCOM.1")
      str = X.getString()
      MsgBox str
</PRE>
<P><LI>Now you should be able to run this Vb.exe file from your client machine,
   which will remotely activate the TestDCOM object on the server machine.
<P>
</OL>NOTE: If the client application specifies both a CLSID (instead of relying
on the ProgID) and a remote server name to CoCreateInstanceEx (or
equivalent), then no client side registration steps are necessary.
<P>
<P><h3>Other Tips</h3>
 
<P>
Whenever you attempt to get a DCOM solution to work, it is useful to know
when processes are starting and stopping on a machine. One very effective
way to do this is to enable the "Process Start" and "Process Stop" sounds
in the Sounds Control Panel applet. With these sounds enabled (and set to
two distinguishable noises), you will be able to tell whenever a process
starts or stops on your machine. This is useful in tracking down problems
where DCOM's launch security has allowed a client to launch the server
process, but access security is disallowing access (you'll hear the process
start sound, but the client will get E_ACCESSDENIED from the activation
request). Of course, this requires that your server machine have a sound
card installed with appropriate drivers.
<P>
Use OLEVIEW to test that your components are installed and registered
correctly. Always test new components first in-process
(CLSCTX_INPROC_SERVER checked in OLEVIEW), then cross-process-same-machine
(CSLCTX_LOCAL_SERVER), then remotely (CLSCTX_REMOTE_SERVER with no
LocalServer32 key). By doing this you reduce the number of variables
(things that can go wrong) as you do your testing.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Download the new SDK for Java 2.0 from <B><A HREF="http://www.microsoft.com/java/">http://www.microsoft.com/java/.</A></B>
<P>
For additional information on downloading DCOM for Windows 95, please see
<B><A HREF="http://www.microsoft.com/oledev/">http://www.microsoft.com/oledev/.</A></B>
<P>
For additional information on the issues involved with JAVAREG 1.0's
surrogate support please refer to the following Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../java/Q162164.htm">Q162164</A></B>
   TITLE     : BUG: Using Java Servers and DCOM

</PRE></OL>For additional information on the usage of AutoIDispatch mechanism, please
refer to the following Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../java/Q172202.htm">Q172202</A></B>
   TITLE     : Implementing Java Automation Objects using AutoIDispatch

</PRE>For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Java DCOM surrogate
<P>

Keywords          : JCOM<BR>
Technology        : kbInetDev<BR>
Version           : WINDOWS:2.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

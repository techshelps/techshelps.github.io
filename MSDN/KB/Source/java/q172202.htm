

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Implementing Java Automation Objects using AutoIDispatch </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172202">
<META NAME="KBModify" CONTENT="1998/01/29">
<META NAME="KBCreate" CONTENT="1997/07/31">
<META NAME="Keywords" CONTENT="JCOM JVM">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  Microsoft's VM for Java allows programmers to create two types of COM objects with Java:  1. COM objects that implement specific COM interfaces, either custom, dual,    or dispinterface.  2. COM objects that implement only IDispatch and do not cont...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBXF,QAW6,QAB5,QBS0,QDNQ,QAGI,QBWA,QBBS,QALQ,QABO,QAT7,QARL,QAH4,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Implementing Java Automation Objects using AutoIDispatch</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172202</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Virtual Machine for Java
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft's VM for Java allows programmers to create two types of COM
objects with Java:

<OL><P><LI>COM objects that implement specific COM interfaces, either custom, dual,
   or dispinterface.

<P><LI>COM objects that implement only IDispatch and do not contain any type
   information.
<P>
</OL>The first type of COM object is useful with strongly typed languages such
as C++ and Java. It is also useful when it is important for a COM object to
meet the "contractual obligation" of a specific COM interface. The creation
and use of this type of COM object is documented in samples included with
Visual J++.
<P>
The second type is useful with "late binding" environments like Microsoft
Visual Basic and the Microsoft scripting languages, VBScript and JScript.
This article covers the creation and use of this type of COM object.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In order to allow the use of Java objects in "late binding" environments
like Microsoft Visual Basic, VBScript, and JScript, the Microsoft VM for
Java implements IDispatch automatically for all Java objects. This feature
is called AutoIDispatch.
<P>
This means that Java programmers who need to use their Java objects only in
these environments no longer need to create interface definition files
(IDL/ODL). Also, tools like JAVATLB and JACTIVEX are no longer necessary
since the Java object does not implement any custom COM interfaces that are
defined in type libraries.
<P>
When a Java object with AutoIDispatch is used as a COM object, all of its
public methods and members are made available through the IDispatch
interface.
<P>
To implement a simple "late bound" automation object in Java using
AutoIDispatch, you would do the following:

<OL><P><LI>Implement a "standard" Java object with public members and methods and
   compile it.

<P><LI>Register it using JavaReg.

<P><LI>Ensure that the Java class is visible in the class path by copying it to
   the &lt;windir&gt;\java\lib directory.
<P>
</OL><h3>Sample 1: Using a Java object from Visual Basic</h3>
 
<P>
A simple class could be defined as follows:
<P>
<PRE>    class Test
    {
       public String getString()
       {
          return "Hello!";
       }

       public int count = 10;
    }

</PRE></OL>After compiling the class, copy the Test.class file to the
&lt;windir&gt;\java\lib directory so that this class is available to Java.
<P>
From a command prompt that has javareg.exe in its path, type the following:
<P>
<PRE>   javareg.exe /register /class:Test /progid:My.Test

</PRE>Using Visual Basic 4.0 or greater, create a simple project with code
similar to the following:
<P>
<PRE>   Dim obj as Object
   Set obj = CreateObject("My.Test")
   MsgBox obj.getString  ' This displays the string Hello
   i = obj.count ' this assigns the value 10 to val

</PRE>Visual Basic, the "late binding" client, automatically uses
IDispatch::GetIdsOfNames and IDispatch::Invoke (which the VM implements
automatically) to invoke the public method 'getString()' and accesses the
public member 'count'.
<P>
<P><h3>Sample 2: Using a Java object from Scripting</h3>
 
<P>
A simple applet class could be defined as follows:
<P>
<PRE>    import java.applet.*;
    import java.awt.*;

    class MyApplet extends Applet
    {
       // Notice that the member txt is public.
       public TextArea txt = new TextArea();

       public void init()
       {
          // Simply add the TextArea to the center
          // of the Applet.

          setLayout(new BorderLayout());
          add("Center", txt);
       }
    }

</PRE>Compile the source for MyApplet.  Then create an HTML file as follows:
<P>
<P>
<PRE>    &lt;html&gt;
    &lt;HEAD&gt;
    &lt;title&gt;MyApplet&lt;/title&gt;
    &lt;/HEAD&gt;
    &lt;BODY&gt;
    &lt;hr&gt;

    &lt;applet code=MyApplet id=app width=200 height=200&gt;
    &lt;/applet&gt;

    &lt;hr&gt;

    &lt;SCRIPT LANGUAGE="VBScript"&gt;
    &lt;!--
       Sub window_onLoad()
          set txtobj = document.app.txt
          txtobj.setText("Hello World!")
       end sub
    --&gt;
    &lt;/SCRIPT&gt;
    &lt;/BODY&gt;
    &lt;/html&gt;

</PRE>When Internet Explorer loads this Web page, the VBScript subroutine
<PRE>'window_onLoad()' will be called. The text "Hello World!" gets placed in
</PRE>the TextArea component on MyApplet. Note that we did not create a method on
the MyApplet class that specifically takes a String and calls
txt.setText(String). Instead, we made the txt object available as a member
of the MyApplet class by making it public. When the following script code
executes, the txt member of MyApplet becomes an AutoIDispatch COM object
itself.:
<P>
<PRE>   set txtobj = document.app.txt

</PRE>At that point, all public members and methods on the txt object are
available to the script code. The next line actually calls the
setText(String) method of the TextArea component that is centered on the
applet:
<P>
<PRE>   txtobj.setText("Hello World!")


</PRE>It is important to note here that the MyApplet object has not been
registered as a COM object on the client. It is just an Applet on a Web
page. But because the Microsoft VM for Java implements IDispatch
automatically for every Java object, scripting has full access to the
Applet.
<P>
<P><h2>OTHER INFORMATION</h2>
 
<P>
If for some reason, you need to turn off the AutoIDispatch feature for a
specific class, you can do so by having your class implement the
com.ms.com.NoAutoScripting interface. This interface does not contain any
methods. It just tells the VM not to expose IDispatch for any of the
instances of this class.
<P>
AutoIDispatch has the limitation that only the public methods on your class
can be invoked (via the IDispatch interface). Thus there is no need for
clients to become aware of the interfaces implemented by the server. The
limitation of AutoIDispatch is performance: Each method call (on a native
client) requires two round trips to the server(GetIdsOfNames and Invoke).
On a smart client (VB4) the results of GetIdsOfNames is cached so the two
roundtrips only occur on the first call to a particular method. In addition
there is slightly more overhead in calling/implementing Invoke vs. calling
a vtable based COM method directly. In cross-machine situations these
performance issues are reduced somewhat because of the latency caused by
the process/net boundaries.
<P>
Another limitation of AutoIDispatch is that the VM does not associate any
Type Library information with the COM object. So when a client calls
IDispatch::GetTypeInfo(), the Java COM object returns
TYPE_E_ELEMENTNOTFOUND.  Again, AutoIDispatch is useful only for "late
bound" clients. Clients that require Type Library information cannot use
AutoIDispatch based Java COM objects.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>

</PRE> 
<PRE>Keywords          : JCOM JVM
Technology        : internet kbInetDev
Version           : WINDOWS:
Platform          : WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

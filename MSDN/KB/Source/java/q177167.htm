

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: JACTIVEX /X:m- Disables Automarshaling of COM INTERFACES </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177167">
<META NAME="KBModify" CONTENT="1998/01/29">
<META NAME="KBCreate" CONTENT="1997/11/21">
<META NAME="Keywords" CONTENT="JCOM JVM">
<META NAME="KBArea" CONTENT="Support; KB; java">
<META NAME="Description" CONTENT="  When using COM objects in Java, there are threading issues that can cause unusual behavior. Depending on the threading model of the COM object, the Virtual Machine will either freely make calls to the COM object or use a special marshalling thread ...">
<META NAME="Product" CONTENT="java">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAGI,QBBS,QAUQ,QAMB,QBVV,QBXF,QABI,QAIF,QAPF,QDH9,QAKR,QAHE,QADK V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: JACTIVEX /X:m- Disables Automarshaling of COM INTERFACES</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 29, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177167</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>SDK for Java, versions 2.0, 2.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When using COM objects in Java, there are threading issues that can cause
unusual behavior. Depending on the threading model of the COM object, the
Virtual Machine will either freely make calls to the COM object or use a
special marshalling thread to make the calls to the COM object.
<P>
In certain scenarios, calls using the special thread can cause call
blocking problems.
<P>
Using switches on the JActiveX tool, you can choose to not marshal the COM
object on a special thread.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
JACTIVEX produces Java interface source files for COM interfaces and
inserts comments that tell the compiler and Java VM how to handle them. The
following example of the @COM comment tells the compiler and VM that the
interface is a COM interface, has a specific IID, is a dual interface, and
its threading model is to be determined automatically at runtime.
<P>
<PRE>   /** @com.interface(iid=12345678-ABCD-12AB-A1B2-123412341234,
      thread=AUTO, type=DUAL) */
   public interface IFoo extends IUnknown
   {
   ...

</PRE>When the thread property of the @com.interface comment equals AUTO, the
Virtual Machine determines at runtime whether or not to use a special
thread to marshal the call.
<P>
If the Virtual Machine creates the COM object with the new operator on a
wrapper class, the Virtual Machine determines the threading model of the
COM object from the registry. Then, it chooses whether or not to marshal
the interfaces based on that information.
<P>
If the Virtual Machine gets a COM object from a method call or a return
value of a method call, the Virtual Machine cannot determine the threading
model of the object from the registry. Therefore it uses the thread
property of the @com.interface comment to determine whether marshalling is
needed. If the thread property is AUTO, then the Virtual Machine checks to
see if the COM object aggregates the free-threaded marshaler. If so, it
will not marshal the interface for that COM object. If the COM object does
not aggregate the free-threaded marshaler, it will automatically marshal
the interface.
<P>
There are many multithread aware COM objects that do not aggregate the free-
threaded marshaler. In these cases, the VM will still marshal the thread.
In order to prevent this, you must use the /X:m- switch with JActiveX. The
wrapper interface will now have the following comment:
<P>
<PRE>   /** @com.interface(iid=12345678-ABCD-12AB-A1B2-123412341234,
      thread=NO, type=DUAL) */
   public interface IFoo extends IUnknown
   {
   ...

</PRE>This tells the Virtual Machine to not use a marshaler thread to make calls
to the COM object. Calls will directly enter the COM object from the Java
code.
<P>
NOTE: It is important to make sure the COM object is truly "Free Threaded"
before using this switch. If you use this switch on Apartment or Single
threaded COM objects, it can cause bad behavior or crashes. Check the
object's documentation or the registry to find out the object's threading
model.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For information about when a COM object should and shouldn't be marshaled
by a custom thread, look at the Microsoft SDK for Java 2.0 documentation's
article "Apartment Model and Threading Issues" in the "Low-Level Java/COM
Integration" section.
<P>
For the latest Knowledge Base articles and other support information on
Visual J++ and the SDK for Java, see the following page on the Microsoft
Technical Support site:
<P>
<PRE>   <B><A HREF="http://support.microsoft.com/support/visualj/">http://support.microsoft.com/support/visualj/</A></B>
   <B><A HREF="http://support.microsoft.com/support/java/">http://support.microsoft.com/support/java/</A></B>

</PRE> 
<PRE>Keywords          : JCOM JVM
Technology        : kbInetDev
Version           : WINDOWS:2.0,2.01
Platform          : WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 29, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

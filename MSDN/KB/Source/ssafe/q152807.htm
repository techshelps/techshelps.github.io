

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Error Messages from Analyze Tool of Visual SourceSafe </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152807">
<META NAME="KBModify" CONTENT="1998/02/11">
<META NAME="KBCreate" CONTENT="1996/06/24">
<META NAME="Keywords" CONTENT="ssdb vbwin vss kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; ssafe">
<META NAME="Description" CONTENT="  This article reviews common error messages and status messages produced by the Analyze tool for Visual SourceSafe 4.0 and 5.0. The messages documented in this article are returned by the Analyze tool that can be obtained from the Microsoft download...">
<META NAME="Product" CONTENT="Visual SourceSafe">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAFI,QABH,QADK,QA5V,QAB4,QAR4,QAAP,QAEF,QBVV,QDMH,QAEV,QDML,QAY2,QAUJ,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Error Messages from Analyze Tool of Visual SourceSafe</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 11, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152807</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Visual SourceSafe, 32-bit, for Windows, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article reviews common error messages and status messages produced by
the Analyze tool for Visual SourceSafe 4.0 and 5.0. The messages documented
in this article are returned by the Analyze tool that can be obtained from
the Microsoft download sites. For more information on how to obtain and use
the Analyze tool, please refer to the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../SSAFE/Q139566.htm">Q139566</A></B>
   TITLE     : SAMPLE: Analyze5.exe Utility for Visual SourceSafe

</PRE>The messages reported by the Analyze tool are echoed to the screen. They
are also written to the DATA\BACKUP\Analyze.log file by default.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Following is a list of the most common messages you receive when you run
the Analyze tool, with or without using the -F option, to repair a
database. The messages that appear when you want to get a verbose listing
(-V switch) are not documented here. This list is not comprehensive.
Please contact Microsoft Technical Support if you receive an error not
documented here.
<P>
<P><h3>How Visual SourceSafe Stores Files and Projects</h3>
 
<P>
In order to understand some of the messages below, it is crucial to
understand how Visual SourceSafe stores files and projects. There are two
files created for each file and each project in Visual SourceSafe and they
are stored in a subdirectory of the DATA directory. The name of the
subdirectory is the same as the first character of the Visual SourceSafe
file name, also known as the physical file name. One of the two files is
called the "Log" file. It does not have an extension. This is where Visual
SourceSafe information and differences between one version of the file and
the next are stored. The other file is called the "Data" or "Tip" file. It
has an extension of either .A or .B, and it stores the most recent version
of the file or the project.
<P>
Following is a method to identify the name of a file from the Visual
SourceSafe physical file:
<P>
Call the following command to create a file named Physical.txt that
indicates all the files that have not been deleted and are not corrupted in
the Visual SourceSafe database:
<P>
<PRE>   SS physical $/ -r -ophysical.txt

</PRE>Search Physical.txt to find the file name you are looking for. If you are
searching a specific file name (MyFile.txt) in the Physical.txt file, be
sure to scan the whole file as there may be multiple instances of a file.
<P>
<P><h3>LIST OF MESSAGES</h3>
 

<OL><P><LI>The CRC for data file "File Name" (Physical Data File Name) does not
   match the stored CRC. The file may be corrupt. The file was last
   checked in on "Date; Time" by user "User Name" in project "Project
   name."
<P>
   Example:
<P>
   The CRC for data file "MyFile.txt" (YBGAAAAA.a) does not match the
   stored CRC. The file may be corrupt. The file was last checked in
   on "10/15/96; 11:26a" by user "Guest" in project "$/MyProject."
<P>
   Cause:
<P>
   This message does not usually include the last sentence about the last
   checked-in date and time. When Analyze returns this message, older
   versions of the file may be lost if the error is not corrected right
   away. This message occurs because the log file records the Cyclical
   Redundancy Check (CRC) for the last updated copy of the file and the
   last recorded CRC does not match the current CRC.
<P>
   Resolution:
<P>
   To fix the error, first verify that the name of the copy in the working
   directory of the user who last checked in the file matches the name of
   the Physical Data File. If it does, make sure that the "Check in
   unchanged files" option in the General Tab of the Options menu is set
   to "Check In." Then perform a Checkout on the file and Check it back
   in. This will correct the stored CRC.

<P><LI>Creating a new nameset, or long filename information, for the file
   &lt;File Name&gt;.
<P>
   Example:
<P>
   Creating a new nameset, or long filename information, for the file
   MyFile.txt.
<P>
   Cause:
<P>
   Analyze is reporting that it is attempting to fix the long file
   information for this file.

<P><LI>The data file for "File Name (Physical Data File Name)" was not found.
<P>
   Example:
<P>
   The data file for "EQUATES.INC" (aiaaaaaa.b) was not found.
<P>
   Cause:
<P>
   Visual SourceSafe keeps the last copy of each file in the database as an
   individual file (.A or .B), also known as the data file. Analyze
   noticed that the data file corresponding to the filename is missing
   from the database. It knows whether to look for a .A or a .B file based
   on an entry in the log file (AIAAAAAA).  This error is usually caused by
   the data file being marked as "read-only" or by a network or server
   problem during file creation.
<P>
   Steps to Resolve:
<P>
   If the data file mentioned in the error message is marked "read-only,"
   reset the "read-only" attribute so the file is writable.
<P>
   If &lt;File Name&gt; is a project, you can run Analyze -F &lt;Path to Data&gt; to
   fix it.
<P>
   If &lt;File Name&gt; is a file, there is no easy way to solve this error.
   The best alternative is to access the history of the file and identify
   the user who last checked in the file. You can then obtain the latest
   version of that file from the user's working directory. Copy the file
   from the physical data file name (with the .A or .B extension, as
   specified in the error message) to the correct subdirectory in the
   database. For example, a file that starts with the letter A should be
   stored in the A directory. Be sure to rename the file as part of the
   copy process.
<P>
   If you have multiple instances of this file in different projects in
   your database, you need to determine which project stores this file.
   See directions above for creating an output file. Search in the
   physical output file for the Physical Data File Name without the
   extension. In the example above, this would be aiaaaaaa. If you move
   up in the file from occurrence of aiaaaaaa you will see the project
   name that includes the file.

<P><LI>Database analysis in progress.
<P>
   Cause:
<P>
   This message is informational only and reports that the Analyze
   process has started.

<P><LI>Encountered a bad CRC in &lt;File Name&gt;; record type &lt;Record Header Type&gt;.
<P>
   Example:
<P>
   Encountered a bad CRC in Status.dat; record type SH.
<P>
   Cause:
<P>
   Each file has a header. Analyze reads it and computes the CRC for the
   data that is currently there. If it does not match the CRC in the
   header, this message is displayed. The key information is the File Name
   and Record Header Type. If this data is unrecognizable, then the header
   is also bad.
<P>
   This error usually only occurs once at the beginning of the Log file.
   It occurs most often for users who are upgrading from SourceSafe 3.x.
   The Status.dat file that is used to store the file (whether it is
   checked out or not) is corrupted.
<P>
   Steps to Resolve:
<P>
   If this message appears for the Status.dat file, running Analyze -F
   &lt;Path to Data&gt; usually fixes the problem. However, for other files, the
   impact of this corruption is that this record is lost. Depending on the
   type of the record, Analyze may ignore it, fix it, or just remove it.
   If the File Name and Record Header Type are recognizable, running
   Analyze -F might recover the file.

<P><LI>The file "&lt;Physical Log File Name including path&gt;" appears to be
   corrupt. Unable to read the format or header.
<P>
   Example:
<P>
   The file "f:\vss\data\O\ORLAAAAA" appears to be corrupt. Unable to
   read the format or header.
<P>
   Cause:
<P>
   Files in Visual SourceSafe have format and header records to identify
   the file. One or both of these is corrupted. This error is very serious
   because it usually indicates that the rest of the Log file is damaged.
<P>
   Steps to Resolve:
<P>
   The best solution is to retrieve the file from backup.
<P>
   If no backups are available and the file is a project, delete the files
   from the DATA\?\ directory. Be sure to delete the file with the
   extension of .a or .b and the file with no extension. Then run
   Analyze -F &lt;Path to Data&gt; to clean up the links. All files that were in
   that project are likely to be lost.
<P>
   If it is a file, then make a copy of the data file (the one with the
   extension of .a or .b), and then delete the files from the DATA\?\
   directory. Delete the file with the extension of .a or .b and the file
   with no extension, and then rename the .a or .b file to its real name.
   Finally, add the file back into Visual SourceSafe. You will have to
   Identify the file. See directions for identifying a file at the
   beginning of this article.

<P><LI>File "&lt;Physical Log File Name including path&gt;" is not the correct
   SourceSafe version.
<P>
   Example:
<P>
   File "f:\vss\data\H\HACKAAAA" is not the correct Visual SourceSafe
   version.
<P>
   Cause:
<P>
   Each physical log file maintains its database version. The setup
   process of Visual SourceSafe runs a utility called Ddconv on the
   database. Ddconv runs through the database and converts files to the
   current version. This message occurs when the file was not converted
   to the correct version because someone was using SourceSafe during
   the conversion, the file was read-only at that time, or the file was
   damaged in the earlier version of SourceSafe and Ddconv couldn't
   recognize it.
<P>
   Steps to Resolve:
<P>
   If there was just a lock on the file, you can safely run Ddconv
   against the database and it will convert this file. The syntax to run
   Ddconv is as follows:
<P>
<P><PRE>      DDCONV &lt;Path to Data&gt;
</PRE><P>
   Any corruption in the file or the project will need to be fixed before
   Ddconv can convert the file. Unfortunately, because the rest of the
   database has already been upgraded to a Visual SourceSafe 4.0 format,
   it is hard to determine what that corruption is. You can recover your
   SourceSafe 3.x database and run the 3.x version of the Analyze tool
   for SourceSafe 3.x on the 3.x data to determine the corruption. Once
   fixed, you can run Ddconv on the data again.
<P>
   If you do not need the file or the project, you can move it, along with
   its corresponding data file (.A or .B), out of the DATA subdirectory.
   Then call Analyze with the -F option to clean up any links to the file.
   See the directions at the beginning of this article to download the new
   version of the Analyze tool.

<P><LI>The file &lt;File Name&gt; was branched from &lt;Physical Log File Name&gt; that
   is missing a branch reference. A reference will be added.
<P>
   Example:
<P>
   The file CBLIST.ASM was branched from NNAAAAAA that is missing a
   branch reference. A reference will be added.
<P>
   Cause:
<P>
   The branch parent does not have a reference to this file. Analyze is
   reporting that it is adding a reference of that branch to the original
   file.

<P><LI>The file &lt;File Name&gt; was branched from &lt;Physical Log File Name&gt;
   that is now corrupted and the early versions will be inaccessible.
<P>
   Example:
<P>
   The file MyFile.txt was branched from SOLAAAAA which is now corrupted
   and the early versions will be inaccessible.
<P>
   Cause:
<P>
   This message informs you that versions of the file before it was
   branched are damaged because of a corruption in the branch parent file.
<P>
   Steps to Resolve:
<P>
   This message is informational only, and there is nothing you can do for
   the file in &lt;File Name&gt;. Ideally you would fix the corruption in the
   branch parent, the physical log file name in the message. There is
   probably another message in the Analyze.log file about the corruption
   in the branched from file.

<P><LI>Found a reference to an invalid rights block.
<P>
   Cause:
<P>
   There is corruption in the Rights.dat file. This is the file that
   stores project security information. This error can usually be fixed by
   running the new Analyze with the -F switch.

<P><LI>The Header information in the rights system is corrupt.
<P>
   Cause:
<P>
   There is corruption in the Rights.dat file. This is the file that
   stores project security information.
<P>
   Steps to Resolve:
<P>
   You can fix this problem by running the new Analyze with the -F switch.

<P><LI>Incompatible database version.
<P>
   Cause:
<P>
   The Version.dat file contains the wrong information.
<P>
   Steps to Resolve:
<P>
   This error usually occurs when a user is upgrading from SourceSafe 3.x
   to Visual SourceSafe. It occurs because of a problem in the conversion
   process. The problem is usually documented in the Ddcerr.log file
   that is located in the DATA directory.
<P>
   For more information about the messages in this file and how to resolve
   them, please see the following article in the Microsoft Knowledge Base:
<P>
   ARTICLE ID: <B><A HREF="../WINNT/Q153823.htm">Q153823</A></B>
<PRE>   TITLE     : DDConv Messages of Visual SourceSafe

   When the problem is cleared up, running the Ddconv utility again
   usually updates the Version.dat file. The syntax for calling the
   Ddconv utility is:

      DDCONV &lt;Path to Data&gt;

</PRE><P><LI>The item &lt;File Name&gt; has an extra parent relationship that will be
   removed.
<P>
   Example:
<P>
   The item MyFile.txt has an extra parent relationship that will be
   removed.
<P>
   Cause:
<P>
   This is an informational message indicating that the file listed
   has a parent that is not needed. The Analyze tool is removing the
   extra parent record.

<P><LI>The nameset information for &lt;File Name&gt; is corrupt.
<P>
   Example:
<P>
   The nameset information for Myfile.txt is corrupt.
<P>
   Cause:
<P>
   There is corruption in the Names.dat file for the listed file name.
   The Names.dat file is where long file and project information is
   stored.
<P>
   Steps to Resolve:
<P>
   Up to 33 characters can be recovered by running Analyze with the -F
   switch.

<P><LI>No parent(s) or branch(es) were found for file "&lt;Physical Log File
   Name&gt;."
<P>
   Example:
<P>
   No parent(s) or branch(es) were found for file "BRGAAAAA."
<P>
   Cause:
<P>
   This means that the file currently has no parent or branch records and
   the Analyze utility will place the file on the delete list. If this
   file is branched from another file that has not been deleted, it will
   not be removed from the database and therefore this message will
   continue to appear. This is normal SourceSafe behavior. This message is
   not an error in your source code. This message should have been a
   verbose logging message, but was improperly classified as a regular
   message.
<P>
   Steps to Resolve:
<P>
   Usually running Analyze with the -F and the -D switches will fix the
   references or destroy these files, if appropriate. However, please note
   that this will not remove all occurrences of this message.

<P><LI>No parent project for subproject file "&lt;Physical Log File Name&gt;."
<P>
   Example:
<P>
   No parent project for subproject file "ABBAAAAA."
<P>
   Cause:
<P>
   This error means that this project was not automatically removed when
   the parent project was deleted or that the parent project has somehow
   been lost.
<P>
   Steps to Resolve:
<P>
   This error is usually fixed by running Analyze -F &lt;Path to Data&gt;. The
   tool either reconstructs the parent or removes the sub project if it is
   no longer needed.

<P><LI>Project log "&lt;Project Physical Name&gt;" has a &lt;Log Type&gt; record for item
   "&lt;File Name|Project Name&gt;," but that item was or was not found in the
   project.
<P>
   Example:
<P>
   Project log "DGEAAAAA" has a create record for item "MyFile.txt," but
   that item wasn't found in the project.
<P>
   Cause:
<P>
   Analyze takes the log records from a project and the current list of
   children records in the project and plays the log records backwards
   until it gets to the beginning of the list of log records. The list of
   children should be empty corresponding to the creation of the project.
   This error indicates that there is a mismatch between the history of
   the project and its content. This is just an internal check.
<P>
   Steps to Resolve:
<P>
   Depending on the nature of the error in the log, this message might be
   corrected by running Analyze -F. This is not a dangerous error and you
   can ignore it. This message almost always appears with the next
   message.

<P><LI>The project contents as rebuilt from the log "&lt;Physical Log File
   Name&gt;" does not match the projects actual contents.
<P>
   Example:
<P>
   The project contents as rebuilt from the log "DGEAAAAA" does not
   match the project actual contents.
<P>
   Cause:
<P>
   This message almost always appears after one or more of the message
   documented above. It occurs because there is a mismatch between the
   history and the log files. This is an internal check.
<P>
   Steps to Resolve:
<P>
   This message may or may not be fixed by Analyze -F, depending on the
   problem in the log. This is not a dangerous error and you can ignore
   it.

<P><LI>A rights setting mismatch was found.
<P>
   Cause:
<P>
   The Rights.dat file, which stores project security information,
   contains an invalid reference.
<P>
   Steps to Resolve:
<P>
   You can usually fix this error by calling the Analyze utility with
   the -F switch.

<P><LI>There is a diff chain size mismatch in file "File Name"(Physical Log
   File Name)" at version # (versions earlier than that version can no
   longer be retrieved from the database).
<P>
   Example:
<P>
   There is a diff chain size mismatch in file "MyFile.txt" (FYIAAAAA)
   at version 12 (versions earlier than that version can no longer be
   retrieved from the database).
<P>
   Cause:
<P>
   This message is an error and means that versions older than the one
   specified can't be retrieved. This is usually caused by an error in a
   log entry record, that causes the difference chain (or delta) to be
   unusable to properly regenerate older versions of the file.
<P>
   Steps to Resolve:
<P>
   The only resolution is to retrieve the file (FYIAAAAA and
   FYIAAAAA.a (or .b)) from backup.

<P><LI>There is a version sequence mismatch in the log file for "&lt;File
   name&gt;" (&lt;Physical Log File Name&gt;).
<P>
   Example:
<P>
   There is a version sequence mismatch in the log file for "MyFile.txt"
   (FISHAAAA).
<P>
   Cause:
<P>
   There is a missing log entry in the file. This behavior usually occurs
   when the Analyze utility has found a damaged log entry and removed it.
   If this log entry is a label, no older versions of a file are lost. If
   Analyze removed an Update log entry, then older versions of the file
   might be lost.
<P>
   Steps to Resolve:
<P>
   If you need the missing version of the file, you can retrieve it from
   backup if you know when the corruption occurred and recover from
   before that time. This may mean that later versions are lost.

<P><LI>Unable to create the filemapping for the database &lt;path to DATA
   subdirectory&gt;.
<P>
   Example:
<P>
   Unable to create the filemapping for the database c:\vss\data.
<P>
   Cause:
<P>
   A file name in the DATA directory is greater than the largest
   allowable file name. This usually occurs when a non-SourceSafe file
   is written to the DATA directory.
<P>
   Steps to Resolve:
<P>
   Scan the DATA subdirectory to remove the entry that is not a SourceSafe
   file.

<P><LI>Unable to open project &lt;Path Used as Analyze Parameter&gt;\a\aaaaaaaa
   Continue?
<P>
   Example:
<P>
   Unable to open project f:\vss\a\aaaaaaaa
   Continue?
<P>
   Cause:
<P>
   Analyze cannot find the main project in the database. This error
   usually occurs because the path to the project is incorrect when you
   call Analyze.
<P>
   Steps to Resolve:
<P>
   Run Analyze and ensure you are pointing to the correct location of the
   SourceSafe database.

<P><LI>The file &lt;filename&gt; contained one or more badly formed physical file
   names.
<P>
   Example:
<P>
   The file bqeaaaaa contained one or more badly formed physical file
   names.
<P>
   Cause:
<P>
   A badly formed filename means that an internal record has a physical
   filename in the improper case. For example, BQEAAAAA =&gt; bqeaaaaa is a
   harmless message.
<P>
   Steps to Resolve:
<P>
   Run Analyze with the -f switch.

<P><LI>The error "The count of the children in the header does not match the
   count of children on disk. The count will be adjusted." is not a
   critical error.
<P>
   Cause:
<P>
   Within every project header, a number is kept that is indicative of the
   number of children associated with that project. One of the many things
   that Analyze does as it scans through the database is to count the
   children files associated with that project. If the number that Analyze
   counts does not match the count in the header then the error is
   returned.
<P>
   Steps to Resolve:
<P>
   Analyze -F should fix this by synchronizing the actual number of
   children with the number that is in the header.

<P><LI>"Found a 'COMMENT' record in file &lt;file name such as 'jogaaaaa'&gt; at
   position 33818" errors are usually caused by orphaned comments.
<P>
   Cause:
<P>
   Visual SourceSafe sequentially writes data to its log files. An example
   of how you might have extraneous information would be if you add a file
   and supply a comment at the time of the Add. Later, go to Properties for
   that file and change the comment. Now both comments are stored in the
   data file. However, you will never be able to access the first comment
   from SourceSafe again.
<P>
   NOTE: The number 33818 used in the error example above indicates that
   the comment starts at bit 33818 from the beginning of the file.
<P>
   Steps to Resolve:
<P>
   Analyze -c should fix this error. The -c switch allows Analyze to
   compress free space that may exist in data files and thereby release
   disk space. However, this process is considerably slower and should not
   be run on a frequent basis. So, if you run Analyze with -c and it
   discovers two comments for a file, it rewrites the data file and leaves
   out the older comment. While this switch can reduce the size of the
   database in some cases, it usually does not make a significant
   difference.
<P>

<P><LI>"Found a 'DIFF' record in file &lt;file name such as 'jogaaaaa'&gt; at
   position 33818".
<P>
   Cause:
<P>
   Analyze returns this error because a DIFF chain has been found but
   cannot be associated with a log record in the file in which it was
   found.
<P>
   A DIFF chain is made up of DIFF chunks that are ADD, CHANGE, or REMOVE
   records. For example, if a file that contains only "Hello world" is
   checked out and modified by adding "Bye world" and then checked back in
   that ADD creates a DIFF chain.
<P>
   The number 33818 used in the error example above indicates that the DIFF
   chain starts at position 33818 from the beginning of the file.
<P>
   Steps to Resolve:
<P>
   Analyze -c may fix this error. The -c switch allows Analyze to compress
   unused comments that may exist in log files and thereby release disk
   space. However, this process is considerably slower and should not be
   run on a frequent basis. So, if you run Analyze with -c and it discovers
   two comments for a file, it rewrites the data file and leaves out the
   older comment. While this switch can reduce the size of the database in
   some cases, it usually does not make a significant difference.
<P>
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the switches used with Analyze, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../SSAFE/Q139566.htm">Q139566</A></B>
   TITLE     : SAMPLE: Analyze5.Exe Utility for Visual SourceSafe
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: mapping<BR>
Keywords          : ssdb vbwin vss kberrmsg<BR>
Version           : WINNT:4.0,5.0;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 11, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

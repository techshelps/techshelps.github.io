

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Get History Using SourceSafe OLE Automation in C++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q169927">
<META NAME="KBModify" CONTENT="1997/06/12">
<META NAME="KBCreate" CONTENT="1997/06/11">
<META NAME="Keywords" CONTENT="ssusage">
<META NAME="KBArea" CONTENT="Support; KB; ssafe">
<META NAME="Description" CONTENT="  The sample code in this article, along with the description of the structures and functions used, provides a guide to retrieving a collection of SourceSafe items and getting the history for these items. The sample code is written in C++.  MORE INFO...">
<META NAME="Product" CONTENT="Visual SourceSafe">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QDML,QAO2,QAO3,QAW6,QAI4,QA9Q,QAUD,QAMB,QBE7,QBE6,QA2K,QBFY,QBBS,QA6A V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Get History Using SourceSafe OLE Automation in C++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 12, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q169927</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual SourceSafe, 32-bit, for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code in this article, along with the description of the
structures and functions used, provides a guide to retrieving a collection
of SourceSafe items and getting the history for these items. The sample
code is written in C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The SourceSafe Object Model contains 7 objects. The top-most of these
objects is the VSSDatabase object. The first step in any SourceSafe OLE
Automation client is to make a connection to a VSSDatabase pointer through
the IClassFactory interface. This article assumes that there is already a
pointer to the VSSDatabase object. For more information about getting a
VSSDatabase pointer, please see the following Knowledge Base article:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../SSAFE/Q169928.htm">Q169928</A></B>
   TITLE     : HOWTO: Open a SourceSafe Database with OLE Automation in C++

</PRE>There are several operations available from the VSSItem object that produce
collections. The Items property returns a collection of all children
associated with a VSSItem, this is useful for listing all the children of a
SourceSafe Project. The Checkouts property returns a collection of all
checkouts on a file in Sourcesafe.
<P>
The method discussed in this article is the Versions method, which returns
a collection of Version objects. These represent old versions, labels and
other actions that have been applied to the file or project in SourceSafe
during its lifetime.
<P>
Once you have a pointer to a valid IVSSItem, call the get_Versions method.
get_Versions requires a long integer containing a number representing flag
values, and a pointer to a pointer to an IVSSVersions object.
<P>
Call the _NewEnum method from pointer to IVSSVersions passing a pointer to
an LPUNKNOWN. Then QueryInterface on the LPUNKNOWN for an IEnumVARIANT
interface. The IEnumVARIANT Interface supports Next, Skip, and Reset
methods. Using the Next Method within a while loop allows you to retrieve
each version within the collection using the punkVal property to get a
pointer to IUnknown.
<P>
<P><h3>Sample Code</h3>
 
<P>
The following sample code illustrates this:
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;ocidl.h&gt;
   #include &lt;stdio.h&gt;
   #include "ssauto.h"
   void ListVersions( IVSSDatabase* db, LPCSTR path )
   {
     BSTR bstrval;
     char lpbuf[200];
     char lpbuf2[200];

     IVSSItem     *vssi;
     IVSSVersion  *vers;
     IVSSVersions *vx;
     LPUNKNOWN    lpunk;
     IEnumVARIANT *ppvobj;
     VARIANT      st;
     OLECHAR*     svalue;
     BSTR         bstrValue;
     int          x;
     ULONG        fetched;
     long         lvnum;


     if( (x = MultiByteToWideChar(CP_ACP, 0, path, -1, svalue, 0 )) != 1)
     {
       svalue = new OLECHAR[x];
       if( MultiByteToWideChar(CP_ACP, 0, path, -1, svalue, x ) == 0 )
         MessageBox(NULL, "Error in Conversion", "Multibytetowide", MB_OK);
     }
     else
       svalue = L"";

     bstrValue = SysAllocString(svalue);

     if( S_OK == db-&gt;get_VSSItem(bstrValue, FALSE, &amp;vssi) )
     {
       if( S_OK == vssi-&gt;get_Versions( 0l, &amp;vx ) )
       {
         if( S_OK == vx-&gt;_NewEnum(&amp;lpunk) )
         {
           if(!FAILED(lpunk-&gt;
             QueryInterface(IID_IEnumVARIANT, (void**)&amp;ppvobj)))
           {
             vssi-&gt;get_Spec( &amp;bstrval );
             x = WideCharToMultiByte( CP_ACP, 0, (LPCWSTR)bstrval, -1,
               lpbuf, sizeof(lpbuf), NULL, NULL );
             printf("History of: %s\n", lpbuf );
             printf("ACTION   USER NAME   VERSION NUMBER\n");

             do
             {
               ppvobj-&gt;Next( 1UL, &amp;st, &amp;fetched );
               if( fetched != 0 )
               {
                 if(!FAILED(st.punkVal-&gt;
                   QueryInterface(IID_IVSSVersion,(void**)&amp;vers)))
                 {
                   vers-&gt;get_Action( &amp;bstrval );
                   WideCharToMultiByte( CP_ACP, 0, (LPCWSTR)bstrval, -1,
                     lpbuf, sizeof(lpbuf), NULL, NULL );
                   vers-&gt;get_Username( &amp;bstrval );
                   WideCharToMultiByte( CP_ACP, 0, (LPCWSTR)bstrval, -1,
                     lpbuf2, sizeof( lpbuf2 ), NULL, NULL );
                   vers-&gt;get_VersionNumber( &amp;lvnum );
                   printf("%s  %s  %ld\n", lpbuf, lpbuf2, lvnum );

                   vers-&gt;Release();
                 }
                 st.punkVal-&gt;Release();
               }
             } while( fetched != 0 );
             ppvobj-&gt;Release();
           }
           lpunk-&gt;Release();
         }
         vx-&gt;Release();
       }
       vssi-&gt;Release();
     }
     SysFreeString(bstrValue);
   }

</PRE><h2>REFERENCES</h2>
 
<P>
TITLE: IClassFactory
<PRE>  URL: mk:@ivt:pdobj/native/activex/src/if_a2e_68.htm

</PRE>TITLE: IEnumVARIANT Interface
<PRE>  URL: mk:@ivt:pdobj/native/sdk/ole/auto/src/chap5_18.htm

</PRE>TITLE: Visual SourceSafe OLE Automation
<PRE>  URL: <B><A HREF="http://www.microsoft.com/SSAFE/download/oleauto.doc">http://www.microsoft.com/SSAFE/download/oleauto.doc</A></B>

</PRE>The header file ssauto.h can be downloaded from
<B><A HREF="http://www.microsoft.com/SSAFE/download/ssauto.h">http://www.microsoft.com/SSAFE/download/ssauto.h.</A></B>
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : ssusage<BR>
Version             : 5.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 12, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

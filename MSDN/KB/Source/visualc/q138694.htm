

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Using CSocket w/ CArchive Causes Block from Extra FD_READ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138694">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/10/25">
<META NAME="Keywords" CONTENT="MfcSockets vcbuglist400 vcfixlist420 kbbuglist kbfixlist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using a CArchive object with a CSocket can cause an extra FD_READ notification to be posted when no data is pending. This happens when a block of data is received through the extraction operator ('&gt;&gt;') or CArchive::Read that is larger than the curr...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAHT,QAIF,QAYY,QABI,QAR4,QAHC,QAXC,QBFY,QBFN,QA56,QA55,QAY2,QAW6,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Using CSocket w/ CArchive Causes Block from Extra FD_READ</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138694</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   - Microsoft Visual C++ for Windows, versions 1.52, 1.52b
   - Microsoft Visual C++, 32-bit Editions, versions 2.1, 2.2,
<P><PRE>     4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using a CArchive object with a CSocket can cause an extra FD_READ
notification to be posted when no data is pending. This happens when a
block of data is received through the extraction operator ('&gt;&gt;') or
CArchive::Read that is larger than the current buffer size of the CArchive
object.
<P>
This can cause OnReceive to be called when no data is present, which will
cause the application to hang indefinitely if a subsequent call to Receive
is made.
<P>
<P><h2>CAUSE</h2>
 
<P>
The CArchive class automatically buffers data reads and writes. If a call
is made to retrieve a block of data larger than the CArchive object's
buffer size, then the CArchive class will make two calls to retrieve the
data in buffer-size blocks.
<P>
When CSocket is used, the end result is two calls to the Receive function.
The first call to Receive does not retrieve all of the data currently in
the socket's buffer, so the Windows Sockets DLL posts an additional FD_READ
notification after this first call. Although the second call to Receive
might get the rest of the data from the buffer, the FD_READ notification
has already been posted and OnReceive will end up being called later even
though there is no data left to read on the socket.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Make sure there is data in the socket's buffer using CAsyncSocket::IOCtl()
before attempting to receive.
<P>
<PRE>void CMySocket::OnReceive(int nErrorCode)
</PRE>{
<PRE>  // TODO: Do some error handling on nErrorCode

  DWORD dwBytes;
  VERIFY(IOCtl(FIONREAD, &amp;dwBytes));
  if (0 == dwBytes) // if nothing to read, return
    return;

  do
  {

    // Read your data from your CArchive object

    CString strData;
    m_pMyArchive &gt;&gt; strData;

  } while(!m_pMyArchive-&gt;IsBufferEmpty());
</PRE>}
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was fixed in Visual C++ version
4.2.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On-line:
<P>
<PRE>   MFC Encyclopedia Articles:
      "Windows Sockets: Using Sockets with Archives"

   Win32 Programmer's Reference Documentation on the function:
      WSAAsyncSelect
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 2.52 2.52b 3.10 3.20<BR>
Keywords          : MfcSockets vcbuglist400 vcfixlist420 kbbuglist kbfixlist<BR>
Technology        : kbMfc<BR>
Version           : 1.52 1.52b 2.1 2.2 4.0 4.1<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbbug<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

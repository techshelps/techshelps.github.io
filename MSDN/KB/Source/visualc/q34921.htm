

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: jmp_buf Pointer Type is "void *" </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q34921 ">
<META NAME="KBModify" CONTENT="1997/10/01">
<META NAME="KBCreate" CONTENT="1988/08/27">
<META NAME="Keywords" CONTENT="CRTIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The setjmp() and longjmp() functions accept a parameter of type jmp_buf. (The jmp_buf type is declared in SETJMP.H.) If you use the address of (*) operator with a variable of type jmp_buf and assign it to a jmp_buf pointer, Microsoft C 5.1 generate...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAH4,QAO3,QAO2,QBFY,QAP2,QBVV,QAJQ,QA4Q,QAY5,QAH7,QAC2,QBWP,QAYV,QAOT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: jmp_buf Pointer Type is "void *"</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q34921 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The setjmp() and longjmp() functions accept a parameter of type
jmp_buf. (The jmp_buf type is declared in SETJMP.H.) If you use the
address of (&amp;) operator with a variable of type jmp_buf and assign it
to a jmp_buf pointer, Microsoft C 5.1 generates the following
messages:
<P>
<PRE>   warning C4046: '&amp;' on function/array, ignored
   warning C4047: '=' : different levels of indirection

</PRE>If you omit the address of operator and assign the value to a pointer
of type jmp_buf, the compilers listed in the banner above generate the
following message:
<P>
<PRE>   warning C4047: '=' : different levels of indirection

</PRE>To address this situation, declare the pointer to have type "void *."
Then assign the value to the pointer without using the ampersand, as
the code example below demonstrates.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Because the SETJMP.H header file declares the jmp_buf type as an array
of integers, the compiler generates the messages above when you use
the address of operator. SETJMP.H uses an array type instead of a
structure to be compatible with common C coding practices; section 4.6
of the "Rationale for the ANSI C Standard" provides additional
information.
<P>
Basically, the setjmp() function changes the jmp_buf parameter to
record the destination for the longjmp() function. Elsewhere, the
standard defines setjmp() to accept a parameter of type jmp_buf, not
of type "pointer to jmp_buf." Therefore, jmp_buf cannot be a
structure; structures are passed by value and setjmp() could not make
the necessary changes. Because an array is passed by reference (that
is, by its address), setjmp() can make the necessary changes to an
array parameter.
<P>
The declaration for badptr in the code example below declares it to be
of type "pointer to array of integer," not "pointer to integer."
Performing an assignment between different pointer types generates the
C4047 warning. (To succeed without warning, badptr must be a "pointer
to integer," because that type is compatible with "array of integer.")
<P>
Instead, the code uses goodptr, declared as a "pointer to void," which
supports the assignment without generating a warning. The code that
uses goodptr is portable. Note that void pointers to not support
indirection or subscripting (another form of indirection).
<P>
However, because your code does not know the contents of the jump
buffer, this should not be a problem. (The contents of the jump buffer
are implementation dependent and can vary between versions of the same
compiler. Any code that directly manipulates the contents of a jump
buffer is also implementation dependent and not portable.)
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
    * Compiler options needed: none
    */

   #include &lt;setjmp.h&gt;

   jmp_buf buf;
   jmp_buf *badptr;
   void *goodptr;

   void main()
   {
      badptr = &amp;buf;
         /*  C 5.1 warning C4046: '&amp;' on function/array, ignored      */
         /*  C 5.1 warning C4047: '=' different levels of indirection */

      badptr = buf;
         /*  warning C4047: '=' : different levels of indirection */

      goodptr = buf;
   }
</PRE> 
<PRE>Keywords          : CRTIss kbfasttip
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0; OS/2:6.0,6.00a;  WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,2.1,4.0,5.0
Platform          : MS-DOS NT OS/2 WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

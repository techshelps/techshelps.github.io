

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Exception Not Caught Using CArchive or CFile </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157073">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1996/10/04">
<META NAME="Keywords" CONTENT="MfcFileIO kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When using CArchive or CFile, Visual C++ exceptions may not be caught if the CArchive and/or CFile are in the same try block as a read or write:     void Test1()    {         try {            //Drive A: should contain a floppy with zero bytes free ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABN,QA1O,QAGB,QBCF,QAJQ,QA2X,QAUR,QAHC,QDOX,QDIJ,QBVV,QBCT,QAGC,QAEF,QBFD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Exception Not Caught Using CArchive or CFile</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157073</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 2.20 4.00 4.10 4.20
WINDOWS NT
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   Microsoft Visual C++, 32-bit Edition, 2.0, 2.1, 2.2, 4.0, 4.1, 4.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using CArchive or CFile, Visual C++ exceptions may not be caught if
the CArchive and/or CFile are in the same try block as a read or write:
<P>
<PRE>   void Test1()
   {
        try {
           //Drive A: should contain a floppy with zero bytes free
           CFile file("A:\\BadFile.tmp", CFile::modeCreate
                      | CFile::shareExclusive | CFile::modeWrite );

           try {
               CArchive archive(&amp;file, CArchive::store);
               //Fill up disk, and cause a
               //CFileException::diskFull exception
               while(1)
                   archive &lt;&lt; (DWORD)17;
           }
           catch ( CFileException* ex ) {
               ex-&gt;Delete();
           }
           catch (...) {
               ASSERT(FALSE);
           }
       }
       catch ( CFileException* ex ) {
           ex-&gt;Delete();
       }
       catch (...){
           ASSERT(FALSE);
       }
   }

</PRE>In this case, if the disk is full, the exception is not caught, terminate()
is called, and the application exits.
<P>
<P><h2>CAUSE</h2>
 
<P>
In the process of handling exceptions, objects inside the try block are
destructed before the first catch block. During unwinding, when a second
exception is thrown by a destructor before the first exception is caught,
terminate() is called.
<P>
Both the destructors for CArchive and CFile attempt to flush the buffer and
close the open file. This can cause a second exception to get thrown and
terminate() to get called.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Make sure that the CArchive or CFile object is not inside the same try
block as any read or write on that object.
<P>
The CArchive object should also not be inside of the same try block as the
CFile object it uses unless the CArchive was created in the
CArchive::bNoFlushOnDelete mode. If this mode is used, the CArchive and
CFile can safely be in the same try block. Care must be taken to call
CArchive::Flush() before the CArchive is deleted, and in a separate try
block. The second example below shows using a CArchive in this mode.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This is a behavior of Visual C++ exception handling and did not occur with
earlier versions of MFC, which did not use C++ exception handling.
<P>
<P><h3>Sample Code</h3>
 
<P>
<P><h3>Example 1</h3>
 
<P>
<PRE>   // This example shows placing CFile, CArchive, and writes in separate
   // try blocks

   /* Compile options needed: default AppWizard application
   */

   void Test2()
   {
       try {
           //Drive A: should contain a floppy with zero bytes free
           CFile file("A:\\BadFile.tmp", CFile::modeCreate
                      | CFile::shareExclusive | CFile::modeWrite );
           try {
               CArchive archive(&amp;file, CArchive::store);
               try {

                   //Fill up disk, and cause a
                   // CFileException::diskFull exception
                   while(1)
                       archive &lt;&lt; (DWORD)17;

               }
               catch ( CFileException* ex ) {
                   archive.Abort();
                   ex-&gt;Delete();
               }
               catch (...){
                   ASSERT(FALSE);
               }
           }
           catch ( CFileException* ex ) {
               file.Abort();
               ex-&gt;Delete();
           }
           catch (...){
                ASSERT(FALSE);
           }
       }
       catch ( CFileException* ex ) {
           ex-&gt;Delete();
       }
       catch (...){
           ASSERT(FALSE);

       }
   }

</PRE><h3>Example 2</h3>
 
<P>
<PRE>   // This example uses CArchive::bNoFlushOnDelete so that CFile and
   // CArchive can be placed in the same try block.

   /* Compile options needed: default AppWizard application
   */

   void Test3()
   {
        try {
           //Drive A: should contain a floppy with zero bytes free
           CFile file("A:\\BadFile.tmp",
               CFile::modeCreate | CFile::shareExclusive
                           | CFile::modeWrite );
           CArchive archive(&amp;file,
               CArchive::store | CArchive::bNoFlushOnDelete);
           try {

               //Fill up disk, and cause a CFileException::diskFull
               //exception
               while(1)
                   archive &lt;&lt; (DWORD)17;

               //Manually flush archive in try-block
               archive.Flush();
           }
           catch ( CFileException* ex ) {
               archive.Abort();
               ex-&gt;Delete();
           }
           catch (...){
               ASSERT(FALSE);
           }
       }
       catch ( CFileException* ex ) {
           ex-&gt;Delete();
       }
       catch (...){
           ASSERT(FALSE);
       }
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 2.20 4.00 4.10 4.20 kbdsd CArchive<BR>
CFile<BR>
Exception<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcFileIO<BR>
Keywords            : MfcFileIO kbprb kbprg<BR>
Technology          : kbMfc<BR>
Version             : 2.00 2.10 2.20 4.00 4.10 4.20<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

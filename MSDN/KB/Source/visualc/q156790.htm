

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the operator == and operato </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156790">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/09/30">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the operator== and operator  STL functions for the deque container class in Visual C++.  MORE INFORMATION  Required Header               Prototype ---------     template                          bool ope...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANY,QBFY,QAKM,QA6A,QAK9,QABC,QAY5,QA36,QBV8,QAW6,QAPF,QAJQ,QAH4,QAG7,QABO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the operator == and operato</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156790</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the operator== and operator&lt;
STL functions for the deque container class in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt; deque&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class T, class A&gt;
       bool operator==(
           const deque &lt;T, A&gt;&amp; lhs,
           const deque &lt;T, A&gt;&amp; rhs);

   template&lt;class T, class A&gt;
       bool operator&lt;(
           const deque &lt;T, A&gt;&amp; lhs,
           const deque &lt;T, A&gt;&amp; rhs);

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The first template function overloads operator== to compare two objects of
template class deque. The function returns:
<P>
<PRE>   lhs.size() == rhs.size() &amp;&amp; equal(lhs. begin(), lhs. end(),
   rhs.begin()).

</PRE>For equality, the number of elements must be equal in both the deque
objects.
<P>
The second template function overloads operator&lt; to compare two objects of
template class deque. The function returns:
<P>
<PRE>   lexicographical_compare(lhs. begin(), lhs. end(), rhs.begin(),
   rhs.end()).

</PRE>Because lexicographic (as in a dictionary) compare is used, the number of
elements does not matter while using operator&lt;. In the sample code, adding
a line of code while creating the b object, such as b.push_front('D');,
will make b greater than a.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   //////////////////////////////////////////////////////////////////////
   //
   // Compile options needed: -GX
   //
   // deque.cpp :
   //
   // Functions:
   //
   //    ==
   //    &lt;
   //
   // Written by Bobby Mattappally
   // of Microsoft Product Support Services,
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   //////////////////////////////////////////////////////////////////////

   /* Compile options needed:-GX
   */
   #include &lt;iostream&gt;
   #include &lt;deque&gt;

   typedef deque&lt;char, allocator&lt;char&gt; &gt;  CHARDEQUE;
   void print_contents (CHARDEQUE  deque, char*);

   void main()
   {
       //create a  with  3 A's
       CHARDEQUE  a(3,'A');
       a.push_front('C');

       //create b with 4 B's.
       CHARDEQUE  b(6,'B');

       //print out the contents
       print_contents (a,"a");
       print_contents (b,"b");

       //compare a and b
       if (a==b)
           cout &lt;&lt;"a is equal to b"&lt;&lt;endl;
       else if(a&lt;b)
               cout &lt;&lt;"a is less than b"&lt;&lt;endl;
       else
           cout &lt;&lt;"a is greater than b" &lt;&lt;endl;

       //assign the contents of b to a
       a.assign(b.begin(),b.end());
       print_contents (a,"a");
       print_contents (b,"b");

       //compare a and b again
       if (a==b)
           cout &lt;&lt;"a is equal to b"&lt;&lt;endl;
       else if(a&lt;b)
               cout &lt;&lt;"a is less than b"&lt;&lt;endl;
       else
           cout &lt;&lt;"a is greater than b" &lt;&lt;endl;

   }

   //function to print the contents of deque
   void print_contents (CHARDEQUE  deque, char *name)
   {
       CHARDEQUE::iterator pdeque;

       cout &lt;&lt;"The contents of "&lt;&lt; name &lt;&lt;" : ";

           for(pdeque = deque.begin();
           pdeque != deque.end();
           pdeque++)
       {
           cout &lt;&lt; *pdeque &lt;&lt;" " ;
       }
           cout&lt;&lt;endl;
   }

</PRE>Program output is:
<P>
<PRE>   The contents of a : C A A A
   The contents of b : B B B B B B
   a is greater than b
   The contents of a : B B B B B B
   The contents of b : B B B B B B
   a is equal to b

</PRE><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample deque == &lt;<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Pass Common C Types to MASM by Reference </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q103725">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1993/08/29">
<META NAME="Keywords" CONTENT="CLngIss MASMLngIss kbcode kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below demonstrates how to pass variables of type char, short, and long from a Microsoft C program to a Microsoft Macro Assembler (MASM) program by reference.  MORE INFORMATION  The samples below include one C file and three differen...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAYL,QAD7,QAH7,QAH6,QASR,QAPF,QAH4,QBWP,QAC2,QAYA,QA6E,QAR5,QA2S,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Pass Common C Types to MASM by Reference</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q103725</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 5.1a, 6.0, 6.0a, 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below demonstrates how to pass variables of type char,
short, and long from a Microsoft C program to a Microsoft Macro
Assembler (MASM) program by reference.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The samples below include one C file and three different assembly
files. The three assembly files demonstrate how to pass variables by
reference in small and large model for MS-DOS and in flat model for
Windows NT. Link only the appropriate assembly module to the C module.
<P>
Note that MASM 6.1 or later and the C/C++ version 8.0 32-bit compiler
that ships with Visual C++, 32-bit Edition, are required to build the
flat model Windows NT version.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // Filename: CMAIN.C
   // Compile options needed: /c (and /AL for large model)

   #include &lt;stdio.h&gt;
   extern void  MasmSub (char *, short *, long *);

   char charvar = 'a';
   short shortvar = 1;
   long longvar = 32768L;

   void main (void)
   {
      printf ("%c %d %ld\n", charvar, shortvar, longvar);
      MasmSub (&amp;charvar, &amp;shortvar, &amp;longvar);
      printf ("%c %d %ld", charvar, shortvar, longvar);
   }

</PRE><h3>Sample Code for MS-DOS Small Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for MASM: /MX
   ; Assemble options needed for ML: /c /Cx

   .MODEL small, C      ;.MODEL ... C tells the assembler that
   .286                ; parameters are pushed from right to left.
   .CODE

   MasmSub PROC uses si, \
      pchar:PTR, \
      pshort:PTR, \
      plong:PTR

      mov si, pchar      ;Load SI with the address of the char variable.
      mov BYTE PTR [si], "z"
      mov si, pshort      ;Load SI with the address of the short variable.
      add WORD PTR [si], 9
      mov si, plong      ;Load SI with the address of the long variable.
      add WORD PTR [si], 1  ;Increment the low word of the long variable
                            ;by 1.
      adc WORD PTR [si+2],0 ;Increment the high word.
      ret
   MasmSub ENDP
   END

</PRE><h3>Sample Code for MS-DOS Large Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for MASM: /MX
   ; Assemble options needed for ML: /c /Cx

   .MODEL large, C      ;.MODEL ... C tells the assembler that
   .286                ; parameters are pushed from right to left.
   .CODE

   MasmSub PROC uses es si, \
      pchar:PTR, \
      pshort:PTR, \
      plong:PTR

      les si, pchar      ;Load ES:SI with the address of the char variable.
      mov BYTE PTR es:[si], "z"
      les si, pshort      ;Load ES:SI with the address of the short
                          ;variable.
      add WORD PTR es:[si], 9
      les si, plong      ;Load ES:SI with the address of the long variable.
      add WORD PTR [si], 1  ;Increment the low word of the long variable
                            ;by 1.
      adc WORD PTR [si+2],0 ;Increment the high word.
      ret
   MasmSub ENDP
   END

</PRE><h3>Sample Code for Windows NT Flat Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for ML: /c /Cx /coff

   .386                ;.MODEL ... C tells the assembler that
   .MODEL flat, C      ; parameters are pushed from right to left.
   .CODE

   MasmSub PROC uses esi, \
      pchar:PTR, \
      pshort:PTR, \
      plong:PTR

      mov esi, pchar      ;Load ESI with the address of the char variable.
      mov BYTE PTR [esi], "z"
      mov esi, pshort      ;Load ESI with the address of the short
                           ;variable.
      add WORD PTR [esi], 9
      mov esi, plong      ;Load ESI with the address of the long variable.
      inc DWORD PTR [esi]      ;Increment the long variable by 1.
      ret
   MasmSub ENDP
   END

</PRE>The following is the output of the program:
<P>
<PRE>  a 1 32768
  z 10 32769
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 9.00 mixed language<BR>
Keywords          : CLngIss MASMLngIss kbcode kbfasttip<BR>
Version           : MS-DOS:6.0,6.0a,6.0ax,7.0; OS/2:6.0,6.0a; WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,4.0,5.0<BR>
Platform          : MS-DOS NT OS/2 WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

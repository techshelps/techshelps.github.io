

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: A _USRDLL with No CWinApp Object Fails to Load </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115088">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1994/05/18">
<META NAME="Keywords" CONTENT="MfcDLL kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  If you build an MFC _USRDLL using Visual C++, version 1.0, without defining a CWinApp object, when its LibMain() function is called you will get the following message in the debugger Output Window:                          : File appcore.cpp, Line ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBWP,QAUD,QAPN,QAH4,QAW6,QAIF,QBFY,QBC9,QBC8,QANO,QA56,QA55,QA01,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: A _USRDLL with No CWinApp Object Fails to Load</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115088</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 | 1.00 4.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P>
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5,
<P><PRE>     1.51 and 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, and 4.0
</PRE><P>
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If you build an MFC _USRDLL using Visual C++, version 1.0, without defining
a CWinApp object, when its LibMain() function is called you will get the
following message in the debugger Output Window:
<P>
<PRE>   &lt;unknown application&gt;: File appcore.cpp, Line 602, Assertion Failed!
   AfxAbort called

</PRE>If you are using Visual C++, version 1.0 for Windows NT, you will get the
following message box when DllMain() is called:
<P>
<PRE>   &lt;unknown application&gt;: File appcore.cpp, Line 559, Assertion Failed!

</PRE>If you are using Visual C++, version 1.5, you will get the following
message when LibMain() is called:
<P>
<PRE>   &lt;unknown application&gt;: File afxwin1.inl, Line 25, Assertion Failed!
   AfxAbort called

</PRE>If you are running a Windows-based application, the call to LibMain() will
fail without warning, unless you are running under the debugger. Under
Windows NT, you will get the warning shown previously when calling
DllMain() (if you are running a debug version of your DLL), followed by
message boxes from the system stating that the application caused a
problem.
<P>
In order to support resource-only DLLs, the assertions described above were
removed in Microsoft Visual C++ 32-bit Edition, versions 2.0, 2.1, 2.2, and
4.0. Using those versions, calling a CWinApp member function through the
pointer returned by AfxGetApp() will result in an access violation if there
is no CWinApp object defined in the DLL.
<P>
<P><h2>CAUSE</h2>
 
<P>
When an attempt is made to load a DLL for the first time, the DLL’s entry
point (LibMain() for Windows, DllMain() for Windows NT) is called to
initialize its instance. For a _USRDLL, the entry point calls AfxWinInit(),
which calls AfxGetApp(). If no CWinApp object has been instantiated in the
DLL, AfxGetApp() returns "NULL". AfxGetApp() cannot access the calling
application's CWinApp (if the calling application is an MFC application).
This causes the assertion.
<P>
This behavior is by design, because most of the classes provided by MFC
rely on the instantiation of a CWinApp object. Even some simple objects
such as an AfxMessageBox make calls to AfxGetApp(). If no CWinApp object
exists [and your DLL uses any GUI objects that rely on calls to
AfxWinInit() and AfxWinTerm()], assertions and program failures will occur.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Be sure to instantiate an object of type CWinApp or a class derived from
CWinApp. If it is important that you not have a CWinApp object in your
_USRDLL, see the "MORE INFORMATION" section of this article, below, for
suggestions.
<P>
NOTE: Visual C++ 4.0 automatically generates the code containing the
declaration, definition, and instantiation of the CWinApp derived class for
the DLL, so the following sections do not apply.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
It is not necessary for your DLL to call AfxWinInit() and AfxWinTerm() for
it to use the MFC collection classes and the simple class types such as
CString. If you wish to use only these MFC classes in your DLL, you can
omit the instantiation of a CWinApp object, but you also must write your
own LibMain() or DllMain() function for the DLL.
<P>
For an example of the code that you may want to include in your entry
point, you can look at what MFC normally does in AfxWinInit().
<P>
NOTE: SetCurrentHandles() is called, so afxCurrentInstanceHandle and
afxCurrentResourceHandle get set equal to m_hInstance. You may need to set
these values yourself.
<P>
<P><h3>Sample Code for Windows</h3>
 
<P>
The code below shows one possible implementation of LibMain(). For the sake
of pointing out the initialization portion, LibMain() calls MyInit(), which
consists of a very simplified simulation of AfxWinInit().
<P>
<PRE>   // Compile options needed: /D "_USRDLL"

   #include &lt;afxwin.h&gt;

   BOOL AFXAPI MyInit(HINSTANCE);

   extern "C" int FAR PASCAL LibMain(HINSTANCE hInstance,
      WORD wDataSegment, WORD wHeapSize, LPSTR lpszCmdLine)
   {
      // Initialize DLL's instance(/module) not the app's
      if (!MyInit(hInstance))
      {
         return 0;    // Init Failed
      }

   // nothing to run
      return 1;   // ok
   }

   BOOL AFXAPI MyInit(HINSTANCE hInstance)
   {
      afxCurrentInstanceHandle = hInstance;
      afxCurrentResourceHandle = hInstance;

   // one instance initialization stuff goes here

   // Handle critical errors
      ::SetErrorMode(SEM_FAILCRITICALERRORS);

      return TRUE;
   }

</PRE><h3>Sample Code for Windows NT</h3>
 
<P>
The code below shows one possible implementation of DllMain(). For the sake
of pointing out the initialization portion, DllMain() calls MyInit(), which
consists of a very simplified simulation of AfxWinInit().
<P>
<PRE>   // Compile options needed: /D "_USRDLL"

   #include &lt;afxwin.h&gt;

   BOOL AFXAPI MyInit(HINSTANCE);

   extern "C" int APIENTRY
   DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)
   {
           if (dwReason == DLL_PROCESS_ATTACH)
           {
                   // Initialize DLL's instance(/module) not the app's
                   if (!MyInit(hInstance))
                   {
                           return 0;       // Init Failed
                   }

           }
           return 1;   // ok
   }

   BOOL AFXAPI MyInit(HINSTANCE hInstance)
   {
           afxCurrentInstanceHandle = hInstance;
           afxCurrentResourceHandle = hInstance;

           // one instance initialization stuff goes here

           // Handle critical errors
           ::SetErrorMode(SEM_FAILCRITICALERRORS);

           return TRUE;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 2.50 4.00<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcDLL<BR>
Keywords          : MfcDLL kbprb kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 | 1.00 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

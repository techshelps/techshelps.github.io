

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Undesired Side Effects from toascii, tolower, toupper </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98588 ">
<META NAME="KBModify" CONTENT="1997/08/26">
<META NAME="KBCreate" CONTENT="1993/05/10">
<META NAME="Keywords" CONTENT="CRTIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In an application compiled with Microsoft C/C++, using the toascii, tolower, or toupper macros with a pointer value produces incorrect results, such as corrupted strings or a GP fault, depending on which compiler you use.  CAUSE =====  Because the ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBFY,QBE7,QBE6,QAPN,QAL3,QATX,QAEF,QAHE,QAY5,QAY2,QAO3,QAO2,QAOT,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Undesired Side Effects from toascii, tolower, toupper</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98588 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 4.1,
<P><PRE>     4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In an application compiled with Microsoft C/C++, using the toascii,
tolower, or toupper macros with a pointer value produces incorrect
results, such as corrupted strings or a GP fault, depending on which
compiler you use.
<P>
<P><h2>CAUSE</h2>
 
<P>
Because the tolower and toupper macros evaluate the input argument
twice, the compiler performs any pointer arithmetic specified in a
macro argument twice. This problem occurs most often with macros
that affect an individual character because character pointers are
common arguments for these macros.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The text below presents two methods to address the behavior the
side effects cause.

<OL><P><LI>Modify the code to remove the pointer arithmetic expression from
   the macro argument. In the code fragment below, because the
   argument to the toupper macro does not change, the side effect
   does not occur when the macro evaluates the argument a second
   time.
<P>
<P><PRE>     while (*x != '\0')
<PRE></PRE>        {
        *x = (char) toupper((int) *x);
        x++;
        }

</PRE><P><LI>The compiler provides more than one implementation for some
   functions. For example, to use a different implementation of the
   tolower or toupper function, perform the following three steps:
<P>
   a. Specify the /Za option (ANSI compatibility) on the compiler
<P><PRE>      command line.
</PRE><P>
   b. Use the _tolower() or _toupper() functions in place of the
<P><PRE>      tolower or toupper macros.
</PRE><P>
   c. After including the &lt;ctype.h&gt; file in your application source
<P><PRE>      code, use the #undef tolower or #undef toupper statement to
      remove the macro definition from the code.
</PRE><P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
    * Compile options needed: none
    */

   #include &lt;stdio.h&gt;
   #include &lt;ctype.h&gt;

   char string[20]="this is a string";

   void main(void)
   {
      char *x;

      x = string;
      while (*x != '\0')
         *x = (char)toupper((int) *(x++));
      printf("%s\n", string);
   }

</PRE></OL>The sample code above may produce the following output:
<P>
<PRE>   thHssiI    ttiIgg
</PRE> 
<PRE>Keywords          : CRTIss
Version           : 6.0 6.0a 6.0ax 7.0 1.0 1.5 1.51 2.0 2.1 4.0 4.1 4.2 5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: View the Call Stack After an MFC ASSERT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108112">
<META NAME="KBModify" CONTENT="1997/10/08">
<META NAME="KBCreate" CONTENT="1993/12/05">
<META NAME="Keywords" CONTENT="MfcMisc kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When debugging an application using the Microsoft Foundation Classes (MFC), incorrect code may cause an ASSERT to be hit in either the developer's code or the MFC libraries. Although the ASSERT gives the file and line number it is located at, deter...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAH4,QBFY,QBXS,QAIF,QA56,QA55,QBWS,QBC9,QBC8,QANO,QABH,QBXT,QBV8,QA5V V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: View the Call Stack After an MFC ASSERT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108112</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++ 32-bit Edition, version 1.0, 2.0, 2.1, 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When debugging an application using the Microsoft Foundation Classes (MFC),
incorrect code may cause an ASSERT to be hit in either the developer's code
or the MFC libraries. Although the ASSERT gives the file and line number it
is located at, determining how the code got to the assertion is often more
important. This can be done by examining the call stack after the ASSERT is
hit.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An ASSERT gives you three choices: Abort, Retry, or Ignore. Choosing Abort
aborts the program; choosing Ignore ignores the assertion and continues.
Neither of these two choices activates a debugger, so there is no way to
examine the call stack.
<P>
If you are running underneath a debugger and choose Retry, an Interrupt 3
embedded in your source code will cause a break, which activates the
debugger. The debugger will also be activated if you are using Visual C++,
32-bit Edition, version 2.0 or later, and have enabled Just-in-Time
debugging. Now, you can examine the call stack. In the Visual C++ IDE
debugger, you can do this by choosing the Show Call Stack option on the
Debug menu, or by pressing CTRL+K (in Visual C++ version 4.0, press ALT+7).
At this point, you can jump quickly to the offending source line by
choosing OK at the INT 3 dialog box and then pressing SHIFT+F7. This will
bring you to the line after the ASSERT() that failed.
<P>
Another way to catch an MFC assertion is by setting a breakpoint on the
opening brace of the AFXASERT.CPP in the MFC\SRC sub-directory of your
Visual C++ installation directory.
<P>
The AfxAssertFailedLine() function is called if an ASSERT fails. By setting
a breakpoint on the opening brace of this function, your debugger will
automatically come up when you hit an ASSERT in your code, or in the MFC
library code. At this point, you can examine the call stack.
<P>
Remember that many operations can be caused by Windows messages that you
can't use a call stack to trace back through.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: debug debugging find catch trace assert_valid<BR>
assertvalid verify<BR>
Keywords          : MfcMisc kbfasttip<BR>
Technology        : kbmfc<BR>
Version           : MS-DOS:7.0;WIN3X:1.0,1.5,1.51,1.52;WINNT:1.0,2.0,2.1,4.0;<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

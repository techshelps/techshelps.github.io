

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_vmalloc() May Allocate Larger Memory Block Than Expected </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q93211 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1992/12/01">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When an application uses the Virtual Memory Manager (VMM) functions _vmalloc() or _vrealloc(), one must consider the memory allocation mechanism the VMM uses. The text below provides the details of these two mechanisms.  MORE INFORMATION  When the ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALG,QAGI,QAHC,QBW6,QDH9,QDJD,QAA8,QBFY,QAY5,QAGB,QACJ,QBV8,QAKC,QAJH,QDMW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>_vmalloc() May Allocate Larger Memory Block Than Expected</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q93211 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50
MS-DOS | WINDOWS
kbprg
<P>
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ Compiler for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When an application uses the Virtual Memory Manager (VMM) functions
_vmalloc() or _vrealloc(), one must consider the memory allocation
mechanism the VMM uses. The text below provides the details of these
two mechanisms.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When the VMM requests memory from the virtual memory pool, two
allocation schemes are available: block allocation and page
allocation. The VMM uses the block allocation scheme when the
application requests fewer than 2042 bytes. In the block allocation
scheme, the VMM allocates the exact number of bytes requested by the
application.
<P>
If the application requests 2042 or more bytes, the VMM uses the page
allocation scheme to allocate a multiple of 2048 bytes of memory. The
VMM adds six bytes for the block header to the size of the allocation
and rounds the result up to the next multiple of the virtual page size
(2048 bytes). The VMM function _vmsize() returns the number of bytes
allocated, not including the block header.
<P>
The sample code below illustrates using these functions.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compile options needed: none
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;vmemory.h&gt;

void main()
</PRE>{
<PRE>   _vmhnd_t handle, handle2;
   unsigned long block_size;
   if (!_vheapinit(0, _VM_ALLDOS, _VM_XMS | _VM_EMS))
      {
      printf("Could not initialize virtual memory manager.\n");
      exit(-1);
      }

   printf("Requesting 100 bytes of virtual memory.\n");
   if ((handle = _vmalloc(100)) == _VM_NULL)
      {
      _vheapterm();
      exit(-1);
      }

   block_size = _vmsize(handle);
   printf("Received %d bytes of virtual memory.\n", block_size);

   printf("Requesting 2046 bytes of virtual memory.\n");
   if ((handle2 = _vmalloc(2046)) == _VM_NULL)
      {
      _vheapterm();
      exit(-1);
      }

   block_size = _vmsize(handle2);
   printf("Received %d bytes of virtual memory.\n", block_size);

   _vfree(handle2);
   _vheapterm();
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 7.00 1.00 1.50 _vmalloc _vrealloc<BR>
KBCategory: kbprg<BR>
KBSubcategory: VirtualMem<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

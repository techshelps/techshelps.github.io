

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: More Than 65536 Export Entries May Cause LNK2001 Errors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128599">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/04/04">
<META NAME="Keywords" CONTENT="LinkIss kbbuglist kbcode kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When linking to an import library, you may get unresolved external errors (LNK2001) on objects that are exported using the __declspec(dllexport) attribute. This problem is most common when exporting a large number of classes from a DLL.  CAUSE ====...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QBJQ,QAR4,QAPF,QAKP,QAH4,QBHQ,QAY4,QAOT,QAM1,QAAP,QBWP,QAW6,QAPN,QAB4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: More Than 65536 Export Entries May Cause LNK2001 Errors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128599</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10
WINDOWS NT
kbtool kbcode kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Linker (LINK.EXE), included with:
   Microsoft Visual C++, 32-bit Edition, versions 2.0 and 2.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When linking to an import library, you may get unresolved external errors
(LNK2001) on objects that are exported using the __declspec(dllexport)
attribute. This problem is most common when exporting a large number of
classes from a DLL.
<P>
<P><h2>CAUSE</h2>
 
<P>
The compiler generates export directives for each definition of an exported
object in a source file. The linker combines these into a list when
generating the executable that is translated into an import library.
<P>
The linker fails to distinguish between distinct and non-distinct (or
duplicate) export directives. Because Win32 is limited to 64 KB of ordinals
per DLL, the linker uses a two-byte unsigned integer to count the exports.
The unsigned integer counter wraps around after counting 65536 exports.
This results in smaller than expected import libraries.
<P>
This is only a problem in large DLLs that export a lot of information.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Here are three possible workarounds for this problem:

<UL><LI>Use conditional compilation to limit what is exported from each .OBJ
   file. Please see the sample pseudo-code provided below for an example.

<LI>Export your objects using a DEF file. The best way to ensure you export
   the correct symbols is to use a .MAP file. You can copy and paste the
   decorated symbols into the .DEF file. For example:
<P>
   SAMPLE.DEF
   ----------
<P>
   LIBRARY SAMPLE
<P>
   EXPORTS
<P><PRE>      ?showsub1@@YAXXZ
      ?sub1@@YAHH@Z
      ??0sub1test@@QAE@XZ
      ??1sub1test@@QAE@XZ
</PRE>
<LI>Divide your DLL into multiple DLLs by functionality. While this may
   involve the most work to implement, modularity may offer long term
   benefits.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem was fixed in Microsoft
Visual C++, 32-bit Edition, version 4.0.
<P>
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code illustrates how to conditionally compile code to
avoid the problem. An example showing how to generate this bug would be too
large to attach to this article because the source code would have to
export more than 65536 symbols.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compiler options needed: default DLL compiler options
*/

</PRE><h3>A.H</h3>
 
<P>
#if defined (A_OBJ)
<PRE>#define DeclSpec __declspec(dllexport)
</PRE>#else
<PRE>#define DeclSpec
</PRE>#endif
<P>
class DeclSpec AObject
{
public:
<PRE>   AObject();
   ~AObject();
</PRE>};
<P>
<P><h3>B.H</h3>
 
<P>
#if defined (B_OBJ)
<PRE>#define DeclSpec __declspec(dllexport)
</PRE>#else
<PRE>#define DeclSpec
</PRE>#endif
<P>
class DeclSpec BObject
{
public:
<PRE>   BObject();
   ~BObject();
</PRE>};
<P>
#undef DeclSpec
<P>
<P><h3>A.CPP</h3>
 
<P>
<PRE>#define A_OBJ
// Alternatively, you can define A_OBJ in the Preprocessor field of
// your compiler settings in the Project Settings dialog box.
#include "a.h"
#include "b.h"

</PRE>AObject::AObject()
{ }
<P>
AObject::~AObject()
{ }
<P>
<P><h3>B.CPP</h3>
 
<P>
<PRE>#define B_OBJ
#include "a.h"
#include "b.h"

</PRE>BObject::BObject()
{ }
<P>
BObject::~BObject()
{ }
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 9.00 9.10<BR>
KBCategory: kbtool kbcode kbfixlist kbbuglist<BR>
KBSubcategory: LinkIss<BR>
Keywords          : LinkIss kbbuglist kbcode kbfixlist kbtool<BR>
Version           : 2.00 2.10<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VC++ README.WRI Part 2-Visual Workbench (2 of 3) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97537 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1993/04/13">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The text below presents information in Part 2 of the README.WRI file distributed with Microsoft Visual C++ version 1.0. Setup installs README.WRI into the MSVC\HELP directory.  MORE INFORMATION  Shortcut Key for Hierarchy Button in MFC Help  The cl...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA55,QA56,QAH4,QBV8,QBFY,QAMN,QA7O,QAOE,QAB5,QAJQ,QA26,QA2Q,QAOT,QBVR,QANE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VC++ README.WRI Part 2-Visual Workbench (2 of 3)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97537 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbreadme
<P>
<P>
 
The information in this article applies to:

<UL><LI>The Visual Workbench included with:
   Microsoft Visual C++ for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below presents information in Part 2 of the README.WRI file
distributed with Microsoft Visual C++ version 1.0. Setup installs
README.WRI into the MSVC\HELP directory.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Shortcut Key for Hierarchy Button in MFC Help</h3>
 
<P>
The class hierarchy charts invoked by the Hierarchy button are
displayed in popup windows. However, popup windows cannot be invoked
using an ALT+key command. To display a hierarchy chart using the
keyboard, use either CTRL+I or I by itself instead of ALT+I.
<P>
<P><h3>Using the Insertion Point with Some Bold Fonts</h3>
 
<P>
When you use a bold font that is not a TrueType font, the insertion
point may appear to be positioned incorrectly. Use another font if you
notice this condition.
<P>
<P><h3>External Makefiles that Prompt at the MS-DOS Command Line</h3>
 
<P>
If you are using an external makefile in Visual Workbench, remove any
commands in the makefile that prompt for input at the MS-DOS command
line. Visual Workbench does not recognize prompts in an external
makefile and any that occur will pause the build and cause the system
to appear to be hung.
<P>
<P><h3>Workspace files in Visual Workbench for Visual C++ and FORTRAN</h3>
 
<P>
Versions of Visual Workbench for Visual C++ and FORTRAN share the same
format for workspace files (.WSP). If you have a Visual Workbench
FORTRAN project and Visual C++ project in the same directory, they
will use the same workspace file. For example, if a workspace is saved
by a FORTRAN Visual Workbench session and a Visual C++ Visual
Workbench session is run next, the workspace saved by the FORTRAN
session will be loaded.
<P>
<P><h3>Building a DLL</h3>
 
<P>
When building a dynamic-link library using Microsoft C version 6.0,
you needed to link the LibEntry module, which contained startup code
that initialized the local heap and called the C LibMain function.
LibMain is where you write your DLL initialization code. Equivalent
code for LibEntry is now incorporated in the Visual C++ Windows DLL
run-time library, and the LIBENTRY.OBJ and LIBENTRY.ASM files are no
longer provided with Visual C++.
<P>
If you need to initialize your DLL, you can write your own C or C++
LibMain function, which will be called automatically at startup. If
you do not need to initialize the DLL, a substitute for the LibMain
function (which simply returns 1) is automatically provided by the DLL
run-time library.
<P>
If you are modifying an existing DLL project to work with Visual C++,
remove any statements from your makefile that link LIBENTRY.OBJ, as
this file is no longer provided.
<P>
<P><h3>Building VBX Controls</h3>
 
<P>
To build VBX controls, the VBAPI.LIB library must be added to list of
additional libraries used by the linker. This library can be specified
by choosing the Projects dialog from the Options menu, and then
choosing Miscellaneous options in the Linker options dialog. Specify
/LIB:"&lt;path&gt;\VBAPI" in the Other Options field, where &lt;path&gt; describes
the directory where the VBAPI.LIB file is installed.
<P>
<P><h3>Building Example VBX Controls Supplied With the Visual Basic CDK</h3>
 
<P>
The example VBX controls provided in the Visual Basic Control
Development Kit must be built using the small memory model to work
with Visual C++.
<P>
<P><h3>Using #pragma optimize</h3>
 
<P>
You can use the #pragma optimize command in your source code to
control optimization options for files or functions in Visual
Workbench projects. The command must appear outside of function
bodies. The syntax is:
<P>
<PRE>   #pragma optimize( "[optimization switch list]", {off | on} )

</PRE>The optimization switch list may be zero or more of the following:
<P>
<PRE>   'a', 'w', 't', 's', 'c', 'g', 'e', 'l',
   'p', 'z', 'n', 'r', 'o', 'q', 'f', 'v'.

</PRE>These are the same letters used with the /O compiler options. For
example,
<P>
<PRE>   #pragma optimize( "lge", off )

</PRE>Two special forms are supported. The form below turns off all
optimization other than p-code ('q'):
<P>
<PRE>   #pragma optimize( "", off )

</PRE>The form below restores all optimization switch settings to the
project's original settings:
<P>
<PRE>   #pragma optimize( "", on )

</PRE>For more information about pragmas, search for 'pragma' in the C/C++
Language Reference online help file.
<P>
<P><h3>Debugging Using an ATI Ultra Display Adapter</h3>
 
<P>
If you are using an ATI Ultra display adapter to debug applications in
Visual Workbench you may encounter INT 3s as you execute code. Newer
versions of the display drivers may solve this problem. The most recent
drivers are available on the ATI BBS. The numbers for ATI User Support
are:
<UL><LI>BBS: 905-764-9404
<LI>Support FAX: 905-882-0546
<LI>Customer Support: 905-882-2626
<LI>General Inquiries: 905-882-2600
<P>
</UL><h3>Using Visual Workbench Debugger in Hard Mode</h3>
 
<P>
In Chapter 11 of the "Visual Workbench User's Guide," in the
description of Hard mode debugging, the "Requirements and
Restrictions" section on page 197 should contain the following
additional restrictions:

<UL><LI>While in Hard mode you do not have access to the Project Options
   dialog box nor can you use the mouse to access combo box controls,
   or the Project Files button on the toolbar. You can, however, use
   keyboard commands to access combo box controls.

<LI>Starting other applications (including Help and the Class Wizard)
   while debugging in Hard mode can cause Windows to crash.
<P>
</UL><h3>Some Controls Disabled When Debugging in Hard Mode</h3>
 
<P>
If you are in Hard Mode, some controls do not accept mouse input. This
includes any combo boxes, and the Project Files button on the toolbar.
In this case, you must use the keyboard to access these controls.
<P>
<P><h3>Using Combo List Boxes in Hard Mode</h3>
 
<P>
Combo list boxes may not work well with mouse clicks when the debugger
is in hard mode and stopped at a breakpoint. Use keyboard commands to
access combo list boxes in Visual Workbench in this situation.
<P>
<P><h3>Auto Select Code Generator Option</h3>
 
<P>
In the discussion of the Code Generator list box in Chapter 9 of the
"Visual Workbench User's Guide" (pages 120-121), the options for the
Visual C++ Professional Edition are different than stated. There are
actually three options: Auto Select (the default), Fast, and
Optimizing.
<P>
Auto Select instructs the compiler to determine whether to use the
fast or optimizing compiler based on other options you have selected.
Normally the Auto Select option selects the fast compiler. However, if
any of the following optimizations are selected, then the optimizing
compiler is used: /Oa, /Ow, /Oc, /Og, /Oe, /Oi, /Ol, /Os, /Ot, /Ox,
/Oz.  The same is true if 80386 code generation (/G3), altmath (/FPa),
or floating point calls (/FPc, /FPc87) are selected.
<P>
Auto Select places neither /f nor /f- in the options string and allows
you access to all option controls in the C/C++ Compiler Options dialog
box. If you select options that are incompatible, the compiler
generates an error or warning at build time. The Fast code generator
option places /f in the options string and the Optimizing code
generator option places /f- in the options string. Both Fast and
Optimizing options deny access to C/C++ Options dialog box controls
that are incompatible with their code generator types.
<P>
Since Auto Select is the default for Visual C++ Professional Edition,
Table 9.1 on page 116, which lists /f- as the default release-specific
compiler option for several project types, is in error.
<P>
The /f- compiler option is never explicitly selected by default.
However, in every case where /f- appears in Table 9.1, the compiler
actually implicitly chooses the optimizing compiler because of other
options (/O1 or /Ox).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory: VWBIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

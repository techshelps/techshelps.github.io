

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: DDP_PostProcessing() Catches All Exceptions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122273">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1994/11/01">
<META NAME="Keywords" CONTENT="CDKIss kbcode kbprg MfcOLE kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  While a custom property page is on display, error messages generated by ThrowError(), in SetXXXXProperty() methods, will not be displayed.  CAUSE =====  Error messages generated by ThrowError() are usually displayed by catching COleDispatchExceptio...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAGX,QAY5,QA01,QAB4,QAFV,QAPN,QAGI,QABA,QBV8,QAB9,QA1O,QAHH,QAFK,QABN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: DDP_PostProcessing() Catches All Exceptions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122273</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft OLE Control Developer's Kit (CDK) for Windows and
   Windows NT, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
While a custom property page is on display, error messages generated by
ThrowError(), in SetXXXXProperty() methods, will not be displayed.
<P>
<P><h2>CAUSE</h2>
 
<P>
Error messages generated by ThrowError() are usually displayed by catching
COleDispatchExceptions. The DDP_PostProcessing() function catches all types
of exceptions, preventing COleDispatchExceptions from being caught by the
container application. This means exceptions are caught and ignored as they
are generated while setting a property by using the control's custom
property page.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, use a custom DDP_PostProcessing() function
that specifically deals with COleDispatchExceptions thrown by ThrowError().
The sample code in this article builds a sample function called
DDP_PostProcessingEx() based on the original DDP_PostProcessing() function,
but modified to display a message box when a COleDispatchException is
caught. In addition to adding the DDP_PostProcessingEx() function to your
source code, you will also need to include the AFX_DDPDATA structure
definition and constructor in your source file.
<P>
To use the new DDP_PostProcessingEx() function, replace the call to
DDP_PostProcessing() with a call to DDP_PostProcessingEx() in your custom
property page's DoDataExchange() function.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   struct AFX_DDPDATA : public CObject
   {
      AFX_DDPDATA(LPVOID lpHandler, int nCtrlId, LPVOID lpMember,
         UINT nType, LPCTSTR lpszOleName);

      LPVOID  m_lpHandler;
      int     m_nCtrlId;
      LPVOID  m_lpMember;
      UINT    m_nType;
      LPCTSTR m_lpszOleName;
   };

   AFX_DDPDATA::AFX_DDPDATA(LPVOID lpHandler, int nCtrlId,
      LPVOID lpMember, UINT nType, LPCTSTR lpszOleName ) :
         m_lpHandler(lpHandler),
         m_nCtrlId(nCtrlId),
         m_lpMember(lpMember),
         m_nType(nType),
         m_lpszOleName(lpszOleName)
   {
   }

   void AFXAPI DDP_PostProcessingEx(CDataExchange*pDX)
   {
      if ( pDX-&gt;m_bSaveAndValidate )
      {
         WORD wKey;
         CMapWordToOb &amp;m_DDPmap =((COlePropertyPage*)pDX-&gt;m_pDlgWnd)-&gt;
                                    m_DDPmap;
         AFX_DDPDATA *pDDP = NULL;
         POSITION pos = m_DDPmap.GetStartPosition();

         while( pos )
         {
            m_DDPmap.GetNextAssoc( pos, wKey, (CObject *&amp;)pDDP);
            TRY
            {
               switch( pDDP-&gt;m_nType )
               {
                  case    VT_I1:
                {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        char *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (char *)pDDP-&gt;m_lpMember, pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_UI1:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        BYTE *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (BYTE *)pDDP-&gt;m_lpMember, pDDP-&gt;m_lpszOleName);
                      break;
                  }
                  case    VT_I2:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        short *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (short *)pDDP-&gt;m_lpMember, pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_UI2:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        WORD *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (WORD *)pDDP-&gt;m_lpMember, pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_I4:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        long *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (long *)pDDP-&gt;m_lpMember, pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_UI4:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        DWORD *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (DWORD *)pDDP-&gt;m_lpMember, pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_R4:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        float *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX, pDDP-&gt;m_nCtrlId,
                        (float *)pDDP-&gt;m_lpMember,pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_R8:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *, int,
                        double *, LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX,pDDP-&gt;m_nCtrlId,
                        (double *)pDDP-&gt;m_lpMember,pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  case    VT_BSTR:
                  {
                     typedef void (AFXAPI *PFV)(CDataExchange *,int,
                        CString *,LPCTSTR );
                     (*(PFV)pDDP-&gt;m_lpHandler)(pDX,pDDP-&gt;m_nCtrlId,
                        (CString*)pDDP-&gt;m_lpMember,pDDP-&gt;m_lpszOleName);
                     break;
                  }
                  default:
                     // Unknown Data Type!
                     ASSERT(FALSE);
                     break;
               }
            }
            CATCH(COleDispatchException, e)
            {
               // display a message box describing caught exception
               HWND hWndActive = ::GetActiveWindow();
               char szTitle[255];
               ::GetWindowText(hWndActive, szTitle, sizeof(szTitle));
               ::MessageBox(hWndActive, (LPCSTR)e-&gt;m_strDescription,
                  szTitle, MB_ICONEXCLAMATION|MB_TASKMODAL|MB_OK);
            }
            AND_CATCH_ALL(e)
            {
               // Ignore all other exceptions
            }
            END_CATCH_ALL
            delete pDDP;
         }
         m_DDPmap.RemoveAll();
      }
   }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CDKIss kbcode kbprg MfcOLE kbbuglist<BR>
Technology          : kbMfc kbole<BR>
Version             : 1.00<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

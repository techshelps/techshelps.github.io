

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Access CMemFile Directly When Using It with CArchive </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q132079">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1995/06/27">
<META NAME="Keywords" CONTENT="MfcFileIO kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When using CMemFile in conjunction with CArchive, problems may arise from calling CArchive::GetFile and subsequently using the CFile pointer returned for direct file access.  This is true for CFile and any class derived from CFile. Because CArchive...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QA8T,QAGI,QAO3,QAO2,QA1S,QABI,QBWP,QA3A,QAZB,QAY2,QACJ,QDN9,QBW7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Access CMemFile Directly When Using It with CArchive</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q132079</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 2.20 4.00 4.10
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 2.2,
      4.0, and 4.1
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When using CMemFile in conjunction with CArchive, problems may arise from
calling CArchive::GetFile and subsequently using the CFile pointer returned
for direct file access.
<P>
This is true for CFile and any class derived from CFile. Because CArchive
buffers I/O, you need to call CArchive::Flush() before using any of the
members of CFile.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When a CMemFile object is used with a CArchive object, the two objects
share a single buffer. Both objects retain separate pointers to this shared
buffer. It is possible for the two objects to become out of synch if the
file is accessed directly through a file pointer retrieved by calling
CArchive::GetFile.
<P>
For example, say you open a CMemFile, and start writing to it using the
serialization functions. Then, suppose you call CMemFile::GetFile, and
write to the file using CFile::Write. The first thing that the CMemFile
object does is make sure it has enough space for the pending write. For
this example, assume that there is not enough space to satisfy the write.
This means that the CMemFile object must reallocate the buffer. This will
most likely change the location of the buffer. The problem occurs when you
write to the CMemFile again through the CArchive object. The CArchive
object still has a pointer to the old buffer, because the object has no way
of knowing that the CMemFile reallocated the shared buffer. Any attempt to
write through this pointer does not write to the appropriate file.
Therefore, the data is missing from the file where it should have been
written.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 2.00 2.10 2.50 2.51 2.52 3.00<BR>
3.10 3.20 2.20 4.00 4.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: MfcFileIO<BR>
Keywords          : MfcFileIO kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

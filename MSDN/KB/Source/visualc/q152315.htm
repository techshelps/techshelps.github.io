

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: When to Call AfxDaoTerm() in an Automation Server </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152315">
<META NAME="KBModify" CONTENT="1997/10/13">
<META NAME="KBCreate" CONTENT="1996/06/11">
<META NAME="Keywords" CONTENT="MfcDAO kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  MFC DLLs and OCXs that use DAO need to call AfxDaoTerm() to terminate DAO before their ExitInstance() function is called. MFC, by default, calls AfxDaoTerm() from within CWinApp::ExitInstance().  An automation server may expose multiple objects tha...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAW6,QAPN,QA2K,QAUD,QAIF,QBWP,QAY5,QAH4,QAGB,QABA,QALW,QAG8,QASR,QAR4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: When to Call AfxDaoTerm() in an Automation Server</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 13, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152315</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.1, 4.2,
<P><PRE>     4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
MFC DLLs and OCXs that use DAO need to call AfxDaoTerm() to terminate DAO
before their ExitInstance() function is called. MFC, by default, calls
AfxDaoTerm() from within CWinApp::ExitInstance().
<P>
An automation server may expose multiple objects that use DAO. Calling
AfxDaoTerm() when one of these objects is destructed may have the undesired
effect of terminating DAO for all other objects that may still be in use.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
MFC keeps an internal object lock count of automation objects in the module
state. The constructor of each object exposed by the automation server
calls AfxOleLockApp() to increment this count and calls AfxOleUnlockApp()
to decrement it.
<P>
An MFC DLL automation server gets unloaded when the AfxOleCanExitApp()
function returns TRUE. This function checks the object lock count and
returns TRUE if no objects are in use. The default implementation of
DllCanUnloadNow() in an AppWizard-generated automation server looks like
this:
<P>
<PRE>   STDAPI DllCanUnloadNow(void)
   {
       AFX_MANAGE_STATE(AfxGetStaticModuleState());
       return AfxDllCanUnloadNow();
   }

</PRE>Add the following code to terminate DAO when no automation objects are
in use any longer:
<P>
<PRE>   STDAPI DllCanUnloadNow(void)
   {
       AFX_MANAGE_STATE(AfxGetStaticModuleState());

       if (AfxOleCanExitApp())
           AfxDaoTerm();

       return AfxDllCanUnloadNow();
   }

</PRE><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information, please refer to the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../VISUALC/Q143084.htm">Q143084</A></B>
   TITLE     : FIX: Problems with Using the MFC DAO Classes in a .DLL or
               .OCX

   ARTICLE ID: <B><A HREF="../VISUALC/Q149889.htm">Q149889</A></B>
   TITLE     : PRB: Assertion or Problems Using DAO in a DLL
</PRE> 
<PRE>Keywords          : MfcDAO kbprg
Technology        : kbMfc
Version           : WINDOWS NT: 4.0 4.1 4.2 4.2b 5.0
Platform          : NT WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 13, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Child Process Exit Code from 16-Bit Parent Process </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q58437 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/02/05">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In the Microsoft C Compiler, there is no C run-time function that will return the system exit code from a child process. However, Interrupt 21h SubFunction 4Dh can be used to return it.  MORE INFORMATION  Immediately after a child process terminate...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGB,QBFY,QAGI,QAUD,QAHC,QADN,QABG,QAY2,QAIF,QAY5,QAHB,QAGX,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Accessing Child Process Exit Code from 16-Bit Parent Process</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q58437 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 1.00 1.50 1.51 1.52
<PRE>MS-DOS                      | WINDOWS
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the Microsoft C Compiler, there is no C run-time function that will
return the system exit code from a child process. However, Interrupt 21h
SubFunction 4Dh can be used to return it.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Immediately after a child process terminates, the child exit code and
the system exit code are in the AL and AH registers, respectively. For
example:
<P>
<PRE>                    _________________________
                    |           |           |
      AX Register   |     |     |     |     |
                    |           |           |
                    -------------------------
                         AH     |    AL
                         /            \
                        /              \
         System Exit Code               Child Exit Code

</PRE>When the spawn() family of functions is called with a mode flag of
P_WAIT, only the child exit code is returned. To read the system exit
code, a call to Interrupt 21h SubFunction 4Dh is needed.
<P>
It is important to get and store the return codes immediately upon
returning from the child process, because another function may modify
them.
<P>
The following code samples demonstrate how to get the exit code from
the child process within the parent process with C.
<P>
<P><h3>Sample Code 1</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

/* Call this prog1.c  */
#include &lt;dos.h&gt;
#include &lt;stdio.h&gt;
#include &lt;process.h&gt;

</PRE>union REGS inregs, outregs, tempreg;
<PRE>int retcode;
</PRE>unsigned char syscode;
<P>
<PRE>void main (void)
</PRE>{
<PRE>   printf ("In program I\n");
   retcode = spawnl (P_WAIT, "sp2.exe", "sp2", NULL);

   /* Call int 21h function 4Dh to obtain exit codes */

   inregs.h.ah = 0x4d;
   intdos (&amp;inregs, &amp;outregs);

   /* System Exit Code will be in AH. */

   syscode = outregs.h.ah;

   printf ("Child exit code: %d\n", retcode);
   printf ("Child process ");
   switch (syscode)
   {
      case 0 : printf ("terminated normally\n");
               break;
      case 1 : printf ("exit with a Control-C\n");
               break;
      case 2 : printf ("exit with a hard error\n");
               break;
      case 3 : printf ("exit as a TSR program\n");
               break;
   }
}

</PRE><h3>Sample Code 2</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

/* Call this sp2.c */
#include &lt;stdio.h&gt;

void main (void)
</PRE>{
<PRE>   printf ("In program II\n");
   exit (77);
</PRE>}
<P>
Because C version 6.0 and later have the feature of using inline assembly,
the AX register can be accessed directly without using any interrupts. The
following line of code can be used in place of the interrupt call:
<P>
<PRE>   _asm mov syscode, ah
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.10 6.00 6.00a 6.00ax 7.00 1.00 1.50<BR>
KBCategory: kbprg<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: Smart Pointers Example Is Incorrect </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123603">
<META NAME="KBModify" CONTENT="1997/09/26">
<META NAME="KBCreate" CONTENT="1994/12/05">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Smart Pointers sample code uses C++ templates to create generic wrappers to encapsulate pointers of almost any type. The sample encapsulates pointers and overrides pointer operators to add new functionality to pointer operations. However, the S...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPF,QAUD,QAO2,QAO3,QAKM,QANY,QARZ,QAAP,QALW,QBFY,QA36,QABO,QDMW,QBVV,QA6E V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: Smart Pointers Example Is Incorrect</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123603</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 2.0, 2.1, 4.0, 4.1,
   5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Smart Pointers sample code uses C++ templates to create generic
wrappers to encapsulate pointers of almost any type. The sample
encapsulates pointers and overrides pointer operators to add new
functionality to pointer operations. However, the Smart Pointers sample
code in the documentation contains the following errors:

<UL><LI>stdio.h is not included and TRACE is not defined.

<LI>Operator Ptr&amp; operator=(Ptr&lt;T&gt; &amp;p_) is missing.

<LI>Implementation for operator Ptr&amp; operator=(T* p_) is incorrect.
<P>
</UL>The Smart Pointers sample code may be found in "Templates" chapter of
"Programming Techniques" included in the Visual C++ Books Online. Searching
for "Smart Pointers" in search plus of the Books Online also brings you to
the sample.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following version of the Smart Pointers sample has been corrected
and enhanced to better demonstrate the concept of Smart Pointers:
<P>
<PRE>#include &lt;stdio.h&gt;

#define TRACE printf

</PRE>class RefCount {
<PRE>    int crefs;
</PRE>public:
<PRE>    RefCount(void) { crefs = 0; }
    ~RefCount() { TRACE("goodbye(%d)\n", crefs); }
    void upcount(void) { ++crefs; TRACE("up to %d\n", crefs);}
    void downcount(void)
     {
     if (--crefs == 0)
      {
      delete this;
      }
     else
      TRACE("downto %d\n", crefs);
     }
</PRE>};
<P>
class Sample : public RefCount {
public:
<PRE>    void doSomething(void) { TRACE("Did something\n");}
</PRE>};
<P>
template &lt;class T&gt; class Ptr {
<PRE>    T* p;
</PRE>public:
<PRE>    Ptr(T* p_) : p(p_) { p-&gt;upcount(); }
    ~Ptr(void) { p-&gt;downcount(); }
    operator T*(void) { return p; }
    T&amp; operator*(void) { return *p; }
    T* operator-&gt;(void) { return p; }
    Ptr&amp; operator=(Ptr&lt;T&gt; &amp;p_)    // This is newly added
        {return operator=((T *) p_);}
    Ptr&amp; operator=(T* p_) {
        p-&gt;downcount(); p = p_; p-&gt;upcount(); return *this;
                                  // This is corrected
    }
</PRE>};
<P>
<PRE>int main() {
    Ptr&lt;Sample&gt; p  = new Sample; // sample #1
    Ptr&lt;Sample&gt; p2 = new Sample; // sample #2
    p = p2; // #1 will have 0 crefs, so it is destroyed;
            // #2 will have 2 crefs.
    p-&gt;doSomething();
    return 0;
    // As p2 and p go out of scope, their destructors call
    // downcount. The cref variable of #2 goes to 0, so #2 is
    // destroyed
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 9.00 template<BR>
Version           : WinNT:2.0,2.1,4.0,4.1,5.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbdocerr<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Loop Optimization Causes Infinite Do-While Loop </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115704">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/06/01">
<META NAME="Keywords" CONTENT="CodeGen kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The use of loop optimization (/Ol, or /Ox for the C/C++ compiler 8.0 for Windows NT) in a do-while loop that terminates after a single iteration may cause an infinite loop. The code below can be used to demonstrate this behavior. An infinite loop i...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAA7,QAH4,QBWP,QA26,QAR4,QAOT,QAHB,QAEF,QAC1,QANY,QA56,QA55,QAZM,QAZL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Loop Optimization Causes Infinite Do-While Loop</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115704</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 1.00 1.50 | 1.00
<PRE>MS-DOS                 | WINDOWS   | WINDOWS NT
</PRE>kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0 and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The use of loop optimization (/Ol, or /Ox for the C/C++ compiler 8.0
for Windows NT) in a do-while loop that terminates after a single
iteration may cause an infinite loop. The code below can be used to
demonstrate this behavior. An infinite loop is generated when the
expression (i &lt;= e) from the program below is true during the first
loop iteration.
<P>
<P><h2>CAUSE</h2>
 
<P>
Examining the assembly/source code file generated by using the /Fc
compiler option reveals that the comparison operation differs with
the optimized and non-optimized versions. The optimized version will
only reenter the loop if the two values are not equal, whereas the
non-optimized version correctly checks if i is less than or equal to
e.
<P>
Optimized version:
<P>
<PRE>;|***   while (i&lt;=e);
</PRE>; Line 17
<PRE>    *** 000059 ff 4e f4           dec WORD PTR [bp-12]
    *** 00005c 75 f1              jne $D536

</PRE>Non-optimized version:
<P>
<PRE>;|***   while (i&lt;=e);
</PRE>; Line 17
<PRE>  L00537:
    *** 000054 8b 46 f6           mov ax,WORD PTR -10[bp]
    *** 000057 39 46 fc           cmp WORD PTR -4[bp],ax
    *** 00005a 7f 03 e9 e7 ff     jle L00536

</PRE><h2>RESOLUTION</h2>
 
<P>
There are two workarounds to this problem:

<OL><P><LI>Use the fast compiler option /f.
<P>
   -or-

<P><LI>Disable optimization during the function where the infinite loop occurs
   by using the optimize pragma:
<P>
<P><PRE>      #pragma optimize("",off)
</PRE><P>
<P><PRE>      void bad_loop_function(void)
      {
      /* ... */
      }
</PRE><P>
<P><PRE>      #pragma optimize("",on)
</PRE><P>
</OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. This problem was corrected in the C/C++ compiler
version 9.0, included with Visual C++ 32-bit Edition, version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code can be used to demonstrate the problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Ol
*/

#include &lt;stdio.h&gt;

void main(void)
</PRE></OL>{
<PRE>   int a, b, c;
   int e, i;

   scanf("%d%d%d", &amp;a, &amp;b, &amp;c);
   printf("%d%d%d", a, b, c);

   i=a-c;
   e=b-c;
   do
   {
      printf("x");
      i++;
   }
   while (i&lt;=e);
   printf("\n");
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00ax 7.00 8.00 8.00c 1.00 1.50<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CodeGen<BR>
Keywords          : CodeGen kbbuglist kbfixlist kbtool<BR>
Version           : 6.00 6.00a 6.00ax 7.00 | 1.00 1.<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

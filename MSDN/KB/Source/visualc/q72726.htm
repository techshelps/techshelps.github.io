

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>signal() with SIGFPE Requires Floating-Point Support </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q72726 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/06/05">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The signal() function may be used to trap floating-point errors that would normally be fatal for an application. To trap these exceptions, the floating-point library must be linked in and become a part of the .EXE. One way that this can be done is ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANE,QBFY,QAA1,QAKC,QBC6,QAUD,QDI2,QAH4,QBVV,QAY5,QAGN,QAG8,QBB2,QA4Q,QAL3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>signal() with SIGFPE Requires Floating-Point Support</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q72726 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 5.10 6.00 6.00a | 1.00 1.50 1.51 1.52
<PRE>MS-DOS                      | OS/2            | WINDOWS
</PRE>kbprg
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.0, 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 5.1, 6.0, and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The signal() function may be used to trap floating-point errors that
would normally be fatal for an application. To trap these exceptions,
the floating-point library must be linked in and become a part of the
.EXE. One way that this can be done is by defining a double and
initializing it to "0.0f" in your code.
<P>
If floating-point support has not been linked in for some reason and
you try to set up a signal handler for SIGFPE (floating-point error),
signal() will return SIG_ERR.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The types of floating-point exceptions that you can trap with the
signal() function include the following:

<OL><P><LI>FPE_INVALID:        Invalid number. This exception covers all
<PRE>                        cases not covered by other exceptions [inputs
                        that are not a number (NaN), infinite,
                        out-of-range, or in an unsupported format].

</PRE><P><LI>FPE_DENORMAL:       Denormal number used. A denormal is defined as
<PRE>                        a number that has a biased exponent of zero.
                        By providing a significand with leading zeros,
                        the range of possible negative exponents can
                        be extended by the number of bits in the
                        significand. Each leading zero is a bit of
                        lost accuracy, so the extended exponent range
                        is obtained by reducing significance.

</PRE><P><LI>FPE_ZERODIVIDE:     Divide by zero, or an answer where the
<PRE>                        exponent has an infinite magnitude.

</PRE><P><LI>FPE_OVERFLOW:       Overflow. The magnitude of the result, while
<PRE>                        finite, is too large to be represented in the
                        format requested.

</PRE><P><LI>FPE_UNDERFLOW:      Underflow. Just the opposite. The magnitude of
<PRE>                        the result is too small to be represented in
                        the format requested. A denormal may be
                        generated at a loss of precision.

</PRE><P><LI>FPE_INEXACT:        Inexact result (precision exception). Usually
<PRE>                        masked and ignored. Generated when the result
                        is not exact.

</PRE><P><LI>FPE_UNEMULATED:     Function not emulated in library.

<P><LI>FPE_SQRTNEG:        Negative square root. Generated when the
<PRE>                        sqrt() or sqrtl() function returns a negative
                        number.

</PRE><P><LI>FPE_STACKOVERFLOW:  Floating-point stack overflow.

<P><LI>FPE_STACKUNDERFLOW: Floating-point stack underflow.

<P><LI>FPE_EXPLICITGEN:    Explicit call. This exception is generated
<PRE>                        when the raise() function is used to generate
                        a floating-point exception.

</PRE></OL>The following sample code attempts to set up a signal handler for
SIGFPE without indicating that the floating-point code should be
linked in, resulting in the return of SIG_ERR to signal(). Removing
the comment corrects the problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options used:
*/

#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;
#include &lt;float.h&gt;
#include &lt;math.h&gt;

void func1(int, int);

void main(void)
</PRE>{
<PRE>//   double d = 0.0f;                    // Uncomment for workaround
   if(signal(SIGFPE, func1)==SIG_ERR)
      printf("signal Failed\n");
</PRE>}
<P>
<PRE>void func1(int i, int j)
</PRE>{
}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.00a 6.00ax 5.00 5.10 7.00 1.00<BR>
1.50<BR>
KBCategory: kbprg<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

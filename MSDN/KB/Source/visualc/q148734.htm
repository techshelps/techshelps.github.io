

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Debug WEP(), _WEP(), and ExitInstance() in 16-bit DLLs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148734">
<META NAME="KBModify" CONTENT="1997/07/18">
<META NAME="KBCreate" CONTENT="1996/03/20">
<META NAME="Keywords" CONTENT="CVWIss kb16bitonly MfcDLL WBDebug kbhowto kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Visual C++ Workbench debugger does not support debugging the Windows Exit Procedure (WEP) or functions called from WEP for implicitly loaded DLLs. CodeView for Windows does support debugging WEPs but only if the calling application is not the a...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWQ,QBWO,QAVX,QAGB,QAGI,QBVV,QAIJ,QAB9,QAGQ,QAJH,QAY2,QAH4,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Debug WEP(), _WEP(), and ExitInstance() in 16-bit DLLs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148734</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbtool kbhowto
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual C++ Workbench debugger does not support debugging the Windows
Exit Procedure (WEP) or functions called from WEP for implicitly loaded
DLLs. CodeView for Windows does support debugging WEPs but only if the
calling application is not the application being debugged by CodeView for
Windows.
<P>
Breakpoints set through the debugger or DebugBreak() will not be hit. MFC
TRACE() statements and OutputDebugString() messages will not show up in the
debug window. However, DBWIN can be used to see these debug messages. DBWIN
can be started from the Program Manager by opening the DebugWin icon or by
running Dbwin.exe from the Msvc\Bin directory.
<P>
NOTE: CodeView requires Windows 3.1 and is not compatible with Windows NT
or Windows 95.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Both the Workbench debugger and CodeView for Windows stop debugging when
the main application being debugged exits. This occurs before the
implicitly linked DLLs are actually unloaded from memory and their Windows
Exit Procedures (WEPs) are called.
<P>
By default, the Windows Exit Procedure (WEP) is implemented by the C
Run-Time (CRT). The CRT version of WEP calls _WEP(), the user-defined
Windows Exit Procedure. In MFC _USRDLLs, _WEP() in turn calls
ExitInstance(). Also, all destructors for static C++ objects are called
from the default CRT WEP. This debugger limitation applies to all of these
functions.
<P>
<P><h3>Step-by-Step Example for Debugging Procedure</h3>
 
<P>
Because CodeView for Windows supports multi-process debugging, it is
possible to work around this problem by following these steps:

<OL><P><LI>Start CodeView for Windows, and debug some unrelated 16-bit application
   that does not load the DLL you want to debug. Solitaire (Sol.exe), which
   ships with Windows, is an example of a good application to use.

<P><LI>Start debugging by pressing the F5 key. If the application you chose to
   debug wasn't built as "debug," ignore the message about no CodeView
   information.

<P><LI>Start the application that loads the DLL by using File Manager. CodeView
   will automatically load the debug information for the DLL when the DLL
   is loaded.

<P><LI>Break into CodeView for Windows by pressing CTRL+ALT+SYSREQ. At this
   point, you can set breakpoints in the DLL. Note, if you need to debug
   other parts of the DLL, you could have also set breakpoints by
   pre-loading the debugging info before step 2.
<P>
</OL>At this point, you can debug the WEP as any other function. You will need
to exit the program that's being debugged (Sol.exe) to exit CodeView. You
will also need to exit CodeView if you need to re-start your application.
<P>
Implicitly loaded DLLs are DLLs that are loaded automatically by Windows
by linking with an import library or by using the IMPORTS module definition
file statement.
<P>
In DLLs that are explicitly linked, loaded, and freed through LoadLibrary()
and FreeLibrary(), there are no problems debugging the WEP both the
Workbench debugger and CodeView for Windows.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on why breakpoints fail, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q121556.htm">Q121556</A></B>
   TITLE     : PRB: Breakpoints Won't Work - 11 Reasons Why

</PRE></OL>This article covers, among other things, why breakpoints may not work in
MFC source code files. See the "Breakpoints Fail When Multiple Source Files
Have the Same Name" section for more information.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 kbinf CVW<BR>
KBCategory: kbtool kbhowto<BR>
KBSubcategory: CVWIss WBDebug MfcDLL<BR>
Keywords            : CVWIss kb16bitonly MfcDLL WBDebug kbhowto kbtool<BR>
Version             : 1.00 1.50 1.51 1.52<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

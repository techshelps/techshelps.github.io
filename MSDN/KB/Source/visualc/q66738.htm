

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Unpredictable Results When &gt;1 va_arg() in Parameter List </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q66738 ">
<META NAME="KBModify" CONTENT="1997/08/18">
<META NAME="KBCreate" CONTENT="1990/11/06">
<META NAME="Keywords" CONTENT="CRTIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When the va_arg() macro is used more than once in a function parameter list, an application produces different results depending on the version of the C compiler used to build the application.  CAUSE =====  The C standard does not precisely define ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAHE,QAH4,QA4Q,QAPN,QAKD,QAYL,QAB9,QADK,QAPF,QAJQ,QABH,QBWP,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Unpredictable Results When &gt;1 va_arg() in Parameter List</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q66738 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0,
<P><PRE>     4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When the va_arg() macro is used more than once in a function parameter
list, an application produces different results depending on the version of
the C compiler used to build the application.
<P>
<P><h2>CAUSE</h2>
 
<P>
The C standard does not precisely define expression evaluation order. In
many cases, the compiler implementation determines the order in which an
application evaluates expressions.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To preserve the original order of the arguments, use the va_arg() macro
only once in a given expression. One method is to evaluate the expression
in a loop that processes each variable argument and stops when the last
parameter is reached.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The va_arg() macro provides a method to access the arguments of a function
when the function can accept a variable number of arguments. The macro
returns a variable parameter by incrementing the value of the arg_ptr that
points to the list of arguments. The values returned depend on the order in
which the application evaluates the va_arg() macros.
<P>
However, because the C language does not guarantee the order in which most
expressions are evaluated, application code should not depend on a
particular evaluation order. The sample code below demonstrates this
behavior and the unwanted side effects that can occur when code that
depends on evaluation order is compiled with different versions of the same
compiler.
<P>
<P><h3>Sample Code #1</h3>
 
<P>
<PRE>   #include &lt;stdio.h&gt;
   #include &lt;stdarg.h&gt;

   void myfunc(int, ...);

   void main(void)
   {
      myfunc(1, 2, 3, 4);
   }

   void myfunc(int first, ...)
   {
      va_list arg_ptr;
      va_start(arg_ptr, first);

      printf("%d %d %d %d\n", first, va_arg(arg_ptr, int),
                                     va_arg(arg_ptr, int),
                                     va_arg(arg_ptr, int));
   }

</PRE>When this sample is compiled with C version 5.1 or C/C++ version 8.0 for MS-
DOS, the sample produces the following output:
<P>
<PRE>   1 4 3 2

</PRE>However, when this sample is compiled with Microsoft C versions 6.0, 6.0a,
6.0ax, Microsoft C/C++ version 7.0, or Microsoft Visual C++ 32-bit Edition,
versions 1.0 through 4.2, the sample produces the following output:
<P>
<PRE>   1 4 4 4

</PRE>With Microsoft Visual C++, 32-bit Edition, version 5.0, the output is the
same as C 5.1 and C/C++ 8.0.
<P>
In the following sample code, the expressions are evaluated correctly
without regard to the expression evaluation order.
<P>
<P><h3>Sample Code #2</h3>
 
<P>
<PRE>   #include &lt;stdio.h&gt;
   #include &lt;stdarg.h&gt;

   void myfunc(int, ...);

   void main(void)
   {
      myfunc(1, 2, 3, 4, -1);     /* -1 is a flag */
   }

   void myfunc(int first, ...)
   {
      int temp;
      va_list arg_ptr;
      va_start(arg_ptr, first);

      temp = first;
      while(temp != -1)        /* test for flag (-1) */
      {
         printf("%d ", temp);
         temp = va_arg(arg_ptr, int);
      }
   }

</PRE>The output is as follows:
<P>
<PRE>    1 2 3 4
</PRE> 
<PRE>Keywords          : CRTIss
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0;WINDOWS:1.0,1.5;WINDOWS  NT:1.0,2.0,2.1,4.0,4.1,4.2,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

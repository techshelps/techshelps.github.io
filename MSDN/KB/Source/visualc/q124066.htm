

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: COleDispatchDriver::InvokeHelperV Causes Memory Leaks </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124066">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/12/18">
<META NAME="Keywords" CONTENT="kb16bitonly kbbuglist kbfixlist kbole">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Creating a COleDispatchDriver derived class from an automation object's type library for a particular object may result in a memory leak when subsequently calling its member functions. This leak is caused by a bug in the InvokeHelperV member functi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QAR4,QAY5,QAPN,QAHE,QBW6,QDIX,QDID,QBFY,QA56,QA55,QAGI,QBV8,QAB9,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: COleDispatchDriver::InvokeHelperV Causes Memory Leaks</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124066</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50
WINDOWS
kbole kbfixlist kbbuglist
<P>
 
The information in this article applies to:
<P>
<PRE>   The Microsoft Foundation Classes (MFC), included with
     - Microsoft Visual C++ for Windows, version 1.5
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Creating a COleDispatchDriver derived class from an automation object's
type library for a particular object may result in a memory leak when
subsequently calling its member functions. This leak is caused by a bug in
the InvokeHelperV member function of the COleDispatchDriver class used by
the member functions of the derived class to call the OLE automation
object's methods.
<P>
<P><h2>CAUSE</h2>
 
<P>
COleDispatchDriver::InvokeHelperV function, eventually called by all
method member functions, incorrectly calculates the parameter
information and will not free memory associated with BSTR (String)
parameters.  The error is marked below in a small segment taken
from the COleDispatchDriver::InvokeHelperV function:
<P>
<PRE>void COleDispatchDriver::InvokeHelperV(DISPID dwDispID, WORD wFlags,
                                       VARTYPE vtRet, void* pvRet,
                                       const BYTE FAR* pbParamInfo,
                                       va_list, argList)
{
  ...

  // cleanup any arguments that need cleanup
  if (dispparams.cArgs != 0)
  {
    VARIANTARG FAR* pArg = dispparams.rgvarg;
    // BUG: wrong start address
    // the correct line included in Visual C++ 1.51:
    // VARIANTARG FAR* pArg = dispparams.rgvarg + dispparams.cArgs - 1;

    const BYTE FAR* pb = pbParamInfo;
    while (*pb != 0)
    {
      switch ((VARTYPE)*pb)
      {
        case VT_BSTR:
          VariantClear(pArg); // BUG: wrong address gets passed since
                              // initial calculation was wrong
          break;
        ...
      }
      ++pArg;
     // BUG: wrong direction for parameters (they're in reverse order)
     // the correct line included in Visual C++ 1.51:
     // --pArg;
      ++pb;
    }
  }
  ....
</PRE>}
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in the Microsoft
Foundation Classes version 2.51 that was included with Microsoft Visual C++
version 1.51 for Windows.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.50 2.50<BR>
KBCategory: kbole kbfixlist kbbuglist<BR>
KBSubCategory: MfcOLE<BR>
Keywords          : kb16bitonly kbbuglist kbfixlist kbole<BR>
Technology        : kbMfc<BR>
Version           : 1.50<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

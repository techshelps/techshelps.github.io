

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Array of Unnamed Union Does Not Initialize Correctly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126843">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1995/03/05">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="   Structures that include unnamed unions do not get initialized correctly in C++ code.  CAUSE =====  The compiler inserts an extra block of data equal to the size of the union after each object. Therefore, every other initialized object will apparen...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAPF,QAUJ,QAH4,QAKP,QBUT,QBVV,QA5A,QA4Q,QAX6,QAPN,QALZ,QAI4,QDKW,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Array of Unnamed Union Does Not Initialize Correctly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126843</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ compiler (CL.EXE), included with
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51 and
      1.52
</UL></PRE> 
<P>
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Structures that include unnamed unions do not get initialized correctly
in C++ code.
<P>
<P><h2>CAUSE</h2>
 
<P>
The compiler inserts an extra block of data equal to the size of the
union after each object. Therefore, every other initialized object will
apparently be skipped. See the sample output in SAMPLE 1 below in the MORE
INFORMATION section.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
This problem can be worked around using one of the following methods:

<OL><P><LI>Named unions instead of unnamed unions.
<P>
   - or -

<P><LI>Define constructors for the structure.
<P>
</OL>More detailed information is provided in sample code SAMPLE 2, found below.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code SAMPLE 1 reproduces the problem. Use SAMPLE 2 to
work around the problem. Both samples should be .CPP applications.
<P>
<P><h3>Sample Code</h3>
 
<P>
<P><h3>SAMPLE 1 :</h3>
 
<P>
<PRE>/* Compile options needed: none.
*/

#include &lt;stdio.h&gt;

</PRE></OL>struct MyStruct {
<PRE>  union {
     char c[8];
     struct {
        unsigned long uL1, uL2;
       };
    };
</PRE>};
<P>
MyStruct ms[] =
{
<PRE>  {"Z000"},
  {"Z001"},
  {"Z002"},
  {"Z003"},
  {"Z004"}
</PRE>};
<P>
<PRE>void main()
</PRE>{
<PRE>  for ( int i=0; i&lt;=4; i++ )
   printf("ms[%d] = %s\n",i,ms[i].c );
</PRE>}
<P>
Output :
<P>
ms[0] = Z000
ms[1] =
ms[2] = Z001
ms[3] =
ms[4] = Z002
<P>
<P>
<P><h3>SAMPLE 2 :</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

#include &lt;stdio.h&gt;

// Define CASE1 or CASE2 here.

</PRE>#ifdef CASE1
struct MyStruct {
<PRE>  union {
     char c[8];
     struct {
        unsigned long uL1, uL2;
     };
  } t;  // Name the union here.
</PRE>};
#endif
<P>
#ifdef CASE2
<PRE>#include &lt;string.h&gt;

</PRE>struct MyStruct {
<PRE>  union {
     char c[8];
     struct {
        unsigned long uL1, uL2;
     };
  };
  MyStruct(unsigned long l1, unsigned long l2) {
      uL1 = l1;
      uL2 = l2;
  }             // Constructor
  MyStruct(char *lpz) {
      strcpy(c, lpz);
  }             // Constructor
  MyStruct(){}  // Constructor
</PRE>};
#endif
<P>
MyStruct ms[] =
{
<PRE>  {"Z000"},
  {"Z001"},
  {"Z002"},
  {"Z003"},
  {"Z004"}
</PRE>};
<P>
<PRE>void main()
</PRE>{
#ifdef CASE1
<PRE>   for ( int i=0; i&lt;=4; i++ )
     printf("ms[%d] = %s\n",i,ms[i].t.c );
</PRE>#endif
<P>
#ifdef CASE2
<PRE>   for ( int i=0; i&lt;=4; i++ )
     printf("ms[%d] = %s\n",i,ms[i].c );
</PRE>#endif
}
<P>
Output :
<P>
ms[0] = Z000
ms[1] = Z001
ms[2] = Z002
ms[3] = Z003
ms[4] = Z004
<P>
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: CPP nameless 8.00 8.00c 1.00 1.50 1.51 1.52<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubCategory: CPPIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

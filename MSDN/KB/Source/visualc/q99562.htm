

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Switching Views in a Single Document Interface Program </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99562 ">
<META NAME="KBModify" CONTENT="1997/11/12">
<META NAME="KBCreate" CONTENT="1993/06/02">
<META NAME="Keywords" CONTENT="MfcDocView kbinfo">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In a single document interface (SDI) application, created with the Microsoft Foundation Class Library, to create an alternate CView and use both the CView specified in the CDocumentTemplate and the alternate view in the application, perform the ste...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADK,QAH4,QBWT,QAKR,QAGI,QAJH,QBFY,QA56,QA55,QBXR,QAI4,QAY5,QAYV,QAUD,QASR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Switching Views in a Single Document Interface Program</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 12, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99562 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P><PRE>    - Microsoft Visual C++, 32-bit Edition, version 1.0, 2.0, 2.1,
      4.0, 5.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In a single document interface (SDI) application, created with the
Microsoft Foundation Class Library, to create an alternate CView and use
both the CView specified in the CDocumentTemplate and the alternate view
in the application, perform the steps listed below.
<P>
NOTE: These steps assume that the name of the CWinApp-derived object is
CMyWinApp; that CMyWinApp is declared and defined in MYWINAPP.H and
MYWINAPP.CPP, respectively; that CNewView is the name of the new, CView-
derived object; and that CNewView is declared and defined in NEWVIEW.H and
NEWVIEW.CPP, respectively. Substitute these with your own class and file
names as needed.

<OL><P><LI>Add the following members to the declaration of CMyWinApp in
   MYWINAPP.H:
<P>
<P><PRE>      CView* m_pOldView;
      CView* m_pNewView;
      CView* SwitchView(CView* pNewView);
</PRE>
<P><LI>If CNewView was created with ClassWizard, modify the CNEWVIEW.H to
   change the access specifier for the constructor, destructor, and
   OnInitialUpdate() function from protected to public.

<P><LI>Add "#include &lt;AFXPRIV.H&gt;" (without the quotation marks) to the include
   section of MYWINAPP.CPP. This is required to define the
   WM_INITIALUPDATE message to be added in step 4.

<P><LI>Create a new view and attach it to the document. The following code
   fragment creates a new view in the InitInstance() member of the
   CMyWinApp object. In this way, both new and existing views persist for
   the lifetime of the application; however, the application could just
   as easily create the new view dynamically.
<P>
   This code requires the main frame window, document, and default view to
   exist already. In Visual C++ for Windows and Visual C++ 32-bit Edition,
   versions 1.0 through 2.x, insert the following code into
   CMyWinApp::InitInstance() after the call to OnFileNew(), as OnFileNew()
   creates each of these elements. In Visual C++ 32-bit Edition,
   versions 4.0 or later, insert this code after the call to
   ProcessShellCommand():
<P>
<P><PRE>      ...
      CView* pActiveView = ((CFrameWnd*) m_pMainWnd)-&gt;GetActiveView();
      m_pOldView = pActiveView;
      m_pNewView = (CView*) new CNewView;
</PRE><P>
<P><PRE>      CDocument* pCurrentDoc =
<PRE></PRE>         ((CFrameWnd*) m_pMainWnd)-&gt;GetActiveDocument();

      // Initialize a CCreateContext to point to the active document.
      // With this context, the new view is added to the document
      // when the view is created in CView::OnCreate().
      CCreateContext newContext;
      newContext.m_pNewViewClass = NULL;
      newContext.m_pNewDocTemplate = NULL;
      newContext.m_pLastView = NULL;
      newContext.m_pCurrentFrame = NULL;
      newContext.m_pCurrentDoc = pCurrentDoc;

      // The ID of the initial active view is AFX_IDW_PANE_FIRST.
      // Incrementing this value by one for additional views works
      // in the standard document/view case but the technique cannot
      // be extended for the CSplitterWnd case.
      UINT viewID = AFX_IDW_PANE_FIRST + 1;
      CRect rect(0, 0, 0, 0); // gets resized later

      // Create the new view. In this example, the view persists for
      // the life of the application. The application automatically
      // deletes the view when the application is closed.
      m_pNewView-&gt;Create(NULL, "AnyWindowName", WS_CHILD, rect,
                              m_pMainWnd, viewID, &amp;newContext);

      // When a document template creates a view, the WM_INITIALUPDATE
      // message is sent automatically. However, this code must
      // explicitly send the message, as follows.
      m_pNewView-&gt;SendMessage(WM_INITIALUPDATE, 0, 0);
      ...

</PRE><P><LI>Define the CMyApp::SwitchView() function. (Alternatively, SwitchView()
   could be declared and defined as a member of the main frame class.)
<P>
<P><PRE>      CView* CMyWinApp::SwitchView(CView* pNewView)
      {
<PRE></PRE>         CView* pActiveView =
            ((CFrameWnd*) m_pMainWnd)-&gt;GetActiveView();

         // Exchange view window ID's so RecalcLayout() works.
         #ifndef _WIN32
         UINT temp = ::GetWindowWord(pActiveView-&gt;m_hWnd, GWW_ID);
         ::SetWindowWord(pActiveView-&gt;m_hWnd, GWW_ID,
                         ::GetWindowWord(pNewView-&gt;m_hWnd, GWW_ID));
         ::SetWindowWord(pNewView-&gt;m_hWnd, GWW_ID, temp);
         #else
         UINT temp = ::GetWindowLong(pActiveView-&gt;m_hWnd, GWL_ID);
         ::SetWindowLong(pActiveView-&gt;m_hWnd, GWL_ID,
                         ::GetWindowLong(pNewView-&gt;m_hWnd, GWL_ID));
         ::SetWindowLong(pNewView-&gt;m_hWnd, GWL_ID, temp);
         #endif

         pActiveView-&gt;ShowWindow(SW_HIDE);
         pNewView-&gt;ShowWindow(SW_SHOW);
         ((CFrameWnd*) m_pMainWnd)-&gt;SetActiveView(pNewView);
         ((CFrameWnd*) m_pMainWnd)-&gt;RecalcLayout();
         pNewView-&gt;Invalidate();
         return pActiveView;
      }

   NOTE: This function returns a pointer to the old view so that the old
   view can be destroyed if desired. Before destroying the view though,
   CDocument::RemoveView() should be called so the association between the
   view and the document is removed.

</PRE><P><LI>Add command handlers or other code to call the SwitchView() function
   when the application needs to switch between views.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: destructor multiple<BR>
Keywords          : MfcDocView kbinfo<BR>
Technology        : kbmfc<BR>
Version           : 1.0 1.5 1.51 1.52 2.0<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 12, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

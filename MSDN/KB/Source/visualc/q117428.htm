

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: GetProcAddress(), Function Pointers, and C++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117428">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1994/06/28">
<META NAME="Keywords" CONTENT="CPPLngIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When porting code that uses GetProcAddress() from C to C++, the C++ compiler for MS-DOS can return the following error message:    error C2564: formal/actual parameters mismatch in call through      pointer to function  The error message that is re...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAY5,QAB4,QAB9,QBV8,QAHE,QAO3,QAO2,QAAP,QAGI,QA4Q,QAUD,QBME,QAD7,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: GetProcAddress(), Function Pointers, and C++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117428</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When porting code that uses GetProcAddress() from C to C++, the C++
compiler for MS-DOS can return the following error message:
<P>
<PRE>  error C2564: formal/actual parameters mismatch in call through
     pointer to function

</PRE>The error message that is returned with the 32-bit compiler is:
<P>
<PRE>  error C2197: 'int (__stdcall *)(void )' : too many actual parameters

</PRE><h2>MORE INFORMATION</h2>
 
<P>
In a traditional C application, use GetProcAddress() to obtain the
address of a function to be called. Declare a variable of type
FARPROC, initialize the pointer with the value returned from
GetProcAddress(), and then call the function through a pointer
as shown:
<P>
<PRE>   void func1(void)
   {
      HINSTANCE       hLib;
      FARPROC         lpfnDLLProc;
      UINT            param1 = 1;
      int             param2;

      hLib = LoadLibrary ("dll1.dll");
      if (hLib)
      {
         lpfnDLLProc = GetProcAddress (hLib, "DLLProc");
         (*lpfnDLLProc) (param1, (LPINT)&amp;param2);
         FreeLibrary (hLib);
      }
   }

</PRE>When not compiling with STRICT, FARPROC is defined in the WINDOWS.H
file as follows:
<P>
<PRE>   typedef int (CALLBACK* FARPROC)();

</PRE>When the sample code above is converted to C++, a type-mismatch error
occurs because C and C++ have a fundamental difference in the way they
interpret empty parentheses in function declarations. In C, a function
declared as follows:
<P>
<PRE>   int (*funcptr)();

</PRE>declares a function that accepts an unknown number of arguments. In
C++, the same declaration represents a function that accepts no
arguments. In other words, in C++, the statement is equivalent to:
<P>
<PRE>   int (*funcptr)(void);

</PRE>Because of this difference, when a pointer of type FARPROC is used to
call a function with parameters in C, no error occurs. In C++, when
the function being passed to GetProcAddress() has parameters, the
formal/actual-parameter-mismatch error occurs because the function of
type FARPROC is defined as a function that has void parameters rather
than as a function that accepts parameters.
<P>
To eliminate the error, define the function pointer as a pointer to a
function with the correct number of parameters and then typecast the
return value from GetProcAddress() to the appropriate type:
<P>
<PRE>   typedef void (CALLBACK *ULPRET)(UINT,LPINT);

   void func1(void)
   {
      HINSTANCE       hLib;
      ULPRET          lpfnDLLProc;
      UINT            param1 = 1;
      int             param2;

      hLib = LoadLibrary ("dll1.dll");
      if (hLib)
      {
         lpfnDLLProc = (ULPRET) GetProcAddress (hLib,"DLLProc");
         (*lpfnDLLProc) (param1, (LPINT)&amp;param2);
         FreeLibrary (hLib);
      }
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.10<BR>
Keywords          : CPPLngIss<BR>
Version           : MS- DOS:7.0;WIN3X:1.0,1.5,1.51,1.52;WINNT:1.0,2.0,2.1,4.0,5.0;<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

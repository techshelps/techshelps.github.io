

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Aggregate a COM Object with ATL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q173823">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1997/09/12">
<META NAME="Keywords" CONTENT="AtlControl AtlIss AtlServer">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following steps demonstrate how to aggregate a COM object in an ATL project:  1. Add an IUnknown pointer to your class object and initialize it to NULL    in the constructor.  2. Add the DECLARE_PROTECT_FINAL_CONSTRUCT macro to protect your obj...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBFY,QASR,QAH4,QBHQ,QA56,QA55,QA6E,QAUD,QAJ9,QA36,QAO3,QAO2,QA0K V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Aggregate a COM Object with ATL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q173823</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Active Template Library (ATL) 2.1 included with:
   - Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following steps demonstrate how to aggregate a COM object in an ATL
project:

<OL><P><LI>Add an IUnknown pointer to your class object and initialize it to NULL
   in the constructor.

<P><LI>Add the DECLARE_PROTECT_FINAL_CONSTRUCT macro to protect your object
   from being deleted if (during FinalConstruct) the internal aggregated
   object increments the reference count then decrements the count to 0.

<P><LI>Use the IUnknown pointer you defined as the second parameter to the
   COM_INTERFACE_ENTRY_AGGREGATE macros. The first parameter is the IID of
   the interface of the inner object that you want to expose.

<P><LI>Override FinalConstruct() to create the aggregate.

<P><LI>Override FinalRelease() to release the IUnknown pointer.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
If you use and release an interface from the aggregate during
FinalConstruct, you should add the DECLARE_PROTECT_FINAL_CONSTRUCT macro to
the definition of your class object.
<P>
Here is a sample with all four of the steps done in the class definition.
This is a simple object, COutObj, which aggregates another simple
object, CInnObj.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   class ATL_NO_VTABLE COutObj :
         public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
         public CComCoClass&lt;COutObj, &amp;CLSID_OutObj&gt;,
         public IDispatchImpl&lt;IOutObj, &amp;IID_IOutObj, &amp;LIBID_OUTEROBJLib&gt;
   {
   public:
      COutObj() : m_pInnerUnk(NULL) // Step 1
      {
      }
      DECLARE_GET_CONTROLLING_UNKNOWN()
      DECLARE_REGISTRY_RESOURCEID(IDR_OUTOBJ)
      DECLARE_PROTECT_FINAL_CONSTRUCT() // Step 2

      BEGIN_COM_MAP(COutObj)
         COM_INTERFACE_ENTRY(IOutObj)
         COM_INTERFACE_ENTRY(IDispatch)
         COM_INTERFACE_ENTRY_AGGREGATE(IID_IInnObj, m_pInnerUnk) // Step 3
      END_COM_MAP()

      // Start of step 4
      HRESULT FinalConstruct()
      {
         HRESULT hr;
         CLSID   clsidInner;

         hr = CLSIDFromProgID(L"InnObj.InnObj.1", &amp;clsidInner);
         if (hr == S_OK)
            hr = CoCreateInstance(clsidInner, GetControllingUnknown(),
                                  CLSCTX_INPROC_SERVER, IID_IUnknown,
                                  (void**)&amp;m_pInnerUnk);
         return hr;
      } // End of step 4

      void FinalRelease(){m_pInnerUnk-&gt;Release();} // Step 5

      // IOutObj
   public:
      STDMETHOD(Test)();
   private:
      LPUNKNOWN m_pInnerUnk; // Step 1
   };

</PRE></OL>If the inner object is in the same ATL server, then you can use the
following code to create the inner object without CoCreateInstance:
<P>
<PRE>   HRESULT FinalConstruct()
      {
         return  CInnObj::_CreatorClass::CreateInstance(
             GetControllingUnknown(), IID_IUnknown,
             (void**)&amp;m_pInnerUnk);

      }

</PRE><h2>REFERENCES</h2>
 
<P>
Visual C++ Books Online: Visual C++ Books; C/C++ Language and C++ Library;
Active Template Library; Articles; Introduction to COM and ATL;
Introduction to COM; Aggregation
<P>
Visual C++ Books Online: Visual C++ Books; C/C++ Language and C++ Library;
Active Template Library; Articles; Fundamentals of ATL COM Objects;
Creating an Aggregate
<P>
(c) Microsoft Corporation 1997, All Rights Reserved.
Contributions by Chuck Bell, Microsoft Corporation
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: derive override<BR>
Keywords          : AtlControl AtlIss AtlServer<BR>
Technology        : kbole<BR>
Version           : WINDOWS:2.1<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Read Internal Floating-Point Function Names </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q66431 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/10/25">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Applications compiled for alternate math using the Microsoft C Compiler versions 6.0, 6.0a, 6.0ax, C/C++ version 7.0, and Visual C++ 1.00 are embedded with function calls in order to perform the floating-point calculations.  This can be observed by...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBQU,QAY5,QBFY,QA7R,QAGI,QAJQ,QAPN,QAHE,QBV8,QALX,QAGC,QAB9,QAUJ,QAH4,QAHH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Read Internal Floating-Point Function Names</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q66431 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 6.00 6.00a | 1.00 1.50 1.51 1.52
<PRE>MS-DOS                 | OS/2       | WINDOWS
</PRE>kbprg
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0 and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, version 1.0, 1.5, 1.51, and
      1.52
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Applications compiled for alternate math using the Microsoft C
Compiler versions 6.0, 6.0a, 6.0ax, C/C++ version 7.0, and Visual C++
1.00 are embedded with function calls in order to perform the
floating-point calculations.  This can be observed by viewing the .COD
listing file generated when compiling with the /Fc option.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The functions you see in the code perform a task similar to the 80x87
instructions that would be needed for the same situation. Therefore,
it is fairly easy to determine what the name of each function means
and what the function does.
<P>
Each name is composed of fields similar to the following
<P>
<PRE>   __a(far/near call)(segment)(operation)(data type)(reverse/pop)

</PRE>where
<P>
<PRE>   (far/near call) is either "F" or "N". This specifies that the
                   altmath helper is called either far or near.

   (segment)       is "f", "s", or "e". If the altmath helper
                   needs an argument, the compiler will set BX to
                   point to the argument. If the altmath routine
                   has an "f" in its segment field, then DS:BX points
                   to the argument. "s" means that SS:BX points to
                   the argument and "e" means ES:BX. If no argument
                   is needed, then "f" is used. (For example, __aNfadd
                   doesn't need an argument but instead uses st(0)
                   and st(1) off of the altmath stack, just like the
                   "fadd" 80x87 instruction.)

   (operation)     is similar to the 80x87 instructions. "add",
                   "sub", "mul", "div", "ld" (load to altmath stack),
                   and "st" (store from stack).

   (data type)     is one of the following:

                      "s" for single precision or float.
                      "d" for double precision or double.
                      "w" for word or 16 bit integer.
                      "l" for long or 32 bit integer.
                      "q" for qword or 64 bit integer.
                      ''  for no data type needed.

                   This field is used only when bx points to an
                   argument.

   (reverse/pop)   is "p", "r" or ''. In most cases, it is not
                   used. If the operation was a "st" (store), then a
                   "p" at the end means to pop the stack after the
                   store. If the operation was div or sub, then an
                   "r" means to do the reverse version of the
                   operation.

</PRE>So, __aNfadds is a near called routine that will add the top of the
altmath stack st(0) with the float (single precision) in DS:BX. This
is similar to "fadd  dword ptr ds:[bx]" in 80x87 code.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.00a 6.00ax 7.00 1.00 1.50 1.51<BR>
1.52<BR>
KBCategory: kbprg<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

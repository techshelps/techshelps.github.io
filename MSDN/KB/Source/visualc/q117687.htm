

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Misplaced __declspec Causes Error C2062, C2059, or C4 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117687">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1994/07/05">
<META NAME="Keywords" CONTENT="CLIss kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Compiling a C or C++ source file that contains an incorrectly placed __declspec keyword may cause the compiler to issue a warning or error message.  The possible messages and the version of the 32-bit compiler generating them are listed below:     ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QBFY,QAEY,QBBI,QAOT,QAK6,QAKP,QA56,QA55,QAX6,QACI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Misplaced __declspec Causes Error C2062, C2059, or C4</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117687</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Compiling a C or C++ source file that contains an incorrectly placed
__declspec keyword may cause the compiler to issue a warning or error
message.  The possible messages and the version of the 32-bit compiler
generating them are listed below:
<P>
<PRE>   Source     CL.EXE Version    Error/Warning

   C          8.xx              error C2062: type 'int' unexpected
   C++        8.xx              error C2059: syntax error :
   '__declspec(Storage_Class_Attribute)'
   C/C++      9.xx              error C2059: syntax error :
   '__declspec(Storage_Class_Attribute)'
   C          10.xx             error C2059: syntax error : 'type'
   C++        10.xx             warning C4230: anachronism used :
   modifiers/qualifiers interspersed, qualifier ignored

</PRE>where "Storage_Class_Attribute" is one of the following:

<UL><LI>thread
<LI>naked
<LI>dllimport
<LI>dllexport
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The compiler is generating one of these error message because an extended
storage-class attribute specified with the __declspec keyword has been
placed incorrectly. The extended storage-class attribute must appear to the
left of the calling-convention keyword, if a keyword is specified.
<P>
The sample code shown below illustrates both the correct and incorrect
placement of an extended storage-class attribute. In the declaration that
fails, the __declspec keyword is placed after the __cdecl keyword. In the
declaration that succeeds, the __declspec keyword is placed before the
__cdecl keyword.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none to compile as C source
    * /Tp to compile as C++ source (or use .cpp extension)
    */


      // This declaration will cause the C2062 and C2059 errors:
      void __cdecl __declspec(dllexport) Function2(void);

      // This declaration will compile successfully:
      void __declspec(dllexport) __cdecl Function1(void);

</PRE><h2>REFERENCES</h2>
 
<P>
For more information, search the online documentation included with Visual
C++, 32-bit Edition, on "__declspec," "thread," "naked," "dllimport,"
"dllexport," or "storage-class attributes."  For an in-depth discussion of
these topics and more, see the "Programming Techniques" book in the Visual
C++, 32-bit Edition, documentation set.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 9.00 export<BR>
Keywords          : CLIss kberrmsg<BR>
Version           : WINNT:1.0,2.0,4.0,5.0;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: CFormView-Based Server Shows Metafile When Not Active </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143299">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1996/01/30">
<META NAME="Keywords" CONTENT="CodeSam kbfile kbprg kbprint kbsample">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The FVServer application demonstrates using a CFormView based application as an OLE server object. One of the problems using CFormView is that the dialog-based view will not render itself into the metafile used to display the application when it ha...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAIF,QBVV,QAPN,QAH2,QAPF,QAML,QBXS,QAY2,QAB5,QADK,QAJH,QBVP,QAOE,QALS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: CFormView-Based Server Shows Metafile When Not Active</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143299</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 4.2b,
<P><PRE>     5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The FVServer application demonstrates using a CFormView based application
as an OLE server object. One of the problems using CFormView is that the
dialog-based view will not render itself into the metafile used to display
the application when it has been in-place activated and then deactivated.
<P>
This sample demonstrates one method of overcoming this limitation.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Fvview.exe">Fvview.exe</A> <I>(size: 79441 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
When you base your server on the CFormView class, you create a dialog
template with the resource editor to act as the view of the application. If
you activate the application in-place, the drawing occurs in the
CFormView::OnDraw(). Usually the CFormView derived class does not implement
any drawing.
<P>
When the user selects outside the in-place activation area the application
goes to the loaded state and any representation on the screen is handled by
rendering a presaved metafile. This metafile is created in the
COleServerItem::OnDraw() by passing in a device context (DC) for a metafile
and expecting the drawing to occur. In most cases the CView derived class's
OnDraw() or a separate function is called to actually render into the
metafile. See the Scribble tutorial for an example of how to accomplish
this.
<P>
In the case of a CFormView-derived class, this technique will not work
directly. One method of overcoming this limitation is to draw each of the
controls yourself. Some controls may not draw and you may have to use GDI
calls such as Rectangle() and LineTo() to actually draw the control.
<P>
Another method, which is demonstrated in this sample, is to BitBlt a
picture of the screen into a memory device context and save it. Then, when
the COleServerItem::OnDraw() is called, BitBlt the saved picture into the
metafile DC provided. The side benefit to this method is that you get a
Print Preview of the object for free from MFC, because it uses the same
metafile.
<P>
In the sample, the function CFVView::SetPicture() dynamically creates a
memory DC and a bitmap object. The bitmap object must be set to the size of
the current view before it is selected into the DC. This is accomplished by
setting a member variable in the document class to the size of the view
after the view is created. In the sample, the size is computed from the
size shown by the resource editor and uses hard-coded values. This seems
reasonable as long as you are not dynamically changing the size of the
dialog. See the documentation on CFVDoc::OnNewDocument() for the method
used to get the size in pixels of a dialog (also see KB article <B><A HREF="../WIN32SDK/Q125681.htm">Q125681</A></B>).
<P>
The only problem remaining is determining when the SetPicture() function
should be called. There are two locations. The first is in the
COleServerDoc derived class's CFVDoc::OnDeactivate(). This function is
called twice after the user selects outside the server's in-place
activation area. The first call is when the server is going from the
UIActive state to the Active state, and the second call is going from the
Active state to the Loaded state. We must distinguish between these two
calls because the first time it is called, the CFormView is visible and the
second time it's called, it is not visible. The server's DoVerb() is called
to hide the server between calls to OnDeactivate(). If we simply called
SetPicture() during OnDeactivate(), we would BitBlt a blank picture over
the good picture in the second call. Simply setting a switch solves that
problem.
<P>
The second place to call SetPicture() is in CFVView::OnActivateView(), an
override of the CView method. Check to make sure the view is being
activated, and then call SetPicture(). This last call is necessary for
embedding in Microsoft Excel, for example. Microsoft Excel does not
deactivate the server such that OnDeactivate() is called.
<P>
You must also handle the OnGetExtent() to set the initial size of the
CFormView application and handle OnSetExtent() to receive size changes. You
should also reset the size when the CFormView::OnSize() is called. If you
do not care to react to sizing changes these last calls are not necessary.
The sample handles some sizing problems, but not all. Disabling sizing
should be straight forward to accomplish.
<P>
You must also notify the container whenever the data changes. In this
simple application, NotifyChanged() is called in the SetPicture(), so any
time the application changes what the user is seeing, call SetPicture().
There may be other places where NotifyChanged() should be called. If you
call NotifyChanged() without calling SetPicture(), you will get the last
metafile that was saved and it may not show the current state the user
sees.
<P>
This application is not "bullet-proof", but is instead a starting point for
further development.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Inside OLE", second edition, by Kraig Brockschmidt.
"OLE 2 Programmer's Reference, Vol 1"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: meta-file<BR>
Keywords            : CodeSam kbfile kbprg kbprint kbsample<BR>
Technology          : kbole kbMfc<BR>
Version             : 4.0 4.1 4.2 4.2b 5.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

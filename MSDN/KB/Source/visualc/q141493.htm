

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC: "How to Use Debug Heap from C++" Documented Incorrectly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141493">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1995/12/19">
<META NAME="Keywords" CONTENT="CRTIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In the Run-Time Library reference, the section on Using the Debug Heap from Visual C++ incorrectly describes how to place an allocation made with the new operator into a _CLIENT_BLOCK. To access this section from Books Online, follow this hierarchy...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVX,QBFY,QBCF,QAH4,QANY,QAKM,QAY2,QA5V,QAFI,QAGI,QAAP,QAKC,QBXT,QBHQ,QBC6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOC: "How to Use Debug Heap from C++" Documented Incorrectly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141493</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the Run-Time Library reference, the section on Using the Debug Heap from
Visual C++ incorrectly describes how to place an allocation made with the
new operator into a _CLIENT_BLOCK. To access this section from Books
Online, follow this hierarchy:
<P>
Visual C++ Books
<UL><LI>C/C++
<P><PRE>    - Run-Time Library Reference
       - Debug Version of the C Run-Time Library
<PRE></PRE>          - Memory Management and the Debug Heap
             - Using the Debug Heap from C++

</PRE></UL><h2>MORE INFORMATION</h2>
 
<P>
In a debug build of an application, you can use a special operator (new) to
record the file name, the line number where the allocation occurred, and
the block type of the allocation. The documentation states that if you want
your allocations to be of type_CLIENT_BLOCK instead of _NORMAL_BLOCK you
should include code like the  following in an include file:
<P>
#ifdef _DEBUG
<P>
inline void* __cdecl operator new(unsigned int s)
<PRE>      { return ::operator new(s, _CLIENT_BLOCK, __FILE__, __LINE__); }

</PRE>#endif"
<P>
__FILE__ and __LINE__ are macros defined by the compiler that report the
current file name and line number. Macros are filled out by the
preprocessor; then the compiler replaces your call to new with this
function. Therefore, the macros have already been filled out before they
are inlined. Hence, they will report the header file information not the
actual source location.
<P>
There are two ways to mark the correct file name and line number:

<UL><LI>Call the debug version of the new operator directly
<P>
   -or-

<LI>Create macros that replace the operator new in debug mode as in the
   following sample code.
<P>
</UL><h3>Sample Code</h3>
 
<P>
<PRE>   /* MyDbgNew.h
   /* Defines global operator new to allocate from
   /* client blocks
   */
   #ifdef _DEBUG
      #define DEBUG_CLIENTBLOCK   new( _CLIENT_BLOCK, __FILE__, __LINE__)
   #else
      #define DEBUG_CLIENTBLOCK
   #endif // _DEBUG


   /* MyApp.cpp
   /*  Compile options needed: /Zi /D_DEBUG /MLd
   /*            or use a
   /*      Default Workspace for a Console Application to
   /*      build a Debug version
   */

   #include "crtdbg.h"
   #include "mydbgnew.h"

   #ifdef _DEBUG
   #define new DEBUG_CLIENTBLOCK
   #endif

   void main( )  {
     char *p1;
     p1 =  new char[40];
     _CrtMemDumpAllObjectsSince( NULL );
    }
</PRE> 
<PRE>Keywords          : CRTIss kbcode
Version           : WINNT:4.0,4.1,4.2,5.0;
Platform          : NT WINDOWS
Issue type        : kbdocerr</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

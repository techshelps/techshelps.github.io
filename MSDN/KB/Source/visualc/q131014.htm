

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Instantiate a Templated Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131014">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/05/31">
<META NAME="Keywords" CONTENT="CPPIss kbcode kbprg kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  There is no built-in way to create an explicit instantiation of a templated function. Normally, an instantiation is created when the function is called the first time with a specific type. Subsequent calls to the function with the same type use the...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBV8,QAB9,QAK6,QAGI,QBFY,QAJQ,QADX,QAIF,QBWP,QA4Q,QA36,QAPN,QAGT,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Instantiate a Templated Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131014</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 4.00
WINDOWS NT
kbtool kbprg kbcode
<P>
 
The information in this article applies to:

<UL><LI>The  Microsoft C/C++ Compiler (CL.EXE) included with:
<LI>Microsoft Visual C++ 32-bit Edition, versions 2.0, 2.1, and 4.0
<P>
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There is no built-in way to create an explicit instantiation of a templated
function. Normally, an instantiation is created when the function is called
the first time with a specific type. Subsequent calls to the function with
the same type use the same piece of the code generated before. However, if
you want to instantiate the function without actually calling it, you must
use one of the methods in this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The best method to use with function templates is to place the function
definition in a header file, and include that header file in all of the
source files.
<P>
If this is not an option then try one of these alternatives:

<UL><LI>In the source file where the function is defined, explicitly reference
   the function by taking the address of the function.
<P>
   -or-

<LI>In the source file where the function is defined, add a dummy function
   that makes a call to the templated function. The dummy function
   itself does not need to be called.
<P>
</UL>NOTE: With both of these alternative methods, a prototype still needs to be
provided for all source files that might call the templated function.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

/********** Source File One **********/
void func1(void);

</PRE>template &lt; class T&gt; T SwapTemplate(T Source) {
<PRE>   return Source;
</PRE>}
<P>
<PRE>void Dummy(void) {                            // Option One
   char a = 'a', b;
   b = SwapTemplate(a);
</PRE>}
<P>
<PRE>void main() {
   int (*pfunc)(int) = SwapTemplate;     // Option Two
   func1();
</PRE>}
<P>
<PRE>/********** Source File Two **********/

</PRE>template &lt; class T&gt; T SwapTemplate(T Source); // Prototype
<P>
<PRE>void func1(void) {
   int  a = 5, b;
   char c = 'c', d;
   b = SwapTemplate( a );
   d = SwapTemplate( c );
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 9.00 9.0 9.1 9.10 2.00 2.10 4.00<BR>
KBCategory: kbtool kbprg kbcode<BR>
KBSubcategory: CPPIss<BR>
Keywords          : CPPIss kbcode kbprg kbtool<BR>
Version           : 2.00 2.10 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

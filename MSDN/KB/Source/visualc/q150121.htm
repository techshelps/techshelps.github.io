

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: MFC Loads Wrong Resource in Extension DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150121">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/04/22">
<META NAME="Keywords" CONTENT="MfcDLL kbprg kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The wrong resource is loaded when CBitmap::LoadBitmap, CMenu::LoadMenu, CString::LoadString or any other MFC resource-loading function is called in an MFC extension DLL (AFXDLL). In some cases, a resource in the application is loaded instead of the...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIM,QAOG,QAKD,QAH4,QAJH,QA4H,QDNN,QAD7,QAGI,QBXS,QBFY,QBDM,QA56,QA55,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: MFC Loads Wrong Resource in Extension DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150121</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0,
      4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The wrong resource is loaded when CBitmap::LoadBitmap, CMenu::LoadMenu,
CString::LoadString or any other MFC resource-loading function is called in
an MFC extension DLL (AFXDLL). In some cases, a resource in the application
is loaded instead of the appropriate resource in the extension DLL.
<P>
<P><h2>CAUSE</h2>
 
<P>
When a resource in the application or another extension DLL gets loaded
instead of a resource in the current extension DLL, the cause is usually
improper resource management. An MFC application and all of its extension
DLLs are one global chain of resources. If there are multiple resources
with the same ID value in any of the modules in the chain, MFC uses the
first resource it finds with the desired ID value. The first resource is
often found in the application, which is searched before any of the
extension DLLs.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Change the ID values of any resources that conflict so they are unique in
both the application and any extension DLL that the application uses. These
values are stored in the Resource.h file for each project and can be
modified in the Resource Editor or AppStudio with the Resource Symbols
command.
<P>
To ensure that modules do not use conflicting symbol values, reserve
different ranges of ID values for each module in the 1 through 0x6FFFF
range. Set the _APS_NEXT_RESOURCE_VALUE definition in the Resource.h file
for each module to the low end of that module's range before creating any
resources. The Resource Editor uses this symbol to determine the ID value
of the next resource created.
<P>
This technique is documented in MFC Technical Note 35 and in the DLLHUSK
sample included with Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In .exe or .dll files that link to MFC dynamically, MFC resource-loading
functions call AfxFindResourceHandle() to obtain the handle of the
module where a resource is located. AfxFindResourceHandle() searches for
resources by type and symbol value in:

<UL><LI>The module returned by AfxGetResourceHandle(). This is usually
   the application.

<LI>The extension DLLs through the chain of CDynLinkLibrary objects.

<LI>Any language-specific resource DLLs.

<LI>Any attached MFC system DLLs (MFCxx.dll, for example).
<P>
</UL>NOTE: Some 16-bit MFC resource loading functions do not call
AfxFindResourceHandle(), but instead use the value returned from
AfxCurrentResourceHandle().
<P>
Each extension DLL creates, initializes, and then passes a CDynLinkLibrary
object to AfxInitExtensionModule() that places the DLL in the resource
chain. AfxTermExtensionModule() removes the DLL from the chain when the DLL
is detached from the application.
<P>
A benefit of this design is that MFC automatically locates a resource for
an application or extension DLL, even if that resource is located in a
distant extension DLL or the application itself. All resources in the
process are chained, so ID values are passed between DLLs and the
application and the proper resources are loaded. A disadvantage is that
there are no duplicate ID values between any of the extension DLLs or the
application that uses them.
<P>
To set the default location where AfxFindResourceHandle() first checks for
a resource, use AfxSetResourceHandle(). Because AfxFindResourceHandle()
first checks the handle set by AfxSetResourceHandle(), it can be used to
circumvent the chain and load a resource from one particular DLL or
application. The resource handle is restored to its original value
immediately after loading the resources. The current default resource
handle is found with AfxGetResourceHandle().
<P>
The DLLHUSK sample included with Visual C++ also illustrates this
technique. In Testdll2.cpp, CListOutputFrame::Create() sets the resource
handle to the module handle stored in the AFX_EXTENSION_MODULE structure
extension DLL. This structure is initialized with the module handle when it
is passed to the CDynLinkLibrary constructor in InitTestDLL2().
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on:

<UL><LI>Extension DLLs, see the MFC Technical Note 33 and the DLLHUSK sample.
<LI>Resource management in projects, see Technical Note 35.
</UL> 
<PRE>Keywords          : MfcDLL kbprg kbprg
Technology        : kbMfc
Version           : 1.0 1.5x 2.0x 4.1 4.2 5.0
Platform          : NT WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

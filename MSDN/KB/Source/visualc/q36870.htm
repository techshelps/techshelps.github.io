

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: C2106 Error Assigning a String Literal to a char Array </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q36870 ">
<META NAME="KBModify" CONTENT="1997/10/01">
<META NAME="KBCreate" CONTENT="1988/10/15">
<META NAME="Keywords" CONTENT="CLngIss kberrmsg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A common programming error in C involves an attempt to fill a character array, declared as  char arrayname[somelength],  with a string constant by using the simple-assignment operator (the equal sign,  = ). This attempt fails and the compiler gener...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABC,QA6A,QATX,QAK9,QBCF,QAAP,QAH4,QBFY,QA5E,QAMA,QAO3,QAO2,QAB4,QBWA,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: C2106 Error Assigning a String Literal to a char Array</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q36870 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A common programming error in C involves an attempt to fill a
character array, declared as "char arrayname[somelength]," with a
string constant by using the simple-assignment operator (the equal
sign, "="). This attempt fails and the compiler generates the
following message:
<P>
<PRE>   error C2106: '=' : left operand must be lvalue

</PRE>Simple assignment works to fill non-auto (global) character arrays and
character pointers (in C version 5.0 and later) with static text. The
required declarations are as follows:
<P>
<PRE>   char string1[10] = "String1";
   char *string2 = "String2";

</PRE>The text below presents two code examples to demonstrate correct and
incorrect methods to initialize strings.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code example does not compile correctly and produces the
C2106 error.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
    * Compile options needed: None
    */

   #include &lt;string.h&gt;
   char string1[10];

   void main(void);
   void main(void)
   {
      string1 = "String1";
   }

</PRE>The following example demonstrates various methods to copy strings.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
    * Compile options needed: None
    */

   /* This example demonstrates some string usage principles. */
   #include &lt;stdio.h&gt;
   #include &lt;string.h&gt;
   #include &lt;malloc.h&gt;

   char string1[40];       /* string1 is an array of char  */
   char *string2;          /* string2 is a pointer to char */
           /* Important: Know when to malloc space for string2. */

   void main(void);
   void main(void)
   {
      /* This shows the correct way to achieve the   */
      /* assignment intended by string1 = "String1"; */
      strcpy(string1, "Contents of string1");
      printf("1:%s\n\n", string1);

      /* These two assignments show two ways to     */
      /* use a char pointer with a string literal.  */
      string2 = "Contents of string2"; /* point to the literal */
      printf("2:%s\n", string2);

      /* allocate memory for char *string2 to point at */
      string2 = (char *)malloc(sizeof(string1));
      strcpy(string2, "Contents of string2, again");
      printf("3:%s\n\n", string2);
      free(string2);

      /* This shows a failed attempt to fill a char  */
      /* array by assignment through a char pointer. */
      string2 = string1;
      string2 = "Contents of string2, but not string1";
      printf("4:%s\n", string1);
      printf("5:%s\n\n", string2);

      /* This shows how correctly to use a pointer   */
      /* to fill a char array with a string literal. */
      string2 = string1;
      strcpy(string2, "Contents of string2, and also string1");
      printf("6:%s\n", string1);
      printf("7:%s\n\n", string2);
   }

</PRE>This code generates the following output:
<P>
<PRE>   1:Contents of string1

   2:Contents of string2

   3:Contents of string2, again

   4:Contents of string1
   5:Contents of string2, but not string1

   6:Contents of string2, and also string1
   7:Contents of string2, and also string1
</PRE> 
<PRE>Keywords          : CLngIss kberrmsg kbfasttip
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0; WINDOWS:1.0,1.5; WINDOWS  NT:1.0,2.0,2.1,4.0,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

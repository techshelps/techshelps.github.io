

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Compiler Generates Bad Char Pointer Code with /Ot </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117203">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/06/22">
<META NAME="Keywords" CONTENT="CodeGen kb16bitonly kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The compiler may treat an unsigned character pointer as an integer pointer when compiling using the /Ot option.  RESOLUTION  There are several ways to work around this problem:   - In the sample code in the  MORE INFORMATION  section, below, remove...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAH4,QAEF,QAOT,QAR4,QAYA,QAYL,QAO3,QAO2,QDKW,QAKP,QBV8,QA56,QA55,QA4Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Compiler Generates Bad Char Pointer Code with /Ot</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117203</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 6.00 6.00a | 1.00
<PRE>MS-DOS                 | OS/2       | WINDOWS
</PRE>kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0 and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The compiler may treat an unsigned character pointer as an integer pointer
when compiling using the /Ot option.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are several ways to work around this problem:

<UL><LI>In the sample code in the "MORE INFORMATION" section, below, remove the
   register modifier on the integer variable or remove the unsigned
   modifier on the character-string variable.
<P>
   -or-

<LI>Disable optimization by either compiling using the /Od option or by
   using #pragma optimize to disable optimization on a per-function basis.
<P>
   -or-

<LI>If you are using the C/C++ Compiler, version 7.0 or later, using the /f
   option (fast compile) causes the compiler to generate correct code.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem with the C Compiler for MS-
DOS, versions 6.0, 6.0a, 6.0ax, 7.0, and 8.0. This problem was corrected in
the C/C++ compiler for MS-DOS, version 8.0c, included with Visual C++ for
MS-DOS, version 1.5.
<P>
This problem does not occur with the 32-bit C/C++ Compiler, version
8.0, included with Visual C++ 32-bit Edition, version 1.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Using the /Fc option, you can generate an assembly listing of the source
code. This is an excerpt from the assembly listing of the sample code
below, which shows where the error occurs:
<P>
<PRE>   ;|***    while(ch==*str);
   ; Line 8
                $FC180:
    *** 00000f  8b 5e fe        mov   bx,WORD PTR [bp-2]      ;str
    *** 000012  8b 37           mov   si,WORD PTR [bx]
    *** 000014  81 e6 ff 00     and   si,255  ;00ffH
    *** 000018  75 f5           jne   $FC180

</PRE>Notice the code uses WORD PTR, when it should be using BYTE PTR.
The following is the code generated when one of the workarounds is used:
<P>
<PRE>   ;    while(ch==*str);
   ; Line 8
                L00180:
    *** 000010  8b 5e fc         mov     bx,WORD PTR -4[bp]
    *** 000013  8a 07            mov     al,BYTE PTR [bx]
    *** 000015  25 ff 00         and     ax,OFFSET 255
    *** 000018  8b f0            mov     si,ax
    *** 00001a  8b c6            mov     ax,si
    *** 00001c  3d 00 00         cmp     ax,OFFSET 0
    *** 00001f  75 03 e9 00 00   je      L00181
    *** 000024  e9 e9 ff         jmp     L00180

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Ot (/Fc to generate assembly listing)
*/

   #include&lt;stdio.h&gt;

   void main(void)
   {
      register int ch;
      unsigned char *str="abc";

      while(ch==*str);
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00ax 7.00 8.00 1.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CodeGen<BR>
Keywords          : CodeGen kb16bitonly kbbuglist kbfixlist kbtool<BR>
Version           : 6.00 6.00a 6.00ax 7.00 | 6.00 6.<BR>
Platform          : MS-DOS OS/2 WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

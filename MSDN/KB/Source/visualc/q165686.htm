

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Visual C++ 5.0 Readme, Wizard and User-Interface Issues </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165686">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1997/03/24">
<META NAME="Keywords" CONTENT="kbtlc">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Wizard and other User-Interface Issues  Use the ATL Object Wizard to Create ATL Objects ATL Proxy Generator May Not Properly Destroy VARIANTARGs Two New Template Variables Available to Custom AppWizards Problems with ClassWizard Generated Wrapper C...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QAW6,QAGI,QBBS,QAUD,QAIK,QAH4,QA56,QA55,QAL3,QAY5,QAH6,QAEF,QAWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Visual C++ 5.0 Readme, Wizard and User-Interface Issues</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165686</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
<P><h3>Wizard and other User-Interface Issues</h3>
 
<P>
Use the ATL Object Wizard to Create ATL Objects
ATL Proxy Generator May Not Properly Destroy VARIANTARGs
Two New Template Variables Available to Custom AppWizards
Problems with ClassWizard Generated Wrapper Classes for Visual Basic 5.0
ActiveX Servers
Newly Added Classes May Not be Displayed in the ClassView
ATL Controls in Visual Basic 5.0 Containers
Development Environment is Unresponsive While Processing a VBScript Macro
Add Microsoft Transaction Server Libraries to your Proxy/Stub Makefile
ClassView's Add Method and Add Property Dialogs Sometimes Allow Illegal
Return Types for Custom Interfaces
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Use the ATL Object Wizard to Create ATL Objects</h3>
 
<P>
Last-minute testing revealed that the ATL ClassWizard can reset properties
while editing interfaces and that the ATL ClassWizard allows users to
create different interfaces with the same name. This is a known problem and
Microsoft is working on it.
<P>
Workaround
<P>
Once you have used the ATL Com AppWizard, use the ATL Object Wizard to
create new ATL objects.
<P>
To Access the ATL Object Wizard:

<OL><P><LI>Right-click your project's classes in ClassView to display the shortcut
   menu.
</OL>2. Click the New ATL Object command.
3. In the left pane of the ATL Object Wizard dialog box, click Objects.
4. Click the Simple Object icon.
5. Click Next.
6. Use the resulting ATL Object Wizard Properties dialog box to define
<PRE>   your ATL object.

</PRE></OL><h3>ATL Proxy Generator May Not Properly Destroy VARIANTARGs</h3>
 
<P>
If you have used the multicast component of the ATL Proxy Generator to
generate ConnectionPoint broadcast code, (code that calls all active
connections on a connection point), then one or more of the generated
functions employs zero or more VARIANTARGs that are local to each function.
(VARIANTARG is typed as VARIANT using typedef in oaidl.h.) Correct use of
VARIANT includes a VariantInit call on the VARIANT before its use and
VariantClear afterward. (VariantInit sets a VARIANTARG to a known empty
state, VariantClear sets it back to a known state and frees all memory used
by the VARIANTARG.) The multicast component calls VariantInit for each
VARIANTARG but does not call VariantClear. In some cases, this may result
in memory leaks.
<P>
Workaround
<P>
Manually add call(s) to VariantClear to the code that is generated by the
multicast component. An alternative is to change all uses of VARIANTARG to
CComVariant and remove the calls to VariantInit because CComVariant calls
VariantInit in the constructor and VariantClear in the destructor.
<P>
<P><h3>Two New Template Variables Available to Custom AppWizards</h3>
 
<P>
<PRE>root_oem       Same as 'root' except translated to the OEM character set.
               Affects only upper ASCII characters in the project name
               (such as an umlauted character).

HM_FILE_OEM    Same as 'HM_FILE' except translated to the OEM character
               set. Affects only upper ASCII characters in the project name
               (such as an umlauted character).

</PRE>The Visual C++ tools work with the ANSI character set. Batch files, such as
makehelp.bat, work with the OEM character set--a legacy from the days of
DOS 1.0 that still exists. Most printable characters in these two sets are
the same. However, there are some differences in some of the upper ASCII
values used for European characters such as those that use an umlaut.
<P>
Problems with ClassWizard-Generated Wrapper Classes for Visual Basic 5
ActiveX Servers
 
<P>
With Visual Basic 5.0 you can create ActiveX Automation servers with
methods that can take Optional and Default parameters of any Visual Basic
intrinsic type. If you use MFC and want to access an object of a Visual
Basic ActiveX Automation server, you would, typically, use ClassWizard to
read the type information of the Visual Basic object and generate a class
that wraps the functionality of the Visual Basic Automation object. C++
does not have optional or default parameters and so the wrapper class that
ClassWizard generates will not mark parameters as Optional or Default.
<P>
For example, if you have a Visual Basic Server with the following function:
<P>
<PRE>   Function function2(Optional parm1 As Integer = 5)

   MsgBox parm1

   End Function

   ClassWizard will generate the following C++ wrapper function:

   VARIANT _MyVBObj::function2(short* parm1)

   {
    VARIANT result;
    static BYTE parms[] = VTS_PI2;

    InvokeHelper(0x60030001, DISPATCH_METHOD, VT_VARIANT,

     (void*)&amp;result, parms, parm1);

    return result;
   }

</PRE>If you call the ClassWizard generated function from your MFC program, you
will have to pass the argument even though Visual Basic marked it as
Optional.
<P>
Workaround
<P>
Override the function that ClassWizard generates with versions of the
function that take only the parameters you wish to pass. For example, in
the preceding case, if you didn't want to pass the optional parameter,
override the ClassWizard generated function as follows:
<P>
<PRE>   VARIANT _MyVBObj::function2()

   {
    VARIANT result;

    InvokeHelper(0x60030001, DISPATCH_METHOD, VT_VARIANT,

     (void*)&amp;result, NULL);

    return result;
   }

</PRE>In the preceding case, the default parameter for the Visual Basic server's
function2 would be used.
<P>
<P><h3>Newly Added Classes May Not be Displayed in the ClassView</h3>
 
<P>
Dependency scanning in Visual C++ 5.0 has changed from earlier versions of
Visual C++. Only files that are in the project will be scanned by
ClassView. The External Dependency folder is automatically populated by the
IDE and is not considered part of your project. If you want to see classes
from header files that are in the External Dependencies folder, insert that
file into your project. One easy way to insert a file from the External
Dependencies folder is by dragging and dropping it into the project.
<P>
<P><h3>ATL Controls in Visual Basic 5.0 Containers</h3>
 
<P>
If you're using the IQuickActivate interface in Visual Basic 5.0, you must
also support IPropertyNotifySink.
<P>
To use a control generated by the ATL Object Wizard in a Visual Basic 5.0
container, you must either add support for IPropertyNotifySink or remove
dependence on the IQuickActivate interface. To remove IQuickActivate
support, comment out the lines containing IQuickActivateImpl in the
control's class inheritance list and in the COM interface map.
<P>
For example, if you generate a Full Control called MyCtl with the ATL
Object Wizard, then go to MyCtl.h and comment out the line containing
IQuickActivateImpl in the CMyCtl class inheritance list:
<P>
<P>
<PRE>   class ATL_NO_VTABLE CMyCtl :
   ...
   // public IQuickActivateImpl&lt;CMyCtl&gt;


</PRE>Also, comment out the line containing IQuickActivateImpl in the COM
interface map in MyCtl.h:
<P>
<PRE>   BEGIN_COM_MAP(CMyCtl)
   ...
   // COM_INTERFACE_ENTRY_IMPL(IQuickActivate)


</PRE><h3>Development Environment is Unresponsive While Processing a VBScript Macro</h3>
 
<P>
The Visual C++ user interface does not respond to mouse clicks or
keystrokes until a macro finishes. Processing a lengthy macro gives the
appearance that the user interface has hung. This design prevents
indiscriminate interference between macros.
<P>
<P><h3>Add Microsoft Transaction Server Libraries to Your Proxy/Stub Makefile</h3>
 
<P>
If you are using a separate Proxy/Stub DLL created with the ATL COM Wizard,
add the library mtxih.lib as the first library on the link line.
<P>
ClassView's Add Method and Add Property Dialogs Sometimes Allow Illegal
Return Types for Custom Interfaces
<P>
The return type dropdown for Add Method and Add Property should be active
only for dispinterfaces and for custom interfaces with the attribute
<PRE>'local'. The return type is fixed at HRESULT for all other interface
</PRE>definitions--such as dual. Unfortunately, it is active for all non-dual
interfaces. The midl compiler will fail with error 2269 when you build your
project if you change the return type to something other than HRESULT or
SCODE for a property or method in a custom interface that doesn't have the
<PRE>'local' attribute.


 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbtlc<BR>
Technology          : kbatl<BR>
Version             : 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbreadme<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting More Than One Background Color in Graphics Mode </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q50411 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1989/10/30">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" It is not possible to display more than one background color on the screen when working in graphics mode. However, you can present the illusion of creating different background colors for various windows overlaid on top of the current background col...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAG9,QADF,QAPG,QATX,QAMB,QAK4,QBXS,QBFY,QBCF,QA5W,QA5A,QAPW,QBVV,QAJ9,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Getting More Than One Background Color in Graphics Mode</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q50411 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 1.00 1.50
MS-DOS
kbprg kbcode
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
It is not possible to display more than one background color on the
screen when working in graphics mode. However, you can present the
illusion of creating different background colors for various windows
overlaid on top of the current background color. Use _rectangle() and
_floodfill() to create the windows, and either _outtext() or
_outgtext() to output the text.
<P>
A common application is the creation of a screen similar to the
following:
<P>
<PRE>|-----------------------------------------------------------------|
|                                                                 |
|                                   Light Blue Background         |
|                                                                 |
|                |------------------------|                       |
|                |                        |                       |
|                |    Dark Blue           |                       |
|                |    Background          |                       |
|                |                        |                       |
|                |------------------------|                       |
|                                                                 |
|                                                                 |
|-----------------------------------------------------------------|

</PRE>This is not difficult. The primary problem is getting around the fact
that, when using _outtext(), the text always outputs on blocks of the
current background color. The result of this is that inside of your
dark blue window, you will have text surrounded by borders of light
blue (not very attractive!).
<P>
To work around this, you can rely on the fact that _floodfill() uses
the foreground color as its boundary, and not the background color.
Therefore, you can set the background and foreground color equal to
the color of the inner window (Dark Blue above), and draw a rectangle
with _GFILLINTERIOR to the size of the window you desire. Then, change
the foreground color with _setcolor(). Next, you can use _floodfill()
from point (0,0) with the boundary color set to the same color index
as the rectangle. After this, you can use _settextcolor() and
_outtext() to put text in the inner window without problem. A sample
program, WINDOW.C, is listed below.
<P>
An easier alternative is to use fonts. _outgtext() does not reset the
character background to the current background color. Instead, it
draws the character over any existing images already on the screen.
Therefore, all that is necessary is to create a filled rectangle of
the desired size, register and set the desired font, and output text
to that area of the screen by using _outgtext(). A sample program,
FONTS.C, can be found below.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* WINDOW.C: A sample program that illustrates changing the        */
/* color for a window using _outtext, _floodfill, and _rectangle.  */

#include &lt;graph.h&gt;                   /* for the graphics functions */
#include &lt;conio.h&gt;                   /* for getch()                */

void main(void)
</PRE>{
<PRE>   _setvideomode(_ERESCOLOR);        /* set to graphics mode      */
   _setbkcolor(_BLUE);               /* change background color   */
   _setcolor(1);                     /* set drawing color         */
   _settextcolor(3);                 /* set text color            */
   _rectangle(_GFILLINTERIOR,100,100,540,250); /* draw a window   */
   _setcolor(9);                     /* change color for fill     */
   _floodfill(1, 1, 1);              /* fill in the background    */
   _settextposition(14, 35);         /* coordinates inside square */
   _outtext("scribble");             /* output text inside square */
   getch();                          /* wait for a key hit        */
   _setvideomode(_DEFAULTMODE);      /* reset the video mode      */
}

</PRE> 
<P>
<PRE>/* FONTS.C : a slight modification to the "FONTS.C" program from    */
/* the QuickC 2.0 online Help system, which outputs the fonted text */
/* onto a "window" of a different color, easily producing the       */
/* effect of a secondary, window-area-only background color.        */

#include &lt;conio.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;graph.h&gt;

#define NFONTS 6

</PRE>unsigned char *face[NFONTS] =
{
<PRE>   "Courier", "Helvetica", "Times Roman", "Modern", "Script", "Roman"
</PRE>};
unsigned char *options[NFONTS] =
{
<PRE>   "courier", "helv", "tms rmn", "modern", "script", "roman"
</PRE>};
<P>
main ()
{
<PRE>   unsigned char list[20];
   /* modify the following path as necessary!!!!!   */
   char fondir[_MAX_PATH]="d:\\qc2\\samples\\*.fon";
   struct videoconfig vc;
   struct _fontinfo fi;
   short fontnum, x, y, mode = _VRES16COLOR;

   /* Read header info from all .FON files in given directory. */
   if (_registerfonts(fondir) &lt;= 0)
      {
      _outtext("Error: can't register fonts\n");
      exit(1);
      }

   /* Set highest available graphics mode and get configuration. */
   while (!_setvideomode(mode))
      mode--;
      if (mode == _TEXTMONO)
         exit(1);
      _getvideoconfig(&amp;vc);

   /* Display each font name centered on screen. */
   for (fontnum = 0; fontnum &lt; NFONTS; fontnum++)
      {
      /* Build options string. */
      strcat(strcat(strcpy(list, "t'"), options[fontnum]), "'");
      strcat(list, "h30w24b");

      _clearscreen(_GCLEARSCREEN);
      if (_setfont(list) &gt;= 0)
         {
         /* Use length of text and height of font to center text. */
         x = (vc.numxpixels / 2)
                 - (_getgtextextent(face[fontnum]) / 2);
         if (_getfontinfo(&amp;fi))
            {
            _outtext("Error: Can't get font information\n");
            break;
            }
         y = (vc.numypixels / 2) - (fi.ascent / 2);
         _moveto(x, y);
         if (vc.numcolors &gt; 2)
            /* set up the background window &amp; fill before text output
*/
            _setcolor(fontnum + 2);          /* set window color   */
         _rectangle(_GFILLINTERIOR, 100, 100, 540, 250);
         _setcolor(fontnum + 1);             /* set color for text */
         _outgtext(face[fontnum]);           /* output fonted text */
         getch();
         }
      else
         _outtext("Error: Can't set font\n");
      }
   _unregisterfonts();           /* free up memory used by fonts */
   exit(!_setvideomode(_DEFAULTMODE));
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 5.10 6.00 6.00a 6.00ax 7.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: CRTIss GraphicsIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

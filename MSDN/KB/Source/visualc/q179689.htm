

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: Hooking into the IUnknown of a COM Object in MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q179689">
<META NAME="KBModify" CONTENT="1998/01/22">
<META NAME="KBCreate" CONTENT="1998/01/21">
<META NAME="Keywords" CONTENT="MfcOLE kbfile">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This sample provides a generic technique to hook into:   - The IUnknown members of the interfaces implemented by a CCmdTarget-    derived COM object that is not an aggregate.   - The members of the inner IUnknown of a CCmdTarget-derived COM    obje...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAW6,QAPN,QBBS,QAB5,QA7O,QAOE,QAMN,QAPF,QAY2,QAH6,QA9Q,QAWM,QAJ9,QAGI,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: Hooking into the IUnknown of a COM Object in MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 22, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q179689</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This sample provides a generic technique to hook into:

<UL><LI>The IUnknown members of the interfaces implemented by a CCmdTarget-
   derived COM object that is not an aggregate.

<LI>The members of the inner IUnknown of a CCmdTarget-derived COM
   object that is created as an aggregated object.
<P>
</UL>By hooking into the IUnknown members of a COM object, useful debug
information, such as the current reference of the object when it changes,
and the symbolic names of the object's interfaces that are queried for, can
be determined. Also, the hook gives the flexibility to control what
interfaces of an object can be made available to other applications. The
more information section details the use of this functionality with an
example.
<P>
This sample applies the hooking technique to an OLE control generated using
ControlWizard. However, note that the same hooking technique could be
applied to any CCmdTarget-derived COM object that provides one or more
interface implementation(s).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Hookctrl.exe">Hookctrl.exe</A> <I>(size: 42496 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>In MFC, when a COM object instance is created in the implementation of
IClassFactory::CreateInstance, the component pieces (that is, the
aggregates) of this object, if any, are created by calling the virtual
function CCmdTarget::OnCreateAggregates. The default implementation of
OnCreateAggregates provided in CCmdTarget does nothing by returning TRUE.
<P>
In COM, an object that is aggregated to an outer object stores the latter's
IUnknown, which is called as the outer unknown or the controlling unknown.
This is done so that the inner object can delegate all the IUnknown calls
from its own interfaces to this outer unknown. MFC stores this controlling
unknown for an object in a public member variable of CCmdTarget called
"m_pOuterUnknown".
<P>
An object that is not aggregated by any other outer object has the above
variable set to NULL, implying that the controlling unknown for this object
is the same as its own IUnknown. This concept of outer unknowns being NULL
for an object that isn't aggregated can be used to hook in to its IUnknown
functions. This can be accomplished by replacing the object's IUnknown
implementation with a custom implementation. This custom implementation
(for example, IUnknownHook) can be made to provide more debug information
by displaying the object's current reference count whenever it changes, by
displaying the symbolic names of the object's interfaces that are queried
for, and so on. In addition, the IUnknown hook can be used to control what
interfaces of an object are accessible from other applications.
<P>
This sample illustrates the above hooking technique by applying it to an
OLE control generated using the ControlWizard. Installing the hook to an
OLE control gives access to the IUnknown implementation for all of its
interfaces when it is not created as an aggregate, and to the control's
inner IUnknown implementation when it is created as an aggregate.
<P>
The sample retrieves the symbolic name of the control's interfaces by
calling AfxGetIIDString, which is an undocumented MFC function. Also, the
sample replaces CInnerUnknown, which provides the implementation for the
inner IUnknown when an object is created as an aggregate, with
CMyInnerUnknown in order to gain access to the inner IUnknown
implementation.
<P>
Finally, the sample also demonstrates the use of this hook to control
interfaces that are not accessible from outside by returning E_NOINTERFACE
from IUnknownHook::QueryInterface. For example, if an OLE control wants to
use IPersistStorage for storing its persistence information, it can choose
not to expose IPersistStreamInit and IPersistMemory by returning
E_NOINTERFACE for the latter two interfaces. Note that the above example
assumes that control container uses one of these interfaces for storing the
control's persistence information: IPersistMemory, IPersistStreamInit, or
IPersistStorage.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information on the topics discussed above, please refer to
the following:

<UL><LI>MFC Technical Note #38, "MFC/OLE IUnknown implementation".

<LI>Chapter-2 in "Inside OLE", Second Edition, by Kraig Brockschmidt.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 2.00 2.10 2.20 4.00 4.10 4.20<BR>
Keywords          : MfcOLE kbfile<BR>
Version           : WINNT:5.0<BR>
Platform          : winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 22, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

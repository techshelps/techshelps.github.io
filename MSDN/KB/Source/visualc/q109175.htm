

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: How to Limit an MFC Application to a Single Instance </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109175">
<META NAME="KBModify" CONTENT="1997/05/28">
<META NAME="KBCreate" CONTENT="1993/12/23">
<META NAME="Keywords" CONTENT="kbcode kbfile kbsample MfcUI kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The ONETIME sample application demonstrates how to limit a Microsoft Foundation Class Library (MFC) application to a single instance.  NOTE: The technique shown in this article will not work with MFC versions 4.0 and later because MFC window classe...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QABN,QAPF,QABA,QABO,QAH4,QAJH,QALW,QAF3,QA2O,QAY2,QAG9,QBVV,QA6A,QANC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: How to Limit an MFC Application to a Single Instance</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109175</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++ 32-bit Edition, version 1.0, 2.0, 2.1
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The ONETIME sample application demonstrates how to limit a Microsoft
Foundation Class Library (MFC) application to a single instance.
<P>
NOTE: The technique shown in this article will not work with MFC versions
4.0 and later because MFC window classes are not pre-registered in these
versions. A similar technique is used in the ONET32 sample that was written
specifically for MFC versions 4.0 and later. For details, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q141752.htm">Q141752</A></B>
   TITLE     : SAMPLE: Limiting 32-bit Applications to a Single Instance

</PRE>The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Onetime.exe">Onetime.exe</A> <I>(size: 33906 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from
               Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
There are several ways to limit a Windows-based application to a single
instance. This sample program uses a technique where a custom window class
is registered for the application’s main frame window. In subsequent
instances, CWinApp::InitInstance() searches for this window class and then
activates the prior instance.
<P>
This technique was used because it is fairly easy to implement and is
portable to the Win32 application programming interface (API). Because the
BringWindowToTop() function works differently in Win32 from 16-bit Windows,
the SetForegroundWindow() function should be used instead of
BringWindowToTop() in applications that are based on Win32 only.
<P>
REMINDER: The following ONETIME technique will not work with MFC versions
4.0 and later because the window classes are not pre-registered. A similar
technique is used in the ONET32 sample, which was written specifically for
MFC versions 4.0 and later. For details, please see the following article
in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q141752.htm">Q141752</A></B>
   TITLE     : SAMPLE: Limiting 32-bit Applications to a Single Instance

</PRE><h3>Technique Used in the ONETIME Sample</h3>
 
<P>
The following code fragments show the essential requirements of this
technique:
<P>
Sample code to override CWinApp::InitApplication() to register the custom
window class:
<P>
<PRE>   BOOL COnetimeApp::InitApplication()
   {

     // Base class version actually does nothing.
     CWinApp::InitApplication();

     WNDCLASS wndcls;

     // Start with NULL defaults.
     memset(&amp;wndcls, 0, sizeof(WNDCLASS));

     // Retrieve WNDCLASS structure for default window class.
     ::GetClassInfo(AfxGetInstanceHandle(),"AfxFrameOrView",&amp;wndcls);

     // Give new class a unique name.
     wndcls.lpszClassName = "MyNewClass";

     // Register new class and return result from ::RegisterClass().
     return ::RegisterClass(&amp;wndcls);

   }

</PRE>Sample code to override CWinApp::InitInstance() to check for (and activate)
any previous instance of the application:
<P>
<PRE>   BOOL COnetimeApp::InitInstance()
   {

     // If this isn't the first instance, return FALSE
     // immediately. FirstInstance() will have already
     // activated the previous instance.

     if (!FirstInstance())
       return FALSE;

     SetDialogBkColor(); // Set dialog box background color to gray.
        .
        . // Continue with normal InitInstance code...
        .
   }

</PRE>Sample code to add a member function to your CWinApp-derived class that
actually does the work of checking for and activating a previous instance:
<P>
<PRE>   BOOL COnetimeApp::FirstInstance()
   {
     CWnd *PrevCWnd, *ChildCWnd;

     // Determine if another window with our class name exists...
     if (PrevCWnd = CWnd::FindWindow("MyNewClass",NULL))
     {
       // if so, does it have any popups?
       ChildCWnd=PrevCWnd-&gt;GetLastActivePopup();

       // Bring the main window to the top.
       PrevCWnd-&gt;BringWindowToTop();

       // If iconic, restore the main window.
       if (PrevCWnd-&gt;IsIconic())
          PrevCWnd-&gt;ShowWindow(SW_RESTORE);

       // If there was an active popup, bring it along too
       if (PrevCWnd != ChildCWnd)
          ChildCWnd-&gt;BringWindowToTop();

       // Return FALSE. This isn't the first instance
       // and you finished activating the previous one.
       return FALSE;
     }
     else
       return TRUE;  // First instance. Proceed as normal.
   }

</PRE>Sample code to override CFrameWnd::PreCreateWindow() to use your window
class instead of the one registered automatically by MFC:
<P>
<PRE>   BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)
   {
     cs.lpszClass = "MyNewClass";
     return TRUE;
   }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode kbfile kbsample MfcUI kbhowto<BR>
Technology          : kbmfc<BR>
Version             : 1.0 1.5 1.51 1.52 2.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: How to Use Automation Error Code &amp; Help from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122488">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1994/11/06">
<META NAME="Keywords" CONTENT="MfcMisc kbinterop kbole kbprb kbprg kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Visual Basic version 3.0 does not report automation errors that result from OLE automation exceptions. Instead, it reports an err value of 440 and a description string of  OLE Automation exception.  The actual wCode passed by the automation server ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAB4,QA2K,QAAP,QAPN,QA9Q,QA5F,QAMA,QAIJ,QAY2,QA56,QA55,QAYL,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: How to Use Automation Error Code &amp; Help from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122488</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 3.00 | 2.00
<PRE>WINDOWS        | WINDOWS NT
</PRE>kbole kbtshoot kbprg kbinterop kbprb
<P>
 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic
   programming system for Windows, version 3.0

<LI>The Microsoft Foundation Classes (MFC), included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++, 32-bit Edition, version 2.0
      on the following platform: x86
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Visual Basic version 3.0 does not report automation errors that result from
OLE automation exceptions. Instead, it reports an err value of 440 and a
description string of "OLE Automation exception." The actual wCode passed
by the automation server is lost.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
The More Information section in this article explains and illustrates a
method you can use to use the error information and help context code
returned by Visual Basic version 3.0 to start WinHelp from an MFC OLE
automation server.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design in Visual Basic version 3.0. Visual Basic for
Applications, included in Excel version 5.0 and other Microsoft products,
returns the wCode correctly.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When an MFC automation server throws an OLE dispatch exception by calling
AfxThrowOleDispatchException, an object of class COleDispatchException is
built. Its member variables include an OLE SCODE, a help context, string
error description, and wCode (an integer code used by Visual Basic).
<P>
The only information that the Visual Basic automation controller preserves
is the string description. However, the MFC OLE automation server can
preserve the information used in the call to AfxThrowOleDispatchException()
and expose an additional "Help" method that uses this information to
provide help to the user. From within the Visual Basic error handling code,
Err is 440, Error(Err) is "OLE Dispatch Exception" and Error$ is the actual
string passed by the server.
<P>
<P><h3>Sample Code Snippets</h3>
 
<P>
<PRE>/* Compile options needed:

   standard MFC OLE project generated by AppWizard*/

</PRE><P><LI>The method in the Automation server that throws the dispatch exception
   should retain the help context and wCode as member variable of the
   automation object as in this function:
<P>
<PRE>   void CMyObject::Exception()
   {
      m_nIDContext = &lt;some context&gt;;
      m_nSomeCode = &lt;some code&gt;;
      AfxThrowOleDispatchException(m_nSomeCode,"String",m_nIDContext);
   }

</PRE><P><LI>The Automation server should expose a method that uses those member
   variables to start WinHelp or another help engine with the actual
   context from the exception as in this code:
<P>
   short CMyObject::GetError()
   {
<P><PRE>      // From here you can use the member variable code
      // and context to start WinHelp or do whatever
      // help code you need to do ...
      AfxGetApp()-&gt;WinHelp(m_nIDContext);
      return m_nSomeCode;
</PRE>   }

<P><LI>The Visual Basic error handling routine should call the exposed error
   method in the Automation server when a dispatch exception occurs. Here
   is example Visual Basic code:
<P>
<PRE>   Sub Command1_Click ()
      On Error GoTo EHandle
      Dim a As object
      Set a = CreateObject("TestAuto")
      ' Next line causes exception:
      a.exception
   EHandle:
      Msg = "The error message for error number "
      Msg = Msg &amp; Err &amp; " is:" &amp; NL &amp; NL
      Msg = Msg &amp; """" &amp; Error(Err) &amp; """"
      MsgBox Msg  ' Display message.
      ' Next line starts WinHelp engine by calling method in server.
      a.GetError
      Exit Sub
   End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.50 3.00<BR>
KBCategory: kbole kbtshoot kbprg kbinterop kbprb<BR>
KBSubcategory: MfcMisc<BR>
Keywords            : MfcMisc kbinterop kbole kbprb kbprg kbtshoot<BR>
Technology          : kbMfc<BR>
Version             : 1.00 1.50 3.00 | 2.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

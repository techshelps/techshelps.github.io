

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Catch and Decipher DAO SDK-Based Exceptions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152695">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1996/06/20">
<META NAME="Keywords" CONTENT="dbDao kbcode kbprg kbtshoot MfcDAO">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article presents sample code for catching and deciphering exceptions that can be thrown by the DAO SDK class libraries.  MORE INFORMATION  The following is a sample try/catch loop and helper functions that demonstrate how to decipher either a ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAH4,QA1O,QABN,QAAP,QDMH,QAU5,QBCT,QAPN,QALQ,QAGC,QAGB,QAEF,QABO,QA40 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Catch and Decipher DAO SDK-Based Exceptions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152695</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The DAO SDK included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2,
<P><PRE>     4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article presents sample code for catching and deciphering exceptions
that can be thrown by the DAO SDK class libraries.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following is a sample try/catch loop and helper functions that
demonstrate how to decipher either a DAO SDK or MFC-based exceptions. The
content of these exceptions is in part (or fully) dumped by using TRACE().
<P>
<P><h3>Sample Code</h3>
 
<P>
The following code demonstrates a typical try/catch block using C++
Exception Handling for catching the DAO SDK CdbException, or one of
the MFC exceptions that the DAO SDK can also throw.
<P>
<PRE>    CdbDBEngine *pEng = NULL;

    try
    {
        // Call DAO SDK code here

        pEng = new CdbDBEngine();

        //... manipulate dbDao objects here ...

    }
    catch( CdbException e )
    {
        AfxDbDaoCatchException( e, pEng );
    }
    catch( CException *e )
    {
        AfxDbDaoCatchException( e );
    }
    catch( ... )
    {
        TRACE( "Caught Win32 Exception\n" );
    }

    if( pEng != NULL )
        delete pEng;

</PRE>The implementation of the both over-loaded versions of
AfxDbDaoCatchException() follows. You can easily expand the MFC
implementation to extract more information from those MFC Exception classes
which have additional data members and methods.
<P>
<PRE>///////////////////////////////////////////////////////////////////
//
// AfxDbDaoCatchException()
//
// Purpose:     Deciphers dbDao (DAO SDK) based exception.
//
// Parameters:  e    - Instance of CdbException class.
//              pEng - Pointer to DBEngine object (via the CdbDBEngine
//                     class).
//
// Returns:     n/a
//
//////////////////////////////////////////////////////////////////////

    void AfxDbDaoCatchException( CdbException &amp;e,
                                 CdbDBEngine  *pEng )
    {
        // Just in case exception handling code throws an exception
        try
        {
            // It's possible that the engine hasn't been instantiated yet
            if( pEng == NULL )
            {
                TRACE( _T("Caught CdbException attempting "
                          "to instantiate DBEngine.\n") );
                return;
            }

            // Log results of exception
            long nMax = pEng-&gt;Errors.GetCount();

            TRACE( _T("Caught CdbException, %ld Errors Reported:\n"),
                   nMax );

            // Traverse through contents of Errors Collection
            for( long l = 0; l &lt; pEng-&gt;Errors.GetCount(); l++ )
            {
                TRACE( _T("\t #%ld -- %s\n"),
                       pEng-&gt;Errors[l].GetNumber(),
                       pEng-&gt;Errors[l].GetDescription() );
            }

            // Log results of Last OLE Error. This may or may not be
            // the same as results stored in the Errors collection.
            // Ignore CdbLastOLEError.GetHelpFile and
            // CdbLastOLEError.GetHelpContext
            CdbLastOLEError exError;

            TRACE( _T("\t CdbLastOLEError.Source:       %s\n"),
                   exError.GetSource()      );
            TRACE( _T("\t CdbLastOLEError.Description:  %s\n"),
                   exError.GetDescription() );
        }
        catch( CException *e2 )
        {
            TRACE( "AfxDbDaoCatchException() "
                   "caught an exception, but was unable to log it\n" );
            e2-&gt;Delete();
        }
        catch(...)
        {
            TRACE( "AfxDbDaoCatchException() "
                   "caught an exception, but was unable to log it\n" );
        }
    }

//////////////////////////////////////////////////////////////////////
//
// AfxDbDaoCatchException()
//
// Purpose:     Catchs MFC-based exception.
//
//              This code assumes AFXWIN.H and AFXOLE.H have been
//              included in STDAFX.H
//
// Parameters:  e - Pointer to a class derived from MFC's
//                  CException class.
//
//////////////////////////////////////////////////////////////////////
   void AfxDbDaoCatchException( CException *e )
   {
// Just in case exception handling code throws an exception
       try
       {
            // Determine name of MFC Exception
            CString         strName;
            CRuntimeClass   *pClass;

            pClass = e-&gt;GetRuntimeClass();

            ASSERT( pClass != NULL );
            ASSERT( pClass-&gt;m_lpszClassName != NULL );

            TRACE( _T("Caught MFC Exception of Class: %s\n"),
                   pClass-&gt;m_lpszClassName );

            // Log additional information about error (if supported)
            // Only some derived classes from CException support
            // GetErrorMessage().

          if( e-&gt;IsKindOf(RUNTIME_CLASS(CFileException)
          || e-&gt;IsKindOf(RUNTIME_CLASS(COleException)
          || e-&gt;IsKindOf(RUNTIME_CLASS(COleDispatchException )
            {
                TCHAR   szBuf[256] = _T("");
                UINT    nHelpContextId;
                BOOL    bRetVal = TRUE;

                e-&gt;GetErrorMessage( szBuf, 256, &amp;nHelpContextId );

                if( strlen( szBuf ) &gt; 0 )
                {
                    TRACE( _T("\t Error Message = %s\n"), szBuf );
                }
            }
        }
        catch( CException *e2 )
        {
            TRACE( "AfxDbDaoCatchException() "
                   "caught an exception, but was unable to log it\n" );
            e2-&gt;Delete();
        }
        catch(...)
        {
            TRACE( "AfxDbDaoCatchException() "
                   "caught an exception, but was unable to log it\n" );
        }

        // Step 3: Delete Exception
        e-&gt;Delete();
    }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : dbDao kbcode kbprg kbtshoot MfcDAO<BR>
Technology          : kbMfc<BR>
Version             : 4.0 4.1 4.2 4.2b 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Assertion Failed Line 178 or Line 527 in ARCCORE.CPP </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128113">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/03/27">
<META NAME="Keywords" CONTENT="MfcFileIO MfcMisc kbbuglist kbcode kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  If a CArchive object is used with a user-defined buffer and the buffer is destroyed before the CArchive object has been destroyed, an assertion failure might occur. The message in the output window would be similar to:   - Test Windows Application:...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBQU,QACJ,QBXT,QA5V,QAIB,QDL9,QBWQ,QBWO,QBWN,QBFY,QAR4,QAGB,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Assertion Failed Line 178 or Line 527 in ARCCORE.CPP</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128113</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 | 1.00 2.00
<PRE>WINDOWS        | WINDOWS NT
</PRE>kbprg kbbuglist kbfixlist kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.5 and 1.51
    - Microsoft Visual C++, 32-bit Edition, versions 1.0 and 2.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If a CArchive object is used with a user-defined buffer and the buffer is
destroyed before the CArchive object has been destroyed, an assertion
failure might occur. The message in the output window would be similar to:

<UL><LI>Test Windows Application: File arccore.cpp, Line 178, Assertion Failed!
<P>
   -or-

<LI>Test Windows Application: File arccore.cpp, Line 527, Assertion Failed!
<P>
</UL>This will happen even if the CArchive object has been properly closed by
using the CArchive::Close function.
<P>
<P><h2>CAUSE</h2>
 
<P>
The CArchive destructor can be found in the &lt;MSVC install&gt;\MFC\SRC
directory in the file ARCCORE.CPP. The function is implemented as follows:
<P>
<PRE>// In 16-bit MFC:

</PRE>CArchive::~CArchive()
{
<PRE>  ASSERT(AfxIsValidAddress(m_lpBufStart,
     (UINT)(m_lpBufMax - m_lpBufStart)));
  // ...
  // ...
</PRE>}
<P>
<PRE>// In 32-bit MFC:

</PRE>CArchive::~CArchive()
{
<PRE>  ASSERT(m_bDirectBuffer || m_lpBufStart != NULL);
  ASSERT(m_bDirectBuffer ||
      AfxIsValidAddress(m_lpBufStart,m_lpBufMax - m_lpBufStart,
         IsStoring()));
  // ...
  // ...
</PRE>}
<P>
If a user-defined buffer is used for the archive (by passing it in as the
lpBuf parameter to the CArchive constructor), it should be valid to call
CArchive::Close on the archive, and then destroy the buffer before
destroying the CArchive object. However, the above ASSERT will be executed
when the CArchive object is destroyed whether the user-supplied buffer has
been destroyed or not.
<P>
If the buffer is destroyed before the CArchive object is destroyed,
m_lpBufStart might no longer point to a valid memory address. By default it
points to the address of the user-supplied buffer.
<P>
<P><h2>RESOLUTION</h2>
 

<OL><P><LI>You can safely ignore the assertion failure. It is harmless.

<P><LI>If you are using a user-supplied buffer, ensure that the CArchive object
   is destroyed before the buffer is freed. If the CArchive object is
   allocated on the stack, it can be allocated on the heap so that the
   CArchive object can be destroyed before the buffer, as in this example:
<P>
<PRE>   char *pBuf = new char[516];
   CFile file("C:\\TMP.DAT",CFile::modeCreate | CFile::modeWrite);
   CArchive *pArchive = new CArchive(&amp;file,CArchive::store,
                                      512,pBuf);
   // Use pArchive in here, then destroy it
   delete pArchive;

   // NOW free up the buffer
   delete pBuf;

</PRE></OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Microsoft
Visual C++ for Windows, version 1.52 and in Microsoft Visual C++, 32-bit
Edition, version 2.1.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 1.51 2.00 2.50 2.51 2.10 3.00 3.10<BR>
globalalloc load store<BR>
KBCategory:kbprg kbbuglist kbfixlist kbcode<BR>
KBSubcategory: MfcFileIO MfcMisc<BR>
Keywords          : MfcFileIO MfcMisc kbbuglist kbcode kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

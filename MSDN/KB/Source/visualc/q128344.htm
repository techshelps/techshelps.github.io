

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Error C2593: 'operator +' Is Ambiguous </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128344">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/03/29">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist400 vcfixlist500 kbcode kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When enumerated types are used in some (+-*/|*^%) operator overloads, the Microsoft compilers listed above may generate the following message:     Error C2593: 'operator +' is ambiguous  In Visual C++, 32-bit edition, version 2.1, the following war...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVW,QAVX,QAKM,QANY,QDKW,QBFY,QAB4,QA4Q,QAUD,QADX,QAAP,QAKP,QA56,QA55,QAR4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Error C2593: 'operator +' Is Ambiguous</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128344</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1,
<P><PRE>     4.0, 4.1, 4.2
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When enumerated types are used in some (+-*/|&amp;^%) operator overloads, the
Microsoft compilers listed above may generate the following message:
<P>
<PRE>   Error C2593: 'operator +' is ambiguous

</PRE>In Visual C++, 32-bit edition, version 2.1, the following warnings are also
displayed:
<P>
<PRE>   Warning C4387: 'enum Test __cdecl operator+(enum Test, enum Test)':
                  was considered
   Warning C4388: and built-in global operator was considered

</PRE>The "Sample Code" section in this article demonstrates this problem.
<P>
<P><h2>CAUSE</h2>
 
<P>
Without determining that there is an exact operator overload match, the
compiler is considering the enumerator types promoted to int type. This
causes the C2593 ambiguous error.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use one of the following three workarounds:

<UL><LI>With Visual C++ 32-bit Edition, versions 2.x and 4.x, you can work
   around the problem by using a  class template. See the "Sample Code to
   Work Around Problem" section in  this article. This workaround provides
   a class template that can be used  for any enum type. One of the
   parameters for the overloaded operator  needs to be of the class
   template type and the enums need to be declared  as the class type.
<P>
   -or-

<LI>You can call the overloaded operator using normal function call syntax.
   For example:
<P>
   eTest = operator+( eTest1, eTest2 );
<P>
   -or-

<LI>You can just use the built-in global operator, and then convert the
   result back to enum type. For example:
<P>
   eTest = Test( (int)eTest1 + eTest2 );
<P>
   where eTest, eTest1 and eTest2 are of type enum Test{}.
<P>
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Visual C++
version 5.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Reproduce Problem</h3>
 
<P>
<PRE>   /* Compiler options needed: None.
   */

   enum Test { ONE, TWO, THREE };

   Test operator+(Test eTest, Test eTest2)
   {
      Test   eRet = Test(int(eTest) + int(eTest2));
      return eRet;
   }

   void main()
   {
      Test    eTest=ONE, eTest2=TWO;
      eTest = eTest + eTest2;     // C2593 error
   }

</PRE><h3>Sample Code to Work Around Problem</h3>
 
<P>
<PRE>   /* Compiler options needed: None.
   */

   enum Test { ONE=1, TWO, THREE };

   template&lt;class T&gt; class CFix
   {
      T m_fix;

    public:

      CFix(T eFix) { m_fix = eFix; }

      operator T() { return  m_fix; }
   };

   Test operator+(CFix&lt;Test&gt; eTest, Test eTest2)
   {
      Test   eRet = Test(int(eTest) + int(eTest2));
      return eRet;
   }

   void main()
   {
      CFix&lt;Test&gt;  eTest=ONE, eTest2=TWO;
      eTest = eTest + eTest2;
   }

</PRE><h2>REFERENCES</h2>
 
<P>
More information about operator overloading can be found in "The Annotated
C++ Reference Manual (Jan '94)" section 13.4.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: cpp 9.00 8.00 8.00c 10.00 10.10 10.20
<P>

<BR>
Keywords          : CPPIss vcbuglist400 vcfixlist500 kbcode kbtool<BR>
Version           : 7.0 1.0 1.5 1.51 1.52 2.0 2.1 4.<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbbug<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Static Object No Longer Static When Optimized </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119328">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/08/13">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When a static member function with a local static object is called from two different object modules, two different objects are created. This problem occurs when all of the following three conditions are met:   - The static member function is inlin...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAW6,QAPN,QAIF,QBFD,QAY5,QAVX,QAVW,QAH4,QBV8,QABI,QAKP,QBFY,QAB9,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Static Object No Longer Static When Optimized</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119328</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbprg kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ Compiler (CL.EXE) included with Microsoft
   Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a static member function with a local static object is called from two
different object modules, two different objects are created. This problem
occurs when all of the following three conditions are met:

<UL><LI>The static member function is inline.
<LI>The two calls are from separate files (object modules).
<LI>The code is optimized.
<P>
</UL><h2>CAUSE</h2>
 
<P>
For a local static object of an inline static member function, the
optimizer does not take into account that the static member function may be
called from other files.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around the problem, use one of the following suggestions:

<UL><LI>Make sure the static member function is not inlined.
<P>
<P><PRE>      -or-
</PRE>
<LI>Move all calls to the static member function into one file.
<P>
<P><PRE>      -or-
</PRE>
<LI>Turn off optimizations ( /Od ).
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. We are researching this problem and will post
new information here in theMicrosoft Knowledge Base as it becomes
available.
<P>
However this is not a problem in Microsoft Visual C++ 32-bit edition.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code demonstrates this error.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed : Default release options used by the
   Visual Workbench,or any /O optimizations except /Od.
*/

// test.h

#include &lt;iostream.h&gt;

void TestFunctionA();
void TestFunctionB();

</PRE>class Object
{
public:
<PRE> int    data;
 Object();
 ~Object();
</PRE>};
<P>
class Static
{
<PRE> public:
 static int staticFunc();
</PRE>};
<P>
inline  int  Static::staticFunc()
{
<PRE> static Object a;
 return a.data++;
</PRE>}
<P>
<PRE>// test1.cpp

#include "test.h"

void main()
</PRE>{
<PRE> TestFunctionA();
 TestFunctionB();
 TestFunctionA();
 TestFunctionB();
</PRE>}
<P>
<PRE>void TestFunctionA()
</PRE>{
<PRE> cout &lt;&lt; "a.data = " &lt;&lt; Static::staticFunc() &lt;&lt; endl &lt;&lt; flush;
</PRE>}
<P>
<PRE>// test2.cpp

#include "test.h"

</PRE>Object::Object()
{
<PRE> data=1;
 cout &lt;&lt; "Constructor call" &lt;&lt; endl &lt;&lt;  flush;
</PRE>}
<P>
Object::~Object()
{
<PRE> cout &lt;&lt; "Destructor call" &lt;&lt; endl &lt;&lt;  flush;
</PRE>}
<P>
<PRE>void TestFunctionB()
</PRE>{
<PRE> cout &lt;&lt; "a.data = " &lt;&lt; Static::staticFunc() &lt;&lt; endl &lt;&lt; flush;
</PRE>}
<P>
<PRE>/*  Correct output (no optimizations)  */

</PRE>Constructor call
objectA.data = 1
objectA.data = 2
objectA.data = 3
objectA.data = 4
Destructor call
<P>
<PRE>/*  Wrong output (with optimizations)  */

</PRE>Constructor call
objectA.data = 1
Constructor call
objectA.data = 1
objectA.data = 2
objectA.data = 2
Destructor call
Destructor call
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 buglist1.00 buglist1.50<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubCategory: CPPLngIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

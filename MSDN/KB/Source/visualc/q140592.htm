

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Implement Per-Property Browsing for a Custom Property </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140592">
<META NAME="KBModify" CONTENT="1998/02/17">
<META NAME="KBCreate" CONTENT="1995/12/04">
<META NAME="Keywords" CONTENT="CDKIss MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article illustrates how to implement per-property browsing for a custom property present in an OLE control. The custom property can be manipulated either in a property page that implements editing of this property or directly in the property b...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAB5,QAUD,QBWC,QAH4,QBS0,QA7O,QAOE,QAMN,QA9Q,QAW6,QBWA,QALW,QAWM,QAUJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Implement Per-Property Browsing for a Custom Property</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140592</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   - Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article illustrates how to implement per-property browsing for a
custom property present in an OLE control. The custom property can be
manipulated either in a property page that implements editing of this
property or directly in the property browser provided by the container
application.
<P>
When the property browser of Microsoft Visual Basic is used, for example,
selecting the custom property for editing displays a three-dot button next
to the property's value. Clicking the three-dot button displays the
property page associated with the property -- if one is available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An OLE control container typically provides some kind of user interface
where the user can manipulate the properties of the control. Some
containers may need to browse individual property values rather than groups
of property values, which is a technique commonly referred to as
per-property browsing. An OLE control can support non-default, per-property
browsing by implementing IPerPropertyBrowsing. Otherwise, the container
application uses the type information.
<P>
When an OLE control's property is manipulated using the property browser
provided by a container application, the container queries to find out if
the control supports IPerPropertyBrowsing. If an interface pointer can be
successfully obtained, the container then makes a call to
IPerPropertyBrowsing::MapPropertyToPage to obtain the CLSID of the property
page that implements editing of this particular property. If this method
returns S_OK or S_FALSE, the container creates a property frame with the
property page corresponding to the returned CLSID in it.
<P>
The success return codes (S_OK and S_FALSE) from
IPerPropertyBrowsing::MapPropertyToPage specify whether or not a property
can be edited outside the property page identified by the CLSID. A return
code of S_FALSE implies that this particular property can only be edited
through a specific property page -- not outside this property page. For
example, the property cannot be directly edited in the property browser of
Visual Basic. If the method returns S_OK, then the property can be
manipulated outside the property page. Please refer to the CDK Books Online
for more information on MapPropertyToPage and its return values.
<P>
The sample code in this article can be added to an OLE control to implement
a custom property that can only be edited using a specific property page --
not outside the property page. The code overrides two member functions of
COleControl, namely OnMapPropertyToPage and OnGetDisplayString. The MFC
framework calls OnMapPropertyToPage to obtain the CLSID of a property page
that implements editing of the property identified by a dispID. The
framework calls OnGetDisplayString to obtain a string representing the
property's value to be displayed in a container-supplied property browser.
<P>
<P><h3>Steps to Add Custom Property Named MyProp to an OLE Control</h3>
 
<P>
For the code to work, the ClassWizard must have been used to add a custom
property named MyProp to an OLE control. The following steps illustrate how
to add a custom property named MyProp using ClassWizard. This will use the
Get/Set Methods implementation:

<OL><P><LI>Load the OLE control project.

<P><LI>Open ClassWizard.

<P><LI>Click the OLE Automation tab.

<P><LI>Click Add Property.

<P><LI>In the External name box, type MyProp.

<P><LI>Under Implementation, select Get/Set Methods.

<P><LI>From the type box, select short as the property's type.

<P><LI>Type unique names for the Get and Set methods, or accept the default
   names, and then click OK.

<P><LI>Click OK to confirm the choices, and close ClassWizard.
<P>
</OL><h3>Sample Code</h3>
 
<P>
Once the MyProp property is added, the following code can be used to
display that property in the property browser provided by Visual Basic:
<P>
<PRE>   BOOL CTestCtrl::OnMapPropertyToPage(DISPID dispid, LPCLSID
    lpclsid, BOOL* pbPageOptional)
   {
        switch (dispid)
        {
         case dispidMyProp:
            // Return the CLSID of the property page that implements
            // editing of the MyProp property
            *lpclsid = CTestPropPage::guid;
            pbPageOptional = FALSE; // Can't be edited outside this page
            return TRUE;
        }

        return COleControl::OnMapPropertyToPage(
                            dispid, lpclsid, pbPageOptional);
   }

   BOOL CTestCtrl::OnGetDisplayString(DISPID dispid, CString&amp; strValue)
   {
        switch (dispid)
        {
         case dispidMyProp:
            // Return any string that should be displayed in the property
            // browser provided by VB
            strValue = _T("(My Property)");
            return TRUE;
        }

        return COleControl::OnGetDisplayString(dispid, strValue);
   }
</PRE></OL> 
<PRE>Keywords          : CDKIss MfcOLE
Technology        : kbMfc kbole
Version           : Winnet:1.5,1.51,1.52,2.0,2.1,2.2,4.0,5.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Bad Pointer from RUNTIME_CLASS with Class from _AFXDLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131946">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/06/25">
<META NAME="Keywords" CONTENT="MfcDLL kbprb kbprg kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An application uses the RUNTIME_CLASS macro to obtain a pointer to the CRuntimeClass associated with a class implemented in an extension DLL. When that pointer is used, an access violation or other unexpected behavior occurs.  CAUSE =====  The CRun...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QABO,QAY2,QA3P,QAOG,QAGI,QBME,QBXF,QAYA,QAO3,QAO2,QAHT,QBSO,QAA1,QACJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Bad Pointer from RUNTIME_CLASS with Class from _AFXDLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131946</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 4.00
WINDOWS NT
kbprg kbtshoot kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft Visual C++ 32-bit Edition, versions 2.0, 2.1, and 4.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An application uses the RUNTIME_CLASS macro to obtain a pointer to the
CRuntimeClass associated with a class implemented in an extension DLL. When
that pointer is used, an access violation or other unexpected behavior
occurs.
<P>
<P><h2>CAUSE</h2>
 
<P>
The CRuntimeClass data member of the class is not properly declared as
imported data.
<P>
For example, this error occurs if the CRuntimeClass object is exported via
the DLL's module definition (.DEF) file, but AFX_DATA is not defined as
__declspec(dllimport). This must be done in the header file containing the
class declaration when the .EXE that imports the class is built. This
enables the linker to resolve the reference to the CRuntimeClass using the
import library for the DLL, so no build-time errors occur. However, the
code generated by the compiler doesn't use the import table to determine
the address of the item.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Ensure that AFX_DATA is defined as __declspec(dllimport) when including the
class header file in code for the module that imports the class from the
DLL. See the "Sample Code" section of this article for a detailed example.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The DECLARE_DYNAMIC macro declares a CRuntimeClass object as follows:
<P>
<PRE>   static AFX_DATA CRuntimeClass class##class_name;

</PRE>Therefore, defining AFX_DATA as __declspec(dllimport) affects the
declaration of that object. The rest of this section describes why it is
important to do so.
<P>
The RUNTIME_CLASS macro is defined in afx.h as follows:
<P>
<PRE>   #define RUNTIME_CLASS(class_name) (&amp;class_name::class##class_name)

</PRE>In other words, this macro returns the address of the static CRuntimeClass
member added to the class by the DECLARE_DYNAMIC macro or one of its
cousins (DECLARE_SERIAL or DECLARE_DYNCREATE).
<P>
Here is some disassembled (X86) code from an EXE that uses a class named
CMyClass, which it imports from an extension DLL. The extension DLL uses
its module definition file to export the members of the class, and the
header file does not declare the class or any of its members as imported.
<P>
m_pMyClass has just been initialized as follows:
<P>
<PRE>   m_pMyClass = new CMyClass;

138:      ASSERT( m_pMyClass-&gt;IsKindOf(RUNTIME_CLASS(CMyClass)));
00401a9e   push      00402648
00401aa3   mov       eax,dword ptr [this]
00401aa6   mov       ecx,dword ptr [eax+000000d8]
00401aac   call      ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ...

</PRE>The code fails the assertion.
<P>
Here is the disassembly of the same code when the header file defines
AFX_DATA as __declspec(dllimport):
<P>
<PRE>138:      ASSERT( m_pMyClass-&gt;IsKindOf(RUNTIME_CLASS(CMyClass)) );
00401a95   mov       eax,dword ptr
 [_imp_?classCMyClass@CMyClass@@2UCRuntimeClass@@A (00406598)]
00401a9a   push      eax
00401a9b   mov       eax,dword ptr [this]
00401a9e   mov       ecx,dword ptr [eax+000000d8]
00401aa4   call      ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ...

</PRE>This code sequence passes the assertion, as expected.
<P>
Notice the difference in the way the stack is set up prior to the call to
IsKindOf, especially the first item pushed. In the second case, eax is
loaded with the address of an item located through the import table, while
in the first case, a direct value is used.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: None
*/

// MYCLASS.H
//   The following class declaration illustrates the CORRECT
//   way to declare the AFX_DATA symbol when exporting a class
//   from an extension DLL

</PRE>#undef  AFX_DATA
<PRE>#define AFX_DATA AFX_EXT_CLASS

</PRE>class CMyClass : public CObject
{
<PRE>  DECLARE_DYNAMIC()

  // ... other class members omitted for clarity
</PRE>};
<P>
#undef  AFX_DATA
<PRE>#define AFX_DATA

// end of header file

</PRE><h2>REFERENCES</h2>
 
<P>
For additional information on how to export classes from extension DLLs,
please see:

<UL><LI>MFC TechNote #33 in the Books OnLine.

<LI>The following article in the Microsoft Knowledge Base:
<P>
   ARTICLE-ID: <B><A HREF="../VISUALC/Q128199.htm">Q128199</A></B>
<PRE>   TITLE     : How to Use _declspec(dllexport) in an MFC Extension DLL
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 3.00 3.10 4.00<BR>
KBCategory: kbprg kbtshoot kbprb<BR>
KBSubcategory: MfcDLL<BR>
Keywords          : MfcDLL kbprb kbprg kbtshoot<BR>
Technology        : kbMfc<BR>
Version           : 2.00 2.10 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Modify the Keyboard-Flags Byte from a C Program </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71832 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/05/04">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following information, which may be used with Microsoft C and QuickC, describes how to access the keyboard-flags byte in the ROM BIOS data area from a C program. This procedure allows a keyboard key, such as INS (insert) or CAPS LOCK, to be set...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBMK,QAHE,QDIV,QBFY,QAH4,QAPF,QBXS,QBDT,QAY2,QAMN,QALG,QAKD,QAGX,QACI,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Modify the Keyboard-Flags Byte from a C Program</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71832 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 1.00 1.50
<PRE>MS-DOS                 | WINDOWS
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following information, which may be used with Microsoft C and
QuickC, describes how to access the keyboard-flags byte in the ROM
BIOS data area from a C program. This procedure allows a keyboard key,
such as INS (insert) or CAPS LOCK, to be set or cleared from within a
program. Note that the methods described below can be used to access
any particular memory location (not just the keyboard flags).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
At 0000:0417H in the ROM BIOS data area there is a byte that contains
information pertaining to the status of several keyboard keys. The
following table lists each bit and its meaning when set:
<P>
<PRE>   Bit No.   Decimal Value      Meaning If Set
   -------   -------------      --------------

     0            1             Right SHIFT key depressed
     1            2             Left SHIFT key depressed
     2            4             CTRL key depressed
     3            8             ALT key depressed
     4           16             SCROLL LOCK on
     5           32             NUM LOCK on
     6           64             CAPS LOCK on
     7          128             INS on

</PRE>The first step in reading or modifying this data from a C program is
to declare a pointer to the byte that contains the keyboard flags. For
example:
<P>
<PRE>   char far * flags = (char far *)0x00000417L;

</PRE>Once you have a pointer to the correct address, you can determine if a
particular flag is set by doing a bitwise-and with the decimal value
of the bit that represents the flag. For example, consider the
following conditional expression:
<P>
<PRE>   if ( (*flags &amp; 64) == 0 )
        printf("The CAPS LOCK key is not on.\n");

</PRE>If the CAPS LOCK key is on, the result of the bitwise-and is 64.
<P>
To turn off a particular flag, you must do a bitwise-and with the
one's complement of the flag's value (that is, ~flag). For example,
you can turn off the CAPS LOCK key as follows:
<P>
<PRE>   *flags = (char)(*flags &amp; ~64);

</PRE>To turn on a particular flag, perform a bitwise-or with the decimal
bit value of the flags you want to turn on. For example, the
following is an example of turning on the CAPS LOCK key:
<P>
<PRE>   *flags = (char)(*flags | 64);

</PRE>Much of this information is outlined in the Microsoft Press book
"Advanced MS-DOS Programming" by Ray Duncan.
<P>
The following sample program turns on the CAPS LOCK key and prompts
for some keyboard entry to demonstrate that CAPS LOCK is really set.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

#include &lt;stdio.h&gt;

void main(void);

void main()
</PRE>{
<PRE>   char far *flags = (char far *)0x00000417L;
   char string[10];

   *flags = (char)((*flags) | 64);

   printf("\nType something, it should be in CAPS: ");
   gets(string);

   *flags = (char)(*flags &amp; ~64);
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.00a 6.00ax 7.00 1.00 1.50<BR>
KBCategory: kbprg<BR>
KBSubcategory: CLngIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

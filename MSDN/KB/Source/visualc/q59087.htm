

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determining Size of Memory Block Referenced by a Pointer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q59087 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/02/27">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C, there is no C run-time library function that explicitly returns the amount of memory that has been allocated to a pointer by malloc(). However, it is possible to retrieve this information indirectly through the Microsoft C run-time ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAAP,QAB4,QBFY,QAY5,QAO3,QAO2,QAH4,QALW,QAYY,QBQU,QBV8,QA4Q,QAHC,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Determining Size of Memory Block Referenced by a Pointer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q59087 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 1.00 1.50 | 5.10 6.00 6.00a | 1.00 2.00
<PRE>MS-DOS                 | WINDOWS   | OS/2            | WINDOWS NT
</PRE>kbprg kbfasttip
<P>
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.0, 5.1, 6.0, 6.0a, and 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, and 6.0a
<LI>Microsoft C/C++ for MS-DOS, versions 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0 and 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft C, there is no C run-time library function that
explicitly returns the amount of memory that has been allocated to a
pointer by malloc(). However, it is possible to retrieve this
information indirectly through the Microsoft C run-time library
function _heapwalk(). The _heapwalk() function returns a heap
information structure of the following form:
<P>
<PRE>   struct _heapinfo {
       int far * _pentry;
       size_t _size;
       int _useflag;
   } _HEAPINFO;

</PRE>The information returned in this structure can be accessed directly or
used in writing a function that gives the size information you want.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

#include &lt;stddef.h&gt;
#include &lt;malloc.h&gt;

</PRE>size_t msize(void * pointer, int * error)
{
<PRE>   struct _heapinfo info; /* Heap info structure */
   int   heap_status;     /* Heap status */
   size_t  ret_val;       /* msize() return value */

   info._pentry = NULL;   /* Initialize heap info structure */

   do {
      heap_status = _heapwalk(&amp;info); /* Step through heap until */
   } while ((pointer != info._pentry) /* desired entry is found  */
     &amp;&amp; (heap_status == _HEAPOK));   /* or a heap error occurs. */

   if(heap_status == _HEAPOK)
      if(info._useflag != _FREEENTRY)
         ret_val = info._size;          /* No errors */
      else {
         ret_val = 0;                  /* Entry has been freed */
         *error = _FREEENTRY;
      }
   else {
      ret_val = 0;     /* A heap error occurred */
      *error = heap_status;
   }
   return(ret_val);
</PRE>}
<P>
NOTE: The msize() function takes as a parameter a pointer pointing to
the base memory that was allocated. For msize() to work correctly,
this pointer MUST point to the base of the allocated block, and not
anywhere within that block.
<P>
The msize() function returns the size of the allocated block or -1 if
an error occurs. If -1 is returned, an error code is returned through
the error parameter. The error parameter will be one of the following
manifest constants:
<P>
<PRE>   _FREENTRY      _HEAPEMPTY      _HEAPBADPTR
   _HEAPBADBEGIN  _HEAPBADNODE    _HEAPEND

</PRE>These error codes are generated by the Microsoft run-time library
function _heapwalk(). Refer to your Microsoft C Compiler documentation
on _heapwalk() for more information on the meaning of these error
codes.
<P>
Following is a sample program that uses the msize() function to find
the amount of memory allocated to a pointer. This function is designed
to work in any memory model:
<P>
<P><h2>Sample Program</h2>
 
<P>
<PRE>#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;

</PRE>size_t msize(void *, int *);
<P>
<PRE>void main (void)
</PRE>{
<PRE>   char * p;
   int    error;
   size_t size;

   p = (char *)malloc(sizeof(char) * 11);
   if(p == NULL) {
      printf("Memory allocation error\n");
      return;
   }

   size = msize(p,&amp;error);
   if(size == 0)
      printf("An msize error has occurred\n");
   else
      printf("Size = %u\n", size);
</PRE>}
<P>
NOTE: The malloc() function allocates 11 bytes of memory for use by
the pointer p. Surprisingly, msize() returns 12 as the size of the
allocated block. Actually, this is an expected result. Malloc() always
allocates even-byte amounts as a result of PC architecture.
Consequently, msize()'s return value is always an even amount.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.00a 6.00ax 7.00 1.00 1.50 2.00<BR>
KBCategory: kbprg kbfasttip<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

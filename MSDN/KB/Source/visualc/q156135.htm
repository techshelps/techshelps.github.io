

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: CRecordset::m_lCurrentRecord Gives Inaccurate Values </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156135">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/09/17">
<META NAME="Keywords" CONTENT="MfcDatabase vcbuglist420 vcfixlist500 kbprg kbbuglist kbfixlist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  CRecordset::m_lCurrentRecord does not correctly decrement when CRecordset::MovePrev() is invoked.  CAUSE =====  CRecordset::m_lCurrentRecord tracks the absolute position of a record within a recordset. It is modified using a value passed to the CRe...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVV,QAGX,QAPN,QAR4,QAKR,QAKD,QAHE,QAAP,QACI,QAFV,QAM1,QAGI,QAEF,QAI4,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: CRecordset::m_lCurrentRecord Gives Inaccurate Values</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156135</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.2, 4.2b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
CRecordset::m_lCurrentRecord does not correctly decrement when
CRecordset::MovePrev() is invoked.
<P>
<P><h2>CAUSE</h2>
 
<P>
CRecordset::m_lCurrentRecord tracks the absolute position of a record
within a recordset. It is modified using a value passed to the
CRecordset::Move() method. The CRecordset::MovePrev() method incorrectly
increments the value of m_lCurrentRecord instead of decrementing it.
<P>
The source for CRecordset::MovePrev(), from Afxdb.inl, line 83-84 is shown
below:
<P>
<PRE>   _AFXDBCORE_INLINE void CRecordset::MovePrev()
      { ASSERT(IsOpen()); Move(1, SQL_FETCH_PRIOR); }

</PRE>The value should be as follows:
<P>
<PRE>   _AFXDBCORE_INLINE void CRecordset::MovePrev()
      { ASSERT(IsOpen()); Move(-1, SQL_FETCH_PRIOR); }

</PRE>However, since CRecordset::MovePrev() is not virtual, it is not possible to
correctly override this method.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
The solution is to override the CRecordset::SetRowsetCurrencyStatus() so
that it properly decrements the m_lCurrentRecord member for a MovePrev()
call. This is done in the switch statement for wFetchType ==
SQL_FETCH_PRIOR as shown in the sample code below.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug has been fixed in Visual C++
version 5.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The use of CRecordsetStatus should be restricted to information display,
and should not be relied on in a robust environment. m_lCurrentRecord is
not relational, and is not be accurate in a multi-user environment. A
better approach is to use bookmarks, which are more persistent. See the
following methods:
<P>
<PRE>   CRecordset::SetBookmark()
   CRecordset::GetBookmark()

</PRE>Use of some methods may cause the bookmark to be invalidated. To determine
when a bookmark is persistent and when it is not, see the following method:
<P>
<PRE>  CRecordset::GetBookmarkPersistence()

</PRE>The workaround presented below, however, ensures that
CRecordset::m_lCurrentRecord is as accurate as possible.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   extern void AFXAPI AfxSetCurrentRecord(long* plCurrentRecord,
                                            long nRows, RETCODE nRetCode);

   extern void AFXAPI AfxSetRecordCount(long* plRecordCount,
        long lCurrentRecord, long nRows, BOOL bEOFSeen, RETCODE nRetCode);

    void CMyRecSet::SetRowsetCurrencyStatus(RETCODE nRetCode,
                         UWORD wFetchType, long nRows, DWORD dwRowsFetched)
    {
        // dwRowsFetched is not used, avoid warning with dummy call
        dwRowsFetched = 0;

        int nDirection;

        // Set the fetch direction
        switch (wFetchType)
        {
        case SQL_FETCH_FIRST:
            nDirection = 1;
            if (nRetCode == SQL_NO_DATA_FOUND)
            {
                m_lCurrentRecord = AFX_CURRENT_RECORD_UNDEFINED;
                m_lRecordCount = 0;
            }
            else
                m_lCurrentRecord = 0;
            break;

        case SQL_FETCH_NEXT:
            nDirection = 1;
            AfxSetCurrentRecord(&amp;m_lCurrentRecord, nRows, nRetCode);
            AfxSetRecordCount(&amp;m_lRecordCount, m_lCurrentRecord, 1,
                m_bEOFSeen, nRetCode);

            // This is the only way to know you've hit the end (m_bEOFSeen)
            if (!m_bEOFSeen &amp;&amp; nRetCode == SQL_NO_DATA_FOUND
             &amp;&amp; m_lRecordCount == m_lCurrentRecord + 1)
                m_bEOFSeen = TRUE;
            break;

        case SQL_FETCH_LAST:
            nDirection = -1;
            if (nRetCode == SQL_NO_DATA_FOUND)
            {
                m_lCurrentRecord = AFX_CURRENT_RECORD_UNDEFINED;
                m_lRecordCount = 0;
            }
            else if (m_bEOFSeen)
                m_lCurrentRecord = m_lRecordCount - 1;
            else
                m_lCurrentRecord = AFX_CURRENT_RECORD_UNDEFINED;
            break;

        case SQL_FETCH_PRIOR:
            nDirection = -1;
            AfxSetCurrentRecord(&amp;m_lCurrentRecord, -1, nRetCode);
            break;

        case SQL_FETCH_RELATIVE:
            nDirection = nRows;
            AfxSetCurrentRecord(&amp;m_lCurrentRecord, nRows, nRetCode);
            AfxSetRecordCount(&amp;m_lRecordCount, m_lCurrentRecord, 1,
                m_bEOFSeen, nRetCode);
            break;

        case SQL_FETCH_ABSOLUTE:
            nDirection = nRows;
            if (nRetCode != SQL_NO_DATA_FOUND)
            {
                if (nRows &gt; 0)
                    m_lCurrentRecord = nRows - 1;
                else if (m_bEOFSeen)
                    m_lCurrentRecord = m_lRecordCount + nRows;
                else
                    m_lCurrentRecord = AFX_CURRENT_RECORD_UNDEFINED;
            }
            else
                m_lCurrentRecord = AFX_CURRENT_RECORD_UNDEFINED;

            AfxSetRecordCount(&amp;m_lRecordCount, m_lCurrentRecord, 1,
                m_bEOFSeen, nRetCode);
            break;

        case SQL_FETCH_BOOKMARK:
            nDirection = 0;
            m_lCurrentRecord = AFX_CURRENT_RECORD_UNDEFINED;
            break;
        }

        // Set the BOF/EOF flags
        if (nRetCode == SQL_NO_DATA_FOUND)
        {
            if (wFetchType == SQL_FETCH_FIRST
             || wFetchType == SQL_FETCH_LAST
             || wFetchType == SQL_FETCH_BOOKMARK)
            {
                // If MoveFirst/MoveLast fails, result set is empty
                // If SetBookmark fails, currency undefined
                m_bEOF = m_bBOF = TRUE;
            }
            else
            {
                m_bEOF = nDirection &gt;= 0 ? TRUE : FALSE;
                m_bBOF = !m_bEOF;
            }
        }
        else
        {
            m_bEOF = m_bBOF = FALSE;
        }
    }

</PRE> 
<PRE>Keywords          : MfcDatabase vcbuglist420 vcfixlist500 kbprg kbbuglist kbfixlist
Technology        : kbMfc
Version           : 4.2 4.2b
Platform          : NT WINDOWS
Issue type        : kbbug
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

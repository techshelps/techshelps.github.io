

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Place Static Text Labels Over Columns in a List Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140158">
<META NAME="KBModify" CONTENT="1997/11/10">
<META NAME="KBCreate" CONTENT="1995/11/22">
<META NAME="Keywords" CONTENT="MfcUI kbcode kbgraphic kbhowto kbui">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When creating Microsoft Foundation Class (MFC) applications that contain dialog boxes, developers often find it useful to add static text labels to identify dialog controls. One particular use of static text labels is to identify contents of column...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QBVR,QAC2,QADF,QACI,QA01,QATX,QAE1,QAVS,QAJP,QANX,QDMN,QALQ,QAE5,QA6A V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Place Static Text Labels Over Columns in a List Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140158</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 2.00 2.10 2.20 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbui kbcode kbgraphic kbhowto
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When creating Microsoft Foundation Class (MFC) applications that contain
dialog boxes, developers often find it useful to add static text labels to
identify dialog controls. One particular use of static text labels is to
identify contents of columns in a list box. This article describes a
technique that allows placement of these labels regardless of the font used
in the dialog box.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Create Columns in a List Box</h3>
 

<OL><P><LI>Define the list box with the LBS_USETABSTOPS style by selecting the
   Use Tabstops check box in the Resource Editor.

<P><LI>Call the CListBox::SetTabStops() function to set the tab stops.
   SetTabStops() expects tab stops specified using dialog units.

<P><LI>Insert tab characters ('\t') into the strings added to the list box.
   These tabs are expanded to form the columns.
<P>
</OL><h3>How to Place the Static Text Labels</h3>
 
<P>
To place the static text labels, you need to convert the tab stops to pixel
locations in the client area of the dialog box, and move the static text
labels to the appropriate location.
<P>
For this example, you need only be concerned with the horizontal position
of each column. The horizontal position is calculated according to the
following formula:
<P>
<PRE>   xpos = (avg_char_width * tab_stop_position) / 4.

</PRE></OL>The factor of 4 is required because each character is four dialog units
wide. Dialog units were designed around the System font, so other fonts may
not provide exact results. The accuracy depends on the value of
avg_char_width in the previous formula.
<P>
Windows rounds up when it calculates tab stop positions, so the previous
formula needs the following modification to force it to round up too:
<P>
<PRE>   xpos = (avg_char_width * tab_stop_position + 2) / 4

</PRE>For more information on how to calculate dialog units for all possible
fonts, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q125681.htm">Q125681</A></B>
   TITLE     : How to Calculate Dialog Base Units with
               Non-System-Based Font

</PRE>Article <B><A HREF="../WIN32SDK/Q125681.htm">Q125681</A></B> describes the following technique. Note that if the font is
a fixed-width font, you could just use GetTextMetrics to obtain the average
character width of the font, but that will only be accurate for fixed-width
fonts, so the general-purpose technique, which works for fixed-width and
variable-width fonts, is used below.
<P>
Use the following steps to create a list box with columns and static
text labels placed above each column:

<OL><P><LI>Define a dialog template with a list box (m_listbox) and one or more
   static text labels (m_text1 and m_text2).

<P><LI>In the derived class for the dialog box, define a handler for
   OnInitDialog(). Modify the OnInitDialog to provide functionality similar
   to that provided by the following code sample.
<P>
</OL><h3>Sample Code</h3>
 
<P>
BOOL CMyDlg::OnInitDialog()
{
<PRE>    CDialog::OnInitDialog();

    // Set tabstops at 100 and 200 dialog units
    int tab_stop[2] = {100, 200};
    VERIFY(m_listbox.SetTabStops(2, tab_stop));

    m_listbox.AddString("String1\tString2\tString3");

    CDC *pDC = m_listbox.GetDC();

    // Get a handle to the font used in the list box
    CFont *pFont;
    pFont = m_listbox.GetFont();

    // Select the list box font into the temporary DC
    CFont *pFontOld = pDC-&gt;SelectObject(pFont);

    // Call GetTextExtentPoint to compute the string dimensions
    // NOTE: use GetTextExtentPoint32 in Win32 for better results
    CSize size;
    GetTextExtentPoint(pDC-&gt;GetSafeHdc(),
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
      52, &amp;size);

    int avg_char_width = (size.cx/26 +1)/2;

    // Restore Original Font
    pDC-&gt;SelectObject(pFontOld);

    m_listbox.ReleaseDC(pDC);

    // Convert DLU to pixel positions
    int xPos1 = (tab_stop[0] * avg_char_width + 2)/4;
    int xPos2 = (tab_stop[1] * avg_char_width + 2)/4;

    // Only concerned about x right now, so y is set to 0
    CPoint mypt1(xPos1, 0);
    CPoint mypt2(xPos2, 0);

    // Convert the coordinates to be relative to the list box
    m_listbox.ClientToScreen(&amp;mypt1);
    m_listbox.ClientToScreen(&amp;mypt2);

    // Convert the screen coordinates back to coordinates that
    // are relative to the dialog box
    ScreenToClient(&amp;mypt1);
    ScreenToClient(&amp;mypt2);

    // Get the current position / width of the text labels
    CRect rect1,rect2;
    m_text1.GetWindowRect(&amp;rect1);
    m_text2.GetWindowRect(&amp;rect2);

    // Convert the rectangles to be relative to the dialog box
    ScreenToClient(&amp;rect1);
    ScreenToClient(&amp;rect2);

    // Move the text labels over the columns
    m_text1.MoveWindow(mypt1.x, rect1.top,
                       rect1.Width(),rect1.Height());
    m_text2.MoveWindow(mypt2.x, rect2.top,
                       rect2.Width(),rect2.Height());

    return TRUE;
</PRE></OL>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.50 1.51 1.52 2.00 2.10 2.20 4.00 1.00<BR>
2.5 2.50 2.51 2.52 3.0 3.00 3.1 3.10 3.2 3.20<BR>
KBCategory: kbui kbcode kbgraphic kbhowto<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbcode kbgraphic kbhowto kbui<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 2.00 2.10<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Stringize Operator Fails to Insert Backslashes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q68143 ">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1991/01/09">
<META NAME="Keywords" CONTENT="CLngIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft C and C/C++ compilers support the use of the stringizing preprocessor operator only in macros that take arguments. If a # precedes a formal parameter in the definition of a macro, the actual argument is enclosed in double quotation ma...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAOX,QA5A,QDOQ,QA50,QAH4,QBE7,QBE6,QAVX,QAVW,QAOT,QAAP,QAPF,QATO,QANY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Stringize Operator Fails to Insert Backslashes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q68143 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft C compiler for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
<LI>Microsoft C/C++ compiler for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The Microsoft C and C/C++ compilers support the use of the stringizing
preprocessor operator only in macros that take arguments. If a # precedes a
formal parameter in the definition of a macro, the actual argument is
enclosed in double quotation marks and treated as a string when the macro
is expanded.
<P>
If the argument contains characters that normally must be preceded by a
backslash (\) when appearing in a string (such as " or \), the backslash
should be automatically inserted. However, there are many cases where the
preprocessor fails to do this.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Following are some sample macros that use the stringizing operator. They
are followed by a line showing the incorrect preprocessor output (compiling
with /P) and the output that was expected.
<P>
<P><h3>Sample Code</h3>
 
<P>
Example 1:
<P>
<PRE>    #define print_filename(x) printf(#x);

    main()
    {
     print_filename(d:\test\sscanf.c)
    }

</PRE>Preprocessor Output:
<P>
<PRE>   printf("d:\test\sscanf.c");

</PRE>Expected Output:
<P>
<PRE>   printf("d:\\test\\sscanf.c");

</PRE>Example 2:
<P>
<PRE>    #define print_filename(x) printf(#x);

    main()
    {
       print_filename(This: \" prints an escaped double quote mark)
    }

</PRE>Preprocessor Output for C Compiler version 6.0:
<P>
<PRE>   printf("This: \\" prints an escaped double quote mark")

</PRE>Preprocessor Output for C/C++ Compilers, Versions 7.0 and above:
<P>
<PRE>   error C2001: newline in constant
   fatal error C1057: unexpected end-of-file in macro expansion

</PRE>Expected Output:
<P>
<PRE>   printf("This: \\\" prints an escaped double quote mark")

</PRE>Example 3:
<P>
<PRE>    #define print_stuff(x) printf(#x);

    main()
    {
       print_stuff(I am printing a quote: ")
    }

</PRE>Preprocessor Output:
<P>
<PRE>   error C2001: newline in constant
   fatal error C1057: unexpected end-of-file in macro expansion

</PRE>Expected Output:
<P>
<PRE>   printf("I am printing a quote: \"");
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CLngIss kbfasttip<BR>
Version             : 5.1 6.0 6.0a 6.0ax 7.0 1.5 1.0 2<BR>
Platform            : MS-DOS NT WINDOWS<BR>
Issue type          : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Signed char Type Converted to int Type at Function Call </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q38025 ">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1988/11/15">
<META NAME="Keywords" CONTENT="CRTIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Any char value equal to or greater than 0x80 is printed with 0xFF or 0xFFFFFF preceding it when the following steps are done:  1. An array of char is declared and initialized.  2. Later in the program, printf() is used to display the values of    t...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAI4,QAP2,QBFY,QA4Q,QBE7,QBE6,QAKD,QAGI,QANY,QAY5,QAOT,QBV8,QAKC,QDNG,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Signed char Type Converted to int Type at Function Call</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q38025 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Any char value equal to or greater than 0x80 is printed with 0xFF or
0xFFFFFF preceding it when the following steps are done:

<OL><P><LI>An array of char is declared and initialized.

<P><LI>Later in the program, printf() is used to display the values of
   the array element.

<P><LI>"%2x" is used as a format string. (See sample program below.)
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
The unsigned char type should be used when declaring the array or
the /J compiler option should be used to change the char type from its
default of signed char to unsigned char. Whether or not 0xFF or
0xFFFFFF is printed depends on the size of an integer on the host
system.
<P>
This is not a problem with the Microsoft C Compiler. In the sample
program below, the array called bits consists of elements of type
char. By default, the char type is a signed type in Microsoft C. In C,
when a variable is used as an actual argument in a function call,
usual unary data-type conversion is automatically performed before the
argument is passed to the function.
<P>
In particular, the signed char type is converted to the int type using
sign extension (see the Microsoft C Optimizing Compiler Language
Reference manual for data conversion rules.) Because the signed char
type can represent values from -128 to 127, and a negative value is
represented in two's complement form, any hexadecimal number greater
than 0x80, which is a negative value in a signed char type, will be
converted to a signed int type in corresponding two's complement form.
<P>
For example, on systems with 16-bit integers, 0x80 (-128) is converted
to 0xFF80; 0x81 (-127) is converted to 0xFF81. On systems where
integers are 32-bits in size, 0x80 is converted to 0xFFFFFF80 and 0x81
is converted to 0xFFFFFF81.
<P>
When using printf() with the unsigned hexadecimal integer format
specifier (%x), the values are displayed in unsigned hexadecimal
format. If "%d" is used, the values are displayed in signed decimal
format.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compiler options needed: none
   */

   #include &lt;stdio.h&gt;

   char bits[8] = {0x80, 0x81, 0x91, 0x00, 0x7f, 0x20, 0x40, 0x08} ;

   void main()
   {
      int i ;

      for (i=0; i&lt;8 ; i++)
         printf("%2x ", bits[i]) ;
      printf("\n") ;

      for (i=0; i&lt;8 ; i++)
         printf("%d ", bits[i]) ;
   }

</PRE></OL>Output on systems with 16-bit integers:
<P>
<PRE>   ff80 ff81 ff91  0 7f 20 40  8
   -128 -127 -111 0 127 32 64 8

</PRE>Output on systems with 32-bit integers:
<P>
<PRE>   ffffff80 ffffff81 ffffff91  0 7f 20 40  8
   -128 -127 -111 0 127 32 64 8
</PRE> 
<PRE>Keywords          : CRTIss kbfasttip
Version           : MS- DOS:5.1,6.0,6.00a,6.00ax,7.0;OS/2:5.1,6.0,6.00a;WIN3X:1.0,1.5;WINNT:1.0,2.0 ,4.0,5.0;
Platform          : MS-DOS NT OS/2 WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

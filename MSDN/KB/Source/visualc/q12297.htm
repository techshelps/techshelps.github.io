

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Rounding Error Casting Double to Long </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q12297 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1987/12/16">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An application produces incorrect results when it casts an expression of type double to type long.  CAUSE =====  The error is caused by differences in arithmetic precision.  STATUS ======  The C and C++ standards specify that when an application co...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHH,QAKC,QAAP,QBC6,QAKD,QBFY,QAG8,QAFO,QAK2,QAR4,QAJH,QAB4,QAV1,QAV0,QAL3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Rounding Error Casting Double to Long</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q12297 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 5.10 6.00 6.00a | 1.00 1.50
<PRE>MS-DOS                      | OS/2            | WINDOWS
</PRE>kbprg kbfasttip kbprb
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, and 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An application produces incorrect results when it casts an expression
of type double to type long.
<P>
<P><h2>CAUSE</h2>
 
<P>
The error is caused by differences in arithmetic precision.
<P>
<P><h2>STATUS</h2>
 
<P>
The C and C++ standards specify that when an application converts a
floating-point number to an integer, the number is truncated toward
zero. When rounding is the preferred behavior, the application can
add or subtract 0.5 as appropriate so truncation provides the
correct result. The text below presents a macro for this purpose.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code example demonstrates this behavior when compiled
with any floating point math option other than /FPa. The application
displays -4049 as the value for Long2 and Long4, which is incorrect.
The application displays the correct value -4050 for Long1 and Long3.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compile options needed: /FPc or /FPc87 or /FPi or /FPi87
 */

#include "stdio.h"
</PRE>main()
{
<PRE>   long    val1, val2, val3;
   double  mul1, mul2;
   val1 = 45000;
   mul1 = 0.09;
   mul2 = (double)val1 * mul1 * -1.00;
   printf("%7ld Long1 ", (long)mul2);
   val2 = (long)mul2;
   printf("%7ld Long2 ", (long)((double)val1 * mul1 * -1.00));
   printf("%7ld Long3 ", val2);
   val3 =(long)((double)val1 * mul1 * -1.00);
   printf("%ld Long4 \n", val3);
</PRE>}
<P>
The application produces the incorrect results by converting a 10-byte
real value to a long; the application produces correct results by
converting a 10-byte real to an 8-byte real and converting that value
to a long.
<P>
According to the type conversion rules, the conversion from a 10-byte
real to an 8-byte real rounds the number from -4049.99999999999985 to
-4050.0. When the application converts this value to a long, the value
-4050 results. However, when the application directly converts the
double value to a long, the application truncates toward zero. In this
example, -4049.99999999999985 becomes -4049.
<P>
Many numbers (such as .01) are repeating fractions in the binary
numbering system which cannot be represented exactly. Any
representation of these numbers is slightly more or less than the
"true" value. When a calculation involves one of these values, the
representation error propagates and can be magnified. Because the
error is present only in the least significant part of the number,
errors occur only when a calculation loses precision in an
intermediate value.
<P>
The conversions always truncate toward zero. The following macro
effectively rounds the number by increasing the magnitude of the
number by 0.5 then converting the number to an integer.
<P>
<PRE>   #define ROUNDL( d ) ((long)((d) + ((d) &gt; 0 ? 0.5 : -0.5)))

</PRE>The problem does not occur with the Microsoft Visual C++ 32-bit Editions as
Win32 does not support the long double data type for compatibility reasons.
<P>
For more information on converting floating-point numbers to integers,
see the type conversions section of the "C Language Reference" manual.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 5.10 6.00 6.00a 6.00ax 7.00<BR>
KBCategory: kbprg kbfasttip kbprb<BR>
KBSubCategory CLngIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

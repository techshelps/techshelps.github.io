

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Extracting Function ptr from a Variable arg List Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q47961 ">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1989/08/14">
<META NAME="Keywords" CONTENT="CLngIss kbcode kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C the va_arg() macro may be used to remove an item from a variable argument list. When the element to be removed is complex, however, you may have to typedef the item type. This is necessary because the va_arg() macro requires you to p...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAO2,QAO3,QAB9,QAYL,QBV8,QAH6,QAH7,QAD7,QAEF,QAGI,QAB4,QBQU,QBFY,QAYZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Extracting Function ptr from a Variable arg List Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q47961 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft C the va_arg() macro may be used to remove an item from a
variable argument list. When the element to be removed is complex, however,
you may have to typedef the item type. This is necessary because the
va_arg() macro requires you to provide the type of the item to be removed
from the list. For a pointer to a function, if you were to put the item
type (the declaration of the function ptr) as follows:
<P>
<PRE>   FuncPtr = va_arg (arg_list, (int(*)(void)) );

</PRE>The compiler would yield the following error:
<P>
<PRE>   C2059: Syntax Error : ')'

</PRE>You could try to get around this by grabbing the function pointer as a data
pointer, and then typecasting it to a function pointer, as in the following
line:
<P>
<PRE>   FuncPtr = (int (*)(void)) va_arg (arg_list, char *);

</PRE>This will work; however, you will get the following warning:
<P>
<PRE>   C4074: Non-standard extension used, cast of data pointer
          to function pointer

</PRE>The best solution is to typedef the function pointer. With a typedef, you
avoid both the error and the warning.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code passes a function pointer to a variable argument
list function, changes that pointer, and returns it to the calling
procedure. To implement this, however, you need to pass the function
pointer by reference. For this reason, a pointer is typedef'd to a function
pointer. Once in the variable argument list function, the pointer is
dereferenced to the function pointer to get at the actual function pointer.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   #include &lt;stdio.h&gt;
   #include &lt;stdarg.h&gt;

   typedef void (*FuncPtr)(void);
   typedef FuncPtr *PFuncPtr;

   void hello(void);
   void varfunc(int, ...);

   FuncPtr func1, func2;
   int i;

   void main(void)  {
      func1 = hello;
      printf ("Function pointer: func1 now points to Hello()\n");
      printf ("About to use func1 to make a call to Hello()\n\n");
      func1();
      printf ("Now lets pass these function pointers to our variable");
      printf (" argument list\n");
      varfunc(2, &amp;func1, &amp;func2);   /* To alter ptr, pass by reference */
      printf ("\nAfter the call to the variable argument procedure,\n");
      printf ("function pointer: func2 now points to Hello()\n");
      printf ("About to use func2 to make a call to Hello()\n\n");
      func2();
   }

   void hello(void)  {
      printf ("Hello, I'm in the procedure HELLO()\n");
   }

   void varfunc(int i, ...)  {
      va_list arg_ptr;
      PFuncPtr tmpfptr;                /* Temporary ptr to function ptr
   */

      printf ("\nIn function VARFUNC\n");
      va_start (arg_ptr, i);
      printf ("%d arguments were passed\n", i);
      tmpfptr = va_arg (arg_ptr, PFuncPtr);  /* Grab pointer to fnptr */
      *tmpfptr = hello;                      /* Assign fnptr addr of fn
   */
      tmpfptr = va_arg (arg_ptr, PFuncPtr);  /* Grab pointer to fnptr */
      *tmpfptr = hello;                      /* Assign fnptr addr of fn
   */
   }
</PRE> 
<PRE>Keywords          : CLngIss kbcode kbfasttip
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0; WINDOWS:1.0,1.5,1.51,1.52;  WINDOWS NT:1.0,2.0,2.1,4.0,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Realloc with _AFXDLL Causes Assertion or GP Fault </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114986">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/05/18">
<META NAME="Keywords" CONTENT="kb16bitonly MfcMisc kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A call to realloc() or _frealloc() from a debug build of an extension DLL (a DLL that uses the _AFXDLL version of MFC) causes the following to occur:   - In MFC, version 2.5: an assertion failure takes place in AFXMEM.CPP,    line 363.   - In MFC, ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBKN,QAVX,QAIF,QBW6,QBXS,QAR4,QALQ,QAKP,QAHC,QBFY,QAYL,QBQU,QAC1,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Realloc with _AFXDLL Causes Assertion or GP Fault</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114986</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbprg kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A call to realloc() or _frealloc() from a debug build of an extension DLL
(a DLL that uses the _AFXDLL version of MFC) causes the following to occur:

<UL><LI>In MFC, version 2.5: an assertion failure takes place in AFXMEM.CPP,
   line 363.

<LI>In MFC, version 2.0: the heap is corrupted, which generally causes a GP
   fault during subsequent allocations.
<P>
</UL><h2>CAUSE</h2>
 
<P>
In MFC, version 2.0, the debug version of AfxAppReAlloc() does not call the
application's debug memory allocation routines [AfxAppAlloc() and
AfxAppFree()]. Instead, it calls only realloc().
<P>
When malloc() is first called to obtain memory, the debug allocator
[AfxAppAlloc()] is used, which adds an entry to the Framework's list of
allocated memory blocks. However, realloc() simply frees the memory without
making a change to the list of memory blocks. This causes a GP fault when
further allocations are made because the framework's list of allocated
memory blocks has an entry that points to an already freed block of memory.
<P>
In MFC, version 2.5, the implementation of _frealloc (in AFXDLLX.H) fails
to set a stack-based Boolean value [bAllocObj()], which indicates whether
the application's memory allocator should use "global new" or "CObject
new". If the previous allocation or deallocation was done with CObject new
or "CObject delete," the Boolean variable is set to "TRUE" and the
subsequent call to realloc() fails to set it to "FALSE". This forces
CObject delete to be called on a block of memory that was not allocated
with CObject new. The comments above line 163 in AFXMEM.CPP explain that
the assertion failure is because of this problem.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The problem only occurs in a debug build. The debug implementation of
AfxAppReAlloc() calls only AfxAppAlloc(), copies the memory, and then calls
AfxAppFree(). You can work around the problem by using conditional
compilation to call malloc() and free() when doing a debug build. For
example, change
<P>
<PRE>   pNew = realloc(pOld,300)

</PRE>to the following:
<P>
<PRE>   #ifndef _DEBUG
      pNew = realloc(pOld,300);
   #else
      pNew = malloc(300);     // This ends up calling AfxAppAlloc
      memcpy(pNew,pOld,300);
      free(pOld);             // This ends up calling AfxAppFree
   #endif

</PRE>If you are using MFC, version 2.5, you can make a change in the _AFXDLL
include file, AFXDLLX.H (see "MFC TechNote 33" for information on
this file), which is installed in \MSVC\MFC\INCLUDE by default.
The change would be to modify the _frealloc() function so that
it properly changes the Boolean variable. The _frealloc() function
should be changed to the following:
<P>
<PRE>   extern "C"
   void __far* __cdecl _frealloc(void __far* pOld, size_t nSize)
   {
   #ifdef _DEBUG
      ASSERT(_AfxGetAppData()-&gt;lpfnAppReAlloc != NULL);
      _AfxGetAppDebug()-&gt;bAllocObj = FALSE;
   #endif
      return (_AfxGetAppData()-&gt;lpfnAppReAlloc)(pOld, nSize);
   };

</PRE>After you make the change, choose Rebuild All from the Project menu. You
must choose Rebuild All because you can't just recompile the module that
calls realloc(); you must rebuild the module that includes the header file
AFXDLLX.H.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft
Foundation Classes, versions 2.0 and 2.5. This bug was corrected in MFC
version 2.51, included with Visual C++ version 1.51.
<P>
This problem does not occur with Visual C++ 32-bit Edition.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.50<BR>
KBCategory: kbprg kbfixlist kbbuglist<BR>
KBSubcategory: MfcMisc<BR>
Keywords          : kb16bitonly MfcMisc kbbuglist kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

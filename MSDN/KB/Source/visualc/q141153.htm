

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Memory Not Freed to OS When Debugging on Windows NT 3.51 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141153">
<META NAME="KBModify" CONTENT="1997/07/25">
<META NAME="KBCreate" CONTENT="1995/12/12">
<META NAME="Keywords" CONTENT="WBDebug kbenv kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you run an application using a debugger under Windows NT 3.51, some heap-checking flags used by the operating system are changed. One of them prevents the heap from coalescing free blocks. This results in your application committing more memor...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QAG8,QBVV,QAY5,QDL9,QBWQ,QBWO,QBWN,QAHE,QAJH,QAJQ,QBWS,QBE7,QBE6,QDO3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Memory Not Freed to OS When Debugging on Windows NT 3.51</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141153</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Windows NT version 3.51
<LI>Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you run an application using a debugger under Windows NT 3.51, some
heap-checking flags used by the operating system are changed. One of them
prevents the heap from coalescing free blocks. This results in your
application committing more memory than it is actually using, which causes
a low memory condition to occur.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
These flags only exist in Windows NT 3.51; this is not an issue in earlier
versions of Windows NT or in Windows 95. It also is not an issue if you
have Service Pack 2 or Service Pack 3 installed for Windows NT 3.51.
<P>
To avoid the heap behavior, change the heap flags for your application. To
do this open the registry editor (Regedt32.exe) and create the following
key:
<P>
HKEY_LOCAL_MACHINE
<PRE>    Software
        Microsoft
            Windows NT
                Current Version
                    Image File Execution Options
                        myapp.exe

</PRE>Where 'myapp.exe' is the name of your application's .exe file.
<P>
For a retail system, create the value:
<P>
<PRE>   GlobalFlag = REG_SZ 0x70

</PRE>For a checked system, create the value:
<P>
<PRE>    GlobalFlag = REG_SZ 0x4f4470

</PRE>GlobalFlag is a bitmask; here are the heap-related bits:
<P>
<PRE>   FLG_HEAP_ENABLE_TAIL_CHECK      0x00000010
   FLG_HEAP_ENABLE_FREE_CHECK      0x00000020
   FLG_HEAP_VALIDATE_PARAMETERS    0x00000040
   FLG_HEAP_VALIDATE_ALL           0x00000080

</PRE>VALIDATE_ALL is the flag that disables coalescing blocks.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft is researching this behavior and will post new information here
in the Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 
<P>
If you build and run the following sample code, you can reproduce the
behavior by following these steps:

<OL><P><LI>Build the console application listed below with debugging information
   (/Zi compiler option).

<P><LI>Run the Windows NT Performance Monitor (in the Administrative Tools
   group). Press CTRL+I, and change the Object to Memory and the Counter
   to "Committed Bytes."

<P><LI>Return to Visual C++ and press F5 or otherwise start a debugging
   session. You will see the committed bytes displayed in Performance
   Monitor begin to steadily increase and not decrease at any point.
<P>
</OL>Because the application is iteratively allocating and then freeing the
same memory blocks, you would expect the committed bytes to go up and
down the same amount. But because of the heap flags and running the
application in a debugger, the behavior is not what you would expect.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: /Zi
   */

   #include &lt;windows.h&gt;

   void main()
   {
     int count;
     char *achar[10];

     while (TRUE)
     {
      for (count = 0; count &lt; 10; count++)
       achar[count] = (char*)HeapAlloc(GetProcessHeap(),
               HEAP_ZERO_MEMORY,10000);

      for (count = 0; count &lt; 10; count++)
       HeapFree(GetProcessHeap(),0,achar[count]);
     }
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: leak leaks GlobalAlloc malloc free new<BR>
Keywords          : WBDebug kbenv kbtshoot<BR>
Version           : 2.0 2.1 2.2 4.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>
Solution Type     : Info_Provided<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the stack::top and stack::empty Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158040">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/22">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the stack::top and stack::empty STL functions in Visual C++.  MORE INFORMATION  Required Header              Prototype ---------      template                                     // Function 1     value_...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAUD,QBV8,QAB9,QBFY,QALW,QDIJ,QAGB,QAEF,QABO,QA4Q,QAPF,QAI4,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the stack::top and stack::empty Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158040</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the stack::top and
stack::empty STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;stack&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>    template&lt;class _TYPE, class _C, class _A&gt;    // Function 1
    value_type&amp; stack::top();

    template&lt;class _TYPE, class _C, class _A&gt;    // Function 2
    const value_type&amp; stack::top() const;

    template&lt;class _TYPE, class _C, class _A&gt;    // Function 3
    bool stack::empty() const;

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The top function returns the topmost element of the stack. You should
ensure that there are one or more elements on the stack before calling the
top function. The first version of the top function returns a reference to
the element of the top of the stack, allowing you to modify the value. The
second function returns a constant reference, ensuring that you don't
accidentally modify the stack.
<P>
The empty function returns true if there are no elements in the stack. If
there are one or more elements, the function will return false. You should
use the empty function to verify that there are elements left on the stack
before calling the top function.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackTop&amp;Empty.cpp : Illustrates how to use the top function to
//                      retrieve the last element of the controlled
//                      sequence. It also illustrates how to use the
//                      empty function to loop though the stack.
// Functions:
//
//    top   :  returns the top element of the stack.
//    empty :  returns true if the stack has 0 elements.
//
// Written by Derek Jamison
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<PRE>#include &lt;stack&gt;
#include &lt;iostream&gt;

</PRE>typedef stack&lt;int,  deque&lt;int,allocator&lt;int&gt; &gt;,  allocator&lt;int&gt; &gt;
<PRE>        STACK_INT;

void main()
</PRE>{
<PRE>   STACK_INT stack1;

   cout &lt;&lt; "stack1.empty() returned " &lt;&lt;
      (stack1.empty()? "true": "false") &lt;&lt; endl;  // Function 3

   cout &lt;&lt; "stack1.push(2)" &lt;&lt; endl;
   stack1.push(2);

   if (!stack1.empty())                           // Function 3
      cout &lt;&lt; "stack1.top() returned " &lt;&lt;
      stack1.top() &lt;&lt; endl;                       // Function 1

   cout &lt;&lt; "stack1.push(5)" &lt;&lt; endl;
   stack1.push(5);

   if (!stack1.empty())                           // Function 3
      cout &lt;&lt; "stack1.top() returned " &lt;&lt;
      stack1.top() &lt;&lt; endl;                       // Function 1

   cout &lt;&lt; "stack1.push(11)" &lt;&lt; endl;
   stack1.push(11);

   if (!stack1.empty())                           // Function 3
      cout &lt;&lt; "stack1.top() returned " &lt;&lt;
      stack1.top() &lt;&lt; endl;                       // Function 1

   // Modify the top item. Set it to 6.
   if (!stack1.empty()) {                         // Function 3
      cout &lt;&lt; "stack1.top()=6;" &lt;&lt; endl;
      stack1.top()=6;                             // Function 1
   }

   // Repeat until stack is empty
   while (!stack1.empty()) {                      // Function 3
      const int&amp; t=stack1.top();                  // Function 2
      cout &lt;&lt; "stack1.top() returned " &lt;&lt; t &lt;&lt; endl;
      cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
      stack1.pop();
   }
</PRE>}
<P>
Program Output is:
<P>
stack1.empty() returned true
stack1.push(2)
stack1.top() returned 2
stack1.push(5)
stack1.top() returned 5
stack1.push(11)
stack1.top() returned 11
stack1.top()=6;
stack1.top() returned 6
stack1.pop()
stack1.top() returned 5
stack1.pop()
stack1.top() returned 2
stack1.pop()
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample top empty<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

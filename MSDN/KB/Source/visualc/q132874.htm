

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Tips for Improving Performance of VCMac Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q132874">
<META NAME="KBModify" CONTENT="1997/10/06">
<META NAME="KBCreate" CONTENT="1995/07/19">
<META NAME="Keywords" CONTENT="MacPrgIss VCMac kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article lists tips you can use to enhance performance of applications built with Visual C++ Cross-Development Edition for Macintosh (VCMac).  NOTE: This article does not give you a comprehensive list of techniques that can be used to speed you...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDO9,QAGI,QAMR,QAH4,QAU3,QAEF,QAXB,QA26,QAJH,QA9N,QAY5,QAA8,QDL9,QBWQ,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Tips for Improving Performance of VCMac Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q132874</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ version 2.0 Cross-Development Edition for
   Macintosh
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article lists tips you can use to enhance performance of applications
built with Visual C++ Cross-Development Edition for Macintosh (VCMac).
<P>
NOTE: This article does not give you a comprehensive list of techniques
that can be used to speed your VCMac application. To get the best out of
VCMac, you might need to fine tune your application to run better on a
Macintosh. Macintosh architecture is different from Windows architecture,
so a knowledge of Macintosh programming is essential to build good
Macintosh applications.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Tips for Improving Performance</h3>
 

<UL><LI>To determine which portions of the application need to be optimized, use
   the Profiler, which is documented in Appendix C of the 68K Programmer's
   Guide.

<LI>The process of creating a memory DC, creating a bitmap, and selecting
   the bitmap into the DC is expensive when performed on the Macintosh. It
   is faster to create the DC and cache it instead of recreating it every
   time.

<LI>Copying DIBs to the screen or to other DCs is expensive because the
   DIB color table must be converted and the DIB data must be reoriented.
   If a DIB will be rendered frequently, copy the DIB to a memory DC. For
   each screen update, copy the DC to the screen instead of the DIB.

<LI>Currently PeekMessage and GetMessage call WaitNextEvent if there aren't
   any messages waiting in the internal queue. WaitNextEvent on the
   Macintosh is considerably slower than PeekMessage and GetMessage are
   under Windows. You may want to wrap calls to PeekMessage or GetMessage
   in functions that limit the frequency by which PeekMessage or GetMessage
   are called to every two ticks. For more information on ticks, please see
   TickCount in the Inside Macintosh documentation.

<LI>Applications frequently perform background processing that is
   terminated as soon as there are messages to process.
   PeekMessage(PM_NOREMOVE) is often used to test for the existence of
   messages in the queue. To avoid the overhead associated with calling
   PeekMessage(), use GetInputState() instead. GetInputState doesn’t
   call WaitNextEvent.

<LI>If you allocate a lot of memory in fixed blocks (GlobalAlloc(GPTR) or
   LocalAlloc(LPTR)), switch to using relocatable blocks instead, and
   lock these blocks of memory while dereferencing them. This will reduce
   heap fragmentation and make memory allocations faster.

<LI>Increase your partition size to reduce the amount of code swapping
   and to prevent thrashing. The partition size is determined by the SIZE
   resource defined in a project’s .R file. The Generic.Mac sample contains
   an example .R file with a SIZE resource.

<LI>Segment the application so that code segments can be swapped out
   efficiently. Use consistent segment sizes such as 30k to 50k.
   Additionally, use the Profiler to optimize segmentation.

<LI>Use Compiler (speed or size) and Linker (opt:ref) optimizations
   available in the Project Settings. The debug Windows Portability
   Libraries perform a lot of parameter checking, so comparing speed and
   size with the debug libraries is not a valid exercise.

<LI>To reduce the size of the application, remove MacsBug symbols from
   shipping code.

<LI>To reduce the application size further, remove segment names from the
   CODE resources, and delete the MSCV resource used for debugging. Use an
   MRC script to do this.

<LI>Use special case drawing and screen updating associated with user
   feedback. For example, if you want to drag a shape across the screen,
   the Windows way of invalidating the old location (updating data
   structures and waiting for the WM_PAINT message to draw the update)
   does not work well on the Macintosh. A more efficient method follows
   in pseudo code:
<P>
   hdc = GetDC(hwnd);
   do
   {
<P><PRE>      msg = PeekMsg (mouse msgs only)
</PRE><P>
<P><PRE>      switch (msg)
      {
<PRE></PRE>         case WM_MOUSEMOVE:
            erase old one
            update data structure
            draw new location
            break;
         case ...

     } while msg != WM_MOUSEUP

</PRE><LI>The startup and shutdown times can be negatively impacted by reading or
   writing a lot of preferences with ProfileString APIs. Try to limit the
   number of preferences to be written out.

<LI>If the Profiler indicates that a specific WLM API is consuming too
   much time, use the wrapper functions to obtain the related data
   structure, and then call the appropriate Macintosh API directly.

<LI>Property sheets and property pages implemented using MFC would be slow
   on the Mac.  To workaround, use your own implementation of property
   pages. You could use native Mac calls to create property pages.
</UL> 
<PRE>Keywords          : MacPrgIss VCMac kbcode
Version           : WINNT:2.0;MAC:2.0;
Platform          : MACINTOSH NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: CFormView Does Not Change Child Positions on WM_MDINEXT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122184">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/10/27">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbcode kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The child controls of a CFormView do not get their positions restored (they do not get scrolled) if the CFormView is activated using WM_MDINEXT (CTRL+F6 or CTRL+TAB). This behavior is true for any CScrollView window that contains child controls.  C...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWQ,QBWO,QACI,QBVV,QAY5,QAH4,QAGQ,QBXQ,QAJP,QAR4,QAGI,QAJQ,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: CFormView Does Not Change Child Positions on WM_MDINEXT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122184</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 | 1.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbprg kbfixlist kbbuglist kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes, included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5
    - Microsoft Visual C++, 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The child controls of a CFormView do not get their positions restored (they
do not get scrolled) if the CFormView is activated using WM_MDINEXT
(CTRL+F6 or CTRL+TAB). This behavior is true for any CScrollView window
that contains child controls.
<P>
<P><h2>CAUSE</h2>
 
<P>
CTRL+F6 sends a WM_MDINEXT message to the MDIClient window. This message is
handled by Windows. During the processing of the WM_MDINEXT message,
Windows hides the MDIClient window temporarily. This in turn causes all
child windows to be hidden. The problem with this is that child windows
which are hidden are not moved when the ScrollWindow API function is
called. (The ScrollWindow function is used by CScrollView to scroll its
client area.) As a result, child windows are not moved during WM_MDINEXT
processing.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Modify the MFC source code and re-build the libraries. To re-build the
libraries, please follow the steps outlined in the section titled "How to
Build Other Library Versions" in the Class Library User's Guide.
<P>
NOTE: If you are rebuilding the MFC DLL (for example, MFC250D.DLL), you
should also rename the DLL. This is also mentioned in MFC TechNote #33.
<P>
The changes necessary are in the file VIEWSCRL.CPP. In this file you will
find two calls to ScrollWindow -- one in the ScrollToDevicePosition
function and other in the OnScrollBy function. Replace the call to
ScrollWindow in each of these functions with the following code; note that
the first two lines are different in each function:
<P>
<PRE>  // In ScrollToDevicePosition use the following two lines :

        int xAmount = xOrig - ptDev.x;
        int yAmount = yOrig - ptDev.y;

  // In OnScrollBy use the following two lines:

        int xAmount = -(x-xOrig);
        int yAmount = -(y-yOrig);

  // The rest of the following replacement code is the same in
  // both functions:

        if (IsWindowVisible())
        {

           // When visible, let Windows do the scrolling

           ScrollWindow(xAmount, yAmount);
        }
        else
        {

           // Windows does not perform any scrolling if the window
           // is not visible.  This leaves child windows unscrolled.
           // To account for this oversight, the child windows are
           // moved directly instead.

           HWND hWndChild = ::GetWindow(m_hWnd, GW_CHILD);
           if (hWndChild != NULL)
           {
             for (; hWndChild != NULL;
                hWndChild = ::GetNextWindow(hWndChild, GW_HWNDNEXT))
             {
               CRect rect;
               ::GetWindowRect(hWndChild, &amp;rect);
               ScreenToClient(&amp;rect);
               ::SetWindowPos(hWndChild, NULL,
               rect.left+xAmount, rect.top+yAmount, 0, 0,
               SWP_NOSIZE|SWP_NOACTIVATE|SWP_NOZORDER);
             }
            }
          }

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of the article. This bug was corrected in The Microsoft
Foundation Classes, version 3.0, included with Visual C++, 32-bit Edition,
version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Problem</h3>
 
<P>
The problem can be verified with the VIEWEX sample.

<OL><P><LI>Execute VIEWEX and choose File.New and select "Input Form View."

<P><LI>Shrink this child window until scroll bars appear.

<P><LI>Move the vertical scrollbar thumb to the bottom such that some of the
   controls are clipped at the top of the view.

<P><LI>Choose File.New and select "Simple Text."

<P><LI>Maximize this new child window.

<P><LI>Press CTRL+F6 to switch activation to the first child window -- the
   Input Form View.
<P>
</OL>At this point, the scrollbars will be gone but the controls will be in the
same vertical position -- partially clipped at the top of the form view.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 2.50 scroll<BR>
KBCategory: kbprg kbfixlist kbbuglist kbcode<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbbuglist kbcode kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 | 1.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

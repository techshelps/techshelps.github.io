

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Default Assignment Used, Not User-Defined operator=() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104650">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1993/09/27">
<META NAME="Keywords" CONTENT="CPPIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft  C++ Language Reference  for C/C++ version 7.0 states the following:     ...if the class declares a user-defined operator=() that takes an    argument of type  reference to class-name , no default assignment    operator is generated. ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABA,QA2O,QANY,QAKM,QBFY,QAHE,QAPN,QBVV,QAF6,QAG0,QAH4,QAP2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Default Assignment Used, Not User-Defined operator=()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104650</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft "C++ Language Reference" for C/C++ version 7.0 states the
following:
<P>
<PRE>   ...if the class declares a user-defined operator=() that takes an
   argument of type "reference to class-name", no default assignment
   operator is generated.

</PRE>(See the Memberwise Assignment and Initialization section of the Special
Member Functions chapter.) This statement may be confusing. However, the
term "argument" means formal parameter, not actual parameter.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following program outputs "Default assignment used". The default
assignment operator is used for the assignment and not Derived::operator=()
as might be expected. The Derived::operator(const Base &amp;) function
specifies a const Base &amp; for a formal parameter. Because there is no
operator=() that specifies a formal parameter of type "reference to class-
name", the default assignment operator is generated and used.
<P>
Some compiler vendors have interpreted the C++ language differently by
using the term "argument" in the specification to mean actual parameter. In
that case, the default assignment operator is not generated and the program
above will output "Derived::operator=() called" because an object of type
Derived is an object of type Base.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile Options needed: None
   */

   #include &lt;iostream.h&gt;

   char* message1 = "Derived::operator=() called";
   char* message2 = "Default assignment used";

   class Base
   {
   public:
      char* OperatorCalled;
      Base() { OperatorCalled = message2; }
   };

   class Derived : public Base
   {
   public:
      void operator=(const Base&amp;) { OperatorCalled = message1; }
      Derived() {}
   };

   void main()
   {
      Derived first, second;
      first = second;
      cout &lt;&lt; first.OperatorCalled;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.10<BR>
Keywords          : CPPIss<BR>
Version           : MS-DOS:7.0; WINDOWS:1.0,1.5,1.51,1.52; WINDOWS NT:1.0,2.0,2.1,4.0,5.0<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

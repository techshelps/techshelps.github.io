

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create an Automation Project Using MFC and a Type Library </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q178749">
<META NAME="KBModify" CONTENT="1998/02/06">
<META NAME="KBCreate" CONTENT="1998/01/02">
<META NAME="Keywords" CONTENT="MfcOLE kbinterop">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article illustrates, in detail, how to automate component integration with COM-compliant applications such as the Microsoft Office 97 applications.  MORE INFORMATION  The following section illustrates how you can create an MFC project. The exa...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBWS,QA01,QAY5,QDKX,QBHQ,QAJH,QBJZ,QAB9,QAJN,QAUJ,QAH4,QBV8,QBVR,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create an Automation Project Using MFC and a Type Library</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q178749</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, version 5.0
<LI>Microsoft OLE Libraries
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article illustrates, in detail, how to automate component integration
with COM-compliant applications such as the Microsoft Office 97
applications.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following section illustrates how you can create an MFC project. The
example automates Microsoft Excel. You can use the first 8 steps for any
project, and modify steps 9 through 15 when you work with another
application.
<P>
<P><h3>Create an Automation Project</h3>
 

<OL><P><LI> With Microsoft Developer Studio, start a new "MFC AppWizard (exe)"
<P><PRE>    project named "AutoProject".
</PRE>
<P><LI> In step 1 of the MFC AppWizard, choose "Dialog Based" for the
<P><PRE>    application type and then click Finish.
</PRE><P>
<P><PRE>    The New Project Information dialog box appears and indicates that the
    Classes to be created include:
</PRE><P>
<P><PRE>      Application: CAutoProjectApp in AutoProject.h and AutoProject.cpp
      Dialog: CAutoProjectDlg in AutoProject.h and AutoProjectDlg.cpp
</PRE><P>
<P><PRE>    Click OK to create the project.
</PRE>
<P><LI> In the project workspace, click the "Resource View" tab. Double-click
<P><PRE>    "AutoProject Resources" to expand the resource tree. Double-click
    Dialog in the Resource tree and double-click to select the dialog
    box resource "IDD_AUTOPROJECT_DIALOG".
</PRE>
<P><LI> Remove the Label control (IDC_STATIC) and the Cancel button (IDCANCEL).

<P><LI> Change the name of the OK button to "IDRUN" and the caption to "Run".
<P><PRE>    Close the AutoProject.rc dialog box design form.
</PRE>
<P><LI> Click ClassWizard on the View menu (or press CTRL+W).

<P><LI>Select the Message Maps tab. Select IDRUN in the Object Ids list box
<P><PRE>    and select "BN_CLICKED" in the Messages list box. Click Add Function
    and accept the function name "OnRun". Click OK to close the
    ClassWizard.
</PRE><P>
<P><PRE>    NOTE: This step adds a declaration for the function member "OnRun();"
    to the header file named AutoProjectDLG.h. This step also adds an empty
    skeleton message handler function named CAutoProjectDlg::OnRun() to the
    file named AutoProjectDLG.cpp.
</PRE>
<P><LI> Click ClassWizard on the View menu (or press CTRL+W).

<P><LI> Select the Automation tab. Click Add Class and choose "From a type
<P><PRE>    library". Navigate to select the object library for the application
    you wish to automate (for this example, choose the Microsoft Excel 8.0
    Object Library; the default location is C:\Program Files\Microsoft
    Office\Office\Excel8.olb) and click Open. Select all classes in the
    Confirm Classes list and click OK.
</PRE><P>
<P><PRE>    NOTE: The list box in the Confirm Classes dialog box contains all of
    the IDispatch interfaces (which are, after all, classes) in the
    Microsoft Excel type library. In the lower half of the dialog box you
    will see that an Implementation file named Excel8.cpp contains
    generated class wrappers derived from ColeDispatchDriver(), and the
    appropriate declaration  header file is named Excel8.h.
</PRE>
<P><LI>Click OK to close the MFC ClassWizard dialog box.

<P><LI>Add the following code to the CAutoProjectApp::InitInstance() function,
<P><PRE>    which loads and enables the COM services library:
</PRE><P>
<P><PRE>      BOOL CAutoProjectApp::InitInstance()
      {
<PRE></PRE>         if(!AfxOleInit())  // Your addition starts here
         {
            AfxMessageBox("Could not initialize COM dll");
            return FALSE;
         }                 // End of your addition

         AfxEnableControlContainer();
      .
      .
      .

      }

</PRE><P><LI>Add the following line to the #include statements at the top of the
<P><PRE>    AutoProject.cpp program file:
</PRE><P>
<P><PRE>      #include &lt;afxdisp.h&gt;
</PRE>
<P><LI>Add the include statement for excel8.h after the include statement for
<P><PRE>    stdafx.h at the top of the AutoProjectDlg.cpp program file:
</PRE><P>
<P><PRE>      #include "stdafx.h"
      #include "excel8.h"
</PRE>
<P><LI>Add automation code to the CAutoProjectDlg::OnRun() so that it appears
<P><PRE>    as shown below:
</PRE><P>
<P><PRE>      void CAutoProjectDlg::OnRun()
      {
<PRE></PRE>          _Application app;  // app is the Excel 8 _Application object

          // Start Excel and get Application object...
         if(!app.CreateDispatch("Excel.Application"))
         {
            AfxMessageBox("Couldn't start Excel.");
         }
         else
         {
            //Make Excel Visible and display a message
          app.SetVisible(TRUE);
          AfxMessageBox ("Excel is Running!");
         }
      }

</PRE><P><LI>Build and run the project.
<P>
</OL>RESULTS: When you click the Run button in the dialog box, Microsoft Excel
will be launched. Activate the Auto_Excel dialog box and dismiss the
message box. Microsoft Excel will quit when the CAutoProjectDlg::OnRun()
function ends because the application variable will have gone out of scope.
<P>
<P><h3>Additional Notes</h3>
 
<P>
Once you have added the classes from a type library to your project (as you
did in step 9 above), you will notice that many classes have been added to
the project. In ClassView, you can double-click a class to see the member
functions of that class and then double-click the member function to view
the definition of that function in the Excel8.cpp implementation file.
<P>
You need to go to the definition of a member function if you wish to verify
a return type or if you need to change a function's implementation. Any
time you change a function definition, remember to change the declaration
in the Excel8.h file. When doing so, be sure that you change the correct
function declaration; sometimes, the same name is given to member functions
of multiple classes--GetApplication() is one such example.
<P>
Although the steps above illustrate how to automate Microsoft Excel, you
can apply the same ideas to automating other applications. The list below
contains the filenames for the type libraries of the Microsoft Office 97
applications.
<P>
<PRE>   Application                           Type Library
   --------------------------------------------------
   Microsoft Access 97                   Msacc8.olb
   Microsoft Jet Database 3.5            DAO350.dll
   Microsoft Binder 97                   Msbdr8.olb
   Microsoft Excel 97                    Excel8.olb
   Microsoft Graph 97                    Graph8.olb
   Microsoft Office 97                   Mso97.dll
   Microsoft Outlook 97                  Msoutl97.olb
   Microsoft Powerpoint 97               Msppt8.olb
   Microsoft Word 97                     Msword8.olb

</PRE></OL>NOTE: The default location for these type libraries is C:\Program
Files\Microsoft Office\Office (except for Dao350.dll. The default location
for that file is C:\Program Files\Common Files\Microsoft Shared\Dao.)
<P>
<P><h2>REFERENCES</h2>
 
<P>
This article presents a specific approach to building a dialog-box project.
If you would like to see more general documentation about the process of
building a VC++ project in the Microsoft Developer Studio environment,
there is an excellent tutorial you can access by using Visual Studio
InfoView. To access the tutorial, click Search on the Help menu. Click the
index tab and type the following:
<P>
<PRE>   working with projects

</PRE>Click List Topics. Select the topic "Home Page: Working With Projects" and
click Display.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: IDispatch ole automation listbox<BR>
Keywords          : MfcOLE kbinterop<BR>
Technology        : kbmfc kbole<BR>
Version           : win95:5.0; winnt:5.0<BR>
Platform          : Win95 winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

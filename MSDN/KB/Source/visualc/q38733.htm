

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Overflow in Integer Math Expressions Not Checked </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q38733 ">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1988/12/02">
<META NAME="Keywords" CONTENT="CLIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The operations performed by the integer arithmetic and shift operators do not check for overflow or underflow conditions. Information may be lost if the result of an operation cannot be represented in the type of the operands after conversion. All ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QA19,QAB4,QAPF,QBFY,QAN2,QBVV,QABH,QAKM,QABI,QAKD,QAOT,QAKJ,QDKW,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Overflow in Integer Math Expressions Not Checked</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q38733 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft Compiler (CL.EXE) included with
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
    - Microsoft C for OS/2, versions 6.0, 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 1.5
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The operations performed by the integer arithmetic and shift operators do
not check for overflow or underflow conditions. Information may be lost if
the result of an operation cannot be represented in the type of the
operands after conversion. All expressions are evaluated prior to
assignment to a variable.
<P>
The compiler will generate the following warning in some cases:
<P>
<PRE>   warning C4307: 'operator' : integral constant overflow

</PRE>This warning is only generated for computations on constants as shown
in the example. This is a level 2 warning.
<P>
Rules for numeric conversion are described in the "Microsoft C Language
Reference" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following 3 examples demonstrates the overflow condition for 16-bit
compilers:
<P>
<PRE>   /* compile options needed: none */

   #include &lt;stdio.h&gt;
   void main(void);
   void main()
   {
       long l;
       int i = 70;
       int j = 1000;

       l = 70 * 1000;              /* First Example            */
                                   /* C4307 in version 7 and later */
       printf( "l = %ld\n", l );   /* l = 4464 = 70000 % 65536 */
                                   /* Overflow not caught!!!   */

       l = i * j;                  /* Second Example            */
       printf( "l = %ld\n", l );   /* l = 4464 = 70000 % 65536 */
                                   /* Overflow not caught!!!   */

       l = 70L * 1000;             /* Third Example           */
       printf( "l = %ld\n", l );   /* l = 70000                */
                                   /* arithmetic in long--no   */
                                   /*   overflow               */
   }

</PRE>In the first two examples, 70 and 1000 are considered as integers.
Because both are integer types, integer math is being performed.
Integers can have at most a value of 32,767. When 70 is multiplied to
1000, the product exceeds the maximum value that an integer can hold.
Overflow is not checked and information is lost. Thus we get a value
of 4464, which is 70,000 mod 65,536.
<P>
The third example is a work around. Conversions occur if the types
of the operands are different. Note: 70 is a long integer (32 bits;
without the L, it is considered a normal integer of 16 bits). Because
a long integer is used, all operands are converted to long and the
math is done using 32-bit arithmetic. The product is large enough to
handle the multiplication, so the correct result of 70,000 is
generated.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords          : CLIss<BR>
Version           : MS- DOS:6.0,6.00a,6.00ax,7.0;OS/2:6.0,6.00a;WIN3X:1.0,1.5;WINNT:1.0,2.0,2.1, 4.0,5.0;<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for Non-Predicate Version of adjacent_find Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156080">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/09/16">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the non-predicate version of adjacent_find STL function in Visual C++.  MORE INFORMATION  Required Header                  Prototype ---------     template                        inline       ForwardIter...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHH,QAML,QBFY,QAHG,QAY5,QAPF,QA56,QA55,QA4Q,QABB,QBV8,QAOX,QDMR,QAB9,QAAW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for Non-Predicate Version of adjacent_find Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156080</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the non-predicate version of
adjacent_find STL function in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;algorithm&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class ForwardIterator&gt; inline
      ForwardIterator adjacent_find(ForwardIterator first,
                                                    ForwardIterator last) ;

</PRE>NOTE: The class/parameter names in the prototype do not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The adjacent_find algorithm finds consecutive pair of matching elements in
a sequence. The adjacent_find algorithm returns an iterator referencing the
first consecutive matching element in the range (first, last), or last if
there are no such elements.
<P>
Comparison is done using operator== in this non-predicate version of the
algorithm.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   //////////////////////////////////////////////////////////////////////
   //
   // Compile options needed: /GX
   //
   // adfind.cpp : Illustrates how to use the  non-predicate version of
   //              adjacent_find function.
   //
   // Functions:
   //
   //   adjacent_find - Locates a matching consecutive sequence in a range.
   //
   // Written by Kalindi Sanghrajka
   // of Microsoft Technical Support,
   // Software Core Developer Support.
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   //////////////////////////////////////////////////////////////////////

   #include &lt;algorithm&gt;
   #include &lt;iostream&gt;

   void main()
   {
       const int ARRAY_SIZE = 8 ;
       int IntArray[ARRAY_SIZE] = { 1, 2, 3, 4, 4, 5, 6, 7 } ;

       int *location ;   // stores the position for the first pair
                         // of matching consecutive elements.

       int i ;

       // print content of IntArray
       cout &lt;&lt; "IntArray { " ;
       for(i = 0; i &lt; ARRAY_SIZE; i++)
           cout &lt;&lt; IntArray[i] &lt;&lt; ", " ;
       cout &lt;&lt; " }" &lt;&lt; endl ;

       // Find the first pair of matching consecutive elements
       // in the range [first, last + 1)
       // This version performs matching using operator==
       location = adjacent_find(IntArray, IntArray + ARRAY_SIZE) ;

       //print the matching consecutive elements if any were found
       if (location != IntArray + ARRAY_SIZE)  // matching consecutive
                                               // elements found
           cout &lt;&lt; "Found adjacent pair of matching elements: ("
           &lt;&lt; *location &lt;&lt; ", " &lt;&lt; *(location + 1) &lt;&lt; "), " &lt;&lt;
           "at location " &lt;&lt; location - IntArray &lt;&lt; endl;
       else         // no matching consecutive elements were found
           cout &lt;&lt; "No adjacent pair of matching elements were found"
           &lt;&lt; endl ;

   }

</PRE>The Program Output is:
<P>
IntArray { 1, 2, 3, 4, 4, 5, 6, 7,  }
<P>
Found adjacent pair of matching elements: (4, 4), at location 3
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL adjacent_find<BR>
Keywords          : STLIss kbcode<BR>
Version           : 4.2<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

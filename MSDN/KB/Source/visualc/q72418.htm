

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Don't Use /ND on Modules with C Run-time Calls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q72418 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/05/24">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In most cases, the /ND (name data segment) compiler option should not be used on any module that contains calls to the C run-time library, or fatal program errors will result. The C run-time code attempts to access data in the wrong segment, genera...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBFY,QAYY,QAGI,QABA,QBW7,QAI5,QBVV,QBHQ,QAUJ,QAKR,QAHE,QBQU,QBKN,QBWG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Don't Use /ND on Modules with C Run-time Calls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q72418 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 5.10 6.00 6.00a | 1.00 1.50
<PRE>MS-DOS                      | OS/2            | WINDOWS
</PRE>kbprg
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 5.1, 6.0, and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In most cases, the /ND (name data segment) compiler option should not
be used on any module that contains calls to the C run-time library,
or fatal program errors will result. The C run-time code attempts to
access data in the wrong segment, generating a protection violation
(GP fault) under OS/2 or possibly hanging the system under MS-DOS.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The /ND switch may be used to generate a default data segment of a
particular name. This is desirable in many situations in order to
control data segment names (creating a shared segment, for example).
When /ND is used, the compiler creates three segments (dataname,
dataname_BSS, and dataname_CONST), makes them a part of a new group
(dataname_GROUP), and performs an explicit DS load with the new
default data segment for every function defined in the module.
<P>
This can cause problems when the C run-time library is used. The run-
time library is built with the assumption that DS points to the
default data segment for the entire application (DGROUP). This allows
the C run-time to use near pointers to access its internal data
structures because it assumes that this data is based in the default
data segment. When you use /ND on a module that contains run-time
code, DS is not set to the correct segment and the run-time data will
not be accessed correctly.
<P>
Therefore, if you require the /ND switch for your application, do not
use it on a module with run-time calls. The best solution is to create
a module that defines data only, and compile it with /ND. The rest of
your modules can use "extern" references to access that data. In this
manner, you can have the benefits of naming your data segments without
causing problems with the run-time library. The sample code below
illustrates this method.
<P>
The CDLLOBJS library (C run time in a DLL) is not subject to these
restrictions. In this implementation alone, DS is loaded with the
application's default data segment (DGROUP) inside the run-time code.
<P>
<P><h3>Sample Code #1</h3>
 
<P>
<PRE>/* Compile the following modules as indicated and then link the
   resulting .OBJ files together (for example, LINK code data;).
*/

/* Module 1 - DATA.C */

/* Compile options needed: /c /ND MYDATA
*/

char array[] = "This is defined in the MYDATA data segment";

</PRE><h3>Sample Code #2</h3>
 
<P>
<PRE>/* Module 2 - CODE.C */

/* Compile options needed: /c
*/

</PRE>extern char _far array[];
<P>
<PRE>void main(void)
</PRE>{
<PRE>   printf("The string in MYDATA is: %Fs\n", array);
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 6.00 6.00a 6.00ax 7.00 8.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

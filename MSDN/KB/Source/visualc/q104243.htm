

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Unexpected C2440 Error in C++ Typecast </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104243">
<META NAME="KBModify" CONTENT="1997/08/07">
<META NAME="KBCreate" CONTENT="1993/09/13">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following error     Error C2440 : 'Conversion': cannot convert from 'type1' to 'type2'  is generated when a statement of the form     TYPE ( identifier ) ( expression );  is used to type cast a function pointer and make a call simultaneously.  ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QBFY,QA4Q,QAAP,QBME,QAPN,QAB9,QAY5,QAPF,QAOT,QAKP,QBWP,QBF9,QAY2,QAX6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Unexpected C2440 Error in C++ Typecast</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104243</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>MS-DOS | WINDOWS             | WINDOWS NT
</PRE>kbtool kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P>
<P><PRE>    - Microsoft C/C++ for MS-DOS, versions 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and
      1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1 and
      4.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The following error
<P>
<PRE>   Error C2440 : 'Conversion': cannot convert from 'type1' to 'type2'

</PRE>is generated when a statement of the form
<P>
<PRE>   TYPE ( identifier ) ( expression );

</PRE>is used to type cast a function pointer and make a call
simultaneously.
<P>
<P><h2>CAUSE</h2>
 
<P>
This is expected C++ compiler behavior. The sample code below explains
the problem in a more understandable way.
<P>
If the following three statements taken from the sample code are
compiled
<P>
<PRE>   typedef void (* funcptr) (int);
     ...
   void f(int){...};
     ...
   funcptr (f)(1); // Error C2440
     ...

</PRE>the following error message is generated:
<P>
<PRE>   error C2440: 'initializing' : cannot convert from 'const int' to
   'void (__cdecl *) (int)'

</PRE>Although the last statement appears to be typecasting the function "f"
to funcptr, the compiler thinks it is declaring an object of name "f"
of type funcptr and initializing it with the integer constant "1"
equivalent to having
<P>
<PRE>   funcptr f = 1;

   or

   void (*f) (int) = 1;

</PRE>which makes the error message much more understandable.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The way to the achieve the desired typecast is to add another set of
parenthesis, for example
<P>
<PRE>   ((funcptr)f)(1);

</PRE>which resolves the confusion for the compiler, which thus treats the
typecast in the way it should.
<P>
NOTE: Using a C++ style cast, such as (funcptr(f))(1), produces a
syntax error. You must use C-style casting.
<P>
Another method is to have a pointer explicitly bind a new name to
the function, for example
<P>
<PRE>   void (*f1)(int) = f;

</PRE>and use:
<P>
<PRE>   f1(1);     // OK

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The sample below demonstrates the error and workarounds.
<P>
<P><h3>Sample Code</h3>
 
<P>
typedef void (*funcptr) (int);
<P>
<PRE>void f(int);

void main()
</PRE>{
<PRE>    ((void (*) (int)) f)(1);
    funcptr (f) (1);             // Gives error C2440
    ((funcptr)f)(1);
    void (*f1) (int) = f;
    f1(1);

</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 4.00 7.00 8.00 8.00c 9.00<BR>
9.10<BR>
KBCategory: kbtool kbprb<BR>
KBSubcategory: CPPIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

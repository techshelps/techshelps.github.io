

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Handling Events for ActiveX Controls in a CWnd </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147740">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1996/02/29">
<META NAME="Keywords" CONTENT="CDKIss kbcode MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  ActiveX controls are most often used in CDialog- or CFormView-derived classes. There are occasions that call for an ActiveX Control to be a child of a window that is not associated with a dialog template, such as a CWnd. Adding event handlers for a...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAOE,QA7O,QAB5,QAMN,QAHV,QA01,QAPN,QAO4,QABO,QBWS,QA4H,QADZ,QBXR,QAG2,QA9Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Handling Events for ActiveX Controls in a CWnd</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147740</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
ActiveX controls are most often used in CDialog- or CFormView-derived
classes. There are occasions that call for an ActiveX Control to be a child
of a window that is not associated with a dialog template, such as a CWnd.
Adding event handlers for a control created as a child of a CWnd requires a
slightly different approach than adding the same handlers for the control
when placed on a dialog. This article provides step-by-step instructions
for adding event handlers to the CWnd-derived class that parents the
control.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
Use the following steps to create an ActiveX control dynamically in a CWnd-
derived window. The control used here is the Circ3 control from the Circle
Tutorial, but the approach is valid for any OLE control. After creating the
control, handlers are created for Circ3's ClickIn and ClickOut events.

<OL><P><LI>Create the application that is to contain the ActiveX control. This
   application must include support for ActiveX controls. Select the window
   that is to be the parent of the ActiveX control. This window could be an
   SDI or MDI view or any window of a CWnd-derived class.

<P><LI>Insert the Circ3 control from the Component Gallery. At this point,
   ClassWizard will add a wrapper class for the Circ3 control and will add
   Circ3 to the toolbar in the dialog editor.

<P><LI>On the Insert menu, click Resource, and then click Dialog to insert a
   new dialog resource into the project. Select Circ3 from the toolbar, and
   add it to your dialog. Note the control ID will be something like
   IDC_CIRC3CTRL1.

<P><LI>With the dialog still open in the editor, press CTRL+W to bring up
   ClassWizard. At this point, you will see the "Adding a Class" dialog
   box. Choose "Select an existing class," and specify the CWnd-derived
   class. Click Yes to confirm that this is not a dialog class.

<P><LI>In ClassWizard, select the object ID of the Circ3 control in the "Object
   ID's" Pane. You will see the control's events listed in the messages
   window. Select ClickIn, and click ADD FUNCTION. Then select ClickOut,
   and click ADD FUNCTION. ClassWizard adds the appropriate EVENTSINK_MAP,
   ON_EVENT macros, and event handlers to the class specified in Step 4.
<P>
   NOTE: Add all necessary handlers at this time. In order to add more
   handlers later, you must delete the dialog resource and repeat this
   process.

<P><LI>Add a CCirc3 member variable named m_circ to the CWnd-derived class
   declaration as shown below. You must include the header file of the
   CCirc3 wrapper class for this declaration:
<P>
   CCirc3 m_circ;

<P><LI>Use ClassWizard to override the Create() virtual function for the CWnd-
   derived class. In the handler, call Create() to create the Circ3 child
   control as shown below.
<P>
   NOTE: If you are creating the ActiveX control in a view, you may
   override OnInitialUpdate() instead of Create().
<P>
<P><PRE>      BOOL MyCWnd::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName,
<PRE></PRE>        DWORD dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID,
        CCreateContext* pContext)
      {
      BOOL result = CWnd::Create(lpszClassName, lpszWindowName, dwStyle,
        rect, pParentWnd, nID, pContext);

      if(result != 0)   //Create the Circ3 ActiveX control.
        result = m_circ.Create("Test", WS_VISIBLE, CRect(1,1,130, 120),
           this, IDC_CIRC3CTRL1);

      return result;
      }

   IMPORTANT: Parameter 5 is the ID for the control. This ID must match the
   ID used in the ON_EVENT macro created by ClassWizard. This is the ID of
   the Circ3 control created in Step 3.

</PRE><P><LI>After adding the necessary event handlers, you may delete the temporary
   dialog resource from the project. After you delete the dialog resource,
   you will need to add the m_circ member variable and a #define for
   IDC_CIRC3CTRL1, the ID of the Circ3 control.
<P>
</OL>Optional: Another approach often used to add event handlers to CWnd-derived
classes is to add controls and event handlers to a dialog class, and then
cut and paste the appropriate code into the View.h and View.cpp files
making modifications as necessary. Note, however, that the previous method
is less prone to errors.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"MFC 4.0 Helps You Contain Your OLE Controls," MSDN Nov/Dec 1995.
<P>
OLE Control Containers: Using AppWizard to Create a Container Application
OLE Control Containers: Programming OLE Controls in an OLE Control
Container - Visual C++ Books Online, MFC Encyclopedia
<P>
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CDKIss kbcode MfcOLE<BR>
Technology          : kbole kbMfc<BR>
Version             : 4.0 5.0<BR>
Platform            : WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

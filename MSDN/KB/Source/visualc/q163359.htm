

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: STL Sample for list::size,list::resize Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q163359">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1997/02/07">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the list::max_size, list::size, list::resize STL functions in Visual C++.  MORE INFORMATION  Required Header                                      Prototype ---------     size_type max_size() const;    si...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVW,QAVX,QAE1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: STL Sample for list::size,list::resize Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q163359</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the list::max_size,
list::size, list::resize STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<PRE>   &lt;list&gt;
   &lt;string&gt;
   &lt;iostream&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   size_type max_size() const;
   size_type size() const;
   void resize(size_type n, T x = T());

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The member function max_size returns the length of the longest sequence
that the object can control. The member function size returns the length of
the controlled sequence. The member function resize ensures that size()
henceforth returns n. If the member function resize must make the
controlled sequence longer, it appends elements with the value x.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// size.cpp :  This example shows how to resize a list&lt;T&gt;.  It also
//             uses list::size() and list::max_size().
//
//  Functions
//  ---------
//
//  list::size
//  list::resize
//  list::max_size
//
// Written by Andrew Bradnan
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

    #include &lt;list&gt;
    #include &lt;string&gt;
    #include &lt;iostream&gt;

    typedef list&lt;string, allocator&lt;string&gt; &gt; LISTSTR;

    void main()
    {
       LISTSTR test;
       LISTSTR::iterator i;

       cout &lt;&lt; "max_size() = " &lt;&lt; test.max_size() &lt;&lt; endl;

       test.insert(test.begin(), 10, "test");

       cout &lt;&lt; "There are " &lt;&lt; test.size() &lt;&lt; " elements." &lt;&lt; endl;
       // test test test test test test test test test test
       for (i = test.begin(); i != test.end(); ++i)
          cout &lt;&lt; *i &lt;&lt; " ";
       cout &lt;&lt; endl;

       // Make it smaller
       test.resize(5);
       cout &lt;&lt; "There are " &lt;&lt; test.size() &lt;&lt; " elements." &lt;&lt; endl;
       // test test test test test
       for (i = test.begin(); i != test.end(); ++i)
          cout &lt;&lt; *i &lt;&lt; " ";
       cout &lt;&lt; endl;

       // Make it bigger
       test.resize(10, "bigger");
       // test test test test test bigger bigger bigger bigger bigger
       cout &lt;&lt; "There are " &lt;&lt; test.size() &lt;&lt; " elements." &lt;&lt; endl;
       for (i = test.begin(); i != test.end(); ++i)
          cout &lt;&lt; *i &lt;&lt; " ";
       cout &lt;&lt; endl;

       test.clear();
       cout &lt;&lt; "There are " &lt;&lt; test.size() &lt;&lt; " elements." &lt;&lt; endl;
    }

</PRE>The Program Output is:
<P>
<PRE>    max_size() = 268435455
    There are 10 elements.
    test test test test test test test test test test
    There are 5 elements.
    test test test test test
    There are 10 elements.
    test test test test test bigger bigger bigger bigger bigger
    There are 0 elements.

</PRE><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample list max_size size resize clear<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Bad Address for Anonymous Union/Struct Fields in VWB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117200">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/06/22">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An anonymous union or structure has been defined without a name or a typedef definition. These variable types can be used when only one instance of a variable is necessary and when the data type is needed only within a single function.  When using ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QA56,QA55,QAC2,QAUD,QATL,QATK,QAKP,QAI4,QDL9,QBWQ,QBWO,QBWN,QA7O,QA7N V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Bad Address for Anonymous Union/Struct Fields in VWB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117200</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Visual Workbench Integrated Debugger included with:
   Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An anonymous union or structure has been defined without a name or a
typedef definition. These variable types can be used when only one instance
of a variable is necessary and when the data type is needed only within a
single function.
<P>
When using anonymous data types, the debugger may give an incorrect address
for fields within the anonymous union or structure.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To resolve the problem, you need to declare a local variable of the same
type as the anonymous union or structure.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug with the Visual Workbench for
Windows, versions 1.0 and 1.5. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it is
available.
<P>
The problem does not occur with the Visual Workbench included with Visual
C++ 32-bit Edition, version 1.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below can be used to illustrate this problem. Place a
breakpoint before the "printf" statement, then place a watch on the address
of local union structure members "w1" and "w0".
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Zi
*/

   #include &lt;stdio.h&gt;

   typedef unsigned long ULONG;
   typedef unsigned short USHORT;
   typedef unsigned long DWORD;
   typedef unsigned WORD;

   class ULONG64
   {
    public:
      union
      {
         struct
         {
            DWORD dw0;
            DWORD dw1;
         };
         DWORD rgdw[2];
         struct
         {
            WORD w2;
            WORD w3;
         };
         WORD rgw[4];
      };
    public:
      ULONG64(ULONG l) { dw0 = l; dw1 = 0; }
      ULONG64() { dw0 = 0; dw1 = 0; }
   };

   ULONG64&amp; operator*=(ULONG64&amp; ul, USHORT m)
   {
      union
      {
         DWORD dw;
         struct
         {
            WORD w0;
            WORD w1;
         };
      };

      dw = (ULONG)m * ul.w3 + w1;
      ul.w3 = w0;

      printf("&amp;w0=%p &amp;w1=%p\n", &amp;w0, &amp;w1);

      return ul;
   }

   int main()
   {
      ULONG64 ul(0x12345678);

      ul *= 1000;
      return 0;
   }

</PRE><h3>Output</h3>
 
<P>
<PRE>   &amp;w0=3344 &amp;w1=3346

</PRE><h3>Watch Values</h3>
 
<P>
<PRE>   +&amp;w0 = 0x3F67:0x3344
   +&amp;w1 = 0x3F67:0x3344
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: WBDebug<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

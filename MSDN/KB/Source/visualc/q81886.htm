

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Post-Incrementation May Differ if Compile with /qc or /f </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q81886 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1992/03/19">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Post-incrementation sometimes gives unexpected results when it is used in code where the precedence of that operation over others is undefined by the ANSI standard. The results may differ between different versions of the compiler as well as betwee...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAOT,QBFY,QAJQ,QAYV,QAL3,QAKD,QATZ,QATY,QABB,QADK,QABG,QAOE,QAEF,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Post-Incrementation May Differ if Compile with /qc or /f</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q81886 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 6.00 6.00a | 1.00 1.50
<PRE>MS-DOS                 | OS/2       | WINDOWS
</PRE>kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
<LI>Microsoft C for OS/2, versions 6.0 and 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Post-incrementation sometimes gives unexpected results when it is used in
code where the precedence of that operation over others is undefined by the
ANSI standard. The results may differ between different versions of the
compiler as well as between the same version of the compiler using
different switches.
<P>
The symptoms resulting from the differences in generated code may be
difficult to determine because a variety of effects can be produced. In
general, if code compiled with and without the /qc or /f option generates
different results, ambiguous precedence involving post-incrementation may
be the cause. For example, code may work as desired when compiled with /qc
or /f, and corrupt memory when compiled without /qc or with /f-, if
pointers are being post-incremented.
<P>
Note that this discussion also applies to pre-incrementation, pre-
decrementation, and post-decrementation.
<P>
<P><h2>CAUSE</h2>
 
<P>
Section 3.3 of the ANSI draft states that:
<P>
<PRE>   Between the previous and next sequence point an object shall
   have its stored value modified at most once by the evaluation
   of an expression. Furthermore, the prior value shall be accessed
   only to determine the value to be stored (31).

       .
       .
       .

   (31)  This paragraph renders undefined statement expressions
         such as

            i = ++i + 1;
         while allowing

            i = i + 1;

</PRE>Therefore, the behavior is implementation-dependent, and will vary
from compiler to compiler.
<P>
When the Microsoft C compiler is invoked with the /qc or /f option,
the fast compiler is used which handles ambiguous precedence
involving post-incrementation differently than the optimizing
compiler.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Generally, code should be written so as not to be ambiguous by the
ANSI standard. This ensures that the code is portable to any ANSI C
compiler.
<P>
If it is not possible to eliminate the ambiguous code, then it must
be compiled with the compiler that gives the desired result.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following line of code can be used to demonstrate how the
implementations differ:
<P>
<PRE>   for ( i=0; array[i] != '\0'; ptr[i]=array[i++] );

</PRE>If compiled with /qc or QuickC, it is evaluated as if it were:
<P>
<PRE>   for ( i=0; array[i] != '\0'; ptr[i+1]=array[i], i++ );

</PRE>If compiled without /qc, it is evaluated as if it were:
<P>
<PRE>   for ( i=0; array[i] != '\0'; ptr[i]=array[i], i++ );
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00ax 7.00 1.00 1.50<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: CLngIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: _variant_t::operator IUnknown*() Fails to AddRef Interface </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174635">
<META NAME="KBModify" CONTENT="1997/12/01">
<META NAME="KBCreate" CONTENT="1997/10/02">
<META NAME="Keywords" CONTENT="VS97FixlistSP3">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When using _variant_t::operator IUnknown*(), the returned interface is not appropriately AddRef'd. This can cause unpredictable results when using the returned interface. For instance, subsequent calls through the interface may inexplicably fail or...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QANY,QAKM,QAUD,QAH4,QBBS,QAR4,QAM1,QAMB,QDO3,QDKW,QAIF,QBFY,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: _variant_t::operator IUnknown*() Fails to AddRef Interface</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174635</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C/C++ Compiler (CL.EXE) included with:
<P><PRE>    - Microsoft Visual C++, 32-bit Editions, version 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using _variant_t::operator IUnknown*(), the returned interface is not
appropriately AddRef'd. This can cause unpredictable results when using the
returned interface. For instance, subsequent calls through the interface
may inexplicably fail or may cause an Access Violation.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Write a function to convert a _variant_t to an IUnknown*. A method based on
_variant_t::operator IDispatch*() is shown in the sample below.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug has been fixed in Visual Studio
97 Service Pack 3.
<P>
For more information, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VSTUDIO/Q170365.htm">Q170365</A></B>
   TITLE     : INFO: Visual Studio 97 Service Packs - What, Where, and Why

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The code below should be called instead of allowing _variant_t::operator
IUnknown*() to be implicitly called to work around this problem. The
conversion operator will be called whenever a conversion from _variant_t to
IUnknown* is required. One place this occurs is with assignment statements,
another is passing a _variant_t to a function that expects an IUnknown*.
<P>
<P><h3>Sample</h3>
 
<P>
<PRE>  IUnknown* f( const _variant_t &amp; vt )
  {
      if (V_VT(&amp;vt) == VT_UNKNOWN)
      {
          V_UNKNOWN(&amp;vt)-&gt;AddRef();
          return V_UNKNOWN(&amp;vt);
      }
      _variant_t vttmp;

      vttmp.ChangeType(VT_UNKNOWN, &amp;vt);

      V_UNKNOWN(&amp;vttmp)-&gt;AddRef();
      return V_UNKNOWN(&amp;vttmp);
   }
   void g()
   {
     _variant_t vt;
     IUnknown * punk=0;
     // ...some code...
     punk = vt;    // will cause _variant_t::operator IUnknown*()
                   // to be called. Comment this out.
     //punk = f(vt); // call f instead. Uncomment for workaround
     // ...more code...
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: refcount Release<BR>
Keywords          : VS97FixlistSP3<BR>
Version           : WINNT:5.0<BR>
Platform          : winnt<BR>
Issue type        : kbbug<BR>
Solution Type     : kbfix kbservicepack<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Provide Your Own DllMain in an MFC Regular DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148791">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1996/03/22">
<META NAME="Keywords" CONTENT="MfcDLL kbcode kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  By design, MFC Regular DLLs have a default DllMain function provided automatically by MFC. Regular DLLs should not provide their own DllMain. Any initialization which is necessary when the DLL is loaded should be done in the InitInstance member fun...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGI,QAUQ,QABA,QAIF,QAW6,QAPN,QDNN,QBVV,QALS,QABG,QAY4,QAH6,QA9N,QA6A V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Provide Your Own DllMain in an MFC Regular DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148791</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS NT
kbprg kbhowto kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++, 32-bit Edition, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By design, MFC Regular DLLs have a default DllMain function provided
automatically by MFC. Regular DLLs should not provide their own DllMain.
Any initialization which is necessary when the DLL is loaded should be done
in the InitInstance member function of the one CWinApp-derived class in the
Regular DLL. Deinitialization and termination code should go in the
ExitInstance member function.
<P>
However, InitInstance is only called by MFC's DllMain when a process
attaches (DLL_PROCESS_ATTACH) to the DLL and ExitInstance is called only
when a process detaches (DLL_PROCESS_DETACH) from the DLL. If it is
necessary to handle thread attachment to and detachment from
(DLL_THREAD_ATTACH and DLL_THREAD_DETACH) in MFC Regular DLL, the Regular
DLL will need to provide its own DllMain. This article explains how to do
it.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When a Regular DLL is created, the MFC source forcibly links in the code
for the source file \Msdev\Mfc\Src\Dllmodul.cpp. Dllmodul.cpp contains most
of the code added to a Regular DLL to support MFC in that DLL. One of the
most important functions in Dllmodul.cpp is the DllMain function.
<P>
To add code to MFC's DllMain, copy the \Msdev\Mfc\Src\Dllmodul.cpp source
file to your project directory, and include the copy in your project. This
copy of Dllmodul.cpp will be compiled and linked into your DLL instead of
the Dllmodul.cpp in the Mfc\Src directory, so changes to the DllMain in it
will show up in the final DLL.
<P>
The primary caveat is that this is not a recommended solution and should
only be used when absolutely necessary. Any changes to the code in
Dllmodul.cpp will undoubtedly have unpredictable results. Add code only, do
not remove or modify the existing code.
<P>
For regular DLLs that use MFC in the Shared Lib, the module state should be
set at the beginning of any added code and restored before returning from
DllMain. Refer to the sample code in this article for an example of a
DllMain that handles the DLL_THREAD_ATTACH and DLL_THREAD_DETACH
notifications and properly switches the module state as necessary.
<P>
Additional care must be taken when relying on DllMain being called with
DLL_THREAD_ATTACH and DLL_THREAD_DETACH because of the following
conditions:

<UL><LI>When a thread is created in a process, the system calls DllMain with a
   value of DLL_THREAD_ATTACH for each of the DLLs mapped into into the
   process. However, if a process has several threads running in it when a
   new DLL is mapped into it, DllMain isn't called with a DLL_THREAD_ATTACH
   value for any of the existing threads.

<LI>DllMain is not called with a value DLL_THREAD_ATTACH for the process's
   primary thread.

<LI>On thread termination (by a call to ExitThread), DllMain is called with
   a value of DLL_THREAD_DETACH for each of the DLLs. DllMain is not called
   with DLL_THREAD_DETACH for any thread unless a thread terminates by
   calling ExitThread.

<LI>If a thread terminates due to a call to TerminateThread, DllMain isn't
   called with a value DLL_THREAD_DETACH.

<LI>It is possible for a thread in a process to call LoadLibrary to load a
   DLL causing a call to DllMain with DLL_PROCESS_ATTACH, and then on
   thread termination, cause a call to dllMain with DLL_THREAD_DETACH
   without ever calling DLL_THREAD_ATTACH. It is therefore best that the
   thread that calls LoadLibrary also call FreeLibrary.
<P>
</UL>NOTE: MFC CWnd objects, CDC objects, CMenu objects, GDI objects, and
CImageList objects are restricted to a per-thread, per-module basis. In
other words, MFC objects created in one module or thread cannot be passed
to and/or used in a different module or thread. This has special relevance
for any code added to handle DLL_THREAD_ATTACH or DLL_THREAD_DETACH in
DllMain because DllMain is called for these reasons with different threads.
CWnd objects, for instance, created in DllMain during DLL_PROCESS_ATTACH or
in InitInstance will not be valid during DLL_THREAD_ATTACH.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>////////////////////////////////////////////////////////////////////
// export DllMain for the DLL
// Add code in the specified sections only.
// Remove code at your own risk.
</PRE>extern "C"
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID
<PRE>/*lpReserved*/)
</PRE>{
<PRE>   if (dwReason == DLL_PROCESS_ATTACH)
   {
// ... Code abbreviated from DLLMODUL.CPP
   }
   else if (dwReason == DLL_PROCESS_DETACH)
   {
// ... Code abbreviated from DLLMODUL.CPP
   }
// NEW CODE ADDED HERE
// -------------------
   else if (dwReason == DLL_THREAD_ATTACH)
   {
</PRE>#ifdef _AFXDLL
<PRE>      // set module state
      ASSERT(AfxGetThreadState()-&gt;m_pPrevModuleState == NULL);
      AfxGetThreadState()-&gt;m_pPrevModuleState =
         AfxSetModuleState(AfxGetStaticModuleState());
</PRE>#endif
<PRE>      // ADD DLL_THREAD_ATTACH CODE HERE
      // Remember that this won't necessarily be called for
      // every thread in the process into which this DLL is mapped
      // Threads created by the process BEFORE the DLL
      // was loaded will not call into DLL_THREAD_ATTACH.

</PRE>#ifdef _AFXDLL
<PRE>      // restore previously-saved module state
     VERIFY(AfxSetModuleState(AfxGetThreadState()-&gt;m_pPrevModuleState)
             == AfxGetStaticModuleState());
        DEBUG_ONLY(AfxGetThreadState()-&gt;m_pPrevModuleState = NULL);
</PRE>#endif
<P>
<PRE>   }
   else if (dwReason ==DLL_THREAD_DETACH)
   {
</PRE>#ifdef _AFXDLL
<PRE>      // set module state
      ASSERT(AfxGetThreadState()-&gt;m_pPrevModuleState == NULL);
      AfxGetThreadState()-&gt;m_pPrevModuleState =
         AfxSetModuleState(AfxGetStaticModuleState());
</PRE>#endif
<PRE>      // ADD DLL_THREAD_DETACH CODE HERE

</PRE>#ifdef _AFXDLL
<PRE>      // restore previously-saved module state
   VERIFY(AfxSetModuleState(AfxGetThreadState()-&gt;m_pPrevModuleState)
          == AfxGetStaticModuleState());
      DEBUG_ONLY(AfxGetThreadState()-&gt;m_pPrevModuleState = NULL);
</PRE>#endif
<PRE>   }

   return TRUE;
</PRE>}
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on MFC objects being thread local, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q147578.htm">Q147578</A></B>
   TITLE     : CWnd Derived MFC Objects and Multi-threaded Applications

</PRE>For more information on module state information, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q140850.htm">Q140850</A></B>
   TITLE     : How to Convert DLLTRACE to Use MFC in Shared Library

</PRE>For more information on why you shouldn't create a thread in DllMain,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q142243.htm">Q142243</A></B>
   TITLE     : PRB: Cannot Create an MFC Thread During DLL Startup
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: DllMain DLL_THREAD_ATTACH DLL_THREAD_DETACH<BR>
DLLMODUL.CPP RegDLL 4.00<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: MfcDLL<BR>
Keywords            : MfcDLL kbcode kbhowto kbprg<BR>
Technology          : kbMfc<BR>
Version             : 4.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Trying to Export Static Function Causes L1101 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114587">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/05/08">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When compiling a Windows program that contains a function header and prototype which are mismatched and alternately contain the  static  and  __export  keywords, the fast compiler will return:    TEST.OBJ(c:\testdir\test.c) : fatal error L1101: inv...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QAH4,QBFY,QAAP,QAOT,QAY5,QAB4,QAPF,QBV8,QBVV,QAUD,QAB9,QAKP,QAEY,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Trying to Export Static Function Causes L1101</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114587</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50
MS-DOS | WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:
<P>
<PRE>  The Microsoft C/C++ Compiler (CL.EXE) included with:

    - Microsoft C/C++ for MS-DOS version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When compiling a Windows program that contains a function header
and prototype which are mismatched and alternately contain the
"static" and "__export" keywords, the fast compiler will return:
<P>
<PRE>  TEST.OBJ(c:\testdir\test.c) : fatal error L1101: invalid object
  module
  Object file offset: ### Record type: 90


</PRE><h2>RESOLUTION</h2>
 
<P>
If ExampleWindowProc() is prototyped as
<P>
<PRE>   LRESULT CALLBACK __export ExampleWindowProc (WINDOWS_PARAMS)

</PRE>and if ExampleWindowProc() is declared as:
<P>
<PRE>   static LRESULT CALLBACK ExampleWindowProc (WINDOWS_PARAMS)

</PRE>error L1101 will result because the compiler generates incorrect code. The
error will also occur if the function declaration and prototype are
reversed.
<P>
Static functions cannot be exported, so the code described above would be
incorrect, but the compiler does not issue the correct error message. If
the function does not need to be static, then remove the "static" keyword
and the code will compile and link correctly. If the function does not need
to be exported, then remove the "__export" keyword and the code will
compile and link cleanly.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft C/C++
compiler for MS-DOS versions 7.0, 8.0 and 8.0c. We are researching this
problem and will post new information here in the Microsoft Knowledge Base
as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The compiler should generate the following error:
<P>
<PRE>   "C2201: cannot export static declarations"

</PRE>Static functions have internal linkage and therefore (by definition) cannot
be exported. The code is also incorrect because the prototype does not
match the function header. The compiler does generate a C2201 error if the
"__export" keyword is in the same prototype/function header as the "static"
keyword.
<P>
NOTE: If the MakeProcInstance line is deleted in the code example below,
the compiler will not generate the code which causes the linker to fail.
<P>
<P>
<P><h3>Sample Code</h3>
 
<P>
<P><h3>The following sample code reproduces the problem:</h3>
 
<P>
<PRE>//  Sample.cpp

/* Compile options needed:
   cl /f /GA /G2 /c sample.cpp, will reproduce the L1101 error.
   The /f switch invokes the fast compiler.
   Note that if building an application with the /Od compiler
   switch, the fast compiler will be implicitly invoked.

   cl /f /O1 /GA /G2 /c sample.cpp, will not produce the L1101 error.
*/

#include &lt;windows.h&gt;

</PRE>FAR PASCAL MyProc(  /*paramters*/ );
__export FAR PASCAL ConfDlg( /*paramters*/ );
<P>
static FAR PASCAL ConfDlg( /*paramters*/ )
{
<PRE>    return (0);
</PRE>}
<P>
FAR PASCAL MyProc(/*parmaters*/)
{
<PRE>    DLGPROC lpProcDialog;
    HANDLE hInst;
    lpProcDialog = MakeProcInstance((DLGPROC) ConfDlg, hInst);
    return NULL;
</PRE>}
<P>
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 7.00 8.00 8.00c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

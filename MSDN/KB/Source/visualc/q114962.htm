

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Control-by-Control Validation in MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114962">
<META NAME="KBModify" CONTENT="1997/07/18">
<META NAME="KBCreate" CONTENT="1994/05/17">
<META NAME="Keywords" CONTENT="kb16bitonly MfcUI kbfile kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The FCSVAL sample application was created to show how an application can do control-by-control validation in a dialog box.  Download FCSVAL.EXE, a self-extracting file, from the Microsoft Software Library (MSL) on the following services:   - Micros...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKR,QA01,QA7O,QAMN,QAB5,QADO,QBSO,QAOE,QAGB,QAGU,QAEV,QAGX,QA49,QAGC,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Control-by-Control Validation in MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114962</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbprg kbfile
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The FCSVAL sample application was created to show how an application can do
control-by-control validation in a dialog box.
<P>
Download FCSVAL.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/FCSVAL.EXE">FCSVAL.EXE</A> <I>(size: 24447 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the \softlib\mslfiles directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/FCSVAL.EXE">FCSVAL.EXE</A> <I>(size: 24447 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The application itself is just a modal dialog box displayed by the
CWinApp::InitInstance(). After displaying the dialog box, InitInstance()
simply quits the application.
<P>
The important part of the sample takes place in the dialog-box class
implementation: There are two edit controls. The first takes input of an
integer between 1 and 20. The second takes a character string as input with
length less than or equal to 5. When you Tab or mouse-click from control to
control within the displayed dialog box, the contents of the control that
is losing focus are validated.
<P>
<P><h3>The CFocusDlg Class</h3>
 
<P>
The application's functionality centers around the CFocusDlg class and its
implementation of four message handlers (discussed below). Normal data
exchange (DDX) and validation (DDV) using the routines provided by MFC take
place in OnInitialUpdate(), when the dialog box is first displayed, and
when the user chooses the OK button to accept the input. This is default
behavior provided by ClassWizard when member variables are connected to
dialog-box controls and can be examined in the dialog class
DoDataExchange() function.
<P>
<PRE>   Special Case 1
   --------------

   The first special case, for which this sample is written, involves
   validating control contents when switching focus from one control to the
   next. This is done by handling the EN_KILLFOCUS notification sent by the
   edit control that is losing focus. The idea here is to check the
   contents and, if they are not valid, to display the message box, inform
   the user, and then set the focus back to the control from which it came.
   Unfortunately, some difficulties arise when trying to set the focus (or
   display the message boxes) within a killfocus message handler. At this
   point, Windows is in an indeterminate state as it is moving focus from
   one control to the other. This is a bad place to do the validation and
   SetFocus() call.

   The solution here is to post a user-defined message to the dialog box
   (parent) and do the validation and SetFocus() there, thus waiting for a
   safer time to do the work. (See "CFocusDlg::OnEditLostFocus()" in the
   file FOCUSDLG.CPP and "WM_EDITLOSTFOCUS user-defined message" in the
   file FOCUSDLG.H.)

   Another thing you will notice about this function is that it uses
   TRY/CATCH to do the validation. The provided DDX/DDV routines throw
   CUserExceptions when failing to validate or load a control's data. You
   should catch these and do the SetFocus() in the CATCH block.

   Special Case 2
   --------------

   The second special case is when the user clicks the Cancel button while
   there is still invalid data in one of the controls. In this situation,
   the user (normally) does not want to know whether his or her input is
   correct because he or she is quitting the application. You might
   consider prompting the user to save and validate the input, but normally
   "Cancel" means what it says. Focus is sent to the Cancel button before
   the IDCANCEL notification is sent to the dialog box, causing
   EN_KILLFOCUS to be generated by the control.

   Because we want to control validation, we maintain a flag called
   "m_bValidate". When the user clicks Cancel, the dialog box is notified
   of the mouse-click by the child button through a WM_PARENTNOTIFY
   message. If we handle this message, we can set the m_bValidate flag to
   "FALSE", which prevents the validation from taking place in the
   OnEditLostFocus() function. Notice the "if (m_bValidate)" right at the
   beginning.

   Special Case 3
   --------------

   The third special case is when the user inputs bad data and then decides
   to bring another application to the foreground, possibly to do some
   other work or check some other information before completing this dialog
   box' form. The edit control generates a EN_KILLFOCUS when the
   application loses activation but, again, you might not necessarily want
   to validate. So, handle the WM_ACTIVATEAPP message and based on the
   bActive flag that is passed as a parameter, set the "m_bValidate" flag
   to disable validation. Upon reactivation, the same message gets handled
   and this time the bActivate flag is TRUE, causing us to re-enable
   validation.

   Special Case 4
   --------------

   The fourth special case is when the user ends the Windows session either
   through the Program Manager or the ExitWindows() function. In this case,
   handle the WM_QUERYENDSESSION message. If the dialog-box controls pass
   validation (coded like the OnOK() function), then return TRUE from this
   handler to allow Windows to terminate. Otherwise, return FALSE so that
   the user can input the correct data.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf killfocus queryendsession parentnotify<BR>
1.00 1.50 2.00 2.50<BR>
KBCategory: kbprg kbfile<BR>
KBSubcategory: MfcUI<BR>
Keywords            : kb16bitonly MfcUI kbfile kbprg<BR>
Technology          : kbMfc<BR>
Version             : 1.00 1.50<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

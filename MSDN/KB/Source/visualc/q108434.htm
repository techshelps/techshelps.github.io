

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: CSplitterWnd Class Does Not Handle All Focus Cases </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108434">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/12/12">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A view displayed in a splitter window (CSplitterWnd) loses focus when the splitter bar is clicked. A user would expect the focus to be returned to the active view when the user stops dragging the splitter bar and releases the mouse button.  CAUSE =...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADO,QAH4,QAR4,QAM1,QAGQ,QBC9,QBC8,QANO,QADK,QABI,QBXS,QBDT,QAGI,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: CSplitterWnd Class Does Not Handle All Focus Cases</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108434</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
<PRE>1.00    | 1.00
</PRE>WINDOWS | WINDOWS NT
kbprg kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, version 1.0
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A view displayed in a splitter window (CSplitterWnd) loses focus when the
splitter bar is clicked. A user would expect the focus to be returned to
the active view when the user stops dragging the splitter bar and releases
the mouse button.
<P>
<P><h2>CAUSE</h2>
 
<P>
CSplitterWnd::StopTracking() attempts to restore the active view's keyboard
focus by calling SetActiveView(pOldActiveView), where pOldActiveView was
set to the currently active view on entry to the StopTracking() function.
This is supposed to set the keyboard focus to the previously active view.
<P>
The problem is that SetActiveView() fails to set the keyboard focus in the
case where the view passed as a parameter is the same as m_pViewActive--the
currently active view. In this case, it is assumed that the keyboard focus
is already on the active view, and therefore the SetActiveView() function
simply returns. This assumption is incorrect because the splitter bar gains
focus, doesn't save and restore it, and yet leaves the frame's active view
pointer the same.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft Foundation
Class (MFC) Libraries version 2.0. This problem has been fixed in the MFC
Libraries version 2.5, which is included in Visual C++ version 1.5 for
Windows. In the fixed code, CSplitterWnd::StopTracking() (in WINSPLIT.CPP)
is modified to explicitly set the focus even after calling SetActiveView().
The code is:
<P>
<PRE>   if (pOldActiveView == pParent-&gt;GetActiveView())
      {
          pParent-&gt;SetActiveView(pOldActiveView); // Re-activate.
          if (pOldActiveView != NULL)
              pOldActiveView-&gt;SetFocus(); // Make sure focus is restored.
      }

</PRE>You can include this fix into WINSPLIT.CPP and then rebuild the MFC library
by following the directions in Appendix B of the "Class Libraries User's
Guide" as well as the README.TXT file located in the \MSVC\MFC\SRC
directory.
<P>
Another workaround for the bug is to save and restore the keyboard focus
throughout the splitter window's tracking process. This can be done by
handling the WM_LBUTTONDOWN and WM_LBUTTONUP messages in the CSplitterWnd
class. The following code demonstrates how to accomplish this:
<P>
<PRE>   class CMySplit:public CSplitterWnd    // derive from it.
   {
       public:
       // This is the pointer to the window that
       // has focus when the splitter starts resizing.
       HWND hWndFocus;

       // ...rest of your declaration.
   }

   void CMySplit::OnLButtonDown(UINT nFlags, CPoint point)
   {
       //Get CWnd with current focus
       hWndFocus = ::GetFocus();

       // Remember to call the base class handler.
       CSplitterWnd::OnLButtonDown(nFlags,point);
   }

   void CMySplit::OnLButtonUp(UINT nFlags, CPoint point)
   {
       //restore focus
       ::SetFocus(hWndFocus);

       // Remember to call the base class handler.
       CSplitterWnd::OnLButtonUp(nFlags,point);
   }

</PRE>The code above assumes that the focus is being set to one of the windows in
the splitter window panes before the OnLButtonDown() handler is called.
That is, you probably wouldn't want to set the focus back to some other
window outside of the splitter window when the mouse button is released.
You could write additional code to check to see if the focus is set to a
window in one of the panes by checking the splitter's frame window's
m_pActiveView variable.
<P>
<P><h2>STATUS</h2>
 
<P>
This problem has been reported in Visual C++ version 1.0 for Windows. This
problem has been fixed in Visual C++ version 1.5 for Windows and Visual C++
2.0 32-bit Edition.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To demonstrate the problem, perform the following steps:

<OL><P><LI>Create an App Wizard generated application.

<P><LI>Create a CSplitterWnd in a frame window with two panes that contain
   CEditView objects.

<P><LI>Build the application and run it.

<P><LI>Click the mouse in the first pane of the splitter window so that the
   keyboard focus is assigned to that pane; you'll see the caret blink
   there.

<P><LI>Move the splitter bar to resize the panes.

<P><LI>Observe that the keyboard focus is no longer on the CEditView that you
   clicked previously.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 2.10 splitter focus<BR>
KBCategory: kbprg kbfixlist kbbuglist<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbbuglist kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00    | 1.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Threads and MFC _USRDLLs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122676">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1994/11/09">
<META NAME="Keywords" CONTENT="MfcDLL MFCThreadIss kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  While the Microsoft Foundations Classes versions 3.0 and later that ship with Visual C++ versions 2.0 and later do support multiple threads, only one external thread may be attached to a _USRDLL.  MORE INFORMATION  _USRDLLs are MFC DLLs that are bu...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUQ,QBW7,QAI5,QBWP,QA39,QALQ,QBWG,QAYY,QADX,QAKJ,QBVV,QBFY,QA56,QA55,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Multiple Threads and MFC _USRDLLs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122676</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 4.00 4.10
WINDOWS NT
kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Foundation Classes (MFC) version 3.0, included with
   Microsoft Visual C++, 32-bit Edition, version 2.0 4.0 4.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
While the Microsoft Foundations Classes versions 3.0 and later that ship
with Visual C++ versions 2.0 and later do support multiple threads, only
one external thread may be attached to a _USRDLL.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
_USRDLLs are MFC DLLs that are built as stand-alone DLLs. They can be used
with non-MFC applications. They are not closely tied to the application
that calls them and contain their own CWinApp derived class.
<P>
During the initialization of a _USRDLL, MFC allocates per-thread local data
using Thread Local Storage (TLS). Because this is done only during the
DLL_PROCESS_ATTACH, only data for the attaching thread is allocated. MFC
_USRDLLs do not handle the DLL_THREAD_ATTACH case where additional threads
are created, or existing threads other than the one that originally
attached to the DLL.
<P>
Because most MFC 3.0 objects end up using TLS, accessing most MFC objects
from a secondary thread created outside the _USRDLL will cause access
violations. This is because each thread that uses MFC must be started with
AfxBeginThread so that this TLS data can be initialized.
<P>
This is a change from MFC version 2.0 that shipped with Visual C++ version
1.0 for Windows NT, where no TLS data was used by MFC. It was possible in
MFC version 2.0 to access _USRDLLs with multiple threads, as long as only
one thread accessed the DLL at a time. (This could be accomplished by using
EnterCriticalSection() or a semaphore.)
<P>
It is still possible to access the _USRDLL from multiple threads created in
the application if only one thread accesses the _USRDLL at a time and each
thread loads and unloads the _USRDLL. TLS data will be created for the
current thread each time the DLL is loaded.
<P>
Threads created inside the _USRDLL by creating CWinThread derived objects
will correctly create TLS data for those threads and work correctly.
<P>
_AFXDLL, which is closely tied to the executable, does not have these
restrictions.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on _USRDLLs and _AFXDLLs, please see MFC technotes in
Books Online : TN011 "Using MFC as Part of a DLL", and TN033 "DLL version
of MFC".
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 2.00 3.00 4.00 4.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: MfcDLL MFCThreadIss<BR>
Keywords          : MfcDLL MFCThreadIss kbprg<BR>
Technology        : kbMfc<BR>
Version           : 2.00 4.00 4.10<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variant Handling in an MFC Server w/ VB 4.0 as Its Client </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142223">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1996/01/08">
<META NAME="Keywords" CONTENT="MfcOLE kbcode kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  It is possible for Visual Basic 4.0 to pass parameters to automation methods either by value (ByVal) or by reference (ByRef). For a method that expects a non-VARIANT parameter passed by value, MFC's implementation of IDispatch will coerce a paramet...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAD7,QAH7,QAH6,QBS0,QAHE,QAKD,QAG1,QAPN,QAB3,QA2K,QATO,QA5F,QAMA,QBXS,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Variant Handling in an MFC Server w/ VB 4.0 as Its Client</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142223</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS NT
kbprg kbole kbcode
<P>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic
<PRE>  programming system for Windows, version 4.0

</PRE>- The Microsoft Foundation Classes (MFC) included with:
<PRE>  Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is possible for Visual Basic 4.0 to pass parameters to automation
methods either by value (ByVal) or by reference (ByRef). For a method that
expects a non-VARIANT parameter passed by value, MFC's implementation of
IDispatch will coerce a parameter passed by reference to a value. However,
this is not the case with an automation method expecting a VARIANT
parameter. The MFC framework cannot coerce a VARIANT parameter because it
does not know what type is expected by the method. This can cause problems
in a method that expects a VARIANT parameter to be passed by value. If the
parameter is passed by reference and the VARIANT is referenced directly,
the value obtained from the variant will be incorrect. Hence, an automation
method that expects a VARIANT to be passed by value should check whether it
was passed a reference and coerce the VARIANT if necessary. This article
illustrates how you could implement this.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Consider the following method named Add exposed by a MFC automation server
with a ProgID TestVar.Document:
<P>
<PRE>   LPDISPATCH Add(const VARIANT FAR&amp; varTest);

</PRE>Given the following code in Visual Basic, it may pass the parameter either
by reference or by value:
<P>
<PRE>   Dim doc As Object
   Set doc = CreateObject("TestVar.Document")

   Dim docDispatch As Object
   Dim varParam As Variant
   varParam = 2

</PRE>Visual Basic will pass the parameter by reference in these cases:
<P>
<PRE>   Set docDispatch = doc.Add(varParam)
   doc.Add varParam

</PRE>Visual Basic will pass the parameter by value in these cases:
<P>
<PRE>   Set docDispatch = doc.Add((varParam))
   doc.Add (varParam)
   Set docDispatch = doc.Add(2)
   doc.Add 2

</PRE>From these examples, you may notice that Visual Basic will pass all
variables by reference unless the () operator is used to indicate that the
variable should be passed by value. Moreover, Visual Basic will pass all
constants by value.
<P>
Because of the possibility of the parameter being passed by reference, it
is necessary to coerce the parameter to a value before using it in the
automation server. Making a copy of the VARIANT parameter using the
VariantCopyInd function will perform the necessary indirection, if the
source VARIANT parameter passed is specified to be VT_BYREF. The following
code will properly handle a VARIANT passed either by reference or by value.
<P>
LPDISPATCH CTestVarDoc::Add(const VARIANT FAR&amp; varTest)
{
<PRE>    HRESULT hr;
    VARIANT var;
    VariantInit(&amp;var);

    hr = VariantCopyInd(&amp;var, (LPVARIANT)&amp;varTest);

    if (FAILED(hr))
       return NULL;

    // Now use var instead of varTest
    ...
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 4.00 3.00 3.10 3.20 4.0 2.0 2.1 2.2<BR>
KBCategory: kbprg kbole kbcode<BR>
KBSubcategory: MfcOLE<BR>
Keywords          : MfcOLE kbcode kbole kbprg<BR>
Technology        : kbMfc<BR>
Version           : 4.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual C++ Vers 2.0 README.WRI, Part 4 Integrated Debugger </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120920">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1994/09/21">
<META NAME="Keywords" CONTENT="WBDebug kbreadme">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following is based on the Visual C++ version 2.0 README.WRI file:  Applications with Multibyte-Character Names  If you are using Visual C++ version 2.0 with the Japanese edition of Windows NT 3.1, you can name development environment projects u...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBXT,QA5V,QAIB,QAB9,QBXS,QBWP,QBFY,QASR,QAPN,QA56,QA55,QAK6,QAVX,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Visual C++ Vers 2.0 README.WRI, Part 4 Integrated Debugger</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120920</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00
WINDOWS NT
kbreadme
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 2.0 on the
   following platform: x86
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following is based on the Visual C++ version 2.0 README.WRI file:
<P>
<P><h3>Applications with Multibyte-Character Names</h3>
 
<P>
If you are using Visual C++ version 2.0 with the Japanese edition of
Windows NT 3.1, you can name development environment projects using
multibyte characters, thus creating an executable file with a name that
contains multibyte characters. However, if your project or path contains
multibyte characters, you cannot debug this executable using the Japanese
edition of Windows NT version 3.1.
<P>
<P><h3>Debugging Lines with Multiple Statements or Instructions</h3>
 
<P>
A source statement such as:
<P>
x=1; y=7; Z=3;
<P>
contains multiple statements. The debugger treats each source code line as
a unit, so you cannot step into or set a breakpoint on more than one
statement per line. Thus, executing the Step Over command in the source
window steps over the whole source line, and executing Toggle Breakpoint
sets a breakpoint only on the first instruction of the first statement.
<P>
For example, the statement:
<P>
<PRE>for ( x=0; x&lt;10; x++       ) {

</PRE>generates multiple instructions when compiled. If you set a conditional
breakpoint on this source statement to break when x = 5, the debugger stops
and checks the condition before the first instruction is executed. The
first instruction associated with the source line is the initialization of
x (x=0;). The subsequent comparison and increment are at the source line
address plus offset. Thus, the only time that the debugger evaluates that
expression is when the loop is first entered. The first instruction is not
executed again during looping.
<P>
You can use the Disassembly window to work around this behavior. If you
open and set focus to the Disassembly window, it displays the instructions
that the source line generates. Thus, you can set a conditional breakpoint
at the appropriate instruction, for example, on the comparison (x&lt;10;).
Also, stepping in assembly mode (with the focus in the Disassembly window)
allows stepping through the individual instructions that make up a source
code line.
<P>
It is possible to break statements so that you have one statement per
source line. However, if a single statement is broken over multiple lines,
you can set breakpoints only on the starting or ending line of the
statement.
<P>
<P><h3>Debugging Optimized Code</h3>
 
<P>
When the compiler optimizes code, it may reposition or reorganize some
lines for more efficient execution. These changes can prevent the debugger
from recognizing the corresponding lines of source code, making it
difficult to debug the optimized code. If you are debugging during
application development and you do not want to debug optimized code, you
can use one of the following methods:

<UL><LI>Select the Win32 Debug target after you create a new project. Then build
   and debug the Debug target until you are ready to build a Win32 Release
   target. This is the preferred method for debugging code that you will
   optimize later.
<P>
   -or-

<LI>Select the "Disable (Debug)" switch in the Optimizations box on the
   C/C++ tab of the Project Settings dialog box, or use the /Od compiler
   option on the command line. You can enable optimizations after you
   finish debugging.
<P>
   -or-

<LI>Use the Disassembly window to debug the optimized code.
<P>
</UL><h3>Remote Debugging Under Win32s</h3>
 
<P>
If you cannot run a remote-debugging session in a Win32s environment, you
can check conditions such as the following:

<UL><LI>Confirm that there is bidirectional communication on the serial line by
   using an application such as TERMINAL.EXE.

<LI>Check for a serial port conflict caused by using the MOUSE.SYS device
   driver in CONFIG.SYS with a serial mouse. Unplugging the mouse may not
   solve the problem.
<P>
</UL><h3>Using Data Breakpoints While Running the Debuggee</h3>
 
<P>
While the debuggee is running, you cannot enable or set data breakpoints.
The following kinds of breakpoints in the Breakpoints dialog box are
disabled while the debuggee is running:

<UL><LI>Break when Expression is True.

<LI>Break when Expression has Changed.
<P>
</UL>If you want to enable or set breakpoints while the debuggee is running,
use one of the following kinds of location breakpoints:

<UL><LI>Break at Location when Expression is True.
<P>
   -or-

<LI>Break at Location when Expression has Changed.
<P>
</UL>You can also stop the debuggee to enable or set a data breakpoint.
<P>
<P><h3>Using Just-In-Time Debugging or Dr. Watson</h3>
 
<P>
You can use Visual C++ "just-in-time" (JIT) debugging or the Dr. Watson
utility provided with Windows NT when an unrecoverable error occurs in your
application.
<P>
The JIT debugging capability of the Visual C++ debugger provides more
functionality than Dr. Watson. When your program terminates abnormally, Dr.
Watson merely creates a static log of the state of your application at the
time of the fault, and terminates the application. With Dr. Watson, you
cannot debug your application while it is running.
<P>
The Visual C++ debugger provides powerful debugging features and enables
you to find and fix problems while your program is still active. For more
information, see "Enabling Just-In-Time Debugging" in Chapter 14 of the
Visual C++ User's Guide.
<P>
However, if you need to use Dr. Watson and you want Dr. Watson's log files
to contain the same level of information as they do for Windows NT debug
executable files generated by Visual C++ version 1.1, then you must disable
the Program Database feature.
<P>
To disable the Program Database feature:

<OL><P><LI>From the Project Menu, choose Settings.

<P><LI>In the Project Settings dialog box, select the Link tab.

<P><LI>In the Category box, select Customize.

<P><LI>Clear the Use Program Database check box.
<P>
</OL>Alternatively, you can disable this feature from the command line by
specifying /PDB: none.
<P>
<P><h3>Using Microsoft Macro Assembler 6.11</h3>
 
<P>
The Visual C++ version 2.0 debugger's Disassembly window may not display
lines correctly if you are assembling some modules of your Visual C++
application with Microsoft Macro Assembler (MASM) version 6.11 and using
linker version 2.50. To correct this problem, you should upgrade to the
MASM version 6.11a maintenance release and use the /COFF option on the ML
command line.
<P>
The MASM version 6.11a maintenance release is available on the Microsoft
Download Service (MSDL), phone 206-936-6735.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory: WBDebug<BR>
Keywords            : WBDebug kbreadme<BR>
Version             : 2.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

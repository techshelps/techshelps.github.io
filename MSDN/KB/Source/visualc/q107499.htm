

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: R6013 "Illegal Far-Pointer Use" When Using Vmalloc </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q107499">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1993/11/19">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Accessing memory allocated with vmalloc() causes the error:     run-time error R6013    -illegal far-pointer use  CAUSE =====  This error is a result of using the /Zr compile option with the Virtual Memory functions. When you enable pointer checkin...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAB4,QAO3,QAO2,QABH,QABI,QBXS,QAGB,QBV8,QANY,QAAP,QBFY,QAYL,QAO1,QAML V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: R6013 "Illegal Far-Pointer Use" When Using Vmalloc</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q107499</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50
MS-DOS | WINDOWS
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ compiler for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Accessing memory allocated with vmalloc() causes the error:
<P>
<PRE>   run-time error R6013
   -illegal far-pointer use

</PRE><h2>CAUSE</h2>
 
<P>
This error is a result of using the /Zr compile option with the Virtual
Memory functions. When you enable pointer checking, the compiler generates
code to check all pointers to see whether they are outside the bounds of
the program's address space. These values are stored in the global
variables _aseglo and _aseghi. The global variable _aseglo is set at run-
time to the lowest data segment value; _aseghi is set to the highest
program segment.
<P>
When you initialize virtual memory with _vheapinit(), far memory is
allocated outside of your program's address space. Therefore, it fails the
test for greater than _aseghi, hence the error message.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are two options:

<UL><LI>Disable pointer checking. This option is primarily used during debugging
   and will incur a performance penalty on your code if you release with it
   still on.
<P>
   -or-

<LI>Reset _aseghi before you access the pointer. For example,
<P>
<P><PRE>      #include &lt;vmemory.h&gt;
      #include &lt;dos.h&gt;
</PRE><P>
<P><PRE>      extern unsigned int _aseghi;
</PRE><P>
<P><PRE>      void main(void)
      {
<PRE></PRE>        _vheapinit(...);
        _vmalloc(...);
        _vload(...);
        _aseghi = FP_SEG(ptr);
        //...
      }

</PRE><LI>The problem with this last option is that the primary benefit of using
   pointer checking is now obscured because the value of _aseghi has been
   modified.
<P>
</UL><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile Options needed: /Zr
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;vmemory.h&gt;

</PRE>struct {
<PRE> double x;
 } __far *buffer;

void main( void )
</PRE>{
<PRE>   _vmhnd_t handle;

   if ( !_vheapinit( 0, _VM_ALLDOS, _VM_XMS | _VM_EMS ) )
   {
      printf( "Could not initialize virtual memory manager. \n" );
      exit( -1 );
   }
   if ( ( (handle = _vmalloc( 10000 * sizeof(int) )) == _VM_NULL ))
   {
      _vheapterm();
      exit( -1 );
   }

   if ( ( buffer = _vload ( handle, _VM_CLEAN )) == NULL )
   {
      _vheapterm();
      exit( -1 );
   }

   buffer-&gt;x;            // R6013 occurs here

   _vfree( handle );
   _vheapterm();
   exit( 0 );
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 7.00 1.00 1.50<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: VirtualMem<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

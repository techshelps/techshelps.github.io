

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the set::(key_, value_)comp Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158573">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/31">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following sample code illustrates how to use the set::key_comp and set::value_comp STL functions in Visual C++.  MORE INFORMATION  Required Header            Prototype ---------     template                                   class set {    publ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAY5,QBV8,QAB9,QALW,QBXS,QBFY,QAOE,QADK,QAA7,QAB7,QAPF,QAB6,QAJQ,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the set::(key_, value_)comp Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158573</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following sample code illustrates how to use the set::key_comp and
set::value_comp STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;set&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class _K, class _Pr, class _A&gt;
   class set {
   public:
   // Function 1:
      key_compare key_comp() const;
   // Function 2:
      value_compare value_comp() const;
   }

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The key_comp function returns the stored function object that determines
the order of elements in the controlled sequence. The value_comp function
returns the same function that key_comp returns.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// SetComp.cpp:
//      Illustrates how to use the key_comp function to obtain a
//      function pointer that is the stored function object that
//      determines the order of elements in the controlled sequence.
//      It also illustrates how to use the value_comp function to
//      obtain a function pointer that is the stored function object
//      that determines the order of the elements in the controlled
//      sequence (same as key_comp result).
//
// Functions:
//
//    key_comp     Returns a function pointer to the function that
//                 determines the order of elements in the controlled
//                 sequence.
//    value_comp   Returns a function pointer to the function that
//                 determines the order of elements in the controlled
//                 sequence (same as key_comp).
//
// Written by Derek Jamison
// of Microsoft Technical Support,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<PRE>#include &lt;set&gt;
#include &lt;iostream&gt;

</PRE>typedef set&lt;int,less&lt;int&gt;,allocator&lt;int&gt; &gt; SET_INT;
<P>
<PRE>void truefalse(int x)
</PRE>{
<PRE>  cout &lt;&lt; (x?"True":"False") &lt;&lt; endl;
</PRE>}
<P>
<PRE>void main() {
  SET_INT s1;

  cout &lt;&lt; "s1.key_comp()(8,10) returned ";
  truefalse(s1.key_comp()(8,10));  // True

  cout &lt;&lt; "s1.value_comp()(8,10) returned ";
  truefalse(s1.value_comp()(8,10));  // True

  cout &lt;&lt; "s1.key_comp()(10,8) returned ";
  truefalse(s1.key_comp()(10,8));  // False

  cout &lt;&lt; "s1.value_comp()(10,8) returned ";
  truefalse(s1.value_comp()(10,8));  // False

  cout &lt;&lt; "s1.key_comp()(8,8) returned ";
  truefalse(s1.key_comp()(8,8));  // False

  cout &lt;&lt; "s1.value_comp()(8,8) returned ";
  truefalse(s1.value_comp()(8,8));   // False
}

</PRE><h3>Program Output</h3>
 
<P>
s1.key_comp()(8,10) returned True
s1.value_comp()(8,10) returned True
s1.key_comp()(10,8) returned False
s1.value_comp()(10,8) returned False
s1.key_comp()(8,8) returned False
s1.value_comp()(8,8) returned False
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books Online: Visual C++ Books; C/C++; Standard C++ Library
Reference
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample value_comp key_comp<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: C and C++ Differences Regarding the Return Statement </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q85477 ">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1992/06/10">
<META NAME="Keywords" CONTENT="CPPIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  With both C and C++, the return statement terminates the function currently executing and returns control back to its caller. However, the C and C++ languages differ slightly in their requirement that all paths of control through a function return ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBFY,QAB9,QALW,QAB4,QAY5,QAKD,QAJQ,QAPN,QBV8,QAOT,QAAP,QBBI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: C and C++ Differences Regarding the Return Statement</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q85477 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With both C and C++, the return statement terminates the function currently
executing and returns control back to its caller. However, the C and C++
languages differ slightly in their requirement that all paths of control
through a function return a value of the correct type.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The return statement has the form:
<P>
<PRE>   return [expression];

</PRE>The expression portion of the statement is optional. If an expression
is not specified, the return statement becomes equivalent to:
<P>
<PRE>   return void;

</PRE>Also, reaching the } (right curly brace) that terminates a function is
equivalent to executing a return statement without an expression.
<P>
The C++ language requires that all possible control paths through a
function return a value that is the same type as the return type specified
by the function prototype. If this is not the case, a fatal error is
generated by the compiler. The C language is not as strict in this
requirement. In C, if a control path ends in a return statement that
returns a value that is of a different type than that specified in the
function prototype, a warning may be generated but compilation will
continue.
<P>
Section r.6.6.3 of the C++ reference manual provided as a subsection of the
second edition of "The C++ Programming Language" by Bjarne Stroustrup
states:
<P>
<PRE>   A return statement without an expression can be used only in
   functions that do not return a value, that is, a function with the
   return value type void, a constructor, or a destructor. A return
   statement with an expression can be used only in functions
   returning a value; the value of the expression is returned to the
   caller of the function. ... Flowing off the end of a function is
   equivalent to a return with no value; this is illegal in a value-
   returning function.

</PRE>However, Section 3.6.6.4 of the ANSI specification for the C programming
language states the following:
<P>
<PRE>   If a return statement without an expression is executed, and the
   value of the function call is used by the caller, the behavior is
   undefined.

</PRE>If the sample code given below is compiled as a C++ file (.CPP), the
following error is generated by the compiler:
<P>
<PRE>   error C2202: 'Func' : not all control paths return a value

</PRE>However, if the same code is compiled as a C file (.C), compilation
completes without any warnings or errors.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: /c /W4
   */

   int Func ( int );

   int Func ( int nParam )
   {
        if ( nParam )
             return 1;
        else
             ;
   }

</PRE>The C++ compiler generates the C2202 error because it is possible for the
execution path of the function Func to flow off the end of the function if
nParam is equal to 0 (zero). Because encountering the } is equivalent to a
return statement with no expression, or a return type of void, the compiler
generates the error because this type does not match the return type of int
specified in the function prototype.
<P>
However, the C compiler sees that there is a return statement present that
does return the correct type. Because of this, the compiler does not issue
a warning. If no return statement is present at all, the C compiler
generates the warning:
<P>
<PRE>   warning C4035: 'Func' : no return value

</PRE>Compilation completes but any function that relies on the return value from
the function Func will be reading possibly invalid data.
<P>
With Microsoft C++, the only exception to the requirement that every
execution path in a C++ file return a value of the correct type is the
main() function.
<P>
If the sample code given below is compiled as a C++ file (.CPP), the
following warning is generated by the compiler:
<P>
<PRE>   warning C4508: 'main' : function should return a value; 'void'
                           return type assumed

</PRE>If the same code is compiled as a C file (.C), the following warning is
generated:
<P>
<PRE>   warning C4035: 'main' : no return value

</PRE>In both cases, compilation will complete.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: /c /W3
   */

   int main ( void );

   int main ( void )
   {
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.10<BR>
Keywords          : CPPIss kbcode<BR>
Version           : MS-DOS:7.0; WINDOWS:1.0,1.5,1.51,1.52; WINDOWS  NT:1.0,2.0,2.1,4.0,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kberrmsg kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

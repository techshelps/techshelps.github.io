

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: GENSPLIT Putting a Generic CWnd in a Splitter Pane </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151032">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/05/15">
<META NAME="Keywords" CONTENT="MfcUI kbfile kbprg kbsample kbui">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A splitter window is a special window with the capability of being split into multiple panes, each usually containing a view. Although the Online documentation says that any CWnd object can replace a view in a pane, it does not elaborate on how to ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAGQ,QBXR,QABO,QDL9,QBWQ,QBWO,QBWN,QAIF,QA01,QAB5,QBXS,QBVR,QA7O,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: GENSPLIT Putting a Generic CWnd in a Splitter Pane</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151032</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 2.2,
<P><PRE>     4.0, 4.1, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A splitter window is a special window with the capability of being split
into multiple panes, each usually containing a view. Although the Online
documentation says that any CWnd object can replace a view in a pane, it
does not elaborate on how to do so.
<P>
GENSPLIT shows how to put different types of windows in splitter panes. The
sample creates an SDI application and creates a splitter window with four
panes. The panes contain a view, a generic CWnd derived window, a listbox,
and a dialog.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Gensplit.exe">Gensplit.exe</A> <I>(size: 75385 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running GENSPLIT.EXE to decompress the file
and recreate the proper directory structure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
GENSPLIT is an MFC SDI application in which CMainFrame::OnCreateClient
has been overridden to create a static splitter with two rows and two
columns. For more information on splitter windows and how to create
them, please see Online Help or the REFERENCES section in this article.
<P>
To create windows in the splitter panes, MFC uses CRuntime class
information. This information is passed to the CSplitterWnd::CreateView
call using the RUNTIME_CLASS macro. This API creates the panes in the
splitter. It first calls CreateObject to create the MFC object and then
calls the virtual function CWnd::Create to create the window. Any MFC class
willing to implement creation using runtime class information must be
tagged DECLARE_DYNCREATE. The corresponding macro, IMPLEMENT_DYNCREATE,
must be added to the implementation file for the class. Also,
CWnd::PostNcDestroy needs to be overridden for the class and it should make
a call to delete this pointer. This brings about cleanup of the dynamically
created MFC object.
<P>
In the GENSPLIT sample, the first pane is a simple view. This view is the
one associated with the document template registered in the application's
InitInstance.
<P>
The second pane is a window represented by an MFC class that is derived
directly from CWnd. The window shows a bouncing ball. To create this pane,
CreateView was passed the Runtime class information for the class.
<P>
The third pane is a listbox. Besides using the call to CreateView, there is
an extra step necessary here. As mentioned above, the pane window is
created by making the virtual call CWnd::Create. The CListBox class does
not have a Create function whose parameter list matches that of the virtual
function CWnd::Create. As a consequence, CreateView's call to Create gets
resolved to CWnd::Create rather than to CListBox::Create.
<P>
All CListBox::Create does is set the WINDOW class to "LISTBOX" and then
call CWnd::Create. Since setting the WINDOW class is the only step missing
in the pane creation, CWnd::PreCreateWindow has been overridden for the
Listbox class to set the lpszClass member of CREATESTRUCT to "LISTBOX". In
this function, listbox-specific window styles have also been set.
<P>
The process to place new Common controls in splitter panes is similar to
the one discussed above for Listbox controls. However, there is one
important difference: Before setting the WINDOW class, you may need to call
InitCommonControls(). This SDK API is necessary to load the Common control
DLL into memory. It is this DLL that is responsible for registering the
WINDOW classes for the Common controls. You need to call this API only if
you haven't already loaded this DLL. This can be done indirectly by
creating a Common control elsewhere in your application.
<P>
The fourth pane is a dialog. Creating a dialog in a pane is slightly
tricky. All the windows created in the panes of a splitter are child
windows of the splitter. Dialog windows are usually pop-up windows. They
can be created as child windows but there is no way to specify the child ID
for them. The splitter window architecture dictates which panes get which
IDs. Also, as in the case of CListBox, CDialog::Create does not have the
same argument list as CWnd::Create.
<P>
Since dialog creation does not go through CWnd::Create, PreCreateWindow
never gets called for CDialog-derived classes. As a consequence,
CWnd::Create was overridden in the CDialog-derived class. Here the base
class call CDialog::Create was made that creates the modeless dialog.
Immediately after this ::SetWindowLong was called to set the child ID of
the dialog to whatever the splitter window architecture demands.
<P>
NOTE: The easiest way to provide dialog-like functionality in a pane is to
work with the CFormView class.
<P>
<P><h2>REFERENCES</h2>
 
<P>
MFC Technical Note no. 29 entitled "Splitter Windows"
CSplitterWnd::CreateView - in file ..\msdev\mfc\src\winsplit.cpp.
<P>
MFC technical Note no. 17 entitled "Destroying MFC objects" for a
discussion on CWnd::PostNcDestroy.
 
<PRE>Keywords          : MfcUI kbfile kbprg kbsample kbui
Technology        : kbMfc
Version           : 1.0 1.5 1.51 1.52 1.0 2.0 2.1
Platform          : NT WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

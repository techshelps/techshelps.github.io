

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Access Violation When Calling COleVariant::Clear() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177912">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1997/12/10">
<META NAME="Keywords" CONTENT="adovc MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When calling COleVariant::Clear(), an access violation occurs when the variant type is VT_DECIMAL.  CAUSE =====  There is special code in COleVariant::Clear() that checks the type of the variant and calls SysFreeString() if it is equal to VT_BSTRT ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEF,QAJX,QADR,QAGI,QAH4,QAUD,QAIF,QA1S,QBW7,QA5V,QAY5,QAI5,QAH6,QABI,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Access Violation When Calling COleVariant::Clear()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177912</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Enterprise Edition, versions 5.0, 5.0sp1,
   5.0sp2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When calling COleVariant::Clear(), an access violation occurs when the
variant type is VT_DECIMAL.
<P>
<P><h2>CAUSE</h2>
 
<P>
There is special code in COleVariant::Clear() that checks the type of the
variant and calls SysFreeString() if it is equal to VT_BSTRT (14). Here is
the code:
<P>
<PRE>   #ifndef _UNICODE
      if (vt == VT_BSTRT)
             ::SysFreeString(bstrVal);
      else
   #endif
      {
             VERIFY(::VariantClear(this) == NOERROR);
      }

</PRE>VT_BSTRT is used to identify ANSI BSTRs and is a special type that MFC uses
internally. The problem is that OLE also defines VT_DECIMAL to be 14.
<P>
Thus, if you call Clear() on a COleVariant, which has a variant type of
VT_DECIMAL, an access violation will occur because the function calls
SysFreeString() on a non-existent string.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Don't call COleVariant::Clear(); instead, call VariantClear() and pass in
the COleVariant.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The GetRows() ADO sample, which is provided with the OLE DB 1.1 SDK,
contains code that can cause the access violation when calling Clear().
<P>
Here is the DoGetRows() function from GETRDLG.CPP:
<P>
<PRE>   HRESULT CGetRowsDlg::DoGetRows()
   {
      HRESULT         hr;
      COleVariant      vBookmark, rgvFields;
      COleVariant      cRows;
      COleVariant      varField, varNewField;
      CString         strLBRow;
      LONG         lNumOfCol, lNumRecords;
      LONG         lIndex[2];
      CListBox      *pListBox =
                               (CListBox *)GetDlgItem(IDD_GETROWSLIST);

      //Perform GetRows on Employee table.

      //Start from the current place
      vBookmark.vt = VT_ERROR;
      vBookmark.scode = DISP_E_PARAMNOTFOUND;

      //Get all columns.
      rgvFields.vt = VT_ERROR;
      rgvFields.scode = DISP_E_PARAMNOTFOUND;

   if (!m_piEmpRecordSet)
      return E_NOINTERFACE;

      hr = m_piEmpRecordSet-&gt;GetRows(   adGetRowsRest,
                                           vBookmark,
                                           rgvFields,
                                           &amp;cRows
                                         );
      if (FAILED(hr)) goto ErrorExit;


      //Find out how many records were actually retrieved,
      //(SafeArrays are 1-based)
      lNumOfCol = 2;
      SafeArrayGetUBound(cRows.parray, 2, &amp;lNumRecords);

      //Clear the listbox
      pListBox-&gt;ResetContent();

      for (lIndex[1] = 0; lIndex[1] &lt;= lNumRecords; lIndex[1]++)
      {
             strLBRow.Empty();//Clear the string
             for (lIndex[0] = 0; lIndex[0] &lt;= lNumOfCol; lIndex[0]++)
             {
               SafeArrayGetElement(cRows.parray, &amp;lIndex[0], &amp;varField);
               hr = VariantChangeType(&amp;varNewField, &amp;varField, 0, VT_BSTR);

               if(hr == S_OK)
               {
                 strLBRow += (LPCWSTR)varNewField.bstrVal;
                 strLBRow += _T(", ");
               }
               varField.Clear();
               varNewField.Clear();
             }
             pListBox-&gt;AddString(strLBRow);
           }

      return hr;

   ErrorExit:
      TCHAR szBuf[256];
      wsprintf(szBuf, _T("Error: %d \n"), hr);
      AfxMessageBox(szBuf);

      return hr;
   }

</PRE>NOTE: If the column type returned from the ADO source is VT_DECIMAL, the
varField.Clear() function will crash because COleVariant::Clear() calls
SysFreeString() on data that is not a string.
<P>
To reproduce the error, add the following lines of code to the function
CGetRowsDlg::DoGetRows():
<P>
<PRE>   COleVariant var10;

   hr = VariantChangeType(&amp;var10, &amp;varField, 0, VT_DECIMAL);
   if(hr!=S_OK)
        AfxMessageBox("Can't VariantChangeType to decimal");
   else
       var10.Clear();

</PRE>Add the code just before the line:
<P>
<PRE>    varField.Clear();
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: bug AV GPF<BR>
Keywords          : adovc MfcOLE<BR>
Version           : WINDOWS:5.0,5.0sp1,5.0sp2<BR>
Platform          : WINDOWS<BR>
Issue type        : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Access Child Process Exit Code from 32-Bit Parent Proc. </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131775">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1995/06/20">
<META NAME="Keywords" CONTENT="CRTIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In the Microsoft products listed at the beginning of this article, there is no C run-time function that will return the system exit code from a child process. However, the Win32 GetExitCodeProcess() API function can retrieve this information. This ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGB,QAH4,QAI4,QAY5,QAUD,QBFY,QAY2,QA1S,QBV8,QALW,QAB9,QBBI,QA6A,QAKD,QDN9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Access Child Process Exit Code from 32-Bit Parent Proc.</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131775</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the Microsoft products listed at the beginning of this article, there is
no C run-time function that will return the system exit code from a child
process. However, the Win32 GetExitCodeProcess() API function can retrieve
this information. This article shows how to use it.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Under Win32, the GetExitCodeProcess() function retrieves the exit status of
the child process. In fact, GetExitCodeProcess() can retrieve the exit
status of any process given the correct process handle. The process handle
itself must have PROCESS_QUERY_INFORMATION access before it can be used.
<P>
If the specified process has not terminated, STILL_ACTIVE is returned as
the exit status. If the process has terminated, the exit status returned is
one of these:

<UL><LI>The exit value specified in the ExitProcess or TerminateProcess
   function.
<P>
   -or-

<LI>The return value from the main or WinMain function of the process.
<P>
   -or-

<LI>The exception value for an unhandled exception that caused the process
   to terminate.
<P>
</UL><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;

   void main(void)
   {
      PROCESS_INFORMATION pInfo;
      STARTUPINFO         sInfo;
      DWORD               exitCode;

      sInfo.cb              = sizeof(STARTUPINFO);
      sInfo.lpReserved      = NULL;
      sInfo.lpReserved2     = NULL;
      sInfo.cbReserved2     = 0;
      sInfo.lpDesktop       = NULL;
      sInfo.lpTitle         = NULL;
      sInfo.dwFlags         = 0;
      sInfo.dwX             = 0;
      sInfo.dwY             = 0;
      sInfo.dwFillAttribute = 0;
      sInfo.wShowWindow     = SW_SHOW;

      if (!CreateProcess(NULL,
                   "command.com /c dir c:\\*.bat",
                         NULL,
                         NULL,
                         FALSE,
                         0,
                         NULL,
                         NULL,
                         &amp;sInfo,
                         &amp;pInfo)) {
         printf("ERROR: Cannot launch child process\n");
         exit(1);
      }

      // Give the process time to execute and finish
      WaitForSingleObject(pInfo.hProcess, 5000L);

      if (GetExitCodeProcess(pInfo.hProcess, &amp;exitCode))
      {
         switch(exitCode)
         {
            case STILL_ACTIVE: printf("Process is still active\n");
                               break;
            default:           printf("Exit code = %d\n", exitCode);
                               break;
         }
      }
      else {
         printf("GetExitCodeProcess() failed\n");
      }
   }

</PRE><h2>REFERENCES</h2>
 
<P>
Books Online documentation for the Win32 GetExitCodeProcess() function.
<P>
For information about 16-bit MS-DOS-based programs, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q58437.htm">Q58437</A></B>
   TITLE     : Accessing Child Process Exit Code from 16-Bit Parent Process

</PRE>For information about 16-bit Windows-based programs, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID:<B><A HREF="../WIN16SDK/Q83301.htm">Q83301</A></B>
   TITLE     :Retrieving Application Exit Code in MS-DOS Window
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 9.00 9.0 9.1 9.10<BR>
Keywords          : CRTIss kbcode<BR>
Version           : WINNT: 2.0,2.1,4.0,5.0;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB:CFormView/Dialogs Sized Larger Under Win32s/WinNT 3.50 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157142">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1996/10/07">
<META NAME="Keywords" CONTENT="MfcUI kbprb kbprg kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  CFormViews and Dialogs will appear larger when running under Win32s or versions of Windows NT earlier than 3.51. This can cause problems if the dialog template was sized so it would fit on a screen in 640x480 resolution or if special sizing was don...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QBWP,QA36,QAH4,QABA,QADF,QABB,QBBI,QAJQ,QAYL,QAG4,QDNL,QDL9,QBWQ,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB:CFormView/Dialogs Sized Larger Under Win32s/WinNT 3.50</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157142</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 2.20 4.00 4.10
WINDOWS NT
kbprg kbtool kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   Microsoft Visual C++, 32-bit Edition, 2.0, 2.1, 2.2, 4.0, 4.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
CFormViews and Dialogs will appear larger when running under Win32s or
versions of Windows NT earlier than 3.51. This can cause problems if the
dialog template was sized so it would fit on a screen in 640x480 resolution
or if special sizing was done.
<P>
<P><h2>CAUSE</h2>
 
<P>
Win32s and versions of Windows NT before 3.51 used bold fonts for dialogs.
Because dialog templates are designed in dialog units, and dialog units are
based on the average font size, this will cause the dialogs to be resized.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
The easiest workaround is to create two dialog templates; one sized for
Windows 95 and Windows NT 3.51 or later, and one sized for Win32s and
Windows NT version 3.5 or earlier. All of the controls on the two dialog
templates should have the same ID so they can be used interchangeably with
the same CFormView or CDialog class.
<P>
The sample code below demonstrates this workaround with a default Visual
C++ 4.x AppWizard-created CFormView derived class.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The font is automatically changed to bold inside the Windows dialog manager
under Win32s and Windows NT version 3.5 and it is not possible to change
this behavior. Furthermore, it is not possible to specify a bold version of
a font or to use the same font on all platforms because the font is
specified only by its typeface name in the dialog template.
<P>
It is easy to change the font inside the dialog or CFormView after it is
displayed by calling CWnd::SetFont(). However, this will not resize the
dialog because it is sized based on the font specified in the dialog
template.
<P>
While it's possible to resize the dialog in the OnInitDialog(), all of
the controls will also need to be resized. This can be tedious and slow
if there are a lot of controls in the dialog template.
<P>
The following steps show the changes necessary to use multiple dialog
templates in a Visual C++ 4.x AppWizard-created project.
<P>
<P><h3>Sample Code</h3>
 

<OL><P><LI>Add a static member variable in the CFormView or Dialog to hold the
   template that is used:
<P>
<PRE>   //////////////////////////////////////////
   // CFormViewView.h

   class CFormViewView : public CFormView
   {

       /// .... Standard code omitted

   public:
       //{{AFX_DATA(CFormtestView)
       enum{ IDD = IDD_FORMVIEW_REGULAR };
           // NOTE: the ClassWizard will add data members here
       //}}AFX_DATA
       static int m_nIDD; //The ID for the dialog template that is used

   // Attributes
   public:

       /// .... Standard code omitted

   };

</PRE><P><LI>Initialize the static member variable, and change the constructor of the
   CFormView derived class to use it:
<P>
<PRE>   ////////////////////////////////////////////////////////////////////////
   //
   // CFormViewView.CPP

   //construction/destruction

   //Set the default dialog template to IDD_FORMVIEW_REGULAR
   int CFormViewView::m_nIDD = IDD_FORMVIEW_REGULAR;

   CFormViewView::CFormViewView()
       : CFormView(m_nIDD) //Use the static member variable for the
                           // template
   {

       /// .... Standard code omitted

   }

</PRE><P><LI>Before any CFormViews/Dialogs are created, check the version, and use
   the appropriate template:
<P>
<PRE>   ////////////////////////////////////////////////////////////////////////
   ///
   // CFormViewApp.CPP

   BOOL CFormViewApp::InitInstance()
   {
       /// .... Standard code omitted

      //Check version
      OSVERSIONINFO osvi;
      memset(&amp;osvi, 0, sizeof(OSVERSIONINFO));
      osvi.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
      GetVersionEx (&amp;osvi);

      //Set alternative template based on platform
      if ((osvi.dwPlatformId == VER_PLATFORM_WIN32s) ||
          ((osvi.dwPlatformId == VER_PLATFORM_WIN32_NT) &amp;&amp;
           (osvi.dwMajorVersion == 3) &amp;&amp; (osvi.dwMinorVersion &lt; 51)))
         CFormtestView::m_nIDD = IDD_FORMVIEW_BOLD;

       // Dispatch commands specified on the command line
       if (!ProcessShellCommand(cmdInfo))
           return FALSE;

       return TRUE;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbtool kbprb<BR>
KBSubcategory: MfcUI<BR>
Additional reference words: 2.00 2.10 2.20 4.00 4.10 W32s kbdsd<BR>
Keywords            : MfcUI kbprb kbprg kbtool<BR>
Technology          : kbMfc<BR>
Version             : 2.00 2.10 2.20 4.00 4.10<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

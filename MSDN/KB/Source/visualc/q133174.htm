

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Locate Where a General Protection (GP) Fault Occurs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q133174">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1995/07/25">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Troubleshooting general protection (GP) faults in a Windows-based application can be a difficult process. This article contains some suggestions and techniques for locating where GP faults occur in C/C++ code.  Using the debugging version of Window...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBKN,QBWO,QDL9,QBWN,QAH4,QBWQ,QAO4,QAGI,QA01,QAY5,QAJH,QBV8,QAB9,QBXS,QAAP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Locate Where a General Protection (GP) Fault Occurs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q133174</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbprg kbtshoot
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Troubleshooting general protection (GP) faults in a Windows-based
application can be a difficult process. This article contains some
suggestions and techniques for locating where GP faults occur in C/C++
code.
<P>
Using the debugging version of Windows can be helpful in troubleshooting
problems in Windows-based applications. For additional information, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN16SDK/Q118891.htm">Q118891</A></B>
   TITLE     : Installing and Using the Debugging Version of Windows

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>What a General Protection (GP) Fault Is</h3>
 
<P>
GP faults occur only in the Standard and 386 Enhanced modes of Windows;
they cannot occur in the Real mode of Windows version 3.0. A GP fault
signifies that something unexpected has happened within the Windows
environment, typically an improper memory access. For example, an
application or a Windows component might read or write to a memory location
that has not been allocated to it (memory that it does not own),
potentially overwriting and corrupting other program code in that area of
memory.
<P>
Another situation where a GP fault may occur involves the passing of
parameters between applications and the Windows environment. Invalid
parameters can cause invalid instructions to be executed, resulting in GP
faults. This is usually the result of an application's internal program
code incorrectly passing specific data that could not be correctly
interpreted by Windows or a Windows-based application.
<P>
<P><h3>How to Find Where a GP Fault Occurs</h3>
 
<P>
Fortunately using utilities such as Dr. Watson, CodeView for Windows, and
the Visual Workbench debugger can make troubleshooting GP faults a little
easier. The .MAP file created by the Visual C++ linker can also be helpful.
<P>
If a GP fault occurs and you are not running the application from within a
debugger, Windows will display a message box that contains text similar to
this:
<P>
<PRE>            CALLSDK caused a General Protection Fault in
                  module CALLSDK.EXE at 0001:02EF.

</PRE>The address given is the Logical Segment : Offset where the error occurred.
<P>
NOTE: The descriptions of the Visual Workbench debugger and CodeView that
follow assume your application has been built with debugging information.
If you are building the application as a Visual Workbench project, you need
to set the build mode to debug in the project options dialog box before
building. If you are building the application as an external project, you
need to use the /Zi or /Z7 compiler option and the /CO linker option in
order to include debugging information when building. If the GP fault
occurs in the release (optimized) version of your application, but does not
occur in the debug version, you can still use the .MAP file for the
application to isolate where the error occurs.
<P>
<P><h3>Using the .MAP File</h3>
 
<P>
The map (.MAP) file is a list file that the Visual C++ linker can create.
It contains information about the executable file that was built. For
additional information, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../UTILITIES/Q80437.htm">Q80437</A></B>
   TITLE     : Description of the Map File Microsoft LINK Creates

</PRE>To create a full .MAP file for the project, add the /MAP:FULL option to the
linker options for the project in the Miscellaneous category.
<P>
To find the function associated with the logical segment : offset pair
described in the previous section, you need to look at the "Publics by
Value" section of the .MAP file to find its associated symbol. In this
section, symbols (publics) are arranged according to their logical segment
: offset addresses (as opposed to the "Publics by Name" section, where
symbols are arranged alphabetically).
<P>
First, locate the logical segment in which the error occurred by matching
the digits to the left of the colon in the .MAP file with those given in
the GP fault dialog box from Windows. Similarly, locate an offset number
that is as close to but less than the offset value given in the GP fault
message box. The symbol associated with this logical segment : offset pair
in the .MAP file indicates the function where the GP fault occurred.
<P>
In a C++ program, the symbol names are usually decorated. The decorated
name of the function is listed along with its readable form, which looks
similar to a function prototype.
<P>
<P><h3>Using Dr. Watson</h3>
 
<P>
Before running your application, start the Dr. Watson utility
(DRWATSON.EXE) located in your Windows directory. This application will run
in the background and generate a DRWATSON.LOG file in your Windows
directory. Dr. Watson logs Windows activity. The .LOG file it generates
contains important information about any errors that occur in a Windows
session.
<P>
After a GP fault occurs, double-click the Dr. Watson icon to get a message
box that says something like this:
<P>
<PRE>    1 new 'Dr. Watson' Failure Reports can be found in file
    '&lt;windows directory&gt;\drwatson.log'

</PRE>The DRWATSON.LOG file is a continuous list of errors that have occurred in
Windows, so the file may contain information about errors that occurred:

<UL><LI>In your current session and application.
<LI>In a previous execution of the application you are trying to debug.
<LI>In an execution of another application that caused an error.
<LI>In previous Windows sessions.
<P>
</UL>The best thing to do is delete or rename the DRWATSON.LOG file before you
start debugging your application, so you are sure that the file contains
only information relevant to your application.
<P>
The most useful part of the file is undoubtedly the "stack dump (stack)"
section. Using this information, you can determine the sequence of
functions that were called and the function where the GP fault occurred. In
addition, Dr. Watson indicates the exact assembler instruction where the
failure occurred, and indicates the module information using:
<P>
<PRE>   ( module name : logical segment : offset )

</PRE>NOTE: Dr. Watson is only shipped with Windows and Windows for Workgroups
versions 3.1 and later. If you do not have access to one of those versions
of Windows, you can still track down GP faults using the debuggers and the
.MAP file.
<P>
<P><h3>Using CodeView for Windows</h3>
 
<P>
CodeView for Windows can be useful in two different ways:

<UL><LI>If the GP fault does not crash or corrupt Windows, you can simply check
   the call stack by pulling down the "Calls" menu. The first symbol in the
   list is associated with the routine that caused the GP fault.

<LI>If the GP fault crashes Windows but still gives the GP fault dialog box
   described above, you can use CodeView to set a breakpoint at the address
   specified by the Logical Segment : Offset pair. This will enable you to
   prevent Windows from crashing, and you can use the "Calls" menu, as
   described above. When loading the source into CodeView, you need to view
   it in mixed source and assembly mode, so you can see the memory
   addresses associated with the code. The Segment : Offset pairs will be
   actual addresses, as opposed to logical addresses. Here, you need to
   note the actual segment address to set the breakpoint correctly.
<P>
</UL>For example, if the GP fault dialog box says that the error occurred at
0001:0947, and when you load the program into CodeView, the entry point is
at 0E4F:0000, you need to set a breakpoint at address 0x0E4F:0x0947
(0E4F:0947). Once the breakpoint is set, you can choose Go from the Run
menu or press the F5 key to run the application. It will now break at the
point where the GP fault occurs, and you can view the call stack by using
the "Calls" menu.
<P>
The idea here is to use the call stack to trace the parameters being passed
and where memory is being accessed prior to the GP fault. You are looking
for places where memory gets overwritten, invalid pointers are referenced,
or invalid parameters are passed.
<P>
The only problem with this technique is if the GP fault occurs in a module
for which there is no debugging information. In this case, you have to set
a breakpoint on the first function in the call chain that does have
debugging information. Because you cannot see the call stack, the only
solution is to step through the code until the GP fault occurs. The goal is
to locate the last function with debugging information you saw before the
GP fault occurred. Once the function is found, you can set a breakpoint in
that function, just before the instruction that causes the GP fault. At
this point you should be able to look through the code for the function to
determine the cause of the problem.
<P>
<P><h3>Using the Visual Workbench Debugger</h3>
 
<P>
You can use the Visual Workbench debugger in the same way you use CodeView
for Windows. With the project loaded in the Visual Workbench, choose Go
from the Debug menu to allow your application to run normally. When a GP
fault occurs, the debugger will indicate that and stop the application. If
possible, it will stop on the line of code where the GP fault occurred.
<P>
It may also display a message box that says "There is no source line
debugging information." This indicates that the error occurred in a
function for which you do not have source code (such as a run-time library
function) or in some operation that has no relevant source code (such as an
assignment or mathematical operation). At this point, you can view the call
stack by choosing View Call Stack from the Debug menu. The function that
caused the GP fault will be the first symbol listed. Double-click the
symbol or click the Go To button to go to the source code for the function
that caused the GP fault (if that code is available).
<P>
<P><h2>REFERENCES</h2>
 
<P>
Dr. Watson: Microsoft Windows Programming Tools, Microsoft Windows
Software Development Kit, 3.1, Chapter 6.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 4.1 4.10 cv cvw gpf<BR>
KBCategory: kbprg kbtshoot<BR>
KBSubCategory: CLngIss CPPLngIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the inner_product Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157392">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/10">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the inner_product STL function in Visual C++.  MORE INFORMATION  Required Header     #include              #include               Prototype ---------     template                                         ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAML,QBFY,QAE5,QABO,QAPF,QDMR,QA56,QA55,QAJ9,QABB,QAP2,QAY5,QBV8,QAJH,QADF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the inner_product Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157392</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the inner_product STL
function in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   #include &lt;numeric&gt;
   #include &lt;functional&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class InputIterator1, class InputIterator2, class _TYPE&gt;
       inline _TYPE inner_product(InputIterator first, InputIterator last,
                           InputIterator first2, _TYPE init)

   template&lt;class InputIterator1, class InputIterator2, class _TYPE,
            class BinaryOperator1, class BinaryOperator2&gt; inline
       _TYPE inner_product(InputIterator1 first, InputIterator1 last,
                           InputIterator2 first2, _TYPE init,
                           BinaryOperator1 binary_op1,
                           BinaryOperator2 binary_op2)

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
inner_product computes its result by initializing the accumulator acc with
init and then modifying it with:
<P>
<PRE>    acc = acc  +  (*i1) * (*i2)

    - or -

    acc = binary_op1(acc, binary_op2(*i1, *i2))

</PRE>for every iterator i1 in the range [first, last) and iterator i2 in the
range [first2, first2 + (last - first)) in order.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>///////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// inner_product.cpp : Demonstrates the use of inner_product().
//
// Description of
//         inner_product(first,last,first2,init)
//         inner_product(first,last,first2,init,binary_op1,binary_op2):
//
//    Computes its result by initializing the accumulator acc with init
//        acc = init
//    and then modifying it with
//        acc = acc  +  (*i1) * (*i2)
//    or
//        acc = binary_op1(acc, binary_op2(*i1, *i2))
//    for every iterator i1 in the range [first, last) and
//    iterator  i2  in  the  range [first2, first2 + (last - first))
//    in order.
//
// Written by Shaun Miller
//  of Microsoft Product Support Services, Languages Developer Support.
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
///////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;

</PRE>typedef vector &lt; float, allocator &lt; float &gt; &gt; FloatArray;
typedef ostream_iterator &lt; float, char, char_traits&lt;char&gt; &gt;
FloatOstreamIt;
<P>
<PRE>void main ()
</PRE>{
<PRE>    FloatOstreamIt itOstream(cout," ");

    // Initialize the arrays
    FloatArray rgF1, rgF2;
    for (int i=1; i&lt;=5; i++) {
        rgF1.push_back(i);
        rgF2.push_back(i*i);
    };

    // Print the arrays
    cout &lt;&lt; "Array 1: ";
    copy(rgF1.begin(),rgF1.end(),itOstream);
    cout &lt;&lt; endl;
    cout &lt;&lt; "Array 2: ";
    copy(rgF2.begin(),rgF2.end(),itOstream);
    cout &lt;&lt; endl;

    // Compute the inner_product of the arrays
    // This is the sum of the products (S.O.P) of the corresponding
</PRE>elements
<PRE>    float ip1 = inner_product(rgF1.begin(),rgF1.end(),rgF2.begin(),0);
    cout &lt;&lt; "The inner product (S.O.P) of Array1 and Array2 is "
       &lt;&lt; ip1
       &lt;&lt; endl;

    // Compute the inner_product of the arrays
    // This is the product of the sums (P.O.S.) of the corresponding
</PRE>elements
<PRE>    float ip2 = inner_product(rgF1.begin(),rgF1.end(),rgF2.begin(),1,
                            times&lt;float&gt;(),plus&lt;float&gt;());
    cout &lt;&lt; "The inner product (P.O.S.) of Array1 and Array2 is "
       &lt;&lt; ip2
       &lt;&lt; endl;
</PRE>}
<P>
Program Output is:
<P>
Array 1: 1 2 3 4 5
Array 2: 1 4 9 16 25
The inner product (S.O.P) of Array1 and Array2 is 225
The inner product (P.O.S.) of Array1 and Array2 is 86400
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample inner_product<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC: CDC::SelectObject, CDC::SelectStockObject Return </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117686">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1994/07/05">
<META NAME="Keywords" CONTENT="MfcMisc kbdocerr kbdocfix kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The pointer to a CGdiObject that is returned from CDC::SelectObject() or CDC::SelectStockObject() is stored for use. When the pointer is used later, it causes unexpected behavior [for example, a general protection fault (GPF) or heap corruption].  ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAUD,QDL9,QBWQ,QBWO,QBWN,QBFY,QBF0,QAO2,QAO3,QAY5,QAGI,QALW,QBQU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOC: CDC::SelectObject, CDC::SelectStockObject Return</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117686</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 | 1.00
<PRE>MS-DOS | WINDOWS   | WINDOWS NT
</PRE>kbprg kbdocerr kbdocfix
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P>
<P><PRE>    - Microsoft C/C++, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The pointer to a CGdiObject that is returned from CDC::SelectObject() or
CDC::SelectStockObject() is stored for use. When the pointer is used later,
it causes unexpected behavior [for example, a general protection fault
(GPF) or heap corruption].
<P>
The documentation for the SelectObject() member does not make clear that
the pointer returned from the call might point to a temporary object that
is only valid during processing of one Windows message. This is an error in
the documentation.
<P>
The CDC::SelectObject() and CDC::SelectStockObject() functions make a call
to CGdiObject::FromHandle() to determine which CGdiObject object to return.
If there is no CGdiObject object attached to the Windows GDI object that is
currently selected in the DC, then a temporary object is created. See the
documentation for CGdiObject::FromHandle() for further information.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If you want to store the object that was previously selected in the DC,
then you should store the Windows handle to the GDI object (HGDIOBJ), not a
pointer to the CGdiObject. The handle can be obtained from the temporary
file by using the function CGdiObject::GetSafeHandle(). You can later use
the function CGdiObject::FromHandle() to obtain a pointer to a CGdiObject
that encapsulates the HGDIOBJ. For example:
<P>
<PRE>   ...
   // Select a pen in the DC.
   CPen *ppenOld = pDC-&gt;SelectObject(ppenNew);
   m_hpenOld = (HPEN) ppenOld-&gt;GetSafeHandle();
   ...

   ...
   // In some other message handler we wish to
   // restore the old pen.
   CPen *ppenOld = CPen::FromHandle(m_hpenOld);
   pDC-&gt;SelectObject(ppenOld);
   ...

</PRE><h2>REFERENCES</h2>
 
<P>
For further information on mapping C++ objects to handles in the MFC, see
MFC TechNote #3, "Mapping of Windows Handles to Objects."
<P>
NOTE: The documentation for Visual C++ 2.0 (MFC 3.0) has been corrected.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbdocerr kbdocfix<BR>
KBSubcategory: MfcMisc<BR>
Additional reference words: 7.00 1.00 1.50 2.00 2.10 2.50 CBrush CFont<BR>
CPalette CPen<BR>
Keywords          : MfcMisc kbdocerr kbdocfix kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00   | 1.00 1.50 | 1.00<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MS-DOS Extenders Used in Microsoft Development Tools </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123667">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/12/06">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A number of Microsoft compilers, assemblers, and linkers use a DOS extender to gain access to memory beyond conventional memory. The LINK.EXE, BSCNAME.EXE, and CV.EXE programs that ship with Microsoft C/C++ version 7.0 and MASM version 6.1 have a b...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBW6,QDJD,QAH4,QBFY,QAJH,QBW7,QBWS,QAYV,QAI5,QAOT,QAH5,QAGU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>MS-DOS Extenders Used in Microsoft Development Tools</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123667</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.10 6.11 7.00 | 1.00 1.00a 1.50
<PRE>MS-DOS              | WINDOWS
</PRE>kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
<LI>Microsoft Fortran PowerStation for MS-DOS, versions 1.0 and 1.0a
<LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.1, and 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A number of Microsoft compilers, assemblers, and linkers use a DOS
extender to gain access to memory beyond conventional memory. The LINK.EXE,
BSCNAME.EXE, and CV.EXE programs that ship with Microsoft C/C++ version 7.0
and MASM version 6.1 have a built-in 16-bit DOS extender that can work
with DPMI, VCPI, and XMS memory. The compiler that comes with Microsoft
C/C++ version 7.0 uses a 32-bit DOS extender that only works with DPMI
memory. Other compilers, assemblers, and utilities use a 32-bit DOS
extender that will work with DPMI, VCPI, and XMS memory. This article
describes these DOS extenders and memory managers.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When a DOS extender accesses memory, it goes through an extended memory
manager to ask for extended memory. This prevents the DOS extender from
conflicting with another program that is using extended memory.
<P>
Windows and OS/2 version 2.0 have extended memory managers built into their
virtual machines (VM). If you are not using Windows or OS/2 version 2.0,
you can use extended memory managers such as HIMEM, EMM386, 386MAX, and
QEMM. These memory managers provide three different types of extended
memory. The three types are: XMS (provided by HIMEM), VCPI (provided by
EMM386 and older versions of 386MAX and QEMM), and DPMI (provided by
everything else).
<P>
You can have your 16-bit program run in conventional memory and access data
in extended memory through the memory manager, but this is tedious because
the memory has to be swapped back and forth between conventional and
extended memory, and only data can be stored in the extended memory. In
addition, the program has to be written to do this swapping of conventional
and extended memory. You can picture a program that uses extended memory,
but does not use a DOS extender, to work like this:
<P>
<PRE>          -------------
         |   program   |
          -------------
            V       V
       --------   ----------------
      | MS-DOS | | memory manager |
       --------   ----------------

</PRE>Notice that the program accesses MS-DOS and the memory manager directly,
but the program doesn't run in extended memory.
<P>
The DOS extender is what allows a program to run in extended memory and
use extended memory. However, instead of accessing MS-DOS or the memory
manager, the program does everything through the DOS extender. Using a
DOS extender typically just requires the program to be linked with the
DOS extender or linked with code that makes the program DOS extender
ready. No special code has to be written to handle the extended memory. You
can picture a program that uses a DOS extender to work like this:
<P>
<PRE>          -------------
         |   program   |
          -------------
                V
         -------------------
        |  MS-DOS extender  |
         -------------------
            V       V
       --------   ----------------
      | MS-DOS | | memory manager |
       --------   ----------------

</PRE>Notice that the program goes through the DOS extender for everything,
and the program runs in extended memory.
<P>
The MASM version 6.0 assembler and LINK version 5.2 linker can use a 16-bit
DOS extender that they load from MLX.EXE or LINKX.EXE respectively. This
DOS extender is referred to as DOSX16. The DOSX16 DOS extender will
work with a DPMI, VCPI, or XMS memory manager, in that order. If DOSX16
doesn't find DPMI memory, it checks for VCPI memory. If DOSX16 doesn't find
VCPI memory, it checks for XMS memory. Running MLX or LINKX loads DOSX16
and allows the DOS-extender-ready ML or LINK to run using extended
memory. You can picture the interaction between the program, DOSX16, the
memory manager, and MS-DOS like this:
<P>
<PRE>          -------------
         |   program   |
          -------------
                V
     --------------------------
    |          DOSX16          |
     --------------------------
         V                    V
         V               &lt;&lt;&lt; ------
         V             V    | DPMI |
         V       &lt;&lt;--------  ------
         V      V   | VCPI |
   --------   -----  ------
  | MS-DOS | | XMS |
   --------   -----

</PRE>The C/C++ version 7.0 compiler uses a 32-bit DOS extender that it loads
from MS32KRNL.DLL. This MS-DOS extender is referred to as DOSX32. Because
32-bit programs can't run on MS-DOS directly, you have to load the MS-DOS
extender to run the compiler. The DOSX32 DOS extender will only work
with a DPMI memory manager, so you have to load a DPMI memory manager. You
could picture the interaction between the program, DOSX32, memory manager,
and MS-DOS like this:
<P>
<PRE>          -------------
         |   program   |
          -------------
                V
      ---------------------
     |        DOSX32       |
      ---------------------
          V          V
     --------     ------
    | MS-DOS |   | DPMI |
     --------     ------

</PRE>The compilers included with Visual C++ for Windows and Fortran
Powerstation, the assemblers included with MASM version 6.1 and later, and
some of the other utilities in these products use a 32-bit DOS extender
that it loads from DOSXNT.EXE. This DOS extender is referred to as DOSXNT.
Because 32-bit programs can't run on MS-DOS directly, you have to load the
DOS extender to run the assembler. Unlike DOSX32, the DOSXNT DOS extender
will work with a DPMI, VCPI, or XMS memory manager. Also unlike DOSX16, in
cases where a VCPI memory manager is present but there is no page frame
available, DOSXNT is still capable of accessing extended memory. You could
picture the interaction between the program, DOSXNT, memory manager, and MS-
DOS like this:
<P>
<PRE>          -------------
         |   program   |
          -------------
                V
     -------------------------
    |         DOSXNT          |
     -------------------------
       V                    V
       V              &lt;&lt;&lt; ------
       V             V   | DPMI |
       V        &lt;&lt;-------------
       V       V  | VCPI |
   --------   ------------
  | MS-DOS | | XMS |
   --------   -----
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.10 7.00 6.11 1.00 1.00a 1.50<BR>
KBCategory: kbtool<BR>
KBSubcategory: TlsMisc<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

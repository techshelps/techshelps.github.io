

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Gain Access to an ActiveX Control from its Property Page </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143432">
<META NAME="KBModify" CONTENT="1998/02/17">
<META NAME="KBCreate" CONTENT="1996/02/01">
<META NAME="Keywords" CONTENT="CDKIss MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When using an ActiveX control, you find situations where there is a need to call member functions or gain access to member variables of the control derived class from its associated property page. This can be achieved by making use of the array of ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAB5,QA7O,QAMN,QAOE,QAHV,QBWA,QAYL,QAUD,QAW6,QAR7,QAO3,QAO2,QBWC,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Gain Access to an ActiveX Control from its Property Page</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143432</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When using an ActiveX control, you find situations where there is a need to
call member functions or gain access to member variables of the control
derived class from its associated property page. This can be achieved by
making use of the array of IDispatch pointers (held by each property page)
that represent the objects being affected due to the manipulations done
through the property page. This article explains in detail how this can
implemented and gives a code sample to illustrate it.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Property sheets, in an ActiveX control, allow an end user to directly
manipulate the control's properties by displaying one or more property
pages that display a collection of properties. These properties could
belong either to one particular control or to a collection of ActiveX
controls.
<P>
Each ActiveX control property page is an in-proc object with its own CLSID
that implements the interface IPropertyPage. The IPropertyPage::SetObjects
member function is used to provide a property page with pointers to the
objects (IUnknowns) manipulated by this particular page. Please refer to
the OLE Programmer's Reference, Vol. 1, for more information about the
SetObjects function.
<P>
The MFC implementation for the IPropertyPage interface stores the object
pointers as an array of IDispatchs representing the controls that are
affected by a particular property page. This array can be accessed by using
COlePropertyPage::GetObjectArray(). The property pages in MFC make use of
this IDispatch array to apply the changes directly to those objects (that
is, the controls) by creating a COleDispatchDriver-derived class, attaching
the IDispatch to this class, and invoking the SetProperty/GetProperty of
COleDispatchDriver to convey the change to the control-derived class.
<P>
An ActiveX Control generated using the ControlWizard creates a property
page that can be used to manipulate the properties of one particular
ActiveX control rather than manipulating a collection of controls. Hence,
the control associated to a property page can be accessed by obtaining the
previously mentioned IDispatch array in the COlePropertyPage and calling
the static function CCmdTarget::FromIDispatch to return a pointer to the
CCmdTarget object associated with any one of the IDispatchs. The sample
code section of this article illustraties this method.
<P>
Note that calling CCmdTarget::FromIDispatch(), for an IDispatch pointer
belonging to an ActiveX Control, will always return NULL in versions before
MFC 4.x. For more information about this problem, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q138414.htm">Q138414</A></B>
   TITLE     : PRB: FromIDispatch Returns NULL for OLE Control

</PRE>This is no longer a problem in versions MFC 4.x.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // The header file of the control-derived class must be included in
   // the same source file.
   #include "myctrl.h"

   CMyCtrl* CMyPropPage::GetControlClass()
   {
     CMyCtrl *pMyCtrl;
     ULONG Ulong;

     // Get the array of IDispatchs stored in the property page
     LPDISPATCH FAR *m_lpDispatch = GetObjectArray(&amp;Ulong);

     // Get the CCmdTarget object associated to any one of the above
     // array elements
     pMyCtrl = (CMyCtrl*) CCmdTarget::FromIDispatch(m_lpDispatch[0]);

     // Cleanup
     return pMyCtrl;
   }

   // If your control has a public member variable, in this case
   // I am using m_direct_control, then that variable can be
   // manipulated as follows.

   void CMyPropPage::OnLButtonDown(UINT nFlags, CPoint point)
   {
     // Modify a member variable of Control directly.
     CMyCtrl *pMyCtrl = GetControlClass();
     pMyCtrl-&gt;m_direct_control++;

     // Display the new value of the variable in a message box.
     char buf[100];
     AfxMessageBox (_itoa (pMyCtrl-&gt;m_direct_control, buf, 10));

     COlePropertyPage::OnLButtonDown(nFlags, point);
   }

</PRE>In this code, it is assumed that the array of IDispatchs returned from
GetObjectArray holds the same IDispatch pointer because in a default
ControlWizard-generated application, each property page manipulates a
particular ActiveX control.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ocx visualc<BR>
Keywords          : CDKIss MfcOLE<BR>
Technology        : kbMfc kbole<BR>
Version           : Winnet:1.0,1.5,1.51,1.52,2.0,2.1,2.2,5.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Calling DAO Directly from MFC to Change a User's Password </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149594">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1996/04/05">
<META NAME="Keywords" CONTENT="kbcode kbprg MfcDAO">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The MFC DAO database classes offer a subset of the Data Access Object Hierarchy. It is possible to manipulate the entire hierarchy with the help of OLE DAO interfaces available within the MFC Library. This article offers a demonstration of how to m...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QA1S,QAGU,QAWK,QAH4,QBBS,QAW6,QAGI,QAY2,QDN9,QBXS,QAZV,QA9Q,QABA,QBWF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Calling DAO Directly from MFC to Change a User's Password</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149594</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.0, 4.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The MFC DAO database classes offer a subset of the Data Access Object
Hierarchy. It is possible to manipulate the entire hierarchy with the help
of OLE DAO interfaces available within the MFC Library. This article offers
a demonstration of how to manipulate these interfaces in order to change
the password of a user object found in the Users collection.
<P>
NOTE: Beginning with Visual C++ version 4.2, you will find this information
and more in MFC Technical Note #54 in the Visual C++ online documentation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The OLE interfaces for each object in the DAO Access Object Hierarchy are
defined in the file found in the \Msdev\Include directory. These interfaces
provide methods that allow you to manipulate the entire DAO Hierarchy. For
many of the methods in the DAO Interfaces, you will need to manipulate a
BSTR object (a length-prefixed string used in OLE Automation). The BSTR
object typically is encapsulated within the VARIANT data type. The MFC
class COleVariant itself inherits from the VARIANT data type.
<P>
Depending on whether you build your project for ANSI or UNICODE, the DAO
interfaces will return ANSI or UNICODE BSTRs. There are two macros (V_BSTR
and V_BSTRT) that are useful for assuring that the DAO interface gets the
BSTR of the expected type.
<P>
V_BSTR will extract the bstrVal member of a COleVariant. This macro is
typically used when you need to pass the contents of a COleVariant to a
method of a DAO interface. The following code fragment shows both the
declarations and actual use for two methods of DAOUser that take advantage
of the V_BSTR macro:
<P>
<PRE>  COleVariant varOldName;
  COleVariant varNewName( _T("NewUser"), VT_BSTRT );

  // Code to assign pUser to a valid value omitted
  DAOUser *pUser = NULL;

  // These method declarations were taken from Dbdaoint.h
  // STDMETHOD(get_Name) (THIS_ BSTR FAR* pbstr) PURE;
  // STDMETHOD(put_Name) (THIS_ BSTR bstr) PURE;

  DAO_CHECK( pUser-&gt;get_Name ( &amp;V_BSTR(&amp;varOldName) ) );
  DAO_CHECK( pUser-&gt;put_Name ( V_BSTR (&amp;varNewName) ) );

</PRE>Note that VT_BSTRT is required in the constructor of COleVariant as
described in the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q140599.htm">Q140599</A></B>
   TITLE     : PRB: MFC DAO Functions Accepting COleVariant Strings
               May Fail

</PRE>V_BSTRT will extract either a ANSI or UNICODE bstrVal member of COleVariant
depending on the type of build (ANSI or UNICODE). The following code
demonstrates how to extract the BSTR value from a COleVariant into a
CString:
<P>
<PRE>  COleVariant varName( _T( "MyName" ), VT_BSTRT );

  CString str = V_BSTRT( &amp;varName );

</PRE>The V_BSTRT macro, along with other tricks to crack open other types stored
within COleVariant, is demonstrated in the DAOView sample (DAOView is
included with Visual C++ 4.x). Specifically, this translation is performed
in the CCrack::strVARIANT method. This method, where possible, translates
the value of a COleVariant into an instance of CString.
<P>
The "Sample Code" section of this article uses these techniques to
demonstrate calling the DAO OLE interfaces to change a user's password.
This is done by manipulating two interfaces in particular: DAOUser and
DAOUsers. DAOUsers is a collection of user objects, and like many of the
collections inherits from the _DAODynaCollection interface. This interface
offers two methods:

<UL><LI>Append
<LI>Delete
<P>
</UL>In addition, the _DAODynaCollection inherits from _DAOCollection. This
interface offers three methods:

<UL><LI>get_Count
<LI>Refresh
<LI>_newEnum
<P>
</UL>This provides a common set of methods for DAO collection interfaces.
<P>
Finally, in order to change the user's password in this example, you will
need to create a user named NewUser with a password of PassWord. The
easiest way to do this is to use Microsoft Access. Note that the default
password for a newly created user in Microsoft Access is blank. You will
need to log in as that user in order to set the password. For more
information, please see the Microsoft Jet Database Engine Programmer's
Guide, Chapter 10, "Managing Security."
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // The following code presents several functions you can use to manage
   // MFC DAO classes in a way that allows you to call the DAO interfaces.
   // It then shows how to use those functions within InitInstance().

   // Set the system database that the DAO database engine will use:
   void AfxDaoSetSystemDB(CString &amp; strSystemMDB)
   {
     COleVariant varSystemDB(strSystemMDB,VT_BSTRT );

     // Initialize DAO for MFC:
     AfxDaoInit();
     DAODBEngine* pDBEngine = AfxDaoGetEngine();

     ASSERT(pDBEngine != NULL);

     // Call put_SystemDB method to set the system database for DAO engine:
     DAO_CHECK( pDBEngine-&gt;put_SystemDB( varSystemDB.bstrVal ) );
   }

   void AfxDaoSetDefaultUser(CString &amp; strUserName, CString &amp; strPassword)
   {
     COleVariant varUserName( strUserName, VT_BSTRT );
     COleVariant varPassword( strPassword, VT_BSTRT );

     DAODBEngine* pDBEngine = AfxDaoGetEngine();
     ASSERT(pDBEngine != NULL);

     // Set default user:
     DAO_CHECK( pDBEngine-&gt;put_DefaultUser(varUserName.bstrVal));

     // Set default password:
     DAO_CHECK( pDBEngine-&gt;put_DefaultPassword(varPassword.bstrVal));
   }

   void AfxDaoChangePassword(CString &amp; strUserName, CString &amp;
   strOldPassword, CString &amp; strNewPassword)
   {

       // Create(Open) Workspace:
       CDaoWorkspace   wsp;
       CString         strWspName     = _T("Temp Workspace");

       wsp.Create( strWspName, strUserName, strOldPassword );
       wsp.Append();

       // Determine how many objects there are in the Users collection:
       short       nUserCount;
       short       i;
       DAOUser     *pUser  = NULL;
       DAOUsers    *pUsers = NULL;

       // Side-effect is implicit OLE AddRef() on DAOUser object:
       DAO_CHECK( wsp.m_pDAOWorkspace-&gt;get_Users( &amp;pUsers ) );

       // Side-effect is implicit OLE AddRef() on DAOUsers object:
       DAO_CHECK( pUsers-&gt;get_Count( &amp;nUserCount ) );

   TRACE( "# of users in collection = %d\n", nUserCount );

       // Traverse through the list of users and change password for userid
       // used to create/open the workspace:
       for( i = 0; i &lt; nUserCount; i++ )
       {
           COleVariant varIndex( i, VT_I2 );
           COleVariant varName;

           // Retrieve information for user i
           DAO_CHECK( pUsers-&gt;get_Item( varIndex, &amp;pUser ) );

           // Retrieve name for user i
           DAO_CHECK( pUser-&gt;get_Name( &amp;V_BSTR(&amp;varName)) );

           TRACE( "User # %d Name = %s\n", i, V_BSTRT(&amp;varName) );

           CString strTemp = V_BSTRT(&amp;varName);

           // If there is a match, change the password:
           if( strTemp == strUserName )
           {
               COleVariant varOldPwd( strOldPassword, VT_BSTRT );
               COleVariant varNewPwd( strNewPassword, VT_BSTRT );

               DAO_CHECK( pUser-&gt;NewPassword( V_BSTR( &amp;varOldPwd ),
                                              V_BSTR( &amp;varNewPwd ) ) );

               TRACE( "\t Password is changed\n" );
           }
       }

       // Clean up: decrement the usage count on the OLE objects:
       pUser-&gt;Release();
       pUsers-&gt;Release();

       wsp.Close();
   }

   BOOL CMyApp::InitInstance()
   {
     // Specify path to the Microsoft Access system database:
     CString strSystemDB =
        _T("c:\\Program Files\\MSOffice\\access\\System.mdw");

     // Set system database before MFC initilizes DAO:
     AfxDaoSetSystemDB(strSystemDB);

     // User name and password manually added by using Microsoft Access:
     CString strUserName = _T("NewUser");
     CString strOldPassword = _T("Password");
     CString strNewPassword = _T("NewPassword");

     // Set default user so that MFC will be able to log in by default
     // using the user name and password from the system database:
     AfxDaoSetDefaultUser(strUserName,strOldPassword);

     // Change the password. You should be able to call this function from
     // anywhere in your MFC application:
     ChangePassword(strUserName,strOldPassword,strNewPassword);

   // Remainder of your InitInstance code:
   ...

   }

</PRE><h2>REFERENCES</h2>
 

<UL><LI>Microsoft Jet Database Engine Programmer's Guide, ISBN# 1-55615-877-7
   Chapter 10 "Managing Security"

<LI>Tech Note #54, "Calling DAO Directly While Using MFC DAO Classes."

<LI>DAOVIEW Sample that ships with Visual C++ 4.x.

<LI>The following articles in the Microsoft Knowledge Base:
<P>
   ARTICLE-ID: <B><A HREF="../VISUALC/Q146876.htm">Q146876</A></B>
<PRE>   TITLE     : PRB: DAO Error 3028 When Creating a DAO Workspace

   ARTICLE-ID: <B><A HREF="../VISUALC/Q140599.htm">Q140599</A></B>
   TITLE     : PRB: MFC DAO Functions Accepting COleVariant Strings
               May Fail

   ARTICLE-ID: <B><A HREF="../VISUALC/Q143408.htm">Q143408</A></B>
   TITLE     : BUG: Assertion Failure After Using CDaoWorkspace::Create()
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode kbprg MfcDAO<BR>
Technology          : kbMfc<BR>
Version             : 4.0 4.1<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Inline Functions Instantiated when Not Referenced </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116371">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/06/16">
<META NAME="Keywords" CONTENT="CLIss kb16bitonly kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  If a function is defined as  __inline  and is not referred to in the code, the inline function is still instantiated. This happens in the C/C++ Compiler, versions 8.0 and 8.0c, when you use either the /Zi or both the /f- and /AL compiler options. W...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAOT,QAY5,QAH4,QBV8,QBVV,QBA8,QAB9,QAR4,QA56,QA55,QAAP,QAKP,QAO4,QAB4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Inline Functions Instantiated when Not Referenced</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116371</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50
MS-DOS | WINDOWS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P>
<P><PRE>    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If a function is defined as "__inline" and is not referred to in the code,
the inline function is still instantiated. This happens in the C/C++
Compiler, versions 8.0 and 8.0c, when you use either the /Zi or both the /f-
and /AL compiler options. When you use the C/C++ Compiler, version 7.0, the
error occurs only when you use the /Zi compiler option.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, do one of the following:

<UL><LI>Because this behavior occurs when the functions are defined as "inline"
   but not referred to in the code, use compiler directives such as
   "#ifndef" to exclude the function from being compiled.
<P>
   - or -

<LI>Either compile the source code without any debugging information (no /Zi
   option) or compile using the fast compiler (with the /f compiler
   option).
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed above. This is not a problem in Visual C++, 32-bit Edition. This
problem was corrected in Visual C++ version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The inline and _inline keywords allow the compiler to insert a copy of the
function body in each place where the function is called. The substitution
occurs at the discretion of the compiler.
<P>
If the following sample code is compiled using /Zi (or /f- and /AL if using
Visual C++), the linker returns an "unresolved external" error on
"_somevariable". Because the function "func()" is not being referred to in
the code, the compiler does not instantiate it unless the compiler options
mentioned above are used. If func() is instantiated, the linker tries to
resolve the reference to _somevariable, and, not finding it, generates the
"unresolved external" error.
<P>
<P><h3>Sample Code</h3>
 
<PRE>/* Compile options needed: /Zi or /f- /AL
*/

   extern int somevariable;

   __inline void func()
   {
      somevariable=1;
   }

   void main(void)
   {
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 7.00 8.00 8.00c<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords          : CLIss kb16bitonly kbbuglist kbfixlist kbtool<BR>
Version           : 7.00   | 1.00 1.50<BR>
Platform          : MS-DOS WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

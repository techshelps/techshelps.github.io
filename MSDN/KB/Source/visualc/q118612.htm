

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Schema Numbers Not Stored if Serialize() Called Directly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118612">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1994/07/25">
<META NAME="Keywords" CONTENT="MfcFileIO kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you store an object in an archive by calling Serialize() directly, the schema number for the object is not stored. As a result, if an older version of an object with an older schema number is read using a later version of the object, a CArchiv...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAKC,QBC6,QAG8,QAGI,QBVV,QA2X,QAUR,QAH4,QBFY,QAY5,QANY,QAKM,QAWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Schema Numbers Not Stored if Serialize() Called Directly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118612</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 2.20 4.00 4.10 4.20
<PRE>MS-DOS | WINDOWS             | WINDOWS NT
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 2.2,
      4.0, 4.1, 4.2
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you store an object in an archive by calling Serialize() directly, the
schema number for the object is not stored. As a result, if an older
version of an object with an older schema number is read using a later
version of the object, a CArchiveExeception is not produced. Instead, the
object reads the data that was written in the older format, using code that
reads the newer format; this often fails, causing the application to crash.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
MFC objects that use the DECLARE_SERIAL and IMPLEMENT_SERIAL macros have
schema numbers that indicate the "version" of the object. An MFC archive
maintains a list of objects and their schema numbers. When an object is
stored by means of the insertion operator (&lt;&lt;) or the WriteObject()
function, the schema number is also stored. Then, when the object is
retrieved using the extraction operator (&gt;&gt;) or the ReadObject() function,
the schema number from the archive is compared with the schema number of
the object in the application. If they are different, a CArchiveException
is produced.
<P>
When an object is stored by calling the Serialize() function of the object
directly, the schema number is not stored. When an older version of an
object is read back into the archive, Serialize() simply attempts to read
the data from the archive using the newer code for the object. If the data
format of the object has changed, the object is filled with bad data and
most likely causes the application to crash.
<P>
One way to avoid this problem is to use the insertion and extraction
operators, or ReadObject() and WriteObject(), whenever you serialize an
object. However, there are cases where you cannot do this and need to call
Serialize() directly. When you archive an object using the insertion and
extraction operators, or ReadObject() and WriteObject(), MFC dynamically
creates the object when it is loaded. If the memory for your object is
already allocated when you are ready to load the object, you will not want
MFC to create a new object, so you need to call Serialize() directly.
<P>
If you need to store an object by calling Serialize() directly, then you
may want to have your object contain its own version number in its
Serialize() function. While you are loading the object, check this number
to verify that the versions are the same.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 7.00 1.00 1.50 2.00 2.10 2.20 2.50 2.51<BR>
2.52 3.00 3.10 4.00 4.10 4.20<BR>
KBCategory: kbprg<BR>
KBSubcategory: MfcFileIO<BR>
Keywords          : MfcFileIO kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00 | 1.00 1.50 1.51 1.52 | 1<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

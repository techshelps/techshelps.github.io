

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Adding a Full Screen Feature to an MFC Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q164162">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1997/02/24">
<META NAME="Keywords" CONTENT="kbsample MfcDocView kbfile kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The FSCRN sample includes code that you can use to add a Full Screen feature to a Visual C++ 4.x MFC Application. This is similar to what you see when you select the Full Screen menu item in Microsoft Developer Studio. The code shows which function...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBJL,QBJM,QAVI,QAH4,QBE7,QBE6,QAUD,QAJH,QAPF,QBTL,QAJ4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Adding a Full Screen Feature to an MFC Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q164162</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.1, 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The FSCRN sample includes code that you can use to add a Full Screen
feature to a Visual C++ 4.x MFC Application. This is similar to what you
see when you select the Full Screen menu item in Microsoft Developer
Studio. The code shows which functions must be created and demonstrates
how you can create a floating toolbar, which you can click to undo the
Full Screen mode.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Fscrn.exe">Fscrn.exe</A> <I>(size: 45962 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The sample code below has been added to the CMainFrame class of the
AppWizard-generated application. Here is a list of the four functions and
what they accomplish:

<OL><P><LI>OnViewFullScreen - Handler for the Full Screen menu item.

<P><LI>OnGetMinMaxInfo - Traps the WM_GETMINMAXINFO message to allow you to
   increase the size of the window.

<P><LI>IsFullScreen- Tests whether the application is in full screen mode.

<P><LI>OnUpdateViewFullScreen - Checks or unchecks the Full Screen menu item
   depending on the mode the application is in.
<P>
</OL><h3>Sample Code</h3>
 
<P>
<PRE>      void CMainFrame::OnViewFullScreen()
      {
          RECT rectDesktop;
          WINDOWPLACEMENT wpNew;

          if (!IsFullScreen())
          {
              // need to hide all status bars
              m_wndStatusBar.ShowWindow(SW_HIDE);
              m_wndToolBar.ShowWindow(SW_HIDE);

              // We'll need these to restore the original state.
              GetWindowPlacement (&amp;m_wpPrev);

              m_wpPrev.length = sizeof m_wpPrev;

              //Adjust RECT to new size of window
              ::GetWindowRect ( ::GetDesktopWindow(), &amp;rectDesktop );
          ::AdjustWindowRectEx(&amp;rectDesktop, GetStyle(), TRUE,
              GetExStyle());

              // Remember this for OnGetMinMaxInfo()
              m_FullScreenWindowRect = rectDesktop;

              wpNew = m_wpPrev;
              wpNew.showCmd =  SW_SHOWNORMAL;
              wpNew.rcNormalPosition = rectDesktop;

              m_pwndFullScrnBar=new CToolBar;

          if(!m_pwndFullScrnBar-&gt;Create(this,
             CBRS_SIZE_DYNAMIC|CBRS_FLOATING)
                 || !m_pwndFullScrnBar-&gt;LoadToolBar(IDR_FULLSCREEN))
            {
            TRACE0("Failed to create toolbar\n");
                 return;      // fail to create
         }

               //don't allow the toolbar to dock
               m_pwndFullScrnBar-&gt;EnableDocking(0);
          m_pwndFullScrnBar-&gt;SetWindowPos(0,100,100,
      0,0,SWP_NOSIZE|SWP_NOZORDER|SWP_NOACTIVATE|SWP_SHOWWINDOW);
          m_pwndFullScrnBar-&gt;SetWindowText(_T("Full Screen"));
            FloatControlBar(m_pwndFullScrnBar, CPoint(100,100));
          m_bFullScreen=TRUE;
          }
          else
          {
               m_pwndFullScrnBar-&gt;DestroyWindow();
          delete m_pwndFullScrnBar;

               m_bFullScreen=FALSE;

               m_wndStatusBar.ShowWindow(SW_SHOWNORMAL);
               m_wndToolBar.ShowWindow(SW_SHOWNORMAL);
               wpNew = m_wpPrev;
           }

           SetWindowPlacement ( &amp;wpNew );
      }

      void CMainFrame::OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI)
      {
          if (IsFullScreen())
          {
              lpMMI-&gt;ptMaxSize.y = m_FullScreenWindowRect.Height();
              lpMMI-&gt;ptMaxTrackSize.y = lpMMI-&gt;ptMaxSize.y;
              lpMMI-&gt;ptMaxSize.x = m_FullScreenWindowRect.Width();
              lpMMI-&gt;ptMaxTrackSize.x = lpMMI-&gt;ptMaxSize.x;
          }

      }

      BOOL CMainFrame::IsFullScreen()
      {
           return m_bFullScreen;
      }

      void CMainFrame::OnUpdateViewFullScreen(CCmdUI* pCmdUI)
      {
          pCmdUI-&gt;Enable();

          if (IsFullScreen())
            pCmdUI-&gt;SetCheck();
          else
            pCmdUI-&gt;SetCheck(0);
      }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbsample MfcDocView kbfile kbprg<BR>
Technology          : kbMfc<BR>
Version             : 4.0 4.1 4.2<BR>
Platform            : NT WINDOWS<BR>
Resolution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

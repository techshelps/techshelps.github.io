

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: STL Sample for [list::rbegin, rend, reverse, rev_iterator </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168046">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1997/05/05">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the [list::rbegin, list::rend, list::reverse_iterator, list::reverse] STL function(s) in Visual C++.  Note that there are some differences in the implementation of the Standard C++ Library components in ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVW,QAVX,QAE1,QALX,QAGC,QBFY,QA4F,QAUS,QADX,QALW,QATX,QAPF,QABB,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: STL Sample for [list::rbegin, rend, reverse, rev_iterator</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168046</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Editions, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the [list::rbegin, list::rend,
list::reverse_iterator, list::reverse] STL function(s) in Visual C++.
<P>
Note that there are some differences in the implementation of the Standard
C++ Library components in Visual C++ version 4.2 versus later revisions.
The relevant sections of code below compile conditionally based upon the
value of _MSC_VER.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;list&gt;
   &lt;string&gt;
   &lt;iostream&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   const_reverse_iterator rbegin() const;
   reverse_iterator rbegin();
   const_reverse_iterator rend() const;
   reverse_iterator rend();
   typedef reverse_bidirectional_iterator&lt;iterator,
       value_type, reference, A::types&lt;T&gt;::pointer,
           difference_type&gt; reverse_iterator;
   void reverse();

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
This example shows how to iteratate through a list backwards. It also shows
how to reverse a list.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   //////////////////////////////////////////////////////////////////////
   //
   // Compile options needed: -GX
   //
   // rev.cpp :  This example shows how to iteratate through a list
   //            backwards.  It also shows how to reverse a list.
   //
   // Functions:
   //
   //  list::rbegin
   //  list::rend
   //  list::reverse_iterator
   //  list::reverse
   //
   // Written by Andrew Bradnan
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   //////////////////////////////////////////////////////////////////////
   #pragma warning(disable:4786)
   #include &lt;list&gt;
   #include &lt;string&gt;
   #include &lt;iostream&gt;

   #if _MSC_VER &gt; 1020   // if VC++ version is &gt; 4.2
   using namespace std;  // std c++ libs implemented in std
   #endif

   typedef list&lt;string, allocator&lt;string&gt; &gt; LISTSTR;

   // We use this object so that list::sort() can sort in a different
   // order.Normally greater&lt;&gt; is used.  We override it here to switch to
   // less.
   struct less_str : greater&lt;string&gt; {
      bool operator()(const string&amp; _X, const string&amp; _Y) const
         {return (_X &lt; _Y); }
      };

   void main()
   {
      LISTSTR test;
      LISTSTR::iterator i;
      LISTSTR::reverse_iterator r;

      test.push_back("one");
      test.push_back("two");
      test.push_back("three");

      // one two three
      cout &lt;&lt; "Forwards" &lt;&lt; endl &lt;&lt; " ";
      for (i = test.begin(); i != test.end(); ++i)
         cout &lt;&lt; *i &lt;&lt; " ";
      cout &lt;&lt; endl;

      // three two one
      cout &lt;&lt; "Backwards" &lt;&lt; endl &lt;&lt; " ";
      for (r = test.rbegin(); r != test.rend(); ++r)
         cout &lt;&lt; *r &lt;&lt; " ";
      cout &lt;&lt; endl;

      // Switch the order
      test.reverse();

      // three two one
      cout &lt;&lt; "Reversed" &lt;&lt; endl &lt;&lt; " ";
      for (i = test.begin(); i != test.end(); ++i)
         cout &lt;&lt; *i &lt;&lt; " ";
      cout &lt;&lt; endl;

      // sort alphabetically (decending by default)
      test.sort();

      // two three one
      cout &lt;&lt; "Sorted descending" &lt;&lt; endl &lt;&lt; " ";
      for (i = test.begin(); i != test.end(); ++i)
         cout &lt;&lt; *i &lt;&lt; " ";
      cout &lt;&lt; endl;

      test.sort(less_str());

      // One three two
      cout &lt;&lt; "Sorted ascending" &lt;&lt; endl &lt;&lt; " ";
      for (i = test.begin(); i != test.end(); ++i)
         cout &lt;&lt; *i &lt;&lt; " ";
      cout &lt;&lt; endl;
   }

</PRE><h3>Program Output</h3>
 
<P>
<PRE>   Forwards
    one two three
   Backwards
    three two one
   Reversed
    three two one
   Sorted descending
    one three two
   Sorted ascending
    two three one

</PRE><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample [list::rbegin, list::rend,<BR>
list::reverse_iterator, list::reverse]<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

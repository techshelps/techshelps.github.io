

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Pointer Subtraction Yields Signed Value </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q29197 ">
<META NAME="KBModify" CONTENT="1997/08/26">
<META NAME="KBCreate" CONTENT="1988/04/25">
<META NAME="Keywords" CONTENT="CLngIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When an application subtracts the value of one pointer from another, it uses signed arithmetic. This behavior can be confusing when the pointers differ by more than the size of a signed int value because the subtraction returns a negative result.  ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAKD,QAO3,QAO2,QBEV,QABB,QAL3,QBWP,QAY5,QAD2,QBJQ,QDL9,QBWQ,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Pointer Subtraction Yields Signed Value</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q29197 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 4.1, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When an application subtracts the value of one pointer from another,
it uses signed arithmetic. This behavior can be confusing when the
pointers differ by more than the size of a signed int value because
the subtraction returns a negative result.
<P>
This behavior is expected and is documented in the Microsoft C
"Language Reference" manual and in the ANSI C Standard.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Consider the following source code fragment:
<P>
<PRE>   long size;
   char *ptr1, *ptr2;

   if (size &lt; (ptr2 - ptr1))
      ...

</PRE>On a system where the size of an int is 16-bits, if size is 32,000,
ptr1 is 0, and ptr2 is 33,000, then the result of the subtraction is
too large to be represented by a signed value and becomes negative.
The comparison of size with the result fails, even though ptr1 and
ptr2 are farther apart than "size" elements.
<P>
This behavior is documented in the "C Language Reference" manual, on page
129 for Microsoft C/C++ version 7.0 and in the "Subtraction (-)" subsection
of the "C Additive Operators" section for Microsoft Visual C++, as follows:
<P>
<PRE>   When two pointers are subtracted, the difference is converted to a
   signed integral value by dividing the difference by the size of a
   value of the type that the pointers address. The size of the
   integral value is defined by the type ptrdiff_t in the standard
   include file STDDEF.H.

</PRE>This is also documented on page 3.3.6 of the November 9, 1987, edition
of the Draft Proposed ANSI C Standard, as follows:
<P>
<PRE>   The size of the result is implementation-defined, and its type (a
   signed integral type) is ptrdiff_t defined in the &lt;stddef.h&gt;
   header. As with any other arithmetic overflow, if the result does
   not fit in the space provided, the behavior is undefined.

</PRE>To treat a pointer as an unsigned quantity, cast it to an unsigned, as
follows:
<P>
<PRE>   long size;
   char *ptr1, *ptr2;

   if (size &lt; ((unsigned) ptr2 - (unsigned) ptr1))
      ...
</PRE> 
<PRE>Keywords          : CLngIss kbfasttip
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0; WINDOWS:1.0,1.5; WINDOWS  NT:1.0,2.0,4.0,4.1,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

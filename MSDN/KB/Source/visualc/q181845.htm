

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create a Sink Interface in MFC-Based COM Client </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181845">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1998/02/26">
<META NAME="Keywords" CONTENT="MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Microsoft Foundation Classes (MFC) has wizard support to add sink interfaces for ActiveX controls. However, this support does not extend to other COM servers. This article describes how to add a sink interface in an MFC client for source interfaces...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBBS,QAPN,QAGB,QAK6,QBG2,QAPF,QAI5,QAW6,QAO4,QAGI,QAB5,QABO,QAY5,QAYV,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create a Sink Interface in MFC-Based COM Client</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181845</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 2.0, 2.1, 2.2, 4.0,
   4.1, 4.2, 5.0
<LI>The Microsoft Foundation Classes (MFC)
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Foundation Classes (MFC) has wizard support to add sink
interfaces for ActiveX controls. However, this support does not extend to
other COM servers. This article describes how to add a sink interface in an
MFC client for source interfaces described by COM servers. Please note that
this article applies to source interfaces, which are dispinterfaces, or
dual interfaces with events being called through IDispatch::Invoke().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Here are the steps to add a sink interface to a COM client:

<OL><P><LI>Using the Class Wizard, add a CCmdTarget derived object (for example,
   CMySink) with automation support. In the Class Wizard, select the
   Automation option rather than "Createable by type ID" option when adding
   this class.

<P><LI>In the interface map, change the IID (the second parameter in the
   INTERFACE_MAP macro) so that it is the IID of the source interface
   (usually the interface with the default and/or source attribute in the
   server's .idl file). The .idl file can be seen by viewing the typelib in
   the OLE/COM Object Viewer.

<P><LI>In the DISPATCH_MAP of CMySink class, add a DISP_FUNCTION_ID macro for
   each of the events defined in the source interface that you want to
   handle. For example:
<P>
<P><PRE>      BEGIN_DISPATCH_MAP(CMySink, CCmdTarget)
<PRE></PRE>        DISP_FUNCTION_ID(CMySink,"Quit",2,OnObjQuit,VT_EMPTY,VTS_I4 VTS_I4)
      END_DISPATCH_MAP()

   The code above is an entry for handling the Quit event with a DISPID 2,
   which takes two long parameters and returns a void. OnObjectQuit is a
   CMySink member function that takes two longs and returns a void. This
   function must be added manually and is called when the COM server fires
   a Quit event.

</PRE><P><LI>Now you have hooked up the sink interface with the server so that you
   can start receiving events. To do this, call the AfxConnectionAdvise()
   function once the server object is created. For example:
<P>
<P><PRE>      //Instantiate the sink class and hold a pointer to it.
      m_pSink = new CMySink();
</PRE><P>
<P><PRE>      //Get a pointer to sinks IUnknown, no AddRef. CMySink implements only
      //dispinterface and the IUnknown and IDispatch pointers will be same.
      LPUNKNOWN pUnkSink = m_pSink-&gt;GetIDispatch(FALSE);
</PRE><P>
<P><PRE>      //Establish a connection between source and sink.
      //m_pUnkSrc is IUnknown of server obtained by CoCreateInstance().
      //m_dwCookie is a cookie identifying the connection, and is needed
      //to terminate the connection.
      AfxConnectionAdvise(m_pUnkSrc, IID_MYEVENT, pUnkSink, FALSE,
<PRE></PRE>         &amp;m_dwCookie);

</PRE><P><LI>When you have finished using the server object you need to terminate the
   connection before releasing the server object. You do this by calling
   the AfxConnectionUnadvise() function. For example:
<P>
<P><PRE>      //Get a pointer to sinks IUnknown, no AddRef.
      LPUNKNOWN pUnkSink = m_pSink-&gt;GetIDispatch(FALSE);
</PRE><P>
<P><PRE>      //Terminate a connection between source and sink.
      //m_pUnkSrc is IUnknown of server obtained by CoCreateInstance().
      //m_dwCookie is a value obtained through AfxConnectionAdvise().
      AfxConnectionUnadvise(m_pUnkSrc, IID_MYEVENT, pUnkSink, FASLE,
<PRE></PRE>         m_dwCookie);

</PRE></OL>Because CMySink was created on the heap, make sure you delete it to avoid
memory leaks.
<P>
<P><h2>REFERENCES</h2>
 
<P>
The sink component of the Connpts.exe sample illustrates implementation of
the sink interface.
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q152087.htm">Q152087</A></B>
   TITLE     : SAMPLE: Connpts.exe Implements Connection Points in MFC Apps

</PRE>(c) Microsoft Corporation 1998, All Rights Reserved. Contributions by
Jaganathan Thangavelu, Microsoft Corporation
 
<PRE>Keywords          : MfcOLE
Version           : WINNT:2.0,2.1,2.2,4.0,4.1,4.2,5.0
Platform          : winnt
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

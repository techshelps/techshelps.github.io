

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Program Crash when Connecting to Data Source from a DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118659">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/07/26">
<META NAME="Keywords" CONTENT="kb16bitonly MfcDatabase kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A program may crash if it calls a DLL function that creates and opens a CDatabase object. This happens when two applications share the same _USRDLL DLL. It can also happen when two applications are using the _AFXDLL version of the MFC database code...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGI,QAY5,QAJH,QAYL,QAW6,QAPN,QAR4,QABI,QAHT,QAIF,QBV8,QAB9,QBXR,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Program Crash when Connecting to Data Source from a DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118659</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50
WINDOWS
kbprg kbfixlist kbbuglist
<P>
 
The information in this article applies to:
<P>
<PRE>   The Microsoft Foundation Classes (MFC), included with:
    - Microsoft Visual C++ for Windows, version 1.5
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A program may crash if it calls a DLL function that creates and opens a
CDatabase object. This happens when two applications share the same _USRDLL
DLL. It can also happen when two applications are using the _AFXDLL version
of the MFC database code MFCD250.DLL or MFCD250D.DLL.
<P>
<P><h2>CAUSE</h2>
 
<P>
The MFC code uses a global static variable called "henvAllConnections" to
store the ODBC environment handle (HENV), which is used by several of the
ODBC API functions. The variable is defined in DBCORE.CPP as follows:
<P>
<PRE>    HENV CDatabase::henvAllConnections = NULL;

</PRE>This HENV variable is assigned when the first CDatabase object is created.
All subsequent CDatabase objects use this same variable. This design does
not work because, in the case of a DLL where a CDatabase object is created,
the handle stored in henvAllConnections is used for all CDatabase objects
created by all applications that call the DLL's function. ODBC allocates
the memory associated with an HENV to the task. Therefore, the memory
associated with the henvAllConnections handle belongs to the first
application that called the DLL's function and created the first CDatabase.
When the application goes away, so does the memory associated with the
HENV. All other applications with CDatabases open that were created in the
DLL will most likely crash.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Make sure that only one application is using the DLL or let only one
application at a time call the DLL's function and create a CDatabase
object. In the latter case, if an application calls the DLL's function to
create a CDatabase, it must delete the CDatabase before letting another
application call the DLL's function to create another CDatabase object.
<P>
Another approach is to modify the code in the DBCORE.CPP file so that the
code stores and uses an HENV for each task. You can use the Windows API
function GetCurrentTask() to associate a HENV with a specific task handle.
You can modify the code so that every time a CDatabase is created, the code
checks to see whether an HENV has been allocated and associated with the
current task. If no HENV has been allocated, the modified CDatabase object
allocates and associates it. You then need to create additional code that
replaces all references to henvAllConnections with a function call that
retrieves the correct HENV for the current task. Another technique, if it
is important to have all database code in one central location, is to
create an application that acts as a DDE or OLE server. The server can
query the database and return results to your application.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the MFC for Windows, version
2.5. This bug was corrected in MFC 2.51, included in Visual C++ version
1.51.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.50 2.50 ODBC GPF fault hang<BR>
KBCategory: kbprg kbfixlist kbbuglist<BR>
KBSubcategory: MfcDatabase<BR>
Keywords          : kb16bitonly MfcDatabase kbbuglist kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.50<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

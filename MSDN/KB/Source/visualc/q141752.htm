

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Limiting 32-bit Applications to a Single Instance </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141752">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/12/24">
<META NAME="Keywords" CONTENT="MfcUI kbfile kbprg kbsample kbfile">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" This is the 32-bit version of this sample.   The ONET32 sample application demonstrates how to limit a Microsoft Foundation Class Library (MFC) application to a single instance.  ONET32.EXE is a self-extracting file and should be executed as follows...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QABO,QABN,QAJH,QALW,QABA,QAF3,QAY2,QAUJ,QAMA,QAPF,QBXF,QAJ4,QAGQ,QAGY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Limiting 32-bit Applications to a Single Instance</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141752</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes(MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 5.0
</UL> 
<P>
This is the 32-bit version of this sample.
<P>
<P><h2>SUMMARY</h2>
 
<P>
The ONET32 sample application demonstrates how to limit a Microsoft
Foundation Class Library (MFC) application to a single instance.
<P>
ONET32.EXE is a self-extracting file and should be executed as
follows:
<P>
<PRE>  ONET32 -d

</PRE>The '-d' option maintains the subdirectory structure.
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Onet32.exe">Onet32.exe</A> <I>(size: 41396 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
There are several ways to limit a Windows-based application to a single
instance. This sample program uses a technique in which a custom window
class is registered for the application's main frame window. In subsequent
instances, CWinApp::InitInstance() searches for this window class and then
activates the prior instance.
<P>
This technique was chosen is fairly easy to implement.
<P>
The following code fragments show the essential requirements of this
technique:

<OL><P><LI>Override CWinApp::InitInstance() to check for, and activate,
   any previous instance of the application. Also, register the our
   own window class as follows:
<P>
<P><PRE>      // Add a static BOOL that indicates whether the class was
      // registered so that we can unregister it in ExitInstance
      static BOOL bClassRegistered = FALSE;
</PRE><P>
<P><PRE>      BOOL COneT32App::InitInstance()
      {
<PRE></PRE>          // If a previous instance of the application is already running,
          // then activate it and return FALSE from InitInstance to
          // end the execution of this instance.

          if(!FirstInstance())
            return FALSE;

          // Register our unique class name that we wish to use
          WNDCLASS wndcls;

          memset(&amp;wndcls, 0, sizeof(WNDCLASS));   // start with NULL
                                                  // defaults

          wndcls.style = CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW;
          wndcls.lpfnWndProc = ::DefWindowProc;
          wndcls.hInstance = AfxGetInstanceHandle();
          wndcls.hIcon = LoadIcon(IDR_MAINFRAME); // or load a different
                                                  // icon
          wndcls.hCursor = LoadCursor( IDC_ARROW );
          wndcls.hbrBackground = (HBRUSH) (COLOR_WINDOW + 1);
          wndcls.lpszMenuName = NULL;

          // Specify our own class name for using FindWindow later
          wndcls.lpszClassName = _T("MyNewClass");

          // Register new class and exit if it fails
          if(!AfxRegisterClass(&amp;wndcls))
          {
            TRACE("Class Registration Failed\n");
            return FALSE;
          }
          bClassRegistered = TRUE;

          // Rest of InitInstance goes here
          ...
          ...
          ...
      }

</PRE><P><LI>Add a member function to your CWinApp-derived class that actually does
   the work of checking for, and activating of, a previous instance:
<P>
<P><PRE>      BOOL COneT32App::FirstInstance()
      {
<PRE></PRE>        CWnd *pWndPrev, *pWndChild;

        // Determine if another window with our class name exists...
        if (pWndPrev = CWnd::FindWindow(_T("MyNewClass"),NULL))
        {
          // if so, does it have any popups?
          pWndChild = pWndPrev-&gt;GetLastActivePopup();

          // If iconic, restore the main window
          if (pWndPrev-&gt;IsIconic())
             pWndPrev-&gt;ShowWindow(SW_RESTORE);

          // Bring the main window or its popup to
          // the foreground
          pWndChild-&gt;SetForegroundWindow();

          // and we are done activating the previous one.
          return FALSE;
        }
        // First instance. Proceed as normal.
        else
          return TRUE;
      }

</PRE><P><LI>Override CWinApp::ExitInstance() to unregister the class if
   it was registered as follows:
<P>
<P><PRE>      int COneT32App::ExitInstance()
      {
<PRE></PRE>        if(bClassRegistered)
          ::UnregisterClass(_T("MyNewClass"),AfxGetInstanceHandle());
        return CWinApp::ExitInstance();
      }

</PRE><P><LI>Override CFrameWnd::PreCreateWindow() to use your window class instead
   of the one registered automatically by MFC as follows:
<P>
<P><PRE>      BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)
      {
<PRE></PRE>          // Use the specific class name we established earlier
          cs.lpszClass = _T("MyNewClass");

          // Change the following line to call
          // CFrameWnd::PreCreateWindow(cs) if this is an SDI application.
          return CMDIFrameWnd::PreCreateWindow(cs);
      }

</PRE></OL><h2>REFERENCES</h2>
 
<P>
MFC Technical Note #1 discusses window class registration.
<P>
The Following Knowledge Base article discusses how to register MFC window
classes:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q140596.htm">Q140596</A></B>
   TITLE     : MFC 4.0 No Longer Pre-Registers Window Classes
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ONETIME<BR>
Keywords          : MfcUI kbfile kbprg kbsample kbfile<BR>
Technology        : kbMfc<BR>
Version           : 4.0 5.0<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: IOMANIPdeclare Macro Causes C2758 Error with References </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148686">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1996/03/19">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist400 vcbuglist500 VCGenIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When a IOMANIPdeclare() macro is used with a reference type, the compiler generates the following error message:     error C2758: '_tp' : must be initialized in constructor base/member    initializer list  CAUSE =====  The IOMANIPdeclare() macro is...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAH4,QANY,QAKM,QABO,QALW,QAB4,QDKW,QAGU,QBFY,QAYY,QAK7,QAP2,QAIS,QAAP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: IOMANIPdeclare Macro Causes C2758 Error with References</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148686</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, version 1.52
<LI>Microsoft Visual C++, 32-bit Edition, versions 2.2, 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a IOMANIPdeclare() macro is used with a reference type, the compiler
generates the following error message:
<P>
<PRE>   error C2758: '_tp' : must be initialized in constructor base/member
   initializer list

</PRE><h2>CAUSE</h2>
 
<P>
The IOMANIPdeclare() macro is expanded into a number of classes containing
data members of the type passed into the IOMANIPdeclare() macro. The
constructors for these classes are written such that the data members are
initialized in the body of each class constructor. This is not allowed for
reference type data members. Reference type data members should be
initialized in a member initialization list for the class constructor.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Modify the IOMANIPdeclare() macro (defined in Iomanip.h) so that the
class data members are initialized in a member initialization list
instead of in the body of the constructor.
<P>
For example, the following line is defined in the IOMANIPdeclare() macro
definition:
<P>
<PRE>   SMANIP(T)(ios&amp; (*f)(ios&amp;,T), T t) { _fp = f; _tp = t; }

</PRE>The inline constructor body where the class data members are initialized
can be modifed so that the constructor uses a member initialization list
as follows:
<P>
<PRE>   SMANIP(T)(ios&amp; (*f)(ios&amp;,T), T t) : _fp(f), _tp(t) {}

</PRE>This change must be made for each class constructor that initializes the
_fp and _tp data members. These declarations are:
<P>
<PRE>   SMANIP(T)(ios&amp; (*f)(ios&amp;,T), T t) { _fp = f; _tp = t; }
   IMANIP(T)(istream&amp; (*f)(istream&amp;,T), T t) { _fp = f; _tp = t; }
   OMANIP(T)(ostream&amp; (*f)(ostream&amp;,T), T t) { _fp = f; _tp = t; }
   IOMANIP(T)(iostream&amp; (*f)(iostream&amp;,T), T t) { _fp = f; _tp = t; }

</PRE>After making this change, you can use reference data types in the
IOMANIPdeclare() macro.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
   The following sample code demonstrates both the error, and the
   workaround.

   Compile options needed: none
                           /DWORKAROUND to enable the workaround macro
   */

   #include &lt;iostream.h&gt;
   #include &lt;iomanip.h&gt;

   // --------------------------------------------------------
   // following is the workaround macro

   #ifdef WORKAROUND

   #ifdef IOMANIPdeclare
   #undef IOMANIPdeclare

   #define IOMANIPdeclare(T)  \
   class SMANIP(T) { \
   public: \
     SMANIP(T)(ios&amp; (*f)(ios&amp;,T), T t) : _tp(t), _fp(f) {} \
     friend istream&amp; operator&gt;&gt;(istream&amp; s, const SMANIP(T) &amp; sm) { \
       (*(sm._fp))(s,sm._tp); return s; \
     } \
     friend ostream&amp; operator&lt;&lt;(ostream&amp; s, const SMANIP(T) &amp; sm) { \
       (*(sm._fp))(s,sm._tp); return s; \
     } \
   private: \
     ios&amp; (* _fp)(ios&amp;,T); \
     T _tp; \
   }; \
   class SAPP(T) { \
   public: \
     SAPP(T)( ios&amp; (*f)(ios&amp;,T)) { _fp = f; } \
     SMANIP(T) operator()(T t) { return SMANIP(T)(_fp,t); } \
   private: \
     ios&amp; (* _fp)(ios&amp;,T); \
   }; \
   class IMANIP(T) { \
   public: \
     IMANIP(T)(istream&amp; (*f)(istream&amp;,T), T t) : _tp(t), _fp(f) {} \
     friend istream&amp; operator&gt;&gt;(istream&amp; s, IMANIP(T) &amp; sm) { \
       (*sm._fp)(s,sm._tp); return s; \
     } \
   private: \
     istream&amp; (* _fp)(istream&amp;,T); \
     T _tp; \
   }; \
   class IAPP(T) { \
   public: \
     IAPP(T)( istream&amp; (*f)(istream&amp;,T)) { _fp = f; } \
     IMANIP(T) operator()(T t) { return IMANIP(T)(_fp,t); } \
   private: \
     istream&amp; (* _fp)(istream&amp;,T); \
   }; \
   class OMANIP(T) { \
   public: \
     OMANIP(T)(ostream&amp; (*f)(ostream&amp;,T), T t) : _tp(t), _fp(f) {} \
     friend ostream&amp; operator&lt;&lt;(ostream&amp; s, OMANIP(T) &amp; sm) { \
       (*sm._fp)(s,sm._tp); return s; \
     } \
   private: \
     ostream&amp; (* _fp)(ostream&amp;,T); \
     T _tp; \
   }; \
   class OAPP(T) { \
   public: \
     OAPP(T)(ostream&amp; (*f)(ostream&amp;,T)) { _fp = f; } \
     OMANIP(T) operator()(T t) { return OMANIP(T)(_fp,t); } \
   private: \
     ostream&amp; (* _fp)(ostream&amp;,T); \
   }; \
   class IOMANIP(T) { \
   public: \
     IOMANIP(T)(iostream&amp; (*f)(iostream&amp;,T), T t) : _tp(t), _fp(f) {} \
     friend istream&amp; operator&gt;&gt;(iostream&amp; s, IOMANIP(T) &amp; sm) { \
       (*sm._fp)(s,sm._tp); return s; \
     } \
     friend ostream&amp; operator&lt;&lt;(iostream&amp; s, IOMANIP(T) &amp; sm) { \
       (*sm._fp)(s,sm._tp); return s; \
     } \
   private: \
     iostream&amp; (* _fp)(iostream&amp;,T); T _tp; \
   }; \
   class IOAPP(T) { \
   public: \
     IOAPP(T)( iostream&amp; (*f)(iostream&amp;,T)) { _fp = f; } \
     IOMANIP(T) operator()(T t) { return IOMANIP(T)(_fp,t); } \
   private: \
     iostream&amp; (* _fp)(iostream&amp;,T); \
   };
   #endif  //IOMANIPdeclare

   #endif  //WORKAROUND

   // This is the end of the workaround macro
   // --------------------------------------------------------

   typedef  int&amp; fillpair;

   IOMANIPdeclare( fillpair );

   ostream&amp; fp( ostream&amp; os, fillpair pair ) {
     for ( int c = 0; c &lt; 10; c++ ) {
       os &lt;&lt; pair;
     }
     return os;
   }

   OMANIP(fillpair) fill( fillpair var ) {
     return OMANIP(fillpair)( fp, var);
   }

   void main() {
     int test=0;
     fillpair var=test;

     cout &lt;&lt; "10 things coming " &lt;&lt; fill( var ) &lt;&lt; " done " &lt;&lt; endl;
   }
   // ***** End of code sample ******
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 1.50 1.51 1.52b 1.52c 8.00c 9.10 10.00 10.10 10.20<BR>
iostream io library<BR>
Keywords            : CPPIss vcbuglist400 vcbuglist500 VCGenIss<BR>
Version             : 1.52 2.2 4.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

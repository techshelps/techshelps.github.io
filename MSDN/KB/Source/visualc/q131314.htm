

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: /Ox or /Oei Generates Incorrect Floating Point Results </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131314">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1995/06/07">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Multiple floating point calculations may generate incorrect code when compiled with either the /Ox or /Oei optimizations. For example, the sample code shown at the end of this article should print 0.498418 but with either the /Ox or /Oei optimizati...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBE6,QBFY,QBE7,QANO,QBC9,QBC8,QAH4,QAUD,QAKP,QA26,QAL3,QALZ,QAAP,QAOX,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: /Ox or /Oei Generates Incorrect Floating Point Results</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131314</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
   Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Multiple floating point calculations may generate incorrect code when
compiled with either the /Ox or /Oei optimizations. For example, the sample
code shown at the end of this article should print 0.498418 but with either
the /Ox or /Oei optimizations enabled, it prints -0.000880.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use either of the following workarounds:

<UL><LI>Disable the optimizations for the entire file or to use the optimize
   pragma to turn them off for just one function. For example:
<P>
   #pragma optimize("",off)
   function()
   #pragma optimize("",on)
<P>
   -or-

<LI>Simplify the calculations by breaking complex statements into multiple
   lines of code or by using temporary variables to hold intermediate
   results.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
NOTE: this is not a problem in 32-bit versions of Microsoft Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Demonstrate Problem</h3>
 
<P>
<PRE>/* Compile options needed: /Oei or /Ox
*/

#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

</PRE>float func(float x)  {
<PRE>   float c,c1,c2,c3,c4,c5,c6,c7,c8,c9,c0,d,t,z;
   c=.7071068; c1=-.82215223; c2=.17087277; c3=-1.13520398;
   c4=1.48851587; c5=.09678418; c6=-.18628806; c7=.27886807;
   c8=-1.26551223; c9=1.00002368; c0=.37409196;

   z=c*x;
   if (z&lt;0)
      z=-z;
   t=1/(1+z/2);
   d=t*(c1+t*c2);
   d=t*(c3+t*(c4+d));
   d=t*(c5+t*(c6+t*(c7+d)));
   d=-z*z+c8+t*(c9+t*(c0+d));
   d=t * (float) exp(d);
   if (x&lt;0)
      return d/2;
   else
      return 1-d/2;
</PRE>}
<P>
<PRE>void main () {
   const float x=-0.00396531;
   float y;
   y = func(x);
   if (y&gt;0.498417 &amp;&amp; y&lt;0.498419)
      printf("Successful: func(%f) = %f\n", x, y);
   else
      printf("Failed: func(%f) = %f, should be 0.498418\n", x, y);
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 8.00 8.00c 8.0 8.0c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Replacing #import's Exception Raising Mechanism </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175784">
<META NAME="KBModify" CONTENT="1998/03/11">
<META NAME="KBCreate" CONTENT="1997/10/28">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using #import to create your client application introduces exception handling through the _com_error exception class when a wrapper for an object's method encounters a failed HRESULT. You might have valid reasons to replace this mechanism with your...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QALQ,QAY5,QBVV,QBFY,QAW6,QAM7,QAB4,QAEQ,QAB9,QBG2,QA5E,QASP,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Replacing #import's Exception Raising Mechanism</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 11, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175784</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Using #import to create your client application introduces exception
handling through the _com_error exception class when a wrapper for an
object's method encounters a failed HRESULT. You might have valid reasons
to replace this mechanism with your own implementation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two ways to use #import and not have it raise exceptions for
failed HRESULTS. The first is to use the raw_interfaces_only clause with
the #import statement. However, this negates some of the advantages of the
wrapper classes that #import provides.
<P>
The second technique is by providing your own implementation for
_com_raise_error, which has the following prototype and default
implementation:
<P>
<PRE>   void __stdcall _com_raise_error(HRESULT hr, IErrorInfo* perrinfo = 0)
   throw(_com_error);

   void __stdcall
   _com_raise_error(HRESULT hr, IErrorInfo* perrinfo = 0) throw(_com_error)
   {
       throw _com_error(hr, perrinfo);
   }

</PRE>This function is declared but not implemented in the COMDEF.H file. If you
provide your own implementation in an .OBJ, the linker uses that as opposed
to bringing it in from COMSUPP.LIB. _com_raise_error exists in its own
object in COMSUPP.LIB just so it can be easily replaced by your code.
<P>
Below is an example of implementation of #import's exception raising
function:
<P>
<PRE>   Note:
   Currently our compiler ignores a function exception-specification and
   generates the warning:
   warning C4290: C++ Exception Specification ignored.

   According to C++ WP if any declaration of a function has an exception-
   specification, all declarations, including the definition, of that
   function shall have an exception-specification with the same set of type-
   ids.

   void __stdcall
   _com_raise_error(HRESULT hr, IErrorInfo* perrinfo = 0) throw(_com_error)
       {
           //this message box is for demonstration purpose only
           AfxMessageBox( "_com_raise_error (HRESULT, IErrorInfo*)" );
           //your own error handling code or just an abort
       }


       #import "C:\Program Files\Common Files\System\ado\msado10.dll" ...
       ...
       _bstr_t     bstrEmpty(L"");
       _ConnectionPtr  Conn1 = NULL;
       Conn1.CreateInstance( __uuidof( Connection ) );
       Conn1-&gt;Open( bstrEmpty, bstrEmpty, bstrEmpty );

</PRE>This code attempts to open an ADO connection object without providing any
valid connection information. By replacing _com_raise_error, you prevented
the _com_error from being raised.
<P>
However, just because you have replaced this function, you may still need
to trap for exceptions. Consider the code snippet below.
<P>
<PRE>    #import "C:\Program Files\Common Files\System\ado\msado10.dll" ...
    ...
    _ConnectionPtr  Conn1 = NULL;
    // Conn1.CreateInstance( __uuidof( Connection ) );
    Conn1-&gt;Open( bstrEmpty, bstrEmpty, bstrEmpty );

</PRE>In this case, Conn1 is not a valid object and the interface pointer to this
non-existent object is NULL, resulting in _com_raise_erro being called.
However, the overloaded -&gt; operator method will return a null interface, on
which the compiler then attempts to invoke the Open() method, resulting in
a Win32 exception. Testing Conn1 for NULL first before calling Open() would
prevent this exception.
 
<PRE>Version           : WINNT:5.0
Platform          : winnt
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 11, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

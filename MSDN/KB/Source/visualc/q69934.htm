

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: #define Must Evaluate to Integer Const for #if Expression </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q69934 ">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1991/03/06">
<META NAME="Keywords" CONTENT="CLngIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you use the #define statement to define a constant, its value must evaluate to an integer constant if you are going to use it as the expression in an #if, #elif, or #else compiler directive. In addition, for any undefined constant that you use...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKJ,QAH4,QAKD,QABH,QADK,QAOT,QBFY,QBVV,QA4Q,QAEF,QAB4,QAB9,QBWP,QBSO,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: #define Must Evaluate to Integer Const for #if Expression</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q69934 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C compiler for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
<LI>Microsoft C compiler for OS/2, versions 5.1, 6.0, 6.0a
<LI>Microsoft C/C++ compiler for MS-DOS, version 7.0
<LI>Microsoft C/C++ compiler for OS/2, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use the #define statement to define a constant, its value must
evaluate to an integer constant if you are going to use it as the
expression in an #if, #elif, or #else compiler directive. In addition, for
any undefined constant that you use, the preprocessor assumes a value of
zero.
<P>
If you are not sure how the compiler is handling certain directives, you
can compile the code with one of the preprocessor options (/P /E /EP). This
will allow you to see the exact effect of the preprocessor directives on
the code.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If a #define'd constant that does not evaluate to an integer constant is
used with the #if, #elif, or #else compiler directive, the following error
message appears:
<P>
<PRE>   fatal error C1017: invalid integer constant expression

</PRE>For example, this error occurs with the following code fragment:
<P>
<PRE>   #define CONSTANT_NAME "YES"
   #if CONSTANT_NAME
   ...
   #endif

</PRE>Because CONSTANT_NAME evaluates to a string constant and not an integer
constant, the #if directive generates a C1017 error and halts the compiler.
<P>
The other notable situation is that any constant that is undefined is
evaluated by the preprocessor to be zero. If an undefined constant is used
inadvertently, unintended behavior may result. For example, in the
following code fragment, the result is the reverse of what is actually
intended:
<P>
<PRE>   #define CONSTANT_NAME YES
   #if CONSTANT_NAME
      Code to use on YES...
   #elif CONSTANT_NAME==NO
      Code to use on NO...
   #endif

</PRE>In this example, YES is undefined, so it evaluates to zero. Therefore,
CONSTANT_NAME is also zero. Thus, the #if expression "CONSTANT_NAME"
evaluates to false and the "Code to use on YES" is removed by the
preprocessor, which is clearly NOT the intended behavior. Furthermore,
because NO is also undefined, it also evaluates to zero, which means that
the #elif expression "CONSTANT_NAME==NO" evaluates to true (0 == 0). This
causes the preprocessor NOT to remove the "Code to do on NO", which is also
NOT the intended behavior.
<P>
By compiling with one of the preprocessor options (/P /E /EP), you can
observe the preprocessor output in order to see exactly how the
preprocessor is interpreting all directives. For more information on these
options, consult the documentation or online help that accompanies your
particular version of the compiler.
 
<PRE>Keywords          : CLngIss kbfasttip
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0; OS/2:5.1,6.0,6.00a;  WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,4.0,5.0
Platform          : MS-DOS NT OS/2 WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

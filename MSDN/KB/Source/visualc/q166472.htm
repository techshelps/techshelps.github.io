

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: Using Fonts in ATL Controls with NiceText.exe </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166472">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/04/07">
<META NAME="Keywords" CONTENT="AtlControl kbprg kbusage">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Active Template Library (ATL) programmers creating ActiveX controls that display text may find it beneficial to allow the user of the control to select the font that the text is drawn in. ATL provides some functionality for a stock font property, o...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QADF,QAPN,QA7O,QAMN,QAOE,QA37,QAW6,QBBS,QAHV,QAI5,QABO,QAY2,QAYL,QAXB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: Using Fonts in ATL Controls with NiceText.exe</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166472</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Active Template Library, versions 2.0, 2.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Active Template Library (ATL) programmers creating ActiveX controls that
display text may find it beneficial to allow the user of the control to
select the font that the text is drawn in. ATL provides some
functionality for a stock font property, or you may choose to use a custom
font property. In ATL ActiveX controls, the steps to implement a custom
or stock font property are practically the same. The More Information
section of this article describes the steps to take to add a stock font
property to your ATL ActiveX control. The NiceText sample shows how to
implement an ATL control that uses a stock font property.
<P>
NiceText.exe is a self-extracting executable file that contains the source
files for the NiceText control. These files have been built and tested
with ATL 2.1 under Visual C++ 5.0 and ATL 2.0 under Visual C++ 4.2b.
<P>
NiceText.exe is available for download from the Microsoft Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/NiceText.exe">NiceText.exe</A> <I>(size: 60415 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Use these steps to create a control with a stock font property:

<OL><P><LI>Open an existing ATL in-proc server project or create a new one.

<P><LI>Using the ATL Object Wizard, insert a new ATL control into your project.
   Give the control a name, then select the Stock Properties tab. From the
   Stock Properties tab, select the Font property and insert it into your
   control. Completing this step adds an interface definition such as the
   following to your projects Interface Definition Language file (.idl
   file). The interface definition in your .idl file looks similar to the
   following:
<P>
<P><PRE>      [
<PRE></PRE>         object,
         uuid(E882D672-878E-11D0-B00C-000000000000),
         dual,
         helpstring("INiceTextCtrl Interface"),
         pointer_default(unique)
      ]
      interface INiceTextCtrl : IDispatch
      {
         [propputref, id(DISPID_FONT)]
         HRESULT Font([in]IFontDisp* pFont);
         [propput, id(DISPID_FONT)]
         HRESULT Font([in]IFontDisp* pFont);
         [propget, id(DISPID_FONT)]
         HRESULT Font([out, retval]IFontDisp** ppFont);
      };

   In order for your control's Font property to work correctly in most
   control containers, you need to move this interface definition from
   outside the Library block in your .idl file to inside the Library block.
   You also need to remove the #import for Ucidl.idl from the .idl file.
   Your .idl file now has a Library section that looks like the following:

      [
         uuid(E882D665-878E-11D0-B00C-000000000000),
              version(1.0),
              helpstring("nicetext 1.0 Type Library")
      ]
      library NICETEXTLib
      {
              importlib("stdole32.tlb");
              importlib("stdole2.tlb");

              [    object,
                      uuid(E882D672-878E-11D0-B00C-000000000000),
                      dual,
                      helpstring("INiceTextCtrl Interface"),
                      pointer_default(unique)
              ]
              interface INiceTextCtrl : IDispatch
              {
                      [propputref, id(DISPID_FONT)]
                      HRESULT Font([in]IFontDisp* pFont);
                      [propput, id(DISPID_FONT)]
                      HRESULT Font([in]IFontDisp* pFont);
                      [propget, id(DISPID_FONT)]
                      HRESULT Font([out, retval]IFontDisp** ppFont);
              };

              [
                      uuid(E882D673-878E-11D0-B00C-000000000000),
                      helpstring("NiceTextCtrl Class") ]
                      coclass NiceTextCtrl
              {
                      [default] interface INiceTextCtrl;
              };
      };

   This step also adds a member variable named m_pFont to your control's
   implementation class to hold the Font property. The get, put, and putref
   functions for the stock Font property are implemented by ATL in the
   CStockPropImpl class inside Atlctl.h. If you are implementing a non-
   stock Font property, you have to add the get, put, or putref functions
   manually if you are using Visual C++ 4.2b. If you are using Visual C++
   5.0, you can use the interface browser to add the property, which adds
   the property get and put functions for you.

</PRE><P><LI>Add a static variable of type FONTDESC to your control's .cpp file. The
   FONTDESC structure holds the default description of your Font property.
   You can create and initialize the variable in the same step as follows:
<P>
<P><PRE>      static const FONTDESC _fontdesc =
      {sizeof(FONTDESC), OLESTR("times new roman"), FONTSIZE( 14 ),
      FW_BOLD, ANSI_CHARSET, TRUE, FALSE, FALSE };
</PRE>
<P><LI>Add an entry to your control's property map for the stock Font such as
   the following:
<P>
<P><PRE>      PROP_ENTRY("Font", DISPID_FONT, CLSID_MSStockFont)
</PRE><P>
   NOTE: You also need to #include &lt;ATLCTL.H&gt;

<P><LI>Change your control's drawing code so it uses your font property to draw
   text. Here is an example of drawing code you could add to an ATL
   control's OnDraw member function:
<P>
<P><PRE>      HFONT hStockFont=NULL,hOldFont=NULL;
       CComQIPtr&lt;IFont,&amp;IID_IFont&gt; pFont(m_pFont);
       TCHAR msg[50];
       wsprintf(msg,_T("Current Thread is %x"),GetCurrentThreadId());
       if(pFont)
<PRE></PRE>          pFont-&gt;get_hFont(&amp;hStockFont);
       if(hStockFont)
               hOldFont = (HFONT)SelectObject(di.hdcDraw,hStockFont);
       DrawText(di.hdcDraw, msg, -1, &amp;rc, DT_CENTER | DT_VCENTER |
                DT_SINGLELINE);
       if(hOldFont)
          SelectObject(di.hdcDraw,hOldFont);

</PRE><P><LI>It is recommended that you implement a sink object to connect to the
   Font object's property notification source so that your control updates
   its rendering with the correct font properties when a client changes one
   of your font's properties. COM-based fonts support an outgoing interface
   based on the IPropertyNotifySink interface to notify font users when
   properties of the font, such as name or weight, are about to change and
   after they have been changed. To receive notification of these changes,
   add a class to your project that implements the IPropertyNotifySink
   interface. Then, an instance of this class can be created by the control
   and a pointer to it passed to the Font object's connection point. Your
   control then receives notifications from the Font object if its
   properties change, which allows you to update your control's text
   accordingly.
<P>
   The following class implements an IPropertyNotifySink interface and can
   be used for receiving notifications from a Font object. This class also
   holds a back pointer to the parent control object so that it can update
   the control when properties change. This class is added to the control's
   header file before the declaration of the control's class:
<P>
<P><PRE>      class CNiceTextCtrl; //forward definition of parent class
      class ATL_NO_VTABLE CFontNotifyImpl :
<PRE></PRE>              public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
              public IPropertyNotifySink
      {
      public:
              CFontNotifyImpl():m_pParent(NULL){}
      BEGIN_COM_MAP(CFontNotifyImpl)
              COM_INTERFACE_ENTRY(IPropertyNotifySink)
      END_COM_MAP()

      public:
              STDMETHOD(OnChanged)(DISPID dispid);
              STDMETHOD(OnRequestEdit)(DISPID dispid){return S_OK;}

              DWORD m_FontNotifyCookie;
              void SetParent(CNiceTextCtrl *pParent){m_pParent = pParent;}
              CNiceTextCtrl *m_pParent;
      };

 To your control, add a protected member variable that holds a sink object:

      CComObject&lt;CFontNotifyImpl&gt; *m_pFontNotifySink;

   Initialize the sink object in your control's constructor:

      CComObject&lt;CFontNotifyImpl&gt;::CreateInstance(&amp;m_pFontNotifySink);
      m_pFontNotifySink-&gt;SetParent(this);

</PRE><P><LI>Initialize the font object for the control and hook up the sink
   interface. A good place to do this is in SetClientSite. SetClientSite is
   called when a control first begins to interact with a container, soon
   after the control object is created on behalf of a container. To
   override SetClientSite. add it as a member of your control class by
   adding the following to your control's header file inside your class
   declaration:
<P>
<P><PRE>      STDMETHOD(SetClientSite)(LPOLECLIENTSITE pSite);
</PRE><P>
   And implement it in your object's .cpp file like this:
<P>
<P><PRE>      STDMETHODIMP CNiceTextCtrl::IOleObject_SetClientSite
<PRE></PRE>                                                    (LPOLECLIENTSITE pSite)
      {
      HRESULT hr = CComControlBase::IOleObject_SetClientSite(pSite);
      // Check to see if the container has an ambient font. If it does,
      // clone it so your user can change the font of the control
      // without changing the ambient font for the container. If there is
      // no ambient font, create your own font object when you hook up a
      // client site.

      if(!m_pFont &amp;&amp; pSite)
      {
         FONTDESC fd = _fontdesc;
         CComPtr&lt;IFont&gt; pAF;
         CComPtr&lt;IFont&gt; pClone;
      if(SUCCEEDED(GetAmbientFont(&amp;pAF)))
       {
           //clone the font
          if(SUCCEEDED(pAF-&gt;Clone(&amp;pClone)))
              pClone-&gt;QueryInterface(IID_IFontDisp, (void**)&amp;m_pFont);

       }
       else
       {
          OleCreateFontIndirect(&amp;fd,IID_IFontDisp,(void**)&amp;m_pFont);
       }
       //also, hook up a notify sink
       if(m_pFont&amp;&amp;m_pFontNotifySink)
       {
          //smart pointers will release themselves
        CComQIPtr&lt;IConnectionPointContainer,&amp;IID_IConnectionPointContainer&gt;
        pCPC(m_pFont);
        CComPtr&lt;IConnectionPoint&gt; pCP;
        if(pCPC)
        {
           pCPC-&gt;FindConnectionPoint(IID_IPropertyNotifySink,&amp;pCP);
           if(pCP)
           {
               pCP-&gt;Advise((IUnknown*)m_pFontNotifySink,
                      &amp;m_pFontNotifySink-&gt;m_FontNotifyCookie);
           }
        }
      }
     }
      return hr;
      }

</PRE><P><LI>Have the sink interface update the control when font properties change:
<P>
<P><PRE>      STDMETHODIMP CFontNotifyImpl::OnChanged(DISPID dispid)
      {
<PRE></PRE>              ATLTRACE(_T("OnChanged sink: %x\n"),this);
         m_pParent-&gt;FireViewChange();
         return S_OK;
      }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: font ATL stock property<BR>
Keywords          : AtlControl kbprg kbusage<BR>
Technology        : kbAtl kbole kbInetDev<BR>
Version           : 2.0 2.1<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>
Solution Type     : kbfile<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Property Sheet as the View Window of a CFrameWnd </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161886">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1997/01/07">
<META NAME="Keywords" CONTENT="kbsample MfcDocView kbcode kbfile kbtool kbui">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Psview.exe sample illustrates a technique of having a PropertySheet-like view inside a CFrameWnd-derived class.  The following file is available for download from the Microsoft Software Library:   ~ Psview.exe  For more information about downlo...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QAY5,QAMN,QA7O,QAOE,QARP,QADK,QAH4,QBV8,QABO,QAPF,QAB9,QBWA,QAGI,QA01 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Property Sheet as the View Window of a CFrameWnd</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161886</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.10 4.20
WINDOWS NT
kbui kbtool kbfile kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Psview.exe sample illustrates a technique of having a
PropertySheet-like view inside a CFrameWnd-derived class.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Psview.exe">Psview.exe</A> <I>(size: 76805 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running Psview.exe to decompress the file and
recreate the proper directory structure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The PropertySheet-like view is a window that has the look of PropertySheet.
It contains a row of tabs; clicking each tab will load the appropriate page
(or dialog template).
<P>
NOTE: This article does not make use of either the Property Sheet or the
Property Pages like the SNAPVW sample. Because of this, the frame window
that contains the PropertySheet-like view can be resized as it normally
would. However, controls inside a page (or dialog template) need to be
moved manually to fit the page as they appear in a regular dialog box.
<P>
The picture below shows the general layout of the frame window when it is
first running:
<P>
CFrameWnd-derived class
+---------------------------------------------------+
<PRE>| +-----------------------------------------------+ |
| |         CToolBar class                        | |
| +-----------------------------------------------+ |
</PRE>| +-----------------------------------------------+&lt;----+
<PRE>| |         CTabCtrl class                        | |   |
| |-----------------------------------------------| |   |
| |                                               | |   |
| |                                               | |   |
| |         CDialog-derived class                 | |   |-- CView-derived
| |         (a child of CTabCtrl class)           | |   |   class
| |                                               | |   |
| |                                               | |   |
| |                                               | |   |
</PRE>| +-----------------------------------------------+&lt;----+
<PRE>| +-----------------------------------------------+ |
| |         CStatusBar class                      | |
| +-----------------------------------------------+ |
</PRE>+---------------------------------------------------+
<P>
As the picture shows, a frame window (CFrameWnd-derived class) contains the
following child windows:
<P>
<PRE>   - toolbar (CToolBar)
   - view (CView-derived class)
   - status bar (CStatuBar)

</PRE>The view window has tab control (CTabCtrl) as its child window, and tab
control has one or more modeless dialog boxes (CDialog-derived class) as
its child windows. In other words, the tab control will occupy the whole
client area of the view window and the modeless dialog boxes (or pages)
will occupy the display rectangle inside the tab control. However, there
can be only one page visible at any given time.
<P>
For simplicity, all pages in the sample code are created after the tab
control is successfully created in the view window. (The code for page
creation can be found in the CreatePages() function in tabview.cpp file.)
These pages will not be destroyed until the application shuts down. When
the view window receives the input focus (when the application is first
running), the page for the first tab will be the visible page in the
display area of the tab control.
<P>
Whenever a tab is selected from the tab control, both TCN_SELCHANGING and
TCN_SELCHANGE notification codes will be sent to the parent window (the
CView-derived class). The first notification code is to notify the parent
window that the currently selected tab is about to change. It is a good
place to put code to hide the currently visible page. On the other hand,
displaying the newly-selected page may be handled in the second
notification code.
<P>
The following list shows the general steps to have a PropertySheet-like
view in an AppWizard-generated application:

<OL><P><LI>Create all pages (or dialog boxes) for the tab control in dialog
   resource editor. Each page has a caption (for the tab text), a child
   style, and a thin border.

<P><LI>Create the header and implementation files for all pages (or dialog
   boxes) using ClassWizard.

<P><LI>Make the following changes to the header file (.h) of your
   CView-derived class:
<P>
   - Include "afxtempl.h" at the beginning of your .h file. It contains
<P><PRE>     all the declarations for a template class variable, m_DlgArray in
     the CView-derived class.
</PRE><P>
   - Add the following two member variables to your CView-derived class:
<P>
<P><PRE>     // Tab control is a child of tab view window.
<PRE></PRE>     CTabCtrl*   m_TabCtrl;

     // Array of all the property-page dialogs
     CTypedPtrArray&lt;CObArray, CDialog*&gt; m_DlgArray;

   - Add a CreatePages() function prototype to your CView-derived class:

     // Call this function to create all pages for the tab view window.
     void CreatePages();

   - Add a HandleKeyDownMsg() function prototype to your CView-derived
     class. This function will be called in the PreTranslateMessage()
     function of your CWinApp-derived class:

     // Call this function to handle all WM_KEYDOWN messages. It
     // returns TRUE if message is being handled; FALSE otherwise.
     BOOL HandleKeyDownMsg(MSG* pMsg);

   - Use ClassWizard to add handlers for the following messages that are
     sent to your CView-derived class:

     WM_CREATE   - to create tab control and all pages for the tab control.
     WM_SIZE     - size the tab control to cover up your entire view.
     WM_SETFOCUS - show page for the first tab in the tab control.

   - Add the following function prototypes to your CView-derived class for
     handling all notification codes sent by the tab control:

     afx_msg void OnTabSelChanging(NMHDR* pnmhdr, LRESULT* pResult);
     afx_msg void OnTabSelChange(NMHDR* pnmhdr, LRESULT* pResult);

</PRE><P><LI>Make the following changes to the implementation file (.cpp) of your
   CView-derived class:
<P>
   - Define the identifier (id) for the tab control, such as:
<P>
<PRE>     #define ID_TABCTRL  1111            // id for the CTabCtrl

   - Add the following ON_NOTIFY macro to the message map table:

     BEGIN_MESSAGE_MAP(CTabView, CView)
       //{{AFX_MSG_MAP(CTabView)
       ON_WM_CREATE()
       ON_WM_SIZE()
       ON_WM_SETFOCUS()
       ...                              // other message macros
       //}}AFX_MSG_MAP
       ON_NOTIFY(TCN_SELCHANGE, ID_TABCTRL, OnTabSelChange)
       ON_NOTIFY(TCN_SELCHANGING, ID_TABCTRL, OnTabSelChanging)
       ...                              // other message macros
     END_MESSAGE_MAP()

   - Initialize member variable m_TabCtrl to NULL in the constructor
     function.

   - Perform clean-up in the destructor function of your CView-derived
     class. Refer to the destructor function sample in tabview.cpp
     file.

   - Create tab control and then call the CreatePages() function in the
     OnCreate() function. The tab control is a child window of your view
     window. Refer to the sample OnCreate() function in tabview.cpp file.

   - Call MoveWindow() to size the tab control in OnSize() function so the
     tab control will cover up the entire client area of your view window.
     Refer to the sample OnSize() function in tabview.cpp file.

   - Call OnTabSelChange() in OnSetFocus() function to show page for the
     first tab in tab control. Refer to the sample OnSetFocus() function
     in tabview.cpp file.

   - Implement OnTabSelChange(), and OnTabSelChanging() functions: (Sample
     code can be found in the tabview.cpp file.)

     OnTabSelChange   - hide the current visible page.
     OnTabSelChanging - show the newly selected page.

   - Implement HandleKeyDownMsg() function to process CTL+TAB and
     SHIFT+CTRL+TAB, ENTER and ESCAPE keydown messages. These keystroke
     combinations are used to activate a tab that is either before or after
     the currently selected tab. Refer to the sample HandleKeyDownMsg()
     function in tabview.cpp file.

   - Include header files for all pages (CDialog-derived class) for the
     tab control.

   - Implement the CreatePages() function to create all pages for the tab
     control(CTabCtrl). Refer to the sample CreatePages() function in
     tabview.cpp file.

</PRE><P><LI>Use ClassWizard to add the PreTranslateMessage() function to your
   CWinApp-derived class. In the body of this function, call the view's
   HandleKeyDownMsg() function so it gets a chance to handle any
   keystroke messages that are relevant to its tab control. For messages
   that are not handled by the view, pass them to the default handler.
   Please refer to the sample PreTranslateMessage() in psview.cpp file.
<P>
</OL>The Readme.txt file included with the sample explains in more detail how
the sample is created in AppWizard and what files are included.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Please refer to Visual C++ Books for information about the classes
mentioned in the article and ClassWizard usage for creating .h and .cpp
files for all pages.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbui kbtool kbfile kbcode<BR>
KBSubcategory: kbsample MfcDocView<BR>
Additional reference words: 4.00 4.10 4.20<BR>
Keywords            : kbsample MfcDocView kbcode kbfile kbtool kbui<BR>
Technology          : kbMfc<BR>
Version             : 4.00 4.10 4.20<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

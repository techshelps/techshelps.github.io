

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Error C2065: '__emul/__emulu' : Undeclared Identifier </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153004">
<META NAME="KBModify" CONTENT="1997/07/25">
<META NAME="KBCreate" CONTENT="1996/06/26">
<META NAME="Keywords" CONTENT="VCPowerPC">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When compiling a file that includes the system header file LARGEINT.H, the following errors are reported:     C:\msdev\include\largeint.h(70) : error C2065: '__emul' :    undeclared identifier    C:\msdev\include\largeint.h(70) : error C2064: term ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAAP,QAB4,QAP2,QBVV,QA56,QA55,QAH4,QAYY,QAY5,QAVX,QAVW,QAOT,QAKP,QAJG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Error C2065: '__emul/__emulu' : Undeclared Identifier</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153004</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 4.0 on the following
   platform:
   - PowerPC
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When compiling a file that includes the system header file LARGEINT.H,
the following errors are reported:
<P>
<PRE>   C:\msdev\include\largeint.h(70) : error C2065: '__emul' :
   undeclared identifier
   C:\msdev\include\largeint.h(70) : error C2064: term does not
   evaluate to a function
   C:\msdev\include\largeint.h(87) : error C2065: '__emulu' :
   undeclared identifier
   C:\msdev\include\largeint.h(87) : error C2064: term does
   not evaluate to a function

</PRE><h2>CAUSE</h2>
 
<P>
LARGEINT.H and LARGEINT.LIB are not fully supported in Visual C++ RISC
edition version 4.0 for the PowerPC.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use the compiler-supported __int64 data type (64-bit integer) in place of
the LARGE_INTEGER and ULARGE_INTEGER structures in LARGEINT.H that are used
to emulate a 64-bit integer.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following is an excerpt from the header file LARGEINT.H that is
included in RISC edition of Visual C++ 4.0 for the Power PC:
<P>
<PRE>   Note that this version (of LARGEINT.H) has not been completely
   tested. It is provided solely as an aid for portability. We
   strongly suggest the use of __int64 types in preference to
   LARGE_INTEGER.

</PRE>All platforms supported by the 32-bit edition of Visual C++ 4.0 now support
the __int64 data type. For maximum portability and ease of use, the __int64
data type should be used for all new code development. For existing code
that uses LARGEINT.H, a port to the __int64 data type will be necessary if
the problem mentioned above is encountered.
<P>
The header file LARGEINT.LIB and its associated library, LARGEINT.LIB,
were originally created for early versions of 32-bit Microsoft C/C++
compiler. These versions of the compiler did not support a native 64-bit
data type. Later versions of the compiler were extended to add this data
type, replacing the need for the LARGE_INTEGER and ULARGE_INTEGER
structures provided by LARGEINT.H.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: CL TEST.CPP
   */

   #include &lt;largeint.h&gt;

   void main(void) {}

</PRE><h2>REFERENCES</h2>
 
<P>
Please see the Microsoft Visual C++ 4.0 RISC edition for the PowerPC header
file LARGEINT.H.
 
<PRE>Keywords          : VCPowerPC
Version           : 4.0
Platform          : NT WINDOWS
Issue type        : kbprb
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: DDX Problem with Combo Box in Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139593">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1995/11/13">
<META NAME="Keywords" CONTENT="kbprg kbui MfcMisc W32s kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The DDX function DDX_CBString does not work correctly under Win32s for combo boxes that use the drop list style. If you try to use DDX to retrieve the string associated with the static control of a drop list style combo box under Win32s, an empty s...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QA9N,QAKD,QBV8,QAB9,QAUD,QATX,QAE1,QABB,QAKP,QAGI,QACI,QABA,QAOE,QAHP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: DDX Problem with Combo Box in Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139593</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2,
<P><PRE>     4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The DDX function DDX_CBString does not work correctly under Win32s for
combo boxes that use the drop list style. If you try to use DDX to retrieve
the string associated with the static control of a drop list style combo
box under Win32s, an empty string is returned.
<P>
<P><h2>CAUSE</h2>
 
<P>
This problem is the result of an improperly sign extended return value from
the Windows SDK GetWindowTextLength function. The MFC function DDX_CBString
uses GetWindowTextLength to try to determine how many characters to copy
from the edit control of a combo box with a drop down style or the static
control of a combo box with a drop list style. The GetWindowTextLength
function fails to retrieve a valid text length for a combo box with a drop
list style under Win32s. When GetWindowTextLength is called for a combo box
with a drop list style under Win32s, a value of 0xFFFF is returned. Because
this return value isn't properly sign extended to 0xFFFFFFFF, the
DDX_CBString function doesn't work correctly.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
It is possible to work around this problem by providing your own
implementation of the DDX_CBString function for the class that has the
DDX_CBString call in its DoDataExchange function. If you provide your own
DDX_CBString member function, it will override the standard MFC
DDX_CBString function. To provide your own version of DDX_CBString follow
these steps:

<OL><P><LI>Add the following function to your class header file:
<P>
<PRE>   void DDX_CBString(CDataExchange *pDX, int
                     nIDC, CString&amp; value);

</PRE><P><LI>Add the implementation for this function to your classes implementation
   file. See the "Sample Code" section in this article for an example of a
   revised implementation of DDX_CBString for a class called CMyTryDlg.

<P><LI>In your implementation file, use #include to include the Afxpriv.h file.

<P><LI>Inside the implementation for this function, copy all the MFC code for
   the standard MFC DDX_CBString function. The standard MFC DDX_CBString
   function can be found in the MFC source file Dlgdata.cpp.

<P><LI>Change this line:
<P>
<P><PRE>      if (nLen != -1)
</PRE><P>
   to this line:
<P>
<P><PRE>      if (nLen!= -1 &amp;&amp; nLen!=0xFFFF)
</PRE><P>
</OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
Visual C++ versions 4.2 and later do not support building Win32s
applications.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
The following is a sample of an override of the DDX_CBString function for
the class called CMyTryDlg:
<P>
<PRE>   void AFXAPI CMyTryDlg::DDX_CBString(CDataExchange* pDX, int nIDC,
                                       CString&amp; value)
   {
        HWND hWndCtrl = pDX-&gt;PrepareCtrl(nIDC);
        if (pDX-&gt;m_bSaveAndValidate)
        {
             // Get current edit item text (or drop list static)
             int nLen = ::GetWindowTextLength(hWndCtrl);
             if (nLen != -1 &amp;&amp; nLen != 0xFFFF)
             {
                  // Get known length
                  ::GetWindowText(hWndCtrl, value.GetBufferSetLength(nLen),
                                  nLen+1);
            }
            else
            {
                 // GetWindowTextLength does not work for drop lists assume
                 // max of 255 characters
                 ::GetWindowText(hWndCtrl, value.GetBuffer(255), 255+1);
            }
            value.ReleaseBuffer();
       }
       else
       {
            // Set current selection based on model string
            if (::SendMessage(hWndCtrl, CB_SELECTSTRING, (WPARAM)-1,
                 (LPARAM)(LPCTSTR)value) == CB_ERR)
            {
                 // Set the edit text (will be ignored if DROPDOWNLIST)
                 AfxSetWindowText(hWndCtrl, value);
            }
       }
   }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg kbui MfcMisc W32s kbbuglist<BR>
Technology          : kbMfc<BR>
Version             : 2.0 2.1 2.2 4.0 4.1<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

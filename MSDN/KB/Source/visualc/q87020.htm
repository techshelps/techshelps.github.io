

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: New C++ Type Conversions May Generate C2446 or C2664 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q87020 ">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1992/07/21">
<META NAME="Keywords" CONTENT="CPPIss kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft compilers listed above, in accordance with restrictions defined by the Annotated Reference Manual (ARM) and later X3J16 working papers, will prevent type conversions that would potentially allow the modification of data qualified as t...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QBFY,QAPF,QAKJ,QAAP,QAB4,QAEQ,QBVV,QAO3,QAO2,QBQU,QAJQ,QAOT,QAH4,QA1Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: New C++ Type Conversions May Generate C2446 or C2664</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q87020 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft compilers listed above, in accordance with
restrictions defined by the Annotated Reference Manual (ARM) and later
X3J16 working papers, will prevent type conversions that would potentially
allow the modification of data qualified as type "const". An example of
this is as follows:
<P>
<PRE>   int             I =    8;
   int          * pI =   &amp;I;

   const int      cI =   11;
   const int  *  pcI =  &amp;cI;
   const int ** ppcI = &amp;pcI;

   ppcI = &amp;pI; // This should not be allowed because later attempts
               // to perform the assignment "*pI = 0;" would
               // modify the value "**ppcI" that was declared as
               // being constant.

</PRE>If the code above is compiled using C/C++ version 7.0, the following
two errors will be generated:
<P>
<PRE>   error C2446: '=' : no conversion between 'const int __near *
              __near * ' and 'int __near *__near * '

   error C2664: 'f_ppci' : cannot convert parameter 1 from 'int
              __near *__near * ' to 'const int __near *__near * '

</PRE>If this same code is compiled using Visual C++ version 4.0, the following
error will be generated:
<P>
<PRE>   error C2446: '=' : no conversion from 'int ** ' to 'const int ** ' (new
   behavior; please see help)

</PRE>If this same code is compiled using Visual C++ version 5.0, the following
error will be generated:
<P>
<PRE>   error C2440: '=' : cannot convert from 'int ** ' to 'const int ** '
   Conversion loses qualifiers

</PRE>The Microsoft C/C++ compiler is correctly generating the errors.
According to the ANSI committee for C++, the compiler should produce
an error.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are eight legal conversions allowed by C++ (see ARM section 13.2
page 3), two of which are applicable to this example (if T represents
a type):
<P>
<PRE>   T  --&gt; T const (or const T)
   T* --&gt; T const * (or const T *)

</PRE>Using the T symbol, the example given above (ppcI = &amp;pI) could be
expressed as follows:
<P>
<PRE>   T** --&gt; const T**

</PRE>To demonstrate why this conversion is not legal, substitute for T in
the rules given earlier and show that the conversion "T** --&gt; const
T**" cannot be derived from those two rules:
<P>
Let "int**" be T. By the first rule, then, the following is possible:
<P>
<PRE>   int** --&gt; int** const

</PRE>You may immediately assume that because "T const" is the same as
"const T", then "int** const" is the same as "const int**", but this
is not true. The "const" keyword modifies whatever falls directly to
the right of it. For example:
<P>
const int* D;  // "int" is to the right of "const," so D is a
<PRE>               // pointer to a constant integer. The compiler
               // will protect the value of *D

</PRE>int* const D;  // D is to the right of "const" and D is a
<PRE>               // pointer, so D would be called a "constant pointer
               // to an integer." The compiler will allow you to
               // modify *D, but not D itself.

const int D;   // These two are identical.
int const D;

</PRE>Hence, the first legal conversion (T --&gt; T const) does not apply to
this example.
<P>
Try the second rule, and let 'int*' be T, which gives you:
<P>
<PRE>   'int*'* --&gt; 'int*' const *

</PRE>The type "int* const *" can be translated as "a constant pointer to a
pointer that points to an integer." The target is "a pointer to a
pointer that points to a constant integer." So the second legal
conversion is also not applicable to this example. With this, it is
apparent that there is no legal combination of rules that will allow
the conversion "T** --&gt; const T**" to be made.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords          : CPPIss kberrmsg<BR>
Version           : MS-DOS:7.0;WIN3X:1.0,1.5;WINNT:1.0,2.0,4.0,5.0;<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

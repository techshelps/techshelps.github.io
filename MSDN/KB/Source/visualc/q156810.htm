

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for Members of the numeric_limits Class </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156810">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/01">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the following members from the numeric_limits class in Visual C++:     has_denorm    has_denorm_loss    has_infinity    has_quiet_NaN    has_signaling_NaN    is_bounded    is_exact    is_iec559    is_int...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAKC,QABA,QAKD,QBAY,QA2O,QAK2,QAHH,QABB,QBFY,QBC6,QBB2,QAG8,QBHK,QAGN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for Members of the numeric_limits Class</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156810</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the following members from the
numeric_limits class in Visual C++:
<P>
<PRE>   has_denorm
   has_denorm_loss
   has_infinity
   has_quiet_NaN
   has_signaling_NaN
   is_bounded
   is_exact
   is_iec559
   is_integer
   is_modulo
   is_signed
   is_specialized
   tinyness_before
   traps
   round_style
   digits
   digits10
   max_exponent
   max_exponent10
   min_exponent
   min_exponent10
   radix;
   denorm_min()
   epsilon()
   infinity()
   max()
   min()
   quiet_ NaN()
   round_error()
   signaling_NaN()

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The numeric_limits class provides information for a given type. For
example, you can determine whether a given type is signed or exact or how
it might represent infinity.
<P>
The Standard Library instantiates numeric_limits for char, bool, signed
char, unsigned char, short, unsigned short, int, unsigned int, long,
unsigned long, float, double, and long double. This class could also be
instantiated for a user-defined type.
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;limits&gt;

</PRE>Description
 
<P>
To reference one of the members of this class, you need to specify the type
that you want to obtain information about and the member name. The return
will either be a value of 1 for true or 0 for false. For example,
<P>
<PRE>   numeric_limits&lt;int&gt;::min()

</PRE>will return the minimum value for an int.
<P>
NOTE: Some of the members are only valid for certain types. Please refer to
the Online Help to determine if a member is only valid for a certain type.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  Numeric.cpp
//
// Variables and Functions:
//
//    has_denorm
//    has_denorm_loss
//    has_infinity
//    has_quiet_NaN
//    has_signaling_NaN
//    is_bounded
//    is_exact
//    is_iec559
//    is_integer
//    is_modulo
//    is_signed
//    is_specialized
//    tinyness_before
//    traps
//    round_style
//    digits
//    digits10
//    max_exponent
//    max_exponent10
//    min_exponent
//    min_exponent10
//    radix;
//    denorm_min()
//    epsilon()
//    infinity()
//    max()
//    min()
//    quiet_ NaN()
//    round_error()
//    signaling_NaN()
//
// Written by Linda Koontz
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

/* Compile options needed: /GX
*/

#include &lt;iostream&gt;
#include &lt;limits&gt;

void main() {
    cout &lt;&lt; " 1 The minimum value for char is " &lt;&lt;
        (int)numeric_limits&lt;char&gt;::min() &lt;&lt; endl;
    cout &lt;&lt; " 2 The minimum value for int is " &lt;&lt;
        numeric_limits&lt;int&gt;::min() &lt;&lt; endl;
    cout &lt;&lt; " 3 The maximum value for char is " &lt;&lt;
        (int)numeric_limits&lt;char&gt;::max() &lt;&lt; endl;
    cout &lt;&lt; " 4 The maximum value for int is " &lt;&lt;
        numeric_limits&lt;int&gt;::max() &lt;&lt; endl;
    cout &lt;&lt; " 5 The number of bits to represent a char is " &lt;&lt;
        numeric_limits&lt;char&gt;::digits &lt;&lt; endl;
    cout &lt;&lt; " 6 The number of bits to represent an int is " &lt;&lt;
        numeric_limits&lt;int&gt;::digits &lt;&lt; endl;
    cout &lt;&lt;" 7 The number of digits representable in base 10 for float is"
         &lt;&lt; numeric_limits&lt;float&gt;::digits10 &lt;&lt; endl;
    cout &lt;&lt; " 8 Is a char signed?              " &lt;&lt;
        numeric_limits&lt;char&gt;::is_signed &lt;&lt; endl;
    cout &lt;&lt; " 9 Is an unsigned integer signed? " &lt;&lt;
        numeric_limits&lt;unsigned int&gt;::is_signed &lt;&lt; endl;
    cout &lt;&lt; "10 Is a integer an integer? " &lt;&lt;
        numeric_limits&lt;int&gt;::is_integer &lt;&lt; endl;
    cout &lt;&lt; "11 Is a float an integer?   " &lt;&lt;
        numeric_limits&lt;float&gt;::is_integer &lt;&lt; endl;
    cout &lt;&lt; "12 Is a integer exact? " &lt;&lt;
        numeric_limits&lt;int&gt;::is_exact &lt;&lt; endl;
    cout &lt;&lt; "13 Is a float  exact?  " &lt;&lt;
        numeric_limits&lt;float&gt;::is_exact &lt;&lt; endl;
    cout &lt;&lt; "14 The radix for float is            "  &lt;&lt;
        numeric_limits&lt;float&gt;::radix &lt;&lt; endl;
    cout &lt;&lt; "15 The epsilon for float is          " &lt;&lt;
        numeric_limits&lt;float&gt;::epsilon() &lt;&lt; endl;
    cout &lt;&lt; "16 The round error for float is      " &lt;&lt;
        numeric_limits&lt;float&gt;::round_error() &lt;&lt; endl;
    cout &lt;&lt; "17 The minimum exponent for float is " &lt;&lt;
        numeric_limits&lt;float&gt;::min_exponent &lt;&lt; endl;
    cout &lt;&lt; "18 The minimum exponent in base 10   " &lt;&lt;
        numeric_limits&lt;float&gt;::min_exponent10 &lt;&lt; endl;
    cout &lt;&lt; "19 The maximum exponent is           " &lt;&lt;
        numeric_limits&lt;float&gt;::max_exponent &lt;&lt; endl;
    cout &lt;&lt; "20 The maximum exponent in base 10   " &lt;&lt;
        numeric_limits&lt;float&gt;::max_exponent10 &lt;&lt; endl;
    cout &lt;&lt; "21 Can float represent positive infinity?  " &lt;&lt;
        numeric_limits&lt;float&gt;::has_infinity &lt;&lt; endl;
    cout &lt;&lt; "22 Can double represent positive infinity? " &lt;&lt;
        numeric_limits&lt;double&gt;::has_infinity &lt;&lt; endl;
    cout &lt;&lt; "23 Can int represent positive infinity? " &lt;&lt;
        numeric_limits&lt;int&gt;::has_infinity &lt;&lt; endl;
    cout &lt;&lt; "24 Can float represent a NaN?           " &lt;&lt;
        numeric_limits&lt;float&gt;::has_quiet_NaN &lt;&lt; endl;
    cout &lt;&lt; "25 Can float represent a signaling NaN? " &lt;&lt;
        numeric_limits&lt;float&gt;::has_signaling_NaN &lt;&lt; endl;
    cout &lt;&lt; "26 Does float allow denormalized values?   " &lt;&lt;
        numeric_limits&lt;float&gt;::has_denorm &lt;&lt; endl;
    cout &lt;&lt; "27 Does float detect denormalization loss? " &lt;&lt;
        numeric_limits&lt;float&gt;::has_denorm_loss &lt;&lt; endl;
    cout &lt;&lt; "28 Representation of positive infinity for float " &lt;&lt;
        numeric_limits&lt;float&gt;::infinity() &lt;&lt; endl;
    cout &lt;&lt; "29 Representation of quiet NaN for float         " &lt;&lt;
        numeric_limits&lt;float&gt;::quiet_NaN() &lt;&lt; endl;
    cout &lt;&lt; "30 Minimum denormalized number for float         " &lt;&lt;
        numeric_limits&lt;float&gt;::denorm_min() &lt;&lt; endl;
    cout &lt;&lt; "31 Minimum positive denormalized value for float " &lt;&lt;
        numeric_limits&lt;float&gt;::denorm_min() &lt;&lt; endl;
    cout &lt;&lt; "32 Does float adhere to IEC 559 standard?  " &lt;&lt;
        numeric_limits&lt;float&gt;::is_iec559 &lt;&lt; endl;
    cout &lt;&lt; "33 Is float bounded? " &lt;&lt;
        numeric_limits&lt;float&gt;::is_bounded &lt;&lt; endl;
    cout &lt;&lt; "34 Is float modulo?  " &lt;&lt;
        numeric_limits&lt;float&gt;::is_modulo &lt;&lt; endl;
    cout &lt;&lt; "35 Is int modulo?    " &lt;&lt;
        numeric_limits&lt;float&gt;::is_modulo &lt;&lt; endl;
    cout &lt;&lt; "36 Is trapping implemented for float?    " &lt;&lt;
        numeric_limits&lt;float&gt;::traps &lt;&lt; endl;
    cout &lt;&lt; "37 Is tinyness detected before rounding? " &lt;&lt;
        numeric_limits&lt;float&gt;::tinyness_before &lt;&lt; endl;
    cout &lt;&lt; "38 What is the rounding style for float? " &lt;&lt;
        (int)numeric_limits&lt;float&gt;::round_style &lt;&lt; endl;
    cout &lt;&lt; "39 What is the rounding style for int? " &lt;&lt;
        (int)numeric_limits&lt;int&gt;::round_style &lt;&lt; endl;
    cout &lt;&lt; "40 How does a float represent a signaling NaN? " &lt;&lt;
        numeric_limits&lt;float&gt;::signaling_NaN() &lt;&lt; endl;
    cout &lt;&lt; "41 Is int specialized? " &lt;&lt;
        numeric_limits&lt;float&gt;::is_specialized &lt;&lt; endl;
}

</PRE>Output:
<P>
<PRE> 1 The minimum value for char is -128
 2 The minimum value for int is  -2147483648
 3 The maximum value for char is 127
 4 The maximum value for int is  2147483647
 5 The number of bits to represent a char is 7
 6 The number of bits to represent an int is 31
 7 The number of digits representable in base 10 for float is 6
 8 Is a char signed?              1
 9 Is an unsigned integer signed? 0
</PRE>10 Is an integer an integer? 1
<PRE>11 Is a float an integer?   0
</PRE>12 Is an integer exact? 1
13 Is a float exact?  0
<PRE>14 The radix for float is            2
15 The epsilon for float is          1.19209e-007
16 The round error for float is      0.5
</PRE>17 The minimum exponent for float is -125
<PRE>18 The minimum exponent in base 10   -37
19 The maximum exponent is           128
20 The maximum exponent in base 10   38
</PRE>21 Can float represent positive infinity?  1
22 Can double represent positive infinity? 1
23 Can int represent positive infinity? 0
<PRE>24 Can float represent a NaN?           1
</PRE>25 Can float represent a signaling NaN? 1
<PRE>26 Does float allow denormalized values?   1
</PRE>27 Does float detect denormalization loss? 1
28 Representation of positive infinity for float 1.#INF
<PRE>29 Representation of quiet NaN for float         -1.#IND
30 Minimum denormalized number for float         1.4013e-045
</PRE>31 Minimum positive denormalized value for float 1.4013e-045
32 Does float adhere to IEC 559 standard?  1
33 Is float bounded? 1
34 Is float modulo?  0
<PRE>35 Is int modulo?    0
36 Is trapping implemented for float?    1
</PRE>37 Is tinyness detected before rounding? 1
38 What is the rounding style for float? 1
39 What is the rounding style for int? 0
40 How does a float represent a signaling NaN? -1.#INF
41 Is int specialized? 1
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

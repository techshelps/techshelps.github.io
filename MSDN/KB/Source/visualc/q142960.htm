

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: CCheckListBox Fails with Style LBS_MULTICOLUMN </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142960">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/01/24">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbcode kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When using the CCheckListBox class and specifying a style of LBS_MULTICOLUMN, the user will be unable to check or uncheck items that are not displayed in the first column.  CAUSE =====  The hit-testing that is done in CCheckListBox::OnLButtonDown d...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QABI,QAGI,QABH,QAR4,QAII,QABO,QA4Q,QAYL,QAUD,QBSO,QAIF,QBWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: CCheckListBox Fails with Style LBS_MULTICOLUMN</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142960</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.10
WINDOWS NT
kbprg kbbuglist kbcode kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using the CCheckListBox class and specifying a style of
LBS_MULTICOLUMN, the user will be unable to check or uncheck items that
are not displayed in the first column.
<P>
<P><h2>CAUSE</h2>
 
<P>
The hit-testing that is done in CCheckListBox::OnLButtonDown does not take
into consideration which column the user is clicking.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Derive a class from CCheckListBox and override OnLButtonDown to do proper
hit-testing. It will also be necessary to override OnLButtonDblClk and the
constructor.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI> Bring up ClassWizard. Use "Add Class" to add a new class called
<P><PRE>    CMyCheckListBox derived from CListBox. In the .h and .cpp files
    generated for the new class, change all occurrences of CListBox
    to CCheckListBox.
</PRE>
<P><LI> Add a protected member variable of type int called m_nCheckWidth
<P><PRE>    to the new class.
</PRE>
<P><LI> Modify the default constructor for CMyCheckListBox to look like this:
<P>
<P><PRE>    CMyCheckListBox::CMyCheckListBox()
    {
<PRE></PRE>        // the following code initializes the member variable
        // m_nCheckWidth to be the width of a check box.

    CBitmap bitmap;
    BOOL bWin4 = (BYTE)GetVersion() &gt;= 4;
    HINSTANCE hInst = bWin4 ? NULL : LoadLibraryA("CTL3D32.DLL");
    FARPROC pfnProc = (NULL == hInst) ? NULL : GetProcAddress(hInst,
                                                   (LPCSTR)21);

    if (bWin4 || pfnProc != NULL)
       VERIFY(bitmap.LoadBitmap(AFX_IDB_CHECKLISTBOX_95));
    else
       VERIFY(bitmap.LoadBitmap(AFX_IDB_CHECKLISTBOX_NT));

    BITMAP bm;
    bitmap.GetObject(sizeof (BITMAP), &amp;bm);
    m_nCheckWidth = bm.bmWidth / 3;

    if (hInst)
       FreeLibrary(hInst);
    }

</PRE><P><LI> Use ClassWizard to add a handler for WM_LBUTTONDOWN, and implement it
<P><PRE>    as follows:
</PRE><P>
<P><PRE>    void CMyCheckListBox::OnLButtonDown(UINT nFlags, CPoint point)
    {
<PRE></PRE>        CRect itemRect;
        CRect clientRect;

        GetClientRect(clientRect);
        for(int nIndex = GetTopIndex(); nIndex &lt; GetCount(); nIndex++)
        {
            GetItemRect(nIndex, &amp;itemRect);
            if (!clientRect.PtInRect(itemRect.TopLeft()))
                break;
            if (itemRect.PtInRect(point) &amp;&amp; IsEnabled(nIndex))
            {
                if (m_nStyle != BS_CHECKBOX &amp;&amp; m_nStyle != BS_3STATE)
                {
                    if (point.x - itemRect.left &lt; m_nCheckWidth + 2)
                    {
                        CWnd* pParent = GetParent();
                        ASSERT_VALID(pParent);
                        int nModulo = (m_nStyle == BS_AUTO3STATE) ? 3 : 2;
                        int nCheck = GetCheck(nIndex);
                        nCheck = (nCheck == nModulo) ? nCheck - 1 : nCheck;
                        SetCheck(nIndex, (nCheck + 1) % nModulo);
                        InvalidateCheck(nIndex);
                        CListBox::OnLButtonDown(nFlags, point);
                        // Inform of check
                        pParent-&gt;SendMessage(WM_COMMAND,
                            MAKEWPARAM(GetDlgCtrlID(), CLBN_CHKCHANGE),
                            (LPARAM)m_hWnd);
                        return;

                    }
                }
                else
                    return; // Swallow LButtons for disabled items
            }
        }
        // call CListBox::OnLButtonDown
        // DO NOT call CCheckListBox::OnLButtonDown
        CListBox::OnLButtonDown(nFlags, point);
    }

</PRE><P><LI> Use ClassWizard to add a handler for WM_LBUTTONDDBLCLK and just call
<P><PRE>    CMyCheckListBox::OnLButtonDown:
</PRE><P>
<P><PRE>    void CMyCheckListBox::OnLButtonDblClk(UINT nFlags, CPoint point)
    {
<PRE></PRE>        OnLButtonDown(nFlags, point);
    }

</PRE></OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem was corrected in Visual C++,
32-bit Edition, version 4.2.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.10 vcbuglist400 vcfixlist420<BR>
KBCategory: kbprg kbbuglist kbcode kbfixlist<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbbuglist kbcode kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 4.00 4.10<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

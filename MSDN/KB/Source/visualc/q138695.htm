

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC: ConstructElements &amp; DestructElements </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138695">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1995/10/25">
<META NAME="Keywords" CONTENT="kbprg vcbuglist400 vcbuglist500 kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The documentation (included with the products listed above) for ConstructElements and DestructElements contains errors.  ConstructElements and DestructElements are two of the seven templated global helper functions used by MFC's templated collectio...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBFY,QA56,QA55,QAPN,QBE7,QBE6,QAGI,QABO,QBV8,QAP2,QAB9,QABA,QA36,QAZB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOC: ConstructElements &amp; DestructElements</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138695</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The documentation (included with the products listed above) for
ConstructElements and DestructElements contains errors.
<P>
ConstructElements and DestructElements are two of the seven templated
global helper functions used by MFC's templated collection classes such as
CArray, CList, and CMap. ConstructElements is used to construct the
elements stored in the collection classes and DestructElements is used to
destruct the elements stored in the collection classes.
<P>
In Visual C++ 2.x, the MFC default implementation of ConstructElements does
a bit-wise zero initialization to all the new elements, and the default
implementation of DestructElements does nothing.
<P>
In Visual C++ 4.0 through 5.x, the MFC default implementation of
ConstructElements not only does a bit-wise zero initialization to all the
new elements but also calls the stored objects' constructors in a loop.
This is different from the implementation in Visual C++ 2.x, but the
documentation was not changed. See the "More Information" section in this
article for the function implementation.
<P>
In addition, the MFC default implementation of DestructElements in Visual
C++ 4.0 through 5.x, destructs the stored objects by calling their
destructors. This is new in Visual C++ 4.x. See the "More Information"
section in this article for the function implementation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
ConstructElements and DestructElements are the templated global helper
functions used by MFC's templated collection classes to help constructing
and destroying elements stored in the collection classes. As part of your
implementation of classes based on these templated collection classes, you
must override these functions as necessary with versions tailored to the
type of data stored in your collection classes. Following are the MFC
default implementations for ConstructElements and DestructElements in
Visual C++ 4.0 through 5.x:
<P>
<PRE>   template&lt;class TYPE&gt;
   inline void AFXAPI ConstructElements(TYPE* pElements, int nCount)
   {
     ASSERT(nCount == 0 ||
            AfxIsValidAddress(pElements, nCount * sizeof(TYPE)));

     // First do bit-wise zero initialization.
     memset((void*)pElements, 0, nCount * sizeof(TYPE));

     // Then call the constructor(s).
     for (; nCount--; pElements++)
         ::new((void*)pElements) TYPE;
   }

   template&lt;class TYPE&gt;
   inline void AFXAPI DestructElements(TYPE* pElements, int nCount)
   {
      ASSERT(nCount == 0 ||
             AfxIsValidAddress(pElements, nCount * sizeof(TYPE)));

      // Call the destructor(s).
      for (; nCount--; pElements++)
          pElements-&gt;~TYPE();
   }

</PRE>NOTE: In C++, when resolving a reference to a templated function, it
examines all nontemplate instances of the function (the specialized
functions) first. Then it examines all template instances of the function.
Therefore, if you specialize the above functions in your applications when
you use Visual C++ 2.0, your program still should be compatible with Visual
C++ 4.x without any changes.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: template MFC4.0<BR>
Keywords            : kbprg vcbuglist400 vcbuglist500 kbbuglist<BR>
Technology          : kbMfc<BR>
Version             : 4.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbdocerr<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

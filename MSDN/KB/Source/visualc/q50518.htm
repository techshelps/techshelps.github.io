

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BX Register Is Popped Twice for a C Interrupt Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q50518 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1989/10/31">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The interrupt keyword is used to designate specific C functions as interrupt service routines and instructs the compiler to generate appropriate entry and exit instructions.  If you compile code with the /G1 or /G2 option (80186 or 80286 code gener...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADN,QAHC,QAH4,QBFY,QA9O,QA7R,QAHB,QAEF,QBV8,QAB9,QAUR,QATS,QASR,QAOT,QA33 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BX Register Is Popped Twice for a C Interrupt Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q50518 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 6.00 6.00a | 1.00 1.50 1.51 1.52
<PRE>MS-DOS                 | OS/2       | WINDOWS
</PRE>kbtool
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0, and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, version 1.0, 1.5, 1.51, and 1.52
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The interrupt keyword is used to designate specific C functions as
interrupt service routines and instructs the compiler to generate
appropriate entry and exit instructions.
<P>
If you compile code with the /G1 or /G2 option (80186 or 80286 code
generation), then the compiler produces pusha and popa instructions
that save and restore all vital registers.
<P>
However, if you compile with the default /G0 (8086 code generation),
then the registers are each explicitly pushed and popped. One
difference, which may at first appear to be a problem in this code, is
that the BX register is popped twice but the SP register is not popped
at all.
<P>
This is not a problem. The SP register is saved in the following
instruction sequence:
<P>
<PRE>   mov     bp, sp
   .
   .       ISR code
   .
   mov     sp, bp

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The peculiar double popping of BX can be explained by the following:

<UL><LI>The registers are pushed AX, CX, DX, BX, SP, BP, SI, DI, DS, ES
   (left to right)

<LI>The registers are popped AX, CX, DX, BX, BX, BP, SI, DI, DS, ES
   (right to left)
<P>
</UL>Notice that ES receives the old ES; DS the old DS, but BX receives the
old SP, then BX receives the old BX.
<P>
The first pop of SP to BX is necessary to remove the previous value of
SP from the stack. The second pop of BX is necessary to restore the
old BX value.
<P>
The old value of SP was restored in the "MOV SP,BP" instruction,
which immediately precedes the popping of all the registers.
<P>
This ensures that the state of the registers are saved and then
restored in the Interrupt Service Routine.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compiler Options Needed: /Fc /G0 (or /G1)
*/

#include &lt;stdio.h&gt;
#include &lt;dos.h&gt;

void __interrupt __far func1(unsigned _es, unsigned _ds,
                             unsigned _di, unsigned _si )
{}

void main(void)
</PRE>{}
<P>
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 6.00 6.00a 6.00ax 7.00 8.00<BR>
8.00c<BR>
KBCategory: kbtool<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

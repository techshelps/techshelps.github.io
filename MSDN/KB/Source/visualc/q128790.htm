

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: The SPAWN.C Sample Fails as a C++ Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128790">
<META NAME="KBModify" CONTENT="1997/07/25">
<META NAME="KBCreate" CONTENT="1995/04/10">
<META NAME="Keywords" CONTENT="CPPIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The SPAWN.C program fails to spawn applications correctly when it is copied to a C++ file (SPAWN.CPP).  Attempting the conversion results in these two problems:   - You receive error C2662:     '__spawnv' : cannot convert parameter 3 from'char    _...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAGX,QAKP,QAI4,QAH4,QAJQ,QA4F,QAHE,QAFV,QAPF,QAKC,QAA1,QAFK,QDKS,QBC6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: The SPAWN.C Sample Fails as a C++ Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128790</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 2.2,
<P><PRE>     4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The SPAWN.C program fails to spawn applications correctly when it
is copied to a C++ file (SPAWN.CPP).
<P>
Attempting the conversion results in these two problems:

<UL><LI>You receive error C2662:
<P>
<PRE>   '__spawnv' : cannot convert parameter 3 from'char
   __far*[4]' to 'const char __far *const __far * '

</PRE><LI>You receive errors stating that you have the wrong number of arguments,
   or the spawned program fails, which may force you to reboot the
   computer. These problems are caused by the fact that the definition of
   NULL in C++ is different from the definition of NULL in C.
<P>
</UL><h2>RESOLUTION</h2>
 
<P>
These same issues are frequently encountered when converting C programs to
the C++ language.
<P>
Casting the args and my_env variables with (const char *const *) will
resolve the first problem. Alternatively, you can work around this problem
by redefining the prototype in PROCESS.H.
<P>
To resolve the second problem, you need to understand the change in the
definition of NULL. In C++, NULL is defined as 0 (zero); in C, NULL is
defined as (void *). Therefore, you can solve the second problem by casting
NULL with (void *). This problem is encountered in far data models only.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed:    none, /AL or /AC will reproduce the
   *                                            problems with NULL.
   */

</PRE>The following code is a correctly modified SPAWN.CPP:
<P>
<PRE>   /* SPAWN.CPP: This program accepts a number in the range
    * 1-8 from the command line. Based on the number it receives,
    * it executes one of  the eight different procedures that
    * spawn the process named child. For some of these procedures,
    * the CHILD.EXE file must be in the same directory; for
    * others, it need only be in the same path.
    */
   #include &lt;stdio.h&gt;
   #include &lt;process.h&gt;
   char *my_env[] =
   {
      "THIS=environment will be",
      "PASSED=to child.exe by the",
      "_SPAWNLE=and",
      "_SPAWNLPE=and",
      "_SPAWNVE=and",
      "_SPAWNVPE=functions",
      NULL
   };
   void main( int argc, char *argv[] )
   {
      char *args[4];
      /* Set up parameters to be sent: */
      args[0] = "child";
      args[1] = "spawn??";
      args[2] = "two";
      args[3] = NULL;
      switch (argv[1][0])   /* Based on first letter of argument */
      {
      case '1':
         _spawnl( _P_WAIT, argv[2], argv[2], "_spawnl", "two",
        (void *)NULL );
         break;
      case '2':
         _spawnle( _P_WAIT, argv[2], argv[2], "_spawnle", "two",
         (void *)NULL, my_env );
         break;
      case '3':
         _spawnlp( _P_WAIT, argv[2], argv[2], "_spawnlp", "two",
         (void *)NULL );
         break;
      case '4':
         _spawnlpe( _P_WAIT, argv[2], argv[2], "_spawnlpe", "two",
         (void *)NULL, my_env );
         break;
      case '5':
         _spawnv( _P_OVERLAY, argv[2],
         (const char *const __near *)args );
         break;
      case '6':
         _spawnve( _P_OVERLAY, argv[2], (const char *const *)args,
         (const char * const *)my_env );
         break;
      case '7':
         _spawnvp( _P_OVERLAY, argv[2], (const char *const *)args );
         break;
      case '8':
         _spawnvpe( _P_OVERLAY, argv[2], (const char *const *)args,
         (const char * const *)my_env );
         break;
      default:
         printf( "SYNTAX: SPAWN &lt;1-8&gt; &lt;childprogram&gt;\n" );
         exit( 1 );
      }
      printf( "from SPAWN!\n" );
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.0 8.0c 8.00 8.00c 9.00 9.10 10.00 10.10<BR>
Keywords          : CPPIss<BR>
Version           : 1.0 1.5 1.51 2.0 2.1 4.0 4.1<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

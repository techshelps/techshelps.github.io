

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Drop-down Combobox Does Not Move with Property Sheet </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136302">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/09/05">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbcode kbfixlist kbprg kbui">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When a combo box on the active page of a CPropertySheet object is opened and the property sheet is moved by dragging it with the mouse, the drop-down portion of the combo box stays at its current screen position; it does not move with the underlyin...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBV3,QAH4,QBFY,QA56,QA55,QAGB,QAGC,QACI,QAHP,QABO,QBVV,QA9N,QAEF,QABI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Drop-down Combobox Does Not Move with Property Sheet</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136302</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.52 1.52b | 2.00 2.10 2.20
<PRE>WINDOWS    | WINDOWS NT
</PRE>kbprg kbui kbcode kbbuglist kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.52, 1.52b
<LI>Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a combo box on the active page of a CPropertySheet object is opened
and the property sheet is moved by dragging it with the mouse, the
drop-down portion of the combo box stays at its current screen position; it
does not move with the underlying property sheet's dialog box.
<P>
NOTE: This bug consistently occurs in 16-bit applications running under
Windows 95 or Windows version 3.x. However, it does not occur when running
under Windows NT, and it occurs intermittently in 32-bit applications
running under Windows 95.
<P>
<P><h2>CAUSE</h2>
 
<P>
The _AfxCancelModes internal MFC function is not called from
CPropertySheet::PreTranslateMessage() as it is for CFrameWnd. In 32-bit
Visual C++, _AfxCancelModes is defined as AfxCancelModes.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, derive a class from CPropertySheet and
call _AfxCancelModes from the derived class's PreTranslateMessage when
the WM_LBUTTONDOWN or WM_NCLBUTTONDOWN messages are received. See the "Step-
By-Step Workaround" section in this article for an example.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. This problem was corrected in
Microsoft Visual C++, 32-bit Edition, version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-By-Step Workaround</h3>
 

<OL><P><LI>Create a new class derived from CPropertySheet.
<P>
   a. Open the ClassWizard.
<P>
   b. Click the Add Class button.
<P>
   c. Choose a Class Type of generic CWnd. This is necessary because
<P><PRE>      ClassWizard does not support creating a CPropertySheet class in
      16-bit Visual C++. If you are using 32-bit Visual C++, you should be
      able to derive a class from CPropertySheet directly.
</PRE><P>
   d. Enter a Class Name such as CMySheet.
<P>
   e. Click the Create Class button.

<P><LI>If you are using 32-bit Visual C++, please skip steps 2.a, 2.b, and 2.c.
   In the new .h file (mysheet.h), make these changes:
<P>
   a. Change this:
<P>
<PRE>         class CMySheet : public CWnd

      To this:

         class CMySheet : public CPropertySheet

   b. Add the following as the first line in the class definition:

      DECLARE_DYNAMIC(CMySheet)

   c. Delete the default constructor declaration and add the following two
      constructors in its place:

      CMySheet(UINT nIDCaption, CWnd *pParentWnd = NULL,
         UINT iSelectPage = 0 ) : CPropertySheet(nIDCaption,
         pParentWnd, iSelectPage) { }
      CMySheet(LPCTSTR pszCaption, CWnd *pParentWnd = NULL,
         UINT iSelectPage = 0 ) : CPropertySheet(pszCaption,
         pParentWnd, iSelectPage) { }

   d. Add a prototype for an override of PreTranslateMessage in a public
      section of the class definition:

      public:
          virtual BOOL PreTranslateMessage(MSG* pMsg);

</PRE><P><LI>If you are using 32-bit Visual C++, please skip step 3.a. In the new
   .cpp file (mysheet.cpp), make these changes:
<P>
   a. Delete the default constructor function body.
<P>
   b. Add the definition of PreTranslateMessage:
<P>
<P><PRE>      BOOL CMySheet::PreTranslateMessage(MSG* pMsg)
      {
<PRE></PRE>          // check for special cancel modes for ComboBoxes
          if (pMsg-&gt;message == WM_LBUTTONDOWN ||
          pMsg-&gt;message == WM_NCLBUTTONDOWN)
        _AfxCancelModes(pMsg-&gt;hwnd);    // filter clicks

       return CPropertySheet::PreTranslateMessage(pMsg);
      }

   c. Use The following sample code to define _AfxCanelModes. Place this
      code should be placed above the CMySheet::PreTranslateMessage
      definition. The code is needed because if the project is linking to
      the DLL version of MFC, you need to copy the code for this function
      and one other function that is called and insert it into the project.
      The code can be found in msvc\mfc\src\winutil.cpp. If the project
      links to a static MFC library, all you need to do is add a prototype
      for the function. The code handles both situations by using the
      #ifdef - #else - #endif preprocessor directives.


      /* Compile options needed: Default AppWizard options
      */

      #ifdef _AFXDLL  // define the functions
      BOOL PASCAL _AfxIsComboBoxControl(HWND hWnd, UINT nStyle)
      {
         if (hWnd == NULL)
         return FALSE;
         // do cheap style compare first
         if ((UINT)(::GetWindowLong(hWnd, GWL_STYLE) &amp; 0x0F) != nStyle)
         return FALSE;

         // do expensive classname compare next

         // If using 16-bit Visual C++, use the following code
            static char BASED_CODE szComboBox[] = "combobox";
            char szCompare[sizeof(szComboBox) + 1];
            ::GetClassName(hWnd, szCompare, sizeof(szCompare));

          // else if using 32-bit Visual C++, use the following code
          // and comment out the code above.
          //
          //  static const TCHAR szComboBox[] = _T("combobox");
          //  TCHAR szCompare[sizeof(szComboBox)/sizeof(szCompare[0])+1];
          //  ::GetClassName(hWnd, szCompare,
          //                 sizeof(szCompare)/sizeof(szCompare[0]) );

          return (lstrcmpi(szCompare, szComboBox) == 0);
            }

          void PASCAL _AfxCancelModes(HWND hWndRcvr)
          {
          // if we receive a message destined for a window, cancel any
          // combobox popups that could be in toolbars or dialog bars
          HWND hWndCancel = ::GetFocus();
          if (hWndCancel == NULL)
          return;     // nothing to cancel

          if (hWndCancel == hWndRcvr)
          return;     // let input go to window with focus

          // focus is in part of a combo-box
          if (!_AfxIsComboBoxControl(hWndCancel, (UINT)CBS_DROPDOWNLIST))
          {
          // try as a dropdown
          hWndCancel = ::GetParent(hWndCancel);// parent of edit is combo
          if (hWndCancel == hWndRcvr)
          return;     // let input go to part of combo

          if (!_AfxIsComboBoxControl(hWndCancel, (UINT)CBS_DROPDOWN))
             return;     // not a combo-box that is active
          }

          // combo-box is active, but if receiver is a popup, do nothing
          if (hWndRcvr != NULL &amp;&amp;
            (::GetWindowLong(hWndRcvr, GWL_STYLE) &amp; WS_CHILD) != 0 &amp;&amp;
            ::GetParent(hWndRcvr) == ::GetDesktopWindow())
          return;

          // finally, you should cancel the mode !
          ::SendMessage(hWndCancel, CB_SHOWDROPDOWN, FALSE, 0L);
      }

      #else   // just prototype it
      void PASCAL _AfxCancelModes(HWND hWndRcvr);

      #endif

</PRE></OL>NOTE: In your application, make sure you use class CMySheet instead of
the default CPropertySheet.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.51 2.52 3.00 3.10 3.20<BR>
KBCategory: kbprg kbui kbbuglist kbfixlist kbcode<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbbuglist kbcode kbfixlist kbprg kbui<BR>
Technology        : kbMfc<BR>
Version           : 1.52 1.52b | 2.00 2.10 2.20<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

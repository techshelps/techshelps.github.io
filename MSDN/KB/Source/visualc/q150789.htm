

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: DFX_Bool Calls Default() with AFX_RFX_LONGBINARY </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150789">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/05/09">
<META NAME="Keywords" CONTENT="MfcDAO kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Memory adjacent to the BOOL variable gets overwritten when working with a BOOL CDaoRecordset field data member.  CAUSE =====  The DFX_Bool function delegates the Fixup case to CDaoFieldExchange::Default and incorrectly passes AFX_RFX_LONGBINARY as ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAYL,QAKD,QAH4,QAGX,QABA,QAUD,QAR4,QAIF,QBXS,QAY5,QAH6,QAAP,QBWP,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: DFX_Bool Calls Default() with AFX_RFX_LONGBINARY</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150789</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.10
WINDOWS NT
kbother kbbuglist kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P><PRE>    - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Memory adjacent to the BOOL variable gets overwritten when working with a
BOOL CDaoRecordset field data member.
<P>
<P><h2>CAUSE</h2>
 
<P>
The DFX_Bool function delegates the Fixup case to
CDaoFieldExchange::Default and incorrectly passes AFX_RFX_LONGBINARY as the
field data type.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To resolve this problem, copy the DFX_Bool function to the project and give
it a different name. For example, rename it DFX_Bool2. In the call to
CDaoFieldExchange::Default, change the field data type from
AFX_RFX_LONGBINARY to AFX_RFX_BOOL by using the following code:
<P>
Change this code
<P>
<PRE>   case CDaoFieldExchange::Fixup:
      // Convert BOOL value from AFX_DAO_TRUE/FALSE to TRUE/FALSE
      value = (value != AFX_DAO_FALSE);

      pFX-&gt;Default(lpszName, (void*)&amp;value,
         AFX_RFX_LONGBINARY, dwBindOptions);
      return;

</PRE>to this code:
<P>
<PRE>   case CDaoFieldExchange::Fixup:
      // Convert BOOL value from AFX_DAO_TRUE/FALSE to TRUE/FALSE
      value = (value != AFX_DAO_FALSE);

      pFX-&gt;Default(lpszName, (void*)&amp;value,
         AFX_RFX_BOOL, dwBindOptions);       // &lt;&lt;-- Change to AFX_RFX_BOOL
      return;

</PRE>Then, change the class of the CDaoRecordset-derived DoFieldExchange
function to call this new function in place of calling DFX_Bool.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. This bug was corrected in Visual
C++ 32-bit Edition version 4.2.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code for the Fixup case in CDaoFieldExchange::Default is:
<P>
<PRE>   case Fixup:
      if (m_prs-&gt;GetFieldLength(m_nField-1) == DAO_NULL)
      {
         // Set the value to PSEUDO NULL and mark the status NULL
         SetNullValue(pv, dwColumnType);
         m_prs-&gt;SetNullFieldStatus(m_nField-1);
      }
      return;

</PRE>The dwColumn type is the variable that is incorrectly set to
AFX_RFX_LONGBINARY in DFX_Bool. Note that SetNullValue is called with the
value passed in the second parameter. The code for SetNullValue (showing
relevant cases) is:
<P>
<PRE>   void CDaoFieldExchange::SetNullValue(void* pv, DWORD dwDataType)
   {
      switch (dwDataType)
      {
         .
         .
         .

      case AFX_RFX_LONGBINARY:
         ((CLongBinary*)pv)-&gt;m_dwDataLength = 0;
         break;

      case AFX_RFX_BOOL:
         *(BOOL*)pv = AFX_RFX_BOOL_PSEUDO_NULL;
         break;

        .
        .
        .
    }
</PRE>}
<P>
Note that the AFX_RFX_BOOL case (the one that should be called) sets the
BOOL variable to the constant AFX_RFX_BOOL_PSEUDO_NULL. The
AFX_RFX_LONGBINARY case (incorrectly called in the MFC source) sets the
m_dwDataLength member of a CLongBinary object (at an offset in the object
beyond the size of a BOOL) to zero. Whatever is adjacent to the BOOL
variable has 4 bytes of its memory overwritten. The symptoms of this memory
overwrite depend on what that variable was used for. There can also be no
symptoms.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.10 4.20 vcbuglist400 vcfixlist420<BR>
KBCategory: kbprg kbbuglist kbfixlist<BR>
KBSubcategory: MfcDAO
<P>

<BR>
Keywords          : MfcDAO kbbuglist kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 4.00 4.10<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

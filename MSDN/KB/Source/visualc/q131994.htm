

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use MFC to Step Through Child Windows of the MDIClient </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131994">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1995/06/26">
<META NAME="Keywords" CONTENT="MfcMisc kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  You can iterate through all the MDI child windows in an MDI application without specifically activating them in turn. These CMDIChildWnd objects are managed by the MDIClient window, which covers the client area of the main frame window in an MDI ap...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QDL9,QBWQ,QBWO,QBWN,QAGQ,QAW6,QAPN,QAE1,QAY5,QABO,QABH,QABI,QAGI,QALW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use MFC to Step Through Child Windows of the MDIClient</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131994</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00 2.10
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, and
      4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can iterate through all the MDI child windows in an MDI application
without specifically activating them in turn. These CMDIChildWnd objects
are managed by the MDIClient window, which covers the client area of the
main frame window in an MDI application. Although this window does not have
a corresponding MFC object, you can attach it to a CWnd object and use the
features of the CWnd class to access each of the MDI child windows.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In MFC, each CMDIChildWnd created by the framework is managed as a child
window of the MDIClient window. This MDIClient window is a child of the
mainframe window and fills its client area. For MDI applications, the
mainframe window is encapsulated by the CMDIFrameWnd class. This class has
a public embedded HWND member (m_hWndMDIClient), which is the handle to the
MDIClient window. For MDI applications, AppWizard derives the CMainFrame
class from CMDIFrameWnd.
<P>
The MDIClient maintains an internal list of child windows. In an MFC
application, these child windows are either a CMDIChildWnd object or an
internal window used to display the title of an iconized window. Note that
this is an internal list controlled by Windows; don't make assumptions
about the ordering of children in the list after an API function is called.
<P>
<P><h3>How to Step Through the MDIClient's Child Window List</h3>
 

<OL><P><LI>To access the MDIClient window in MFC, attach a CWnd derived class to
   m_hWndMDIClient as shown in the sample code. Another option is to
   subclass the MDIClient discussed in the following article in the
   Microsoft Knowledge Base:
<P>
   ARTICLE-ID: <B><A HREF="../VISUALC/Q103786.htm">Q103786</A></B>
<PRE>   TITLE     : Changing Window Background Color with Foundation Classes

</PRE><P><LI>Implement the GetNextMDIChildWnd() function as defined below. This
   custom member of the CMDIFrameWnd-derived object uses another custom
   member, m_pWndCurrentChild, to store the current child window between
   calls.

<P><LI>Implement the GetCountCMDIChildWnds() function as defined below.
   Another custom member of the CMDIFrameWnd-derived object, this function
   calls GetNextMDIChildWnd() to get the count of CMDIChildWnd objects
   maintained by the MDIClient.
<P>
</OL>NOTE: You can derive a class from CMDIChildWnd to customize the behavior of
the MDI child windows in your application. For example, you can add
information to further differentiate between the CMDIChildWnd derived
classes.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//**mainfrm.h***************************************************
</PRE></OL>class CMainFrame : public CMDIFrameWnd
{
...
public:
<PRE>   CWnd  m_wndMDIClient;
   CWnd* m_pWndCurrentChild;
   CMDIChildWnd* GetNextMDIChildWnd();
   int GetCountCMDIChildWnds();
</PRE>...
}
<P>
<PRE>//**mainfrm.cpp**************************************************
</PRE>CMainFrame::CMainFrame():m_pWndCurrentChild(NULL)
{
<PRE>  //.................
</PRE>}
<P>
CMainFrame::~CMainFrame()
{
<PRE>  m_wndMDIClient.Detach();
  //.................
</PRE>}
<P>
<PRE>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
</PRE>{
<PRE>  if (CMDIFrameWnd::OnCreate(lpCreateStruct) == -1)
    return -1;

    if (m_wndMDIClient.Attach(m_hWndMDIClient) == 0)
    {
        TRACE0("Failed to attach MDIClient.\n");
        return -1;      // fail to create
    }
  //.................
</PRE>}
<P>
<PRE>//----------------------------------------------------------------
// This function finds the CMDIChildWnd in the list of windows
// maintained by the application's MDIClient window following the
// one pointed to by the member variable m_pWndCurrentChild. If no
// further CMDIChildWnds are in the list, NULL is returned.
//----------------------------------------------------------------

</PRE>CMDIChildWnd* CMainFrame::GetNextMDIChildWnd()
{
<PRE>   if (!m_pWndCurrentChild)
     {
      // Get the first child window.
      m_pWndCurrentChild = m_wndMDIClient.GetWindow(GW_CHILD);
     }
   else
     {
      // Get the next child window in the list.
        m_pWndCurrentChild=
           (CMDIChildWnd*)m_pWndCurrentChild-&gt;GetWindow(GW_HWNDNEXT);
     }

   if (!m_pWndCurrentChild)
     {
      // No child windows exist in the MDIClient,
      // or you are at the end of the list. This check
      // will terminate any recursion.
      return NULL;
     }

  // Check the kind of window
    if (!m_pWndCurrentChild-&gt;GetWindow(GW_OWNER))
      {
        if (m_pWndCurrentChild-&gt;
                           IsKindOf(RUNTIME_CLASS(CMDIChildWnd)))
          {
                 // CMDIChildWnd or a derived class.
                 return (CMDIChildWnd*)m_pWndCurrentChild;
          }
        else
          {
                 // Window is foreign to the MFC framework.
                 // Check the next window in the list recursively.
                 return GetNextMDIChildWnd();
          }
      }
    else
      {
          // Title window associated with an iconized child window.
          // Recurse over the window manager's list of windows.
          return GetNextMDIChildWnd();
      }
</PRE>}
<P>
<PRE>//-----------------------------------------------------------------
// This function counts the number of CMDIChildWnd objects
// currently maintained by the MDIClient.
//-----------------------------------------------------------------

int CMainFrame::GetCountCMDIChildWnds()
</PRE>{
<PRE> int count = 0;

 CMDIChildWnd* pChild = GetNextMDIChildWnd();
 while (pChild)
  {
    count++;
    pChild = GetNextMDIChildWnd();
  }
 return count;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 1.10 2.00 2.10  2.50 2.51 2.52<BR>
3.10 4.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: MfcMisc<BR>
Keywords          : MfcMisc kbcode kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

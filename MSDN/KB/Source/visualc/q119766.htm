

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: VBX Controls Automatically Disabled in MFC Dialog Bar </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119766">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/08/23">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  After adding VBX controls to an MFC dialog bar object, they are automatically disabled when the program is executed.  CAUSE =====  Many VBX controls are implemented by subclassing the standard Windows button class. MFC CDialogBar objects automatica...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QAOE,QA7O,QAMN,QA4P,QA01,QAY5,QBXS,QAHV,QBVV,QAPN,QAPF,QABB,QADZ,QANS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: VBX Controls Automatically Disabled in MFC Dialog Bar</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119766</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbprg kbprb
<P>
<P>
 
The information in this article applies to:
<P>
<PRE>   The Microsoft Foundation Classes (MFC), included with:
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
After adding VBX controls to an MFC dialog bar object, they are
automatically disabled when the program is executed.
<P>
<P><h2>CAUSE</h2>
 
<P>
Many VBX controls are implemented by subclassing the standard Windows
button class. MFC CDialogBar objects automatically disable button controls
which do not implement a WM_COMMAND or ON_UPDATE_COMMAND_UI message
handler.
<P>
This is by design, but since ClassWizard does not provide support for
adding these handlers for VBX controls, it can sometimes be undesirable.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are two methods which can be used to work around this problem.
<P>
<P><h3>Method #1:</h3>
 
<P>
This solution requires you to manually add an ON_COMMAND_UPDATE_UI handler
for each VBX control that subclasses the standard Windows button class.
This handler will simply enable the control whenever it is called.
<P>
As mentioned above, ClassWizard does not provide support for adding
ON_UPDATE_COMMAND_UI handlers for VBX controls. It only allows you to
create VBX event notification functions.
<P>
Note: The ON_UPDATE_COMMAND_UI handler, in case of a CDialogBar would be
added to the parent of CDialogBar, which usually is the CMainFrame class
created by AppWizard.
<P>
To manually add an ON_UPDATE_COMMAND_UI handler, follow these steps:

<OL><P><LI>In the header (.h) file for the parent, go to the section marked with
   the special //{{AFX_MSG comments. Outside this block, add a handler
   prototype for each VBX that subclasses the standard Windows button
   class. For two VBX controls, the results should be similar to the
   following:
<P>
<PRE>// Generated message map functions
</PRE></OL>protected:
<PRE>     //{{AFX_MSG(CMainFrame)
     ...
     //}}AFX_MSG
     afx_msg void OnUpdateVBXControl1(CCmdUI* pCmdUI);
     afx_msg void OnUpdateVBXControl2(CCmdUI* pCmdUI);

</PRE><P><LI>In the implementation (.cpp) file for the parent, go to the message map
   section and add entries for each ON_UPDATE_COMMAND_UI handler. The
   results should look like this:
<P>
</OL>BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)
<PRE>     //{{AFX_MSG_MAP(CMainFrame)
     ...
     //}}AFX_MSG_MAP
     ON_UPDATE_COMMAND_UI(IDC_VBXCONTROL1, OnUpdateVBXControl1)
     ON_UPDATE_COMMAND_UI(IDC_VBXCONTROL2, OnUpdateVBXControl2)
</PRE></OL>END_MESSAGE_MAP()
<P>
<PRE>   In this example, IDC_VBXCONTROL1 and IDC_VBXCONTROL2 are the resource
   identifiers for the two VBX controls.

</PRE><P><LI>In the implementation (.cpp) file for the parent, write the functions
   which will handle updating the UI for these controls. The functions
   should look like:
<P>
<PRE>void CMainFrame::OnUpdateVBXControl1(CCmdUI* pCmdUI)
</PRE></OL>{
<PRE>     pCmdUI-&gt;Enable(TRUE);
</PRE>}
<P>
<PRE>void CMainFrame::OnUpdateVBXControl2(CCmdUI* pCmdUI)
</PRE>{
<PRE>     pCmdUI-&gt;Enable(TRUE);
</PRE>}

<OL><P><LI>Rebuild the project. You should now see that the VBX controls are
   enabled.
<P>
</OL><h3>Method #2:</h3>
 
<P>
This solution is much easier to implement, although it has the drawback of
preventing automatic disabling of non-VBX button controls on a dialog bar.
Thus, no button control will ever be disabled even if it doesn't implement
a WM_COMMAND or ON_UPDATE_COMMAND_UI handler.
<P>
The CControlBar class defines the OnUpdateCmdUI() pure virtual function,
which is overridden in the CDialogBar class to call
CWnd::UpdateDialogControls. This function is presented below:
<P>
<PRE>void CDialogBar::OnUpdateCmdUI(CFrameWnd* pTarget, BOOL
</PRE></OL>bDisableIfNoHndler)
{
<PRE>     UpdateDialogControls(pTarget, bDisableIfNoHndler);
</PRE>}
<P>
This is the function which is responsible for automatically disabling
button controls on a dialog bar.
<P>
You can prevent this function from being called by deriving a class from
CDialogBar and overriding this function so that it resembles the following:
<P>
<PRE>void CMyDerivedDialogBar::OnUpdateCmdUI(CFrameWnd* pTarget, BOOL
</PRE>bDisableIfNoHndler)
{
<PRE>     UpdateDialogControls(pTarget, FALSE);
</PRE>}
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To reproduce the problem add a VBX control to the dialog bar in the
CTRLBARS sample included as a MFC sample with Visual C++. To add the VBX
do the following:

<OL><P><LI>Edit the .rc file for the sample (ctrlbars.rc) using AppStudio.

<P><LI>Edit the IDD_VIEWSELECT dialog resource.

<P><LI>Add a Command3D button on to the dialog bar. If the Command3D control
   is not in the AppStudio control palette, the threed.vbx file needs to
   be installed in AppStudio. For more information on adding VBX controls
   to AppStudio, please refer to the section "To add a VBX control to the
   AppStudio control palette" in the AppStudio User's Guide.

<P><LI>Add EnableVBX() to CCtrlbarsApp::InitInstance() in ctrlbars.cpp.
<P>
</OL>Build and run the sample. The Command3D button shows up on the dialog bar
but is disabled. After adding the workarounds mentioned above, the button
is enabled.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Technical Note 31: Control Bars, under MFC Technotes included with Visual
C++.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.50 disabled gray grey dialog<BR>
bar<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcVBX<BR>
Keywords            : kb16bitonly<BR>
Technology          : kbMfc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Cannot Create an MFC Thread During DLL Startup </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142243">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/01/08">
<META NAME="Keywords" CONTENT="MfcDLL MFCThreadIss kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An MFC DLL that creates a new MFC thread during startup hangs when loaded by an application. This includes whenever a thread is created by calling AfxBeginThread or CWinThread::CreateThread inside:   - the InitInstance of a CWinApp-derived object i...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUQ,QAGI,QAY5,QDIV,QBV8,QBVV,QAB9,QAY0,QAIF,QBXR,QDNN,QABY,QAYV,QAIJ,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Cannot Create an MFC Thread During DLL Startup</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142243</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++, 32-bit Edition, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An MFC DLL that creates a new MFC thread during startup hangs when loaded
by an application. This includes whenever a thread is created by calling
AfxBeginThread or CWinThread::CreateThread inside:

<UL><LI>the InitInstance of a CWinApp-derived object in a Regular DLL.
<LI>a supplied DllMain or RawDllMain function in a Regular DLL.
<LI>a supplied DllMain or RawDllMain function in an Extension DLL.
<P>
</UL><h2>CAUSE</h2>
 
<P>
For Regular DLLs, which have a CWinApp-derived object, the
CWinApp::InitInstance override is called from MFC's supplied DllMain when a
process is attaching to the DLL. That is, DllMain is entered with a Reason
For Call of DLL_PROCESS_ATTACH, and in handling this, MFC calls in to
InitInstance before cleaning up and leaving DllMain.
<P>
For Extension DLLs, the startup of the DLL is the same, except Extension
DLLs do not have a CWinApp-derived object and therefore have no
InitInstance.
<P>
Whenever new threads are created that use code in the DLL, DllMain is
called with a Reason For Call of DLL_THREAD_ATTACH to announce to the DLL
that a new thread is attaching to it. If a new thread is created in the
InitInstance of an MFC Regular DLL or in the DllMain of any MFC DLL during
DLL_PROCESS_ATTACH, this second thread will attempt to re-enter the
DllMain, which has not yet been exited from in an effort to announce
DLL_THREAD_ATTACH.
<P>
DllMain, however, is not re-entrant. That means that the second thread will
not start executing until the initial creating thread has finished its work
in InitInstance, returned to and left DllMain.
<P>
In versions of MFC included with 32-bit Visual C++ versions 2.2 and
earlier, MFC allowed threads to be created during startup, and usually DLLs
that did this would work acceptably. The second thread would get created
without problem but would not start executing until the first thread left
DllMain. However, it has never been a good idea to create threads in
DllMain during DLL_PROCESS_ATTACH.
<P>
As of MFC 4.0, the CWinThread::CreateThread function, which is called by
AfxBeginThread, now waits on the created thread to start up and initialize
MFC specific data before it returns control to the calling thread. Because
the second thread is waiting on the first thread to leave DllMain, both
threads crash headlong into deadlock and the application hangs.
<P>
Note that this information is equally valid for the RawDllMain function.
Moreover, MFC DLLs should not use a RawDllMain function at all.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Regular DLLs that create threads should only do so in functions exported
from the DLL and called by client applications. Furthermore, no MFC DLL --
neither Extension nor Regular -- should create an MFC thread in the DllMain
or RawDllMain function. This ensures that the thread will not be created in
the middle of any critical startup code.
<P>
The recommended solution for MFC DLLs that need to create a thread when the
DLL starts is to add a specific exported initialization function and create
the thread in it. Applications that use the DLL would need to call this
function sometime during startup, most likely during the application's
InitInstance if it uses MFC. Or, if the application is loading the DLL
explicitly, the application should call the initialization function
immediately after the call to load the library.
<P>
The practice of exporting an initialization function for a DLL is not
uncommon. Nevertheless, there may be situations where DLLs created with
earlier versions of MFC are being ported but the client application cannot
be changed to include a call to an initialization function. The alternative
to an initialization function is to create the thread in one of the pre-
existing exported functions. Any of the DLL's exported functions that
require a running thread should be responsible for first checking to see if
that thread exists and then creating it if it does not.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.0 InitInstance AfxBeginThread<BR>
CreateThread CWinThread DllMain RawDllMain<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcDLL MfcThreadIss<BR>
Keywords          : MfcDLL MFCThreadIss kbprb kbprg<BR>
Technology        : kbMfc<BR>
Version           : 4.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

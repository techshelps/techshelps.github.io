

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Workaround for Converting a Float/Double to a String </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q57244 ">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1989/12/28">
<META NAME="Keywords" CONTENT="CRTIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The gcvt() function returns an exponential number in the string even if the number fits in the specified precision when the number is of the form 0.0x, where x is any digit(s). Because of this behavior with the gcvt() function, floating-point numbe...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHH,QAG8,QAKC,QBC6,QBFY,QATX,QAFO,QACJ,QAGN,QAY5,QAWN,QBC9,QBC8,QAUD,QAR4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Workaround for Converting a Float/Double to a String</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q57244 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C/C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C/C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0,
<P><PRE>     5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The gcvt() function returns an exponential number in the string even
if the number fits in the specified precision when the number is of
the form 0.0x, where x is any digit(s). Because of this behavior with
the gcvt() function, floating-point numbers cannot be converted to a
string.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Another function that converts a floating-point number to a string is
fcvt(). Unfortunately, fcvt() does not do all the conversion for you
because it leaves out both the decimal point and the sign of the
number.
<P>
You can also use the sprintf() or printf() function with the "%lf"
format specifier to obtain the correct results. However, if you do not
want to use any printf() constructs, supporting code is needed to
completely convert the floating-point number to a string. The
following program shows one possible way this can be done, and the
printf() statements can be replaced by puts() statements:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   #include &lt;stdio.h&gt;
   #include &lt;stdlib.h&gt;
   #include &lt;malloc.h&gt;
   #include &lt;string.h&gt;

   #define PRECISION   8

   char *double_to_char (double) ;

   char *temp2 ;

   void main (void)
   {
      char buf[32];

      temp2 = double_to_char ((double) 0.0004567891) ;
      printf ("temp = %s\n", temp2) ;
      free (temp2) ;

      gcvt ((double) 0.0004567891, PRECISION, buf) ;
      printf ("temp = %s\n", buf) ;

      temp2 = double_to_char ((double) 123.564) ;
      printf ("temp = %s\n", temp2) ;
      free (temp2) ;

      temp2 = double_to_char ((double) -43.7864383846738) ;
      printf ("temp = %s", temp2) ;
      free (temp2) ;
   }


   /*  Translates a double to an ASCIIZ string. */

   char *double_to_char (double number)
   {
      char *buffer,
           *temp ;

      int  decimal_spot,
           sign,
           count,
           current_location = 0 ;

      temp = fcvt (number, PRECISION, &amp;decimal_spot, &amp;sign) ;

      if (strlen (temp) &gt; PRECISION)
         buffer = (char *) malloc (strlen (temp) + 3) ;
      else
         buffer = (char *) malloc (PRECISION + 3) ;

      if (buffer == NULL)
      {
         printf ("Memory allocating attempt has failed in"
                 "'double_to_char'\n") ;
         exit (-1) ;
      }

   /* Add negative sign if required. */

      if (sign)
         buffer [current_location++] = '-' ;

   /* Place decimal point in the correct location. */

      if (decimal_spot &gt; 0)
      {
         strncpy (&amp;buffer [current_location], temp, decimal_spot) ;
         buffer [decimal_spot + current_location] = '.' ;
         strcpy (&amp;buffer [decimal_spot + current_location + 1],
                         &amp;temp [decimal_spot]) ;
      }
      else
      {
         buffer [current_location] = '.' ;
         for(count = current_location;
                count&lt;abs(decimal_spot)+current_location; count++)
            buffer [count + 1] = '0' ;
         strcpy (&amp;buffer [count + 1], temp) ;
      }

      return (buffer) ;
   }
</PRE> 
<PRE>Keywords          : CRTIss kbfasttip
Version           : MS- DOS:5.1,6.0,6.00a,6.00ax,7.0;WIN3X:1.0,1.5;WINNT:1.0,2.0,2.1,4.0,5.0;
Platform          : MS-DOS NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

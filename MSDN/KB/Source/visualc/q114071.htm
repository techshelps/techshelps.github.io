

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: /Ow Generates Bad Code When Using the </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114071">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/04/24">
<META NAME="Keywords" CONTENT="CLIss kb16bitonly kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When using the /Ow and /AL compiler switches to compile code that uses the left shift operator (                                             variable, the compiler does not generate the proper instructions when the address of that variable is later...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAH4,QDKW,QAYL,QAMN,QAR4,QACI,QBXT,QA5V,QA26,QAOT,QANY,QAMB,QAKM,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: /Ow Generates Bad Code When Using the</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114071</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P><PRE>    - Microsoft Visual C++ for Windows, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using the /Ow and /AL compiler switches to compile code that uses
the left shift operator (&lt;&lt;) on an address prior to assigning it to a
variable, the compiler does not generate the proper instructions when
the address of that variable is later assigned to another variable.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To avoid the problem, either do not use the left shift operator in the
address assignment, or disable the /Ow optimization. This can be done by
either not using the /Ow option on the command line, or by using #pragma
optimize to disable the optimization in the source file. The comments in
the sample below demonstrate using #pragma optimize statements to work
around the problem.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in C/C++ for MS-DOS version
8.0. This problem was corrected in C/C++ for MS-DOS version 8.0c, included
with Visual C++ for Windows, version 1.5.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below can be used to reproduce the problem. When using /Ow
and the &lt;&lt; operator, the following incomplete assembly instructions are
generated for the last line of code in the example:
<P>
; Line 25
<PRE>     mov     WORD PTR es:16,cx
     mov     WORD PTR es:18,es

</PRE>When either the /Ow optimization or the left shift operator (&lt;&lt;) is
removed, the compiler correctly generates the following proper
instructions:
<P>
; Line 25
<PRE>     lea     cx,WORD PTR es:4
     mov     WORD PTR es:16,cx
     mov     WORD PTR es:18,es

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /c /AL /Ow
*/

</PRE>typedef struct node {
<PRE>    long data;
    struct node *next;
    struct node *prev;
</PRE>} NODE;
<P>
typedef struct list {
<PRE>    struct list *next;
    NODE head;
    NODE *tail;
</PRE>} LIST;
<P>
<PRE>// Uncomment for work around
// #pragma optimize ("w", off)

void Init( unsigned long addr )
</PRE>{
<PRE>    LIST *pList;

    pList = (LIST *)(addr &lt;&lt; 16);
    pList-&gt;next = (void *)0L;
    pList-&gt;head.data = 0L;
    pList-&gt;head.next = (void *)0L;
    pList-&gt;head.prev = (void *)0L;
    pList-&gt;tail = &amp;pList-&gt;head;
</PRE>}
<P>
<PRE>// Uncomment for work around
// #pragma optimize ("", on)
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 8.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords          : CLIss kb16bitonly kbbuglist kbfixlist kbtool<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Using the MFC Database Classes in Console Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152696">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/06/20">
<META NAME="Keywords" CONTENT="MfcDAO MfcDatabase kbprg kbusage">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The MFC database classes found in Visual C++ versions 1.x, 2.x, 4.0, and 4.1 were not written to be used in a console application. However, with some modification, you can use the 32-bit database classes in a console application. The techniques pre...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QABO,QA9E,QAPN,QAZV,QAH4,QAJH,QBVV,QAIF,QA7H,QA5E,QAW6,QAV1,QAV0,QANG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Using the MFC Database Classes in Console Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152696</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0,
<P><PRE>     4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The MFC database classes found in Visual C++ versions 1.x, 2.x, 4.0, and
4.1 were not written to be used in a console application. However, with
some modification, you can use the 32-bit database classes in a console
application. The techniques presented here apply to both the MFC ODBC and
MFC DAO classes.
<P>
Starting with Visual C++ 4.2, the MFC ODBC classes were rendered safe for
use within console applications. Many of the internal dependencies listed
below are no longer present in the 4.2 and later MFC ODBC class libraries.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Both the MFC ODBC and MFC DAO classes have dependencies upon non-Database
MFC classes, particularly with the existence of a global CWinApp-derived
object. The following list presents these dependencies along with
suggestions for working around them.
<P>
For either MFC ODBC or MFC DAO, it is very important to test your code not
only for successful execution, but for graceful recovery on unexpected
conditions (such as the database not being in an expected path). The
majority of the "dependencies" these classes have on MFC come from error
recovery and reporting code within the database classes.
<P>
It is also important to remember that the Visual C++ MFC database classes
released through Version 4.1 were not intended or tested for use in a
console application.
<P>
<P><h3>Both MFC ODBC and MFC DAO Classes</h3>
 

<UL><LI>Exception Handling
<P>
   Microsoft recommends that you wrap exception handling code around each
   of your calls to a MFC Database class method.

<LI>Exception Handling and Resource Handles
<P>
   Internally, MFC ODBC uses AfxThrowDBException to throw exceptions, and
   MFC DAO uses AfxThrowDaoException() to throw exceptions. Both functions
   can result in a call to CString::LoadString(), which requires a resource
   handle for the application. In addition, the MFC DAO method
   CDaoException::GetErrorMessage(), used to get more information about a
   DAO error, also calls CString::LoadString().
<P>
   Within CString::LoadString() is a call to AfxLoadString(), which calls
   AfxGetResourceHandle(), which expects a valid resource handle to be
   defined for the EXE.
<P>
   To work around this, define a valid resource handle for your application
   as shown in this code:
<P>
<P><PRE>      hMod = ::GetModuleHandle( "MyApp.Exe" );
      ASSERT( hMod );
      AfxSetResourceHandle( hMod );
</PRE><P>
</UL><h3>MFC ODBC Classes</h3>
 

<UL><LI>Use of AfxGetApp() in the MFC ODBC Classes
<P>
   In synchronous mode when an error is encountered, CDatabase::Open()
   attempts to get a pointer to a global CWinApp-derived object and assert
   if it is not found. To avoid this, you can:
<P>
<P><PRE>    - Invoke CDatabase::SetSynchronousMode( TRUE ) to disable asynchronous
      processing.
</PRE><P>
<P><PRE>      -or-
</PRE><P>
<P><PRE>    - Create a global instance of a CWinApp-derived class in your
      application similar to the one shown below. This will give you
      a global CWinApp object in your console application without
      actually invoking MFC in any way.
</PRE><P>
<P><PRE>      class CMyApp : public CWinApp
      {
      public:
<PRE></PRE>          virtual BOOL InitInstance( ) { return FALSE };
      };

      CMyApp theApp;

   This dependency was removed in Visual C++ 4.2. Use of Synchronous
   mode was also removed, as was the OnWaitForDataSource and
   InWaitForDataSource methods for both CDatabase and CRecordset.

</PRE><LI>Avoiding the Need for a Valid Windows Handle
<P>
   The CDatabase::Open() method also attempts to acquire a valid Windows
   handle to pass to SQLDriverConnect. If the application using the classes
   can't provide one, the GetDesktopWindow method is called. This handle is
   used by the ODBC API call SQLDriverConnect as a parent handle to create
   a dialog if the database connection information provided is incomplete
   or inaccurate.
<P>
   It is possible to prevent this dialog from being displayed. For
   information on how to do it, please see the following article in the
   Microsoft Knowledge Base:
<P>
   ARTICLE-ID: <B><A HREF="../VISUALC/Q150552.htm">Q150552</A></B>
<PRE>   TITLE     : How to Avoid ODBC Login Dialog When Using MFC

</PRE></UL><h3>MFC DAO Classes</h3>
 
<P>
The MFC DAO classes are relatively independent of the MFC library. However
here are some considerations to keep in mind when using them in a console
application:

<UL><LI>Use of AfxGetApp() in the MFC DAO Classes
<P>
   The initialization of a CDaoWorkspace object --  whether explicitly
   or implicitly by way of creation of a CDaoDatabase or CDaoRecordset
   object -- forces a call to AfxDaoInit(). AfxDaoInit() attempts to
   ensure that DAO is properly terminated by setting the m_lpfnDaoTerm
   member of CWinApp to point to the AfxDaoTerm() function.
<P>
   If you do not have a global instance of a CWinApp-derived class, you
   need to call AfxDaoTerm() yourself to terminate DAO properly. For more
   information on the use of AfxDaoTerm(), please see the following article
   in the Microsoft Knowledge Base:
<P>
   ARTICLE-ID:  <B><A HREF="../VISUALC/Q145992.htm">Q145992</A></B>
<PRE>   TITLE     :  PRB: Global MFC DAO Objects Cause Assertions
</PRE></UL> 
<PRE>Keywords          : MfcDAO MfcDatabase kbprg kbusage
Technology        : kbMfc
Version           : 2.0 2.1 2.2 4.0 4.1 4.2 5.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

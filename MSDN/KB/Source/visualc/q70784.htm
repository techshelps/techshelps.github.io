

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Data May Be Lost During fflush() If Write Is Unsuccessful </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q70784 ">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1991/03/28">
<META NAME="Keywords" CONTENT="CRTIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Because of the way the fflush() function clears the stream buffer, data may be lost after a failed write. This may become apparent when setting up a critical error handler for a file that uses stream I/O [for example, fopen(), fclose(), fwrite(), a...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAA1,QA8T,QAY5,QAGI,QAYY,QDI2,QAW5,QAUD,QAEF,QAB4,QAAP,QDIV,QAKP,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Data May Be Lost During fflush() If Write Is Unsuccessful</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q70784 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Because of the way the fflush() function clears the stream buffer,
data may be lost after a failed write. This may become apparent when
setting up a critical error handler for a file that uses stream I/O
[for example, fopen(), fclose(), fwrite(), and so on]. To work around
this situation, turn buffering off [with the setvbuf() function] or
use low-level I/O routines instead [for example, open(), close(),
write(), and so on].
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When using stream I/O, input and output is buffered. This can provide
significant performance benefits because data is read and written in
larger "chunks." The file buffer is 512 bytes by default but can be
adjusted with the setvbuf() function.
<P>
When fflush() is called, either explicitly or implicitly through
fclose(), the data still in the stream is written to the file by an
implicit call to write(). Once that is done, the current location
pointer is reset to the start of the stream buffer and the buffer's
character count is set to zero.  Unfortunately, this occurs whether or
not the write() was successful.
<P>
In an environment where a critical error handler has been installed,
the application will usually try to rectify the error (that is,
request that the user close the disk drive door, turn on the printer,
insert a formatted disk, and so on), and then retry the operation. For
example:
<P>
<PRE>   IOStatus = FAIL;
   while(IOStatus == FAIL)
   {
      fflush(FilePtr);
      IOStatus = CriticalErrorChk();
   }

</PRE>However, the second time fflush() is called, the stream has already
been cleared of data and the data is effectively "lost." Calling
setvbuf() with the mode-parameter of _IONBF eliminates this problem by
unbuffering the stream, but file I/O will be slower.
<P>
Note that this fflush() behavior is compatible with the ANSI standard.
As required by ANSI, fflush() does return EOF to indicate there was a
problem with flushing the file.
<P>
The Help for fflush() in Microsoft C/C++ versions 7.0 and Visual C++ gives
the following information:
<P>
<PRE>   Note: If fflush returns EOF, data may have been lost because of a
   failed write. When setting up a critical error handler, it is
   safest to turn buffering off with the setvbuf function or to use
   low-level I/O routines such as _open, _close, and _write instead of
   the stream I/O functions.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: _harderr _hardrtn _hardresume<BR>
Keywords          : CRTIss kbfasttip<BR>
Version           : MS- DOS:5.1,6.0,6.00a,6.00ax,7.0;WIN3X:1.0,1.5;WINNT:1.0,2.0,2.1,4.0,5.0;<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: COleDateTime::Format Throws a COleException(scode=E_FAIL) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167169">
<META NAME="KBModify" CONTENT="1997/08/07">
<META NAME="KBCreate" CONTENT="1997/04/18">
<META NAME="Keywords" CONTENT="MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you attempt to use COleDateTime(DWORD, LCID) to extract the Date or Time value, an exception with scode = E_FAIL occurs.  CAUSE =====  A bug in the Operating System causes this problem.  RESOLUTION  This problem only occurs if the LCID argumen...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBSU,QAH4,QBXS,QBE7,QBE6,QABA,QAPN,QBTX,QABO,QDNG,QBAO,QACE,QAKP,QA4Q,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: COleDateTime::Format Throws a COleException(scode=E_FAIL)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167169</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.0a, 4.1, 4.2,
<P><PRE>     4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you attempt to use COleDateTime(DWORD, LCID) to extract the Date or
Time value, an exception with scode = E_FAIL occurs.
<P>
<P><h2>CAUSE</h2>
 
<P>
A bug in the Operating System causes this problem.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
This problem only occurs if the LCID argument in the Format function is set
to anything other than English (United States), or if the Regional Settings
in WinNT/Win95 Control Panel is set to something other than
English (United States).
<P>
You can workaround the problem by using the "%x" or "%X" formatting codes.
The "%x" gives the Date representation and "%X" gives the Time
representation. For example:
<P>
<PRE>   CString str = dt.Format("%x");

</PRE>-or-
<P>
<PRE>   CString str = dt.Format("%X");

</PRE>However, they only give the Date format in the US style.
<P>
To get the date in the user-default locale, use the code in the MORE
INFORMATION section of this article. Wrap the call to Format as shown
below:
<P>
<PRE>   ...
   #include "locales.h"
   ...

      CString str;
      {
         CSetLocale l(LC_TIME);
         str = dt.Format("%x");
         str = dt.Format("%X");
      }

   ...

</PRE>If you want the date in a particular LCID, then use the following to
construct the CSetLocale object:
<P>
<PRE>   LCID LCIDVALUE = &lt;set it to the required value&gt;;
   CSetLocale l(LC_TIME, LCIDVALUE);

</PRE>This code makes sure that the runtime locale is set to the correct locale
before the call to Format is made. The locale is reset to the previous
locale once the CSetLocale object is destroyed.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft is researching this problem and will post new information here in
the Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
This sample code for class CSetLocale can be used to set the runtime locale
to the user-default locale or to any other locale using LCID. The class
resets the runtime locale back to the original locale when the object is
destroyed. The first argument to the constructor takes the same values as
the category argument to setlocale function. The second argument is any
valid LCID.
<P>
<PRE>   // Locales.h: interface for the CSetLocale class.
   //
   //////////////////////////////////////////////////////////////////////

   #if  \
   !defined(AFX_LOCALES_H__C6C7DD22_B292_11D0_89B4_00AA00B92B2E__INCLUDED_)
   #define AFX_LOCALES_H__C6C7DD22_B292_11D0_89B4_00AA00B92B2E__INCLUDED_

   #include &lt;locale.h&gt;

   #if _MSC_VER &gt;= 1000
   #pragma once
   #endif // _MSC_VER &gt;= 1000

   class CSetLocale
   {
   private:
      int m_category;
      CString m_lastLocale;
   public:
      CSetLocale(int category = LC_ALL, LCID lcid = LOCALE_USER_DEFAULT);
      virtual ~CSetLocale();
   };

   #endif

   // Locales.cpp: implementation of the CSetLocale class.
   //
   //////////////////////////////////////////////////////////////////////

   #include "stdafx.h"
   #include "Locales.h"

   #ifdef _DEBUG
   #undef THIS_FILE
   static char THIS_FILE[]=__FILE__;
   #define new DEBUG_NEW
   #endif

   //////////////////////////////////////////////////////////////////////
   // Construction/Destruction
   //////////////////////////////////////////////////////////////////////

   CSetLocale::CSetLocale(int category, LCID lcid) : m_category(category)
   {
      TCHAR* buf;

      CString locale;

      m_lastLocale = CString(_tsetlocale(m_category, NULL));

      // get the language

      int len = GetLocaleInfo(lcid, LOCALE_SENGLANGUAGE , NULL, 0);

      buf = new TCHAR[len + 1];

      if (!buf)
         return;
      buf[len] = NULL;
      len = GetLocaleInfo(lcid, LOCALE_SENGLANGUAGE , buf, len);
      locale = CString(buf) + _T("_");
      delete []buf;

      // Get the country.
      len = GetLocaleInfo(lcid,  LOCALE_SENGCOUNTRY, NULL, 0);
      buf = new TCHAR[len + 1];
      if (!buf)
         return;
      buf[len] = NULL;
      len = GetLocaleInfo(lcid,  LOCALE_SENGCOUNTRY, buf, len);
      locale +=buf;
      delete []buf;

      _tsetlocale(m_category, locale);
   }

   CSetLocale::~CSetLocale()
   {
      _tsetlocale(m_category, m_lastLocale);
   }

</PRE><h3>Steps to Reproduce Problem</h3>
 

<OL><P><LI>In the Control Panel, double-click the Regional Settings icon to open
   the Regional Setting dialog box.

<P><LI>In the Regional Settings dialog box, select a country other than English
   (United States) in the Regional Settings tab.

<P><LI>Create a default MFC AppWizard application.

<P><LI>Add the following code to any function:
<P>
<P><PRE>      COleDateTime today = COleDateTime::GetCurrentTime();
      CString m_Date = today.Format(VAR_DATEVALUEONLY);
      TRACE("Date : %s\n", (LPCTSTR)m_Date);
</PRE>
<P><LI>Set a breakpoint on the function above and you will see that
   this throws a COleException error with an SCODE of E_FAIL($80004005).
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: COleDateTime Format<BR>
Keywords          : MfcOLE<BR>
Technology        : kbMfc kbole<BR>
Version           : 4.00 4.00a 4.10 4.20 4.20b 5.00<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

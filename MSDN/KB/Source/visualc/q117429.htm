

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use #define Constants in printf() Format Strings </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117429">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1994/06/28">
<META NAME="Keywords" CONTENT="CRTIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using #define constants to specify precision or width directly within the printf() format string does not work as expected. The constant identifier is printed literally.  For example, at times, it is convenient to define a maximum output precision ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAKJ,QAH4,QBE7,QBE6,QAKD,QBFY,QABH,QADK,QAOX,QDNG,QBWN,QDOQ,QACJ,QDMW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use #define Constants in printf() Format Strings</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117429</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Using #define constants to specify precision or width directly within
the printf() format string does not work as expected. The constant
identifier is printed literally.
<P>
For example, at times, it is convenient to define a maximum output
precision or width for printing or scanning values within a given program.
The following printf() statement truncates the output string at 20
characters:
<P>
<PRE>   printf( "This is the string: %.20s\n",szBuf );

</PRE>However, the following statement:
<P>
<PRE>   #define MAXSIZE 20
   printf( "This is the string: %.MAXSIZEs\n",szBuf );

</PRE>prints the message "This is the string: MAXSIZEs".
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A couple of steps are needed to get the behavior you want:
<P>
<PRE>   #define MAXSIZE 20
   #define STRX(y) #y            // "Stringizes" parameter y.
   #define STR(x) STRX(x)        //  Evaluates x

   printf( "This is the string: %."STR(MAXSIZE)"s\n", szBuf );

</PRE>First, the constant is evaluated so that it does not come through as the
literal constant identifier name ("MAXSIZE"). Then, the STR macro
causes MAXSIZE to be evaluated. Finally, the STRX macro uses the # operator
to cause the value to be placed in double quotes and concatenated to the
format string.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Below is a simple program that includes the code described above.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile option needed: none
    */

   #include &lt;stdio.h&gt;

   #define MAXSIZE 20
   #define STRX(y) #y            // "Stringizes" parameter y.
   #define STR(x) STRX(x)        //  Evaluates x

   void main( void )
   {
      char szBuf[17] = { "Howdy, stranger!" };


      printf( "This is the string: %.20s\n",szBuf );

      printf( "This is the string: %.MAXSIZEs\n",szBuf );
      printf( "This is the string: %."STR(MAXSIZE)"s\n", szBuf );
   }
</PRE> 
<PRE>Keywords          : CRTIss
Version           : MS-DOS:7.0;WIN3X:1.0,1.5;WINNT:1.0,2.0,2.1,4.0,5.0;
Platform          : MS-DOS NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

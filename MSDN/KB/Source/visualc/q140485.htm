

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Exporting PASCAL-Like Symbols in 32-bit DLLs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140485">
<META NAME="KBModify" CONTENT="1997/12/17">
<META NAME="KBCreate" CONTENT="1995/11/30">
<META NAME="Keywords" CONTENT="CLIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  There is no _pascal keyword in the 32-bit editions of Visual C++. Instead the Windef.h header file has PASCAL defined as __stdcall. This creates the correct style calling convention for the function (the called function cleans up the stack) but dec...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAUJ,QARM,QA3P,QAY5,QAGI,QAB9,QA2P,QBV8,QBFY,QBC7,QA4Q,QA5F,QAMA,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Exporting PASCAL-Like Symbols in 32-bit DLLs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140485</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 2.0, 2.1, 2.2, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There is no _pascal keyword in the 32-bit editions of Visual C++. Instead
the Windef.h header file has PASCAL defined as __stdcall. This creates the
correct style calling convention for the function (the called function
cleans up the stack) but decorates the function name differently. So, when
__declspec(dllexport) is used (in a .dll file, for example), the decorated
name is exported instead of the desired PASCAL style name, which is
undecorated and all uppercase.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
PASCAL name decoration is simply the undecorated symbol name in uppercase
letters. __stdcall name decoration prefixes the symbol name with an
underscore (_) and appends the symbol with an at sign (@) character
followed by the number of bytes in the argument list (the required stack
space). So, the function when declared as:
<P>
<PRE>   int  __stdcall func (int a, double b)

</PRE>is decorated as:
<P>
<PRE>   _func@12

</PRE>The C calling convention (__cdecl) decorates the name as _func. Whereas the
desired PASCAL style name is FUNC.
<P>
To get the decorated name set the Generate Mapfile option in the Linker
General category setting.
<P>
Use of __declspec(dllexport) does the following:

<UL><LI>If the function is exported with C calling convention (_cdecl), it
   strips the leading underscore (_) when the name is exported.

<LI>If the function being exported does not use the C calling convention
   (for example, __stdcall ), it exports the decorated name.
<P>
</UL>So to simulate PASCAL name decoration and calling conventions, you must
have the "Called Function stack clean-up" provided by using __stdcall
and the undecorated uppercase name.
<P>
Because there is no way to override who does the stack clean up, you must
use __stdcall. To undecorate names with __stdcall, you must specify them
by using aliases in the EXPORTS section of the .def file. This is shown
below for the following function declaration:
<P>
<PRE>   int  __stdcall MyFunc (int a, double b);
   void __stdcall InitCode (void);

</PRE>In the .def file:
<P>
<PRE>   EXPORTS
      MYFUNC=_MyFunc@12
      INITCODE=_InitCode@0

</PRE>For .dll files to be called by programs written in the 32-bit versions of
Visual Basic (versions 4.0 and above), the alias technique shown in this
article is needed in the .def file. If alias is done in the Visual Basic
program, use of aliasing in the .def file is not necessary. It can be done
on the Visual Basic program by adding an Alias clause to the Declare
statement as shown here:
<P>
<PRE>Declare Function MyFunc Lib "dlllibname" Alias "_MyFunc@12"  (...)
   As Integer

</PRE>The complete syntax for the Visual Basic Declare statement follows:
<P>
<PRE>   [Public | Private ] Declare Function name Lib
   "libname" [Alias "aliasname" ] [([arglist])][As type]

</PRE><h3>References</h3>
 
<P>
For more information, query the MSDN compact disc using these keywords:
<P>
<PRE>   VB alias DLL

</PRE>NOTE: A very good discussion (with example code) of calling a C .dll file
from Visual Basic can be found in the file Vb4dll.txt in the Visual Basic
directory. If you can not locate the Vb4dll.txt file, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q150705.htm">Q150705</A></B>
   TITLE     : SAMPLE: Using VB4DLL.txt File to Develop .dlls for Visual
               Basic
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 9.00 9.10 PASCAL declspec VB DLL _stdcall<BR>
Keywords          : CLIss<BR>
Version           : WINNT:2.0,2.1,2.2,4.0,5.0;<BR>
Platform          : winnt<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

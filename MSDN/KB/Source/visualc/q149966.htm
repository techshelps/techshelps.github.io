

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: istream::operator&gt;&gt;(long&amp;) Does Not Clear errno </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149966">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1996/04/17">
<META NAME="Keywords" CONTENT="CRTIss kbprg vcbuglist400 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  If an error occurs when extracting long values from the stream, the error cannot be cleared and other streams also report errors.  CAUSE =====  When the istream::operator&gt;&gt;(long* n) encounters an error, it sets ios::failbit, but does not clear errn...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADR,QAJX,QAEF,QDKW,QAAP,QAB4,QAKP,QBVV,QAI4,QDIX,QAKZ,QBXS,QBFY,QATX,QANY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: istream::operator&gt;&gt;(long&amp;) Does Not Clear errno</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149966</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft Visual C++ for Windows, version 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0,
<P><PRE>     4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If an error occurs when extracting long values from the stream, the
error cannot be cleared and other streams also report errors.
<P>
<P><h2>CAUSE</h2>
 
<P>
When the istream::operator&gt;&gt;(long&amp; n) encounters an error, it sets
ios::failbit, but does not clear errno. This causes the stream to continue
to fail even after ios::clear is called. It also causes other streams to
fail.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
To work around the bug, set errno to zero in addition to completing normal
stream error checking.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
   The following sample code demonstrates only the bug and workaround, not
   normal error checking.

   Compile options needed: none
   */

   #include    &lt;iostream.h&gt;
   #include    &lt;strstrea.h&gt;
   #include    &lt;stdio.h&gt;
   #include    &lt;stdlib.h&gt;
   #include    &lt;string.h&gt;
   #define     MAX_STRING_LEN      100
   //#define     CLEAR_ERRNO    // uncomment to work around bug

   void main()
   {
       char    dc1a, dc1b, dc2a, dc2b;
       long    input1a=0, input1b=0;
       long    input2a=0, input2b=0;
       char    szTest1[MAX_STRING_LEN];
       char    szTest2[MAX_STRING_LEN];

       strcpy(szTest1,"a2147483648z50"); //
       strcpy(szTest2,"a500z50");

       istrstream    StrStream1(szTest1); //String stream 1
       istrstream    StrStream2(szTest2); //String stream 2

       //    The following command will fail since value input to
       //    input1a=2147483648 is
       //    bigger that maximum value long can hold.

       StrStream1 &gt;&gt; dc1a &gt;&gt; input1a &gt;&gt; dc1b &gt;&gt; input1b;
   #ifdef    CLEAR_ERRNO
       errno = 0;
   #endif
       StrStream2 &gt;&gt; dc2a &gt;&gt; input2a &gt;&gt; dc2b &gt;&gt; input2b;

       cout &lt;&lt; "\n    dc1a: " &lt;&lt; dc1a
            &lt;&lt; "\n input1a: " &lt;&lt; input1a
            &lt;&lt; "\n    dc1b: " &lt;&lt; dc1b
            &lt;&lt; "\n input1b: " &lt;&lt; input1b &lt;&lt; endl;

       cout &lt;&lt; "\n    dc2a: " &lt;&lt; dc2a
            &lt;&lt; "\n input2a: " &lt;&lt; input2a
            &lt;&lt; "\n    dc2b: " &lt;&lt; dc2b
            &lt;&lt; "\n input2b: " &lt;&lt; input2b &lt;&lt; endl;

       cout &lt;&lt; "\n\nPress any key to continue..." &lt;&lt; endl;
       dc1a = getchar();
   }

   /*
   The output is:
       dc1a: a
    input1a: 2147483647
       dc1b:
    input1b: 0

       dc2a: a
    input2a: 500
       dc2b:
    input2b: 0

   If CLEAR_ERRNO is set, the output is as expected:
       dc1a: a
    input1a: 2147483647
       dc1b:
    input1b: 0

       dc2a: a
    input2a: 500
       dc2b: z
    input2b: 50
   */
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CRTIss kbprg vcbuglist400 vcbuglist500<BR>
Version             : 1.52 2.0 2.1 2.2 4.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Implementing a Custom Property Showing a FileOpen Dialog </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166768">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1997/04/10">
<META NAME="Keywords" CONTENT="MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article demonstrates a way to show the FileOpen dialog box for a custom property in an ActiveX control. The custom property is implemented by using per-property browsing in an ActiveX control. For information on implementing such a custom prop...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAB5,QA01,QBWC,QA7O,QAOE,QAMN,QAUD,QBWA,QAHV,QA2O,QABA,QA6A,QA2S,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Implementing a Custom Property Showing a FileOpen Dialog</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166768</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 4.2, 4.2b, 5.0
   on the following platform:
   - x86
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates a way to show the FileOpen dialog box for a
custom property in an ActiveX control. The custom property is implemented
by using per-property browsing in an ActiveX control. For information on
implementing such a custom property, please see the following article in
the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q140592.htm">Q140592</A></B>
   TITLE     : HOWTO: Implementing Per-Property Browsing for a Custom
               Property

</PRE>When the custom property is selected for editing in a design environment
such as Microsoft Visual Basic, an ellipsis button (or three-dots button)
will be shown on the Properties window for the property. Clicking the
ellipsis button in the Properties window displays a FileOpen dialog box
associated with the property.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Because the Windows FileOpen common dialog box is not a COM object, it
doesn't have a CLSID associated with it. However, if you follow the
instructions in Knowledge Base article <B><A HREF="../VISUALC/Q140592.htm">Q140592</A></B> to add a custom property to
an ActiveX control, the MFC framework calls OnMapPropertyToPage() to obtain
the CLSID of a property page that implements editing of the specified
property. To achieve the goal of showing the FileOpen dialog box, create a
"dummy" property page and return its CLSID in the OnMapPropertyToPage()
function. Then, using ClassWizard, add an OnInitDialog() function to the
"dummy" property page class and add the following code:
<P>
<PRE>   // CTestPropPage is the classname for the "dummy" property page.
   BOOL CTestPropPage::OnInitDialog()
   {
     COlePropertyPage::OnInitDialog();

     // Display the FileOpen dialog box because the property page is not
     // visible yet.
     CFileDialog dlg(TRUE);
     int nRet = dlg.DoModal();

     if(nRet == IDOK)
     {
       // Do something with the selected filename. For illustration
       // purposes assume that the control associated with this property
       // page has a property named FileName which is of type BSTR. The
       // following code will set the FileName property in the associated
       // control(s) to the filename selected by the user via the FileOpen
       // dialog box.

       DISPID dwFileNameDispID;
       COleDispatchDriver PropDispDriver;
       ULONG nObjects;

       // Get the array of control IDispatch's stored in the property page.
       LPDISPATCH FAR * lpObjectArray = GetObjectArray(&amp;nObjects);

       // Get the name of the selected file.
       CString strFileName = dlg.GetFileName();

       // Set the filename property for all the control objects currently
       // associated with this property page.
       for (ULONG i = 0; i &lt; nObjects; i++)
       {
         // Get the Dispatch ID for the property and if successful set the
         // value of the property.
         LPCOLESTR lpOleStr = L"FileName";

         if (SUCCEEDED(lpObjectArray[i]-&gt;GetIDsOfNames(IID_NULL,
           (LPOLESTR*)&amp;lpOleStr, 1, 0, &amp;dwFileNameDispID)))
         {
           // Set the property.
           PropDispDriver.AttachDispatch(lpObjectArray[i], FALSE);
           PropDispDriver.SetProperty(dwFileNameDispID, VT_BSTR,
             (LPCTSTR)strFileName);
           PropDispDriver.DetachDispatch();
         }
       }
     }

     // We are done with the FileOpen dialog box. Now you need to kill
     // the property page so the user won't see it.
     EndDialog(-1);

     return TRUE;  // return TRUE unless you set the focus to a control
                   // EXCEPTION: OCX Property Pages should return FALSE}
   }

</PRE>The following steps summarize how to show a custom dialog for a custom
property:

<OL><P><LI>Insert a new dialog into the control project. Use ClassWizard to
   generate a new class for this dialog and specify COlePropertyPage as the
   base class to be used. This new class will be the "dummy" property page
   referenced above (CTestPropPage as shown in article <B><A HREF="../VISUALC/Q140592.htm">Q140592</A></B>).

<P><LI>Follow the steps in Knowledge Base article <B><A HREF="../VISUALC/Q140592.htm">Q140592</A></B> to implement
   per-property browsing for a custom property and specify the CLSID of
   the "dummy" property page created above (i.e. CTestPropPage::guid) in
   the OnMapPropertyToPage() method in the control.

<P><LI>Use ClassWizard to add an OnInitDialog() method to the "dummy"
   property page class and add the appropriate dialog creation and
   handling code as shown above.
<P>
</OL>NOTE: The technique presented in this article can be used to display any
dialog box.
 
<PRE>Keywords          : MfcOLE
Technology        : kbole
Version           : WINNT:4.2,4.2b,5.0;
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

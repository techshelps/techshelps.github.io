

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use _crtBreakAlloc to Debug a Memory Allocation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151585">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1996/05/27">
<META NAME="Keywords" CONTENT="CRTIss WBDebug">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When tracking down memory leaks using the debug C-Runtime (CRT), it is often useful to set a breakpoint immediately before allocating the memory that causes the leak. By setting _crtBreakAlloc at either compile time or run-time, you can cause a use...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXS,QATK,QATL,QAKC,QBFY,QAH4,QBC6,QAVX,QAG8,QBWS,QBW6,QA56,QA55,QAYL,QAIJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use _crtBreakAlloc to Debug a Memory Allocation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151585</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Integrated Debugger (was Visual Workbench Integrated Debugger)
   included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When tracking down memory leaks using the debug C-Runtime (CRT), it is
often useful to set a breakpoint immediately before allocating the memory
that causes the leak. By setting _crtBreakAlloc at either compile time or
run-time, you can cause a user-defined breakpoint at a specific point of
memory allocation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When tracking memory leaks with Debug-CRT functions, such as
_CrtDumpMemoryLeaks, an allocation number enclosed in braces ({}) often
appears. For example, the following is a memory leak at allocation number
18:
<P>
<PRE>   Detected memory leaks!
   Dumping objects -&gt;
   {18} normal block at 0x00660BE4, 10 bytes long
   Data: &lt;          &gt; CD CD CD CD CD CD CD CD CD CD
   Object dump complete.

</PRE>It is useful to set a breakpoint right before this memory gets allocated so
you can step through the callstack and see what functions are causing this
memory to get allocated. The Debug-CRT function _CrtSetBreakAlloc that
allows you to specify an allocation number at which to break. This method
requires that you recompile your program every time you want to set a
allocation breakpoint. An alternative method is to use the Watch window and
set the allocation breakpoint dynamically. This method has the advantage of
not requiring any source code changes or recompiling.
<P>
If you are statically linking to the C Run-time, the variable you want to
change is called _crtBreakAlloc. If you are dynamically linking to the C
Run-time, the variable you want to change in the Watch window is
{,,msvcr40d.dll}*__p__crtBreakAlloc()if you are using Visual C++ 4.0 or
4.1. The variable you want to change in the Watch window should be
{,,msvcrtd.dll}*__p__crtBreakAlloc() if you are using Visual C++ 4.2 or
later.
<P>
To determine which version of the CRT you are compiling with:

<OL><P><LI>From the Build menu, choose Settings.

<P><LI>In the Settings for: pane, select the configuration you are building
   for. Choose the C/C++ tab, and then select the Code Generation category.
<P>
</OL>The Use run-time library dialog should appear displaying the version of the
CRT you are using. (If this setting is blank, make sure you have only
selected one configuration on the Settings for: pane.)
<P>
To set a allocation breakpoint dynamically, perform the following steps:

<OL><P><LI>Start your debugging session. From the Build menu, choose Debug -&gt;
   Step-Into. If you are using the "Debug Single-Threaded" or "Debug Multi-
   Threaded CRT", follow step 1a. Otherwise, follow step 1b.
<P>
   1a. Type _crtBreakAlloc in the Watch window. This shows the current
<P><PRE>       allocation number at which your program will stop. This allocation
       number should be -1 when your program first starts.
</PRE><P>
   1b. Type {,,msvcr40d.dll}*__p__crtBreakAlloc() in the Watch window if
<P><PRE>       you are using Visual C++ 4.0 or 4.1. Type
       {,,msvcrtd.dll}*__p__crtBreakAlloc() if you are using Visual C++ 4.2
       or later. This shows the current allocation number at which your
       program will stop. This allocation number should be -1 when your
       program first starts.
</PRE>
<P><LI>Double click on the -1 value, and enter the new allocation number that
   causes a user-defined breakpoint.

<P><LI>From the Debug menu, choose Debug -&gt; Go.
<P>
</OL>For more information about _crtBreakAlloc, please see "Tracking Heap
Allocation Requests" in the Online Help.
 
<PRE>Keywords          : CRTIss WBDebug
Version           : WINNT:4.0,4.1,4.2,5.0;
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

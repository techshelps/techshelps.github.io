

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Visual C++ Debugger Crashes on Very Long Symbols </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q164949">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1997/03/10">
<META NAME="Keywords" CONTENT="vcfixlist500 WBDebug">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you place the caret on a line that contains a very long symbol name while you are debugging an application using Visual C++ in disassembly view, the debugger may crash.  A possible error message is:     “MSDEV caused an invalid page fault in m...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUJ,QATX,QBFY,QA56,QA55,QAB4,QAR4,QADX,QABN,QAH4,QACI,QABO,QARM,QDJO,QBXT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Visual C++ Debugger Crashes on Very Long Symbols</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q164949</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you place the caret on a line that contains a very long symbol name
while you are debugging an application using Visual C++ in disassembly
view, the debugger may crash.
<P>
A possible error message is:
<P>
<PRE>   “MSDEV caused an invalid page fault in module &lt;unknown&gt; at
   00de:676e6972”

</PRE><h2>CAUSE</h2>
 
<P>
This behavior occurs because the debugger currently has a limit
of 255 characters for symbols.
<P>
<P><h2>RESOLUTION</h2>
 

<OL><P><LI>Do not use the disassembly view to step through sections of code where
   very long symbol names are present.
<P>
   -or-

<P><LI>Do not let the caret land on a line with a very long symbol name. Use
   the mouse to place the caret on a line following the one with the long
   symbol name, and select Run to Cursor from the Debug menu.
<P>
   -or-

<P><LI>Reduce the size of the mangled symbol names. You can do this by
   shortening the names of classes and class members. You can also shorten
   class names of classes that you have not written by using a
<PRE>   #define before the #include for the header declaring the class. If the
   class name is basic_string and you want to shorten it to BS, then
   insert "#define basic_string BS" before the #include for the header
   declaring basic_string.

</PRE></OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Visual C++
version 5.0. The limit is now (256+128).
<P>
<P>
<P><h2>REFERENCES</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>      /* Compile options needed: /GX
      */

      #pragma warning(disable:4786)
      #include &lt;string&gt;
      #include &lt;map&gt;
      struct ThreeString
      {
          string s1,s2,s3;
          ThreeString(string i1,string i2,string i3) {
              s1 = i1;
              s2 = i2;
              s3 = i3;
          }
          ThreeString() {}
      };
      typedef map&lt;string, ThreeString, less&lt;string&gt;,
      allocator&lt;ThreeString&gt; &gt; MapType;

      void main()
      {
          MapType themap;

          themap["Zero"] = ThreeString("Zero","Zero","Zero");
          themap["One"] = ThreeString("One","One","One");
      }

</PRE> 
<PRE>Keywords          : vcfixlist500 WBDebug
Version           : 4.2
Platform          : NT WINDOWS
Issue type        : kbbug
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

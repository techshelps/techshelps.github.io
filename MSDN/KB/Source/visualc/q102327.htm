

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Const Versus Non-Const CObList Objects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102327">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1993/08/03">
<META NAME="Keywords" CONTENT="MfcMisc kbfasttip kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you write an application with the CObList class provided by the Microsoft Foundation Class (MFC) libraries, you may note that many of the member functions have both const and non-const forms. For example, the CObList class has two GetNext() me...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAY5,QBXS,QAO2,QAO3,QBQU,QBCF,QBV8,QAW6,QAPN,QACI,QAMB,QAB9,QBFY,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Const Versus Non-Const CObList Objects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102327</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>MS-DOS | WINDOWS             | WINDOWS NT
</PRE>kbprg
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, and 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you write an application with the CObList class provided by the
Microsoft Foundation Class (MFC) libraries, you may note that many of the
member functions have both const and non-const forms. For example, the
CObList class has two GetNext() member functions, as follows:
<P>
<PRE>   CObject * &amp; GetNext(POSITION &amp; rPosition);
   CObject *   GetNext(POSITION &amp; rPosition) const;

</PRE>The first form of the GetNext() member function is for non-const CObList
objects and implements the left-side of the assignment operator. The second
form of the GetNext() member function is used when the CObList object is
const (generally, this means that you are using a pointer to a const
CObList to prevent any modification to the contents of the CObList).
<P>
Note that the first member function returns a reference to a CObject
pointer. The item returned is the actual CObject pointer in the list, not
its value. Through this reference, you can modify the CObject pointer and
use the return value of the member function to modify the list. The second
member function does not provide access to modify the CObList.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code sample below demonstrates using the GetNext() member function that
returns a reference to a CObject pointer. Note the comment in the code. If
you remove the comment from the indicated line, an error results.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// Sample program to create a CObList, fill it, display the "set"
// member of each CObject pointed to by the CObList, reassign the
// elements of the CObList, and display the "set" member of each
// CObject pointed to by the CObList a second time.

/*
 * Compiler options needed: Visual C++ 4.0 - /MT[d] or /MD[d]
 *                          Others - None
 */

#define _DOS
#include &lt;iostream.h&gt;
#include &lt;afx.h&gt;
#include &lt;afxcoll.h&gt;

</PRE>class CMyObject: public CObject
{
public:
<PRE>   CMyObject(int i):set(i) { }
   int set;
</PRE>} MyObject(2);  // Create a CObject to place in the CObList.
<PRE>                // assign set = 2

void main(void)
</PRE>{
<PRE>   CObList * pMyList = new CObList;
   const CObList * pMyListAlso = pMyList;

   // load list
   for (int nCount = 0; nCount &lt; 10; nCount++)
      pMyList-&gt;AddHead(new CMyObject(1));   // Fill up list with
                   // CMyObject objects that have set equal to 1

   for (POSITION p = pMyList-&gt;GetHeadPosition(); p != NULL; )
      cout &lt;&lt; ((CMyObject*)pMyList-&gt;GetNext(p))-&gt;set;

   for (p = pMyList-&gt;GetHeadPosition(); p != NULL; )
      (pMyList-&gt;GetNext(p)) = &amp;MyObject;

// If you remove the comments from the following lines, the compiler
// generates the following error:
//
//    error C2106: '=' : left operand must be lvalue
//
// The error occurs because pMyListAlso is a pointer to a const
// CObList object and the GetNext() member function that returns a
// CObject pointer is called.
//
// for (p = pMyList-&gt;GetHeadPosition(); p != NULL; )
//    (pMyListAlso-&gt;GetNext(p)) = &amp;MyObject;

   for (p = pMyList-&gt;GetHeadPosition(); p != NULL; )
      cout &lt;&lt; ((CMyObject*)pMyList-&gt;GetNext(p))-&gt;set;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 7.00 1.00 1.50 2.00 2.10 2.50 2.51 2.52 3.00<BR>
2.10 kbinf 4.00<BR>
KBCategory: kbprg kbfasttip<BR>
KBSubcategory: MfcMisc<BR>
Keywords          : MfcMisc kbfasttip kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00 | 1.00 1.50 1.51 1.52 | 1<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

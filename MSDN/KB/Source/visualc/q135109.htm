

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use Updatable Joins in an MFC ODBC Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q135109">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/08/16">
<META NAME="Keywords" CONTENT="MfcDatabase kbprg kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  One way to use updatable joins with MFC ODBC applications utilizing the Microsoft Desktop ODBC Drivers is to use dynaset recordsets based on a predefined query stored in the database. In order to use this approach, your application must do all of t...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QA9E,QAXB,QBWS,QAPN,QAU9,QAB4,QA5C,QA1S,QBD2,QA63,QA2Q,QACF,QAB9,QAC1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use Updatable Joins in an MFC ODBC Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q135109</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2,
<P><PRE>     4.0, 4.1, 4.2
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
One way to use updatable joins with MFC ODBC applications utilizing the
Microsoft Desktop ODBC Drivers is to use dynaset recordsets based on a
predefined query stored in the database. In order to use this approach,
your application must do all of the following:
<P>
<PRE>   - Use unique indexes on the primary key and all matching
     foreign key columns in all tables in the join.

   - Create a predefined query (a.k.a. stored procedure) which
     performs the join and returns all fields you will reference
     in your application.

   - Use dynasets in your MFC application. To use dynasets with a
     16-bit Visual C++ application, see article <B><A HREF="../VISUALC/Q124915.htm">Q124915</A></B>,"SAMPLE: Using
     Dynasets with the 16-Bit MFC Database Classes". VC++ 2.x directly
     supports the use of dynasets.

   - If you open the predefined query using the "{CALL QueryName}"
     syntax you must force the CRecordset-derived class members
     m_bUpdatable and m_bAppendable TRUE to enable updatability.



</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Background</h3>
 
<P>
A join links records from multiple tables matching one or more key fields
in each table to create a "view." When a join is updated, the fields in
the view and the corresponding fields in the tables are modified.
<P>
Generally, a join is performed with a SQL statement of this nature:
<P>
SELECT Table1.colA, Table2.colB
FROM Table1, Table2
WHERE Table1.primary_key=Table2.foreign_key
<P>
You can specify such SQL in your recordset's SELECT statement, but the
resulting join will not be updatable for reasons to be discussed.
<P>
<P>
When are joins not updatable?
 
<P>
The Microsoft desktop ODBC drivers do not support updatable
joins of the form just described in the following two cases:
<P>
<PRE>   - Using snapshots.
   - Executing a SQL SELECT statement with multiple tables

</PRE>Using snapshots forces joins non-updatable.  MFC snapshots
by default loads the cursor library (see appendix G of
the ODBC 2.0 Programmer's Reference for more information
about the cursor library) which doesn't support
updatable joins. The alternative to using snapshots is to
use dynasets which require you to explicitly inhibit the
loading of the cursor library.
<P>
If you attempt to use snapshots with joins, you will first
encounter the fact that MFC will mark the recordset read only.
Even if you set m_bUpdatable and m_bAppendable members of
CRecordset TRUE yourself, you will receive the following error:
<P>
<PRE>  In VC++ 1.5x:
    Positioned request cannot be performed because result set was
    generated by a join condition
    State:SL002[Microsoft][ODBC Cursor Library]

  In VC++ 2.x:
    Positioned request cannot be performed because result set was
    generated by a join condition
    State:SL002,Native:0,Origin:[Microsoft][ODBC Cursor Library]


</PRE>The Microsoft Desktop Drivers are unable to process SQLSetPos
updates on a recordset opened using a join in its select
statement. This means that a dynaset won't allow updatable joins
unless you use a predefined query as mentioned above.
If the SELECT statement contains a join, the driver will reject
attempts to perform updates.  This is a limitation of the drivers.
<P>
If you specify a join in the SQL SELECT statement of your
recordset Open() call or in the GetDefaultSQL() call and are
using dynasets, you will receive the following error:
<P>
<PRE>  In VC++ 1.5x:
    Warning: multi-table recordset not updatable
    Warning: ODBC Success With Info, Error in row
    State:01S01[Microsoft][ODBC Microsoft Access 2.0 Driver]
    Can't update.  Database or object is read-only.
    State:42000[Microsoft][ODBC Microsoft Access 2.0 Driver]

  In VC++ 2.x:
    Error: failure updating record.
    Can't update.  Database or object is read-only.
    State:42000,Native:-1809,Origin:[Microsoft]
    [ODBC Microsoft Access 2.0 Driver]


</PRE><h3>How to perform a join that will be updatable</h3>
 
<P>
To perform updatable joins based on a predefined query, you must
meet the criteria laid out in the summary section of this article.
Additional information about using predefined queries in MFC ODBC
applications is provided below.
<P>
When using a predefined query in MFC employing dynasets you can
utilize two methods of opening the recordset:

<UL><LI>Use the "{CALL predefined_query}" syntax in the recordset open to
   explicitly execute a predefined query and use its result set in the
   recordset.
<P>
   For example:
<P><PRE>     m_pSet-&gt;Open(CRecordset::dynaset, "{CALL QueryName}");
</PRE><P>
   Note: If you use the "CALL" syntax, you must force m_bUpdatable
<PRE>         and m_bAppendable member variables of your recordset class
         to TRUE since they will be FALSE by default since predefined
         queries are assumed read-only.  Do this in a member function
         of your CRecordset-derived class since these are protected
         members.

</PRE><LI>Open the view that a predefined query creates just as if it were a
   regular table in the database.
<P>
   For example:
<P><PRE>     m_pSet-&gt;Open(CRecordset::dynaset);
</PRE><P>
   where the GetDefaultSQL() member of your recordset derived class is:
<P><PRE>     {return("QueryName");}
</PRE><P>
<P>
   Note:  When using predefined queries, regardless of how you
<PRE>          open the recordset, you refer to the tables specified in the
          query, not to the query itself, in your RFX functions.

          For example, if Table1 is a table referenced in predefined
          query QueryName, a representative RFX function would be:

            RFX_Text(pFX, "Table1.primary_key", m_member);


</PRE></UL><h2>REFERENCES</h2>
 
<P>
In the "MFC Encyclopedia" which came with Visual C++, there is an
article titled "Recordset: Declaring a Class for a Predefined Query"
 
<PRE>Keywords          : MfcDatabase kbprg kbprg
Technology        : kbMfc
Version           : 1.51 1.52 2.0 2.1 2.2 4.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

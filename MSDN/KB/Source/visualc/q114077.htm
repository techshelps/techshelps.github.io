

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Code Movement with Huge Pointer Expression in Loop </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114077">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/04/24">
<META NAME="Keywords" CONTENT="CLIss kb16bitonly kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In certain cases when the C/C++ compiler reorganizes code for efficiency after code generation, it will do it incorrectly. The generated code will not run as expected because of this. A specific example of this problem can be reproduced by building...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAVX,QAVW,QAR4,QBFY,QAUD,QAA7,QAG8,QAKP,QA4Q,QBV8,QBVV,QAAP,QABG,QBQU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Code Movement with Huge Pointer Expression in Loop</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114077</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In certain cases when the C/C++ compiler reorganizes code for efficiency
after code generation, it will do it incorrectly. The generated code will
not run as expected because of this. A specific example of this problem can
be reproduced by building and running the sample code below.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around the problem illustrated by the sample code, do one of the
following:

<UL><LI>Disable post-code-generation optimizations for the module containing the
   function by compiling with the /Oo- option. This will prevent the
   compiler from rearranging the code that causes the problem.

<LI>Do not use the /Oe and /Ol options together when compiling the module
   containing the function.

<LI>Use the #pragma optimize() directive to disable the /Oe or /Ol options
   for the function. This is indicated in the sample code below.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed above. This problem was corrected in Visual C++ version 1.5.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The specific problem in the sample code below is that the code generated to
test that n = 1 is rearranged. This causes the test to fail when it should
not, so that the while loop is exited without looping.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Oel (or /O2, or /Ox; both include /Oel)
*/

#include &lt;malloc.h&gt;
#include &lt;stdio.h&gt;

#define COUNT 5

int dummy_fcn()
</PRE>{
<PRE>    static int accum;

    accum++;
    if ( accum &lt;= COUNT )
        return 1;
    else
        return 0;
}

/*    uncomment #pragmas to correct problem
</PRE>#pragma( "l", off )
<PRE>*/

void main()
</PRE>{
<PRE>    int __huge *hptr;
    int n = 1;

    hptr = _fmalloc( sizeof( int ) );
    if ( hptr == NULL )
    {
        printf( "Test failed!\n" );
        exit( 1 );
    }
    *hptr = 0;

    while ( n == 1 )
    {
        /*
           dummy_fcn() will return 1, COUNT times.
           The reason this is done is to force the
           while loop to be executed a certain number
           of times, by keeping n = 1.
        */
        n = dummy_fcn();

        /*
           If the correct code is generated, the
           value pointed to by hptr should be
           incremented COUNT+1 times. Since it is
           initialized to 0 before the loop, its
           value after the loop should be COUNT+1.
        */
        *hptr = *hptr + 1;
    }

    if ( *hptr == COUNT+1 )
        printf( "Test succeeded!\n" );
    else
        printf( "Test failed!\n" );
}

/*
</PRE>#pragma optimize( "l", on )
<PRE>*/
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 8.00 1.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords          : CLIss kb16bitonly kbbuglist kbfixlist kbtool<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Mark MFC Controls Safe for Scripting/Initialization </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161873">
<META NAME="KBModify" CONTENT="1998/03/17">
<META NAME="KBCreate" CONTENT="1997/01/07">
<META NAME="Keywords" CONTENT="MfcOLE kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  By default, MFC ActiveX controls are not marked as Safe for Scripting and/or Safe for Initialization. This becomes apparent when the control is run in the Internet Explorer with the security level set to medium or high. In either of these modes, wa...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QAUD,QAI4,QAHV,QABI,QAY5,QAJG,QDNQ,QABO,QBVV,QAEF,QAVZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Mark MFC Controls Safe for Scripting/Initialization</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161873</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 4.2, 5.0
<LI>Microsoft Internet Client Software Development Kit (SDK) version 4.0,
   4.01
<LI>Microsoft Internet Explorer (Programming) version 4.0, 4.01
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By default, MFC ActiveX controls are not marked as Safe for Scripting
and/or Safe for Initialization. This becomes apparent when the control is
run in the Internet Explorer with the security level set to medium or high.
In either of these modes, warnings may be displayed that the control's data
is not safe or that the control may not be safe for scripts to use.
<P>
There are two methods that a control can use to eliminate these errors. The
first involves the control implementing the IObjectSafety interface and is
useful for controls that would like to change their behavior and become
"safe" if run in the context of an Internet Browser. The second involves
modifying the control's DllRegisterServer function to mark the control
"safe" in the registry. This article covers the second of these methods.
The first method, implementing the IObjectSafety interface, is covered in
the Internet Client SDK.
<P>
Please keep in mind that a control should only be marked as safe if it is,
in fact, safe. Please refer to the Internet Client SDK documentation for a
description of this. See "Safe Initialization and Scripting for ActiveX
Controls" under the Component Development Section.
<P>
NOTE: This article does not cover how to mark a control safe for
downloading. For more information on code download and code signing, please
refer to the Internet Client SDK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Follow these steps to mark your MFC ActiveX Control as Safe for Scripting
and Safe for Initializing:

<OL><P><LI>Implement the CreateComponentCategory and RegisterCLSIDInCategory helper
   functions by adding the following cathelp.h and cathelp.cpp files to
   your project.
<P>
<P><PRE>      CATHELP.H
      =========
      #include "comcat.h"
</PRE>   
<P><PRE>      // Helper function to create a component category and associated
      // description
      HRESULT CreateComponentCategory(CATID catid, WCHAR* catDescription);
</PRE>   
<P><PRE>      // Helper function to register a CLSID as belonging to a component
      // category
      HRESULT RegisterCLSIDInCategory(REFCLSID clsid, CATID catid);
</PRE>   
<P><PRE>      CATHELP.CPP
      ===========
      #include "comcat.h"
</PRE>   
<P><PRE>      // Helper function to create a component category and associated
      // description
      HRESULT CreateComponentCategory(CATID catid, WCHAR* catDescription)
      {
<PRE></PRE>         ICatRegister* pcr = NULL ;
         HRESULT hr = S_OK ;
   
         hr = CoCreateInstance(CLSID_StdComponentCategoriesMgr,
                               NULL,
                               CLSCTX_INPROC_SERVER,
                               IID_ICatRegister,
                               (void**)&amp;pcr);
         if (FAILED(hr))
            return hr;
   
         // Make sure the HKCR\Component Categories\{..catid...}
         // key is registered
         CATEGORYINFO catinfo;
         catinfo.catid = catid;
         catinfo.lcid = 0x0409 ; // english
   
         // Make sure the provided description is not too long.
         // Only copy the first 127 characters if it is
         int len = wcslen(catDescription);
         if (len&gt;127)
            len = 127;
         wcsncpy(catinfo.szDescription, catDescription, len);
         // Make sure the description is null terminated
         catinfo.szDescription[len] = '\0';
   
         hr = pcr-&gt;RegisterCategories(1, &amp;catinfo);
         pcr-&gt;Release();
   
         return hr;
      }
   
      // Helper function to register a CLSID as belonging to a component
      // category
      HRESULT RegisterCLSIDInCategory(REFCLSID clsid, CATID catid)
      {
         // Register your component categories information.
         ICatRegister* pcr = NULL ;
         HRESULT hr = S_OK ;
         hr = CoCreateInstance(CLSID_StdComponentCategoriesMgr,
                               NULL,
                               CLSCTX_INPROC_SERVER,
                               IID_ICatRegister,
                               (void**)&amp;pcr);
         if (SUCCEEDED(hr))
         {
            // Register this category as being "implemented" by
            // the class.
            CATID rgcatid[1] ;
            rgcatid[0] = catid;
            hr = pcr-&gt;RegisterClassImplCategories(clsid, 1, rgcatid);
         }
   
         if (pcr != NULL)
            pcr-&gt;Release();
   
         return hr;
      }

</PRE><P><LI>Modify the DllRegisterServer to mark the control as safe.Locate the
   implementation of DllRegisterServer in a .cpp file in yourproject. You
   will need to add several things to this .cpp file. Includethe file that
   implements CreateComponentCategory and RegisterCLSIDInCategory:
<P>
<P><PRE>      #include "CatHelp.h"
</PRE><P>
   Define the GUID associated with the safety component categories:
<P>
<PRE>      const CATID CATID_SafeForScripting     =
      {0x7dd95801,0x9882,0x11cf,{0x9f,0xa9,0x00,0xaa,0x00,0x6c,0x42,0xc4}};
      const CATID CATID_SafeForInitializing  =
      {0x7dd95802,0x9882,0x11cf,{0x9f,0xa9,0x00,0xaa,0x00,0x6c,0x42,0xc4}};

   Define the GUID associated with your control. For simplicity, you can
   borrow the GUID from the IMPLEMENT_OLECREATE_EX macro in the main .cpp
   file for the control. Adjust the format slightly so that it looks like
   the following:

      const GUID CDECL BASED_CODE _ctlid =
      { 0x43bd9e45, 0x328f, 0x11d0,
              { 0xa6, 0xb9, 0x0, 0xaa, 0x0, 0xa7, 0xf, 0xc2 } };

   To mark your control as both Safe for Scripting and Initialization,
   modify the DllRegisterServer function as follows:

      STDAPI DllRegisterServer(void)
      {
          AFX_MANAGE_STATE(_afxModuleAddrThis);
   
          if (!AfxOleRegisterTypeLib(AfxGetInstanceHandle(), _tlid))
              return ResultFromScode(SELFREG_E_TYPELIB);
   
          if (!COleObjectFactoryEx::UpdateRegistryAll(TRUE))
              return ResultFromScode(SELFREG_E_CLASS);
   
          if (FAILED( CreateComponentCategory(
                  CATID_SafeForScripting,
                  L"Controls that are safely scriptable") ))
                return ResultFromScode(SELFREG_E_CLASS);
   
          if (FAILED( CreateComponentCategory(
                  CATID_SafeForInitializing,
                  L"Controls safely initializable from persistent data") ))
                return ResultFromScode(SELFREG_E_CLASS);
   
          if (FAILED( RegisterCLSIDInCategory(
                  _ctlid, CATID_SafeForScripting) ))
                return ResultFromScode(SELFREG_E_CLASS);
   
          if (FAILED( RegisterCLSIDInCategory(
                  _ctlid, CATID_SafeForInitializing) ))
                return ResultFromScode(SELFREG_E_CLASS);
   
          return NOERROR;
      }

</PRE></OL>You would not normally modify the DllUnregisterServer function for these
two reasons:

<UL><LI>You would not want to remove a component category because other controls
   may be using it.

<LI>Although there is an UnRegisterCLSIDInCategory function defined, by
   default DllUnregisterServer removes the control's entry from the
   registry entirely. Therefore, removing the category from the control's
   registration is of little use.
<P>
</UL>After compiling and registering your control, you should find the following
entries in the registry:
<P>
<PRE>   HKEY_CLASSES_ROOT\Component
   Categories\{7DD95801-9882-11CF-9FA9-00AA006C42C4}

   HKEY_CLASSES_ROOT\Component
   Categories\{7DD95802-9882-11CF-9FA9-00AA006C42C4}

   HKEY_CLASSES_ROOT\CLSID\{"your controls GUID"}\Implemented
   Categories\{7DD95801-9882-11CF-9FA9-00AA006C42C4}

   HKEY_CLASSES_ROOT\CLSID\{"your controls GUID"}\Implemented
   Categories\{7DD95802-9882-11CF-9FA9-00AA006C42C4}

</PRE><h2>REFERENCES</h2>
 
<P>
Internet Client SDK - Component Development - Safe Initialization and
Scripting for ActiveX Controls
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: safety scripting persistence initialization<BR>
Keywords          : MfcOLE kbfasttip<BR>
Technology        : kbole kbmfc<BR>
Version           : Winnt: 4.2, 5.0<BR>
Platform          : winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

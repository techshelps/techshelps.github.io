

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: CWinApp-Based DLL Gets Assertion Failure on Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119333">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1994/08/13">
<META NAME="Keywords" CONTENT="MfcDLL kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  There is no problem starting a second instance of a Win32-based application that uses a CWinApp-based DLL on Windows NT. However, under Win32s, the same Win32-based application generates an assertion failure in the file APPCORE.CPP, line 193.  CAUS...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QBWP,QABI,QBFY,QAML,QBME,QAW6,QAPN,QAGI,QAJQ,QDNN,QAKP,QABH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: CWinApp-Based DLL Gets Assertion Failure on Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119333</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS NT
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   Microsoft Visual C++ 32-bit Edition, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
There is no problem starting a second instance of a Win32-based application
that uses a CWinApp-based DLL on Windows NT. However, under Win32s, the
same Win32-based application generates an assertion failure in the file
APPCORE.CPP, line 193.
<P>
<P><h2>CAUSE</h2>
 
<P>
The inability to run two applications that use the same CWinApp-based DLL
is because of differences in the way Windows NT and Win32s manage memory
and the fact that the C run-time initializes global data and objects
whenever a process loads a DLL.
<P>
Under Windows NT, each application gets its own copy of the DLL data,
including the C run-time and MFC data. Under Win32s, all applications that
use the DLL share the DLL data. When another process loads the DLL, the
global objects are reinitialized. The assertion is generated because
another copy of the CWinApp data already exists.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Replace the DLL entry point to work around the limitation. The sample code
to do this is shown in the "MORE INFORMATION" section. The new entry point
checks to see whether Win32s is loaded. If the application is running under
Win32s, the entry point makes sure that the C run-time entry point is
called only for the first process attach and the last process detach. This
problem has been fixed in Microsoft Visual C++ 32-bit edition, versions 2.0
and 2.1.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To use this code as your new entry point, you need to change the entry
point of your DLL to "NewDLLEntry()".
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   BOOL WINAPI _DllMainCRTStartup( HINSTANCE, DWORD, LPVOID );

   extern "C" BOOL WINAPI
   NewDLLEntry( HINSTANCE hInstDLL, DWORD dwReason, LPVOID lpReserved )
   {
      BOOL bRet = TRUE;
      static DWORD dwVer = 0;
      static int nAttached = 0;

      if( !dwVer )
         dwVer = GetVersion();

      // Check for Win32s and version &lt; 4.0 (Windows "Chicago").
      if( ((HIWORD(dwVer) &amp; 0x8000) != 0x8000) || ((dwVer &amp; 0xFF) &gt;= '4') )
         bRet = _DllMainCRTStartup( hInstDLL, dwReason, lpReserved );
      else
      {
         switch (dwReason)
         {
         case DLL_PROCESS_ATTACH:
            if( nAttached++ == 0 )  // Call CRT entry if first process.
               bRet = _DllMainCRTStartup( hInstDLL, dwReason, lpReserved );
            break;

         case DLL_PROCESS_DETACH:
            if( --nAttached == 0 )  // Call CRT entry if last process.
               bRet = _DllMainCRTStartup( hInstDLL, dwReason, lpReserved );
            break;
         }
      }
      return bRet;
   }

</PRE>You can still run into problems with memory allocation even after you have
replaced the entry point. Whichever process allocates the memory owns it;
therefore, when the process goes away, the object is destroyed and no other
process can use the object. This is a problem for any object shared by
multiple processes.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 2.10 noupdate<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcDLL<BR>
Keywords          : MfcDLL kbprb kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

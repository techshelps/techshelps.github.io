

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Connpts.exe Implements Connection Points in MFC Apps </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152087">
<META NAME="KBModify" CONTENT="1998/02/17">
<META NAME="KBCreate" CONTENT="1996/06/04">
<META NAME="Keywords" CONTENT="MfcOLE kbsample">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This sample demonstrates implementing connection points and connection point sinks in MFC applications. The two applications that make up this sample are the  source  application that implements a connection point, and the  sink  application that i...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QBBS,QAB5,QAI5,QBG2,QAPN,QAW6,QAK6,QAII,QAPF,QAGI,QAH4,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Connpts.exe Implements Connection Points in MFC Apps</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152087</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This sample demonstrates implementing connection points and connection
point sinks in MFC applications. The two applications that make up this
sample are the "source" application that implements a connection point, and
the "sink" application that implements an interface that will be hooked up
to the connection point.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Connpts.exe">Connpts.exe</A> <I>(size: 167797 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running CONNPTS.EXE to decompress the
file and recreate the proper directory structure.
<P>
<P><h3>Registration of the Connection Point Interfaces</h3>
 
<P>
To run the sample, the connection point interfaces must be registered
because this sample demonstrates using the connection point interfaces
across process boundaries and, in this case, the interfaces must be
marshaled. You may or may not need to install marshaling DLLs on your
system. For more information on resolving this issue, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../OLEPROG/Q149231.htm">Q149231</A></B>
   TITLE     : CXPRX: Marshaling Code for Connection Point Interfaces

</PRE><h3>Connection Points and Sinks</h3>
 
<P>
For a more detailed understanding of connection points, consult the
documentation in the References section below.
<P>
A COM object has interfaces that can be called by clients of the object.
These are called incoming interfaces. The connection point interfaces are a
means for this object to call back into the clients via outgoing
interfaces. Typically, the object will want to notify any of its clients of
some event or change in the object's state. The object in this case is
known as the source, and the client is known as the sink.
<P>
To enable communication using the connection point mechanisms, the source
object will implement one or more connection points, such as an object that
supports IConnectionPoint, and the sink object will implement an interface
that the source object knows how to call. It is the job of the connection
point to hold on to the address of the interface in the sink object so that
the source can call it. The connection point may actually hold on to more
than one address if multiple sinks are clients of the object. This is
called multicasting. There will be one connection point in an object for
each sink interface the object knows how to call.
<P>
The remaining interface is IConnectionPointContainer.
IConnectionPointContainer is implemented in the source object and serves to
contain and manipulate the object's connection points.
<P>
This sample closely models the functionality of event notifications in OLE
Controls. The sink in this sample implements an IDispatch interface, as
would a control container, that the source knows how to use. You will need
to identify this interface with a unique IID so a connection point for the
interface can be uniquely identified. You will be able to take advantage of
the IDispatch marshaling code to marshal the dispatch interface across
process boundaries.
<P>
Note that the sink does not have to implement a dispatch interface. If you
choose to implement your own interface, however, and you are going to cross
process boundaries, you will be responsible for marshaling the interface.
<P>
<P><h3>Running the Sample</h3>
 
<P>
Once the connection point interfaces are registered, the sample can be run.
Run the "source" application first. Each of source's open documents is an
event source. Run the "sink" application next. In sink, select Sink /
Attach Source from the document menu. Note that each open document in sink
is an event sink. You should see a list of available sources. If you do
not, the connection point interfaces are not correctly registered. Select
any sources that you would like to connect to. A sink may attach itself to
any number of sources and a source may have any number of sinks attached.
From the source document menu, select Events / Fire Event *. Any sinks that
are hooked up to the source should display a message indicating that the
event was received.
<P>
<P><h3>Miscellaneous Notes</h3>
 
<P>
This sample implements connection points across process boundaries.
Implementing this functionality in in-process objects is done in the same
manner. In-process implementation will not require that you register the
connection point interfaces or the interface that is implemented by the
sink.
<P>
In this sample, the sink interface and the connection point interfaces need
to be registered. This registration is taken care of in the InitInstance
function of the sink application.
<P>
An IID for the sink interface is made available to both the sink and source
applications. Please note that the .cpp file in which this interface is
defined does not use pre-compiled headers.
<P>
All code in this sample relevant to the connection point implementation is
blocked by "//SAMPLECP" and "//END SAMPLECP" blocks. This coding convention
should make it easy to identify what you will need to implement in your
code.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Inside OLE" by Kraig Brockschmidt, Second Edition, Chapter Four -
Connectable Objects, published by Microsoft Press.
<P>
Programming with MFC: Encyclopedia - Connectable Objects
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Connection Point<BR>
Keywords          : MfcOLE kbsample<BR>
Technology        : kbole kbMfc<BR>
Version           : Winnet:4.0,4.1,5.0<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfile<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

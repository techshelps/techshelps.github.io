

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Add ATL Support to an MFC EXE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175190">
<META NAME="KBModify" CONTENT="1998/01/08">
<META NAME="KBCreate" CONTENT="1997/10/15">
<META NAME="Keywords" CONTENT="AtlIss AtlServer">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This articles lists the steps that are needed to add ATL support to an MFC EXE without automation support.  MORE INFORMATION  1. Add the following after the declaration to the CWinApp derived object in    global scope:        CExeModule _Module;   ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAH4,QADZ,QAI4,QAIM,QALW,QABA,QAGF,QDOP,QBQU,QBJZ,QABI,QAA1,QACM,QBHQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Add ATL Support to an MFC EXE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 8, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175190</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Active Template Library (ATL), versions 2.0, 2.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This articles lists the steps that are needed to add ATL support to an MFC
EXE without automation support.
<P>
<P><h2>MORE INFORMATION</h2>
 

<OL><P><LI>Add the following after the declaration to the CWinApp derived object in
   global scope:
<P>
<P><PRE>      CExeModule _Module;
</PRE><P>
<P><PRE>      LONG CCExeModule Module::Unlock()
      {
<PRE></PRE>         LONG l = CComModule::Unlock();
         if (l == 0)
         {
         #if _WIN32_WINNT &gt;= 0x0400
            if (CoSuspendClassObjects() == S_OK)
               PostThreadMessage(dwThreadID, WM_QUIT, 0, 0);
         #else
            PostThreadMessage(dwThreadID, WM_QUIT, 0, 0);
         #endif
         }
         return l;
      }

      BEGIN_OBJECT_MAP(ObjectMap)
      END_OBJECT_MAP()

      LPCTSTR FindOneOf(LPCTSTR p1, LPCTSTR p2)
      {
         while (*p1 != NULL)
         {
            LPCTSTR p = p2;
            while (*p != NULL)
            {
               if (*p1 == *p++)
                  return p1+1;
            }
            p1++;
         }
         return NULL;
      }

</PRE><P><LI>Add the following to the beginning of InitInstance():
<P>
<P><PRE>      // Initialize OLE libraries
      if (!AfxOleInit())
      {
<PRE></PRE>         AfxMessageBox("OLE initialization failed");
         return FALSE;
      }

      m_bATLInited = TRUE;

      HRESULT hRes = 0;
      if (FAILED(hRes))
      {
         m_bATLInited = FALSE;
         return FALSE;
      }

      _Module.Init(ObjectMap, AfxGetInstanceHandle());
      _Module.dwThreadID = GetCurrentThreadId();

      TCHAR szTokens[] = _T("-/");

      BOOL bRun = TRUE;
      LPCTSTR lpszToken = FindOneOf(m_lpCmdLine, szTokens);
      while (lpszToken != NULL)
      {
         if (lstrcmpi(lpszToken, _T("UnregServer"))==0)
         {
            _Module.UpdateRegistryFromResource(IDR_ATLMFC, FALSE);
            _Module.UnregisterServer();
            bRun = FALSE;
            break;
         }
         if (lstrcmpi(lpszToken, _T("RegServer"))==0)
         {
            _Module.UpdateRegistryFromResource(IDR_ATLMFC, TRUE);
            _Module.RegisterServer(TRUE);
            bRun = FALSE;
            break;
         }
         lpszToken = FindOneOf(lpszToken, szTokens);
      }

      if (!bRun)
      {
         m_bATLInited = FALSE;
         return FALSE;
      }

      hRes = _Module.RegisterClassObjects(CLSCTX_LOCAL_SERVER,
                REGCLS_MULTIPLEUSE);

      if (FAILED(hRes))
      {
         m_bATLInited = FALSE;
         return FALSE;
      }

</PRE><P><LI>Add the following after ParseCommandLine(cmdInfo) in InitInstance():
<P>
<P><PRE>      if (cmdInfo.m_bRunEmbedded || cmdInfo.m_bRunAutomated)
      {
<PRE></PRE>         return TRUE;
      }

</PRE><P><LI>Add the following public member variable to the CWinApp derived object:
<P>
<P><PRE>      BOOL m_bATLInited;
</PRE>
<P><LI>Override ExitInstance() and add the following code before calling the
   base class ExitInstance():
<P>
<P><PRE>      if (m_bATLInited)
      {
<PRE></PRE>         _Module.RevokeClassObjects();
         _Module.Term();
      }

</PRE><P><LI>Add a &lt;project_name&gt;.idl file to the project and set up a custom rule to
   invoke the MIDL compiler to generate the &lt;project_name&gt;.tlb,
   project&gt;_i.h, and &lt;project&gt;_i.c files. For example:
<P>
<P><PRE>      midl /Oicf /h "&lt;project_name&gt;_i.h" /iid "&lt;project_name&gt;_i.c"
       "&lt;project_name&gt;.idl"
</PRE>
<P><LI>Include &lt;project_name&gt;_i.h and &lt;project_name&gt;_i.c in the
   &lt;project_name&gt;.h file.

<P><LI>Add a typelib entry to the .rc file. This is done by clicking Resource
   Includes on the View menu and adding (without the single quotation
   marks) '1 TYPELIB "&lt;project_name&gt;.tlb"' to the compile-time directive
   section of the resulting dialog box.

<P><LI>Create a .rgs file for the application and add it as a resource. This is
   done by inserting a custom resource of type "REGISTRY" and setting the
   properties of the resource so that it points to the .rgs file. Make sure
   that the resource ID is the same as the first parameter of
   UpdateRegistryFromResource() used above.

<P><LI>Add the following to end of stdafx.h:
<P>
<P><PRE>      #define _ATL_APARTMENT_THREADED
</PRE><P>
<P><PRE>      #include &lt;atlbase.h&gt;
      // You may derive a class from CComModule and use it if you want to
      // override something, but do not change the name of _Module.
      class CExeModule : public CComModule
      {
      public:
<PRE></PRE>         LONG Unlock();
         DWORD dwThreadID;
      };
      extern CExeModule _Module;
      #include &lt;atlcom.h&gt;

</PRE><P><LI>Add the following to end of stdafx.cpp:
<P>
<P><PRE>      #ifdef _ATL_STATIC_REGISTRY
      #include &lt;statreg.h&gt;
      #include &lt;statreg.cpp&gt;
      #endif
</PRE><P>
<P><PRE>      #include &lt;atlimpl.cpp&gt;
</PRE><P>
</OL>NOTE: In the release build, if you do not want to statically link in the
ATL registration, then include _ATL_DLL in the preprocessor symbols in the
project settings dialog box.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q166480.htm">Q166480</A></B>
   TITLE     : INFO: Active Template Library (ATL) Frequently Asked
               Questions
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words:<BR>
Keywords          : AtlIss AtlServer<BR>
Technology        : kbatl<BR>
Version           : WINDOWS:2.0,2.1<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 8, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

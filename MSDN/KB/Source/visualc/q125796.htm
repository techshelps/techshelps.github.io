

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: GP Fault when Use CString Objects Inside TRACE&lt;x&gt; Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125796">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1995/02/06">
<META NAME="Keywords" CONTENT="kbcode kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  CString objects may cause a general protection (GP) fault when used with the %s format specifier inside the TRACE1, TRACE2, and TRACE3 macros of the Microsoft Foundation Classes.  CAUSE =====  The TRACE    macros call AfxTrace(), a function that ta...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBKN,QAPN,QAY5,QAW6,QAD7,QAH4,QAH7,QAH6,QAGI,QBV8,QDNG,QAYL,QAHE,QAB9,QBWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: GP Fault when Use CString Objects Inside TRACE&lt;x&gt; Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125796</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbcode kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes, included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, and 4.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
CString objects may cause a general protection (GP) fault when used
with the %s format specifier inside the TRACE1, TRACE2, and TRACE3
macros of the Microsoft Foundation Classes.
<P>
<P><h2>CAUSE</h2>
 
<P>
The TRACE&lt;x&gt; macros call AfxTrace(), a function that takes a variable
number of parameters. AfxTrace() uses the va_start/va_end macros to access
the parameters passed to it. It then ultimately ends up calling the
vsprintf() function to format the output string. The GP fault occurs on the
call to the vsprintf() function.
<P>
The GP fault occurs because the %s format specifier tells the vsprintf()
function to expect a TCHAR *. However, the function is being passed a
CString object instead of a pointer to a character. The reason this is not
caught by the compiler is because of AfxTrace's use of a variable length
parameter list. The compiler has no way to know the type(s) of the
parameters the function accepts, so it cannot check the type.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use the CString LPCTSTR conversion operator to pass a pointer to the
CString object's data instead of passing the CString itself. The following
sample code illustrates this method.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: None
*/

void CAboutDlg::OnOK()
</PRE>{
<PRE>    CString t1("output1");
    CString t2("output2");
    CString t3("output3");

    // Incorrect use of the %s format specifier with a CString object:
    TRACE1("TRACE1 %s\n", t1);
    TRACE2("TRACE2 %s, %s\n", t1, t2);
    TRACE3("TRACE3 %s, %s, %s\n", t1, t2, t3);

    // Correct use of the %s format specifier with a CString object:
    TRACE1("TRACE1 %s\n", (LPCTSTR)t1);
    TRACE2("TRACE2 %s, %s\n", (LPCTSTR)t1, (LPCTSTR)t1);
    TRACE3("TRACE3 %s, %s, %s\n", (LPCTSTR)t1, (LPCTSTR)t2,
           (LPCTSTR)t3);

    CDialog::OnOK();
</PRE>}
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: GPF 1.00 1.50 2.00 2.10 2.50 2.51 2.52 3.00<BR>
3.10 4.00<BR>
KBCategory: kbprg kbcode kbprb<BR>
KBSubCategory: MfcMisc<BR>
Keywords            : kbcode kbprb kbprg<BR>
Technology          : kbMfc<BR>
Version             : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Change the Color of an MFC Child Control Class </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q132080">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1996/02/26">
<META NAME="Keywords" CONTENT="kbcode kbprg MfcUI">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  To change the color scheme of a standard class of controls in an MFC-based application, follow these steps:  1. Derive a class from the standard control class, such as CEdit.  2. Define a static member variable of class CBrush to be the brush for  ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAG9,QAOE,QAB5,QA7O,QAMN,QAEV,QAPG,QAYC,QAUD,QABA,QAMB,QAHP,QABO,QABB,QBVR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Change the Color of an MFC Child Control Class</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q132080</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1,
<P><PRE>     2.2, 4.0, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To change the color scheme of a standard class of controls in an MFC-based
application, follow these steps:

<OL><P><LI>Derive a class from the standard control class, such as CEdit.

<P><LI>Define a static member variable of class CBrush to be the brush for
   that class of controls.

<P><LI>Override the control's member function OnChildNotify(), handle the
   message WM_CTLCOLOR, and use the new brush. In MFC 4.0, this could
   also be done by using an ON_WM_CTLCOLOR_REFLECT handler.
<P>
</OL>NOTE: In 32-bit Windows, the controls do not send the WM_CTLCOLOR message.
They send WM_CTLCOLORxxx messages, where xxx is the type of control. For
example, static control sends the WM_CTLCOLORSTATIC message.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This approach works for list boxes, the list boxes of combo boxes, button
controls, edit controls, static controls, message boxes, and dialog boxes.
(This approach does not work for push buttons and the CRichEditCtrl. The
color of a standard CButton object is determined by system settings. If you
want a different color for push buttons, use a CBitmapButton. To change the
color of a CRichEditCtrl use its member functions.)
<P>
For an alternative approach, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q117778.htm">Q117778</A></B>
   TITLE     : Changing the Background Color of an MFC Edit Control

</PRE></OL>It illustrates how to change the background color of a control in the
parent window.
<P>
When a control is about to be redrawn, it sends the message WM_CTLCOLOR to
its parent. This message is handled by the OnCtlColor() member function of
the parent.
<P>
OnCtlColor() allows the parent to modify the drawing of the child by:

<UL><LI>Specifying the background brush.

<LI>Changing the text color.

<LI>Making other changes to the device context with which the drawing
   is to be done.
<P>
</UL>One of the first things the default implementation of OnCtlColor() does is
to call the OnChildNotify() member function of the child that sent the
message. By overriding this OnChildNotify() member function, the child
can determine its own color scheme, instead of taking it from the parent.
<P>
The following sample code defines a class of edit controls with red text
on a green background. The sample code shows only what is necessary to
change the color of the controls. It does not include code generated by
the ClassWizard.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed:  Default
   */

   // NOTE:  The sample code is for 32-bit. It has to be modified for
   // 16-bit. See the comment below.

   // ** MYEDIT.H **

   class CMyEdit : public CEdit
   {
   public:
      BOOL OnChildNotify(UINT message, WPARAM wParam, LPARAM Param,
          LRESULT* pLResult);
   protected:
      static CBrush m_brush;
   };

   // ** MYEDIT.CPP **

   #include "myedit.h"

   // Create a green brush for the background for the class of controls:
   CBrush CMyEdit::m_brush(RGB(0,128,0));

   BOOL CMyEdit::OnChildNotify(UINT message, WPARAM wParam,
                               LPARAM lParam, LRESULT* pLResult)
   {
   // If "message" is not the message you're after, do default processing:

   // For 16-bit applications change WM_CTLCOLOREDIT to WM_CTLCOLOR
      if (message != WM_CTLCOLOREDIT)
      {
         return CEdit::OnChildNotify(message,wParam,lParam,pLResult);
      }

   // Set the text foreground to red:
      HDC hdcChild = (HDC)wParam;
      SetTextColor(hdcChild, RGB(0,0,255));

   // Set the text background to green:
      SetBkColor(hdcChild, RGB(0,128,0));

   // Send what would have been the return value of OnCtlColor() - the
   // brush handle - back in pLResult:
      *pLResult = (LRESULT)(m_brush.GetSafeHandle());

   // Return TRUE to indicate that the message was handled:
      return TRUE;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.50 2.51 2.52 3.00 3.10 3.20<BR>
Keywords            : kbcode kbprg MfcUI<BR>
Technology          : kbMfc<BR>
Version             : 1.0 1.5 1.51 1.52 1.0 2.0 2.1<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: AtlSink Uses ATL to Create a Dispinterface Sink </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181277">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1998/02/17">
<META NAME="Keywords" CONTENT="AtlIss kbcode kbfile kbsample">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  There are two approaches to implementing a dispinterface sink using ATL. The sample, AtlSink, uses both methods. The Readme.txt file included with the AtlSink file includes the project overview, and the  More Information  section of this article in...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAB5,QAW6,QAGI,QBBS,QALQ,QAHE,QAH6,QBC9,QBC8,QAUD,QANO,QBB3,QAK6,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: AtlSink Uses ATL to Create a Dispinterface Sink</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181277</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Active Template Library (ATL), versions 2.0, 2.1
   included with:
<P><PRE>    - Microsoft Visual C++, 32-bit Editions, versions 4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are two approaches to implementing a dispinterface sink using ATL.
The sample, AtlSink, uses both methods. The Readme.txt file included with
the AtlSink file includes the project overview, and the "More Information"
section of this article includes a description of how to implement both
methods.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/AtlSink.exe">AtlSink.exe</A> <I>(size: 62464 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>The AtlSink workspace consists of two projects, AtlSink and
AtlConnectableObject. Use the -d option when you run AtlSink.exe:
<P>
<PRE>   ATLSINK.EXE -d

</PRE><h3>A Connectable Object</h3>
 
<P>
A connectable object is a Component Object Model (COM) object that exposes
one or more source interfaces, implements the IConnectionPointContainer
interface, and provides an IConnectionPoint implementation for each source
interface. The connectable object normally publishes the specifications for
the source interfaces in a type library. To do this, add the "source"
attribute to the interface definition, within the object's coclass
definition.
<P>
A connectable object provides no implementation for the source interface,
Just a definition. The connectable object calls methods on the source
interface (fires events) for each sink that is connected.
<P>
<P><h3>A Sink</h3>
 
<P>
A sink is a COM object that is implemented and instantiated by a client of
one or more connectable objects. The sink object may implement other
interfaces, but at a minimum, it must implement the source interface of the
connectable object that the client wants to connect to.
<P>
<P><h3>Two Ways to Implement Your Sink</h3>
 
<P>
You must implement seven methods for a dispinterface, three IUnknown
methods and four IDispatch methods. A sink uses only one of the IDispatch
methods, Invoke. The other three IDispatch methods, GetTypeInfoCount,
GetTypeInfo, and GetIDsOfNames just returns E_NOTIMPL. When you use
ATL, the CComObject constructor implements the IUnknown methods for you.
<P>
You can implement a dispinterface sink in ATL in two ways:

<OL><P><LI>Use the ATL implementation of Idispatch

<P><LI>Use ATL to implement IUnknown.
<P>
</OL>With the first approach, you must provide a dual interface implementation
with a type library. With the second approach, you must provide a switch
and case statement for every DISPID you want to handle. Also with the
second approach, you must manually extract the variants packaged in the
IDispatch::Invoke call. If the connection point has only a few methods or
you want to handle only a few, and you do not have a type library for your
client, then you may prefer the second approach.
<P>
The ItypeInfo interface provides a standard way of unpacking the parameters
packed into the Invoke call. You also do not have to duplicate the code
required. However, you must implement an .idl file, making sure each method
you implement matches the DISPIDs specified in the connectable object's
type library, and each call must determine how to unpack the parameter
types at run time. If you want to handle only a few of the methods provided
by a dispinterface connection point, then you may prefer the switch method.
<P>
<P><h3>Using ATL to Implement IDispatch</h3>
 
<P>
This approach uses the IDispatchImpl class to implement the IDispatch
methods. Because IDispatchImpl::Invoke just defers to ItypeInfo::Invoke,
you must have a registered type library with a coclass definition that
describes your sink interface as a dual interface. You can implement a sink
with IDispatchImpl by completing the following steps:

<OL><P><LI>Add a default (dual) ATL Simple Object to your project:
<P>
   With your ATL project selected in the ClassView window of Visual C++,
   right-click the project or, on the Insert menu, click New ATL Object.
   Click Simple Object on the ATL Object Wizard dialog box. You can use
   any name you want as long as you avoid naming conflicts, including the
   dispinterface name (in other words, the name can not be the same as the
   dispinterface name).

<P><LI>Add the desired connection point methods:
<P>
   Add only the methods you want to handle. ATL will return
   DISP_E_MEMBERNOTFOUND for all DISPIDs not provided.

<P><LI>Change all DISPIDs to match the connection point specification:
<P>
   All of the DISPIDs for the method must match the DISPIDs of the source.
   The connectable object just calls Invoke with the DISPID it published.
   All DISPIDs must match the connection point specification to ensure that
   the correct event handler is called.

<P><LI>Add the dispinterface IID to the object's interface map:
<P>
   The ATL implementation of IConnectionPoint::Advise will perform a
   QueryIinterface for the dispinterface IID. You need to provide an entry
   that will map the dispinterface IID to your object's IDispatch. Use
   COM_INTERFACE_INTRY_IID to accomplish this mapping. Other
   implementations will perform a QueryInterface for IDispatch, which ATL
   has already provided.

<P><LI>(OPTIONAL) Make object noncreatable:
<P>
   You do not need to create your sink object outside your project. The
   interface may be marshaled to another apartment, processor, or machine,
   but COM does not need to know how to create your object.
<P>
   To make your object noncreatable you need to perform the following three
   steps:
<P>
   a. In the .idl file, add the noncreatable attribute to the coclass.
   b. In the header file, remove the CComCoClass inheritance.
   c. In the project's main .cpp file, remove the object from the object
<P><PRE>      map.
</PRE>
<P><LI>Create an instance of the object:
<P>
   To create a local instance of your ATL object, complete the following
   three steps:
<P>
   a. Declare a pointer to your object, such as:
<P>
<PRE>         CComObject&lt;CMyObj&gt;* pObj;

   b. Call CreateInstance, such as:

         CcomObject&lt;CMyObj&gt;::CreateInstance(&amp;pObj);

   c. Perform a QueryInterface for the object's IUnknown, such as:

         pObj-&gt;QueryInterface(IID_IUnk[ASCII 133]

</PRE><P><LI>Call the AtlAdvise function:
<P>
   Call AtlAdvise with the IUnknown* methods of the connectable object, the
   IUnknown* methods of your sink, the connectable object's source IID, and
   the address of a DWORD to store the cookie that AtlAdvise will return.
   Save the cookie for use with the AtlUnadvise function.
<P>
</OL><h3>Using ATL to Implement Only IUnknown</h3>
 
<P>
When you create a sink using this approach, you do not need a type library
nor do you need to provide support for external creation. Complete the
following steps to create a simple sink:

<OL><P><LI>Derive your class from CComObjectRootEx and IDispatch:
<P>
   The sink class you create will be the template parameter for the
   CComObject constructor, so it must derive from CComObjectRoot. Since
   your sink is a dispinterface implementation, you must also derive from
   IDispatch.

<P><LI>Add an interface map:
<P>
   Your class needs an interface map so that the QueryInterface function
   can find your IDispatch interface, with either the IDispatch IID or the
   dispinterface IID. The following code represents a typical interface
   map:
<P>
<P><PRE>      BEGIN_COM_MAP(CMyTypeInfoSink)
<PRE></PRE>         COM_INTERFACE_ENTRY(IDispatch)
         COM_INTERFACE_ENTRY_IID(DIID_DsomeEvents, IDispatch)
      END_COM_MAP()

   The parameter for the BEGIN_COM_MAP macro is your sink class. The first
   parameter for the COM_INTERFACE_ENTRY_IID is the IID of the
   dispinterface.

</PRE><P><LI>Provide implementations for the four IDispatch methods:
<P>
   The first three IDispatch methods need only return E_NOTIMPL. For the
   Invoke method, you need a switch with a case entry for each DISPID that
   provides notification. The following code represents a typical
   implementation for Invoke:
<P>
   The following is Sample Code:
<P>
<P><PRE>      STDMETHODIMP CDispatchSink::Invoke(DISPID dispidMember, REFIID riid,
<PRE></PRE>                                         LCID lcid, WORD wFlags,
                                         DISPPARAMS* pdispparams, VARIANT*
                                         pvarResult, EXCEPINFO* pexcepinfo,
                                         UINT* puArgErr)
      {
         HRESULT hr = S_OK;
         if (pdispparams)
         {
            switch (dispidMember)
            {
               case 2:
               {
                  if (pdispparams-&gt;cArgs == 1)
                  {
                     if (pdispparams-&gt;rgvarg[0].vt == VT_I2)
                        Event2(pdispparams-&gt;rgvarg[0].iVal);
                     else
                        hr = DISP_E_TYPEMISMATCH;
                  }
                  else
                     hr = DISP_E_BADPARAMCOUNT;
                  break;
               }
      // Other desired case statements[ASCII 133].
               default:
               {
                  hr = DISP_E_MEMBERNOTFOUND;
                  break;
               }
            }
         }
         else
            hr = DISP_E_PARAMNOTFOUND;
         return hr;
      }

   Each case statement should check the number of parameters and type of
   each parameter. After error checking, you can either handle the event in
   the case statement or call an event handler.

</PRE><P><LI>Create an instance of the object:
<P>
   See the "Using ATL to Implement IDispatch" section for details.

<P><LI>Call the AtlAdvise function:
<P>
   See the "Using ATL to Implement IDispatch" section for details.
<P>
</OL>(c) Microsoft Corporation 1998, All Rights Reserved. Contributions by
Chuck Bell, Microsoft Corporation
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: IConnectionPointImpl<BR>
Keywords          : AtlIss kbcode kbfile kbsample<BR>
Version           : win95:2.0,2.1;winnt:2.0,2.1<BR>
Platform          : Win95 winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

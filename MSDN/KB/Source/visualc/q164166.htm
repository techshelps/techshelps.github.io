

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Assert in Wincore.cpp with MFC in an NT Service </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q164166">
<META NAME="KBModify" CONTENT="1997/08/07">
<META NAME="KBCreate" CONTENT="1997/02/24">
<META NAME="Keywords" CONTENT="MfcUI kbcode kbprb kbprg kbui">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you use a Visual C++ 4.x MFC application spawned from a NT service or as a NT service, an assertion may occur in Wincore.cpp. Specifically, it occurs on the following line in _AfxActivationWndProc():    LRESULT CALLBACK  _AfxActivationWndProc(...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWQ,QBWO,QBWP,QACK,QAGQ,QAPN,QAHQ,QAKJ,QAH4,QAY2,QAO4,QAIB,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Assert in Wincore.cpp with MFC in an NT Service</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q164166</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.10 4.20
WINDOWS NT
kbprg kbui kbcode kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.1, 4.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you use a Visual C++ 4.x MFC application spawned from a NT service or
as a NT service, an assertion may occur in Wincore.cpp. Specifically, it
occurs on the following line in _AfxActivationWndProc():
<P>
<PRE>  LRESULT CALLBACK
 _AfxActivationWndProc(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam)
 {
    WNDPROC oldWndProc = (WNDPROC)::GetProp(hWnd, szAfxOldWndProc);
    ASSERT(oldWndProc != NULL);  // &lt;----- assert occurs here
    .
    .
    .
 }

</PRE>The assertion occurs on line 385 with Visual C++ versions 4.2 and 4.2b, and
on line 384 with Visual C++ version 4.1.
<P>
<P><h2>CAUSE</h2>
 
<P>
MFC subclasses all non-MFC created windows to handle specific activation
issues. While subclassing a non-MFC created window, the old window
procedure is stored in the properties of the window. Logging off of an NT
session causes the atoms used to identify the properties to be destroyed
and the property cannot be retrieved. This causes the assertion to occur.
<P>
MFC was not designed for Windows NT services. As a result, if an MFC
application is spawned from a Windows NT service, minimized, and then a
user logs-off, then the assertion will occur.
<P>
Also keep in mind that there are other problems to consider when spawning
an MFC application from a service or as a service. The OnEndSession()
message handler for the main frame window closes out the CDocument object.
So the WM_ENDSESSION message must be handled to prevent this from
happening.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
You can do one of the following things:

<UL><LI>Unsubclass all of the non-MFC windows at some time before logoff or
   during logoff such as in the WM_ENDSESSION handler.
<P>
</UL>-or-

<UL><LI>Modify the MFC code and rebuild the MFC libraries. In this case, you can
   modify the MFC code to prevent it from subclassing any non-MFC windows
   or modify the code so that you can store the old window procedure in a
   list rather than in properties for the window. As each window is
   destroyed (WM_NCDESTROY is received), look up the window handle in your
   list and unsubclass it like MFC does in the _AfxActivationWndProc()
   function.
<P>
</UL>-or-

<UL><LI>Separate the GUI part of the application from the service part. In other
   words, have a GUI client startup every time the user logs on. Then, have
   the GUI client talk to the service through some form of interprocess
   communication, such as named pipes or sockets. The service should
   maintain the data and the GUI starts up each time when you log on.
<P>
</UL>MFC subclasses non-MFC windows to generally handle obscure window
activation issues. For example, it ensures proper activation of toplevel
windows when doing in-place OLE activation. It also ensures that the last
active popup is activated when a user clicks on a disabled window that is
part of the application. Normally, if you have a main window that owns a
modal dialog box and some other popup window like a floating toolbar, and
you switch activation to another application, and click on the toolbar that
was disabled by the modal dialog box, Windows beeps and does not activate
the application. MFC ensures that the modal dialog box is brought to the
top when you click on the toolbar. Note that MFC handles all of these
activation issues for MFC-created windows and non-MFC created Windows. The
old window procedure is stored as a property associated with the window
only for non-MFC windows. If you unsubclass the non-MFC windows (as the
first technique suggests above), you still get these activation features
for any windows that were created as MFC CWnd-derived objects.
<P>
<P><h3>Unsubclassing the non-MFC Windows</h3>
 
<P>
The first technique listed above may be an easy workaround for developers
who have already written an application and don't want to rework their
design, rebuild the MFC libraries, or don't need to handle the activation
issues MFC handles.
<P>
You can unsubclass non-MFC Windows in the WM_ENDSESSION handler of your
main frame window. The following sample code demonstrates how to enumerate
all of the windows for your process and unsubclass them:
<P>
<PRE> static const TCHAR szAfxOldWndProc[] = _T("AfxOldWndProc");

 BOOL CALLBACK EnumProc( HWND hWnd, LPARAM lParam)
 {
    //check for property and unsubclass if necessary
    WNDPROC oldWndProc = (WNDPROC)::GetProp(hWnd, szAfxOldWndProc);
    if (oldWndProc!=NULL)
    {
       SetWindowLong(hWnd, GWL_WNDPROC, (DWORD)oldWndProc);
       RemoveProp(hWnd, szAfxOldWndProc);
    }

    return TRUE;
 }

 void CMainFrame::OnEndSession(BOOL bEnding)
 {
    // unsubclass the non-MFC windows which MFC has subclassed
    DWORD dwProcessId;

    DWORD dwThreadId= GetWindowThreadProcessId(m_hWnd,&amp;dwProcessId);
    EnumThreadWindows(dwThreadId, EnumProc,(LPARAM) dwThreadId);
 }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbui kbcode kbprb<BR>
KBSubcategory: MfcUI<BR>
Additional reference words: 4.00 4.10 4.20<BR>
Keywords          : MfcUI kbcode kbprb kbprg kbui<BR>
Technology        : kbMfc<BR>
Version           : 4.00 4.10 4.20<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VC++ README.WRI Part 2-Visual Workbench (3 of 3) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97539 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1993/04/13">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The text below presents information in Part 2 of the README.WRI file distributed with Microsoft Visual C++ version 1.0. Setup installs README.WRI into the MSVC\HELP directory.  MORE INFORMATION  Using Class Wizards to Add Files to a Project  After ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA55,QA56,QBV8,QAUJ,QAJN,QBWC,QAB9,QBVV,QAH4,QBWS,QBXS,QBFY,QA26,QA01,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VC++ README.WRI Part 2-Visual Workbench (3 of 3)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97539 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbreadme
<P>
<P>
 
The information in this article applies to:

<UL><LI>The Visual Workbench included with:
   Microsoft Visual C++ for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below presents information in Part 2 of the README.WRI file
distributed with Microsoft Visual C++ version 1.0. Setup installs
README.WRI into the MSVC\HELP directory.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Using Class Wizards to Add Files to a Project</h3>
 
<P>
After you add a file to a project using the Class Wizard, use the
Rescan All Dependencies command available on the Project menu. This
will update the file dependencies to reflect the added file.
<P>
<P><h3>Resources Dialog Box</h3>
 
<P>
If you use the AppWizard to create a new skeleton application and then
open the Resources dialog box by choosing the Project command from the
Options menu, the "Custom Options" field will contain garbage
characters. The extra characters will not be passed to the Resource
Compiler. If you choose OK, and open the dialog again, the extra
characters will be gone.
<P>
<P><h3>Automatic Use of Precompiled Headers</h3>
 
<P>
In the description of the Automatic Use of Precompiled Headers (/YX)
option (Chapter 9 of the "Visual Workbench User's Guide," pages
138-141), it is stated that the /Fp option is not supported in Visual
Workbench. The /Fp option is actually supported, but not on a per-file
basis as it is on the command-line. It is also stated that a file
named MSVC.PCH is always used as the precompiled header file. In fact,
the /Fp option is automatically used to name the precompiled header
file to match your project name.
<P>
When you select Automatic Use of Precompiled Headers, /Fp is inserted
in the Other Options dialog box (Custom Options category) followed by
the name of your project with an extension of .PCH. This renames
MSVC.PCH to match your project name and allows you to have more than
one project in a directory (which is a common occurrence when
developing .EXE and .DLL applications). The rules for creating and
using precompiled header files using /YX with /Fp are the same as are
described on pages 138-141 for using /YX without /Fp. The only
difference is that Visual Workbench uses a file named project.PCH
(where project is your project name) instead of MSVC.PCH.
<P>
<P><h3>Debug Options: Full (Using Program Database)</h3>
 
<P>
The description of the Full (Using Program Database) option in the
Debug Options category on page 128 of the "Visual Workbench User's
Guide" states that the /Zi option creates a special database file
named MSVC.PDB. In Visual Workbench, the selection of  Full (Using
Program Database) automatically adds the option /Fd"&lt;project&gt;.PDB"
(where &lt;project&gt; is your project name) as well as /Zi. This renames
the database filename to match your project name.
<P>
<P><h3>Setting WndProc Breakpoints</h3>
 
<P>
Declarators for Windows functions must use the ANSI form for the
procedure to appear in the WndProc drop-down list in the Break- points
dialog box. You should also put the ANSI function prototype in the
header file for the source file containing the function.
<P>
If your source code includes function declarators that have the form
in use prior to the form specified by the ANSI standard, the compiler
does not generate type information for use with the debugger.
<P>
The pre-ANSI (or old-style) declarators have the following form:
<P>
<PRE>   LRESULT FAR PASCAL MyWndProc ( hwnd, wMsg, wParam, lParam )
   HWND hwnd ;
   WORD wMsg ;
   WORD wParam ;
   LONG lParam ;
   {

   }

</PRE>An ANSI declarator for the same function has the following form:
<P>
<PRE>   LRESULT FAR PASCAL MyWndProc ( HWND hwnd, WORD wMsg, \
                  WORD wParam, LONG lParam )
   {

   }

</PRE><h3>Setting the WinExclusive flag in SYSTEM.INI</h3>
 
<P>
The WinExclusive flag in the [386Enh] section of the SYSTEM.INI file
should not be set to the value 1. If it is, you will get an internal
error when you build in the Visual Workbench, and a message explaining
that the Visual Workbench timed out waiting for WINTEE.EXE to start.
<P>
<P><h3>Using VSAFE While Building</h3>
 
<P>
You should not use the VSAFE utility provided with MS-DOS version 6
while you are building an executable file in the Visual Workbench. The
Visual Workbench will appear to hang when VSAFE detects an executable
file changing during the link process.
<P>
<P><h3>Using the Visual Workbench on a Pen Computer</h3>
 
<P>
Compiling, linking, or binding resources from the Visual Workbench may
disable the pen on a pen computer. The pen will be enabled after
exiting the Visual Workbench.
<P>
<P><h3>MSVC Command Line Options</h3>
 
<P>
The following command line options may be useful if you encounter
problems such as your system or build hangs while building an
application using the Visual Workbench. Such problems may be caused by
interaction between the Visual Workbench and WINTEE utility that
handles communication between the Visual Workbench and the Visual C++
tools.
<P>
To use the Visual Workbench command line options, edit the Command
Line field in the Program Item Properties dialog box associated with
the Visual Workbench in the Windows Program Manager.
<P>
The Visual Workbench uses the following command line options:
<P>
/V - This option causes the WINTEE utility to run in a visible
windowed MS-DOS box. Ordinarily the WINTEE utility is not visible when
it is running. Using the /V option allows you to see the output of the
tools used when you build your application. Normally the output from
the build tools appears in the Output of the Visual Workbench.
<P>
/C - This option causes memory to be compacted before any Visual C++
tools are used. Using the /C option may increase the memory available
to the tools, but will increase the time required to build.
<P>
/M - This option will cause the WINTEE utility to run every time you
start a build. Using the /M option will increase the time required to
build, but may solve problems caused by some system configurations.
Normally WINTEE is started the first time you build within the Visual
Workbench, and remains in memory until you exit the Visual Workbench.
When you use the /M option, WINTEE exits after a build is complete,
freeing resources to the system.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory: VWBIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

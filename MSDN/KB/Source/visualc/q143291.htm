

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Resize CPropertyPages at Run Time </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143291">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1996/01/30">
<META NAME="Keywords" CONTENT="MfcUI kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  To resize CPropertyPages in a CPropertySheet at run time:  1. Derive a class from CPropertySheet and override OnInitDialog().  2. In OnInitDialog(), resize the CPropertySheet, CTabCtrl, and    CPropertyPage(s) by using MoveWindow() or SetWindowPos(...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACI,QBWA,QAUD,QAJP,QAH4,QAUR,QAEF,QBXV,QABI,QBWS,QA9N,QAU3,QANJ,QAMR,QAEV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Resize CPropertyPages at Run Time</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143291</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To resize CPropertyPages in a CPropertySheet at run time:

<OL><P><LI>Derive a class from CPropertySheet and override OnInitDialog().

<P><LI>In OnInitDialog(), resize the CPropertySheet, CTabCtrl, and
   CPropertyPage(s) by using MoveWindow() or SetWindowPos()

<P><LI>Save the size and position of the CPropertyPage.

<P><LI>Handle TCN_SELCHANGE in the CPropertySheet, and resize the page.

<P><LI>Handle ID_APPLY_NOW in the CPropertySheet, and resize the page.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
The CPropertySheet is actually a dialog with a CTabCtrl. Each CPropertyPage
is a child of the CPropertySheet and is only displayed inside the CTabCtrl.
This is why we also have to resize the CTabCtrl. To get the CTabCtrl, call
CPropertySheet::GetTabControl(). If you are changing the height of the
property sheet, it may also be necessary to move the sheet's buttons. The
"Sample Code" section of this article illustrates this.
<P>
The CPropertySheet remembers the size and position of its CPropertyPages
when they are first created. When a different tab is selected by the user,
the CPropertySheet receives a TCN_SELCHANGE notification. In response to
this, the CPropertySheet shows the new page using the size and position it
had when it was first created. The same thing happens when the user clicks
the Apply button (ID_APPLY_NOW). This is why we have to save the new size
and position so we can use it to resize the pages later.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE> /* Compile options needed: default
 */

 // This example adds 50 pixels to the width and height of
 // each page. CMySheet is derived from CPropertySheet. m_PageRect is a
 // member variable of CMySheet and is of type RECT. WM_RESIZEPAGE is a
 // user-defined message.

 // ... prototypes that need to be added to your class definition

 class CMySheet : public CPropertySheet
 {
 // ... other members

 // ... make sure you have these members
 protected:
     RECT m_PageRect;
     virtual BOOL OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult);
     virtual BOOL OnInitDialog();
     afx_msg LRESULT OnResizePage(WPARAM wParam, LPARAM lParam);
     afx_msg void OnApplyNow();
 };

 // ... modify and/or implement functions in the .cpp file...

 #define WM_RESIZEPAGE WM_USER + 111

 BEGIN_MESSAGE_MAP(CMySheet, CPropertySheet)
     //{{AFX_MSG_MAP(CMySheet)
     // NOTE - the ClassWizard will add and remove mapping macros here.

     // ... other message map entries

     //}}AFX_MSG_MAP

     // ... add the 2 following entries here
     ON_MESSAGE (WM_RESIZEPAGE, OnResizePage)
     ON_COMMAND (ID_APPLY_NOW, OnApplyNow)

 END_MESSAGE_MAP()

 BOOL CMySheet::OnInitDialog()
 {
     CPropertySheet::OnInitDialog();

     RECT rc;

     // resize the sheet
     GetWindowRect (&amp;rc);
     ScreenToClient (&amp;rc);
     rc.right += 50;
     rc.bottom += 50;
     MoveWindow (&amp;rc);

     // resize the CTabCtrl
     CTabCtrl* pTab = GetTabControl ();
     ASSERT (pTab);
     pTab-&gt;GetWindowRect (&amp;rc);
     ScreenToClient (&amp;rc);
     rc.right += 50;
     rc.bottom += 50;
     pTab-&gt;MoveWindow (&amp;rc);

     // resize the page
     CPropertyPage* pPage = GetActivePage ();
     ASSERT (pPage);
     // store page size in m_PageRect
     pPage-&gt;GetWindowRect (&amp;m_PageRect);
     ScreenToClient (&amp;m_PageRect);
     m_PageRect.right += 50;
     m_PageRect.bottom += 50;
     pPage-&gt;MoveWindow (&amp;m_PageRect);

     // move the OK, Cancel, and Apply buttons
     CWnd* pWnd = GetDlgItem(IDOK);
     pWnd-&gt;GetWindowRect(&amp;rc);
     rc.bottom += 50;
     rc.top += 50;
     ScreenToClient(&amp;rc);
     pWnd-&gt;MoveWindow(&amp;rc);

     pWnd = GetDlgItem(IDCANCEL);
     pWnd-&gt;GetWindowRect(&amp;rc);
     rc.bottom += 50;
     rc.top += 50;
     ScreenToClient(&amp;rc);
     pWnd-&gt;MoveWindow(&amp;rc);

     pWnd = GetDlgItem(ID_APPLY_NOW);
     pWnd-&gt;GetWindowRect(&amp;rc);
     rc.bottom += 50;
     rc.top += 50;
     ScreenToClient(&amp;rc);
     pWnd-&gt;MoveWindow(&amp;rc);

     CenterWindow();

     return TRUE;
 }

 LONG CMySheet::OnResizePage(UINT, LONG)
 {
     // resize the page using m_PageRect which was set in OnInitDialog()
     CPropertyPage* pPage = GetActivePage ();
     ASSERT (pPage);
     pPage-&gt;MoveWindow (&amp;m_PageRect);

     return 0;
 }

 BOOL CMySheet::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)
 {
     NMHDR* pnmh = (LPNMHDR) lParam;

     // the sheet resizes the page whenever it is activated
     // so we need to resize it to what we want
     if (TCN_SELCHANGE == pnmh-&gt;code)
         // user-defined message needs to be posted because page must
         // be resized after TCN_SELCHANGE has been processed
         PostMessage (WM_RESIZEPAGE);

     return CPropertySheet::OnNotify(wParam, lParam, pResult);
 }

 void CMySheet::OnApplyNow()
 {
     // the sheet resizes the page whenever the Apply button is clicked
     // so we need to resize it to what we want
     PostMessage (WM_RESIZEPAGE);
 }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: CPropertyPage size resize<BR>
Keywords          : MfcUI kbcode<BR>
Technology        : kbMfc<BR>
Version           : WINNT:4.0,5.0;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: new Allocates 0 Bytes for Typedef Class Function Pointer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112985">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1994/03/23">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist400 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using the new operator to dynamically allocate memory for a typedef pointer to a class member function that has return type void will allocate 0 (zero) bytes for the function pointer.  STATUS ======  Microsoft has confirmed this to be a bug in the ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAO2,QAO3,QAY5,QACJ,QALG,QBV8,QAP2,QDKW,QAB9,QALW,QDOX,QDIJ,QANY,QAKM V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: new Allocates 0 Bytes for Typedef Class Function Pointer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112985</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 4.1,
<P><PRE>     4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using the new operator to dynamically allocate memory for a typedef pointer
to a class member function that has return type void will allocate 0 (zero)
bytes for the function pointer.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed above. We
are researching this problem and will post new information here in the
Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When typecasting a pointer to a class member function that returns type
<PRE>void and trying to dynamically allocate pointers to this user defined type,
</PRE>the compiler will allocate 0 bytes. This can best be seen by generating a
mixed source/assembly language listing file using the /Fc compiler option
and observing that the new operator is passed 0 bytes as the amount of
memory to allocate. Using the sample code below, the following is the
source/assembly listing for the call to new:
<P>
<PRE>   ; 26   : // Try to allocate array of ptr's to ptr to member functions
   ; 27   : ppfVoid = new PtrVoid[10];  // Allocates zero bytes

     0002e     6a 00          push     0
     00030     e8 00 00 00 00     call     ??2@YAPAXI@Z          ; operator
   new

     00035     83 c4 04     add     esp, 4
     00038     89 45 fc     mov     DWORD PTR _ppfVoid$[ebp], eax

</PRE>This problem occurs only when using a return type of void for the typedef
pointer to class member function. Any other return type causes the proper
amount of memory to be allocated by the new operator.
<P>
To work around this problem, allocate an array of chars using the sizeof()
keyword to cause the new operator to allocate the proper number of bytes.
The returned pointer will need to be typecast to the proper type.
<P>
The following code sample demonstrates the problem and workaround:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: /Fc
      To generate assembly/source listing */

   class CTest
   {
   public:
        void FcnVoid();
        int  FcnInt();
   };

   typedef void (CTest::*PtrVoid)(); // Defines PtrVoid as type pointer
                                     // to member function which returns
                                     // void.

   typedef int (CTest::*PtrInt)();   // Defines PtrInt as type pointer to
                                     // member function which returns int.

   void main(void)
   {
   PtrVoid *ppfVoid;  // Declares ppfVoid to be of type pointer to
                      // PtrVoid.
   PtrInt  *ppfInt;   // Declares ppfInt to be of type pointer to
                      // PtrInt.

   // Allocating ptr to ptr to member fcn that returns
   // int works correctly.

   ppfInt = new PtrInt;        // Allocates correct number of bytes.
   delete ppfInt;

   // Try to allocate array of ptr's to ptr to member functions.

   ppfVoid = new PtrVoid[10];  // Allocates 0 bytes.
   delete ppfVoid;

   // *** Use sizeof() to work around. ***
   // Allocate correct number of bytes and cast return
   // pointer to proper type.

   ppfVoid = (PtrVoid*)new char[sizeof(PtrVoid)*10];
   delete ppfVoid;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.01<BR>
Keywords            : CPPIss vcbuglist400 vcbuglist500<BR>
Version             : 1.0 1.5 1.51 1.52 2.0 4.0 4.1 4.<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

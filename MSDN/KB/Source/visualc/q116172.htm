

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Based Ptr. Init Fails at Global Scope in CPP File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116172">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1994/06/13">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist400 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When attempting to compile an application written in C++ that contains a based pointer initialized at global scope, the compiler incorrectly returns the following error message:     error C2440 : 'initializing' : cannot convert from 'int __far *' t...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABA,QA2O,QA4Q,QAB4,QAAP,QAO3,QAO2,QAOT,QBFY,QDKW,QBXT,QA5V,QAIB,QAKP,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Based Ptr. Init Fails at Global Scope in CPP File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116172</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 4.1, 4.2,
<P><PRE>     5.0
</UL></PRE> 
<P>
SYMPTOMS
 
<P>
When attempting to compile an application written in C++ that contains a
based pointer initialized at global scope, the compiler incorrectly returns
the following error message:
<P>
<PRE>   error C2440 : 'initializing' : cannot convert from 'int __far *' to
    'int __based(xxxx) *'

</PRE>where xxxx is the segment on which the pointer is based.
<P>
This error does not occur for based pointers that are initialized at
function scope.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
<P><h3>Sample Code 1</h3>
 
<P>
With the 16-bit compilers listed above, this error can be eliminated by
typecasting the constant that is used to initialize the based pointer to a
type "_based(void) *". The following code demonstrates how to generate the
compiler error as well as the workaround:
<P>
<PRE>   /* Compile options needed:   none
   */

   // Base Pointer
   int *BasePtr;

   // This line compiles fine (no initialization)
   int _based(BasePtr) *test1;

   // This line generates C2440 error
   int _based(BasePtr) *test2=0;

   // This line demonstrates the 16 bit workaround
   int _based(BasePtr) *test3 = (int _based(void) *)0;

   void main(void)
   {
   // Initialization at file scope does not generate C2440

      int _based(BasePtr) *test4 = 0;
   }

</PRE><h3>Sample Code 2</h3>
 
<P>
In the 32-bit compiler for Windows NT, version 8.0, the workaround given
for the 16-bit compilers does not work. The "_based(void) *" cast generates
the following two error messages if you are using the 32-bit compiler:
<P>
<PRE>   error C2493: illegal form of __based
   error C2440: 'initializing' : cannot convert from 'int *' to 'int
   __based(BasePtr) *'

</PRE>In this case, the file scope based pointer cannot be declared and
initialized in one step. An appropriate workaround would be to declare the
pointer at file scope and initialize the pointer inside of a function. The
following code demonstrates how to generate the compiler error as well as
the workaround:
<P>
<PRE>   /* Compile options needed: none
   */
   // Base Pointer
   int *BasePtr;

   // This line compiles fine (no initialization).
   int _based(BasePtr) *test1;

   // This line generates C2440 error.
   int _based(BasePtr) *test2=0;

   // This line generates C2440 and C2493 errors.
   int _based(BasePtr) *test3 = (int _based(void) *)0;

   void main(void)
   {
   // 32-bit workaround: initialize the based pointer at function scope.

      test1 = 0;

   // Initialization at file scope does not generate C2440 or C2493.

      int _based(BasePtr) *test4 = 0;
   }

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. We are researching this
problem and will post new information here in the Microsoft Knowledge
Base as it becomes available.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords          : CPPIss vcbuglist400 vcbuglist500<BR>
Version           : 7.0 1.0 1.5 2.0 4.0 4.1 4.2 5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

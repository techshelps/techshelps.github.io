

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Display the Current Time in a CStatusBar Pane </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99198 ">
<META NAME="KBModify" CONTENT="1997/05/28">
<META NAME="KBCreate" CONTENT="1993/05/26">
<META NAME="Keywords" CONTENT="kbprg MfcUI kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The text below describes a process by which a MFC AppWizard application can be designed to display the current time on its status bar.  Perform the following five steps:  1. Use App Studio, or the Resource View in Visual C++ versions later than    ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBTL,QAGI,QAU3,QAMR,QAJH,QAFH,QACE,QAEV,QATX,QAPN,QAB9,QBVV,QAY5,QAMB,QAKJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Display the Current Time in a CStatusBar Pane</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99198 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
This information in this article applies to:
<P>
<PRE>   The Microsoft Foundation Classes (MFC) included with:
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 4.0, 5.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below describes a process by which a MFC AppWizard application can
be designed to display the current time on its status bar.
<P>
Perform the following five steps:

<OL><P><LI>Use App Studio, or the Resource View in Visual C++ versions later than
   4.0, to edit the application's string tables. Add a new string in the
   segment that defines ID_INDICATOR_NUM and so on; for example, create a
   new string with the ID ID_INDICATOR_TIME. Specify a caption like 00:00.
   The Status Bar uses the specified initial value to calculate the size
   of the pane. An application can dynamically change the size of the
   pane using the CStatusBar::SetPaneInfo() function. With Visual C++
   versions prior to 4.0, close App Studio to save the .RC file. With
   Visual C++ version 4.0 or later, use the File menu to Save and Close the
   string table resource.

<P><LI>Edit the MAINFRM.CPP file. The CStatusBar object builds the status
   bar using the data in the indicators[] array in sequential order.
   Insert the ID_INDICATOR_TIME indicator into the array at the
   desired position.
<P>
   If you compiled the program at this stage, you would see a new pane
   in the status bar but it would not contain any text.

<P><LI>Edit the message map for the CMainFrame object to add the following
   line (add the line outside the AFX_MSG_MAP comments):
<P>
<P><PRE>      ON_UPDATE_COMMAND_UI(ID_INDICATOR_TIME, OnUpdateTime)
</PRE><P>
   Because ID_INDICATOR_TIME is an ID, and not an object, you cannot
   use Class Wizard to make this addition.

<P><LI>Edit the MAINFRM.CPP file and create a function similar to the
   following:
<P>
<P><PRE>      void CMainFrame::OnUpdateTime(CCmdUI *pCmdUI)
      {
<PRE></PRE>         CTime t = CTime::GetCurrentTime();
         char szTime[6];
         int nHour = t.GetHour();
         int nMinute = t.GetMinute();

         // Base Hours on 12 instead of 24
         if (nHour &gt; 12)
            nHour = nHour - 12;

         wsprintf(szTime, "%i:%02i", nHour, nMinute);

         // Now set the text of the pane.
         m_wndStatusBar.SetPaneText(
               m_wndStatusBar.CommandToIndex(ID_INDICATOR_TIME),
               LPCSTR(szTime));
         pCmdUI-&gt;Enable();
      }

   The application calls this function once when it has idle time.
   Each time the application empties its message queue, it sends a
   WM_IDLEUPDATECMDUI message (new idle time). For more information on
   idle time, please refer to Technical Note #24 in the MFC Tech Notes
   help file or to the documentation of the CWinApp::OnIdle() function
   in the "Class Library Reference, Volume 1." The application must
   call the pCmdUI-&gt;Enable() function to enable the user-interface
   item for this command. If the application doesn't enable the
   user-interface item, the pane appears in the status bar, but it
   does not display any text.

   If you compiled the program at this point, the status bar would
   display the current time in one of its panes. However, one
   implementation problem would remain. Because the application calls
   the UI Command Handler only once each time the system becomes idle,
   what happens if the application runs and the user does not interact
   with it? The application does not reset the time until it receives
   one or more messages and empties its queue (new idle time). The
   code in Step 5 addresses this situation.

</PRE><P><LI>Even though there are several methods to accomplish this, the
   simplest method takes advantage of the fact that the application
   calls the UI Command Handler only once when the application's
   message queue is emptied. Add the following statement to the
   CMainFrame::OnCreate() member function:
<P>
<P><PRE>      m_wndStatusBar.SetTimer(1, 1000, NULL);
</PRE><P>
   The CWnd::SetTimer() event generates a message in the application's
   queue every second. Even if the user does not interact with the
   application, the queue empties after processing the timer event,
   new idle time is available, and the application updates the time
   pane in its status bar. Be sure to call KillTimer() when the window is
   destroyed.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
When a modal dialog box is up, the dialog manager manages the application's
message queue. Since the dialog manager's message loop does not include
calls to do Idle time processing, the above mentioned OnUpdateTime function
never gets called. If you would like to use a modal dialog, yet still have
the time on the status bar updated, you will have to avoid using the
message queue.

<OL><P><LI>Start with the code above.

<P><LI>In mainfrm.h, add the following to the CMainFrame class definition.
<P>
<P><PRE>     UINT m_nIDTimer;
     static VOID __export CALLBACK TimerProc(HWND hwnd, UINT uMsg,
<PRE></PRE>        UINT uIDEvent, DWORD dwTime);

   NOTE: In Win32, the "__export" keyword is obsolete and will cause the
   compiler to generate a C4236 warnings in Visual C++ version 4.0 or
   later. To correct, simply remove the keyword.

</PRE><P><LI>In mainfrm.cpp, change the SetTimer() call in CMainFrame::OnCreate() to:
<P>
<P><PRE>      m_nIDTimer = ::SetTimer(NULL, 0, 1000, TimerProc);
</PRE>
<P><LI>Add a timer procedure:
<P>
<P><PRE>      VOID __export CALLBACK CMainFrame::TimerProc(HWND hwnd, UINT uMsg,
<PRE></PRE>         UINT uIDEvent, DWORD dwTime)
      {
         CMainFrame *pMainWnd = (CMainFrame *)AfxGetApp()-&gt;m_pMainWnd;
         ASSERT(uIDEvent == pMainWnd-&gt;m_nIDTimer);

         CCmdUI cui;
         cui.m_nID = ID_INDICATOR_TIME;
         cui.m_nIndex = 4;
         cui.m_pMenu = NULL;
         cui.m_pOther = &amp;pMainWnd-&gt;m_wndStatusBar;

         pMainWnd-&gt;OnUpdateTime(&amp;cui);
      }

</PRE><P><LI>In the destructor, use:
<P>
<P><PRE>      ::KillTimer(NULL, m_nIDTimer);
 </BLOCKQUOTE>


	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg MfcUI kbhowto<BR>
Technology          : kbmfc<BR>
Version             : 1.0 1.5 2.0 2.1 4.0 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

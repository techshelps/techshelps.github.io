

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: 'char *' Passed to 'const char * &amp;' Violates Type Safety </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122540">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1994/11/07">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist400 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Visual C++ incorrectly allows a pointer to be passed to a function that takes a non-const reference to a pointer to a const. This breaks C++ type safety and allows the const data assigned to the reference to be modified by the pointer after the fun...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAB3,QAP2,QBVV,QAO3,QAO2,QA56,QA55,QALZ,QAH7,QAH6,QAD7,QAKP,QAB9,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: 'char *' Passed to 'const char * &amp;' Violates Type Safety</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122540</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++ for Windows, versions 1.5 and 1.51
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0,
<P><PRE>     4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Visual C++ incorrectly allows a pointer to be passed to a function that
takes a non-const reference to a pointer to a const. This breaks C++ type
safety and allows the const data assigned to the reference to be modified
by the pointer after the function has returned.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To protect the const data, the reference should be a reference to a const
pointer to a const, that is: const char * const &amp;.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A reference may only be initialized with an lvalue expression of the same
type or a class derived from that type. If this is not the case, the
reference must be declared const.
<P>
The following sample includes a non-const reference of type const char*,
which is being initialized with an expression of type char*. The compiler
should, but does not, generate an error. The program prints this string:
<P>
<PRE>   const_ptr = Xhis is a 'const char *'

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #include &lt;iostream.h&gt;

   const char * const_ptr = "This is a 'const char *'";

   void func ( const char* &amp; reference) {
       reference = const_ptr;
   }

   void main() {
   //  char *non_const_ptr = const_ptr;  // Not allowed.
       char *non_const_ptr;

   //  *const_ptr = 'X';      // Not allowed.

       func( non_const_ptr );
       //
       //  'const char *' is violated now.
       //
       *non_const_ptr = 'X';    // Mess up first letter of string

       cout &lt;&lt; "const_ptr = " &lt;&lt; const_ptr &lt;&lt; endl;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.0c 8.00c 9.0 9.00 10.00 10.10 10.20<BR>
Keywords            : CPPIss vcbuglist400 vcbuglist500<BR>
Version             : 1.0 1.5 1.51 2.0 2.1 4.0 4.1 4.2<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

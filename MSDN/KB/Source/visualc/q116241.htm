

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Global-Register Allocation Generates Incorrect Results </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116241">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/06/14">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The use of the global-register-allocation optimization switch, /Oe, on floating-point intensive code, such as in the sample below, can generate incorrect results.  RESOLUTION  There are several methods that can be used to work around this problem: ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHH,QBE7,QBE6,QBFY,QAH4,QAR4,QAOT,QAFO,QAKP,QAAP,QA26,QBV8,QBSO,QAL3,QALZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Global-Register Allocation Generates Incorrect Results</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116241</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The use of the global-register-allocation optimization switch, /Oe, on
floating-point intensive code, such as in the sample below, can generate
incorrect results.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are several methods that can be used to work around this problem:

<UL><LI>Use the fast compiler option, /f.
<P>
   -or-

<LI>Remove the /Oe compiler option to disable global-register optimization.
<P>
   -or-

<LI>Disable optimization during the function using the optimize pragma:
<P>
<P><PRE>      #pragma optimize("",off)
</PRE><P>
<PRE>            void bad_function()
            {
            /* ... */
            }

            #pragma optimize("",on)

   -or-

</PRE><LI>Use the volatile descriptor with the variables of type double. This way,
   the variables are less likely to be optimized and the data is correctly
   maintained. To do this with the sample code shown in the "MORE
   INFORMATION" section, below, compile using the /DFIX compiler option.
<P>
   -or-

<LI>In the sample code below, call function junk() to resolve the floating-
   point error.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug with the C/C++ compiler for
MS-DOS, versions 8.0 and 8.0c. We are researching the problem and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
The problem does not occur with the 32-bit C/C++ compiler.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code can be used to demonstrate this problem:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Oe
*/

</PRE><h3>TEST.c</h3>
 
<P>
<PRE>   #include &lt;stdio.h&gt;
   #include &lt;math.h&gt;

   void junk(void)
   {
   }

   void main(void)
   {
      double x, y, x1 = 623.0, x2 = 724.0, y1 = 308.0, y2 = 244.0;
      double angle1 = 325, angle2 = 265;
   #ifdef FIX
      volatile double m1 = -0.70, m2 = 11.43;
   #else
      double m1 = -0.70, m2 = 11.43;
   #endif

      m1 = tan( (double)angle1 / 180.0 * 3.1415926535 );
      m2 = tan( (double)angle2 / 180.0 * 3.1415926535 );

      if( fabs( m1 ) &gt; 99999 )
      {
         x = x1;
         y = m2 * ( x - x2 ) + y2;
      }
      else if( fabs( m2 ) &gt; 99999 )
      {
         x = x2;
         y = m1 * ( x - x1 ) + y1;
      }
      else
      {
      // Bad optimizations occur in this code
      // Uncomment this line to fix the problem
      // junk();
         x = ( m1 * x1 - m2 * x2 - y1 + y2 ) / ( m1 - m2 );
         y = m1 * ( x - x1 ) + y1;
      }
      printf ("x = %f, y = %f\n",x, y);
   }

</PRE><h3>Output</h3>
 
<P>
<PRE>   x = -723.445934, y = 1250.791593

</PRE><h3>Correct Output</h3>
 
<P>
<PRE>   x = 723.445934, y = 237.667000
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 8.00 8.00c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CodeGen<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

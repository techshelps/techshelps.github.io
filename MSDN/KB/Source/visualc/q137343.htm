

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VB Automation of Visual C++ Server Using OBJ1.OBJ2.prop Syntax </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137343">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1995/09/25">
<META NAME="Keywords" CONTENT="MfcOLE kbcode kbinterop kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  It is often necessary to access properties within nested objects exposed by OLE Automation. The Visual Basic syntax is:     OBJ1.OBJ2.Property  This article demonstrates the creation of a simple OLE Automation server with Visual C++, accessible fro...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QBWS,QA2K,QAJ8,QA56,QA55,QA9Q,QAUD,QBFY,QAH4,QAW6,QABO,QAUJ,QA5F V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VB Automation of Visual C++ Server Using OBJ1.OBJ2.prop Syntax</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137343</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50 1.51 1.52 | 2.00 2.10 2.20 4.00 4.10
<PRE>WINDOWS        | WINDOWS NT
</PRE>kbole kbprg kbinterop kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2,
      4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is often necessary to access properties within nested objects exposed by
OLE Automation. The Visual Basic syntax is:
<P>
<PRE>   OBJ1.OBJ2.Property

</PRE>This article demonstrates the creation of a simple OLE Automation server
with Visual C++, accessible from Visual Basic, that exposes such an object.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following steps demonstrate how to create a Visual C++ OLE Automation
server that allows Visual Basic to use the OBJ1.OBJ2.Property syntax.
<P>
<P><h3>Steps to Create the Visual C++ OLE Automation Server</h3>
 

<OL><P><LI>Create an AppWizard-generated project called AutoServ with OLE
   Automation enabled.

<P><LI>Once the project has been generated, start ClassWizard.

<P><LI>Click the OLE Automation tab.

<P><LI>Click the Add Class button, enter the following values, and then click
   Create Class:
<P>
<PRE>   Class Name:    nested
   Class Type:    CCmdTarget
   Check:         OLE Automation

</PRE><P><LI>Click the ClassWizard's OLE Automation tab. Set the Class Name to
   nested, click the Add Property button, enter the following values, and
   then click OK:
<P>
   External Name: Value
<PRE>   Type:          long

</PRE><P><LI>Change the Class Name in ClassWizard to CAutoServDoc. If you are
   prompted to save changes, click Yes. Then click the Add Method button,
   enter the following values, and click OK:
<P>
   External Name: Nested
<PRE>   Return Type:   LPDISPATCH

</PRE><P><LI>Click OK to accept the additions created by ClassWizard.

<P><LI>Open the project's AutoServDoc.h file, and add the following line to
   the beginning of the file:
<P>
<PRE>   #include "nested.h"

</PRE><P><LI>To the same file, add a public member variable m_nested of type nested.
   A pointer mechanism could have been used to maintain the nested class;
   however, for this example, the chosen method will automatically create
   and destroy the nested object within the Documents constructor and
   destructor respectively.

<P><LI>Open the project's nested.h file, and modify the class so that the
<P><PRE>    constructor and destructor are public methods.
</PRE>
<P><LI>Open the projects AutoServDoc.cpp file, and modify the Nested Method
<P><PRE>    as follows:
</PRE><P>
<P><PRE>    LPDISPATCH CAutoServDoc::Nested()
    {
       //TODO: Add your dispatch handler code here
       return m_nested.GetIDispatch(TRUE);
    }
</PRE>
<P><LI>Build the project, and then run AutoServ.exe to register the server.
<P>
</OL><h3>Steps to Test the Server in Visual Basic</h3>
 

<OL><P><LI>Start a new project in Visual Basic that will be used to test the OLE
   Automation server.

<P><LI>On the View menu, click Code.

<P><LI>In the Object combo box, select (general).

<P><LI>Enter the following code:
<P>
   Dim Server As object

<P><LI>Select Form in the Object combo box. Modify the Sub procedure as
   follows:
<P>
<PRE>   Sub Form_Load ()
      Set Server = CreateObject("autoserv.document")
      Server.Nested.Value = 10
      x = Server.Nested.Value
   End Sub

</PRE><P><LI>Add x and Server.Nested.Value to the Visual Basic watch window, so that
   you can observe the changes while stepping into the Visual Basic
   program.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.50 1.51 1.52 2.00 2.10 2.20 2.50 2.51 2.52<BR>
3.00 3.10 3.20 4.00 4.10 vc vb client controller<BR>
KBCategory: kbole kbinterop kbprg kbcode<BR>
KBSubcategory: MfcOLE<BR>
Keywords            : MfcOLE kbcode kbinterop kbole kbprg<BR>
Technology          : kbMfc<BR>
Version             : 1.50 1.51 1.52 | 2.00 2.10 2.20<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

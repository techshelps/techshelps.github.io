

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG : Destructor Called Erroneously </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131148">
<META NAME="KBModify" CONTENT="1997/07/18">
<META NAME="KBCreate" CONTENT="1995/06/04">
<META NAME="Keywords" CONTENT="CPPIss kb16bitonly kbbuglist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The destructor may be called for an object not created. This is not a common problem. It happens under a specific circumstances and the sample code in the  More Information  section demonstrates this behavior.  RESOLUTION  Two workarounds are sugge...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAKC,QBC6,QAUD,QANY,QAKM,QAG8,QBDM,QAEF,QAIF,QBVV,QBFY,QA4Q,QAH4,QAHT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG : Destructor Called Erroneously</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131148</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbprg kbbuglist
<P>
 
The information to this article applies to :

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) incuded with:
   Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The destructor may be called for an object not created. This is not a
common problem. It happens under a specific circumstances and the sample
code in the "More Information" section demonstrates this behavior.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Two workarounds are suggested in the sample code (see NOTE #1 and NOTE #2).
These workarounds may change the intended behavior of the code.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Demonstrate Problem</h3>
 
<P>
<PRE>/* No special compile options needed. */

#include &lt;iostream.h&gt;

//AString

int stringNumber = 0;

void outputDebug(char *className, char *func, int number)
</PRE>{
<P>
<PRE>   cout &lt;&lt; "in " &lt;&lt; className  &lt;&lt; "::" &lt;&lt; className;
   cout &lt;&lt; "() #" &lt;&lt; number  &lt;&lt; " " &lt;&lt; func &lt;&lt; endl;

</PRE>}
<P>
class AString{
<P>
public:
<PRE>     AString();
     AString(const AString &amp;orig);
     virtual ~AString();

     AString &amp;operator=(const AString &amp;orig);

</PRE>protected:
<PRE>     int number;
</PRE>private:
};
<P>
AString::AString()
{
<PRE>   number = ++stringNumber;
   outputDebug("AString", "copy1 constructor", number);
</PRE>}
<P>
AString::AString(const AString &amp;orig)
{
<PRE>   number = ++stringNumber;
   outputDebug("AString", "copy2 constructor", number);
</PRE>}
<P>
AString::~AString()
{
<PRE>   outputDebug("AString", "Destructor", number);
</PRE>}
<P>
AString &amp;AString::operator=(const AString &amp;orig)
{
<PRE>   outputDebug("AString", "operator=", number);
   return *this;
</PRE>}
<P>
<PRE>//ACompressor

</PRE>class ACompressor {
public:
<PRE>       ACompressor(AString&amp; base);
       ~ACompressor();
</PRE>};
<P>
inline ACompressor::ACompressor(AString&amp; baseObject){
<PRE>                    outputDebug("ACompressor", "Constructor", 33);}

</PRE>inline ACompressor::~ACompressor(){ outputDebug("ACompressor",
"Destructor",
<P>
<PRE>                                    33);}

//APath

</PRE>class APath : private AString{
public:
<PRE>        APath() : AString(){}
        APath(char *) : AString(){}

        APath &amp;operator =(const APath &amp;path);

        //NOTE #1: if the line below is removed, the extraneous
        //call to AString::~AString() is not generated.
         inline operator AString() const { return *(AString *) this;}

</PRE>protected:
private:
<PRE>         APath(const APath &amp;path);
 };

</PRE>APath &amp;APath::operator =(const APath &amp;orig)
{
<PRE>        //NOTE #2:if the line below is removed OR the one in the NOTE #1 is
        //removed, the extraneous AString::~AString() call is not
        //generated.
        ACompressor pc(*this);

        //NOTE #3: The line below generates a call to
        //APath::operator AString().
        AString::operator=(orig);


        //NOTE #4: Extra AString::~AString() destructor call made here
        //Assembly listing shows the extra destructor call.

        return *this;
}


int main()

</PRE>{
<PRE>      char *filename = "c:\\someprog.exe";

      APath exePath;
      exePath = filename;

      return 0;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 1.51 1.52 8.00 8.00c<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubcategory: CPPIss<BR>
Keywords            : CPPIss kb16bitonly kbbuglist kbprg<BR>
Version             : 1.00 1.50 1.51 1.52<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

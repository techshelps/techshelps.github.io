

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Change the MS-DOS Memory Allocation Strategy </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q58919 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/02/20">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When MS-DOS allocates memory for your program, it uses a firstfit allocation strategy by default. You can change MS-DOS's default strategy to a bestfit, lastfit, or back to firstfit strategy with a call to Interrupt 21h Function 58h.  MORE INFORMAT...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBW6,QA4Q,QAEF,QALW,QBFY,QAYA,QAHC,QAGI,QA63,QAY5,QAAP,QAB4,QAI4,QBE7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Change the MS-DOS Memory Allocation Strategy</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q58919 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 1.00 1.50
<PRE>MS-DOS                      | WINDOWS
</PRE>kbprg
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When MS-DOS allocates memory for your program, it uses a firstfit
allocation strategy by default. You can change MS-DOS's default
strategy to a bestfit, lastfit, or back to firstfit strategy with a
call to Interrupt 21h Function 58h.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A firstfit strategy forces MS-DOS to search from low addresses in
memory to high addresses, and allocate the first available block of
memory large enough for the requested allocation.
<P>
A bestfit strategy forces MS-DOS to search all addresses in memory and
allocate the smallest block still large enough to fill the requested
allocation.
<P>
A lastfit strategy forces MS-DOS to search from high addresses in
memory to low addresses, and allocate the first available block of
memory large enough for the requested allocation.
<P>
The bestfit algorithm is the slowest to execute since all free memory
is searched, but results in the least memory fragmentation during
multiple allocations and frees. Conversely, the firstfit and lastfit
strategies are fastest to execute, but result in a higher degree of
memory fragmentation.
<P>
Note that changing the allocation strategy only noticeably changes the
way that a call to _dos_allocmem(), halloc(), or Interrupt 21h
Function 48h allocates memory from MS-DOS. The malloc() and calloc()
families of routines allocate memory from the memory pool assigned to
your program by MS-DOS. They are affected by MS-DOS's internal
allocation strategy only when the free memory pool for your program is
empty and MS-DOS is required to add new memory to your program's pool.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* The following two functions use in-line assembly to set and
   get the MS-DOS allocation strategy:
*/

#define ALLOCATION_STRATEGY 0x58
#define GET_STRATEGY        0x00
#define SET_STRATEGY        0x01

/********************************************************/
/* Set_fittype - Set MS-DOS allocation strategy         */
/* Parameters : strategy_type, defined as:              */
/*          FIRSTFIT = 0x00                             */
/*          DEFAULT  = 0x00                             */
/*          BESTFIT  = 0x01                             */
/*          LASTFIT  = 0x02                             */
/* Return Value :                                       */
/*          -2 = Invalid Allocation strategy            */
/*          -1 = Invalid Function to Int 21h Func 58h   */
/*               Should never happen.                   */
/*           Otherwise, returns newly set strategy      */
/********************************************************/

int set_fittype ( unsigned strategy_type )
</PRE>{
<PRE>    int return_value;

    if (( strategy_type &lt; 0 ) || ( strategy_type &gt; 2))
    {
        return ( -2 ) ;
    }
    else
    {
        _asm {
                mov     ah, ALLOCATION_STRATEGY
                mov     al, SET_STRATEGY
                mov     bx, strategy_type
                int     21h

                jnc     no_error            ; Branch if no error
                mov     ax, -1              ; Return -1 on error

           no_error:
                mov     return_value, ax    ; -1 if error, otherwise
                                            ; returns current strategy
            }
    }
    return ( return_value ) ;
</PRE>}
<P>
<PRE>/********************************************************/
/* Get_fittype - Returns current allocation strategy.   */
/* Parameters : None                                    */
/* Return Value :                                       */
/*           0 = Firstfit strategy                      */
/*           1 = Bestfit strategy                       */
/*           2 = Lastfit strategy                       */
/********************************************************/

int get_fittype ( void )
</PRE>{
<PRE>    unsigned return_value;

    _asm {
             mov     ah, ALLOCATION_STRATEGY
             mov     al, GET_STRATEGY
             int     21h
             jnc     no_error            ; Branch if no error
             mov     ax, -1              ; Return -1 on error

         no_error:
             mov     return_value, ax    ; -1 on error, otherwise
                                         ; current strategy
                 }

        return ( return_value ) ;
}

</PRE>If your compiler supports in-line assembly, you should use the above
functions because of their speed since they do not require the C
overhead.
<P>
If you are using a version of the compiler that does not support in-
line assembly, such as C 5.0, C 5.1, QuickC 1.0, and QuickC 1.01, the
above functions can be translated as follows:
<P>
<PRE>#include &lt;dos.h&gt;  /* as well as the other #defines listed above */

int set_fittype ( unsigned strategy_type )
</PRE>{
<PRE>    union REGS inregs, outregs;
        int return_value;

        if (( strategy_type &lt; 0 ) || ( strategy_type &gt; 2))
        {
                return ( -2 ) ;
        }
        else
        {
        inregs.h.ah = ALLOCATION_STRATEGY ;
        inregs.h.al = SET_STRATEGY ;
        inregs.x.bx = strategy_type ;
        int86 ( 0x21, &amp;inregs, &amp;outregs ) ;

        if ( outregs.x.cflag )
            return ( -1 ) ;
        else
            return ( outregs.x.ax ) ;
        }
}

int get_fittype ( void )
</PRE>{
<PRE>    union REGS inregs, outregs;
    unsigned return_value;

    inregs.h.ah = ALLOCATION_STRATEGY;
    inregs.h.al = GET_STRATEGY;

    int86 ( 0x21, &amp;inregs, &amp;outregs ) ;

    if ( outregs.x.cflag )
        return ( -1 ) ;
    else
        return ( outregs.x.ax ) ;
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 5.10 6.00 6.00a 6.00ax 7.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

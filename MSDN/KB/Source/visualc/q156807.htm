

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for accumulate, copy, vector::push_back Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156807">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/01">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the accumulate, copy, and vector::push_back STL functions in Visual C++.  MORE INFORMATION  Required Header                                Prototype ---------     template                                ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAML,QBFY,QATX,QADF,QAY5,QAPF,QA9N,QA6N,QA56,QA55,QASB,QAE5,QABB,QAB4,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for accumulate, copy, vector::push_back Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156807</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the accumulate, copy, and
vector::push_back STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;numeric&gt;
   &lt;functional&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class InputIterator, class _TYPE&gt; inline
      _TYPE accumulate(InputIterator first, InputIterator last, _TYPE init)

   template&lt;class InputIterator, class _TYPE, class BinaryOperator&gt; inline
      _TYPE accumulate(InputIterator first, InputIterator last, _TYPE init,
                       BinaryOperator binary_op)

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The accumulate function initializes an accumulator acc with an initial
value init and then modifies it with acc = acc + *i or acc =
binary_op(acc,*i) for every iterator i in the range [first, last) in order.
<P>
Normally, the accumulate function is used to sum the numeric elements of a
vector. However, it can also be used to do other useful work such as
concatenate a vector of strings.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   ///////////////////////////////////////////////////////////////////////
   //
   // Compile options needed: /GX
   //
   // accumulate.cpp : Demonstrates the use of accumulate()
   //
   // Description of accumulate(first,last,init)
   //                accumulate(first,last,init,binary_op):
   //
   //    Initializes the accumulator acc with the initial value init
   //        acc = init
   //    and then modifies it with
   //        acc  =  acc + *i
   //    or
   //        acc = binary_op(acc, *i)
   //    for every iterator i in the range [first, last) in order.
   //
   // Written by Shaun Miller
   // of Microsoft Product Support Services, Languages Developer Support.
   // Copyright (c) 1996 Microsoft Corporation. All rights reserved.
   ///////////////////////////////////////////////////////////////////////

   // turn off warning about symbols too long for debugger
   #pragma warning (disable : 4786)

   #include &lt;iostream&gt;
   #include &lt;numeric&gt;
   #include &lt;functional&gt;
   #include &lt;vector&gt;
   #include &lt;iterator&gt;
   #include &lt;string&gt;

   typedef vector &lt; float, allocator &lt; float &gt; &gt; FloatArray;
   typedef vector &lt; string, allocator &lt; string &gt; &gt; StringArray;
   typedef ostream_iterator &lt;float, char, char_traits &lt;char&gt; &gt;
   FloatOstreamIt;

   void main ()
   {
       // a vector of floats
       FloatArray rgFA;

       // an ostream iterator that outputs a float to cout terminated
       // by a space
       FloatOstreamIt OstreamIt(cout," ");

       // Initialize the array to 1,1/2,1/3,...
       for (int i=0; i&lt;10; i++) rgFA.push_back(1.0f/(i+1));

       // Print the array
       copy(rgFA.begin(),rgFA.end(),OstreamIt);
       cout &lt;&lt; endl;

       // Sum the array
       cout &lt;&lt; "The sum of 1 + 1/2 + 1/3 + ... + 1/10 is "
            &lt;&lt; accumulate(rgFA.begin(),rgFA.end(),0.0f)
            &lt;&lt; endl;

       // Compute the product of the array
       cout &lt;&lt; "The product of 1 * 1/2 * 1/3 * ... * 1/10 is "
            &lt;&lt; accumulate(rgFA.begin(),rgFA.end(),1.0f,times&lt;float&gt;())
            &lt;&lt; endl;

       // Initialize array of strings
       StringArray rgs;
       rgs.push_back("This ");
       rgs.push_back("is ");
       rgs.push_back("one ");
       rgs.push_back("sentence. ");

       // Concatenate the strings in the array &amp; print the sentence
       cout &lt;&lt; "The concatenated vector of strings: "
            &lt;&lt; accumulate(rgs.begin(),rgs.end(),string(""))
            &lt;&lt; endl;
   }

</PRE>Program Output is:
<P>
1 0.5 0.333333 0.25 0.2 0.166667 0.142857 0.125 0.111111 0.1
The sum of 1 + 1/2 + 1/3 + ... + 1/10 is 2.92897
The product of 1 * 1/2 * 1/3 * ... * 1/10 is 2.75573e-007
The concatenated vector of strings: This is one sentence.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample accumulate copy push_back<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

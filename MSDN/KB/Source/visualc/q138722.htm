

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: LoadBarState and SaveBarState Increase .Ini File Size </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138722">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/10/25">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbcode kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The size of the .ini file associated with an application keeps increasing when CFrameWnd::LoadBarState and CFrameWnd::SaveBarState functions are used. The docktool sample can be used to reproduce the behavior. Open and close the sample application ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QALS,QA26,QAHT,QAY5,QAUR,QAR4,QAI4,QA0B,QA4Q,QAMA,QBSO,QAKJ,QBWP,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: LoadBarState and SaveBarState Increase .Ini File Size</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138722</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10
WINDOWS NT
kbprg kbbuglist kbfixlist kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The size of the .ini file associated with an application keeps increasing
when CFrameWnd::LoadBarState and CFrameWnd::SaveBarState functions are
used. The docktool sample can be used to reproduce the behavior. Open and
close the sample application without modifying the toolbars. The .ini file
size increases every time the application is closed.
<P>
<P><h2>CAUSE</h2>
 
<P>
This behavior is due to a bug in one of the helper functions of
CControlBar. CFrameWnd::LoadBarState calls this function to set the state
of a control bar. This function adds a trailing NULL element to the
internal structure maintaining state information, without checking if one
is already present. CFrameWnd::SaveBarState stores this extra element in
the .ini file. The next time CFrameWnd::LoadBarState is called, another
NULL element is added to the state information and the cycle continues.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To prevent the .ini file from growing, remove the extra element from file.
This can be done after the information has been saved. The "Sample Code to
Resolve Problem" section in this article shows how to implement this. It
reads the information stored in the .ini file, strips extra trailing NULL
elements, and saves the information back to the file. The code uses classes
private to MFC, and the preprocessor directives ensure that the code is
compatible with future versions of MFC.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem was corrected in the MFC
libraries included with Microsoft Visual C++, 32-bit Edition, version 2.2.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code has been placed in the context of the DockTool sample.
The modified code is between the
<P>
#if _MFC_VER &lt; 0x0320
...
#endif
<P>
directives. Please note that these directives are essential for the code to
be compatible with later versions of MFC.
<P>
<P><h3>Sample Code to Resolve Problem</h3>
 
<P>
<PRE>// mainfrm.cpp : implementation of the CMainFrame class
//

#include "stdafx.h"

</PRE>#if _MFC_VER &lt; 0x0320
<PRE>// IMPORTANT : Conditional compilation directives are
// necessary to maintain compatibility with future versions of MFC

#include &lt;afxpriv.h&gt;
</PRE>#endif
<P>
...
<P>
#if _MFC_VER &lt; 0x0320
<PRE>// IMPORTANT : Conditional compilation directives are
// necessary to maintain compatibility with future versions of MFC

///////////////////////////////////////////////////////////////////////////
//

// _AFX_BARINFO - used for docking serialization

</PRE>class _AFX_BARINFO : public CObject
{
public:
<PRE>// Implementation
   _AFX_BARINFO();

// Attributes
   UINT m_nBarID;
   BOOL m_bVisible;
   BOOL m_bFloating;
   BOOL m_bHorz;
   BOOL m_bDockBar;
   CPoint m_pointPos;
   CPtrArray m_arrBarID;
   CControlBar* m_pBar;

   virtual void Serialize(CArchive&amp; ar);
   BOOL LoadState(LPCTSTR lpszProfileName, int nIndex);
   BOOL SaveState(LPCTSTR lpszProfileName, int nIndex);
</PRE>};
<P>
#endif
<P>
<PRE>void CMainFrame::OnClose()
</PRE>{
<PRE>   // SaveBarState saves everything but the number of Columns in the
   // Palette; you need to do that yourself.
   SaveBarState(_T("General"));

</PRE>#if _MFC_VER &lt; 0x0320
<PRE>// IMPORTANT : Conditional compilation directives are
// necessary to maintain compatibility with future versions of MFC

   CDockState state;
   state.LoadState(_T("General"));
      for (int i = 0; i &lt; state.m_arrBarInfo.GetSize(); i++)
   {
      _AFX_BARINFO* pInfo = (_AFX_BARINFO*)state.m_arrBarInfo[i];

      int nSize = pInfo-&gt;m_arrBarID.GetSize();
      while ((nSize!=0) &amp;&amp; (pInfo-&gt;m_arrBarID[nSize-1]==NULL))
      {
         nSize--;
         pInfo-&gt;m_arrBarID.RemoveAt(nSize);
      }
      if (nSize)
         pInfo-&gt;m_arrBarID.InsertAt(nSize, (void*)NULL);
   }
   state.SaveState(_T("General"));
</PRE>#endif
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 3.0 3.1 3.00 3.10<BR>
KBCategory: kbprg kbbuglist kbfixlist kbcode<BR>
KBSubcategory: MfcUI
<P>

Keywords          : MfcUI kbbuglist kbcode kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 2.00 2.10<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

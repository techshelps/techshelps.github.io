

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Can't Watch Values of Nondimensioned Array Parameters </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117161">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/06/22">
<META NAME="Keywords" CONTENT="kb16bitonly WBDebug kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When trying to view an array of pointers that is passed to a function as a nondimensioned array, the debugger cannot display the array's values or displays incorrect values. This happens with both CodeView and the Visual C++ integrated debugger. Th...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATK,QATL,QAR4,QAHE,QAY5,QAHH,QAKD,QAKP,QBV8,QBFY,QA56,QA55,QAM1,QAKR,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Can't Watch Values of Nondimensioned Array Parameters</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117161</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51
WINDOWS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Visual Workbench Integrated Debugger included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, and 1.51
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When trying to view an array of pointers that is passed to a function as a
nondimensioned array, the debugger cannot display the array's values or
displays incorrect values. This happens with both CodeView and the Visual
C++ integrated debugger. The source file must be a C++ source file with a
.CPP or .CXX extension.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
This problem is actually a special case of the one described in Knowledge
Base article <B><A HREF="../VISUALC/Q112984.htm">Q112984</A></B>. The workaround is the same as in <B><A HREF="../VISUALC/Q112984.htm">Q112984</A></B>, with an
additional step:
<P>
Declare the function argument as a pointer rather than an array, as stated
in article <B><A HREF="../VISUALC/Q112984.htm">Q112984</A></B>. For example, change a declaration that uses the array
syntax:
<P>
<PRE>   void Function( char* Array[5] )

</PRE>to a declaration that uses pointer syntax:
<P>
<PRE>   void Function( char Array )

</PRE>Additionally, when you have traced into the function using the parameter,
you must use an actual array subscript to access elements of the array in
the watch window. For the example above, if you want to watch the second
element, typing "Array[1],s" in the watch window causes the correct string
to display (the ",s" format specifier is only necessary to view the
variable as a string).
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. This problem was corrected in Visual C++ 1.52.
<P>
This is not a problem in the 32-bit debugger.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample demonstrates this problem. Step into the functions
"ShowString()" and "ShowDoubles()", expanding "ary_pchar" and "dA",
respectively, in the locals window. The values are not displayed correctly
here or in the watch window if a watch is set on them.
<P>
<P><h2>Sample Code</h2>
 
<P>
<PRE>// compiler options: /Zi /Od

   #include &lt;stdio.h&gt;

   // void ShowString( char ary_pchar )  // switch these two lines to
   void ShowString( char* ary_pchar[] )  //   fix the problem
   {
       printf( "%s", ary_pchar[1] );     // break here
   }

   // void ShowDoubles( double dA )      // switch these two lines to
   void ShowDoubles( double *dA[] )      //   fix the problem
   {
       int i;
       for (i = 0; i &lt; 5; i++) {         // break here
           printf( "%lf\n", *dA[i] );
       }
   }

   void main(void)
   {
       char  str[] = "TEST\n";
       char* strArry[5];
       double d[5], *pD[5];
       int i;

       strArry[1] = str;
       for (i = 0; i &lt; 5; i++) {
           d[i] = i;
           pD[i] = &amp;d[i];
       }

       ShowString( strArry );
       ShowDoubles(pD);
       for (i = 0; i &lt; 5; i++) {
           printf( "%lf\n", d[i] );
       }
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: WBDebug<BR>
Keywords          : kb16bitonly WBDebug kbbuglist kbfixlist kbtool<BR>
Version           : 1.00 1.50 1.51<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

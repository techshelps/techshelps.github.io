

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Convert Floating Point Number to String in DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88266 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1992/08/20">
<META NAME="Keywords" CONTENT="CRTIss kb16bitonly kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  You may want to convert a floating point number to a string in a dynamic link library (DLL) built with Microsoft Visual C++ version 1.0. The functions available to handle float-to-string conversion in a DLL are the C run-time functions _ecvt() and ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKC,QAH4,QBC9,QBC8,QBC6,QANO,QAG8,QAHH,QDL9,QBWQ,QBWO,QBWN,QAY5,QATX,QDNN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Convert Floating Point Number to String in DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88266 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbprg kbcode
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
   Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You may want to convert a floating point number to a string in a
dynamic link library (DLL) built with Microsoft Visual C++ version
1.0. The functions available to handle float-to-string conversion in a
DLL are the C run-time functions _ecvt() and _fcvt(), and will work
correctly in code built with all memory models.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below demonstrates how to use _ecvt() and _fcvt() to
convert a float to a string. These two functions work almost
identically. The only difference is that the count parameter for
_ecvt() specifies the number of digits to convert in the entire number
(both the whole and fractional parts of the number), whereas the count
parameter of the _fcvt() function specifies the number of digits after
the decimal place (not including the whole part of the number.)
<P>
The functions _gcvt() and sprintf() are not available in the run-time
libraries for a DLL.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed:
</PRE>** Select Windows DLL for Program Type in the Project dialog box under
** the Options menu. This code works in all memory models.
<PRE>*/

#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;

</PRE>LPSTR far FloatToString(LPSTR buff,double r,int prec)
{
<PRE> char *buffer;
 LPSTR startbuffptr;
 static int dec,sign;  // must use static, don't assume SS==DS
 int i;

 startbuffptr = buff;

 buffer = fcvt((double)r,prec,&amp;dec,&amp;sign);
 // buffer = ecvt((double)r,prec,&amp;dec,&amp;sign);

// copy the negative sign if less than zero
 if (sign)
    *buff++ = '-';

// copy the non-fractional part before the decimal place
 for(i=0; i&lt;dec; i++)
    *buff++ = *buffer++;

 *buff++ = '.';  // copy the decimal point into the string
 *buff = '\0';   // don't assume NULL termination

// copy the fractional part after the decimal place
 lstrcat(buff,buffer);

 return startbuffptr;
</PRE>}
<P>
<P>
<P><h3>Module Definition File (.DEF)</h3>
 
<P>
LIBRARY FLOAT
DESCRIPTION 'FLOAT.DLL -- a dll using ecvt() and fcvt()'
EXETYPE WINDOWS
<P>
STUB 'WINSTUB.EXE'
<P>
CODE PRELOAD MOVEABLE NONDISCARDABLE
DATA PRELOAD MOVEABLE SINGLE
<P>
HEAPSIZE 1024
<P>
EXPORTS
<PRE>    WEP @1 RESIDENTNAME
    _FloatToString @2
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: CRTIss<BR>
Keywords            : CRTIss kb16bitonly kbcode kbprg<BR>
Version             : 1.00 1.50<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

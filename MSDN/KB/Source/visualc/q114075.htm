

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: M6110 Error When Using 'switch' Statement with /Oe </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114075">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/04/24">
<META NAME="Keywords" CONTENT="CLIss kb16bitonly kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In certain cases the C/C++ compiler will generate incorrect code when the /Oe (Enable Global Register Allocation) optimization is used on source code which does floating point calculations before a switch statement. The compiler does not correctly ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAAP,QBFY,QBC9,QBC8,QANO,QAB4,QAR4,QAG8,QAKP,QAKR,QAHE,QA4Q,QA26,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: M6110 Error When Using 'switch' Statement with /Oe</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114075</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00
MS-DOS | WINDOWS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P>
<P><PRE>    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In certain cases the C/C++ compiler will generate incorrect code when
the /Oe (Enable Global Register Allocation) optimization is used on
source code which does floating point calculations before a switch
statement. The compiler does not correctly generate code to clear
the floating point stack after the floating point calculations have
been performed. This causes a floating point stack overflow when the
calculations are done repeatedly. When the program is run it will
fail and display the following error message:
<P>
<PRE>    run-time error M6110: MATH
    - floating-point error: stack overflow

</PRE>The problem can be reproduced by building and running the sample code
shown below.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around the problem, use the #pragma optimize() directive to
disable /Oe for the function where the M6110 error occurs. This is
indicated in the sample code below. Alternatively, the module
containing the function could be compiled without the /Oe option.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed above. This problem was corrected in Visual C++ version 1.5.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Oe (or /O2, or /Ox, both include /Oe)
*/

#include &lt;stdio.h&gt;

/*    uncomment the #pragmas to correct the problem
</PRE>#pragma optimize( "e", off )
<PRE>*/

int main()
</PRE>{
<PRE>    int count;
    float flt1, flt2;

    for ( count = 1; count &lt;= 50; count++ )
    {
        flt1 = 1.5F * count;
        flt2 = 2.0F * count;

        switch ( count )
        {
            default: printf( "In loop...\n" );
        }
    }

    printf( "Test was successful!\n" );
    return (int)( flt1 + flt2 );
</PRE>}
<P>
<PRE>/*
</PRE>#pragma optimize( "e", on )
<PRE>*/
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 7.00 8.00 1.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords          : CLIss kb16bitonly kbbuglist kbfixlist kbtool<BR>
Version           : 7.00   | 1.00<BR>
Platform          : MS-DOS WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

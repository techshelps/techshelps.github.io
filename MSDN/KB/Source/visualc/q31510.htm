

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Bitwise Complement Operator Appears to Fail on Comparison </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q31510 ">
<META NAME="KBModify" CONTENT="1997/08/26">
<META NAME="KBCreate" CONTENT="1988/06/10">
<META NAME="Keywords" CONTENT="CLIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The bitwise complement operator (~) appears to work incorrectly when an application uses it to compare unsigned characters.  CAUSE =====  Before the compiler uses the bitwise complement operator, it performs the  usual arithmetic conversions  which...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKM,QBFY,QAOT,QA4Q,QAG7,QALG,QANY,QA5C,QAKD,QDKW,QAH4,QAJQ,QAEQ,QBE7,QBE6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Bitwise Complement Operator Appears to Fail on Comparison</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q31510 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
   - Microsoft C for OS/2, versions 6.0, 6.0a
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The bitwise complement operator (~) appears to work incorrectly when
an application uses it to compare unsigned characters.
<P>
<P><h2>CAUSE</h2>
 
<P>
Before the compiler uses the bitwise complement operator, it performs
the "usual arithmetic conversions" which are described in detail in
the "C Language Reference" manual.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Cast the complemented operand to an unsigned character. This prevents
the compiler from performing the arithmetic conversions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code example returns the value "failed" even though it
appears that values "j" and "~i" should be the same.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
    * Compile options needed: none
    */

   #include &lt;stdio.h&gt;

   main()
   {
      unsigned char i = 4;
      unsigned char j = ~i;

      if (j == ~i)
         printf("passed\n");
      else
         printf("failed\n");
   }

</PRE>The compiler performs the following four steps to evaluate the
expression "if (j == ~i)":

<OL><P><LI>The compiler converts the operand "i" to an unsigned integer.

<P><LI>The compiler complements the bits of this unsigned integer. On
   systems that use 16-bit integers, the high byte becomes 0xFF; on
   systems that use 32-bit integers, the three high bytes become
   0xFFFFFF.

<P><LI>The compiler converts the operand "j" to an unsigned integer. On
   systems that use 16-bit integers, the high byte becomes 0x00; on
   systems that use 32-bit integers, the three high bytes become
   0x000000.

<P><LI>The compiler compares the two operands.
<P>
</OL>The comparison fails because the high bytes of the operands differ.
<P>
To work around this situation, modify the comparison as follows:
<P>
<PRE>   if (j == (unsigned char)~i)
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords          : CLIss<BR>
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0; OS/2:6.0,6.00a;  WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,4.0,5.0<BR>
Platform          : MS-DOS NT OS/2 WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Truncated String from #pragma comment(exestr </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116445">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/06/20">
<META NAME="Keywords" CONTENT="CLIss vcfixlist400">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you use  #pragma comment(exestr,         )  to place a text string,         , into an executable module, the entire string is sometimes not included.  CAUSE =====  Using Microsoft C/C++ version 7.0, Visual C++ for Windows, or Visual C++ 32- bi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QATX,QBFY,QA56,QA55,QAY4,QAPN,QACI,QDL9,QBWO,QBWN,QAH4,QBVV,QAR4,QANU V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Truncated String from #pragma comment(exestr</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116445</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you use "#pragma comment(exestr, &lt;string&gt;)" to place a text string,
&lt;string&gt;, into an executable module, the entire string is sometimes not
included.
<P>
<P><h2>CAUSE</h2>
 
<P>
Using Microsoft C/C++ version 7.0, Visual C++ for Windows, or Visual C++ 32-
bit versions 1.0 and 2.x, the problem occurs when an attempt is made to
embed a carriage-return (0x0D) or line-feed (0x0A) character somewhere
other than at the end of the string.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
A compiler specific workaround exists for this problem. For Microsoft C/C++
version 7.0, Visual C++ for Windows, or Visual C++ 32-bit versions 1.0 and
2.x, place each carriage-return or line-feed character at the end of the
string.
<P>
The sample code in the MORE INFORMATION section below, demonstrates two
other methods to work around this problem. The first method is to declare a
character array in the application that contains the string to embed in the
file. This method places the string into the application's data segment.
The second method is similar to the first except that the compiler places
the string into the application's code segment, and therefore it does not
consume space in the data segment. Either of these methods loads the string
into memory when the application runs.
<P>
A fourth method is available to applications developed for the Microsoft
Windows operating system. Place the string into a STRINGTABLE resource. If
you want, you can specify the LOADONCALL attribute so that the string is
not loaded into memory until the application requires it.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. This bug was corrected in Visual
C++ version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The #pragma comment(exestr, &lt;string&gt;) statement directs the compiler to
place &lt;string&gt; into the object file. The linker places the string into the
executable file. You can find the string by using an application that
searches executable files for strings. However, the loader does not load
the string into memory. You can use comment strings to store a version
number or similar information in your executable file.
<P>
You can use the following sample code to demonstrate the problem:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

      #define __CR_LF__ "\x0d\x0a"
   /*
    * With Microsoft C/C++ version 7.0, Visual C++ for Windows,
    * or Visual C++ 32-bit versions 1.0 and 2.x, the first two
    * #pragma commented strings are placed in the executable,
    * the third is not.
    */

   #pragma comment(exestr, "This Comment EXESTR is OK" __CR_LF__)
   #pragma comment(exestr, "****************")
   #pragma comment(exestr, __CR_LF__ "This Comment EXESTR is NOT")

   /*
    * Other methods
    * char data_exestr[] = "\r\nData EXESTR";
    * char __based(__segname("_CODE"))code_exestr[] = "\r\nCode EXESTR";
    */

   void main()
   {
   }

</PRE><h2>REFERENCES</h2>
 
<P>
For information on a problem that the linker has with #pragma comment,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../UTILITIES/Q102700.htm">Q102700</A></B>
   TITLE     : No String in EXE from #pragma Comment(exestr, &lt;string&gt;)
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00
<P>

Keywords          : CLIss vcfixlist400<BR>
Version           : 7.0 1.0 1.5 2.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbbug<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Spawn Hangs When Inheriting Pipe Handle </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151071">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/05/16">
<META NAME="Keywords" CONTENT="CRTIss kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When asynchronously spawning a child process that is inheriting a pipe handle, the parent process hangs before returning from the spawn call.  CAUSE =====  When you starting Visual C++ version 4.0, the startup code attempts to validate the inherite...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QA4Q,QAFO,QAGI,QAGB,QAAW,QBWP,QALW,QAR4,QABA,QDJO,QBFY,QA8T,QAJ2,QAH7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Spawn Hangs When Inheriting Pipe Handle</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151071</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.10
WINDOWS NT
kbprg kbbuglist kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>The C Run-Time (CRT), included with:
   Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When asynchronously spawning a child process that is inheriting a pipe
handle, the parent process hangs before returning from the spawn call.
<P>
<P><h2>CAUSE</h2>
 
<P>
When you starting Visual C++ version 4.0, the startup code attempts to
validate the inherited handle values by calling GetFileType for each
handle. With Windows NT, if two write handles for the same object are
passed to the child process, the GetFileType hangs when called for the
second one.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
NOTE: In order to use the _pipe function to communicate between a parent
and child process, each process must have only one handle open on the pipe,
and each process must be of opposite sense (the parent has a read handle
open, the child has a write handle open). To implement this behavior,
combine the _O_NOINHERIT flag using the bit-wise-OR operator (|) into the
third argument of the _pipe call. Then, use _dup or _dup2 to create an
inheritable copy of the pipe handle you want to pass to the child. Close
the original handle and spawn the child process. Immediately upon returning
from the spawn call in the parent process, close the duplicate handle.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. This bug was corrected in Visual
C++ 32-bit Edition version 4.2.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // Beeper.Cpp
   /* Compile options needed: None */
   #include   &lt;stdio.h&gt;
   #include   &lt;string.h&gt;

   int    main()
   {
      int i;

      for (i=0; i&lt;100; ++i)
      {
          printf("\nThis is speaker beep number %d... \n\7", i+1);
      }

      return  0;
   }

   // BeepFilter.Cpp
   /* Compile options needed:
      Execute as: BeepFilter.exe &lt;path&gt;Beeper.exe
   */
   #include   &lt;windows.h&gt;
   #include   &lt;process.h&gt;
   #include   &lt;memory.h&gt;
   #include   &lt;string.h&gt;
   #include   &lt;stdio.h&gt;
   #include   &lt;fcntl.h&gt;
   #include   &lt;io.h&gt;

   #define    OUT_BUFF_SIZE   512
   #define    READ_HANDLE       0
   #define    WRITE_HANDLE      1
   #define    BEEP_CHAR         7

   char   szBuffer[OUT_BUFF_SIZE];

   int    Filter(char* szBuff, ULONG nSize, int nChar)
   {
      char*   szPos = szBuff + nSize -1;
      char*   szEnd = szPos;
      int     nRet = nSize;

      while   (szPos &gt; szBuff)
      {
          if  (*szPos == nChar)
          {
              memmove(szPos, szPos+1, szEnd - szPos);
              --nRet;
          }

          --szPos;
      }

      return  nRet;
   }

   int    main(int argc, char** argv)
   {
      int nExitCode = STILL_ACTIVE;

      if  (argc &gt;= 2)
      {
          HANDLE  hProcess;
          int     hStdOut;
          int     hStdOutPipe[2];

          // Create the pipe
          if(_pipe(hStdOutPipe, 512, O_BINARY | O_NOINHERIT) == -1)
              return  1;

          // Duplicate stdout handle (next line will close original)
          hStdOut = _dup(_fileno(stdout));

          // Duplicate write end of pipe to stdout handle
          if  (_dup2(hStdOutPipe[WRITE_HANDLE], _fileno(stdout)) != 0)
              return  2;

          // Close original write end of pipe
          close(hStdOutPipe[WRITE_HANDLE]);

          // Spawn process
          hProcess = (HANDLE)spawnvp(P_NOWAIT, argv[1],
                      (const char* const*)&amp;argv[1]);

          // Duplicate copy of original stdout back into stdout
          if  (_dup2(hStdOut, _fileno(stdout)) != 0)
              return  3;

          // Close duplicate copy of original stdout
          close(hStdOut);

          if  (hProcess)
          {
              int     nOutRead;

              while   (nExitCode == STILL_ACTIVE)
              {
                  nOutRead = read(hStdOutPipe[READ_HANDLE],
                                  szBuffer, OUT_BUFF_SIZE);
                  if  (nOutRead)
                  {
                      nOutRead = Filter(szBuffer, nOutRead, BEEP_CHAR);
                      fwrite(szBuffer, 1, nOutRead, stdout);
                  }

                  if  (!GetExitCodeProcess(hProcess,
                       (unsigned long*)&amp;nExitCode))
                      return  4;
              }
          }
      }

      printf("\nPress \'ENTER\' key to continue... ");
      getchar();
      return  nExitCode;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 4.10 4.20 vcbuglist400 vcfixlist420<BR>
KBCategory: kbprg kbbuglist kbfixlist<BR>
KBSubcategory: CRTIss
<P>

Keywords          : CRTIss kbbuglist kbfixlist kbprg<BR>
Version           : 4.00 4.10<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

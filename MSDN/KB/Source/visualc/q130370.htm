

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: C2676 on Overloaded Operators of Templated Classes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130370">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/05/17">
<META NAME="Keywords" CONTENT="CPPIss kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When a templated class is not instantiated, but its member operators are referenced, the following error is generated:     error C2676: [binary/unary] '    ' : 'class [ClassName]           '    does not define this operator or a conversion to a typ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKM,QANY,QBE7,QBE6,QABO,QAY5,QAB4,QBVV,QA4Q,QA36,QAR4,QAKP,QAJQ,QBV8,QAP2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: C2676 on Overloaded Operators of Templated Classes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130370</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 2.20
WINDOWS NT
kbtool kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Compiler (CL.EXE), included with:
   Microsoft Visual C++ versions 2.0, 2.1, and 2.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a templated class is not instantiated, but its member operators are
referenced, the following error is generated:
<P>
<PRE>   error C2676: [binary/unary] '&lt;op&gt;' : 'class [ClassName]&lt;temp type&gt;'
   does not define this operator or a conversion to a type acceptable
   to the predefined operator.

</PRE>NOTE: The line number referenced by the error message refers to the point
where the operator is referenced (called), not the operator's definition.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The template class must be instantiated for the particular data type being
referenced (&lt; class T&gt; below). This instantiation can be accomplished in
one of two ways:

<UL><LI>Instantiate the class prior to referencing any of its operator
   functions. Any of the following three statements will instantiate
   the class and prevent the problem:
<P>
<PRE>      TmpltClass&lt;type&gt; X;        // declare a global instance of the class
      extern TmpltClass&lt;type&gt; X; // X must be a global defined elsewhere
      template TmpltClass&lt;type&gt;; // explicit instantiation

   NOTE: Explicit instantiation works only if the template class and all of
   its member functions are fully defined.

   -or-

</PRE><LI>For each overloaded operator referenced, replace the first reference
   to that operator with the function form of the operator. For example,
   replace "X + Y" with "X.operator+(Y)" (NOTE: Only the first reference
   needs to be replaced with the function form.)
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article.  This problem was fixed in Microsoft
Visual C++, 32-bit Edition, version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the sample code below, the "*" operator has been chosen to reproduce the
problem, but the problem occurs with both binary and unary (prefix or
postfix) operators. In all cases, the workarounds are the same. The return
type of the operator function has no bearing on the problem.
<P>
NOTE: If the operator is the function call operator (), the error is C2604
instead of C2676, but the workarounds are the same.
<P>
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile Options Needed: None
*/

</PRE>template&lt; class T &gt; class TmpltClass
{
<PRE>     T X;
   public:
     T&amp; operator*(int Arg1) {return X;}
</PRE>};
<P>
<PRE>// Workaround 1: uncomment any one of the following three lines:
// TmpltClass&lt;int&gt; X;
// extern TmpltClass&lt;int&gt; X;
// template TmpltClass&lt;int&gt;;

void test(TmpltClass&lt;int&gt;&amp; theArg)
</PRE>{
<PRE>// Workaround 2: uncomment the next line:
//   theArg.operator*(0);
   theArg * 0;  //do not comment out this line
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 2.20 9.00 9.10<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CPPIss<BR>
Keywords          : CPPIss kbbuglist kbfixlist kbtool<BR>
Version           : 2.00 2.10 2.20<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

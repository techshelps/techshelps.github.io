

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Controls in Toolbars Refuse to Give the Focus to Views </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q134763">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1995/08/10">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In an MFC application, controls added to a toolbar may prevent the input focus from returning to the active view. For example, when a user clicks a combo box or edit control in a toolbar and then clicks a view, the control retains the input focus. ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QADO,QAUD,QA2O,QABA,QAOE,QAEV,QABO,QBSO,QAH4,QADK,QAIF,QAUR,QA7O,QAMN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Controls in Toolbars Refuse to Give the Focus to Views</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q134763</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50 1.51 1.52
WINDOWS
kbprg kbui kbprb kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++ for Windows, versions 1.50, 1.51, 1.52
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In an MFC application, controls added to a toolbar may prevent the input
focus from returning to the active view. For example, when a user clicks a
combo box or edit control in a toolbar and then clicks a view, the control
retains the input focus. This happens for any CControlBar-derived class
containing a control that can accept the input focus. This behavior does
not exist for views derived from CFormView or CEditView.
<P>
<P><h2>CAUSE</h2>
 
<P>
When MFC reactivates an already active view, it does not set the input
focus to the view. As a result, any control in the toolbar which has the
input focus retains the focus.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
<P><h3>For Single Document Interface (SDI) applications</h3>
 
<P>
To overcome this behavior when you are writing a Single Document Interface
(SDI) application, you must handle the case of a mouse click in the client
area (the view itself) of the main window. You need to override
OnMouseActivate() in your CView-derived class. To do this, be sure to add
an ON_WM_MOUSEACTIVATE() entry to your message map. ClassWizard displays
WM_MOUSEACTIVATE in the Messages list if you first choose the Class Info
tab and change your Message Filter to "Window." In the code for
OnMouseActivate(), call the base class implementation first, and save the
result. If the result is MA_ACTIVATE or MA_ACTIVATEANDEAT, then call
OnActivateView(). Return the result you saved from your call to the base
class. The following code demonstrates this:
<P>
<PRE>int CMyView::OnMouseActivate(CWnd* pDesktopWnd,
        UINT nHitTest, UINT message)
{
    // Call the base class to get a return value
    int nResult = CView::OnMouseActivate(pDesktopWnd,
            nHitTest, message);

    if (nResult == MA_ACTIVATE || nResult == MA_ACTIVATEANDEAT)
    {
         OnActivateView(TRUE, this, this);
    }

    return nResult;
</PRE>}
<P>
<P><h3>For Multiple Document Interface (MDI) Applications</h3>
 
<P>
If you are writing a Multiple Document Interface (MDI) application, there
are two ways a view might be reactivated. You must handle both to overcome
the focus behavior.
<P>
To handle the case of a mouse click in a non-client part of the MDI child
window, override OnMouseActivate() in your CMDIChildWnd-derived class. To
do this, be sure to add an ON_WM_MOUSEACTIVATE() entry to your message map.
ClassWizard will display WM_MOUSEACTIVATE in the Messages list if you first
choose the Class Info tab and change your Message Filter to "Window." In
the code for OnMouseActivate(), call the base class implementation first,
and save the result. Then call SetFocus(), and return the result you saved
from your call to the base class. The following code demonstrates this:
<P>
<PRE>int CMyMDIChildWnd::OnMouseActivate(CWnd* pDesktopWnd,
        UINT nHitTest, UINT message)
{
    // Call the base class FIRST to get a return value for later
    int nResult = CMDIChildWnd::OnMouseActivate(pDesktopWnd,
            nHitTest, message);

    // Correct for focus not being set in
    // CMDIChildWnd::OnMouseActivate()
    SetFocus();

    return nResult;
</PRE>}
<P>
To handle the case of choosing the already-checked item for the MDI child
window from the application's Window menu, override OnCommand() for your
CMainFrame class. Call the base class implementation first, and save the
result. Then determine that the menu item ID you are passed is for an MDI
child window, that it is your own MDI child, which should be active, and
that you are of the runtime class CView. If all of that is true, then call
SetFocus, and return the value you saved from your call to the base class.
The following code, adapted from the MFC source for
CMDIFrameWnd::OnCommand(), demonstrates how to do this:
<P>
BOOL CMainFrame::OnCommand(WPARAM wParam, LPARAM lParam)
{
<PRE>    // Call the base class FIRST to get a return value for later
    BOOL bRet = CMDIFrameWnd::OnCommand(wParam, lParam);

    ASSERT(AFX_IDM_FIRST_MDICHILD == 0xFF00);
    // If the correct part of lParam is NULL, this message was sent
    // because a menu item was chosen with the mouse or the keyboard
    if (LOWORD(lParam) == NULL &amp;&amp;
            (LOWORD(wParam) &amp; 0xf000) == 0xf000)
    {
        ASSERT_VALID(MDIGetActive(NULL));
        // Do this ONLY for a CView-derived class
        if ((GetFocus()-&gt;GetParentFrame() != MDIGetActive(NULL)) &amp;&amp;
                (MDIGetActive(NULL)-&gt;GetActiveView()-&gt;
                IsKindOf(RUNTIME_CLASS(CView))))
        {
            SetFocus();
        }
    }

    return bRet;
</PRE>}
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For information on how to add a control, such as an edit or combo box, to a
toolbar, please see the CTRLBARS sample application shipped with Microsoft
Visual C++.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.50 1.51 1.52 2.50 2.51 2.52<BR>
KBCategory: kbprg kbui kbprb kbcode<BR>
KBSubcategory: MfcUI<BR>
Keywords            : kb16bitonly<BR>
Technology          : kbMfc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

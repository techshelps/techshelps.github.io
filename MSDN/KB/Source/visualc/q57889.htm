

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Buffering Can Hide Out-of-Disk-Space Condition </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q57889 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1990/01/19">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C, if disk space is exceeded, file buffering fails when buffering is done by the stream I/O functions. For example, if a file buffer for a stream is set to 10K by setvbuf() but only 2K of disk space is available, all data above 2K writ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBW5,QBFY,QAH4,QAY5,QALW,QBXS,QALG,QACJ,QA8T,QA5V,QAM3,QBV8,QAB9,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>File Buffering Can Hide Out-of-Disk-Space Condition</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q57889 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 8.00 8.00c | 1.00 1.50 1.51 1.52
<PRE>MS-DOS                                 | WINDOWS
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 5.1, 6.0, and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and
      1.52
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft C, if disk space is exceeded, file buffering fails when
buffering is done by the stream I/O functions. For example, if a file
buffer for a stream is set to 10K by setvbuf() but only 2K of disk space is
available, all data above 2K written to the buffer will be lost. This
problem can occur even when setvbuf() and fwrite() return successful return
codes.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When there is less space on the disk than there is in the stream
buffer, all stream I/O functions will seem to work properly until the
stream buffer is filled [for example, fwrite() returns the number of
bytes written as if it were successful]. However, the status of these
functions is valid only for the data going to the buffer and is not
reflected in the file that is written to the disk.
<P>
The problem is due to the existence of both the C run-time buffers and
the MS-DOS buffers. Only when the MS-DOS buffers try to write to disk
does it become evident that the disk is full. Then, the next return
value from fwrite() will indicate failure.
<P>
The following is the series of events that leads to the loss of data
with buffered stream I/O functions:

<OL><P><LI>The stream is opened with fopen().

<P><LI>Buffering is set on the stream, either 512 bytes default or the
   number of bytes selected by the user with setvbuf().

<P><LI>There is less disk space than the size of the buffer set by step 2.

<P><LI>Bytes are written to the file [for example, fwrite()], with
   successful return codes.

<P><LI>The buffer is filled and then the stream I/O function attempts to
   write all the data to MS-DOS.

<P><LI>The bytes that can fit on the disk are written and all remaining
   data that was in the buffer is lost.

<P><LI>Successive calls to write data to the file fail.
<P>
</OL>The following are possible workarounds:

<OL><P><LI>Turn buffering off by setting the file buffer to NULL, using
   setvbuf().

<P><LI>Use nonbuffered I/O functions, such as open(), read(), and write().

<P><LI>Check the result of closing the stream with fclose(), which flushes
   all the buffers associated with the given stream prior to closing.

<P><LI>Set buffering to the same size as the records that are being
   written. The third workaround will force fwrite() to return a
   "failure" return code at a point where the program can easily
   recover because the program knows exactly which records were
   successfully written to disk and which ones were not.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.00a 6.00ax 7.00 1.00 1.50 1.51<BR>
1.52<BR>
KBCategory: kbprg<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Profile an OLE Server or an OLE Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147393">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1996/02/25">
<META NAME="Keywords" CONTENT="VwbIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Visual C++ Books Online section  Profiling Dynamic-Link Libraries  explains the steps involved in profiling dynamic-link libraries and profiling multiple .dll and .exe files.  Because an OLE server is basically an .exe or .dll file and an OLE c...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA9Q,QAB5,QA7O,QAOE,QAMN,QDJ2,QA9N,QASB,QAJQ,QANE,QAHV,QA2K,QAOG,QBWS,QDNN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Profile an OLE Server or an OLE Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147393</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Source Profiler included with:
   Microsoft Visual C++, 32-bit Edition, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Visual C++ Books Online section "Profiling Dynamic-Link Libraries"
explains the steps involved in profiling dynamic-link libraries and
profiling multiple .dll and .exe files.
<P>
Because an OLE server is basically an .exe or .dll file and an OLE control
is a DLL even though it has an extension of .ocx, profiling them is similar
to profiling an .exe or .dll file. When you profile an OLE server or OLE
control, you follow the same steps and use the same commands that you would
for an .exe or .dll file. The same profiling rules that apply to .exe and
.dll files (such as the need to include debugging information and to supply
a .map file) also apply to OLE servers and OLE controls.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following four examples illustrate the steps required to profile an OLE
full server, an OLE mini-server, an In-Process OLE Automation server, and
an OLE control.
<P>
You may need to register the OLE mini-server, the in-process OLE automation
server, or the OLE control explicitly. You can do one of the following to
register them:

<UL><LI>For a .dll file (and for an OLE control), run Regsvr32 from the command
   prompt. Alternatively, you can open the corresponding project in the
   Developer Studio, and then on the Tools menu, click Register Control.

<LI>For an .exe file, just run it once. You may not be able to run it or you
   may get a message saying "This server can only be run from a container
   application," but when you click OK, it will have been registered.
<P>
</UL>To run the profiler, you may need to copy the \Msdev\Bin\Profile.dll file
to either the directory that contains the file you are profiling or to one
of the system directories. This file is in ..\VC\BIN\ directory for version
5.0.
<P>
Each step in the following examples is a command at the command prompt.
Alternatively, you could create a batch file that contains these commands.
<P>
In the command line arguments for most profile commands, you should specify
the file names without the extension. Look at the following examples to see
when extensions should be included.
<P>
To profile an OLE full server or an OLE automation server:
<P>
<PRE>   PREP /OM /FT FullSrvr
   PROFILE FullSrvr
   PREP /M FullSrvr
   PLIST FullSrvr &gt; FullSrvr.txt

   where FullSrvr.exe is the file corresponding to an OLE full server or
   OLE automation server.

</PRE>To profile an OLE mini server:
<P>
<PRE>   COPY MiniSrvr.exe MiniSrvr.sav
   PREP /OM /FT MiniSrvr
   COPY MiniSrvr._xe MiniSrvr.exe
   PROFILE /I MiniSrvr /O MiniSrvr Container
   PREP /M MiniSrvr
   PLIST MiniSrvr &gt; MiniSrvr.txt
   COPY MiniSrvr.sav MiniSrvr.exe

   where MiniSrvr.exe is the file corresponding to an OLE mini server and
   Container.exe is a container application that runs the MiniSrvr.

</PRE>To profile an In-Process OLE Automation Server (these steps are similar to
those of OLE mini server except that you have a .dll extension instead of
an .exe extension):
<P>
<PRE>   COPY InProc.dll InProc.sav
   PREP /OM /FT InProc.dll
   COPY InProc._ll InProc.dll
   PROFILE /I InProc /O InProc Client
   PREP /M InProc
   PLIST InProc &gt; InProc.txt
   COPY InProc.sav InProc.dll

   where InProc.dll is the file corresponding to an In-Process OLE
   Automation server and Client is an OLE Automation client application
   that drives the InProc.dll.

</PRE>To profile an OLE control that has an .ocx extension (these steps are also
similar except that you now have an .ocx extension):
<P>
<PRE>   COPY Control.ocx Control.sav
   PREP /OM /FT Control.ocx
   COPY Control._cx Control.ocx
   PROFILE /I Control /O Control ControlContainer
   PREP /M Control
   PLIST Control &gt; Control.txt
   COPY Control.sav Control.ocx

   where Control.ocx is the OLE control and ControlContainer is an OLE
   control container application.

</PRE><h2>REFERENCES</h2>
 
<P>
Profiler Reference, Visual C++ User's Guide.
<P>
Advanced Profiling, Programming Techniques.
<P>
Both of these references are available in the online documentation that
comes with Visual C++ versions 4.0 and 5.0.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: mini-server<BR>
Keywords          : VwbIss kbcode<BR>
Technology        : kbole<BR>
Version           : WINNT:4.0,5.0;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

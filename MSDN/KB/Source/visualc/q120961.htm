

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Sort a CStringArray in MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120961">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1994/09/23">
<META NAME="Keywords" CONTENT="MfcMisc kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  You can use the sample code in this article to sort a CStringArray object. The main() function constructs a CStringArray object, adds elements to it, prints out the elements, calls the sort() member function to sort it, and then prints the sorted e...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB6,QA4Q,QBFY,QAY5,QAUD,QAGI,QAOX,QBWP,QBV8,QAB9,QDL9,QBWQ,QBWO,QBWN,QDMW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Sort a CStringArray in MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120961</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 | 1.00 2.00 2.10 4.00
<PRE>MS-DOS | WINDOWS   | WINDOWS NT
</PRE>kbprg kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, and
      4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can use the sample code in this article to sort a CStringArray object.
The main() function constructs a CStringArray object, adds elements to it,
prints out the elements, calls the sort() member function to sort it, and
then prints the sorted elements. The sort() function uses the Bubble Sort
algorithm to sort the array and calls the CompareAndSwap() function to
compare each string and swap them if necessary.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compile options needed: /MT
 */

#include &lt;afx.h&gt;
#include &lt;iostream.h&gt;
#include &lt;afxcoll.h&gt;

</PRE>class CSortStringArray : public CStringArray {
public:
<PRE>   void Sort();
</PRE>private:
<PRE>   BOOL CompareAndSwap(int pos);
</PRE>};
<P>
<PRE>void CSortStringArray::Sort()
</PRE>{
<PRE>   BOOL bNotDone = TRUE;

   while (bNotDone)
   {
      bNotDone = FALSE;
      for(int pos = 0;pos &lt; GetUpperBound();pos++)
         bNotDone |= CompareAndSwap(pos);
   }
}

</PRE>BOOL CSortStringArray::CompareAndSwap(int pos)
{
<PRE>   CString temp;
   int posFirst = pos;
   int posNext = pos + 1;

   if (GetAt(posFirst).CompareNoCase(GetAt(posNext)) &gt; 0)
   {
      temp = GetAt(posFirst);
      SetAt(posFirst, GetAt(posNext));
      SetAt(posNext, temp);
      return TRUE;
   }
   return FALSE;
</PRE>}
<P>
<PRE>void main()
</PRE>{
<PRE>   CSortStringArray sortArray;

   sortArray.Add(CString("Zebra"));
   sortArray.Add(CString("Bat"));
   sortArray.Add(CString("Apple"));
   sortArray.Add(CString("Mango"));

   for (int i = 0; i &lt;= sortArray.GetUpperBound(); i++)
      cout &lt;&lt; sortArray[i] &lt;&lt; endl;

   sortArray.Sort();
   cout &lt;&lt; endl;

   for (int j = 0; j &lt;= sortArray.GetUpperBound(); j++)
      cout &lt;&lt; sortArray[j] &lt;&lt; endl;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 7.00 1.00 1.50 2.00 2.10 2.50 3.00 4.00<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory: MfcMisc<BR>
Keywords          : MfcMisc kbcode kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00 | 1.00 1.50 | 1.00 2.00 2<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

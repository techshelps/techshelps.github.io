

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the merge Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157560">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/14">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the merge STL function in Visual C++.  MORE INFORMATION  Required Header                  Prototype ---------     template                                   class InputIterator2,             class Output...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAML,QA4Q,QBFY,QA36,QDME,QABO,QAB6,QAY5,QAPF,QAOX,QANY,QDMR,QA56,QA55,QAL3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the merge Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157560</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the merge STL
function in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;algorithm&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class InputIterator1,
            class InputIterator2,
            class OutputIterator&gt; inline
   OutputIterator merge( InputIterator1 first1,
                         InputIterator1 last1,
                         InputIterator2 first2,
                         InputIterator2 last2
                         OutputIterator result )

</PRE>NOTE: The class/parameter names in the prototype do not match the original
version in the header file. They have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The merge algorithm merges two sorted sequences: [first1..last1) and
[first2..last2) into a single sorted sequence starting at result.
<P>
This version assumes that the ranges [first1..last1) and [first2..last2)
are sorted using operator&lt;. If both ranges contain equal values, the value
from the first range will be stored first.
<P>
The result of merging overlapping ranges is undefined.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// merge.cpp : Illustrates how to use the merge
//                     function.
//
// Functions:
//
//    merge : Merge two sorted sequences
//            into a single sorted list.
//
// Written by Kalindi Sanghrajka
// of Microsoft Product Support Services,
// Software Core Developer Support.
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
</PRE>#pragma warning(disable: 4786)
<P>
<PRE>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;list&gt;
#include &lt;deque&gt;

void main()
</PRE>{
<PRE>    const int MAX_ELEMENTS = 8 ;

    // Define a template class vector of int
    typedef vector&lt;int, allocator&lt;int&gt; &gt; IntVector ;

    //Define an iterator for template class vector of ints
    typedef IntVector::iterator IntVectorIt ;

    IntVector NumbersVector(MAX_ELEMENTS) ;

    IntVectorIt startv, endv, itv ;

    // Define a template class list of int
    typedef list&lt;int, allocator&lt;int&gt; &gt; IntList ;

    //Define an iterator for template class list of ints
    typedef IntList::iterator IntListIt ;

    IntList NumbersList ;

    IntListIt first, last, itl ;

    // Define a template class deque of int
    typedef deque&lt;int, allocator&lt;int&gt; &gt; IntDeque ;

    //Define an iterator for template class deque of ints
    typedef IntDeque::iterator IntDequeIt ;

    IntDeque NumbersDeque(2 * MAX_ELEMENTS) ;

    IntDequeIt itd ;

    // Initialize vector NumbersVector
    NumbersVector[0] = 4 ;
    NumbersVector[1] = 10;
    NumbersVector[2] = 70 ;
    NumbersVector[3] = 10 ;
    NumbersVector[4] = 30 ;
    NumbersVector[5] = 69 ;
    NumbersVector[6] = 96 ;
    NumbersVector[7] = 100;

    startv = NumbersVector.begin() ;   // location of first
                                       // element of NumbersVector

    endv = NumbersVector.end() ;  // one past the location
                                  // last element of NumbersVector

    // sort NumbersVector, merge requires the sequences
    // to be sorted
    sort(startv, endv) ;

    // print content of NumbersVector
    cout &lt;&lt; "NumbersVector { " ;
    for(itv = startv; itv != endv; itv++)
        cout &lt;&lt; *itv &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // Initialize vector NumbersList
    for(int i = 0; i &lt; MAX_ELEMENTS; i++)
        NumbersList.push_back(i) ;

    first = NumbersList.begin() ;   // location of first
                                     // element of NumbersList

    last = NumbersList.end() ;  // one past the location
                                // last element of NumbersList

    // print content of NumbersList
    cout &lt;&lt; "NumbersList { " ;
    for(itl = first; itl != last; itl++)
        cout &lt;&lt; *itl &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // merge the elements of NumbersVector
    // and NumbersList and place the
    // results in NumbersDeque
    merge(startv, endv, first, last, NumbersDeque.begin()) ;

    cout &lt;&lt; "After calling merge\n" &lt;&lt; endl ;

    // print content of NumbersDeque
    cout &lt;&lt; "NumbersDeque { " ;
    for(itd = NumbersDeque.begin();
        itd != NumbersDeque.end(); itd++)
        cout &lt;&lt; *itd &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
</PRE>}
<P>
Program Output is:
<P>
NumbersVector { 4 10 10 30 69 70 96 100  }
<P>
NumbersList { 0 1 2 3 4 5 6 7  }
<P>
After calling merge
<P>
NumbersDeque { 0 1 2 3 4 4 5 6 7 10 10 30 69 70 96 100  }
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL merge<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

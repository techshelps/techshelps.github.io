

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Constant String Is Eliminated by the C++ Compiler </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q87634 ">
<META NAME="KBModify" CONTENT="1997/08/08">
<META NAME="KBCreate" CONTENT="1992/08/05">
<META NAME="Keywords" CONTENT="CPPIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft C/C++ versions 7.0 and later compilers eliminate unreferenced constant strings. This happens only with C++ source, not C source. The string is declared in the source file, but is not included in the resulting object module.  CAUSE ===...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QATX,QBVV,QAOT,QAH4,QAKJ,QA56,QA55,QAK6,QAHT,QAY2,QALQ,QAH6,QAB3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Constant String Is Eliminated by the C++ Compiler</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q87634 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 4.1,
<P><PRE>     4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The Microsoft C/C++ versions 7.0 and later compilers eliminate unreferenced
constant strings. This happens only with C++ source, not C source. The
string is declared in the source file, but is not included in the resulting
object module.
<P>
<P><h2>CAUSE</h2>
 
<P>
In C++, const variables have internal linkage. This is different from the
way that C handles const variables.
<P>
In this case, because the C++ compiler can process only one source file
at a time, the string is eliminated if it is not referenced in the file
in which it is declared, even if it is referenced from another file.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The solution is to declare the const string as "extern". This provides
external linkage, telling the compiler that the string may be used in
another module, and not to assume that it is an unreferenced symbol;
for example
<P>
<PRE>   const char sz[] = "\"the string\"";

</PRE>would be optimized away in a C++ module, but the following string would
not:
<P>
<PRE>   extern const char sz[] = "\"the string"\";

</PRE><h2>MORE INFORMATION</h2>
 
<P>
While this behavior is not a bug in the compiler, the effects of this
optimization may cause unexpected results. If a string is declared and
initialized in one module, and referenced only in another module, the
string will be eliminated from the first module. This means that the other
file will not have access to the information used in the initialization of
the string.
<P>
For more information on internal and external linkage, see section 2.4 of
the ""C++ Language Reference"" supplied with C/C++ version 7.0 and Visual
C++, or refer to the online help supplied with Visual C++.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.10 L2029<BR>
Keywords          : CPPIss<BR>
Version           : MS-DOS:7.0;WINDOWS:1.0,1.5,1.51,1.52;WINDOWS  NT:1.0,2.0,2.1,4.0,4.1,4.2,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

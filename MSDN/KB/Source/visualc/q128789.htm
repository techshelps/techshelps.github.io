

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: LNK2001 on Member Function When Use Nested Class Template </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128789">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1995/04/10">
<META NAME="Keywords" CONTENT="CPPIss LinkIss vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you build a program that uses nested class templates, the following link error is generated:     test.obj: error LNK2001: unresolved external symbol     ?Funtion@BB@?$AA@HH@@QAEHXZ    ( public: int __thiscall AA         ::BB::Funtion(void) )  ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QDKW,QA4Q,QBV8,QAB9,QABO,QAH4,QA36,QAUD,QAKP,QAJ8,QBFY,QALZ,QBXF,QAG4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: LNK2001 on Member Function When Use Nested Class Template</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128789</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 4.0, 4.1,
<P><PRE>     4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you build a program that uses nested class templates, the following
link error is generated:
<P>
<PRE>   test.obj: error LNK2001: unresolved external symbol
   "?Funtion@BB@?$AA@HH@@QAEHXZ
   ( public: int __thiscall AA&lt;int,int&gt;::BB::Funtion(void) )"

</PRE><h2>CAUSE</h2>
 
<P>
The compiler does not generate code for the member function in the nested
class template.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around the problem, use one of the following suggestions:

<UL><LI>Define the function in the class declaration as an inline function.
   Be sure to define the function body in the class declaration. Defining
   the function as an inline function outside the class declaration will
   not eliminate the problem.
<P>
   -or-

<LI>Use the member function specialization technique to work around the
   problem. This technique is demonstrated in the "Sample Code" section of
   this article.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code can be used to reproduce or work around the problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: None.
   */

   #include &lt;stdio.h&gt;

   template &lt;class T1, class T2&gt;
   class AA
   {
     public:
       class BB
       {
         public:
           int Function();

   // Work around #1, replace the previous line with
   //        int Function() { return 0; }
       };
   };

   // Work around #2, uncomment the following function
   // AA&lt;int,int&gt;::BB::Function()
   // {
   //   return 0;
   // }

   template &lt;class T1, class T2&gt;
   int AA&lt;T1,T2&gt;::BB::Function()
   {
      return 0;
   }

   void main()
   {
     AA&lt;int,int&gt;::BB b;
     printf( "%d\n", b.Function() );
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 9.0 9.00 9.1 9.10 10.00 10.10 10.20<BR>
Keywords            : CPPIss LinkIss vcbuglist500<BR>
Version             : 2.0 2.1 4.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

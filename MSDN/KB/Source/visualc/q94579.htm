

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Creating a Function Pointer to a C++ Member Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94579 ">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1993/01/11">
<META NAME="Keywords" CONTENT="CPPLngIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The text below describes generating a function pointer to a class member function in code compiled with Microsoft C/C++ version 7.0 or later. The declaration of a pointer to a class member function must include the class name. However, the class na...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAO2,QAO3,QBFY,QBV8,QAB9,QA4Q,QAPN,QAGI,QAHE,QAUD,QAYY,QAH4,QAYL,QAB4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Creating a Function Pointer to a C++ Member Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94579 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ for MS-DOS, versions 7.0, 7.0a
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below describes generating a function pointer to a class member
function in code compiled with Microsoft C/C++ version 7.0 or later. The
declaration of a pointer to a class member function must include the class
name. However, the class name is omitted from the declaration of a pointer
to a static member function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In the C and C++ languages, an application can define a variable that
contains the address of a function. You can call the function using this
variable instead of through the function name. In C++, a pointer to a
nonstatic member function contains the address of the function in the
class, not in the object. To call the function, use the appropriate member
selection operator (. or -&gt;), the indirection operator (*), and the name of
an object of the class.
<P>
In most cases in the C language, function pointer declarations take the
following form:
<P>
<PRE>   int (*ptr)();

</PRE>This code declares a pointer to a function that returns an integer. The
function accepts an unknown number of augments.
<P>
To create a pointer to a C++ class member function, specify the class name
in the function pointer declaration, as follows:
<P>
<PRE>   int (Sample::*ptr)();

</PRE>This code declares a pointer to a member function in the Sample class that
returns an integer. This function does not accept any arguments.
<P>
The different ways to interpret the empty parentheses in function
declarations is a major difference between the C and C++ languages. In C, a
function pointer declaration that has no arguments is syntactically
identical to the following:
<P>
<PRE>   int (*ptr)(...);

</PRE>However, a C++ prototype declared without arguments is syntactically
identical to the following:
<P>
<PRE>   int (Sample::*ptr)(void);

</PRE>In C++, if the function accepts arguments, the types of the arguments must
also be listed, as in the following:
<P>
<PRE>   int (Sample::*ptr2)(int, int);

</PRE>In C, the types of the arguments may be listed in the same manner. A
pointer to a static member function is declared in the same manner as a
pointer to a C function. However, because the declaration is part of a C++
program, the declaration must list any arguments and their associated
types.
<P>
To determine the procedure address to assign to a pointer variable, use the
class name and the scope resolution operator (::). This syntax provides
flexibility because a declared variable can contain the address of any
object of the class. The object name in the function call determines the
copy of the function used.
<P>
The sample code below demonstrates declaring and using pointers to a class
member function and to a static member function. Note that when the
arguments in the function pointer declaration do not match the arguments of
the function assigned to the pointer, the compiler generates errors C2440
and C2564. For example, if the "int" declaration is omitted from the
argument list declaration for the function pointer, the compiler generates
the following error messages:
<P>
<P><h3>16-bit</h3>
 
<P>
<PRE>   error C2440: 'initializing' : cannot convert from 'void (__far __pascal
     Data::*)(int )__near ' to 'void (__far __pascal Data::*)(void )__near'

   error C2564: formal/actual parameters mismatch in call through pointer
     to function

</PRE><h3>32-bit</h3>
 
<P>
<PRE>   error C2440: 'initializing' : cannot convert from 'void (Data::*)(int)
     to 'void (Data::*)(void)"

   error C2197: 'void (Data::*)(void)' : too many actual parameters

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>   /*
    * Compile options needed: None
    */

   #include &lt;iostream.h&gt;

   class Data
   {
   private:
      int y;
      static int x;

   public:
      void SetData(int value) {y = value; return;};
      int GetData() {return y;};
      static void SSetData(int value) {x = value; return;};
      static int SGetData() {return x;};
   };

   int Data::x = 0;

   void main(void)
   {
      Data mydata, mydata2;

      // Initialize pointer.
      void (Data::*pmfnP)(int) = &amp;Data::SetData; // mydata.SetData;

      // Initialize static pointer.
      void (*psfnP)(int) = &amp;Data::SSetData;

      mydata.SetData(5); // Set initial value for private data.
      cout &lt;&lt; "mydata.data = " &lt;&lt; mydata.GetData() &lt;&lt; endl;

      (mydata.*pmfnP)(20); // Call member function through pointer.
      cout &lt;&lt; "mydata.data = " &lt;&lt; mydata.GetData() &lt;&lt; endl;

      (mydata2.*pmfnP)(10) ; // Call member function through pointer.
      cout &lt;&lt; "mydata2.data = " &lt;&lt; mydata2.GetData() &lt;&lt; endl;

      (*psfnP)(30) ; // Call static member function through pointer.
      cout &lt;&lt; "static data = " &lt;&lt; Data::SGetData() &lt;&lt; endl ;
   }

</PRE>For more information about parameter lists in function declarations and how
these are handled by C and C++, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q79845.htm">Q79845</A></B>
   TITLE     : INFO: Old Style (K&amp;R) Declarations Are Not Supported in C++
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: C2040<BR>
Keywords          : CPPLngIss<BR>
Version           : MS-DOS:7.0,7.00a; WINDOWS:1.0,1.5,1.51; WINDOWS NT:1.0,2.0,2.1,4.0,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

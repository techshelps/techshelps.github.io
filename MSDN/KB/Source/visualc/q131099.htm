

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: MFC App's CWinApp::ProcessMessageFilter() Never Invoked </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131099">
<META NAME="KBModify" CONTENT="1997/08/07">
<META NAME="KBCreate" CONTENT="1995/06/04">
<META NAME="Keywords" CONTENT="MfcMisc kbprb kbprg kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When running a 16-bit MFC application under Windows version 3.x, the application's CWinApp::ProcessMessageFilter() is never invoked.  When running a 32-bit DEBUG MFC application under Win32s, the application generates an assertion in the CWnd::Crea...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QA5E,QAJH,QAEV,QDL9,QBWQ,QBWO,QBWN,QAY5,QAYC,QBFY,QA56,QA55,QBJZ,QAA1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: MFC App's CWinApp::ProcessMessageFilter() Never Invoked</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131099</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00 4.10
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbtshoot kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 4.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When running a 16-bit MFC application under Windows version 3.x, the
application's CWinApp::ProcessMessageFilter() is never invoked.
<P>
When running a 32-bit DEBUG MFC application under Win32s, the
application generates an assertion in the CWnd::CreateEx() function.
When the application is built for RELEASE mode, Win32s reports an
Unhandled Exception.
<P>
<P><h2>CAUSE</h2>
 
<P>
Calling the SetMessageQueue() function from within an MFC application
causes the problems listed above. Depending on the version of MFC used,
MFC sets up one or more Window hooks when the application is first loaded.
Calling SetMessageQueue() under Windows version 3.x, allocates a new
message queue for your application and deletes the old one. After these
hooks have been established, calling SetMessageQueue() destroys the hooks.
<P>
This problem does not occur when running under Windows NT, because
SetMessageQueue() does nothing on Windows NT. Windows NT automatically
increases the application's message queue as needed.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Newer versions of MFC, starting with Visual C++ version 1.5, automatically
attempt to set the application's message queue to a size of 96 using a
loop similar to this one:
<P>
<PRE>        // attempt to make the message queue bigger
        for (int cMsg = 96; !SetMessageQueue(cMsg) &amp;&amp; (cMsg -= 8); )
            ;

</PRE>Note that an attempt is made to set the message queue to 96. If this
attempt fails, another attempt is made with a smaller value.
<P>
If a larger message queue is needed or a failure is required in the
event so that the message queue cannot be set at a desired size, you will
need to provide a custom WinMain() function that duplicates the
functionality of MFC's implementation of WinMain(). You can find the
MFC implementation of WinMain() in \MFC\SRC\WINMAIN.CPP. Use it as a
guideline for writing a custom WinMain() function for your application.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information on SetMessageQueue() and SetWindowsHookEx(), please
consult the Visual C++ Help menu.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 4.00 4.10<BR>
KBCategory: kbprg kbtshoot kbprb<BR>
KBSubcategory: MfcMisc<BR>
Keywords          : MfcMisc kbprb kbprg kbtshoot<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

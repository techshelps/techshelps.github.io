

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mixing Debug and Release Files in an MFC Project </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117499">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1994/06/29">
<META NAME="Keywords" CONTENT="VwbIss kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" The information in this article is included in the documentation starting with Visual C++ 5.0. Look there for future revisions.   When building large Microsoft Foundation Class (MFC) applications, the debug information can take up a lot of disk spac...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVX,QBXS,QBFY,QA56,QA55,QAY2,QAH4,QBHQ,QAPN,QBWS,QAG2,QAA5,QA2Q,QAJN,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Mixing Debug and Release Files in an MFC Project</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117499</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.10 2.0 2.10 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbtool
<P>
 
The information in this article applies to:
<P>
The Visual Workbench included with:
<P>
<PRE>  - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
  - Microsoft Visual C++, 32-bit Edition, version 1.0, 2.0, 2.1, and
    4.0
</PRE> 
<P>
The information in this article is included in the documentation starting
with Visual C++ 5.0. Look there for future revisions.
<P>
<P><h2>SUMMARY</h2>
 
<P>
When building large Microsoft Foundation Class (MFC) applications, the
debug information can take up a lot of disk space. In order to reduce the
size of the application, there are several methods by which you can remove
the debugging information from some of the modules in the project and/or
from the MFC libraries themselves. Moreover, starting with Visual C++
32-bit Edition version 2.0, the Visual Workbench supports per-file build
rules which can greatly reduce the amount of debug information that is
generated for an application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following are among the methods available to reduce the amount of
debugging information included in a project:
<P>
<P><h3>Method 1: Use per-file build options</h3>
 
If you are using Visual C++ 32-bit Edition version 2.x or 4.0, this is
the easiest method. It enables you to specify the /Zd (line numbers only)
option, among others, for specific files. Doing so can greatly reduce the
amount of debug information that is per module.
<P>
To set the /Zd switch:
1. Open the Project Setting dialog box.

<OL><P><LI>Click on the desired file in your Debug target's tree view to
   highlight it.

<P><LI>Select the C/C++ Tab.

<P><LI>With the General catagory selected, select "Line Numbers Only" from the
   Debug Info list box.
<P>
</OL><h3>Method 2: Build the Debug MFC Libraries with Reduced CodeView Information</h3>
 
Try rebuilding the MFC libraries using the /Zi compiler switch instead of
the /Z7 compiler switch. This builds a program database (.PDB) file for the
entire library that contains all of the symbolic type information. Each
time the compiler generates type information for a new symbol when
compiling the source files, it checks the .PDB file to see whether this
type is already present. If so, the type is not added.
<P>
<P><h3>Method 3: Build the Debug MFC libraries Without CodeView Information</h3>
 
This is the one of the easiest methods for reducing the size of your debug
executable file. The only thing lost by using this method is the ability to
step into the MFC code itself. All other debug facilities, such as ASSERTs
and TRACEs, remain.
<P>
The following command builds the medium-memory model debug MFC library
without CodeView information for Windows (MAFXCWD.LIB):
<P>
<PRE>   NMAKE MODEL=M TARGET=W DEBUG=1 CODEVIEW=0

</PRE></OL>Further information on building a static link library variant can be
obtained from the README.TXT file that ships with Visual C++ and can be
found in xxxx\MFC\SRC\README.TXT (where xxxx is the directory name for
the Visual C++ product - by default, MSVC for Visual C++ versions 2.x and
earlier, MSDEV for Visual C++ version 4.0).
<P>
<P><h3>Method 4: Use the Full Debug MFC Libraries with Only Selected Debug Modules</h3>
 
This method allows you to step into the MFC source code as well as
providing the other debug facilities. This makes use of both the Debug and
Release modes of the Visual Workbench makefile, thus making necessary the
changes described below (and also making a "rebuild all" necessary when a
full release build is required):
<P>
For Visual C++ versions 2.x and earlier, follow these steps:

<OL><P><LI>Choose the Project dialog box from the Options menu and check "Use
   Microsoft Foundation Classes". Also choose Release for the Build Mode.

<P><LI>Select Compiler and the Preprocessor category. Change "NDEBUG" to
   "_DEBUG" under "Symbols and Macros to define" and then choose the "OK"
   button.

<P><LI>Select Linker and the Input category. Change the MFC library in the
   Libraries setting to the debug version (MAFXCWD.LIB for Windows,
   NAFXCWD.LIB for Windows NT), then choose the "OK" button.

<P><LI>Choose the "OK" button again to exit the Project dialog box, then choose
   Rebuild All from the Project menu. This removes all debug information
   from your modules, but does not affect the MFC debug information.

<P><LI>Choose Project from the Options menu and then choose Debug for the Build
   Mode from the Project dialog box. Choose the "OK" button.

<P><LI>Open each file in which you want to include debug information and then
   choose Compile File from the Project menu.
<P>
   NOTE: If you are using an AppWizard-generated application or have
   precompiled headers, you either have to recompile them before compiling
   the other modules or turn off the precompiled headers. Warning C4650 and
   error message C2855 are returned if this is not done correctly.

<P><LI>Select Build from the Project menu. The following message appears:
<P>
<P><PRE>      The current project has changed. Would you like to build the affected
      files?
</PRE><P>
   Choose "No," because all the object files are up to date, but Visual C++
   "knows" that they are of different build types.
<P>
</OL>For Visual C++ version 4.0, follow these steps:

<OL><P><LI>Choose Set Default Configuration... from the Build menu and select the
   release version of the project in the Default Project Configuration
   dialog box.

<P><LI>Choose Settings... from the Build menu to open the Project Settings
   dialog box.

<P><LI>Select Use MFC in a Static Library from the Microsoft Foundation Classes
   list box in the General Tab.

<P><LI>Select Preprocessor from the Category list box in the C/C++ Tab. Change
  "NDEBUG" to "_DEBUG" in the Preprocessor Definitions edit field.

<P><LI>Select Input from the Category list box in the Link Tab. Enter
   NAFXCWD.LIB in the Object/libraries modules edit field.

<P><LI>Choose the "OK" button to save the new build options and close the
   Project Settings dialog box.

<P><LI>Choose Rebuild All from the Build menu. This removes all debug
   information from your modules, but does not affect the MFC library.

<P><LI>For each project file in which you want to include debug information,
   follow the steps of Method 1, above, specifying the desired degree of
   debug information.
<P>
   NOTE: If you are using an AppWizard-generated application or have
   precompiled headers, you either have to recompile them before compiling
   the other modules or turn off the precompiled headers. Warning C4650 and
   error message C2855 are returned if this is not done correctly.

<P><LI>Select Build &lt;EXE name&gt; from the Build menu to rebuild those project
   files that are out of date.
<P>
</OL>This includes debug symbols for the modules selected in either step 6
(Visual C++ versions 2.x and earlier) or step 8 (Visual C++ version 4.0).
You are able to set breakpoints only within modules you have compiled using
debug information. If you need to reduce the executable size even further,
you can use the MFC debug libraries as described in Method 3, above.
<P>
<P><h3>Method 5: Use an External Makefile to Mix Release and Debug Information</h3>
 
This technique eliminates the need to alter the affects of a release build.
It also eliminates the need to manually recompile each module to keep the
object files up to date. However, you can no longer change compile and link
options from within the Visual Workbench. The makefile has to be maintained
manually. The important thing to keep in mind is that if you want to link
with the debug MFC libraries you must have "_DEBUG" defined for every
module. Conversely, if you want the release MFC libraries, you must have
"NDEBUG" defined. For more information on writing external makefiles, see
"Managing projects with NMAKE" in the TechNote Viewer, which is located in
the Visual C++ program group, or consult the "NMAKE Reference" in the
Visual C++ Books Online.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbtool<BR>
KBSubcategory: VWBIss<BR>
Additional reference words: 1.00 1.10 1.50 1.51 1.52 2.00 2.10 2.50 2.52<BR>
2.52 3.00 3.10 4.00<BR>
Keywords          : VwbIss kbtool<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.10 2.0 2<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Handle Exceptions That Occur in Exception Processing </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98601 ">
<META NAME="KBModify" CONTENT="1997/05/28">
<META NAME="KBCreate" CONTENT="1993/05/10">
<META NAME="Keywords" CONTENT="MfcMisc kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft Foundation Classes stores a pointer to the current application exception in a global variable. If the application causes the exception to be thrown while the application is processing another exception, the original exception object i...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHC,QA1O,QAH7,QAH6,QABN,QAD7,QAUR,QAO4,QAYL,QABA,QA2X,QAJ2,QAJH,QBFY,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Handle Exceptions That Occur in Exception Processing</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98601 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Foundation Classes stores a pointer to the current
application exception in a global variable. If the application causes the
exception to be thrown while the application is processing another
exception, the original exception object is deleted. If the application
needs to track the original exception, then it must store the information
in that exception object in a separate variable. The application can use
this information to throw the original exception again to pass the
exception to the next exception handling block.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If an application is handling an exception in a CATCH block, and a new
exception is thrown, the Microsoft Foundation Class (MFC) library deletes
the original exception. If the CATCH block uses information about the
original exception after the second exception, or if the CATCH block calls
the THROW_LAST macro and another exception could occur in the CATCH block,
the application should store information about the original exception at
the beginning of the CATCH block. When the application requires information
about the original exception, retrieve the data from the variables instead
of from the exception object. To pass the exception to the next exception
handling block, call the THROW macro to create a new exception instead of
using the THROW_LAST macro to use the current exception. The following
pseudo-code demonstrates this technique:
<P>
<PRE>   TRY
      {
      // Start a large TRY block to catch any archive exceptions
      // that occur while archiving.

      // Start archiving process here.

      TRY
         {
         // In this TRY block, perform some action that might
         // cause a CArchiveException to be thrown.

         if (a recoverable archive error has occurred)
             AfxThrowArchiveException(CArchiveException::generic);
         }
      CATCH(CArchiveException, ArchEx)
         {
         // Save information about exception for later.
         int nCause = ArchEx-&gt;m_cause;

         TRY
            {
            // To process the CArchiveException, the application
            // allocates memory and a CMemoryException may occur.
            }
         CATCH(CMemoryException, MemEx)
            {
            // Process the memory exception.
            }
         END_CATCH

         // At this point, the ArchEx object is not valid if the
         // CMemoryException occurred. Therefore, use the nCause
         // variable to retrieve information about the exception.

         // Throw the archive exception again. (THROW_LAST does
         // not produce correct results if CMemoryException occurred.
         if (need to pass up to next exception block)
            AfxThrowArchiveException(nCause);
         }
      END_CATCH

   CATCH(CArchiveException, ArchEx)
      {
      // handle the archive exception
      }
   END_CATCH

</PRE>NOTE: In the versions of MFC included with Visual C++ 32-bit Edition,
versions 2.0 and above, the current exception is stored on a per-thread
basis. However, the technique described in this article still applies.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: nested exceptions<BR>
Keywords            : MfcMisc kbhowto<BR>
Technology          : kbmfc<BR>
Version             : 1.0 1.5 1.51 1.52 2.0 2.1 4.0 7.<BR>
Platform            : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

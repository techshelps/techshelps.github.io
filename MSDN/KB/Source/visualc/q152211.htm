

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Constructor Gets Called Multiple Times on the Same Object </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152211">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1996/06/06">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist410 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The constructor gets called more than once on the same global object.  CAUSE =====  This error occurs when a file has both a global object and a function that references the global object as extern. In this case, the compiler incorrectly generates ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAVX,QAVW,QAPN,QAW6,QAEF,QA7H,QANG,QAIF,QAJQ,QAPF,QDH6,QBXT,QA9N,QA5V V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Constructor Gets Called Multiple Times on the Same Object</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152211</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The constructor gets called more than once on the same global object.
<P>
<P><h2>CAUSE</h2>
 
<P>
This error occurs when a file has both a global object and a function that
references the global object as extern. In this case, the compiler
incorrectly generates code that calls the constructor on the "extern
myClass object;" statement.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Remove the line that contains extern reference to the global. You can
safely remove this line since the global is in file scope.
<P>
-or-
<P>
Create two separate files, one that contains the global object, and one
that contains the function that references the global object as extern.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // This sample demonstrates the problem of the constructor getting
   // called twice.
   /* Compile options needed: cl test.cpp
   */
   // TEST.CPP
   // ========
   #include "stdio.h"
   class myClass {
   public:
     myClass() {printf("myClass Constructor called\n");};
     void test() {printf("test() called\n");};
   } object;

   void main()
   {
   // Remove the next line for the first workaround:
     extern myClass object;
     object.test();
   }

   // sample output: (without extern line removed)
   myClass Constructor called
   myClass Constructor called
   test() called


   // This sample demonstrates the workaround that causes the program
   // to only call the constructor once.
   /* Compile options needed: cl Test2A.cpp Test2B.cpp
   */
   // Test2.h
   // ========
   #include "stdio.h"
   class myClass {
   public:
     myClass() {printf("myClass Constructor called\n");};
     void test() {printf("test() called\n");};
   };
   // Test2A.cpp
   // ==========
   #include "Test2.h"
   myClass object;

   // Test2B.cpp
   // ==========
   #include "Test2.h"
   void main()
   {
     extern myClass object;
     object.test();
   }

   // sample output:
   myClass Constructor called
   test() called
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 10.10 10.20<BR>
Keywords            : CPPIss vcbuglist410 vcbuglist500<BR>
Version             : 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

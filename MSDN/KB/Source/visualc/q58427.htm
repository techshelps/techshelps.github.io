

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Changing STDIN Translation Mode from Text to Binary </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q58427 ">
<META NAME="KBModify" CONTENT="1996/01/19">
<META NAME="KBCreate" CONTENT="1990/02/02">
<META NAME="Keywords" CONTENT="kbprg kbfasttip kbprb">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C, when a ^Z (CTRL+Z) is entered as part of a string input in response to gets() or scanf(), the next line does not prompt for an input.  CAUSE =====  Because STDIN is a predefined file pointer opened in text mode, and a ^Z character i...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5W,QATX,QAH4,QAMB,QAY2,QANE,QAUD,QBFY,QAY5,QAXC,QAYZ,QACF,QBV8,QBVV,QAO2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Changing STDIN Translation Mode from Text to Binary</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 19, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q58427 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
    - Microsoft C/C++ for MS-DOS, versions 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++ 32-bit Edition, versions 1.0 and 2.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft C, when a ^Z (CTRL+Z) is entered as part of a string
input in response to gets() or scanf(), the next line does not prompt
for an input.
<P>
<P><h2>CAUSE</h2>
 
<P>
Because STDIN is a predefined file pointer opened in text mode, and a
^Z character is an end-of-file marker in MS-DOS, the ^Z character
automatically closes the file pointer. The gets() or scanf() function
does not stop to accept input from STDIN following the previous input
containing a ^Z character.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, change the translation mode of STDIN from
text mode to binary mode. Because the ^Z character is not translated
as an end-of-file character in binary mode, the gets() from the
following example accepts input only following a ^Z from STDIN after
the translation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To change STDIN from text mode to binary mode, use the setmode()
run-time function to change the translation mode. The following code
demonstrates this behavior, and includes the setmode() function to
show how to change STDIN from text mode to binary mode. Remove the
comment delimiters to observe the difference in the program's behavior
after adding the setmode() function.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;fcntl.h&gt;

void main (void)
</PRE>{
<PRE>   char str1[20];

/* if( setmode ( fileno ( stdin ), O_BINARY ) == -1 )
          perror ( "Cannot set stdin to binary mode" );
   else
          printf ( "stdin mode successfully set to binary\n" );
*/
   do {
          printf ( "Enter a string : " );
          gets ( str1 );
   } while ( strcmp( str1,"n" &amp;&amp; strcmp( str1, "\n\r") );

</PRE>}
<P>
Compile the above code and run the program. If you enter a string and
then press the ENTER key, the program will loop and prompt for another
string. However, if you enter a ^Z character, you will see that the program
doesn't perform as you would expect.
<P>
Now, uncomment the if-else clause. Recompile the program and run it.
Input that includes a ^Z character is now accepted without infinite
looping.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 5.10 6.00 6.00a 6.00ax 7.00<BR>
KBCategory: kbprg kbfasttip kbprb<BR>
KBSubcategory: CRTIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 19, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Initializing Bitfields as Integers in C </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q60252 ">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1990/04/02">
<META NAME="Keywords" CONTENT="CLngIss kbcode kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C, you can initialize the values of an entire bitfield structure as an integer in several ways:   - Declare the bitfield structure as part of a union with an integer.    (This is the preferred method).   - Use an integer pointer by set...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QA4Q,QAI4,QAO3,QAO2,QAKD,QAIC,QAPF,QAPN,QAHH,QAH4,QBQU,QBJQ,QBXS,QAKC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Initializing Bitfields as Integers in C</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q60252 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft C, you can initialize the values of an entire bitfield
structure as an integer in several ways:

<UL><LI>Declare the bitfield structure as part of a union with an integer.
   (This is the preferred method).

<LI>Use an integer pointer by setting the pointer to the address of the
   structure and then changing what the pointer points to.

<LI>Enforce the bitfield type constraints to get a copy of the bitfield
   into an integer variable.
<P>
</UL>For examples of these three methods, see below.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In Microsoft C, bitfields are stored in word-sized blocks with the least
significant bit representing the first bit of the bitfield. For example,
the bitfields in bitstruct, defined below in the example, are stored as
follows:
<P>
<PRE>           &lt;  p4   &gt; &lt;  p3   &gt; &lt; p2&gt; &lt;p1&gt;
        |?|?|?|?|?|?|?|?|?|?|?|?|?|?|?|?|

</PRE>Assigning the integer 0x4c to this structure results in the following bit
pattern:
<P>
<PRE>        |0|0|0|0|0|0|0|0|0|1|0|0|1|1|0|0|

</PRE>The bitfields are given the following respective values:
<P>
<PRE>   p1=0 p2=3 p3=2 p4=0

</PRE>If the number of bits needed for a bitfield structure exceeds 16 in code
compiled for MS-DOS or Windows, words will be added as needed to provide
room for the structure with no single bitfield crossing a word boundary.
Microsoft C/C++, 32-bit Edition, stores bitfield structures in double word
values. If the field requires more than 32 bits, the compiler uses
additional double words as needed.
<P>
NOTE: There is no "standard" for storing bitfields in memory; therefore,
any program that depends on a particular storage method is not portable to
systems that use a different method.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   struct strtype
      {
      unsigned p1:2;
      unsigned p2:3;
      unsigned p3:5;
      unsigned p4:5;
      } bitstruct;

   union untype
      {
      struct strtype un_bitstruct;
      unsigned bit_integer;
      } bitunion;

   unsigned *intptr;
   unsigned intgr;

   void main(void)
   {
      /*  Using the bitfield structure only */

         /* Set the pointer to address of bitfield */
      intptr = (unsigned *)&amp;bitstruct;

         /* Change the bitfield */
      *intptr = 0x4c;

         /* Get the new value */
      intgr = *(unsigned *)&amp;bitstruct;

      /* Using an union makes this much easier (syntactically) */

         /* Set the pointer */
      intptr = &amp;bitunion.bit_integer;

         /* Change the bitfield */
      bitunion.bit_integer = 0x4c;

         /* Get the new value */
      intgr = bitunion.bit_integer;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords          : CLngIss kbcode kbfasttip<BR>
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0; WINDOWS:1.0,1.5; WINDOWS  NT:1.0,2.0,4.0,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

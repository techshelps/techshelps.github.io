

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Modeless Dialog Box with MFC Libraries </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q103788">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1993/08/30">
<META NAME="Keywords" CONTENT="MfcUI kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" This article demonstrates how to create a modeless dialog box using a dialog-box template resource  using MFC.  To build a CModeless dialog box, the following steps should be followed:  1. Create a dialog class derived from CDialog and override the ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QAGI,QAY5,QAH4,QABO,QANX,QBV8,QAB9,QBXR,QAUD,QAIF,QBWP,QAW6,QAPN,QAOE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating a Modeless Dialog Box with MFC Libraries</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q103788</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, and 4.0
</UL></PRE> 
<P>
This article demonstrates how to create a modeless dialog box using a
dialog-box template resource  using MFC.
<P>
To build a CModeless dialog box, the following steps should be
followed:

<OL><P><LI>Create a dialog class derived from CDialog and override the
   Create() member function of CDialog. For example, you might have
   code that resembles the following:
<P>
<P><PRE>      class CModeless: public CDialog
<PRE></PRE>           {
             .
             .
             .
             public:
                 CModeless(){ }
                 BOOL Create(UINT nID, CWnd * pWnd)
                      { return CDialog::Create(nID,pWnd);}
             .
             .
             .
           };

   NOTE: You could let ClassWizard generate the dialog class and then
   simply add the Create() function.

</PRE><P><LI>Write code to construct an object of the dialog class and create
   the dialog box window. For example, if you have a menu item that
   should display the dialog box, you might have code that resembles
   the following:
<P>
<P><PRE>      void CMainFrame::OnModeless()
<PRE></PRE>        {
            pdlg = new CModeless;
            pdlg-&gt;Create(IDD_DIALOG1,this);
        }

</PRE></OL>where CMainFrame::pdlg is defined as:
<PRE>          CModeless * pdlg;

   NOTE: It is important to allocate the object on the heap rather than
   the stack if you want to prevent the modeless dialog box from being
   destroyed when the function is exited.

</PRE><P><LI>You must call CWnd::DestroyWindow() in OnCancel, or whenever the
   modeless dialog box needs to be destroyed.
<P>
<P><PRE>      void CModeless::OnCancel()
      {
<PRE></PRE>          DestroyWindow();
      }

</PRE><P><LI>Override CWnd::PostNcDestroy() in your dialog class to delete the
   dialog box object:
<P>
   virtual void CModeless::PostNcDestroy() {delete this;}
<P>
   PostNcDestroy() is a virtual member function of the CWnd class that is
   called by the OnNcDestroy() function.
<P>
</OL>A modeless dialog class will typically override the OnOK() and
OnCancel() member functions to call DestroyWindow() and should not
call the base class CDialog::OnOK() and CDialog::OnCancel() functions.
The CDialog::OnOK() and CDialog::OnCancel() functions call
EndDialog(). EndDialog() should be called only when using modal dialog
boxes.
<P>
If you are using Dialog Data Exchange (DDX) and Dialog Data Validation
(DDV), you're OnOK() handler for your dialog class might resemble the
following:
<P>
<PRE>   void CModeless::OnOK()
   {
           if (!UpdateData(TRUE))
             {
               TRACE0("UpdateData failed during dialog termination\n");
               // The UpdateData routine will set focus to correct item
               return;
             }
           DestroyWindow();
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 2.00 2.10 2.50 2.51 2.52 3.00<BR>
3.10 4.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: MFcUI<BR>
Keywords          : MfcUI kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample set::(lower_, upper_)bound, equal_range Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158572">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/31">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following sample code illustrates how to use the set::lower_bound, set::upper_bound, and set::equal_range STL functions in Visual C++.  MORE INFORMATION  Required Header            Prototype ---------     template                               ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXS,QAY5,QAHH,QBV8,QAUD,QAB9,QBFY,QAOX,QDMR,QBXN,QAKD,QAIJ,QAHG,QAH7,QAH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample set::(lower_, upper_)bound, equal_range Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158572</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following sample code illustrates how to use the set::lower_bound,
set::upper_bound, and set::equal_range STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;set&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class _K, class _Pr, class _A&gt;
   class set {
   public:
   // Function 1:
      const_iterator lower_bound(const _K&amp; _Kv) const;
   // Function 2:
      const_iterator upper_bound(const _K&amp; _Kv) const;
   // Function 3:
      _Paircc equal_range(const _K&amp; _Kv) const;
   }

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The lower_bound function returns an iterator to the earliest element in the
controlled sequence that has a key that does not match the value passed to
the lower_bound function. The upper_bound function returns an iterator to
the earliest element in the controlled sequence that has a key that matches
the value passed to the upper_bound function. If no such element exists,
the function returns end(). In both cases, the function
set::key_comp()(key, x) is used to determine if the keys match. The
equal_range function returns a pair value, where .first is the result of
the lower_bound function, and .second is the result of the upper_bound
function.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// SetBoundRange.cpp:
//      Illustrates how to use the lower_bound function to get an
//      iterator to the earliest element in the controlled sequence
//      that has a key that does not match the value passed to the
//      function. It also illustrates how to use the upper_bound
//      function to get an iterator to the earliest element in the
//      controlled sequence that has a key that matches the value
//      passed to the function. The last thing it illustrates is
//      how to use the equal_range function to get a pair value that
//      contains the lower_bound and upper_bound results of the key.
//
// Functions:
//
//    lower_bound  Returns an iterator whose value does not match the
//                 key passed to the function, or end() if no such
//                 element exists.
//    upper_bound  Returns an iterator whose value matches the key
//                 passed to the function, or end() if no such element
//                 exists.
//    equal_range  Returns a pair of (lower_bound,upper_bound).
//
// Written by Derek Jamison
// of Microsoft Technical Support,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<PRE>#include &lt;set&gt;
#include &lt;iostream&gt;

</PRE>typedef set&lt;int,less&lt;int&gt;,allocator&lt;int&gt; &gt; SET_INT;
<P>
<PRE>void main() {
  SET_INT s1;
  SET_INT::iterator i;
  cout &lt;&lt; "s1.insert(5)" &lt;&lt; endl;
  s1.insert(5);
  cout &lt;&lt; "s1.insert(10)" &lt;&lt; endl;
  s1.insert(10);
  cout &lt;&lt; "s1.insert(15)" &lt;&lt; endl;
  s1.insert(15);
  cout &lt;&lt; "s1.insert(20)" &lt;&lt; endl;
  s1.insert(20);
  cout &lt;&lt; "s1.insert(25)" &lt;&lt; endl;
  s1.insert(25);

  cout &lt;&lt; "s1 -- starting at s1.lower_bound(12)" &lt;&lt; endl;
// prints: 15,20,25
  for (i=s1.lower_bound(12);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- starting at s1.lower_bound(15)" &lt;&lt; endl;
// prints: 15,20,25
  for (i=s1.lower_bound(15);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- starting at s1.upper_bound(12)" &lt;&lt; endl;
// prints: 15,20,25
  for (i=s1.upper_bound(12);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- starting at s1.upper_bound(15)" &lt;&lt; endl;
// prints: 20,25
  for (i=s1.upper_bound(15);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- s1.equal_range(12)" &lt;&lt; endl;
// does not print anything
  for (i=s1.equal_range(12).first;i!=s1.equal_range(12).second;i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- s1.equal_range(15)" &lt;&lt; endl;
// prints: 15
  for (i=s1.equal_range(15).first;i!=s1.equal_range(15).second;i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;
</PRE>}
<P>
<P><h3>Program Output</h3>
 
<P>
s1.insert(5)
s1.insert(10)
s1.insert(15)
s1.insert(20)
s1.insert(25)
s1 -- starting at s1.low
s1 has 15 in its set.
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- starting at s1.low
s1 has 15 in its set.
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- starting at s1.upp
s1 has 15 in its set.
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- starting at s1.upp
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- s1.equal_range(12)
s1 -- s1.equal_range(15)
s1 has 15 in its set.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books Online: Visual C++ Books; C/C++; Standard C++ Library
Reference
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample equal_range lower_bound upper_bound<BR>
string<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Debugger Expands Arrays Passed to Functions Incorrectly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112984">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/03/23">
<META NAME="Keywords" CONTENT="CvwIss kb16bitonly WBDebug kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In C++ source files, passing an array as an argument to a function and then trying to watch that array in the function causes CodeView and the Visual Workbench Debugger to expand the array incorrectly.  RESOLUTION  Declare the function argument as ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAR4,QBV8,QAAP,QAB9,QA56,QA55,QA4Q,QDL9,QBWQ,QBWO,QBWN,QAPN,QAHE,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Debugger Expands Arrays Passed to Functions Incorrectly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112984</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.01 4.10 | 1.00 1.50 1.51 4.00 4.10
<PRE>MS-DOS         | WINDOWS
</PRE>kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Visual Workbench Integrated Debugger included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, and 1.51
</PRE>
<LI>Microsoft CodeView for MS-DOS, versions 4.0, 4.01, and 4.1

<LI>Microsoft CodeView for Windows, versions 4.0 and 4.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In C++ source files, passing an array as an argument to a function and
then trying to watch that array in the function causes CodeView and
the Visual Workbench Debugger to expand the array incorrectly.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Declare the function argument as a pointer rather than an array. For
example, change a declaration that uses the array syntax
<P>
<PRE>    void Function( int Array[5] )

</PRE>to a declaration that uses pointer syntax:
<P>
<PRE>    void Function( int * Array )

</PRE>This is not a problem in the 32-bit debuggers.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in CodeView for MS-DOS,
versions 4.0, 4.01, and 4.1, CodeView for Windows, versions 4.0 and 4.1,
and the Visual Workbench Debugger, versions 1.0 and 1.5. This problem was
corrected in the Visual Workbench Debugger included with Visual C++ for
Windows version 1.52. This is still a problem in CodeView.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The problem only occurs when compiling a .CPP file. Even though the
array argument is not expanded correctly when debugging, the actual
code generated by the compiler is correct and executes as expected.
The sample code shown below illustrates this. Debugging the sample
code in CodeView or the Visual Workbench Debugger and placing a watch
on the variable named Array after tracing into Function() causes the
Array argument to be expanded as:
<P>
<PRE>    Array[0] = 3052
    Array[1] = 3052
    Array[2] = 822
    Array[3] = 4
    Array[4] = 3

</PRE>The values for Array[0], Array[1], and Array[2] may be different than
those shown above but they will be incorrect. Looking at the address
of the Array argument shows that the debugger is looking at the wrong
location on the stack. Even though the array is not expanded
correctly, the output generated by the sample code is correct.
<P>
<P><h2>Sample Code</h2>
 
<P>
<PRE>/* Compile options needed: /Zi
*/

#include &lt;stdio.h&gt;

void Function( int Array[5] )
</PRE>{
<PRE>    int i;

    printf("\nInside Function: \n");

    for( i = 0; i &lt; 5; i++ )
        printf("Array[%d] = %d\n", i, Array[i]);

    for( i = 0; i &lt; 5; i++ )
        Array[i] = i;
}

void main( void )
</PRE>{
<PRE>    int Array[5] = { 4, 3, 2, 1, 0 };
    int i;

    printf("Before calling Function: \n");

    for( i = 0; i &lt; 5; i++ )
        printf("Array[%d] = %d\n", i, Array[i]);

    Function( Array );

    printf("\nAfter calling Function: \n");

    for( i = 0; i &lt; 5; i++ )
        printf("Array[%d] = %d\n", i, Array[i]);
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 4.00 4.10 quickwatch locals<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: WBDebug CvwIss<BR>
Keywords          : CvwIss kb16bitonly WBDebug kbbuglist kbfixlist kbtool<BR>
Version           : 4.00 4.01 4.10 | 1.00 1.50 1.51<BR>
Platform          : MS-DOS WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

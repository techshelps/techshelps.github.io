

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: C4058 Generated with /ASu, /ASw, /AMu, and /AMw </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q37632 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1988/11/05">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An attempt to pass the address of a local variable to a function that expects a pointer fails when the compiler options include /ASu, /ASw, /AMu, or /AMw. C versions 6.x generate the following message:     C4058: address of automatic (local) variab...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAYL,QAH4,QAH6,QAOT,QAAW,QAEV,QBV8,QAHE,QAC2,QA4Q,QAYC,QAPN,QAO3,QAO2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: C4058 Generated with /ASu, /ASw, /AMu, and /AMw</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q37632 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 6.00 6.00a | 1.00 1.50
<PRE>MS-DOS                 | OS/2       | WINDOWS
</PRE>kbtool kbprb
 
The information in this article applies to:
<P>
<PRE>   The Microsoft C/C++ Compiler (CL.EXE), included with:
    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0 and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An attempt to pass the address of a local variable to a function that
expects a pointer fails when the compiler options include /ASu, /ASw, /AMu,
or /AMw. C versions 6.x generate the following message:
<P>
<PRE>   C4058: address of automatic (local) variable taken, DS != SS

</PRE>C/C++ version 7.0 generates the following message:
<P>
<PRE>   C4762: near/far mismatch in argument; conversion supplied

</PRE>In C/C++ versions 8.0 and 8.0c, the message depends on the option selected.
If the command line includes /ASw or /AMw, the compiler produces the
following messages:
<P>
<PRE>   C4758: address of automatic (local) variable taken, DS != SS
   C4762: near/far mismatch in argument : conversion supplied

</PRE>If the command line includes /ASu or /AMu, the compiler produces the
following message:
<P>
<PRE>   C4762: near/far mismatch in argument : conversion supplied

</PRE><h2>CAUSE</h2>
 
<P>
The segment setup codes "u" and "w" inform the compiler that the stack
segment (SS) and the data segment (DS) are not necessarily identical. In
the small and medium memory models, data pointers are assumed to be near
(in DS) and local variables are stored on the stack (in SS). The warnings
occur because DS and SS may not be equal.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To eliminate the warning, perform one of the following:

<UL><LI>Declare the local variable with the "static" attribute.

<LI>Declare the function to receive a _far pointer parameter.

<LI>Compile the code with the compact or large memory model. However, this
   option may have other implications for your code.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following sample code illustrates the situation:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compile options needed: /AMw
 */

void inc(int *);

void main(void)
</PRE>{
<PRE>   int p = 666;
   inc(&amp;p);               /* address of stack variable */
}

void inc(int *p)
</PRE>{
<PRE>   (*p)++;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 6.00 6.00a 6.00ax 7.00 8.00 8.00c<BR>
KBCategory: kbtool kbprb<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

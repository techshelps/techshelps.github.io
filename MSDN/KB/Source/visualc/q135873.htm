

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Add Tooltips for Controls on an MFC Modal Dialog Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q135873">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1995/08/29">
<META NAME="Keywords" CONTENT="kbprg MfcUI">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  To make the CToolTipCtrl class work correctly, you must call the CToolTipCtrl::RelayEvent() function. This makes it possible for the mouse messages to be passed to the tooltip control.  For a non-modal dialog box window in an MFC application, use t...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QAGI,QAY5,QAUD,QABO,QAD7,QAA1,QBE5,QAYL,QAH4,QANX,QAJH,QAB9,QDI2,QA7O V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Add Tooltips for Controls on an MFC Modal Dialog Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q135873</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.1, 2.2, 4.0, 4.1,
<P><PRE>     4.2, 4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To make the CToolTipCtrl class work correctly, you must call the
CToolTipCtrl::RelayEvent() function. This makes it possible for the mouse
messages to be passed to the tooltip control.
<P>
For a non-modal dialog box window in an MFC application, use the window's
CWnd::PreTranslateMessage() function to call CToolTipsCtrl::RelayEvent().
However, for a modal dialog box, the CDialog::PreTranslateMessage()
function is not called because modal dialog boxes have their own message
loops. Therefore, to use CToolTipCtrl in a modal dialog box, you need a
different approach. This article gives a step-by-step example that shows
how to use the CToolTipCtrl class in a MFC modal dialog box, it involves
adding two additional member variables to the application class and
overwriting the CWinApp::ProcessMessageFilter() function for the
application class.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Step-by-Step Example</h3>
 
<P>
The following procedure generates a default MFC skeleton application and
adds tooltips to the OK button on the About dialog box and the dialog box
itself:

<OL><P><LI>Use the Appwizard in Visual C++ to generate an MFC application, call it
   Tooltips, and use all the Appwizard default settings.

<P><LI>Include the &lt;afxcmn.h&gt; header file in the stdafx.h file.

<P><LI>Add the following member variables to the CTooktipsApp class in the
   Tooltips.h file:
<P>
   class CTooltipsApp : public CWinApp
   {
<P><PRE>      //...
</PRE>   public:
<PRE>      HWND    m_hwndDialog;
      CToolTipCtrl*   m_gpToolTip;

      //...
   };

</PRE><P><LI>Initiate the two variables in the application's constructor to NULL:
<P>
   CTooltipsApp::CTooltipsApp()
   {
<P><PRE>      m_hwndDialog = NULL;
      m_gpToolTip = NULL;
</PRE>   }

<P><LI>Overwrite the CTooltipsApp:: ProcessMessageFilter() function as follows:
<P>
   BOOL CTooltipsApp::ProcessMessageFilter(int code, LPMSG lpMsg)
   {
<P><PRE>      if (m_hwndDialog != NULL)
<PRE></PRE>          if (lpMsg-&gt;hwnd == m_hwndDialog ||
              ::IsChild(m_hwndDialog, lpMsg-&gt;hwnd))
            {
                           if (NULL != m_gpToolTip)
                                   m_gpToolTip-&gt;RelayEvent(lpMsg);
            }
           return CWinApp::ProcessMessageFilter(code, lpMsg);
   }

</PRE><P><LI>Use Classwizard to add a member variable for the OK button in the
   CAboutDlg class, and call it m_btOK. Also, add a m_pTooltip pointer to a
   CToolTipCtrl object:
<P>
   class CAboutDlg : public CDialog
   {
   public:
<P><PRE>      CAboutDlg();
</PRE><P>
<PRE>   // Dialog Data
      //{{AFX_DATA(CAboutDlg)
      enum { IDD = IDD_ABOUTBOX };
      CButton   m_btOK;
      //}}AFX_DATA

      CToolTipCtrl* m_pTooltip;

      //...
   };

</PRE><P><LI>Add code to the CAboutDlg class' constructor and destructor to
   initialize and release the tooltip object, you might also need to add a
   default destructor first:
<P>
   CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
   {
<P><PRE>      m_pTooltip = NULL;
</PRE>   }
<P>
   CAboutDlg::~CAboutDlg()
   {
<P><PRE>      delete m_pTooltip;
</PRE>   }

<P><LI>Overwrite the OnMouseMove() function of the CAboutDlg class to set up
   the tooltip control:
<P>
<PRE>   void CAboutDlg::OnMouseMove(UINT nFlags, CPoint point)
   {
       //Set up the tooltip
       if (!m_pTooltip)
       {
          int rt;
           m_pTooltip = new CToolTipCtrl;
         rt = m_pTooltip-&gt;Create(this);
         ASSERT(rt!=0);

         ((CTooltipsApp*)AfxGetApp())-&gt;m_gpToolTip= m_pTooltip;

         rt = m_pTooltip-&gt;AddTool(this, "About Box");
         ASSERT(rt!=0);
         rt = m_pTooltip-&gt;AddTool(&amp;m_btOK,"OK Button");
         ASSERT(rt!=0);

          m_pTooltip-&gt;Activate(TRUE);
       }

      CDialog::OnMouseMove(nFlags, point);
   }

</PRE><P><LI>Overwrite the OnInitDialog() function of the CAboutDlg class to pass the
   dialog's handle to the application:
<P>
   BOOL CAboutDlg::OnInitDialog()
   {
<P><PRE>      CDialog::OnInitDialog();
</PRE><P>
<P><PRE>      ((CTooltipsApp*)AfxGetApp())-&gt;m_hwndDialog=m_hWnd;
</PRE><P>
<P><PRE>      return TRUE;  // return TRUE unless you set the focus to a control
<PRE></PRE>                    // EXCEPTION: OCX Property Pages should return FALSE
   }

</PRE><P><LI>Overwrite the PostNcDestroy() function of the CAboutDlg class to reset
   the variables in the application class:
<P>
<PRE>   void CAboutDlg::PostNcDestroy( )
   {
      CDialog::PostNcDestroy();

      ((CToolTipsApp*)AfxGetApp())-&gt;m_hwndDialog= NULL;
      ((CToolTipsApp*)AfxGetApp())-&gt;m_gpToolTip= NULL;
   }

</PRE><P><LI>Rebuild the application and bring up the About dialog box, you will see
   the tooltips.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 3.1 3.10 3.2 3.20<BR>
Keywords            : kbprg MfcUI<BR>
Technology          : kbMfc<BR>
Version             : 2.1 2.2 4.0 4.1 4.2 4.2b 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: C4786 Warning is Not Disabled with #pragma Warning </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167355">
<META NAME="KBModify" CONTENT="1997/04/24">
<META NAME="KBCreate" CONTENT="1997/04/23">
<META NAME="Keywords" CONTENT="CLIss kbcode kbtool vcbuglist500 kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Warnings similar to the following are generated even if you use the warning pragma to disable the warning:     warning C4786:    'std::rb_tree                                       &gt;::TransClosureNode,    CAiSpanningTree                       &gt;::Tr...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QABO,QALS,QA36,QAG7,QBXS,QBXF,QA4P,QAKD,QA0K,QAG4,QBVV,QBE7,QBE6,QAVX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: C4786 Warning is Not Disabled with #pragma Warning</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167355</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Warnings similar to the following are generated even if you use the warning
pragma to disable the warning:
<P>
<PRE>   warning C4786:
   'std::rb_tree&lt;CAiSpanningTree&lt;State,std::less&lt;State&gt;&gt;::TransClosureNode,
   CAiSpanningTree&lt;State,std::less&lt;State&gt;&gt;::TransClosureNode,std::ident&lt;Cai
   SpanningTree&lt;State,std::less&lt;State&gt;&gt;::TransClosureNode,CAiSpanningTree&lt;S
   tate,std::less&lt;State&gt;&gt;::TransClosureNode&gt;,std::less&lt;CAiSpanningTree&lt;Stat
   e,std::less&lt;State&gt;&gt;::TransClosureNode&gt;&gt;' : identifier was truncated to
   '255' characters in the debug information

</PRE>The code:
<P>
<PRE>   #pragma warning(disable:4786)

</PRE>disables warnings that list the file and line number. For example:
<P>
<PRE>   C:\test\Text.cpp(25) : warning C4786:

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This warning can be ignored. However, the identifier may not be accessible
or viewable in the debugger.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /*
   Compiler Options: /Zi
   */

   #include &lt;stddef.h&gt;
   #include &lt;new.h&gt;
   #pragma warning(disable:4786)

   namespace std {
      template &lt;class T, class U&gt;  struct ident {};
      template &lt;class T1, class T2&gt; struct pair {};
      template &lt;class Arg1, class Arg2, class Result&gt;
         struct binary_function {};
      template &lt;class T&gt;struct less : binary_function&lt;T, T, bool&gt; {};
      template &lt;class T, class Distance&gt; struct bidirectional_iterator {};
      template &lt;class Key, class Value, class KeyOfValue, class Compare&gt;
        class rb_tree {
          public:
             typedef int size_type;
             typedef int difference_type;
             typedef void* link_type;
             struct rb_tree_node {};
             typedef Key key_type;
             class iterator : public bidirectional_iterator&lt;Value,
                difference_type&gt; {};
             class const_iterator   : public
                bidirectional_iterator&lt;Value,difference_type&gt; {
                    protected:
                    link_type node;
                    const_iterator(link_type x) : node(x) {}
             };
             public:
                size_type count(const key_type&amp; x) const;
             };
        template &lt;class Key, class Value, class KeyOfValue,
                 class Compare&gt;
                 rb_tree&lt;Key, Value, KeyOfValue, Compare&gt;::size_type
                 rb_tree&lt;Key, Value, KeyOfValue, Compare&gt;::
                 count(const Key&amp; k) const {
                    size_type n = 0;
                    return n;
             };
             template &lt;class Key, class Compare&gt;   class set {
               typedef ::std::rb_tree&lt;Key, Key,ident&lt;Key, Key&gt;, Compare&gt;
                 rep_type;
          rep_type t;
     };
   }

   template &lt;class Node, class Compare&gt;class CAiTransitiveClosure{
   public:
      typedef std::set&lt;Node, Compare &gt; NodeSet; NodeSet m_todo;
   };

   template &lt;class Node, class Compare&gt; class CAiSpanningTree {
   public:
      typedef std::set&lt;Node, Compare &gt; NodeSet;
   protected:
      typedef Node CAiSpanningTreeNode;
      typedef NodeSet CAiSpanningTreeNodeSet;
   private:
      struct TransClosureNode {};
      struct TransClosureGraph
        : public CAiTransitiveClosure&lt;TransClosureNode,
   std::less&lt;TransClosureNode&gt; &gt;
      {};
   public:
      CAiSpanningTree(const Node&amp; initialNode);
      CAiSpanningTree(const NodeSet&amp; initialNodes);
   };

   struct State { };
   class CformSpanningTree:public CAiSpanningTree&lt;State,std::less&lt;State&gt;&gt;
   {
   public:
       CFormSpanningTree( NodeSet initial)
      : CAiSpanningTree&lt;State, std::less&lt;State&gt; &gt;(initial)
      {}

   };
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CLIss kbcode kbtool vcbuglist500 kbbuglist<BR>
Version             : 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Passing C Arrays to MASM by Reference </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104644">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1993/09/23">
<META NAME="Keywords" CONTENT="CLngIss MASMLngIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below demonstrates how to pass C arrays of type char, short, and long to a Microsoft Macro Assembler (MASM) procedure by reference.  MORE INFORMATION  The samples below include one C file and three different assembly files. The thre...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QALG,QBW7,QAI5,QAYA,QAX6,QAPF,QADZ,QBWP,QBBT,QA6E,QAD7,QAC2,QBWG,QAH7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Passing C Arrays to MASM by Reference</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104644</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 5.1a, 6.0, 6.0a, 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below demonstrates how to pass C arrays of type char,
short, and long to a Microsoft Macro Assembler (MASM) procedure by
reference.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The samples below include one C file and three different assembly files.
The three assembly files demonstrate how to pass variables by reference in
small model and large model for MS-DOS and in flat model for Windows NT.
Link only the appropriate assembly module to the C module.
<P>
Note that MASM 6.1 or later and the C/C++ 32-bit compiler that ships with
Visual C++, 32-bit Edition, are required to build the flat model Windows NT
version.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // Filename: CMAIN.C
   // Compile options needed: /c
   #include &lt;stdio.h&gt;

   #ifdef __cplusplus
   extern "C" {
   #endif

   void MasmSub (char *, short *, long *);

   #ifdef __cplusplus
   }
   #endif

   char chararray[4] = "abc";
   short shortarray[3]  = {1, 2, 3};
   long longarray[3] = {32768, 32769, 32770};

   main ()
   {
      printf ("%s\n", chararray);
      printf ("%d %d %d\n", shortarray[0], shortarray[1], shortarray[2]);
      printf ("%ld %ld %ld\n", longarray[0], longarray[1], longarray[2]);
      MasmSub (chararray, shortarray, longarray);
      printf ("%s\n", chararray);
      printf ("%d %d %d\n", shortarray[0], shortarray[1], shortarray[2]);
      printf ("%ld %ld %ld", longarray[0], longarray[1], longarray[2]);
   }

</PRE><h3>Sample Code for MS-DOS Small Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for MASM: /MX
   ; Assemble options needed for ML: /c /Cx

   .MODEL small, C
   .286
   .CODE

   MasmSub PROC uses si, \
      arraychar:PTR, \
      arrayshort:PTR, \
      arraylong:PTR

      mov si, arraychar  ; Load SI with the address of the char array.
      mov BYTE PTR [si], "x"       ; Since a char is 1 byte long, each
      mov BYTE PTR [si+1], "y"     ; successive element can be accessed
      mov BYTE PTR [si+2], "z"     ; by adding 1 more to si.
      mov si, arrayshort ; Load SI with the address of the short array.
      add WORD PTR [si], 7         ; Since a short is 2 bytes long, each
      add WORD PTR [si+2], 7       ; successive element can be accessed
      add WORD PTR [si+4], 7       ; by adding 2 more to si.
      mov si, arraylong  ; Load SI with the address of the long array.
      add WORD PTR [si], 1         ; Since a long is 4 bytes long, each
      adc WORD PTR [si+2], 0       ; successive element in the array
      add WORD PTR [si+4], 1       ; can be accessed by adding 4 more
      adc WORD PTR [si+6], 0       ; to si (or 4 more to si+2 to access
      add WORD PTR [si+8], 1       ; the high word of each element).
      adc WORD PTR [si+10], 0
      ret
   MasmSub ENDP
   END

</PRE><h3>Sample Code for MS-DOS Large Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for MASM: /MX
   ; Assemble options needed for ML: /c /Cx

   .MODEL large, C
   .286
   .CODE

   MasmSub PROC uses es si, \
      arraychar:PTR, \
      arrayshort:PTR, \
      arraylong:PTR

      les si, arraychar  ; Load ES:SI with the address of the char array.
      mov BYTE PTR es:[si], "x"    ; Since a char is 1 byte long, each
      mov BYTE PTR es:[si+1], "y"  ; successive element can be accessed
      mov BYTE PTR es:[si+2], "z"  ; by adding 1 more to si.
      les si, arrayshort ; Load ES:SI with the address of the short array.
      add WORD PTR es:[si], 7      ; Since a short is 2 bytes long, each
      add WORD PTR es:[si+2], 7    ; successive element can be accessed
      add WORD PTR es:[si+4], 7    ; by adding 2 more to si.
      les si, arraylong  ; Load ES:SI with the address of the long array.
      add WORD PTR es:[si], 1      ; Since a long is 4 bytes long, each
      adc WORD PTR es:[si+2], 0    ; successive element in the array
      add WORD PTR es:[si+4], 1    ; can be accessed by adding 4 more
      adc WORD PTR es:[si+6], 0    ; to si (or 4 more to si+2 to access
      add WORD PTR es:[si+8], 1    ; the high word of each element).
      adc WORD PTR es:[si+10], 0
      ret
   MasmSub ENDP
   END

</PRE><h3>Sample Code for Windows NT Flat Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for ML: /c /Cx /coff

   .386
   .MODEL flat, C
   .CODE

   MasmSub PROC uses esi, \
      arraychar:PTR, \
      arrayshort:PTR, \
      arraylong:PTR

      mov esi, arraychar ; Load ESI with the address of the char array.
      mov BYTE PTR [esi], "x"      ; Since a char is 1 byte long, each
      mov BYTE PTR [esi+1], "y"    ; successive element can be accessed
      mov BYTE PTR [esi+2], "z"    ; by adding 1 more to esi.
      mov esi, arrayshort; Load ESI with the address of the short array.
      add WORD PTR [esi], 7        ; Since a short is 2 bytes long, each
      add WORD PTR [esi+2], 7      ; successive element can be accessed
      add WORD PTR [esi+4], 7      ; by adding 2 more to esi.
      mov esi, arraylong ; Load ESI with the address of the long array.
      inc DWORD PTR [esi]          ; Since a long is 4 bytes long, each
      inc DWORD PTR [esi+4]        ; successive element can be accessed
      inc DWORD PTR [esi+8]        ; by adding 4 more to esi.
      ret
   MasmSub ENDP
   END

</PRE>The following is the output of the program:
<P>
<PRE>  abc
  1 2 3
  32768 32769 32770
  xyz
  8 9 10
  32769 32770 32771
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: mixed language<BR>
Keywords          : CLngIss MASMLngIss kbfasttip<BR>
Version           : MS-DOS:6.0,6.0a,6.0ax,7.0; OS/2:6.0,6.0a; WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,4.0,5.0<BR>
Platform          : MS-DOS NT OS/2 WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

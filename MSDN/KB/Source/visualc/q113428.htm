

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Array-Style New Allocates Wrong Number of Objects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113428">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/04/04">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Unexpected results may occur due to errors in the code generated by using any one of the following optimizations: /O2, /O1, /Og, /Oe, /Ol, or /Ox. This problem may be reproduced by using the C++  new  operator to allocate memory for an array of obj...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAH6,QAH4,QAAP,QAKC,QAR4,QAKP,QBFY,QBC6,QAW6,QAU3,QAPN,QAOT,QAMR,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Array-Style New Allocates Wrong Number of Objects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113428</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Unexpected results may occur due to errors in the code generated by using
any one of the following optimizations: /O2, /O1, /Og, /Oe, /Ol, or /Ox.
This problem may be reproduced by using the C++ "new" operator to allocate
memory for an array of objects, assuming that the following criteria are
also satisfied:

<UL><LI>A "default" constructor is explicitly supplied for the object class.

<LI>A destructor is not explicitly provided for the class.

<LI>A nonconstant expression is used for the array size in the "new"
   invocation.
<P>
</UL><h2>CAUSE</h2>
 
<P>
The optimizing compiler is generating incorrect code. This may be seen by
creating a .COD listing file by adding /Fc to the compiler options.
Depending on the optimization used, the code generated to call "new" will
not be passed the correct value.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Any of the following will correct this condition for the specific example
provided below:

<UL><LI>Use the fast (/f) compiler instead of the optimizing compiler.
<P>
   -or-

<LI>Disable the optimization for the duration of the function that calls the
   C++ "new" operator.
<P>
   -or-

<LI>Do not provide a default constructor for the class.
<P>
   -or-

<LI>Provide a destructor for the class.
<P>
   -or-

<LI>Use a constant expression for the array size (make "n" a "const" or
   supply an explicit value instead).
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /f- and /Ox
   Actually, any one of /O2, /O1, /Og, /Oe, /Ol, or /Ox
   will cause the problem.
*/

//---------------------------------------------------------
// Sample to demonstrate code generation problem
//---------------------------------------------------------

#include &lt;iostream.h&gt;

</PRE>class AnyName
{
public:
<PRE>    AnyName() { nTimesCalled++; };
    static int nTimesCalled;
</PRE>};
<P>
<PRE>int AnyName::nTimesCalled = 0;

//---------------------------------------------------------
// main() calls 'new' to demonstrate the problem
//---------------------------------------------------------

void main()
</PRE>{
<PRE>    int n = 20;    // Indicates the number of
                   // objects to construct

    AnyName *pAnyName = new AnyName [n];

    cout &lt;&lt; "Results: " &lt;&lt; endl
         &lt;&lt; "  Constructor was called " &lt;&lt; AnyName::nTimesCalled
         &lt;&lt; " times." &lt;&lt; endl
         &lt;&lt; "  Constructor should have been called "
         &lt;&lt; (n) &lt;&lt; " times." &lt;&lt; endl;

    if ( AnyName::nTimesCalled == (n) )
        cout &lt;&lt; "  Constructor called correct number of times!"
             &lt;&lt; endl &lt;&lt; endl;
    else
        cout &lt;&lt; "  Constructor called incorrect number of times!"
             &lt;&lt; endl &lt;&lt; endl;
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 8.00 8.00c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CPPIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

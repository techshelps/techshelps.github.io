

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: No Error for Overloading Delete in a Class </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115523">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/05/29">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In C++, it is not legal to overload operator delete within a class. However, when this is attempted, no specific error message is presented by the compiler informing the user of this limitation.  STATUS ======  Microsoft has confirmed this to be a ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAEF,QBCT,QAGC,QAGB,QDKD,QANY,QAKM,QAB4,QAOT,QAAP,QAH4,QAKP,QABO,QAV1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: No Error for Overloading Delete in a Class</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115523</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50
MS-DOS | WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
<P>
<P><PRE>    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In C++, it is not legal to overload operator delete within a
class. However, when this is attempted, no specific error message is
presented by the compiler informing the user of this limitation.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
This is not a problem in the C/C++ 32-bit compiler, version 8.0 or version
9.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For reference, see "The Annotated C++ Reference Manual" by Ellis and
Stroustrup, section 12.5: "Only one operator delete() may be
declared for a single class; thus operator delete() cannot be
overloaded. However, the Microsoft implementation of C++ extends
this rule as stated in the 'C++ Language Reference' shipped with
the product: 'For 16-bit targets, Microsoft C++ allows multiple
delete operators to be present for a given class type--one for each
data memory model.'"
<P>
The 32-bit C/C++, version 8.0, introduces the compiler error C2669,
"illegal to overload member 'operator delete' with different number of
formal arguments", which is generated in this situation.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// The following code should produce an error when compiling but
// does not. After removing the __near keywords, which are invalid
// for 32-bit compilers, the following code causes the C2669 error
// to occur when using the 32-bit compiler for Windows NT.

      /* Compile options needed: /c
      */
      #include &lt;iostream.h&gt;
      #include &lt;new.h&gt;

      class myClass
      {
      public:
           void operator delete( void __near *ptr ) { ::delete(ptr); }
           void operator delete( void __near *ptr, size_t mysize ) {
       ::delete(ptr); }
           void PrintSomething() { cout &lt;&lt; "In the class!" &lt;&lt; endl; }
      };

      void main()
      {
           myClass * pTemp = new myClass;
           pTemp-&gt;PrintSomething();
           delete pTemp;
      }


</PRE><h2>REFERENCES</h2>
 

<UL><LI>"The Annotated C++ Reference Manual" by Ellis and Stroustrup,
   section 12.5.

<LI>"C++ Language Reference," chapter 4, "Expressions, delete
   Operator."
<P>
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 7.00 8.00 8.00c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CPPIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

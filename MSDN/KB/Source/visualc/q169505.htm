

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Creating an MFC Automation Controller for PowerPoint 97 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q169505">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1997/06/03">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article provides the minimum steps needed to create an automation controller to manipulate the Microsoft PowerPoint 97 object model using the Microsoft Foundation Classes (MFC).  This article is designed as a tutorial. The tutorial makes the f...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDKP,QBVQ,QBWS,QAJM,QAIJ,QBXR,QAPN,QAMB,QAH4,QABI,QBFY,QDIV,QAYL,QDO6,QA2Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Creating an MFC Automation Controller for PowerPoint 97</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q169505</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft PowerPoint 97 for Windows
<LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides the minimum steps needed to create an automation
controller to manipulate the Microsoft PowerPoint 97 object model using the
Microsoft Foundation Classes (MFC).
<P>
This article is designed as a tutorial. The tutorial makes the following
assumptions:

<UL><LI>You are familiar with Visual C++.
<LI>You are familiar with how MFC applications are written.
<LI>You have Microsoft PowerPoint 97 installed on your development machine.
<LI>You have Microsoft Visual C++ installed on your development machine.
<P>
</UL>The sample application you create uses menu options to control the behavior
of PowerPoint. The tutorial demonstrates how to:

<UL><LI>Use the PowerPoint object library (msppt8.olb) to create
   COleDispatchDriver wrapper classes.
<LI>Connect to the application object.
<LI>Create presentations.
<LI>Create slides.
<LI>Create shapes on a slide.
<LI>Run a slide show.
<P>
</UL>NOTE: This article is designed to show you the basics of controlling the
PowerPoint object model with a Visual C++ MFC application. The code created
is not intended to be production quality. The coding techniques were
selected to simplify the process as much as possible.
<P>
NOTE: As an alternative to using the Microsoft Foundation Classes, you can
use the #import feature of the Visual C++ compiler to convert the contents
of a type library into Visual C++ classes.
<P>
For more information on the #import directive, please refer to the online
documentation. For a code sample, please see the COMEXCEL sample.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications and Visual C++
procedures for illustration only, without warranty either expressed or
implied, including, but not limited to the implied warranties of
merchantability and/or fitness for a particular purpose. The Visual C++
procedures in this article are provided "as is" and Microsoft does not
guarantee that they can be used in all situations. While Microsoft support
engineers can help explain the functionality of a particular macro, they
will not modify these examples to provide added functionality, nor will
they help you construct macros to meet your specific needs. If you have
limited programming experience, you may want to consult one of the
Microsoft Solution Providers. Solution Providers offer a wide range of fee-
based services, including creating custom macros. For more information
about Microsoft Solution Providers, call Microsoft Customer Information
Service at (800) 426- 9400.
<P>
<P><h3>Step 1: Create the Application Framework with the AppWizard</h3>
 

<OL><P><LI>Start Microsoft Visual C++ version 5.0.

<P><LI>Create a new MFC AppWizard project. To do this:
<P>
   a. On the File menu, click New.
<P>
   b. If not selected, click the Projects tab.
<P>
   c. Click the MFC AppWizard (exe) project type.
<P>
   e. In the Project name field, type a name for your project. These
<P><PRE>      steps assume you use the name TestPPT.
</PRE><P>
   f. Click OK to start the MFC AppWizard.

<P><LI>Create an SDI application with OLE Automation support. To do this:
<P>
   a. Click Single document and click Next.
<P>
   b. Click Next again. This sample doesn't need database support.
<P>
   c. Deselect the ActiveX Controls check box and select the Automation
<P><PRE>      check box. Click Finish (you don't need to customize any of the other
      steps in the AppWizard for this sample.)
</PRE><P>
   d. Click OK to accept the skeleton project specifications.
<P>
</OL><h3>Step 2: Create COleDispatchDriver Wrapper Classes Based on Msppt8.olb</h3>
 

<OL><P><LI>On the View menu, click ClassWizard.

<P><LI>Click the Add Class button and click From a Type Library on the drop-
   down list.

<P><LI>In the Import from Type Library dialog box, navigate to the location
   of the Msppt8.olb file (the .olb file is found in the Office folder).
   If you selected the default installation options, for Microsoft Office
   97, the path should look like this:
<P>
<P><PRE>      C:\Program Files\Microsoft Office\Office
</PRE>
<P><LI>Click Msppt8.olb and click Open.

<P><LI>Select the classes you want to use in your application.
<P>
   NOTE: At any time you may add additional classes from the Msppt8.olb
   file, so the choices you make now are not permanent.
<P>
   For this tutorial select the following classes (to select multiple
   classes, hold down the Control key and select the classes you want):
<P>
<P><PRE>    - _Application
    - SlideShowSettings
    - Presentations
    - Slides
    - _Slide
    - Shapes
    - _Presentation
</PRE><P>
   Click OK when you have finished selecting the classes above, and then
   click OK to close the MFC ClassWizard.
<P>
</OL><h3>Step 3: Create a PowerPoint Menu</h3>
 
<P>
Create a PowerPoint menu for the MFC application with the following
options:

<UL><LI>Start PowerPoint
<LI>Create Presentation
<LI>Create Slide
<LI>Add Shape
<LI>Start SlideShow
<LI>Quit PowerPoint
<P>
</UL>To do this:

<OL><P><LI>Click the ResourceView tab in your workspace.

<P><LI>Open the TestPPT resources folder.

<P><LI>Open the Menu folder.

<P><LI>Double-click the IDR_MAINFRAME resource.

<P><LI>Double-click the rectangle, which has no text, to the right of the
   Help menu. This opens the Menu Item Properties dialog box.

<P><LI>Create the PowerPoint menu by clicking the General tab and typing the
   following text in the Caption field:
<P>
<P><PRE>      PowerPoint
</PRE>
<P><LI>Create the Start PowerPoint menu option by double-clicking the rectangle
   underneath PowerPoint and typing the following text into the Caption
   field:
<P>
<P><PRE>      Start PowerPoint
</PRE>
<P><LI>Create the Create Presentation menu option by double-clicking the
   rectangle underneath Start PowerPoint and typing the following text into
   the Caption field:
<P>
<P><PRE>      Create Presentation
</PRE>
<P><LI>Create the Create Slide menu option by double-clicking the rectangle
   underneath Create Presentation and typing the following text into the
   Caption field:
<P>
<P><PRE>      Create Slide
</PRE>
<P><LI>Create the Add Shape menu option by double-clicking the rectangle
   underneath Create Slide and typing the following text into the Caption
   field:
<P>
<P><PRE>      Add Shape
</PRE>
<P><LI>Create the Slide Show menu option and its sub menus by double-clicking
   the rectangle underneath Add Shape and typing the following text into
   the Caption field:
<P>
<P><PRE>      Start SlideShow
</PRE>
<P><LI>Create the Quit PowerPoint menu option by double-clicking the rectangle
   underneath Slide Show and typing the following text into the Caption
   field:
<P>
<P><PRE>      Quit PowerPoint
</PRE>
<P><LI>Close the Menu Item Properties dialog box.
<P>
</OL><h3>Step 4: Create Hooks for the Menu Option Handlers</h3>
 

<OL><P><LI>In ResourceView, right-click the menu option Start PowerPoint
   and click ClassWizard.

<P><LI>Select the COMMAND message, and click Add Function. This
   opens the Add Member Function dialog box.
<P>
   NOTE: Make sure the Project name is TestPPT and the Class name is
   CMainFrame.

<P><LI>Provided you didn't change the name of the resource ID, the name of
   your handler should be:
<P>
<P><PRE>      OnPowerpointStartpowerpoint
</PRE><P>
   Click OK to accept this name.

<P><LI>Repeat steps 1 through 3 to create handlers for the remaining menu
   options. After all handlers are created, click OK to close the
   ClassWizard.
<P>
</OL><h3>Step 5: Add the Command Handler Code</h3>
 

<OL><P><LI>Follow these steps to create a member variable to hold the application
   object:
<P>
   a. Click the ClassView tab in your workspace.
<P>
   b. Open TestPPT classes.
<P>
   c. Right-click the CMainFrame class icon and click Add member variable
<P><PRE>      from the context menu.
</PRE><P>
   d. Enter the following information into the Add Member Variable dialog
<P><PRE>      box:
</PRE><P>
<PRE>         Variable Type: _Application
         Variable Declaration: m_ppt
         Access: Private

      Click OK when you are finished.

</PRE><P><LI>Modify the CMainFrame class constructor to connect to the application
   object. When you are finished, the CMainFrame constructor should look
   like this:
<P>
<P><PRE>      CMainFrame::CMainFrame()
      {
<PRE></PRE>         // Create an instance of the PowerPoint application.
         m_ppt.CreateDispatch("PowerPoint.Application.8");
      }

</PRE><P><LI>Add the following code for the command handlers:
<P>
   Start PowerPoint:
<P>
<P><PRE>      void CMainFrame::OnPowerpointStartpowerpoint()
      {
</PRE><P>
<PRE>         // Check if the IDispatch connection exists with PowerPoint,
         // if not create one.
         if (m_ppt.m_lpDispatch == NULL) {

            // Create IDispatch connection to PowerPoint.
            m_ppt.CreateDispatch("PowerPoint.Application.8");

         };

         // Bring the PowerPoint application to the front.
         m_ppt.Activate();

      }

   Start SlideShow:

      void CMainFrame::OnPowerpointStartslideshow()
      {

         _Presentation oPresentation;
         SlideShowSettings oShow;

         // Attach to the Active Presentation.
         oPresentation.AttachDispatch(m_ppt.GetActivePresentation());

         // Attach to the slide-show settings.
         oShow.AttachDispatch(oPresentation.GetSlideShowSettings());

         // Run the slide show.
         oShow.Run();

      }

   Quit PowerPoint:

      void CMainFrame::OnPowerpointQuitpowerpoint()
      {
         // Check if PowerPoint is still running. If
         // PowerPoint is not running, quit PowerPoint
         // and release the dispatch pointer.
         if(m_ppt.m_lpDispatch != NULL) {

            // Quit PowerPoint. Note, the Quit command exits
            // PowerPoint without displaying any dialog boxes. So,
            // any unsaved data is lost.
            m_ppt.Quit();

            // Free the dispatch. This sets m_lpDispatch to NULL.
            m_ppt.ReleaseDispatch();

         };
      }

   Create Slide:

      void CMainFrame::OnPowerpointCreateslide()
      {
         // Connect to the active presentation. There is no error trapping.
         // If the active presentation the framework traps
         // the error and displays a message box.
         _Presentation ActivePresentation(m_ppt.GetActivePresentation());

         // Connect to the slides collection.
         Slides oSlides(ActivePresentation.GetSlides());

         // This constant is defined in the PowerPoint Object model.
         // You can use the Object Browser, with Visual Basic Editor
         // (VBE), to look up the different constant values.
         const ppLayoutTitleOnly = 11;

         // Add a new slide to the presentation. This code adds the new
         // slide to the end of the presentation.
         oSlides.Add(oSlides.GetCount() + 1l, ppLayoutTitleOnly);
      }

   Create Presentation:

      void CMainFrame::OnPowerpointCreatepresentation()
      {

         Presentations PresCollection;

         // Make sure there is a dispatch pointer for PowerPoint.
         if(m_ppt.m_lpDispatch == NULL) {

            // Display a message indicating that PowerPoint is not running.
            MessageBox("PowerPoint is not running.", "Start PowerPoint");
         } else {

            // Bring PowerPoint to the front.
            m_ppt.Activate();

            // Attach the presentations collection to the PresCollection
            // variable.
            PresCollection.AttachDispatch(m_ppt.GetPresentations());

            // Create a new presentation.
            PresCollection.Add(1);
         };
      }

   Add Shape:

      void CMainFrame::OnPowerpointAddshape()
      {

         // Connect to the active presentation object.
         _Presentation ActivePresentation(m_ppt.GetActivePresentation());

         // Connect to the Slides collection object.
         Slides oSlides(ActivePresentation.GetSlides());

         // Connect to the first slide in the presentation.
         long lIndex = 1;
         COleVariant SlideNumber(lIndex);
         _Slide oSlide(oSlides.Item(SlideNumber));

         // Connect to the Shapes collection.
         Shapes oShape(oSlide.GetShapes());

         // Create the heart shape on the slide.
         const long msoShapeHeart = 21;
         float l = 50,t = 150,w = 350,h = 350;
         oShape.AddShape(msoShapeHeart, l, t, w, h);
      }

</PRE></OL><h3>Step 6: Build and Run the Application</h3>
 

<OL><P><LI>On the Build menu, click Build TestPPT.exe.
<P>
   NOTE: The first time you build the project it takes longer than normal
   to  build. This is because the compiler creates a pre-compiled header
   (.pch) for the project. The .pch file, for your project, is roughly
   four megabytes in size.

<P><LI>On the Build menu, click Execute TestPPT.exe.
<P>
</OL>Try selecting the different options on the PowerPoint menu.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: kbmacro ppt8 vba vbe
<P>

Technology        : kbole kbMfc<BR>
Version           : WINDOWS:97; WINDOWS NT:5.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

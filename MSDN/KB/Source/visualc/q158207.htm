

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the string::operator+ Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158207">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/24">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the string::operator+ STL function in Visual C++.  MORE INFORMATION  Required Header               Prototype ---------     Function 1:        template                                  inline        basic...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAY5,QAKM,QANY,QBV8,QAL3,QAB9,QAP2,QABO,QA6N,QATX,QBA8,QA4F,QA36,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the string::operator+ Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158207</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the string::operator+
STL function in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;string&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   Function 1:
       template&lt;class _E, class _TYPE, class _A&gt; inline
       basic_string&lt;_E, _TYPE, _A&gt;
       operator+(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
                 const _E *RCharArray);

   Function 2:
       template&lt;class _E, class _TYPE, class _A&gt; inline
       basic_string&lt;_E, _TYPE, _A&gt;
       operator+(const _E *LCharArray,
                 const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

   Function 3:
       template&lt;class _E, class _TYPE, class _A&gt; inline
       basic_string&lt;_E, _TYPE, _A&gt;
       operator+(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
                 const _E RChar);

   Function 4:
       template&lt;class _E, class _TYPE, class _A&gt; inline
       basic_string&lt;_E, _TYPE, _A&gt;
       operator+(const _E LChar,
                 const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

   Function 5:
       template&lt;class _E, class _TYPE, class _A&gt; inline
       basic_string&lt;_E, _TYPE, _A&gt;
       operator+(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
                 const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description:</h3>
 
<P>
There are five versions of the string::operator+ function. Two functions
are used to concatenate a null-terminated character array and a
basic_string. Two functions are used to concatenate a character and a
basic_string. The last function is used to concatenate two basic_string
variables.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StringPlus.cpp : Illustrates how to use the operator+ to concatenate
//                  a null-terminated character array and a basic_string,
//                  how to concatenate a character and a basic_string,
//                  and how to concatenate two basic_string variables.
//
// Functions:
//
//    operator+ : Concatenates a null-terminated character array and
//                a basic_string.
//    operator+ : Concatenates a character array and a basic_string.
//    operator+ : Concatenates two basic_string variables.
//
// Written by Derek Jamison
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<PRE>#include &lt;string&gt;
#include &lt;iostream&gt;

void main()
</PRE>{
<PRE>   string result;
   string S1="ABC";
   string S2="DEF";
   char CP1[]="GHI";
   char C='J';

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "S2 is " &lt;&lt; S2 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "C is " &lt;&lt; C &lt;&lt; endl;

   result=S1+CP1;                           // Function 1  (ABCGHI)
   cout &lt;&lt; "S1+CP1 is " &lt;&lt; result &lt;&lt; endl;

   result=CP1+S1;                           // Function 2  (GHIABC)
   cout &lt;&lt; "CP1+S1 is " &lt;&lt; result &lt;&lt; endl;

   result=S1+S2;                            // Function 3  (ABCDEF)
   cout &lt;&lt; "S1+S2 is " &lt;&lt; result &lt;&lt; endl;

   result=S1+C;                             // Function 4  (ABCJ)
   cout &lt;&lt; "S1+C is " &lt;&lt; result &lt;&lt; endl;

   result=C+S1;                             // Function 5  (JABC)
   cout &lt;&lt; "C+S1 is " &lt;&lt; result &lt;&lt; endl;
</PRE>}
<P>
Program Output is:
<P>
S1 is ABC
S2 is DEF
CP1 is GHI
C is J
S1+CP1 is ABCGHI
CP1+S1 is GHIABC
S1+S2 is ABCDEF
S1+C is ABCJ
C+S1 is JABC
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample operator+ string<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

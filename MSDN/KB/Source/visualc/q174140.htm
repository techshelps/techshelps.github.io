

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Determine the Version of a Microsoft Word Document </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q174140">
<META NAME="KBModify" CONTENT="1997/09/23">
<META NAME="KBCreate" CONTENT="1997/09/19">
<META NAME="Keywords" CONTENT="kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article shows you how to determine the version of a Microsoft Word document.  MORE INFORMATION  Microsoft Word saves its data in an OLE Compound file that is made up of streams and storages. In particular, it creates a data stream called  Word...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIH,QAUD,QABD,QABE,QALW,QDO7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Determine the Version of a Microsoft Word Document</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q174140</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 2.0, 2.1, 2.2, 4.0,
   4.1, 4.2, 5.0
<LI>Microsoft Word 97 for Windows
<LI>Microsoft Word for Windows 95, version 7.0
<LI>Microsoft Word for Windows, version 6.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article shows you how to determine the version of a Microsoft Word
document.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Word saves its data in an OLE Compound file that is made up of
streams and storages. In particular, it creates a data stream called
"WordDocument" where it saves the contents and a special header called a
"FIB" (File information block). This header contains information about the
various attributes of the file that are documented in the MSDN as well as
the version of Microsoft Word that saved the document. The following
Microsoft Visual C++ code demonstrates how to open and read the
WordDocument stream, and return the version number.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // Word's File-Information-Block (FIB) structure...
   typedef struct _fib {
      short magicNumber;
      // Word 6.0: 0xA5DC
      // Word 7.0 (95): 0xA5DC
      // Word 8.0 (97): 0xA5EC

      short version;   // &gt;= 101 for Word 6.0 and higher...
      // Word 6.0: 101
      // Word 7.0 (95): 104
      // Word 8.0 (97): 105
   } FIB, *LPFIB;


   //* WordVersionFromFile()
</PRE>******************************************************
<PRE>   //* Returns
   //*        6 for Word 6.0
   //*        7 for Word 7.0 (95)
   //*        8 for Word 8.0 (97)
   //*        Negative if an error occurs...
   //****************************************************
   int WordVersionFromFile(char *filename) {
      // Translate filename to UNICODE...
      WCHAR wcFilename[1024];
      int i = mbstowcs(wcFilename, filename, strlen(filename));
      wcFilename[i] = 0;

      IStorage *pStorage;
      HRESULT hr;
      FIB fib;

      // Open document as an OLE compound document...
      hr = ::StgOpenStorage(wcFilename, NULL, STGM_READ |
</PRE>STGM_SHARE_EXCLUSIVE, NULL, 0, &amp;pStorage);
<P>
<PRE>      if(!FAILED(hr)) {
         // Open the data-stream where Word stores the data...
         IStream *pStream;
         hr = pStorage-&gt;OpenStream(L"WordDocument", NULL, STGM_READ |
</PRE>STGM_SHARE_EXCLUSIVE, 0, &amp;pStream);
<P>
<PRE>         if(!FAILED(hr)) {
            // Read relevant FIB information...
            DWORD dwCount; // bytes read...
            pStream-&gt;Read(&amp;fib, sizeof(FIB), &amp;dwCount);

            // Let go of our IStream pointer...
            pStream-&gt;Release();
         }
         else return -2;

         // Let go of our IStorage pointer...
         pStorage-&gt;Release();
      }
      else return -1;

      // Determine version to return...
      if(fib.version &lt; 101) return fib.version;

      switch(fib.version) {
         case 101: return 6;
         case 103: // fall-through...
         case 104: return 7;
         case 105: return 8;
         default: return 8; // Default, return the latest
      }
   }

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about OLE Compound files and Structured Storage,
search the MSDN or Microsoft Visual C++ online help on "Structured
Storage."
<P>
For more information about the Microsoft Word file format, and/or the FIB
structure, search the MSDN for "Microsoft Word 97 Binary File Format."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: word97 winword<BR>
Keywords          : kbcode<BR>
Version           : WINDOWS:6.0,7.0,97; WINNT:2.0,2.1,2.2,4.0,4.1,4.2,5.0<BR>
Platform          : WINDOWS winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

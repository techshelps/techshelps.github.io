

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Post Increment Operator Works Incorrectly for __huge Ptrs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125969">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1995/02/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When the post increment operator ++ is applied to a huge pointer within an argument list for a function call, the resulting pointer value will not be normalized. This problem occurs only when you use the optimizing compiler to compile the code. The...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QASR,QALZ,QAUR,QA4Q,QAGI,QAO3,QAO2,QBVV,QAU7,QAOT,QANY,QAKP,QAKM,QBQU,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Post Increment Operator Works Incorrectly for __huge Ptrs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125969</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ compiler (CL.EXE), included with:
   Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL> 
<P>
SYMPTOMS
 
<P>
When the post increment operator ++ is applied to a huge pointer within an
argument list for a function call, the resulting pointer value will not be
normalized. This problem occurs only when you use the optimizing compiler
to compile the code. The pointer will not cross over the 64K data-segment
boundary. Instead, it wraps around and points to the beginning of the
current data segment. The sample code in this article demonstrates the
problem.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
When using the optimizing compiler, do not use the increment operator for
huge pointers inside function calls. Instead, increment the pointer after
the function call.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Reproduce Problem</h3>
 
<P>
<PRE>/* Compile options needed: /f- or /O2 or /Ox or any combinations
            of compiler optimizations, except /Od..
*/

#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;

#define ARRAYSIZE       32769L   /* (64K/2)+1 of integers */

void Change( int __huge *ptr ) { *ptr += 1; }

int main( void )
</PRE>{
<PRE>    int __huge *ptr, __huge *save;
    long i;

    ptr = (int __huge *)_halloc(ARRAYSIZE, (size_t)sizeof( int ));
    save = ptr;

    /* Instead of adding one to the last element of the array (which
       is in a new 64K segment), save wraps around to the beginning
       of the array and increments the element in the first position
       a second time.
    */

    for (i = 0; i &lt; ARRAYSIZE; i++)
   Change( save++ );

    printf( "ptr[0] == %d, incremented twice.\n",
        ptr[0L] );
    printf( "ptr[32767] == %d, incremented once.\n",
        ptr[32767L] );
    printf( "ptr[32768] == %d, not incremented.\n",
        ptr[32768L] );

    _hfree( ptr );
    return 0;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: autoincrement gpf 1.00 1.50 8.00 8.00c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

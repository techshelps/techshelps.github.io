

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: False Memory Leaks in MFC DLL Statically Linked to MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q150075">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/04/19">
<META NAME="Keywords" CONTENT="MfcDLL vcbuglist410 vcfixlist420 kbprg kbbuglist kbfixlist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An MFC Regular DLL that is statically linked to the MFC library reports a memory leak although the memory is deallocated correctly in the destructor of the CWinApp-derived object in the DLL. An error message occurs:      Detected memory leaks!    D...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAW6,QAPN,QBW6,QBFY,QA7H,QAR4,QANG,QAJZ,QDNN,QAIF,QAJH,QABA,QAO4,QAM1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: False Memory Leaks in MFC DLL Statically Linked to MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q150075</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An MFC Regular DLL that is statically linked to the MFC library reports a
memory leak although the memory is deallocated correctly in the destructor
of the CWinApp-derived object in the DLL. An error message occurs:
<P>
<PRE>   "Detected memory leaks!
   Dumping objects -&gt;
   D:\ProjDir\TheProj\TheProj.cpp(30) : {32} normal block at 0x00751FD0,
   1000 bytes long."

</PRE>This may also happen for memory that is not deallocated until the
destructor of any other global or static object in the DLL.
<P>
<P><h2>CAUSE</h2>
 
<P>
This is a false memory leak. In a Regular DLL statically linked to MFC, the
debug memory heap is checked for leaks before the destructors are called
for any global or static objects in the DLL.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Any deinitialization required for the DLL, when it is being unloaded or
when its application has terminated, should be done in the ExitInstance
member function of the Regular DLL's CWinApp-derived class.
<P>
ExitInstance is called during the unloading of an MFC DLL but before the
debug memory leak detection occurs. Memory allocations freed at this time
do not get reported as false memory leaks.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem has been fixed in Visual C++
version 4.2.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This is an issue of timing.
<P>
An MFC Regular DLL and an MFC application both have a global object
declared at file-scope that is of a class derived from CWinApp. This is
called the application object. The C Runtime is responsible for calling the
destructors of all global and static objects. This is done after all other
processing in the application or DLL is finished.
<P>
The MFC framework calls the C Runtime function _CrtDumpMemoryLeaks() to
detect memory leaks. This also happens during termination of the DLL or
application. Normally, _CrtDumpMemoryLeaks is called automatically when an
internal MFC process-local object, _AFX_DEBUG_STATE, is destructed by a
call to AfxTermLocalData. This internal process-local object destructs when
MFC itself is terminated and cleaned up.
<P>
When MFC is used in the shared MFC40 DLL, the cleanup of MFC occurs during
the unloading of this DLL, which always occurs after the termination of
applications or DLLs that use it. However, when MFC is linked into a DLL or
application, MFC is physically inside the DLL or application, and its
cleanup occurs at the same time as the cleanup of global and static
objects. For an MFC application, this is no problem. AfxTermLocalData
(which eventually causes _CrtDumpMemoryLeaks to be called) is called from
the destruction of a global object that is reliably destructed after any
user-defined objects, due to the #pragma init_seg(lib) directive.
<P>
However, Regular DLLs statically linked to MFC call AfxTermLocalData during
DLL_PROCESS_DETACH in the DllMain function. DllMain is called by the C Run
time before the C Run time destroys any global or static objects.
Therefore, the order of execution would be:
<P>
<PRE>   DLLMAIN -&gt; AfxTermLocalData -&gt; ~_AFX_DEBUG_STATE -&gt; _CrtDumpMemoryLeaks

</PRE>which detects that some memory has yet to be freed. Then:
<P>
<PRE>   C Runtime cleanup (doexit) -&gt; ~CWinApp

</PRE>where the program is finally and correctly freeing the memory.
<P>
Putting memory deallocation and other deinitialization into the
ExitInstance member function fixes the false memory leak detection because
ExitInstance is called from DllMain before AfxTermLocalData is called.
<P>
<P>
 
<PRE>Keywords          : MfcDLL vcbuglist410 vcfixlist420 kbprg kbbuglist kbfixlist
Technology        : kbMfc
Version           : 4.0 4.1
Platform          : NT WINDOWS
Issue type        : kbbug
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Inconsistent Use of fscanf %x.xf Formatting </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q49823 ">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1989/10/14">
<META NAME="Keywords" CONTENT="CRTIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using the Microsoft C run-time library function fscanf() with the format specifier %x.xf to read floating-point values usually produces undesirable results. This happens especially if the file contains floating point information that was not record...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKD,QBFN,QBFY,QBC9,QBC8,QANO,QAJQ,QBE7,QBE6,QA5A,QAH4,QDNG,QAKC,QBVV,QAY5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Inconsistent Use of fscanf %x.xf Formatting</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q49823 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using the Microsoft C run-time library function fscanf() with the
format specifier %x.xf to read floating-point values usually produces
undesirable results. This happens especially if the file contains
floating point information that was not recorded using the same %x.x
specifier that is being used to read.
<P>
The sample code below can be used as an example of expected behavior.
The first output line shows the input values, the second shows what an
incorrect fscanf() format specifier reads, and the third is the correct
data read by fscanf(). The output from the program is as follows:
<P>
<PRE>   Values: 3.104000, 34.235340, 834.343201, 5968.394043
   After Read: 3.100000, 419561472.000000, 0.000003, 4.227506
   After Rewind: 3.104000, 34.235340, 834.343201, 5968.394043

</PRE>The output of the second line (After Read) may differ between compilers
and may depend upon the compiler options, but is still not the expected
values.
<P>
<P><h2>CAUSE</h2>
 
<P>
This is not a problem with the fscanf() function; it is due to using
a different floating point specifier to read the value than was used
to write the value.
<P>
In the sample code below, the first value is read correctly. After the
first value is read, the file pointer points to the second 0 (zero) in
3.104000. When the second value is read, the information in the file
does not conform to floating-point format, and zeros are read after that.
The compiler has no way of knowing how far to move the file pointer to
get to the next value.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Read floating point values with the same specifier that was used to
write them. Once a value has been read correctly, it may be truncated
or formatted as desired.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For more information on the scanf() family of functions, please refer
to the Visual C++ Books Online.
<P>
The following sample code demonstrates the importance of reading
floating point values with the same type specifier that was used in
writing them.  Refer to the SUMMARY above for the expected program
output.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #include&lt;stdio.h&gt;

   void main( void )
   {
      float a = 3.104f, b = 34.23534f, c = 834.3432f, d = 5968.394f;
      float ar, br, cr, dr;
      FILE *stream;

      if( (stream = fopen( "file.tst", "a" )) == NULL )
         printf( "ERROR:  Unable to open output file" );
      else
         fprintf( stream, "%f,%f,%f,%f\n", a, b, c, d );
      fclose( stream );
      if( (stream = fopen( "file.tst", "r" )) == NULL )
         printf( "ERROR:  Unable to open input file" );
      else
                       /* NOTE:  %x.x format specifier */
      {                /*  |  */
         printf("Values: %f, %f, %f, %f\n", a, b, c, d );
         fscanf( stream, "%4f,%4f,%4f,%4f", &amp;ar, &amp;br, &amp;cr, &amp;dr );
         printf("After Read: %f, %f, %f, %f\n", ar, br, cr, dr );
         rewind(stream);
         fscanf( stream, "%f,%f,%f,%f", &amp;ar, &amp;br, &amp;cr, &amp;dr );
         printf("After Rewind: %f, %f, %f, %f\n", ar, br, cr, dr );
      }
   }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CRTIss kbfasttip<BR>
Version             : 5.1 6.0 6.0a 6.0ax 7.0 1.0 1.5 2<BR>
Platform            : MS-DOS NT WINDOWS<BR>
Issue type          : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

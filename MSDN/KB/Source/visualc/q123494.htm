

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Bitwise AND in a Conditional Expression Fails </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123494">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/12/04">
<META NAME="Keywords" CONTENT="CodeGen kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Compiling code using the bitwise AND operator on signed integer literals in a conditional statement will produce incorrect results.  CAUSE =====  The problem is that the 16-bit test instruction used by the version 8.0 compiler toggles the sign-bit ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANY,QAVX,QAVW,QAR4,QAI4,QAH4,QAOT,QBFY,QA4Q,QAKP,QBWP,QAL3,QAAP,QAB9,QDIX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Bitwise AND in a Conditional Expression Fails</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123494</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS NT
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with Microsoft
   Visual C++ 32-bit Edition, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Compiling code using the bitwise AND operator on signed integer
literals in a conditional statement will produce incorrect results.
<P>
<P><h2>CAUSE</h2>
 
<P>
The problem is that the 16-bit test instruction used by the version 8.0
compiler toggles the sign-bit flag. This triggers the JLE (Jump Less than
or Equal) to jump to the failure case when it should just fall thru to the
passing case.
<P>
The version 9.0 compiler generates this correctly by using the 32-bit
version of the test operator to evaluate the entire 32-bit register (EAX).
<P>
Assembly code generated using the version 8.0 compiler:
<P>
<PRE>; 20   :     if ((tmp &amp; 0x80) &gt; 0)

  00157 0f be 45 f8     movsx   eax, BYTE PTR _tmp$[ebp]
  0015b a8 80           test    al, 128         ; 00000080H


</PRE>Assembly code generated using the version 9.0 (x86) compiler:
<P>
<PRE>; 20   :     if ((tmp &amp; 0x80) &gt; 0)

  00157 0f be 45 f8     movsx   eax, BYTE PTR _tmp$[ebp]
  0015b a9 80 00 00 00  test    eax, 128        ; 00000080H


</PRE><h2>RESOLUTION</h2>
 
<P>
Caste the integer literals to unsigned integers to force the correct
results. For example, use:
<P>
<PRE>   if ((tmp &amp; 0x80U) &gt; 0)

   -or-

   if ((tmp &amp; (unsigned)0x80) &gt; 0)

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. This bug was corrected in Visual
C++ version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Reproduce Problem</h3>
 
<P>
<PRE>/*
   Compile options needed: none
*/

#include &lt;stdio.h&gt;

void main()
</PRE>{
<PRE>   char tmp = 0x82;

   if ((tmp &amp; 0x80) &gt; 0)    // This should return true since the
      printf("True\n");     // result of the bitwise AND operation is
   else                     // an integer 0x00000080 and is definitely
      printf("False\n");    // greater than zero (0).
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 8.00 buglist1.00 fixlist2.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CodeGen<BR>
Keywords          : CodeGen kbbuglist kbfixlist kbtool<BR>
Version           : 1.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

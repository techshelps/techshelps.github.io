

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Pass a char from C to MASM by Value &amp; Returning a char </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104618">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1993/09/23">
<META NAME="Keywords" CONTENT="CLngIss MASMLngIss kbcode kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below demonstrates how to pass a char from a program written in Microsoft C to a procedure written with the Microsoft Macro Assembler (MASM). The MASM function also returns a char to the C program.  Registers are used to return valu...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAH4,QBWP,QAUD,QAD7,QAH7,QAH6,QAPF,QAKD,QALW,QAY2,QAEF,QDL9,QBWQ,QBWO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Pass a char from C to MASM by Value &amp; Returning a char</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104618</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 5.1a, 6.0, 6.0a, 6.0ax
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below demonstrates how to pass a char from a program
written in Microsoft C to a procedure written with the Microsoft Macro
Assembler (MASM). The MASM function also returns a char to the C
program.
<P>
Registers are used to return values of simple data types. For 16-bit
code, such as an MS-DOS program, use the following conventions for
returning data to a C program:
<P>
<PRE>   char                   AL
   short, int, near *     AX
   long, far *            DX:  High order portion (segment)
                          AX:  Low order portion (offset)

</PRE>For 32-bit code, such as a Windows NT program, use the following
conventions for returning data to a C program:
<P>
<PRE>   char                   AL
   short                  AX
   long, int, *           EAX

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The samples below include one C file and two different assembly files.
The two assembly files demonstrate how to pass a variable in small
model for MS-DOS and in flat model for Windows NT. Link only the
appropriate assembly module to the C module.
<P>
Note that MASM 6.1 or later and the C/C++ 32-bit compiler that ships
with Visual C++, 32-bit Edition, are required to build the flat model
Windows NT version.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   // Filename: CMAIN.C
   // Compile options needed: /c

   #include &lt;stdio.h&gt;

   #ifdef __cplusplus
   extern "C" {
   #endif

   char MasmSub (char);

   #ifdef __cplusplus
   }
   #endif

   main ()
   {
      char var = 'a';
      printf ("%c\n", var);
      printf ("%c", MasmSub(var));
   }

</PRE><h3>Sample Code for MS-DOS Small Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for MASM: /MX
   ; Assemble options needed for ML: /c /Cx

   .MODEL small, C
   .286
   .CODE

   MasmSub PROC, \
      cVar:BYTE

      mov al, cVar     ; Load the char into AL.
      add al, 25       ; Because the function returns a char (a 1-byte
      ret              ; value), C will get the return value from AL.
   MasmSub ENDP
   END

</PRE><h3>Sample Code for Windows NT Flat Model Version</h3>
 
<P>
<PRE>   ; Filename: MASMSUB.ASM
   ; Assemble options needed for ML: /c /Cx /coff

   .386
   .MODEL flat, C
   .CODE

   MasmSub PROC, \
      cVar:BYTE

      mov al, cVar     ; Load the char into AL.
      add al, 25       ; Because the function returns a char (a 1-byte
      ret              ; value), C will get the return value from AL.
   MasmSub ENDP
   END

</PRE>The following is the output of the program:
<P>
<PRE>  a
  z
</PRE> 
<PRE>Keywords          : CLngIss MASMLngIss kbcode kbfasttip
Version           : MS-DOS:6.0,6.00a,6.00ax,7.0;WINDOWS:1.0,1.5;WINDOWS NT:1.0,2.0,2.1,4.0,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

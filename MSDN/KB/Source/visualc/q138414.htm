

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: FromIDispatch Returns NULL for OLE Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138414">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/10/19">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Calling CCmdTarget::FromIDispatch() inside a member function of a class derived from COleControl or attempting to call FromIDispatch() passing an IDispatch pointer belonging to an OLE Control, will always return NULL.  CAUSE =====  CCmdTarget::From...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QA7O,QAB5,QAMN,QAOE,QABO,QAY2,QAW6,QAPN,QBW7,QAVX,QAVW,QAI5,QBWP,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: FromIDispatch Returns NULL for OLE Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138414</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10  | 1.50 1.51 1.52 1.52a
WINDOWS NT | WINDOWS
kbprg kbtshoot kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1
    - Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52, 1.52a
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Calling CCmdTarget::FromIDispatch() inside a member function of a class
derived from COleControl or attempting to call FromIDispatch() passing
an IDispatch pointer belonging to an OLE Control, will always return
NULL.
<P>
<P><h2>CAUSE</h2>
 
<P>
CCmdTarget::FromIDispatch() does the following test to determine if the
passed IDispatch pointer belongs to a CCmdTarget-derived class or not:
<P>
<PRE>    COleDispatchImpl dispatch;

    ASSERT(*(DWORD*)&amp;dispatch != 0);    // null vtable ptr?
    if (*(DWORD*)lpDispatch != *(DWORD*)&amp;dispatch)
        return NULL;    // not our Idispatch*

</PRE>The problem here is that classes derived from COleControl don't use the
COleDispatchImpl implementation of IDispatch directly. They have their own
implementation using BEGIN_INTERFACE_PART and END_INTERFACE_PART that
delegates to the COleDispatchImpl object in the CCmdTarget base class.
Because of this, the v-tables in the previous test won't match and the
function will return NULL.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
It is possible to access the object of the class derived from COleControl
given a valid IDispatch pointer. The object can be accessed from another
control or outside of a control with the aid of a helper control. A helper
control would be necessary because the following formula relies on details
that are internal to a COleControl class.
<P>
To access the object of the class derived from COleControl successfully,
you need to use a formula similar to this one:
<P>
<PRE>   COleControl * pCtrl = (COleControl*)
       ((BYTE*)lpDisp - m_xDispatch.m_nOffset);

</PRE>In this formula, lpDisp is a valid LPDISPATCH, m_xDispatch is the XDispatch
object member of COleControl that contains the control's implementation of
IDispatch, and m_nOffset is the offset generated by the INIT_INTERFACE_PART
macro for IDispatch.
<P>
m_xDispatch is generated by the END_INTERFACE_PART macro as follows:
<P>
<PRE>   #define END_INTERFACE_PART(localClass) \
      } m_x##localClass; \
      friend class X##localClass; \

</PRE>In this case, localClass is "Dispatch" so m_x##localClass becomes
m_xDispatch.
<P>
m_nOffset is generated by the INIT_INTERFACE_PART macro as follows:
<P>
<PRE>    #ifndef _AFX_NO_NESTED_DERIVATION
    #define INIT_INTERFACE_PART(theClass, localClass) \
          size_t m_nOffset; \
             INIT_INTERFACE_PART_DERIVE(theClass,localClass) \

    #define INIT_INTERFACE_PART_DERIVE(theClass, localClass) \
          X##localClass() \
        { m_nOffset = offsetof(theClass, m_x##localClass); } \

</PRE>m_nOffset becomes offsetof(COleControl, m_xDispatch).
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This difference between CCmdTarget and COleControl's implementation of
IDispatch disappears in Visual C++ version 4.0. COleControl uses
COleDispatchImpl in version 4.0 and therefore, FromIDispatch() will work.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 1.50 1.51 1.52 1.52a<BR>
KBCategory: kbprg kbtshoot kbprb<BR>
KBSubcategory: CDKIss<BR>
Technology        : kbMfc<BR>
Version           : 2.00 2.10  | 1.50 1.51 1.52 1.52<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the stack::operat </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158038">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/22">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the stack::operator  STL function in Visual C++.  MORE INFORMATION  Required Header              Prototype ---------     template                                     bool stack::operator                 ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANY,QAUD,QBFY,QAHH,QALW,QAKM,QAG7,QAPF,QAEF,QBCT,QA56,QA55,QAY5,QAY2,QAGC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the stack::operat</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158038</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the stack::operator&lt;
STL function in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;stack&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class _TYPE, class _C, class _A&gt;
   bool stack::operator&lt;(const stack&lt;_TYPE, _C, _A&gt;&amp; _X) const;

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The stack::operator&lt; function returns true if the stack on the left side of
the operator is less than the stack on the right side. The following steps
are used to determine if one stack is less than another stack:

<OL><P><LI>Compare the bottom-most (very first element pushed onto the stack).

<P><LI>If the elements are different, the stack with the smaller element is
   less than the stack with the greater element. Go to Step 5.

<P><LI>If the elements are the same and there are more elements, move to
   the next element in the stack and go back to step 2.

<P><LI>If all the elements in the stacks are processed at this point, the
   stacks are equal.

<P><LI>Done.
<P>
</OL><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackLessThan.cpp : Illustrates how to use the stack::operator&lt;
//                     function to determine if one stack is less than
//                     another stack.
//
// Functions:
//
//    operator&lt; :  Returns true if the stack is smaller than the stack
//                 passed as the operand.
//
// Written by Derek Jamison
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE></OL>#pragma warning(disable:4786)
<PRE>#include &lt;stack&gt;
#include &lt;iostream&gt;

</PRE>typedef stack&lt;double, deque&lt;double, allocator&lt;double&gt; &gt;,
<PRE>              allocator&lt;double&gt; &gt; STACK_DOUBLE;

void main()
</PRE>{
<PRE>   STACK_DOUBLE stack1,stack2;

   // Add item 4.0 to Stack1. Stack1 contains 4.0.
   cout &lt;&lt; "stack1.push(4.0)  s1=[4.0]" &lt;&lt; endl;
   stack1.push(4.0);

   // Add item 3.0 to Stack1. Stack1 contains 3.0(top) and 4.0(bottom).
   cout &lt;&lt; "stack1.push(3.0)  s1=[3.0 4.0]" &lt;&lt; endl;
   stack1.push(3.0);

   // Add item 4.0 to Stack2. Stack2 contains 4.0 (top=bottom).
   cout &lt;&lt; "stack2.push(4.0)  s2=[4.0]" &lt;&lt; endl;
   stack2.push(4.0);

   // Compare if Stack1 is smaller than Stack2. Should return False.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Add item 6.0 to Stack2. Stack2 contains 6.0(top) and 4.0(bottom).
   cout &lt;&lt; "stack2.push(6.0)  s2=[6.0 4.0]" &lt;&lt; endl;
   stack2.push(6.0);

   // Compare if Stack1 is smaller than Stack2. Should return True.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Add item 8.0 to Stack2. Stack2 contains 8.0(top), 6.0 and
   // 4.0(bottom).
   cout &lt;&lt; "stack2.push(8.0)  s2=[8.0 6.0 4.0]" &lt;&lt; endl;
   stack2.push(8.0);

   // Compare if Stack1 is smaller than Stack2. Should return True.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Delete item 8.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[6.0 4.0]" &lt;&lt; endl;
   stack2.pop();

   // Delete item 6.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[4.0]" &lt;&lt; endl;
   stack2.pop();

   // Add item 3.0 to Stack2. Stack2 contains 3.0(top) and 4.0(bottom).
   cout &lt;&lt; "stack2.push(3.0)  s2=[3.0 4.0]" &lt;&lt; endl;
   stack2.push(3.0);

   // Compare if Stack1 is smaller than Stack2. Should return False.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Delete item 3.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[4.0]" &lt;&lt; endl;
   stack2.pop();

   // Delete item 4.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[]" &lt;&lt; endl;
   stack2.pop();

   // Add item 8.0 to Stack2. Stack2 contains 8.0(top=bottom).
   cout &lt;&lt; "stack2.push(8.0)  s2=[8.0]" &lt;&lt; endl;
   stack2.push(8.0);

   // Compare if Stack1 is smaller than Stack2. Should return True.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;
</PRE>}
<P>
Program Output is:
<P>
stack1.push(4.0)  s1=[4.0]
stack1.push(3.0)  s1=[3.0 4.0]
stack2.push(4.0)  s2=[4.0]
stack1&lt;stack2 is False
<P>
stack2.push(6.0)  s2=[6.0 4.0]
stack1&lt;stack2 is True
<P>
stack2.push(8.0)  s2=[8.0 6.0 4.0]
stack1&lt;stack2 is True
<P>
<PRE>stack2.pop()      s2=[6.0 4.0]
stack2.pop()      s2=[4.0]
</PRE>stack2.push(3.0)  s2=[3.0 4.0]
stack1&lt;stack2 is False
<P>
<PRE>stack2.pop()      s2=[4.0]
stack2.pop()      s2=[]
</PRE>stack2.push(8.0)  s2=[8.0]
stack1&lt;stack2 is True
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: STL STLSample operator&lt;<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

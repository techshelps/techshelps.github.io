

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Error C2832 with Visual C++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102618">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1993/08/05">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Microsoft C/C++ versions 8.0 and 8.0c define a new error, C2832, that C/C++ version 7.0 does not define. The online help provides the following information about the C2832 error:     Compiler Error C2832     'modifier' form of 'operator operator' c...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QAB4,QANY,QBFY,QA2O,QABA,QBCT,QAKM,QAGC,QAGB,QAEF,QAPF,QALM,QAH6,QAD7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>New Error C2832 with Visual C++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102618</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbtool
<P>
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft C/C++ versions 8.0 and 8.0c define a new error, C2832, that C/C++
version 7.0 does not define. The online help provides the following
information about the C2832 error:
<P>
<PRE>   Compiler Error C2832

   'modifier' form of 'operator operator' cannot be a member

</PRE><LI>The specified form of the operator new or delete was declared as a
   member of a class, structure, or union. The huge and based forms of
   these operators are not supported as member functions.

<LI>The following are examples of this error:
<P>
   class T
   {
   public:
<PRE>      void __huge* operator new (unsigned long, size_t);     // error
      void __based(void)* operator new (__segment, size_t);  // error
      void operator delete (void __huge*);                   // error
      void operator delete (__segment, void __based(void)*); // error
   };

</PRE></UL><h2>MORE INFORMATION</h2>
 
<P>
The reasons for this new error are as follows:
<P>
<PRE>   Rationale for HUGE
   ------------------

   Members "new" and "delete" are never used for arrays. Since the
   size of a single object cannot exceed 64K anyway, member addressing
   is adequate and more efficient when "far," even for elements of a
   "huge" array.

   To support "huge" in the presence of virtual destructors would
   require the reservation of three virtual function slots in the
   "vftable." This was considered to be an unacceptable overhead,
   especially since it would only deal with objects of less than 64K
   anyway.

   The ambient class model is constrained to "near" and "far," as is
   the type of the "this" pointer. Since all other members deal in
   "near" and "far" instances only, supporting "huge" on members new
   and delete would represent the only variation in this convention.

   Rationale for BASED
   -------------------

   As stated above, the ambient class model and the type of the "this"
   pointer are constrained to "near" and "far." There is no parallel
   with "based" and supporting "based" on the members new and delete
   would by inconsistent and represent an exception to the rule.

   Supporting "based" delete would require the addition of an extra
   "segment" hidden parameter to the destructor.
   If the destructor is virtual, it would also require the reservation
   of four virtual function entries in the "vftable." If "huge" was
   also supported, this would become six reserved entries in the
   "vftable."

</PRE>The speed and space cost of making these changes and their impact on
the run-time libraries was considered too great when weighed against
the small advantage the changes would provide to most programs. The
impact is especially great and the advantage small because most
classes are never "huge" or "based" allocated. Supporting a segment-
based object addressing model would require the application to pass
both the segment and the offset and would constrain the data types
eligible for based allocations. In call cases, the code would require
more space and time than using "far."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 8.00 8.00c<BR>
KBCategory: kbtool<BR>
KBSubcategory: CPPIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Filling List Box Using MFC's DDX Facility </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141498">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1995/12/19">
<META NAME="Keywords" CONTENT="kbprg kbsample MfcUI kbfile">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" This is the 32-bit version of this sample.   The Lstddx32 sample illustrates a technique for filling both an ordinary list box control and the list box portion of a combo box control with data, and using the Microsoft Foundation Class (MFC) Dialog D...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QAPF,QA7O,QAB5,QAOE,QAMN,QAVI,QAHP,QA01,QABO,QAY2,QBJZ,QAJ4,QAYY,QBCF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Filling List Box Using MFC's DDX Facility</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141498</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.0
</UL> 
<P>
This is the 32-bit version of this sample.
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Lstddx32 sample illustrates a technique for filling both an ordinary
list box control and the list box portion of a combo box control with
data, and using the Microsoft Foundation Class (MFC) Dialog Data Exchange
(DDX) facility to return the selection.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Lstddx32.exe">Lstddx32.exe</A> <I>(size: 35379 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running LSTDDX32.EXE to decompress the file
and recreate the proper directory structure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A common misconception with regard to DDX is that assigning a value to a
DDX variable will cause that data to be loaded into a control. This does
in fact happen for edit controls, but not for list box controls. In order
to add items to a list box the dialog class must use the
CListBox::AddString() or CComboBox::AddString() functions. Doing this
involves several steps which are illustrated by this sample.
<P>
The sample itself was initially created as an MDI application using
AppWizard from Visual C++ version 1.0. AppStudio was then used to create a
dialog which contains OK and Cancel button plus an edit control
(IDC_EDIT1), a combo control (IDC_COMBO1), and a list box control
(IDC_LIST1). The Class Wizard was used to create a class CDialog1 based on
CDialog. The files dialog1.h and dialog1.cpp contain the code for this
class. Class Wizard was also used to add DDX member variables m_edit1,
m_combo1, and m_list1 to dialog1.h. A menu item was added to the view menu
(IDR_LIST_DTYPE) using AppStudio, and a message handler added which will
call the dialog when the menu item was selected.
<P>
The Readme.txt file included with the sample explains in more detail how
the list boxes are initialized and how data is passed between the calling
routine and the dialog procedure.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: lstddx listbox<BR>
Keywords            : kbprg kbsample MfcUI kbfile<BR>
Technology          : kbMfc<BR>
Version             : 4.0<BR>
Platform            : NT WINDOWS<BR>
Resolution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

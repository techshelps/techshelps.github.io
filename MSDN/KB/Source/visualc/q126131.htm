

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Speed Up Apps that Use the Microsoft Access ODBC Driver </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126131">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/02/14">
<META NAME="Keywords" CONTENT="MfcDatabase kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article discusses low-level ODBC API issues and MFC programming considerations for improving the performance of applications that use the Microsoft Access ODBC driver versions 2.x or above. If you are using Visual C++ 4.0 or higher, you can al...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QAPN,QAY5,QAXB,QDN9,QA9E,QAO2,QAU9,QACI,QAU3,QAMR,QAGI,QBSO,QAC1,QA9N V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Speed Up Apps that Use the Microsoft Access ODBC Driver</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126131</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   - Microsoft Visual C++ for Windows, version 1.51
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1,
<P><PRE>     4.0, 4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses low-level ODBC API issues and MFC programming
considerations for improving the performance of applications that use the
Microsoft Access ODBC driver versions 2.x or above. If you are using Visual
C++ 4.0 or higher, you can also use DAO to manipulate Access databases. In
general, if your primary target DBMS is Access, DAO will provide higher
performance than ODBC.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Microsoft Access ODBC driver has many features including multiple ways
to do inserts, deletes, and updates. Some ways are better than others, in
terms of performance. By designing your application to use the higher-
performance methods, you can maximize the speed of your ODBC application.
This article discusses some of these higher-performance methods for using
the ODBC API with the Microsoft Access version ODBC driver.
<P>
<P><h3>Using Prepared Executions</h3>
 
<P>
Queries can be executed in one of two ways:

<UL><LI>By using SQLExecDirect().
<LI>By using SQLPrepare() to prepare the query and then calling SQLExecute()
   to execute the prepared query.
<P>
</UL>If you expect to execute the query only once, use the SQLExecDirect()
method. If you do expect to execute the query more than once, use the
SQLPrepare()/SQLExecute() method.
<P>
Each time a query is executed using SQLExecDirect(), the ODBC driver
performs these three steps:

<OL><P><LI>Parse the query.
</OL>2. Generate an execution plan.
3. Execute the query using the generated execution plan.
<P>
When you execute a query using the SQLPrepare()/SQLExecute method, these
steps are broken into two parts:

<OL><P><LI>Calling SQLPrepare() parses the query and generates the execution plan,
   which is then stored.
</OL>2. Calling SQLExecute() executes the query using the stored execution plan.
<P>
If a query is executed multiple times, the SQLPrepare()/SQLExecute method
gives much better performance because the parsing and generation of the
execution plan is done only once.
<P>
<P><h3>Using Stored Queries</h3>
 
<P>
With the Microsoft Access driver, you can use the queries stored in a
Microsoft Access .MDB database. Stored queries cannot be created with the
Microsoft Access driver, but they can be created by using Microsoft Access
or Visual Basic. As of VC++ 4.0, you can use DAO to create stored
procedures in Access.
<P>
You can use stored queries in one of two ways with the Microsoft Access
driver:

<UL><LI>Treat the queries as views. By doing so, you can select from the query
   just as you would from a table. This method has the advantage of being
   intuitive and easy to use. It is not, however, the best method
   performance-wise. This is because the select you use to invoke the query
   incurs the overhead of syntax checking and parsing.

<LI>Treat the queries as stored procedures. You can use the '{call &lt;query
   name&gt;...}' syntax to call the stored query. This is faster because
   syntax checking is bypassed and the stored query is directly invoked.
   Another benefit of method is that you can execute parameterized queries,
   by passing '?' for parameters in the '{call...}' statement and using
   SQLBindParameter() to bind the parameter markers. Parameter markers
   cannot be used if you treat the stored queries as views.
<P>
</UL><h3>Using Transactions</h3>
 
<P>
When you execute multiple Insert, Delete, or Update statements, performance
can be enhanced by turning autocommit mode off. Do this by calling
SQLSetConnectOption() on the connection handle (HDBC). Performance is
enhanced when not in the autocommit mode because, in the autocommit mode,
the driver must ensure that each individual Insert, Delete, or Update
statement is flushed to the safe store (usually disk). If these statements
are grouped in a transaction, the driver batches the disk writes and does
them only once at commit time. Because disk I/O takes a relatively long
time, turning autocommit mode off enhances performance.
<P>
<P><h3>Using Native Cursors Versus the Cursor Library</h3>
 
<P>
The Microsoft Access driver supports the ODBC cursor API, so positioned
Inserts, Deletes, and Updates can be done using the SQLSetPos() function.
Using SQLSetPos() to perform these operations is much faster than doing the
same operations using a SQL statement. This is because when you use
SQLSetPos(), the table is already open; there is no need to look into the
catalog. Because there is no SQL statement, there is nothing to parse.
Performance can be further enhanced by wrapping these operations in a
transaction.
<P>
Static updateable cursors are provided by the cursor library, but using the
cursor library to do a positioned update is much slower than using
SQLSetPos()/SQL_UPDATE. This is because the cursor library adds a lot of
overhead. The cursor library has to look at the buffered results and
generate an Update statement. This statement has to be parsed and an
execution plan has to be generated. There is also a catalog lookup involved
to open the table being updated.
<P>
<P><h3>Insert, Delete, and Update Performance</h3>
 
<P>
In general, Inserts, Deletes, and Updates can be done in one of six ways,
as listed below in order of increasing performance. To make the comparison
more concrete, 100 inserts were done using each of these methods into an
Microsoft Access version 2.0 table that had five columns of text data.
<P>
NOTE: These results do not represent exhaustive benchmark testing, so they
should not be treated as such. They are provided to illustrate the relative
performance of each of these methods.

<OL><P><LI>100 SQLExecDirect() inserts with no transaction        5457ms
<PRE>2. 100 SQLExecDirect() inserts with transaction           4756ms
3. 100 SQLPrepare()/SQLExecute() inserts no transaction   3515ms
4. 100 SQLPrepare()/SQLExecute() inserts  transaction     2994ms
5. 100 SQLSetPos()/SQL_ADD inserts with no transaction     831ms
6. 100 SQLSetPos()/SQL_ADD inserts with transaction        721ms

</PRE></OL>As you can see, there is a big difference between adding data the fastest
way (SQLSetPos() at 139 inserts/second) and the slowest (SQLExecDirect() at
18 inserts/second). While these results are specific to inserts, the
relative performance of corresponding delete and update methods will be
similar.
<P>
<P><h3>MFC Database Classes Considerations</h3>
 
<P>
The MFC CRecordset class prepares queries before execution by using the
SQLPrepare() ODBC API function. The CRecordset::Requery() function can be
used to reexecute the prepared query for the recordset.
<P>
By default, the MFC database classes load the cursor library. The cursor
library provides updateable snapshots. To get updateable recordsets without
using the cursor library, you can use dynaset recordsets. To do this,
specify CRecordset::dynaset as the first argument of the CRecordset::Open()
function.
<P>
NOTE: The database classes load the cursor library by default, so if you
don't specify one, the CDatabase object that the CRecordset class creates
by default will load the cursor library. Therefore, to use dynasets with
the MFC database classes, create a CDatabase object yourself that doesn't
load the cursor library; then pass a pointer to that object to your
recordset's constructor. You tell the CDatabase object not to load the
cursor library by passing FALSE as the last parameter to its Open()
function. In a 32-bit Windows-based application, you would do this with
code similar to this:
<P>
<PRE>   CDatabase        db;
   db.Open("DataSourceName",FALSE,FALSE,"ODBC;",FALSE);
   CYourRecordset   rs(&amp;db);
   rs.Open(CRecordset::dynaset);

</PRE>NOTE: As of VC++ 4.0, specifying CRecordset::dynaset as the first parameter
to CRecordset::Open() is sufficient to instantiate and open a CDatabase
object that will not load the cursor library. As a result, unless you
require an explicitly created CDatabase object, you do not need to create
one explicitly to use dynasets. Also, beginning with Visual C++ 4.2, the
CDatabase::OpenEx() function can be used and it doesn't load the cursor
library by default.
<P>
A 16-bit Windows-based application cannot get updateable dynasets with the
default MFC implementation. For a discussion of this issue, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q124915.htm">Q124915</A></B>
   TITLE     : SAMPLE: Using Dynasets with the 16-Bit MFC Database Classes

</PRE>This article also explains how to get code for reusable classes that do
provide updateable dynasets to a 16-bit MFC Windows-based application.
<P>
By using dynasets, you use the SQLSetPos() functionality of the Microsoft
Access version 2.0 driver when performing Inserts, Deletes, or Updates. As
mentioned earlier, this greatly increases the speed of you application.
<P>
The Microsoft Access ODBC driver doesn't support MFC transactions but comes
close. The MFC database classes require ODBC drivers to support cursor
preservation across transaction rollbacks and commits. (See the
documentation for SQLGetInfo and the SQL_CURSOR_COMMIT_BEHAVIOR and
SQL_CURSOR_ROLLBACK_BEHAVIOR parameters in the "ODBC Programmer's
Reference.") The Microsoft Access driver doesn't guarantee this, but you
can use transactions if you requery following any transaction. This
restores the cursor to the first record in the recordset. You must also
force the CDatabase::m_bTransactions member variable to TRUE before calling
BeginTrans(). For more information, please see MFC Technote #47, "Relaxing
Database Transaction Requirements" available from Visual C++ Books Online.
Also, beginning with Visual C++ version 4.2, MFC Technical Note #68
provides specific information about performing transactions with the Access
ODBC Driver.
<P>
The code to do this would look something like this:
<P>
<PRE>   class CTransactDatabase : public CDatabase
   {
   public:
       void SetTransactions()) { m_bTransactions=TRUE; }
   };

   .
   .
   .
   CTransactDatabase   db;
   db.Open("SomeDataSourceName",FALSE,FALSE,"ODBC;",FALSE);
   db.SetTransactions();
   db.BeginTrans();
   CPerftestSet        rs(&amp;db);
   rs.Open(CRecordset::dynaset);
   .
   .
   .

</PRE>Use CDatabase::CommitTrans() and CDatabase::Rollback() respectively to
commit and rollback transactions.
<P>
NOTE: The ODBC Driver Manager that ships with the Desktop Database ODBC
Drivers version 2.0 requires that a table contain at least one row in order
to do SQLSetPos(...SQL_ADD). An updated driver manager is available that
solves this problem. For more information on this problem and to learn how
to obtain the updated driver manager, please see the following article in
the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../ODBC/Q124998.htm">Q124998</A></B>
<PRE>TITLE     : INF: Change in Behavior of SQLSetPOS on Empty Result Set

</PRE>NOTE: Article <B><A HREF="../VISUALC/Q125727.htm">Q125727</A></B>, titled "Text Truncated When Using Dynaset and
RFX_Text()" in the Microsoft Developer Knowledge Base mentions a bug with
the Visual C++ version 2.0 MFC database classes when using dynasets. Visual
C++ version 2.1 fixes the problem.
<P>
The MFC CRecordset class has a new optimization (in both 16- and 32-bit
versions) that improves efficiency when you're adding new records in bulk
to a table. A new option for the dwOptions parameter to the
CRecordset::Open member function, optimizeBulkAdd, improves performance
when you're adding multiple records consecutively without calling Requery
or Close. Only those fields that are "dirty" prior to the first Update call
are marked as "dirty" for subsequent AddNew/Update calls. If you are using
the database classes to take advantage of the ::SQLSetPos API function for
adding, editing, and deleting records, this optimization is unnecessary. If
the ODBC Cursor Library is loaded or the ODBC driver doesn't support
adding, editing, and deleting via ::SQLSetPos , this optimization should
improve bulk add performance. To turn on this optimization, set the
dwOptions parameter in the Open call for your recordset to :
<P>
appendOnly | optimizeBulkAdd
<P>
<P><h3>Bulk-Row Fetching with MFC</h3>
 
<P>
Beginning with Visual C++ 4.2, MFC supports bulk row fetching. Look in the
online documentation for the topic "Recordset: Fetching Records in Bulk
(ODBC)". The bulk fetching feature allows a recordset to read in more than
one record into a buffer in one fetch (MoveNext call).
 
<PRE>Keywords          : MfcDatabase kbprg
Technology        : kbMfc
Version           : 1.51 1.52 2.0 2.1 4.0 4.1 4.2 5.
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

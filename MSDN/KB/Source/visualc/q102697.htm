

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Build Errors Using Precompiled Header in Debugging Lib </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102697">
<META NAME="KBModify" CONTENT="1997/09/11">
<META NAME="KBCreate" CONTENT="1993/08/08">
<META NAME="Keywords" CONTENT="CLIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An attempt to create a debugging library that uses precompiled headers may fail and fatal build errors may be generated.  With the 16-bit edition, the CVPACK and LINK utilities may generate the following messages:     CVPACK : fatal error CK1017: c...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAVX,QAVW,QAH4,QAB4,QAKR,QAHE,QAAP,QAPN,QBHQ,QAOT,QBV8,QAE2,QBBI,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Build Errors Using Precompiled Header in Debugging Lib</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102697</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 2.2,
<P><PRE>     4.0, 4.1, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An attempt to create a debugging library that uses precompiled headers may
fail and fatal build errors may be generated.  With the 16-bit edition, the
CVPACK and LINK utilities may generate the following messages:
<P>
<PRE>   CVPACK : fatal error CK1017: cannot find precompiled types file;
            relink with file.obj
   LINK : warning LNK4027: CVPACK error

</PRE>With the 32-bit edition, the LINK utility may generate the following
message:
<P>
<PRE>   LINK : fatal error LNK1211: precompiled type information not found;
   "&lt;filename&gt;" not linked or overwritten

</PRE><h2>CAUSE</h2>
 
<P>
When you specify the /Yc and /Z7 options on the compiler command line,
Microsoft C/C++ generates a precompiled header file that contains
CodeView debugging information. The error occurs only when you store
the precompiled header in a library, use the library to build an
object module, and the source code does not refer to any of the
functions the precompiled header file defines.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are two methods to work around this situation, as follows:

<UL><LI>Specify the /Yd compiler option switch to add the CodeView
   information from the precompiled header to each object module. This
   method is less desirable because it generally produces large object
   modules that can increase the time required to link the
   application.

<LI>NOTE: The following work-around is for 32-bit versions only.
   Specify the /Yl&lt;symbol&gt; compiler option switch, where &lt;symbol&gt; is
   the name of an arbitrary symbol in the library, when you create a
   precompiled header file that does not contain any function
   definitions. This switch directs the compiler to store the
   debugging information in the precompiled header file.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
When you compile a module with the /Yc and /Yl&lt;symbol_name&gt; option switches
using the 32-bit edition, the compiler creates a symbol similar to
__@@_PchSym_@00@...@&lt;symbol_name&gt;, where the ellipsis (...) represents a
linker generated character string, and stores it in the object module. Any
source file that you compile with this precompiled header refers to the
specified symbol, which causes the linker to include the object module and
its debugging information from the library.
<P>
The following code example demonstrates the problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * To demonstrate this problem, perform the following five steps:
 *
 * 1. Compile TEST1.C as follows: cl /Yctest.h /Z7 /c TEST1.C
 * 2. Compile TEST2.C as follows: cl /Yutest.h /Z7 /c TEST2.C
 * 3. Build a library that contains TEST1.OBJ and TEST2.OBJ as
 *    follows: lib /out:test.lib test1.obj test2.obj
 * 4. Compile TEST3.C as follows: cl /Yutest.h /Z7 /c TEST3.C
 * 5. Link the application as follows:
 *       link /debugtype:cv /debug:notmapped,full test3.obj test.lib
 *
 * To correct this problem, do one of the following:
 *
 *   1. 32-bit only)  Compile TEST1.C in step 1 as follows:
 *        cl /Yctest.h /YlAnyName /Z7 /c TEST1.C
 *      Then, repeat step 2 through 5.
 *
 *   2. Repeat steps 1 through 5, adding the /Yd command line option
 *      to steps 1, 2, and 4.
 */

</PRE><h3>TEST.H</h3>
 
<P>
<PRE>   #include &lt;stdio.h&gt;

</PRE><h3>TEST1.C</h3>
 
<P>
<PRE>   #include "test.h"

</PRE><h3>TEST2.C</h3>
 
<P>
<PRE>   #include "test.h"

   void test2func(void)
   {
      printf("inside TEST2FUNC...\n");
   }

</PRE><h3>TEST3.C</h3>
 
<P>
<PRE>   #include "test.h"

   void test2func(void);

   void main(void)
   {
      printf("inside MAIN...\n");
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 /YX hdrstop /Fp<BR>
Keywords          : CLIss kbfasttip<BR>
Version           : WINDOWS:1.0,1.5,1.51,1.52;WINDOWS  NT:1.0,2.0,2.1,2.2,4.0,4.1,5.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

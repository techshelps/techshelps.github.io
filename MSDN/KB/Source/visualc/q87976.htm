

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Foundation Classes Dialog Box with Custom Icon </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q87976 ">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1992/08/13">
<META NAME="Keywords" CONTENT="MfcUI kbfasttip kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using the Microsoft Foundation Classes supplied with Microsoft C/C++ versions 7.0 and Microsoft Visual C++, you can create a main application window based on a dialog box. However if a dialog is used as the application's main window, and the dialog...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QABO,QBFY,QABA,QAJH,QAPF,QDL9,QBWQ,QBWO,QBWN,QA2O,QA56,QA55,QAW0,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating a Foundation Classes Dialog Box with Custom Icon</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q87976 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 1.51 1.52 | 1.00 2.00 2.10
<PRE>MS-DOS | WINDOWS             | WINDOWS NT
</PRE>kbprg
<P>
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and
      1.52
    - Microsoft Visual C++, 32-bit Edition, version 1.0, 2.0, and 2.1
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Using the Microsoft Foundation Classes supplied with Microsoft C/C++
versions 7.0 and Microsoft Visual C++, you can create a main application
window based on a dialog box. However if a dialog is used as the
application's main window, and the dialog is created with a minimize
button and then minimized, the default application icon will be displayed.
This article briefly describes two approaches that can be taken to change
the default icon to a custom (application-defined) icon.
<P>
Starting with Visual C++ 4.0, AppWizard supports creation of dialog based
applications that have custom icons. The method described in this article
works with Visual C++ 4.0, but it is preferred to use the AppWizard
generated code.
<P>
The CFormView class is a useful alternative to the "dialog as main window
technique" when using Microsoft Foundation Classes, and provides additional
features. For more information on CFormView, see the documentation supplied
with Microsoft Visual C++, the VIEWEX and CHKBOOK samples, and query on the
following words in the Microsoft Knowledge Base:
<P>
<PRE>   CFormView

</PRE>A discussion of CFormView based applications is beyond the scope of this
article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
One technique for using a dialog as the main window is documented in the
"Class Libraries User's Guide" which shipped with Microsoft C/C++ version
7.0 on page 334, and in both  versions via the TRACER sample application.
Neither of these techniques illustrates how to change the default icon to
a custom icon.
<P>
The first technique below, illustrated with code fragments, shows the
modifications required to allow the TRACER sample to display a custom icon
when minimized. This is the simplest approach to the problem.
<P>
The second technique is illustrated using a sample from the Software/Data
Library. While more complex, it illustrates how to use the Windows
::RegisterClass() API to register a class with an application defined icon.
<P>
<P><h3>Add OnPaint to CPromptDlg of the TRACER sample</h3>
 
<P>
This technique will work for versions 1.0 and 2.0 of the Microsoft
Foundation Classes.

<OL><P><LI>Add the following public declarations to the CPromptDlg class definition
</OL>in tracer.cpp:
<P>
<PRE>  afx_msg void OnPaint();
  afx_msg BOOL OnEraseBkgnd(CDC* pDC);
  afx_msg HCURSOR OnQueryDragIcon();

</PRE><P><LI>Add the following macros to the CPromptDlg message map in tracer.cpp:
<P>
  ON_WM_PAINT()
  ON_WM_ERASEBKGND()
  ON_WM_QUERYDRAGICON()

<P><LI>Add the following function definitions in tracer.cpp:
<P>
  void CPromptDlg::OnPaint()
  {
<P><PRE>     CPaintDC dc(this); // device context for painting
     if (IsIconic())
     {
<PRE></PRE>        // Erase the icon background when placed over other app window
        DefWindowProc(WM_ICONERASEBKGND, (WORD)dc.m_hDC, 0L);

        // Center the icon
        CRect rc;
        GetClientRect(&amp;rc);
        rc.left = (rc.right  - ::GetSystemMetrics(SM_CXICON)) &gt;&gt; 1;
        rc.top  = (rc.bottom - ::GetSystemMetrics(SM_CYICON)) &gt;&gt; 1;

        // Draw the icon
        HICON hIcon = AfxGetApp()-&gt;LoadIcon(AFX_IDI_STD_FRAME);
        dc.DrawIcon(rc.left, rc.top, hIcon);
     }
     // Do not call CDialog::OnPaint() for painting messages
  }

  BOOL CPromptDlg::OnEraseBkgnd(CDC* pDC)
  {
     if (IsIconic())
        return TRUE;
     else
        return CDialog::OnEraseBkgnd(pDC);
  }


  HCURSOR CPromptDlg::OnQueryDragIcon()
  {
     return AfxGetApp()-&gt;LoadIcon(AFX_IDI_STD_FRAME);
  }

</PRE></OL>In this example, AFX_IDI_STD_FRAME is the ID of an icon contained in
the application's resource file, and the dialog template contains the
WS_MINIMIZEBOX style.
<P>
<P>
<P><h3>The PRIVDLG sample program from the Software/Data Library</h3>
 
<P>
An example can be found in the Software/Data Library by searching on
the word PRIVDLG, the Q number of this article, or S13583. PRIVDLG was
archived using the PKware file-compression utility.
<P>
If you are creating a standard frame window, the only step required
for your application to use a custom icon is to define an icon
resource in your .RC file with the constant AFX_IDI_STD_FRAME. When
the Microsoft Foundation Classes libraries register the window class
for your frame window, they will use this icon as the window icon.
<P>
Alternatively, if your application uses a dialog box as its main
window, the procedure for using a custom icon is a bit more involved.
The main reason you can't simply use AFX_IDI_STD_FRAME for MFC 1.0 or
IDR_MAINFRAME for MFC 2.0 and MFC 2.5 is that all Windows dialog boxes
use a pre-registered window class, and the icon used for this class cannot
be changed easily.
<P>
The solution is to register a private window class to be used for your
dialog box. Because the name of this window class must be specified in
the dialog template, the Microsoft Foundation Classes function
AfxRegisterWndClass will not work, because it creates a new class name
dynamically at run time.
<P>
The restrictions on registering your own private dialog class in
Microsoft Foundation Classes are the same as in standard C Windows
programming. For more information, query on the following words in the
Microsoft Knowledge Base:
<P>
<PRE>   private and dialog and class

</PRE>To register a private dialog class with a custom icon, do the
following three steps:

<OL><P><LI>Register a new private dialog class using the ::RegisterClass()
   function with a unique class name. Fill in your own icon for the
   hIcon field of the WNDCLASS structure, and add your custom icon to
   the .RC file. This class should only be registered once for your
   application. Be sure to follow the standard Windows rules for
   registering a private dialog class (see the Knowledge Base
   reference above).

<P><LI>Add the CLASS "classname" directive to your dialog box resource
   file, using the unique class name you registered in step 1. Make
   sure your dialog contains the WS_MINIMIZEBOX style bit if you want
   to allow the dialog to be minimized.

<P><LI>Create a dialog using the template from step 2.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 7.00 1.00 1.50 2.00 2.50 2.50 2.51 2.52<BR>
KBCategory: kbprg kbfasttip<BR>
KBSubcategory: MFcUI<BR>
Keywords          : MfcUI kbfasttip kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00   | 1.00 1.50 1.51 1.52 | 1<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Active Template Library (ATL) 2.0 Readme File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165259">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1997/03/14">
<META NAME="Keywords" CONTENT="AtlIss kbprg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following information is taken from the February 14, 1997 Readme file of the Active Template Library (ATL) version 2.0.  MORE INFORMATION  Active Template Library 2.0 Readme  ATL 2.0 requires Oleaut32.dll version 2.20.4049, or later, which is s...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAEF,QAPN,QAH4,QADF,QA37,QAW6,QAAP,QA9N,QAY2,QAPF,QBHQ,QBBS,QAB4,QDH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Active Template Library (ATL) 2.0 Readme File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165259</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Active Template Library, version 2.0
   on the following platform: x86
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following information is taken from the February 14, 1997 Readme file
of the Active Template Library (ATL) version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Active Template Library 2.0 Readme</h3>
 
<P>
ATL 2.0 requires Oleaut32.dll version 2.20.4049, or later, which is
shipped with Windows NT 4.0 and Internet Explorer 3.0. ATL 2.0 also
requires the Visual C++ 4.2b patch.
<P>
<P><h3>Building ATL Projects from the Command Line Can Generate NMAKE Error</h3>
 
<P>
Building an ATL project from the command line can generate NMAKE error
U1073. (This problem does not occur when building ATL samples from within
the integrated development environment.)
<P>
For example, the following command line:
<P>
<PRE>   nmake /f beeper.mak CFG="beeper - Win32 Release"

</PRE>generates this error:
<P>
<PRE>   NMAKE : fatal error U1073: don't know how to make '".\beeper.h"'

</PRE>From the command line, ATL projects require two passes to build. The first
pass directs MIDL to create a header file that is required for the second
pass.
<P>
To work around this problem, use the following commands:
<P>
<PRE>   nmake /f beeper.mak CFG="beeper - Win32 Release" beeper.h
   nmake /f beeper.mak CFG="beeper - Win32 Release"


</PRE><h3>_ATL_MIN_CRT and Link Error "unresolved external symbol _main"</h3>
 
<P>
When you build a Release version of an ATL project, you can get the
following link error:
<P>
<PRE>   LIBCMT.LIB(crt0.obj) : error LNK2001: unresolved external symbol _main

</PRE>This error occurs if you are using CRT functions that require CRT startup
code. The Release configurations define _ATL_MIN_CRT, which excludes CRT
startup code from your EXE or DLL. To avoid this error, do one of the
following:

<UL><LI>Remove _ATL_MIN_CRT from the list of preprocessor defines to allow CRT
   startup code to be included. On the Build menu, click Settings. Hold
   the ctrl key while selecting all Release configurations. On the C/C++
   tab, choose the General category, then remove _ATL_MIN_CRT from the
   preprocessor definitions edit box.

<LI>If possible, remove calls to CRT functions that require CRT startup
   code. Instead, use their Win32 equivalents. For example, use lstrcmp()
   instead of strcmp(). Known functions that require CRT startup code are
   some of the string and floating point functions.
<P>
</UL><h3>Service EXE Created with ATL COM AppWizard Doesn't Build in Release Mode</h3>
 
<P>
In the ATL COM AppWizard, if you choose Service (EXE) as the server type,
your project will not build in release mode. Builds in release mode
automatically include the preprocessor directive _ATL_MIN_CRT, while the
default ATL service code requires the CRT library. To avoid this error, do
one of the following:

<UL><LI>Remove _ATL_MIN_CRT from the list of preprocessor defines to allow CRT
   startup code to be included. On the Build menu, click Settings. Hold
   the ctrl key while selecting all Release configurations. On the C/C++
   tab, choose the General category, then remove _ATL_MIN_CRT from the
   Preprocessor definitions edit box.

<LI>Remove calls to CRT functions within the generated
   ServiceModule::LogEvent function.
<P>
</UL><h3>ATL Controls in Visual Basic 5.0 Containers</h3>
 
<P>
If you are using the IQuickActivate interface in Visual Basic 5.0, you
must also support the connection point IPropertyNotifySink. To use a
control generated by the ATL Object Wizard in a Visual Basic 5.0
container, you must either add support for IPropertyNotifySink or remove
the dependence on the IQuickActivate interface. To remove IQuickActivate
support, comment out the lines containing IQuickActivateImpl in the
control's class inheritance list and in the COM interface map. For
example, if you generate a full control called MyCtl with the ATL Object
Wizard, then go to MyCtl.h and comment out the line containing
IQuickActivateImpl in the CMyCtl class inheritance list:
<P>
<PRE>   class ATL_NO_VTABLE CMyCtl :
   ...

   // public IQuickActivateImpl&lt;CMyCtl&gt;

</PRE>Also, comment out the line containing IQuickActivateImpl in the COM
interface map in MyCtl.h:
<P>
<PRE>   BEGIN_COM_MAP(CMyCtl)
   ...

   // COM_INTERFACE_ENTRY_IMPL(IQuickActivate)


</PRE><h3>Some ATL Object Stock Properties Must Be Initialized</h3>
 
<P>
Before Use in Visual Basic 5.0 Containers, Visual Basic 5.0 expects all
stock properties that are IUnknown-based (such as MousePointer, Picture,
and Font) to contain a valid IUnknown pointer. Otherwise, Visual Basic
never allows the user to change the property. For example, if you have a
stock Font property that you never fill in with a valid Font, Visual Basic
will display the Font as being NULL, and will never allow the user to
select a new Font through the Visual Basic property window.
<P>
To avoid this problem, make sure your IUnknown-based stock properties have
a valid value other than NULL before inserting your object into a Visual
Basic container. There are many ways to do this, for example, get the
ambient Font off the container and use that as your stock Font property.
<P>
<P><h3>ATL Registrar Fails to Insert Keys Starting with Curly Brace</h3>
 
<P>
The ATL registrar does not correctly interpret two consecutive key names
that both start with a curly brace '{'. For example, the second
"Implemented Categories" key name fails in the following registry script
(rgs):
<P>
<PRE>   HKCR

   {
      NoRemove CLSID
      {
        ForceRemove {333C7BC4-460F-11D0-BC04-0080C7055A83} = s 'Tabular
        Data Control'
        {
           'Implemented Categories'
           {
             '{7DD95801-9882-11CF-9FA9-00AA006C42C4}'
             '{7DD95802-9882-11CF-9FA9-00AA006C42C4}'
           }
        }
      }
   }

</PRE>To correct the problem, break out each key name as shown in this example:
<P>
<PRE>   HKCR
   {
      NoRemove CLSID
      {
        ForceRemove {333C7BC4-460F-11D0-BC04-0080C7055A83} = s 'Tabular
        Data Control'

      {
        'Implemented Categories'
        {
          '{7DD95801-9882-11CF-9FA9-00AA006C42C4}'
        }
        'Implemented Categories'
        {
          '{7DD95802-9882-11CF-9FA9-00AA006C42C4}'
        }
      }
     }
   }

</PRE><h3>IPropertyPageImpl::Help is Implemented Incorrectly</h3>
 
<P>
In most cases, if you are using property pages, you should override
IPropertyPage::Help and return E_NOTIMPL. This will cause the container to
use information returned from GetPageInfo. You can also provide your own
alternative implementation of this function if necessary.
<P>
<P><h3>ATL Font and Picture Properties May Require Changes to the IDL File</h3>
 
<P>
To make a Font or Picture property work in some containers, the interface
definition must be declared within the library section of the .idl file.
You must cut the interface declarations from the .idl file and paste them
into the library section of the same file. In addition, the import line
for ocidl.idl needs to be commented out. For example, the ATL Object
Wizard generates the following .idl file for MyCtl with a Font property:
<P>
<PRE>   import "oaidl.idl";
   import "ocidl.idl";

   [
      object,
      uuid(8697BC4C-7A38-11D0-9A38-00A0C90DC94B),
      dual,
      helpstring("IMyCtl Interface"),
      pointer_default(unique)
   ]

   interface IMyCtl : IDispatch
   {
      [propputref, id(DISPID_FONT)]
      HRESULT Font([in]IFontDisp* pFont);
      [propput, id(DISPID_FONT)]
      HRESULT Font([in]IFontDisp* pFont);
      [propget, id(DISPID_FONT)]
      HRESULT Font([out, retval]IFontDisp** ppFont);
   };

   [
      uuid(8697BC3F-7A38-11D0-9A38-00A0C90DC94B),
      version(1.0),
      helpstring("MyControl 1.0 Type Library")
   ]

   library MYCONTROLLib
   {
      importlib("stdole32.tlb");
      importlib("stdole2.tlb");
      [
      uuid(8697BC4D-7A38-11D0-9A38-00A0C90DC94B),
      helpstring("MyCtl Class")
      ]

      coclass MyCtl
      {
         [default] interface IMyCtl;
      };
   };

</PRE>The corrected version of this .idl file is shown below:
<P>
<PRE>   import "oaidl.idl";
   // import "ocidl.idl";
   [
      uuid(8697BC3F-7A38-11D0-9A38-00A0C90DC94B),
      version(1.0),
      helpstring("MyControl 1.0 Type Library")
   ]

   library MYCONTROLLib
   {
      importlib("stdole32.tlb");
      importlib("stdole2.tlb");
      [
         object,
         uuid(8697BC4C-7A38-11D0-9A38-00A0C90DC94B),
         dual,
         helpstring("IMyCtl Interface"),
         pointer_default(unique)
      ]

      interface IMyCtl : IDispatch
      {
         [propputref, id(DISPID_FONT)]
         HRESULT Font([in]IFontDisp* pFont);
         [propput, id(DISPID_FONT)]
         HRESULT Font([in]IFontDisp* pFont);
         [propget, id(DISPID_FONT)]
         HRESULT Font([out, retval]IFontDisp** ppFont);
      };
      [
         uuid(8697BC4D-7A38-11D0-9A38-00A0C90DC94B),
         helpstring("MyCtl Class")
      ]

      coclass MyCtl
      {
         [default] interface IMyCtl;
      };
   };

</PRE><h3>Changes to Stock Property Macros</h3>
 
<P>
The documentation incorrectly references the macro
IMPLEMENT_SMARTPTR_STOCKPROP. This macro is now obsolete. The macro
IMPLEMENT_BOOL_STOCKPROP has been added and should be used for all stock
properties that are Boolean values, such as the standard BORDERVISIBLE,
ENABLED, TABSTOP, and VALID stock properties.
<P>
<P><h3>Problems with ATL Samples</h3>
 
<P>
The samples ATLCON and ATLBUTTON have the following problems:

<UL><LI>To successfully run ATLCON under a MinCRT configuration, you must
   remove the WinMain entry point as follows:
<P>
   1. Click Settings on the Build menu.
   2. Under Settings For, choose one of the MinCRT configurations.
   3. On the Link tab, choose the Output category.
   4. Remove the text in the Entry-point symbol editbox.

<LI>ATLButton returns incorrect values for the properties ImageHover and
   ImagePush. To correct the sample, change the file AtlButton.h so that
   the function get_ImageHover uses m_bstrFileName[1].Copy() and change
   get_ImagePush so that it uses m_bstrFileName[2].Copy().
<P>
</UL><h3>ATL Classes in ClassView</h3>
 
<P>
To prevent the ATL classes from displaying in ClassView, modify (or
create) the msvcincl.dat file, as follows:

<OL><P><LI>Using a text editor, open or create msvcincl.dat. This file must be
   located in your Windows directory. Add a list of the ATL file names to
   msvcincl.dat. For example:
<P>
   atlbase.h
   atlcom.h
   atlctl.h
   atlwin.h
   ...
<P>
   (For each name you add to msvcincl.dat, ClassView will exclude the
   classes contained in that file.)

<P><LI>Save msvcincl.dat in your Windows directory.

<P><LI>Delete your project's .ncb file and restart Developer Studio.
<P>
</OL><h3>Organization of Documentation</h3>
 
<P>
The documentation for ATL 2.0 consists of both .htm and .doc files. To
navigate through the documentation in an online format, use the .htm files
with your Web browser. The file start.htm provides a starting point.
<P>
If you want to print the documentation, use the .doc files. The following
table shows each ATL topic and its corresponding .doc file:
<P>
<PRE>   ATL Articles                           .doc File
   ------------                           ---------

   What's New in ATL 2.0                  d_new.doc
   ATL Article Overview                   d_aover.doc
   ATL Class Overview                     d_cover.doc
   Introduction to COM and ATL            d_com.doc
   ATL Tutorial                           d_tutor.doc
   Creating an ATL Project                d_create.doc
   Fundamentals of ATL COM Objects        d_fund.doc
   ATL Window Classes                     d_win.doc
   Connection Points                      d_connec.doc
   Enumerators                            d_enums.doc
   The Proxy Generator                    d_proxyg.doc
   Debugging Tips for ATL Objects         d_debug.doc
   ATL Services                           d_serv.doc
   The ATL Registry Component             d_rgstry.doc

   ATL Class Reference                    .doc File
   -------------------                    ---------

   CBindStatusCallback                    cbindsta.doc
   CComAggObject                          ccagob.doc
   CComApartment                          ccapart.doc
   CComAutoCriticalSection                ccautocs.doc
   CComAutoThreadModule                   ccautotm.doc
   CComBSTR                               ccbstr.doc
   CComCachedTearOffObject                cccachet.doc
   CComClassFactory                       ccclfc.doc
   CComClassFactory2                      ccclfc2.doc
   CComClassFactoryAutoThread             ccclfca.doc
   CComClassFactorySingleton              ccclfcs.doc
   CComCoClass                            cccocls.doc
   CComContainedObject                    cccontob.doc
   CComControl                            cccontrl.doc
   CComCriticalSection                    cccritsc.doc
   CComDispatchDriver                     ccdispd.doc
   CComDynamicUnkArray                    ccdynunk.doc
   CComFakeCriticalSection                ccfakecs.doc
   CComGlobalsThreadModel                 ccglbtm.doc
   CComModule                             ccmod.doc
   CComMultiThreadModel                   ccmtm.doc
   CComMultiThreadModelNoCS               ccmtmncs.doc
   CComObject                             ccob.doc
   CComObjectGlobal                       ccobglb.doc
   CComObjectNoLock                       ccobnlck.doc
   CComObjectRoot                         ccobroot.doc
   CComObjectRootEx                       ccobrtex.doc
   CComObjectStack                        ccobstk.doc
   CComObjectThreadModel                  ccobtm.doc
   CComPolyObject                         ccpoly.doc
   CComPtr                                ccptr.doc
   CComQIPtr                              ccqiptr.doc
   CComSimpleThreadAllocator              ccsmpthr.doc
   CComSingleThreadModel                  ccsngtm.doc
   CComTearOffObject                      cctob.doc
   CComUnkArray                           ccunkar.doc
   CComVariant                            ccvar.doc
   CContainedWindow                       ccwind.doc
   CDialogImpl                            cdialogi.doc
   CDynamicChain                          cdynchn.doc
   CFirePropNotifyEvent                   cfirepro.doc
   CMessageMap                            cmessmap.doc
   CRegKey                                cregky.doc
   CStockPropImpl                         cstockpr.doc
   CWindow                                cwind.doc
   CWindowImpl                            cwindi.doc
   CWndClassInfo                          cwndcls.doc
   IConnectionPointContainerImpl          iconptc.doc
   IConnectionPointImpl                   iconpti.doc
   IDataObjectImpl                        idataob.doc
   IDispatchImpl                          idisp.doc
   IObjectSafetyImpl                      iobsafe.doc
   IObjectWithSiteImpl                    iobwsite.doc
   IOleControlImpl                        iolecont.doc
   IOleInPlaceActiveObjectImpl            ioleipac.doc
   IOleInPlaceObjectWindowlessImpl        ioleipow.doc
   IOleObjectImpl                         ioleobj.doc
   IPerPropertyBrowsingImpl               iperprbr.doc
   IPersistPropertyBagImpl                iperspb.doc
   IPersistStorageImpl                    iperstg.doc
   IPersistStreamInitImpl                 iperstr.doc
   IPointerInactiveImpl                   ipntinac.doc
   IPropertyNotifySinkCP                  iprntfys.doc
   IPropertyPageImpl                      iprpg.doc
   IPropertyPage2Impl                     iprpg2.doc
   IProvideClassInfo2Impl                 iprvci2.doc
   IQuickActivateImpl                     iqkact.doc
   IRunnableObjectImpl                    irunobj.doc
   ISpecifyPropertyPagesImpl              ispecpp.doc
   ISupportErrorInfoImpl                  isuperi.doc
   IViewObjectExImpl                      iviewobj.doc

   ATL Macros and Global Functions        macros.doc
   -------------------------------        ----------

   Obsolete ATL Topics                    obsolete.doc

 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : AtlIss kbprg kbfasttip<BR>
Technology          : kbAtl kbInetDev<BR>
Version             : 2.00<BR>
Platform            : WINDOWS<BR>
Hardware            : x86<BR>
Issue type          : kbreadme<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

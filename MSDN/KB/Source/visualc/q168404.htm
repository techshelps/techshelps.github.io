

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: C2664 Instantiating STL List with Sequence [first, last) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168404">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1997/05/12">
<META NAME="Keywords" CONTENT="CPPIss STLIss vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Instantiating an STL list container with a sequence [first, last), where first and last are iterators, causes the compiler error C2664:     'function': cannot convert parameter number from 'type1' to 'type2'  CAUSE =====  Using the list(const_itera...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAML,QAE1,QAB4,QAOT,QDKW,QA9N,QAUD,QAPF,QAAP,QAMA,QALZ,QAHE,QAB7,QAA7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: C2664 Instantiating STL List with Sequence [first, last)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168404</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Instantiating an STL list container with a sequence [first, last), where
first and last are iterators, causes the compiler error C2664:
<P>
<PRE>   'function': cannot convert parameter number from 'type1' to 'type2'

</PRE><h2>CAUSE</h2>
 
<P>
Using the list(const_iterator first, const_iterator last, const A&amp; a1= A())
constructor causes the compiler error C2664. The constructor for list takes
a list&lt;T&gt;::const_iterator instead of a generic iterator for the first two
parameters.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
<P><h3>Workaround 1</h3>
 
<P>
Use the default constructor. Insert elements in the list using the
push_back member function.
<P>
<P><h3>Workaround 2</h3>
 
<P>
Use the list(size_type, const T&amp; v = T(), const A&amp; a1 = A()) constructor.
Insert elements in the list using the copy algorithm.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft is researching this problem and will post new information here in
the Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample demonstrates the problem:
<P>
<PRE>   //test1.cpp
   //Compiler options needed: /GX

   #include &lt;list&gt;

   int main()
   {
      int INTARRAY[4] = {1, 2, 3, 4} ;
      std::list&lt;int&gt; INTLIST(INTARRAY, INTARRAY + 4) ; //C2664 here
   }

</PRE>The exact error message for the above sample is:
<P>
<PRE>   test1.cpp(9) : error C2664: 'std::list&lt;int,class
   std::allocator&lt;int&gt;&gt;::list&lt;int,class std::allocator&lt;int&gt;&gt;(unsigned
   int,const int &amp;,const class std::allocator&lt;int&gt; &amp;)' : cannot convert
   parameter 1 from 'int [4]' to 'unsigned int'

</PRE>The following sample demonstrates Workaround 1:
<P>
<PRE>   //test2.cpp
   //Compiler options needed: /GX

   #include &lt;list&gt;

   int main()
   {
      int INTARRAY[4] = {1, 2, 3, 4} ;
      std::list&lt;int&gt; INTLIST ;
      for(int i = 0; i &lt; 4; i++)
          INTLIST.push_back(INTARRAY[i]) ;
      return 0 ;
   }

</PRE>The following sample demonstrates Workaround 2:
<P>
<PRE>   //test3.cpp
   //Compiler options needed: /GX

   #include &lt;list&gt;
   #include &lt;algorithm&gt;

   int main()
   {
      int INTARRAY[4] = {1, 2, 3, 4} ;
      std::list&lt;int&gt; INTLIST(4) ;
      std::copy(INTARRAY, INTARRAY + 4, INTLIST.begin()) ;
      return 0 ;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: list copy push_back<BR>
Keywords            : CPPIss STLIss vcbuglist500<BR>
Version             : 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

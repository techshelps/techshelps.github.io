

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Export Functions from a 16-bit DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148832">
<META NAME="KBModify" CONTENT="1997/08/26">
<META NAME="KBCreate" CONTENT="1996/03/25">
<META NAME="Keywords" CONTENT="kb16bitonly VCGenIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article describes how to export functions from a 16-bit Dynamic Link Library (DLL). The topics discussed include:   - How the memory model affects function declarations.  - Segment setup - what does SS!=DS mean?  - Function Prolog and Epilog o...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3P,QAY5,QBV8,QAB9,QAH4,QBFY,QA4Q,QAPF,QAO2,QAUD,QBHQ,QAY2,QBVV,QDL9,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Export Functions from a 16-bit DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148832</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to export functions from a 16-bit Dynamic
Link Library (DLL). The topics discussed include:

<UL><LI>How the memory model affects function declarations.
<LI>Segment setup - what does SS!=DS mean?
<LI>Function Prolog and Epilog options.
<LI>How to declare functions as exported -- through function declaration or
   module-definition file (.def file)?
<LI>The C-run-time libraries for DLLs.
<P>
</UL>Sample code is also included along with the associated compiler and linker
options.
<P>
If you are exporting callback functions, please see the following article
in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../VISUALC/Q100659.htm">Q100659</A></B>
   TITLE     : Exporting Callback Functions Not Required in
               Win32-Based Apps

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>How the Memory Model Affects Function Declarations</h3>
 
<P>
The code and data for the DLL will reside in segments that are separate
from the segments that hold the code and data for the .exe file. The .exe
file and the DLL share the stack of the .exe file, so you do not need to do
anything special to pass data as arguments from the .exe file to the DLL.
Because the calling function (in the .exe file) resides in a segment
separate from the called function (DLL), the called function must be
declared as FAR (or __far). Because the data of the calling function
resides in a segment separate from the called function, pointer arguments
and pointer return values in the declaration of the called function must
also be declared as FAR. The FAR declaration can be explicit (specified by
the function declaration) or implicit (specified by the memory model).
<P>
To declare a function as FAR explicitly, precede the function name with FAR
or __far, as in this example:
<P>
<PRE>   int FAR Function ();

</PRE>To declare a pointer as FAR explicity, precede the asterisk with FAR or
__far, as in this example:
<P>
<PRE>   int FAR *pInt;

</PRE><h3>Segment Setup - What Does SS!=DS Mean?</h3>
 
<P>
DLL functions use the stack of the calling function, so the DLL's segment
addresses for the stack segment and for the data segment are not the same.
The Visual C++ compiler can make assumptions about the value of these
segment registers. Therefore, when creating a DLL, you must inform the
compiler not to make assumptions of this nature.
<P>
There are two options that the Visual C++ compiler recognizes concerning
SS!=DS. The option used for DLLs is SS!=DS, which means that the DS is not
loaded on function entry. The DS register will be loaded in the Prolog code
for the function. On the command-line options for the compiler, this option
is specified by /Axw where the x is either S, M, or L (small, medium, or
large memory model).
<P>
<P><h3>Function Prolog and Epilog Options</h3>
 
<P>
If any function in the DLL is declared with __export, the DLL should be
compiled with the compiler option to generate prolog/epilog code for
Protected Mode DLL Functions (/GD). This option will only generate the
prolog/epilog code for functions declared with __export. To generate the
same prolog/epilog code for functions declared FAR (explicitly or
implicitly), select the compiler option to "Generate for __far Functions"
(/GEf). This will not export the functions, however. You will need to
specify the exported functions in the EXPORTS section of the module-
definition file (.def file).
<P>
<P><h3>How to Declare Functions as Exported</h3>
 
<P>
You have two options to export a function in a DLL, either use __export in
the function declaration, or make an entry for the function in the EXPORTS
section of the .def file. Using __export is straight-forward, but you will
have much more control over how exactly the function is exported if you
choose to use the .def file. These two options are not exclusive. For more
information about these options, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../WIN16SDK/Q77986.htm">Q77986</A></B>
   TITLE     : Using _export Keyword or DEF File EXPORTS Statement

</PRE>To use __export in the function declaration, precede the function name with
the __export keyword, as in this example:
<P>
<PRE>   int FAR _export Function ();

</PRE>If you choose to use the .def file option, you must know the decorated
function name (function names are decorated both in C and C++ by the
compiler). You will find the decorated name in the .map file generated by
the linker. This means that if you don't know the decorated name, you must
first link the DLL without exported functions. Then find the decorated
names in the .map file, construct the EXPORTS section of the .def file, and
link the DLL again. C functions are decorated with a leading underscore.
C++ functions have a more complex decoration.
<P>
For a more detailed discussion of the EXPORTS section of the .def file,
please see the Visual C++ documentation.
<P>
<P><h3>The C-Run-Time libraries for DLLs</h3>
 
<P>
The C-run-time libraries for DLLs are XdllcYw.lib. Where X is the memory
model and Y is the math library option. For example, Ldllcew.lib is the
C-run-time library for large-memory-model DLLs using the standard math
library. Do not use XlibcYw.lib; these are the C-run-time libraries for
Windows-based applications, not for DLLs. For more information about
library-naming conventions, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../VISUALC/Q28173.htm">Q28173</A></B>
   TITLE     : C Run-time Library History and Naming Conventions

</PRE><h3>Step-by-Step Example to Build the DLL</h3>
 
<P>
To build the DLL from the IDE:

<OL><P><LI>On the Project menu, click New, and select Windows dynamic-link library.

<P><LI>Name it Mydll.

<P><LI>Add the following Mydll.c file to the project. If you now build the
   project, the IDE will create the .def file (Mydll.def) shown in the
   "Mydll.def Sample Code" section of this article. Then it will use this
   .def file to build the DLL.
<P>
<PRE>   // MyDLL.c

   #include "windows.h"

   // This is a FAR function that returns a FAR pointer to an integer.
   // It takes as arguments a FAR pointer to an integer and
   // a FAR pointer to a character array.
   // Note that this function is exported.
   // Note also that because you're compiling with a large memory model,
   // all occurrences of FAR may be omitted here.

   int FAR * FAR __export DLLfunc1 (int FAR *Marker, LPSTR Message)
   {
      char Title[200];
      wsprintf(Title,"Marker Number %d",*Marker);
      MessageBox(NULL,Message,Title,MB_OK);
      return Marker;
   }

</PRE></OL>To build the DLL from the command line:

<OL><P><LI>Hand code the Mydll.def file shown in the "Mydll.def Sample Code"
   section of this article.

<P><LI>Use the following commands in sequence:
<P>
   Compile with:
<P><PRE>      CL /ALw /GD /c MyDLL.c
</PRE><P>
   Link with:
<P><PRE>      LINK /NOD /NOE MyDLL.obj,MyDLL.DLL,,LDLLCEW LIBW,MyDLL.DEF
</PRE><P>
   Create Import Library:
<P><PRE>      IMPLIB MyDLL.LIB MyDLL.DLL
</PRE><P>
</OL><h3>Mydll.def Sample Code</h3>
 
<P>
<PRE>   ; MyDLL.DEF
   LIBRARY   MYDLL
   EXETYPE   WINDOWS
   CODE      PRELOAD MOVEABLE DISCARDABLE
   DATA      PRELOAD MOVEABLE SINGLE
   HEAPSIZE  1024
   EXPORTS
             WEP PRIVATE
   ; To implement your own Windows Exit Procedure add the following
   ; function to your application (referring to it in the .def file isn't
   ; necessary). The extern "C" is only required if module is C++.
   ; extern "C" int FAR PASCAL _WEP(int)
   ; {
   ;       /* Your WEP functionality goes here */
   ;  return 1;
   ; }

</PRE></OL><h3>Step-by-Step Example to Build the Application</h3>
 
<P>
To build the application from the IDE:

<OL><P><LI>On the Project menu, click New, and select Windows application (.EXE).

<P><LI>Add the following Myapp.c file to the project. Again, the IDE will
   create the Myapp.def shown in the "Myapp.def Sample Code" section of
   this article.
<P>
<PRE>   // MyApp.c

   #include "windows.h"

   // This is a FAR function that returns a FAR pointer to an integer.
   // It takes as arguments a FAR pointer to an integer and
   // a FAR pointer to a character array.
   // Note also that since we are compiling with a medium memory model,
   // all occurrences of FAR below are required.
   // Note that the NEAR pointers to MainMarker and MainMessage are
   // converted to FAR in the function call to DLLfunc1 by the compiler.

   int FAR * FAR DLLfunc1 (int FAR *Marker, LPSTR Message);

   int FAR PASCAL WinMain (
      HINSTANCE hInstCurrent,
      HINSTANCE hinstPrevious,
      LPSTR lpszCmdLine,
      int nCmdShow)
   {
      int MainMarker = 123;
      char *MainMessage = "My WinMain message";
      DLLfunc1(&amp;MainMarker,MainMessage);
      return 0;
   }

</PRE><P><LI>On the Options menu, click Project, and in the Linker input Libraries
   setting, add Mydll.lib, and build the application.
<P>
</OL>To build the application from command line:

<OL><P><LI>Hand code the Myapp.def file shown in the "Myapp.def Sample Code"
   section of this article.

<P><LI>Use the following commands in sequence:
<P>
   Compile with:
<P><PRE>      CL /AM /GA /c MyApp.c
</PRE><P>
   Link with:
<P><PRE>      LINK /NOD /NOE /STACK:8096 MyApp.obj,MyApp.exe,,LLIBCEW LIBW MyDLL,
      MyApp.DEF
</PRE><P>
</OL><h3>Myapp.def Sample Code</h3>
 
<P>
<PRE>   ; MyApp.DEF
   NAME      MYAPP
   EXETYPE   WINDOWS
   CODE      PRELOAD MOVEABLE DISCARDABLE
   DATA      PRELOAD MOVEABLE MULTIPLE
   HEAPSIZE  1024
   ;STACKSIZE 8096 ;Uncomment this line if /STACK:8096 is not used in
                   ;command line build for LINK. IDE build sets this option
                   ; by default

   EXPORTS
   ;    ===List your explicitly exported functions here===

</PRE></OL><h3>Modified Version of Mydll.def File</h3>
 
<P>
If you do not use the __export keyword for the exported function, you need
to modify the Mydll.def file where the decorated name of the function is
added in the EXPORTS section as shown here:
<P>
<PRE>   ; MyDLL.DEF
   LIBRARY   MYDLL
   EXETYPE   WINDOWS
   CODE      PRELOAD MOVEABLE DISCARDABLE
   DATA      PRELOAD MOVEABLE SINGLE
   HEAPSIZE  1024
   EXPORTS
             _DLLFunc1
             WEP PRIVATE
   ; To implement your own Windows Exit Procedure add the following
   ; function to your application (referring to it in the .def file is
   ; not required.)  The extern "C" is only required if module is C++.
   ; extern "C" int FAR PASCAL _WEP(int)
   ; {
   ;       /* Your WEP functionality goes here */
   ;  return 1;
   ; }

</PRE>When building the DLL from the IDE, select "Generate for __far Functions"
in the compiler's "Windows Prolog/Epilog" category.
<P>
When building the DLL from the command line, add the /GEf option as shown
here:
<P>
<PRE>   CL /ALw /GD /GEf /c MyDLL.c
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 1.52a 1.52b 1.52c<BR>
Keywords          : kb16bitonly VCGenIss<BR>
Version           : WINDOWS:1.0,1.5,1.51,1.52<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>
Solution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

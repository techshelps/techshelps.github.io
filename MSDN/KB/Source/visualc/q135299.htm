

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Using MFC OLE Drag &amp; Drop to Drag Text Between Windows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q135299">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/08/20">
<META NAME="Keywords" CONTENT="MfcOLE kbprg kbsample">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In a Microsoft Foundation Classes (MFC) application, you may want to enable the user to drag text between various windows, including those in CWnd-derived objects as well as standard control windows in CListBox and CEdit-derived objects.  A sample ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA9N,QAPN,QAW6,QA9Q,QAGI,QDL9,QBWQ,QBWO,QBWN,QACI,QAYV,QAMB,QABO,QAY2,QATX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Using MFC OLE Drag &amp; Drop to Drag Text Between Windows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q135299</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.50, 1.51, 1.52, 1.52b
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2,
<P><PRE>     4.0, 4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In a Microsoft Foundation Classes (MFC) application, you may want to enable
the user to drag text between various windows, including those in
CWnd-derived objects as well as standard control windows in CListBox and
CEdit-derived objects.
<P>
A sample (LSTDRG) is available that demonstrates how to add OLE
drag-and-drop functionality to a pre-existing MFC application. This sample
demonstrates using OLE drag-and drop functionality to drag text between two
list boxes, an edit control, and a CWnd-derived object's window. You can
also use any other application with OLE text drag-and-drop functionality
enabled as a drag source or a drop target (Word for Windows 6.x is one such
application).
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Lstdrg.exe">Lstdrg.exe</A> <I>(size: 993180 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from
               Online Services


</PRE><h2>MORE INFORMATION</h2>
 
<P>
To enable OLE for a pre-existing MFC application, you must initialize the
OLE DLLs. This is done in the InitInstance() of your application object by
calling AfxOleInit().
<P>
The LSTDRG sample was first created with no OLE support using AppWizard.
The code that calls AfxOleInit() was then cut-and-pasted from
InitInstance() of the OCLIENT MFC sample application that is supplied with
the above mentioned products.
<P>
OLE drag-and-drop functionality was enabled for each window by following
the procedure outlined in the MFC version 2.5 OLE 2 Classes documentation.
Sections of interest are:

<UL><LI>"Drag and Drop: Implementing a Drop Source"

<LI>"Drag and Drop: Implementing a Drop Target"

<LI>"Data Objects and Data Sources: Creation and Destruction"

<LI>"Data Objects and Data Sources: Manipulation"
<P>
</UL>You will also want to review the MFC Classes COleDataSource and
COleDropTarget.
<P>
To turn a CWnd-derived object into a drop source, you must instantiate a
COleDataSource object in your CWnd-derived object. You can then call
COleDataSource::CacheGlobalData() to cache the data (text) that you are
going to drag. Then call COleDataSource::DoDragDrop() to actually initiate
the drag drop. The return value from DoDragDrop() gives you the result of
the drag/drop operation. The DROPEFFECT return value from DoDragDrop() is a
bit field, so you have to test specific bits of the return value to
determine the drag/drop results.
<P>
Turning a CWnd-derived object into a drop target is a bit more complicated.
You must derive your own class from COleDropTarget, and instantiate a
member of your COleDropTarget-derived object in the CWnd-derived class. In
your COleDropTarget object you have to, at a minimum, override these four
member functions:
<P>
<PRE>      COleDropTarget::OnDragEnter()
      COleDropTarget::OnDragLeave()
      COleDropTarget::OnDragOver()
      COleDropTarget::OnDrop()

</PRE>You must also initialize the COleDropTarget derived object as a drop target
with the OLE DLLs by calling COleDropTarget::Register(). This would
normally be done in the OnCreate member function of a CWnd-derived object
(see the CDDWnd::OnCreate method in LSTDRG). A problem in dialog template
created classes (CListBox, CEdit, and so on created by AppStudio) is that
OnCreate is not called. This is because control windows associated with the
dialog template are created during the dialog creation process before their
actual CWnd-derived C++ objects are created. These windows are then
attached by using Attached() to the C++ CWnd-derived objects once they are
created.
<P>
To work around this, an Initialize() method was created for the CListBox
and CEdit-derived classes where COleDropTarget::Register() is called. This
Initialize() method is then called for each template-created control in the
CFormView-derived classes OnInitialUpdate() method (see
CListdragView::OnInitialUpdate() and CDDListBox::Initialize()).
<P>
Another interesting aspect of the LSTDRG application is the use of a
burning trashcan animation when text is dropped on a window. This animation
uses a single bitmap composed of multiple 'cells' or images. The use of a
single bitmap as opposed to multiple bitmaps conserves GDI resources and is
more efficient to paint. It also turns off the mouse pointer (cursor) by
loading an empty pointer during painting to eliminate pointer flicker on
Windows version 3.x computers.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"MFC 2.5 OLE 2 Classes" reference book, available in the Books Online of
Visual C++ version 1.5. See sections on drag-and-drop beginning with the
section titled "Drag and Drop." Also review the COleDataSource class and
the COleDataTarget class in the same reference book.
<P>
For good background information on how OLE handles drag and drop, please
see "Inside OLE 2" by Kraig Brockschmidt, published by Microsoft Press.
 
<PRE>Keywords          : MfcOLE kbprg kbsample
Technology        : kbMfc kbole kbMfc
Version           : 2.0 2.1 2.2 4.0 4.1 4.2 5.0
Platform          : NT WINDOWS
Solution Type     : kbfile</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

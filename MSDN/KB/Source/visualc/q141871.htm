

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Add Tooltips to ActiveX Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141871">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1995/12/28">
<META NAME="Keywords" CONTENT="kbcode kbprg MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article demonstrates how to add a ToolTip to an ActiveX Control.  MORE INFORMATION  By default, ActiveX controls do not support ToolTips. The following steps, however, demonstrate how to modify a basic ActiveX control generated using the MFC A...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QAB5,QA7O,QAMN,QAOE,QAHV,QAVX,QAVW,QAEV,QAPN,QAII,QAWT,QAYC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Add Tooltips to ActiveX Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141871</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to add a ToolTip to an ActiveX Control.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
By default, ActiveX controls do not support ToolTips. The following steps,
however, demonstrate how to modify a basic ActiveX control generated using
the MFC ActiveX Control Wizard to add this support.

<OL><P><LI>Use the MFC ActiveX Control Wizard to generate a basic control named
   Basic.

<P><LI>Open the Stdafx.h file associated with the project and add the following
   line:
<P>
<P><PRE>      #include &lt;afxcmn.h&gt;
</PRE><P>
   The header file Afxcmn.h contains declarations for MFC classes that
   serve as wrappers to Windows Common Controls including CToolTipCtrl.

<P><LI>Add the following lines to COleControl-derived class CBasicCtrl
   located in Basicctl.h:
<P>
<P><PRE>      CToolTipCtrl m_ttip;
      void RelayEvent(UINT message, WPARAM wParam, LPARAM lParam);
</PRE><P>
   The RelayEvent method will be used by the mouse message handlers
   to relay those messages to the ToolTip control.

<P><LI>Use ClassWizard to add an OnCreate handler to the message map. It is in
   this routine that the ToolTip control will be created. Add the following
   code to this handler:
<P>
<P><PRE>      if (!m_ttip.Create(this))
<PRE></PRE>         TRACE0("Unable to create tip window.");
      else
         if (!m_ttip.AddTool(this, LPCTSTR(m_toolTipText)))
            TRACE0("Unable to add tip for the control window.");
         else
            m_ttip.Activate(m_showToolTip);

</PRE><P><LI>To relay appropriate messages to the ToolTip control, add handlers
   for WM_LBUTTONDOWN, WM_LBUTTONUP, and WM_MOUSEMOVE to the control's
   message map. The message map and code for these handlers follows:
<P>
<P><PRE>      // Message maps
      //{{AFX_MSG(CTestpropCtrl)
<PRE></PRE>         afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
         afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
         afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
         afx_msg void OnMouseMove(UINT nFlags, CPoint point);
      //}}AFX_MSG
            DECLARE_MESSAGE_MAP()

      void CBasicCtrl::OnLButtonDown(UINT nFlags, CPoint point)
      {
         RelayEvent(WM_LBUTTONDOWN, (WPARAM)nFlags,
                    MAKELPARAM(LOWORD(point.x), LOWORD(point.y)));

         COleControl:: OnLButtonDown(nFlags, point);
      }

      void CBasicCtrl::OnLButtonUp(UINT nFlags, CPoint point)
      {
         RelayEvent(WM_LBUTTONUP, (WPARAM)nFlags,
                    MAKELPARAM(LOWORD(point.x), LOWORD(point.y)));

         COleControl::OnLButtonUp(nFlags, point);
      }

      void CBasicCtrl::OnMouseMove(UINT nFlags, CPoint point)
      {
         RelayEvent(WM_MOUSEMOVE, (WPARAM)nFlags,
                    MAKELPARAM(LOWORD(point.x), LOWORD(point.y)));

         COleControl::OnMouseMove(nFlags, point);
      }

      // implementation of the CBasicCtrl::RelayEvent method:

      void CBasicCtrl::RelayEvent(UINT message, WPARAM wParam, LPARAM
   lParam)
      {
         if (NULL != m_ttip.m_hWnd) {
            MSG msg;

            msg.hwnd= m_hWnd;
            msg.message= message;
            msg.wParam= wParam;
            msg.lParam= lParam;
            msg.time= 0;
            msg.pt.x= LOWORD (lParam);
            msg.pt.y= HIWORD (lParam);

            m_ttip.RelayEvent(&amp;msg);
        }
      }

   While it might seem reasonable to call CWnd::GetCurrentMessage instead
   of manually building a message, the value of the point that is returned
   is expressed in screen coordinates. When the ToolTip performs a hit test
   to determine if the point of the relayed message falls within the
   boundary of the client rectangle of any associated tools, the test will
   fail, and the ToolTip will not be displayed.

</PRE><P><LI>Alter CBasicCtrl::DoPropExchange by adding code to initialize the
   m_toolTipText and m_showToolTip properties:
<P>
<P><PRE>      PX_Bool(pPX, _T("ShowToolTip"), m_showToolTip, FALSE);
      PX_String(pPX, _T("ToolTipText"), m_toolTipText, _T(""));
</PRE>
<P><LI>To allow the user of the control some control over the ToolTip
   functionality, use ClassWizard to add the following Automation
   properties to the CBasicCtrl class:
<P>
<PRE>   External Name:          ShowToolTip            ToolTipText
   Type:                   BOOL                   CString
   Variable name:          m_showToolTip          m_toolTipText
   Notification function:  OnShowToolTipChanged   OnToolTipTextChanged

   ShowToolTip will allow the user to suppress the display of the ToolTip,
   and ToolTipText will track the text that is to be displayed when the
   ToolTip is visible.

</PRE><P><LI>Modify the property change notification functions for these properties
   in the following manner:
<P>
<P><PRE>      void CBasicCtrl::OnToolTipTextChanged()
      {
<PRE></PRE>         if (m_ttip.m_hWnd &amp;&amp; AmbientUserMode()) {
            m_ttip.UpdateTipText(LPCTSTR(m_toolTipText), this);
            SetModifiedFlag();
         }
      }

      void CBaseCtrl::OnShowToolTipChanged()
      {
         if (m_ttip.m_hWnd &amp;&amp; AmbientUserMode()) {
            m_ttip.Activate(m_showToolTip);
            SetModifiedFlag();
         }
      }

</PRE></OL><h3>Test the Control</h3>
 
<P>
To test the control, build it, launch the ActiveX Control Test Container
and insert the control into the Test Container. Then follow these steps:

<OL><P><LI>On the View menu, click Properties.

<P><LI>Pull down the Property combo, set the ShowToolTip property to -1, and
   choose Apply.

<P><LI>Pull down the Property combo, set the ToolTipText property to SomeTip,
   and choose Apply.

<P><LI>Move the pointer over the client area of the control.
<P>
</OL>A ToolTip containing the text "Some Tip" should be displayed over the
client area of the control.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Visual C++ version 4.x or 5.0 Books Online.
<P>
Cluts, Nancy, "Programming the Windows 95 User Interface,"
Microsoft Press, 1995, Pages 26-28.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode kbprg MfcOLE<BR>
Technology          : kbMfc kbole<BR>
Version             : 4.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Specify Shared and Nonshared Data in a DLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100634">
<META NAME="KBModify" CONTENT="1998/03/20">
<META NAME="KBCreate" CONTENT="1993/06/24">
<META NAME="Keywords" CONTENT="CLngIss BseDll kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  To have both shared and non-shared data in a Dynamic Link Library (DLL) which is built with a 32-bit Microsoft C compiler, you need to use the #pragma data_seg directive to set up a new named section. Then you must inform the linker of the correct ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA3A,QAYY,QAUJ,QBXT,QBVV,QAYL,QA0K,QAC2,QAH7,QAH6,QAD7,QAJQ,QAKR,QAH4,QAHE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Specify Shared and Nonshared Data in a DLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 20, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100634</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 1.1, 2.0, 2.1, 2.2, 4.1,
   4.2, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To have both shared and non-shared data in a Dynamic Link Library (DLL)
which is built with a 32-bit Microsoft C compiler, you need to use the
#pragma data_seg directive to set up a new named section. Then you must
inform the linker of the correct sharing attributes for this new named data
section using either the .def file or a linker switch.
<P>
The system tries to load the shared memory block created by #pragma
data_seg at the same address in each process. However, if the block cannot
be loaded into the same memory address, it is mapped to a different
address, but it is still shared.
<P>
NOTE: If the block contains pointers, this can be a problem. If the pointer
holds the address of a variable not in the shared data segment then this
address is valid only in one process space. If the address is in the shared
data segment, it will be valid as long as the above relocation doesn’t
occur. Since this is unreliable, you should not use pointers. You can use
arrays in a shared data segment, but do so with caution. The array name is
a pointer. Do not pass this value between processes. For example, if you
have a string declared in the shared data segment as char Customer[20] =
{0}, it’s okay for each process to use that variable name, as in
strcpy(buf, Customer) or char FirstInitial = Customer[0]. However, do not
pass the value of Customer to another process as in
PostMessage(hwndNotMyWindow, WM_USER, 0, (LPARAM)Customer).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Below is a sample of how to define a named data section in your DLL. The
first line directs the compiler to include all the data declared in this
section in the .MYSEC data segment. This means that the iSharedVar variable
would be considered part of the .MYSEC data segment. By default, data is
nonshared.
<P>
Note that you must initialize all data in your named section. The data_seg
pragma only applies to initialized data.
<P>
The third line below, "#pragma data_seg()", directs the compiler to reset
allocation to the default data section.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   #pragma data_seg(".MYSEC")
   int iSharedVar = 0;
   #pragma data_seg()

</PRE>You must also tell the linker that the variables in the section you defined
are to be shared by modifying your .def file to include a SECTIONS section
or by specifying /SECTION:.MYSEC,RWS in your link line. For example,
aSECTIONS section could look like:
<P>
<PRE>   SECTIONS
     .MYSEC   READ WRITE SHARED

</PRE>Alternatively, some compilers allow you to set the linker switch in your
code so that if your file is ever copied to another project, the linker
switch goes with it. To do this, include the following line in your code
preferably near the #pragma data_seg(".MYSEC") line:
<P>
<PRE>   #pragma comment(linker, "/SECTION:.MYSEC,RWS")

</PRE>Be careful not to include any extraneous spaces inside the quotation marks
because this may cause the linker to misinterpret the directive.
<P>
NOTE: By convention, each section name begins with a period. (The period is
not required.) All section names must not be longer than eight characters,
including the period character.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: memory mapped win95 winnt nt40<BR>
Keywords          : CLngIss BseDll kbfasttip<BR>
Version           : WINNT:1.1,2.0,2.1,2.2,4.0,4.2,4.2,5.0<BR>
Platform          : NT<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 20, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

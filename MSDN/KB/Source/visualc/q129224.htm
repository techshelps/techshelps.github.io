

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Remove the System Menu from an Iconized Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129224">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1995/04/20">
<META NAME="Keywords" CONTENT="kbprg MfcUI kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  There are two ways to remove the system menu of an application when a user clicks an iconized application:  1. Override the main frame window's PreCreateWindow function to remove the    WS_SYSMENU from the window's style field. However, this method...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEF,QDH6,QA9N,QANJ,QAJH,QAF0,QAY2,QDKD,QAA1,QACI,QAPN,QAIB,QAH4,QAGU,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Remove the System Menu from an Iconized Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129224</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++ 32-bit Edition, 2.0, 2.1, 4.0, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are two ways to remove the system menu of an application when a user
clicks an iconized application:

<OL><P><LI>Override the main frame window's PreCreateWindow function to remove the
   WS_SYSMENU from the window's style field. However, this method removes
   the system menu altogether from the application.

<P><LI>Override the main frame window's OnSize method, and change the window
   style of the mainframe to either include or exclude the WS_SYSMENU style
   bit depending on user action. Use this technique if the user wants to
   remove the system menu when the application is iconized and add the
   system menu back to the application when the application is restored.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Method One</h3>
 
<P>
To remove the system menu completely from the application, override
the main frame window's PreCreateWindow method as follows:
<P>
<PRE>   BOOL CMainFrame::PreCreateWindow(CREATESTRUCT &amp; cs)
   {
           // Call the base class version of PreCreateWindow, replace
          //  CMDIFrameWnd with CFrameWnd in the following line
          //  for an SDI application

           if (!CMDIFrameWnd::PreCreateWindow(cs))
                return FALSE;

          // Remove the system menu style bit from the window

           cs.style &amp;= ~WS_SYSMENU;
           return TRUE;
   }

</PRE></OL><h3>Method Two</h3>
 
<P>
The following steps and code fragments show how to remove the system menu
when a user clicks an iconized application. The system menu is restored
when the application is not iconized.

<OL><P><LI>Declare a BOOLEAN public data member in the class declaration of
   CMainFrame. This data member determines if the system menu is enabled or
   not:
<P>
<P><PRE>      // In an SDI application CMainFrame will be derived from CFrameWnd
</PRE><P>
<P><PRE>      class CMainFrame : public CMDIFrameWnd
      {
      public:
<PRE></PRE>         BOOL sys_menu_enabled;
             .
             .  // Existing class declarations
             .
      }

</PRE><P><LI>Modify the CMainFrame constructor to initialize the sys_menu_enabled
   data member function to TRUE:
<P>
<P><PRE>      CMainFrame::CMainFrame()
      {
<PRE></PRE>        //default the system menu to be enabled
        sys_menu_enabled = TRUE;
             .
             .  // Continue with normal constructor code, if any
             .
      }

</PRE><P><LI>Use the Class Wizard to create a message handler for the WM_SIZE message
   for the CMainFrame class, and add the following code to the
   CMainFrame::OnSize message handler:
<P>
<P><PRE>      void CMainFrame::OnSize(UINT nType, int cx, int cy)
      {
<PRE></PRE>        // declare a local variable to hold the window style

           long window_style;

        //call base class's OnSize function,
        //If SDI application call CFrameWnd::OnSize()

        CMDIFrameWnd::OnSize(nType, cx, cy);

        //if user is minimizing or iconizing the application

        if (nType == SIZE_MINIMIZED)
        {
             // Get the main frame window's style
              window_style = GetWindowLong(m_hWnd, GWL_STYLE);

             //Remove the system menu from the window's style
              window_style &amp;= ~WS_SYSMENU;

             //toggle the boolean data member to show sys menu disabled
              sys_menu_enabled = FALSE;

             //set the style attribute of the main frame window
             SetWindowLong(m_hWnd, GWL_STYLE, window_style);
        }
        else
        {
             //if user is restoring the application and his system menu
             //is disabled,
             if ((nType == SIZE_RESTORED) &amp;&amp; (!sys_menu_enabled))
             {
                 window_style = GetWindowLong(m_hWnd, GWL_STYLE);

               //Add the system menu to the window's style
                 window_style |= WS_SYSMENU;

              //toggle the boolean data member to show sys menu enabled
                sys_menu_enabled = TRUE;

                SetWindowLong(m_hWnd, GWL_STYLE, window_style);
                SendMessage(WM_NCACTIVATE,TRUE);
             }
         }
      }

 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg MfcUI kbcode kbprg<BR>
Technology          : kbMfc<BR>
Version             : 1.0 1.5 2.0 2.1 4.0 5.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: COleControl::Serialize Not Called with VB as Container </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141274">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/12/14">
<META NAME="Keywords" CONTENT="CDKIss MfcOLE kbole kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Although OLE controls are used with certain control containers (such as Microsoft Visual Basic version 4.0), the Serialize function for the control- derived class is not called. These containers allow the control to store its persistent information...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QBS0,QAOE,QAW6,QAPN,QAGI,QA9Q,QAHV,QBVV,QAH6,QAUR,QBXS,QBBS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: COleControl::Serialize Not Called with VB as Container</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141274</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 2.00 2.10 2.20
WINDOWS NT
kbprg kbole kbprb
<P>
 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic
   programming system for Windows, version 4.0

<LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0
    - Microsoft OLE Control Developer's Kit (CDK)
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Although OLE controls are used with certain control containers (such as
Microsoft Visual Basic version 4.0), the Serialize function for the control-
derived class is not called. These containers allow the control to store
its persistent information either by using the property sets or by using
the IPersistPropertyBag interface. Both these methods call
COleControl::DoPropExchange directly without calling the control's
Serialize function.
<P>
The resolution section of this article discusses a technique that you can
use in the DoPropExchange method to store CObject-derived objects.
<P>
<P><h2>CAUSE</h2>
 
<P>
COleControl::Serialize is called by the framework when an OLE control
container uses one of the following persistent storage interfaces for
loading and saving the control: IPersistStorage, IPersistStreamInit, or
IPersistMemory.
<P>
If a control container uses any other method to store the control's
persistent information, then Serialize for the control-derived class will
not be called. Microsoft Visual Basic, for example, uses either
IPersistPropertyBag or property sets to store the persistent information
for an OLE control; therefore, the Serialize function for a control is not
called when Visual Basic is used as the control container.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Although there is no direct support for serializing CObject-derived objects
in COleControl::DoPropExchange, you might want to use the following
technique to store objects in an OLE control:

<OL><P><LI>Allocate a block of memory with GlobalAlloc.
<P>
<PRE>   // cbGuess is a guess of how much memory will be needed.
   // If more is needed, CSharedFile will reallocate.
   HGLOBAL hMem = GlobalAlloc(GPTR, cbGuess);
   BYTE *pbMem = (BYTE *)hMem;

</PRE><P><LI>Construct an instance of CSharedFile and attach it to the memory block,
   starting four bytes in. Because the CSharedFile class is not yet
   documented, include afxpriv.h:
<P>
   CSharedFile file;
   file.Attach(pMem + sizeof(DWORD), cbGuess - sizeof(DWORD));

<P><LI>Construct an instance of CArchive on the file:
<P>
   CArchive ar(&amp;file, CArchive::store);

<P><LI>Write the CObject-derived objects into the archive:
<P>
<PRE>   // store data in the archive
   // for example, if m_myObject is a CObject-derived object, then
   m_myObject.Serialize(ar);

</PRE><P><LI>Get the length of the file and write it into the first DWORD of the
   memory block:
<P>
   *(DWORD*)pbMem = file.GetLength();

<P><LI>Pass the memory block to PX_Blob:
<P>
   PX_Blob(pPX, _T("MyObjects"), hMem);
<P>
</OL>This code could be used for loading the objects back out of the blob. For
more information about how to use PX_Blob to serialize/de-serialize data,
Please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q137333.htm">Q137333</A></B>
   TITLE     : DOCERR: How to Use the PX_Blob Function

</PRE></OL>To get optimal performance in IPersistStreamInit, ensure that the OLE
control maintains a separate Serialize method that writes the CObjects
directly to its archive. Care should be taken to save all of the control's
persistent data in both Serialize and DoPropExchange.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An OLE control generated using ControlWizard can read and write its
persistent state using one of the following interfaces: IPersistMemory,
IPersistStorage, IPersistStreamInit, IPersistPropertyBag (not
implemented in versions before Visual C++ 4.x), and IDataObject through the
property sets implementation. Each of these interfaces with the exception
of IPersistPropertyBag and IDataObject call COleControl::Serialize passing
in a CArchive. This archive could be used to store CObject-derived objects
as part of the control's persistence.
<P>
Some OLE control containers (like Microsoft Visual Basic) use the "save as
text" mechanism in order to allow as much of the OLE control's state to be
represented in a human-readable format. For optimizing this mechanism, the
interfaces IPropertyBag and IPersistPropertyBag are used and therefore are
recommended for containers like Visual Basic. IPropertyBag is implemented
by the container and is roughly analogous to IStream. IPersistPropertyBag
is implemented by controls and is roughly analogous to
IPersistStream(Init).
<P>
Visual Basic uses the control's IPersistPropertyBag interface, if one is
implemented by the control, or it uses the property sets. Property sets are
communicated from and to the control through IDataObject::GetData and
IDataObject::SetData, implemented by the control. Note that OLE controls
generated using earlier versions of Visual C++ don't provide an
implementation for IPersistPropertyBag.
<P>
The implementation provided by the MFC framework for IPersistPropertyBag
and property sets directly call COleControl::DoPropExchange passing in an
instance of either CPropbagPropExchange or CPropsetPropExchange
respectively.
<P>
<P><h2>REFERENCES</h2>
 
<P>
OLE Controls Inside Out - by Adam Denning
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 2.20 3.00 3.10 3.20 4.00<BR>
KBCategory: kbprg kbole kbprb<BR>
KBSubcategory: MfcOLE CDKIss<BR>
Keywords          : CDKIss MfcOLE kbole kbprb kbprg<BR>
Technology        : kbMfc<BR>
Version           : 4.00 2.00 2.10 2.20<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

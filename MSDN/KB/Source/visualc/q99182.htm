

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Change an MFC-Based MDI Child Window's Frame Text </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99182 ">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1993/05/26">
<META NAME="Keywords" CONTENT="kbprg MfcUI kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A user may find it desirable to change the title of an MFC-based child window. To do this, PreCreateWindow() must be overridden for the child frame, and OnInitialUpdate() must be overridden for the view.  MORE INFORMATION  These are the steps neces...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIB,QBSO,QAUD,QADK,QAIA,QAH4,QAGI,QAMB,QBXS,QBFY,QA56,QA55,QABA,QABO,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Change an MFC-Based MDI Child Window's Frame Text</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99182 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1,
      4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A user may find it desirable to change the title of an MFC-based child
window. To do this, PreCreateWindow() must be overridden for the child
frame, and OnInitialUpdate() must be overridden for the view.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
These are the steps necessary to change the title of a multiple
document interface (MDI) child window frame. When doing this, follow
the rules of "The Windows Interface: An Application Design Guide" for
child frame titles, which states the following:
<P>
<PRE>   ...a document window title bar should contain a caption that
   displays the name of the document in the window.

</PRE>Add your customized information in addition to that.

<OL><P><LI>Create an MDI application from AppWizard.

<P><LI>Using ClassWizard, create a new class based on CMDIChildWnd. These
   steps assume the class is named CMyChildFrame.

<P><LI>Choose Project. Scan All Dependencies. This step is not necessary
   with Visual C++ versions 4.x or 5.0.

<P><LI>Choose the project's main .CPP file and replace the CMDIChildWnd
   class in the call to the AddDocTemplate() function to the new
   class you created.

<P><LI>Include the newly created .H file at the top of the project's main
   .CPP file.

<P><LI>Choose the .H file from the project list for the newly created
   class and add the following line to the protected implementation
   section:
<P>
<P><PRE>      virtual BOOL PreCreateWindow(CREATESTRUCT &amp;cs);
</PRE><P>
   Note: With Visual C++ versions 4.x or 5.0, you may use ClassWizard to
   do the above.

<P><LI>Choose the .CPP file from the project list for the newly created
   class and add the following to the end of the file
<P>
<P><PRE>      BOOL CMyChildFrame::PreCreateWindow(CREATESTRUCT &amp;cs)
      {
      // Do default processing.
<PRE></PRE>         if(CMDIChildWnd::PreCreateWindow(cs)==0) return FALSE;

         return TRUE;
      }

   where CMyChildFrame is the class name of your newly created class.
   This function calls the base class's version for the PreCreateWindow()
   function.

</PRE><P><LI>Add the following code line to the newly created PreCreateWindow()
   function immediately following the default call to
   CMDIChildWnd::PreCreateWindow():
<P>
<P><PRE>      cs.style&amp;=~(LONG)FWS_ADDTOTITLE;
</PRE>
<P><LI>Choose the .H file corresponding to your application's view window
   and add the following code to the public implementation section:
<P>
<P><PRE>      virtual void OnInitialUpdate();
</PRE><P>
   Note: With Visual C++ versions 4.x or 5.0, you may use ClassWizard to
   do the above.

<P><LI>Choose the .CPP file corresponding to your application's view
   window and add the following code to the end of the file
<P>
<P><PRE>      void CMyAppView::OnInitialUpdate()
      {
<PRE></PRE>         // Do default processing.
            CView::OnInitialUpdate();
      }

   where CMyAppView is the view class for the application.

</PRE><P><LI>Add your customization code. Remember to follow the rules of
   "The Windows Interface: An Application Design Guide" for child
   frame titles. Then add your customized information, in addition to
   that, immediately following the default call to
   CView::OnInitialUpdate(). An example of this is:
<P>
<P><PRE>      GetParent()-&gt;SetWindowText(GetDocument()-&gt;GetTitle()+
<PRE></PRE>         " - This is a test!");

</PRE><P><LI>Build the program.

<P><LI>Run it and you will see the change implemented. In this example,
   the first view will display "Myapp1 - this is a test!". Additional
   views will be identical except for the document name (Myapp1).
<P>
</OL>NOTE: It is necessary to override OnInitialUpdate instead of OnCreate
because the document has not been instantiated, and therefore calling
GetTitle() would return an empty string.
<P>
NOTE: It may also be necessary to override CDocument::CanCloseFrame() if
multiple views of the same document are open. This is because the
CMDIChildWnd member m_nWindow is not updated if FWS_ADDTOTITLE is not set
for the MDI Child frame. This prevents the "Save File" dialog from coming
up when any view other than the last view open for the document is closed.
<P>
This does NOT apply to Visual C++ for Windows, version 1.52, and Visual C++
32-bit Edition, versions 2.10 and above. The behavior of m_nWindows was
modified in these versions to handle this scenario properly.
<P>
The overridden function would look something like this:
<P>
<PRE>      BOOL CMyDoc::CanCloseFrame(CFrameWnd* pFrameArg)
      {
         ASSERT_VALID(pFrameArg);
         UINT iCount = 0;

         POSITION pos = GetFirstViewPosition();
         while (pos != NULL)
         {
            CView* pView = GetNextView(pos);
            ASSERT_VALID(pView);
            CFrameWnd* pFrame = pView-&gt;GetParentFrame();
            // assume frameless views are ok to close
            if (pFrame != NULL)
            {
               // assumes 1 document per frame
               ASSERT_VALID(pFrame);
               iCount++;
          }
      }
          if ( iCount &gt; 1 )
            return TRUE;

         // otherwise only one frame that we know about
         return SaveModified();
      }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg MfcUI kbfasttip<BR>
Technology          : kbMfc<BR>
Version             : 1.0 1.5 1.52 2.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

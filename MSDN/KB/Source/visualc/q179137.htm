

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Enable Default Processing in a Subclassed Button Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q179137">
<META NAME="KBModify" CONTENT="1998/01/27">
<META NAME="KBCreate" CONTENT="1998/01/09">
<META NAME="Keywords" CONTENT="MfcOLE kbfile kbsample">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article describes how to ensure default command processing when subclassing the standard Windows Button control to create an MFC ActiveX control. It also discusses how to determine when a control is the default command in both design- and run-...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QABA,QAPN,QAUD,QBV8,QAB9,QAHV,QAGI,QBSO,QAU3,QAMR,QA37 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Enable Default Processing in a Subclassed Button Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q179137</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to ensure default command processing when
subclassing the standard Windows Button control to create an MFC ActiveX
control. It also discusses how to determine when a control is the default
command in both design- and run-time modes so that the control is drawn
correctly. Finally, the article addresses how to ensure that the ENTER key
gets routed to the current default command.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/DefButn.exe">DefButn.exe</A> <I>(size: 36114 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>The following sections and the DefButn.exe sample code describe how to:

<UL><LI>Make a Subclassed Control That Supports Extended Properties
<LI>Set a Control to Be the Default Command at Run Time
<LI>Use the Caption Property to Display the Command Text
<LI>Draw Correctly Depending Upon Default Command Status
<LI>Ensure That the ENTER Key Gets Routed to the Current Default Command
<P>
</UL><h3>Make a Subclassed Control That Supports Extended Properties</h3>
 
<P>
To create a control that supports extended properties so that the container
can display its extended Default property in the Property Browser window
when the control is selected at design time, do the following:

<OL><P><LI>Use the MFC ActiveX ControlWizard in Microsoft Visual C++ to create a
   new project called DefBtn.

<P><LI>Accept all defaults in step 1.

<P><LI>In step 2, select the Button control in response to “Which window class,
   if any, should this control subclass?” and accept all other defaults.

<P><LI>Click Finish to create the control.

<P><LI>In DefBtnctl.cpp add the following miscellaneous status bit to the
   _dwDefBtnOleMisc bit mask:
<P>
<P><PRE>      OLEMISC_ACTSLIKEBUTTON
</PRE><P>
   This allows a container that supports extended properties, such as
   Visual Basic, to present the Default extended property in its Property
   Browser window during design time. When using the control in an
   application, a programmer can make your control the default command by
   setting this property to “True.” Note that in an environment that does
   not support extended properties, such as Visual C++, this flag has no
   effect.
<P>
</OL><h3>Set a Control to Be the Default Command at Run Time</h3>
 
<P>
To set the default command at run time in an MFC dialog-based container
application that does not support extended properties, add the following
call to the OnInitDialog processing:
<P>
<PRE>   CDialog::SetDefID

</PRE></OL>and pass in the control ID of DefBtn. This will override any other control
that was selected as the default command at design time. You do not need to
make any modifications to the control’s source code nor to its property
page.
<P>
<P><h3>Use the Caption Property to Display the Command Text</h3>
 
<P>
To display the command text both at run time and design time, do the
following:

<OL><P><LI>Expose the stock Caption property using ClassWizard. The subclassed
   control automatically draws this property at run time.

<P><LI>To display the text at design time you have to include drawing code in
   the CDefBtnCtrl::OnDraw member function to check whether the UserMode
   ambient property is set to “False” (indicating design mode).

<P><LI>Use the CDC::GetInternalText member function to get the current value of
   the Caption stock property and draw it using the CDC::DrawText member
   function.
<P>
</OL><h3>Draw Correctly Depending Upon Default Command Status</h3>
 
<P>
ActiveX controls implement functionality that the older, pre-Ole Windows
controls (such as the Button control) do not. Because the MFC method of
subclassing a control is a way to support older technology, there tend to
be inconsistencies in certain operations (especially drawing) between
subclassed controls and those developed without subclassing. For example,
the Button control does not draw its border in accordance with Windows 95
user interface guidelines for a default command.
<P>
You can add logic to a subclassed control so that its border is drawn to
reflect the default command status. Look at various CDC member functions
such as DrawEdge to do so. Note that the DefButn.exe sample does not
include
the code to do this.
<P>
The DefButn.exe sample does include the logic to detect any change in the
default command status when overriding the
CDefBtnCtrl::OnAmbientPropertyChange member function. To determine when a
control has been set as the default command on a form at design time, and
to draw correctly depending upon the default command status in both design-
and run-time modes, do the following:

<OL><P><LI>If the DISPID of the ambient property passed in is:
<P>
<P><PRE>      DISPID_AMBIENT_DISPLAYASDEFAULT
</PRE><P>
   then obtain the value it changed to by calling the GetAmbientProperty
   function.

<P><LI>Pass in this DISPID and the address of a BOOL class member variable
   called m_bDefault. If “True,” the control becomes the default button;
   “False” means it is no longer the default button.

<P><LI>Call the InvalidateControl function to redraw the control (use
   CDefBtnCtrl::OnDraw) with the shadow outline border that indicates that
   a command is the default. Use the value of m_bDefault to determine
   whether you should draw the outline (True) or remove it (False).
<P>
</OL>Note that the control draws correctly with respect to focus (user has
tabbed to it). There is no need to manually draw the interior dotted
rectangle.
<P>
<P><h3>Ensure That the ENTER Key Gets Routed to the Current Default Command</h3>
 
<P>
This section describes how to receive the WM_COMMAND message when the ENTER
key is pressed, and the default command is a subclassed control. In
Microsoft Visual C++ Books Online, "Programming with MFC: Encyclopedia,"
the article called "Keyboard Interface" contains the following paragraph:
<P>
<PRE>   The container traps the ENTER and ESC keys by including them in its
   accelerator table. When one of these keys is pressed, the container
   calls the standard method Click in the appropriate control's primary
   dispatch interface. The standard Click method is described in Control
   Methods.

</PRE></OL>If you want to do special processing within your control when the ENTER key
is pressed and your control is the default command, you must use the
ClassWizard to expose the DoClick custom method. You should send the Click
event back to the container when your control’s DoClick method has been
called. Use ClassWizard to expose the Click stock event and call the
FireClick() event from within the CDefBtnCtrl::DoClick() member function
to
do this.
<P>
If no special processing is needed and you just want to ensure that the
Click event gets fired back to the container, then expose the DoClick stock
method and the Click stock event. In MFC's default processing, FireClick
will be called for you.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 4.20<BR>
Keywords          : MfcOLE kbfile kbsample<BR>
Technology        : kbole kbmfc<BR>
Version           : WINNT:5.0<BR>
Platform          : winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

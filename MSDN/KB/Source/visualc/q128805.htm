

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Explicit Call to Virtual Destructor Corrupts Stack </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128805">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/04/10">
<META NAME="Keywords" CONTENT="CPPIss kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Making an explicit call to a destructor that has been declared virtual can corrupt the stack. This problem may show up as:   - Local variables change unexpectedly.     -or-   - Access violations occur on return from functions.  CAUSE =====  An expl...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAIF,QAEF,QBCT,QAGC,QAGB,QDKD,QANY,QAKM,QAR4,QAOT,QAGN,QAH4,QDH9,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Explicit Call to Virtual Destructor Corrupts Stack</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128805</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 2.00 2.10
WINDOWS NT
kbtool kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
   Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, and 2.1
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Making an explicit call to a destructor that has been declared virtual can
corrupt the stack. This problem may show up as:

<UL><LI>Local variables change unexpectedly.
<P>
   -or-

<LI>Access violations occur on return from functions.
<P>
</UL><h2>CAUSE</h2>
 
<P>
An explicit call to a virtual destructor generates a call to a helper
function called the scalar deleting destructor. In addition to calling the
destructor, the scalar deleting destructor also calls operator delete,
depending on the value of a flag that is pushed onto the stack before the
call.
<P>
Because the compiler is not correctly pushing the flags before calling the
scalar deleting destructor, four extra bytes are popped off the stack each
time an explicit call to a destructor is made. Also, if the last value
stored on the stack before the call happens to be 1, operator delete is
also called.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, use the scope resolution operator (::) to
specify which destructor should be called. This will avoid the call through
the virtual table, so that the destructor is called without calling the
scalar deleting destructor.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem was fixed in Microsoft
Visual C++, 32-bit Edition, version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following program demonstrates both the problem and the solution. When
compiled without the /D "GOOD_CODE" compiler option, the ptr-&gt;~MyClass()
call corrupts the stack, so the loop is only executed only six times, and
operator delete is accidentally called.
<P>
The following is the output when you compile the sample code without using
the /D "GOOD_CODE" compiler option:
<P>
~MyClass(2D0340)
i=0, after ptr-&gt;~MyClass()
~MyClass(2D134C)
i=1, after ptr-&gt;~MyClass()
~MyClass(2D1354)
i=2, after ptr-&gt;~MyClass()
~MyClass(2D135C)
i=3, after ptr-&gt;~MyClass()
~MyClass(2D1364)
MyClass::operator delete(2D1364)
i=4, after ptr-&gt;~MyClass()
~MyClass(2D136C)
MyClass::operator delete(2D136C)
i=5, after ptr-&gt;~MyClass()
out of the loop, i=4227241
<P>
To see the correct output, compile the code with the /D "GOOD_CODE"
compiler option.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

#include &lt;stdio.h&gt;

</PRE>class MyClass
{
public:
<PRE>   void operator delete(void *ptr)
   {
    printf("\nMyClass::operator delete(%lX)", (long)ptr);
   }
   virtual ~MyClass()
   {
    printf("\n~MyClass(%lX)", (long)this);
   }
</PRE>};
<P>
<PRE>void main(void)
</PRE>{
<PRE>   int i;
   MyClass *ptr;
   int j;

   for (i=0; i &lt; 100; i++)
   {
    ptr = new MyClass;
    j = 1;  // Used to put '1' onto the stack

    #ifndef GOOD_CODE
     // This call corrupts the stack, and "accidentally"
     // calls delete()
     ptr-&gt;~MyClass();
    #else
     // This call works fine
     ptr-&gt;MyClass::~MyClass();
    #endif

    printf("\ni=%d, after ptr-&gt;~MyClass()", i);
    fflush(stdout);
   }

   printf("\nout of the loop, i=%d", i);
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 2.10 8.0 8.00 9.0 9.00 9.1 9.10<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CPPIss<BR>
Keywords          : CPPIss kbbuglist kbfixlist kbtool<BR>
Version           : 1.00 2.00 2.10<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

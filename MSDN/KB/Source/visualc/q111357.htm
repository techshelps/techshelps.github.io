

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: C1017 Occurs with /Zg and #if </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q111357">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/02/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A C1017 error is incorrectly generated when using /Zg and the preprocessor directive #if on an integer constant. For example, using #if 0 or #if 3 causes the following error:     file.c(3) : fatal error C1017: invalid integer constant expression  N...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKJ,QBFY,QBSO,QAAP,QAKD,QADK,QAB4,QABH,QA4Q,QAO4,QAOT,QAH4,QAKP,QAEF,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: C1017 Occurs with /Zg and #if</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q111357</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A C1017 error is incorrectly generated when using /Zg and the preprocessor
directive #if on an integer constant. For example, using #if 0 or #if 3
causes the following error:
<P>
<PRE>   file.c(3) : fatal error C1017: invalid integer constant expression

</PRE>Note that the error also occurs when a symbol that evaluates to an integer
constant is referenced in a #if directive. For example:
<P>
<PRE>   #define ZERO 0
   #if ZERO

</PRE><h2>RESOLUTION</h2>
 
<P>
The following are two possible workarounds:

<UL><LI>This error occurs only if the /Zg compiler switch is used. If it's not
   necessary, do not use /Zg with the file.
<P>
   -or-

<LI>If the expression being evaluated is 0 (zero), then it will never
   evaluate to true. If the expression is nonzero, then it will always
   evaluate to true. It should be possible to use #ifdef instead of #if
   (see MORE INFORMATION below).
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The most common reason for using an expression that always evaluates to an
integer constant is to enable conditional compilation, which is dependent
on a particular symbol being used. For example, the following code prints
out information only when the MYDEBUG_BUILD_OPTION symbol is defined to be
equal to 1:
<P>
<PRE>   #include &lt;stdio.h&gt;

   #define MYDEBUG_BUILD_OPTION 1
   // Use #define MYDEBUG_BUILD_OPTION 0 to do a non-debug build.

   void main(void)
   {
   #if MYDEBUG_BUILD_OPTION
     printf("We are debugging\n");
   #endif
     printf("Hello world\n");
   }

</PRE>By following the second workaround (listed above), this code could be
rewritten to use #ifdef:
<P>
<PRE>   #include &lt;stdio.h&gt;

   #define MYDEBUG_BUILD_OPTION

   // Remove the above line to do a non-debug build, or
   // eliminate the define and use the /D compiler option
   // to define MYDEBUG_BUILD_OPTION for debug builds.

   void main(void)
   {
   #ifdef MYDEBUG_BUILD_OPTION
     printf("We are debugging\n");
   #endif
     printf("Hello world\n");
   }

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft C/C++
compiler versions 8.0 and 8.0c for MS-DOS. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 8.00 8.00c<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Single/Multiple Instances of an OLE Object in MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141154">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1995/12/12">
<META NAME="Keywords" CONTENT="MfcOLE kbole">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article explains how class factories are registered in an OLE local server created using MFC. This topic is discussed with respect to whether a single instance of an application can service multiple clients or whether a separate instance will ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAW6,QAPN,QABO,QA9Q,QARL,QAF3,QAJQ,QAJH,QBBI,QAH6,QAH4,QAHT,QAHE,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Single/Multiple Instances of an OLE Object in MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141154</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 2.00 2.10 2.20 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbole
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how class factories are registered in an OLE local
server created using MFC. This topic is discussed with respect to whether a
single instance of an application can service multiple clients or whether a
separate instance will be launched for each request made by a client.
<P>
The class factory specifically attached to the document template behaves
differently based on whether it's a default SDI (single document interface)
or an MDI (multiple document interface) application. Other generic class
factories behave according to how they are registered with OLE.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
MFC provides an interface implementation for the class factory
(IClassFactory) in a class called COleObjectFactory, which serves as a
generic type of factory. In addition, MFC also provides a specific class
factory called COleTemplateServer, derived from COleObjectFactory, to
create documents using the framework's document/view architecture.
<P>
In the case of a local server, the class factories have to be registered
with OLE so that other applications can connect to them. In MFC, all the
class factories of a server are typically registered in
CWinApp::InitInstance by calling the static function
COleObjectFactory::RegisterAll(). This function calls
COleObjectFactory::Register() for each of the class factories, which in
turn calls CoRegisterClassObject in the case of a local server. In the case
of an inproc server, there is no need to register the class factories with
OLE because COM loads the DLL (that is, the server) and invokes a well-
known entry-point, called DllGetClassObject, to retrieve an IClassFactory
interface.
<P>
When a client requests that a server create an instance of an object, the
decision to use a running instance of the server, if one is available, or
to launch another instance of the server is made by OLE depending on how
the class factory for the object is registered. The determining factor is
the fourth parameter to CoRegisterClassObject, which specifies how many
objects can be created using this class factory. If REGCLS_SINGLEUSE is
specified, OLE will launch another instance of the application each time a
client requests an instance of an object class. If REGCLS_MULTIPLEUSE is
specified, one instance of the application can service any number of
objects.
<P>
MDI applications use the same main frame window (that is, the same instance
of the application) and create a new MDI child window for each request made
by a client to create an object instance. When a client calls
CoCreateInstance to create a document window object exposed by
COleTemplateServer, a new MDI child window is created using the same MDI
frame window. MFC implements this concept by passing in FALSE as the
m_bMultiInstance parameter to the ConnectTemplate function of
COleTemplateServer. This registers the class factory as single instance by
passing REGCLS_MULTIPLEUSE to CoRegisterClassObject.
<P>
SDI applications, on the other hand, can manage only one document window at
a time. Hence, SDI applications are by default single use only; that is, a
separate instance (or a document window) is created for each call to
CoCreateInstance made by a client. This is implemented in an MFC
application by passing in TRUE as the m_bMultiInstance parameter to
COleTemplateServer::ConnectTemplate, which registers the class factory as
multiple instance by passing REGCLS_SINGLEUSE to CoRegisterClassObject.
<P>
Generic class factories that are used to create any C++ object are
registered as single- or multiple-use based on how the constructor for
COleObjectFactory is invoked. The constructor takes a bMultiInstance
parameter that specifies whether the class factory is registered as
REGCLS_SINGLEUSE (bMultiInstance == TRUE) or REGCLS_MULTIPLEUSE
(bMultiInstance == FALSE).
<P>
When ClassWizard is used to add OLE-creatable classes to an MFC
application, it adds the DECLARE_OLECREATE and IMPLEMENT_OLECREATE macros.
DECLARE_OLECREATE declares a static object of type COleObjectFactory, and
IMPLEMENT_OLECREATE creates this object by invoking the constructor of
COleObjectFactory with the bMultiInstance parameter set to FALSE. In other
words, ClassWizard registers the generic class factory as
REGCLS_MULTIPLEUSE. Hence by default, a single instance of an OLE-creatable
class generated by ClassWizard can serve multiple requests to create an
instance of this object class.
<P>
This behavior can be altered by replacing IMPLEMENT_OLECREATE with a custom
macro, say MY_IMPLEMENT_OLECREATE, which invokes the COleObjectFactory
constructor with the bMultiInstance parameter set to TRUE, which will then
register a REGCLS_SINGLEUSE class factory. For example:
<P>
<PRE>#define MY_IMPLEMENT_OLECREATE(class_name, external_name, l, w1, w2,
        b1, b2, b3, b4, b5, b6, b7, b8) \
        COleObjectFactory class_name::factory(class_name::guid, \
        RUNTIME_CLASS(class_name), TRUE, _T(external_name)); \
        const GUID CDECL class_name::guid = \
        { l, w1, w2, { b1, b2, b3, b4, b5, b6, b7, b8 } }; \

</PRE>MY_IMPLEMENT_OLECREATE(CMyClass, "Test", 0xc9c99ae0, 0xad41, 0x101b,
<PRE>                       0x83, 0xea, 0x0, 0x0, 0x83, 0x78, 0xac, 0x8b)

</PRE>The CLSID used in this macro call should be replaced with the actual CLSID
assigned for this particular object, which can be found in the original
IMPLEMENT_OLECREATE macro.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Inside OLE 2.0, Second Edition.
<P>
Visual C++ Books Online and the MFC source code for the functions mentioned
in the article.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 2.00 2.10 2.51 2.52 3.00 3.10<BR>
3.20 4.00<BR>
KBCategory: kbole<BR>
KBSubcategory: MfcOLE<BR>
Keywords          : MfcOLE kbole<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 2.00 2.10<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: AfxIsValidString() Returns TRUE for NULL Near Pointers </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113535">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/04/06">
<META NAME="Keywords" CONTENT="kb16bitonly MfcMisc kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Calling AfxIsValidString() with a near NULL pointer results in a TRUE return value. The return value should be FALSE because a NULL pointer is invalid.  For example, consider the following code:     char NEAR * npszEmpty = NULL;    ASSERT(AfxIsVali...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAKD,QAO3,QAO2,QAR4,QAI4,QAC1,QDL9,QBWQ,QBWO,QBWN,QBFY,QA56,QA55,QAH6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: AfxIsValidString() Returns TRUE for NULL Near Pointers</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113535</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbprg kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft Visual C++ for Windows, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Calling AfxIsValidString() with a near NULL pointer results in a TRUE
return value. The return value should be FALSE because a NULL pointer is
invalid.
<P>
For example, consider the following code:
<P>
<PRE>   char NEAR * npszEmpty = NULL;
   ASSERT(AfxIsValidString(npszEmpty));

</PRE>This should cause the assertion to fail but doesn't.
<P>
<P><h2>CAUSE</h2>
 
<P>
AfxIsValidString() takes an LPCSTR, which is defined in WINDOWS.H as:
<P>
<PRE>   typedef const char FAR* LPCSTR; // far pointer to a read-only string

</PRE>Therefore, the "char NEAR *" parameter is first converted to a LPCSTR or
FAR pointer, which changes it from an offset-only value of 0x0000 to a
selector:offset value of DS:0x0000. This value will not evaluate to NULL
because the data segment register will most likely contain a nonzero value.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, do one of the following:

<UL><LI>Upgrade to Visual C++ version 1.5. The Microsoft Foundation Classes
   (MFC) version 2.5 supplied with Visual C++ version 1.5 for Windows
   provides two versions of AfxIsValidString(). The first is the original
   function that takes an LPCSTR. The second version takes a "const char
   *". The pointer in the "const char *" version is compared first with
   NULL, then passed to the LPCSTR version.

<LI>Manually compare the string to NULL along with calling
   AfxIsValidString(). This is the technique used by MFC version 2.5. For
   example:
<P>
<P><PRE>      char NEAR * npszEmpty = NULL;
      ASSERT(npszEmpty != NULL &amp;&amp; AfxIsValidString(npszEmpty));
</PRE><P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft Foundation
Classes version 2.0. This problem was corrected in the Microsoft Foundation
Classes version 2.5.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 2.00 return valid pointer<BR>
KBCategory: kbprg kbfixlist kbbuglist<BR>
KBSubcategory: MfcMisc<BR>
Keywords          : kb16bitonly MfcMisc kbbuglist kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: CreateRelation Method Fails with Non-UNICODE Build </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138767">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/10/26">
<META NAME="Keywords" CONTENT="MfcDAO vcbuglist400 vcfixlist410 kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The CDaoDatabase::CreateRelation() method may fail if an application is built as a non-UNICODE application. It is possible that a messagebox will appear that states:     Invalid field name '           ' in definition of index or relationship  CAUSE...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAY5,QAR4,QAPN,QAA5,QA7O,QA7N,QAM1,QABO,QBV8,QAB9,QAI4,QABG,QAY2,QAUJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: CreateRelation Method Fails with Non-UNICODE Build</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138767</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The CDaoDatabase::CreateRelation() method may fail if an application is
built as a non-UNICODE application. It is possible that a messagebox will
appear that states:
<P>
<PRE>   Invalid field name '&lt;some text&gt;' in definition of index or relationship

</PRE><h2>CAUSE</h2>
 
<P>
A bug exists in the CDaoDatabase::CreateRelation() function. In
\Msdev\Mfc\Src\Daocore.cpp, you can see the following code in the
CreateRelation() function:
<P>
<PRE>   COleVariant var;
   var = relinfo.m_pFieldInfos[nIndex].m_strForeignName;
   DAO_CHECK(pDAOField-&gt;put_ForeignName(V_BSTR(&amp;var)));

</PRE>This code is incorrect. Here is the correct code:
<P>
<PRE>   COleVariant var(relinfo.m_pFieldInfos[nIndex].m_strForeignName,
                  VT_BSTRT);
   DAO_CHECK(pDAOField-&gt;put_ForeignName(V_BSTR(&amp;var)));

</PRE>The fixed code ensures that the BSTR for the variant will be in
ANSI format for non-UNICODE versions of an application and will be
in UNICODE format for UNICODE versions of an application.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Perform the following steps:

<OL><P><LI>Derive a new class from CDaoDatabase.

<P><LI>Add the function prototypes for the two CreateRelation() functions to
   your new class declaration.

<P><LI>Copy the two CreateRelation() functions from Daocore.cpp to the
   CreateRelation() functions of your new CDaoDatabase-derived class.

<P><LI>Change the following code in your new
   CreateRelation(CDaoRelationInfo&amp; relinfo) method from:
<P>
<P><PRE>      COleVariant var;
      var = relinfo.m_pFieldInfos[nIndex].m_strForeignName;
      DAO_CHECK(pDAOField-&gt;put_ForeignName(V_BSTR(&amp;var)));
</PRE><P>
   to:
<P>
<P><PRE>      COleVariant var(relinfo.m_pFieldInfos[nIndex].m_strForeignName,
<PRE></PRE>                      VT_BSTRT);
      DAO_CHECK(pDAOField-&gt;put_ForeignName(V_BSTR(&amp;var)));

</PRE><P><LI>Declare a local VARIANT and initialize it in the overridden function as
   follows:
<P>
   VARIANT var;
   var.vt  = VT_ERROR;
   var.scode = DISP_E_PARAMNOTFOUND;
<P>
   This is necessary because the _afxOptionalVariant used in the original
   CreateRelation() function is defined in DAOCORE.CPP,

<P><LI>Replace instances of the _afxOptionalVariant variable with var.
<P>
</OL>Instead of using the CDaoDatabase class, you will use your new CDaoDatabase-
derived class. The sample code in this article demonstrates what the new
code might look like.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Visual C++ 4.1.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Sample Code to Demonstrate Fixed Code
 
<P>
This demonstrates how you will use your new CDaoDatabase-derived
class; in this case called CMyDatabase.
<P>
<PRE>   CMyDatabase db;
   db.Open("f:\\test\\relation\\relate.mdb");
   db.CreateRelation(_T("foo"), _T("Table1"), _T("Table2"),
            dbRelationUnique|dbRelationUpdateCascade,_T("field1"),
            _T("field1"));
   db.Close();


</PRE></OL>Here is the declaration of the new class:
<P>
<PRE>   class CMyDatabase:public CDaoDatabase
   {
   public:
     void CreateRelation(LPCTSTR lpszName, LPCTSTR lpszTable,
                   LPCTSTR lpszForeignTable, long lAttributes,
                   LPCTSTR lpszField,
                   LPCTSTR lpszForeignField);
     void CreateRelation(CDaoRelationInfo&amp; relinfo);
   };

</PRE>Here is the implementation of the new class:
<P>
<PRE>   void CMyDatabase::CreateRelation(LPCTSTR lpszName, LPCTSTR lpszTable,
        LPCTSTR lpszForeignTable, long lAttributes, LPCTSTR lpszField,
        LPCTSTR lpszForeignField)
   {
     ASSERT_VALID(this);

     CDaoRelationInfo relinfo;
     CDaoRelationFieldInfo fieldinfo;

     relinfo.m_strName = lpszName;
     relinfo.m_strTable = lpszTable;
     relinfo.m_strForeignTable = lpszForeignTable;
     relinfo.m_lAttributes = lAttributes;
     relinfo.m_nFields = 1;

     relinfo.m_pFieldInfos = &amp;fieldinfo;
     relinfo.m_pFieldInfos-&gt;m_strName = lpszField;
     relinfo.m_pFieldInfos-&gt;m_strForeignName = lpszForeignField;

     CreateRelation(relinfo);
   }

   void CMyDatabase::CreateRelation(CDaoRelationInfo&amp; relinfo)
   {
     ASSERT_VALID(this);
     ASSERT(IsOpen());
     ASSERT(relinfo.m_nFields &gt; 0);


     VARIANT var;
     var.vt    = VT_ERROR;
     var.scode = DISP_E_PARAMNOTFOUND;

     // Initialize relations collection so that relation can be
     // appended later
     if (m_pDAORelations == NULL)
         InitRelationsCollection();

     DAORelation* pDAORelation = NULL;
     DAOFields* pDAOFields = NULL;
     DAOField* pDAOField = NULL;

     // Create the relation
     DAO_CHECK(m_pDAODatabase-&gt;CreateRelation(
               COleVariant(relinfo.m_strName, VT_BSTRT),
               COleVariant(relinfo.m_strTable, VT_BSTRT),
               COleVariant(relinfo.m_strForeignTable, VT_BSTRT),
               COleVariant(relinfo.m_lAttributes), &amp;pDAORelation));

     TRY
     {
        // Get the fields collection for later append of created field
        DAO_CHECK(pDAORelation-&gt;get_Fields(&amp;pDAOFields));

        // Create field(s) and set the name and foreign name
        for (int nIndex = 0; nIndex &lt; relinfo.m_nFields; nIndex++)
        {
            // note that we are using 'var' in the following function
            // instead of _afxOptionalVar declared in DAOCORE.CPP
            DAO_CHECK(pDAORelation-&gt;CreateField(
                    COleVariant(relinfo.m_pFieldInfos[nIndex].m_strName,
                                VT_BSTRT), var, var, &amp;pDAOField));

           COleVariant var(relinfo.m_pFieldInfos[nIndex].m_strForeignName,
                           VT_BSTRT);
           DAO_CHECK(pDAOField-&gt;put_ForeignName(V_BSTR(&amp;var)));

           // Append the field to relation fields collection and
           // release
           DAO_CHECK(pDAOFields-&gt;Append(pDAOField));
                     pDAOField-&gt;Release();
        }

        DAO_CHECK(m_pDAORelations-&gt;Append(pDAORelation));
     }
     CATCH_ALL(e)
     {
          // Clean up before throw
     if (pDAOField != NULL)
              pDAOField-&gt;Release();

          if (pDAOFields != NULL)
             pDAOFields-&gt;Release();

          pDAORelation-&gt;Release();
          THROW_LAST();
    }
    END_CATCH_ALL

    // Clean up
    if (pDAOField != NULL)
       pDAOField-&gt;Release();

    pDAOFields-&gt;Release();
    pDAORelation-&gt;Release();
   }

</PRE> 
<PRE>Keywords          : MfcDAO vcbuglist400 vcfixlist410 kbcode kbprg
Technology        : kbMfc
Version           : 4.0
Platform          : NT WINDOWS
Issue type        : kbbug
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

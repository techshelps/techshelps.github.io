

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: "ASSERTION FAILED" with Excel 5.0 Automation Classes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114372">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/05/02">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When calling methods of Automation objects for Microsoft Excel 5.0, you may receive the following message:     ASSERTION FAILED oledisp2.cpp, line 352!  CAUSE =====  ClassWizard creates the COleDispatchDriver-derived classes for use with Excel 5.0 ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBVP,QAG1,QAH4,QAY5,QAL3,QAGI,QAP2,QALW,QABH,QAJQ,QBBI,QA2K,QAPN,QABI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: "ASSERTION FAILED" with Excel 5.0 Automation Classes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114372</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50
WINDOWS
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++ for Windows, version 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When calling methods of Automation objects for Microsoft Excel 5.0,
you may receive the following message:
<P>
<PRE>   ASSERTION FAILED oledisp2.cpp, line 352!

</PRE><h2>CAUSE</h2>
 
<P>
ClassWizard creates the COleDispatchDriver-derived classes for use with
Excel 5.0 by reading the Excel type library, XLEN50.OLB. The information in
that type library states that some parameters passed to, and return values
received from IDispatch::Invoke are of type VARIANT. These VARIANTs are
unions of several data types with a VARTYPE member specifying the actual
contained data. MFC 2.5 source file OLEDISP2.CPP contains the following
code at line 352:
<P>
<PRE>   ASSERT(vtRet == vaResult.vt);

</PRE>This assertion checks the VARTYPE member to determine what is actually
contained in the VARIANT. The type library information is saying that this
should be VT_VARIANT, while the actual returned value is different.
<P>
Refer to the header file VARIANT.H in your include directory for the
possible data types and their VARTYPE specifiers.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The intent of this ASSERT is to ensure strong type checking of arguments
used in IDispatch::Invoke calls to the Automation server. There are several
solutions:

<UL><LI>The function of the class generated by ClassWizard may be edited to
   return the actual type specified by the VARTYPE member of the VARIANT
   after the call to IDispatch::Invoke. This requires stepping through the
   code up to the point after the call to Invoke and examining the VARTYPE
   vt member of the returned VARIANT. Match this against the possible
   values in VARIANT.H and then alter the member function of the class to
   use and return this type.

<LI>Another solution is to directly edit the MFC source code. Move the
   ASSERT on line 352 to line 351 in OLEDISP2.CPP, inside the closing brace
   of the if(vtRet!=VT_VARIANT) block.
<P>
<P>
</UL>Before these changes were done, ignoring the assertion would cause the
entire VARIANT to be returned. With the first change listed above, the
assertion goes away and only the correct member of the VARIANT specified by
VARESULT.VT is returned. The code for each member function must be edited
to reflect this. With the second change listed above, the assertion goes
away and the entire VARIANT struct is returned. After this change occurs, a
similar assertion may be placed in the function for strong type checking.
<P>
In Visual C++ for Windows versions 1.51 and later and Visual C++ 32-bit
edition, MFC has been modified as described in the second solution above.
If you wish to perform strong type checking on VARIANT arguments to an
automation method, place an assertion in your COleDispatchDriver derived
class member function.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// Machine generated IDispatch driver class(es) created with
// ClassWizard.

// This is the function generated by ClassWizard
</PRE>VARIANT Worksheet::Application()
{
<PRE>     VARIANT result;
     InvokeHelper(0x94,DISPATCH_METHOD,VT_VARIANT,(void*)&amp;result,NULL);
     return result;
</PRE>}
<P>
<PRE>// This is the same function with change #1
</PRE>LPDISPATCH Worksheet::Application()
{
<PRE>     LPDISPATCH lpDispatch;
     InvokeHelper(0x94, DISPATCH_METHOD, VT_DISPATCH,
                 (void*)&amp;lpDispatch, NULL);
     return lpDispatch;
</PRE>}
<P>
<PRE>// This is the same function with change #2
</PRE>VARIANT Worksheet::Application()
{
<PRE>     VARIANT result;
     InvokeHelper(0x94,DISPATCH_METHOD,VT_VARIANT,(void*)&amp;result,NULL);
     ASSERT(result.vt == VT_DISPATCH);

     return result.;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.50 2.50 automation displatch ole oledisp2<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcOLE<BR>
Keywords            : kb16bitonly<BR>
Technology          : kbMfc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

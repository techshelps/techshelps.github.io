

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: #pragma code_seg() Affects Compiler Generated Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q122848">
<META NAME="KBModify" CONTENT="1997/07/25">
<META NAME="KBCreate" CONTENT="1994/11/14">
<META NAME="Keywords" CONTENT="CPPIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you use #pragma code_seg() in your C++ code, compiler-generated functions are placed in the last code segment or section that is specified with #pragma code_seg() instead of being placed in the default code segment or section.  RESOLUTION  If ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QABA,QAY5,QA2O,QAOT,QBV8,QACI,QBFY,QAL3,QABG,QAML,QAB9,QAJP,QABO,QBBI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: #pragma code_seg() Affects Compiler Generated Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 25, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q122848</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you use #pragma code_seg() in your C++ code, compiler-generated
functions are placed in the last code segment or section that is specified
with #pragma code_seg() instead of being placed in the default code segment
or section.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
If you want compiler generated functions to be placed in the default code
segment, include an additional #pragma code_seg() that sets the code
segment back to the default:
<P>
<PRE>   #pragma code_seg()

</PRE><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample can be used to demonstrate this behavior. Compile the
file with /DMY_SECTION, and the compiler-generated code is placed in the
MY_SECTION section. To place the compiler-generated functions in the
default code section, compile without MY_SECTION defined.
<P>
You can determine into which section the code is placed by looking at the
.COD listing file, generated by using the /Fc compiler option, or the
linker mapfile, generated by using the /MAP:filename link option.
<P>
<P><h3>Sample Code to Demonstrate Behavior</h3>
 
<P>
<PRE>   /* Compile options needed: /Fc /DMY_SECTION
   */
   class base
   {
       int i;
   };

   class Simple: virtual base    // Classes with virtual base classes are
   {                             // non-trivial, and require constructors
   };

   #pragma code_seg("MY_SECTION")

   void main()
   {
       Simple Simple_Class;
   }

   #ifndef MY_SECTION           // Define MY_SECTION to cause compiler
   #pragma code_seg()           // generated code to be placed in the
   #endif                       // MY_SECTION section.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 9.00 pragma<BR>
Keywords          : CPPIss<BR>
Version           : 1.0 2.0 2.1 4.0 5.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 25, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Call to Member Function with Virtual Base Fails </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115849">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/06/06">
<META NAME="Keywords" CONTENT="CPPIss kb16bitonly kbbuglist kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The use of the /Ob2, /Oe, and /Og optimization switches may cause calls to a member function of a class with a virtual base class to return incorrect values.  RESOLUTION  There are several workarounds to this problem:  1. Use the /Ob1 optimization ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA4Q,QAUD,QBFY,QA2O,QABA,QAGI,QAR4,QAKP,QBXT,QA5V,QAKR,QAIB,QAHE,QBV8,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Call to Member Function with Virtual Base Fails</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115849</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
<P><PRE>    - Microsoft Visual C++ for Windows, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The use of the /Ob2, /Oe, and /Og optimization switches may cause calls
to a member function of a class with a virtual base class to return
incorrect values.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are several workarounds to this problem:

<OL><P><LI>Use the /Ob1 optimization instead of /Ob2
<P>
   -or-

<P><LI>Use the fast compiler option /f.
<P>
   -or-

<P><LI>Disable optimization by either removing the /Oe and /Og switches.
<P>
   -or-

<P><LI>Disable optimization locally using the optimize pragma:
<P>
<P><PRE>      #pragma optimize("",off)
</PRE><P>
<P><PRE>      void classname::classfunction()
      {
      }
</PRE><P>
<P><PRE>      #pragma optimize("",on)
</PRE><P>
</OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed above. This is not a problem in Visual C++, 32-bit Edition. This
problem was corrected in Visual C++ version 1.5.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below can be used to illustrate this problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Ob2 /AC (or /AL or /AH)
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

</PRE></OL>class A
{
<PRE> public:
   int a;
   int b;
   int z;
   int funcA(int);
</PRE>};
<P>
<PRE>int A::funcA(int i)
</PRE>{
<PRE>   return a + b + i;
</PRE>}
<P>
class B : virtual public A
{
<PRE> public:
   int c;
   int d;
   int z;
   int funcA(int);
   int funcB(int);
</PRE>};
<P>
<PRE>int B::funcA(int i)
</PRE>{
<PRE>   return a + c + i;
</PRE>}
<P>
<PRE>int B::funcB(int i)
</PRE>{
<PRE>   return c + d + i;
</PRE>}
<P>
<PRE>void main(void)
</PRE>{
<PRE>   A a; a.a = 1; a.b = 2;
   B b; b.a = 1; b.b = 2; b.c = 3; b.d = 4;

   if (a.funcA(1) != 4) printf("FAILED on line %d\n", __LINE__);

   \\ Error occurs on this line
   if (b.funcA(1) != 5) printf("FAILED on line %d\n", __LINE__);

   if (b.funcB(1) != 8) printf("FAILED on line %d\n", __LINE__);

   return 0;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 8.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubcategory: CPPIss<BR>
Keywords          : CPPIss kb16bitonly kbbuglist kbfixlist kbtool<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

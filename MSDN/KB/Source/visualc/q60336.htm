

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: fscanf() Fails to Read Consecutive Lines </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q60336 ">
<META NAME="KBModify" CONTENT="1997/08/18">
<META NAME="KBCreate" CONTENT="1990/04/04">
<META NAME="Keywords" CONTENT="CRTIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When a file is open in text mode, an attempt to read lines of text with the fscanf() function may fail and only one line of text is read from the file.  CAUSE =====  The delimeter is set to  [^\n] . The fscanf() function reads up to but does not in...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIB,QBXT,QA5V,QAGI,QBFY,QAH4,QBFN,QAIF,QACR,QAY5,QAY2,QAO3,QAO2,QAEF,QACI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: fscanf() Fails to Read Consecutive Lines</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q60336 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 4.1,
<P><PRE>     4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a file is open in text mode, an attempt to read lines of text
with the fscanf() function may fail and only one line of text is read
from the file.
<P>
<P><h2>CAUSE</h2>
 
<P>
The delimeter is set to "[^\n]". The fscanf() function reads up to but does
not include the delimiting character. Therefore, the file stream stops at
the first '\n' in the file. Subsequent fscanf() calls fail because the file
pointer remains at the delimiting character and fscanf() cannot advance the
function pointer past it.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use one of the following two methods to move the file pointer past the
delimiting character:

<UL><LI>Update the code to use the following fscanf() call:
<P>
<P><PRE>      fscanf(stream, "%[^\n]%*c", line)
</PRE><P>
   The "%*c" format specifier reads one character from the input  stream
   but does not assign it to any of the parameters in the  fscanf function
   call.

<LI>Call fgetc() after the fscanf() call to move the file pointer
   beyond the '\n' character.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The following code demonstrates this problem. It should read and print
lines from a text file until it reaches EOF. However, it reads only the
first line from the file. Since the end of file character has not been
found, the example shown below will run in an infinite loop if the file
stream contains a "\n" character.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   FILE *stream;
   char line[80];

   while ((fscanf(stream, "%[^\n]", line)) != EOF )
   {
      printf("Line = %s \n",line);
   }

</PRE>The following code demonstrates the second method above to work around
this problem:
<P>
<PRE>   FILE *stream;
   char line[80];

   while ((fscanf(stream, "%[^\n]", line)) != EOF)
   {
      fgetc(stream);    // Reads in '\n' character and moves file
                        // stream past delimiting character
      printf("Line = %s \n", line);
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.0 9.0 10.0 11.0<BR>
Keywords          : CRTIss kbfasttip<BR>
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0;WINDOWS:1.0,1.5;WINDOWS  NT:1.0,2.0,2.1,4.0,4.1,4.2,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbprb<BR>
Solution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

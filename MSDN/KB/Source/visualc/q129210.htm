

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Linker Errors on Array of Constant Pointers to Constants </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129210">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/04/20">
<META NAME="Keywords" CONTENT="CodeGen CPPIss kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Building a project that includes the code listed in the  Sample Code  section of this article results in the following link error or warning:  For Visual C++ for Windows:      MODULE2.OBJ(module2.cpp) : error L2025: char const __near*          __ne...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAVX,QAVW,QAH4,QAAP,QBFY,QAKJ,QA56,QA55,QAR4,QAKP,QAW6,QAPN,QAK6,QDKW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Linker Errors on Array of Constant Pointers to Constants</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129210</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbbuglist kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
<LI>Microsoft Visual C++, 32-bit Edition, version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Building a project that includes the code listed in the "Sample Code"
section of this article results in the following link error or warning:
<P>
For Visual C++ for Windows:
<P>
<PRE>    MODULE2.OBJ(module2.cpp) : error L2025: char const __near*
         __near* __near str : symbol defined more than once
    LINK returned error code 2.

</PRE>For Visual C++, 32-bit Edition:
<P>
<PRE>    module2.obj: warning LNK4006: xxxxx already defined in
         module1.obj; second definition ignored.

</PRE>Here xxxxx is the decorated name for str.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around the problem, explicitly declare the const as static, as in
this example:
<P>
<PRE>   static const char *const str[2] = { "string1", "string2" };

</PRE>This definition can be placed in a header file, and can be included in
multiple source files. However, there are implications for the size of the
program when you use this workaround. That is, a copy of the array and of
the strings will be in every module that includes the header file, whether
you use it or not. The sample code below shares this problem.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Visual C++, 32-
bit Edition, version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In C++, const objects do not have external linkage, unless they are
explicitly declared extern. Const objects have internal linkage, meaning
that the name of the object is local to the source file in which it is
declared.
<P>
The following sample code has two source files and one header file. The
array of const pointers to const chars is included twice in the program.
However, because this is C++, const objects should have internal linkage,
the arrays should only be visible in the source file they are declared in.
This means that the linker should not fail with an L2025 error, or report
the LNK4006 warning.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// Compile options needed: None

// Test.h

</PRE>const char *const str[] = { "string1" , "string2" };  // error
<P>
<PRE>// Module1.cpp

#include "test.h"           // included test.h once in project.
#include &lt;iostream.h&gt;

void function1()
</PRE>{
<PRE>   cout &lt;&lt; "In Function1" &lt;&lt; endl;
</PRE>}
<P>
<PRE>// Module2.cpp

#include "test.h"          // included test.h twice in project
#include &lt;iostream.h&gt;

</PRE>extern void function1();
<P>
<PRE>void function2()
</PRE>{
<PRE>  cout &lt;&lt; "In Function2" &lt;&lt; endl;
</PRE>}
<P>
<PRE>void main()
</PRE>{
<PRE>  function1();
  function2();

  return;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 1.51 1.52 8.00 8.00c<BR>
KBCategory: kbprg kbbuglist kbfixlist<BR>
KBSubcategory: CPPIss CodeGen<BR>
Keywords          : CodeGen CPPIss kbbuglist kbfixlist kbprg<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

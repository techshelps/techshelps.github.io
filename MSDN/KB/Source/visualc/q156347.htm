

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the generate_n Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156347">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/09/23">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the generate_n, begin, end, and size STL functions in Visual C++.  MORE INFORMATION  Required Header                  Prototype ---------     template                                                    i...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKC,QBC6,QAG8,QAUD,QA4Q,QAIJ,QBFY,QDIV,QAY5,QBBI,QAWN,QAA7,QBV8,QAPF,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the generate_n Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156347</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the generate_n, begin, end,
and size STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;algorithm&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class OutputIterator, class Size, class Generator&gt; inline
         void generate_n(OutputIterator first, Size n, Generator gen)

</PRE>NOTE: The class/parameter names in the prototype do not match the version
<PRE>      in the header file. Some have been modified to improve readability.

</PRE><h3>Description</h3>
 
<P>
The generate_n algorithm traverses the range [first, first + n) assigning
to each element the value returned by gen. Note that generate modifies the
elements in the specified range.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// generate_n.cpp : Illustrates how to use the generate_n function.
//
// Functions:
//
//   generate_n  - Fill a specified number of elements of a sequence
//                 using a generator function.
//
//   begin       - Returns an iterator that points to the first element
//                 in a sequence.
//
//   end         - Returns an iterator that points one past the end of
//                 a sequence.
//
//   size        - Returns the length of a sequence.
//
// Written by Kalindi Sanghrajka
// of Microsoft Product Support Services,
// Software Core Developer Support.
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
</PRE>#pragma warning(disable: 4786)
<P>
<PRE>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

// return the next Fibonacci number in the
// Fibonacci series.
int Fibonacci(void)
</PRE>{
<PRE>    static int r;
    static int f1 = 0;
    static int f2 = 1;
    r = f1 + f2 ;
    f1 = f2 ;
    f2 = r ;
    return f1 ;
</PRE>}
<P>
<PRE>void main()
</PRE>{
<PRE>    const int VECTOR_SIZE = 15 ;

    // Define a template class vector of integers
    typedef vector&lt;int, allocator&lt;int&gt; &gt; IntVector ;

    //Define an iterator for template class vector of integer
    typedef IntVector::iterator IntVectorIt ;

    IntVector Numbers(VECTOR_SIZE) ;   //vector containing numbers

    IntVectorIt start, end, it ;

    int i ;

    //Initialize vector Numbers
    for(i = 0; i &lt; VECTOR_SIZE; i++)
        Numbers[i] = i * i ;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    cout &lt;&lt; "Before calling generate_n" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // fill the specified range with a series of
    // Fibonacci numbers using the Fibonacci function
    generate_n(start + 5, Numbers.size() - 5, Fibonacci) ;

    cout &lt;&lt; "After calling generate_n" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
</PRE>}
<P>
Program Output is:
<P>
Before calling generate_n
Numbers { 0 1 4 9 16 25 36 49 64 81 100 121 144 169 196  }
<P>
After calling generate_n
Numbers { 0 1 4 9 16 1 1 2 3 5 8 13 21 34 55  }
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample generate_n begin end size<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

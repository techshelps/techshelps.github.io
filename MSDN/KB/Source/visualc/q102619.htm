

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Member Conversion Function Calling Convention Incorrect </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q102619">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/08/05">
<META NAME="Keywords" CONTENT="CPPIss kbbuglist kbfasttip kbfixlist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  After compiling an application with Microsoft C/C++ for MS-DOS, an attempt to link the application fails and Microsoft LINK generates the following message:     error L2029: 'public: __near __pascal CMyclass::operator`int       const __near*' (void...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAHE,QAKR,QBV8,QAGI,QAOT,QAY5,QBC7,QAB9,QA4Q,QANY,QAKM,QAIF,QBWP,QA5E V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Member Conversion Function Calling Convention Incorrect</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q102619</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 | 1.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
After compiling an application with Microsoft C/C++ for MS-DOS, an
attempt to link the application fails and Microsoft LINK generates the
following message:
<P>
<PRE>   error L2029: 'public: __near __pascal CMyclass::operator`int
      const __near*' (void)const __near' : unresolved external

</PRE>After compiling an application with Microsoft C/C++ 32-bit Edition, an
attempt to link the application fails and Microsoft LINK generates the
following messages:
<P>
<PRE>   warning LNK4016: unresolved external symbol "??BCMyclass@@QBGPBHXZ
      (public:  __stdcall CMyclass::operator`int const *' (void)const )"
   error LNK1120: 1 unresolved externals

</PRE><h2>CAUSE</h2>
 
<P>
Microsoft C/C++ compiler version 8.0 and 8.0c for MS-DOS and Windows
always uses the __cdecl calling convention for functions declared as
follows:
<P>
<PRE>   &lt;classname&gt;::operator const &lt;type-specifier&gt; *() const

</PRE>However, if the compiler command line includes the /Gc compiler option
switch, the function has the __pascal calling convention. Normally,
every member function of a class uses the __pascal calling convention
without regard to the presence of the /Gc compiler option switch.
<P>
For example, if you build an application with the Microsoft Foundation
Class Library and refer to the function CString::operator const char
*() const, an L2029 error occurs if you specify the /Gc compiler
option switch. Because the Class Library was built without the /Gc
option, the conversion function in the library has the __cdecl calling
convention. If you build your application with the /Gc option switch,
it attempts to call the conversion function with the __pascal calling
convention.
<P>
A similar problem occurs in Microsoft C/C++ 32-bit Edition if you
specify the /Gz compiler option switch. Normally, each class member
function uses the thiscall calling convention without regard to the
presence of the /Gz compiler option switch. However, if the compiler
command line specifies the /Gz compiler option switch, the conversion
function uses the __stdcall calling convention.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
In Microsoft C/C++ version 8.0 for MS-DOS and Windows, modify the
compiler command line to remove the /Gc compiler option switch. Doing
so compiles the conversion function with the __cdecl calling
convention. In Microsoft C/C++ version 8.0 (32-bit), modify the
compiler command line to remove the /Gz compiler option switch. Doing
so compiles the conversion function with the thiscall calling
convention.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. This bug was corrected in Visual C++ version
2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code example below demonstrates this problem. Recall that because
member functions use the __pascal or thiscall calling convention,
compiling MAIN.CPP with the /Gc or /Gz switches specified or not
should not make any difference. However, the example shows that a
problem does occur.
<P>
The code below demonstrates the problem. Recall that member functions
use the __pascal or thiscall calling convention, and therefore there
should be no difference between using /Gc or /Gz with MAIN.CPP and not
using /Gc or /Gz. However, the sample shows that there is a problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>// TEST.H

</PRE>class CMyclass
{
<PRE>   int * m_pinteger;
</PRE>public:
<PRE>   operator const int *() const;
   operator int();
</PRE>};
<P>
<PRE>// MAIN.CPP

/*
 * Compiler options needed: /Gc for C/C++ for MS-DOS and Windows
 *                          /Gz for C/C++ for Windows NT
 */

#include "test.h"
void __cdecl main(void)
</PRE>{
<PRE>   CMyclass obj;
   const int *y = obj;
   const int z = obj;
</PRE>}
<P>
<PRE>// OTHER.CPP

/*
 * Compiler options needed: None (omit /Gc and /Gz)
 */

#include "test.h"

</PRE>CMyclass::operator const int *()const
{
<PRE>   return m_pinteger;
</PRE>}
<P>
CMyclass::operator int()
{
<PRE>   return *m_pinteger;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 8.00 8.00c<BR>
KBCategory: kbtool kbfixlist kbbuglist kbfasttip<BR>
KBSubcategory: CPPIss<BR>
Keywords          : CPPIss kbbuglist kbfasttip kbfixlist kbtool<BR>
Version           : 1.00 1.50 | 1.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

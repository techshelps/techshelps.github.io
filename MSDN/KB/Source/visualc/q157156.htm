

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the Predicate Versions of the heap Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157156">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/07">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the predicate versions of the make_heap, sort_heap, push_heap, pop_heap, begin, and end STL functions in Visual C++.  MORE INFORMATION  Required Header                  Prototype ---------     template  ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKC,QBC6,QAG8,QAML,QAWN,QAG7,QAY5,QBWD,QA4Q,QBFY,QAGI,QBV8,QAOX,QAB9,QANY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the Predicate Versions of the heap Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157156</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the predicate versions of the
make_heap, sort_heap, push_heap, pop_heap, begin, and end STL functions in
Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;algorithm&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class RandomAccessIterator, class Compare&gt; inline
      void make_heap(RandomAccessIterator first,
                      RandomAccessIterator last,
                      Compare compare)

   template&lt;class RandomAccessIterator, class Compare&gt; inline
      void sort_heap(RandomAccessIterator first,
                      RandomAccessIterator last,
                      Compare compare)

   template&lt;class RandomAccessIterator, class Compare&gt; inline
      void push_heap(RandomAccessIterator first,
                      RandomAccessIterator last,
                      Compare compare)

   template&lt;class RandomAccessIterator, class Compare&gt; inline
      void pop_heap(RandomAccessIterator first,
                     RandomAccessIterator last,
                     Compare compare)

</PRE>NOTE: The class/parameter names in the prototype do not match the original
version in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
A heap is a sequence of elements organized like a binary tree. Each heap
element corresponds to a tree node. The first value in the sequence
[first..last) is the root, and is ordered by the predicate. For example, if
the predicate is greater&lt;int&gt;, every element in the heap satisfies the
following; every element is greater than or equal to its parent. The
smallest element is stored in the root, and all children hold progressively
larger values.
<P>
The make_heap function converts the range [first..last) into a heap.
<P>
The sort_heap function sorts a "heapified" sequence that was created using
the make_heap function.
<P>
The push_heap function inserts a new value into the heap.
<P>
The pop_heap function swaps the first and last elements in the heap
specified by [first, last), then reduces the length of the sequence by one
before restoring the heap property.
<P>
The predicate versions of the heap functions use the compare function for
comparisons.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// heap_functions.cpp : Illustrates how to use the predicate versions
//                      of the make_heap, sort_heap, push_heap
//                      and pop_heap functions.
//
// Functions:
//
//    make_heap : Convert a sequence to a heap.
//    sort_heap : Sort a heap.
//    push_heap : Insert an element in a heap.
//    pop_heap  : Remove the top element from a heap.
//
// Written by Kalindi Sanghrajka
// of Microsoft Product Support Services,
// Software Core Developer Support.
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
</PRE>#pragma warning(disable: 4786)
<P>
<PRE>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;

void main()
</PRE>{
<PRE>   const int VECTOR_SIZE = 8 ;

   // Define a template class vector of int
   typedef vector&lt;int, allocator&lt;int&gt; &gt; IntVector ;

   //Define an iterator for template class vector of strings
   typedef IntVector::iterator IntVectorIt ;

   IntVector Numbers(VECTOR_SIZE) ;
   IntVectorIt it ;

   // Initialize vector Numbers
   Numbers[0] = 4 ;
   Numbers[1] = 10;
   Numbers[2] = 70 ;
   Numbers[3] = 10 ;
   Numbers[4] = 30 ;
   Numbers[5] = 69 ;
   Numbers[6] = 96 ;
   Numbers[7] = 100;

   // print content of Numbers
   cout &lt;&lt; "Numbers { " ;
   for(it = Numbers.begin(); it != Numbers.end(); it++)
      cout &lt;&lt; *it &lt;&lt; " " ;
   cout &lt;&lt; " }\n" &lt;&lt; endl ;

   // convert Numbers into a heap
   make_heap(Numbers.begin(), Numbers.end(), greater&lt;int&gt;()) ;
   cout &lt;&lt; "After calling make_heap\n" &lt;&lt; endl ;

   // print content of Numbers
   cout &lt;&lt; "Numbers { " ;
   for(it = Numbers.begin(); it != Numbers.end(); it++)
      cout &lt;&lt; *it &lt;&lt; " " ;
   cout &lt;&lt; " }\n" &lt;&lt; endl ;

   // sort the heapified sequence Numbers
   sort_heap(Numbers.begin(), Numbers.end(), greater&lt;int&gt;()) ;
   cout &lt;&lt; "After calling sort_heap\n" &lt;&lt; endl ;

   // print content of Numbers
   cout &lt;&lt; "Numbers { " ;
   for(it = Numbers.begin(); it != Numbers.end(); it++)
      cout &lt;&lt; *it &lt;&lt; " " ;
   cout &lt;&lt; " }\n" &lt;&lt; endl ;

   make_heap(Numbers.begin(), Numbers.end(), greater&lt;int&gt;()) ;
   //insert an element in the heap
   Numbers.push_back(7) ;
   push_heap(Numbers.begin(), Numbers.end(), greater&lt;int&gt;()) ;
   cout &lt;&lt; "After calling push_heap()\n" &lt;&lt; endl;

   // print content of Numbers
   cout &lt;&lt; "Numbers { " ;
   for(it = Numbers.begin(); it != Numbers.end(); it++)
      cout &lt;&lt; *it &lt;&lt; " " ;
   cout &lt;&lt; " }\n" &lt;&lt; endl ;

   //remove the root element from the heap Numbers
   pop_heap(Numbers.begin(), Numbers.end(), greater&lt;int&gt;()) ;
   cout &lt;&lt; "After calling pop_heap\n" &lt;&lt; endl ;

   // print content of Numbers
   cout &lt;&lt; "Numbers { " ;
   for(it = Numbers.begin(); it != Numbers.end(); it++)
      cout &lt;&lt; *it &lt;&lt; " " ;
   cout &lt;&lt; " }\n" &lt;&lt; endl ;
</PRE>}
<P>
Program Output is:
<P>
Numbers { 4 10 70 10 30 69 96 100  }
<P>
After calling make_heap
Numbers { 4 10 69 10 30 70 96 100  }
<P>
After calling sort_heap
Numbers { 100 96 70 69 30 10 10 4  }
<P>
After calling push_heap()
Numbers { 4 7 10 30 100 10 70 96 69  }
<P>
After calling pop_heap
Numbers { 7 30 10 69 100 10 70 96 4  }
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL make_heap sort_heap push_heap pop_heap begin<BR>
end<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: stricmp() Compares Using Lowercase Characters </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71977 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1991/05/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft C run-time library contains a function called stricmp() that does case-insensitive comparisons of null-terminated strings. When comparing strings, stricmp() converts any letters that are uppercase to lowercase letters for the sake of ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANY,QA4B,QAGX,QBFY,QAY5,QAG7,QATX,QAGS,QAL3,QBSO,QBV8,QAVK,QAKD,QAB9,QAWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: stricmp() Compares Using Lowercase Characters</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71977 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax | 6.00 6.00a | 1.00 1.50
<PRE>MS-DOS            | OS/2       | WINDOWS
</PRE>kbprg kbdocerr
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
<P>
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0 and 6.0a
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft C run-time library contains a function called stricmp()
that does case-insensitive comparisons of null-terminated strings. When
comparing strings, stricmp() converts any letters that are uppercase
to lowercase letters for the sake of comparison. In most cases, this
case conversion is unimportant but occasionally it may result in
unexpected behavior.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To illustrate when case conversion by stricmp() affects the outcome of
a comparison, assume that you have the two strings "JOHNSTON" and
"JOHN_HENRY". The string "JOHN_HENRY" will be considered less than
"JOHNSTON" because the "_" has a lower ASCII value than a lowercase
"S".
<P>
In fact, any character that has an ASCII value between 91 and 96 will
be considered less than any letter. The following are the characters
in this range of ASCII values:
<P>
<PRE>   [  \  ]  ^  _  `

</PRE>If the strcmp() function is used instead of stricmp(), "JOHN_HENRY"
will be greater than "JOHNSTON".
<P>
The above behavior of the stricmp() function is correct. However, the
documentation that ships with the products listed above fail to mention
that the strings are first converted to lowercase letters. The Microsoft C
Compiler "Run-Time Library Reference" manuals for C version 5.1 and C/C++
7.0 do mention this conversion.
<P>
If you require strings to be compared as uppercase letters, the sample
code below illustrates one way to do so. With this function,
"JOHN_HENRY" will be greater than "JOHNSTON".
<P>
NOTE: There is also a function called strcmpi(), but this name is an
obsolete synonym for stricmp(). All information here pertaining to
stricmp() also pertains to strcmpi().
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>int stricmp_alt(char * string1, char * string2)
</PRE>{
<PRE>   int first,second;

   do {
      first  = toupper(*string1);
      second = toupper(*string2);
      string1++;
      string2++;
   } while (first &amp;&amp; first == second);

   return(first - second);
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.10 6.00 6.00a 6.00ax 1.00 1.50<BR>
KBCategory: kbprg kbdocerr<BR>
KBSubcategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

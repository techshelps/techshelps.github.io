

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Syntax for a Function Returning a Pointer to a Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83949 ">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1992/04/26">
<META NAME="Keywords" CONTENT="CLngIss kbcode kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The syntax for a function returning a pointer to another function is somewhat complicated due to the precedence rules involved. The syntax can be greatly simplified with the use of typedefs, but typedefs are not required. The following discussion a...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAUD,QAB9,QAO3,QAO2,QBV8,QA4Q,QALW,QBFY,QAPF,QAGI,QBWP,QAPN,QAI4,QASC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Syntax for a Function Returning a Pointer to a Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83949 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C compiler for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
<LI>Microsoft C/C++ compiler for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The syntax for a function returning a pointer to another function is
somewhat complicated due to the precedence rules involved. The syntax can
be greatly simplified with the use of typedefs, but typedefs are not
required. The following discussion applies to ANSI C and to C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The simplest way to define such a function is by using a typedef as an
alias for a pointer to a function of the desired type. This is the
recommended method. For example, consider the following statements:
<P>
<PRE>   typedef void (*FPN)( int );
   FPN return_func_ptr( void );

</PRE>The first statement defines FPN to be an alias for a pointer to a function
taking an int and returning nothing. The second statement declares
return_func_ptr to be a function taking nothing and returning a variable of
type FPN; that is, returning a pointer to a function taking an int and
returning nothing.
<P>
To declare such a function without using a typedef, the syntax is rather
different:
<P>
<PRE>   void (* (return_func_ptr(void)) )( int )
   {
      return a_func;  /* where a_func is a defined function */
   }

</PRE>This defines return_func_ptr to be a function that takes nothing, and
returns a pointer to a function taking an int and returning nothing.
<P>
The syntax for calling a function through a pointer is shown in the
following example:
<P>
<PRE>   void (*func_ptr)( int );     /* Define a pointer to a function
                                   taking an int and returning void */
   func_ptr = return_func_ptr();
   (*func_ptr)( 3 );            /* Dereference it to call function  */

</PRE>The following sample code further illustrates returning pointers to
functions and using them to call the functions to which they point. For the
16-bit compilers listed above, the prototype for _dos_getvect in "The
Microsoft C/C++ Run-Time Library Reference" and in the DOS.H header file
will provide another example of this.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #include &lt;stdio.h&gt;

   void afunc( char *cp, int ivar )
   {
      printf( "%s : int=%d\n", cp, ivar );
   }

   /* Typedef FPN as a pointer to a function taking a char pointer and
      an int and returning nothing.
   */
   typedef void (*FPN)( char *, int );

   /* Define a function with a void parameter list returning a pointer to
      a function taking a character pointer and an int and returning
      nothing.
   */

   void (* (retfunc1(void)) )( char *, int )
   {
      return afunc;
   }

   /* Define a function exactly the same as retfunc1, but using the
      FPN typedef previously defined to simplify the code.
   */

   FPN retfunc2( void )
   {
      return afunc;
   }

   void main( void )
   {
      void (*fp1)(char *, int);   /* fp1 and fp2 are both pointers to */
      FPN fp2;                    /* functions taking a char pointer  */
                                  /* and an int and returning nothing */

     fp1 = retfunc1();      /* Examples of setting function pointers  */
     (*fp1)( "Test1", 0 );  /* and calling the functions through them */

     fp1 = retfunc2();
     (*fp1)( "Test2", 1 );

     fp2 = retfunc1();
     (*fp2)( "Test3", 2 );

     fp2 = retfunc2();
     (*fp2)( "Test4", 3 );
   }
</PRE> 
<PRE>Keywords          : CLngIss kbcode kbfasttip
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0; WINDOWS:1.0,1.5; WINDOWS  NT:1.0,2.0,2.1,4.0,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: Floating Point Control Function Sample Code Incorrect </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98988 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1993/05/18">
<META NAME="Keywords" CONTENT="CRTIss kb16bitonly kbdocerr kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The online help provided with Visual C++ contains an incorrect code sample to demonstrate the floating point control word functions _clear87(), _control87(), and _status87(). An attempt to view the code sample for these functions fails; the help sy...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHH,QAH4,QA7O,QAOE,QAMN,QAB5,QAY5,QAGN,QBC9,QBC8,QANO,QANJ,QAPF,QAEF,QAFO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: Floating Point Control Function Sample Code Incorrect</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98988 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52
WINDOWS
kbprg kbdocerr
<P>
 
The information in this article applies to:
<P>
<PRE>   The C Run-time (CRT) included with:
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The online help provided with Visual C++ contains an incorrect code
sample to demonstrate the floating point control word functions
_clear87(), _control87(), and _status87(). An attempt to view the code
sample for these functions fails; the help system displays the code
sample that demonstrates _getcwd() instead.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code example below demonstrates the _clear87(), _control87(), and
_status87() functions.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* COPROC.C illustrates use of the status and control words of a
 * floating-point coprocessor (or emulator). Functions illustrated
 * include:   _clear87      _status87           _control87
 */

#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;float.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

</PRE>double dx = 1e-40, dy;
float fx, fy;
unsigned status, control;
<PRE>char tmpstr[20];
char *binstr( int num, char *buffer );

void main()
</PRE>{
<PRE>   printf( "Status Word Key:\n" );
   printf( "B\tBusy flag\n0-3\tCondition codes\nS\tStack top pointer\n" );
   printf( "E\tError summary\nF\tStack flag\nP\tPrecision exception\n" );
   printf( "U\tUnderflow exception\nO\tOverflow exception\n" );
   printf( "Z\tZero divide exception\nD\tDenormalized exception\n" );
   printf( "I\tInvalid operation exception\n\n" );

   binstr(  _clear87(), tmpstr );
   printf( "B3SSS210EFPUOZDI  Function\tCondition\n\n" );
   printf( "%16s  _clear87\tAfter clearing\n", tmpstr );

   /* Storing double to float that hasn't enough precision for it
    * causes underflow and precision exceptions.
    */
   fx = dx;
   binstr(  _status87(), tmpstr );
   printf( "%16s  _status87\tAfter moving double to float\n", tmpstr );

   /* Storing float with lost precision back to double adds
    * denormalized exception (previous exceptions remain).
    */
   dy = fx;
   binstr(  _clear87(), tmpstr );
   printf( "%16s  _clear87\tAfter moving float to double\n", tmpstr );

   /* Using _clear87() erases previous exceptions. */
   fy = dy;
   binstr(  _status87(), tmpstr );
   printf( "%16s  _status87\tAfter moving double to float\n\n", tmpstr );

   _getch();
   printf( "Control Word Key:\n" );
   printf( "i\tInfinity control\nr\tRounding control\n" );
   printf( "p\tPrecision control\ne\tInterrupt enable mask\n" );
   printf( "U\tUnderflow mask\nO\tOverflow mask\n" );
   printf( "Z\tZero divide mask\nD\tDenormalized mask\n" );
   printf( "I\tInvalid operation mask\n\n" );
   printf( "???irrppe?PUOZDI  Result\n" );
   fy = .1;

   /* Show current control word. */
   binstr( _control87( 0, 0 ), tmpstr );
   printf( "%16s  %.1f * %.1f = %.15e with initial precision\n",
      tmpstr, fy, fy, fy * fy );

   /* Set precision to 24 bits. */
   binstr( _control87( _PC_24, _MCW_PC ), tmpstr );
   printf( "%16s  %.1f * %.1f = %.15e with 24-bit precision\n",
      tmpstr, fy, fy, fy * fy );

   /* Restore default. */
   binstr( _control87( _CW_DEFAULT, 0xffff ), tmpstr );
   printf( "%16s  %.1f * %.1f = %.15e with default precision\n",
      tmpstr, fy, fy, fy * fy );
</PRE>}
<P>
<PRE>/* Converts integer to string of 16 binary characters. */
char *binstr( int num, char *buffer )
</PRE>{
<PRE>   char tmp[17];
   int  len;

   memset( buffer, '0', 16 );
   len = strlen( _itoa( num, tmp, 2 ) );
   strcpy( buffer + 16 - len, tmp );
   return buffer;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 1.51 1.52<BR>
KBCategory: kbprg kbdocerr<BR>
KBSubcategory: CRTIss<BR>
Keywords            : CRTIss kb16bitonly kbdocerr kbprg<BR>
Version             : 1.00 1.50 1.51 1.52<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

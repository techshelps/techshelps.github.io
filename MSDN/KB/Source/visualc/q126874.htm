

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Modal Dialog Box Prevents Calls to PreTranslateMessage </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126874">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/03/06">
<META NAME="Keywords" CONTENT="MfcUI kbcode kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" NOTE: This article contains references to CWinApp member functions. In the 32-bit version of MFC, the bulk of the code for these functions is actually implemented in the CWinThread class from which CWinApp is derived.   PreTranslateMessage is not ca...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QAEV,QAGI,QBE5,QAYC,QAH4,QAY5,QAA7,QANX,QBSO,QAIF,QBVV,QAHT,QBV8,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Modal Dialog Box Prevents Calls to PreTranslateMessage</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126874</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>PUBLIC | kbprg kbprb kbcode
<P>
 
The information in this article applies to:
<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, and
      4.0
</UL></PRE> 
<P>
NOTE: This article contains references to CWinApp member functions. In the
32-bit version of MFC, the bulk of the code for these functions is actually
implemented in the CWinThread class from which CWinApp is derived.
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
PreTranslateMessage is not called when a modal dialog box has been invoked.
A modal dialog box has its own message loop, which has no interaction with
the application's main message loop. This prevents CWinApp::PumpMessage
from being called. PumpMessage is the function that calls
PreTranslateMessage.
<P>
<P><h2>CAUSE</h2>
 
<P>
An application is begun by a call to WinMain. MFC's implementation of
WinMain calls CWinApp::Run, which has the application's main message loop.
<P>
The message loop in Run calls PumpMessage to process messages. PumpMessage
retrieves the messages from the application's message queue using the
GetMessage API. PumpMessage then calls CWinApp::PreTranslateMessage, which
will call PreTranslateMessage for the appropriate CWnd. For details on
MFC's message routing mechanism, see MFC TechNote #21 and examine the
CWinApp::PreTranslateMessage function in the MFC source code that can be
found in APPCORE.CPP. In the 32-bit version of MFC, this code is in
CWinThread::PreTranslateMessage and can be found in THRDCORE.CPP. Here is a
picture of this process:
<P>
<PRE>                  -------------------------------------
                 |         CWinApp::PumpMessage        |
                  -------------------------------------
                                     |
                                     |
                  -------------------------------------
                 |     CWinApp::PreTranslateMessage    |
                  -------------------------------------
                                     |
                                     |
                  -------------------------------------
                 |       CWnd:: PreTranslateMessage    |
                  -------------------------------------

</PRE>When a modal dialog box has been invoked, the above sequence is no longer
used. A modal dialog box uses the Dialog Manager (the code built into
Windows for implementing dialog boxes) to retrieve messages from the
application's message queue and process them. In other words, the Dialog
Manager takes control of all message processing during the existance of a
modal dialog box. Here's a picture of this process:
<P>
<PRE>                  -------------------------------------
                 |          CWinApp::PumpMessage       |
                  -------------------------------------
                                    |
                                    |
                  -------------------------------------
                 |           CDialog::DoModal          |
                  -------------------------------------
                                    |
                                    |
                  -------------------------------------
                 |     Dialog Manager's Message Loop   |
                  -------------------------------------

</PRE>The PumpMessage has dispatched the message that invoked the dialog box in
the first place. PumpMessage will not be called again until the Dialog
Manager exits its message loop  -- when the modal dialog box has been
dismissed.
<P>
However, a modeless dialog box uses the normal message processing sequence
because it uses the application's message loop, not the Dialog Manager's
message loop.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
PreTranslateMessage is generally overidden to check for certain messages
and do some specialized or additional processing before these messages are
translated and dispatched. Because PreTranslateMessage will not be called
while a modal dialog box exists, another technique must be used to achieve
this processing.
<P>
The additional message processing can be achieved by using one of the
following two methods:

<OL><P><LI>Use a modeless dialog box to simulate a modal dialog box. To do this,
   create a modeless dialog box, and then disable the application's main
   frame window. This method causes the normal message processing sequence
   to be followed, so the PreTranslateMessage function is called. The
   application's main window can be disabled by using this:
<P>
<P><PRE>      AfxGetApp()-&gt;m_pMainWnd-&gt;EnableWindow(FALSE)
</PRE><P>
   This window should be re-enabled once the dialog box has been destroyed.
   Use the following call to do it:
<P>
<P><PRE>      AfxGetApp()-&gt;m_pMainWnd-&gt;EnableWindow(TRUE)
</PRE><P>
   One possible place to do this might be in the CDialog-derived object's
   PostNcDestroy function that gets called when the dialog box window
   itself (the HWND) is destroyed.
<P>
   If you have multiple top-level windows in your application you may also
   want to disable the other windows. This can be done for the other
   windows in the same way -- by using EnableWindow.

<P><LI>If a modal dialog box seems necessary, perform the additional message
   processing by overiding the CWinApp::ProcessMessageFilter function. The
   ProcessMessageFilter function gets called for all messages when a modal
   dialog box exists. This is set up for you by MFC using a WH_MSGFILTER
   hook. See the ProcessMessageFilter documentation for details. The
   following sample code illustrates this concept:
<P>
   BOOL CMyApp::ProcessMessageFilter(int code, LPMSG lpMsg)
   {
<P><PRE>     // Check to see if the modal dialog box is up
     if (m_hwndDialog != NULL)
       if (lpMsg-&gt;hwnd == m_hwndDialog ||
<PRE></PRE>           ::IsChild(m_hwndDialog, lpMsg-&gt;hwnd))
         {
           // Use the global IsChild() function to get
           // messages destined for the dialog's controls
           // Perform customized message processing here
         }
     return CWinApp::ProcessMessageFilter(code, lpMsg);
   }

</PRE></OL>In the above sample code m_hwndDialog is a member variable of the CWinApp
derived class that holds the handle of the modal dialog box. This variable
should be initialized to m_hWnd of the modal dialog in the OnInitDialog
function, and should be set to NULL when the modal dialog is destroyed.
Also the variable should be initialized in the CWinApp-derived object's
constructor. For example:
<P>
<PRE>// The OnInitDialog to initialize m_hwndDialog
//
</PRE>CMyDialog::OnInitDialog()
{
<PRE>  CDialog::OnInitDialog();
  ((CMyApp *)AfxGetApp())-&gt;m_hwndDialog=m_hWnd;
</PRE>}
<P>
<PRE>// When the dialog is destroyed restore m_hwnDialog to NULL
//
void CMyDialog::PostNcDestroy()
</PRE>{
<PRE>  CDialog::PostNcDestroy();
  ((CMyApp *)AfxGetApp())-&gt;m_hwndDialog=NULL;
</PRE>}
<P>
<PRE>// The CWinApp object's constructor to initialize m_hwndDialog
</PRE>CMyApp::CMyApp()
{
<PRE>  m_hwndDialog=NULL;
</PRE>}
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Books Online: MFC TechNote #21.
<P>
"Meandering Through the Maze of MFC Message and Command Routing" by
Paul DiLascia in the July 1995 issue of "Microsoft Systems Journal"
(Volume 10, Number 7).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 2.50 2.51 3.00 3.10 4.00<BR>
WM_KEYDOWN<BR>
KBCategory: kbprg kbprb kbcode<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbcode kbprb kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use MFC to Automate Excel 97 and Navigate Worksheets </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q178782">
<META NAME="KBModify" CONTENT="1998/02/06">
<META NAME="KBCreate" CONTENT="1998/01/04">
<META NAME="Keywords" CONTENT="MfcOLE kbcode kbinterop">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article discusses how to use version 4.2 of the Microsoft Foundation Class (MFC) library installed with Microsoft Visual C++ version 5.0 to automate Microsoft Excel 97. Specifically, it shows how to navigate between the worksheets in a workboo...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QDMR,QA6E,QAH4,QDNZ,QAPN,QDNM,QAVX,QAVW,QAO3,QAO2,QAJB,QBXV,QAG8,QA39 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use MFC to Automate Excel 97 and Navigate Worksheets</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 6, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q178782</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, version 5.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses how to use version 4.2 of the Microsoft Foundation
Class (MFC) library installed with Microsoft Visual C++ version 5.0 to
automate Microsoft Excel 97. Specifically, it shows how to navigate between
the worksheets in a workbook and place data in the cells of each worksheet.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can copy the code in this article to the message handler function of an
event defined in an MFC .cpp file. However, the purpose of the code is to
illustrate the process of using the IDispatch interfaces and member
functions defined in the Excel8.olb type library. The primary benefit comes
from reading and understanding the code so you can modify the example, or
write code from scratch to automate Microsoft Excel 97.
<P>
<P><h3>Steps to Create the Project</h3>
 

<OL><P><LI>In Microsoft Excel, create a new workbook named Test.xls.

<P><LI>Follow steps 1 through 12 in the following Microsoft Knowledge Base
   article to create a sample project that uses the IDispatch interfaces
   and member functions defined in the Excel8.olb type library:
<P>
<P><PRE>      ARTICLE-ID: <B><A HREF="../VISUALC/Q178749.htm">Q178749</A></B>
<PRE></PRE>      TITLE     : HOWTO: Create an Automation Project Using MFC and a Type
                  Library

</PRE><P><LI>At the top of the AutoProjectDlg.cpp, add the following line:
<P>
<P><PRE>      #include "excel8.h"
</PRE>
<P><LI>Add the following code to CAutoProjectDlg::OnRun() in the
   AutoProjectDLG.cpp file.
<P>
   Sample Code
   -----------
<P>
<P><PRE>      // This example walks through three worksheets and places
      // literal strings in cells A1 and B2 on each sheet.
</PRE><P>
<P><PRE>      try
       {
       _Application app;  // app is an _Application object.
       _Workbook book;
       _Worksheet sheet;
       Workbooks books;
       Worksheets sheets;
       Range range;
       char buf[1024];
       LPDISPATCH lpDisp; // IDispatch *; pointer reused many times.
       long count; // Count of the number of worksheets.
       int i;
</PRE><P>
<P><PRE>       // Common OLE variants. These are easy variants to use for
       // calling arguments.
       COleVariant
<PRE></PRE>                  covTrue((short)TRUE),
                  covFalse((short)FALSE),
                  covOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR);

       // Start Excel and get Application object.
       if(!app.CreateDispatch("Excel.Application"))
       {
        AfxMessageBox("Couldn't CreateDispatch on Excel");
        return;
       }

       // Set visible.
       app.SetVisible(TRUE);

       // Get Workbooks collection.
       lpDisp = app.GetWorkbooks();  // Get an IDispatch pointer
       ASSERT(lpDisp);               // or fail.
       books.AttachDispatch( lpDisp );  // Attach the IDispatch pointer
                                        // to the books object.

       // Open a workbook.
       lpDisp = books.Open("C:\\My Docs\\Test",
                      covOptional, covOptional, covOptional, covOptional,
                      covOptional, covOptional, covOptional, covOptional,
                      covOptional, covOptional, covOptional, covOptional
                      );
       ASSERT(lpDisp);  // It worked!

       // Attach to a Workbook object.
       book.AttachDispatch( lpDisp );  // Attach the IDispatch pointer
                                       // to the book object.

       // Get sheets.
       lpDisp = book.GetSheets();
       ASSERT(lpDisp);
       sheets.AttachDispatch(lpDisp);

       // Get the number of worksheets in this book.
       count = sheets.GetCount();
       sprintf(buf, "%ld worksheets in this Workbook.", count);
       ::MessageBox(NULL, buf, NULL, MB_OK | MB_SETFOREGROUND);

       // Enumerate through worksheets in book and activate in
       // succession.
       for(i=0; i&lt;count; i++)
       {
        // Get i'th sheet. Note that 1 is added to the index to make sure
        // it is 1-based, not zero-based. Otherwise, you will get odd
        // exceptions.
        lpDisp = sheets.GetItem( COleVariant((short)(i+1)) ); // 'Item' in
                              // the Worksheets collection = worksheet #.
        ASSERT(lpDisp);
        sheet.AttachDispatch(lpDisp);
        // Activate and sleep for two seconds so you can see it happen.
        sheet.Activate();
        ::Sleep(2000);

        lpDisp = sheet.GetRange(COleVariant("A1"), COleVariant("W40"));
                                                   // From cell# To cell#.
        ASSERT(lpDisp);
        range.AttachDispatch(lpDisp);  // Attach the IDispatch pointer
                                       // to the range.
        range.Clear();  // Could be ClearContents().
        ::Sleep(500);
        lpDisp = sheet.GetRange(COleVariant("A1"), COleVariant("A1"));
                                                       // From and To.
        ASSERT(lpDisp);
        range.AttachDispatch(lpDisp);// Attach the IDispatch pointer
                                     // to the range.
        range.SetValue(COleVariant("A1A1")); // A1A1 is just data.

        lpDisp = sheet.GetRange(COleVariant("B2"), COleVariant("B2"));
        ASSERT(lpDisp);
        range.AttachDispatch(lpDisp);
        range.SetValue(COleVariant("B2B2")); // B2B2 is data also.
        ::Sleep(2000);  // Could be Sleep(1000) for a one second pause.
        // Release dispatch pointer.
        sheet.ReleaseDispatch();
        } // End of For loop. You walked through all three sheets of the
          // workbook, and stuffed data into cells A1 and B2.
       AfxMessageBox("Waiting...");

       // Set the workbook back to sheet 1 so that it starts there next
       // time it is opened.
       lpDisp = sheets.GetItem( COleVariant((short)(1)) );
       ASSERT(lpDisp);
       sheet.AttachDispatch(lpDisp);
       sheet.Activate();
       lpDisp = sheet.GetRange(COleVariant("A1"), COleVariant("W40"));
                                                  // From and To.
       ASSERT(lpDisp);
       range.AttachDispatch(lpDisp);// Attach the IDispatch pointer
                                    // to the range object.
       range.Clear();  // Could be ClearContents().

       lpDisp = sheet.GetRange(COleVariant("A1"), COleVariant("A1"));
       ASSERT(lpDisp);
       range.AttachDispatch(lpDisp);
       range.SetValue(COleVariant("GoodBye"));
       ::Sleep(3000);
       range.Clear();  // Could be ClearContents().
       book.SetSaved(TRUE); // Forestall the 'Save ?' dialog box.
       app.Quit();  //Excel departs.

       }  // End of Processing logic.

      catch(COleException *e)
      {
       char buf[1024];
       sprintf(buf, "COleException. SCODE: %08lx.", (long)e-&gt;m_sc);
       ::MessageBox(NULL, buf, "COleException", MB_SETFOREGROUND | MB_OK);
      }

      catch(COleDispatchException *e)
      {
       char buf[1024];
       sprintf(buf,
          "COleDispatchException. SCODE: %08lx,Description: \"%s\".",
          (long)e-&gt;m_wCode, (LPSTR)e-&gt;m_strDescription.GetBuffer(1024));
       ::MessageBox(NULL, buf, "COleDispatchException",
                    MB_SETFOREGROUND | MB_OK);
      }

      catch(...)
      {
       ::MessageBox(NULL, "General Exception caught.", "Catch-All",
                    MB_SETFOREGROUND | MB_OK);
      }

</PRE><P><LI>You may need to modify the code in CAutoProjectDlg::OnRun() to indicate
   the correct path for your workbook Test.xls. The workbook is referenced
   in the following line:
<P>
<P><PRE>      lpDisp = books.open("C:\\My Docs\\Test", . . .);
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: IDispatch MFC automate excel8 xl8 excel 8.0 xl97<BR>
Keywords          : MfcOLE kbcode kbinterop<BR>
Technology        : kbOle<BR>
Version           : Win95:5.0; WINNT:5.0<BR>
Platform          : Win95 winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 6, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

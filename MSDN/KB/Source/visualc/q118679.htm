

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Memory Leak Using Delete Operator </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118679">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/07/26">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you release dynamically allocated memory back to the system by using the C++ delete operator in a QuickWin application, a memory leak occurs.  CAUSE ======  The run-time library provides four versions of the delete operator to deallocate point...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEF,QBCT,QAGC,QAGB,QDKD,QAO3,QAO2,QANY,QAKM,QBW6,QAGI,QAAW,QBFY,QAR4,QAAP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Memory Leak Using Delete Operator</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118679</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50
MS DOS | WINDOWS
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
SYMPTOMS
 
<P>
When you release dynamically allocated memory back to the system by using
the C++ delete operator in a QuickWin application, a memory leak occurs.
<P>
CAUSE
 
<P>
The run-time library provides four versions of the delete operator to
deallocate pointers that are near, far, huge, or based. The version that is
selected depends on the addressing mode of pointer. For example, if the
pointer is a near pointer, the near delete operator is called. If the
addressing mode of pointer does not reflect the version of the new operator
used to allocate the memory, the incorrect version of the delete operator
is called. For example:
<P>
<PRE>   Node __far *fpN;
   fpN = new Node __near;  // convert near to far
   delete fpn;             // far delete invoked for near object

</PRE>Here, the compiler chooses the inappropriate delete operator for the
pointer, which results in a run-time error.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To prevent this problem, explicitly cast the pointer to the addressing mode
you want:
<P>
<PRE>   delete (Node __near *)fpN;

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The following sample code can be used to demonstrate the memory leak.
Replace the last two uncommented lines with the commented lines to see the
correct output.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: /Mq
   */

   #include &lt;malloc.h&gt;
   #include &lt;stdio.h&gt;

   void main()
   {
      char * nearptr;
      char far * farptr;

      printf("\n");
      printf("Starting memory: %u\n",_memavl());

      nearptr = new char;
      farptr = new char __near; // new returns a near pointer
      printf("After memory allocated: memavl=%u\n",_memavl());

      delete nearptr; // the near delete gets called

      delete farptr;  // the far delete gets called for near memory
      printf("After memory is freed : memavl=%u\n",_memavl());

      //delete ( char __near *) farptr; // this will call the correct
   delete
      //printf("After memory is freed : memavl=%u\n",_memavl());
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 7.00 1.00 1.50<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: CPPLngIns<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

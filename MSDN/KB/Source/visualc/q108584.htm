

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Handling of Invalid Values in Class Wizard for DDX/DDV </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108584">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/12/13">
<META NAME="Keywords" CONTENT="WizardIss kbbuglist kbfasttip kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using the Class Wizard included with Visual C++ to associate a member variable with a control on a dialog box causes the minimum and maximum values to be treated differently depending upon different variable types.  RESOLUTION  Currently, there is ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABN,QAKD,QAR4,QAHH,QAIK,QAYL,QBB2,QAJB,QABO,QAAP,QAB4,QAP2,QAKC,QBFY,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Handling of Invalid Values in Class Wizard for DDX/DDV</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108584</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 | 1.00 2.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbprg kbfixlist kbbuglist kbfasttip
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0 and 2.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using the Class Wizard included with Visual C++ to associate a member
variable with a control on a dialog box causes the minimum and maximum
values to be treated differently depending upon different variable types.
<P>
RESOLUTION
 
<P>
Currently, there is no workaround for the inconsistent auto-correction.
Furthermore, once the auto-correction feature has changed a float or double
to use scientific notation Class Wizard will fail when trying to modify the
attributes of the control. The code with the scientific notation must be
manually changed to a non-scientific floating point value to continue.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products
listed at the beginning of this article. This bug was corrected in Visual
C++ 2.1.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When specifying that a variable will be of type int or uint, providing a
value greater than its limit (see below) will cause an error to be
displayed. However, setting a value that is over the limit for a long or
DWORD is automatically corrected to the maximum value achievable in either
direction.
<P>
The following table details the behavior of these types for both the 16-
and 32-bit editions:
<P>
<PRE>   Min. Limit    Type    Max. Limit   Correction
   ---------------------------------------------------------------------

   -32768        int     32767        Warns user
   0             uint    65535        Warns user
   -2147483647   long    2147483647   Automatic
   0             DWORD   4294967295   Automatic

</PRE>NOTE: For the 32-bit edition, the maximum negative value allowed for a long
is -2147483648.
<P>
There is an additional complication for variables of type float and double.
Not only do they auto-correct, they also correct to a value given in
scientific (exponential) format, which Class Wizard cannot parse. Class
Wizard can save a value in that format but gives an error the next time the
user tries to load Class Wizard for the same project. The Class Wizard will
then appear but with no Class information. For more information, please see
the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q107465.htm">Q107465</A></B>
   TITLE     : FIX: Class Wizard Floating-Point Parsing Errors

</PRE>The following table details the limits of types float and double for the 16-
and 32-bit editions:
<P>
<PRE>   Min. Limit               Type     Max. Limit
   ----------------------------------------------------------------------

   -1.79769e+308            float    1.79769e+308
   -1.79769313486232e+308   double   1.79769313486232e+308

</PRE>IMPORTANT NOTE: The 16-bit edition auto-corrects these values if the user-
specified value exceeds them. However, the 32-bit edition sets the value to
1.#INF if the user-specified value exceeds the above limits for variables
of type float or double.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00<BR>
KBCategory: kbprg kbfixlist kbbuglist kbfasttip<BR>
KBSubcategory: WizardIss<BR>
Keywords          : WizardIss kbbuglist kbfasttip kbfixlist kbprg<BR>
Version           : 1.00 1.50 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Floats Promoted to Doubles w/ Old Style Function Declare </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q38729 ">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1988/12/02">
<META NAME="Keywords" CONTENT="CLIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using old style function declarations causes the compiler to promote floats to doubles.  MORE INFORMATION  For example, even though the following functions are both expecting two floats as parameters, the compiler will promote the floats passed to ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAB9,QBV8,QBFY,QAHH,QAHE,QAPF,QA9O,QAH7,QAH6,QAD7,QAO7,QAGI,QAOT,QAKR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Floats Promoted to Doubles w/ Old Style Function Declare</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q38729 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
   - Microsoft C for OS/2, versions 6.0, 6.0a
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using old style function declarations causes the compiler to promote floats
to doubles.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For example, even though the following functions are both expecting two
floats as parameters, the compiler will promote the floats passed to
function BBB to doubles.
<P>
<PRE>   float AAA(float x1, float x2)
   {
       x1 = x2;
   }


   float BBB(x1,x2)
   float x1,x2;
   {
       x1 = x2;
   }

</PRE>When the functions shown above are compiled with the /Zg switch, which
generates function prototypes, the following prototypes are generated:
<P>
<PRE>   extern  float AAA(float x1, float x2);
   extern  float BBB(double x1, double x2);

</PRE>The following is from the May 5, 1988 ANSI draft, Section 3.3.2.2:
<P>
<PRE>   If the expression that denotes the called function has a type that
   does not include a prototype...arguments that have type float are
   promoted to double.

   If the expression that denotes the called function has a type that
   includes a prototype, the arguments are implicitly converted, as if
   by assignment, to the types of the corresponding parameters.

</PRE>Function AAA, uses the newer function definition style. Note that if this
function is called (perhaps from another module) without a prototype in
scope, there will be problems because the compiler will pass doubles rather
than floats (see first paragraph above).
<P>
Function BBB uses the old style of definition as described in Kernighan and
Ritchie (K &amp; R). Because K &amp; R specified that floats are to be widened to
doubles when they're passed to functions (and in a variety of other
situations as well), the old style declarations maintain the old semantics.
<P>
Therefore, the /Zg switch is correctly generating the function prototypes.
<P>
A program wouldn't run correctly if it declared the following prototype
before calling BBB because the prototype that was in scope when it CALLED
BBB does not match the implicit prototype generated when the function was
defined:
<P>
<PRE>   void BBB(float, float);

</PRE>As a result, floats are passed to a function that was expecting doubles.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords            : CLIss kbfasttip<BR>
Version             : 6.0 6.0a 6.0ax 7.0 1.0 1.5 2.0 4<BR>
Issue type          : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Determine the Version of a Microsoft Excel Workbook </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q178605">
<META NAME="KBModify" CONTENT="1998/01/05">
<META NAME="KBCreate" CONTENT="1997/12/29">
<META NAME="Keywords" CONTENT="VCGenIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article demonstrates how to determine the version of a Microsoft Excel Workbook (.xls).  MORE INFORMATION  Microsoft Excel saves data using structured storage. In particular, it creates a data stream called  Workbook  (previously just  Book ) ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAUD,QAI4,QALW,QBFY,QA6E,QA5V,QA4Q,QA2S,QAH4,QAGX V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Determine the Version of a Microsoft Excel Workbook</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q178605</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel for Windows, versions 5.0, 5.0a, 5.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to determine the version of a Microsoft Excel
Workbook (.xls).
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Excel saves data using structured storage. In particular, it
creates a data stream called "Workbook" (previously just "Book") where
it saves the contents starting with a BOF (beginning of file) record. This
record contains useful attributes of the workbook, as well as the version.
The following Microsoft Visual C++ code demonstrates how to open the file,
read it, and return the version number based on the BOF.

<OL><P><LI>Create a new "Win32 Console Application" in Microsoft Developer Studio.

<P><LI>Add a C++ Source File (.cpp) to the project and add the following code
   to the source file:
<P>
<P><PRE>      #include &lt;windows.h&gt;
<PRE></PRE>      #include &lt;iostream.h&gt;   // My additions

      // BOF record from Microsoft Excel
      typedef struct _xlbof
      {
         char bofMarker; // Should be 0x09

         char vers;  // Version indicator for biff2, biff3, and biff4
                     // = 0x00 -&gt; Biff2
                     // = 0x02 -&gt; Biff3
                     // = 0x04 -&gt; Biff4
                     // = 0x08 -&gt; Biff5/Biff7/Biff8

         char skip[2]; // Unspecified

         short int vers2;  // Version number
                           // 0x0500 -&gt; Biff5/Biff7
                           // 0x0600 -&gt; Biff8

         short int dt;     // Substream type (not used in this example)

         short int rupBuild;  // Internal build identifier
         short int rupYear;   // Internal Build year
      } XLBOF;


      //* XLVersionFromFile() ******************************************
      //* Returns
      //*        n for BiffN
      //*   i.e. 8 for Biff8 (Microsoft Excel 97)
      //*
      //*        Negative if an error occurs
      //****************************************************************

      int XLVersionFromFile(char *filename) {
         // Translate filename to Unicode
         WCHAR wcFilename[1024];
         int i = mbstowcs(wcFilename, filename, strlen(filename));
         wcFilename[i] = 0;

         IStorage *pStorage;
         HRESULT hr;
         XLBOF xlbof;

         // Open the document as an OLE compound document
         hr = ::StgOpenStorage(wcFilename, NULL,
                    STGM_READ | STGM_SHARE_EXCLUSIVE, NULL, 0, &amp;pStorage);

         if(!FAILED(hr)) {
            // Open the data-stream where Microsoft Excel stores the data
            IStream *pStream;
            hr = pStorage-&gt;OpenStream(L"Workbook", NULL,
                    STGM_READ | STGM_SHARE_EXCLUSIVE, 0, &amp;pStream);

            // If "Workbook" does not exist, try "Book"
            if(FAILED(hr)) {
               hr = pStorage-&gt;OpenStream(L"Book", NULL,
                    STGM_READ | STGM_SHARE_EXCLUSIVE, 0, &amp;pStream);
            }
            if(!FAILED(hr)) {
               // Read the relevant BOF information
               DWORD dwCount; // bytes read
               pStream-&gt;Read(&amp;xlbof, sizeof(XLBOF), &amp;dwCount);

               // Let go of the IStream pointer
               pStream-&gt;Release();
            }
            else return -2;

            // Let go of the IStorage pointer
            pStorage-&gt;Release();
          }
          else return -1;

          // Determine which version to return
          if(xlbof.vers != 0x08) return (xlbof.vers + 4) / 2;
          else {
             switch(xlbof.vers2) {
               case 0x0500:  // Either Biff5 or Biff7
                  // Biff7's rupYear is at least 1994
                  if(xlbof.rupYear &lt; 1994) return 5;

                  // Check for specific builds of Microsoft Excel 5
                  switch(xlbof.rupBuild) {
                     case 2412: // XL5a
                     case 3218: // XL5c
                     case 3321: // NT XL5
                        return 5;
                     default:
                        return 7;
                  }

             case 0x0600:  return 8;
             }
          }

          // Version not recognized. Perhaps there is a newer version.
          return -3;
      }

      void main()
      {
         int iretVal = 0;
         iretVal = XLVersionFromFile("C:\\Test.xls");
                                     //Adapt the filename to your example
         cout &lt;&lt; "The Excel Version is " &lt;&lt; iretVal &lt;&lt; "\n\n\r";
         return;
      }

</PRE><P><LI>In the main()function, you may need to modify the path and filename of
   the Microsoft Excel workbook in the following line of code:
<P>
<P><PRE>      iretVal = XLVersionFromFile("C:\\Test.xls");
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
Microsoft Visual C++ Help, version 5.0; search on “structured storage”
<P>
Microsoft Developer’s Network (MSDN); search on “structured storage”,
“Microsoft Excel file format”, BOF”, “beginning of file”
<P>
Microsoft Excel 97 Developer's Kit (ISBN: 1-57231-498-2); search on
“Microsoft Excel file format”, BOF”, “beginning of file”
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: excel97 excel8 xl5en32<BR>
Keywords          : VCGenIss kbcode<BR>
Technology        : kbOle<BR>
Version           : Win95:5.0,5.0a,5.0c,7.0,7.0a,97; winnt:5.0<BR>
Platform          : Win95 winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

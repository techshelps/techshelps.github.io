

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Clear an istream Object During Extraction </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q132422">
<META NAME="KBModify" CONTENT="1997/10/03">
<META NAME="KBCreate" CONTENT="1995/07/10">
<META NAME="Keywords" CONTENT="CPPLngIss CRTIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Testing for errors during extraction is important. For example:     int  n = 0;    while (n               &gt; n;}  This program is expecting a value greater than 100. If the user inputs a non-numeric value, the stream's fail bit is set, and the cin o...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADR,QAJX,QAEF,QANY,QAW6,QAPN,QBFY,QA4Q,QAUD,QA3P,QAZM,QAZL,QAAP,QAB4,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Clear an istream Object During Extraction</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q132422</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-Time (CRT) included with:
   - Microsoft C/C++ version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Testing for errors during extraction is important. For example:
<P>
<PRE>   int  n = 0;
   while (n &lt;= 100) {cin &gt;&gt; n;}

</PRE>This program is expecting a value greater than 100. If the user inputs
a non-numeric value, the stream's fail bit is set, and the cin object
becomes unusable. All subsequent extractions result in an immediate
return with no value stored. Consequently, the program hangs (stops
responding) in the while loop.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The clear() member function clears the fail bit. However, the istream
object is still unusable. The sample code below clears the fail bit and
extracts the unusable characters left in the streambuf object.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* No special compile options needed. */

  #include &lt;iostream.h&gt;

   int ClearError(istream&amp; isIn)        // Clears istream object
   {
      streambuf*  sbpThis;
      char        szTempBuf[20];
      int         nCount, nRet = isIn.rdstate();

      if  (nRet)                        // Any errors?
      {
          isIn.clear();                 // Clear error flags
          sbpThis = isIn.rdbuf();       // Get streambuf pointer
          nCount = sbpThis-&gt;in_avail(); // Number of characters in buffer

          while (nCount)                // Extract them to szTempBuf
          {
              if  (nCount &gt; 20)
              {
                  sbpThis-&gt;sgetn(szTempBuf, 20);
                  nCount -= 20;
              }
              else
              {
                  sbpThis-&gt;sgetn(szTempBuf, nCount);
                  nCount = 0;
              }
          }
      }

      return  nRet;
   }

   void main()
   {
      int  n = 0, nState;
      while (n &lt;= 100)
      {
         cout &lt;&lt; "Please enter an integer greater than 100.\n";
         cin &gt;&gt; n;
         nState = ClearError(cin);   // Clears any errors in cin
      }
   }

</PRE><h2>REFERENCES</h2>
 
<P>
iostream Class Library Reference, Chapter 1
 
<PRE>Keywords          : CPPLngIss CRTIss kbcode
Version           : MS-DOS:7.0;WIN3X:1.0,1.5,1.51,1.52;WINNT:2.0,2.1,4.0,5.0;
Platform          : MS-DOS NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: ESC/ENTER Keys Don't Work When Editing CTreeCtrl Labels </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167960">
<META NAME="KBModify" CONTENT="1997/05/02">
<META NAME="KBCreate" CONTENT="1997/05/02">
<META NAME="Keywords" CONTENT="kbprg kbui MfcUI vcbuglist400 vcbuglist500 kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you edit labels in a CTreeCtrl, you are allowed to press the ESC key to cancel the changes or press the ENTER key to accept the changes. However, when the CTreeCtrl is a child window of a dialog box (CDialog), a formview window (CFormView), or...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAHP,QAGB,QAMB,QAY5,QAC2,QA7O,QAOE,QAMN,QAH4,QAB5,QAGI,QBE5,QADO,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: ESC/ENTER Keys Don't Work When Editing CTreeCtrl Labels</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167960</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 2.0, 2.1, 2.2, 4.0,
   4.0a, 4.1, 4.2, 4.2b, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you edit labels in a CTreeCtrl, you are allowed to press the ESC key
to cancel the changes or press the ENTER key to accept the changes.
However, when the CTreeCtrl is a child window of a dialog box (CDialog), a
formview window (CFormView), or a property page (CPropertyPage), the ESC or
ENTER keys do not function as expected.
<P>
<P><h2>CAUSE</h2>
 
<P>
IsDialogMessage() function is called in the PreTranslateInput() function
which in turn is called in the PreTranslateMessage() function of all
CFormView or CDialog derived classes mentioned above. The ESC and ENTER
keys are processed in IsDialogMessage() but are not passed on to the edit
control created by the tree-view control. Thus, these keystrokes have no
effect.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
For Visual C++ 4.xx and later, we can trap the ESC and ENTER keystroke
messages in the PreTranslateMessage() function for all CFormView, CDialog
(modal or modeless) and CPropertyPage (either in modal or modeless
CPropertySheet) derived classes.
<P>
In the code below, m_TreeCtrl is a member variable of those derived classes
and it is of CTreeCtrl data type, and CMyXxx can be any CFormView, CDialog,
or CPropertyPage derived class.
<P>
<PRE>   BOOL CMyXxx::PreTranslateMessage(MSG* pMsg)
   {
      // If edit control is visible in tree view control, sending a
      // WM_KEYDOWN message to the edit control will dismiss the edit
      // control.  When ENTER key was sent to the edit control, the parent
      // window of the tree view control is responsible for updating the
      // item's label in TVN_ENDLABELEDIT notification code.
      if (pMsg-&gt;message == WM_KEYDOWN &amp;&amp;
         pMsg-&gt;wParam == VK_RETURN || pMsg-&gt;wParam == VK_ESCAPE)
      {
         CEdit* edit = m_TreeCtrl.GetEditControl();
         if (edit)
         {
            edit-&gt;SendMessage(WM_KEYDOWN, pMsg-&gt;wParam, pMsg-&gt;lParam);
            return TRUE;
         }
      }
      // CXxxx can be a CFormView, CDialog or CPropertyPage class.
      return CXxxx::PreTranslateMessage(pMsg);
   }

</PRE>For Visual C++ 2.xx, since PreTranslateMessage() is not called for modal
CDialog-derived classes, the sample code above does not apply to the modal
dialog and property page in a modal CPropertySheet derived class. In this
situation, those keystroke messages can be trapped in the overridden OnOK()
(for Enter key) and OnCancel() (for Esc key) functions in either CDialog or
CPropertySheet derived-class. The sample code works fine even in the
absence of both the OK and Cancel buttons from the dialog resource
template.
<P>
NOTE: It is too late to trap those keystroke messages in CPropertyPage's
OnOK() and OnCancel() functions. Therefore, we have to do it in
CPropertySheet-derived class.
<P>
A new member function called IsTreeCtrlEditMessage() is added to the
CDialog or CPropertySheet derived-class. This function sends a WM_KEYDOWN
message to the tree-view's edit control when it is the window with focus.
And it is being called in both overridden OnOK() and OnCancel() functions.
The CMyDxxx in the sample code below can either be a CDialog or a
CPropertySheet derived-class. Note that the MODAL_PROPERTYSHEET constant is
declared and used in IsTreeCtrlEditMessage() so the same code can be
applied to both CDialog and CPropertySheet derived-classes.
<P>
<PRE>   //Set MODAL_PROPERTYSHEET to 1 for modal CPropertySheet-derived class; 0
   //for CDialog-derived class.
   #define MODAL_PROPERTYSHEET  1

   BOOL CMyDxxx::IsTreeCtrlEditMessage(WPARAM KeyCode)
   {
      BOOL       rvalue = FALSE;

      // pWnd is a pointer to either an active CPropertyPage of the modal
      // CPropertySheet or a modal CDialog object.
      CWnd*   pWnd = this;
   #if MODAL_PROPERTYSHEET
      pWnd = GetActivePage();
   #endif

      // IDC_TREECTRL is the ID of the tree view control.
      CTreeCtrl *treectrl = (CTreeCtrl *) pWnd-&gt;GetDlgItem(IDC_TREECTRL);
      if (!treectrl)
         return rvalue;

      // If the edit control of the tree view control has the input focus,
      // sending a WM_KEYDOWN message to the edit control will dismiss the
      // edit control.  When ENTER key was sent to the edit control, the
      // parentwindow of the tree view control is responsible for updating
      // the item's label in TVN_ENDLABELEDIT notification code.
      CWnd*  focus = GetFocus();
      CEdit* edit  = treectrl-&gt;GetEditControl();
      if ((CEdit *) focus == edit)
      {
         edit-&gt;SendMessage(WM_KEYDOWN, KeyCode);
         rvalue = TRUE;
      }
      return rvalue;
   }

   void CMyDxxx::OnOK()
   {
      // Do not dismiss the dialog object if ENTER key was sent to the tree
      // view's edit control.  You may call the CDialog::OnOK() function if
      // this is for CDialog.
      if (!IsTreeCtrlEditMessage(VK_RETURN))
         EndDialog(IDOK);
   }

   void CMyDxxx::OnCancel()
   {
      // Do not dismiss the dialog object if ESC key was sent to the tree
      // view's edit control.  You may call the CDialog::Cancel() function
      // if this is for CDialog.
      if (!IsTreeCtrlEditMessage(VK_ESCAPE))
         EndDialog(IDCANCEL);
   }

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For more information about CTreeCtrl, please refer to the MFC online help
and Win32 SDK help files.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WIN32SDK/Q130691.htm">Q130691</A></B>
   TITLE     : BUG: ESC/ENTER Keys Don't Work When Editing Labels in
               TreeView

</PRE>(c) Microsoft Corporation 1997, All Rights Reserved.
Contributions by Yeong-Kah Tam, Microsoft Corporation
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg kbui MfcUI vcbuglist400 vcbuglist500 kbbuglist<BR>
Version             : 2.0 2.1 2.2 4.0 4.0a 4.1 4.2 4.2<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

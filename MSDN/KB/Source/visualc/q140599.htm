

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: MFC DAO Functions Accepting COleVariant Strings May Fail </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140599">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1995/12/04">
<META NAME="Keywords" CONTENT="kbprg MfcDAO">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The MFC DAO Classes contain methods that accept COleVariant arguments. For example, CDaoRecordset::Seek(), CDaoRecordset::SetFieldValue(), and CDaoRecordset::SetBookMark() accept COleVariant arguments. You may find that these functions do not perfo...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QAY5,QATX,QAD7,QA4B,QAW6,QATZ,QATY,QAGK,QBV8,QAB9,QAA5,QBAQ,QAXC V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: MFC DAO Functions Accepting COleVariant Strings May Fail</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140599</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2,
<P><PRE>     4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The MFC DAO Classes contain methods that accept COleVariant arguments. For
example, CDaoRecordset::Seek(), CDaoRecordset::SetFieldValue(), and
CDaoRecordset::SetBookMark() accept COleVariant arguments. You may find
that these functions do not perform correctly if you are building a
non-UNICODE build of your application and you are assigning a string to a
COleVariant and passing the variant to one of these methods.
<P>
For example, look at the following code, which is shown in MFC Technote
#53:
<P>
<PRE>   COleVariant varFieldValue;
   rs.AddNew();
   varFieldValue = _T("MSFT");
   rs.SetFieldValue(_T("Customer_ID"), varFieldValue);
   varFieldValue = _T("Microsoft");
   rs.SetFieldValue(_T("Customer_Name"), varFieldValue);
   rs.Update();

</PRE>This code causes only the first letters of each string to be copied to the
database with a non-UNICODE build. In this case, the letter M will be
copied to both fields.
<P>
<P><h2>CAUSE</h2>
 
<P>
MFC creates ANSI DAO objects when building non-UNICODE builds and creates
UNICODE DAO objects when building UNICODE builds. For example, look at the
following code in AfxDaoInit():
<P>
<PRE>      GUID guidEngine;
</PRE>#ifdef _UNICODE
<PRE>      guidEngine = IID_IDAODBEngineW;
</PRE>#else
<PRE>      guidEngine = IID_IDAODBEngine;
</PRE>#endif
<P>
The ANSI DAO objects require ANSI BSTRs for any strings that they receive.
When you initialize a COleVariant object using:
<P>
<PRE>   COleVariant varFieldValue(_T("some string"));

   -or-

   COleVariant varFieldValue;
   varFieldValue = _T("MSFT");

</PRE>the COleVariant will contain a UNICODE BSTR regardless of whether the build
is UNICODE or non-UNICODE. This is not what DAO expects.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are two techniques you can use to initialize the COleVariant
properly. If you are only concerned about setting the BSTR value of the
COleVariant at construction time, use this code:
<P>
<PRE>    COleVariant varFieldValue(_T("SomeString"), VT_BSTRT);

</PRE>The VT_BSTRT constant specifies that the BSTR will be a UNICODE BSTR with a
UNICODE build and it will be a ANSI BSTR in a non-UNICODE build.
<P>
If you need to change the value of the variant often, you may want to
create a helper function:
<P>
<PRE>    void FillVariant(COleVariant &amp; var, LPCTSTR lpszSrc)
    {
        var.vt=VT_BSTR;
        if (lpszSrc==NULL)
            var.bstrVal=NULL;
        else
        {
    #ifndef _UNICODE
        int nLen = lstrlen(lpszSrc);
        var.bstrVal = SysAllocStringByteLen(lpszSrc, nLen);
    #else
        var.bstrVal = SysAllocString(lpszSrc);
    #endif
        }
    }

</PRE>With Visual C++ 4.2 or higher, COleVariant contains a SetString() function
that can be used instead of the FillVariant() function above.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Seek SetFieldValue SetCacheStart SetBookMark<BR>
SetParamValue<BR>
Keywords            : kbprg MfcDAO<BR>
Technology          : kbMfc<BR>
Version             : 4.0 4.1 4.2 4.2b 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

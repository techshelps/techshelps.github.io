

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Incorrect Float/Double Value Returned in /AS or /AM Model </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115703">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/06/01">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The value returned from a DLL function to the application which called it is incorrect. This occurs with functions that return either a double or a float, if either small memory model (/AS) or medium memory model (/AM) is used.  If the .EXE is larg...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7R,QAHH,QAPF,QBII,QAGI,QAUD,QAH4,QAAP,QBFY,QBE7,QBE6,QAKD,QAFO,QDO7,QAIH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Incorrect Float/Double Value Returned in /AS or /AM Model</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115703</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The value returned from a DLL function to the application which called it
is incorrect. This occurs with functions that return either a double or a
float, if either small memory model (/AS) or medium memory model (/AM) is
used.
<P>
If the .EXE is large model (/AL), the correct code is generated.
<P>
<P><h2>CAUSE</h2>
 
<P>
The code generated incorrectly assumes that _fac, the location where a
pointer to the float return value is stored, is near in the small and
medium memory models. This causes the wrong value to be returned, since the
data segment assumed for _fac is incorrect.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
In order to work around the problem, compile the .EXE using the large
memory model, rather than the medium or small memory models.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the C/C++ compiler for MS-
DOS, versions 8.0 and 8.0c. We are researching this problem and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For example, suppose a large model DLL exports the following function:
<P>
<PRE>   double __export mul( double x, double y )
   {
      double z;
      z = x * y;
      return z;
   }

</PRE>The compiler incorrectly generates the following code for a call to mul()
in a small or medium model Windows-based application:
<P>
<PRE>;|***     y = mul( x, z );             /* call to mul() */
</PRE>; Line 104
<PRE>     *** 00016e     ff 76 ec           push     WORD PTR [bp-20]
     *** 000171     ff 76 ea           push     WORD PTR [bp-22]
     *** 000174     ff 76 e8           push     WORD PTR [bp-24]
     *** 000177     ff 76 e6           push     WORD PTR
 [bp-26]     ;z
     *** 00017a     ff 76 fc           push     WORD PTR [bp-4]
     *** 00017d     ff 76 fa           push     WORD PTR [bp-6]
     *** 000180     ff 76 f8           push     WORD PTR [bp-8]
     *** 000183     ff 76 f6           push     WORD PTR
 [bp-10]     ;x
     *** 000186     9a 00 00 00 00     call     FAR PTR _mul
     *** 00018b     83 c4 10           add      sp,16     ;0010H
     *** 00018e     8d 7e ee           lea      di,WORD PTR
 [bp-18]     ;y
     *** 000191     8b f0              mov      si,ax     //only ax
 is moved
     *** 000193     16                 push     ss
     *** 000194     07                 pop      es
     *** 000195     a5                 movsw
     *** 000196     a5                 movsw
     *** 000197     a5                 movsw
     *** 000198     a5                 movsw

</PRE>If large model is used, the following code is correctly generated:
<P>
<PRE>;|***     y = mul( x, z );          /* call to mul() */
</PRE>; Line 104
<PRE>     *** 000178     ff 76 e4           push     WORD PTR [bp-28]
     *** 00017b     ff 76 e2           push     WORD PTR [bp-30]
     *** 00017e     ff 76 e0           push     WORD PTR [bp-32]
     *** 000181     ff 76 de           push     WORD PTR
 [bp-34]     ;z
     *** 000184     ff 76 f4           push     WORD PTR [bp-12]
     *** 000187     ff 76 f2           push     WORD PTR [bp-14]
     *** 00018a     ff 76 f0           push     WORD PTR [bp-16]
     *** 00018d     ff 76 ee           push     WORD PTR
 [bp-18]     ;x
     *** 000190     9a 00 00 00 00     call     FAR PTR _mul
     *** 000195     83 c4 10           add      sp,16     ;0010H
     *** 000198     1e                 push     ds
     *** 000199     8d 7e e6           lea      di,WORD PTR
 [bp-26]     ;y
     *** 00019c     8b f0              mov      si,ax
     *** 00019e     16                 push     ss
     *** 00019f     07                 pop      es
     *** 0001a0     8e da              mov      ds,dx  // the value
 of dx
     ASSUME DS: NOTHING         // is moved into ds
     *** 0001a2     a5                 movsw
     *** 0001a3     a5                 movsw
     *** 0001a4     a5                 movsw
     *** 0001a5     a5                 movsw
     *** 0001a6     1f                 pop      ds
     ASSUME DS: DGROUP

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 8.00 8.00c floating point error<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: CodeGen<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

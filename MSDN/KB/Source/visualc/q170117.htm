

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use GUID Fields in Access from Visual C++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170117">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1997/06/14">
<META NAME="Keywords" CONTENT="MfcDAO MfcDatabase">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Microsoft Access 95 introduced a new GUID (Globally Unique Identifier) data type used for database replication. You can use GUID fields (called Replication ID fields in Access) to store any GUID number in a compact 16-byte binary format that can be...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7N,QA7O,QA1S,QAPN,QDN9,QACI,QA9N,QDKY,QBFY,QAXB,QAH4,QBC6,QABM,QBXR,QAY4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use GUID Fields in Access from Visual C++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170117</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.0a, 4.1, 4.2,
   4.2b, 5.0, 5.0sp1 on the following platform:
   - x86
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Access 95 introduced a new GUID (Globally Unique Identifier) data
type used for database replication. You can use GUID fields (called
Replication ID fields in Access) to store any GUID number in a compact
16-byte binary format that can be indexed and used as a primary key for a
table. This article explains how to create and use Microsoft Access GUID
data type fields with Visual C++ MFC database classes.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Creating a GUID Field Using SQL DDL</h3>
 
<P>
Microsoft Access GUID fields can be created using a "CREATE TABLE" SQL DDL
statement. The following code will create a table called MyGUIDTable with a
GUID field named MyGUIDField in database c:\db1.mdb using SQL DDL:
<P>
<PRE>   CDaoDatabase db;
   db.Open(_T("c:\\db1.mdb"));
   db.Execute(_T("CREATE TABLE MyGUIDTable (MyGUIDField GUID)"));

</PRE>The DDL method above will also work using the CDatabase::ExecuteSQL method
against the Microsoft Access ODBC driver.
<P>
<P><h3>Creating a GUID Field Using CDaoTableDef::CreateField()</h3>
 
<P>
You can also use a CDaoTableDef to create GUID data type field using the
CreateField method:
<P>
<PRE>   CDaoDatabase db;
   db.Open(_T("c:\\db1.mdb"));

   // Create new tabledef and create GUID field.
   CDaoTableDef td(&amp;db);
   td.Create(_T("MyGUIDTable"));
   td.CreateField("MyGuidField", dbGUID, 16);  // Note: field size is 16.

   // Append table to tabledefs collection to create physical table.
   td.Append();

</PRE><h3>Inserting and updating GUID fields using SQL</h3>
 
<P>
You can both insert and update GUID fields using standard SQL INSERT INTO
and UPDATE syntax. GUIDs are commonly displayed in textual format as:
<P>
<PRE>   {11223344-1122-1122-1122-AABBCCDDEEFF}

</PRE>Microsoft Access requires a similar textual format when using GUIDs in SQL
statements:
<P>
<PRE>   {guid {11223344-1122-1122-1122-AABBCCDDEEFF}}

</PRE>The following code will insert a GUID field into the MyGUIDTable table:
<P>
<PRE>   CDaoDatabase db;
   db.Open(_T("c:\\db1.mdb"));
   db.Execute(_T("INSERT INTO MyGUIDTable (MyGuidField) VALUES
      ({guid {11223344-1122-1122-1122-AABBCCDDEEFF}})"));

</PRE>You can also use a GUID in the SET portion of an UPDATE SQL statement:
<P>
<PRE>   SET MyGuidField = {guid {11223344-1122-1122-1122-AABBCCDDEEFF}}

</PRE>Note that you do not need quotes around the GUID field.
<P>
<P><h3>Inserting and Updating GUID Fields Using CDaoRecordset</h3>
 
<P>
When using GUID fields with DAO objects, you create a VT_BSTRT type
COleVariant field using the same textual GUID syntax as the SQL method
above. This code demonstrates how to insert a GUID field using
CdaoRecordset methods:
<P>
<PRE>   // Open database and recordset objects.
   CDaoDatabase db;
   db.Open(_T("c:\\db1.mdb"));
   CDaoRecordset rs(&amp;db);
   rs.Open(dbOpenTable,_T("MyGUIDTable"));

   // Create VT_BSTRT variant for GUID.
   COleVariant varGUIDValue(_T("{guid    {11223344-1122-1122-1122-
   AABBCCDDEEFF}}"), VT_BSTRT);

   // Add record using CDaoRecordset method.
   rs.AddNew();
      rs.SetFieldValue(_T("MyGUIDField"),varGUIDValue);
   rs.Update();

</PRE>The same process applies to updating GUID fields, except that you would use
the Edit rather than the AddNew method.
<P>
NOTE: When calling GetFieldValue(), the variant is returned as type
VT_BSTR.
<P>
<P><h3>Using Seek And FindFirst with GUID Fields</h3>
 
<P>
Microsoft Access does not allow you to use GUID fields with the Find
methods available to CDaoRecordset. If you attempt to use a Find method
with a GUID field, the following error message appears:
<P>
<PRE>   GUID not allowed in Find method criteria expression

</PRE>You can use the Seek method with GUIDs:
<P>
<PRE>   // Open database.
   CDaoDatabase db;
   db.Open(_T("c:\\db1.mdb"));

   // Create a table called MySeekTable with a GUID primary key field named
   // ID and a field named Found.
   db.Execute(_T("create table MySeekTable (ID guid constraint PKEY primary
   key, Found text)"));

   // Insert a few records using an insert into statement.
   db.Execute(_T("insert into MySeekTable (ID, Found) values ({guid
   {11111111-aabb-aabb-aabb-aabbccddeeff}},'Guid1')"));
   db.Execute(_T("insert into MySeekTable (ID, Found) values ({guid
   {22222222-aabb-aabb-aabb-aabbccddeeff}},'Guid2')"));
   db.Execute(_T("insert into MySeekTable (ID, Found) values ({guid
   {33333333-aabb-aabb-aabb-aabbccddeeff}},'Guid3')"));

   // Open table-type recordset (must use table-type for Seek) and select
   // index for seek.
   CDaoRecordset rs(&amp;db);
   rs.Open(dbOpenTable,_T("MySeekTable"));
   rs.SetCurrentIndex(_T("PKEY"));

   // Construct the GUID you want to find and seek the GUID.
   COleVariant varGUIDValue(_T("{guid {22222222-aabb-aabb-aabb-
   aabbccddeeff}}"), VT_BSTRT);

   if (rs.Seek(_T("="),&amp;varGUIDValue)) {
      // GUID found. Retrieve and display value.
      CString strResult = V_BSTRT(&amp;rs.GetFieldValue(_T("Found")));
      AfxMessageBox("Seek of guid found '" + strResult + "'");
   } else {
      // GUID not found.
      AfxMessageBox("Seek of guid failed.");
   }

</PRE><h3>Using GUID Fields with MFC ClassWizard-Generated Recordsets</h3>
 
<P>
The MFC ClassWizard automatically binds GUID fields to a CString class
member and sets up the proper DoFieldExchange macros. No additional changes
are needed to display, insert, and update GUID fields when you use the MFC
ClassWizard to create CRecordset or CDaoRecordset derived classes. The
fields are displayed in the Microsoft Access GUID format:
<P>
<PRE>   {guid {11223344-1122-1122-1122-AABBCCDDEEFF}}

</PRE><h3>Creating "AutoNumber" GUID Fields Programmatically</h3>
 
<P>
Microsoft Access also provides an "AutoNumber" type GUID field. You can use
this type of field for the primary key of a table and let Access
automatically generate each new GUID. The GUIDs are randomly generated by
the Microsoft Jet database engine each time a record is inserted into the
table using an complex algorithm that will avoid duplicates over all
databases in the world until the year 3400 AD.
<P>
You cannot create an "AutoNumber" type GUID field using SQL DDL, you must
use DAO code. The following code demonstrates how to create an "AutoNumber"
type GUID field using CDaoTableDef::CreateField method:
<P>
<PRE>   // Open database and create tabeldef.
   CDaoDatabase db;
   db.Open(_T("c:\\db1.mdb"));
   CDaoTableDef td(&amp;db);
   td.Create(_T("MyGUIDTable"));

   // Create and fill out a CDaoFieldInfo structure.
   CDaoFieldInfo fi;
   fi.m_strName = _T("ID");
   fi.m_nType = dbGUID;
   fi.m_lSize = 16;
   fi.m_nOrdinalPosition = 0;
   fi.m_bAllowZeroLength = FALSE;
   fi.m_bRequired = FALSE;
   fi.m_lAttributes = dbSystemField;
   fi.m_strValidationRule = _T("");
   fi.m_strValidationText = _T("");
   fi.m_strDefaultValue = _T("GenGUID()"); // This generates the GUID.

   // Create field using CDaoFieldInfo constructor and append table.
   td.CreateField(fi);
   td.Append();

</PRE><h2>REFERENCES</h2>
 
<P>
Microsoft Jet Database Engine Programmer's Guide, p. 246
 
<PRE>Keywords          : MfcDAO MfcDatabase
Technology        : kbMfc
Version           : 4.0 4.0a 4.1 4.2 4.2b 5.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

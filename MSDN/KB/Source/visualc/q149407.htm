

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Display a Bitmap in a CStatusBar Pane </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149407">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1996/04/01">
<META NAME="Keywords" CONTENT="MfcUI kbcode kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The standard status bar in an MFC application easily allows the application to display its status. Sometimes it is a good idea to display the status using bitmaps or other graphic entities. MFC's CStatusBar class directly supports displaying text, ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBTL,QAH4,QAGQ,QBFY,QA56,QA55,QAI4,QAFR,QABO,QAUD,QAO2,QABB,QAPF,QADZ,QABG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Display a Bitmap in a CStatusBar Pane</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149407</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00 4.10
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbhowto kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition,
      versions 1.0, 2.0, 2.1, 2.2, 4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The standard status bar in an MFC application easily allows the application
to display its status. Sometimes it is a good idea to display the status
using bitmaps or other graphic entities. MFC's CStatusBar class directly
supports displaying text, but not graphics, in its panes. This article
shows by example how to display a bitmap in a CStatusBar pane.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
It is not very difficult to display a bitmap in a status bar pane. The code
at the end of this article will let you display a bitmap in pane 1 of the
status bar. Put the code in a Default AppWizard application, and add a new
pane to the status bar before the standard panes. Please refer to online
documentation for CStatusBar for information on how to add a pane to the
status bar.
<P>
With Visual C++ 4.0 and later, MFC's CStatusBar uses the status window
common control. In earlier versions, CStatusBar was implemented in MFC.
Hence the code required for displaying bitmap in a CStatusBar pane is
different.
<P>
You can add the sample code to an application built with an earlier version
of Visual C++ (a version previous to 4.0), and then recompile the
application using Visual C++ 4.0 without modifying the code. If you are
using Visual C++ 4.0 or later, you need not add code between the
<P>
<PRE>   #if _MFC_VER &lt; 0x400
   ...
   #endif

</PRE>directives.
<P>
<P><h3>Step-by-Step Example and Sample Code</h3>
 

<OL><P><LI>Derive a class from CStatusBar (for example, CMyStatusBar), and use this
   class instead of CStatusBar in CMainFrame.

<P><LI>Add the following member functions to the class definition in the .h
   file:
<P>
   class CMyStatusBar : public CStatusBar
   {
   ...
   #if _MFC_VER &lt; 0x400
<P><PRE>       virtual void DoPaint(CDC* pDC);
</PRE>   #endif
<P>
   #if _MFC_VER &gt;= 0x400
<P><PRE>       virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);
</PRE>   #endif
   ...
   }

<P><LI>Add the following code for the functions in the .cpp file:
<P>
   #if _MFC_VER &lt; 0x400
<PRE>   void CMyStatusBar::DoPaint(CDC* pDC)
   {
       CRect rect;
       GetItemRect(1, &amp;rect);  // get pane rect
       pDC-&gt;ExcludeClipRect(&amp;rect);  // exclude pane rect from paint
       CStatusBar::DoPaint(pDC);  // paint remainder of status bar

       CRgn paneRgn;
       paneRgn.CreateRectRgnIndirect(rect);
       pDC-&gt;SelectClipRgn(&amp;paneRgn); // set clip region to pane rect

       CBitmap* pBitmap = /* pointer to current CBitmap */;
       CDC srcDC; // select current bitmap into a compatible CDC
       srcDC.CreateCompatibleDC(NULL);
       CBitmap* pOldBitmap = srcDC.SelectObject(pBitmap);
       pDC-&gt;BitBlt(rect.left, rect.top, rect.Width(), rect.Height(),
                 &amp;srcDC, 0, 0, SRCCOPY); // BitBlt to pane rect
       srcDC.SelectObject(pOldBitmap);
   }
   #endif

   #if _MFC_VER &gt;= 0x400
   void CMyStatusBar::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct)
   {
       switch(lpDrawItemStruct-&gt;itemID)
       {
       case 1:
           // Attach to a CDC object
           CDC dc;
           dc.Attach(lpDrawItemStruct-&gt;hDC);

           // Get the pane rectangle and calculate text coordinates
           CRect rect(&amp;lpDrawItemStruct-&gt;rcItem);

           CBitmap* pBitmap = /* pointer to current CBitmap */;
           CDC srcDC; // select current bitmap into a compatible CDC
           srcDC.CreateCompatibleDC(NULL);
           CBitmap* pOldBitmap = srcDC.SelectObject(pBitmap);
           dc.BitBlt(rect.left, rect.top, rect.Width(), rect.Height(),
                     &amp;srcDC, 0, 0, SRCCOPY); // BitBlt to pane rect
           srcDC.SelectObject(pOldBitmap);

           // Detach from the CDC object, otherwise the hDC will be
           // destroyed when the CDC object goes out of scope
           dc.Detach();

           return;
       }

       CStatusBar::DrawItem(lpDrawItemStruct);
   }
   #endif

</PRE><P><LI>Add the following code to CMainFrame::OnCreate().
<P>
<PRE>   int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
   {
   ...
       if (!m_wndStatusBar.Create(this) ||
           !m_wndStatusBar.SetIndicators(indicators,
             sizeof(indicators)/sizeof(UINT)))

           TRACE0("Failed to create status bar\n");
           return -1;      // fail to create
       }

   // Add the following code
   #if _MFC_VER &gt;= 0x400
       UINT nID, nStyle;
       int cxWidth;

       m_wndStatusBar.GetPaneInfo(1, nID, nStyle, cxWidth);
       m_wndStatusBar.SetPaneInfo(1, nID, nStyle | SBT_OWNERDRAW,
           cxWidth);
   #endif
   ...
   }

</PRE></OL><h2>REFERENCES</h2>
 
<P>
Visual C++ Books Online and the Windows SDK docuemntation.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 1.51 1.52 2.00 2.10 2.20<BR>
2.50 2.51 2.52 3.00 3.10 3.20 4.00 4.10<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbcode kbhowto kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Build Custom COM Interface Marshalers with Visual C++ </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q164149">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1997/02/24">
<META NAME="Keywords" CONTENT="TlsMisc VwbIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Custom COM interfaces that must be used cross-process or cross-apartment require marshaling support. This article explains how to set up a Visual C++ 4.0 project to build a self-registering standard marshaler from an IDL script that describes your ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QBBS,QABI,QAJN,QAMB,QABA,QA56,QA55,QAA5,QARW,QABB,QAUJ,QA01,QAPF,QAG0 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Build Custom COM Interface Marshalers with Visual C++</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q164149</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Custom COM interfaces that must be used cross-process or cross-apartment
require marshaling support. This article explains how to set up a Visual
C++ 4.0 project to build a self-registering standard marshaler from an IDL
script that describes your custom interface.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To generate a standard marshaler, write an IDL file that describes your
custom interface. The Microsoft Interface Definition Language (MIDL)
compiler is used to generate source files for the marshaler DLL from the
IDL file. Once these files are generated, you compile and link the code to
produce the marshaler DLL.
<P>
Visual C++ does not provide built-in rules for compiling IDL files using
the MIDL compiler. However, you can use the custom build feature to add the
necessary rules to your project.
<P>
To generate a standard marshaler for the interface IMyInterface:

<OL><P><LI>Create a new Dynamic-Link Library project using Developer Studio. This
   can either be a new project workspace or a subproject of an existing
   workspace.
<P>
   NOTE: The project name is also used as the name of the marshaler
   DLL. For example, PS&lt;interface&gt;.

<P><LI>Create a new file called IMyInterface.IDL, and enter the description of
   your new interface.

<P><LI>Insert the file IMyInterface.IDL into the project.

<P><LI>Go to the project Build Settings dialog box and select IMyInterface.IDL
   in all of the project's configurations.
<P>
   NOTE: Make sure that you have selected the file in all of your project's
   configurations.

<P><LI>Click the Custom Build tab and type the following entries:
<P>
   Description:
<P><PRE>      Compiling Interface Definition
</PRE><P>
   Build Commands:
<P><PRE>      midl.exe /ms_ext /char unsigned /c_ext /out "$(InputDir)"
      "$(InputPath)"
</PRE><P>
   Output File(s):
<P><PRE>      $(InputDir)\$(InputName).h
      $(InputDir)\dlldata.c
      $(InputDir)\$(InputName)_i.c
      $(InputDir)\$(InputName)_p.c
</PRE><P>
   Close the Build Settings dialog box.

<P><LI>Add the file RPCHelp.c to your project by typing the following code:
<P>
<P><PRE>      #pragma comment(lib, "rpcndr.lib")
      #pragma comment(lib, "rpcdce4.lib")
      #pragma comment(lib, "rpcns4.lib")
      #pragma comment(lib, "rpcrt4.lib")
</PRE>
<P><LI>Add the following three files to your project:
<P>
<P><PRE>      dlldata.c
      IMyInterface_i.c
      IMyInterface_p.c
</PRE><P>
   Since the files don't exist yet, you need to type the names in the
   File Name field on the Insert File dialog box. When you get the warning
   message that the file doesn't exist, click Yes.

<P><LI>Use the following PSSample.def file as a model to create a DEF file for
   your project:
<P>
<PRE>      LIBRARY     PSSAMPLE
      DESCRIPTION 'Sample custom interface marshaler'
      EXPORTS
         DllGetClassObject PRIVATE
         DllCanUnloadNow PRIVATE
         DllRegisterServer PRIVATE
         DllUnregisterServer PRIVATE


   NOTE: Make sure you change the library name to match the name of your
   marshaler DLL.

</PRE><P><LI>Add your new DEF file to the project.

<P><LI>Open the project Build Settings dialog box and select your project
   (make sure that you select all configurations). Click the C++ tab and
   add the value REGISTER_PROXY_DLL to the Preprocessor Definitions field.

<P><LI>Click the Custom Build tab and enter the following values:
<P>
   Description:
<P><PRE>      Registering Custom Interface Marshaler
</PRE><P>
   Build Command(s):
<P><PRE>      regsvr32 /s /c "$(TargetPath)"
      echo regsvr32 exe. time &gt; "$(OutDir)\regsvr32.trg"
</PRE><P>
   Output File(s):
<P><PRE>      $(OutDir)\regsvr32.trg
</PRE><P>
   Close the Build Settings dialog box.
<P>
</OL>Your project is now configured to properly build and register the custom
interface marshaler.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Help file; Topic: "Specifying Custom Build Tools"
<P>
Visual C++ InfoViewer; Topic: "SDKs\Win32 SDK\RPC"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: MIDL marshal custom interface<BR>
Keywords          : TlsMisc VwbIss<BR>
Technology        : kbole<BR>
Version           : WINNT:4.0,5.0;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

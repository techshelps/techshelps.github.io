

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Debugger Shows Incorrect "this" Pointer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143109">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1996/01/28">
<META NAME="Keywords" CONTENT="CLIss vcbuglist400 vcbuglist500 WBDebug">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Visual C++ 4.0, when you debug a class that uses multiple inheritance, the  this  pointer for any of the base classes that reside at an offset in the class are displayed incorrectly. Data for derived classes is not displayed correctly either bec...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QABO,QAR4,QAO3,QAO2,QBFY,QA2O,QABA,QAH4,QAKP,QA5A,QA4Q,QA0K,QA56,QA55 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Debugger Shows Incorrect "this" Pointer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143109</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Visual C++ 4.0, when you debug a class that uses multiple inheritance,
the "this" pointer for any of the base classes that reside at an offset
in the class are displayed incorrectly. Data for derived classes is not
displayed correctly either because the debugger attempts to reference the
data by using the invalid "this" pointer.
<P>
In Visual C++ 4.1 or 4.2, only the value of "this" pointer is not shown
correctly. All the members are displayed correctly.
<P>
<P><h2>CAUSE</h2>
 
<P>
The compiler produces incorrect debugging information causing a display
error in the debugger only. The vtable entries themselves are correct, and
programmatic access to the data produces the proper values.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
The only way to work around this problem is to output the addresses to an
output device. You may use a TRACE statement or cout() as shown in the
sample code below.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Demonstrate Problem</h3>
 
<P>
<PRE>   /* This code demonstrates the problem.
      Compile options needed: none
   */

   #include &lt;iostream.h&gt;

   // Class defenitions
   class A
   {
   protected:
      int aint;
   public:
       virtual void fA(void) = 0;
   };

   class B
   {
   protected:
      int bint;
   public:
       virtual void fB(void) = 0;
   };

   class AB : public A, public B
   {
   protected:
      int abint;
   public:
       virtual void fAB(void);
   };

   class DAB : public AB
   {
   protected:
      int dabint;
   public:
      DAB() {aint = 1; bint = 2; abint = 3; dabint = 4;}
       void fA(void)
       {
           cout &lt;&lt; "DAB::fA - this=" &lt;&lt; this &lt;&lt; endl;
       }
       void fB(void)
       {
      // The "this" pointer will be displayed incorrectly in the
      // locals window during the execution of this function. The
      // address displayed in the output window will still be correct.

           cout &lt;&lt; "DAB::fB - this=" &lt;&lt; this &lt;&lt; endl;

      // The base class member variables "aint" and "bint" will be
      // displayed incorrectly in the locals window, but the derived
      // class member variables "abint" and "dabint" will be
      // incorrect.  All will show correct values in the final output.

         cout &lt;&lt; "aint: " &lt;&lt; aint &lt;&lt; " bint: " &lt;&lt; bint
            &lt;&lt; " abint: " &lt;&lt; abint &lt;&lt; " dabint: " &lt;&lt; dabint &lt;&lt;
    endl;
       }
   };

   void AB::fAB(void)
   {
       cout &lt;&lt; "AB::fAB - this=" &lt;&lt; hex &lt;&lt; this &lt;&lt; endl;
       fA();
       fB();
   }

   void main()
   {
       DAB dab;
       dab.fAB();
   }

   void AB::fAB(void)
   {
       cout &lt;&lt; "AB::fAB - this=" &lt;&lt; hex &lt;&lt; this &lt;&lt; endl;
       fA();
       fB();
   }

   void main()
   {
       DAB dab;
       dab.fAB();
   }
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CLIss vcbuglist400 vcbuglist500 WBDebug<BR>
Version             : 4.0 4.1 4.2 5.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Regaut.exe Registers an Automation Object as Active </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q155690">
<META NAME="KBModify" CONTENT="1998/02/17">
<META NAME="KBCreate" CONTENT="1996/09/05">
<META NAME="Keywords" CONTENT="MfcOLE kbsample">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Regaut.exe is a sample Microsoft Foundation Classes (MFC) Appwizard- generated application that shows how to register a running object as active in the running object table (ROT) so that multiple clients can connect to it. The CDocument derived cla...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QA2K,QBWS,QAGI,QARL,QAML,QDKA,QBS0,QAPF,QAJH,QAJQ,QAY2,QABT,QAIJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Regaut.exe Registers an Automation Object as Active</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q155690</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0,
   4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Regaut.exe is a sample Microsoft Foundation Classes (MFC) Appwizard-
generated application that shows how to register a running object as active
in the running object table (ROT) so that multiple clients can connect to
it. The CDocument derived class CRegautDoc of this sample acts as the
automation object, which is registered in the running object table every
time a new document is created or an existing document is opened. By
registering its document as active, this sample application demonstrates
how multiple clients can attach to a single automation object in a local
server and share its data.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Regaut.exe">Regaut.exe</A> <I>(size: 54719 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running Regaut.exe to decompress the file and
re-create the proper directory structure.
<P>
The Regaut sample includes a Visual Basic client application called
Vbclient.exe. Vbclient.exe tries to attach to the Regaut server's document
by calling the Visual Basic GetObject API, which looks for the object in
the ROT; if that fails, it creates the object using the Visual Basic
CreateObject API. Once the first Vbclient.exe has been started, more
instances of Vbclient.exe can be started, which attach to the already
running Regaut document. All instances of Vbclient.exe share the same
automation object. A C++ version of Vbclient.exe, Vcclient.exe, is also
included.
<P>
Another way to use this sample is to start the Regaut.exe application.
After Regaut is running, start as many instances of Vbclient.exe as you
want. All of these instances attach to the already running Regaut document.
Each instance of Vbclient.exe can retrieve and change the Regaut document's
data. When the Vbclient.exe applications are done accessing the Regaut
document's data, they can shut down, leaving Regaut running with its
document containing the data from the last Vbclient.exe that changed
Regaut's data.
<P>
Regaut.exe also demonstrates the correct way to leave an automation server
running if the automation client makes the automation server's application
window visible. If during the course of automating a server, a client makes
the server’s application window visible, the server should shut down only
in response to an explicit user or automation client command (such as the
Exit command from the File menu or the equivalent).
<P>
The CRegautDoc::RegisterAsActive() function registers the Regaut document
as active when a new document is created or when an existing document is
opened. It does this by registering The CRegautDoc's IUnknown pointer in
the running object table using the OLE API RegisterActiveObject.
RegisterActiveObject has the following prototype:
<P>
<PRE>   HRESULT RegisterActiveObject (IUnknown FAR* punk,
                                 REFCLSID rclsid,
                                 DWORD dwFlags,
                                 unsigned long FAR* pdwRegister);

</PRE>NOTE: punk is the IUnknown * for the object we want to register. You get
this pointer in Regaut by calling CCmdTarget::GetControllingUnknown().
<P>
The rclsid parameter is the clsid of the local server, which OLE uses to
identify this object in the ROT. Automation clients use this clsid to
search for this object in the ROT and to create this object. This clsid is
generated by Appwizard when you choose the Automation support option while
generating your application. It is created as a member variable of the
CWinApp derived class, so Regaut just uses a helper function in CRegautApp
to access this value from other classes.
<P>
The dwFlags parameter specifies how you would like to register the active
object in the running object table. You can either register with a strong
lock ACTIVEOBJECT_STRONG or a weak lock ACTIVEOBJECT_WEAK. For automation
objects, ACTIVEOBJECT_WEAK is almost always used. Online documentation for
RegisterActiveObject in Visual C++ Books online has a detailed discussion
of the differences between registering your automation object weak versus
strong. You should be familiar with this documentation before you use
RegisterActiveObject. Regaut.exe uses ACTIVEOBJECT_WEAK.
<P>
The pdwRegister parameter is a value returned by OLE to
RegisterActiveObject that is used in calls to RevokeActiveObject to
explicitly remove an object's entry from the ROT.
<P>
When a client application has connected to Regaut and wants to make it
visible, the client calls the ShowWindow() method. Once the Regaut window
is visible, the Regaut document makes sure the Regaut application stays
running after the last client disconnects by calling
AfxSetUserControl(TRUE). This ensures that Regaut.exe will not shut down
after the last client detaches but does not ensure that the current
document will close after the last client detaches.
<P>
To ensure that the current document does not close, CRegautDoc calls
CoLockObjectExternal(GetControllingUnknown(),TRUE,TRUE) to put an external
lock on the document. When the user does decide to shut down the CRegaut
application or otherwise close the document,
CoLockObjectExternal(GetControllingUnknown(),FALSE,TRUE) is called to
remove the external lock on the document object. The calls to
AfxSetUserControl and CoLockObjectExternal ensure that the automation
server behaves correctly if the application window becomes visible. Having
the server's application window become visible is also known as putting the
user in control.
<P>
This article demonstrates registering an object on the Running Object Table
(ROT) with the RegisterActiveObject API. RegisterActiveObject registers an
object using that objects GUID. To uniquely identify objects of the same
type on the ROT it is necessary to register the object with a moniker.
<B><A HREF="../VISUALC/Q152087.htm">Q152087</A></B> demonstrates how to register a moniker on the ROT with
IRunningObject::Register however, please keep in mind the this is not what
this sample was written to illustrate.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books Online
 
<PRE>Keywords          : MfcOLE kbsample
Technology        : kbole kbMfc
Version           : WINDOWS NT:2.0,2.1,2.2,4.0,4.1,4.2,5.0
Platform          : NT WINDOWS
Issue type        : kbfile</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

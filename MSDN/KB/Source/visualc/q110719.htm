

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: CTime DDX Routine for CRecordView Date Fields </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110719">
<META NAME="KBModify" CONTENT="1998/03/20">
<META NAME="KBCreate" CONTENT="1994/01/27">
<META NAME="Keywords" CONTENT="MfcDatabase">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Create a Microsoft Foundation Classes (MFC) Open Database Connectivity (ODBC) application associated with an ODBC data source which contains a date or time field. The generated application's CRecordSet derived class will contain a CTime member vari...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACE,QAHP,QAYL,QA7O,QAY5,QABO,QA7N,QAUD,QAPN,QAGI,QA9E,QAW6,QBV8,QBJQ,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: CTime DDX Routine for CRecordView Date Fields</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 20, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110719</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes included with:
   - Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 2.0, 2.1, 4.0, 4.1, 4.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Create a Microsoft Foundation Classes (MFC) Open Database Connectivity
(ODBC) application associated with an ODBC data source which contains a
date or time field. The generated application's CRecordSet derived class
will contain a CTime member variable associated with the date/time field
through an RFX_Date() call in the class's DoFieldExchange() member
function.
<P>
Edit the dialog box template associated with the CRecordView derived class
of the application and create a new edit control on the dialog template.
<P>
With focus on the edit control, start ClassWizard by pressing CTRL+W,
choosing the Member Variables tab, and clicking "Add Variable," or by just
holding the CTRL key down and double-clicking the edit control. This will
bring you to the Add Member Variable dialog box. In this dialog box the
Member Variable Name combo box will not contain any of the CRecordSet
derived class's CTime member variables associated with the date/time fields
of the data source, and therefore no date/time field can be associated with
the edit control.
<P>
A potential source of errors can be attempting to force a CTime object into
an edit control using a previously existing DDX_FieldText() function call
within the CRecordView derived class's DoDataExchange(). For example,
calling CTime::Format() inside of the call to DDX_FieldText() so that its
returned CString is passed to DDX_FieldText() can result in any of the
following errors:
<P>
<PRE>   Maximum number of characters is 38.
   Please enter no more than 38 characters.

   -or-

   Please enter no more than 7 characters.

   -or-

   General Protection Fault.

   -or-

   Debug Assertion Failed!
   File: dbcore.cpp
   Line: 2325

</PRE>If a CString returned from CTime::Format() is passed to DDX_FieldText(),
make sure that a non local member CString variable is set to the return
value of CTime::Format(). Otherwise the CString returned will be
considered temporary and will be destroyed when the DoDataExchange()
function returns, possibly causing the functions accessing it to corrupt
memory.
<P>
<P><h2>CAUSE</h2>
 
<P>
There is a pre-defined Record Field Exchange (RFX) routine, RFX_DATE(),
that can read a date from an ODBC data source into a CTime object.
However, there is no predefined dialog data exchange (DDX) routine for
CTime objects. The overloaded DDX_FieldText() function does not support
CTime objects. This is because a CTime object represents both a date and a
time of day and there is no simple conversion that represents both of
these in an edit control.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
DDX_FieldText() DDX routines can be written for any data type. These
functions are overloaded, and new editions of the function can be created
to provide the same functionality for any data type. This is necessary for
an application to support the use of date fields.
<P>
To support date fields, implement a user-defined DDX routine for CTime
objects. A call to this function can be included in the
CRecordView::DoDataExchange() method of your record view class. A sample
implementation of such a function is included at the end of this article.
<P>
More information on DDX routines can be found in the Microsoft Foundation
Classes Technical Note #26, "DDX and DDV Routines," and in the online
documentation for the CDataExchange class.
<P>
NOTE: DDX_FieldText is for use with CRecordView class derived objects, but
the following routine can easily be modified for use with CFormView and
CDialog derived classes.
<P>
DISCLAIMER: This sample code is NOT for international aware applications.
It is meant as an example only, and will only validate dates of the
mm/dd/yy format.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed:  Default AppWizard Foundation Classes
   options.

   */

   ///////////////////////////////////////////////////////////////////////
   // Example RecordView Data Exchange

   #include &lt;ctype.h&gt;

   void DDX_FieldText( CDataExchange *pDX, UINT nID, CTime&amp; datevar,
                 CRecordset *pSet );

   void CMyRecordView::DoDataExchange(CDataExchange* pDX)
   {
       CRecordView::DoDataExchange(pDX);
       //{{AFX_DATA_MAP(CTranView)

       // ... ( class wizard / app wizard generated code )

       //}}AFX_DATA_MAP

       // Date DDX
       DDX_FieldText(pDX, IDC_EDIT_TRAN_DATE, m_pSet-&gt;m_Database_Date,
                     m_pSet
   );
   }

   ///////////////////////////////////////////////////////////////////////
   // Example Date DDX_FieldText function

   void DDX_FieldText( CDataExchange *pDX, UINT nID, CTime&amp; datevar,
                 CRecordset *pSet )
   {

       if ( pDX-&gt;m_bSaveAndValidate )
       {
           CString strDate;
           pDX-&gt;PrepareEditCtrl( nID );
           pDX-&gt;m_pDlgWnd-&gt;GetDlgItem( nID )-&gt;GetWindowText( strDate );
           int nMonth, nDay, nYear;
           int nLen = strDate.GetLength();

           // Parse the date string for mm/dd/yy format.
           BOOL status = FALSE;
           while ( !status )
           {
               int i = 0;
               int nMarker = 0;

               // Note that sscanf() could be used to read
               // these formated strings.

               // Find first slash.
               while( i &lt; nLen &amp;&amp; strDate[i++] != '/' );
               if ( i == nLen )
                   break;

               // Month
               nMonth = atoi( strDate.Left( i ) );
               if ( nMonth &lt; 1 || nMonth &gt; 12 )
                   break;

               // Find next slash.
               nMarker = i++;
               while( i &lt; nLen &amp;&amp; strDate[i++] != '/' );
               if ( i == nLen )
                   break;

               // Day
               nDay = atoi( strDate.Mid( nMarker, i - nMarker ) );
               if ( nDay &lt; 1 || nDay &gt; 31 )
                   break;

               // Year
               if ( nLen - i &lt; 2 || ! isdigit( (int) strDate[i] )
                    || ! isdigit( (int) strDate[i+1] ) )
                    break;
               nYear = atoi( strDate.Right( nLen - i ) );
               nYear += ( nYear &lt; 37 ? 2000 : 1900 );
               // Valid years for CTime object
               if ( nYear &lt; 1970 || nYear &gt; 2036 )
                   break;

               CTime tTemp( nYear, nMonth, nDay, 0, 0, 0 );
               datevar = tTemp;
               status = TRUE;
           }

           if ( !status )
           {
               AfxMessageBox( "Incorrect date field format",
                       MB_OK | MB_ICONEXCLAMATION );
               pDX-&gt;Fail();
           }
       }
       else
       {
           // NOTE: no internationalization: mm/dd/yy format only.

           CString strDate = datevar.Format( "%m/%d/%y" );
           pDX-&gt;m_pDlgWnd-&gt;GetDlgItem( nID )-&gt;SetWindowText( strDate );
       }
   }

</PRE><h2>REFERENCES</h2>
 
<P>
Microsoft Foundation Classes Technical Note #26: "DDX and DDV Routines"
Microsoft Foundation Classes Technical Note #43: "RFX Routines"
Documentation for CDataExchange class and Documentation for the
CRecordView::DoDataExchange() function can be found by querying in the
Microsoft Visual C++ "Books Online" documentation.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: database recordview recordset<BR>
Keywords          : MfcDatabase<BR>
Technology        : kbmfc<BR>
Version           : 1.5 1.51 1.52 2.0 2.1 4.0 4.1<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 20, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

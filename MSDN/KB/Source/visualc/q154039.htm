

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Pass Optional Arguments to MFC ActiveX Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q154039">
<META NAME="KBModify" CONTENT="1998/02/17">
<META NAME="KBCreate" CONTENT="1996/07/25">
<META NAME="Keywords" CONTENT="CDKIss MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Many automation methods on ActiveX Controls do not require that all possible arguments are passed with each call. Arguments that are not required are called optional arguments. In MFC, it is possible to add a method to a custom control that accepts...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAHE,QAMS,QAHT,QAD7,QAH7,QAH6,QBS0,QAGI,QA7O,QAOE,QAMN,QAB5,QAPF,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Pass Optional Arguments to MFC ActiveX Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q154039</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Many automation methods on ActiveX Controls do not require that all
possible arguments are passed with each call. Arguments that are not
required are called optional arguments. In MFC, it is possible to add a
method to a custom control that accepts optional arguments, but there are a
few rules that must be followed. This article outlines these rules, and
provides step-by-step instruction on how to add such a method to a control.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
MFC's implementation of IDispatch accepts optional arguments according to
the following rules:

<OL><P><LI>Optional arguments must appear at the end of the parameter list. If
   an optional argument is omitted when calling the method, all
   arguments to the right of this one must also be omitted. This is
   similar to the C++ rules for calling functions with Default values
   for parameters.

<P><LI>Optional arguments must be declared as VARIANTs. If a parameter is
   omitted, the calling program must pass a VARIANT initialized as:
<P>
   VARIANT.vt = VT_ERROR
   VARIANT.scode = DISP_E_PARAMNOTFOUND.
<P>
   This will be done automatically by Visual Basic. However, in Visual
   C++ you must create and initialize the VARIANT yourself.
<P>
</OL>NOTE: This implies that the method must contain code that checks the
VARIANT to see if it contains actual data or is just a place holder.

<OL><P><LI>You must edit the ODL file generated for the control and mark the
   parameters as optional. This is done by adding the [optional] tag as
   shown here:
<P>
   [id(1)] void MyOpt([optional] VARIANT param1,
<PRE>            [optional] VARIANT param2);

   If you don't add the [optional] tag, Visual Basic will put up a message
   box indicating "Parameter Not Optional" when you call the method with
   one or more parameters omitted.

</PRE></OL>To add a method that supports optional arguments, follow these steps:

<OL><P><LI>Using ClassWizard, add a new method to the control. Be sure to pick
   VARIANT as the type for each optional argument, and be sure the optional
   arguments appear last in the parameter list.

<P><LI>Edit the ODL file, and mark these parameters with the [optional] tag.

<P><LI>Add the appropriate functionality to the method and rebuild the control.
<P>
   For example, the MyOpt method defined in ODL syntax above could be
   called from Visual Basic in the following three forms:
<P>
   myocx.MyOpt 2, 3  'passing both args
<PRE>   myocx.MyOpt 2     'omit one arg
   myocx.MyOpt       'omit both args

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information, please see the following  article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q140616.htm">Q140616</A></B>
   TITLE     : SAMPLE: MFCDISP: Replacing MFC IDispatch Implementation

</PRE>Visual C++ Books Online
<P>
Programming with MFC: Encyclopedia
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: LPDispatch IDispatch kbinf<BR>
Keywords          : CDKIss MfcOLE<BR>
Technology        : kbole kbMfc<BR>
Version           : Winnet:4.0,4.1,4.2,5.0<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

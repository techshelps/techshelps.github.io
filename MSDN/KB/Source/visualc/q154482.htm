

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Undocumented Functions in Type Safe Collection Classes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q154482">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/08/07">
<META NAME="Keywords" CONTENT="MfcMisc vcbuglist420 vcfixlist500 kbprg kbbuglist kbfixlist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  MFC 4.2 in Visual C++ 4.2 added some additional wrapper functions for the template type safe collection classes, such as CTypedPtrList, CTypedPtrArray and CTypedPtrMap. The newly-added functions help to make these classes fully type safe to use. Ho...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAP2,QAY5,QABO,QA4Q,QA36,QACI,QBV8,QAB9,QAR4,QADF,QBFY,QA56,QA55,QAPN,QAM1 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Undocumented Functions in Type Safe Collection Classes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q154482</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
MFC 4.2 in Visual C++ 4.2 added some additional wrapper functions for the
template type safe collection classes, such as CTypedPtrList,
CTypedPtrArray and CTypedPtrMap. The newly-added functions help to make
these classes fully type safe to use. However, the added functions are not
documented in the Visual C++ Online Documentation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Following is a full list of the functions added to the template type safe
collection classes:
<P>
<P><h3>CTypedPtrList</h3>
 
<P>
<PRE>   template&lt;class BASE_CLASS, class TYPE&gt;
   class CTypedPtrList : public BASE_CLASS

         // Add a new element before head or after tail of the list
         POSITION AddHead( TYPE newElement );
         POSITION AddTail( TYPE newElement );

         // Add another list of elements before head or after tail
         void AddHead( CTypedPtrList&lt;BASE_CLASS,TYPE&gt; *pNewList );
         void AddTail( CTypedPtrList&lt;BASE_CLASS,TYPE&gt; *pNewList );

         // Modify an element at a given position
         void SetAt( POSITION pos, TYPE newElement );

</PRE><h3>CTypedPtrArray</h3>
 
<P>
<PRE>   template&lt;class BASE_CLASS, class TYPE&gt;
   class CTypedPtrArray : public BASE_CLASS


         // Set the array element at the specified index
         void SetAt( int nIndex, TYPE ptr );

         // Potentially growing the array
         void SetAtGrow( int nIndex, TYPE newElement );
         int Add( TYPE newElement );
         int Append( const CTypedPtrArray&lt;BASE_CLASS, TYPE&gt;&amp; src );
         void copy( const CTypedPtrArray&lt;BASE_CLASS, TYPE&gt;&amp; src );

         // Operations that move elements around
         void InsertAt( int nIndex, TYPE newElement, int nCount=1 );
         void InsertAt( int nStartIndex,
                        CTypedPtrArray&lt;BASE_CLASS, TYPE&gt;* pNewArray );

</PRE><h3>CTypedPtrMap</h3>
 
<P>
<PRE>   template&lt;class BASE_CLASS, class KEY, class VALUE&gt;
   class CTypedPtrMap : public BASE_CLASS

         // Add a new key (key,value) pair
         void SetAt( KEY key, VALUE newValue );

         // removing existing (key,?) pair
         BOOL RemoveKey( KEY key );

</PRE>For detailed information about these functions, please refer to the
corresponding documentation for the functions in BASE_CLASS (the template
parameter for each of the above template classes). For instance, if you
have CTypedPtrMap&lt;CMap,MyKey,MyValue&gt;, then refer to the documentation for
CMap for the functions listed above under CTypedPtrMap.
<P>
You can also look at \msdev\mfc\include\afxtempl.h header file for the
implementation of these functions.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. This problem was fixed in Visual
C++ version 5.0.
<P>
 
<PRE>Keywords          : MfcMisc vcbuglist420 vcfixlist500 kbprg kbbuglist kbfixlist
Technology        : kbMfc
Version           : 4.2
Platform          : NT WINDOWS
Issue type        : kbbug
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

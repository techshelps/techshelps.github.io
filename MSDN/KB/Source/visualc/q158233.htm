

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for Basic Math Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158233">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/25">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use basic math STL functions plus, minus, divides, times, and modulus in Visual C++.  MORE INFORMATION  Required Header                     Prototype ---------     template                 struct plus : bina...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAP2,QAUD,QAKM,QBE7,QBE6,QAMA,QA5F,QBFY,QANY,QA4Q,QA4F,QAUS,QADX,QAKD,QADF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for Basic Math Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158233</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use basic math STL functions
plus, minus, divides, times, and modulus in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt; functional &gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class _TYPE&gt;
   struct plus : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
   {
     _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X + _Y); }
   };
   template&lt;class _TYPE&gt;
   struct minus : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
   {
     _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X - _Y); }
   };
   template&lt;class _TYPE&gt;
   struct times : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
   {
     _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X * _Y); }
   };
   template&lt;class _TYPE&gt;
   struct divides : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
   {
     _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X / _Y); }
   };
   template&lt;class _TYPE&gt;
   struct modulus : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
   {
     _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X % _Y); }
   };

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability. Consult
your product documentation for information on the binary_function
structure.
<P>
<P><h3>Description</h3>
 
<P>
This sample uses a class derived from all 5 basic math structures: plus,
minus, times, divides, and modulus, using an integer as the templated
operand.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>////////////////////////////////////////////////////////////////
//
// Compile options needed: none
//
// mathfunc.cpp - Illustrating the basic STL math
//                functions.
//
// Structures: plus&lt;A&gt;    - Adds data type A object to
//                          a class object derived from plus.
//             minus&lt;A&gt;   - Subtracts data type A.
//             times&lt;A&gt;   - Multiplies object by data type A.
//             divides&lt;A&gt; - Divides object by data type A.
//             modulus&lt;A&gt; - Returns object modulo A.
//
// Written by Mark Hagen
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation.
// All rights reserved.
/////////////////////////////////////////////////////////////////

#include &lt;functional&gt;

</PRE>class MathOps : public plus&lt;int&gt;, public minus&lt;int&gt;,
<PRE>                 public times&lt;int&gt;, public divides&lt;int&gt;,
                 public modulus&lt;int&gt;
{
</PRE>public:
<PRE>  int value;
  MathOps(){value=0;}
  MathOps(int x){value=x;}
  result_type operator+(second_argument_type add2)
                            {return value + add2;}
  result_type operator-(second_argument_type sub2)
                            {return value - sub2;}
  result_type operator*(second_argument_type mult2)
                            {return value * mult2;}
  result_type operator/(second_argument_type div2)
                            {return value / div2;}
  result_type operator%(second_argument_type mod2)
                            {return value % mod2;}
};

void main(void)
</PRE>{
<PRE>  MathOps one,two,three,four,five,six;

  cout &lt;&lt; "Using MathOps class..." &lt;&lt; endl ;

  one = 18;
  cout &lt;&lt; "one = " &lt;&lt; one &lt;&lt; endl ;

  two = one + 1;
  cout &lt;&lt; "two = one + 1 = " &lt;&lt; two &lt;&lt; endl ;

  three = two - 2;
  cout &lt;&lt; "three = two - 2 = " &lt;&lt; three &lt;&lt; endl ;

  four = three * 3;
  cout &lt;&lt; "four = three * 3 = " &lt;&lt; four &lt;&lt; endl ;

  five = four / 4;
  cout &lt;&lt; "five = four / 4 = " &lt;&lt; five &lt;&lt; endl ;

  six = five % 5;
  cout &lt;&lt; "six = five % 5 = " &lt;&lt; six &lt;&lt; endl ;
</PRE>}
<P>
Program Output is:
<P>
Using MathOps class...
one = 18
two = one + 1 = 19
three = two - 2 = 17
four = three * 3 = 51
five = four / 4 = 12
six = five % 5 = 2
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL Sample plus minus divides times modulus<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

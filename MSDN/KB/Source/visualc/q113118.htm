

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: C2061, C2062, C2226, C2039 Occur When Using enum types </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113118">
<META NAME="KBModify" CONTENT="1997/07/21">
<META NAME="KBCreate" CONTENT="1994/03/24">
<META NAME="Keywords" CONTENT="CLIss vcbuglist400 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The compilers listed above may misinterpret a combination of an enumerated type, a default parameter, and a constructor or function notation cast as a syntax error and may incorrectly generate one of the following:     error C2226: syntax error : u...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QAB4,QAH4,QBFY,QAKP,QAY5,QAOT,QBV8,QBF9,QA4Q,QAP2,QAO4,QAPF,QAB9,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: C2061, C2062, C2226, C2039 Occur When Using enum types</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113118</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE), included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 4.1, 4.2,
<P><PRE>     5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The compilers listed above may misinterpret a combination of an enumerated
type, a default parameter, and a constructor or function notation cast as a
syntax error and may incorrectly generate one of the following:
<P>
<PRE>   error C2226: syntax error : unexpected type '&lt;type&gt;'

   -or-

   error C2062: syntax error : unexpected type '&lt;type&gt;'

   -or-

   error C2039: '&lt;class&gt;' : is not a member of '&lt;class2&gt;'

   -or-

   error C2061: syntax error : identifier 'identifier'

</PRE><h2>CAUSE</h2>
 
<P>
The C++ compiler incorrectly parses declarations in which an enumerated
type is used as a parameter to either a constructor or a function notation
cast in a default parameter list. If there are other syntax errors in the
declaration line in question, then it is possible that an erroneous error
other than the ones listed might occur. The sample code shown below gives
examples of how to generate these errors.
<P>
This problem occurs only if an explicit construction [for example,
A(A::FALSE)] or function notation cast [that is, int(FALSE)] is called with
an enumerated type as an argument. If the compiler is allowed to do an
implicit conversion, the error will not occur:
<P>
<PRE>   void Func(int i = FALSE) { printf("%d\n",i); };
   B(A a = A::FALSE);

</PRE><h2>RESOLUTION</h2>
 
<P>
In most cases (such as the examples below), the construction or function
notation cast is not explicitly needed, in which case it can be removed. If
this is not the case, the type cast (as opposed to function notation cast)
syntax for the function should be used instead. For example, the above
functions would be modified to:
<P>
<PRE>   void Func(int i = (int) FALSE) { printf("%d\n",i); };
   B(A a = (A) A::FALSE);

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. We are researching this bug and will post new
information here in the Microsoft Knowledge Base as it becomes available.
<P>
<P><h3>Sample Code</h3>
 
<P>
TEST1.CPP
 
<P>
<PRE>   /* The following code generates error C2061 or error C2226: */
   /* Compiler options needed: none */

   enum tagBool {FALSE,TRUE};

   class A
   {
   public:
     A(tagBool tc);
   };

   void Func(A a = A(FALSE));

</PRE>TEST2.CPP
 
<P>
<PRE>   /* The following code generates error C2061 or error C2062. */
   /* Compiler options needed: none */

   enum tagBool {FALSE,TRUE};

   void Func(int i = int(FALSE)) { printf("%d\n",i); };

</PRE>TEST3.CPP
 
<P>
<PRE>   /* The following code generates the C2039 error. */
   /* Using Visual C++ 4.0 and later, the following code compiles */
   /* correctly. Compiler options needed: none */

   class A
   {
   public:
     enum tagBool {FALSE,TRUE};
     A(tagBool tc);
   };

   class B
   {
   public:
     B(A a = A(A::FALSE));
   };

</PRE>Additional queyr words: 8.00 8.00c 9.00
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CLIss vcbuglist400 vcbuglist500<BR>
Version             : 7.0 1.0 1.5 2.0 4.0 4.1 4.2 5.0<BR>
Platform            : MS-DOS NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

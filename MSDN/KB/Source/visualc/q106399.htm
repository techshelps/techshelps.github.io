

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Development Studio or Visual Workbench with MASM </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q106399">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1993/11/07">
<META NAME="Keywords" CONTENT="VWBIss kbenv">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Developer Studio that ships with Visual C++, 32-bit Edition, version 4.0, does not support assembler source files by default. That is, the Developer Studio does not associate any special significance to .ASM files without being informed otherwi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBJZ,QBFY,QAH4,QAPN,QA2Q,QAJN,QAG2,QAA5,QA56,QA55,QAY2,QBWS,QAPF,QA01,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using the Development Studio or Visual Workbench with MASM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q106399</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00
WINDOWS
kbenv
<P>
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 4.0
<LI>Microsoft Macro Assembler for MS-DOS, versions 5.1x, 6.0x, and 6.1x
<LI>Microsoft Macro Assembler for Windows NT, version 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Developer Studio that ships with Visual C++, 32-bit Edition,
version 4.0, does not support assembler source files by default.
That is, the Developer Studio does not associate any special
significance to .ASM files without being informed otherwise. However,
there are several viable options, namely custom build rules,
which enable the creation of projects that depend directly upon
assembler source files.
<P>
The remainder of this article discusses four methods for adding
.ASM files to a Visual C++ project. The methods are:
<P>
<PRE>   1. Using custom build rules;

   2. Modifying a VWB makefile and using it as an external makefile;

   3. Using an external makefile to assemble the assembly modules
      and then using an internal makefile for the main program, and

   4. Creating an option on the VWB Tools menu to assemble each
      assembly module as needed.

</PRE>Of these methods, the use of custom build rules receives special
attention. This powerful construct debuts in Visual C++ version 4.0.
By utilizing a custom build rule, a project can invoke MASM on a per
file basis to assemble .ASM files. The resulting object modules can
then be linked into the desired target.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Method 1</h3>
 
<P>
Using Visual C++ 4.0 Developer Studio, the following provides
sample code and a step-by-step example of how to create a simple
console application, CAPP, that requires MASM (ML.EXE) to assemble
one of its source files. Note that the sample code for this
example was borrowed from KB article <B><A HREF="../VISUALC/Q104644.htm">Q104644</A></B>, Passing C Arrays to
MASM by Reference.
<P>
<P><h3>Method 1: Sample Code - C Module</h3>
 
<P>
<PRE>/* Filename: CMAIN.C */

#include &lt;stdio.h&gt;

</PRE>#ifdef __cplusplus
extern "C" {
#endif
<P>
<PRE>void MasmSub (char *, short *, long *);

</PRE>#ifdef __cplusplus
}
#endif
<P>
<PRE>char chararray[4] = "abc";
</PRE>short shortarray[3]  = {1, 2, 3};
long longarray[3] = {32768, 32769, 32770};
<P>
<PRE>void main( void )
</PRE>{
<PRE>   printf ("%s\n", chararray);
   printf ("%d %d %d\n", shortarray[0], shortarray[1], shortarray[2]);
   printf ("%ld %ld %ld\n", longarray[0], longarray[1], longarray[2]);
   MasmSub (chararray, shortarray, longarray);
   printf ("%s\n", chararray);
   printf ("%d %d %d\n", shortarray[0], shortarray[1], shortarray[2]);
   printf ("%ld %ld %ld\n", longarray[0], longarray[1], longarray[2]);
</PRE>}
<P>
<P><h3>Method 1: Sample Code - ASM Module</h3>
 
<P>
; Filename: MASMSUB.ASM
; Assemble options needed for ML: /c /Cx /coff
<P>
.386
.MODEL flat, C
.CODE
<P>
MasmSub PROC uses esi, \
<PRE>   arraychar:PTR, \
   arrayshort:PTR, \
   arraylong:PTR

   mov esi, arraychar ; Load ESI with the address of the char array.
   mov BYTE PTR [esi], "x"      ; Since a char is 1 byte long, each
   mov BYTE PTR [esi+1], "y"    ; successive element can be accessed
   mov BYTE PTR [esi+2], "z"    ; by adding 1 more to esi.
   mov esi, arrayshort; Load ESI with the address of the short array.
   add WORD PTR [esi], 7        ; Since a short is 2 bytes long, each
   add WORD PTR [esi+2], 7      ; successive element can be accessed
   add WORD PTR [esi+4], 7      ; by adding 2 more to esi.
   mov esi, arraylong ; Load ESI with the address of the long array.
   inc DWORD PTR [esi]          ; Since a long is 4 bytes long, each
   inc DWORD PTR [esi+4]        ; successive element can be accessed
   inc DWORD PTR [esi+8]        ; by adding 4 more to esi.
   ret
</PRE>MasmSub ENDP
END
<P>
<P><h3>Method 1: Step-by-step Instructions for Building CAPP</h3>
 

<OL><P><LI> Start the Visual C++ 4.0 Developer Studio, MSDEV.EXE.

<P><LI> Create and save CMAIN.C and MASMSUB.ASM.

<P><LI> From the File menu, select New. In the New dialog box, select
<P><PRE>    Project Workspace and press OK. In the New Project Workspace
    dialog box, select Console Application for Type, CAPP for Name,
    Win32 for Platform, and the desired directory for Location,
    and then press Create. The new CAPP project will now be open.
</PRE>
<P><LI> From the Insert menu, choose Files into Project. In the Insert
<P><PRE>    Files into Project dialog box, select CMAIN.C as a Common File
    Type and press OK.
</PRE>
<P><LI> From the Insert menu, choose Files into Project. In the Insert
<P><PRE>    Files into Project dialog box, select MASMSUB.ASM as an All
    Files Type and press OK.
</PRE>
<P><LI> From the Build menu, choose Settings. In the Settings For list
<P><PRE>    box in the Project Settings dialog box, expand the
    "CAPP - Win32 Debug" target such that MASMSUB.ASM is visible.
    Highlight only MASMSUB.ASM.
</PRE>
<P><LI> Select the Custom Build tab.

<P><LI> In the first line of the Build command(s) box, enter the full
<P><PRE>    path and file name for MASM, the desired build options, and
    the macro for the File Input Path. The latter can be obtained
    by pressing the Files button and selecting Input Path from the
    resulting menu.  If ML.EXE is in the C:\MASM611A\BIN directory,
    the entry would appear as follows:
</PRE><P>
<P><PRE>    C:\MASM611A\BIN\ML.EXE /c /Cx /coff $(InputPath)
</PRE>
<P><LI> In the first line of the Output files(s) box, enter
<P><PRE>    MASMSUB.OBJ.
</PRE>
<P><LI>Press OK in the Project Settings dialog box to save your
<P><PRE>    changes. (This also selects the default build options for
    CMAIN.C.)
</PRE>
<P><LI>The "CAPP - Win32 Debug" target is now ready to be built.
<P><PRE>    From the Build menu, select Rebuild All. First, ML.EXE will be
    invoked to compile MASMSUB.ASM, second, CL.EXE will be invoked
    to compile CMAIN.C, and third, LINK.EXE will be invoked to
    generate CAPP.EXE.
</PRE>
<P><LI>The following is the console output of CAPP.EXE:
<P>
<P><PRE>       abc
       1 2 3
       32768 32769 32770
       xyz
       8 9 10
       32769 32770 32771
</PRE>
<P><LI>To build the "CAPP - Win32 Release" target, select its name
<P><PRE>    in the Target drop-down list box on the Project Workspace
    toolbar. Then, repeat steps 6 through 11 substituting the
    release version of the target for the debug version.
</PRE><P>
</OL>For more information on custom build rules, see the Visual C++
verison 4.0 online help for the Custom Build Tab (press the Help
button in the Project Settings dialog box when the Custom Build
tab is selected).
<P>
<P><h3>Method 2</h3>
 
<P>
Modify a Visual WorkBench makefile and then use it as an external
makefile. To do this, use the following steps:

<OL><P><LI> Open or create a project with the VWB and set it up as desired
<P><PRE>    for the C/C++ files in the project.
</PRE>
<P><LI> Close the project and modify the .MAK file to include build
<P><PRE>    rules for the assembly modules.
</PRE>
<P><LI> Put a comment at the start of the file to force the VWB to read
<P><PRE>    the file as an external makefile; otherwise, you could lose your
    changes.
</PRE><P>
</OL>The primary disadvantage of this method is you cannot use the VWB
options to change the way a build is done with an external makefile.
<P>
<P><h3>Method 3</h3>
 
<P>
Use an external makefile to assemble the assembly modules, and use
an internal makefile for the main program, which includes the MASM
.OBJs built with the external makefile. Simply add the .OBJ files
to the project list.
<P>
With this method, remember to load the external makefile and build
the .OBJs after changing any MASM code. By doing this, you can still
use the VWB to modify options for the main project, including
switching from debug to release. The linker will drop the CodeView
information if you select release build for the main project, so
always having the debug switches on for the assembler files is not
a problem.
<P>
<P><h3>Method 4</h3>
 
<P>
Create an option on the VWB Tools menu to assemble each assembly
module as needed. The following setups can be used to create Tools
menu items that build the current file:

<OL><P><LI> From the Tools menu, choose the Customize option.

<P><LI> Select the Tools tab in the Customize dialog box. Press Add.

<P><LI> Specify the complete path to ML.EXE in the Command edit field
<P><PRE>    of the Add Tool dialog box, or use the Browse button feature,
    and press OK.
</PRE>
<P><LI> Set up the ML.EXE menu option as follows:
<P>
<PRE>         Menu Text:          &amp;Assemble Current File
         Command:            &lt;should be set from step 3 above&gt;
         Arguments:          /c /Zi /Fl /Sa $FileName
         Initial Directory:  $FileDir
         Check the box for:  "Prompt for Arguments"
         Check the box for:   "Redirect to Output Window"

</PRE><P><LI> Press the Close button.
<P>
</OL>The assembly results will appear in the build output window. You
can use F4 to jump to lines containing errors in the source window.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 4.00 5.10 5.1 5.10a 5.1a 6.00 6.0 6.00a<BR>
6.0a 6.10 6.1 6.10a 6.1a 6.11<BR>
KBCategory: kbenv<BR>
KBSubcategory: VWBIss<BR>
Keywords            : VWBIss kbenv<BR>
Version             : 4.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

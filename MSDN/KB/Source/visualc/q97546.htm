

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VC++ README.WRI Parts 9 and 10-C Run-Time Library, Misc. </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97546 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1993/04/13">
<META NAME="Keywords" CONTENT="CRTIss kb16bitonly kbreadme">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The text below presents information in Parts 9 and 10 of the README.WRI file distributed with Microsoft Visual C++ version 1.0. Setup installs README.WRI in the MSVC\HELP directory.  Some Functions in Small- and Medium- Model DLL Libraries Give Unp...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAH6,QA56,QA55,QAWP,QBXB,QBVV,QATJ,QBV8,QDL9,QBWQ,QBWO,QBWN,QAUJ,QAFI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VC++ README.WRI Parts 9 and 10-C Run-Time Library, Misc.</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97546 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00
WINDOWS
kbreadme
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT), included with:
   Microsoft Visual C++ for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The text below presents information in Parts 9 and 10 of the
README.WRI file distributed with Microsoft Visual C++ version 1.0.
Setup installs README.WRI in the MSVC\HELP directory.
<P>
Some Functions in Small- and Medium-
<P><h3>Model DLL Libraries Give Unpredictable Results</h3>
 
<P>
The following C run-time functions give unpredictable results in small
and medium model Windows DLL libraries as distributed with Visual C++:
<P>
<PRE>   _chsize       clock    ctime      fclose      fcloseall
   freopen      _fstat   _ftime      _fullpath   _getcwd
   _getdcwd     _getw    localtime   mktime      _rmtmp
   _searchenv   _stat    time        tmpfile     _utime
   wcstombs

</PRE><h3>Character Sets Used For Command-Line Arguments</h3>
 
<P>
Applications for Windows and QuickWin applications use different
character sets for different command-line arguments. The OEM character
set is used to pass the first argument, argv[0], and all subsequent
arguments are passed using the ANSI character set.
<P>
<P><h3>Part 10: Miscellaneous Notes</h3>
 
<P>
<P><h3>Super VGA Support</h3>
 
<P>
If your SuperVGA card does not support VESA BIOS in ROM, and you wish
to use the SuperVGA modes under MS-DOS with GRAPHICS.LIB, you may have
to install one of the VESA TSRs provided in the BIN\VIDEO directory.
See the description of the Run-Time Library function _setvideomode()
for more information and warnings about Super VGA Support. Note that
the names of the TSRs are incorrectly described in the _setvideomode()
documentation. The correct names are listed below. If your video card
is not supported by any of these TSRs, contact your dealer, video card
manufacturer, or the Video Electronic Standards Association for the
appropriate TSR program.
<P>
The following VESA TSRs are provided with Visual C++, in the
MSVC\BIN\VIDEO directory:
<P>
<PRE>   VESA Driver    Manufacturer
   -------------------------------------------------------------------
   EVRXVESA.COM   Everex
   HTVESA.COM     Headland Technologies (formerly Video7)
   VESA1A1B.EXE   Western Digital / Paradise, versions 1A and 1B
   VESA1C.EXE     Western Digital / Paradise, WD90C11 based,
                  version 1C
   WDVESA.EXE     Western Digital / Paradise, WD90C30/31 based,
                  version 1D, and Windows Accelerator cards,
                  version 1DW
   VESA1D.EXE     Dell (see next paragraph for more information)
   VVESA.COM      ATI Technologies

</PRE><h3>Super VGA Support on DELL Systems</h3>
 
<P>
If your machine hangs when using GRAPHICS.LIB, you may be running into
a bug in the ROM BIOS of certain DELL models equipped with Western
Digital SuperVGA video adapters. Contact DELL to see if a ROM upgrade
is available. Meanwhile, there are two workarounds for this problem:

<OL><P><LI>Before using SuperVGA modes run the VESA1D.EXE driver, supplied in
   the MSVC\BIN\VIDEO directory.

<P><LI>If you don't need the SuperVGA modes, link LIB\NOVESA.OBJ into your
   program. NOVESA.OBJ is described below.
<P>
</OL><h3>Reducing Non-SuperVGA Program Size</h3>
 
<P>
You can reduce the executable-file size by about 2K for a program that
uses functions in GRAPHICS.LIB but doesn't use the SuperVGA modes. To
do this, link your program with the NOVESA.OBJ file supplied in the
MSVC\LIB directory. If you explicitly name GRAPHICS.LIB in the compile
or link command, place it after NOVESA.OBJ on the options string or
command line. Use the Disable Extended Dictionary Searches (/NOE)
linker option to avoid multiple symbol definitions.
<P>
Using NOVESA.OBJ will also avoid problems on systems that contain bugs
in the VESA ROM BIOS.
<P>
<P><h3>Using Object Files Created with Microsoft Pascal version 4.0</h3>
 
<P>
Object files created using Microsoft Pascal version 4.0 are not
compatible with Microsoft Visual C++ 1.0 or the version of LINK
provided with it.
<P>
<P><h3>STUB NONE Entry in .DEF File</h3>
 
<P>
The STUB entry in a .DEF file must not be NONE. An application built
with STUB NONE will lock the system when run from an MS-DOS prompt,
and will not load under Windows.
<P>
<P><h3>File Base Names Must Be Unique</h3>
 
<P>
The base names used by each source file in your project must be
unique. If, for example, your project contains files named MYAPP.C and
MYAPP.CPP, there will be a name collision between the MYAPP.SBR files
created for each source file.
<P>
<P><h3>Network Compatibility</h3>
 
<P>
Visual C++ requires a network version that supports the 80386
processor. A network that supports only the 80286 or earlier
processor, such as Novell NetWare 2.2 cannot be used.
<P>
<P><h3>Using PWB with Visual C++</h3>
 
<P>
The Programmer's Workbench provided with Microsoft C/C++ version 7.0
can, with some limitations, be used with Visual C++. However, PWB has
not been tested with Visual C++. Some PWB features may be incompatible
with Visual C++.
<P>
The only file required to use PWB is PWB.EXE, though the PWBHELP.MXT,
PWBC.MXT, PWBUTILS.MXT, and PWBROWSE.MXT extensions may be useful. The
PWB.EXE file should be installed in a directory on the PATH
environment variable. The extensions should be in the same directory
as PWB.EXE. The INIT environment variable should point to your
TOOLS.INI file. If you plan to use the help extension, make sure that
the HELPFILES environment variable points to the directory containing
the help files. The help files provided with Visual C++ cannot be used
with PWB.
<P>
The PWB C extension (PWBC.MXT) does not directly support new compiler
options (such as /O1 and /O2). However, you can specify new options
from the Additional Options dialog accessible from the Compiler
Options dialog. The Visual C++ makefile format is not compatible with
the PWB makefile format. You can use a PWB makefile as an External
Project in Visual C++, and use a Visual C++ makefile as a Non-PWB
Project in PWB.
<P>
If you plan to run applications for Windows from PWB you will need the
WX.EXE and WXSRVR.EXE utilities. Additionally, the VMB.386 file should
be listed in the [386Enh] section of your SYSTEM.INI file. If the
backup option in PWB is set to Undel, you will also need the
UNDEL.EXE, RM.EXE, and EXP.EXE utilities.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 WX Server SVGA README.WRI<BR>
KBCategory: kbreadme<BR>
KBSubcategory: CRTIss<BR>
Keywords            : CRTIss kb16bitonly kbreadme<BR>
Version             : 1.00<BR>
Platform            : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

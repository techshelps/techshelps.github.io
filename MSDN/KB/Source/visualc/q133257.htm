

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Invalid String Displayed by CToolTipCtrl </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q133257">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/07/26">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbcode kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  A tooltip created with a CToolTipCtrl object displays an incorrect string (or  garbage  string). This can happen under the following circumstances:   - A temporary string buffer is passed to AddTool or SetToolInfo.     -or-   - The overloaded versi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QBWP,QAD7,QAH7,QAH6,QAWT,QAR4,QAH4,QACT,QAY5,QAUD,QAPN,QAEF,QAPF,QABO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Invalid String Displayed by CToolTipCtrl</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q133257</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.10 2.20
WINDOWS NT
kbprg kbbuglist kbfixlist kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   Microsoft Visual C++, 32-bit Edition, versions 2.1, 2.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
A tooltip created with a CToolTipCtrl object displays an incorrect string
(or "garbage" string). This can happen under the following circumstances:

<UL><LI>A temporary string buffer is passed to AddTool or SetToolInfo.
<P>
   -or-

<LI>The overloaded version of AddTool, which takes a resource ID as an
   argument, is used.
<P>
</UL><h2>CAUSE</h2>
 
<P>
The ToolTip common control stores string information about the tooltips it
is going to display. When you specify the string to use for a tooltip, you
pass a pointer to the buffer, which contains this string.
<P>
Unlike a list or combo box, a ToolTip control stores the pointer to the
string buffer instead of copying the string to its own local memory area.
Therefore, the string buffer passed in must be maintained as long as the
tooltip exists.
<P>
For example, the following code sequence will not work correctly:
<P>
<PRE>   int CMyWnd::OnCreate()
   {
     ...
     CString str("Helpful Info");
     m_ToolTip.Create(this);
     m_ToolTip.AddTool(this,str);
     ...
   }

</PRE>The CString object used in the call to AddTool is temporary. As soon as the
function exits, the string buffer is freed and the tooltip is pointing to
an invalid address. The overloaded version of CToolTip::AddTool, which
takes a resource ID as an argument, has this problem. This is easy to see
in the implementation of the function:
<P>
BOOL CToolTipCtrl::AddTool(CWnd* pWnd, UINT nIDText,
<PRE>                           LPCRECT lpRectTool, UINT nIDTool)
{
  ASSERT(nIDText != 0);

  CString str;
  VERIFY(str.LoadString(nIDText));
  return AddTool(pWnd, str, lpRectTool, nIDTool);
</PRE>}
<P>
<P><h2>WORKAROUND</h2>
 
<P>
You can either use hard-coded strings that will never be de-allocated or
you must store the string data for later use. One possible approach to
doing this is to create your own CToolTipCtrl-derived class, and store the
strings in it. You can add a OnAddTool handler for the TTM_ADDTOOL message
for this class. In the OnAddTool handler, allocate space for the string.
Then retrieve the permanent address of the stored string, and pass that in
the TOOLINFO structure to the default Window procedure.
<P>
An example of such a CToolTipCtrl-derived class is included in the "Sample
Code" section of this article.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Microsoft
Visual C++, 32-bit edition, version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NOTE: This problem may not show up on Windows NT when using Visual C++
version 2.1 or 2.2 because even though the string is passed in as ANSI,
Windows NT converts it to UNICODE by thunking it and has to hang on to it.
However, if the application is compiled using UNICODE, the problem will
appear on Windows NT.
<P>
<P><h3>Sample Code Showing Example Workaround</h3>
 
<P>
<PRE>// TTFIX.H
//
// CFixToolTipCtrl
//
//    CToolTipCtrl-derived class that duplicates the strings
//    passed in to AddTool and SetToolInfo so that they will be
//    properly stored until the tooltip is destroyed.
//

</PRE>class CFixToolTipCtrl : public CToolTipCtrl
{
protected:
<PRE>   CPtrList m_lstTips;
</PRE>public:
<PRE>     CFixToolTipCtrl();
     virtual ~CFixToolTipCtrl();

   // Generated message map functions
</PRE>protected:
<PRE>   //{{AFX_MSG(CFixToolTipCtrl)
// NOTE - the ClassWizard will add and remove member functions here.
   //}}AFX_MSG
      afx_msg LRESULT OnAddTool(WPARAM wParam, LPARAM lParam);
   DECLARE_MESSAGE_MAP()
</PRE>};
<PRE>// END OF TTFIX.H
/////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////
// TTFIX.CPP
//
#include "stdafx.h"
#include &lt;afxcmn.h&gt;
#include "ttfix.h"


</PRE>BEGIN_MESSAGE_MAP(CFixToolTipCtrl, CToolTipCtrl)
<PRE>   //{{AFX_MSG_MAP(CFixToolTipCtrl)
  // NOTE - the ClassWizard will add and remove mapping macros here.
   //}}AFX_MSG_MAP
     ON_MESSAGE(TTM_ADDTOOL, OnAddTool)
</PRE>END_MESSAGE_MAP()
<P>
<P>
CFixToolTipCtrl::~CFixToolTipCtrl()
{
<PRE>    while (!m_lstTips.IsEmpty())
       free(m_lstTips.RemoveHead());
</PRE>}
<P>
LRESULT CFixToolTipCtrl::OnAddTool(WPARAM wParam, LPARAM lParam)
{
<PRE>      TOOLINFO ti = *(LPTOOLINFO)lParam;
      if ((ti.hinst == NULL) &amp;&amp; (ti.lpszText != LPSTR_TEXTCALLBACK)
            &amp;&amp; (ti.lpszText != NULL))
      {
            char *pStr = _tcsdup(ti.lpszText);
            m_lstTips.AddTail(pStr);
            ti.lpszText = pStr;
      }
      return DefWindowProc(TTM_ADDTOOL, wParam, (LPARAM)&amp;ti);
</PRE>}
<P>
<PRE>// END OF TTFIX.CPP
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.10 2.20 3.1 3.10 3.2 3.20 Incorrect Corrupted<BR>
KBCategory: kbprg kbbuglist kbfixlist kbcode<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbbuglist kbcode kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 2.10 2.20<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: The pow() Function Doesn't Set Underflow Condition </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167750">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1997/04/29">
<META NAME="Keywords" CONTENT="CRTIss vcbuglist500 kbtool kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The pow() function does not set the errno variable to indicate that an underflow condition has occurred.  RESOLUTION  A potential solution is to check the base of the number that is being raised to a power and check the result of the pow() function...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAUD,QAAP,QAY5,QABI,QAKP,QAHH,QAGX,QABH,QALW,QBXS,QA19,QAFV,QAHE,QABA V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: The pow() Function Doesn't Set Underflow Condition</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167750</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The pow() function does not set the errno variable to indicate that an
underflow condition has occurred.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
A potential solution is to check the base of the number that is being
raised to a power and check the result of the pow() function. By
customizing the _matherr() function, the underflow condition can be trapped
and you can display an error message. The program below demonstrates this
workaround.
<P>
<PRE>    #include &lt;stdio.h&gt;
    #include &lt;math.h&gt;
    #include &lt;ERRNO.H&gt;
    #include &lt;string.h&gt;
    extern int errno;

    /* The _matherr routine can be customized to handle the specific
        underflow problem that is encountered.  See online help for
        more information on _matherr().
    */
    int _matherr( struct _exception *except )
    {
        /* Handle errors caused by pow() function.*/
        if(strcmp(except-&gt;name,"pow")==0)
        {
            switch(except-&gt;type)
            {
                case _DOMAIN:
                {
                    printf("Domain Error: Argument not in domain.\n");
                    return 1;
                    break;
                }
                case _SING:
                {
                    printf("Singularity Error: Argument singularity "
                           "error.\n");
                    return 1;
                    break;
      }
                case _OVERFLOW:
                {
                    printf("Overflow Error: Overflow range error.\n");
                    return 1;
                    break;
                }
                case _PLOSS:
                {
                    printf("Precision Error: Partial loss of "
                           "significance.\n");
                    return 1;
                    break;
                }
                case _TLOSS:
                {
                    printf("Precision Error: Total loss of "
                           "significance.\n");
                    return 1;
                    break;
      }
                case _UNDERFLOW:
      {
                    printf("Underflow Error: The result is too small to "
                           "be represented.\n");
                    return 1;
                    break;
                }
                default:
                {
                    printf("Unknown Error Occurred While Performing Math "
                           "Operation.\n");
                    return 1;
                    break;
      }
       }
        }
        else
            return 0;  /* non-error condition */
    }

    void main(void)
    {

    double x = -1.0e+307;
    double y = -1.0e+307;
    double z;

    z = pow(x,y);

    /*
    Check for error conditions.  _matherr() is automatically
    called should there be a math related error.
    */

    /*Note that errno is not set properly &amp; _matherr() is called.*/
    if (errno != 0)
        printf("ERROR! Errno: %i\n",errno);
    else
        printf("pow( %e, %e ) = %f\n", x, y, z);
   }

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this bug and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The help topic for pow() states:
<P>
"No error message is printed on overflow or underflow."
<P>
However, an overflow does set errno to the value of 34 indicating "Result
too large". When an underflow occurs, the returned value is 0.
 
<PRE>Keywords          : CRTIss vcbuglist500 kbtool kbbuglist
Version           : 5.0
Platform          : NT WINDOWS
Issue type        : kbbug</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

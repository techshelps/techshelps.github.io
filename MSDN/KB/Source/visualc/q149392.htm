

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Using the DAO SDK dbDao Classes with Visual C++ 4.x </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149392">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/04/01">
<META NAME="Keywords" CONTENT="MfcDAO kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article explains how to use dbDao, the class library that wraps the DAO API, in a Console-based or MFC-based application. The following items are discussed:   - Compile and link settings.  - Using dbDao in your code.  - Information on redistri...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QBSO,QBFY,QAH4,QBHQ,QA56,QA55,QABA,QA3P,QBXB,QBE7,QBE6,QAVX,QATJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Using the DAO SDK dbDao Classes with Visual C++ 4.x</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149392</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The DAO SDK included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.0, 4.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to use dbDao, the class library that wraps the
DAO API, in a Console-based or MFC-based application. The following items
are discussed:

<UL><LI>Compile and link settings.
<LI>Using dbDao in your code.
<LI>Information on redistributing dbDao.
<LI>Support platforms.
<P>
</UL>NOTE: The information in this article pertains to Visual C++ version 4.x.
Visual C++ 5.0 includes a newer DAO SDK with newer dbDAO classes. See the
online documentation in Visual C++ version 5.0 for information about how to
use the newer classes.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Compile and Link Settings</h3>
 

<OL><P><LI>After installing the DAO SDK (found on the Visual C++ 4.x CD-ROM),
   modify settings in the Visual C++ Developer Studio to use the
   directories where the DAO SDK is installed. On the Tools menu, click
   Options. Then add the Daosdk\Include directory to the list of
   directories for include files. For example, if you used the Visual C++
   defaults, you need to add the following directory:
<P>
<P><PRE>      C:\MSDEV\DAOSDK\INCLUDE
</PRE><P>
   Failure to do so will generate this error:
<P>
<P><PRE>      fatal error C1083: Cannot open include file: 'dbdao.h':
      No such file or directory
</PRE><P>
   In addition, add the Daosdk\Lib and Daosdk\Lib\Debug entries to the
   list of directories for library files. The first directory contains
   ANSI and UNICODE builds of the dbDao library, and the second contains
   debug versions of each. Failure to add these libraries will generate an
   error similar to this one:
<P>
<P><PRE>      LINK : fatal error LNK1104: cannot open file "dbdao3.lib"
</PRE>
<P><LI>Copy the debug ANSI and UNICODE versions of the .dll and .pdb files
   found in the \Msdev\Daosdk\Lib\Debug directory into your \Windows\System
   directory. This will allow you to step into the dbDao library in debug
   builds.

<P><LI>Add one of the following libraries to the "Object/Library Modules" entry
   in the Link tab found in the Project Settings dialog invoked by clicking
   Settings on the Build menu:
<P>
   dbdao3.lib - ANSI Release export library
   dbdao3d.lib - ANSI Debug export library
   dbdao3u.lib - UNICODE Release export library
   dbdao3ud.lib - UNICODE Debug export library

<P><LI>Link with the MFC Library. On the Build menu, click Settings, and then
   click the General tab to do this. Failure to do so will cause LNK2001
   unresolved external error messages on the CdbDBEngine and CdbOleObject
   symbols.
<P>
   If you are creating a console application, you will still have to link
   to MFC. MFC wasn't designed, tested, or intended to be used in a true
   console application. However, dbDao uses only a few, high-level
   abstract base classes such as CObject,  CException, and COleVariant.
<P>
   Be certain to select "Use MFC in a shared DLL" when specifying how
   to link with the MFC Library.  If you link in MFC statically, you will
   observer the following sequence of errors if you use a dbDao function
   that returns an MFC object (e.g. CDbDatabase.GetConnect() returns
   a CString).  Note: The notation "..." indicates a hex address in the
   following error messages.
<P>
   DEBUG build:
   - A message box displaying: "User breakpoint called from code at 0x..."
   - A trace message stating: "HEAP: Invalid address specified to
<P><PRE>     RtlValidateHeap(...)"
</PRE>   - An assertion in dbgheap.c
   - An unhandled exception: Access Violation
<P>
   RELEASE build:
   - A message box displaying: "The instruction at "0x..." referenced
<P><PRE>     memory at "0x...".  The memory could not be "read".
</PRE>
<P><LI>For console-based applications, link with the multi-threaded version of
   the C-Run-time Library. This is done in the project settings dialog box.
   On the Build menu, click Settings. Then click the C/C++ tab, and in the
   Code Generation category select "Use run-time library." Failure to do so
   will generate an unresolved external error on __endthreadex.
<P>
</OL><h3>Using dbDao in Your Code</h3>
 
<P>
For any file using the dbDao classes, use the following three include
files:
<P>
<PRE>   #include &lt;afxole.h&gt;
   #include &lt;dbdao.h&gt;
   #include &lt;dbdaoerr.h&gt;

</PRE></OL>Failure to do so will generate the following errors (among others) in
Dbdao.h:
<P>
<PRE>   error C2501: 'interface' : missing decl-specifiers
   error C2239: unexpected token 'identifier' following declaration
                of 'interface'
   error C2061: syntax error : identifier '_DAODBEngine'

</PRE>When an error is encountered, the dbDao classes will throw an instance of
the CdbException class. This is really just a flag, the actual error
information is included in the Errors collection of the CdbDBEngine class.
The following code demonstrates how to extract this information for each
error object in the collection. The collection is refreshed each time dbDao
encounters an error.
<P>
dbDao may also throw either a class derived from MFC's CException or a
win32 exception. The code demonstrates how to catch those as well.
<P>
<PRE>   CdbDBEngine *pEng;

   // Code to instantiate pEng goes here

   try
   {
      // Code to use dbDao in a way that generates an error goes here
   }
   catch( CdbException e )
   {
       for( long l = 0; l &lt; pEng-&gt;Errors.GetCount(); l++ )
       {
           TRACE( "\t Error #%ld: #%ld -- %s\n",
                  l,
                  pEng-&gt;Errors[l].GetNumber(),
                  pEng-&gt;Errors[l].GetDescription() );
       }
   }
   catch(CException *e)
   {
       TRACE( "MFC Exception\n" );
       e-&gt;Delete();
   }
   catch(...)
   {
       TRACE( "Win32 Exception\n" );
   }

</PRE><h3>Information on Redistributing dbDao</h3>
 
<P>
The following sources discuss how to redistribute components required by
applications using dbDao. These can be found either on your Visual C++ 4.X
CD-ROM or in the installed files on your hard disk.

<UL><LI>\Msdev\Redist\Dao\Readme.wri (located on the CD-ROM only)
<LI>\Msdev\Daosdk\Daosdk.hlp
<LI>\Daosdk\Setup\Daosetup.rtf
<P>
</UL><h3>Supported Platforms</h3>
 
<P>
The only supported form of DAO for Visual C++ is a 32-bit in-process DLL
requiring either Windows 95 or Windows NT and Visual C++ 4.0 or later. DAO
is not available on Win32s. This is documented in the Daosdk.hlp file under
the "DAO SDK Files" help topic.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Jet Database Engine Programmer's Guide, ISBN #: 1-55615-877-7.
<P>
The Daosdk.hlp file that comes with the DAO SDK in Visual C++ 4.x.
 
<PRE>Keywords          : MfcDAO kbcode kbprg
Technology        : kbMfc
Version           : 4.00 4.10
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: /GX May Cause C1001 When Using Base Class' Operator Delete </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172609">
<META NAME="KBModify" CONTENT="1997/12/01">
<META NAME="KBCreate" CONTENT="1997/08/12">
<META NAME="Keywords" CONTENT="CPPIss VS97FixlistSP3 kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When attempting to use a base class' operator delete, and using the /GX switch to enable Visual C++ Exception Handling, the following error may be generated:     fatal error C1001: INTERNAL COMPILER ERROR        (compiler file 'msc1.cpp', line 1188...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABA,QA2O,QBCT,QANY,QAKM,QAGC,QAGB,QAEF,QBFY,QDKD,QABO,QAUD,QAKR,QAHE,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: /GX May Cause C1001 When Using Base Class' Operator Delete</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172609</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The C/C++ Compiler (CL.EXE) included with:
<P><PRE>    - Microsoft Visual C++, 32-bit Editions, version 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When attempting to use a base class' operator delete, and using the /GX
switch to enable Visual C++ Exception Handling, the following error may be
generated:
<P>
<PRE>   fatal error C1001: INTERNAL COMPILER ERROR
       (compiler file 'msc1.cpp', line 1188)

</PRE><h2>CAUSE</h2>
 
<P>
This error will be generated if the base class has a virtual function, the
derived class uses the base class operator delete via a using declaration
or an access declaration, and the derived class has a function prototyped
to return a pointer to a base class, but actually returns a pointer to the
derived class. An example can be found in the sample code below.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Do not use the /GX switch when attempting to use the base class operator
delete.
<P>
<PRE> -or-

</PRE>Implement an operator delete in the derived class that calls the base class
operator delete.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug has been fixed in Visual Studio
97 Service Pack 3.
<P>
For more information, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VSTUDIO/Q170365.htm">Q170365</A></B>
   TITLE     : INFO: Visual Studio 97 Service Packs - What, Where, and Why

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The following two samples cause an internal compiler error when built with
the compiler's /GX switch. The second sample shows how this can occur when
using MFC.
<P>
<P><h3>Sample 1</h3>
 
<P>
<PRE>   // compile options: /GX /c
   class A
   {
   public:
       virtual foo();
       void operator delete(void* p);
   };
   class B : public A
   {
   public:
       A::operator delete;
       // using A::operator delete;
       A* func();
   };
   A* B::func()
   {
       return new B;
   }

</PRE><h3>Sample 2</h3>
 
<P>
<PRE>   // compile options: /GX /c
   #include "afxcoll.h"
   class C : public CObArray
   {
   public:
        CObArray::operator delete;
        // using CObArray::operator delete;
        DECLARE_SERIAL( C );
   };
   IMPLEMENT_SERIAL ( C, CObArray, 1 )
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ICE<BR>
Keywords          : CPPIss VS97FixlistSP3 kberrmsg<BR>
Version           : WINNT:5.0<BR>
Platform          : winnt<BR>
Issue type        : kbbug<BR>
Solution Type     : kbfix kbservicepack<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

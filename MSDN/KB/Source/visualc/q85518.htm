

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Correct Use of the SetFont() Function in MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q85518 ">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1992/06/11">
<META NAME="Keywords" CONTENT="MfcUI kbfasttip kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The SetFont() member function of the CWnd class changes the font in a specified control. For this function to work correctly in a Windows- based application, you must ensure that the CFont object specified in the SetFont() call is not destroyed unt...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBBI,QADF,QAGI,QA01,QAB5,QA7O,QAY5,QAPN,QAOE,QAMN,QAW6,QAH4,QBV8,QANX,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Correct Use of the SetFont() Function in MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q85518 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>MS-DOS | WINDOWS             | WINDOWS NT
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and
      1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, and
      4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The SetFont() member function of the CWnd class changes the font in a
specified control. For this function to work correctly in a Windows-
based application, you must ensure that the CFont object specified in
the SetFont() call is not destroyed until after the specified control
has been destroyed.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The SetFont() accepts a CFont object as a parameter; the control uses
the specified font to display its text. The SetFont() function is
implemented to send a WM_SETFONT message to the control with the font
handle that corresponds to the CFont object.
<P>
An application can delete the font specified in a WM_SETFONT message
only under certain circumstances; these same restrictions apply to the
CFont object specified in a SetFont() call.
<P>
Specifically, do not destroy the specified CFont object until after
the CWnd control has been destroyed. Windows does not copy the font
specified in a SetFont() call. If the font is destroyed before the
control is destroyed, unpredictable results can occur.
<P>
For example, when an application uses SetFont() to change the font a
dialog box uses, the application should not destroy the CFont object
until after it has destroyed the dialog box. Make the CFont object a
member variable of the derived dialog box class instead of making the
font a local variable in one of the functions in the class. This is
the best method to ensure that the CFont object exists for the
lifetime of the dialog box. When the application destroys the dialog
box, the dialog box class destructor automatically calls the CFont
destructor to delete the font handle.
<P>
The best time to specify the font for any controls in the dialog box
is in the OnInitDialog() member function.
<P>
The code below demonstrates deriving a dialog box class from
CModalDialog and using the SetFont() member function:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/*
 * Compiler options needed: None
 */

</PRE>class CMyAboutBox : public CDialog
{
<PRE>   CFont m_font;

   public:
      // Constructor -- This code assumes a dialog box
      // template named "ABOUTDLG" in the application's .RC file.

      CMyAboutBox(CWnd* pParentWnd = NULL) :
         CModalDialog("ABOUTDLG", pParentWnd) {};

      BOOL OnInitDialog();
</PRE>};
<P>
<PRE>// OnInitDialog() function -- Called after Windows creates
// the dialog box but before it is painted on the screen.

</PRE>BOOL CMyAboutBox::OnInitDialog()
{
<PRE>   LOGFONT lf;                        // Used to create the CFont.

   CDialog::OnInitDialog();           // Call default ::OnInitDialog

   memset(&amp;lf, 0, sizeof(LOGFONT));   // Clear out structure.
   lf.lfHeight = 20;                  // Request a 20-pixel-high font
   strcpy(lf.lfFaceName, "Arial");    //    with face name "Arial".
   m_font.CreateFontIndirect(&amp;lf);    // Create the font.

   // Use the font to paint a control. This code assumes
   // a control named IDC_TEXT1 in the dialog box.
   GetDlgItem(IDC_TEXT1)-&gt;SetFont(&amp;m_font);

   return TRUE;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 7.00 1.00 1.50 2.00 2.10 2.50 2.51 2.52<BR>
3.00 3.10 4.00 destructor<BR>
KBCategory: kbprg kbfasttip<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbfasttip kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00 | 1.00 1.50 1.51 1.52 | 1<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: CString::ReleaseBuffer() Does Not Release Extra Memory </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114201">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1994/04/26">
<META NAME="Keywords" CONTENT="MfcMisc kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When CString::ReleaseBuffer is called and the length of the string is less than the allocated buffer length, the extra bytes are not released. This just means that your program might end up maintaining more memory than absolutely necessary. This wi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHT,QAY5,QBW6,QAPN,QBVV,QBV8,QAB9,QACJ,QAX6,QATX,QALG,QANY,QBWP,QBFY,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: CString::ReleaseBuffer() Does Not Release Extra Memory</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114201</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
    - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, and 4.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When CString::ReleaseBuffer is called and the length of the string is less
than the allocated buffer length, the extra bytes are not released. This
just means that your program might end up maintaining more memory than
absolutely necessary. This will not cause a memory leak. All of the memory
will be freed when the CString object is destroyed.
<P>
<P><h2>CAUSE</h2>
 
<P>
The behavior of CString::ReleaseBuffer described above is by design.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Visual C++ 2.0 and later include CString::FreeExtra to release any unused
memory.
<P>
In earlier versions, one way to make the string's buffer length equal to
the string's data length is to write a function which will free the extra
memory. The two functions in the sample code section demonstrate two
different methods of writing this function; either as a member function of
a derived CString class or as a separate function which accepts a CString
parameter type. Note that if the member function approach is taken, then
the derived class will need to override the constructors provided by the
CString class in order to have access to them.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
By not freeing the extra bytes of memory in ReleaseBuffer, CString provides
a simple method of growing without having to allocate more memory while
keeping memory fragmentation to a minimum. For example, calling
ReleaseBuffer(20) when the string's allocated buffer length is 200 bytes
will leave an extra 180 bytes free. This way, the only time that a CString
object will need to allocate more memory is when the data length exceeds
the allocated buffer length.
<P>
<P><h3>Sample Code</h3>
 
<P>
1) Member function method
<P>
class CMyString : public CString
{
<PRE>  public:
    CMyString(const char* psz = NULL) : CString(psz) {}
    void FreeExMem();
</PRE>};
<P>
<PRE>void CMyString::FreeExMem()
</PRE>{
<PRE>  ASSERT(m_nDataLength&lt;=m_nAllocLength);
  if(!IsEmpty())
  {
    char *tp = new char[m_nDataLength+1];
    memcpy(tp,m_pchData,m_nDataLength+1);
    ASSERT(m_pchData[m_nDataLength]=='\0');
    delete m_pchData;
    m_pchData = tp;
    m_nAllocLength = m_nDataLength;
  }
  ASSERT(m_pchData!=NULL);
</PRE>}
<P>
2) Separate Function Method
<P>
<PRE>void FreeExMem(CString &amp;s)
</PRE>{
<PRE>  if(!s.IsEmpty())
  {
    char *p = s.GetBuffer(1);
    char *tp = new char[s.GetLength()+1];
    memcpy(tp,p,s.GetLength()+1);
    s.ReleaseBuffer();
    s.Empty();
    s = tp;
    delete tp;
  }
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 2.50 2.51 2.52 3.00 3.10<BR>
4.00<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcMisc<BR>
Keywords            : MfcMisc kbprb kbprg<BR>
Technology          : kbMfc<BR>
Version             : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

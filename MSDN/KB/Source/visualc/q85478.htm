

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Error C2593 When Archiving an Enumerated Type </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q85478 ">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1992/06/10">
<META NAME="Keywords" CONTENT="CPPIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In ANSI C, enumerated types are synonyms for  int ; however, in C++, enumerated types are distinct integral types but are not integers themselves. Therefore, if e is an enumerated type and archive is of type CArchive, compiling these statements    ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUR,QA2X,QAKM,QANY,QBFY,QBEV,QAB4,QAGJ,QAG8,QAP2,QAAP,QAPN,QA4Q,QAYZ,QAOT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Error C2593 When Archiving an Enumerated Type</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q85478 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In ANSI C, enumerated types are synonyms for "int"; however, in C++,
enumerated types are distinct integral types but are not integers
themselves. Therefore, if e is an enumerated type and archive is of type
CArchive, compiling these statements
<P>
<PRE>   archive &lt;&lt; e;
   archive &gt;&gt; e;

</PRE>results in the following error messages from Microsoft C/C++ versions 7.0
and 8.0:
<P>
<PRE>   error C2593: 'operator &lt;&lt;' is ambiguous
   error C2593: 'operator &gt;&gt;' is ambiguous

</PRE>The compiler cannot choose which operator to use, because the enumerated
type could be promoted to match any integral type. The programmer must
specify which integral type the operator should use.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following are the prototypes taken from AFX.H. These are the functions
that the compiler chooses from when it compiles the statement "archive &lt;&lt;
e;"
<P>
<PRE>   CArchive&amp; operator&lt;&lt;( BYTE by );
   CArchive&amp; operator&lt;&lt;( WORD w );
   CArchive&amp; operator&lt;&lt;( LONG l );
   CArchive&amp; operator&lt;&lt;( DWORD dw );

</PRE>where BYTE, WORD, LONG, and DWORD are defined in AFX.H as follows:
<P>
<PRE>   typedef unsigned char    BYTE;   // 8-bit unsigned entity
   typedef unsigned short   WORD;   // 16-bit unsigned number
   typedef long             LONG;   // 32-bit signed number
   typedef unsigned long    DWORD;  // 32-bit unsigned number

</PRE>Therefore, the following statements compile without error:
<P>
<PRE>   archive &lt;&lt; (WORD) e;
   archive &gt;&gt; (WORD&amp;) e;

   -or-

   archive &lt;&lt; (unsigned short) e;
   archive &gt;&gt; (unsigned short&amp;) e;

</PRE>NOTE: The following statements do not compile because they are also
ambiguous:
<P>
<PRE>   archive &lt;&lt; (int) e;
   archive &gt;&gt; (int&amp;) e;

</PRE>In these cases, the compiler cannot choose which operator to use, because
the int could be promoted to match any integral type. Again, the programmer
must specify which integral type the compiler should use.
<P>
The following is a complete example demonstrating how to store and load an
enumerated type:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #define _DOS
   #include &lt;afx.h&gt;

   enum DAY
   {
      sunday, monday, tuesday, wednesday, thursday, friday, saturday
   };

   void main( void );

   void main( )
   {
      CFile myFile;

   // Open the file for writing and associate an archive object with it.

      myFile.Open( "testfile", CFile::modeWrite, NULL );
      CArchive archiveOut( &amp;myFile, CArchive::store );

      enum DAY today = tuesday;

   // Use the insertion operator to store the enumerated value
   //    archiveOut &lt;&lt; today;
   // will generate an error

      archiveOut &lt;&lt; (WORD) today;

      archiveOut.Close();
      myFile.Close();

   // Open the file for reading and associate an archive object with it.

      myFile.Open( "testfile", CFile::modeRead, NULL );
      CArchive archiveIn( &amp;myFile, CArchive::load );

   // Use the extraction operator to load the enumerated value
   // "archiveIn &gt;&gt; today;" would generate an error

      archiveIn &gt;&gt; (WORD&amp;) today;

      archiveIn.Close();
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.10<BR>
Keywords          : CPPIss kbcode<BR>
Version           : MS-DOS:7.0; WINDOWS:1.0,1.5,1.51,1.52; WINDOWS  NT:1.0,2.0,2.1,4.0,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kberrmsg kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Unresolved Externals for Inline Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123768">
<META NAME="KBModify" CONTENT="1997/08/26">
<META NAME="KBCreate" CONTENT="1994/12/11">
<META NAME="Keywords" CONTENT="CPPIss kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Calling an inline function defined in a separate source file generates the following errors in Visual C++ 32-bit Edition, versions 2.x and 4.0:     error LNK2001: unresolved external symbol                                     : error LNK1120: 1 unr...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBV8,QBA8,QBFY,QAB9,QAB4,QA56,QA55,QAY2,QAAP,QABA,QAG2,QBXS,QA2Q,QAWM V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Unresolved Externals for Inline Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123768</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0,
<P><PRE>     4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Calling an inline function defined in a separate source file generates the
following errors in Visual C++ 32-bit Edition, versions 2.x and 4.0:
<P>
<PRE>   error LNK2001: unresolved external symbol "&lt;function name&gt;"
   &lt;filename.exe&gt; : error LNK1120: 1 unresolved externals

</PRE>The 32-bit edition of Visual C++ version 1.0 generates these errors:
<P>
<PRE>   warning LNK4016: unresolved external symbol
                     "&lt;Classname&gt;::&lt;Functionname&gt;"
   error LNK1120: 1 unresolved externals

</PRE>The 16-bit editions generate this error:
<P>
<PRE>   error L2029: '&lt;ClassName&gt;::&lt;FunctionName&gt;' : unresolved external

</PRE>The function is declared in a header (.H) file, defined as an inline
function in one source (.CPP) file, and called from a second source (.CPP)
file.
<P>
<P><h2>CAUSE</h2>
 
<P>
Inline functions are not visible outside of the source file where they are
defined. The Inline Specifier section in the C++ Language Reference states,
"Functions that are declared as inline and that are not class member
functions have internal linkage unless otherwise specified."
<P>
The Inline Class Member Functions section in the C++ Language Reference
states, "A class member function defaults to external linkage unless a
definition for that function contains the inline specifier." Query on
&lt;inline function linkage&gt; in the Books On-line for further information.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Here are five possible workarounds:

<UL><LI>Declare the inline function with the extern keyword to force external
   linkage. Note, however, that using extern with class member functions
   will cause a warning with /Ze, and an error with /Za.
<P>
   -or-

<LI>Move the function definition to the header file so it's included in each
   translation unit used.
<P>
   -or-

<LI>Remove the inline specification.
<P>
   -or-

<LI>Force a function version of the inline function to be created in the
   module that it is defined in. You can do this by referencing the address
   of the inline function, by assigning it to a function pointer, or by
   passing it to a function.
<P>
   -or-

<LI>Remove the /Ob1 (Only Inline) or /Ob2 (Any suitable) option
   from the command line and compile with /Ob0 (Disable). The
   /Ob0 option is the default if no options are specified.
<P>
   To change these options from within the Visual Workbench
   for Visual C++ version 4.0, follow these five steps:
<P>
   1. Select the Settings... option from the Build menu.
<P>
   2. Select the C/C+ Tab in the Project Settings dialog box.
<P>
   3. Select the Optimizations item in the Category drop-down
<P><PRE>      list box.
</PRE><P>
   4. Select one of the following items from the In-line
<P><PRE>      function expansion drop-down list box:
</PRE><P>
<PRE>         - Disable *  (/Ob0)
         - Only __inline  (/Ob1)
         - Any Suitable  (/Ob2)

   5. Press OK in the Project Settings dialog box.

   To change these options from within the Visual Workbench
   for Visual C++ version 2.x, follow these five steps:

   1. Select Project.

   2. Choose Settings.

   3. Change to the Settings for C/C++.

   4. Select the Optimizing Category.

   5. Choose the inline option from the Inline Function
      Expansion box.

   To change these options from within previous versions of
   the Visual Workbench, select Options and choose Project.
   Then choose Compiler. Change the Category to Optimizations,
   and choose the inline option from the Inline Expansion of
   Functions box.

</PRE></UL><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: /Ob1 or /Ob2
   */

   /* TEST.H */
   class ClassA
   {
       private:
           int  Var;
       public:
          ClassA ();
          ~ClassA ();
   };

   /* TEST1.CPP */
   #include "test.h"
   void testfunc(void);
   inline ClassA::ClassA() { Var = 6; };  // Inline function definition
   ClassA::~ClassA() {}
   void main(void) {
       ClassA test1;
       testfunc();
   }

   /* TEST2.CPP */
   #include "test.h"
   void testfunc(void)
   {
       ClassA test2;  // This generates an unresolved external error
                      // on the default constructor when linked
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords          : CPPIss kberrmsg<BR>
Version           : MS-DOS:7.0;WINDOWS:1.0,1.5,1.51,1.52;WINDOWS  NT:1.0,2.0,4.0,4.1,4.2,5.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

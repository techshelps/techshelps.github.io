

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Evaluation Order of Expression and Function Args Undefined </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q50694 ">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1989/11/07">
<META NAME="Keywords" CONTENT="CLngIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Side effect operators (++, --, =, +=, -=, *=, /=, %=, *=, |=, ^=,          &gt;&gt;=) may cause unexpected results if they are used on the same variable or memory location more than once in the same expression. The order in which side effects occur withi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAR4,QAAP,QBFY,QAB9,QBJQ,QAL3,QAKD,QAJQ,QBAC,QAPN,QBW7,QBWP,QALQ,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Evaluation Order of Expression and Function Args Undefined</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q50694 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Side effect operators (++, --, =, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, and
&gt;&gt;=) may cause unexpected results if they are used on the same variable or
memory location more than once in the same expression. The order in which
side effects occur within an expression is not specified.
<P>
Do NOT expect any specific order of evaluation to take place. The
discretion is left to the compiler to determine how it implements the
evaluation order. The evaluation order could be affected by machine
architecture and code optimization. Although such code may work sometimes,
it is not guaranteed to work, and is therefore unsafe.
<P>
NOTE: Kernighan and Ritchie do an excellent job explaining the ANSI C
Standard for the evaluation order of expressions in Section 2.12 of "The C
Programming Language - 2nd Edition" by Kernighan and Ritchie.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
It is easy to accidentally write nonportable code with the C language.
Below are some other common examples of statements that can cause side
effects during run time:
<P>
<PRE>   printf("%d %d \n", ++n, power(2, n));   /* WRONG */

</PRE>The above statement can produce different results with different compilers,
depending on whether "n" is incremented before "power" is called. The
correct code is as follows:
<P>
<PRE>   n++;                                  /* CORRECT */
   printf("%d %d \n", n, power(2, n));

</PRE>Another common pitfall is the following:
<P>
<PRE>   a[i] = i++;     /* WRONG */

</PRE>The question is whether the subscript of "a" is the old value of "i" or the
new value. The correct code is as follows:
<P>
<PRE>   a[i] = a[i+1];    /* CORRECT */
   i++;

</PRE>Another example is as follows:
<P>
<PRE>   int x[10], *p = x;

   *p++ = *p++ = 0;  /* WRONG */

</PRE>The compiler is allowed to "p" twice at the end after doing the two
assignments, if it so chooses. To ensure correct code generation, you must
code as follows:
<P>
<PRE>   *p++ = 0;  *p++ = 0;   /* CORRECT */

</PRE>In general, any object may have its stored value modified at most once in a
single expression; in addition, the prior value shall be accessed only to
determine the value to be stored. Therefore,
<P>
<PRE>   i = i + 1;    /* OK */

</PRE>is allowed because "i" is modified only once, and "i" is accessed only to
determine what to store in "i", but
<P>
<PRE>   i = ++i + 1;  /* UNDEFINED */

</PRE>is undefined because "i" is modified more than once in the course of the
evaluation of the expression.
<P>
Instead, the following pair of statements is correct:
<P>
<PRE>   ++i;
   i = i + 1;    /* OK */

</PRE>The statement:
<P>
<PRE>   a[i] = i++;  /* UNDEFINED */

</PRE>is undefined, because, although "i" is only modified once, it is accessed
both to determine the value to be stored in "i" by the ++ operator and as a
subscript.
 
<PRE>Keywords          : CLngIss kbfasttip
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0; OS/2:5.1,6.0,6.00a;  WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,4.0,5.0
Platform          : MS-DOS NT OS/2 WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

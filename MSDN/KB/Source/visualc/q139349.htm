

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: C2607 Error Passing Ref to Pointer w/ Templated Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139349">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1995/11/08">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When you pass a reference to a pointer of the templated type, the compiler incorrectly generates an error at the point where the function is called. The error is:     C2607: 'initializing' : cannot implicitly convert a '      *' to a    'type*** ' ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAD7,QAH7,QAH6,QAO3,QAO2,QBQU,QAH4,QBC9,QBC8,QANO,QAY5,QAAP,QBV8,QAGI,QAC2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: C2607 Error Passing Ref to Pointer w/ Templated Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139349</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 2.20
WINDOWS NT
kbprg kbbuglist kbfixlist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-Bit Edition, versions 2.0, 2.1, 2.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you pass a reference to a pointer of the templated type, the compiler
incorrectly generates an error at the point where the function is called.
The error is:
<P>
<PRE>   C2607: 'initializing' : cannot implicitly convert a '&lt;type&gt;*' to a
   'type**&amp; ' that is not const

</PRE>where &lt;type&gt; represents the data type to which the templated data type is
being instantiated for the function call.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
You may be able to accomplish the same thing by remembering that pointers
are similar to references, so you may be able to pass a pointer to a
pointer instead of a reference to a pointer. The problem with this is that
it requires code modification at the point where the function is called
because you must pass the address of the pointer. Also, you need to modify
the code at any point within the function where the pointer is referenced,
which means that one more level of de-referencing is required.
<P>
If it is not necessary to change the address the pointer points to, an
easier solution is to simply pass the pointer instead of a reference (or
pointer) to the pointer. This workaround requires no code modification at
all, but the address the pointer points to cannot be permanently changed
from within the function.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This problem was corrected in Microsoft
Visual C++, 32 bit edition, version 4.0.
<P>
<P><h3>Sample Code to Demonstrate Problem</h3>
 
<P>
<PRE>/* Compile options needed: None - build the following as a console app
   using default options.
*/

#include &lt;iostream.h&gt;

</PRE>template &lt;class T&gt;
<PRE>void fn(T*&amp; ptr)
</PRE>{
<PRE>   *ptr = 71957;
</PRE>}
<P>
<PRE>void main()
</PRE>{
<PRE>    int i = 123;
    int* ip = &amp;i;
    fn(ip);   // &lt;=== error C2607: 'initializing' : cannot implicitly
              //      convert a 'int*' to a 'int**&amp; ' that is not const
   cout &lt;&lt; *ip &lt;&lt; endl;
   cin &gt;&gt; i;
</PRE>}
<P>
<P><h3>Example Workaround</h3>
 
<P>
In this case, the address the pointer points to does not need to be
permanently changed, so you could simply remove the ampersane (&amp;) from this
line:
<P>
<PRE>   void fn(T*&amp; ptr)

</PRE>This is sufficient to make the program compile and run correctly. If it was
necessary to change the address that ptr points to permanently within the
fn function, you could change it to void fn(T** ptr), and add an additional
level of indirection to every reference of ptr within fn. It would also be
necessary to add the ampersand (&amp;) operator to every call of fn in order to
pass the address of its argument. In the previous code sample, fn(ip) would
have to be changed to fn(&amp;ip).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 2.10 2.20 9.0 9.00<BR>
KBCategory: kbprg kbbuglist kbfixlist<BR>
KBSubcategory: CPPIss<BR>
Version           : 2.00 2.10 2.20<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for Trigonometry (sin, cos, tan, etc.) Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157950">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/21">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the STL acos, asin, atan, atan2, cos, cosh, sin, sinh, tan, tanh functions in Visual C++.  MORE INFORMATION  Required Header                            Prototype ---------  // acos      template         ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAL3,QAGI,QBE7,QBE6,QA36,QAY5,QBA8,QAI4,QAIF,QBFY,QBV8,QABO,QAFR,QAKD,QAHH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for Trigonometry (sin, cos, tan, etc.) Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157950</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
<P>
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the STL acos, asin, atan,
atan2, cos, cosh, sin, sinh, tan, tanh functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;valarray&gt;
   &lt;cmath&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>// acos
     template&lt;class T&gt;
     inline valarray&lt;T&gt; acos(const valarray&lt;T&gt;&amp; x);

// asin
     template&lt;class T&gt;
     inline valarray&lt;T&gt; asin(const valarray&lt;T&gt;&amp; x);

// atan
     template&lt;class T&gt;
     inline valarray&lt;T&gt; atan(const valarray&lt;T&gt;&amp; x);

// atan2
     template&lt;class T&gt;
     inline valarray&lt;T&gt; atan2(const valarray&lt;T&gt;&amp; x, const valarray&lt;T&gt;&amp; y);

     template&lt;class T&gt;
     inline valarray&lt;T&gt; atan2(const valarray&lt;T&gt; x, const T&amp; y);

     template&lt;class T&gt;
     inline valarray&lt;T&gt; atan2(const T&amp; x, const valarray&lt;T&gt;&amp; y);

// cos
     template&lt;class T&gt;
     inline valarray&lt;T&gt; cos(const valarray&lt;T&gt;&amp; x);

// cosh
     template&lt;class T&gt;
     inline valarray&lt;T&gt; cosh(const valarray&lt;T&gt;&amp; x);

// sin
     template&lt;class T&gt;
     inline valarray&lt;T&gt; sin(const valarray&lt;T&gt;&amp; x);

// sinh
     template&lt;class T&gt;
     inline valarray&lt;T&gt; sinh(const valarray&lt;T&gt;&amp; x);

// tan
     template&lt;class T&gt;
     inline valarray&lt;T&gt; tan(const valarray&lt;T&gt;&amp; x);

// tanh
     template&lt;class T&gt;
     inline valarray&lt;T&gt; tanh(const valarray&lt;T&gt;&amp; x);

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
This article illustrates the use of STL trigonometry functions through
sample code.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// main.cpp : Illustrates the use of STL trigonometry functions.
//
// Functions:
//
//  acos, asin, atan, atan2, cos, cosh, sin, sinh, tan, tanh
//
// Written by Yeong-Kah Tam
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;                 // for i/o functions
#include &lt;valarray&gt;                 // for valarray
#include &lt;cmath&gt;                    // for trigonometry functions

#define ARRAY_SIZE  3               // array size

void main()
</PRE>{
<PRE>    // Initialize val_array to values -1, 0 and 1.
    valarray&lt;double&gt; val_array(ARRAY_SIZE);
    for (int i = 0; i &lt; ARRAY_SIZE; i++)
        val_array[i] = i - 1;

    // Display the size of val_array.
    cout &lt;&lt; "Size of val_array = " &lt;&lt; val_array.length() &lt;&lt; endl;

    // Display the values of val_array before calling any trigonometry
    // functions.
    cout &lt;&lt; "The values in val_array:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; val_array[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // Initialize rev_valarray that is the reverse of val_array.
    valarray&lt;double&gt; rev_valarray(ARRAY_SIZE);
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        rev_valarray[i] = val_array[ARRAY_SIZE - i - 1];

    // Display the size of rev_valarray.
    cout &lt;&lt; "Size of rev_valarray = " &lt;&lt; rev_valarray.length() &lt;&lt; endl;

    // Display the values of rev_valarray.
    cout &lt;&lt; "The values in rev_valarray:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rev_valarray[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // rvalue_array to hold the return value from calling the trigonometry
    // functions.
    valarray&lt;double&gt; rvalue_array;

    // ----------------------------------------------------------------
    // acos() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = acos(val_array);
    cout &lt;&lt; "The result after calling acos():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // asin() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = asin(val_array);
    cout &lt;&lt; "The result after calling asin():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // atan() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = atan(val_array);
    cout &lt;&lt; "The result after calling atan():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // atan2() - display the result of rvalue_array
    // ----------------------------------------------------------------

    // This template function returns an object of class valarray&lt;T&gt;,
    // each of whose elements at I is the arctangent of x[I] / y[I].
    rvalue_array = atan2(val_array, rev_valarray);
    cout &lt;&lt; "The result after calling atan2(val_array, rev_valarray):"
         &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I the arctangent of
    // x[I] / y.
    rvalue_array = atan2(val_array, 3.1416);
    cout &lt;&lt; "The result after calling atan2(val_array, 3.1416):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I the arctangent of
    // x / y[I].
    rvalue_array = atan2(3.1416, val_array);
    cout &lt;&lt; "The result after calling atan2(3.1416, val_array):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // cos() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = cos(val_array);
    cout &lt;&lt; "The result after calling cos():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // cosh() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = cosh(val_array);
    cout &lt;&lt; "The result after calling cosh():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // sin() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = sin(val_array);
    cout &lt;&lt; "The result after calling sin():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // sinh() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = sinh(val_array);
    cout &lt;&lt; "The result after calling sinh():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // tan() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = tan(val_array);
    cout &lt;&lt; "The result after calling tan():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // tanh() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = tanh(val_array);
    cout &lt;&lt; "The result after calling tanh():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;
</PRE>}
<P>
<P><h3>Program Output</h3>
 
<P>
Size of val_array = 3
The values in val_array:
<PRE>-1    0    1

</PRE>Size of rev_valarray = 3
The values in rev_valarray:
<PRE>1    0    -1

</PRE>The result after calling acos():
<PRE>3.14159     1.5708     0

</PRE>The result after calling asin():
<PRE>-1.5708     0     1.5708

</PRE>The result after calling atan():
<PRE>-0.785398     0     0.785398

</PRE>The result after calling atan2(val_array, rev_valarray):
<PRE>-0.785398     0     2.35619

</PRE>The result after calling atan2(val_array, 3.1416):
<PRE>-0.308168     0     0.308168

</PRE>The result after calling atan2(3.1416, val_array):
<PRE>1.87896     1.5708     1.26263

</PRE>The result after calling cos():
<PRE>0.540302     1     0.540302

</PRE>The result after calling cosh():
<PRE>1.54308     1     1.54308

</PRE>The result after calling sin():
<PRE>-0.841471     0     0.841471

</PRE>The result after calling sinh():
<PRE>-1.1752     0     1.1752

</PRE>The result after calling tan():
<PRE>-1.55741     0     1.55741

</PRE>The result after calling tanh():
<PRE>-0.761594     0     0.761594

</PRE><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample acos, asin, atan, atan2, cos, cosh,<BR>
sin, sinh, tan, tanh<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the stack::size Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158039">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/22">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the stack::size STL function in Visual C++.  MORE INFORMATION  Required Header              Prototype ---------     template                                     size_type stack::size() const;  NOTE: The ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QBFY,QABH,QABI,QA7R,QAY5,QATX,QAJQ,QBV8,QALW,QAPF,QAB9,QA56,QA55,QABB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the stack::size Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158039</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the stack::size STL function
in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;stack&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   template&lt;class _TYPE, class _C, class _A&gt;
   size_type stack::size() const;

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The stack::size function returns the number of elements in the stack.
It is okay to call this function with an empty stack; it will return a
value of 0.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackSize.cpp : Illustrates how to use the size function to determine
//                 the number of elements on the stack.
//
// Functions:
//
//    size :  returns the number of elements in the stack.
//
// Written by Derek Jamison
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<PRE>#include &lt;stack&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

</PRE>typedef stack&lt;string, deque&lt;string, allocator&lt;string&gt; &gt;,
<PRE>              allocator&lt;string&gt; &gt; STACK_STRING;

void main()
</PRE>{
<PRE>   STACK_STRING stack1;

   // Check the size of an empty stack. Should return 0.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl;

   // Add item "Hello" to Stack1.
   cout &lt;&lt; "stack1.push('Hello')" &lt;&lt; endl;
   stack1.push("Hello");

   // Add item "This is the second element" to Stack1.
   cout &lt;&lt; "stack1.push('This is the second element')" &lt;&lt; endl;
   stack1.push("This is the second element");

   // Check the size of Stack1. Should return 2.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl &lt;&lt; endl;

   // Add item "Third element" to Stack1.
   cout &lt;&lt; "stack1.push('Third element')" &lt;&lt; endl;
   stack1.push("Third element");

   // Check the size of Stack1. Should return 3.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl &lt;&lt; endl;

   // Pop "Third element".
   cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
   stack1.pop();

   // Pop "This is the second element".
   cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
   stack1.pop();

   // Check the size of Stack1 again. Should return 1.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size()  &lt;&lt; endl &lt;&lt; endl;

   // Pop "Hello".
   cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
   stack1.pop();

   // Check the size of Stack1. Should return 0.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl &lt;&lt; endl;
</PRE>}
<P>
Program Output is:
<P>
stack1.size() equals 0
<P>
stack1.push('Hello')
stack1.push('This is the second element')
stack1.size() equals 2
<P>
stack1.push('Third element')
stack1.size() equals 3
<P>
stack1.pop()
stack1.pop()
stack1.size() equals 1
<P>
stack1.pop()
stack1.size() equals 0
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample size<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

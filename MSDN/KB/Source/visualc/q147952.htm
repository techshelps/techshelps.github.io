

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Two-Way Communication Using IDispatch in MFC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147952">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1996/03/05">
<META NAME="Keywords" CONTENT="kbsample MfcOLE kbcode kbfile kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Although there may be several ways to implement communication between two executables, this sample illustrates a simple way a server and a client application can communicate using IDispatch interfaces. This may not be the best method, but it is str...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QARL,QAGI,QAPG,QBBS,QAH6,QAG9,QAY2,QAPN,QBVX,QAYV,QAO3,QAO2,QAIJ,QAH7,QAD7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Two-Way Communication Using IDispatch in MFC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147952</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00 2.10 2.20 4.00 4.10
WINDOWS NT
kbprg kbfile kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.10, 2.2,
<P><PRE>     4.0, 4.1
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Although there may be several ways to implement communication between two
executables, this sample illustrates a simple way a server and a client
application can communicate using IDispatch interfaces. This may not be the
best method, but it is straight forward to implement. Using dual interfaces
may provide a better solution, however.
<P>
The sample consists of two executables. One, GENERAT.EXE, is a local
server, and the other, GENCLNT.EXE, is a client of the server. Both client
and server are automation servers in that they both support automation
interfaces. The client application starts the server via CreateDispatch and
thus obtains the servers IDispatch interface. The client then passes its
IDispatch interface to the server using one of the server's interface
methods. At this point, two-way communication between the client and the
server is possible.
<P>
Be sure to run the server stand-alone once before running it from the
client. This will register the server and enable the client to start it
dynamically.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Dispcom.exe">Dispcom.exe</A> <I>(size: 98071 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running Dispcom.exe to decompress the file
and recreate the proper directory structure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The GENERAT.EXE local server generates and displays random colors. It can
either generate one color each time as it is requested, or it can
continuously generate colors in response to a WM_TIMER message. The
GENERAT.EXE server can run either stand-alone or it can be controlled by a
client (in this case the GENCLNT.EXE application). In either case, the
server will be visible, and the server's user interface will be active.
This means the client and the server will need to communicate with each
other to keep the user interface of the client and server synchronized and
to process requests from the other.
<P>
Below is a list of relavent methods from GENERAT.EXE and GENCLNT.EXE and a
description of each method.
<P>
GENERAT.EXE methods:
<P>
BOOL SetAdviseDI(LPDISPATCH DispIToAdvise);
<P>
<PRE>    The client starts the server via CreateDispatch and thus obtains the
    IDispatch pointer of the server.  Once the client has the server's
    IDispatch  pointer, it can call this method in the server sending
    its own IDispatch pointer.  At this point, two-way communication is
    possible between the client and the server.

void ReleaseAdviseDI();

    Called by the client to tell the server to release the
    IDispatch pointer of the client.

</PRE>BOOL AnimateColors();
<P>
<PRE>    Called by the client to request that the server generate colors in
    response to WM_TIMER messages.

void GenNewColor();

    Called by the client to request that the server generate a single
    new color.

</PRE>GENCLNT.EXE methods:
<P>
<PRE>void SetAnimateUI();

    Called by the server when Animate Colors is chosen via the server
    user interface. This keeps the Animate Colors menu choice of the client
    synchronized with that of the server.

void NotifyColorChange(const VARIANT FAR&amp; refColor);

    Called by the server when a color is generated. Called regardless
    of whether the color was requested by the client or the server.

</PRE>Note: In order to compile this sample under VC 4.0 and later it will be
necessary to replace the following code from generat.cpp:
<P>
Replace:
<P>
<PRE>   POSITION pos = AfxGetApp()-&gt;m_templateList.GetHeadPosition();
   while (pos != NULL)
   {
      CDocTemplate* pTemplate = (CDocTemplate*)AfxGetApp()-&gt;
         m_templateList.GetNext(pos);
      ASSERT(pTemplate-&gt;IsKindOf(RUNTIME_CLASS(CDocTemplate)));

</PRE>With:
<P>
<PRE>   POSITION pos = AfxGetApp()-&gt;GetFirstDocTemplatePosition();
   while (pos != NULL)
   {
      CDocTemplate* pTemplate = (CDocTemplate*)AfxGetApp()-&gt;
         GetNextDocTemplate(pos);
      ASSERT(pTemplate-&gt;IsKindOf(RUNTIME_CLASS(CDocTemplate)));

</PRE><h2>REFERENCES</h2>
 
<P>
For information about the necessity of calling AddRef on an IDispatch
pointer passed across process boundaries, please see the following article
in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q133042.htm">Q133042</A></B>
   TITLE     : How to Pass IDispatch Pointer &amp; Avoid an Application Error
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbfile kbcode<BR>
KBSubcategory: MfcOLE kbsample<BR>
Additional reference words: 1.50 1.51 1.52 1.52b 2.00 2.10 2.20<BR>
2.50 2.51 2.52 2.52b 3.00 3.10 3.20 4.00 4.10 softlib<BR>
Keywords            : kbsample MfcOLE kbcode kbfile kbprg<BR>
Technology          : kbMfc<BR>
Version             : 2.00 2.10 2.20 4.00 4.10<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

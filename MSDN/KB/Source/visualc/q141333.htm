

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: VSWAP Demos Multiple-View Switching in SDI </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141333">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1995/12/17">
<META NAME="Keywords" CONTENT="MfcDocView kbprg kbsample kbfile">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  VSWAP demonstrates methods of switching between multiple views on a single document in a single-document interface (SDI) application. VSWAP displays two form views and a normal view that displays the list of data collected in the two form views.  N...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADK,QAKR,QBWT,QAPF,QAHE,QAH4,QAUD,QAXB,QAPN,QAYY,QAHT,QAGI,QAC1,QAY2,QAW6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: VSWAP Demos Multiple-View Switching in SDI</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141333</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.50, 1.51, 1.52
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
VSWAP demonstrates methods of switching between multiple views on a single
document in a single-document interface (SDI) application. VSWAP displays
two form views and a normal view that displays the list of data collected
in the two form views.
<P>
NOTE: This is the 16-bit version of this sample. There is an equivalent
32-bit sample available under the name VSWAP32.
<P>
This sample application demonstrates using DDX/DDV (dialog data
exchange/dialog data validation), with correct document updating and
data validation when switching between views. It also correctly
catches unsaved/unvalidated data when the application is closed.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Vswap.exe">Vswap.exe</A> <I>(size: 43589 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>After downloading the file, use the following command to extract the
sample and build the appropriate directory structure:
<P>
<PRE>   VSWAP.EXE -d

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The most important implementations of this are in:
<P>
<PRE>   CVswapApp::InitInstance
   CVswapApp::SwitchView
   CVswapApp::SaveActiveViewsData

</PRE>The standard InitInstance code creates an initial frame, document, and
view during the call to OnFileNew. The code added to the end of the
InitInstance in this sample creates the view objects for the extra views
used in this application and stores their pointers in a CVswapApp member
array. It then cycles through a loop which creates the windows for the
view objects. Each view window is created with a unique child window ID
and a CCreateContext object that associates each view with the same
CDocument object, which was created by OnFileNew. Finally, the sample code
triggers the OnInitialUpdate for the extra views.
<P>
The SwitchView function created in this sample swaps the current view with
a previously hidden view. It accomplishes this by first switching their
child window IDs. This is necessary because MFC relies on the standard
view pane having the child window ID of AFX_IDW_PANE_FIRST. The rest of
the code hides the current view and tells MFC to repaint and begin using
the new view.
<P>
The SaveActiveViewsData is used to save the information from the active
view to the document object. It is called by SwitchView whenever a view is
switched. SaveActiveViewsData subsequently calls the view's SetToDoc,
which actually updates the data from the form view to the document by
calling UpdateData with an argument of TRUE. This function uses the
DDX/DDV functions specified in the view's DoDataExchange.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   The SwitchView function is included here as a reference.

   CView* CVswapApp::SwitchView( UINT nIndex )
   {
       ASSERT( nIndex &gt;=0 &amp;&amp; nIndex &lt; NUMVIEWS );

       CView* pNewView = m_pViews[nIndex];

       CView* pActiveView =
       ((CFrameWnd*) m_pMainWnd)-&gt;GetActiveView();

       if ( !pActiveView )    // No currently active view
           return NULL;

       if ( pNewView == pActiveView )    // Already there
           return pActiveView;

       // Update Doc's data if needed
       // Don't change view if data valiation fails
       if ( ! SaveActiveViewsData() )
       {
           return pActiveView;
       }

       m_nCurView = nIndex;    // Store the new current view's index

       // exchange view window IDs so RecalcLayout() works
       UINT temp = ::GetWindowWord(pActiveView-&gt;m_hWnd, GWW_ID);
       ::SetWindowWord(pActiveView-&gt;m_hWnd, GWW_ID,
             ::GetWindowWord(pNewView-&gt;m_hWnd, GWW_ID));
       ::SetWindowWord(pNewView-&gt;m_hWnd, GWW_ID, temp);

       // Display and update the new current view - hide the old one
       pActiveView-&gt;ShowWindow(SW_HIDE);
       pNewView-&gt;ShowWindow(SW_SHOW);
       ((CFrameWnd*) m_pMainWnd)-&gt;SetActiveView(pNewView);
       ((CFrameWnd*) m_pMainWnd)-&gt;RecalcLayout();
       pNewView-&gt;Invalidate();
       return pActiveView;
   }

</PRE><h2>REFERENCES</h2>
 
<P>
For examples of other applications that switch views, please refer to the
following SAMPLES:
<P>
<PRE>   COLLECT (SDI)
   ENROLL  (SDI)
   VWRPLC  (MDI)
   SPLIT   (Splitter).

</PRE>For more information on DDX and DDV routines, please see Technical Note
26: DDX and DDV Routines in the Microsoft Development Library.
<P>
For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q99562.htm">Q99562</A></B>
   TITLE     : Switching Views in a Single Document Interface Program
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: VSWAP VSWAP32<BR>
Keywords          : MfcDocView kbprg kbsample kbfile<BR>
Technology        : kbMfc<BR>
Version           : 1.0 1.5 1.51 1.52 2.0 2.1 2.52<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbcode<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

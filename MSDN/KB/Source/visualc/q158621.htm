

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for vector::(size, capacity, and so on) Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158621">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/11/01">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following sample code illustrates how to use the vector::reserve, vector::max_size, vector::resize, and vector::capacity STL functions in Visual C++.  MORE INFORMATION  Required Header               Prototypes     template                      ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADF,QBFY,QABO,QAUD,QA4Q,QA36,QAPF,QAP2,QA56,QA55,QAY5,QAB4,QABB,QAKC,QBJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for vector::(size, capacity, and so on) Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158621</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following sample code illustrates how to use the vector::reserve,
vector::max_size, vector::resize, and vector::capacity STL functions
in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;vector&gt;

</PRE><h3>Prototypes</h3>
 
<P>
<PRE>   template&lt;class _TYPE, class _A&gt;
   void vector::reserve(size_type _N);

   template&lt;class _TYPE, class _A&gt;
   size_type vector::max_size() const;

   template&lt;class _TYPE, class _A&gt;
   void vector::resize(size_type _N, _TYPE _X = _TYPE());

   template&lt;class _TYPE, class _A&gt;
   size_type vector::capacity() const;

   template&lt;class _TYPE, class _A&gt;
   size_type vector::size() const;

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The sample declares an empty vector of integers. It adds a single integer
element to the vector, and then shows information about the vector's size,
maximum size, and capacity. It reserves storage for 1000 elements and
displays the same information about the vector. Finally, it resizes the
vector to 2000 elements, and then displays the information.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
//    Remax.cpp: Illustrates vector::reserve, vector::max_size,
//               vector::resize, vector::resize, and vector::capacity.
//
// Functions:
//
//    vector::max_size - Returns maximum number of elements vector could
//                       hold.
//
//    vector::capacity - Returns number of elements for which memory has
//                       been allocated.
//
//    vector::size - Returns number of elements in the vector.
//
//    vector::resize - Reallocates memory for vector, preserves its
//                     contents if new size is larger than existing size.
//
//    vector::reserve - Allocates elements for vector to ensure a minimum
//                      size, preserving its contents if the new size is
//                      larger than existing size.
//
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
// Written by Tom Campbell
// of Microsoft Corporation
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is disabled.
</PRE>#pragma warning(disable:4786)
<P>
<PRE>#include &lt;iostream&gt;
#include &lt;vector&gt;

</PRE>typedef vector&lt;int, allocator&lt;int&gt; &gt; INTVECTOR;
<P>
<PRE>void main()
</PRE>{
<PRE>    // Dynamically allocated vector begins with 0 elements.
    INTVECTOR theVector;

    // Add one element to the end of the vector, an int with the value 42.
    theVector.push_back(42) ;

    // Show statistics about vector.
    cout &lt;&lt; "theVector's size is: " &lt;&lt; theVector.size() &lt;&lt; endl;
    cout &lt;&lt; "theVector's maximum size is: " &lt;&lt; theVector.max_size()
         &lt;&lt; endl;
    cout &lt;&lt; "theVector's capacity is: " &lt;&lt; theVector.capacity() &lt;&lt; endl;

    // Ensure there's room for at least 1000 elements.
    theVector.reserve(1000);
    cout &lt;&lt; endl &lt;&lt; "After reserving storage for 1000 elements:" &lt;&lt; endl;
    cout &lt;&lt; "theVector's size is: " &lt;&lt; theVector.size() &lt;&lt; endl;
    cout &lt;&lt; "theVector's maximum size is: " &lt;&lt; theVector.max_size()
         &lt;&lt; endl;
    cout &lt;&lt; "theVector's capacity is: " &lt;&lt; theVector.capacity() &lt;&lt; endl;

    // Ensure there's room for at least 2000 elements.
    theVector.resize(2000);
    cout &lt;&lt; endl &lt;&lt; "After resizing storage to 2000 elements:" &lt;&lt; endl;
    cout &lt;&lt; "theVector's size is: " &lt;&lt; theVector.size() &lt;&lt; endl;
    cout &lt;&lt; "theVector's maximum size is: " &lt;&lt; theVector.max_size()
         &lt;&lt; endl;
    cout &lt;&lt; "theVector's capacity is: " &lt;&lt; theVector.capacity() &lt;&lt; endl;
</PRE>}
<P>
<P><h3>Program Output</h3>
 
<P>
theVector's size is: 1
theVector's maximum size is: 1073741823
theVector's capacity is: 1
<P>
After reserving storage for 1000 elements:
theVector's size is: 1
theVector's maximum size is: 1073741823
theVector's capacity is: 1000
<P>
After resizing storage to 2000 elements:
theVector's size is: 2000
theVector's maximum size is: 1073741823
theVector's capacity is: 2000
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books Online: Visual C++ Books; C/C++; Standard C++ Library
Reference
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Compiler Errors Initializing const Reference to an Array </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116240">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1994/06/14">
<META NAME="Keywords" CONTENT="CPPIss vcbuglist400 vcbuglist500">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Initializing a  const  reference to an array with a  non-const  array causes incorrect compiler errors to be generated. Two such errors are C2607 and C2561.  CAUSE =====  The C++ compiler does not properly handle initialization of a  const T* , whe...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAUD,QAAP,QBFY,QAKP,QA4Q,QAOT,QDKW,QBVV,QAYL,QAYY,QALZ,QARR,QAP2,QALW V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Compiler Errors Initializing const Reference to an Array</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116240</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 4.1, 4.2,
<P><PRE>     5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Initializing a "const" reference to an array with a "non-const" array
causes incorrect compiler errors to be generated. Two such errors are C2607
and C2561.
<P>
<P><h2>CAUSE</h2>
 
<P>
The C++ compiler does not properly handle initialization of a "const T&amp;",
where T is an array. For example, you should be able to initialize a
variable of type "const float (&amp;ref)[3][2]" with a variable of type "float
[3][2]", but the compiler does not handle this case. Furthermore,
interactions between const declarations and typedefs of arrays do not work
in all circumstances.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the products listed at the
beginning of this article. We are researching this problem and will post
new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around the problem, either do not use the const specifier or add
explicit casts to the appropriate const types.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below demonstrates the problem. Compiling it yields at
least one of the following error messages:
<P>
<PRE>   "error C2607: 'initializing' : cannot implicitly convert a 'int [3][2]'
   to a 'int __near &amp;[3][2]' that is not const"

   -or-

   "error C2561: 'getMtx' : function must return a value"

</PRE>To work around the problem, use each commented line in the program to
replace the line immediately above it.
<P>
NOTE: Simply removing the const specifier from the getMtx function's return
type eliminates the problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */
   typedef int Matrix[3][2];

   class Data
   {
       Matrix Mtx;
       const Matrix&amp; getMtx();
       // const int (&amp;getMtx() const)[3][2];
   };

   inline const Matrix&amp; Data::getMtx()
   // inline const int (&amp;Data::getMtx() const)[3][2]
   {
       return Data::Mtx;
       // return (const int (&amp;)[3][2])Data::Mtx[0][0];
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00<BR>
Keywords            : CPPIss vcbuglist400 vcbuglist500<BR>
Version             : 7.0 1.0 1.5 2.0 4.0 4.1 4.2 5.0<BR>
Platform            : MS-DOS NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

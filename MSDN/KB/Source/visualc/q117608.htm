

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: OnScroll Change Between Visual C++ 1.0 and 1.5 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117608">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/06/30">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Programs overriding or calling CScrollView::OnScroll() work when compiled with Visual C++, version 1.0 (using the MFC, version 2.0), but work incorrectly when compiled with Visual C++, version 1.5 (using the MFC, version 2.5).  For example, the EX0...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA55,QBFY,QA56,QAGX,QAFV,QAH4,QAI4,QAGI,QAFK,QAHE,QAC1,QAY5,QAG0,QAYV,QALG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: OnScroll Change Between Visual C++ 1.0 and 1.5</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117608</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50
WINDOWS
kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Programs overriding or calling CScrollView::OnScroll() work when compiled
with Visual C++, version 1.0 (using the MFC, version 2.0), but work
incorrectly when compiled with Visual C++, version 1.5 (using the MFC,
version 2.5).
<P>
For example, the EX04C sample, in the book "Inside Visual C++" (written for
Visual C++, version 1.0), calls OnScroll() when it receives arrow-key
keystrokes, allowing the user to scroll through the document. This works
correctly in Visual C++, version 1.0, but does not work well in Visual C++,
version 1.5.
<P>
<P><h2>CAUSE</h2>
 
<P>
CScrollView::OnScroll() was an undocumented function in Visual C++, version
1.0. It was changed, and the new version was documented for Visual C++,
version 1.5.
<P>
In Visual C++ , version 1.0, CScrollView::OnScroll() was defined as
<P>
<PRE>   void CScrollView::OnScroll(int nBar, UINT nSBCode, UINT nPos)

</PRE>where nBar specified SB_HORZ or SB_VERT to handle vertical or horizontal
scrolling. The function was also listed under the "Implementation" section
of the CScrollView class definition, which generally means that a function
is internal and may change in the future.
<P>
Visual C++, version 1.5, defines a virtual OnScroll() for both CView and
CScrollView. This is now a public and documented function:
<P>
<PRE>   BOOL CScrollView::OnScroll(UINT nScrollCode, UINT nPos, BOOL bDoScroll)

</PRE>Because the actual underlying parameter types match closely enough for the
different versions of OnScroll(), code from Visual C++, version 1.0, can be
compiled using Visual C++, version 1.5. However, the two functions differ
enough (see the Visual C++ version 1.5 documentation of "OnScroll" for more
details on how it works) that such programs generally do not work.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Change any calls to or derivations from OnScroll() to correctly pass the
needed parameters.
<P>
For example, the sample code below (taken from "Inside Visual C++") calls
OnScroll() when various arrow keys are pressed in a CScrollView-derived
view:
<P>
<PRE>    void CEx04cView::OnKeyDown( UINT nChar, UINT nRepCnt, UINT nFlags )
    {
     switch( nChar )
     {
      case VK_HOME:
        OnScroll( SB_VERT, SB_TOP, 0 );
        OnScroll( SB_HORZ, SB_TOP, 0 );
      break;
      case VK_END:
        OnScroll( SB_VERT, SB_BOTTOM, 0 );
      break;
      case VK_UP:
        OnScroll( SB_VERT, SB_LINEUP, 0 );
      break;
      case VK_DOWN:
        OnScroll( SB_VERT, SB_LINEDOWN, 0 );
      break;
      case VK_PRIOR:
         OnScroll( SB_VERT, SB_PAGEUP, 0 );
      break;
      case VK_NEXT:
        OnScroll( SB_VERT, SB_PAGEDOWN, 0 );
      break;
      case VK_LEFT:
        OnScroll( SB_HORZ, SB_PAGEUP, 0 );
      break;
      case VK_RIGHT:
        OnScroll( SB_HORZ, SB_PAGEDOWN, 0 );
      break;
      default:
        break;
     }
    }

</PRE>If compiled using Visual C++, version 1.0, this code works correctly. If
compiled using Visual C++, version 1.5, the user cannot scroll when the
corresponding arrow key is pressed. A correct Visual C++ version 1.5
implementation of this code follows below:
<P>
<PRE>    void CMyView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
    {
    #define MAKESCROLLWORD(v,h) ( (((BYTE)(short)v)&lt;&lt;8)|(BYTE)h )

     switch(nChar)
     {
      case VK_HOME:
        // High byte is vertical, low byte is horizontal
        // -1 does nothing
        OnScroll( MAKESCROLLWORD(SB_TOP,SB_TOP), 0 );
      break;

      case VK_END:
        OnScroll( MAKESCROLLWORD(SB_BOTTOM, SB_BOTTOM), 0 );
      break;

      case VK_UP:
        OnScroll( MAKESCROLLWORD(SB_LINEUP, -1), 0 );
      break;

      case VK_DOWN:
        OnScroll( MAKESCROLLWORD(SB_LINEDOWN, -1), 0);
      break;

      case VK_PRIOR:    // page up
        OnScroll( MAKESCROLLWORD(SB_PAGEUP, -1), 0 );
      break;

      case VK_NEXT:    // page down
        OnScroll( MAKESCROLLWORD(SB_PAGEDOWN, -1), 0);
      break;

      case VK_LEFT:
        OnScroll( MAKESCROLLWORD(-1,SB_LINEUP), 0 );
      break;

      case VK_RIGHT:
        OnScroll( MAKESCROLLWORD(-1,SB_LINEDOWN), 0 );
      break;
     }

     CScrollView::OnKeyDown(nChar, nRepCnt, nFlags);
    }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.50<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcUI<BR>
Keywords            : kb16bitonly<BR>
Technology          : kbMfc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: 4 Class Wizard Problems w/ International System Settings </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149237">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/03/28">
<META NAME="Keywords" CONTENT="MfcMisc WizardIss kbbuglist kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Specifying an international setting for Windows that uses a comma (,) as the decimal separator in floating point numbers can cause the following four separate problems when you use the ClassWizard to generate DDV routines for dialog controls.  NOTE...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAQ,QABA,QAKP,QAB4,QABB,QAAP,QBFY,QAH4,QBBL,QAYL,QAGI,QBC9,QBC8,QANO,QAII V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: 4 Class Wizard Problems w/ International System Settings</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149237</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50 1.51 1.52 | 2.00 2.10 2.20 4.00 4.10 4.20
<PRE>WINDOWS        | WINDOWS NT
</PRE>kbtool kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) and ClassWizard included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32 bit Edition,
      versions 2.0, 2.1, 2.2, 4.0, 4.1, 4.2
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Specifying an international setting for Windows that uses a comma (,) as
the decimal separator in floating point numbers can cause the following
four separate problems when you use the ClassWizard to generate DDV
routines for dialog controls.
<P>
NOTE: The four problems are labeled A, B, C, and D in this article. Problem
A occurs at execution time. The other three (B, C, and D) occur during
development time when using ClassWizard.
<P>
A. The DDV routine will only accept input for floating point numbers
<PRE>   that use the period decimal point. Using the comma generates the
   standard dialog message requesting that you enter a number.

</PRE>B. If you attempt to enter a validation range for a floating point
<PRE>   number using the period (.) decimal separator (the US standard),
   Class Wizard generates the following error:

   The argument specified for DDV is not valid.

</PRE>C. ClassWizard will accept the comma decimal separator at design time,
<PRE>   but when the code is compiled, you may get the following errors:

    - error C2059: syntax error : 'bad suffix on number'
    - error C2146: syntax error : missing ')' before identifier 'f'
    - warning C4244: 'function' : conversion from 'const int' to
      'float', possible loss of data
    - error C2059: syntax error : ')'

</PRE>D. If you attempt to bring up Class Wizard on the dialog without
<PRE>   modifying the DDV code, you will see the error:

     Parsing error: Expected ")".
     Input line: DDV_MinMaxFloat(pDX, m_MyVar, -3,14000f, 3,14000f);

   The ClassWizard will show no controls or variables for the dialog
   in its listbox.

</PRE><h2>CAUSE</h2>
 
<P>
A. The DDX/DDV routines use a C-runtime locale by default. This assumes
<PRE>   that the decimal separator is always a period. This is by design.

</PRE>B. This behavior is by design. ClassWizard uses the international
<PRE>    settings to determine the valid decimal separator.

</PRE>C. This behavior is a bug in ClassWizard. Using the comma decimal
<PRE>   separator, ClassWizard generates DDV code similar to the following:

      // DDV for a float variable between -3,14 and +3,14.
      DDV_MinMaxFloat(pDX, m_MyVar, -3,14000f, 3,14000f);

   The commas in -3,14000f and 3,14000f are interpreted as parameter
   separators which makes this line invalid.

</PRE>D. This behavior is a side effect of problem B. It can be corrected by
<PRE>   using the workaround described in the resolution section.

</PRE><h2>RESOLUTION</h2>
 
<P>
A. DDX_Text(..., float&amp;) uses the UNICODE version of strtod (tcstod) to
<PRE>   convert the number. This is a C run-time function, therefore the C
   run-time locale is used.  If the application calls the setlocale
   function (as shown below), the local will be synchronized with the
   system locale, and the DDX_Text call will work as expected. This call to
   setlocale() should be performed immediately after the application
   starts, for example in the InitInstance method of the CWinApp derived
   class.

   #include &lt;locale.h&gt;

   CMyApp::InitInstance()
   {
        setlocale( LC_ALL, "" );
        ...
   }

</PRE>B. This is by Design. Enter floats using the locale's decimal separator
<PRE>   which in this case is a comma.

</PRE>C. This problem can also be solved manually by replacing the commas in the
<PRE>   DDV function calls with periods as shown here:

   // DDV for a float variable between -3,14 and +3,14.
   DDV_MinMaxFloat(pDX, m_MyVar, -3.14000f, 3.14000f);

</PRE>D. After problem C is solved, the DDV macro should be moved out of the
<PRE>   ClassWizard brackets or ClassWizard will report an error when it tries
   to parse the code. This is a related problem in ClassWizard.

   If you do not move the DDV macro, you bring up the same dialog in
   ClassWizard again, and you examine the validation range for your float
   variable, the ranges will be shown with the period decimal separator.
   Choosing OK will once again generate the error:

      The argument specified for DDV is not valid.

   If you need to change the validation ranges, you must manually edit the
   DDV code again. If the validation ranges are acceptable as entered,
   choose Cancel on the ClassWizard dialog when prompted with the error
   message.

</PRE><h2>STATUS</h2>
 
<P>
Problems A and B are by design.
<P>
Microsoft has confirmed that problems C and D are bugs in the Microsoft
products listed at the beginning of this article. We are researching these
problems and will post new information here in the Microsoft Knowledge Base
as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following regional settings taken from the Windows 95 Control Panel
applet are affected by these bugs:
<P>
Basque, Catalan, Danish, Finnish, Icelandic, Indonesian, Swedish
Dutch (Belgian and standard)
French (Belgian, Canadian, Luxembourg and standard, but NOT Swiss)
German (Austrian, Luxembourg and standard, but NOT Liechtenstein or Swiss)
Italian (standard, but NOT Swiss)
Norwegian (Bokmal and Nynorsk)
Portuguese (Brazilian and standard)
Spanish (Argentina, Chile, Modern Sort, Paraguay, Peru,
<PRE>         Traditional Sort, Uruguay and Venezuela, but not
         Colombia, Costa Rica, Dominican Republic, Ecuador, Guatemala,
         Mexico or Panama)

</PRE><h3>Steps to Reproduce Problem</h3>
 

<OL><P><LI>Open the Windows Control Panel.
<P>
   In Windows 3.X or Windows NT:
<P>
<P><PRE>      a. Run the International applet.
      b. Change the country setting to Germany.
</PRE><P>
   In Windows 95:
<P>
<P><PRE>      a. Run the Regional Settings applet
      b. Change Regional Settings to German (standard)
</PRE>
<P><LI>Create a default AppWizard application.

<P><LI>Add a dialog that contains an edit control.

<P><LI>Bring up Class Wizard and add a Member Variable for the edit control
   with a Category of value and a type of float.

<P><LI>Enter a validation range containing decimals.
<P>
   a. Run the application, and try to enter a float with a decimal point to
<P><PRE>      see problem A.
</PRE><P>
   b. Enter a validation range using a period decimal separator and try to
<P><PRE>      exit ClassWizard to see problem B.
</PRE><P>
   c. Enter a validation range using a comma decimal separator and compile
<P><PRE>      to see problem C.
</PRE><P>
   d. Exit ClassWizard and bring it back up on the same dialog after
<P><PRE>      changing the commas to periods as specified in the resolution of
      problem D.
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: European Control Panel Localized 1.50 2.50 1.51<BR>
2.51 1.52 2.52 1.52b 2.52b 1.52c 2.52c 2.00 3.00 2.10 3.10 2.20 3.20 4.00<BR>
4.10 4.20 vcbuglist400<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubcategory: WizardIss MFCMisc<BR>
Keywords          : MfcMisc WizardIss kbbuglist kbtool<BR>
Technology        : kbMfc<BR>
Version           : 1.50 1.51 1.52 | 2.00 2.10 2.20<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Using Near Addresses in Interrupt Handlers in C </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q42597 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1989/03/17">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When the Microsoft C Compiler compiles the sample program below for the small or medium memory model, it gives the following warning:  With compiler 5.1     C4058 : address of frame variable taken, DS != SS  With compilers 6.0, 6.0a, 6.0ax     C405...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADN,QAOT,QAHC,QBFY,QAB4,QAC2,QAH6,QAYL,QAHB,QAPF,QAR5,QAAW,QAEF,QAD7,QBLI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Using Near Addresses in Interrupt Handlers in C</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q42597 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 1.00 1.50 1.51 1.52
<PRE>MS-DOS                 | WINDOWS
</PRE>kbprg kbprb
<P>
<P>
 
The information in this article applies to:

<UL><LI>The C/C++ Compiler (CL.EXE) included with:
<P><PRE>    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, and 1.52
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When the Microsoft C Compiler compiles the sample program below for
the small or medium memory model, it gives the following warning:
<P>
<P><h3>With compiler 5.1</h3>
 
<P>
<PRE>   C4058 : address of frame variable taken, DS != SS

</PRE><h3>With compilers 6.0, 6.0a, 6.0ax</h3>
 
<P>
<PRE>   C4058 : address of automatic (local) variable taken, DS != SS

</PRE><h3>With compilers 7.0, 8.0, and 8.0c (/f- option)</h3>
 
<P>
<PRE>   C4762: near/far mismatch in argument; conversion supplied

</PRE><h2>CAUSE</h2>
 
<P>
The warning for the 6.0, 6.0a, and 6.0ax compilers is generated because the
compiler assumes that DS is equal to SS. The compiler gives the warning
when a near address that refers to a stack location is passed to an
interrupt handler, because the stack segment SS could be changed.
<P>
The warning was changed in 7.0 and later because when SS != DS, the address
of a local is considered to be a far pointer. Giving warning C4762 is more
appropriate.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
If the memory model is large or compact, or if the __far keyword is used
when func's formal parameter is declared, the compiler will not give any
warnings. When func is called, an address with the stack segment and the
offset will be passed to the function automatically. Declaring the stack
variable ch as static will also avoid the problem.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In general, in the small and medium memory models, data pointers are near
unless explicitly declared with the __far keyword. In the example below,
the function func is expecting a near address that is a 16-bit offset. A
function such as func has no way to determine if the __near pointer passed
to it is an offset relative to the data segment or the stack segment.
Therefore, the C compiler makes the assumption that an offset by itself is
always relative to the default data segment. This is not a problem in a
normal case, where we can depend on the fact that SS will be equal to DS.
However, in the example below, the stack segment could be changed in the
interrupt handler; therefore, the compiler warns you that the code may not
work as expected.
<P>
<P><h3>Sample Code:</h3>
 
<P>
<PRE>/* Compile options needed: /AS or /AM and /f- (compiler 7.0 and later)
*/

void interrupt far handler( void );
void func( char * );

void interrupt __far handler( )
</PRE>{
<PRE>   char ch;              /* Change to static char ch for workaround */
   func( &amp;ch );
</PRE>}
<P>
<PRE>void func( char *ptr )
</PRE>{
<PRE>   *ptr = 'a';
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 6.00 6.00a 6.00ax 7.00 8.00 8.00c<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

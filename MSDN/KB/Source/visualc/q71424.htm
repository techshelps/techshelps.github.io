

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Type float Variable Arguments Are Promoted to Type double </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q71424 ">
<META NAME="KBModify" CONTENT="1997/09/04">
<META NAME="KBCreate" CONTENT="1991/04/17">
<META NAME="Keywords" CONTENT="CLngIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When passing arguments of type float to a function that accepts a variable number of arguments, those floats not explicitly declared in the prototype will be promoted to type double.  In this case, the macros va_start and va_arg will use sizeof(flo...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHE,QAPN,QAHH,QAYL,QAP2,QAE5,QAWH,QBFY,QAY5,QAGF,QAUD,QAO7,QAG8,QAFO,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Type float Variable Arguments Are Promoted to Type double</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 4, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q71424 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 5.1a, 6.0, 6.0a, 6.0ax
<LI>Microsoft C for OS/2, versions 5.1, 6.0, 6.0a
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5
<LI>Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When passing arguments of type float to a function that accepts a variable
number of arguments, those floats not explicitly declared in the prototype
will be promoted to type double.
<P>
In this case, the macros va_start and va_arg will use sizeof(float) to
determine the argument size, when the actual size is sizeof(double). This
will give unexpected results because the values on the stack will be
interpreted incorrectly.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample program below returns the sum of a variable list of floating-
point values. The sum returned is not correct because the variables of type
float (other than the float that was declared) are promoted to double, but
are treated as floats by va_start and va_arg.
<P>
Although this situation causes unintended results, this is expected
behavior that conforms to the ANSI standard. Section 3.3.2.2 of the ANSI
standard states:
<P>
<PRE>   If the expression that denotes the called function has a type that
   does not include a prototype, the integral promotions are performed
   on each argument and arguments that have type float are promoted to
   double. These are called the default argument promotions.
      .
      .
      .
   If the expression that denotes the called function has a type that
   includes a prototype, the arguments are implicitly converted to the
   types of the corresponding parameters. The ellipsis notation in a
   function prototype declarator causes argument type conversion to
   stop after the last declared parameter. The default argument
   promotions are performed on trailing arguments.

</PRE>To work around this situation, use doubles instead of floats for values
that will be passed to functions that accept a variable number of
arguments.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #include &lt;stdio.h&gt;
   #include &lt;stdarg.h&gt;

   float sum( int num, float first, ... );

   void main()
   {
      float total;

      total = sum( 3, 11.11F, 22.22F, 33.33F );
      printf( "11.11 + 22.22 + 33.33 = %f\n\n", total );
   }

   float sum( int num, float first, ... )
   {
      int count;
      float sum, temp = first;
      va_list marker;

      sum = 0.0F;
      va_start( marker, first );
      for( count=1; count&lt;num; count++ )
      {
          sum += temp;
          temp = va_arg( marker, float );
      }
      sum += temp;

      va_end( marker );
      return( sum );
   }

</PRE><h3>Possible Program Output</h3>
 
<P>
<PRE>   11.11 + 22.22 + 33.33 = -321864398408282700000000000.000000
</PRE> 
<PRE>Keywords          : CLngIss kbcode
Version           : MS-DOS:5.1,6.0,6.00a,7.0; OS/2:5.1,6.0,6.00a;  WINDOWS:1.0,1.5; WINDOWS NT:1.0,2.0,4.0,5.0
Platform          : MS-DOS NT OS/2 WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 4, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Visual C++ 5.0 Readme, Language Issues </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165684">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1997/03/24">
<META NAME="Keywords" CONTENT="kbtlc">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Language Issues  Member Templates Not Supported by the Compiler Addendums to the __declspec Documentation Behavior of In-Constructor Exception Handling Not Correctly Documented Size Mismatch for Type bool in Visual C++ 4.2 Programs Built with Visua...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QA55,QA56,QAGI,QAOT,QANY,QAKM,QBQU,QBVV,QBLX,QA4Q,QAIF,QBWI,QBCT,QA36 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Visual C++ 5.0 Readme, Language Issues</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165684</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
<P><h3>Language Issues</h3>
 
<P>
Member Templates Not Supported by the Compiler
Addendums to the __declspec Documentation
Behavior of In-Constructor Exception Handling Not Correctly Documented
Size Mismatch for Type bool in Visual C++ 4.2 Programs Built with Visual
C++ 5.0
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Member Templates Not Supported by the Compiler</h3>
 
<P>
Simple member templates may not generate a compiler error. Use of member
templates can result in undefined behavior.
<P>
<P>
<P><h3>Addendums to the __declspec Documentation</h3>
 
<P>
The documentation for the _declspec keyword is missing the following
information:
<P>
Addendum One
<P>
The __declspec keywords should be placed at the beginning of a simple
declaration. __declspec keywords placed after * or &amp; and in front of the
variable identifier in a declaration will be ignored by the compiler
without error message or warnings. See the __declspec topic in Language
Quick Reference for more information about using the __declspec attributes.
<P>
Addendum Two
<P>
The following three declarations are equivalent:
<P>
<PRE>   #define WINAPI __declspec(nothrow) __stdcall

   void WINAPI foo1();

   void __declspec(nothrow) __stdcall foo2();

   void __stdcall foo3() throw();

</PRE>Using "void __declspec(nothrow) __stdcall foo2();" has the advantage that
you can use an API definition, such as the illustrated by the #define
statement, to easily specify nothrow on a set of functions. The third
declaration, "void __stdcall foo3() throw();" is the syntax defined by the
C++ standard.
<P>
<P><h3>Behavior of In-Constructor Exception Handling Not Correctly Documented</h3>
 
<P>
If you use the operator new without any extra arguments, and compile with
the /GX, /EHs, or /EHa option, the compiler will generate code to call
operator delete if the constructor throws an exception.
<P>
If you use the placement new form of the new operator, the form with
arguments in addition to the size of the allocation, the compiler does not
support a placement form of the delete operator if the constructor throws
an exception.
<P>
Example:
<P>
<PRE>   class A {

   public:
       A(int) { throw "Fail!"; }
   };

   void foo(void)
   {
       try {
           // heap memory pointed to by pa1 will be deallocated
           // by calling ::operator delete(void*).

           A* pa1 = new A(10);

       } catch (...) {
       }

       try {
           // This will call ::operator new(size_t, char*, int).
           // When A::A(int) does a throw, we should call
           // ::operator delete(void*, char*, int) to deallocate
           // the memory pointed to by pa2, but that's something
           // we don't support yet, so we'll leak memory.

           A* pa2 = new(__FILE__, __LINE__) A(20);

       } catch (...) {
       }
   }

</PRE>Size Mismatch for Type bool in Visual C++ 4.2 Programs Built with Visual
C++ 5.0
 
<P>
In Visual C++4.2, the Standard C++ header files contained a typedef that
equated bool with int. In Visual C++ 5.0, bool is implemented as a built-in
type with a size of 1 byte. That means that for Visual C++ 4.2, a call of
sizeof(bool) yields 4, while in Visual C++ 5.0, the same call yields 1.
This can cause memory corruption problems if you have defined structure
members of type bool in Visual C++ 4.2 and are mixing object files (OBJ)
and/or DLLs built with the 4.2 and 5.0 compilers.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbtlc<BR>
Version             : 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbreadme<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: qsort() Sorts Huge String Arrays &gt; 64K Incorrectly </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123496">
<META NAME="KBModify" CONTENT="1997/07/22">
<META NAME="KBCreate" CONTENT="1994/12/04">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Using the C Run-time function qsort() to sort a two-dimensional character array that is greater than 64K in size may generate incorrect results such as missing the first element in the result, or causing the computer to hang (stop responding). This...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVW,QAVX,QAKP,QATX,QA5V,QAE1,QBFY,QAUD,QAPF,QAH4,QAAP,QAB6,QDKW,QDMN,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: qsort() Sorts Huge String Arrays &gt; 64K Incorrectly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123496</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50 1.51
WINDOWS
kbprg kbbuglist
<P>
 
The information in this article applies to:
<P>
<PRE>   The C Run-time (CRT) included with
     - Microsoft Visual C++ for Windows, version 1.5 and 1.51
</PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Using the C Run-time function qsort() to sort a two-dimensional character
array that is greater than 64K in size may generate incorrect results such
as missing the first element in the result, or causing the computer to hang
(stop responding). This happens if a two-dimensional character array is
used in the huge memory model or if a huge pointer is used in the other
memory models.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To correct the problem, use one of these workarounds:

<UL><LI>Instead of using a two-dimensional character array, use an array of
   structure that contains a field of a character array. See the
   example below in the Sample Code section of this article.
<P>
   - or -

<LI>If the string information is of a numerical type, you might try sorting
   the numbers as numbers. Then store them as strings if necessary.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample code below reproduces the problem. To work around the problem,
compile the code WITHOUT switch /D"_PROBLEM".
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /AH /D"COLUMN=36" /D"_PROBLEM"
*/

/* -- test.c -- */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;search.h&gt;

#define ROW ( (0xffff/COLUMN) + 1 )    /* ( 65535/COLUMN ) + 1 */

</PRE>#ifdef _PROBLEM
<PRE>char TestString[ROW][COLUMN];
</PRE>#else
struct Test { char string[COLUMN]; } TestString[ROW];
#endif
<P>
<PRE>int cmp( const void *c1, const void *c2 );
                                 /* User defined sort function */
void main()
</PRE>{
<PRE>   int i;

   for ( i=0; i&lt;ROW; i++ )
   {
</PRE>#ifdef _PROBLEM
<PRE>     sprintf( TestString[i], "%6d\n", rand() );
</PRE>#else
<PRE>     sprintf( TestString[i].string, "%6d\n", rand() );
</PRE>#endif
<PRE>   }

</PRE>#ifdef _PROBLEM
<PRE>   qsort( (void*)TestString, (size_t)ROW, (size_t)COLUMN, cmp );
</PRE>#else
<PRE>   qsort( (void*)TestString, (size_t)ROW, sizeof(struct Test), cmp );
</PRE>#endif
<P>
<PRE>   for ( i=0; i&lt;ROW; i++ )
   {
</PRE>#ifdef _PROBLEM
<PRE>     if ( TestString[i][0] == '\0' )
        printf("TestString[%d] is empty.\n", i );
     else
        printf("TestString[%d] = %s", i, TestString[i] );

</PRE>#else
<PRE>     if ( TestString[i].string[0] == '\0' )
        printf("TestString[%d] is empty.\n", i );
     else
        printf("TestString[%d] = %s", i, TestString[i].string );
</PRE>#endif
<PRE>   }
</PRE>}
<P>
<PRE>int cmp( const void *c1, const void *c2 )
</PRE>{
#ifdef _PROBLEM
<PRE>   return strcmp( c1, c2 );

</PRE>#else
<PRE>   return strcmp( ((struct Test*)c1)-&gt;string,
                  ((struct Test*)c2)-&gt;string
                );
</PRE>#endif
}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.50 1.51 buglist1.50 buglist1.51<BR>
KBCategory: kbprg kbbuglist<BR>
KBSubCategory: CRTIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

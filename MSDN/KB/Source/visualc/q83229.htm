

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Project with Multiple Directories </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83229 ">
<META NAME="KBModify" CONTENT="1996/01/21">
<META NAME="KBCreate" CONTENT="1992/04/07">
<META NAME="Keywords" CONTENT="kbtool">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  To help manage a large software project, it is often desirable to store source code and object modules in different directories. By default, Visual Workbench and QuickC for Windows stores the source code and object modules in the same directory. Ho...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATJ,QBXB,QAFI,QAH4,QAK6,QAJN,QAVX,QAVW,QAW6,QAPN,QAG0,QBXS,QA56,QA55,QAGT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Creating a Project with Multiple Directories</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 21, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83229 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>The Visual Workbench included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, version 1.0 and 1.5
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
To help manage a large software project, it is often desirable to
store source code and object modules in different directories. By
default, Visual Workbench and QuickC for Windows stores the source
code and object modules in the same directory. However, you can
segregate the source code and object modules by creating the project
file in the directory that will contain the object modules.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To maintain a project with multiple directories, first build the
desired directory structure. For example, consider the following
directory structure:
<P>
<PRE>   Main project directory: \TEST
   Source code:            \TEST\SOURCE
   Object files:           \TEST\OBJ

</PRE>If desired, you can create additional directories (to store header
files, and so on). The results of the compilation (.OBJ, .DLL, .EXE,
and other files) are placed into the project directory. You cannot
place the .OBJ and .EXE files into different directories. In this
example, all source files are placed into the source code directory.
<P>
Perform the following steps to use the directory structure above:

<OL><P><LI>Create the source files in the source code directory.

<P><LI>From the Project menu, choose Open.

<P><LI>Type the name of your project file (for example, TEST.MAK) in the
   File Name edit control.

<P><LI>In the Directories list box, choose the object files directory.

<P><LI>Choose OK to create a new project. This creates the project file in
   the object files directory. When you build the project, the tools
   store all build results in this directory.

<P><LI>In the Edit Project dialog box, choose the project files from the
   source directory to add them to the project list. Include all .C,
   .H, .DEF, .RC, .CUR, .DLG, and other files required to build your
   project.

<P><LI>Build the project.
<P>
<P>
</OL>NOTE: This kind of technique is not recommended for AppWizard generated
projects because Class Wizard (.CLW) files will be required in the OBJ and
SOURCE directories.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.10 1.50 1.51 1.52 build obj<BR>
KBCategory: kbtool<BR>
KBSubcategory: VWBIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 21, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the string::operat </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q158203">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/24">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the string::operator   STL function in Visual C++.  MORE INFORMATION  Required Header               Prototype ---------     Function 1:       template                                  inline       bool o...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAY5,QANY,QAGI,QBFY,QATX,QAKM,QBV8,QALW,QAB9,QAIF,QAPF,QABO,QBVV,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the string::operat</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q158203</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the string::operator&lt;=
STL function in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;string&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   Function 1:
      template&lt;class _E, class _TYPE, class _A&gt; inline
      bool operator&lt;=(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
                      const _E *RCharArray);

   Function 2:
      template&lt;class _E, class _TYPE, class _A&gt; inline
      bool operator&lt;=(const _E * LCharArray,
                      const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
There are two versions of the string::operator&lt;= function. Both versions
are used to compare a null-terminated character array to a basic_string.
They perform this operation by negating the result of (RString&lt;LCharArray
or RCharArray&lt;LString). For more information on this comparison, please see
the string::operator&lt; function.
<P>
Note that this operator does not work with NULL pointer for the character
array. You will need to make sure that the character array is not NULL
before you pass it to the operator.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/////////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StringLessEqual.cpp : Illustrates how to use the operator&lt;= to compare
//                       a basic_string variable to a null-terminated
//                       string.
//
// Functions:
//
//    operator&lt;=   Returns true if the second parameter is not less
//                 than the first.
//
// Written by Derek Jamison
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
/////////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<PRE>#include &lt;string&gt;
#include &lt;iostream&gt;

void trueFalse(int x)
</PRE>{
<PRE>  cout &lt;&lt; (x? "True": "False") &lt;&lt; endl;
</PRE>}
<P>
<PRE>void main()
</PRE>{
<PRE>   string S1="DEF";
   char CP1[]="ABC";
   char CP2[]="DEF";
   char CP3[]="DEFG";
   char CP4[]="def";

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "CP2 is " &lt;&lt; CP2 &lt;&lt; endl;
   cout &lt;&lt; "CP3 is " &lt;&lt; CP3 &lt;&lt; endl;
   cout &lt;&lt; "CP4 is " &lt;&lt; CP4 &lt;&lt; endl;

   cout &lt;&lt; "S1&lt;=CP1 returned ";
   trueFalse(S1&lt;=CP1);  // False  (calls function 1)

   cout &lt;&lt; "S1&lt;=CP2 returned ";
   trueFalse(S1&lt;=CP2);  // True   (calls function 1)

   cout &lt;&lt; "S1&lt;=CP3 returned ";
   trueFalse(S1&lt;=CP3);  // True   (calls function 1)

   cout &lt;&lt; "CP1&lt;=S1 returned ";
   trueFalse(CP1&lt;=S1);  // True   (calls function 2)

   cout &lt;&lt; "CP2&lt;=S1 returned ";
   trueFalse(CP2&lt;=S1);  // True   (calls function 2)

   cout &lt;&lt; "CP4&lt;=S1 returned ";
   trueFalse(CP4&lt;=S1);  // False   (calls function 2)
}

</PRE>Program Output is:
<P>
S1 is DEF
CP1 is ABC
CP2 is DEF
CP3 is DEFG
CP4 is def
S1&lt;=CP1 returned False
S1&lt;=CP2 returned True
S1&lt;=CP3 returned True
CP1&lt;=S1 returned True
CP2&lt;=S1 returned True
CP4&lt;=S1 returned False
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample operator&lt;= string<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

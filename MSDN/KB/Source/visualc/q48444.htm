

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Interrupt Attribute Pushes Registers on the Stack </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q48444 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1989/08/30">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The interrupt attribute can be applied to a function to tell the compiler that the function is an interrupt handler.  When an interrupt function is called, all registers (except SS) are saved on the stack. Examining the assembler code the compiler ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7R,QADN,QAHC,QBII,QATS,QASR,QAHB,QBV8,QAB9,QBFY,QAKR,QAH4,QAHE,QDIO,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>The Interrupt Attribute Pushes Registers on the Stack</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q48444 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.10 6.00 6.00a 6.00ax 7.00 | 1.00 1.50
<PRE>MS-DOS                      | WINDOWS
</PRE>kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, and 6.0ax
<LI>Microsoft C/C++ for MS-DOS, version 7.0
<LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The interrupt attribute can be applied to a function to tell the
compiler that the function is an interrupt handler.
<P>
When an interrupt function is called, all registers (except SS) are
saved on the stack. Examining the assembler code the compiler
generates for an interrupt handler could cause confusion. When
compiling without the /G1, /G2, or /G3 switch (these switches inform
the compiler to generate 186, 286, or 386 code accordingly. /G3 was
first available with C/C++ 7.0) the assembler code appears as it
should; however, when using one of the three aforementioned switches,
the assembler output may be deceiving in that the registers appear as
though they are not being saved on the stack as advertised.
<P>
This potential misinterpretation results from the use of the PUSHA
and PUSHAD instructions. These instructions do not exist in the 8086
instruction set, but do exist in the 80186 and later sets. The PUSHA
and PUSHAD instructions push the general purpose registers onto the
stack in the following order: AX, CX, DX, BX, SP, BP, SI, DI. The
PUSAD instruction is available only on 80386 and later processors.
For further information regarding the PUSHA and PUSHAD instructions,
you should consult a reference manual for Intel's 80x86-based assembly.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The text that follows displays three partial assembler listings of an
interrupt handler called func. The second case demonstrates the
usage of the 186-, 286-, 386-, and 486-specific instruction PUSHA
(for loadall). The third case demonstrates the usage of the 386- and
486- specific instruction PUSHAD.
<P>
<PRE>/* Without G1, G2, or G3 */

_func   PROC FAR
        push    ax
        push    cx
        push    dx
        push    bx
        push    sp
        push    bp
        push    si
        push    di
        push    ds
        push    es

 /* With G1 or G2 */

 _func  PROC FAR
        pusha              ; This pushes all general purpose registers
        push    ds         ; for the 80186 processors and above.
        push    es

 /* With G3 */

 _func  PROC FAR
        pushad             ; This pushes all general purpose registers
        push    ds         ; for the 80386 and later processors.
        push    es
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 5.10 6.00 6.00a 6.00ax 7.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: CLngIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

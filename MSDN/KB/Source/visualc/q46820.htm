

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Library Support for Near, Far, and Huge Keywords </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q46820 ">
<META NAME="KBModify" CONTENT="1997/07/17">
<META NAME="KBCreate" CONTENT="1989/07/10">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  With Microsoft C 5.1, using the  near ,  far , and  huge  keywords to override addressing conventions within specific memory models, you can usually use one of the standard libraries. Often, you cannot pass far pointers, or the addresses of far dat...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPF,QBFY,QBHQ,QAC2,QABB,QAYY,QAY5,QALG,QAEY,QAR5,QAYL,QAEF,QAAW,QABA,QACJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Library Support for Near, Far, and Huge Keywords</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 17, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q46820 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00ax 7.00 | 6.00 6.00a | 1.00 1.50
<PRE>MS-DOS                 | OS/2       | WINDOWS
</PRE>kbtool
<P>
 
The information in this article applies to:
<P>
<PRE>   The Microsoft C/C++ Compiler (CL.EXE) included with:
    - Microsoft C for MS-DOS, versions 6.0, 6.0a, and 6.0ax
    - Microsoft C for OS/2, versions 6.0 and 6.0a
    - Microsoft C/C++ for MS-DOS, version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
With Microsoft C 5.1, using the "near", "far", and "huge" keywords to
override addressing conventions within specific memory models, you can
usually use one of the standard libraries. Often, you cannot pass far
pointers, or the addresses of far data items, to a small-model library
routine. Some exceptions are the library routines "halloc", "hfree", and
the "printf" family of functions.
<P>
With C versions 6.0 and later, there are far-pointer versions of all
important functions, which can be used in mixed-model programming. The
names of all these functions will begin with "_f". For example, the model-
independent version of strcpy() will be called _fstrcpy().
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Mixed-memory-model programming uses the "near", "far", and "huge" keywords
to locate code or data outside of the segments specified by the memory
model (for example, declaring a "far" character array in a small memory
model where it would ordinarily be "near").
<P>
Mixed-model programming is useful when you have only a bit of data to put
outside of the single data segment and you don't want to switch to a
multiple-data-segment memory model. The standard library routines, however,
were written to support the standard memory models, and so must be used
with care.
<P>
The following example demonstrates a function that performs as expected in
large or compact model but returns incorrect results in the medium or small
model because its data, "buffer", was declared "far":
<P>
<PRE>char far buffer[100];
</PRE>.
.
.
fwrite ( buffer, size, count, stream);
<P>
In single-data-segment models, data addresses are 2-bytes long. In multiple-
data-segment models, data addresses are 4-bytes long. Data declared "far"
also has 4-byte addresses. When fwrite() is called in a single-data-segment
model, it expects 2-byte, not 4-byte, data addresses.
<P>
Removing the "far" keyword or compiling in a multiple-data-segment model
corrects the problem. Another solution is to assign the value of the far
variable to a near variable. In the example below, each element of the far
array is assigned to the near array. A strcpy() cannot be used in this
case, because it is one of the library functions that operates properly
only when the data addresses are consistent with their memory model:
<P>
<PRE>char far buffer[];
char nearbuffer;   /* near by default in small and medium models */
int i;

</PRE>for (i = 0; i &lt; 100; i++)
<PRE>  nearbuffer[i] = buffer[i];
</PRE>.
.
.
fwrite ( nearbuffer, size, count, stream);
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 6.00 6.00a 6.00ax 7.00 8.00<BR>
8.00c mixed model<BR>
KBCategory: kbtool<BR>
KBSubcategory: CLIss<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 17, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

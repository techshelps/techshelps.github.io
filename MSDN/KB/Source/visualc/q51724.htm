

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: Clarification of the /H Identifier Length Option </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q51724 ">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1989/12/07">
<META NAME="Keywords" CONTENT="CLIss kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C, the /H option is used to set the maximum length of identifiers. Using /H can only decrease the maximum allowable length of identifiers, not increase it. An identifier declared with the CDECL type has an underscore (_) appended to th...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QBJQ,QAAP,QAB4,QBV8,QA56,QA55,QA26,QAH4,QBTN,QAOT,QABN,QABA,QAWN,QAX6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: Clarification of the /H Identifier Length Option</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q51724 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C for MS-DOS, versions 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 4.1,
<P><PRE>     5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft C, the /H option is used to set the maximum length of
identifiers. Using /H can only decrease the maximum allowable length of
identifiers, not increase it. An identifier declared with the CDECL type
has an underscore (_) appended to the front at compile time. This character
is part of the identifier and takes a significant location. Therefore, the
maximum length of an identifier declared with the standard C declaration
syntax is 32 characters.
<P>
In C/C++ version 7.0, the default maximum length is also 32
characters. However, in this version, the /H option may be used to
increase this to a maximum of 247 characters.
<P>
In Visual C++ 16-bit and Visual C++ 32-bit, there is no default maximum
length--identifiers can be up to 2047 characters in length. Compiling a
program with an identifier containing more than 2047 characters will
generate fatal error C1064, compiler limit : token overflowed internal
buffer.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example shows how using /H can actually introduce errors
if identifier lengths are limited too much:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* When compiled with /H5, the following code will produce either
    *    error L2025: _func : symbol defined more than once
    *      -or-
    *   error LNK2005: _func already defined in '.obj file'
    *   fatal error LNK1169: one or more multiply defined symbols found
    */

   void func1(void);
   void func2(void);

   void main(void)
   {
        func1();
   }

   void func1(void)
   {
   }

   void func2(void)
   {
   }

</PRE>You must also be careful when using the /H option because of
predefined compiler identifiers. If the maximum identifier length is
too small, certain predefined identifiers will be unresolved as well
as certain library function calls. For example, if the printf function
is used and the option /H5 is specified at compile time, the symbol
_prin will be created in order to reference printf, and this will not
be found in the library.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 10.00 10.10<BR>
Keywords          : CLIss kbfasttip<BR>
Version           : MS- DOS:6.0,6.00a,6.00ax,7.0;WIN3X:1.0,1.5;WINNT:1.0,2.0,2.1,4.0,4.1,5.0;<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbdocerr<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

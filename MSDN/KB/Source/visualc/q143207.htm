

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Common Problems When Using STL with STD Namespace </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143207">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1996/01/28">
<META NAME="Keywords" CONTENT="STLIss kberrmsg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Case One --------  When compiling a file that uses the Standard Template Library (STL), you may see the following warning and error when using the std namespace, which is required when using the STL with MFC:     {stl directory}\iterator.h(65) : wa...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAGX,QAKP,QAY5,QBXB,QAVX,QATJ,QALM,QAFI,QAH4,QADF,QBXS,QAVW,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Common Problems When Using STL with STD Namespace</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143207</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
<P><h3>Case One</h3>
 
<P>
When compiling a file that uses the Standard Template Library (STL), you
may see the following warning and error when using the std namespace, which
is required when using the STL with MFC:
<P>
<PRE>   {stl directory}\iterator.h(65) : warning C4114: same type qualifier
   used more than once
   {stl directory}\defalloc.h(124) : error C2661: 'new' : no overloaded
   function takes 2 parameters

</PRE><h3>Case Two</h3>
 
<P>
In addition, you may get this different set of errors:
<P>
<PRE>   {include directory}\new.h(80) : error C2061: syntax error :
   identifier 'THIS_FILE'
   {include directory}\new.h(80) : error C2091: function returns
   function
   {include directory}\new.h(80) : error C2809: 'operator new' has no
   formal parameters#endif
   {include directory}\new.h(80) : error C2065: 'ptr' : undeclared
   identifier

</PRE><h3>Case Three</h3>
 
<P>
Once the previous two cases are resolved, you may get link errors. The
errors you may receive take this form:
<P>
<PRE>   error LNK2001: unresolved external symbol "SymbolName"

</PRE>Here SymbolName is a C Run-Time (CRT) symbol prefaced by the std::
namespace name.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Warning C4114 is superfluous and can be ignored. You can disable the
warning by using a '#pragma warning' directive. Error C2661 requires that
you include New.h in your source file.
<P>
The second set of errors occurs if you add the STL include directive after
the following definitions and do not include New.h among your include
directives:
<P>
<PRE>   #ifdef _DEBUG
   #define new DEBUG_NEW
   #undef THIS_FILE
   static char THIS_FILE[] = __FILE__;
   #endif

</PRE>Including New.h will work around this problem as well. Note that these
definitions are no longer necessary in MFC code and can be deleted.
<P>
The third set of errors from the linker can be resolved by including the
appropriate header files from the CRT above the declaration for the std
namspace. You can determine which header file must be included by looking
at the symbol listed in the linker error. Remove the leading std:: from the
symbol, and then search for the symbol in the CRT header files. This file
was included by the STL headers. You need to include this header explicitly
before the namespace declaration. In the Case Three Sample Code section in
this article, you can see Iostream.h is the header that must be included at
global scope.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Reproduces Behavior Described in Case One</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   //#include &lt;new.h&gt;   // Required to avoid C2661 error.

   namespace std {
   #include &lt;vector.h&gt;
   }

   std::vector&lt;char&gt; test;


</PRE><h3>Sample Code to Reproduces Behavior Described in Case Two</h3>
 
<P>
<PRE>   /* Compile options needed: /c /D_DEBUG /DNOMINMAX
   */

   #include &lt;afxwin.h&gt;  // or stdafx.h in a default AppWizard project.
   //#include &lt;new.h&gt;   // Required to avoid this problem.

   #ifdef _DEBUG
   #define new DEBUG_NEW
   #undef THIS_FILE
   static char THIS_FILE[] = __FILE__;
   #endif

   namespace std {
   #include &lt;vector.h&gt;
   }

</PRE><h3>Sample Code to Reproduces Behavior Described in Case three</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   //#include &lt;iostream.h&gt;     // Required to avoid LNK2001 error
   #include &lt;new.h&gt;

   namespace std {
   #include &lt;vector.h&gt;
   }

   std::vector&lt;int&gt; test(0,10);
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: MFC<BR>
Keywords          : STLIss kberrmsg<BR>
Version           : 4.00<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

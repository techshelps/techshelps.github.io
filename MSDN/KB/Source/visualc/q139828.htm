

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: MFC Does Not Reopen an Open Document </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139828">
<META NAME="KBModify" CONTENT="1997/07/10">
<META NAME="KBCreate" CONTENT="1995/11/16">
<META NAME="Keywords" CONTENT="MfcDocView kbprb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In a default MFC AppWizard application, the framework will not reopen a document file from disk that is currently open in the application.  RESOLUTION  This is by design. In a typical MFC application, the Open File command is mapped to the CWinApp:...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBWS,QANE,QA36,QAY5,QBVV,QA8T,QA8S,QA01,QAUR,QBV8,QAG4,QACF,QAIF,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: MFC Does Not Reopen an Open Document</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139828</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 1.51 1.52 | 1.00 2.00 2.10 2.20 4.00
<PRE>WINDOWS             | WINDOWS NT
</PRE>kbprg kbprb
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1,
      2.2, 4.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In a default MFC AppWizard application, the framework will not reopen a
document file from disk that is currently open in the application.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
This is by design. In a typical MFC application, the Open File command is
mapped to the CWinApp::OnFileOpen() function. In earlier versions of MFC,
this function in turn called the CWinApp::OpenDocumentFile() function.
Since MFC 4.0, there is now an intervening CDocManager class, but the call
to OnFileOpen() still eventually results in a call to
CWinApp::OpenDocumentFile().
<P>
CWinApp::OpenDocumentFile() first processes the string holding the
requested file name. Then it searches through the list of document
templates that were added for the application by calls to AddDocTemplate in
order to find the best match between the name of the file and a document
template to open it with. At this point, if OpenDocumentFile() finds that
this file is already currently opened for one of the templates,
OpenDocumentFile() activates the view for that file and then returns. It
does not re-open the file.
<P>
If that document file is not currently open and OpenDocumentFile() has
found a valid template to open the file with, it calls that template's
OpenDocumentFile() function. This function is responsible for opening the
file and loading its data into an appropriate document.
<P>
In some situations, you may want to reopen an open document. For example,
Notepad does this. On a file open request, Notepad first displays a prompt
dialog to allow the user to save a modified file. If the user does not
click cancel on this dialog box, Notepad then brings up the File Open
dialog box. If the user chooses to reopen the current file, Notepad rereads
it from disk and discards any unsaved changes.
<P>
To duplicate this behavior in an MFC program, the programmer needs to
override the OpenDocumentFile() member function of CWinApp. Or, if the
appropriate template for the file is easy to determine (such as when the
application has only one kind of doc template), it would be possible to
call the template's OpenDocumentFile() directly from an override of
CWinApp::OnFileOpen(). This is demonstrated in the "Sample Code" section of
this article.
<P>
Note that MFC will display the Save Modified prompt dialog after the Open
File dialog box; this is counter to the behavior of Notepad.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

void CWinApp::OnFileOpen()
</PRE>{
<PRE>   // prompt the user (with all document templates)
   CString newName;
   if (!DoPromptFileName(newName, AFX_IDS_OPENFILE,
          OFN_HIDEREADONLY | OFN_FILEMUSTEXIST, TRUE, NULL))
       return; // open cancelled

   // Process newName string if necessary

   // Get pTemplate, a pointer to one of the app's document templates

   pTemplate-&gt;OpenDocumentFile(newName);
</PRE>} // end of CWinApp::OnFileOpen()
<P>
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 2.20 4.00 2.50 2.51 2.52<BR>
3.00 3.10 3.20<BR>
KBCategory: kbprg kbprb<BR>
KBSubcategory: MfcDocView<BR>
Keywords            : MfcDocView kbprb kbprg<BR>
Technology          : kbMfc<BR>
Version             : 1.00 1.50 1.51 1.52 | 1.00 2.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOC: MFC Application Idle Processing and Power Consumption </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q93915 ">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1992/12/21">
<META NAME="Keywords" CONTENT="MfcUI kbdocerr kbdocfix kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft Foundation Classes (MFC) provide a virtual member function CWinApp::OnIdle() to support background or idle-time processing when an application is not receiving messages. Because the OnIdle() function uses the ::PeekMessage() function ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QAJH,QAUD,QAEV,QDL9,QBWO,QBWN,QAKJ,QBFY,QAB9,QBV8,QAYC,QBWQ,QAGB,QAKD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOC: MFC Application Idle Processing and Power Consumption</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q93915 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
7.00   | 1.00 1.50 | 1.00
<PRE>MS-DOS | WINDOWS   | WINDOWS NT
</PRE>kbprg kbdocerr kbdocfix
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P>
<P><PRE>    - Microsoft C/C++ version 7.0
    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Foundation Classes (MFC) provide a virtual member function
CWinApp::OnIdle() to support background or idle-time processing when an
application is not receiving messages. Because the OnIdle() function uses
the ::PeekMessage() function in Microsoft Windows, it is important to
realize how using the OnIdle function affects other applications in the
Microsoft Windows environment and affects power consumption on battery
powered machines that run Windows.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Visual C++ for
Windows, version 1.51, and Visual C++, 32-bit Edition, version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The CWinApp class is designed to support a "power-friendly" application
while allowing the application to perform background processing when it is
idle (not receiving any messages). A power-friendly application uses the
PeekMessage() and Yield() functions to perform temporary background tasks.
A power-friendly PeekMessage() loop exits when background processing is
complete because, while an application is in a PeekMessage() loop, Windows
cannot go idle.
<P>
The default CWinApp::OnIdle() function deletes temporary objects and
returns the value FALSE to indicate that processing is complete and that
the application can "sleep." The FALSE return value causes the application
to exit the "PeekMessage() and OnIdle()" loop in the CWinApp::Run()
function. As processing continues, Run() calls GetMessage() that either
retrieves a message from the application's message queue, or, in this case,
yields control until a message becomes available. When all applications in
the system yield control, a battery powered computer can conserve its
power.
<P>
Execution continues in the "PeekMessage() and OnIdle()" loop only as long
as no messages are present in the application's message queue and OnIdle()
returns TRUE. This allows the system to remain active as long as the
application has OnIdle() processing to perform. On each iteration of the
loop, the Run() function increments the lCount parameter before passing it
to OnIdle(). OnIdle() can use the value of lCount to determine when to
return FALSE. Doing so allows the application to defer idle-time processing
until after the application receives additional user input.
<P>
When execution returns from PumpMessage(), the value of lCount is reset to
zero. On page 637 of the Microsoft C/C++ version 7.0 "Class Libraries
Reference" manual, the documentation for the CWinApp::OnIdle() member
function incorrectly states that lCount is incremented each time
GetMessage() finds the message queue to be empty. The statement in the
documentation should read as follows:
<P>
<PRE>   lCount
      A counter incremented each time PeekMessage finds the message
      queue empty. This count is reset to 0 each time a new message is
      processed. lCount can be used to determine relatively how long
      the application has been idling without processing a message.

</PRE>If an application overrides the CWinApp::OnIdle() function, three
conditions must be met:

<UL><LI>Explicitly call the base class OnIdle() member function or
   temporary objects are not deleted.

<LI>If an application performs lengthy processing at OnIdle() time,
   break the processing into small pieces. Doing so enables the
   PeekMessage() to continue to yield control to other applications
   and prevents system performance degradation.

<LI>If battery consumption is important, the OnIdle() function must
   return FALSE at some point, even if idle-time processing remains.
   The next time the application empties its message queue, OnIdle()
   can resume background processing where it left off. Use the value
   of the lCount parameter to determine if the user is interacting
   with the computer.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbdocerr kbdocfix<BR>
KBSubcategory: MfcUI<BR>
Additional reference words: 7.00 1.00 1.50 2.50 backproc DeleteTempMap<BR>
noupdate<BR>
Keywords          : MfcUI kbdocerr kbdocfix kbprg<BR>
Technology        : kbMfc<BR>
Version           : 7.00   | 1.00 1.50 | 1.00<BR>
Platform          : MS-DOS NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

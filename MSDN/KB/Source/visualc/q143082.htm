

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Wrong Pointer Value When Nested Classes Have Same Name </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143082">
<META NAME="KBModify" CONTENT="1997/07/24">
<META NAME="KBCreate" CONTENT="1996/01/25">
<META NAME="Keywords" CONTENT="CPPLangIss vcbuglist400 vcbuglist500 kbbuglist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When a class is derived from multiple classes such that two or more of the base classes are nested classes of the same name, pointers to either of the nested base classes point to the same address. Consider a class D which is derived from both B1::...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAJ8,QAJQ,QABA,QA2O,QAUJ,QAGI,QABO,QBQU,QBFY,QAO3,QAO2,QAML,QAMJ,QALZ,QAKD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Wrong Pointer Value When Nested Classes Have Same Name</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143082</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0,
<P><PRE>     4.1, 4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a class is derived from multiple classes such that two or more of the
base classes are nested classes of the same name, pointers to either of the
nested base classes point to the same address. Consider a class D which is
derived from both B1::Nested and B2::Nested. Given an object d, which is of
type D, then (B1::Nested *)&amp;d and (B2::Nested *)&amp;d will both resolve to the
same address. If either of the nested base class' names are changed to be
unique, the behavior is normal.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
This happens only when the nested classes have the same name. Change the
names, for example "A::NestedA" and "B::NestedB".
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. We are researching this problem and will
post new information here in the Microsoft Knowledge Base as it becomes
available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code to Reproduces Error</h3>
 
<P>
<PRE>   // Compile option needed: none

   // File test.cpp

   struct A {
       struct Nested {
           virtual void A_Func() = 0;
       };
   };

   struct B {
       struct Nested {
           virtual void B_Func() = 0;
       };
   };

   struct MyClass : public A::Nested, public B::Nested
   {
       void A_Func() { cout &lt;&lt; "A_Func() called" &lt;&lt; endl; }
       void B_Func() { cout &lt;&lt; "B_Func() called" &lt;&lt; endl; }
   };

   void main()
   {

       MyClass m;
       cout &lt;&lt; "(A::Nested*)&amp;m = " &lt;&lt; (void*)(A::Nested*)&amp;m &lt;&lt; endl;
       cout &lt;&lt; "(B::Nested*)&amp;m = " &lt;&lt; (void*)(B::Nested*)&amp;m &lt;&lt; endl;
       ((A::Nested*)&amp;m)-&gt;A_Func();
       ((B::Nested*)&amp;m)-&gt;B_Func();
   }

</PRE>In this example, the compiler confuses (A::Nested*) and (B::Nested*), so
the same values are printed for both ((A::Nested*)&amp;m) and ((B::Nested*)&amp;m)
when they should be different. This also causes the call to B_Func on the
last line to call A_Func instead.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : CPPLangIss vcbuglist400 vcbuglist500 kbbuglist kbprg<BR>
Version             : 4.0 4.1 4.2 2.0 2.1 2.2 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

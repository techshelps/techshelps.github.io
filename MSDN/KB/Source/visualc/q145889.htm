

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Why Floating Point Numbers May Lose Precision </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q145889">
<META NAME="KBModify" CONTENT="1997/02/28">
<META NAME="KBCreate" CONTENT="1996/02/11">
<META NAME="Keywords" CONTENT="CLIss VCGenIss kbprg kbusage">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT=" The information in this article is included in the documentation starting with Visual C++ 5.0. Look there for future revisions.   Floating point decimal values genarally do not have an exact binary representation. This is a side effect of how the CP...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QBFY,QAKC,QAGN,QBC6,QAII,QBE7,QBE6,QAL3,QAKD,QAG8,QAMB,QBLS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Why Floating Point Numbers May Lose Precision</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q145889</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 | 1.00 2.00 4.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbusage kbprg
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0 and 1.5x
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.x, and 4.0
</UL> 
<P>
The information in this article is included in the documentation starting
with Visual C++ 5.0. Look there for future revisions.
<P>
<P><h2>SUMMARY</h2>
 
<P>
Floating point decimal values genarally do not have an exact binary
representation. This is a side effect of how the CPU represents floating
point data. For this reason, you may experience some loss of precision, and
some floating point operations may produce unexpected results.
<P>
This behavior is the end result of one of the following:

<UL><LI>The binary representation of the decimal number may not be exact.
<P>
   -or-

<LI>There is a type mis-match between the numbers used (for example, mixing
   float and double).
<P>
</UL>To resolve the behavior, most programmers either ensure that the value is
greater or less than what you need, or they get and use a Binary Coded
Decimal (BCD) library that will maintain the precision.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft uses IEEE Floating point format for floating point number
representation. For information about the actual binary representation of
floating point values in a CPU and how precision and accuracy are affected
in a floating point calculation, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q36068.htm">Q36068</A></B>
   TITLE     : IEEE Floating-Point Representation and MS Languages

   ARTICLE-ID: <B><A HREF="../FORTRAN/Q125056.htm">Q125056</A></B>
   TITLE     : Precision and Accuracy in Floating-Point Calculations

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed:none
   Value of c is printed with a decimal point precision of 10 and
   6 (printf rounded value by default) to show the difference
*/

#include &lt;stdio.h&gt;
#define EPSILON 0.0001   // Define your own tolerance
#define FLOAT_EQ(x,v) (((v - EPSILON) &lt; x) &amp;&amp; (x &lt;( v + EPSILON)))

void main()
</PRE>{
<PRE> float a,b,c
 a=1.345f;
 b=1.123f;
 c=a+b;

//if (FLOAT_EQ(c, 2.468))        // Remove comment for correct result

 if (c == 2.468)                 //Comment this line for correct result
  printf("They are equal\n");
 else
  printf("They are not equal!!The value of c is %13.10f,or %f",c,c);
</PRE>}
<P>
<P><h3>The Output Result</h3>
 
<P>
They are not equal. The value of c is 2.4679999352 or 2.468000.
<P>
For EPSILION, you may use the constants FLT_EPSILON defined for float as
1.192092896e-07F or DBL_EPSILON defined for double as 2.2204460492503131
e-016. You need to include float.h for these constants. These constants
are defined as the smallest positive number x, such that x+1.0 is not
equal to 1.0. Because this is a very small number it is advisable that you
employ user-defined tolerance for calculations involving very large
numbers. Please see "C Floating-Point Constants" article in the Microsoft
Development Library for other predefined constants.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbusage kbprg<BR>
KBSubcategory: CLIss VCGenIss<BR>
Additional reference words: 1.00 1.50 2.00 4.00 8.00 8.00c 9.00 9.10 10.00<BR>
floating point<BR>
Keywords            : CLIss VCGenIss kbprg kbusage<BR>
Version             : 1.00 1.50 | 1.00 2.00 4.00<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

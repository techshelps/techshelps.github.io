

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Escape Character Erases First Characters in gets() String </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q57948 ">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1990/01/22">
<META NAME="Keywords" CONTENT="CRTIss kbcode kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In Microsoft C for MS-DOS and Windows NT, if you enter the escape character (ASCII 1Bh) from the keyboard (console) into a string that gets(), cgets(), or fgets() is reading, all the string previously read in is erased. The string pointer is reset ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATX,QAGB,QBWP,QBFY,QAVX,QAVW,QAY2,QDIR,QBFN,QAEF,QAH4,QDL9,QBWQ,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Escape Character Erases First Characters in gets() String</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q57948 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The C Run-time (CRT) included with:
   - Microsoft C for MS-DOS, versions 5.1, 6.0, 6.0a, 6.0ax
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5
   - Microsoft Visual C++ 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft C for MS-DOS and Windows NT, if you enter the escape character
(ASCII 1Bh) from the keyboard (console) into a string that gets(), cgets(),
or fgets() is reading, all the string previously read in is erased. The
string pointer is reset so that characters following the escape character
are read into the beginning of the string. This is consistent with the
action taken by the operating system to parse the input line.
However, if the escape character is input from a file by redirection, the
entire string, including the escape character, will be read into the
string.
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code #1</h3>
 
<P>
<PRE>   /* Compile options needed: none
   */

   #include &lt;conio.h&gt;
   #include &lt;stdio.h&gt;

   char buf[22];
   char *result;

   void main(void)
   {
        int i;
        buf[0] = 20;

        printf("Enter your text: \n");
        result = gets(buf);

        printf ( "Resulting String: %s\n", result );
        for( i = 0; i &lt; 20; i ++ )
        {
             printf("Buf[%2d] = %c (char)\n", i, buf[i]);
        }
   }

</PRE>Enter the following string as a test:
<P>
<PRE>   abcdef&lt;esc&gt;ghijk

</PRE>Note that the resulting string is output as:
<P>
<PRE>   ghijk

</PRE>Now, create a data file named test.dat containing the string
"abcdef&lt;esc&gt;ghijk" either by using a text editor that permits escape
characters to be embedded in a string or by using the sample code #2
below.
<P>
<P><h3>Sample Code #2</h3>
 
<P>
<PRE> /* Compile options needed: none
 */

 #include &lt;stdio.h&gt;

 void main(void)
 {
    FILE* fp;
    char* fname = "test.dat";
    int   numwrote;

    if ( (fp = fopen( fname, "wt" )) == NULL )
       printf( "Unable to open text file \"%s\" for writing.\n", fname );
    else
    {
       if ( (numwrote = fprintf( fp, "abcdef""\x1b""ghijk" )) != 12 )
          printf( "Write to file failed!  %d bytes written!\n", numwrote );
       fclose( fp );
    }
 }

</PRE>If the program from sample code #1 is run with input redirected from
the data file, as follows:
<P>
<PRE>   program &lt;test.dat

</PRE>the resulting string is output as follows:
<P>
<PRE>   abcdef&lt;esc&gt;ghijk

</PRE>This behavior occurs in the entire gets() family of routines,
including gets(), cgets(), and fgets(). If the input is coming from
the console, the run time will use the standard MS-DOS, OS/2, or
Windows NT keyboard read routines. On the other hand, if the input is
coming from a file (through redirection), the operating system doesn't
perform any editing and the file is read in literally.
 
<PRE>Keywords          : CRTIss kbcode kbfasttip
Version           : MS-DOS:5.1,6.0,6.00a,6.00ax,7.0; WINDOWS:1.0,1.5; WINDOWS  NT:1.0,2.0,2.1,4.0,5.0
Platform          : MS-DOS NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

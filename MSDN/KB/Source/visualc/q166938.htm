

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Find Users Connected to an Access 7.0 Database </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166938">
<META NAME="KBModify" CONTENT="1998/01/07">
<META NAME="KBCreate" CONTENT="1997/04/15">
<META NAME="Keywords" CONTENT="dbDao MfcDAO MfcDatabase kbcode kbinterop">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  Use Msldbusr.dll to determine which users are connected to an Access 7.0 Database.  MORE INFORMATION  Download Msldbusr.dll using the instructions in the following article in the Microsoft Knowledge Base:     ARTICLE: 148583    TITLE  : ACC95:Under...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAGU,QAB4,QA1S,QA4Q,QALW,QAAP,QAY5,QBFY,QBV8,QAKC,QAB9,QAG8,QBXE,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Find Users Connected to an Access 7.0 Database</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 7, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166938</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Editions, versions 4.0, 4.1, 4.2, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Use Msldbusr.dll to determine which users are connected to an Access 7.0
Database.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Download Msldbusr.dll using the instructions in the following article in
the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE: 148583
   TITLE  : ACC95:Understanding Jet Locking Paper &amp; LDBview Available
            on MSL

</PRE>Then follow the instructions below to use this DLL from Visual C++.
<P>
Use the Msldbusr.dll to find out who is connected to a Jet database.
<P>
<P><h3>The Msldbusr.dll Functions</h3>
 

<UL><LI>LDBUser_GetUsers - After being called, this function returns two
   key pieces of information, the list of users and the number of users
   connected (if successful, otherwise returns an error number).

<LI>LDBUser_GetError - Returns a string error message stating what the
   return value from LDBUser_GetUsers was.
<P>
</UL><h3>Function Declarations</h3>
 
<P>
To use the functions from within C/C++, they should be declared in the
following way:
<P>
<PRE>   #include &lt;WINDOWS.H&gt;

   typedef INT (WINAPI *PFNLDBUSERGETUSER)(LPSAFEARRAY FAR *, LPCSTR,
   INT);
   PFNLDBUSERGETUSER lpfnLdbUser_GetUsers;

   typedef BSTR (WINAPI *PFNLDBUSERGETERR)(INT);
   PFNLDBUSERGETERR lpfnLdbUser_GetError;

</PRE><h3>Function Parameters for C/C++</h3>
 
<P>
<PRE>   INT LDBUser_GetUsers
   (
       LPSAFEARRAY FAR * lpsaUserList,         // Returned list of users
        LPCSTR            lpcstrMdbFilename,    // The name of the MDB file
        INT               nOptions              // Specifies return options
    )

   lpsaUserList - This is an array of BSTRs that contains a list of
   users when the function returns. This BSTR array in C/C++ should
   initially be allocated with a lower bound equal to 1 (however, this is
   not required) and the count of elements set to 1. The Msldbusr.dll will
   redimension the count of elements for the BSTR array if the number of
   elements is less than the number of users.

   For example:

      SAFEARRAY FAR*    psaUserList;
      SAFEARRAYBOUND    sabUserList[1];
      sabUserList[0].lLbound = 1;
      sabUserList[0].cElements = 1;
      psaUserList = SafeArrayCreate(VT_BSTR, 1, sabUserList);

   lpcstrMdbFilename - This is the name of the filename with its associated
   database extension (MDB, MDW, MDA, etc.). A corresponding LDB file
   must exist, otherwise LDBUser_GetUsers will return an error.

   nOptions - Specifies the type of users that are returned into
   lpsaUserList.

    - 1 = All users who have logged in since the LDB file was created.
    - 2 = Only users who are currently logged in.
    - 4 = Only users who are causing the database file to be corrupt.
    - 8 = Just returns the count of users. No users are returned in the
          BSTR array.

   BSTR LDBUser_GetError
   (
       INT nError // The error number returned by LDBUser_GetUsers
   )

   nError - This is the error value returned when LDBUser_GetUsers returns
   a negative value.  This should normally be in the range of -1 to -14.
   The error values are:

    -  -1 = Can't open the LDB file
    -  -2 = No user connected
    -  -3 = Can't create an array
    -  -4 = Can't redimension array
    -  -5 = Invalid argument passed
    -  -6 = Memory allocation error
    -  -7 = Bad index
    -  -8 = Out of memory
    -  -9 = Invalid Argument
    - -10 = LDB is suspected as corrupted
    - -11 = Invalid argument
    - -12 = Unable to read MDB file
    - -13 = Can't open the MDB file
    - -14 = Can't find the LDB file

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>   #include &lt;windows.h&gt;
   #include &lt;stdio.h&gt;

   typedef INT (WINAPI *PFNLDBUSER)(LPSAFEARRAY FAR *, PCSTR, INT );
   PFNLDBUSER lpfnLdbUser_GetUsers;

   typedef BSTR (WINAPI *PFNLDBUSERGETERR)(INT);
   PFNLDBUSERGETERR lpfnLdbUser_GetError;

   BOOL ShowUsers(char *);

   void main( int argc, char* argv[] )
   {
       if (argc != 2)
       return;

       ShowUsers(argv[1]);
   }

   //
   // Display a list of JET users to the console screen.
   //
   BOOL ShowUsers( char* pszDatabase )
   {
       HINSTANCE       hLdbUserInstance;
       SAFEARRAY FAR*  psaUserList = NULL;
       SAFEARRAYBOUND  sabUserList[1];
       int             cUsers;
       LONG            iLoop;
       HRESULT         hr;
       char*           szBuff;
       BOOL            fRetVal = TRUE;
       BSTR            bstrError = NULL;

   // Get the library instance handle.
       hLdbUserInstance = LoadLibrary("MSLDBUSR.DLL");
       if (!hLdbUserInstance)
           return FALSE;

   // Get a pointer to the main function in the library.
       lpfnLdbUser_GetUsers = (PFNLDBUSER)GetProcAddress(hLdbUserInstance,
           "LDBUser_GetUsers");
       if (!lpfnLdbUser_GetUsers)
   {
       fRetVal = FALSE;
       goto Exit;
   }

   // Get a pointer to the error function in case an error occurs.
   lpfnLdbUser_GetError = (PFNLDBUSERGETERR)GetProcAddress(
       hLdbUserInstance, "LDBUser_GetError");
   if (!lpfnLdbUser_GetError)
   {
       fRetVal = FALSE;
       goto Exit;
   }

   // Create a SAFEARRAY to hold the list of users.
   // NOTE: We'll only create a 1 element array because the
   // LDBUser_GetUsers will adjust the size if needed.
   sabUserList[0].lLbound    = 1;
   sabUserList[0].cElements  = 1;
   psaUserList = SafeArrayCreate(VT_BSTR, 1, sabUserList);

   // Make the function call and obtain the list of users.
   cUsers = lpfnLdbUser_GetUsers(&amp;psaUserList, pszDatabase, 0x1);

   if (!cUsers )
   {
       printf("No users\n");
       goto Exit;
   }

   // Display error messages if any occurred.
   if (cUsers &lt; 0)
   {
       bstrError = SysAllocString( lpfnLdbUser_GetError( cUsers ) );
       printf("Error #:%d -- %s\n",cUsers, bstrError);
       goto Exit;
   }

   // Display the list of users.
   for(iLoop=1;iLoop &lt;= cUsers; iLoop++)
   {
       hr = SafeArrayGetElement(psaUserList, &amp;iLoop, &amp;szBuff);
       if (SUCCEEDED(hr))
           printf("User %d:%s\n",iLoop , szBuff);
       else
           printf("Failed on User %d\n",iLoop );
   }

   // Cleanup.
   Exit:
       if (bstrError)
           SysFreeString(bstrError);

       if (psaUserList)
           SafeArrayDestroy(psaUserList);

   // Free up the Msldbusr.dll.
       FreeLibrary(hLdbUserInstance);

       return TRUE;
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Jet<BR>
Keywords          : dbDao MfcDAO MfcDatabase kbcode kbinterop<BR>
Version           : winnt:4.0 4.1 4.2 5.0<BR>
Platform          : winnt<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 7, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

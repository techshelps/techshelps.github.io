

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: C++ Name Decoration--Why Used, Getting Decorated Names </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q126845">
<META NAME="KBModify" CONTENT="1997/12/11">
<META NAME="KBCreate" CONTENT="1995/03/05">
<META NAME="Keywords" CONTENT="CPPIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The Microsoft C++ compilers encode the names of symbols in C++ programs to include type information in the name. This is called  name decoration,  or  name mangling.  The purpose of this is to ensure type-safe linking. The C++ language allows funct...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUJ,QAY5,QBFY,QARM,QBV8,QAB9,QA3P,QAUD,QBWD,QAFI,QA56,QA55,QAGI,QAH4,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: C++ Name Decoration--Why Used, Getting Decorated Names</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 11, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q126845</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52
<LI>Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 4.0, 4.1, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft C++ compilers encode the names of symbols in C++ programs to
include type information in the name. This is called "name decoration," or
"name mangling." The purpose of this is to ensure type-safe linking. The
C++ language allows function overloading where functions with the same name
are only distinguished from one another by the data types of the arguments
to the functions. Name decoration enables the linker to distinguish between
different versions of overloaded functions because the names of the
functions are encoded or decorated differently.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Different compiler vendors have their own methods or algorithms for
decorating names. Microsoft does not publish the algorithm its compilers
use for name decoration because it may change in the future. However, it
is sometimes necessary to get the decorated version of a function name.
For example, you may need to export a C++ function from a Windows DLL by
listing it in the EXPORTS section of a .DEF file used to build the DLL.
(Although declaring the function with __declspec( dllexport ) is the
preferred method to export a C++ function using Visual C++, 32-bit Edition,
it is still valid to use a .DEF file with these products.) To export the
function successfully, you need to list its decorated name, not the name in
the source code.
<P>
For all of the products listed above, Microsoft makes browser toolkits
available. These toolkits provide functions that can interpret decorated
names.
<P>
For information about __declspec( dllexport )or browser toolkits, please
see the respective articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q132044.htm">Q132044</A></B>
   TITLE     : How to Use _declspec(dllimport) &amp; _declspec(dllexport) and
               Why

   ARTICLE-ID: <B><A HREF="../VISUALC/Q153393.htm">Q153393</A></B>
   TITLE     : Browser Toolkit for Microsoft Visual C++

</PRE>The following sample code uses the FormatDName function in the browser
library, part of the browser toolkei. The function returns the undecorated
form of the name passed to it.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: cl /AL getname.cpp bthunkl.obj /link bsc.lib
          (for 16-bit, where getname.cpp is the source file name)
                              cl getname.cpp /link bsc.lib
          (for 32-bit version 4.x and earlier, where getname.cpp is the
</PRE>source
<PRE>           file name)
   */

   #include &lt;iostream.h&gt;
   #include &lt;strstrea.h&gt;

   extern "C"
   {
   #include "hungary.h"
   #include "bsc.h"
   #include "bscsup.h"
   }

   void main( int argc, char *argv[] )
   {
       if ( argc &lt; 2 )
       {
           cout &lt;&lt; "Usage: GETNAME decorated-name" &lt;&lt; endl;
           return;
       }

       strstream name;

       // Call browser library function to get undecorated name
       name &lt;&lt; FormatDname ( argv[1] ) &lt;&lt; '\0';

       cout &lt;&lt; "Undecorated name: " &lt;&lt; name.str() &lt;&lt; endl;
       name.rdbuf()-&gt;freeze( 0 );
   }

</PRE>The following example works with the newer browser toolkit 5.0 and Visual
C++ version 5.0.
<P>
<PRE>   /* Compile options needed: cl /GX getname.cpp /link msbsc50.lib
          (where getname.cpp is the source file name)
   */

   #include &lt;iostream&gt;
   #include &lt;strstream&gt;
   #include &lt;windows.h&gt;
   #include "bsc.h"

   using namespace std;

   int main( int argc, char *argv[] )
   {
       Bsc* pbsc;

       if ( argc &lt; 3 )
       {
           cout &lt;&lt; "Usage: GETNAME bscfile-name decorated-name" &lt;&lt; endl;
           return 1;
       }

       strstream name;

       // Open the browser file
       Bsc::open( argv[1], &amp;pbsc );

       // Call browser library function to get undecorated name
       name &lt;&lt; pbsc-&gt;formatDname( argv[2] ) &lt;&lt; '\0';

       cout &lt;&lt; "Undecorated name: " &lt;&lt; name.str() &lt;&lt; endl;
       name.rdbuf()-&gt;freeze( 0 );

       pbsc-&gt;close();
       return 0;
   }

</PRE> 
<PRE>Keywords          : CPPIss kbcode
Version           : Windows: 1.5,1.51,1.52;Winnt:2.0,2.1,4.0,4.1,5.0
Platform          : winnt
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 11, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

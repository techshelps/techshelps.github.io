

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Make a Resizable Dialog Bar </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143255">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1996/01/29">
<META NAME="Keywords" CONTENT="kbcode kbprg MfcUI">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The default MFC implementation of CDialogBar does not allow for the dialog bar to be resizable when it is floating. If the dialog bar contains controls that are sensibly resized, the programmer may want to make the dialog bar resizable by using the...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QA01,QAOE,QALW,QAY5,QAB5,QA7O,QAMN,QABA,QANS,QBXR,QBVV,QBV8,QAH4,QAYL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Make a Resizable Dialog Bar</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143255</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The default MFC implementation of CDialogBar does not allow for the dialog
bar to be resizable when it is floating. If the dialog bar contains
controls that are sensibly resized, the programmer may want to make the
dialog bar resizable by using the techique described in this article.
<P>
To make the dialog bar resizable when using versions of MFC earlier than
version 4.0:

<OL><P><LI>Change the style of the mini frame window enclosing the floating dialog
   bar so that it is resizable.

<P><LI>Override CDialogBar to provide a CalcFixedLayout, which allows the
   dialog bar and its controls to be resized.
<P>
</OL>To make the dialog bar resizable when using MFC version 4.0 or later, you
can use the built-in support for resizable control bars. However, dialog
bars do not get this behavior by default. To make a dialog bar resizable:

<OL><P><LI>Use the new CBRS_SIZE_DYNAMIC style when creating the dialog bar.

<P><LI>Add code to an override of the new CalcDynamicLayout() function.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>For versions of MFC Earlier Than Version 4.0</h3>
 
<P>
CDialogBar contains an embedded member variable m_sizeDefault of type
CSize. On creation, m_sizeDefault is set to the size of the dialog template
embedded in the dialog bar. Whenever the dialog bar is resized or
repositioned, MFC calls CDialogBar::CalcFixedLayout(). This member function
is intended to return the appropriate size of the control bar; for
CDialogBar, CalcFixedLayout() usually returns m_sizeDefault. This causes
the dialog bar to always snap back to its default size.
<P>
To create a resizable dialog bar, you must ensure that the following things
are handled in some manner by an application:

<OL><P><LI>The CMiniDockFrameWnd surrounding the floating dialog bar must have its
   window styles changed so that it is resizable.

<P><LI>A member variable must be added to a class derived from CDialogBar to
   represent the appropriate floating size.

<P><LI>CalcFixedLayout() must be overridden in this class to set and return the
   floating size of the dialog bar when the dialog bar is being resized.
<P>
</OL>With the appropriate tests, both 1 and 3 can be implemented in
CalcFixedLayout(). See the "Sample Code" section of this article for an
example of this.
<P>
<P><h3>For MFC Version 4.0 and Later</h3>
 
<P>
In MFC 4.0 and higher, control bars support the new CBRS_SIZE_DYNAMIC
style. CBRS_SIZE_DYNAMIC allows a floating control bar to be dynamically
resized when the user drags the control bar's border. The virtual function
CControlBar::CalcDynamicLayout() has been added to determine the size that
a control bar should be resized to.
<P>
CalcDynamicLayout() is called for CBRS_SIZE_DYNAMIC control bars when the
border of a floating control bar is dragged and when the control bar is
docked or floated. The default CControlBar implementation simply calls
CalcFixedLayout(), which prevents control bar objects from resizing unless
CalcDynamicLayout() is overridden. CDialogBar does not override
CalcDynamicLayout(), so by default, dialog bars are not resizable.
<P>
Therefore, to make a resizable dialog bar using MFC 4.0:

<OL><P><LI>Create a new class derived from CDialogBar and override the
   CalcDynamicLayout() function. Depending on the behavior you want,
   it may be necessary to add a member variable to the class.

<P><LI>Create an instance of this class using the CBRS_SIZE_DYNAMIC style bit.
   Dialog bars are typically created in CMainFrame::OnCreate():
<P>
<P><PRE>      if (!m_wndDialogBar.Create(this, IDD_DIALOGBAR,
<PRE></PRE>                                 CBRS_TOP | CBRS_SIZE_DYNAMIC, 777))
      {
         TRACE0("Failed to create dialogbar\n");
         return -1;
      }

      m_wndDialogBar.EnableDocking(CBRS_ALIGN_ANY);
      DockControlBar(&amp;m_wndDialogBar);

</PRE></OL>See the "Sample Code" section in this article for a examples of this.
<P>
<P><h2>SAMPLE CODE</h2>
 
<P>
<P><h3>Sample Code for MFC versions Prior to Visual C++ 4.0</h3>
 
<P>
<PRE>   /* Compile options needed: Default
   */

   // RSZDLGBR.H : header file
   //

   class CResizableDlgBar : public CDialogBar
   {
   // Construction
   public:
        BOOL Create( CWnd* pParentWnd, UINT nIDTemplate, UINT nStyle,
                    UINT nID, BOOL = TRUE);
        BOOL Create( CWnd* pParentWnd, LPCTSTR lpszTemplateName,
                 UINT nStyle, UINT nID, BOOL = TRUE);

   // Attributes
   public:
        CSize m_sizeDocked;
        CSize m_sizeFloating;
        BOOL m_bChangeDockedSize;   // Indicates whether to keep
                                 // a default size for docking

   // Operations
   public:

   // Overrides
       virtual CSize CalcFixedLayout(BOOL bStretch, BOOL bHorz);

   // Implementation
   public:
   };

   /////////////////////////////////////////////////////////////////////

   // RSZDLGBR.CPP : implementation file
   //

   #include "stdafx.h"
   #include &lt;afxpriv.h&gt;
   #include "ResizableDlgBar.h"
   #include "resource.h"

   ////////////////////////////////////////////////////////////////////
   // CResizableDlgBar Construction/Destruction

   BOOL CResizableDlgBar::Create( CWnd* pParentWnd, UINT nIDTemplate,
                                  UINT nStyle, UINT nID, BOOL bChange)
   {
        if(!CDialogBar::Create(pParentWnd,nIDTemplate,nStyle,nID))
             return FALSE;

        m_bChangeDockedSize = bChange;
        m_sizeFloating = m_sizeDocked = m_sizeDefault;
        return TRUE;
   }

   BOOL CResizableDlgBar::Create( CWnd* pParentWnd,
                                  LPCTSTR lpszTemplateName,
                                  UINT nStyle, UINT nID, BOOL bChange)
   {
        if (!CDialogBar::Create( pParentWnd, lpszTemplateName,
                                nStyle, nID))
             return FALSE;

        m_bChangeDockedSize = bChange;
        m_sizeFloating = m_sizeDocked = m_sizeDefault;
        return TRUE;
   }

   ////////////////////////////////////////////////////////////////////
   // Overloaded functions


   CSize CResizableDlgBar::CalcFixedLayout(BOOL bStretch, BOOL bHorz)
   {
        if (IsFloating())
       {
           // Get the parent mini frame wnd
           CMiniDockFrameWnd* pFrame =
             ((CMiniDockFrameWnd*)m_pDockBar-&gt;GetParent());
           CRect rcFrame;
           pFrame-&gt;GetClientRect(&amp;rcFrame);
           // Is its size (0,0)? If so, it was just floated
           CSize sizerc(rcFrame.right - rcFrame.left,
                        rcFrame.bottom - rcFrame.top);
           if (!((sizerc.cx &lt;= 0) &amp;&amp; (sizerc.cy &lt;= 0)))
               return ((m_bChangeDockedSize) ?
                           m_sizeDocked = m_sizeFloating = sizerc :
                           m_sizeFloating = sizerc);
           else
           {
               // Modify Style when dialog bar is first floated
               pFrame-&gt;ModifyStyle(MFS_MOVEFRAME, WS_THICKFRAME, 0);
               m_dwStyle |= MFS_THICKFRAME;
               m_dwStyle |= WS_THICKFRAME;
               m_dwStyle &amp;= ~MFS_MOVEFRAME;
               // Return last floated size
               return m_sizeFloating;
           }
       }

        if (bStretch) // if not docked stretch to fit
             return CSize(bHorz ? 32767 : m_sizeDocked.cx,
                  bHorz ? m_sizeDocked.cy : 32767);
        else
             return m_sizeDocked;
   }

   /////////////////////////////////////////////////////////////////////

</PRE><h3>Sample Code for MFC Included with Visual C++ 4.0 and above</h3>
 
<P>
<PRE>   /* Compile options needed: Default
   */

   // ResizableDlgBar.h : header file
   //

   class CResizableDlgBar : public CDialogBar
   {
   // Construction
   public:
        BOOL Create( CWnd* pParentWnd, UINT nIDTemplate, UINT nStyle,
                     UINT nID, BOOL = TRUE);
        BOOL Create( CWnd* pParentWnd, LPCTSTR lpszTemplateName,
                     UINT nStyle, UINT nID, BOOL = TRUE);

   // Attributes
   public:
        CSize m_sizeDocked;
        CSize m_sizeFloating;
        BOOL m_bChangeDockedSize;   // Indicates whether to keep
                                    // a default size for docking

   // Operations
   public:

   // Overrides
       // ClassWizard generated virtual function overrides
       //{{AFX_VIRTUAL(CResizableDlgBar)
       //}}AFX_VIRTUAL
       virtual CSize CalcDynamicLayout( int nLength, DWORD dwMode );

   // Implementation
   public:

   // Generated message map functions
   protected:
       //{{AFX_MSG(CResizableDlgBar)
       // NOTE - the ClassWizard will add and remove member functions here.
       //}}AFX_MSG
       DECLARE_MESSAGE_MAP()
   };

   /////////////////////////////////////////////////////////////////////


   // ResizableDlgBar.cpp : implementation file
   //

   #include "stdafx.h"
   #include "ResizableDlgBar.h"

   ////////////////////////////////////////////////////////////////////
   // CResizableDlgBar Construction/Destruction

   BOOL CResizableDlgBar::Create( CWnd* pParentWnd, UINT nIDTemplate,
                                  UINT nStyle, UINT nID, BOOL bChange)
   {
        if(!CDialogBar::Create(pParentWnd,nIDTemplate,nStyle,nID))
             return FALSE;

        m_bChangeDockedSize = bChange;
        m_sizeFloating = m_sizeDocked = m_sizeDefault;
        return TRUE;
   }

   BOOL CResizableDlgBar::Create( CWnd* pParentWnd,
                                  LPCTSTR lpszTemplateName, UINT nStyle,
                                  UINT nID, BOOL bChange)
   {
       if (!CDialogBar::Create( pParentWnd, lpszTemplateName,
                                                 nStyle, nID))
           return FALSE;

       m_bChangeDockedSize = bChange;
       m_sizeFloating = m_sizeDocked = m_sizeDefault;
       return TRUE;
   }

   ////////////////////////////////////////////////////////////////////
   // Overloaded functions

   CSize CResizableDlgBar::CalcDynamicLayout(int nLength, DWORD dwMode)
   {
       // Return default if it is being docked or floated
       if ((dwMode &amp; LM_VERTDOCK) || (dwMode &amp; LM_HORZDOCK))
       {
           if (dwMode &amp; LM_STRETCH) // if not docked stretch to fit
               return CSize((dwMode &amp; LM_HORZ) ? 32767 : m_sizeDocked.cx,
                            (dwMode &amp; LM_HORZ) ? m_sizeDocked.cy : 32767);
             else
               return m_sizeDocked;
       }
       if (dwMode &amp; LM_MRUWIDTH)
           return m_sizeFloating;
       // In all other cases, accept the dynamic length
       if (dwMode &amp; LM_LENGTHY)
           return CSize(m_sizeFloating.cx, (m_bChangeDockedSize) ?
                        m_sizeFloating.cy = m_sizeDocked.cy = nLength :
                        m_sizeFloating.cy = nLength);
        else
           return CSize((m_bChangeDockedSize) ?
                        m_sizeFloating.cx = m_sizeDocked.cx = nLength :
                        m_sizeFloating.cx = nLength, m_sizeFloating.cy);
   }

   BEGIN_MESSAGE_MAP(CResizableDlgBar, CDialogBar)
       //{{AFX_MSG_MAP(CResizableDlgBar)
           // NOTE - the ClassWizard will add and remove mapping macros
</PRE>here.
<PRE>       //}}AFX_MSG_MAP
   END_MESSAGE_MAP()

   /////////////////////////////////////////////////////////////////////
   // CResizableDlgBar message handlers
   /////////////////////////////////////////////////////////////////////

</PRE><h2>REFERENCES</h2>
 
<P>
MFC Technical Note 31.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode kbprg MfcUI<BR>
Technology          : kbMfc<BR>
Version             : 2.0 2.1 2.2 4.0 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Can't Initialize Non-const Reference with Temp. Object </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q91668 ">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1992/11/02">
<META NAME="Keywords" CONTENT="CPPLngIss">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  If a temporary object is passed to a function that takes a reference to an object as a parameter, that reference must be a const reference. If this is not the case, the 16-bit Microsoft C/C++ compiler will generate the following error:     error C2...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBFY,QAPN,QAW6,QAAP,QAB4,QBF0,QAVX,QAVW,QAB3,QAY5,QAOT,QAHE,QAD7,QBV8,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Can't Initialize Non-const Reference with Temp. Object</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q91668 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft C/C++ for MS-DOS, version 7.0
   - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51
   - Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
If a temporary object is passed to a function that takes a reference
to an object as a parameter, that reference must be a const
reference. If this is not the case, the 16-bit Microsoft C/C++
compiler will generate the following error:
<P>
<PRE>   error C2607: 'initializing' : cannot implicitly convert a
      'char [6]' to a non-const 'class ::szString __near &amp;'

</PRE>Using the 32-bit Microsoft C/C++ compilers 2.x and 4.x, the error appears
as follows:
<P>
<PRE>   error C2607: 'initializing' : cannot implicitly convert a
      'char [6]' to a 'class ::szString &amp;' that is not const

</PRE>Using the 32-bit Microsoft C/C++ compiler 5.0, the error appears as
follows:
<P>
<PRE>   error C2664: 'Test' : cannot convert parameter 1 from
      'char [6]' to 'class szString &amp;'

</PRE><h2>MORE INFORMATION</h2>
 
<P>
If the function is called with a parameter that is not of the type
that the function expects, a temporary object is created using the
appropriate constructor. This temporary object is then passed to the
function. In this case, the temporary object is used to initialize
the reference. In previous versions of the language, all references
were able to be initialized by temporary objects. This behavior is
now being phased out, hence the error given by the Microsoft C/C++
compiler.
<P>
The code below demonstrates this error by calling Test with a string
literal. Because the parameter is a szString reference, an object
must be created by the appropriate constructor. The result is a
temporary object that cannot be used to initialize the reference.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed:  for 16-bit - /f /Od /Zi
   *                           for 32-bit - none
   */

   #include &lt;iostream.h&gt;
   #include &lt;string.h&gt;

   class szString
   {
     int slen;
     char *str;

   public:
     szString(const char *);
     int len() const { return slen; }
   };

   void Test(szString &amp;a) { cout &lt;&lt; a.len();}

   szString::szString(const char * newstr)
   {
     slen=strlen(newstr);
     str = new char[slen + 1];
     strcpy(str, newstr);
   }

   void main(void)
   {
     Test("hello");
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 8.00c 9.00 9.10<BR>
Keywords          : CPPLngIss<BR>
Version           : MS-DOS:7.0; WINDOWS:1.0,1.5,1.51; WINDOWS NT:1.0,2.0,2.1,4.0<BR>
Platform          : MS-DOS NT WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

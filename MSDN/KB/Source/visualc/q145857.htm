

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Use Multiple Menus in MFC App That Uses GetDefaultMenu </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q145857">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1996/02/08">
<META NAME="Keywords" CONTENT="kbcode kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  In an MFC application, you may occasionally find it useful to switch between menus within the same frame window, such as when using static splitter windows or objects in a view requiring a whole new menu. Because the framework provides automatic su...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAF0,QAIM,QAH4,QBWR,QAYV,QAGI,QA36,QAJH,QDL9,QBWQ,QBWO,QBWN,QAUD,QAKR,QAHE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Use Multiple Menus in MFC App That Uses GetDefaultMenu</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q145857</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.50 1.51 1.52 | 2.00 2.10 2.20 4.00
<PRE>WINDOWS        | WINDOWS NT
</PRE>kbprg kbcode kbhowto
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.5, 1.51, 1.52
    - Microsoft Visual C++, 32-bit Edition, versions 2.0, 2.1, 2.2, 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In an MFC application, you may occasionally find it useful to switch
between menus within the same frame window, such as when using static
splitter windows or objects in a view requiring a whole new menu. Because
the framework provides automatic support for only one menu per document
template (hence per frame), additional code must be added to switch
automatically between multiple menu resources. MFC provides the
undocumented virtual function CDocument::GetDefaultMenu() to allow the
document to determine which menu to display.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When AppWizard generates an SDI or MDI application, it creates a menu
resource by using IDR_MAINFRAME as its resource ID. This menu is displayed
at all times for an SDI application and only when there are no active
documents in an MDI application. For an MDI application, AppWizard also
generates a menu resource for the one multidoc template it creates using
IDR_xxxxTYPE as its resource ID. Additional menu resources can be used by
creating them using the resource editor and associating them with another
multidoc template (see CMultiDocTemplate). The framework will display the
menu resource associated with each multidoc template automatically. This
method limits you one menu per document template. To bypass this
limitation, you can override CDocument::GetDefaultMenu() and perform some
calls to display the menu.
<P>
MFC uses CMDIChildWnd::m_hMenuShared and CFrameWnd::m_hMenuDefault data
members to determine which menu to display. In an MDI application, the menu
resource associated with each document template is loaded during the
construction of the document templates and copied into
CMDIChildWnd::m_hMenuShared. This menu is then used in
CMDIChildWnd::OnUpdateFrameMenu() to set the menu of the MDI Frame window
when there is an active MDI child window. CMDIChildWnd::OnUpdateFrameMenu()
uses CFrameWnd::m_hMenuDefault, which is loaded during CFrameWnd
construction using IDR_MAINFRAME when there are no active child windows.
An SDI program calls CFrameWnd::OnUpdateFrameMenu(), which uses
CFrameWnd::m_hMenuDefault for its menu.
<P>
In both an SDI and MDI application, the menu you need to display is
obtained from two other sources before using the m_hMenuShared or
m_hMenuDefault menus. The framework first checks CFrameWnd::m_hMenuAlt.
This is used in OLE supported programs with in-place activated objects that
provide its own menus. The second source it checks is
CDocument::GetDefaultMenu(), which is also virtual. The default
implementation of it is to return NULL. This function can be overridden to
allow the program to select the menu to display.
<P>
Changing the menus manually is done by calling OnUpdateFrameMenu() and
DrawMenuBar(). You must call CFrameWnd::OnUpdateFrameMenu(NULL) or
CMDIFrameWnd::OnUpdateFrameMenu(NULL) in order to set the new menu into the
window. Call DrawMenuBar() to redraw the menu. Use the following code to
implement for both MDI and SDI:

<OL><P><LI>Create a new menu resource (IDR_MYMENU1) in the resource editor.

<P><LI>Add an HMENU data member to CMyDocument and override GetDefaultMenu() to
   return this data member:
<P>
<PRE>   // .h file
   //    HMENU m_hMyMenu;
   //    virtual HMENU GetDefaultMenu(); // get menu depending on state
   HMENU CMyDocument::GetDefaultMenu()
   {
      return m_hMyMenu;    // just use original default
   }

   Remember to initialize this member variable to NULL either in the
   constructor or CDocument::OnNewDocument().

</PRE><P><LI>Change and redraw the menu at the desired times. For example, when
   switching between splitter panes, this is normally done in
   CView::OnActivateView(). The following code shows how to implement it
   in that function.
<P>
<PRE>   // example within CView member function
   ((CMyDocument*)GetDocument())-&gt;m_hMyMenu = ::LoadMenu(
       AfxGetResourceHandle(), MAKEINTRESOURCE(IDR_MYMENU1));
   ((CFrameWnd*)AfxGetMainWnd())-&gt;OnUpdateFrameMenu(NULL);
   AfxGetMainWnd()-&gt;DrawMenuBar();

</PRE></OL>Be sure to destroy the menu upon exiting the application, and avoid having
too many menus loaded at once.
<P>
Menus can also be switched simply by changing the value of
CMDIChildWnd::m_hMenuShared (MDI) or CFrameWnd::m_hMenuDefault (SDI).
However, using GetDefaultMenu() allows a safer method of changing the
menus.
<P>
For more information about how to share menus between MDI child windows,
please see the following article in the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../VISUALC/Q118435.htm">Q118435</A></B>
<PRE>TITLE     : Sharing Menus Between MDI Child Windows.

</PRE><h2>REFERENCES</h2>
 
<P>
MFC Source Code.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 1.00 1.50 1.51 1.52 1.10 2.00 2.10<BR>
2.20 2.5 2.50 2.51 2.52 2.52b 3.0 3.00 3.1 3.10 3.2 3.20 4.0 4.00<BR>
KBCategory: kbprg kbhowto kbcode<BR>
KBSubcategory:<BR>
Keywords          : kbcode kbhowto kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.50 1.51 1.52 | 2.00 2.10 2.20<BR>
Platform          : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

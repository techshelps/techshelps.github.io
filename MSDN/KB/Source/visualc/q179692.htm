

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: COM Method Call In WM_PAINT Handler Returns 0x80010005 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q179692">
<META NAME="KBModify" CONTENT="1998/01/22">
<META NAME="KBCreate" CONTENT="1998/01/21">
<META NAME="Keywords" CONTENT="MfcOLE kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When calling methods on a COM server from within OnDraw() or a WM_PAINT message handler of an MFC client application, you may receive an HRESULT of 0x80010005 (RPC_E_CANTCALLOUT_INEXTERNALCALL - it is illegal to call out while inside message filter...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAEV,QAUD,QAIF,QAYC,QAPN,QAH4,QAYV,QABA,QALW,QBSO,QBLM,QBVV,QAZM,QAZL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: COM Method Call In WM_PAINT Handler Returns 0x80010005</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 22, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q179692</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Editions, versions 4.2, 4.2b, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When calling methods on a COM server from within OnDraw() or a WM_PAINT
message handler of an MFC client application, you may receive an HRESULT of
0x80010005 (RPC_E_CANTCALLOUT_INEXTERNALCALL - it is illegal to call out
while inside message filter) as the return value of a COM call to a server.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
MFC has a default implementation of IMessageFilter(COleMessageFilter).
IMessageFilter is used by COM servers and clients to selectively handle
incoming and outgoing COM messages while waiting for a response from
synchronous calls. MFC's implementation allows processing of WM_PAINT
messages (to keep the UI updated) on the COM client side, while waiting on
a synchronous COM call to a server (for example, a call to an automation
method). This is done through IMessageFilter::MessagePending(). Thus, when
calling a COM server method inside of a WM_PAINT handler, you could already
be in the middle of a call to the server, and therefore receive the error
0x80010005.
<P>
As with any Windows application, the code in WM_PAINT handlers should be
minimal. If at all possible, do not have any calls to COM servers in
WM_PAINT handlers.
<P>
To resolve this problem you could use any one of the following three
workarounds:

<UL><LI>In the WM_PAINT handler, post yourself a user-defined message; in
   the handler for the user-defined message, make the call to the COM
   server.
<P>
   -or-
<P>
   Create a secondary UI thread that creates and makes all calls to the COM
   servers.
<P>
   -or-
<P>
   Modify MFC's default implementation of MessageFilter::MessagePending(),
   which currently processes WM_PAINT messages. To do this, derive a class
   from COleMessageFilter and override the virtual function
   OnMessagePending():
<P>
<P><PRE>      CMyMessageFilter : public COleMessageFiler
      {
<PRE></PRE>         virtual BOOL OnMessagePending(const MSG* pMsg);
      }

      BOOL CMyMessageFilter::OnMessagePending(const MSG* pMsg)
      {
         //The base class function dispatches WM_PAINT
         //by returning FALSE no messages are being processed; the
         //user can add code here to appropriately handle messages.
         //WARNING: Not processing WM_PAINT messages will cause the user
         //         interface to appear to hang and not update until the
         //         current COM method call returns.
         return FALSE;
      }

</PRE></UL>Then, in the InitInstance() of the CWinApp derived class, unregister the
IMessageFilter MFC registers for you when calling AfxOleInit(). Add this
code after the call to AfxOleInit(). Then instantiate a class of type
CMyMessageFilter and register it:
<P>
<PRE>   BOOL CmyApp::InitInstance()
   {
      // Initialize OLE libraries and registers default message filter.
      if (!AfxOleInit())
      {
         AfxMessageBox(IDP_OLE_INIT_FAILED);
         return FALSE;
      }

      CWinThread* pThread = AfxGetThread();
      if (pThread != NULL)
      {
         // Destroy message filter, thereby unregistering it.
         delete pThread-&gt;m_pMessageFilter;
         pThread-&gt;m_pMessageFilter = NULL;

         // Create the new message filter object.
         pThread-&gt;m_pMessageFilter = new CMyMessageFilter;
         ASSERT(AfxOleGetMessageFilter() != NULL);

         // Register the new message filter object.
         AfxOleGetMessageFilter()-&gt;Register();
      }
      ...
      ...
   }

</PRE>For more information on how message filters work, please see the online
documentation on IMessageFilter and COleMessageFilter.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Inside OLE", second edition, by Kraig Brockschmidt, Chapter 6,
"Local/Remote Transparency," published by Microsoft Press.
<P>
Visual C++ Books Online and the MFC source code for the functions mentioned
in this article.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 80010005 2147549189 IMessageFilter MessagePending<BR>
COleMessageFilter OnDraw<BR>
(c) Microsoft Corporation 1997, All Rights Reserved. Contributions by<BR>
Jaganathan Thangavelu, Microsoft Corporation<BR>
Keywords          : MfcOLE kbcode<BR>
Technology        : mfc<BR>
Version           : WINNT:4.2,4.2b,5.0<BR>
Platform          : winnt<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 22, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: No Error Given for Non-static Callback Member Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148789">
<META NAME="KBModify" CONTENT="1997/09/19">
<META NAME="KBCreate" CONTENT="1996/03/22">
<META NAME="Keywords" CONTENT="CLIss vcbuglist410 vcfixlist500 kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The compiler does not generate any compiler errors when a non-static member function is used as a callback function and the calling convention for the function is explicitly specified. For example, the sample code shown in this article will not cau...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBV8,QAB9,QAVX,QAVW,QAOT,QBFY,QAAP,QAB4,QAIS,QAR4,QAO3,QAO2,QAGI,QAKP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: No Error Given for Non-static Callback Member Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 19, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148789</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft C/C++ Compiler (CL.EXE) included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.1, 4.2
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The compiler does not generate any compiler errors when a non-static member
function is used as a callback function and the calling convention for the
function is explicitly specified. For example, the sample code shown in
this article will not cause the compiler to generate any compiler errors
although it should.
<P>
Debugging the non-static member callback function will reveal the stack is
corrupted. Any parameters to the function, including the implied this
pointer may be invalid.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
By design, a member function used as a callback function must be static. A
non-static member function cannot be used as a callback function. You can
also use file scope global functions for callback functions.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the Microsoft products listed
at the beginning of this article. This bug was corrected in Visual C++
version 5.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Using a non-static member function as a callback function should trigger
the compiler to generate the following error when the callback function
is invoked:
<P>
<PRE>    test.cpp(line#): error C2643: illegal cast from pointer to member.

</PRE>In C++ every callback function has its own prototype, which determines the
parameters that the calling function can pass to the function. However, C++
member functions have a hidden parameter known as the 'this' pointer. C++
is able to associate a function with a particular instance of an object by
means of the 'this' pointer. Therefore, if a callback function, defined as
a non-static member function, is called, it will expect a particular
instance of an object. On the first line of the Test::Test_Func() member
function in the following sample code, there is no object instance when the
callback function is invoked, so a C2643 compiler error should be
generated.
<P>
For more information on writing C++ callback functions, please see the
article "Calling All Members: Member Functions as Callbacks" on the
Microsoft Development Network (MSDN) CD-ROM.
<P>
<P><h3>Sample Code to Reproduce Problem</h3>
 
<P>
<PRE>   /* Compile options needed: default console application
   */

   #include &lt;stdio.h&gt;

   typedef void (__cdecl *lpCallback)();

   void Function1(lpCallback)
   {
   }

   class Test
   {
    public:
      void _cdecl BadCallBack();       // Non-static callback function
      static void _cdecl GoodCallBack(); // Static callback function

      void Test_Func();
   };

   void Test::Test_Func()
   {
     Function1(BadCallBack); // Line 20 : compiler doesn't generate C2643
     Function1(GoodCallBack);
   }

   void Test_Func()
   {
     Function1(Test::BadCallBack);  // Compiler correctly generates C2643
     Function1(Test::GoodCallBack);
   }

   void main()
   {
   }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 10.10 10.20<BR>
Keywords          : CLIss vcbuglist410 vcfixlist500 kbprg<BR>
Version           : 4.1 4.2<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbbug<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 19, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

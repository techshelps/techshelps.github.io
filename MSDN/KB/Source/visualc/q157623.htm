

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for priority_queue::(push,pop,empty,top) Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157623">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/15">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the priority_queue::push, priority_queue::pop, priority_queue::empty, priority_queue::top, and priority_queue::size STL functions in Visual C++.  MORE INFORMATION  The priority_queue adapter holds object...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7R,QBFY,QAEF,QAY5,QDIJ,QA5A,QAGB,QBV8,QA4Q,QAPF,QAW6,QAYC,QAB9,QA9N,QA56 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for priority_queue::(push,pop,empty,top) Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157623</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the priority_queue::push,
priority_queue::pop, priority_queue::empty, priority_queue::top, and
priority_queue::size STL functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The priority_queue adapter holds objects of the type defined by the type of
container supported by the priority_queue. The two containers supported are
the vector and the deque. Objects are inserted by push() and removed by
pop(). top() returns the top item in the priority_queue.
<P>
Since adapters do not support iteration, a priority_queue has no associated
iterator.
<P>
Priority_queue allows you to maintain a sorted collection of items
determined by an associated comparator function, such as less, greater,
etc. The top item therefore becomes the candidate of choice, lowest or
highest based on the function chosen.
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;queue&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   priority_queue::push();
   priority_queue::pop();
   priority_queue::empty();
   priority_queue::top();
   priority_queue::size();

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The sample shows priority_queue implementation using deque and vector
containers.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  priority_queue.cpp
//
// Functions:
//
//    priority_queue::push(), priority_queue::pop(),
//    priority_queue::empty(), priority_queue::top(), queue::size()
//
// Written by Debabrata Sarma
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;

// Using priority_queue with deque
// Use of function greater sorts the items in ascending order
</PRE>typedef deque&lt;int, allocator&lt;int&gt; &gt; INTDQU;
typedef priority_queue&lt;int,INTDQU, greater&lt;int&gt;, allocator&lt;int&gt; &gt; INTPRQUE;
<P>
<PRE>// Using priority_queue with vector
// Use of function less sorts the items in descending order
</PRE>typedef vector&lt;char, allocator&lt;char&gt; &gt; CHVECTOR;
typedef priority_queue&lt;char,CHVECTOR,less&lt;char&gt;,allocator&lt;char&gt; &gt; CHPRQUE;
<P>
<PRE>void main(void)
</PRE>{
<PRE>    int size_q;
    INTPRQUE   q;
    CHPRQUE    p;

    // Insert items in the priority_queue(uses deque)
    q.push(42);
    q.push(100);
    q.push(49);
    q.push(201);

    // Output the item at the top using top()
    cout &lt;&lt; q.top() &lt;&lt; endl;

    // Output the size of priority_queue
    size_q = q.size();
    cout &lt;&lt; "size of q is:" &lt;&lt; size_q &lt;&lt; endl;

   // Output items in priority_queue using top()
    // and use pop() to get to next item until
    // priority_queue is empty
    while (!q.empty())
    {
        cout &lt;&lt; q.top() &lt;&lt; endl;
        q.pop();

    }

// Insert items in the priority_queue(uses vector)
    p.push('c');
    p.push('a');
    p.push('d');
    p.push('m');
    p.push('h');

    // Output the item at the top using top()
    cout &lt;&lt; p.top() &lt;&lt; endl;

    // Output the size of priority_queue
    size_q = p.size();
    cout &lt;&lt; "size of p is:" &lt;&lt; size_q &lt;&lt; endl;

    // Output items in priority_queue using top()
    // and use pop() to get to next item until
    // priority_queue is empty
    while (!p.empty())
    {
        cout &lt;&lt; p.top() &lt;&lt; endl;
        p.pop();

    }
</PRE>}
<P>
Program Output:
<P>
42
size of q is:4
42
49
100
201
m
size of p is:5
m
h
d
c
a
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample push pop empty top size less()<BR>
greater()<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

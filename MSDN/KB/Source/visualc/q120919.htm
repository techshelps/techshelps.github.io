

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual C++ Vers 2.0 README.WRI, Part 3 Compiler </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q120919">
<META NAME="KBModify" CONTENT="1997/06/27">
<META NAME="KBCreate" CONTENT="1994/09/21">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The following is based on the Visual C++ version 2.0 README.WRI file:  /W4 Warning Messages from Including WINDOWS.H  Specifying warning level 4 (/W4) when you compile any program that includes WINDOWS.H may generate many warnings. Most of these ar...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAGI,QAAP,QAY5,QAH4,QBV8,QAIF,QBFY,QANY,QDL9,QBWQ,QBWO,QBWN,QAB9,QBWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Visual C++ Vers 2.0 README.WRI, Part 3 Compiler</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q120919</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
2.00
WINDOWS NT
kbreadme
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++, 32-bit Edition, version 2.0 on the
   following platform: x86
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following is based on the Visual C++ version 2.0 README.WRI file:
<P>
<P><h3>/W4 Warning Messages from Including WINDOWS.H</h3>
 
<P>
Specifying warning level 4 (/W4) when you compile any program that includes
WINDOWS.H may generate many warnings. Most of these are benign warnings
caused by non-standard extensions used in Windows NT header files such as
WINDOWS.H and files that WINDOWS.H includes. To eliminate these warnings,
create a "dummy" header file that uses the #pragma warning directive to
selectively turn off warnings you don't need to see. Then include this
header file in any source file that also includes WINDOWS.H, or use the /FI
compiler option to force its inclusion.
<P>
For example:
<P>
<PRE>// FILE NOWARN.H
</PRE>#pragma warning(disable:4201)
#pragma warning(disable:4214)
<P>
<PRE>//FILE MYMOD.C
#include "NOWARN.H"
#include &lt;windows.h&gt;
void main(void) {}

</PRE>For further examples, see AFX.H, located in the MFC\INCLUDE subdirectory of
your Visual C++ version 2.0 installation. AFX.H uses #pragma warning to
disable specific level 4 warnings when compiling MFC applications.
<P>
<P><h3>Passing Structures by Value</h3>
 
<P>
A pass by value of a structure greater than or equal to 4096 (4K) bytes
may cause an access violation if the current stack allocation is exceeded.
If the structure size is greater than or equal to 8192 (8K) bytes, an
access violation is likely unless you ensure that new stack pages are not
being accessed.
<P>
<P><h3>The __purecall function</h3>
 
<P>
The __purecall function is a special function (defined with C linkage)
that is defined in the default run-time library, and may be called at run
time if there is an error referencing the object's virtual function table.
This will usually happen as a result of a program error. The following
code causes this error:
<P>
struct A;
<PRE>void x(A*);
</PRE>struct A
{
<PRE>    virtual void f() = 0;
    A() { x(this); }
</PRE>};
<P>
struct B : A
{
<PRE>    void f() { }
</PRE>};
<P>
<PRE>void x(A*p) { p-&gt;f(); }

void main()
</PRE>{
<PRE>    B aB;    // calls B::B calls A::A calls
}            // x calls A::f (pure virtual function)


</PRE>Because such errors cannot be caught at compile time, the __purecall
function is called, generating the following run-time error:
<P>
runtime error R6025
- pure virtual function call
<P>
If an application (such as a device driver) must be compiled without
using the standard run-time libraries (compiler option /Zl or linker
option /NODEFAULTLIB), but requires virtual function calls, you will get
an "undefined symbol" linker error on __purecall. You can work around
this error in one of two ways:

<UL><LI>Define your own __purecall function and compile with the /Gd option
   (specify __cdecl calling convention). The following is a minimal
   example:
<P>
<P><PRE>      int __purecall( void )
      {
<PRE></PRE>          /* insert your own error reporting code here */
          return 0;
      }

   If __purecall is redefined in exactly this way, no run time error is
   generated if the user calls a pure virtual function. The custom
   __purecall function should contain appropriate error checking and
   recovery code, (for example, calling _exit or printing a fatal error
   message) as noted in the sample.

   -or-

</PRE><LI>Extract the object module that contains __purecall from the LIBC.LIB
   library, and link the object explicitly. Using this method, all other
   symbols in the object module will be included. To avoid this potentially
   undesirable side-effect, the first method is recommended.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 2.00 9.00<BR>
KBCategory: kbreadme<BR>
KBSubcategory: CLIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

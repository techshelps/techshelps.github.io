

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the sqrt and pow Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157942">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/21">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the STL sqrt and pow functions in Visual C++.  MORE INFORMATION  Required Header                            Prototype ---------     // sqrt    template             inline valarray    sqrt(const valarray ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBE7,QBE6,QA36,QAGI,QBV8,QBFY,QAL3,QAB9,QAUD,QAKD,QAHH,QBB2,QAPF,QABO V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the sqrt and pow Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157942</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the STL sqrt and pow
functions in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Required Header
 
<P>
<PRE>   &lt;valarray&gt;
   &lt;cmath&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   // sqrt
   template&lt;class T&gt;
   inline valarray&lt;T&gt; sqrt(const valarray&lt;T&gt;&amp; x);

   // pow
   template&lt;class T&gt;
   inline valarray&lt;T&gt; pow(const valarray&lt;T&gt;&amp; x, const valarray&lt;T&gt;&amp; y);

   template&lt;class T&gt;
   inline valarray&lt;T&gt; pow(const valarray&lt;T&gt; x, const T&amp; y);

   template&lt;class T&gt;
   inline valarray&lt;T&gt; pow(const T&amp; x, const valarray&lt;T&gt;&amp; y);

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
This article illustrates the use of STL sqrt() and pow() functions through
sample code. sqrt() returns an object of class valarray&lt;T&gt;, each of whose
elements at index I is the square root of x[I]. pow() has three template
functions. The first template function returns an object of class
valarray&lt;T&gt;, each of whose elements at index I is x[I] raised to the power
of y[I]. The second template function stores in element I x[I] raised to
the power of y. The third template function stores in element I x raised to
the power of y[I].
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// main.cpp : Illustrates the use of STL sqrt() and pow() functions.
//
// Functions:
//
//    sqrt, pow
//
// Written by Yeong-Kah Tam
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;                 // for i/o functions
#include &lt;valarray&gt;                 // for valarray
#include &lt;cmath&gt;                    // for sqrt() and pow()

#define ARRAY_SIZE  3               // array size

void main()
</PRE>{
<PRE>    // Set val_array to contain values 1, 4, 9 for the following test
    valarray&lt;double&gt; val_array(ARRAY_SIZE);

    for (int i = 0; i &lt; ARRAY_SIZE; i++)
        val_array[i] = (i+1) * (i+1);

    // Display the size of val_array
    cout &lt;&lt; "Size of val_array = " &lt;&lt; val_array.length() &lt;&lt; endl;

    // Display the values of val_array before calling sqrt() and pow().
    cout &lt;&lt; "The values in val_array:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; val_array[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // Initialize rev_valarray that is the reverse of val_array.
    valarray&lt;double&gt; rev_valarray(ARRAY_SIZE);
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        rev_valarray[i] = val_array[ARRAY_SIZE - i - 1];

    // Display the size of rev_valarray.
    cout &lt;&lt; "Size of rev_valarray = " &lt;&lt; rev_valarray.length() &lt;&lt; endl;

    // Display the values of rev_valarray.
    cout &lt;&lt; "The values in rev_valarray:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rev_valarray[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // rvalue_array to hold the return value from calling the sqrt() and
    // pow() functions.
    valarray&lt;double&gt; rvalue_array;

    // ----------------------------------------------------------------
    // sqrt() - display the content of rvalue_array
    // ----------------------------------------------------------------

    // Display the result of val_array after calling sqrt().
    rvalue_array = sqrt(val_array);
    cout &lt;&lt; "The result of val_array after calling sqrt():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // pow() - display the content of rvalue_array
    // ----------------------------------------------------------------

    // This template function returns an object of class valarray&lt;T&gt;,
    // each of whose elements at I is x[I] raised to the power of y[I].
    rvalue_array = pow(val_array, rev_valarray);
    cout &lt;&lt; "The result after calling pow(val_array, rev_valarray):"
         &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I x[I] raised to the
    // power of y, where y=2.0.
    rvalue_array = pow(val_array, 2.0);
    cout &lt;&lt; "The result after calling pow(val_array, 2.0):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I x raised to the
    // y[I] power, where x=2.0.
    rvalue_array = pow(2.0, val_array);
    cout &lt;&lt; "The result after calling pow(2.0, val_array):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;
</PRE>}
<P>
<P><h3>Program Output</h3>
 
<P>
Size of val_array = 3
The values in val_array:
<PRE>1    4    9

</PRE>Size of rev_valarray = 3
The values in rev_valarray:
<PRE>9    4    1

</PRE>The result of val_array after calling sqrt():
<PRE>1     2     3

</PRE>The result after calling pow(val_array, rev_valarray):
<PRE>1     256     9

</PRE>The result after calling pow(val_array, 2.0):
<PRE>1     16     81

</PRE>The result after calling pow(2.0, val_array):
<PRE>2     16     512

</PRE><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample sqrt pow<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: CLIBIN.EXE Converting COleClientItem into CLongBinary </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152533">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1996/06/17">
<META NAME="Keywords" CONTENT="dbDao kbsample MfcDatabase kbcode kbfile kbole kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  CLIBIN.EXE is a Microsoft Foundation Class sample that demonstrates how to write the data from an OLE Embedded Item to an OLE Object field in an Access 7.0 Database. This particular sample uses the MFC/ODBC classes.  The following file is available...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QAC2,QA1S,QAW6,QAAP,QAB4,QAPF,QAPN,QA9Q,QA49,QAY2,QDKY,QDN9,QBBS,QA8T V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: CLIBIN.EXE Converting COleClientItem into CLongBinary</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152533</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
4.00 4.10
WINDOWS NT
kbprg kbfile kbole kbcode
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
CLIBIN.EXE is a Microsoft Foundation Class sample that demonstrates how to
write the data from an OLE Embedded Item to an OLE Object field in an
Access 7.0 Database. This particular sample uses the MFC/ODBC classes.
<P>
The following file is available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Clibin.exe">Clibin.exe</A> <I>(size: 61541 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>NOTE: Use the -d option when running CLIBIN.EXE to decompress the file
and recreate the proper directory structure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This sample writes the OLE Embedded Item's data to an Access OLE Object
field from within the Container App's OnInsertItem member of the CView
class. There is an Access database that goes along with this sample located
in the project's directory called "longbin.mdb." Remember to register this
.mdb file with the ODBC Administrator.
<P>
The following code demonstrates how to accomplish this procedure:
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>    //////////////////////////////////////////////////////////////////
    // Extract COleClientItem data and write it out to an Access Field
    // m_pSet is the recordset object
    // The recordset's CLongBinary member is: m_longbin
    // pItem is the COleClientItem object ( embed item )

    /****************************************************************/
    //NOTE: This is a constant large enough for an average Winword
    // document. Increase this number if the item you will be
    // inserting is larger!!!!!!!!
    const int DOCSIZE = 100000;

    LPPERSISTSTORAGE pPersist = NULL;
    LPLOCKBYTES pLockBytes = NULL;
    LPSTORAGE pStorage = NULL;
    LPVOID pVoid = NULL;
    HRESULT hr = S_OK;

    // make sure the recordset is in Add mode
    m_pSet-&gt;AddNew( );

    // free the current memory of the CLongBinary
    GlobalFree( m_pSet-&gt;m_longbin.m_hData );

    // pItem ( the COleClientItem object ) has a contained IOleObject
    // interface called m_lpObject.
    // Call QI to get the OLE objects data.
    if( FAILED( pItem-&gt;m_lpObject-&gt;QueryInterface( IID_IPersistStorage,
                                               (LPVOID*)&amp;pPersist ) ) )
    {
        AfxMessageBox( _T( "interface not found" ) );
        return;
    }

    // Alloc the CLongBinary
    if( ( m_pSet-&gt;m_longbin.m_hData =
                     GlobalAlloc( GMEM_MOVEABLE, DOCSIZE ) ) == NULL )
    {
        AfxMessageBox( _T( "memory error" ) );
        goto term1; // special error condition clean-up label
    }

    // Now lock it so we can write to it.
    if( ( pVoid = GlobalLock( m_pSet-&gt;m_longbin.m_hData ) ) == NULL )
    {
        AfxMessageBox( _T( "memory error" ) );
        goto term1; // special error condition clean-up label
    }

    // Create ILockBytes to be converted to an IStorage
    if( FAILED( CreateILockBytesOnHGlobal( m_pSet-&gt;m_longbin.m_hData,
                                            FALSE, &amp;pLockBytes ) ) )
    {
        AfxMessageBox( _T( "interface not found" ) );
        goto term1; // special error condition clean-up label
    }

    // Convert the ILockBytes to an IStorage
    if( FAILED( StgCreateDocfileOnILockBytes( pLockBytes, STGM_DIRECT
               | STGM_CREATE | STGM_READWRITE | STGM_SHARE_EXCLUSIVE,
                                                        0, &amp;pStorage ) ) )
    {
        AfxMessageBox( _T( "interface not found" ) );
        goto term2; // special error condition clean-up label
    }

    // Now we can write the item's persistent data into the storage
    // we've provided.
    if( FAILED( pPersist-&gt;Save( pStorage, FALSE ) ) )
    {
        AfxMessageBox( _T( "Save failed" ) );
        goto term3; // special error condition clean-up label
    }

    // manage the field state for CLongBinary RFX
    m_pSet-&gt;SetFieldDirty( &amp;m_pSet-&gt;m_longbin, TRUE );
    m_pSet-&gt;SetFieldNull( &amp;m_pSet-&gt;m_longbin, FALSE );

    // set the CLongBinary length
    m_pSet-&gt;m_longbin.m_dwDataLength =
                              GlobalSize(m_pSet-&gt;m_longbin.m_hData );

    // Update the datasource
    m_pSet-&gt;Update( );

    // clean-up
    GlobalFree( m_pSet-&gt;m_longbin.m_hData );
    pStorage-&gt;Release( );
    pLockBytes-&gt;Release( );
    pPersist-&gt;Release( );
    return;
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbfile kbole kbcode<BR>
KBSubcategory: MfcDatabase dbDao kbsample<BR>
Additional reference words: 4.00 4.10<BR>
Keywords            : dbDao kbsample MfcDatabase kbcode kbfile kbole kbprg<BR>
Technology          : kbMfc<BR>
Version             : 4.00 4.10<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

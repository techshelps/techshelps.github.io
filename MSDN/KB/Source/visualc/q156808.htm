

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for the new operator Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q156808">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/01">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the new operator from the Standard Library in Visual C++.  MORE INFORMATION  The new operator will return NULL or throw an exception on failure.  Required Header            Prototype ---------     void *...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKM,QANY,QBFY,QASP,QAPF,QAUD,QABB,QBXL,QA56,QA55,QA1O,QAY5,QABN,QBV8,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for the new operator Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q156808</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the new operator from the
Standard Library in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The new operator will return NULL or throw an exception on failure.
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;new&gt;

</PRE><h3>Prototype</h3>
 
<P>
<PRE>   void *operator new(size_t n)
   void *operator new(size_t n, const nothrow&amp;)
   void *operator new[](size_t n);

</PRE>NOTE: The class/parameter names in the prototype may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The first operator new will attempt to allocate memory and if it fails,
will throw an exception.
<P>
The second operator new accepts a second parameter of type nothrow. This
parameter indicates that if the allocation fails, it should return NULL and
not throw an exception.
<P>
The third operator new will allocate memory for an array of that type and
if it fails, will throw an exception.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  newop.cpp
//
// Functions:
//
//    void *operator new(size_t n)
//
//    void *operator new(size_t n, const nothrow&amp;)
//
//    void *operator new[](size_t n);
//
// Written by Linda Koontz
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

/* Compile options needed: /GX
*/

#include &lt;new&gt;
#include &lt;iostream&gt;

</PRE>class BigClass {
public:
<PRE>    BigClass() {};
    ~BigClass(){}
        double BigArray[99999999];
};

void main()
</PRE>{
<PRE>    try {
    BigClass * p = new BigClass;
    }
    catch( bad_alloc a) {
        const char * temp = a.what();
        cout &lt;&lt; temp &lt;&lt; endl;
        cout &lt;&lt; "Threw a bad_alloc exception" &lt;&lt; endl;
    }
    BigClass * q = new(nothrow) BigClass;
    if ( q == NULL )
        cout &lt;&lt; "Returned a NULL pointer" &lt;&lt; endl;

    try {
    BigClass * r = new BigClass[3];
    }
    catch( bad_alloc a) {
        const char * temp = a.what();
        cout &lt;&lt; temp &lt;&lt; endl;
        cout &lt;&lt; "Threw a bad_alloc exception" &lt;&lt; endl;
    }
</PRE>}
<P>
Program Output is:
<P>
bad allocation
Threw a bad_alloc exception
Returned a NULL pointer
bad allocation
Threw a bad_alloc exception
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference. Query on “operator new,” or look in Help for the &lt;new&gt;
header file.
<P>
NOTE: The Online Help for the new header file lists the following
prototypes for the new operators demonstrated in this article:
<P>
<PRE>    void *operator new(size_t n) throw(bad_alloc);

    void *operator new(size_t n, const nothrow&amp;) throw();

    void *operator new[](size_t n) throw(bad_alloc);

</PRE>The throw() following the prototype is an exception specification that is
not implemented in Visual C++ version 4.2. This is noted in the Online
Help:
<P>
<PRE>   Microsoft C++ does not support the function exception
   specification mechanism, as described in section 15.4 of the
   ANSI C++ draft.

</PRE>An exception-specification specifies the type of exceptions a function can
throw. For example,
<P>
<PRE>   void Func() throw (ProblemOne, ProblemTwo) {}

</PRE>is equivalent to:
<P>
<PRE>    void Func() {
    {
    try {}
    catch (ProblemOne) {}
    catch (ProblemTwo) {}
    catch (...) { unexpected(); }
    }
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample new<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

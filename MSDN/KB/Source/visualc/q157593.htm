

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample for map::max_size, clear, erase, size Functions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q157593">
<META NAME="KBModify" CONTENT="1997/10/09">
<META NAME="KBCreate" CONTENT="1996/10/14">
<META NAME="Keywords" CONTENT="STLIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The sample code below illustrates how to use the map::max_size, map::clear, map::empty, map::erase, map::size, map::operator[], map::end, map::begin, map::find, map::iterator, map::value_type STL symbols in Visual C++.  MORE INFORMATION  Required H...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEF,QAGJ,QAGB,QAJX,QADR,QACE,QAUD,QDIJ,QAKC,QAJ1,QBCF,QBFY,QBC6,QAHH,QAG8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>STL Sample for map::max_size, clear, erase, size Functions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 9, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q157593</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Standard C++ Library included with:
   - Microsoft Visual C++, 32-bit Edition, version 4.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample code below illustrates how to use the map::max_size,
map::clear, map::empty, map::erase, map::size, map::operator[],
map::end, map::begin, map::find, map::iterator, map::value_type STL
symbols in Visual C++.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Required Header</h3>
 
<P>
<PRE>   &lt;map&gt;

</PRE><h3>Prototypes</h3>
 
<P>
<PRE>   size_type max_size() const;
   void clear() const;
   bool empty() const;
   iterator erase(iterator first, iterator last);
   size_type size() const;
   A::reference operator[](const Key&amp; key);    // A is the allocator
   iterator map::begin();
   iterator map::end();
   iterator map::find(const Key&amp; key);

</PRE>NOTE: The class/parameter names in the prototypes may not match the version
in the header file. Some have been modified to improve readability.
<P>
<P><h3>Description</h3>
 
<P>
The following sample creates a map of strings to ints and fills it first
with a map of month names to month numbers, then empties and refills it
with a map of week-day names to corresponding ints.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: None
//
// &lt;filename&gt; :  main.cpp
//
// Functions:    iterator map::max_size();
//               void clear() const;
//               bool empty() const;
//               iterator erase(iterator first, iterator last);
//               size_type size() const;
//               A::reference operator[](const Key&amp; key);
//               iterator map::begin();
//               iterator map::end();
//               iterator map::find(const Key&amp; key);
//
// Written by Rick Troemel
// of Microsoft Product Support Services,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

</PRE>#pragma warning(disable:4786)
<P>
<PRE>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;map&gt;

</PRE>typedef map&lt;string, int, less&lt;string&gt;, allocator&lt;int&gt; &gt; STRING2INT;
<P>
<PRE>void main()
</PRE>{
<PRE>    STRING2INT MyMap;
    STRING2INT::iterator MyIterator;
    string MyBuffer;

    // print the maximum number of &lt;key,data&gt; pairs that MyMap can hold
    cout &lt;&lt; "MyMap is capable of holding " &lt;&lt; MyMap.max_size()
         &lt;&lt; " &lt;string,int&gt; pairs" &lt;&lt; endl;

    if(!MyMap.empty())
        cout &lt;&lt; "MyMap has " &lt;&lt; MyMap.size() &lt;&lt; " entries" &lt;&lt; endl;
    else
        cout &lt;&lt; "MyMap is empty" &lt;&lt; endl;
        cout &lt;&lt; "Entering new entries in MyMap" &lt;&lt; endl;
    // Fill in MyMap with the months of the year, mapped to their number
    // January - 1, February - 2, etc. using operator[].
    MyMap["January"] = 1;
    MyMap["February"] = 2;
    MyMap["March"] = 3;
    MyMap["April"] = 4;
    MyMap["May"] = 5;
    MyMap["June"] = 6;
    MyMap["July"] = 7;
    MyMap["August"] = 8;
    MyMap["September"] = 9;
    MyMap["October"] = 10;
    MyMap["November"] = 11;
    MyMap["December"] = 12;

    if(!MyMap.empty())
        cout &lt;&lt; "MyMap has " &lt;&lt; MyMap.size() &lt;&lt; " entries" &lt;&lt; endl;
    else
        cout &lt;&lt; "MyMap is empty" &lt;&lt; endl;

    // Ask the user for a month of the year and print the number
    // that corresponds to the month entered
    //MyIterator = MyMap.end();
    while(MyIterator == MyMap.end()){
        cout &lt;&lt; "Enter a Month :";
        cin &gt;&gt; MyBuffer;
        if((MyIterator = MyMap.find(MyBuffer)) != MyMap.end())
            cout &lt;&lt; (*MyIterator).first &lt;&lt; " is Month Number "
                 &lt;&lt; (*MyIterator).second &lt;&lt; endl;
        else
            cout &lt;&lt; "Enter a Valid Month (example: March)" &lt;&lt; endl;
    }

    // empty MyMap - note that clear simply calls erase(begin(),end());
    MyMap.clear();

    if(!MyMap.empty())
        cout &lt;&lt; "MyMap has " &lt;&lt; MyMap.size() &lt;&lt; " entries" &lt;&lt; endl;
    else
        cout &lt;&lt; "MyMap is empty" &lt;&lt; endl;
        cout &lt;&lt; "Entering new entries in MyMap" &lt;&lt; endl;
    // Fill MyMap with the days of the week, each mapped to an int
    MyMap["Monday"] = 1;
    MyMap["Tuesday"] = 2;
    MyMap["Wednesday"] = 3;
    MyMap["Thursday"] = 4;
    MyMap["Friday"] = 5;
    MyMap["Saturday"] = 6;
    MyMap["Sunday"] = 7;

    if(!MyMap.empty())
        cout &lt;&lt; "MyMap has " &lt;&lt; MyMap.size() &lt;&lt; " entries" &lt;&lt; endl;
    else
        cout &lt;&lt; "MyMap is empty" &lt;&lt; endl;

    // Ask the user for a day of the week and print the number
    // that corresponds to the day entered
    MyIterator = MyMap.end();
    while(MyIterator == MyMap.end()){
        cout &lt;&lt; "Enter a Day of the Week:";
        cin &gt;&gt; MyBuffer;
        if((MyIterator = MyMap.find(MyBuffer)) != MyMap.end())
            cout &lt;&lt; (*MyIterator).first &lt;&lt; " is Day Number "
                 &lt;&lt; (*MyIterator).second &lt;&lt; endl;
        else
            cout &lt;&lt;"Enter a Valid Day of the Week(example: Monday)"&lt;&lt; endl;
    }
// Now clear MyMap again - this time using erase instead of clear
    MyMap.erase(MyMap.begin(), MyMap.end());

    if(!MyMap.empty())
        cout &lt;&lt; "MyMap has " &lt;&lt; MyMap.size() &lt;&lt; " entries" &lt;&lt; endl;
    else
        cout &lt;&lt; "MyMap is empty" &lt;&lt; endl;

}

</PRE>Program Output is (User input is shown inside []):
<P>
MyMap is capable of holding 1073741823 &lt;string,int&gt; pairs
MyMap is empty
Entering new entries in MyMap
MyMap has 12 entries
Enter a Month :[April]
April is Month Number 4
MyMap is empty
Entering new entries in MyMap
MyMap has 7 entries
Enter a Day of the Week:[Friday]
Enter a Valid Day of the Week(example: Monday)
Enter a Day of the Week:[Friday]
Friday is Day Number 5
MyMap is empty
<P>
<P><h2>REFERENCES</h2>
 
<P>
Visual C++ Books On Line: Visual C++ Books:C/C++:Standard C++ Library
Reference.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: STL STLSample max_size clear empty erase size<BR>
operator[] begin end find<BR>
Keywords          : STLIss kbcode<BR>
Version           : WINNT:4.2;<BR>
Platform          : NT WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 9, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

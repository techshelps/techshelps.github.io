

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: VB Does Not Support Dual Interfaces in OLE Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151903">
<META NAME="KBModify" CONTENT="1998/01/13">
<META NAME="KBCreate" CONTENT="1996/05/30">
<META NAME="Keywords" CONTENT="CDKIss MfcOLE">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  ActiveX Controls that implement a Dual Interface do not use early binding when placed on a Visual Basic form. Even if the Dual Interface is marked as the default interface in the ActiveX Control's .odl file, Visual Basic still uses the standard IDi...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBBS,QAB5,QABB,QAHV,QA7O,QAMN,QA2K,QAOE,QABA,QA56,QA55,QA5F,QAMA,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: VB Does Not Support Dual Interfaces in OLE Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151903</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC), included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1
<LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 4.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   32-bit only, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
ActiveX Controls that implement a Dual Interface do not use early binding
when placed on a Visual Basic form. Even if the Dual Interface is marked as
the default interface in the ActiveX Control's .odl file, Visual Basic
still uses the standard IDispatch interface for all automation calls.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Dual Interface provides an alternative to using the standard IDispatch
interface when making Automation calls. This technique is also referred
to as Early Binding because type checking is performed at compile time.
Dual Interfaces are rapidly becoming popular because they provide increased
performance over the standard IDispatch interface.
<P>
It is possible to add Dual Interface support to automation servers as well
as ActiveX Controls. The ACDUAL sample provided with Visual C++ 4.1
demonstrates the addition of a Dual Interface to the AutoClick automation
server. Tech Note 65, referenced in the References section below, outlines
the changes you must make to an automation server to support a Dual
Interface. Although ACDUAL and Tech Note 65 refer to automation servers,
the information they provide is also applicable to ActiveX Controls.
<P>
Visual Basic does support early binding for automation servers that support
a Dual Interface, but currently does not support Dual Interface ActiveX
Controls. If you attempt to use the Dual Interface on an ActiveX Control in
Visual Basic, the standard IDispatch interface is used instead. Future
versions of Visual Basic may take advantage of Dual Interface ActiveX
Controls, but Visual Basic 4.0 does not.
<P>
<P><h2>REFERENCES</h2>
 
<P>
ACDUAL Sample - MFC OLE Samples, Visual C++ 4.1
<P>
Tech Note 65: Dual-Interface Support for OLE Automation Servers
 
<PRE>Keywords          : CDKIss MfcOLE
Technology        : kbMfc kbole
Version           : winnt:4.0 4.1;win95:4.0,4.1
Platform          : Win95 winnt
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Disabled DDX Radio Button Causes Infinite Loop </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114980">
<META NAME="KBModify" CONTENT="1997/09/18">
<META NAME="KBCreate" CONTENT="1994/05/18">
<META NAME="Keywords" CONTENT="MfcUI kbbuglist kbfixlist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  When DDX_Radio() is used to perform dialog data exchange (DDX) with a group of radio buttons, it loops continuously if the first button in the group has been disabled (either programmatically or with a resource editor such as App Studio).  CAUSE ==...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBUN,QABO,QA7O,QAOE,QAMN,QAB5,QBXS,QA4P,QAKD,QAR4,QAA7,QAI4,QBWP,QBVV,QA4Q V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Disabled DDX Radio Button Causes Infinite Loop</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114980</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.00 1.50 | 1.00
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbprg kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
<P>
<P><PRE>    - Microsoft Visual C++ for Windows, versions 1.0 and 1.5
    - Microsoft Visual C++ 32-bit Edition, version 1.0
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When DDX_Radio() is used to perform dialog data exchange (DDX) with a
group of radio buttons, it loops continuously if the first button in the
group has been disabled (either programmatically or with a resource
editor such as App Studio).
<P>
<P><h2>CAUSE</h2>
 
<P>
This behavior is a result of the way DDX_Radio() determines when it has
traversed every control in a group. The handle of the initial control is
stored. A loop runs, which gets the handle of each successive control in
the group with ::GetNextDlgGroupItem, and terminates when it sees the
handle of the first control again. Unfortunately the function
::GetNextDlgGroupItem skips disabled controls, which is by design.
Therefore the handle to the first control is not returned from the function
(because it is disabled) and therefore the loop does not terminate.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, do one of the following:

<UL><LI>Arrange the group so that the first radio button is not disabled when
   any of the other controls in the group are enabled.
<P>
   -or-

<LI>Call EnableWindow() to enable the radio button before DDX_Radio() is
   called [for example, in DoDataExchange()].
<P>
   -or-

<LI>Write your own DDX_Radio() replacement, as shown in the sample code in
   the "MORE INFORMATION" section, below.
<P>
</UL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in Microsoft Foundation
Classes, versions 2.0 and 2.5. This problem was corrected in MFC version
3.0
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
One solution is to write your own DDX_Radio() replacement, which uses
::GetWindow() to iterate through all the controls on the dialog box until
it encounters one with style "WS_GROUP" or a handle of "NULL". The
following sample code is a substitute for DDX_Radio():
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   //  DDX_MyRadio(), which is a modified DDX_Radio().
   //

   void AFXAPI DDX_MyRadio(CDataExchange* pDX, int nIDC, int&amp; value)
       // must be first in a group of auto radio buttons
   {
      HWND hWndCtrl = pDX-&gt;PrepareCtrl(nIDC);

      ASSERT(::GetWindowLong(hWndCtrl, GWL_STYLE) &amp; WS_GROUP);
      ASSERT(::SendMessage(hWndCtrl, WM_GETDLGCODE, 0, 0L) &amp;
   DLGC_RADIOBUTTON);

      if( pDX-&gt;m_bSaveAndValidate )
         value = -1;     // value if none found

      // walk all children in group
      int iButton = 0;
      do
      {
         if( ::SendMessage(hWndCtrl, WM_GETDLGCODE, 0, 0L) &amp;
   DLGC_RADIOBUTTON
   )
         {
         // control in group is a radio button
            if( pDX-&gt;m_bSaveAndValidate )
            {
               if( ::SendMessage(hWndCtrl, BM_GETCHECK, 0, 0L) != 0 )
               {
                  ASSERT(value == -1);    // only set once
                  value = iButton;
               }
            }
            else
            {
            // select button
               ::SendMessage( hWndCtrl, BM_SETCHECK, (iButton == value), 0L
   );
            }
            iButton++;
         }
         else
         {
            TRACE( "Warning: skipping non-radio button in group.\n" );
         }
         hWndCtrl = ::GetWindow( hWndCtrl, GW_HWNDNEXT );
      } while(hWndCtrl!=NULL &amp;&amp;
   !(GetWindowLong(hWndCtrl,GWL_STYLE)&amp;WS_GROUP));
   }

</PRE>Remember to replace the following lines in your CDialog::DoDataExchange():
<P>
<PRE>      //{{AFX_DATA_MAP(CMyDialog)
      DDX_Radio(pDX, IDC_RADIO1, m_iRadio);
      //}}AFX_DATA_MAP

   with:

      //{{AFX_DATA_MAP(CMyDialog)
      DDX_MyRadio(pDX, IDC_RADIO1, m_iRadio);
      //}}AFX_DATA_MAP
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.00 1.50 2.00 2.10 2.50 hang<BR>
KBCategory: kbprg kbfixlist kbbuglist<BR>
KBSubcategory: MfcUI<BR>
Keywords          : MfcUI kbbuglist kbfixlist kbprg<BR>
Technology        : kbMfc<BR>
Version           : 1.00 1.50 | 1.00<BR>
Platform          : NT WINDOWS<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

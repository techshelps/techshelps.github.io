

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Force Files to Be Flushed to Disk </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148505">
<META NAME="KBModify" CONTENT="1997/10/08">
<META NAME="KBCreate" CONTENT="1996/03/14">
<META NAME="Keywords" CONTENT="CRTIss kbcode">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  C and C++ file operations, by default, perform their own data caching. This caching is in addition to the disk caching done by the operating system. Under certain conditions it may be necessary to ensure your data is fully flushed to the disk. This...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDIR,QAGI,QBFD,QBFY,QAY5,QA63,QAIF,QBWN,QDL9,QBWQ,QBWO,QBV8,QBF0,QAB9,QAC9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Force Files to Be Flushed to Disk</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 8, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148505</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
<LI>Microsoft Visual C++, 32-bit Edition, versions 1.0, 2.0, 2.1, 2.2, 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
C and C++ file operations, by default, perform their own data caching. This
caching is in addition to the disk caching done by the operating system.
Under certain conditions it may be necessary to ensure your data is fully
flushed to the disk. This article explains how to ensure that your data is
properly flushed to the disk.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To flush the C runtime buffers, you need a call to fflush for files that
are opened with fopen or a call to the flush function for C++ ofstream
objects. Flushing the operating system's disk cache is a little more
difficult; it depends on the operating system in use.
<P>
<P><h3>16-bit Operating Systems - MS-DOS or Windows 3.1</h3>
 
<P>
In MS-DOS or Windows 3.1 running Smartdrv.exe version 4.0 or later, you
have two choices. You can use the _commit C runtime function or link with
Commode.obj and use the fflush C runtime function.
<P>
<P><h3>32-bit Windows Operating Systems</h3>
 
<P>
In 32-bit versions of Windows, the operating system has built-in disk
caching. The only way to force a file to be flushed to disk is by linking
to Commode.obj.
<P>
Commode.obj is designed to affect the way the C Runtime handles files. When
you link to this .obj file, a call to the C runtime function fflush also
forces the operating system to flush its cache to disk, making the call to
_commit unnecessary.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   /* Compile options needed: none

      This sample code is designed to show some of the more
      common ways to flush both the C runtime buffers and the
      operating system cache
   */

   #include &lt;stdio.h&gt;
   #include &lt;ofstream.h&gt;

   void DoSomeCFileIO();
   void DoSomeCXXFileIO();

   void main()
   {
     DoSomeCFileIO()
     DoSomeCXXFileIO();
   }

   void DoSomeCFileIO()
   {
    FILE* CFileBuf;

   // Open CFileBuf for output &amp; perform some writes

    fflush(CFileBuf);
    _commit(_fileno(CFileBuf));

   // The call to fflush will cause the C Runtime to flush
   // the buffers associated with CFileBuf to the
   // Operating system.
   // The call to _commit will tell Smartdrv.exe to flush
   // its cache to the disk.
   // The _commit function requires a file handle, hence the
   // call to _fileno
   // _commit will only function on 16-bit operating systems.
   // On 32-bit operating systems, you need to link to Commode.obj
   }

   void DoSomeCXXFileIO()
   {
    ofstream CXXFileBuf;

   // Open CXXFileBuf &amp; perform some writes

    CXXFileBuf.flush();
    _commit(CXXFileBuf.rdbuf()-&gt;fd());

   // The call to flush causes the C Runtime to flush
   // the buffer associated with CXXFileBuf to the operating system.
   //
   // The call to _commit tells Smartdrv.exe to flush
   // its cache to the disk.
   //
   // The _commit function requires a file handle, hence the
   // call to ofstream.rdbuf()-&gt;fd()
   // _commit will only function on 16-bit operating systesm.
   // On 32-bit operating systems, you will need to link to Commode.obj.
   }

</PRE><h2>REFERENCES</h2>
 
<P>
See the documentation for fflush(), _commit(), _fileno(), and ofstream.
 
<PRE>Keywords          : CRTIss kbcode
Version           : WIN3X:1.0,1.5,1.51,1.52;WINNT:1.0,2.0,2.1,2.2,4.0;
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 8, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Using CDaoRecordset::Seek </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149087">
<META NAME="KBModify" CONTENT="1997/06/26">
<META NAME="KBCreate" CONTENT="1996/03/27">
<META NAME="Keywords" CONTENT="kbcode kbprg MfcDAO">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  This article explains how to use CDaoRecordset::Seek. Seek enables high- performance indexed searching on table-type recordsets. You can call Seek to find the first record that satisfies the specified criteria for the current index and make that re...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QATJ,QA28,QA5V,QA7O,QA7N,QBJQ,QAKD,QBBI,QAYZ,QA1S,QAPN,QAC1,QA62,QAW6,QAGI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Using CDaoRecordset::Seek</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  June 26, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149087</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++, 32-bit Edition, versions 4.0, 4.1, 4.2,
<P><PRE>     4.2b, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to use CDaoRecordset::Seek. Seek enables high-
performance indexed searching on table-type recordsets. You can call Seek
to find the first record that satisfies the specified criteria for the
current index and make that record the current record. There are two
versions of the Seek member function that you can use to locate a record in
an indexed table-type recordset object. This article explains both.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are two versions of Seek, one works with indexes that are comprised
of up to three fields and the other handles indexes comprised of more than
three fields. You must set the current index by calling SetCurrentIndex
before calling Seek. If you do not, an exception will be thrown, as MFC
does not specify a default index when a recordset is opened. If the index
identifies a non-unique key, Seek locates the first record that satisfies
the criteria.
<P>
Note that if you are not creating a UNICODE recordset, any character string
COleVariant objects must be explicitly declared ANSI. This can be done by
using the COleVariant::COleVariant( lpszSrc, vtSrc ) form of constructor
with vtSrc set to VT_BSTRT (ANSI) or by using the COleVariant function
SetString( lpszSrc, vtSrc ) with vtSrc set to VT_BSTRT. SetString() is only
available in MFC Version 4.1 or later.
<P>
Here are the declarations for Seek:
<P>
<PRE>   BOOL Seek( LPCTSTR lpszComparison,
              COleVariant* pKey1,
              COleVariant* pKey2 = NULL,
              COleVariant* pKey3 = NULL );

   BOOL Seek (LPCTSTR lpszComparison,
              COleVariant* pKeyArray,
              WORD nKeys );

</PRE>When you call Seek, you pass one or more key values and a comparison
operator (&lt;, &lt;=, =, &gt;=, or &gt;). Seek searches through the current index and
locates the first record that satisfies the criteria specified by
lpszComparison and the key values passed to it. Once found, Seek returns
a nonzero value and makes that record current. If Seek fails to locate a
match, Seek returns zero and the current record is undefined.
<P>
If the current index is a multiple-field index, then the key values for
Seek must be in the same order as the fields in the index. In this case,
trailing key values can be omitted. You can leave off any number of key
values from the end of the list of key values but not from the beginning or
middle. If you do choose to leave off trailing key values, Microsoft
recommends that you use the &gt;= operator instead of the = operator. The
missing key values will be treated as NULL, which probably won't match the
values in your table.
<P>
NOTE: The Microsoft Jet database engine, and therefore the Seek method,
does not perform case-sensitive searches.
<P>
The easiest way to create an index object is from within Microsoft Access.
<P>
<P><h3>Steps to Create an Index Object</h3>
 

<OL><P><LI> Start Microsoft Access.

<P><LI> Open the database file (.mdb) to be targeted.

<P><LI> Open the target table in Design View.

<P><LI> Invoke the Index Dialog by choosing Indexes on the View menu.

<P><LI> Decide on a name for your index object, and then type it into
<P><PRE>    the Index Name field of the Index Dialog.
</PRE>
<P><LI> Type the field names of the fields you want tied to the index
<P><PRE>    object into the Field Name field of the Index Dialog.
</PRE><P>
</OL><h3>Sample Code</h3>
 
<P>
<PRE>   // Using the first version of Seek specifying the
   // first field in the index:

   void CMyDaoRecordset::FindCourse()
   {
      m_pSet-&gt;SetCurrentIndex( _T("PrimaryKey") );

      COleVariant varCourse ( _T("MATH202"), VT_BSTRT );

      if( m_pSet-&gt;Seek( _T( "=" ), &amp;varCourse ) )
      // then you have found the record and it is now
      // the current record

   // Using the first version of Seek specifying the
   // first two fields in the index:
   void CMyDaoRecordset::FindCourse()
   {
      m_pSet-&gt;SetCurrentIndex( _T("PrimaryKey") );

      COleVariant varCourse ( _T("MATH202"), VT_BSTRT );
      COleVariant varSection( _T( "2"     ), VT_BSTRT );

      if( m_pSet-&gt;Seek( _T( "=" ), &amp;varCourse, &amp;varSection ) )
      // then you have found the record and it is now
      // the current record

</PRE></OL>The first version of Seek may be used with up to three fields. If an index
has more than three fields and you need to specify more than three fields,
use the second version of Seek. An array of COleVariants will be passed.
<P>
<PRE>   // Using the second version of Seek, specifying the first four
   // fields of the index:

   void CMyDaoRecordset::FindCourse()
   {
      m_pSet-&gt;SetCurrentIndex( _T("Secondary") );

      COleVariant varCourse    ( _T( "MATH202"  ), VT_BSTRT );
      COleVariant varSection   ( _T( "2"        ), VT_BSTRT );
      COleVariant varInstructor( _T( "ROGERSN"  ), VT_BSTRT );
      COleVariant varRoomNo      ( _T( "KEN-12"   ), VT_BSTRT );

      // Now create an array and let the assignment
      // operator of COleVariant populate the array
      COleVariant rgVariant[4];

      rgVariant[0] = varCourse;
      rgVariant[1] = varSection;
      rgVariant[2] = varInstructor;
      rgVariant[3] = varRoomNo;

      if( m_pSet-&gt;Seek( _T( "=" ), &amp;rgVariant[0], 4 ) )
      // then you have found the record and it is now
      // the current record

</PRE><h2>REFERENCES</h2>
 
<P>
For more information, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VISUALC/Q140599.htm">Q140599</A></B>
   TITLE     : PRB: MFC DAO Functions Accepting COleVariant Strings
               May Fail
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbcode kbprg MfcDAO<BR>
Technology          : kbMfc<BR>
Version             : 4.0 4.1 4.2 4.2b 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  June 26, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

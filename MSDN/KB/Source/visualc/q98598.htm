

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use CFormView in SDI and MDI Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98598 ">
<META NAME="KBModify" CONTENT="1997/07/02">
<META NAME="KBCreate" CONTENT="1993/05/10">
<META NAME="Keywords" CONTENT="kbprg MfcUI kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  The CFormView class provides a convenient method to place controls into a view that is based on a dialog box template. The general procedure to use a CFormView is described in the documentation for the class and is illustrated in the VIEWEX and CHK...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIA,QABA,QAIB,QAY5,QAOE,QABO,QBVV,QA2O,QAJH,QAGI,QAB9,QADK,QAJQ,QBV8,QASR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use CFormView in SDI and MDI Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98598 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
  - Microsoft Visual C++ for Windows, versions 1.0, 1.5, 1.51, 1.52
  - Microsoft Visual C++ 32-bit edition, versions 1.0, 2.0, 2.1, 4.0
<P><PRE>    4.2, 5.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The CFormView class provides a convenient method to place controls
into a view that is based on a dialog box template. The general
procedure to use a CFormView is described in the documentation for the
class and is illustrated in the VIEWEX and CHKBOOK sample applications
provided with Microsoft Foundation Classes (MFC) versions 2.x and above.
However, these applications do not demonstrate making the initial size
of the frame window to be the same as the initial size of the form.
<P>
The following section lists the steps required to support creating a
single document interface (SDI) or multiple document interface (MDI)
application based on a CFormView, sizing the initial frame window
around the form, changing the style of the frame, and closing an MDI
document using a button in the form.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following steps describe how to create an AppWizard generated
application using the CFormView as the default view.

<OL><P><LI>Use the AppWizard to generate an SDI or MDI application skeleton,
   stopping at step six of the AppWizard.

<P><LI>At step 6 of the AppWizard, select the view class and specify CformView
   as the base class using the Base class combo box. This will insert a
   dialog template with the proper styles set for your project's resource
   file.

<P><LI>Override the OnUpdate() member function and call UpdateData() as
   documented in the CFormView documentation to update the member variables
   with the current document data and to perform dialog data exchange
   (DDX). NOTE: UpdateData is not virtual and calling the base class
   ensures that the derived class DoDataExchange is called through standard
   polymorphism. The CFormView documentation states to call, not override
   UpdateData.

<P><LI>If you would like to set the initial size of the form view, override
   the OnInitialUpdate() function. The text below provides additional
   information about this step, which is slightly different in an SDI or
   MDI application.
<P>
</OL><h3>Changing the Size of an SDI Main Frame Around a CFormView</h3>
 
<P>
To change the size of the main frame of an SDI application (that uses
CFormView as its view class) to be the appropriate size for the form
you designed in App Studio, override the OnInitialUpdate() function in
your class derived from CFormView, as follows:
<P>
<PRE>      void CMyFormView::OnInitialUpdate()
      {
         CFormView::OnInitialUpdate();
         GetParentFrame()-&gt;RecalcLayout();
         ResizeParentToFit(); // default argument is TRUE
      }

</PRE></OL>The ResizeParentToFit() function does not prevent the form from
changing size when the user changes the size of the application main
frame (scroll bars are added automatically if needed). To modify the
style of the frame window that is the parent of a form view, you can
override the PreCreateWindow() function in the CMainFrame class
generated by AppWizard. For example, to remove the WS_THICKFRAME style
and prevent the user from changing the size of the window, declare
PreCreateWindow() in MAINFRM.H and add the following code to
MAINFRM.CPP:
<P>
<PRE>      BOOL CMainFrame::PreCreateWindow(CREATESTRUCT &amp;cs)
      {
         cs.style &amp;= ~WS_THICKFRAME;
         return CFrameWnd::PreCreateWindow(cs);
      }

</PRE><h3>Changing the Size of an MDI Child Frame Around a CFormView</h3>
 
<P>
The process of changing the size of an MDI child frame is similar to
changing the size of a main frame for an SDI application, as explained
above. However, the RecalcLayout() call is not required.
<P>
To change the size of an MDI child frame around a form view, override
the OnInitialUpdate() function in your class derived from CFormView as
follows:
<P>
<PRE>      void CMDIFormView::OnInitialUpdate()
      {
         CFormView::OnInitialUpdate();
         ResizeParentToFit(); // Default argument is TRUE.
      }

</PRE>If the application overrides the default argument to the
ResizeParentToFit() function, essentially the same consequences occur
as for an SDI application, as explained above. In addition, the child
window may be too large for the enclosing MDI main frame or for the
entire screen.
<P>
To change the style of the MDI child frame (for example, to remove the
WS_THICKFRAME style so the user cannot change the size of the window),
derive an MDI child window class and override the PreCreateWindow
function as demonstrated in the SDI example above.
<P>
<P><h3>Closing an MDI Form with a Button</h3>
 
<P>
To create a button on a form that closes the document, use ClassWizard
to add a message handler for the BN_CLICKED message to the CFormView
class. Make sure that the buttons in CFormView do not have the default
IDOK or IDCANCEL identifiers. If they do, ClassWizard creates
incorrect entries in the message map and incorrect functions for the
buttons.
<P>
Once the message handler is in place, you can simulate the Close
command on the File menu with the following code:
<P>
<PRE>      void CMyForm::OnClickedButton1()
      {
         PostMessage(WM_COMMAND, ID_FILE_CLOSE);
      }

</PRE>This method to close a form prompts the user to save the file if the
IsModified() member function associated with the document returns
TRUE.
 

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Keywords            : kbprg MfcUI kbfasttip<BR>
Technology          : kbMfc<BR>
Version             : 1.0 1.5 2.0 2.1 2.2 4.0 5.0<BR>
Platform            : NT WINDOWS<BR>
Issue type          : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

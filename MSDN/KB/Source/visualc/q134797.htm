

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create Visual C++ Internal Makefile for MFC AFXDLL </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q134797">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1995/08/10">
<META NAME="Keywords" CONTENT="kb16bitonly MfcMisc">
<META NAME="KBArea" CONTENT="Support; KB; visualc">
<META NAME="Description" CONTENT="  An MFC extension DLL is a DLL containing classes and functions written to embellish the functionality of the MFC classes. The MFC OLE DLL (MFCO25x.DLL) and the MFC ODBC DLL (MFCD25x.DLL) are examples of MFC extension DLLs. In addition, the DLLHUSK ...">
<META NAME="Product" CONTENT="Visual C++">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABI,QBFY,QA56,QA55,QA01,QAJN,QBWS,QAPF,QA2Q,QBJZ,QBV8,QBHQ,QANX,QAG2,QAKR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create Visual C++ Internal Makefile for MFC AFXDLL</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q134797</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>The Microsoft Foundation Classes (MFC) included with:
   - Microsoft Visual C++ for Windows, versions 1.0, 1.50, 1.51,
<P><PRE>     1.52, 1.52b
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An MFC extension DLL is a DLL containing classes and functions written to
embellish the functionality of the MFC classes. The MFC OLE DLL
(MFCO25x.DLL) and the MFC ODBC DLL (MFCD25x.DLL) are examples of MFC
extension DLLs. In addition, the DLLHUSK sample shipped with Visual C++ is
specifically designed to illustrate how to create MFC extension DLLs (also
known as AFXDLLs). However, the project file for the DLLHUSK could only be
used as an external makefile within the Visual Workbench.
<P>
This article provides information to help you create internal makefiles for
the DLLHUSK sample, including the steps needed to create the AFXDLL
makefile and the DLL's calling application's makefile. The steps can be
used to create any AFXDLLs and their calling applications in general.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>How to Create an Internal Makefile for AFXDLL</h3>
 

<OL><P><LI>In the Visual Workbench, on the Project menu, click New to bring up the
   New Project dialog box.
<P>
   a. In the Project Name: field, click the Browse button, change to
<P><PRE>      a proper directory, and then give a project name.
</PRE>   b. In the Project Type: field, select "Windows dynamic link
<P><PRE>      library(DLL)" as the project type.
</PRE>   c. Clear the "Use Microsoft Foundation Classes" check box.
   d. Click OK to bring up the Edit-project.mak dialog box. Add the
<P><PRE>      source files (.cpp), the module definition file (.def), and the
      necessary resource file (.rc) to the project. Close the dialog box.
      For example, to build the Testdll1.dll for the DLLHUSK example,
      add the Testdll1.cpp, Testdll1.def, and Testdll1.rc files to the
      project.
</PRE>
<P><LI>In the Visual Workbench, on the Options menu, click Project to bring up
   the Project Options dialog box.
<P>
   a. Click the Compiler button to bring up the C/C++ Compiler Options
<P><PRE>      dialog box.
</PRE>   b. Select Memory Model under Category. Then change the memory model from
<P><PRE>      Medium to Large, and make sure "SS!=DS, DS NOT loaded on function
      entry" is selected.
</PRE>   c. Select Preprocessor under Category, and add the _AFXDLL preprocessor
<P><PRE>      identifier to "Symbols and Macros to Define."
</PRE>   d. Select Windows Prolog/Epilog under Category, and select the Generate
<P><PRE>      for __far Functions check box. Make sure the "Protected Mode DLL
      Functions" option is selected.
</PRE>   e. Click the OK button to save the settings, and exit the dialog box.
<P>
   In general, the compiler switches you must have when building the
   AFXDLLs are:
<P>
<P><PRE>      /ALw /D "_AFXDLL" /GD /GEf
</PRE><P>
   Add any other compiler switches used by the Visual Workbench.

<P><LI>In the Project Options dialog box, click the Linker button to bring up
   the Linker Options dialog box. Add the MFC DLL's import library at the
   HEAD of the Input Libraries list. For example, if you build the DLL in
   the debug mode with Visual C++ version 1.5x, you should add mfc250d, and
   in the release, you should add mfc250. Click OK to save the settings,
   and exit the dialog boxes.
<P>
   The library files you should have are:
<P>
   Mfc250(d).lib
   Oldnames.lib
   Libw.lib
   Ldllcew.lib

<P><LI>Build the DLL.

<P><LI>DLLHUSK's TESTDLL1 exports only one C interface function called
   InitTestDll1. This is done by placing an entry in the DLL's Exports
   section in the file Testdll1.def. See this file for an example. It
   may be a good idea to export C++ interfaces as well. This can be done
   by copying the C++ mangled names from the DLL's .map file to the .def
   file after the build, but before using implib. See "Inside Visual C++"
   by David J. Kruglinski (reference below) for more information.

<P><LI>After you successfully build the DLL, use the following command line to
   create an import library that is accessible to the calling project link
   step:
<P>
   implib import_lib_name.lib project_name.def
<P>
   NOTE: implib is located in your Msvc\Bin directory.
<P>
   You might want to make a batch file for this job. You can also add a
   tool to your Visual Workbench's Tools menu to accomplish this task
   instead of going to the command prompt every time. For information on
   how to modify the tools menu, please click Help in the Visual Workbench,
   then select "Visual Workbench" and "Modifying the Tools Menu."
<P>
   This step is essential. Even though the Visual Workbench generates an
   import library, that library is generated using the DLL instead of the
   the project's .def file. Therefore it is not usable in the calling
   project. This is because the AFXDLLs exports are done by ordinal
   without a string name in the resident or non-resident name table.
<P>
   To create the import library for the TESTDLL1.DLL in the DLLHUSK
   example, you can use this command:
<P>
   implib testdll1.lib testdll1.def

<P><LI>Copy the AFXDLL to a directory that is on the path or to the
   \Windows\System directory. Copy the import library to the calling
   project's directory or a directory that is on the LIB path.

<P><LI>For the DLLHUSK sample, repeat steps 1 through 7 for TESTDLL2.
<P>
</OL><h3>How to Create an Internal Makefile for an Application that Uses an AFXDLL</h3>
 

<OL><P><LI>In the Visual Workbench, on the Project menu, click New to bring up the
   New Project dialog box.
<P>
   a. In the Project Name: field, click the Browse button, change to
<P><PRE>      a proper directory, and then give a project name.
</PRE>   b. In the Project Type: field, select "Windows application (.EXE)"
<P><PRE>      as the project type.
</PRE>   c. Clear the "Use Microsoft Foundation Classes" check box.
   d. Click OK to bring up the Edit-project.mak dialog box. Add the
<P><PRE>      source files (.cpp), the module definition file (.def), and the
      necessary resource file (.rc) to the project. Close the dialog box.
      For example, to build the Dllhusk.exe in the DLLHUSK example,
      add the Dllhusk.cpp, Dllhusk.def, and dllhusk.rc files to the
      project.
</PRE>
<P><LI>In the Visual Workbench, on the Options menu, click Project to bring up
   the Project Options dialog box.
<P>
   a. Click the Compiler button to bring up the C/C++ Compiler Options
<P><PRE>      dialog box.
</PRE>   b. Select Memory Model under Category. Then change the memory model from
<P><PRE>      Medium to Large, and make sure SS=DS is selected.
</PRE>   c. Select Preprocessor under Category, and add the _AFXDLL preprocessor
<P><PRE>      identifier to "Symbols and Macros to Define."
</PRE>   d. Select Windows Prolog/Epilog under Category, and select the "Generate
<P><PRE>      for __far Functions" check box. Also make sure the "Protected Mode
      Application Functions" option is selected.
</PRE>   e. Click OK to save the settings, and exit the dialog box.
<P>
   In general, the compiler switches you must have when building the
   AFXDLL's calling projects are:
<P>
   /AL /D "_AFXDLL" /GA /GEf
<P>
   Add any other compiler switches used by the Visual Workbench.

<P><LI>In the Project Options dialog box, click the Linker button to bring up
   the Linker Options dialog box. Add MFC DLL's import library at the HEAD
   of the Input.Libraries list as you would for the DLL. Also add the
   import library of the AFXDLL just built in the "How to Create an
   Internal Makefile for AFXDLL" section of this article. Save the settings
   by clicking OK, and exit the dialog boxes.
<P>
   The library files you should have are:
<P>
   mfc250(d).lib
   afxdll_name.lib
   oldnames.lib
   libw.lib
   llibcew.lib

<P><LI>Build the application.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information on creating an MFC AFXDLL, please see MFC Technical
Note 33: DLL Version of MFC. For any compiler and linker switch
information, please see the Help menu, or "Command-Line Utilities User's
Guide" in Books Online.
<P>
For an additional AFXDLL sample, please see this book:
<P>
<PRE>   Inside Visual C++
   Second Edition
   Version 1.5
   By David J. Kruglinski
   From Microsoft Press
   ISBN 1-55615-661-8
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 250 250D 2.0 2.5 2.00 2.50 2.51 2.52 2.52b<BR>
Keywords          : kb16bitonly MfcMisc<BR>
Technology        : kbMfc<BR>
Version           : WIN3X:1.0,1.5,1.51,1.52,1.52b;<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

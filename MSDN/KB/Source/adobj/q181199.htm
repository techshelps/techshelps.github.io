

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Determine How ADO Will Bind Parameters </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181199">
<META NAME="KBModify" CONTENT="1998/02/18">
<META NAME="KBCreate" CONTENT="1998/02/17">
<META NAME="Keywords" CONTENT="adomisc">
<META NAME="KBArea" CONTENT="Support; KB; adobj">
<META NAME="Description" CONTENT="  Sometimes it is desirable to determine how ADO will bind stored procedure parameters. This article provides a Visual Basic application that returns the parameter name, type, size and direction from a chosen stored procedure.  MORE INFORMATION  The ...">
<META NAME="Product" CONTENT="adobj">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGX,QA2Q,QATX,QABM,QAUD,QANF,QAFF,QBWS,QAG2,QAHE,QBS0,QAB9,QBVR,QBG2,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Determine How ADO Will Bind Parameters</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 18, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181199</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>ActiveX Data Objects (ADO), versions 1.0, 1.5
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Sometimes it is desirable to determine how ADO will bind stored procedure
parameters. This article provides a Visual Basic application that returns
the parameter name, type, size and direction from a chosen stored
procedure.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following project has a list box and a command button on the start up
form. All results display in the Debug window. Note that code is supplied
to use either Microsoft SQL Server or Oracle databases. You must modify the
connection string and comment or uncomment the lines that create the SQL
string.
<P>
NOTE: You need to acquire and install the Microsoft Data Access Components
(MDAC) version 1.5 stack for the sample in this article. Please refer to
the article listed in REFERENCES section for information on installing MDAC
1.5. MDAC 1.5 contains ADO 1.5 and the Microsoft ODBC Driver for Oracle
version 2.0.
<P>

<OL><P><LI>Open a new project in Visual Basic 5.0. Form1 is created by default.

<P><LI>Place a list box and a command button control on the new form.

<P><LI>On the Project menu, select References and then select Microsoft ActiveX
   Data Objects 1.5. (This was installed from the MDAC 1.5 stack.)

<P><LI>Place the following code in the General Declarations section of Form1:
<P>
<P><PRE>      Dim Conn As New ADODB.Connection
      Dim Rs As ADODB.Recordset
</PRE><P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         Command1.Caption = "Start"
      End Sub

      Private Sub Command1_Click()
         Dim strSQL As String
         Form1.MousePointer = vbHourglass

         ' Adjust connection parameters for your server.
         'SQL Server Connection
         Conn.Open "MySQLServer", "sa", ""  'SQL Server Connection
         StrSQL = "SELECT Name FROM sysobjects WHERE Type = 'p'"

         'Oracle Connection
         'Conn.Open "MyOracle", "MyUid", "MyPassword"
         'strSQL = "SELECT Distinct Name FROM user_source"

         Set Rs = New ADODB.Recordset
         Rs.Open strSQL, Conn, adOpenStatic, adLockReadOnly

         Do While Not Rs.EOF
             List1.AddItem Rs(0)
             Rs.MoveNext
         Loop

         Form1.MousePointer = vbNormal

      End Sub

      Private Sub List1_Click()

         ListADOParameters (Trim(List1.Text))

      End Sub

      Sub ListADOParameters(strStoredProcedureName As String)

      Dim Cmd As New ADODB.Command
      Dim P As ADODB.Parameter
      Dim i As Integer

         Debug.Print "-------------Starting---------------"
         Set Cmd.ActiveConnection = Conn
         Cmd.CommandText = strStoredProcedureName
         Cmd.CommandType = adCmdStoredProc
         Cmd.Parameters.Refresh

         For i = 0 To Cmd.Parameters.Count - 1
            Set P = Cmd.Parameters(i)

            'Returns a string like this:
         'Parameter[0] is [INID] with ADO DataType adNumeric,
         'Size is 0, Direction is Input.

            Debug.Print "Parameter[" &amp; i &amp; "] is [" &amp; P.Name _
              &amp; "] with ADO DataType " _
              &amp; GetDataTypeEnum(P.Type) &amp; ", Size is " _
              &amp; P.Size &amp; ", Direction is " &amp; GetDirectionEnum(P.Direction)

         Next i

      End Sub

      Function GetDirectionEnum(lngDirectionEnum As Long) As String
      Dim strReturn As String
         Select Case lngDirectionEnum
            Case 1: strReturn = "Input"
            Case 2: strReturn = "Output"
            Case 3: strReturn = "Input Output"
            Case 4: strReturn = "Return Value"
         Case Else:
            strReturn = "Unknown DirectionEnum of " &amp; lngDirectionEnum _
              &amp; " found."
         End Select
         GetDirectionEnum = strReturn

      End Function

      Function GetDataTypeEnum(lngDataTypeEnum As Long) As String
      'Given ADO data-type constant, returns readable constant name.
      Dim strReturn As String
         Select Case lngDataTypeEnum
            Case 0: strReturn = "adEmpty"
            Case 16: strReturn = "adTinyInt"
            Case 2: strReturn = "adSmallInt"
            Case 3: strReturn = "adInteger"
            Case 20: strReturn = "adBigInt"
            Case 17: strReturn = "adUnsignedTinyInt"
            Case 18: strReturn = "adUnsignedSmallInt"
            Case 19: strReturn = "adUnsignedInt"
            Case 21: strReturn = "adUnsignedBigInt"
            Case 4: strReturn = "adSingle"
            Case 5: strReturn = "adDouble"
            Case 6: strReturn = "adCurrency"
            Case 14: strReturn = "adDecimal"
            Case 131: strReturn = "adNumeric"
            Case 11: strReturn = "adBoolean"
            Case 10: strReturn = "adError"
            Case 132: strReturn = "adUserDefined"
            Case 12: strReturn = "adVariant"
            Case 9: strReturn = "adIDispatch"
            Case 13: strReturn = "adIUnknown"
            Case 72: strReturn = "adGUID"
            Case 7: strReturn = "adDate"
            Case 133: strReturn = "adDBDate"
            Case 134: strReturn = "adDBTime"
            Case 135: strReturn = "adDBTimeStamp"
            Case 8: strReturn = "adBSTR"
            Case 129: strReturn = "adChar"
            Case 200: strReturn = "adVarChar"
            Case 201: strReturn = "adLongVarChar"
            Case 130: strReturn = "adWChar"
            Case 202: strReturn = "adVarWChar"
            Case 203: strReturn = "adLongVarWChar"
            Case 128: strReturn = "adBinary"
            Case 204: strReturn = "adVarBinary"
            Case 205: strReturn = "adLongVarBinary"
         Case Else:
            strReturn = "Unknown DataTypeEnum of " &amp; lngDataTypeEnum _
             &amp; " found."
         End Select
         GetDataTypeEnum = strReturn
      End Function

</PRE></OL>Run the project and select a stored procedure from the list. The results
appear in the Debug window.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q175018.htm">Q175018</A></B>
   TITLE     : HOWTO: Acquire and Install the Microsoft Oracle ODBC Driver
               v2.0

</PRE>(c) Microsoft Corporation 1998, All Rights Reserved.
Contributions by Ron Nelson, Microsoft Corporation
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: stored procedures ado binding parameters<BR>
Keywords          : adomisc<BR>
Version           : WINDOWS:1.0,1.5<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 18, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

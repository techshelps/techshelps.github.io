

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE: Adomts.exe Shows Using ADO w/ an MTS component via DCOM </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q182442">
<META NAME="KBModify" CONTENT="1998/03/17">
<META NAME="KBCreate" CONTENT="1998/03/13">
<META NAME="Keywords" CONTENT="kbfile">
<META NAME="KBArea" CONTENT="Support; KB; adobj">
<META NAME="Description" CONTENT="  Adomts.exe is a sample that demonstrates using ActiveX Data Objects (ADO) to pass a disconnected recordset from a Microsoft Transaction Server (MTS) hosted DLL to a remote client via a Distributed Component Object Model (DCOM).  This article demons...">
<META NAME="Product" CONTENT="adobj">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QARL,QAY2,QAH6,QBWS,QAJG,QAH7,QAD7,QDK6,QAPN,QAPF,QBS0,QAI5,QAJN,QA8O,QA3P V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FILE: Adomts.exe Shows Using ADO w/ an MTS component via DCOM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q182442</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Professional, and Enterprise
   Editions for Windows, version 5.0
<LI>ActiveX Data Objects (ADO)
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Adomts.exe is a sample that demonstrates using ActiveX Data Objects (ADO)
to pass a disconnected recordset from a Microsoft Transaction Server (MTS)
hosted DLL to a remote client via a Distributed Component Object Model
(DCOM).
<P>
This article demonstrates how to use a lightweight Standard .exe client to
connect to a MTS hosted DLL and retrieve an ADOR recordset via DCOM. This
sample does not use Remote Data Service (RDS) to create the business
objects.
<P>
The code included here demonstrates using both the Connection.Execute and
the RecordSet.Open methods to create the ADODB recordset on the server and
then passes a disconnected ADOR recordset back to the client. This
eliminates the need for the ADODB DLL's to reside on the client.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Adomts.exe">Adomts.exe</A> <I>(size: 40589 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>Visual Basic ADO / MTS - DCOM Sample Readme.txt File</h2>
 
<P>
This sample demonstrates using ADO to pass a disconnected recordset from an
MTS hosted DLL to a remote client via DCOM.
<P>
The file mentioned here is a self-extracting zip file that creates a folder
named ADOMTS with separate client and server subfolders. The source code
for each project can be found in the project's corresponding folder.
<P>
<P><h3>Steps to Run the Sample File</h3>
 

<OL><P><LI>The server folder contains the ActiveX DLL project for use with
   Microsoft Transaction Server (MTS) 1.1 or greater. Open the server
   project file Adomts.vbp.

<P><LI>Change the &lt;yourservername&gt; placeholder in both connect strings to your
   SQL server's name.

<P><LI>Compile the DLL and then exit the project.

<P><LI>Add the DLL to a package in MTS using the MTS Explorer or Microsoft
   Management Console.

<P><LI>Disable the authorization checking for this sample.

<P><LI>The client folder contains a standard .exe client project that makes
   remote calls to the MTS component. Open the client project
   DcomADOClient.vbp.

<P><LI>Set a reference to the server component in the projects references. Run
   the client project.

<P><LI>The client demonstrates two different ways to handle the ADO connection.
   The first uses the Connection.Execute method while the second uses the
   RecordSet.Open method. Click the "GetAdoRecordset Con.Execute" button or
   the "GetAdoRecordset Rs.Open" button. This retrieves the disconnected
   ADO recordset from the server.

<P><LI>Click the "Fill List from ADO Recordset" command button. This populates
   the list box, using the ADO recordset, with all the Authors names from
   the pubs database.

<P><LI>Click the "Clear List" command button and then the "Fill List from ADO
   Recordset" button again. Note that the recordset is still intact and
   resides on the client machine. Also note that the MTS component has
   disconnected and is no longer needed to manipulate the ADO recordset.
<P>
<P>
</OL><h3>How Microsoft Transaction Server (MTS) Handles DCOM</h3>
 

<OL><P><LI>Move the client to another computer.

<P><LI>In the MTS Microsoft Management Console, find your package under
   "Packages Installed", right-click the package name and then select
   export.

<P><LI>Move the .exe that was built by selecting export to the client.

<P><LI>Double-click the exported .exe. This registers the MTS component.

<P><LI>Now, run the client project. If you want to verify that your client is
   accessing the component on the server, go to the server and open the
   Microsoft Management Console. Drill down to the components section of
   the package you just installed. Run the client program again and watch
   for the ball beside the component name to start spinning.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: RDS remote oleserver<BR>
Keywords          : kbfile<BR>
Version           : WINDOWS:5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

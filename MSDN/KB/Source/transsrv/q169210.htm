

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Tips for Using Database Components with MTS </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q169210">
<META NAME="KBModify" CONTENT="1997/05/30">
<META NAME="KBCreate" CONTENT="1997/05/28">
<META NAME="Keywords" CONTENT="TSrvProg">
<META NAME="KBArea" CONTENT="Support; KB; transsrv">
<META NAME="Description" CONTENT="  This article presents a list of do's and don'ts when creating COM objects to be used by Microsoft Transaction Server that utilize database technology.  MORE INFORMATION  The following list is general across development environments used to create t...">
<META NAME="Product" CONTENT="transsrv">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAZV,QAGI,QAB5,QAGU,QBG2,QAXB,QAI5,QAIM,QAH6,QBSO,QBXJ,QAU3,QARL V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Tips for Using Database Components with MTS</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  May 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q169210</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Transaction Server 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article presents a list of do's and don'ts when creating COM objects
to be used by Microsoft Transaction Server that utilize database
technology.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following list is general across development environments used to
create the COM objects, with product specific notes as applicable.

<UL><LI>Don't put anything in the C++ constructor / destructor. The Object
   Context is not available during object construction and it is impossible
   to signal errors from a constructor or destructor. Implement
   IObjectControl/ObjectControl and use the Activate/Deactivate methods to
   do initialization.

<LI>Do create your COM object as an in-process server, preferably with dual
   interface.

<LI>Don't turn connection pooling off.

<LI>Don't use an open database cursor within the COM object that persists
   between client method calls into the object. When the client invokes a
   method in the object and the method opens a recordset, the recordset
   should be closed before the method returns.

<LI>Do beware of cursors. Opening them in transactions can have locking
   implications. Handing them to clients can have further implications. Use
   them cautiously and use some of the new technologies like ADO/RDO batch
   cursors that can be disassociated or the ADC components.

<LI>Do use forward-only, read-only recordsets within the COM Object. If you
   need to update the data, use SQL syntax (INSERT, UPDATE).

<LI>Since method calls are across DCOM, do everything you can to reduce the
   number of network round trips. Keep your methods large. This typically
   means method calls with lots of parameters that perform multiple tasks
   on the server.

<LI>Don't keep any state information. MTS may destroy and re-create your
   component at any time. State can also have severe scalability
   implications. If you want to store state or share it across objects use
   the Shared Property Manager

<LI>Do pass arguments ByValue whernever possible, this helps minimize
   network trips. Marshalling object references can be expensive.

<LI>Do Minimize actual Resource Manager transaction duration. Long
   transactions can cause concurrency issues in the database. Note that
   although MTS creates a DTC transaction upon object creation, this
   transaction has no real penalty until work is performed by the RM.

<LI>Do acquire resources as late a possible and release them as soon as
   possible. Others probably want them too.

<LI>Don't implement resource pooling yourself. Use the MTS programming
   model. It might be tempting to implement something to gain a little
   performance or add a feature now, but there is no guarantee that it will
   not be broken in the future. Grow with MTS.

<LI>Keep resource allocation generic so that it can be pooled. ODBC
   connections are a good example. It is tempting to open connections as
   the calling user for easy auditing in the database, but those
   connections cannot be reused except by that user. This can be a
   performance hit. This can be worked around by using ISecurityProperty to
   get SIDs/user names and sending to the database as needed.

<LI>Do place security at the door (roles on interfaces and components) and
   audit the rest of the way as needed.
</UL> 
<PRE>Keywords          : TSrvProg
Version           : 1.0
Platform          : NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  May 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

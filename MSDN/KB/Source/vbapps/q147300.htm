

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: How to Control Built-In and Custom Menus with Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147300">
<META NAME="KBModify" CONTENT="1997/12/01">
<META NAME="KBCreate" CONTENT="1996/02/22">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  You can use Microsoft Visual Basic for Applications to manipulate the  built-in menus in Microsoft Excel or to replace them with custom menus  designed by the user. This includes shortcut menus. This article describes  how to do so.  MORE INFORMATI...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVX,QAVW,QAF0,QAFF,QDKR,QBVP,QAEF,QBS0,QBWR,QAMB,QANS,QAVI,QBWS,QDKD,QBCT V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: How to Control Built-In and Custom Menus with Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147300</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for the Macintosh, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can use Microsoft Visual Basic for Applications to manipulate the 
built-in menus in Microsoft Excel or to replace them with custom menus 
designed by the user. This includes shortcut menus. This article describes 
how to do so.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without 
warranty either expressed or implied, including, but not limited to, the 
implied warranties of merchantability and/or fitness for a particular 
purpose. This article assumes that you are familiar with the programming 
language being demonstrated and the tools used to create and debug 
procedures. Microsoft support engineers can help explain the functionality 
of a particular procedure, but they will not modify these examples to 
provide added functionality or construct procedures to meet your specific 
needs. If you have limited programming experience, you may want to contact 
the Microsoft fee-based consulting line at (800) 936-5200. For more 
information about the support options available from Microsoft, please see 
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Adding a Custom Menu</h3>
 
<P>
The following four Subroutines demonstrate how to add a menu called "Test"
to the menu bar for all sheets in the current workbook.
<P>
NOTE: Type an ampersand (&amp;) before the character you want to use as the
access key. To create a separator bar, type a hyphen (-). In this example,
when the menu is displayed, the letter "T" in "Test" will be underlined.
You can use a letter for an access key only once per menu (that is, once
you've used "T," you cannot use it again in that menu).
<P>
<PRE>   Sub Add_Test_Menu()

   ' Searches through all the menus in the current workbook and deletes the
   ' menu "Test" if it already exists.

      For Each MB In MenuBars
         For Each MN In MB.Menus
            If MN.Caption = "&amp;Test" Then
               MB.Menus("Test").Delete
            Else
            End If
         Next MN
      Next MB

   ' Cycles through all the menus in the current workbook.
      For Each MB In MenuBars

   ' Adds a top level menu called "Test" to each menu bar.
         MB.Menus.Add Caption:="&amp;Test"

   ' Adds a submenu called "Test 1" under the menu "Test."
         MB.Menus("Test").MenuItems.AddMenu Caption:="&amp;Test 1"

   ' Adds menu items "Test 2," "Test 3," and "Delete This Menu," under the
   ' submenu "Test 1" and assigns the macros that should be run when each 
   ' is selected.
         MB.Menus("Test").MenuItems("Test 1").MenuItems.Add Caption:= _
            "Test 2", OnAction:="Test2"
         MB.Menus("Test").MenuItems("Test 1").MenuItems.Add Caption:= _
            "Test 3", OnAction:="Test3"
         MB.Menus("Test").MenuItems.Add Caption:="Delete This Menu", _
            OnAction:="Delete_Menu"
      Next
   End Sub

   ' This subroutine is run by submenu "Test 2."
   Sub Test2()
      MsgBox "You Chose Test 2"
   End Sub

   ' This subroutine is run by submenu "Test 3."
   Sub Test3()
      MsgBox "You Chose Test 3"
   End Sub

   ' This subroutine is run by submenu "Delete This Menu."
   Sub Delete_Menu()
      For Each MB In MenuBars
         MB.Menus("Test").Delete
      Next
   End Sub

</PRE><h3>Replacing Built-In Menus With Custom Menus</h3>
 
<P>
By using Visual Basic for Applications, it is also possible to build your
own complete menu bar and use it, instead of the built-in menu bars. The
next five subroutines show an example of how to do this:
<P>
<PRE>   Sub New_Menu_Bar()

      ' Creates a menu bar named "Test."
      MenuBars.Add "Test"

      ' Adds menu items "Files" and "Edit" to menu bar "Test."
      MenuBars("Test").Menus.Add Caption:="&amp;Files"
      MenuBars("Test").Menus.Add Caption:="Edit"

      ' Adds menu items "New," "Open," and "Save" under the "Files menu 
      ' item.
      MenuBars("Test").Menus("&amp;Files").MenuItems.Add Caption:="New", _
         OnAction:="Menu_New"
      MenuBars("Test").Menus("&amp;Files").MenuItems.Add Caption:="Open", _
         OnAction:="Menu_Open"
      MenuBars("Test").Menus("&amp;Files").MenuItems.Add Caption:="Save", _
         OnAction:="Menu_Save"

      ' Adds menu item "Restore Original" under the "Edit" menu item.
      MenuBars("Test").Menus("Edit").MenuItems.Add Caption:= _
         "Restore Original", OnAction:="Restore_Original_Menu"

      ' Displays the "Test" menu bar.
      MenuBars("Test").Activate

   End Sub

   ' This subroutine is run by submenu "New."
   Sub Menu_New()
      MsgBox "Your own code for the New menu option would go here."
   End Sub

   ' This subroutine is run by submenu "Open."
   Sub Menu_Open()
      MsgBox "Your own code for the Open menu option would go here."
   End Sub

   ' This subroutine is run by submenu "Save."
   Sub Menu_Save()
      MsgBox "Your own code for the Save menu option would go here."
   End Sub

   ' This subroutine is run by submenu "Restore Original."
   Sub Restore_Original_Menu()

   ' NOTE: In the next line, use xlWorksheet, xlModule, or xlChart 
   ' depending on what type of sheet is active when this subroutine is run.

      MenuBars(xlModule).Activate

   ' Deletes the custom menu bar "Test."
      MenuBars("Test").Delete

   End Sub

</PRE>Adding a Custom Menu Item to a Shortcut Menu
 
<P>
By using Visual Basic for Applications, you can also customize the
Microsoft Excel built-in shortcut menus, the menus displayed by using the
right mouse button to click an object in Windows or by holding down the
CTRL key and clicking an object on a Macintosh. An example would be a cell.
The next five subroutines show an example of how to do this.
<P>
<PRE>   Sub Add_To_ShortCut()

      ' Defines the object SCM to be the built in Excel worksheet shortcut
      ' menu.
      Set SCM = Application.ShortcutMenus(xlWorksheetCell)

      ' Adds a separator bar to the worksheet shortcut menu.
      SCM.MenuItems.Add Caption:="-"

      ' Adds menu "My Menu" to the worksheet shortcut menu.
      SCM.MenuItems.AddMenu "My Menu"

      ' Adds "Test 1," "Test 2,"and "Test 3" as submenus of "My Menu."
      SCM.MenuItems("My Menu").MenuItems.Add Caption:="Test 1", _
         OnAction:="Test_1"
      SCM.MenuItems("My Menu").MenuItems.Add Caption:="Test 2", _
         OnAction:="Test_2"
      SCM.MenuItems("My Menu").MenuItems.Add Caption:="Test 3", _
         OnAction:="Test_3"

      ' Adds another separator bar to the worksheet shortcut menu.
      SCM.MenuItems.Add Caption:="-"

      ' Adds "Remove Menu" to the worksheet shortcut menu.
      SCM.MenuItems.Add Caption:="Remove My Menu", OnAction:="Remove_Menu"

   End Sub

   ' This subroutine is run by the "Test 1" menu.
   Sub Test_1()
      MsgBox "This would be your macro for Test 1."
   End Sub

   ' This subroutine is run by the "Test 2" menu.
   Sub Test_2()
      MsgBox "This would be your macro for Test 2."
   End Sub

   ' This subroutine is run by the "Test 3" menu.
   Sub Test_3()
      MsgBox "This would be your macro for Test 3."
   End Sub

   ' This subroutine is run by the "Remove Menu" menu.
   Sub Remove_Menu()

      ' Defines the object SCM to be the built in Excel worksheet shortcut
      ' menu.
      Set SCM = Application.ShortcutMenus(xlWorksheetCell)

      ' Deletes the third separator bar down from the top of the worksheet
      ' shortcut menu. The number of dashes corresponds to number of 
      ' separators from the top you wish to use. If you have not added any 
      ' other custom menus, this should be the first one you added with the
      ' "Add_To_ShortCut" subroutine.
      SCM.MenuItems("---").Delete

      ' Deletes "My Menu."
      SCM.MenuItems("My Menu").Delete

      ' Deletes the third separator bar down from the top of the worksheet
      ' shortcut menu. Even though you added two separators, when you 
      ' deleted the third one, the fourth moved up into its place, so we 
      ' are deleting the third one again.

      SCM.MenuItems("---").Delete

      ' Deletes "Remove Menu".
      SCM.MenuItems("Remove My Menu").Delete

   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
"Visual Basic User's Guide," version 5.0, Chapter 12, pp. 241-256
<P>
For additional information on working with menus in Microsoft Excel, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q137133.htm">Q137133</A></B>
   TITLE     : WE1182: Customizing Menu Bars, Menus, and Menu Items

</PRE>For more information about creating menus in Microsoft Excel 7.0, click
Answer Wizard in Help and type:
<P>
<PRE>   creating new menus and submenus
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 7.00 visual basic customize<BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS:5.0,7.0; MACINTOSH:5.0<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Call LoadModule() API Function from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q83350 ">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1992/04/09">
<META NAME="Keywords" CONTENT="kbprg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article demonstrates how to call the Windows LoadModule() API function from a Visual Basic program. The LoadModule() API function loads and executes a Windows program or creates a new instance of an existing Windows program. The code example b...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QBQU,QAGI,QDL9,QBWQ,QBWO,QBWN,QAY5,QAB9,QBV8,QBXT,QA5V,QA5F,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Call LoadModule() API Function from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q83350 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, versions 2.0 and 3.0
<LI>Microsoft Visual Basic programming system for Windows, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to call the Windows LoadModule() API function
from a Visual Basic program. The LoadModule() API function loads and
executes a Windows program or creates a new instance of an existing Windows
program. The code example below shows an example of calling WINVER.EXE with
the LoadModule() function call, but you can change it to any executable
file.
<P>
NOTE: The Shell function provided in Visual Basic provides a functionality
similar to and simpler than the technique explained in this article.
<P>
NOTE: Only 16-bit implementations of VBA support the sample code in this
article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The LoadModule() API function call has only two parameters, but the second
parameter is a pointer to a structure with an embedded structure in it.
<P>
The two parameters are as follows:
<P>
<PRE>lpModuleName      Points to a null terminated string that contains
                  the filename of the application to be run.

</PRE>lpParameterBlock  Points to a data structure consisting of four fields
<PRE>                  that define a parameter block. The data structure
                  consists of the following fields:

      wEnvSeg:    Specifies the segment address of the environment
                  under which the module is to run; 0 indicates that
                  the Windows environment is to be copied.

     lpCmdLine:   Points to a NULL terminated character string that
                  contains a correctly formed command line. This
                  string must not exceed 120 bytes in length.

     lpCmdShow:   Points to a data structure containing two WORD
                  length values. The first value must be set to 2, and
                  the second value in this example will be set to 5.

     dwReserved:  Reserved and must be NULL.

</PRE><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start Visual Basic or from the File menu, choose New Project (ALT, F, N)
   if Visual Basic is already running. Form1 is created by default.

<P><LI>Add the following code to the GLOBAL.BAS file (or any module in Visual
   basic version 2.0):
<P>
   Type CmdShow
<PRE>      fp As Integer   ' first parameter
      sp As Integer   ' second parameter
   End Type

   Type lpParameterBlock
      wEnvSeg As Integer
      lpCmdLine As Long      ' This line modified 6/25/93
      lpCmdShow As Long      ' This line modified 5/27/92
      dwReserved As Long
   End Type

   Declare Function lstrcpy Lib "Kernel" (lp1 As Any, lp2 As Any) As Long
   ' Enter the following Declare statement on one, single line
   Declare Function LoadModule% Lib "kernel" (ByVal lpModuleName As String,
      lpParameterBlock As Any)

</PRE><P><LI>Add a CommandButton to Form1, and add the following code to the
   Command1_Click procedure:
<P>
<PRE>   Sub Command1_Click ()

      Dim cs As CmdShow
      Dim pb As lpParameterBlock
      ' assign values to the CmdShow structure
      pb.lpCmdShow = lstrcpy(cs, cs)           ' Line added 5/27/92
      cs.fp = 2
      cs.sp = 5
      ' assign values to the lpParameterBlock structure
      pb.wEnvSeg = 0
      ' append null to end of path
      ' Following two lines added 6/25/93 replacing previous line:
      lpCmdLine$ = "c:\windows\winver.exe" + Chr$(0)
      pb.lpCmdLine = lstrcpy(ByVal lpCmdLine$, ByVal lpCmdLine$)
      pb.dwReserved = 0&amp;
      ' make sure to append null to end of .EXE name
      m% = LoadModule%("winver.exe" + Chr$(0), pb)

   End Sub

</PRE><P><LI>Save the program and run it.
<P>
   When you run the program and press the command button, the WinVer
   program will run as it would with the Run command on the Windows
   Program Manager File menu.
</OL> 
<PRE>Keywords          : kbprg kbfasttip
Version           : WINDOWS:2.0 3.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Limit Number of Characters to Size of Text Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q152475">
<META NAME="KBModify" CONTENT="1997/10/24">
<META NAME="KBCreate" CONTENT="1996/06/14">
<META NAME="Keywords" CONTENT="kbusage FmsHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to limit the amount of text typed into a text box so that the width of the text does not exceed the width of the text box.  This article assume...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBT6,QA1S,QBV4,QA4Q,QATX,QADF,QDN9,QAMB,QAHP,QANF,QBS0,QAB9,QAE5,QAY5,QAFF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Limit Number of Characters to Size of Text Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q152475</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to limit the amount of text typed into a text
box so that the width of the text does not exceed the width of the text
box.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
NOTE: This article explains a technique demonstrated in the sample
files, FrmSampl.exe (for Microsoft Access for Windows 95 version 7.0)
and FrmSmp97.exe (for Microsoft Access 97). For information about how
to obtain these sample files, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q150895.htm">Q150895</A></B>
   TITLE     : ACC95: Microsoft Access Sample Forms Available on MSL

   ARTICLE-ID: <B><A HREF="../ACCESS/Q175066.htm">Q175066</A></B>
   TITLE     : ACC97: Microsoft Access 97 Sample Forms Available on MSL

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The following information includes a Visual Basic for Applications
procedure, LimitTextToControlWidth, that can be called from the KeyPress
event of a text box to limit the amount of text entered so that the sum of
the width of all characters in the text does not exceed the width of the
text box.
<P>
This procedure is ideal for developers who want to use a non-
proportionally spaced font to print text into a fixed location on a pre-
printed form. The LimitTextToControlWidth procedure ensures that a user
will not be able to type more text than can fit in the defined area on the
form.
<P>
There are a number of factors that affect the width of text. The larger
the font size, the fewer the characters that you will be able to type. The
selection of font also affects the width of characters in the text.
Characters in a non-proportionally spaced font, such as Arial or Times
New Roman, have different widths. The letter "i" is narrower in width
than the letter "X." In addition, for the same font size, the letter
"i" in one font may have a different width in another font. The "i" in
Arial font is much narrower than the "i" in Courier New font.
<P>
The following steps provide both 16-bit and 32-bit versions of the
procedure, followed by an example of how to apply the procedure to
controls on a form.
<P>
NOTE: The following code uses the GetTextExtentPoint Windows application
programming interface (API) function. This API function can only be called
from the control that has focus on a Microsoft Access form.
<P>
<P><h3>32 Bit Code - Microsoft Access 97 and Microsoft Access 7.0</h3>
 

<OL><P><LI>Create a new module and type the following in the Declarations section:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Const LOGPIXELSX = 88
      Const LOGPIXELSY = 90
      Const TWIPSPERINCH = 1440
</PRE><P>
<P><PRE>      Type Size
<PRE></PRE>         cx As Long
         cy As Long
      End Type

      Declare Function GetDC Lib "user32" (ByVal hWnd As Long) As Long
      Declare Function GetDeviceCaps Lib "gdi32" (ByVal hDC As Long, _
         ByVal nIndex As Long) As Long
      Declare Function GetFocus Lib "user32" () As Long
      Declare Function GetTextExtentPoint Lib "gdi32" Alias _
         "GetTextExtentPointA" (ByVal hDC As Long, ByVal lpsz As String, _
         ByVal cbString As Long, lpSIZE As Size) As Long
      Declare Function ReleaseDC Lib "user32" (ByVal hWnd As Long, _
         ByVal hDC As Long) As Long

</PRE><P><LI>Type the following procedures:
<P>
<PRE>      Sub ConvertPixelsToTwips(X As Long, Y As Long)
         Dim hDC As Long, hWnd As Long, RetVal As Long
         Dim XPIXELSPERINCH As Long, YPIXELSPERINCH As Long

         '' Retrieve the current number of pixels per inch, which is
         '' resolution-dependent.
         hDC = GetDC(0)
         XPIXELSPERINCH = GetDeviceCaps(hDC, LOGPIXELSX)
         YPIXELSPERINCH = GetDeviceCaps(hDC, LOGPIXELSY)
         RetVal = ReleaseDC(0, hDC)

         '' Compute and return the measurements in twips.
         X = (X / XPIXELSPERINCH) * TWIPSPERINCH
         Y = (Y / YPIXELSPERINCH) * TWIPSPERINCH
      End Sub

      Sub LimitTextToControlWidth(KeyAscii As Integer)
         Dim AC As Control
         Dim Txt As String
         Dim TxtWidth As Long, SpaceWidth As Long
         Dim hWnd As Long, hDC As Long
         Dim lpSIZE As Size
         Dim RetVal As Long

         '' Exit if a non-printable character is typed.
         If KeyAscii &lt; 32 Then Exit Sub

         '' Record active control.
         Set AC = Screen.ActiveControl

         '' Get the control text.
         Txt = AC.Text &amp; ""

         '' Append typed character into the text.
         If KeyAscii &gt; 32 Then
            Txt = Left(Txt, AC.SelStart)
            Txt = Txt &amp; Chr$(KeyAscii)
            Txt = Txt &amp; Mid(Txt, AC.SelStart + 1 + AC.SelLength)
         End If

         hWnd = GetFocus()
         hDC = GetDC(hWnd)

         '' Compute the width of the text.
         RetVal = GetTextExtentPoint(hDC, Txt, Len(Txt), lpSIZE)
         ConvertPixelsToTwips lpSIZE.cx, lpSIZE.cy
         TxtWidth = lpSIZE.cx

         '' Compute width of a space.
         RetVal = GetTextExtentPoint(hDC, " ", 1, lpSIZE)
         ConvertPixelsToTwips lpSIZE.cx, lpSIZE.cy
         SpaceWidth = lpSIZE.cx

         '' Are there trailing spaces to contend with?
         If AC.SelStart + 1 &gt; Len(Txt) Then
            '' Add number of spaces * SpaceWidth to width of string.
            TxtWidth = TxtWidth + ((AC.SelStart + 1 - Len(Txt)) *  _
               SpaceWidth)
         End If

         If TxtWidth + (SpaceWidth / 2) &gt; AC.Width Then
            Beep
            KeyAscii = 0
         End If

      End Sub

</PRE></OL><h3>16-Bit Code - Microsoft Access 2.0</h3>
 
<P>
NOTE: In the following sample code, an underscore (_) at the end of a
line is used as a line-continuation character. Remove the underscore from
the end of the line when re-creating this code in Access Basic,

<OL><P><LI>Create a new module and type the following in the Declarations section:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Const LOGPIXELSX = 88
      Const LOGPIXELSY = 90
      Const TWIPSPERINCH = 1440
</PRE><P>
<P><PRE>      Type SIZE
<PRE></PRE>         cx As Integer
         cy As Integer
      End Type

      Declare Function GetDC Lib "User" (ByVal hWnd As Integer) As Integer
      Declare Function GetDeviceCaps Lib "GDI" (ByVal hDC As Integer, _
         ByVal nIndex As Integer) As Integer
      Declare Function GetTextExtentPoint Lib "GDI" (ByVal hDC As _
           Integer, ByVal lpszString As String, ByVal cbString As _
           Integer, lpSIZE As SIZE) As Integer
      Declare Function GetFocus Lib "User" () As Integer
      Declare Function ReleaseDC Lib "User" (ByVal hWnd As Integer, _
         ByVal hDC As Integer) As Integer

</PRE><P><LI>Type the following procedures:
<P>
<PRE>      Sub LimitTextToControlWidth (KeyAscii)
         Dim AC As Control
         Dim Txt As String
         Dim TxtWidth As Integer, SpaceWidth As Integer
         Dim hWnd As Integer, hDC As Integer
         Dim lpSIZE As SIZE
         Dim RetVal As Integer

         '' Exit if a non-printable character is typed.
         If KeyAscii &lt; 32 Then Exit Sub

         '' Record active control.
         Set AC = Screen.ActiveControl

         '' Get the control text.
         Txt = AC.Text &amp; ""

         '' Append typed character into the text.
         If KeyAscii &gt; 32 Then
            Txt = Left(Txt, AC.SelStart)
            Txt = Txt &amp; Chr$(KeyAscii)
            Txt = Txt &amp; Mid(Txt, AC.SelStart + 1 + AC.SelLength)
         End If

         hWnd = GetFocus()
         hDC = GetDC(hWnd)

         '' Compute the width of the text.
         RetVal = GetTextExtentPoint(hDC, Txt, Len(Txt), lpSIZE)
         ConvertPixelsToTwips lpSIZE.cx, lpSIZE.cy
         TxtWidth = lpSIZE.cx

         '' Compute width of a space.
         RetVal = GetTextExtentPoint(hDC, " ", 1, lpSIZE)
         ConvertPixelsToTwips lpSIZE.cx, lpSIZE.cy
         SpaceWidth = lpSIZE.cx

         '' Are there trailing spaces to contend with?
         If AC.SelStart + 1 &gt; Len(Txt) Then
            '' Add number of spaces * SpaceWidth to width of string.
            TxtWidth = TxtWidth + ((AC.SelStart + 1 - Len(Txt)) * _
               SpaceWidth)
         End If

         If TxtWidth + (SpaceWidth / 2) &gt; AC.Width Then
            Beep
            KeyAscii = 0
         End If

      End Sub

      Sub ConvertPixelsToTwips (X As Integer, Y As Integer)
         Dim hDC As Integer, hWnd As Integer, RetVal As Integer
         Dim XPIXELSPERINCH As Integer, YPIXELSPERINCH As Integer

         '' Retrieve the current number of pixels per inch, which is
         '' resolution-dependent.
         hDC = GetDC(0)
         XPIXELSPERINCH = GetDeviceCaps(hDC, LOGPIXELSX)
         YPIXELSPERINCH = GetDeviceCaps(hDC, LOGPIXELSY)
         RetVal = ReleaseDC(0, hDC)

         '' Compute and return the measurements in twips.
         X = (X / XPIXELSPERINCH) * TWIPSPERINCH
         Y = (Y / YPIXELSPERINCH) * TWIPSPERINCH
      End Sub

</PRE></OL><h3>How to use the LimitTextToControlWidth Procedure</h3>
 

<OL><P><LI>Create a new, blank form not based on any table or query.

<P><LI>Place 3 text boxes on the form with the following properties:
<P>
<P><PRE>      Name: One
      Left: 1"
      Top: .5"
      Width: 1"
      Height: 0.1667"
      FontName: Arial
      FontSize: 12
</PRE><P>
<P><PRE>      Name: Two
      Left: 1"
      Top: 1"
      Width: 1"
      Height: 0.1667"
      FontName: Arial
      FontSize: 8
</PRE><P>
<P><PRE>      Name: Three
      Left: 1"
      Top: 1.5"
      Width: 1"
      Height: 0.3743"
      FontName: Arial
      FontSize: 24
</PRE>
<P><LI>Call the LimitTextToControlWidth procedure from the KeyPress event of
   each text box above, for example:
<P>
<PRE>      Sub One_KeyPress(KeyAscii As Integer)
         LimitTextToControlWidth KeyAscii
      End Sub

</PRE><P><LI>View the form and try typing the following text in each text box:
<P>
<P><PRE>       This is a test of the emergency broadcast system
</PRE><P>
   Note that the result appears as follows:
<P>
<PRE>      Text box     Text allowed to type
      ---------------------------------
      One          This is a test
      Two          This is a test of the
      Three        This is
</PRE></OL> 
<PRE>Keywords          : kbusage FmsHowTo
Version           : 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

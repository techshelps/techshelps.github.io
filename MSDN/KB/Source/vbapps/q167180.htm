

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: Using the New Keyword to Create Instances of a UserForm </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167180">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/04/21">
<META NAME="Keywords" CONTENT="kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel 97, you can use the New keyword to create multiple instances of a particular class. This article includes sample Visual Basic for Applications code that uses the New keyword to create multiple instances of a UserForm. The new ins...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBS0,QBWS,QAMB,QAGB,QBVR,QAPN,QAFF,QBVP,QAB9,QA5D,QBV8,QAMN,QAJD,QAUD P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: Using the New Keyword to Create Instances of a UserForm</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167180</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel 97, you can use the New keyword to create multiple
instances of a particular class. This article includes sample Visual Basic
for Applications code that uses the New keyword to create multiple
instances of a UserForm. The new instances of the UserForm are copies of
the original UserForm and can be controlled independently of the original
UserForm.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h3>Creating the Sample UserForm</h3>
 
<P>
To create the sample UserForm, do the following:

<OL><P><LI>Close all open workbooks, and then create a new workbook.

<P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>On the Insert menu, click UserForm.

<P><LI>Add a ListBox control to the lower-left portion of the UserForm.

<P><LI>Add a Label control above the ListBox control and change the Caption
   property to "Click an item" (without the quotation marks).

<P><LI>Add three CommandButton controls to the right of the ListBox control.

<P><LI>Use the following properties for the command buttons:
<P>
<P><PRE>      Top Command Button:
</PRE><P>
<PRE>         Property    Value
         -------------------------------

         Name        cmdNewForm
         Caption     create new instance

      Middle Command Button:

         Property    Value
         ----------------------------

         Name        cmdFormCaption
         Caption     UserForm caption

      Bottom Command Button:

         Property    Value
         ----------------------

         Name        cmdClose
         Caption     close form


</PRE></OL><h3>Entering Macro Code</h3>
 
<P>
To create the macro, do the following:

<OL><P><LI>On the Insert menu, click Module.

<P><LI>Enter the following code in the General Declarations section of the new
   module:
<P>
<P><PRE>      Option Base 1
      ' Counter for instances of UserForms.
      Public mycount As Integer
</PRE><P>
<P><PRE>      ' Array containing UserForm objects
      Public MyForms() As UserForm1
</PRE><P>
<PRE>      Sub New_UserForms()

         ' Display the UserForm.
         UserForm1.Show

      End Sub

</PRE><P><LI>Double-click the top command button and enter the following code for
   the Click event for the cmdNewForm command button:
<P>
<P><PRE>      Private Sub cmdNewForm_Click()
</PRE><P>
<PRE>         mycount = mycount + 1

         ' Increase the size of the MyForms array by one.
         ReDim Preserve MyForms(mycount)

         ' Create a new instance that is of type UserForm1.
         Set MyForms(mycount) = New UserForm1

         ' Set the caption of the UserForm to the instance number.
         MyForms(mycount).Caption = "instance " &amp; mycount

         MyForms(mycount).cmdClose.Caption = "hide form"

         ' Add new item to the list box.
         UserForm1.ListBox1.AddItem mycount

      End Sub

</PRE><P><LI>Double-click the middle command button and enter the following code for
   the Click event for the cmdFormCaption command button:
<P>
<P><PRE>      Private Sub cmdFormCaption_click()
</PRE><P>
<PRE>         ' Display the Caption of the current UserForm.
         MsgBox Me.Caption

      End Sub

</PRE><P><LI>Double-click the bottom command button and enter the following code for
   the Click event for the cmdClose command button:
<P>
<P><PRE>      Private Sub cmdClose_Click()
</PRE><P>
<PRE>         ' Hide the current instance of the UserForm.
         Me.Hide

      End Sub

</PRE><P><LI>Double-click the ListBox control and enter the following code for
   the MouseUp event:
<P>
<P><PRE>      Private Sub ListBox1_MouseUp _
      (ByVal Button As Integer, ByVal Shift As Integer, _
      ByVal X As Single, ByVal Y As Single)
</PRE><P>
<PRE>         ' Display the selected instance of the UserForm.
         MyForms(UserForm1.ListBox1.ListIndex + 1).Show

      End Sub

</PRE><P><LI>Enter the following code for the QueryClose event for UserForm1:
<P>
<P><PRE>      Private Sub UserForm_QueryClose _
      (Cancel As Integer, CloseMode As Integer)
</PRE><P>
<PRE>         On Error Resume Next ' Ignore if no forms exist.

         ' Setting the value of Cancel to any integer other than 0 prevents
         ' you from clicking the Close ("X") button to close the UserForm.
         Cancel = 1

      End Sub

</PRE></OL><h3>Running the Macros</h3>
 
<P>
To run the example macros, do the following:

<OL><P><LI>Run the New_UserForms macro.
<P>
   This step displays the UserForm.

<P><LI>Click the Create New Instance command button.
<P>
   Each time you click the Create New Instance command button, a new
   instance of the UserForm is created, and a new item is added to the list
   box.

<P><LI>Click any number in the list box.
<P>
   The relevant instance of the UserForm is displayed.

<P><LI>Click the UserForm Caption command button.
<P>
   A message box displays the caption for the currently visible UserForm.

<P><LI>Click the Hide Form command button.
<P>
   The currently visible UserForm is hidden, and UserForm1 is displayed.
<P>
   NOTE: The caption on the bottom command button was programmatically
   changed to Hide Form to differentiate it from the bottom button on
   UserForm1. When you hide one of the created instances of the UserForm,
   and UserForm1 is active, the caption on the bottom command button is
   "Close Form," which is the value set at design time.

<P><LI>If UserForm1 is active, click the Close Form button to stop the macro.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using the New keyword, click the Office
Assistant in the Visual Basic Editor, type "dim" (without the quotation
marks), click Search, and then click to view the "Dim Statement" topic.
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Excel Help is not installed on your
computer, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office Program or
               Component
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97<BR>
Keywords          : kbprg kbhowto<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

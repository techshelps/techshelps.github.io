

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC95: How to Create a Custom Toolbar Using a Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142187">
<META NAME="KBModify" CONTENT="1997/10/24">
<META NAME="KBCreate" CONTENT="1996/01/07">
<META NAME="Keywords" CONTENT="kbusage FmsHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes how to create a custom, floating toolbar using a Microsoft Access form. Using a form for a custom toolbar provides the following advantages:   - You c...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QBOG,QAH4,QANS,QAF0,QA1S,QA5D,QDN9,QAPN,QAFF,QBS0,QBJZ,QAI2,QAY5,QACI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC95: How to Create a Custom Toolbar Using a Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142187</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 7.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes how to create a custom, floating toolbar using a
Microsoft Access form. Using a form for a custom toolbar provides the
following advantages:

<UL><LI>You can place labels, combo boxes, and list boxes on the toolbar.

<LI>You can place buttons with custom bitmaps on the toolbar.

<LI>You can prevent users from closing or moving the toolbar.

<LI>You can take advantage of form modules to store the code being used by
   the controls on the toolbar with the toolbar itself.

<LI>You can disable the shortcut menus on the toolbar.
<P>
</UL>This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access for Windows 95" manual.
<P>
NOTE: This article explains a technique demonstrated in the sample
files, FrmSampl.exe (for Microsoft Access for Windows 95 version 7.0)
and FrmSmp97.exe (for Microsoft Access 97). For information about how
to obtain these sample files, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q150895.htm">Q150895</A></B>
   TITLE     : ACC95: Microsoft Access Sample Forms Available on MSL

   ARTICLE-ID: <B><A HREF="../ACCESS/Q175066.htm">Q175066</A></B>
   TITLE     : ACC97: Microsoft Access 97 Sample Forms Available on MSL

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The example below demonstrates how to create a custom, floating toolbar
that has buttons to find, to save, to delete, and to undo a record. It
also has buttons to navigate among the records, including buttons to go to
the first record, to go to the previous record, to go to the next record,
to go to the last record, and to add a new record.

<OL><P><LI>Open the sample database Northwind.mdb and create a new, blank form.

<P><LI>Set the following form properties:
<P>
<P><PRE>      Caption: Toolbar
      ShortcutMenu: No
      ScrollBars: Neither
      RecordSelectors: No
      NavigationButtons: No
      PopUp: Yes
      BorderStyle: Dialog
      Min Max Buttons: None
</PRE>
<P><LI>If it is not displayed, display the toolbox by clicking Toolbox on the
   View menu. Make sure the Control Wizard button is selected.

<P><LI>Click the command button tool, and then click anywhere in the form.

<P><LI>In the Command Button Wizard, under Categories, click Record
   Navigation. Under Actions, click Find Record. Click Finish.

<P><LI>Drag the new button to the upper-left corner of the detail section.

<P><LI>Repeat steps 4-6 to create the other buttons for the toolbar. Use the
   following selection combinations from the Categories and the Action
   boxes in the Command Button Wizard. Move each of the new buttons
   directly to the right of the button before it.
<P>
<PRE>       Categories             Actions
       --------------------------------------------
       Record Operations      Save Record
       Record Operations      Delete Record
       Record Operations      Undo Record
       Record Navigation      Go to First Record
       Record Navigation      Go to Previous Record
       Record Navigation      Go to Next Record
       Record Navigation      Go to Last Record
       Record Operations      Add New Record

</PRE><P><LI>Drag the bottom of the detail section up so that it is flush with the
   bottom of the buttons. Drag the right side of the detail section so
   that it is flush with the right side of the last button.

<P><LI>On the View menu, click Code.

<P><LI>Create the following Visual Basic function in the Toolbar form module:
<P>
<P><PRE>       Option Explicit
</PRE><P>
<P><PRE>       Function ActivateToolbarForm ()
<PRE></PRE>          On Error Resume Next
          Forms(Me.Tag).SetFocus
          If Err Then
             ActivateToolbarForm = False
          Else
             ActivateToolbarForm = True
          End If
       End Function

    This function will be used to reactivate the form that the toolbar is
    floating on so that the chosen operation is performed on that form
    rather than against the Toolbar form itself.

</PRE><P><LI>For each button on the Toolbar form, insert the following line of code
<P><PRE>    at the very top of the button's OnClick event procedure. To insert the
    code, move the focus to a button by single clicking it. Using the right
    mouse button, click in the OnClick property field of the button, and
    then click the Build button.
</PRE><P>
<P><PRE>       If ActivateToolbarForm() = False Then Exit Sub
</PRE><P>
<P><PRE>    The code for the Search button might look as follows:
</PRE><P>
<PRE>       Sub Command0_Click()
          If ActivateToolbarForm() = False Then Exit Sub

          On Error GoTo Err_Command0_Click

          Screen.PreviousControl.SetFocus
          DoCmd.DoMenuItem acFormBar, acEditMenu, 10, , acMenuVer70

       Exit_Command0_Click:
          Exit Sub

       Err_Command0_Click:
          MsgBox Err.Description
          Resume Exit_Command0_Click
       End Sub

    This code ensures that the form the toolbar is floating on is selected
    for the chosen operation.

</PRE><P><LI>Save the form with the name Toolbar, and then close the form.

<P><LI>Create a new Visual Basic module. Add the following code:
<P>
<P><PRE>       Option Explicit
</PRE><P>
<PRE>       Sub SetToolbarForm (F As Form)
          If IsLoaded("Toolbar") Then Forms![Toolbar].Tag = F.Name
       End Sub

    The SetToolbarForm subroutine uses the IsLoaded() function that is in
    the Utility Functions module of Northwind.mdb. You can copy this
    function into your database.

</PRE><P><LI>For every form that you intend to use the custom toolbar with, add the
<P><PRE>    following line of code to the form's OnActivate property:
</PRE><P>
<P><PRE>       SetToolbarForm Me
</PRE><P>
<P><PRE>    For this example, add the line of code above to the OnActivate property
    of the Employees and Customers forms. To do so, follow these steps:
</PRE><P>
<P><PRE>     a. Open the Employees form in Design view.
</PRE><P>
<P><PRE>     b. On the View menu, click Code.
</PRE><P>
<P><PRE>     c. Click Form in the Object box at the top of the Module window.
</PRE><P>
<P><PRE>     d. Click Activate in the Procedure box at the top of the Module
<PRE></PRE>        Window.

     e. Add the "SetToolbarForm Me" line of code so that the subroutine
        reads as follows:

          Sub Form_Activate ()
             SetToolbarForm Me
          End Sub

     f. Repeat steps a-e for the Customers form.

    This line of code instructs the custom toolbar to store the name of
    the form to be used when a toolbar button is chosen. This ensures that
    the toolbar actions are performed against the active form.

</PRE></OL><h3>Using the Custom Toolbar</h3>
 
<P>
Open the Employees and Customers forms in Form view, and then open the
Toolbar form. Switch back and forth between the Employees form and the
Customers form, using the navigation buttons on the custom toolbar to
navigate among the form records.
<P>
<P><h3>Suggested Enhancements to the Custom Toolbar</h3>
 

<UL><LI>You may want to automate the loading and closing of a custom toolbar
   form from another form's Load and UnLoad events. For example, to have
   the custom toolbar open only with the Customers form, add the following
   code to the Customers form's OnLoad and OnUnload properties:
<P>
<PRE>      Sub Form_Load ()
         DoCmd.OpenForm "Toolbar"
      End Sub

      Sub Form_Unload (Cancel As Integer)
         DoCmd.Close ACFORM,  "Toolbar"
      End Sub

</PRE><LI>You can set the BorderStyle property of the Toolbar form to None so
   that no border and no caption bar appear. This will prevent users from
   being able to move the toolbar around.

<LI>You may want to automatically position the Toolbar form at a specific
   location on the screen. To do so, use a MoveSize macro action in the
   Toolbar form's OnLoad property. The following sample code positions
   the Toolbar form at the upper-left corner of the screen:
<P>
<P><PRE>      DoCmd.MoveSize 0, 0
</PRE><P>
</UL><h2>REFERENCES</h2>
 
<P>
For information about how to create a custom toolbar using a form in
Microsoft Access 2.0, please see the following article here in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID <B><A HREF="../ACCESS/Q113304.htm">Q113304</A></B>
   TITLE:     ACC2: How to Create a Custom Toolbar Using a Form

</PRE>For more information about toolbars, search on the phrase "Customizing
Toolbars," and then view "Modify Toolbars or Toolbar buttons" using the
Answer Wizard from the Microsoft Access for Windows 95 Help menu.
 
<PRE>Keywords          : kbusage FmsHowTo
Version           : 7.0
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

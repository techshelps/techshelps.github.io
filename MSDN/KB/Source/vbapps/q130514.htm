

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Storing, Calculating, and Comparing Date/Time Data </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130514">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1995/05/22">
<META NAME="Keywords" CONTENT="kbprg kbusage TblDatyp kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article explains how Microsoft Access stores the Date/Time data type and why you may receive unexpected results when you calculate or compare dates and times.  This article ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACE,QAU3,QAMR,QA1S,QAFH,QAKD,QDN9,QAKC,QAY5,QAG7,QDNG,QAL3,QALB,QADN,QAVX P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Storing, Calculating, and Comparing Date/Time Data</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130514</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article explains how Microsoft Access stores the Date/Time data
type and why you may receive unexpected results when you calculate or
compare dates and times.
<P>
This article addresses the following topics:

<UL><LI>Storing Date/Time Data
<LI>Formatting a Date/Time Field
<LI>Calculating Time Data
<LI>Comparing Date Data
<LI>Comparing Time Data
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Storing Date/Time Data</h3>
 
<P>
Microsoft Access stores the Date/Time data type as a double-precision,
floating-point number (up to 15 decimal places). The integer portion of
the double-precision number represents the date; the decimal portion
represents the time.
<P>
Valid date values range from -647,434 (January 1, 100 A.D.) to 2,958,465
(December 31, 9999 A.D.). A date value of 0 represents December 30, 1899.
Microsoft Access stores dates prior to December 30, 1899 as negative
numbers.
<P>
Valid time values range from .0 (00:00:00) to .99999 (23:59:59). The
numeric value represents a fraction of one day. You can convert the
numeric value into hours, minutes, and seconds by multiplying the numeric
value by 24.
<P>
The following table illustrates how Microsoft Access stores Date/Time
values:
<P>
<PRE>   Double         Date      Actual             Time      Actual
   Number         Portion   Date               Portion   Time
   ------------------------------------------------------------------
        1.0           1     December 31,1899   .0        12:00:00 A.M.
        2.5           2     January 1, 1900    .5        12:00:00 P.M.
    27468.96875   27468     March 15, 1975     .96875    11:15:00 P.M.
    33914.125     33914     November 6, 1992   .125       3:00:00 A.M.

</PRE>To view how Microsoft Access stores Date/Time values as numbers, type the
following commands in the Debug window in Microsoft Access 97 and 7.0 (or
the Immediate window in Microsoft Access 2.0 or earlier), and note the
results:
<P>
<PRE>   ? CDbl(#5/18/87 14:00:00#)
   31915.5833333333

   ? CDbl(#12/14/1849 17:32:00#)
   -18278.7305555556

</PRE>To view the date and time of numeric values, type the following commands
in the Debug window (or the Immediate window), and note the results:
<P>
<PRE>   ? CVDate(1.375)
   12/31/1899 9:00:00 AM

   ? CVDate(-304398.575)
   8/1/1066 1:48:00 PM

</PRE><h3>Formatting a Date/Time Field</h3>
 
<P>
You can format a Date/Time value to display a date, a time, or both. When
you use a date-only format, Microsoft Access stores a value of 0 for the
time portion. When you use a time-only format, Microsoft Access stores a
value of 0 for the date portion.
<P>
The following table illustrates how Microsoft Access stores Date/Time
values and how you can display those values using different formats:
<P>
<PRE>   Stored Value            Default Format    Custom Format
   (Double Number)         (General Date)    (mm/dd/yyyy hh:nn:ss AM/PM)
   ---------------------------------------------------------------------
   34834.0                 5/15/95           05/15/1995 12:00:00 A.M.
       0.546527777777778   1:07 PM           12/30/1899 01:07:00 P.M.
   34041.9375              3/13/93 10:30PM   03/13/1993 10:30:00 P.M.

</PRE>NOTE: The default format for a Date/Time value is General Date. If a value
is date-only, then no time is displayed. If the value is time-only, then
no date is displayed.
<P>
<P><h3>Calculating Time Data</h3>
 
<P>
Because a time value is stored as a fraction of a 24-hour day, you may
receive incorrect formatting results when you calculate time intervals
greater than 24 hours. To work around this behavior, you can create a
user-defined function to ensure that time intervals are formatted
correctly.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0
<P>
<P>
To calculate and format time intervals correctly, follow these steps:

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      '------------------------------------------------------------------
      '  This function calculates the elapsed time between two values and
      '  formats the result in four different ways.
      '
      '  The function accepts interval arguments such as the following:
      '
<PRE></PRE>      '     #5/12/95 6:00:00AM# - #5/11/95 10:00:00PM#
      '
      '     -or-
      '
      '     [End Time]-[Start Time]
      '------------------------------------------------------------------

      Function ElapsedTime (Interval)
        Dim x
        x = Int(CSng(Interval * 24 * 3600)) &amp; " Seconds"
        Debug.Print x
        x = Int(CSng(Interval * 24 * 60)) &amp; ":" &amp; Format(Interval, "ss") _
           &amp; " Minutes:Seconds"
        Debug.Print x
        x = Int(CSng(Interval * 24)) &amp; ":" &amp; Format(Interval, "nn:ss") _
           &amp; " Hours:Minutes:Seconds"
        Debug.Print x
        x = Int(CSng(Interval)) &amp; " days " &amp; Format(Interval, "hh") _
           &amp; " Hours " &amp; Format(Interval, "nn") &amp; " Minutes " &amp; _
           Format(Interval, "ss") &amp; " Seconds"
        Debug.Print x

      End Function

</PRE><P><LI>Type the following line in the Debug window (or the Immediate window),
   and then press ENTER:
<P>
<P><PRE>      ? ElapsedTime(#6/1/93 8:23:00PM#-#6/1/93 8:12:12AM#)
</PRE><P>
   Note that the following values are displayed:
<P>
<P><PRE>      43848 Seconds
      730:48 Minutes:Seconds
      12:10:48 Hours:Minutes:Seconds
      0 days 12 Hours 10 Minutes 48 Seconds
</PRE><P>
</OL><h3>Comparing Date Data</h3>
 
<P>
Because dates and times are stored together as double-precision numbers,
you may receive unexpected results when you compare Date/Time data. For
example, if you type the following expression in the Debug window (or the
Immediate window in earlier versions), you receive a false (0) result even
if today's date is 3/31/95:
<P>
<PRE>   ? Now()=DateValue("3/31/95")

</PRE></OL>The Now() function returns a double-precision number representing the
current date and time. However, the DateValue() function returns an
integer number representing the date but not a fractional time value. As a
result, Now() equals DateValue() only when Now() returns a time of
00:00:00 (12:00:00 A.M.).
<P>
To receive accurate results when you compare date values, use one of the
functions below. To test each function, type it in the Debug window (or
the Immediate window), substitute the current date for 3/31/95, and then
press ENTER:

<UL><LI>To return an integer value, use the Date() function:
<P>
<P><PRE>      ?Date()=DateValue("3/31/95")
</PRE>
<LI>To remove the fractional portion of the Now() function, use the Int()
   function:
<P>
<P><PRE>      ?Int(Now())=DateValue("3/31/95")
</PRE><P>
</UL><h3>Comparing Time Data (in Microsoft Access 2.0)</h3>
 
<P>
When you compare time values, you may receive inconsistent results because
a time value is stored as the fractional portion of a double-precision,
floating-point number. For example, if you type the following expression
in the Immediate window, you receive a false (0) result even though the
two time values look the same:
<P>
NOTE: This behavior no longer occurs in Microsoft Access 7.0 or 97.
<P>
<PRE>   var1 = #2:00:00 PM#
   var2 = DateAdd("n", 10, var1)
   ? var2 = #2:10:00 PM#

</PRE>When Microsoft Access converts a time value to a fraction, the calculated
result may not be the exact equivalent of the time value. The small
difference caused by the calculation is enough to produce a false (0)
result when you compare a stored value to a constant value.
<P>
To receive accurate results when you compare time values, use one of the
methods below. To test each method, type it in the Immediate window, and
then press ENTER:

<UL><LI>Add an associated date to the time comparison:
<P>
<P><PRE>      var1 = #1/1/90 2:00:00 PM#
      var2 = DateAdd("n", 10, var1)
      ? var2 = #1/1/90 2:10:00 PM#
</PRE>
<LI>Convert the time values to String data types before you compare them:
<P>
<P><PRE>      var1 = #2:00:00 PM#
      var2 = DateAdd("n", 10, var1)
      ? CStr(var2) = CStr(#2:10:00 PM#)
</PRE>
<LI>Use the DateDiff() function to compare precise units such as seconds:
<P>
<P><PRE>      var1 = #2:00:00 PM#
      var2 = DateAdd("n", 10, var1)
      ? DateDiff("s", var2, #2:10:00 PM#) = 0
</PRE><P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about calculating time values, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q88657.htm">Q88657</A></B>
   TITLE     : ACC: Functions for Calculating &amp; Displaying Date/Time Values

</PRE>For more information about how to format Date/Time data types, type
"formatting dates" in the Office Assistant, click Search, and then click to
view "Format Property - Date/Time Data Type."
 
<PRE>Keywords          : kbprg kbusage TblDatyp kbfaq
Version           : 1.0 1.1 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

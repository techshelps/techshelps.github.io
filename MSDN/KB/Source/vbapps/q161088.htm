

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Using Automation to Send a Microsoft Outlook Message </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161088">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1996/12/17">
<META NAME="Keywords" CONTENT="kbinterop kbole IntpOleA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to create and send a Microsoft Outlook message in Microsoft Access 97 using Automation with Visual Basic for Applications.  This article assume...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVO,QAYC,QAEV,QA1S,QAH6,QDN9,QA2K,QBS0,QBXS,QAPN,QBUP,QAMA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Using Automation to Send a Microsoft Outlook Message</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161088</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to create and send a Microsoft Outlook
message in Microsoft Access 97 using Automation with Visual Basic for
Applications.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
For more information about using Automation to send a Microsoft Exchange
message, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q153311.htm">Q153311</A></B>
   TITLE     : Using Automation to Send a Microsoft Exchange Message

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The SendObject method provides a way to send a MAPI mail message
programmatically in Microsoft Access. However, the SendObject method does
not give you access to complete mail functionality, such as the ability to
attach an external file or set message importance. The example that follows
uses Automation to create and send a mail message that you can use to take
advantage of many features in Microsoft Outlook that are not available with
the SendObject method.
<P>
There are six main steps when you use Automation to send a Microsoft
Outlook mail message:

<UL><LI>Initialize the Outlook session
<LI>Create a new message
<LI>Add the recipients (To, CC, and BCC) and resolve their names
<LI>Set valid properties, such as the Subject, Body, and Importance
<LI>Add attachments (if any)
<LI>Display/Send the message
<P>
</UL>To send a Microsoft Outlook mail message programmatically, follow these
steps:

<OL><P><LI>Create a sample text file named Customers.txt in the C:\My Documents
   folder.

<P><LI>Start Microsoft Access and open the sample database Northwind.mdb.

<P><LI>Create a module and type the following line in the Declarations
   section if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>On the Tools menu, click References.

<P><LI>In the References box, click the Microsoft Outlook 8.0 Object Model
   and then click OK.
<P>
   NOTE: If the Microsoft Outlook 8.0 Object Model does not appear in the
   Available References box, browse your hard drive for the file
   Msoutl8.olb. If you cannot locate this file, you must run the
   Microsoft Outlook Setup program to install it before you proceed
   with this example.

<P><LI>Type the following procedure in the new module:
<P>
<PRE>      Sub SendMessage(DisplayMsg As Boolean, Optional AttachmentPath)
          Dim objOutlook As Outlook.Application
          Dim objOutlookMsg As Outlook.MailItem
          Dim objOutlookRecip As Outlook.Recipient
          Dim objOutlookAttach As Outlook.Attachment

          ' Create the Outlook session.
          Set objOutlook = CreateObject("Outlook.Application")

          ' Create the message.
          Set objOutlookMsg  = objOutlook.CreateItem(olMailItem)

          With objOutlookMsg
              ' Add the To recipient(s) to the message.
              Set objOutlookRecip = .Recipients.Add("Nancy Davolio")
              objOutlookRecip.Type = olTo

              ' Add the CC recipient(s) to the message.
              Set objOutlookRecip = .Recipients.Add("Michael Suyama")
              objOutlookRecip.Type = olCC

             ' Add the BCC recipient(s) to the message.
              Set objOutlookRecip = .Recipients.Add("Andrew Fuller")
              objOutlookRecip.Type = olBCC

             ' Set the Subject, Body, and Importance of the message.
             .Subject = "This is an Automation test with Microsoft Outlook"
             .Body = "This is the body of the message." &amp; vbCrLf &amp; vbCrLf
             .Importance = olImportanceHigh  'High importance

             ' Add attachments to the message.
             If Not IsMissing(AttachmentPath) Then
                 Set objOutlookAttach = .Attachments.Add(AttachmentPath)
             End If

             ' Resolve each Recipient's name.
             For Each ObjOutlookRecip In .Recipients
                 objOutlookRecip.Resolve
             Next

             ' Should we display the message before sending?
             If DisplayMsg Then
                 .Display
             Else
                 .Send
             End If
          End With
          Set objOutlook = Nothing
      End Sub

</PRE><P><LI>To test this procedure, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>       SendMessage True, "C:\My Documents\Customers.txt"
</PRE><P>
   Note that a new message is displayed in Microsoft Outlook with an
   attachment.
<P>
   To send the message without displaying it in Microsoft Outlook, call
   the procedure with a False value for the first argument:
<P>
<P><PRE>       SendMessage False, "C:\My Documents\Customers.txt"
</PRE><P>
   To send the message without specifying an attachment, omit the second
   argument when calling the procedure.
<P>
<P><PRE>       SendMessage True
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using Automation in Microsoft Access, search
the Help Index for "Automation," or ask the Microsoft Access 97 Office
Assistant.
<P>
For more information about using Automation to control Microsoft Outlook,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q160502.htm">Q160502</A></B>
   TITLE     : ACC: Using Automation to Add Appointments to Microsoft
               Outlook

   ARTICLE-ID: <B><A HREF="../vbapps/Q161012.htm">Q161012</A></B>
   TITLE     : VBA: How to Create a New Contact Item in Outlook with
               Automation
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97 OutSol98<BR>
Keywords          : kbinterop kbole IntpOleA<BR>
Technology        : kbole<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

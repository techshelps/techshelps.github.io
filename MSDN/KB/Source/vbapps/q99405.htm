

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Part 2 DDE in Visual Basic to Request Data from MS Access </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q99405 ">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1993/05/27">
<META NAME="Keywords" CONTENT="IntpDde kbinterop PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This is the second in a series of two articles containing an advanced example that demonstrates how to use Visual Basic to request data from Microsoft Access by using dynami...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QBS0,QA1S,QAGI,QDN9,QAIJ,QA7O,QAYY,QBCF,QAGU,QAE1,QAY2,QA7N,QA5F,QAMA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Part 2 DDE in Visual Basic to Request Data from MS Access</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q99405 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This is the second in a series of two articles containing an advanced
example that demonstrates how to use Visual Basic to request data from
Microsoft Access by using dynamic data exchange (DDE).
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following Visual Basic example demonstrates how to use DDE to request
information by using SQL statements and the rich set of items supported by
Microsoft Access to navigate tables. Further, a subroutine that assists in
parsing data from the tab-delimited records that are requested is provided.
<P>
Specifically, the example does the following:

<OL><P><LI>Gets the number of records and fields in the table using the
   "FirstRow" and "FieldCount" items.

<P><LI>Creates an array to store the records when they are retrieved.

<P><LI>Requests the data from a table, one record at a time, using the
   "FirstRow" and "NextRow" items.

<P><LI>Requests a list of field names using the "FieldNames" item.

<P><LI>Uses a subroutine to parse each tab-delimited record requested from
   Microsoft Access and places the data in the array mentioned above. (A
   separate array holds the field names).

<P><LI>This step is optional. Once all the data is placed in the array, a
   Visual Basic grid control will be populated with the array contents.
   Further, the grid columns will be populated with the names of the
   fields.
<P>
</OL>When you run this example, be sure that Microsoft Access is running and the
sample database Northwind.mdb (or NWIND.MDB in versions 1.x and 2.0) is
open.
<P>
To use this example, create a new Visual Basic program with a text
box, a command button, and a grid control with the following
properties:
<P>
<PRE>   Text Box
   --------
      Name: Text1

   Command Button
   --------------
      Name: Command1

   Grid
   ----
      Name: Grid1

</PRE></OL>NOTE: The grid control is available in the Professional Toolkit for Visual
Basic version 1.0 and ships with version 2.0 of the Professional Edition of
Microsoft Visual Basic for Windows.
<P>
Double-click the command button and type the code that follows between
the Sub Command1_Click () and End Sub lines.
<P>
NOTE: In the following sample code, an underscore (_) is used as a
line-continuation character. Remove the underscore from the end of the line
when re-creating this code.
<P>
<PRE>   Dim CntRows, CntCols As Integer ' Row and column count in the table.
   Dim Row, Col As Integer         ' Current row/column being filled.
   Dim Record As String            ' Record read from employees table.

   ' Get the number of records in the Employees Table.
   Text1.LinkTopic = "MSACCESS|Northwind;SQL Select Count(*) As _
      EmployeeCount From Employees;"

   Text1.LinkItem = "FirstRow"   ' Setup to get the first row of data.
   Text1.LinkMode = 2            ' Establish a manual link.
   Text1.LinkRequest             ' Request the data into the Text1.
   Text1.LinkMode = 0            ' Terminate the link.
   CntRows = Val(Text1.Text)     ' Convert the result to a number.

   ' Establish a DDE Link to the Employees table.
   Text1.LinkTopic = "MSACCESS|Northwind;SQL Select * From Employees;"
   Text1.LinkMode = 2            ' Establish a manual link.

   ' Get the number of columns in the Employees Table.
   Text1.LinkItem = "FieldCount" ' Setup to get count of fields/cols.
   Text1.LinkRequest             ' Request the data into Text1.
   CntCols = Val(Text1.Text)     ' Convert the result to a number.

   ' Create the arrays to hold employee information and field names.
   ReDim Employees(CntRows, CntCols) As String
   ReDim FieldNames(1, CntCols) As String

   ' Get the field names in the Employees table from Microsoft Access.
   Text1.LinkItem = "FieldNames" ' Setup to get the field names.
   Text1.LinkRequest             ' Request the data into Text1.

   ' Parse the tab delimited list of field names and copy it into the
   ' .. FieldNames array. (ParseRecord subroutine is listed latter).
   ParseRecord FieldNames(), 1, (Text1.Text)

   ' Request each tab delimited record of data one at a time.
   For Row = 1 To CntRows
      If Row = 1 Then
         Text1.LinkItem = "FirstRow"  ' Setup for the first record.
      Else
         Text1.LinkItem = "NextRow"   ' Setup for the next record.
      End If
      Text1.LinkRequest          ' Request the data into Text1.

      ' Parse the tab delimited record and store it in Employees array.
      ParseRecord Employees(), Row, (Text1.Text)
   Next Row

   Text1.LinkMode = 0  ' Terminate link, arrays are filled with data.

   ' OPTIONAL: The following code populates a grid control with the
   ' contents of the Employees and FieldNames arrays.

   ' Setup the Grid with the correct number of Rows and Cols.
   Grid1.Rows = CntRows + 1      ' Add 1 for the row selector buttons
   Grid1.Cols = CntCols + 1      ' Add 1 for the column header buttons

   ' Fill the Grid column header with the data in the FieldNames array.
   Grid1.Row = 0                  ' Move to the column header row.
   For Col = 1 To CntCols
      Grid1.Col = Col                   ' Move to the column
      Grid1.Text = FieldNames(1, Col)   ' .. and fill it with data.
   Next Col

   ' Fill the Grid control rows with the data in the Employees array.
   For Row = 1 To CntRows
      Grid1.Row = Row                    ' Move to the row.
      For Col = 1 To CntCols
        Grid1.Col = Col                  ' Move to the column.
        Grid1.Text = Employees(Row, Col) ' Fill it with array data.
      Next Col
   Next Row
   End Sub

</PRE>The following subroutine, ParseRecord, is used to extract the tab-
delimited data from a record and place the data in an array in the
specified row. The subroutine takes the following three arguments:
<P>
<PRE>   Array()  - A two-dimensional array of strings to store data into.
   Row      - The row position in the array to store the parsed data.
   Record   - A string with tab delimited information to parse.

</PRE>Create a new module in Visual Basic with the following subroutine:
<P>
<PRE>   Sub ParseRecord (Array() As String, ByVal Row As Integer, _
      ByVal Record As String)
      Dim Start As Integer    ' Start position of field in record.
      Dim TabStop As Integer  ' Position in the record of the next tab.
      Dim CntCols As Integer  ' The number of columns in the Array.
      Dim Col As Integer      ' The current column (field) being parsed.

      CntCols = UBound(array, 2)   ' Get count of columns in the array.
      Start = 1       ' Start parsing with first character.

      ' Find the first tab stop (ASCII character 9) in the record.
      TabStop = InStr(Start, Record, Chr$(9), 0)

      ' Loop until we fill up all but the last column (Col &lt; CntCols)
      ' .. or until there are no more columns to read (TabStop &lt;&gt; 0 means
      ' .. that no tab was found).
      Col = 1
      While Col &lt; CntCols And TabStop &lt;&gt; 0
         ' Extract the field from the string and store it in the array.
         Array(Row, Col) = Mid$(Record, Start, TabStop - Start)

         Start = TabStop + 1        ' Increment start to next tab stop.
         TabStop = InStr(Start, Record, Chr$(9), 0) ' Find next tab stop.
         Col = Col + 1              ' Increment to next column in array.
      Wend
      Array(Row, CntCols) = Mid$(Record, Start)  ' Get last col of data.
   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
For further information about using Microsoft Access as a DDE server,
search the Help Index for "DDE."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: part two vb b_vbasic<BR>
Keywords          : IntpDde kbinterop PgmHowTo<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

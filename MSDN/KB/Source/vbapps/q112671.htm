

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>"Built-in Constants in Visual Basic for Applications" (WC0993) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112671">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1994/03/16">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The following file is available for download from the Microsoft Software Library:   ~ Wc0993.exe  For more information about downloading files from the Microsoft Software Library, please see the following article in the Microsoft Knowledge Base:   ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QAKJ,QAH4,QBJZ,QBWS,QA5F,QAMA,QDKX,QAIH,QAJH,QAH8,QABA,QAPN,QAE1 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>"Built-in Constants in Visual Basic for Applications" (WC0993)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112671</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Office 97 for Windows
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, version 5.0
</UL> 
<P>
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Wc0993.exe">Wc0993.exe</A> <I>(size: 288903 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>The Application Note "Built-in Constants in Microsoft Visual Basic for
Applications," (WC0993) provides a complete list of the constants that are
included in Microsoft Office 97 programs and Microsoft Excel for Windows,
versions 5.0 and 7.0, for use in Visual Basic for Applications.
<P>
This Application Note contains the Microsoft Excel 97, Microsoft Access
97, Microsoft Office Binder 97, Microsoft Office 97, Microsoft Outlook 97,
Microsoft PowerPoint 97, Visual Basic for Applications, Microsoft Word 97,
and Microsoft Excel for Windows, versions 5.0 and 7.0, constants files.
You can use these files in Visual Basic 3.0 or later projects. These files
provide the definitions of these constants so that you can use the name of
the constants in your Visual Basic modules. This Application Note also
includes a Microsoft Excel 5.0 workbook file, Constants.xls, which
includes lists of the constants that you can sort alphabetically or
numerically.
<P>
You can obtain this Application Note from the following sources:

<UL><LI>Microsoft's World Wide Web Site on the Internet
<LI>The Internet (Microsoft anonymous ftp server)
<LI>The Microsoft Network (MSN)
<LI>Microsoft Download Service (MSDL)
<P>
</UL><h2>THE TEXT OF WC0993</h2>
 
<P>
 
<PRE>        Microsoft(R) Technical Support Application Note (Text File)
         WC0993: BUILT-IN CONSTANTS IN MICROSOFT VISUAL BASIC(R)
                             FOR APPLICATIONS
</PRE> 
<PRE>                                                   Revision Date: 3/97

</PRE>The following information applies to Microsoft Office 97, Microsoft Excel
for Windows(R), versions 5.0 and 7.0.
<P>
 
<PRE>| INFORMATION PROVIDED IN THIS DOCUMENT AND ANY SOFTWARE THAT MAY     |
| ACCOMPANY THIS DOCUMENT (collectively referred to as an Application |
| Note) IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER      |
| EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED      |
| WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR       |
| PURPOSE. The user assumes the entire risk as to the accuracy and    |
| the use of this Application Note. This Application Note may be      |
| copied and distributed subject to the following conditions: 1) All  |
| text must be copied without modification and all pages must be      |
| included; 2) If software is included, all files on the disk(s) must |
| be copied without modification (the MS-DOS(R) utility diskcopy is   |
| appropriate for this purpose); 3) All components of this            |
| Application Note must be distributed together; and 4) This          |
| Application Note may not be distributed for profit.                 |
|                                                                     |
| Copyright (C) 1994-1997 Microsoft Corporation. All Rights Reserved. |
| Microsoft, MS-DOS, and Visual Basic are registered trademarks and   |
| Windows is a trademark of Microsoft Corporation.                    |
|---------------------------------------------------------------------|

</PRE><h2>OVERVIEW</h2>
 
<P>
This Application Note provides a complete list of the constants that are
included in Microsoft Office 97 programs and Microsoft Excel for Windows,
versions 5.0 and 7.0, for use in Visual Basic for Applications. The
following files are included.
<P>
<PRE>   Filename            Function
   ----------------------------------------------------------------------

   Constant.xls        Microsoft Excel for Windows, version 5.0, workbook
                       that contains a complete list of all the built-in
                       constants discussed in this document
   Ac97cons.bas        Constants file for Microsoft Access 97
   Bd97cons.bas        Constants file for Microsoft Office Binder 97 for
                       Windows
   Of97cons.bas        Constants file for common Microsoft Office 97 for
                       Windows features
   Ol97cons.bas        Constants file for Microsoft Outlook 97
   Pp97cons.bas        Constants file for Microsoft PowerPoint 97 for
                       Windows
   Vbacons.bas         Constants file for common Visual Basic for
                       Applications features
   Wd97cons.bas        Constants file for Microsoft Word 97 for Windows
   Xl57cons.bas        Constants file for Microsoft Excel for Windows,
                       versions 5.0 and 7.0
   Xl97cons.bas        Constants file for Microsoft Excel 97 for Windows

</PRE>You can use the BAS files with Microsoft Visual Basic, versions 3.0 and
later, or with any other program that supports Visual Basic or Visual
Basic for Applications. Each BAS file contains a complete set of constants
for a specific program. If you include the BAS file in a Visual Basic
project, you can use constant names (instead of typing the values) in
Visual Basic modules.
<P>
Constant.xls is a Microsoft Excel 5.0 workbook that contains a complete,
easy-to-use listing of all the constants in the BAS files.
<P>
<P><h2>WHAT ARE BUILT-IN CONSTANTS?</h2>
 
<P>
When you create a procedure using Visual Basic for Applications, you can
use constants to represent values that you use frequently. Using constants
makes your code easier to read and maintain. For example, if you use the
value 5.67 frequently, you can define a constant called MyValue as 5.67,
and then use MyValue in your procedure everywhere you would use the value
5.67.
<P>
Programs that can use Visual Basic for Applications include built-in
constants that you can use in Visual Basic functions, methods, objects,
and properties. The built-in constants for a specific program begin with
the same two-letter prefix. The prefixes for the Office programs are
listed in the following table.
<P>
<PRE>   Prefix         Program
   --------------------------------------

   xl             Microsoft Excel
   wd             Microsoft Word
   ac             Microsoft Access
   pp             Microsoft PowerPoint
   bind           Microsoft Office Binder
   ol             Microsoft Outlook
   mso            Microsoft Office
   vb             Visual Basic

</PRE>Built-in constants make it easier for you to create procedures in Office
programs with Visual Basic and Visual Basic for Applications. For example,
to change the orientation of an active Microsoft Excel worksheet to
landscape or to check whether a cell is center-aligned, you could use the
following Visual Basic code:
<P>
<PRE>   ActiveWorksheet.PageSetup.Orientation = xlLandscape

   If Range("A1").HorizontalAlignment = xlCenter Then
      MsgBox "Cell A1 is centered!"
   End If

</PRE>The built-in constants in this example (xlLandscape and xlCenter) are
easier to remember than the numeric values they represent. Also, when you
use built-in constants, it is easier to read the code and understand the
function the code performs. For example, without built-in constants, you
use the following code to change the orientation of an active Microsoft
Excel worksheet to landscape or to check whether a cell is center-aligned:
<P>
<PRE>   ActiveWorksheet.PageSetup.Orientation = 2

   If Range("A1").HorizontalAlignment = -4108 Then

</PRE>Note that it is difficult to understand what these lines do without first
knowing what the values 2 and -4108 represent.
<P>
<P><h3>Using Built-in Constants in Microsoft Office 97 Programs</h3>
 
<P>
When you write a Visual Basic for Applications macro in a program, built-
in constants that belong to that program are automatically available. For
example, if you write a Visual Basic for Applications macro in Microsoft
Excel, all of the Microsoft Excel constants are automatically available to
the macro.
<P>
However, when you use one program (for example, Microsoft Access) to
control another program (for example, Microsoft Excel), and you use the
constants for the program you want to control in the macro, you must add
the constants to the controlling program. To make the constants available
to a program, do either of the following:

<UL><LI>Load the BAS file for the program that you want to control to the
   project.

<LI>Create a reference to the program that you want to control.
<P>
</UL>Loading a BAS File into a Visual Basic for
<P><h3>Applications Project in a Microsoft Office 97 Program</h3>
 
<P>
To load the BAS file, use the following steps:

<OL><P><LI>In the Visual Basic Editor (press ALT+F11), click Module on the Insert
   menu to create a new module.

<P><LI>On the Insert menu, click File. In the Insert File dialog box, open the
   folder that contains the BAS file you want to add. In the Files of Type
   list, click Basic Files (*.bas).

<P><LI>Click the BAS file you want, and then click Open.
<P>
</OL>It may take a few seconds for the Visual Basic Editor to load the BAS
file. After you load the file, the module contains many Global Const
statements. Each statement declares a single constant.
<P>
NOTE: Do not add both the Xl57cons.bas and the Xl97cons.bas files to your
project. These files are similar but provide constants for different
versions of Microsoft Excel.
<P>
<P><h3>Creating a Reference to the Program That You Want to Control</h3>
 
<P>
To create a reference to the program, use the following steps:

<OL><P><LI>In the Visual Basic Editor (press ALT+F11), click References on the
   Tools menu.

<P><LI>In the Available References list, click to select the check box to the
   left of the object library that contains the constants that you want to
   use. For example, if you want to use constants that belong to Microsoft
   Word 97, click to select the check box to the left of Microsoft Word
   8.0 Object Library.
<P>
   Note In this dialog box, "8.0" and "97" are synonymous. Therefore, the
   Microsoft Excel 8.0 Object Library provides the constants for Microsoft
   Excel 97.

<P><LI>After you finish selecting the libraries you want to use, click OK.
<P>
</OL>You can now use the constants that belong to the referenced programs
in the Visual Basic for Applications macro.
<P>
<P><h2>USING BUILT-IN CONSTANTS IN MICROSOFT VISUAL BASIC</h2>
 
<P>
If you write a Microsoft Visual Basic program that uses Automation to
control an Office program, you may want to use the constants that
belong to that program. Depending on the version of Microsoft Visual
Basic you are using, use one of the following methods to make the
constants available:

<UL><LI>Load the BAS file for the program that you want to control to the
   project.
<P>
   NOTE: This method works for any version of Microsoft Visual Basic.

<LI>Create a reference to the program that you want to control.
<P>
</UL><h3>Loading a BAS File into a Code Module</h3>
 
<P>
Visual Basic 5.0:
<P>
To load the BAS file, use the following steps:

<OL><P><LI>In the development environment, click Add Module on the Project menu.
   On the New tab, click Module, and then click Open.
<P>
   This step adds an empty code module to the project.

<P><LI>Verify that the module is the active window. On the Edit menu, click
   Insert File.

<P><LI>In the List Files of Type box, click Basic Files (*.bas).

<P><LI>Click the BAS file and click Open.
<P>
</OL>Visual Basic 4.0:
<P>
To load the BAS file, use the following steps:

<OL><P><LI>In the development environment, click Module on the Insert menu.
<P>
   This adds an empty code module to your project.

<P><LI>Verify that the module is the active window. On the Insert menu, click
   File.

<P><LI>In the List Files of Type box, click Basic Files (*.bas).

<P><LI>Select the BAS file and click Open.
<P>
</OL>Visual Basic 3.0:
<P>
To load the BAS file, use the following steps:

<OL><P><LI>In the development environment, click New Module on the File menu.
<P>
   This step adds an empty code module to the project.

<P><LI>Verify that the module is the active window. On the File menu click
   Load Text.

<P><LI>In the List Files of Type box, click Basic Files (*.bas).

<P><LI>Click the BAS file, and click Replace. If you want to add the BAS file
   to a module that contains other code or declarations, click Merge.
<P>
</OL><h3>Creating a Reference to the Program That You Want to Control</h3>
 
<P>
Visual Basic 5.0:
<P>
To create a reference to the program, use the following steps:

<OL><P><LI>On the View menu, click Project Explorer.

<P><LI>On the Project menu, click References. If the References command
   appears dimmed, the project is running. To make the command available,
   end program execution.

<P><LI>In the Available References list, select the check box to the left of
   the object library that contains the constants you want to access. For
   example, if you want to access constants that belong to Microsoft Word
   97, select the check box to the left of Microsoft Word 8.0 Object
   Library.
<P>
   Note In this dialog box, "8.0" and "97" are synonymous. Therefore, the
   Microsoft Excel 8.0 Object Library provides the constants for Microsoft
   Excel 97.

<P><LI>After you finish selecting the libraries you want to use, click OK.
<P>
</OL>Visual Basic 4.0:
<P>
To create a reference to the program, use the following steps:

<OL><P><LI>On the View menu, click Project.

<P><LI>On the Tools menu, click References. If the References command appears
   dimmed, the project is running. To make the command available, end
   program execution.

<P><LI>In the Available References list, click to select the check box to the
   left of the object library that contains the constants you want to
   access. For example, if you want to access constants that belong to
   Microsoft Word 97, click to select the check box to the left of
   Microsoft Word 8.0 Object Library.
<P>
   Note In this dialog box, "8.0" and "97" are synonymous. Therefore, the
   Microsoft Excel 8.0 Object Library provides the constants for Microsoft
   Excel 97.

<P><LI>After you finish selecting the libraries you want to use, click OK.
<P>
</OL><h2>WHERE ARE BUILT-IN CONSTANTS LISTED IN MICROSOFT OFFICE PROGRAMS?</h2>
 
<P>
The built-in constants that are available for a program are listed in Help
or in the Object Browser. If you want to determine which built-in
constants are available for a particular function, look them up in Help or
use the Object Browser.
<P>
<P><h3>Looking Up a Built-in Constant in Help</h3>
 
<P>
Microsoft Office 97 Programs:

<OL><P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>On the Standard toolbar, click Office Assistant.

<P><LI>Type the name of the function you want to view in the box and click
   Search.

<P><LI>In the list of topics, click the button for the function you want to
   view.
<P>
</OL>Microsoft Excel 7.0:

<OL><P><LI>In a Visual Basic module, click Microsoft Excel Help Topics on the Help
   menu.

<P><LI>Click the Index tab.

<P><LI>Type the name of the function you want to view in the box and click
   Display.
<P>
</OL>Any built-in constants that are available to the function appear in
bold in the Help topic text for that function. For example, the
ConvertFormula method uses the following six built-in constants. These
constants are listed in bold, for example: xlA1, xlR1C1, xlAbsolute,
xlAbsRowRelColumn, xlRelRowAbsColumn, and xlRelative.
<P>
Microsoft Excel 5.0

<OL><P><LI>On the Help menu, click Contents.

<P><LI>In the Microsoft Excel Help Contents window, click Programming with
   Visual Basic.

<P><LI>In the Visual Basic Reference window, click Search and click the Index
   tab.

<P><LI>Type the name of the function you want to view in the box and click
   Display.
<P>
</OL>Any built-in constants that are available to the function appear in
bold in the Help topic text for that function. For example, the
ConvertFormula method uses the following six built-in constants. These
constants are listed in bold, for example: xlA1, xlR1C1, xlAbsolute,
xlAbsRowRelColumn, xlRelRowAbsColumn, and xlRelative.
<P>
<P><h3>Looking Up Constants with the Object Browser</h3>
 
<P>
Microsoft Office 97 Programs:

<OL><P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>On the View menu, click Object Browser.

<P><LI>In the Project/Library box, click the library that contains the
   constants you want to view (for example, click Excel).
<P>
   Note Click &lt;All Libraries&gt; to browse through a list of all libraries.

<P><LI>In the Classes list, click Constants.
<P>
   The constants are listed in the Members of 'Constants' box.
<P>
</OL>Microsoft Excel 5.0 and 7.0:

<OL><P><LI>In a Visual Basic module, click Object Browser on the View menu.

<P><LI>In the Libraries/Workbooks list box, click Excel.

<P><LI>In the Objects/Modules list, click Constants.
<P>
   A list of the built-in constants appears in the Methods/Properties
   list.
<P>
</OL>For a complete list of the built-in constants, see the Constant.xls file
that is included with this Application Note.
<P>
<P><h2>USING THE LISTS IN CONSTANT.XLS</h2>
 
<P>
The Constant.xls workbook contains a complete list of the built-in
constants. These lists are designed so that you can easily sort them in
alphabetical or numerical order.
<P>
When you open the workbook in Microsoft Excel, the Contents worksheet is
displayed. This worksheet contains basic information about the workbook,
including instructions for moving between worksheets and information about
library files.
<P>
 
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: xlconstants wdconstants acconstants ppconstants<BR>
msoconstants bindconstants olconstants vbconstants<BR>
Keywords          : kbprg<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Solution Type     : kbfile<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Problems Using Instr() to Find Special Characters </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151164">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1996/05/20">
<META NAME="Keywords" CONTENT="kbprg PgmParse">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  When you use the Instr() function, you may see incorrect results when you search through a character string looking for certain ASCII characters, usually non-US characters.  CAUS...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QAY5,QBV8,QBS0,QBXT,QA5V,QA5F,QAG7,QAMA,QAIB,QAVK,QAKE,QAUD,QAL3 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Problems Using Instr() to Find Special Characters</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151164</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
When you use the Instr() function, you may see incorrect results when you
search through a character string looking for certain ASCII characters,
usually non-US characters.
<P>
<P><h2>CAUSE</h2>
 
<P>
There are two possible causes for this behavior:

<UL><LI>The Option Compare Database statement is in effect. This can cause
   unexpected results when searching for any character whose ASCII value
   is 128 or greater.
<P>
   -or-

<LI>You are searching for certain characters, even with the Option Compare
   Binary or Option Compare Text statements in effect. These characters
   are not affected by the Option Compare setting when using the Instr()
   function.
<P>
   These characters include, but are not limited to the following:
<P>
<PRE>      Upper- and lower-case "A" with umlaut     (ASCII 196 and 228)
      Upper- and lower-case "AE"                (ASCII 198 and 230)
      Upper- and lower-case "N" with tilde      (ASCII 209 and 241)
      Upper- and lower-case "O" with umlaut     (ASCII 214 and 246)
      Upper- and lower-case "U" with umlaut     (ASCII 220 and 252)
      German double-"s" "ess-szet" character    (ASCII 223)

</PRE></UL>The Instr() function incorrectly returns a match on the first alphabetical
character that resembles one of these special characters. For example,
searching for "A" with an umlaut matches any letter "A."
<P>
<P><h2>RESOLUTION</h2>
 
<P>
You can use one of the following two methods to work around this behavior.
<P>
<P><h3>Method 1</h3>
 
<P>
If the incorrect behavior is due to Cause 1 in the "Cause" section, place
the Option Compare Binary statement at the top of your module.
<P>
<P><h3>Method 2</h3>
 
<P>
If the incorrect behavior occurs because you are searching for characters
that are not affected by the Option Compare setting, follow the steps
below to create a user-defined function to search for the special
characters listed in Cause 2 in the "Cause" section.
<P>
This method assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0

<OL><P><LI>Start Microsoft Access.

<P><LI>Open an existing database, or create a new database.

<P><LI>Create a new module.

<P><LI>Type the following lines in the Declarations section:
<P>
<P><PRE>      Option Explicit
      Option Compare Database
</PRE>
<P><LI>Type the following function:
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>       Function NewInstr (strSearch As String, strWhat As String) As _
       Integer
       '
       ' This function searches for the character strWhat in the string
       ' strSearch. It uses the ASCII value of strWhat, and therefore is
       ' not subject to Microsoft Access translation of special characters
       ' and ligatures. It returns the integer position of the strWhat in
       ' strSearch. It returns 0 if either strSearch or strWhat is empty,
       ' or if strWhat cannot be found.
       '
       ' Note: If strWhat contains more than one character, only the first
       ' character is searched for.
</PRE><P>
<P><PRE>       Dim iLen As Integer, i As Integer
       Dim iRetVal As Integer
</PRE><P>
<P><PRE>       If IsNull(strSearch) Or IsNull(strWhat) Or _
       IsEmpty(strSearch) Or IsEmpty(strWhat) Then
<PRE></PRE>          iRetVal = 0
       Else
          iRetVal = 0
          iLen = Len(strSearch)
          i = 1
          Do
             If Asc(Mid(strSearch, i, 1)) = Asc(strWhat) Then
                iRetVal = I
             End If
             i = i + 1
          Loop While iRetVal = 0 And i &lt;= iLen
       End If
       NewInstr = iRetVal

       End Function

</PRE><P><LI>Open the Debug window (called the Immediate window in Microsoft Access
   versions 1.x and 2.0), type the following line, and then press ENTER:
<P>
<P><PRE>      ? NewInstr(Chr(223),Chr(223))
</PRE><P>
   The result, 1, appears on the next line.
<P>
   NOTE: You can generate the special characters directly by holding down
   the ALT key on your keyboard, typing the number 0 (zero) on the numeric
   keypad, followed by the ASCII code, and then releasing the ALT key.
   Make sure that NumLock is on before typing this. For example, to
   generate the ess-szet character, hold down the ALT key and type 0223 on
   the numeric keypad.

<P><LI>Type the following line in the Debug window, and then press ENTER:
<P>
<P><PRE>      ? NewInstr(Chr(223),"s")
</PRE><P>
   The result, 0, appears on the next line.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start Microsoft Access and open the sample database Northwind.mdb
  (called NWIND.MDB in Microsoft Access 1.x and 2.0).

<P><LI>Create a new module.

<P><LI>Type the following lines in the Declarations section:
<P>
<P><PRE>      Option Explicit
      Option Compare Database
</PRE>
<P><LI>In the Debug window, type the following line, and then press ENTER:
<P>
<P><PRE>      ? Instr(Chr(223),"s")
</PRE><P>
   The incorrect result, 1, appears on the next line.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about Option Compare Database, search the Help
Index for "Option Compare Statement," or ask the Microsoft Access 97
Office Assistant.
 
<PRE>Keywords          : kbprg PgmParse
Version           : 1.0 1.1 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbprb
Solution Type     : kbworkaround</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

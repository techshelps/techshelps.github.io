

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Error Passing Recordset to Excel Using Automation From VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172268">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1997/07/31">
<META NAME="Keywords" CONTENT="APrgDataAcc IAPOLE VB4ALL VB4WIN vbwin xlDAO GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you try to pass a Recordset object to Microsoft Excel using Automation from Microsoft Visual Basic 4.0, it fails with one of the following errors:     Run-time error '1004': Cannot find macro '                '.    (If you are using Microsoft ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAD7,QAH7,QAH6,QBS0,QAPN,QAIJ,QAAP,QAB4,QAW6,QDO5,QA5V,QA2K,QBCF,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Error Passing Recordset to Excel Using Automation From VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172268</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you try to pass a Recordset object to Microsoft Excel using Automation
from Microsoft Visual Basic 4.0, it fails with one of the following errors:
<P>
<PRE>   Run-time error '1004': Cannot find macro '&lt;procedure name&gt;'.
   (If you are using Microsoft Excel for Windows 95, version 7.0)

</PRE>-or-
<P>
<PRE>   Run-time error '13': Type Mismatch
   (If you are using Microsoft Excel 97)

</PRE>This article describes how you can work around this limitation and
successfully pass a Recordset to Microsoft Excel.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
One workaround is to pass the database and Recordset names as string
arguments to an Excel procedure using Automation. The Excel procedure then
creates the Database and Recordset objects and can therefore use
CopyFromRecordset using its own Recordset object.
<P>
Another workaround is to copy the Recordset into an array and pass the
array to Excel using Automation. Following is a step-by-step example on how
to do this:

<OL><P><LI>Start Visual Basic. Form1 is created by default.

<P><LI>Add a command button to Form1.

<P><LI>Add a data control and set its properties as follows:
<P>
<PRE>      DatabaseName       biblio.mdb
      RecordSource      Authors

</PRE><P><LI>Add the following code to the General Declarations section of Form1:
<P>
<P><PRE>      ' User defined type to help determine the
      ' starting cell in the range receiving the recordset
</PRE><P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Type ExlCell
<PRE></PRE>         row As Long
         col As Long
      End Type

      Private Sub CopyRecords(rs As Recordset, ws As Object, _
        StartingCell As ExlCell)
         Dim SomeArray() As Variant
         Dim row As Long, col As Long

         ' You might want to check if rs is not empty
         ' before re-dimensioning the array
         rs.MoveLast
         ReDim SomeArray(rs.RecordCount - 1, rs.Fields.Count - 1)

         ' Copy rs to some array
         rs.MoveFirst
         For row = 0 To rs.RecordCount - 1
            For col = 0 To rs.Fields.Count - 1
               SomeArray(row, col) = rs.Fields(col).Value
               ' Excel will be offended if you try setting one
               ' of its cells to a NULL
               If IsNull(SomeArray(row, col)) Then _
                 SomeArray(row, col) = ""
            Next
            rs.MoveNext
         Next

         ' The range should have the same number of
         ' rows and cols as in the recordset
         ws.Range(ws.Cells(StartingCell.row, StartingCell.col), _
           ws.Cells(StartingCell.row + rs.RecordCount - 1, _
           StartingCell.col + rs.Fields.Count - 1)).Value = SomeArray
      End Sub

      Private Sub Command1_Click()
         Dim stcell As ExlCell
         Dim objExlApp As Object

         ' Get an Excel app object reference
         On Error Resume Next
         Set objExlApp = GetObject(, "Excel.Application")
         ' If Excel is not launched start it
         If Err = 429 Then
            Err = 0
            Set objExlApp = CreateObject("Excel.Application")
            ' Can't create object
            If Err = 429 Then
               MsgBox Err &amp; ": " &amp; Error
               Exit Sub
            End If
         End If
         On Error GoTo 0

         ' Add a new Workbook
         objExlApp.Workbooks.Add

         ' Select the first sheet
         objExlApp.Worksheets("sheet1").Select

         ' Start fill range at A1
         stcell.row = 1
         stcell.col = 1

         ' Call CopyRecords procedure to populate sheet with array
         CopyRecords Data1.Recordset, objExlApp.ActiveSheet, stcell

         ' Show Excel and kill reference
         objExlApp.Visible = True
         objExlApp.Interactive = True
         Set objExlApp = Nothing
      End Sub

</PRE><P><LI>Start the project and click the command button. Excel should start
   (if it is not already started) and fill the first sheet of a new
   workbook with the rows from the Authors table in the biblio.mdb
   database.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
When you program in Excel using VBA, the most efficient way to fill a
sheet's range from a Recordset is by using the CopyFromRecordset method.
However, when you try to call the CopyFromRecordset method using Automation
from Visual Basic 4.0, it fails with a run-time error. A workaround would
seem to pass the Recordset object to a procedure in Excel to allow the
Excel procedure to issue the CopyFromRecordset method. However, when you
try to pass the Recordset object to the Excel procedure, it also fails with
a run-time error.
<P>
These limitations do not apply when you use Automation between Visual Basic
5.0 and Microsoft Excel 97.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Excel<BR>
Keywords          : APrgDataAcc IAPOLE VB4ALL VB4WIN vbwin xlDAO GnrlVb kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:4.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Running Subroutines and Macros from Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108519">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1993/12/13">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel versions 5.0 and later, you can run Microsoft Visual  Basic for Applications Sub procedures and Microsoft Excel version 4.0  macros from a Visual Basic procedure by using the Application.Run and  Application.ExecuteExcel4Macro me...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QAFF,QAH4,QBWS,QAB9,QAPN,QAUJ,QAGI,QAJH,QA50,QAYL,QBLI,QA5F,QAMA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Running Subroutines and Macros from Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108519</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel versions 5.0 and later, you can run Microsoft Visual 
Basic for Applications Sub procedures and Microsoft Excel version 4.0 
macros from a Visual Basic procedure by using the Application.Run and 
Application.ExecuteExcel4Macro methods. You can also run Visual Basic Sub 
procedures with the Call method or by entering the name of a procedure on a 
line by itself.
<P>
This article illustrates several methods that you can use to run Sub 
procedures and Microsoft Excel version 4.0 macros from Visual Basic in
Microsoft Excel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>To Use the Application.Run Method</h3>
 
<P>
You can use the Application.Run method to run Visual Basic Sub procedures 
or Microsoft Excel version 4.0 macros from other Visual Basic procedures. 
The Application.Run method requires one named argument: the name of the 
macro or Sub procedure to be run. (However, other optional arguments may 
also be included.) This name can be a text string (for example, "TestXLM") 
or it can be a variable that is equal to the name of the macro.
<P>
For example, to run a Microsoft Excel version 4.0 macro called TestXLM, you 
could use this method:
<P>
<PRE>   Application.Run ("TestXLM")

</PRE>If you have the variable "MacroToRun" set to "TestXLM," you could use this 
method:
<P>
<PRE>   Application.Run (MacroToRun)

</PRE><h3>To Use the Application.ExecuteExcel4Macro Method</h3>
 
<P>
You can also use the Application.ExecuteExcel4Macro method to run Microsoft
Excel version 4.0 macros or other Visual Basic Sub procedures, but the 
syntax is somewhat different. To use Application.ExecuteExcel4Macro to run 
a macro or Sub procedure, you must also include the Microsoft Excel version 
4.0 RUN() function, as in the following examples:
<P>
<PRE>   Application.ExecuteExcel4Macro "RUN(""TestXLM"")"

   -or-

   Application.ExecuteExcel4Macro "RUN(""" &amp; MacroToRun &amp; """)"

</PRE>Note that when you use Application.ExecuteExcel4Macro, you must use
quotation marks. For example, to use the RUN() function, you must enclose
the name of the argument in quotation marks:
<P>
<PRE>   RUN("TestXLM")

</PRE>Because the entire string must also be enclosed in quotation marks, when
you add quotation marks to the outside of the string, you must also add an
additional quotation mark adjacent to each quotation mark within the 
string. The resulting string is as follows:
<P>
<PRE>   "RUN(""TestXLM"")"

</PRE>The Application.ExecuteExcel4Macro command that uses a variable inside the 
RUN() function is more complex than the equivalent Application.Run method. 
For the command to be properly evaluated, the macro string must be entered 
as:
<P>
<PRE>   "RUN(""" &amp; MacroToRun &amp; """)"

</PRE>This command is evaluated as:
<P>
<PRE>   RUN("" &amp; MacroToRun &amp; "")

</PRE>which is a valid Microsoft Excel version 4.0 macro command.
<P>
<P><h3>To Use the Call Method</h3>
 
<P>
The Call method may be used to run Visual Basic Sub procedures, but not
Microsoft Excel version 4.0 macros. For example, to run the Sub procedure
TestVBSub, you would use this method:
<P>
<PRE>   Call TestVBSub

</PRE>Note that you cannot pass a variable name to the Call method. For example,
if you have the variable "SubToRun" set to "TestVBSub," you cannot run the 
TestVBSub Sub procedure with the following:
<P>
<PRE>   Call SubToRun

</PRE><h3>To Run a Sub Procedure Using Only Its Name</h3>
 
<P>
You can also run a Visual Basic Sub procedure by entering its name on a 
line by itself. For example, if you want your Sub procedure to run the 
TestVBSub subroutine, you would enter
<P>
<PRE>   TestVBSub

</PRE>on a line by itself. When that line in the subroutine is executed, it will
run the TestVBSub subroutine.
<P>
<P><h3>Sample Visual Basic Procedures</h3>
 
<P>
To create six Sub procedures that illustrate the most common methods you 
can use to run a Visual Basic Sub procedure or Microsoft Excel version 4.0 
macro from another Visual Basic procedure, follow these steps:

<OL><P><LI>In a new workbook, insert a Microsoft Excel 4.0 macro sheet called
   Macro1 and a Visual Basic module called Module1.
<P>
   To insert a Visual Basic module in Microsoft Excel 97 or Microsoft
   Excel 98, press ALT+F11 to activate the Visual Basic Editor. Then, click
   Module on the Insert menu.

<P><LI>On the macro sheet, enter the following macro:
<P>
<P><PRE>      A1: TestXLM
      A2: =ALERT("TestXLM works!")
      A3: =RETURN()
</PRE><P>
   This macro displays an alert box.

<P><LI>On the macro sheet, select cell A1.

<P><LI>On the Insert menu, point to Name, and then click Define.

<P><LI>Verify that the following information appears in the Define Name dialog
   box:
<P>
<P><PRE>    - The Names In Workbook box contains the name TestXLM.
    - The Refers To box contains the reference =Macro1!$A$1.
    - The Command option is selected under Macro.
</PRE><P>
   When the settings are as specified above, click OK to define the name
   of the macro.

<P><LI>In Module1, enter the following Sub procedures:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      'The TestVBSub subroutine displays a message box: it is the Visual
      'Basic equivalent of the TestXLM macro shown above.
</PRE><P>
<PRE>      Sub TestVBSub()
          MsgBox "TestVBSub works!"             'Displays a message box.
      End Sub

      'The Test1 Sub procedure makes use of the Application.Run method with
      'hard-coded macro/subroutine names.

      Sub Test1()
          Application.Run ("TestVBSub")
          Application.Run ("TestXLM")
      End Sub

      'The Test2 Sub procedure makes use of the Application.Run method with
      'variable macro/Sub procedure names.

      Sub Test2()
          Dim SubToRun As String, MacroToRun As String
          SubToRun = "TestVBSub"
          MacroToRun = "TestXLM"
          Application.Run (SubToRun)
          Application.Run (MacroToRun)
      End Sub

      'The Test3 Sub procedure makes use of the  
      'Application.ExecuteExcel4Macro
      'method with hard-coded macro/Sub procedure names.

      Sub Test3()
          'Note the extra quotation marks which are contained within the
          'RUN statements. These are required in order for the command to
          'evaluate properly.
          Application.ExecuteExcel4Macro "RUN(""TestVBSub"")"
          Application.ExecuteExcel4Macro "RUN(""TestXLM"")"
      End Sub

      'The Test4 Sub procedure makes use of the 
      'Application.ExecuteExcel4Macro
      'method with variable macro/Sub procedure names.

      Sub Test4()
          Dim SubToRun As String, MacroToRun As String
          SubToRun = "TestVBSub"
          MacroToRun = "TestXLM"
          'Note the extra quotation marks which are contained within the
          'RUN statements. These are required in order for the command to
          'evaluate properly.
          Application.ExecuteExcel4Macro "RUN(""" &amp; SubToRun &amp; """)"
          Application.ExecuteExcel4Macro "RUN(""" &amp; MacroToRun &amp; """)"
      End Sub

      'The Test5 Sub procedure uses the Call method with hard-coded
      'Sub procedure names.

      Sub Test5()
          Call TestVBSub
      End Sub

      'The Test6 Sub procedure runs the TestVBSub subroutine because its 
      'name is entered on a line by itself.

      Sub Test6()
          TestVBSub
      End Sub

</PRE></OL>When you run Test1, Test2, Test3, or Test4, two alert boxes will appear
with the messages "TestVBSub works!" and "TestXLM works!" When you run
Test5 or Test6, one alert box will appear with the message "TestVBSub
works!"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 7.00 8.00 XL97 XL98 XL7 XL5<BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS:5.0,5.0c,7.0,97; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

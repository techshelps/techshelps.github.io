

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Programmatically Restart or Log Off a Computer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168796">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1997/05/21">
<META NAME="Keywords" CONTENT="vb432 VB4WIN vb5all vb5howto VBKBWinAPI vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article demonstrates how to programmatically restart or log off a computer in Visual Basic. The sample code shown in this article creates a project that can normally or forcibly perform these functions on a computer with a Windows 95 or Window...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDKA,QAY5,QAH4,QAB9,QBV8,QBWP,QDIR,QAGI,QDL9,QBWQ,QBWO,QBWN,QBWS,QBS0,QAFF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Programmatically Restart or Log Off a Computer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168796</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional and
   Enterprise Editions for Windows, version 5.0
   on the following platform: x86
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   32-bit only, for Windows, version 4.0
<LI>Microsoft Access versions 7.0, 97
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Word 97 for Windows
<LI>Microsoft PowerPoint 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to programmatically restart or log off a
computer in Visual Basic. The sample code shown in this article creates a
project that can normally or forcibly perform these functions on a computer
with a Windows 95 or Windows NT operating system. A normal procedure allows
the user the opportunity to close all open programs before executing a
restart or log off. A forced procedure automatically closes all open
programs before executing a restart or log off.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Windows API has a function to programmatically shut down and restart
or log off a computer. The Boolean function ExitWindowsEx performs the
following tasks:

<UL><LI>Shut down the system.
<LI>Shut down and restart the system.
<LI>Log off and force all running applications to terminate.
<P>
</UL>The function returns a value as soon as the function initiates a shutdown.
The function returns True if the shutdown will be successful and False if
the function fails. Extended error information is available by calling the
function GetLastError.
<P>
To use this function under Windows NT, enable the SE_SHUTDOWN_NAME security
privilege by using the AdjustTokenPrivileges function. Windows 95 does not
support or require these security privileges.
<P>
The flag passed to the ExitWindowsEx function determines whether the
function performs a forced or normal log off, shutdown, or a restart. You
can pass the following flags to this function:

<UL><LI>EWX_FORCE - Forcibly terminates processes that do not respond to a shut
   down command.
<P>
   NOTE: Using this flag can cause data loss because Windows does not send
   the messages WM_QUERYENDSESSION and WM_ENDSESSION to applications
   currently running in the computer. Use this flag only in cases where
   data loss is not critical.

<LI>EWX_LOGOFF - terminates all processes and then logs off the computer.

<LI>EWX_POWEROFF - shuts down the computer and turns off the power in
   systems with a power-off feature. Under Windows NT, the process that
   calls the ExitWindowsEx function with this flag must have the
   SE_SHUTDOWN_NAME privilege. Windows 95 does not support or require
   this privilege.

<LI>EWX_REBOOT – shuts down and then restarts the computer. Under Windows
   NT, the process that calls the ExitWindowsEx function with this flag
   must have the SE_SHUTDOWN_NAME privilege. Windows 95 does not support
   or require this privilege.

<LI>EWX_SHUTDOWN - shuts down the computer to a point that is safe to turn
   off the power. All file buffers have been flushed to disk, and all
   running processes have stopped. Under Windows NT, the process that
   calls the ExitWindowsEx function with this flag must have the
   SE_SHUTDOWN_NAME privilege. Windows 95 does not support or require
   this privilege.
<P>
</UL><h3>Sample Program</h3>
 
<P>
The sample program illustrates how you can use the ExitWindowsEx function
to perform a shut down or log off. The project has a form with four
command buttons. The program begins by determining the operating system
through the GetVersion function. The operating system determines whether
privileges should be set in order to perform a log off or shut down. The
operating system version is stored in a variable and is then displayed in
a message box. Close the message box and a form appears with four command
buttons. The command buttons perform the following tasks:

<OL><P><LI>Log Off - calls the ExitWindowsEx function with the EWX_Logoff flag to
   log off the user. The user can shut down all running programs.

<P><LI>Forced Log off - calls the ExitWindowsEx function with the EWX_Logoff or
   the EWX_Forced flags to initiate a forced log off.

<P><LI>Shut Down - if the operating system is Windows NT, the correct privilege
   is set. A message box then displays the last error value of the process
   thread. Otherwise, the ExitWindowsEx function is called with the
   EWX_Shutdown flag.

<P><LI>Forced Shut Down - if the operating system is Windows NT, the correct
   privilege is set. A message box then displays the last error value of
   the process thread. Otherwise, the ExitWindowsEx function is called with
   the EWX_Shutdown or the EWX_Force flags to initiate a forced shutdown.
<P>
</OL><h3>Steps To Reproduce Behavior</h3>
 

<OL><P><LI>Start the development environment and add a new form (Access and Visual
   Basic) or UserForm (other Office 97 programs). In Excel 95, you can call
   the code from the Tools|Macro menu.

<P><LI>Place the following objects on the form (or UserForm) and set the
   appropriate properties:
<P>
<PRE>   Control          Name               Caption
   ---------------------------------------------------
   Command Button   cmdLogoff          Log Off
   Command Button   cmdForceLogoff     Force Log Off
   Command Button   cmdShutdown        Shut Down
   Command Button   cmdForceShutdown   Forced Shut Down

</PRE><P><LI>Copy and paste the following code to the form's Module:
<P>
<P><PRE>      Option Explicit
      Private Const EWX_LogOff As Long = 0
      Private Const EWX_SHUTDOWN As Long = 1
      Private Const EWX_REBOOT As Long = 2
      Private Const EWX_FORCE As Long = 4
      Private Const EWX_POWEROFF As Long = 8
</PRE><P>
<P><PRE>      'The ExitWindowsEx function either logs off, shuts down, or shuts
      'down and restarts the system.
      Private Declare Function ExitWindowsEx Lib "user32" _
<PRE></PRE>         (ByVal dwOptions As Long, _
          ByVal dwReserved As Long) As Long

      'The GetLastError function returns the calling thread's last-error
      'code value. The last-error code is maintained on a per-thread basis.
      'Multiple threads do not overwrite each other's last-error code.
      Private Declare Function GetLastError Lib "kernel32" () As Long

      Private Const mlngWindows95 = 0
      Private Const mlngWindowsNT = 1

      Public glngWhichWindows32 As Long

      'The GetVersion function returns the operating system in use.
      Private Declare Function GetVersion Lib "kernel32" () As Long

      Private Type LUID
         UsedPart As Long
         IgnoredForNowHigh32BitPart As Long
      End Type

      Private Type LUID_AND_ATTRIBUTES
         TheLuid As LUID
         Attributes As Long
      End Type

      Private Type TOKEN_PRIVILEGES
         PrivilegeCount As Long
         TheLuid As LUID
         Attributes As Long
      End Type

      'The GetCurrentProcess function returns a pseudohandle for the
      'current process.
      Private Declare Function GetCurrentProcess Lib "kernel32" () As Long

      'The OpenProcessToken function opens the access token associated with
      'a process.
      Private Declare Function OpenProcessToken Lib "advapi32" _
         (ByVal ProcessHandle As Long, _
          ByVal DesiredAccess As Long, _
          TokenHandle As Long) As Long

      'The LookupPrivilegeValue function retrieves the locally unique
      'identifier (LUID) used on a specified system to locally represent
      'the specified privilege name.
      Private Declare Function LookupPrivilegeValue Lib "advapi32" _
         Alias "LookupPrivilegeValueA" _
         (ByVal lpSystemName As String, _
          ByVal lpName As String, _
          lpLuid As LUID) As Long

      'The AdjustTokenPrivileges function enables or disables privileges
      'in the specified access token. Enabling or disabling privileges
      'in an access token requires TOKEN_ADJUST_PRIVILEGES access.
      Private Declare Function AdjustTokenPrivileges Lib "advapi32" _
         (ByVal TokenHandle As Long, _
          ByVal DisableAllPrivileges As Long, _
          NewState As TOKEN_PRIVILEGES, _
          ByVal BufferLength As Long, _
          PreviousState As TOKEN_PRIVILEGES, _
          ReturnLength As Long) As Long

      Private Declare Sub SetLastError Lib "kernel32" _
         (ByVal dwErrCode As Long)

      Private Sub AdjustToken()

      '********************************************************************
      '* This procedure sets the proper privileges to allow a log off or a
      '* shut down to occur under Windows NT.
      '********************************************************************

         Const TOKEN_ADJUST_PRIVILEGES = &amp;H20
         Const TOKEN_QUERY = &amp;H8
         Const SE_PRIVILEGE_ENABLED = &amp;H2

         Dim hdlProcessHandle As Long
         Dim hdlTokenHandle As Long
         Dim tmpLuid As LUID
         Dim tkp As TOKEN_PRIVILEGES
         Dim tkpNewButIgnored As TOKEN_PRIVILEGES
         Dim lBufferNeeded As Long

         'Set the error code of the last thread to zero using the
         'SetLast Error function. Do this so that the GetLastError
         'function does not return a value other than zero for no
         'apparent reason.
         SetLastError 0

         'Use the GetCurrentProcess function to set the hdlProcessHandle
         'variable.
         hdlProcessHandle = GetCurrentProcess()

         If GetLastError &lt;&gt; 0 Then
            MsgBox "GetCurrentProcess error==" &amp; GetLastError
         End If

         OpenProcessToken hdlProcessHandle, _
            (TOKEN_ADJUST_PRIVILEGES Or TOKEN_QUERY), hdlTokenHandle

         If GetLastError &lt;&gt; 0 Then
            MsgBox "OpenProcessToken error==" &amp; GetLastError
         End If

         'Get the LUID for shutdown privilege
         LookupPrivilegeValue "", "SeShutdownPrivilege", tmpLuid

         If GetLastError &lt;&gt; 0 Then
            MsgBox "LookupPrivilegeValue error==" &amp; GetLastError
         End If

         tkp.PrivilegeCount = 1    ' One privilege to set
         tkp.TheLuid = tmpLuid
         tkp.Attributes = SE_PRIVILEGE_ENABLED

         'Enable the shutdown privilege in the access token of this process
         AdjustTokenPrivileges hdlTokenHandle, _
                               False, _
                               tkp, _
                               Len(tkpNewButIgnored), _
                               tkpNewButIgnored, _
                               lBufferNeeded

         If GetLastError &lt;&gt; 0 Then
            MsgBox "AdjustTokenPrivileges error==" &amp; GetLastError
         End If

      End Sub

      Private Sub cmdLogoff_Click()

         ExitWindowsEx (EWX_LogOff), &amp;HFFFF
         MsgBox "ExitWindowsEx's GetLastError " &amp; GetLastError

      End Sub

      Private Sub cmdForceLogoff_Click()

         ExitWindowsEx (EWX_LogOff Or EWX_FORCE), &amp;HFFFF
         MsgBox "ExitWindowsEx's GetLastError " &amp; GetLastError

      End Sub

      Private Sub cmdShutdown_Click()

         If glngWhichWindows32 = mlngWindowsNT Then
            AdjustToken
            MsgBox "Post-AdjustToken GetLastError " &amp; GetLastError
         End If

         ExitWindowsEx (EWX_SHUTDOWN), &amp;HFFFF
         MsgBox "ExitWindowsEx's GetLastError " &amp; GetLastError

      End Sub

      Private Sub cmdForceShutdown_Click()
         If glngWhichWindows32 = mlngWindowsNT Then
            AdjustToken
            MsgBox "Post-AdjustToken GetLastError " &amp; GetLastError
         End If

      ExitWindowsEx (EWX_SHUTDOWN Or EWX_FORCE), &amp;HFFFF
      MsgBox "ExitWindowsEx's GetLastError " &amp; GetLastError

      End Sub

      Private Sub Form_Load()
      '********************************************************************
      '* When the project starts, check the operating system used by
      '* calling the GetVersion function.
      '********************************************************************
         Dim lngVersion As Long

         lngVersion = GetVersion()

         If ((lngVersion And &amp;H80000000) = 0) Then
            glngWhichWindows32 = mlngWindowsNT
            MsgBox "Running Windows NT"
         Else
            glngWhichWindows32 = mlngWindows95
            MsgBox "Running Windows 95"
         End If

      End Sub

</PRE><P><LI>To run the code:
<P>
   - In Visual Basic, run the project or compile to an EXE and run the EXE.
<P>
   - In Access, open the form.
<P>
   - In the other Office 97 applications, add a macro to show the UserForm:
<P>
<PRE>      Sub ShowShutDownForm()
        UserForm1.Show
      End Sub

</PRE></OL>You can run this code from the Tools|Macro menu.
<P>
Also, in the UserForm, the last procedure's declaration needs to be
changed from:
<P>
<PRE>   Private Sub Form_Load()

</PRE>to:
<P>
<PRE>   Sub Form_Initialize()

</PRE><LI>In Excel 95, you can assign the code to be run from a Dialog or from the
   Tools|Macro menu.
<P>
</UL><h3>Notes</h3>
 
<P>
If you aren't implementing the code on a form, the code contained in the
Form_Load must be run prior to the other code.
<P>
Make sure you have saved all running programs before clicking a command
button.
<P>
In Windows 95, your application may remain visible when executing the
logoff and force logoff code. You may want to close your application after
the API call returns. This is not a problem with the shutdown or force
shutdown code.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Win32 Programmer's Reference-Search on the following topics:

<UL><LI>AdjustTokenPrivileges
<LI>ExitWindowsEx
<LI>GetLastError
<LI>Privileges
<LI>Logging Off or Shutting Down
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Log Off Shut Down ExitWindowsEx<BR>
Keywords          : vb432 VB4WIN vb5all vb5howto VBKBWinAPI vbwin GnrlVb kbprg<BR>
Technology        : kbvba<BR>
Version           : WINDOWS:4.0 5.0 7.0 97<BR>
Platform          : NT WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

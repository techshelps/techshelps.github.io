

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PPT: How to Use the AddLine Method </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162709">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/01/27">
<META NAME="Keywords" CONTENT="kbcode kbmacro kbprg kbdta kbdtacode kbpptvba">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article explains how to use the Microsoft Visual Basic for Applications AddLine method to create new lines on your slides.  MORE INFORMATION  The AddLine method uses the following syntax:        .AddLine(BeginX, BeginY, EndX, EndY)  NOTE: The ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBXT,QAIB,QA5V,QBC9,QBC8,QANO,QDKP,QAKE,QBVQ,QABK,QAUD,QAPN,QANF,QA5F P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PPT: How to Use the AddLine Method</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162709</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft PowerPoint 98 Macintosh Edition
<LI>Microsoft PowerPoint 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to use the Microsoft Visual Basic for
Applications AddLine method to create new lines on your slides.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The AddLine method uses the following syntax:
<P>
<PRE>      .AddLine(BeginX, BeginY, EndX, EndY)

</PRE>NOTE: The data type for all AddLine parameters is single.
<P>
<P><h3>AddLine Parameters</h3>
 
<P>
The AddLine method has four parameters:
<P>
<PRE>   BeginX    The X coordinate (in points) for the starting point of the
             line. The coordinate is relative to the top left corner of the
             slide.

   BeginY    The Y coordinate (in points) for the starting point of the
             line. The coordinate is relative to the top left corner of
             the slide.

   EndX      The X coordinate (in points) for the ending point of the
             line. The position is relative to the bottom left corner of
             the slide.

   EndY      The Y coordinate (in points) for the ending point of the
             line. The position is relative to the bottom left corner of
             the slide.

</PRE><h3>Creating Lines</h3>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>The following sample Visual Basic procedure draws a horizontal line across
the middle of the first slide in a presentation.
<P>
<PRE>   Sub DrawHorizontalLine()

      Dim longHeight As Long
      Dim longWidth As Long

      ' Get the slide height and width.
      longHeight = ActivePresentation.PageSetup.SlideHeight
      longWidth = ActivePresentation.PageSetup.SlideWidth

      With ActivePresentation.Slides(1).Shapes

         ' Create the line.
         .AddLine 0, (longHeight \ 2), longWidth, (longHeight \ 2)

      End With

   End Sub

</PRE>The following sample Visual Basic procedure draws a vertical line down the
middle of the first slide in a presentation.
<P>
<PRE>   Sub DrawVerticalLine()

      Dim longHeight As Long
      Dim longWidth As Long

      ' Get the slide height and width.
      longHeight = ActivePresentation.PageSetup.SlideHeight
      longWidth = ActivePresentation.PageSetup.SlideWidth

      With ActivePresentation.Slides(1).Shapes

         ' Create the line.
         .AddLine (longWidth \ 2), 0, (longWidth \ 2), longHeight

      End With

   End Sub

</PRE>The following sample Visual Basic procedure draws two diagonal lines. The
diagonal lines form an X on the first slide in a presentation.
<P>
<PRE>    Sub DrawDiagonalLines()

      Dim longHeight As Long
      Dim longWidth As Long

      ' Get the slide height and width.
      longHeight = ActivePresentation.PageSetup.SlideHeight
      longWidth = ActivePresentation.PageSetup.SlideWidth

      With ActivePresentation.Slides(1).Shapes

         ' Create line from top left to bottom right.
         .AddLine 0, 0, longWidth, longHeight

         ' Create line from top right to bottom left.
         .AddLine longWidth, 0, 0, longHeight

      End With

   End Sub

</PRE><h3>Using the Return Value</h3>
 
<P>
The AddLine method returns a reference to a shape that you created. You can
use the reference to modify the properties of the line.
<P>
The following sample Visual Basic procedure uses the return value to change
the line color and weight.
<P>
<PRE>   Sub ChangeLineColor()

      Dim longHeight As Long
      Dim longWidth As Long

      Dim MyLine As Shape

      ' Get the slide height and width.
      longHeight = ActivePresentation.PageSetup.SlideHeight
      longWidth = ActivePresentation.PageSetup.SlideWidth

      With ActivePresentation.Slides(1).Shapes

         ' Get the return value and create the line.
         Set MyLine = .AddLine(100, 100, 300, 100)

         ' Change line weight to 50 point.
         MyLine.Line.Weight = 50

         ' Change line color to red.
         MyLine.Line.ForeColor.RGB = RGB(255, 0, 0)

      End With

   End Sub

</PRE>NOTE: Because the AddLine method returns an object, use the Set command
to get the returned shape reference.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about creating Visual Basic for Applications macros,
click the Office Assistant in Microsoft PowerPoint, type "how to create a
macro," click Search, and then click to view "Create a macro in Visual
Basic Editor."
<P>
For more information about running Visual Basic for Applications macros,
click the Office Assistant in Microsoft PowerPoint, type "how to run a
macro," click Search, and then click to view "Run a macro."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If the Assistant is not able to answer your query, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176476.htm">Q176476</A></B>
   TITLE     : OFF: Office Assistant Not Answering Visual Basic Questions

</PRE>For more information about getting help with Visual Basic for Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 ppt8 vba vbe powerpnt 8 ppt8.0<BR>
Keywords          : kbcode kbmacro kbprg kbdta kbdtacode kbpptvba<BR>
Version           : WINDOWS:97; MACINTOSH:98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Hardware          : MAC x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OL97: Programming Examples for Referencing Items and Folders </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q180696">
<META NAME="KBModify" CONTENT="1998/03/02">
<META NAME="KBCreate" CONTENT="1998/02/06">
<META NAME="Keywords" CONTENT="OffVBA OffVBS">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The Microsoft Outlook 97 object model is commonly used to access various types of items in folders. This article provides an overview of the various methods, properties, and objects that can be used to refer to Outlook items and folders.  This arti...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXS,QAFI,QAPN,QBVO,QAH4,QAPF,QBUP,QBRU,QABA,QAL7,QAYC,QDNQ,QA6A,QA2K,QAK5 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OL97: Programming Examples for Referencing Items and Folders</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q180696</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Outlook 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Outlook 97 object model is commonly used to access various
types of items in folders. This article provides an overview of the various
methods, properties, and objects that can be used to refer to Outlook items
and folders.
<P>
This article summarizes the following topics:
<P>
<PRE>   Referencing Existing Folders
    - GetDefaultFolder Method
    - Folders Object
    - Parent Property
    - GetSharedDefaultFolder Method
    - GetFolderFromID Method

   Creating and Referencing New Folders
    - Folders.Add Method

   Creating and Referencing New Items
    - CreateItem Method
    - Items.Add Method
    - CreateItemFromTemplate Method

   Referencing Existing Items
    - Using Items(I) or For Each...Next
    - Using Items("This is the subject")
    - Find Method
    - Restrict Method

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>Note: Visual Basic Scripting Edition (VBScript) code must use the numeric
value of the constants that are defined in the Outlook object library. You
can find a listing of these values in the Microsoft Outlook object library
Help file (Vbaoutl.hlp) under the "Microsoft Outlook Constants" Topic.
<P>
<P><h3>Referencing Existing Folders</h3>
 
<P>
GetDefaultFolder Method:
<P>
Default folders are those that are at the same level as the Inbox that
receives incoming mail. If you have more than one Inbox in your profile,
pressing CTRL+SHIFT+I always selects the default Inbox. The default folders
are those that most users work with on a regular basis, such as the
Calendar, Contacts, and Tasks folders. You can easily refer to these
folders using the GetDefaultFolder method. GetDefaultFolder takes one
argument, which is the type of folder you want to refer to. The following
examples assign the object variable MyFolder to the default Contacts
folder:
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set MyFolder = olns.GetDefaultFolder(olFolderContacts)

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set MyFolder = olns.GetDefaultFolder(10)

</PRE>Folders Object:
<P>
You can use the Folders object to refer to any folder that is visible in
the Outlook folder list. This object is typically used to refer to an
Exchange public folder or any other folder that is not a default Outlook
folder.
<P>
The following examples illustrate how to refer to a public folder called
"My Public Folder." Note that you typically start at the top-most folder
and work your way down to the folder you need to reference. Also note that
the folder names are case-sensitive and must exactly match the names as
they appear in the Outlook folder list.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set MyFolder1 = olns.Folders("Public Folders")
   Set MyFolder2 = MyFolder1.Folders("All Public Folders")
   Set MyFolder3 = MyFolder2.Folders("My Public Folder")

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set MyFolder1 = olns.Folders("Public Folders")
   Set MyFolder2 = MyFolder1.Folders("All Public Folders")
   Set MyFolder3 = MyFolder2.Folders("My Public Folder")

</PRE>The following examples illustrate how you can refer to a folder called
"Business Tasks," which is a subfolder of the default Tasks folder.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set MyTasksFolder = olns.GetDefaultFolder(olFolderTasks)
   Set MyFolder = MyTasksFolder.Folders("Business Tasks")

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set MyTasksFolder = olns.GetDefaultFolder(13)
   Set MyFolder = MyTasksFolder.Folders("Business Tasks")

</PRE>Parent Property:
<P>
If you already have a reference to an Outlook item or folder, then you can
use its Parent property to create a reference to the folder the item or
folder is located in.
<P>
The following examples return the name of a folder for a particular item:
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set MyItem = ol.CreateItem(olMailItem) ' Create new item.
   MyItem.Save                            ' Save it to Inbox.
   Set MyFolder = MyItem.Parent           ' MyFolder = Inbox.

   ' VBScript code example.
   ' Returns the folder of the current item.
   Set MyFolder = Item.Parent

</PRE>GetSharedDefaultFolder:
<P>
You can use this method if someone has given you delegate permissions to
one of their default folders. In addition, you must have already connected
to the folder in Outlook by clicking the File menu, clicking Open Special
Folder, and then clicking Exchange Server Folder.
<P>
For more information about accessing the folders of other people, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OUTLOOK/Q160302.htm">Q160302</A></B>
   TITLE     : OL97: How to Open Someone Else's Calendar or Other Folder

</PRE>Once Outlook is set up to use someone else's folder, the
GetSharedDefaultFolder method is used in the same fashion as
GetDefaultFolder, except you specify one additional argument -- the name of
the other person's folder you want to reference. This example first
resolves the other person's name to verify that it is a valid name that can
be used with the GetSharedDefaultFolder method.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set myRecipient = olns.CreateRecipient("John Smith")
   myRecipient.Resolve
   If myRecipient.Resolved Then
      Set JohnFolder = olns.GetSharedDefaultFolder _
         (myRecipient, olFolderContacts)
   End If

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set myRecipient = olns.CreateRecipient("John Smith")
   myRecipient.Resolve
   If myRecipient.Resolved Then
      Set JohnFolder = olns.GetSharedDefaultFolder _
         (myRecipient, 10)
   End If

</PRE>GetFolderFromID:
<P>
This method would typically be used only in more complex solutions where a
solution keeps track of both the StoreID and EntryID of a folder so that it
can be quickly referenced at a later time.
<P>
For more information about using the GetFolderFromID method, please see
the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q170991.htm">Q170991</A></B>
   TITLE     : OL97: Programming with EntryIDs, StoreIDs and GetItemFromID

</PRE><h3>Creating and Referencing New Folders</h3>
 
<P>
Folders.Add Method:
<P>
Using the Add method on the Folders collection allows you to create a new
folder. The first argument specifies the name of the folder and the second
argument specifies the type of folder. The following example adds a
Business Tasks folder under your default tasks folder. Because the folder
type is not specified, it will inherit the type of the parent folder.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set MyTasksFolder = olns.GetDefaultFolder(olFolderTasks)
   Set MyNewFolder = MyTasksFolder.Folders.Add("Business Tasks")

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set MyTasksFolder = olns.GetDefaultFolder(13)
   Set MyNewFolder = MyTasksFolder.Folders.Add("Business Tasks")

</PRE><h3>Creating and Referencing New Items</h3>
 
<P>
CreateItem Method:
<P>
The CreateItem method creates a new default Outlook item. If you need to
create an item based on a custom form you have created, use the Items.Add
method below. The CreateItem method is conveniently located off of the top-
level application object in the Outlook object model. The method takes only
one argument, a constant indicating the type of item to create.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set MyTaskItem = ol.CreateItem(olTaskItem)
   MyTaskItem.Display

   ' VBScript code example.
   Set MyTasktem = Item.Application.CreateItem(13)
   MyTaskItem.Display

</PRE>Items.Add Method:
<P>
Using the Add method on the Items collection allows you to create a new
item based on any message class, whether it is a default Outlook message
class such as IPM.Contact, or a message class for a custom form, such as
IPM.Contact.MyForm. In order to use the Items.Add method, you must first
reference the folder where you want to create a new item.
<P>
For more information about message classes, please see the following
articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176567.htm">Q176567</A></B>
   TITLE     : OL97: Working with Form Definitions and
               One-Off Forms

   ARTICLE-ID: <B><A HREF="../OUTLOOK/Q170301.htm">Q170301</A></B>
   TITLE     : OL97: How to Update Existing Items to Use a New
               Custom Form

</PRE>The following examples use the Items.Add method to create a new item based
on a custom contact form called MyForm:
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set myFolder = olns.GetDefaultFolder(olFolderContacts)
   Set MyItem = MyFolder.Items.Add("IPM.Contact.MyForm")
   MyItem.Display

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set myFolder = olns.GetDefaultFolder(10)
   Set MyItem = MyFolder.Items.Add("IPM.Contact.MyForm")
   MyItem.Display

</PRE>The following examples use the Items.Add method to create a new default
contact item:
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set myFolder = olns.GetDefaultFolder(olFolderContacts)
   Set MyItem = MyFolder.Items.Add
   MyItem.Display

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set myFolder = olns.GetDefaultFolder(10)
   Set MyItem = MyFolder.Items.Add
   MyItem.Display

</PRE>NOTE: If you use the Items.Add method, it does not matter what the default
form for the folder is. You can specify any valid message class as long as
it has been published in the folder or has been published in the personal
or organizational forms library.
<P>
CreateItemFromTemplate Method:
<P>
Use the CreateItemFromTemplate method to create a new item based on an
Outlook template file (.oft) or .msg file format. Because most forms are
published in a folder or forms library, this method is not commonly used.
Probably the most common reason to use this method would be if you were
creating a Microsoft Visual Basic Setup program to install forms for an
Outlook solution. This would typically be done for users who do not have
network access or typically work off-line in Outlook. The Visual Basic
program would do the following:

<UL><LI>Automate Outlook.

<LI>Use CreateItemFromTemplate to open a form from a network share
   or floppy disk.

<LI>Using the Outlook object model, publish the form for later use.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   ' Set MyFolder to the default contacts folder.
   Set MyFolder = olns.GetDefaultFolder(olFolderContacts)
   ' Set MyItem to an .oft file on a floppy disk.
   Set MyItem = ol.CreateItemFromTemplate("A:\Contact.oft")
   ' Set MyForm to the item Form Description for publishing.
   Set MyForm = MyItem.FormDescription
   ' Name the form, which also sets its message class.
   MyForm.Name = "My Contact"
   ' Publish the folder to the Contacts folder.
   MyForm.PublishForm olFolderRegistry, MyFolder
   ' Close and do not save changes to the item.
   MyItem.Close olDiscard

</PRE></UL><h3>Referencing Existing Items</h3>
 
<P>
Using Items(I) or For Each...Next:
<P>
Typically these approaches are used to loop through all of the items in a
folder. The Items collection contains all of the items in a particular
folder, and you can specify which item to reference by using an index with
the Items collection. This is typically used with the For I = 1 to n
programming construct.
<P>
If you are using VBScript version 2.0 or later, you can instead use the For
Each...Next programming construct to loop through the items in the
collection without specifying an index. Both approaches achieve the same
result.
<P>
The following examples use the Items(I) approach to loop through all of the
contacts in the Contacts folder and display their FullName field in a
dialog box.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   ' Set MyFolder to the default contacts folder.
   Set MyFolder = olns.GetDefaultFolder(olFolderContacts)
   ' Get the number of items in the folder.
   NumItems = MyFolder.Items.Count
   ' Set MyItem to the collection of items in the folder.
   Set MyItems = MyFolder.Items
   ' Loop through all of the items in the folder.
   For I = 1 to NumItems
      MsgBox MyItems(I).FullName
   Next

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   ' Set MyFolder to the default contacts folder.
   Set MyFolder = olns.GetDefaultFolder(10)
   ' Get the number of items in the folder.
   NumItems = MyFolder.Items.Count
   ' Set MyItem to the collection of items in the folder.
   Set MyItems = MyFolder.Items
   ' Loop through all of the items in the folder.
   For I = 1 to NumItems
      MsgBox MyItems(I).FullName
   Next

</PRE>The following examples use the For Each...Next construct to achieve the
same result as the preceding examples:
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   ' Set MyFolder to the default contacts folder.
   Set MyFolder = olns.GetDefaultFolder(olFolderContacts)
   ' Set MyItems to the collection of items in the folder.
   Set MyItems = MyFolder.Items
   For Each SpecificItem in MyItems
      MsgBox SpecificItem.FullName
   Next

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   ' Set MyFolder to the default contacts folder.
   Set MyFolder = olns.GetDefaultFolder(10)
   ' Set MyItem to the collection of items in the folder.
   Set MyItems = MyFolder.Items
   For Each SpecificItem in MyItems
      MsgBox SpecificItem.FullName
   Next

</PRE>Using Items("This is the subject"):
<P>
You can also use the Items collection and specify a text string that
matches the Subject field of an item. This approach is not commonly used.
<P>
The following examples display an item in the Inbox whose subject contains
"Please help on Friday!"
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   ' Set MyFolder to the default Inbox.
   Set MyFolder = olns.GetDefaultFolder(olFolderInbox)
   Set MyItem = MyFolder.Items("Please help on Friday!")
   MyItem.Display

   ' VBScript code example.
   Set olns = Item.Application.GetNameSpace("MAPI")
   ' Set MyFolder to the default Inbox.
   Set MyFolder = olns.GetDefaultFolder(6)
   Set MyItem = MyFolder.Items("Please help on Friday!")
   MyItem.Display

</PRE>Find Method:
<P>
Use the Find method to search for an item in a folder based on the value of
one of its fields. If the Find is successful, you can then use the FindNext
method to check for additional items that meet the same search criteria.
<P>
The following examples search to see if you have any high priority
appointments.
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNamespace("MAPI")
   Set myFolder = olns.GetDefaultFolder(olFolderTasks)
   Set MyTasks = myFolder.Items
   ' Importance corresponds to Priority on the task form.
   Set MyTask = MyTasks.Find("[Importance] = ""High""")
   If MyTask Is Nothing Then ' the Find failed
      MsgBox "Nothing important. Go party!"
   Else
      MsgBox "You have something important to do!"
   End If

   ' VBScript code example.
   Set olns = Item.Application.GetNamespace("MAPI")
   Set myFolder = olns.GetDefaultFolder(13)
   Set MyTasks = myFolder.Items
   ' Importance corresponds to Priority on the task form.
   Set MyTask = MyTasks.Find("[Importance] = ""High""")
   If MyTask Is Nothing Then ' the Find failed
      MsgBox "Nothing important. Go party!"
   Else
      MsgBox "You have something important to do!"
   End If

</PRE>Restrict Method:
<P>
The Restrict method is similar to the Find method, but instead of returning
a single item, it returns a collection of items that meet the search
criteria. For example, you might use this method to find all contacts who
work at the same company.
<P>
The following examples display all of the contacts who work at ACME
Software:
<P>
<PRE>   ' Automation code example.
   Set ol = New Outlook.Application
   Set olns = ol.GetNameSpace("MAPI")
   Set MyFolder = olns.GetDefaultFolder(olFolderContacts)
   Set MyItems = MyFolder.Items
   MyClause = "[CompanyName] = ""ACME Software"""
   Set MyACMEItems = MyItems.Restrict(MyClause)
   For Each MyItem in MyACMEItems
      MyItem.Display
   Next

   ' VBScript code example.
   ' Requires VBScript version 2.0 or later.
   Set olns = Item.Application.GetNameSpace("MAPI")
   Set MyFolder = olns.GetDefaultFolder(10)
   Set MyItems = MyFolder.Items
   MyClause = "[CompanyName] = ""ACME Software"""
   Set MyACMEItems = MyItems.Restrict(MyClause)
   For Each MyItem in MyACMEItems
      MyItem.Display
   Next

</PRE>For more information about using the Restrict and Find methods, please see
the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q171115.htm">Q171115</A></B>
   TITLE     : OL97: How to Use the Restrict Method

</PRE>GetItemFromID Method:
<P>
This method would typically be used only in more complex solutions where a
solution keeps track of both the StoreID and EntryID of an item so that it
can be quickly retrieved at a later time.
<P>
For more information about using the GetItemFromID method, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q170991.htm">Q170991</A></B>
   TITLE     : OL97: Programming with EntryIDs, StoreIDs and
               GetItemFromID

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about creating solutions with Microsoft Outlook 97,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     : OL97: How to Get Help Programming with Outlook

   Article-ID: <B><A HREF="../vbapps/Q170783.htm">Q170783</A></B>
   Title     : OL97: Q&amp;A: Questions about Customizing or
               Programming Outlook
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97<BR>
Keywords          : OffVBA OffVBS<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

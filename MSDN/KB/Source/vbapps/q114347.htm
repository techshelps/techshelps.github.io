

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: OLE Automation Objects with GetObject and CreateObject </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114347">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/05/01">
<META NAME="Keywords" CONTENT="IAPOLE VB4ALL VB4WIN vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article documents the behavior of top-level Microsoft OLE Automation objects in Microsoft Word, Microsoft Excel, and Microsoft Project when manipulated by the Visual Basic CreateObject() and GetObject() functions.  Because only the products an...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAIH,QAPN,QBQU,QAW6,QAHD,QADX,QAEF,QAF3,QAUJ,QADR,QBXS,QAJN,QDO5,QDNM V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: OLE Automation Objects with GetObject and CreateObject</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114347</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
<LI>Standard and Professional Editions of Microsoft Visual Basic
   Programming System, version 4.0, for Windows
<LI>Microsoft Excel, versions 5.0 and 7.0
<LI>Microsoft Project, versions 4.0 and 4.1
<LI>Microsoft Word for Windows, versions 6.0 and 7.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article documents the behavior of top-level Microsoft OLE Automation
objects in Microsoft Word, Microsoft Excel, and Microsoft Project when
manipulated by the Visual Basic CreateObject() and GetObject() functions.
<P>
Because only the products and versions listed at the beginning of this
article support OLE 2.0 Automation, the version-dependent top-level OLE
Automation objects, such as Excel.Application.5, function the same way as
the version-independent top-level OLE automation objects such as
Excel.Application. Therefore, only the version-independent top-level OLE
Automation objects are discussed in this article.
<P>
In addition, this article does not discuss the possibility of other
applications referencing the same objects or the possibility of running
out of resources or memory.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Each Microsoft application that currently supports OLE Automation behaves
differently with respect to how its top-level OLE Automation objects
function. The following sections list the behaviors of each application and
each possible syntax used with each top-level OLE Automation objects within
that application.
<P>
<P><h3>Microsoft Excel Versions 5.0 &amp; 7.0</h3>
 

<UL><LI>Excel exposes three top-level OLE Automation objects (Application,
   Sheet, and Chart).
<LI>Excel supports multiple instances.
<LI>New instances of Excel created through top-level OLE Automation objects
   are invisible. They can be made visible by setting the visible property
   of the application object to True (...Application.Visible = True).
<LI>In some cases, Excel creates invisible Workbooks. They can be made
   visible by setting the visible property of the window to true
   (...Window(n).Visible = True).
<LI>In some cases, Excel does not create a workbook. To create one, use the
   add method of the Workbooks collection (...Workbooks.Add).
<LI>To remove an instance of Excel from memory, you must use the quit method
   of the application object (...Application.Quit).
<P>
</UL><h3>Syntax Statements for Microsoft Excel Versions 5.0 &amp; 7.0 Application Object</h3>
 
<P>
Set Obj = CreateObject("Excel.Application")

<UL><LI>Creates a new invisible instance of Excel.
<LI>No workbooks are loaded.
<P>
</UL>Set Obj = GetObject("", "Excel.Application")

<UL><LI>Creates a new invisible instance of Excel.
<LI>No workbooks are loaded.
<P>
</UL>Set Obj = GetObject(, "Excel.Application")

<UL><LI>Tries to get an existing instance of Excel at random. If an instance
   is found, Obj points to it.
<LI>Fails if there is not an existing instance.
<P>
</UL><h3>Syntax Statements for Microsoft Excel Versions 5.0 &amp; 7.0 Sheet Object</h3>
 
<P>
Set Obj = CreateObject("Excel.Sheet")

<UL><LI>If there are no instances of Excel, a new invisible instance of Excel
   is created with a workbook named "Object" containing one worksheet
   named "Sheet1."
<LI>If one instance of Excel exists, a new visible workbook is added
   named "Object" containing one worksheet named "Sheet1."
<LI>If multiple instances of Excel exist, a new workbook is added to one
   instance chosen at random. The workbook name is "Object" and it
   contains one worksheet named "Sheet1."
<LI>If Obj goes out of scope, the workbook is removed. However, the
   instance of Excel remains in memory.
<P>
</UL>Set Obj = GetObject("", "Excel.Sheet")

<UL><LI>If there are no instances of Excel, a new invisible instance of Excel
   is created with a workbook named "Object" containing one worksheet
   named "Sheet1."
<LI>If one instance of Excel exists, a new workbook is added named
   "Object" containing one worksheet named "Sheet1."
<LI>If multiple instances of Excel exist, a new workbook is added to one
   instance chosen at random. The workbook name is "Object," and it
   contains one worksheet named "Sheet1."
<LI>If Obj goes out of scope, the workbook is removed. However, the
   instance of Excel remains in memory.
<P>
</UL>Set Obj = GetObject(, "Excel.Sheet")

<UL><LI>Always fails.
<P>
</UL>Set Obj = GetObject("C:\BOOK.XLS", "Excel.Sheet")

<UL><LI>If no instances of Excel exists, a new invisible instance is created
   with an invisible workbook.
<LI>If one instance of Excel exists, a new invisible workbook is loaded.
   If the loaded instance already has the specified workbook loaded,
   that workbook is used.
<LI>If more than one instance of Excel is loaded, a new invisible
   workbook is loaded into one at random. If one of the instances
   already has the specified workbook open, an error occurs unless
   the random instance chosen is the one using the specified workbook.
<LI>Obj points to the first worksheet in the specified workbook.
<LI>Fails if workbook does not exist.
<LI>When Obj goes out of scope, the instance of Excel stays loaded in
   memory. However, the specified workbook will be unloaded unless the
   invisible workbook was made visible.
<P>
</UL><h3>Syntax Statements for Microsoft Excel Versions 5.0 &amp; 7.0 Chart Object</h3>
 
<P>
Set Obj = CreateObject("Excel.Chart")

<UL><LI>If there are no instances of Excel, a new invisible instance of Excel
   is created with a workbook named "Object" containing one chart named
   "Chart1" and one worksheet named "Sheet1."
<LI>If one instance of Excel exists, a new workbook is added named
   "Object" containing one chart named "Chart1" and one worksheet named
   "Sheet1" by default.
<LI>If multiple instances of Excel exist, a new Workbook is added to one
   instance chosen at random. The workbook's default name is "Object,"
   and it contains one chart named "Chart1" and one worksheet named
   "Sheet1."
<LI>If Obj goes out of scope, the workbook is removed. However, the
   instance of Excel remains in memory.
<P>
</UL>Set Obj = GetObject("", "Excel.Chart")

<UL><LI>If there are no instances of Excel, a new invisible instance of Excel
   is created with a workbook named "Object" containing one chart named
   "Chart1" and one worksheet named "Sheet1."
<LI>If one instance of Excel exists, a new workbook is added named
   "Object" containing one chart named "Chart1" and one worksheet named
   "Sheet1" by default.
<LI>If multiple instances of Excel exist, a new Workbook is added to one
   instance chosen at random. The workbook's default name is "Object"
   and it contains one chart named "Chart1" and one worksheet named
   "Sheet1."
<LI>If Obj goes out of scope, the workbook is removed. However, the
<P><PRE>      instance of Excel remains in memory.
</PRE><P>
</UL>Set Obj = GetObject(, "Excel.Chart")

<UL><LI>Always fails.
<P>
</UL>Set Obj = GetObject("C:\BOOK.XLS", "Excel.Chart")

<UL><LI>If no instances of Excel exist, a new invisible instance is created
   with an invisible workbook.
<LI>If one instance of Excel exists, an invisible workbook is loaded. If
   the loaded instance already has the specified workbook loaded, that
   workbook is used.
<LI>If more than one instance of Excel is loaded, an invisible workbook
   is loaded into one at random. If one of the instances already running
   has the specified workbook open an error occurs unless the random
   instance chosen is the one using the specified workbook.
<LI>Obj points to the first chart in the workbook.
<LI>Fails if workbook does not exist.
<LI>When Obj goes out of scope, the instance of Excel stays loaded in
   memory. However, the specified workbook will be unloaded unless the
   invisible workbook was made visible.
<P>
</UL><h3>Microsoft Word Version 6.0</h3>
 

<UL><LI>Word exposes one top level OLE Automation object (Basic).
<LI>Word supports multiple instances.
<LI>Instances of Word created with its top level OLE Automation object are
   visible.
<LI>When the OLE Automation object goes out of scope, the instance of Word
   is unloaded unless the object was created from a previous instance.
<P>
</UL><h3>Syntax Statements for Microsoft Word Version 6.0 Basic Object</h3>
 
<P>
Set Obj = CreateObject("Word.Basic")

<UL><LI>If no instances of Word exist, a new visible instance is loaded that
   does not contain a document. If Obj goes out of scope, Word is
   unloaded from memory.
<LI>If an instance of Word exists, Obj points to it. If Obj goes out of
   scope, the instance of Word remains in memory.
<LI>If more than one instance of Word exists, Obj points to one chosen
   at random. If Obj goes out of scope, all the instances remain in
   memory.
<P>
</UL>Set Obj = GetObject("", "Word.Basic")

<UL><LI>If no instances of Word exist, a new visible instance is loaded that
   does not contain a document. If Obj goes out of scope, Word is
   unloaded from memory.
<LI>If an instance of Word exists, Obj points to it. If Obj goes out of
   scope, the instance of Word remains in memory.
<LI>If more than one instance of Word exists, Obj points to one chosen
   at random. If Obj goes out of scope, all the instances remain in
   memory.
<P>
</UL>Set Obj = GetObject(, "Word.Basic")

<UL><LI>Always Fails.
<P>
</UL><h3>Microsoft Word Version 7.0</h3>
 

<UL><LI>Word exposes one top level OLE Automation object (Basic).
<LI>Word supports multiple instances.
<LI>Instances of Word created with its top level OLE Automation object are
   invisible, but can be made visible by issuing the Wordbasic Appshow
   command.
<LI>When the OLE Automation object goes out of scope, the instance of Word
   is unloaded unless the object was created from a previous instance.
<P>
</UL><h3>Syntax Statements for Microsoft Word Version 7.0 Basic Object</h3>
 
<P>
Set Obj = CreateObject("Word.Basic")

<UL><LI>If no instances of Word exist, a new invisible instance is loaded
   that does not contain a document. If Obj goes out of scope, Word is
   unloaded from memory.
<LI>If an instance of Word exists, Obj points to it. If Obj goes out of
   scope, the instance of Word remains in memory.
<LI>If more than one instance of Word exists, Obj points to one chosen
   at random. If Obj goes out of scope, all the instances remain in
   memory.
<P>
</UL>Set Obj = GetObject("", "Word.Basic")

<UL><LI>If no instances of Word exist, a new invisible instance is loaded
   that does not contain a document. If Obj goes out of scope, Word is
   unloaded from memory.
<LI>If an instance of Word exists, Obj points to it. If Obj goes out of
   scope, the instance of Word remains in memory.
<LI>If more than one instance of Word exists, Obj points to one chosen
   at random. If Obj goes out of scope, all the instances remain in
   memory.
<P>
</UL>Set Obj = GetObject(, "Word.Basic")

<UL><LI>Always Fails.
<P>
</UL><h3>Microsoft Project Versions 4.0 &amp; 4.1</h3>
 

<UL><LI>Project exposes two top-level OLE Automation objects (Application and
   Project).
<LI>Project does not support multiple instances.
<LI>New instances of Project created through top-level OLE Automation
   objects are invisible. They can be made visible by setting the visible
   property of the application object to true
   (...Application.Visible = True).
<LI>In some cases, Project creates an invisible project.
<LI>If an instance of Project is not unloaded, use the quit method of the
   application object to unload it (...Application.Quit).
<P>
</UL>Syntax Statements for Microsoft Project Versions 4.0 &amp; 4.1 Application
Object
 
<P>
Set Obj = CreateObject("MSProject.Application")

<UL><LI>If no instance of Project exists, a new invisible instance is loaded.
   If Obj goes out of scope, the instance of Project is unloaded.
<LI>If an instance of Project exists, Obj points to it. If Obj goes out
   of scope, the instance of Project is not unloaded.
<LI>No projects are loaded.
<P>
</UL>Set Obj = GetObject("", "MSProject.Application")

<UL><LI>If no instance of Project exists, a new invisible instance is loaded.
   If Obj goes out of scope, the instance of Project is unloaded.
<LI>If an instance of Project exists, Obj points to it. If Obj goes out
   of scope, the instance of Project is not unloaded.
<LI>No projects are loaded.
<P>
</UL>Set Obj = GetObject(, "MSProject.Application")

<UL><LI>If an instance of Project exists, Obj points to it. No projects are
   loaded.
<LI>Fails if there is no existing instance.
<P>
</UL><h3>Syntax Statements for Microsoft Project Versions 4.0 &amp; 4.1 Project Object</h3>
 
<P>
Set Obj = CreateObject("MSProject.Project")

<UL><LI>If no instance of Project exists, a new invisible instance is
   created, and Obj points to a newly created invisible project object.
   The project is named "Project1" by default. If Obj goes out of scope,
   the instance of Project is unloaded from memory.
<LI>If an instance of Project exists, Obj points to a newly created
   invisible project object. Existing projects will still be loaded. If
   Obj goes out of scope, Project will not be unloaded.
<P>
</UL>Set Obj = GetObject("", "MSProject.Project")

<UL><LI>If no instance of Project exists, a new invisible instance is
   created, and Obj points to a newly created invisible project object.
   The project is named "Project1" by default. If Obj goes out of scope,
   the instance of Project is unloaded from memory.
<LI>If an instance of Project exists, Obj points to a newly created
   invisible project object. Existing projects will still be loaded. If
   Obj goes out of scope, Project will not be unloaded.
<P>
</UL>Set Obj = GetObject(, "MSProject.Project")

<UL><LI>Always Fails.
<P>
</UL>Set Obj = GetObject("C:\PROJ.MPP", "MSProject.Project")

<UL><LI>If no instance of Project exists, a new invisible instance is loaded
   with the specified project file. The project is not visible.
<LI>If an instance of Project exists, the project is loaded but it is not
   visible, and Obj points to it. Existing projects will be loaded.
   If the specific project was already loaded, the statement will fail.
<LI>Fails if project file does not exist.
<P>
</UL>NOTE: When an object variable goes out of scope, it is de-referenced. The
object reference count is de-cremented, and if it reaches zero, the object
can be removed from memory. You can explicitly de-reference an object by
setting it to nothing (Set Obj = Nothing). This should have the same effect
as the object variable going out of scope.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: W_VBApp<BR>
Keywords          : IAPOLE VB4ALL VB4WIN vbwin GnrlVb kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:3.0 4.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

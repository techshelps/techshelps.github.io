

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use OLE Automation with Microsoft Outlook 97 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170262">
<META NAME="KBModify" CONTENT="1998/03/02">
<META NAME="KBCreate" CONTENT="1997/06/17">
<META NAME="Keywords" CONTENT="IAPOLE vb432 VB4WIN vb5all vb5howto vbwin kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Microsoft Outlook 97 provides a complete type library and can be automated to build useful group software and mail-enabled applications. This article illustrates, by example, how to use OLE Automation to create and retrieve properties of Microsoft ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVO,QAYC,QBXS,QAPN,QAPF,QANF,QBS0,QAIJ,QAFI,QBV0,QBDP,QA4S,QA4R,QAFF,QBUP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use OLE Automation with Microsoft Outlook 97</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170262</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   32-bit only, for Windows, version 4.0
<LI>Microsoft Outlook 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Outlook 97 provides a complete type library and can be automated
to build useful group software and mail-enabled applications. This article
illustrates, by example, how to use OLE Automation to create and retrieve
properties of Microsoft Outlook 97 mail messages, appointments, and
contacts.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NOTE: To use the following examples, you must create a reference to the
"Microsoft Outlook 8.0 Object Library."
<P>
<P><h3>Creating and Sending a New Mail Item</h3>
 
<P>
The following example illustrates how you can create and send a new mail
message with Microsoft Outlook 97. The CreateItem method is used to create
a new Outlook item. CreateItem takes only one argument; which specifies the
type of item to create. In this example, the argument is a Microsoft
Outlook constant, olMailItem, which indicates the creation of a MailItem:
<P>
<PRE>   Sub SendMail()

   Dim objOutlook As New Outlook.Application
   Dim objMail As MailItem

       Set objMail = objOutlook.CreateItem(olMailItem)'Create a new
                                                      'MailItem

       With objMail
           .To = "JohnDoe;JaneDoe"                    'Recipients
           .Subject = "Subject of mail message"       'Subject line of
                                                      'message
           .Body = "Body of mail message"             'Body of mail message
           .Send                                      'Send the message
       End With

       Set objMail = Nothing
       Set objOutlook = Nothing

   End Sub

</PRE><h3>Retrieving the Contents of a Folder</h3>
 
<P>
To access one of the default folders (such as the Calendar, Contact or
Inbox folders), use the GetDefaultFolder with the NameSpace object. The
following example uses the GetDefaultFolder method to list the Subject
lines for the contents of the Inbox:
<P>
<PRE>   Sub GetFolderContents ()

   Dim objOutlook As New Outlook.Application
   Dim objNameSpace As NameSpace
   Dim objFolder As MAPIFolder
   Dim i As Integer

       Set objNameSpace = objOutlook.GetNamespace("MAPI")
       Set objFolder = _
         objNameSpace.GetDefaultFolder(olFolderInbox)  'Access the Inbox

       For i = 1 To objFolder.Items.Count              'Loop through all
         Debug.Print objFolder.Items(i).Subject        'items in the Inbox
       Next                                            'and print the
                                                       'Subject line

       Set objFolder = Nothing
       Set objNameSpace = Nothing
       Set objOutlook = Nothing

   End Sub

</PRE>If you wish to access a folder that is not a default folder, traverse the
object model to get the folder object. For example, if you wish to access a
folder "Personal" under the message store "Mailbox - John Doe," you could
use the following:
<P>
<PRE>   Set objFolder = _
      objNameSpace.Folders("Mailbox - John Doe").Folders("Personal")

</PRE>NOTE: Folder names are case-sensitive.
<P>
<P><h3>Adding a New Appointment</h3>
 
<P>
This next example illustrates how you can add a new appointment to the
Microsoft Outlook Calendar folder. Note the similarity between the example
creating a new MailItem and this example; both examples use the CreateItem
method of the Outlook application object:
<P>
<PRE>   Sub AddAppointment()

   Dim objOutlook As New Outlook.Application
   Dim objAppt As AppointmentItem

       Set objAppt = _
           objOutlook.CreateItem(olAppointmentItem)  'Create a new
                                                     'ContactItem
       With objAppt
           .Subject = "Lunch"               'Appointment's Subject line

                .Start = #2/25/97 1:00:00 PM#    'Appointment's starting
                                                 'time
           .End = #2/25/97 2:00:00 PM#      'Appointment's ending time
           .Location = "Restaurant"         'Appointment's location

           .ReminderSet = True              'Set Reminder to 15 minutes
           .ReminderMinutesBeforeStart = 15 'before the start of the
                                            'appointment
           .Save                            'Save the appointment
       End With

       Set objAppt = Nothing
       Set objOutlook = Nothing

   End Sub

</PRE><h3>Retrieving Appointment Information for a Given Time Frame</h3>
 
<P>
You can use the Find method on an Items collection to locate those items
that match a specific criteria. The following example shows you how to
locate AppointmentItems with a Start date of 2/25/97. The criteria for the
Find method is:
<P>
<PRE>   [Start] &gt;= "2/25/97 12:00 AM" and [Start] &lt;= "2/25/97 11:59 PM"

</PRE>With the Find method, the first item matching the criteria is returned. To
find subsequent matches, you must use the FindNext method. FindNext will
return Nothing when no more matches are found:
<P>
<PRE>   Sub GetAppointments()

   Dim objOutlook As New Outlook.Application
   Dim objNS As NameSpace
   Dim Appt As Object
   Dim objInboxItems As Items
   Dim Criteria as String

       Set objNS = objOutlook.GetNamespace("MAPI")
       Set objInboxItems = _
         objNS.GetDefaultFolder(olFolderCalendar).Items 'Get all items
                                                        'in Calendar folder
       Criteria = "[Start]&gt;=""2/25/97 12:00 AM"" " &amp; _
         "and [Start]&lt;= ""2/25/97 11:59 PM"""           'Criteria for Find
                                                        'method

       Set Appt = objInboxItems.Find(Criteria)     'Find first Appointment
                                                   'matching the criteria

       Do While Not(Appt Is Nothing)               'Loop until no match

         Debug.Print Appt.Start; Appt.End; Appt.Subject 'Print the
                                                        'Appointment Start,
                                                        'End, and Subject

         Set Appt = objInboxItems.FindNext         'Find the next
                                                   'Appointment matching
                                                   'the same criteria
                                                   'used with the Find
                                                   'method
       Loop

       Set Appt = Nothing
       Set objInboxItems = Nothing
       Set objNS = Nothing
       Set objOutlook = Nothing

   End Sub

</PRE><h3>Adding a New Contact</h3>
 
<P>
This example illustrates how you can add a new Contact to the Microsoft
Outlook Contacts folder. The manner in which you can create new
ContactItems is similar to the manner in which you create new
AppointmentItems and MailItems, as previously illustrated:
<P>
<PRE>   Sub AddContact()

   Dim objOutlook As New Outlook.Application
   Dim objContact As ContactItem

       Set objContact = objOutlook.CreateItem(olContactItem)

       With objContact

           .FirstName = "John"                   'First Name is "John"

           .LastName = "Doe"                     'Last Name is "Doe"

           .HomeTelephoneNumber = "123-456-7890" 'Home Telephone Number is
                                                 '"123-456-7890"
           .HomeAddressStreet = "123 Main St."   'Street for the Home
                                                 'Address is "123 Main
                                                 'St."
           .HomeAddressCity = "Anycity"          'City for the Home
                                                 'Address is "Anycity"
           .HomeAddressState = "WA"              'State for the Home
                                                 'Address is "WA"
           .HomeAddressPostalCode = "98765"      'Postal Code for the Home
                                                 'Address is "98765"

           .Save                                 'Save the new contact

       End With

       Set objContact = Nothing
       Set objOutlook = Nothing

   End Sub

</PRE><h3>Retrieving Contact Information</h3>
 
<P>
A ContactItem can be identified by the Contact's "full name." The FullName
property is the default property for a ContactItem:
<P>
<PRE>   Sub GetContactInfo()

   Dim objOutlook As New Outlook.Application
   Dim objContact As ContactItem
   Dim objNameSpace As NameSpace
   Dim objFolder As MAPIFolder

       Set objNameSpace = objOutlook.GetNamespace("MAPI")
       Set objFolder = _
         objNameSpace.GetDefaultFolder(olFolderContacts)'The Contacts
                                                        'Folder

       With objFolder.Items("John Doe")               'Print the
                                                      'HomeAddress
           Debug.Print .HomeAddress                   'and the
           Debug.Print .HomeTelephoneNumber           'HomeTelephoneNumber
       End With                                       'for the Contact with
                                                      'the Name "John Doe"
       Set objFolder = Nothing
       Set objNameSpace = Nothing
       Set objOutlook = Nothing

   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
The Visual Basic for Applications Help file for Microsoft Outlook contains
valuable information about the methods, properties, and objects that the
Microsoft Outlook 97 object model supports. This Help file, VBAOUTL.HLP, is
included in the ValuPack\MoreHelp folder on the Microsoft Office 97 CD-ROM.
The Help file is also available for download.
<P>
For more information about downloading the Visual Basic for Applications
Help file for Microsoft Outlook 97, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTILCE-ID: <B><A HREF="../OUTLOOK/Q162671.htm">Q162671</A></B>
   TITLE     : OL97: Visual Basic Help File for Microsoft Outlook Available
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97 OutSol98<BR>
Keywords          : IAPOLE vb432 VB4WIN vb5all vb5howto vbwin kbprg<BR>
Technology        : kbvba<BR>
Version           : WINDOWS:4.0 5.0 97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

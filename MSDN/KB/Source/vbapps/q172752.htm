

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OL97: Custom Forms and Programming Limitations </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172752">
<META NAME="KBModify" CONTENT="1998/03/02">
<META NAME="KBCreate" CONTENT="1997/08/14">
<META NAME="Keywords" CONTENT="kbprg FmsProb kbprb ScriptHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article describes known limitations you may encounter when creating custom forms and programming solutions with Microsoft Outlook 97. Issues covered include limitations of the object model and other limitations related to the architectural des...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVO,QA7O,QAYC,QBUP,QAPN,QABA,QBVV,QAFI,QAW6,QAPF,QAB5,QAOE,QAMN,QALZ,QAIH P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OL97: Custom Forms and Programming Limitations</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172752</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Outlook 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes known limitations you may encounter when creating
custom forms and programming solutions with Microsoft Outlook 97. Issues
covered include limitations of the object model and other limitations
related to the architectural design of Outlook.
<P>
The following topics are covered in this article:

<UL><LI>Changing Option Settings
<LI>Modifying Folder Properties
<LI>Setting Views
<LI>Modifying the Outlook Bar
<LI>Programming Rules for Incoming Mail
<LI>Posting a File to a Folder
<LI>Using Office Forms (Office Document Items)
<LI>Changing the Mouse Pointer to an Hourglass
<LI>Storing RTF Information in Message Controls
<LI>Dragging Outlook Items to an OLE Container Control
<LI>Contact Form Functionality
<LI>Cut and Paste Functionality
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
The Outlook object model focuses on folders and the Outlook items in
folders, not the program itself. This means that while you can manipulate
forms and folders, many of the commands or settings that are available
through the user interface are not available when programming.
<P>
When using the Outlook object model, it is important to note that
information is usually set directly to the form item. This may result in
different behavior compared to when a user enters information through the
user interface. Many of the IntelliSense features are handled at the
program level, not the form level. This means that these IntelliSense
features do not apply when programmatically modifying forms.
<P>
There are also controls and field types that Outlook uses on forms
whose functionality is directly incorporated into the program itself and
generally not customizable.
<P>
These architectural design considerations are the basis for most of the
Outlook programming limitations, and should be taken into account when
designing a solution.
<P>
NOTE: The scope of this article is limited to Microsoft Visual Basic
Scripting Edition (VBScript), and typically does not take into account
possible solutions using the Active Messaging object model or other
Microsoft Exchange-related programming technologies. For more information
about these technologies, please consult information provided by the
Microsoft Developer Network (MSDN) at the following Microsoft Web site:
<P>
<PRE> <B><A HREF="http://www.microsoft.com/msdn">http://www.microsoft.com/msdn</A></B>

</PRE>NOTE: Because the Microsoft Web site is constantly updated, the site
address may change without notice. If this occurs, link to the Microsoft
home page at the following address:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/">http://www.microsoft.com/</A></B>

</PRE><h3>Changing Option Settings</h3>
 
<P>
There is no way to programmatically change any of the program-level
settings in Outlook, since these are not exposed by the object model.
Examples are any of the settings in the Tools Options dialog box. However,
if you are initially deploying Outlook in a corporate environment, you may
be able to change these setting during Setup using .PRF modifications.
<P>
For more information on setting up custom Outlook profiles, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../OUTLOOK/Q166778.htm">Q166778</A></B>
   Title     : OL97: Contents of the Profile.doc Readme File

</PRE><h3>Modifying Folder Properties</h3>
 
<P>
Outlook's object model does not expose folder properties, such as the
default form to use for the folder, synchronization settings, or
AutoArchive settings
<P>
<P><h3>Setting Views</h3>
 
<P>
There is no way to programmatically set or configure views, which includes
all of the features listed under the View menu. These options are not
exposed by the Outlook object model.
<P>
<P><h3>Modifying the Outlook Bar</h3>
 
<P>
There is no way to programmatically add folders or items to the Outlook
Bar. All changes must be made through the user interface.
<P>
<P><h3>Programming Rules for Incoming Mail</h3>
 
<P>
Because all VBScript code is stored within individual Outlook items (such
as messages or contacts), there is no simple way to execute code (fire an
event) when mail enters the Inbox. The Inbox Assistant and Rules Wizard do
not provide this functionality.
<P>
To work around this limitation, set up a rule using the Inbox Assistant or
Rules Wizard to forward all relevant messages to an "unprocessed" folder.
Create a relatively simple Microsoft Visual Basic program that automates
Outlook at regular intervals; the application would batch-process the items
in the folder and then move or delete them as appropriate.
<P>
<P><h3>Posting a File to a Folder</h3>
 
<P>
There is no way to post a file (as opposed to an Outlook item, such as a
contact, appointment, task, and so on) to a folder using VBScript or the
Outlook object model.
<P>
Microsoft Word 97 and Microsoft Excel 97 do support a Post method if you
want to post a Word document or Microsoft Excel workbook, but there is no
direct way to specify a folder from within those programs. The Post method
in these programs will display a dialog box prompting the user for a
folder.
<P>
<P><h3>Using Office Forms (Office Document Items)</h3>
 
<P>
If you are using a Word Office form, Word will not execute any document
event procedures, such as Document_Open. This is a design limitation of
Word and is not specific to Office forms. Word does not support document
event procedures when the Word object is embedded within a container
application, form, or control.
<P>
<P><h3>Changing the Mouse Pointer to an Hourglass</h3>
 
<P>
You cannot control the appearance of the mouse pointer from VBScript. If
you are writing VBScript code that takes some time to process, you cannot
force Outlook to display an hourglass pointer if Outlook does not do it
automatically.
<P>
<P><h3>Storing RTF Information in Message Controls</h3>
 
<P>
Each Outlook item can only have one message (or notes) control to store
Rich Text Format (RTF) information, including attachments. It is possible
to add more than one control per form, but the controls will all be bound
to the same field, so they will display the same information.
<P>
<P><h3>Dragging Outlook Items to an OLE Container Control</h3>
 
<P>
You can use an OLE container control on a Visual Basic form to hold objects
that are dragged onto it. When Outlook items are dragged onto these
controls, Outlook exposes only a few fields, and there is no way to change
which fields are exposed.
<P>
<P><h3>Simulating Contact Form Functionality</h3>
 
<P>
You cannot modify any of the default Contact form pages. If you create a
custom form page, you cannot (or cannot fully) recreate the following
default functionality:

<UL><LI>The Check Names and Address buttons on the General tab of the
   Contact form
<P>
   Clicking these buttons displays dialog boxes that cannot be displayed
   from a custom form page.

<LI>The e-mail address fields
<P>
   When dragged from the Field Chooser to a custom form page, the e-mail
   address fields are read-only and cannot be modified. This is a
   limitation related to the e-mail address fields being a "recipient"
   type, which is not a typical field type for fields and controls.

<LI>The Birthday and Anniversary fields on the Details page of the form
<P>
   The Birthday and Anniversary fields on the Details page of the form
   use a calendar control that is internal to Outlook and cannot be used on
   a custom form page.
<P>
</UL>For more information about replicating the Categories button functionality,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q173589.htm">Q173589</A></B>
   Title     : OL97: How to Create a Categories Button on a Custom
               Form Page

</PRE><h3>Cut and Paste Functionality</h3>
 
<P>
Outlook's object model does not support using the Clipboard in any way.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about creating solutions with Microsoft Outlook 97,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     : OL97: How to Get Help Programming with Outlook

   Article-ID: <B><A HREF="../vbapps/Q170783.htm">Q170783</A></B>
   Title     : OL97: Q&amp;A: Questions about Customizing or
               Programming Outlook
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97 drag drop drag-and-drop simulate<BR>
Keywords          : kbprg FmsProb kbprb ScriptHowTo<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

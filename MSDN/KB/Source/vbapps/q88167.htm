

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Determine If a Specific Windows Program Is Running </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88167 ">
<META NAME="KBModify" CONTENT="1997/11/21">
<META NAME="KBCreate" CONTENT="1992/08/19">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  There may be times when you want only one instance of an application to run under Microsoft Windows. For example, if you add a command button to a form that starts the Windo...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDL9,QBWO,QBWN,QDN9,QAH4,QAJH,QAMB,QAUJ,QBWQ,QDMT,QBS0,QBWS,QAY5,QAMA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Determine If a Specific Windows Program Is Running</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 21, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88167 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
There may be times when you want only one instance of an application to
run under Microsoft Windows. For example, if you add a command button to a
form that starts the Windows Calculator (Calc.exe) program, the user can
start many instances of Calculator. This is an inefficient use of memory
and system resources. Through the use of a Windows application programming
interface (API) function, Microsoft Access can determine if Calculator is
already running.
<P>
The API function used to determine if a specific program is running is
called FindWindow(). FindWindow() returns the handle of the window whose
class is given by the lpClassName parameter and whose window name (or
caption) is given by the lpCaption parameter. If the returned value is
zero, the application is not running.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When a program is started from an icon or the command line, it registers
the class name of its main window. The window class provides information
about the name, attributes, and resources required by the program. The
Microsoft Access window has a class name of "OMain." Additional command
class names are provided at the end of this article.
<P>
By calling FindWindow() with a combination of a specific program's class
name or the title bar caption, Microsoft Access can determine whether
that specific program is running.
<P>
You can determine the class name of an application by using Spy.exe,
which is supplied with the Microsoft Windows Software Development Kit
(SDK) version 3.1. or the Microsoft Win32 SDK.
<P>
If the window has a caption bar title, you can also use the title to
locate the instance of the running application. This caption text is
valid even when the application is minimized to an icon.
<P>
The following example shows three ways to determine if the Windows
Calculator is running.
<P>
NOTE: You may have some Microsoft Windows API functions defined in an
existing Microsoft Access library; therefore, your declarations may be
duplicates. If you receive a duplicate procedure name error message,
remove or comment out the declarations statement in your code.

<OL><P><LI>Create a module and type the following line in the Declarations
   section.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>    In version 7.0 and 97:
</PRE><P>
<P><PRE>      Option Explicit
      Declare Function FindWindow Lib "user32" Alias "FindWindowA" (_
<PRE></PRE>                       ByVal lpClassName as Any,_
                       ByVal lpWindowName as Any) As Long

    In version 2.0:

      Option Explicit
      Declare Function FindWindow% Lib "user" (_
                       ByVal lpClassName As Any,_
                       ByVal lpCaption As Any)

</PRE><P><LI>Type the following procedure:
<P>
<P><PRE>      Function CalculatorUp ()
</PRE><P>
<PRE>         Const lpClassName = "SciCalc"
         Const lpCaption = "Calculator"

         'This demonstrates three different ways to call FindWindow:
            '1. The ClassName only.
            '2. The Caption only.
            '3. Both the ClassName and the Caption

         MsgBox "Calculator Handle = " &amp; FindWindow(lpClassName, 0&amp;)
         MsgBox "Calculator Handle = " &amp; FindWindow(0&amp;, lpCaption)
         MsgBox "Calculator Handle = " &amp; FindWindow(lpClassName, _
               lpCaption)

         'This function could return the handle of a window.
         CalculatorUp = FindWindow(lpClassName, 0&amp;)
      End Function

</PRE><P><LI>To test this function, start Calculator, type the following line in the
   Debug window (or Immediate window in version 2.0), and then press
   ENTER.
<P>
<P><PRE>       ?CalculatorUp()
</PRE><P>
   Note that three message boxes open, each displaying the handle to the
   Calculator window. If Calculator is not running, each message box will
   display a zero.
<P>
</OL>Below are some class names of some common Windows applications:
<P>
<PRE>   Class Name         Application
   -------------------------------

   SciCalc            CALC.EXE
   CalWndMain         CALENDAR.EXE
   Cardfile           CARDFILE.EXE
   Clipboard          CLIPBOARD.EXE
   Clock              CLOCK.EXE
   CtlPanelClass      CONTROL.EXE
   XLMain             EXCEL.EXE
   Session            MS-DOS.EXE
   Notepad            NOTEPAD.EXE
   pbParent           PBRUSH.EXE
   Pif                PIFEDIT.EXE
   PrintManager       PRINTMAN.EXE
   Progman            PROGMAN.EXE   (Windows Program Manager)
   Recorder           RECORDER.EXE
   Reversi            REVERSI.EXE
   #32770             SETUP.EXE
   Solitaire          SOL.EXE
   Terminal           TERMINAL.EXE
   WFS_Frame          WINFILE.EXE
   MW_WINHELP         WINHELP.EXE
   #32770             WINVER.EXE
   OpusApp            WINWORD.EXE
   MSWRITE_MENU       WRITE.EXE

   Windows 95 Only:

   MSPaintApp         PBRUSH.EXE
   ExploreWClass      EXPLORER.EXE
   WordPadClass       WORDPAD.EXE

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information about the Class Names for the Office 97 Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q169240.htm">Q169240</A></B>
   TITLE     : Window Class Names for the Office 97 Applications

</PRE>"Programming Windows: the Microsoft Guide to Writing Applications for
Windows 3," by Charles Petzold, Microsoft Press, 1990
<P>
"Microsoft Windows 3.1 Programmer's Reference," Volume 2
<P>
"Microsoft Win32 Sofware Development Kit"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words:<BR>
Keywords          : kbprg<BR>
Version           : 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 21, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Create a Parameter Query via Data Access Objects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142938">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1996/01/22">
<META NAME="Keywords" CONTENT="APrgDataOther VB4WIN vb5all VBKBDAO vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article explains how to create and use a parameter query using Data Access Objects (DAO). A parameter query is a type of QueryDef specific to the Microsoft Jet database engine used by Visual Basic, Microsoft Access, and other products. Paramet...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHE,QA1S,QBS0,QAPN,QBXS,QATX,QA5F,QAMA,QACF,QDN9,QDKY,QAUJ,QAPF,QAMB,QAKJ P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Create a Parameter Query via Data Access Objects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142938</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional Edition for Windows, versions 3.0,
   4.0, 5.0
<LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains how to create and use a parameter query using Data
Access Objects (DAO). A parameter query is a type of QueryDef specific to
the Microsoft Jet database engine used by Visual Basic, Microsoft Access,
and other products. Parameter queries enable you to automate the process
of changing query criteria. With a parameter query, you can set new values
for the parameters each time you run the query.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A parameter query is created in a program by using the CreateQueryDef()
function. Following is the syntax for the CreateQueryDef() function:
<P>
<PRE>   Set querydef = database.CreateQueryDef(name, sqltext)

   querydef - a QueryDef object
   database - a Database object
   name     - string containing query name
   sqltext  - string containing the SQL query text

</PRE>The sqltext string is optional or it can be defined by using the .SQL
property of the QueryDef. To create a parameter query, place the
PARAMETERS statement in the sqltext string. Here is the syntax for the
PARAMETERS statement:
<P>
<PRE>   PARAMETERS parametertext datatype

   parametertext - name of the parameter
   datatype      - type of the parameter

</PRE>The following table lists the appropriate Microsoft Jet SQL data type
that should be used with the PARAMETERS statement as well as the
corresponding Microsoft Access field type, Visual Basic variable type,
and constant value from the DATACONS.TXT file.
<P>
NOTE: Visual Basic 4.0 and later and Office 95 and later versions of Basic
support additional data types (Boolean, Byte, Byte Array). The table below
lists equivalent Basic types for earlier versions of Basic:
<P>
<PRE>   Microsoft      Microsoft        Visual
   Access SQL     Access Field     Basic Type      DATACONS.TXT Constant
   ---------------------------------------------------------------------
   Bit            Yes/No           Integer/Boolean   DB_BOOLEAN = 1
   Byte           Byte             Integer/Byte      DB_BYTE = 2
   Short          Integer          Integer           DB_INTEGER = 3
   Long           Long Integer     Long              DB_LONG = 4
   Currency       Currency         Double            DB_CURRENCY = 5
   IEEESingle     Single           Single            DB_SINGLE = 6
   IEEEDouble     Double           Double            DB_DOUBLE = 7
   DateTime       Date/Time        Variant           DB_DATE = 8
   Binary         Binary           String/Byte Array
   Text           Text             String            DB_TEXT = 10
   LongBinary     OLE Object       String/Byte Array DB_LONGBINARY = 11
   LongText       Memo             String            DB_MEMO = 12

</PRE>Following the PARAMETERS statement in the sqltext string, place the query.
The query can refer to the parameter (parametertext) named in the
PARAMETERS statement. Wherever the query refers to a parameter, the current
value will be substituted when the query is executed.
<P>
For example, if the query text is:
<P>
<PRE>   PARAMETERS i SHORT; SELECT fld FROM tbl WHERE fld=i

</PRE>and the parameter i was set to 42 in the program, the parameter i would be
substituted and the resulting query would be equivalent to:
<P>
<PRE>   SELECT fld FROM tbl WHERE fld=42

</PRE><h3>Multiple Parameters in a PARAMETERS Statement</h3>
 
<P>
It is also possible to have multiple parameters in a PARAMETERS statement.
To do this, use commas to separate the parameters as follows:
<P>
<PRE>   PARAMETERS parametertext datatype, parametertext datatype, ...

</PRE>Prior to executing the query, set the parameters using this syntax:
<P>
<PRE>   querydef!parametertext = value

   querydef      - a QueryDef object
   parametertext - the name of the parameter in the PARAMETERS statement
   value         - the value the parameter will have

</PRE>In the previous example, you would use QD!i=42 before executing the query.
<P>
Once the parameters are set, you are ready to execute the query. There are
three methods (Execute, CreateDynaset, and CreateSnapshot) supported by a
QueryDef that will cause the query to be executed.
<P>
<P><h3>Example Parameter Queries</h3>
 
<P>
The following example illustrates the use of a short parameter in a query.
The example has two parts. The first part creates a new QueryDef for
BIBLIO.MDB (the sample Microsoft Access database that ships with Visual
Basic) and should be executed only once. The second part uses the QueryDef
to create a snapshot, which is then displayed. To test the example, place
each of the following code segments in a CommandButton Click event
procedure.
<P>
NOTE: There are some minor differences between the older DAO syntax used by
Visual Basic 3.0 and Access 1.x and the newer syntax used by the other
products this article applies to. Old and New DAO syntax are indicated by
comments:
<P>
<PRE>   'Create QueryDef "by date"
   Dim Db As Database
   Dim Qd As QueryDef
   Set Db = OpenDatabase("C:\VB\BIBLIO.MDB")                 ' Old
   Set Db = DBEngine(0).OpenDatabase("C:\VB4-32\BIBLIO.MDB") ' New
   Set Qd = Db.CreateQueryDef("By date") 'Create the query "By date"
   QdText = "PARAMETERS dp Short; "
   QdText = QdText &amp; "SELECT * from Titles WHERE [Year Published] = dp"
   Qd.SQL = QdText
   Print Qd.SQL
   Qd.Close

   ' Create Snapshot from QueryDef
   Dim Rs As Snapshot                   ' Old
   Set Qd = Db.OpenQueryDef("By Date")  ' Old
   Dim Rs As Recordset                  ' New
   Set Qd = Db.QueryDefs("By Date")     ' New
   Qd!dp = 1991                         'Set the value of the dp parameter
   Set Rs = Qd.CreateSnapshot()                ' Old
   Set Rs = Qd.OpenRecordset(dbOpenSnapshot)   ' New
   Do Until Rs.EOF
      For i = 1 To Rs.Fields.Count - 1
         Print Rs(i);                   'Display results of query
      Next
      Print
      Rs.MoveNext
   Loop
   Rs.Close
   Qd.Close
   Db.Close

</PRE>The second example shows how to use an action parameter query. Note that
action queries are invoked with the Execute method, not CreateDynaset or
CreateSnapshot, because they do not return records:
<P>
<PRE>   'Create QueryDef
   Dim Db As Database
   Dim Qd As QueryDef
   Set Db = OpenDatabase("C:\VB\BIBLIO.MDB")                 ' Old
   Set Db = DBEngine(0).OpenDatabase("C:\VB4-32\BIBLIO.MDB") ' New
   Set Qd = Db.CreateQueryDef("Delete by name") 'Create the query
   QdText = "PARAMETERS p1 Text; "
   QdText = QdText &amp; "DELETE * FROM Authors WHERE Author = p1;"
   Qd.SQL = QdText
   Print Qd.SQL
   Qd.Close

   ' Execute the QueryDef
   Set Qd = Db.OpenQueryDef("Delete by name")  ' Old
   Set Qd = Db.QueryDefs("Delete by name")     ' New
   Qd!p1 = "Bob"
   Qd.Execute           'Perform the action query
   Qd.Close
   Db.Close

</PRE><h2>REFERENCES</h2>
 
<P>
More information on parameter queries is available in the Visual Basic,
version 3.0 and 4.0, "Professional Features Book 2."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: parameterized querydefs<BR>
Keywords          : APrgDataOther VB4WIN vb5all VBKBDAO vbwin GnrlVb kbprg<BR>
Technology        : kbvba<BR>
Version           : WINDOWS:3.0 4.0 5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

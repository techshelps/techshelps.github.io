

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Create an AfterUndo Form Event </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123595">
<META NAME="KBModify" CONTENT="1997/10/24">
<META NAME="KBCreate" CONTENT="1994/12/05">
<META NAME="Keywords" CONTENT="kbusage FmsHowTo FmsEvnt">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to create and use a form module procedure called AfterUndo. The AfterUndo procedure runs when edits made to the current record are undone.  Thi...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QA1S,QDN9,QDMH,QBS0,QBJZ,QBXS,QAH4,QAB9,QAPN,QAO4,QA01,QBWS,QAI2,QA5F P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Create an AfterUndo Form Event</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123595</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to create and use a form module procedure
called AfterUndo. The AfterUndo procedure runs when edits made to the
current record are undone.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
NOTE: This article explains a technique demonstrated in the sample
files, FrmSampl.exe (for Microsoft Access for Windows 95 version 7.0)
and FrmSmp97.exe (for Microsoft Access 97). For information about how
to obtain these sample files, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q150895.htm">Q150895</A></B>
   TITLE     : ACC95: Microsoft Access Sample Forms Available on MSL

   ARTICLE-ID: <B><A HREF="../ACCESS/Q175066.htm">Q175066</A></B>
   TITLE     : ACC97: Microsoft Access 97 Sample Forms Available on MSL

</PRE><h2>MORE INFORMATION</h2>
 
<P>
When you click Undo Record on the Edit menu or press the ESC key twice
to undo changes to the current record in a form, there is no built-in form
event that is triggered. The AfterUndo procedure simulates an AfterUndo
event so that you can restore calculations that may have been set while the
record was being edited.
<P>
Follow these steps to create the AfterUndo procedure:

<OL><P><LI>Open the form to which you want to add the AfterUpdate procedure in
   Design view, and then add a text box with the following properties
   to the form:
<P>
<P><PRE>      Name: txtEditModeChange
      ControlSource: =[Form].[Dirty] &amp; CheckUndo([Form])
      Visible: No
</PRE>
<P><LI>Add the following event procedure to the form's AfterUpdate property:
<P>
<PRE>      Sub Form_AfterUpdate ()
      ' Because the record is being saved, which changes the edit mode, the
      ' bookmark should be reset so that it will appear to the CheckUndo()
      ' function that the user moved to another record.
         PrevBookmark = Null
      End Sub

</PRE><P><LI>Add the following lines to the form module's Declarations section if
   they are not already there:
<P>
<P><PRE>      Option Explicit
      Dim PrevBookmark
</PRE>
<P><LI>Add the following procedures to the form module:
<P>
<P><PRE>      Function CheckUndo (F As Form) As Variant
<PRE></PRE>         Dim CurrBookmark

         ' Is the record clean (not dirty)?
         If Not F.Dirty Then
            ' If so, get the current bookmark.
            On Error Resume Next
            CurrBookmark = F.bookmark

            ' If an error occurred, this is the new record.
            If Err Then CurrBookmark = "NewRecord"

            ' Determine if the edit change occurred on the same record (the
            ' record was undone, as opposed to moving to another record).
             If StrComp(CurrBookmark, PrevBookMark, 0) = 0 Then
               ' The record was undone.
               AfterUndo
            Else
               ' The record was not undone (moved to another
               ' record). Record the bookmark of the current
               ' record for the next iteration.
               PrevBookmark = CurrBookmark
            End If
         End If

      End Function

      Sub AfterUndo ()
        ' Add the code you want to run when the record is undone here.
      End Sub

</PRE></OL><h3>How to Use the AfterUndo Procedure</h3>
 
<P>
The following example demonstrates how to use the AfterUndo procedure:

<OL><P><LI>Open the sample database Northwind.mdb (or NWIND.MDB in version 2.0).

<P><LI>Open the Employees form in Design view and follow steps 1-4 above.

<P><LI>Modify the code in the AfterUndo procedure (created in step 4 above)
   as follows:
<P>
<PRE>      Sub AfterUndo ()
         MsgBox "Record Changes Undone"
      End Sub

</PRE><P><LI>View the form in Form view.

<P><LI>Modify any field in any record in the form.

<P><LI>On the Edit menu, click Undo Current Field/Record (Undo Current Record
   in Microsoft Access 2.0 and 7.0). Note that the "Record Changes
   Undone" message box appears.

<P><LI>On the Edit menu, click Go To, and then click New Record (click New
   in Microsoft Access 2.0 and 7.0).

<P><LI>Type any text in any field in the new record.

<P><LI>Press the ESC key. Note that the "Record Changes Undone" message box
   appears.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about determining whether a record on a form is being
edited, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q122294.htm">Q122294</A></B>
   TITLE     : ACC: How to Automatically Detect If a Form Is Being Edited

</PRE></OL>For more information about undoing changes, search the Help Index for
"undoing changes when editing records," or ask the Microsoft Access 97
Office Assistant.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: onundo<BR>
Keywords          : kbusage FmsHowTo FmsEvnt<BR>
Version           : 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

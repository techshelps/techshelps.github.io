

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: How to Use the GetOpenFilename Method </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161930">
<META NAME="KBModify" CONTENT="1997/09/03">
<META NAME="KBCreate" CONTENT="1997/01/08">
<META NAME="Keywords" CONTENT="PgmOthr xlvbahowto xlvbainfo kbcode kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provide instructions and examples on using the GetOpenFilename method in a Visual Basic for Applications macro.  MORE INFORMATION  Microsoft provides examples of Visual Basic for Applications procedures for illustration only, without w...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBRZ,QAPN,QBS0,QBE7,QBE6,QBVP,QAYL,QAMB,QBWS,QAHE,QAGB,QA01,QAPF,QAH4,QADX P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: How to Use the GetOpenFilename Method</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161930</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provide instructions and examples on using the
GetOpenFilename method in a Visual Basic for Applications macro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support Engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
The GetOpenFilename method in Visual Basic for Applications allows you to
display the Open dialog in Microsoft Excel and get a file name from a user
without actually opening any files. Normally the file name is returned to
a variable and used later in the macro. This method has five arguments, all
of which are optional:
<P>
<PRE>   FileFilter
   FilterIndex
   Title
   ButtonText
   MultiSelect

</PRE>Providing no arguments to the function allows the Open dialog to be
displayed using the All Files (*.*) file filter and uses the default
dialog box title. Here is an overview of each of the five arguments:
<P>
<P><h3>FileFilter</h3>
 
<P>
This argument has two parts. The first part is the text that will appear
in the List Files of Type dropdown box of the Open dialog. The second
part of the argument determines what files are actually shown. The
following example will show all text files in the current directory:
<P>
<PRE>   X = Application.GetOpenFilename("Text Files (*.txt), *.txt")

</PRE>You may also use multiple wildcard expressions to filter on two separate
wildcard expressions. This example filters on all files ending in TXT and
BAS:
<P>
<PRE>   X = Application.GetOpenFilename _
       ("Visual Basic Files (*.txt; *.bas), *.txt, *.bas")

</PRE>When using the FileFilter argument, the value you specify is the only one
that appears on the List Files of Type: dropdown box. You can list other
items in the dropdown list as well. This example lists two types of files
in the dropdown box with the first one being the default selection:
<P>
<PRE>   X = Application.GetOpenFilename _
       ("Text Files (*.txt), *.txt, Add-in Files (*.xla), *.xla")

</PRE><h3>FilterIndex</h3>
 
<P>
This optional argument specifies which file filter to use by default. If
no filter index is specified, or the filter index is greater than the
number of filters specified, the first filter is used. This example uses
two file filters but selects the second one (*.xla file) by default:
<P>
<PRE>   X = Application.GetOpenFilename _
       ("Text Files (*.txt), *.txt, Add-in Files (*.xla), *.xla", 2)

</PRE><h3>Title</h3>
 
<P>
The title specifies the text that will appear at the top of the displayed
dialog box. The text Open My Files will appear on the dialog using this
example:
<P>
<PRE>   X = Application.GetOpenFilename _
       ("Text Files (*.txt), *.txt", 1, "Open My Files")

</PRE><h3>ButtonText</h3>
 
<P>
This argument is used only on Macintosh computers and may be ignored,
although you must still allocate space for it in your arguments.
<P>
<P><h3>MultiSelect</h3>
 
<P>
This argument specifies whether the user may select more than one file
from the open box. It can be set to True or False. If True, the variable
must be defined as a variant data type, as the return value will always
be an array, even if only one file is selected. This example will
incorporate all of the arguments above and loop through all selected files
and open them:
<P>
<PRE>   Sub Open_Files

       'Defines the variable as a variant data type
       Dim X as variant

       'Opens the dialog
       X = Application.GetOpenFilename _
           ("Text Files (*.txt), *.txt, Add-in Files (*.xla), *.xla", 2, _
           "Open My Files", ,True)

       'Loops through every file that is selected and opens each one
       For Y = 1 to Ubound(X)
           Workbooks.Open X(Y)
       Next

   End Sub

</PRE>One problem you may encounter is that the macro produces a Type mismatch
error if the user clicks the cancel button from the dialog box. The value
of the variable will be set to False. Standard error-trapping techniques
can be used to trap this problem:
<P>
<PRE>   Sub Open_Files

       'Defines the variable as a variant data type
       Dim X as variant

       'Continues to run the macro even if an error occurs
       On Error Resume Next

       'Opens the dialog
       X = Application.GetOpenFilename _
           ("Text Files (*.txt), *.txt, Add-in Files (*.xla), *.xla", 2, _
           "Open My Files", ,True)

       'Tests the variable X to see if it is valid
       If X = False then GoTo Cancel

       'Loops through every file that is selected and opens each one
       For Y = 1 to Ubound(X)
           Workbooks.Open X(Y)
       Next

       Exit Sub

       'If X was equal to false, displays a message and exits the macro
   Cancel:
       Msgbox "The Cancel button was selected."

   End Sub

</PRE>For more information on using the GetOpenFilename method, query on the
following article(s) in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q153722.htm">Q153722</A></B>
   TITLE     : XL: GetOpenFilename Method Is Different in MS Excel
               for Win 95

   ARTICLE-ID: <B><A HREF="../vbapps/Q141574.htm">Q141574</A></B>
   TITLE     : XL: How to Create Macro That Opens Multiple Selected Files
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 xlDialogOpen<BR>
Keywords          : PgmOthr xlvbahowto xlvbainfo kbcode kbusage<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: How to Remove All Items from a ListBox or ComboBox </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165632">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/03/24">
<META NAME="Keywords" CONTENT="kbprg kbui">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  There is no single method that you can use to remove all items from a ListBox or ComboBox control on a UserForm. The method that you use to remove an item depends on whether the ListBox or ComboBox control is bound to a worksheet. This article cont...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAEF,QBWS,QAMN,QAH4,QBVR,QAHP,QBJZ,QA7O,QAOE,QAB5,QAPN,QA9N,QDH6,QANJ P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: How to Remove All Items from a ListBox or ComboBox</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165632</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There is no single method that you can use to remove all items from a
ListBox or ComboBox control on a UserForm. The method that you use to
remove an item depends on whether the ListBox or ComboBox control is bound
to a worksheet. This article contains examples that remove items from a
sample control that is bound to a worksheet and a sample control that is
not bound to a worksheet.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h3>ListBox or ComboBox Control That Is Bound to a Worksheet</h3>
 
<P>
To build a sample UserForm that contains a ListBox control that is bound to
a worksheet and then remove items in the control, use the following steps:

<OL><P><LI>Close and save any open workbooks, and then create a new workbook.

<P><LI>On Sheet1, type the following values:
<P>
       A1: Alpha
       A2: Bravo
       A3: Charlie
       A4: Delta
       A5: Echo

<P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>If the Properties window is not visible, click Properties on the
    View menu (or press F4).

<P><LI>If the Project Explorer window is not visible, click Project Explorer
    on the View menu.

<P><LI>On the Insert menu, click UserForm.

<P><LI>Draw a ListBox control on the UserForm.

<P><LI>Switch to the Properties window (press F4).

<P><LI>Change the RowSource property of the ListBox control to the
    following value:
<P>
       Sheet1!A1:A5

<P><LI>Draw a CommandButton control on the UserForm.

<P><LI>Double-click the CommandButton to open the code window for the
    CommandButton.

<P><LI>In the module, type the following code for the CommandButton
    Click event:
<P>
       Private Sub CommandButton1_Click()
<PRE>           ListBox1.RowSource = ""
       End Sub

</PRE><P><LI>Run the UserForm.
<P>
   The list box that you added to the UserForm is populated with the values
   that you entered on Sheet1.

<P><LI>Click the CommandButton.
<P>
</OL>All of the items are removed from ListBox1.
<P>
<P><h3>ListBox or ComboBox That Is Not Bound to a Worksheet</h3>
 
<P>
To build a sample UserForm that contains a ListBox control that is
populated with an array of values when the UserForm loads and then remove
items in the control, use the following steps:

<OL><P><LI>Close and save any open workbooks, and then create a new workbook.

<P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>If the Properties window is not visible, click Properties on the
    View menu (or press F4).

<P><LI>On the Insert menu, click UserForm.

<P><LI>Double-click the UserForm to open the code window for the UserForm.

<P><LI>In the module, type the following code for the UserForm Initialize
    event:
<P>
       Private Sub UserForm_Initialize()
<PRE>           Dim MyArray As Variant
           Dim i As Integer

           'Initialize array with values to populate ListBox.
           MyArray = Array("Alpha", "Bravo", "Charlie", "Delta","Echo")

           For i = LBound(MyArray) To Ubound(MyArray)

               'Add a value from MyArray to ListBox1.
               UserForm1.ListBox1.AddItem MyArray(i)

           Next
       End Sub

    This procedure populates ListBox1 when the UserForm is loaded.

</PRE><P><LI>Draw a ListBox control on the UserForm.

<P><LI>Draw a CommandButton control on the UserForm.

<P><LI>Double-click the CommandButton to open the code window for the
    CommandButton.

<P><LI>In the module, type the following code for the CommandButton
    Click event:
<P>
       Private Sub CommandButton1_Click()
<PRE>           Dim i As Integer

           For i = 1 To ListBox1.ListCount

               'Remove an item from the ListBox.
               ListBox1.RemoveItem 0

           Next i
       End Sub

   This Visual Basic procedure removes all of the items from ListBox1.

</PRE><P><LI>Run the UserForm.

<P><LI>Click the CommandButton.
<P>
</OL>All of the items are removed from ListBox1.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about using the ListBox control, click the Office
Assistant in the Visual Basic Editor, type "listbox control" (without
quotation marks), click Search, and then click to view the "ListBox
Control" topic.
<P>
For more information about using the RowSource property, click the Office
Assistant in the Visual Basic Editor, type "rowsource" (without quotation
marks), click Search, and then click to view the "RowSource Property"
topic.
<P>
For more information about using the RemoveItem method, click the Office
Assistant in the Visual Basic Editor, type "removeitem" (without quotation
marks), click Search, and then click to view the "RemoveItem Method (VBA
Forms 97)" topic.
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Excel Help is not installed on your
computer, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office
               Program or Component
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97<BR>
Keywords          : kbprg kbui<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

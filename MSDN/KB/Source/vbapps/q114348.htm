

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Print Two Excel Charts on Single Page w/OLE Automation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114348">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/05/01">
<META NAME="Keywords" CONTENT="IAPVBA vbwin GnrlVb kbinterop kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  It is possible using OLE Automation with Excel version 5.0 to print two charts on a single page. This article demonstrates how to do it in Visual Basic version 3.0.  MORE INFORMATION  Excel version 5.0 exposes its printing capabilities through OLE ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QAOX,QDO5,QBS0,QDNX,QBXT,QA5V,QAW6,QAH4,QAIB,QBXS,QBCF,QA4F,QAQG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Print Two Excel Charts on Single Page w/OLE Automation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114348</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic
<PRE>  Programming System for Windows, version 3.0
</PRE>- Microsoft Excel, version 5.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is possible using OLE Automation with Excel version 5.0 to print two
charts on a single page. This article demonstrates how to do it in Visual
Basic version 3.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Excel version 5.0 exposes its printing capabilities through OLE Automation.
The Excel Worksheet object supports the PrintOut method. The PrintOut
method prints the Worksheet to the printer using the current PageSetup.
<P>
The following example creates and positions two Charts on a Worksheet. Then
it modifies the PageSetup, and prints the Worksheet to the printer.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new Project in Visual Basic. Form1 is created by default.

<P><LI>Add a command button (Command1) to Form1.

<P><LI>Place the following code in the command button click event:
<P>
<PRE>   Sub Command1_Click()

      ' Define Excel Constants:
      ' Constant values can be found with "MsgBox xlConst" in Excel
      ' Constants are also in XLCONST.BAS in Office Developer's Kit 1.0
      Const xlColumn = 3
      Const xlRows = 1
      Const xlLine = 4
      Const xlPortrait = 1
      Const xlPaperLetter = 1
      Const xlAutomatic = -4105
      Const xlDownThenOver = 1

      ' Dimension Variables:
      Dim XL As Object
      Dim WS1 As Object
      Dim WS2 As Object
      Dim PS As Object
      Dim Col As Integer

      ' Create an Excel Application object:
      Set XL = CreateObject("Excel.Application")

      ' Make Excel visible:
      ' If the following line is changed to a comment, Excel will not be
      ' visible, but the charts will still print
      XL.Visible = True

      ' Add a Workbook and set Worksheet objects to the first two Sheets:
      XL.Workbooks.Add
      Set WS1 = XL.WorkSheets(1)
      Set WS2 = XL.WorkSheets(2)

      ' Fill in Cells of first Worksheet with data for Charts:
      Randomize Timer
      For Col = 1 To 10
         WS1.Cells(1, Col).Value = 10 * Rnd
         WS1.Cells(2, Col).Value = 10 * Rnd
      Next

      ' Display the second Worksheet:
      WS2.Select

      ' Add a Chart object at specified position:
      ' Top and Left are relative to Cell A1
      ' Enter the following two lines as one, single line of code:
      WS2.ChartObjects.Add(0, 0, XL.InchesToPoints(6),
         XL.InchesToPoints(4)).Select

      ' Use the ChartWizard method to fill in the Chart:
      ' Enter the following three lines as one, single line of code:
      WS2.ChartObjects("Chart 1").Chart.ChartWizard
         WS1.Range(WS1.Cells(1, 1), WS1.Cells(1, 10)), xlColumn, 1, xlRows,
         0, 0, 1, "Chart 1 (Column Chart)", "Columns", "Value", ""

      ' Create a second Chart on the same Worksheet:
      ' Enter the following two lines as one, single line of code:
      WS2.ChartObjects.Add(0, XL.InchesToPoints(5), XL.InchesToPoints(6),
         XL.InchesToPoints(4)).Select
      ' Enter the following three lines as one, single line of code:
      WS2.ChartObjects("Chart 2").Chart.ChartWizard
         WS1.Range(WS1.Cells(2, 1), WS1.Cells(2, 10)), xlLine, 4, xlRows,
         0, 0, 1, "Chart 2 (Line Chart)", "Points", "Value", ""

      ' The following lists various property settings for the PageSetup
      ' Object in Excel. There may be additional properties available for
      ' different printers. Please check the Excel documentation for
      ' details on the PageSetup object.
      Set PS = WS2.PageSetup
      PS.PrintTitleRows = ""
      PS.PrintTitleColumns = ""
      PS.PrintArea = ""
      PS.LeftHeader = ""
      PS.CenterHeader = "Two Charts on a Page"
      PS.RightHeader = ""
      PS.LeftFooter = ""
      PS.CenterFooter = "Page &amp;P"
      PS.RightFooter = ""
      PS.LeftMargin = XL.InchesToPoints(.75)
      PS.RightMargin = XL.InchesToPoints(.75)
      PS.TopMargin = XL.InchesToPoints(1)
      PS.BottomMargin = XL.InchesToPoints(1)
      PS.HeaderMargin = XL.InchesToPoints(.5)
      PS.FooterMargin = XL.InchesToPoints(.5)
      PS.PrintHeadings = False
      PS.PrintGridlines = False
      PS.PrintNotes = False
      PS.CenterHorizontally = True
      PS.CenterVertically = True
      PS.Orientation = xlPortrait
      PS.Draft = False
      PS.PaperSize = xlPaperLetter
      PS.FirstPageNumber = xlAutomatic
      PS.Order = xlDownThenOver
      PS.BlackAndWhite = False
      PS.Zoom = 100

      ' Print the WorkSheet:
      WS2.PrintOut 1

      ' Close the Workbook without saving the contents:
      ' The brackets [] around Close are necessary because Close is
      ' a Visual Basic method.
      XL.ActiveWorkbook.[Close] (False)
      ' Shut down instance of Excel:
      XL.Quit

      Set XL = Nothing
      Set WS1 = Nothing
      Set WS2 = Nothing
      Set PS = Nothing

   End Sub

</PRE><P><LI>Save the project.

<P><LI>Run the example, and click the command button.
<P>
</OL>Excel should become visible. You will see data being put into the cells.
After the data is entered, you will see the creation of the charts.
Finally, Excel will begin printing.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: MSGraph graph<BR>
Keywords          : IAPVBA vbwin GnrlVb kbinterop kbprg<BR>
Technology        : kbvba<BR>
Version           : WINDOWS:3.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

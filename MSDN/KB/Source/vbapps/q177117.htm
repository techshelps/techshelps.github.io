

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Move List Box Items to Another List Box (7.0/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177117">
<META NAME="KBModify" CONTENT="1998/01/05">
<META NAME="KBCreate" CONTENT="1997/11/20">
<META NAME="Keywords" CONTENT="FmsCmbo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes how you can create a form that has two list boxes that imitate the multiple-selection capability reflected in Microsoft Access Wizards.  This article assum...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QA2Q,QAEF,QAE1,QA5V,QBXS,QAG2,QAB9,QBWS,QA1S,QBV8,QAH4,QA7O,QAY5,QA4F P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Move List Box Items to Another List Box (7.0/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177117</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes how you can create a form that has two list boxes
that imitate the multiple-selection capability reflected in Microsoft
Access Wizards.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: The method provided in this article is suitable for single-user
environments only. If this method is used in a multiuser environment, what
one user does may interfere with the actions of another user.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>The method described in this article uses a Yes/No field in the table to
indicate which records are selected. One list box displays the Yes records
and the other displays the No records. To move items from one list box to
the other, the Yes/No field of the selected record is set to the
appropriate state and the list boxes are then requeried to update their
respective lists.
<P>
In addition to the two list boxes, the form also contains three command
buttons. By using the command buttons, you can add items to, or delete
items from the list box. You can also double-click an item in a list box to
move it to the other list box. The following general steps describe the
process that is necessary for creating the list boxes with the multiple-
selection capability. Each of these steps is explained in detail later in
this article.
<P>
<PRE>   A. Create a table that contains the data for the list boxes.

   B. Create two queries based on the table created in step A.

   C. Create the form that will contain the list boxes, code modules, and
      command buttons.

</PRE><h3>A. Create a table that contains the data for the list boxes</h3>
 
<P>
<PRE>   1. Open the sample database Northwind.mdb and create the following
      new table:

         Table: Table1
         ---------------------------------------------------
         Field Name: List
            Data Type: Text
            Caption: Items that will be provided in list

         Field Name: Selected
            Data Type: Text
            Caption: Indicates if the item has been selected

         Table Properties: Table1
         ------------------------
         PrimaryKey: List

   2. View the Table1 table in Datasheet view. Add five records to the
      table. For each record, type the following sample data:

         List         Selected
         ----         --------
         one           Yes
         two           Yes
         three         Yes
         four          Yes
         five          Yes

</PRE><h3>B. Create two queries based on the table created in step A</h3>
 
<P>
<PRE>   1. Create the following new query based on the Table1 table and save
      it as Select Yes:

         Query: Select Yes
         -------------------------------
         Field: List
            Show: Yes
            Criteria: [selected] = "YES"

   2. Create another new query based on the Table1 table as follows and
      save it as Select No:

      Query: Select No
      ------------------------------
       Field: List
         Show: Yes
         Criteria: [selected] = "NO"

</PRE><h3>C. Create a form containing list boxes, code, and command buttons</h3>
 
<P>
<PRE>   1. Create a new blank form and save it as SelectList.

   2. With the SelectList form open in Design view, on the View menu,
      click Code, and then type the following line in the Form module
      Declarations section if it is not already there:

         Option Explicit

   3. Type the following three functions in the Form module:

       '=======================================================
       ' The following function opens the table and changes the
       ' selected value from YES to NO, and then runs the
       ' query for the two list boxes so that they will display
       ' the updated values.
       '=======================================================
       Function Add()
          Dim MyDB As Database
          Dim MyTable As Recordset
          Dim y As Control

          Set y = Me![list0]

          If IsNull(y) Then
             MsgBox "Please select something in the list."
          Else
             Set MyDB = DBEngine.Workspaces(0).Databases(0)
             Set MyTable = MyDB.OpenRecordset("Table1")

             MyTable.Index = "PrimaryKey"
             MyTable.Seek "=", y

             With MyTable
                .Edit
                !Selected = "no"
                .Update
             End With

             Set MyTable = Nothing
             Me![list0].Requery
             Me![list2].Requery
          End If
       End Function

       '=======================================================
       ' The following function opens the table and changes the
       ' selected value from NO to YES, and then runs the
       ' query for the two list boxes so that they will display
       ' the updated values.
       '=======================================================

       Function Del()
          Dim MyDB As Database
          Dim MyTable As Recordset
          Dim y As Control

          Set y = Me![list2]

          If IsNull(y) Then
             MsgBox "Please select something in the list."
          Else
             Set MyDB = DBEngine.Workspaces(0).Databases(0)
             Set MyTable = MyDB.OpenRecordset("Table1")

             MyTable.Index = "PrimaryKey"
             MyTable.Seek "=", y

             With MyTable
                .Edit
                !Selected = "yes"
                .Update
            End With

             Set MyTable = Nothing
             Me![list0].Requery
             Me![list2].Requery
          End If
       End Function

       '=======================================================
       ' The following function sets all values in the Selected
       ' field to YES, and then runs the query for the two list
       ' boxes so that they will display the updated values.
       '=======================================================
       Function Clear()
          Dim MyDB As Database
          Dim MyTable As Recordset

          Set MyDB = DBEngine.Workspaces(0).Databases(0)
          Set MyTable = MyDB.OpenRecordset("Table1")

          On Error GoTo erhandle
          With MyTable
            .MoveFirst
            Do Until .EOF
                .Edit
                !Selected = "yes"
                .Update
                .MoveNext
            Loop

          End With
          Set MyTable = Nothing
          Me![list0].Requery
          Me![list2].Requery

       erhandle:
             Resume Next

       End Function

   4. Save and close the Form module.

   5. Add the following list box and command button controls to the
      SelectList form:

         List Box:
         -----------------------------
         Name: List0
            RowSourceType: Table/Query
            RowSource: Select Yes
            OnDblClick: =Add()

         List Box:
         -----------------------------
         Name: List2
            RowSourceType: Table/Query
            RowSource: Select No
            OnDblClick: =Del()

         Command Button:
         --------------------
         Name: Button One
            Caption: Clear
            OnClick: =Clear()

         Command Button:
         --------------------
         Name: Button Two
            Caption: Add Item
            OnClick: =Add()

         Command Button:
         -----------------------
         Name: Button Three
            Caption: Delete Item
            OnClick: =Del()

   6. View the SelectList form in Form view.

   Note that the first list box, List0, displays all the items in the
   Table1 table you can select. You can use the Clear, Add Item, or Delete
   Item buttons to add or remove items from the second list box, List2.
   You can also double-click an item in a list box to move it to the
   other list box.

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about list boxes, search the Help Index for "List
Boxes," or ask the Microsoft Access 97 Office Assistant.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: combo fill inf multipleselection multiple-select<BR>
multipleselect<BR>
Keywords          : FmsCmbo<BR>
Version           : WINDOWS:7.0,97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

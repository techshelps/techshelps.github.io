

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OFF97: How to Show a "Now Processing" Dialog While Macro Runs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162257">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1997/01/16">
<META NAME="Keywords" CONTENT="kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article describes how you can display a dialog box while a macro is running in the background. The purpose of displaying a dialog box is to alert the user that the application is busy while your macro is running.  MORE INFORMATION  When you us...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBJZ,QBWS,QA01,QBS0,QBVP,QAMB,QAPN,QAFF,QAZM,QAZL,QATX,QAIH,QAMA,QAC2 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OFF97: How to Show a "Now Processing" Dialog While Macro Runs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162257</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Office 97 for Windows
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how you can display a dialog box while a macro is
running in the background. The purpose of displaying a dialog box is to
alert the user that the application is busy while your macro is running.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When you use the Show method to display a UserForm, the UserForm is shown
"modal"; that is, the user must respond to the UserForm before using any
other part of the application. After a UserForm is loaded, no subsequent
code is executed until the UserForm is either hidden or unloaded.
<P>
To display a dialog box and allow the macro to run in the background, you
can run your macro in the Activate event of the UserForm. When the UserForm
is shown, the Activate event is triggered and your macro will run while the
UserForm is shown on the screen. The following steps illustrate how you can
accomplish this:
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.

<OL><P><LI>Start a new workbook in Microsoft Excel 97 (or a new document in
    Microsoft Word 97).

<P><LI>Press ALT+F11 to activate the Visual Basic Editor.

<P><LI>On the Insert menu, click Module to insert a module into the project.

<P><LI>Press F4 to display the Properties window.

<P><LI>Change the Name property of the module to "Processing_Code" (without
    the quotation marks).

<P><LI>In the Processing_Code module window, type the following:
<P>
      Public Processing_Message As String
      Public Macro_to_Process As String
<P>
<PRE>      Sub StartProcessing (msg As String, code As String)

         Processing_Message = msg    'Set the message that is displayed
                                     'in the dialog box

         Macro_to_Process = code     'Set the macro that is run after the
                                     'dialog box is active

         Processing_Dialog.Show      'Show the Dialog box

      End Sub

</PRE><P><LI>On the Insert menu, click UserForm to add a UserForm to the project.

<P><LI>Press F4 to display the Properties Window. Change the UserForm
    properties to the following settings.
<P>
<PRE>       Property           Setting
       -------------------------------------

       Name               Processing_Dialog
       Caption            (Leave Blank)
       StartUpPosition    2-CenterScreen

</PRE><P><LI>Add one Label control to the UserForm. Change the Name property of the
    label to "lblMessage."

<P><LI>Select the UserForm. On the View menu, click Code. In the code window,
    in the Procedure list, select the Initialize event, and then type the
    following in the Code window:
<P>
       Private Sub UserForm_Initialize()
<P>
<PRE>          lblMessage.Caption = Processing_Message  'Change the Label
                                                   'Caption

       End Sub

</PRE><P><LI>In the Code window, click Activate event in the Procedure list,
    and type the following:
<P>
       Private Sub UserForm_Activate()
<P>
<PRE>          Me.Repaint                         'Refresh the UserForm
          Application.Run Macro_to_Process   'Run the macro
          Unload Me                          'Unload the UserForm

       End Sub

</PRE><P><LI>On the Insert menu, click Module. Type the following code in the
    Code window:
<P>
<PRE>       Sub MyMacro()

          For x = 1 to 5000
             Application.StatusBar = x   '5000 Iterations Changing
                                         'StatusBar
          Next

          Application.StatusBar = False  'Reset the StatusBar

       End Sub

       Sub Main()

          'Call the StartProcessing procedure to show the Processing_Dialog
          'with the label "Processing, Please Wait..." and execute
          'MyMacro.

          StartProcessing "Processing, Please Wait...", "MyMacro"

       End Sub

</PRE><P><LI>Press ALT+Q to leave the Visual Basic Editor and return to Microsoft
    Excel (or Microsoft Word).

<P><LI>On the Tools menu, point to Macro, and click Macros. Select the Main
    macro and click Run. The Processing_Dialog dialog box appears.
<P>
</OL>While the dialog box is shown, the status bar text in the application
increments from 1 to 5000--the changing status bar text is the indication
that your macro is running while the dialog box is on the screen.
<P>
<P><h3>How to Use the Processing Dialog Box in Other Workbooks</h3>
 
<P>
To use this "Processing, Please Wait" dialog box with macros in other
workbooks or documents, do the following:

<OL><P><LI>Activate the Visual Basic Editor. On the View menu, click Project
   Explorer.

<P><LI>Select the project that you created in the previous steps.

<P><LI>Right-click the "Processing_Dialog" UserForm and click Export File.
   Save the UserForm as "Processing_Dialog.frm."

<P><LI>Right-click the "Processing_Code" Module and click Export File. Save
   the module as "Processing_Code.bas."

<P><LI>Return to Microsoft Excel and open the workbook in which you would like
   to use the "Processing, Please Wait" dialog box.

<P><LI>Activate the Visual Basic Editor.

<P><LI>On the File menu, click Import File, select the "Processing_Dialog.frm"
   file, and click Open.

<P><LI>On the File menu, click Import File. Select the "Processing_Dialog.bas"
   file, and click Open.

<P><LI>On the Insert menu, click Module, and type the following code in the
   Code window:
<P>
<PRE>      Sub Main()
         StartProcessing "&lt;message text&gt;", "&lt;macro name&gt;"
      End Sub

   Where the &lt;message text&gt; argument is the text string that you want to
   display in the Processing_Dialog dialog box and &lt;macro name&gt; is the
   macro that you would like to run after the dialog box appears. To show
   the dialog box and run the macro indicated by "&lt;macro name&gt;", run the
   macro Main.

</PRE></OL>For information on how to show a temporary message box while a macro is
running in Microsoft Excel versions 5.x or 7.x, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q148209.htm">Q148209</A></B>
   TITLE     : XL: How to Create a Temporary Message Box While Macro Runs
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OffInterop xlvbahowto xlvbainfo 8.00 97 execute <BR>
executing background off97 xl97<BR>
word97 splash screen<BR>
Keywords          : kbcode kbprg<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

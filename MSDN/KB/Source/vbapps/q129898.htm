

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Naming Conflicts Between Variables and Objects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129898">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="PrgOther VB4ALL VB4WIN vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Conflicts between the names of various constructs produce errors in Visual Basic version 4.0.  CAUSE =====  Problems of this type are caused by not taking into account the scope of variables and objects. When a conflict occurs, Visual Basic gives p...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUJ,QAYL,QBS0,QAJQ,QAH4,QARM,QAW6,QAPN,QAM9,QAHC,QAB9,QAY5,QAYV,QBWD,QBBI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Naming Conflicts Between Variables and Objects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129898</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft Visual
   Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Conflicts between the names of various constructs produce errors in Visual
Basic version 4.0.
<P>
<P><h2>CAUSE</h2>
 
<P>
Problems of this type are caused by not taking into account the scope of
variables and objects. When a conflict occurs, Visual Basic gives
precedence to constructs of a narrower scope over those of a broader scope.
Some cases of this type can be handled by Visual Basic's design time syntax
checker, but others must be handled later (called late binding) in order to
permit more versatility.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Use unique names for variables, objects, and other constructs whenever
possible. When this is not possible, such as with type libraries, specify a
fully qualified name (for example, OpenDialog.Help_Button) to avoid
potential conflicts.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Variables</h3>
 
<P>
Variables have three possible levels of scope: local, module, and global.
If two variables of the same name are defined, Visual Basic uses the
variable of the narrowest scope. Therefore, by using unique names for local
variables, you can avoid a problem.
<P>
<P><h3>Type and Object Libraries</h3>
 
<P>
Multiple type libraries may use the same name but give different values.
The ShowHelp flag of the Common Dialog control has different values for
each type of dialog that uses it. Attempting to refer to just ShowHelp
produces the diagnostic "Ambiguous name detected" at run time.
<P>
To avoid conflicts, specify the fully qualified name of the construct, such
as FileOpenConstants.ShowHelp. The "Ambiguous name detected" topic in the
Help file describes the following other ways this message can be produced:

<UL><LI>More than one object in the same scope may have elements with the same
   name. Qualify the element name by including the object name and a
   period. For example:
<P>
<P><PRE>      Object.Property
</PRE>
<LI>Module-level identifiers and project-level identifiers (module names and
   referenced project names) may be reused in a procedure although it
   makes programs harder to maintain and debug. However, if you want to
   refer to both items in the same procedure, the item having wider scope
   must be qualified. For example, if MyID is declared at the module level
   of MyModule, and then a procedure-level variable is declared with the
   same name in the module, references to the module-level variable must be
   appropriately qualified:
<P>
<P><PRE>      Dim MyID As String
</PRE><P>
<PRE>      Sub MySub
         MyModule.MyID = "This is module-level variable"
         Dim MyID As String
         MyID = "This is the procedure-level variable"
         Debug.Print MyID
         Debug.Print MyModule.MyID
      End Sub

</PRE><LI>An identifier declared at module level conflicts with a procedure name.
   For example, this error occurs if the variable MyID is declared at
   module level, and then a procedure is defined with the same name:
<P>
<P><PRE>      Public MyID
</PRE><P>
<PRE>      Sub MyID
         '. . .
      End Sub

   In this case, change one of the names because modification with a common
   module name would not resolve the ambiguity. Note that procedure names
   are Public by default, but variable names are Private unless specified
   as Public.

</PRE></UL><h3>Form and Module Names</h3>
 
<P>
Using the name of an internal function as the name of a Module, such as
String.BAS, produces no diagnostic in the IDE. Attempting to run the
program with references to the String$() functions produces the following
diagnostic:
<P>
<PRE>   Expected variable or procedures, not module

</PRE>Because Visual Basic considers the module definition to be of narrower
scope than the internal function, it attempts to call the module as a
function. Specifying the function as VBA.String$() resolves the issue, but
selecting a different module name is the better option.
 
<PRE>Keywords          : PrgOther VB4ALL VB4WIN vbwin GnrlVb kbprg
Technology        : kbvba
Version           : WINDOWS:4.0
Platform          : WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

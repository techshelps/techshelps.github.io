

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Visual Basic Example to Delete Blank Rows </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q110759">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/01/28">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The following Visual Basic code locates blank cells within a range and deletes the entire row that contains that cell. The code brings up a dialog box that prompts the user for the total number of rows to process. The macro begins at the active cel...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QA5V,QAH4,QAM9,QALX,QAEF,QAWH,QBCT,QAKC,QAGC,QAGB,QBC6,QAPF,QADP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Visual Basic Example to Delete Blank Rows</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q110759</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following Visual Basic code locates blank cells within a range and
deletes the entire row that contains that cell. The code brings up a
dialog box that prompts the user for the total number of rows to
process. The macro begins at the active cell and moves down the
specified number of rows.
<P>
<P><h3>Visual Basic Example</h3>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures
for illustration only, without warranty either expressed or implied,
including, but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. The Visual Basic procedures in
this article are provided 'as is' and Microsoft does not guarantee that
they can be used in all situations. While Microsoft support engineers
can help explain the functionality of a particular macro, they will not
modify these examples to provide added functionality, nor will they
help you construct macros to meet your specific needs. If you have
limited programming experience, you may want to consult one of the
Microsoft Solution Providers. Solution Providers offer a wide range of
fee-based services, including creating custom macros. For more
information about Microsoft Solution Providers, call Microsoft Customer
Information Service at (800) 426-9400.
<P>
<PRE>' The following code deletes blank rows from the active worksheet.

</PRE>Dim Counter
Dim i As Integer
<P>
<PRE>Sub DelRow()

' Input box to determine the total number of rows in the worksheet.
</PRE>Counter = InputBox("Enter the total number of rows to process")
<P>
<PRE>' Loops through the desired number of rows.
</PRE>For i = 1 To Counter
<PRE>    ' Checks to see if the active cell is blank.
    If ActiveCell = "" Then
        Selection.EntireRow.Delete

        ' Decrements count each time a row is deleted. This ensures
        ' that the macro will not run past the last row.
        Counter = Counter - 1
    Else
        ' Selects the next cell.
        ActiveCell.Offset(1, 0).Select
    End If

</PRE>Next i
<P>
<PRE>End Sub

</PRE>NOTE: you can also delete lines that contain spaces or other non-
display characters. To do so, change the line that reads
<P>
<PRE>   If ActiveCell = "" Then

   -to-

   If Len(Trim(ActiveCell)) = 0 Then

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 7.00 8.00 97<BR>
Keywords          : kbprg PgmHowTo<BR>
Version           : 5.00 5.00c 7.00 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

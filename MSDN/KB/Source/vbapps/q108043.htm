

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: VB Uses OLE Automation with Word Version 6.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108043">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1993/12/02">
<META NAME="Keywords" CONTENT="IAPOLE vb416 VB4WIN vbwin GnrlVb kbprg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article demonstrates how to use Microsoft Word version 6.0 Object Linking and Embedding (OLE) Automation from Visual Basic. Microsoft Word version 6.0 offers a single OLE object that supports most WordBasic statements and functions as methods....">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIH,QBS0,QAPN,QA9Q,QAW6,QA5F,QDO7,QBMR,QA2K,QBXS,QAMA,QDL9,QBWQ,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: VB Uses OLE Automation with Word Version 6.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108043</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit only, for Windows, version 4.0
<LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, version 3.0
<LI>Microsoft Word for Windows, version 6.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to use Microsoft Word version 6.0 Object
Linking and Embedding (OLE) Automation from Visual Basic. Microsoft Word
version 6.0 offers a single OLE object that supports most WordBasic
statements and functions as methods. This allows you to create and run
WordBasic code from Visual Basic.
<P>
NOTE: The technique described in this article may not work if Microsoft
Word version 6.0 is set to do background printing. When background printing
is on, setting Word=Nothing may cause the Print Job to be canceled. If you
encounter this problem, you can work around it by making the Word object
variable's scope local to the form rather than to the Sub procedure. Or you
can avoid the problem by turning background printing off (On is the
default for Word for Windows). To turn background printing off, choose
Options from the Tools menu. Then click the Print tab, and clear the
checkbox for background printing.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Example of OLE Automation</h3>
 
<P>
You can invoke the CreateObject function in Visual Basic using
Word.Basic as the class name for the WordBasic object. The following
example creates and uses a WordBasic OLE object:
<P>
<PRE>   Sub WordExample ()
      Dim Word As Object                    'Declare an object variable
      Set Word = CreateObject("Word.Basic") 'Set the object pointer
      Word.FileNew                          'Create a new File in Word
      Word.Bold                             'Make the Font Bold
      Word.FontSize 24                   'Make the Font 24 point in size
      Word.CenterPara                    'Center Text on page
      Word.Insert "Isn't VB Great!!"     'Insert some text
      Word.FilePrintDefault              'Print the current document
      Word.FileClose 2                   'Close file without saving.
      Set Word = Nothing                 'Clear the object pointer.
   End Sub

</PRE>The CreateObject function will launch Word version 6.0 if it is not
already running, otherwise it will use the currently-active instance of
Word.
<P>
The Set Word = Nothing statement will exit Word if Word was launched by
the CreateObject statement.
<P>
OLE Automation cannot invoke the FileExit method of WordBasic. Because
OLE Automation cannot start a new instance of Word after the initial
instance, OLE Automation assumes that the user started Word and the user
is responsible for exiting the application.
<P>
<P><h3>Troubleshooting Common Problems When Using OLE Automation</h3>
 
<P>
The following are answers to common problems that you may encounter when
using the Word.Basic OLE object from Visual Basic:

<OL><P><LI>The CreateObject function could cause an error under any of the
   following circumstances:
<P>
<P><PRE>    - Word is not registered in the Windows REG.DAT file.
</PRE><P>
<P><PRE>    - Windows is low on system resources.
</PRE><P>
<P><PRE>    - Your user-defined NORMAL.DOT template and/or automatically loading
      macros in Word could run automatic actions that might conflict with
      your requested OLE Automation commands.
</PRE><P>
<P><PRE>    - The OLE server application is not found. With Windows version 3.1,
      object linking and embedding (OLE) clients look for a server
      application in the following order:
</PRE><P>
<P><PRE>      1. The location specified in the Windows REG.DAT file.
      2. The location specified in the WIN.INI file.
      3. The WINDOWS directory.
      4. The WINDOWS\SYSTEM directory.
      5. The location specified in the MS-DOS PATH environment variable
<PRE></PRE>         (which is specified in the AUTOEXEC.BAT file).

</PRE><P><LI>The WordBasic language allows certain shortcuts that are not supported
   by Visual Basic. For example, the following statement is valid in
   WordBasic but not in Visual Basic:
<P>
<P><PRE>      FormatFont .Bold = 1
</PRE><P>
   Visual Basic does not support named parameters, such as .Bold above.
   Visual Basic requires you to convert this to the following:
<P>
<PRE>      Dim Word As Object                    'Declare an object variable
      Set Word = CreateObject("Word.Basic") 'Set the object pointer
      Word.FormatFont ,,,,,,,,,,,,,,,,True  'Format selection as bold.

   Fortunately, many WordBasic methods are implemented with more than one
   method, which can simplify the syntax required by Visual Basic. For
   example, WordBasic has a direct Bold method which you can invoke as
   follows from Visual Basic:

      Word.Bold

</PRE><P><LI>Visual Basic requires you to pass all arguments up to the last necessary
   argument. The following example shows the arguments for the ToolsMacro
   method of WordBasic.
<P>
   To run a Word macro, use this syntax:
<P>
<PRE>      Dim Word As Object                    'Declare an object variable
      Set Word = CreateObject("Word.Basic") 'Set the object pointer
      Word.ToolsMacro "MyMacro", True       'Run the macro called MyMacro

   To rename a Word macro, use this syntax:

      'VB3Line: Enter the following lines as one line
      Word.ToolsMacro "MyMacro", False, False, 0, False, True, _
         "Description for Your Macro", "NewMacroName"

</PRE><P><LI>The online Help for Microsoft Word version 6.0 doesn't always show the
   arguments in the correct order. For example, Word ToolsMacro parameters
   should be in this order:
<P>
   ToolsMacro .Name = text [, .Run][, .Edit][, .Show = number][, .Delete]
<P><PRE>      [,.Rename] [, .Description = text][, .NewName = text][, .SetDesc]
</PRE>
<P><LI>WordBasic methods that return strings have a syntax that includes a
   dollar sign, $, to indicate the return type. Visual Basic requires you
   to enclose these $ methods in square brackets []. The following example
   returns the text stored in the bookmark "MyBookMark":
<P>
<PRE>      Dim Word As Object                    'Declare an object variable
      Set Word = CreateObject("Word.Basic") 'Set the object pointer
      MyVar = Word.[GetBookMark$]("MyBookMark")  'Return text from bookmark

</PRE></OL><h3>What is OLE Automation?</h3>
 
<P>
Object linking and embedding (OLE) Automation is a Windows protocol that
allows an application to share data or control another application. OLE
Automation is an industry standard that applications use to expose their
OLE objects to development tools, macro languages, and other containers
that support OLE Automation.
<P>
Word for Windows provides other applications with an object called
Basic and a class name called Word.Basic. Using this object, other
applications can send WordBasic instructions to Microsoft Word
version 6.0 for Windows.
<P>
Applications such as Visual Basic version 3.0 applications that support OLE
Automation can use OLE Automation with Word version 6.0, but Word cannot
use OLE Automation to gain access to other applications. Using the
terminology of Dynamic Data Exchange (DDE), this means that Word can act as
a server for another application but cannot act as the client.
<P>
A spreadsheet application may expose a worksheet, chart, cell, or range
of cells, all as different types of OLE objects. A word processor
might expose OLE objects such as application, paragraph, sentence,
bookmark, or selection. You use Visual Basic to manipulate these objects
by invoking methods on the object, or by getting and setting the objects
properties, just as you would with the objects in Visual Basic.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Visual Basic version 3.0: Programmer's Guide," Chapter 23, "Programming
Other Applications' Objects."
<P>
See the following online Help topics in Visual Basic version 3.0:
OLE Automation, CreateObject Function, Object Property, Set Statement
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OLE2 OA winword kbmacro officeinterop<BR>
Keywords          : IAPOLE vb416 VB4WIN vbwin GnrlVb kbprg kbfasttip<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:3.0 4.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

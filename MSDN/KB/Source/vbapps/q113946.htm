

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Optimize OLE Server Instance Usage by Using GetObject </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113946">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/04/20">
<META NAME="Keywords" CONTENT="IAPOLE vbwin GnrlVb kbprg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article gives a full explanation of the syntax of GetObject, adding to the information given in the  Programmer's Guide.   Specifically, this article explains when a new instance of the server application is instantiated, details how to best m...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBVP,QBE7,QBE6,QBS0,QBWS,QBXS,QA6V,QAH4,QAF3,QAAP,QAB4,QAJH,QAB3 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Optimize OLE Server Instance Usage by Using GetObject</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113946</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article gives a full explanation of the syntax of GetObject, adding to
the information given in the "Programmer's Guide."
<P>
Specifically, this article explains when a new instance of the server
application is instantiated, details how to best minimize server instance
usage, and gives an example that shows how to best minimize excess
instances of a server application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The GetObject function has two parameters:

<UL><LI>The first determines the instance usage.
<LI>The second optionally denotes the class of the desired object reference.
<P>
</UL>The basic syntax for GetObject is:
<P>
<PRE>   GetObject([pathname][,class])

</PRE>The pathname parameter can be the path to an existing file, "", or it can
be left out. Specifying the path to an existing file causes GetObject to
use an existing instance of the server application, which is either
explicitly denoted in the second parameter or obtained from the registry
based on the file's extension. The latter two syntax's are used to create
new object references, with the added benefit over CreateObject that you
can control instance usage for the server.
<P>
The following table details the instance usage for the server application
and gives the appropriate syntax:
<P>
Server already running:
<P>
<PRE>  Syntax: Set X = GetObject(,"MySrvr.Object")
  Result: X is reference to existing object

  Syntax: Set X = GetObject("","MySrvr.Object")
  Result: X is reference to new object

</PRE>Server not running:
<P>
<PRE>  Syntax: Set X = GetObject(,"MySrvr.Object")
  Result: Error 429

  Syntax: Set X = GetObject("","MySrvr.Object")
  Result: Server is started and X references new object

</PRE>To establish a reference to an object and minimize the number of server
application instances loaded, use GetObject with a blank first argument,
and trap the error 429 when no instance is loaded. The following example
demonstrates this. The sample application uses Microsoft Excel version 5.0
as its server application.
<P>
<P><h3>Steps to Create Example Program</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a command button (Command1) to Form1.

<P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click ()
      Dim fResult As Integer
      fResult = SmartGetObject("Excel.Application")
   End Sub

</PRE><P><LI>Add the following code:
<P>
   Function SmartGetObject (sClass As String) As Integer
<P><PRE>      Dim oTmpObject As Object
</PRE><P>
<P><PRE>      ' If Server running, oTmpObject refers to that instance.
      ' If Server not running Error 429 is generated.
      On Error Resume Next
      Set oTmpObject = GetObject(, sClass)
      ' oTmpObject is reference to new object.
      If Err = 429 Then
<PRE></PRE>         ' Server not running, so create a new instance:
         Set oTmpObject = GetObject("", sClass)
         ' NOTE: for Excel, you can add the next line to view the object
         ' oTmpObject.Visible = True
      ElseIf Err &gt; 0 Then
         MsgBox Error$
         SmartGetObject = False
         Exit Function
      End If
      SmartGetObject = True
   End Function

</PRE><P><LI>Press the F5 key to run the program.  Click the Command1 button.
<P>
</OL>If a copy of Excel is already loaded, that copy is used to create the
object, otherwise a new copy is loaded.
 
<PRE>Keywords          : IAPOLE vbwin GnrlVb kbprg kbfasttip
Technology        : kbole kbvba
Version           : WINDOWS:3.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

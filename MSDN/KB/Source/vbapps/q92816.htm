

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Converting Julian Dates with Visual or Access Basic Code </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q92816 ">
<META NAME="KBModify" CONTENT="1998/03/17">
<META NAME="KBCreate" CONTENT="1992/11/16">
<META NAME="Keywords" CONTENT="kbprg kb2000">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  Most government agencies and contractors require the use of Julian dates. A Julian date starts with a two-digit year, and then counts the number of days from January 1. Microsoft...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QBT6,QBV4,QDN9,QAHP,QA5F,QAMA,QAH4,QBS0,QACE,QABB,QABA,QAY5,QAD2,QAPF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Converting Julian Dates with Visual or Access Basic Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q92816 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
Most government agencies and contractors require the use of Julian dates.
A Julian date starts with a two-digit year, and then counts the number of
days from January 1. Microsoft Access does not have any built-in functions
for using or converting Julian dates to standard dates. However, you can
write a function to do this. This article demonstrates a sample user-
defined function that converts a Julian date to a standard serial date.
Note that the following sample code assumes the year is in the 20th
century. The code must be changed to process dates after the year 2000.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can use the following sample function, ConvertJulian(), to convert
Julian dates to standard dates.
<P>
NOTE: In the following sample code, an underscore (_) is used as a line-
continuation character. Remove the underscore from the end of the line
when re-creating this code in Access Basic.

<OL><P><LI>Create a module and type the following line in the Declarations
   section:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>      Function ConvertJulian (JulianDate as Long)
<PRE></PRE>         ConvertJulian = DateSerial(1900 + Int(JulianDate / 1000), _
                       1, JulianDate Mod 1000)
      End Function

</PRE></OL><h3>Examples of How to Use the ConvertJulian() Function</h3>
 
<P>
Example 1:

<OL><P><LI>Create a new form in Design view not based on any table or query.

<P><LI>Add the following text box controls to the form:
<P>
<P><PRE>      Text Box:
<PRE></PRE>         Name: Text0
      Text Box:
         Name: Text2
         ControlSource: =ConvertJulian([Text0])

</PRE><P><LI>View the form in Form view. Type 90001 in the first text box, and then
   press TAB to move to the second text box. Note that the Julian date in
   the first text box displays as a standard date in the second text box.
<P>
</OL>Example 2:

<OL><P><LI>Create and save the following new table called Table1:
<P>
<P><PRE>      Table: Table1
      --------------------
      Field Name: Julian
<PRE></PRE>         Data Type: Number

</PRE><P><LI>View the table in Datasheet view. Add the following values to the
   table:
<P>
<P><PRE>      90001
      90010
      92100
</PRE>
<P><LI>Create a new query based on Table1 and drag the Julian field to the
   query grid.

<P><LI>In the Field row of another column on the query grid, enter the
   following:
<P>
<P><PRE>      Normal: ConvertJulian([Julian])
</PRE>
<P><LI>Run the query. Note that the Julian dates are converted to standard
   dates.
</OL> 
<PRE>Keywords          : kbprg kb2000
Version           : 1.0 1.1 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Converting Unsigned Integers to Long Integers </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q96475 ">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1993/03/17">
<META NAME="Keywords" CONTENT="kbprg PgmApi PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  There are situations in which calling functions from external dynamic-link libraries (DLLs) returns a 2-byte unsigned Integer. Visual Basic for Applications (or Access Basic...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QA4Q,QAY5,QDN9,QAUD,QAB9,QAH4,QBS0,QBV8,QAPN,QAMA,QALG,QA5F,QAKD,QBE7 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Converting Unsigned Integers to Long Integers</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q96475 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
There are situations in which calling functions from external dynamic-link
libraries (DLLs) returns a 2-byte unsigned Integer. Visual Basic for
Applications (or Access Basic) does not support this data type. So that
Microsoft Access can correctly evaluate this data type, you need to
convert it from an unsigned Integer to a Long Integer data type.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The integer data type has a range of -32,768 to 32,767. An unsigned
integer has a range of 0 to 65,536.
<P>
Microsoft Access uses the most significant bit to set the sign of the
value. Therefore, when a value exceeds 32,767, bit 16 is set to reflect
a negative number. To evaluate an unsigned integer, you must manually
adjust bit 16.
<P>
There are two methods to convert to and from the unsigned integer type
to the Long Integer data type. The first method uses basic arithmetic
(65,536 is subtracted or added to the unsigned integer). The second uses
bit-wise operators. The arithmetic method works as well as the bit-wise
method; however, the arithmetic method may be more readable, while the
bit-wise method may be faster when executed repetitively.
<P>
Open a new module or a previously created module and enter the
following code:
<P>
<PRE>      '*************************************************************
      'Declarations section of the module.
      '*************************************************************

      Option Explicit

      '=============================================================
      ' Arithmetic Method:
      ' ------------------
      ' Create the following ar_ConvertFromUnsignedInteger&amp; (Uint%)
      '    and ar_ConvertToUnsignedInteger% (Bytes&amp;) function in the
      '    Module. This first function reads in an unsigned integer
      '    and returns the converted value as a long. The second
      '    function reads in a long and returns an unsigned integer.
      '=============================================================

      Function ar_ConvertFromUnsignedInteger&amp; (Uint%)
         If Uint% &lt; 0 Then
            ar_ConvertFromUnsignedInteger&amp; = Uint% + 65536
         Else
            ar_ConvertFromUnsignedInteger% = Uint%
         End If
      End Function

      Function ar_ConvertToUnsignedInteger% (Bytes&amp;)
         If Bytes&amp; &gt; 32767 Then
            ar_ConvertToUnsignedInteger% = Bytes&amp; - 65536
         Else
            ar_ConvertToUnsignedInteger% = Bytes&amp;
         End If
      End Function

      '=============================================================
      ' Bitwise Method:
      ' ---------------
      ' Create the following bw_ConvertFromUnsignedInteger&amp; (Uint%)
      '    and bw_ConvertToUnsignedInteger% (Bytes&amp;) function in the
      '    Module. This first function reads in an unsigned integer
      '    and returns the converted value as a long. The second
      '    function reads in a long and returns an unsigned integer.
      '    The message box statement in the second function is used
      '    to prevent an overflow message when the value passed to
      '    the function is greater than 64 kilobytes.
      ' To illustrate what is taking place in the first bitwise function:
      '    Uint% equals -23584, a value returned from an external dynamic
      '    link library that is an unsigned integer and must be
      '    converted to an long:
      '        1010001111100000 (-23584)
      '    AND   11111111111111 (7FFF)
      '        ----------------
      '          10001111100000 (41952)
      '=============================================================

      Function bw_ConvertToUnsignedInteger% (Bytes&amp;)
         Dim x%
         If Bytes&amp; &gt; 65535 Then
            MsgBox "You passed a value larger than 65535"
            Exit Function
         End If

         x% = Bytes&amp; And &amp;H7FFF
         bw_ConvertToUnsignedInteger% = x% Or -(Bytes&amp; And &amp;H8000)
      End Function

      Function bw_ConvertFromUnsignedInteger&amp; (Uint%)
         bw_ConvertFromUnsignedInteger&amp; = Uint% And &amp;HFFFF&amp;

      '-------------------------------------------------------------
      ' The &amp;HFFFF&amp; requires the &amp; at the end of the hex number. This
      '    qualifies the hex number as 32-bit versus 16-bit.
      '-------------------------------------------------------------

      End Function

</PRE><h3>Examples of Using These Functions</h3>
 
<P>
An external dynamic-link library (DLL) requires and returns an unsigned
integer. The Declare statement looks like the following:
<P>
<PRE>   Declare Function External_Call% Lib "your.dll" (ByVal ValueToPass%)

</PRE>The Declare statement uses integer data types because Microsoft Access
does not support unsigned integers. However, the external dynamic-link
library does not know this and returns an unsigned integer that must be
converted for use; therefore, the code may appear as follows:
<P>
<PRE>   x% = External_Call(bw_ConvertToUnsignedInteger%(41952))
   y&amp; = bw_ConvertFromUnsignedInteger&amp;(x%)

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about converting code from earlier Microsoft Access
versions, search the Help Index for "Declare statement," and then
"Convert Code that calls a DLL."
 
<PRE>Keywords          : kbprg PgmApi PgmHowTo
Version           : 1.0 1.1 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

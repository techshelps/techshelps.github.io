

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Arguments Are Evaluated from Right to Left in Some Cases </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q138519">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1995/10/23">
<META NAME="Keywords" CONTENT="PrgOther VB4ALL VB4WIN vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Visual Basic 4.0 allows you to pass a variable number of arguments to a subroutine or function by using a parameter array (ParamArray). Although, arguments passed to another function or subroutine are evaluated from right to left when a parameter a...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHE,QAVX,QAH4,QAY5,QAPN,QAVW,QBE7,QBE6,QAE8,QAKD,QABH,QADK,QAEB,QBS0,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Arguments Are Evaluated from Right to Left in Some Cases</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q138519</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Visual Basic 4.0 allows you to pass a variable number of arguments to a
subroutine or function by using a parameter array (ParamArray). Although,
arguments passed to another function or subroutine are evaluated from right
to left when a parameter array is used in the 32-bit version, the 16-bit
version evaluates arguments from left to right when a parameter array is
used.
<P>
Arguments are evaluated from left to right if a set number of arguments is
passed to a function or subroutine in both the 16-bit and 32-bit versions.
<P>
Arguments are evaluated from right to left when using the switch function
in both the 16-bit and 32-bit versions of Visual Basic.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Code that relies on the order of evaluation of arguments passed to another
function is dangerous code in any language. To correct code that fails
because of the order of evaluation, Microsoft recommends that arguments be
explicitly calculated before being passed to a function or subroutine.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following table summarizes the order in which arguments are evaluated:
<P>
<PRE>Version   Parameter Array   Set Number of Arguments   Switch Function
</PRE> 
<PRE>16-bit    Left to Right     Left to Right             Right to Left
32-bit    Right to Left     Left to Right             Right to Left

</PRE>The following example illustrates the danger of relying on the order of
evaluation of arguments. In all cases, you can fix the code by first
calculating the arguments and then passing the results to the function.
<P>
<P><h3>Steps to Reproduce Behavior When Using a ParamArray Argument</h3>
 
<P>
This example was constructed in Visual Basic 4.0 using the 32-bit version,
but the 16-bit or 32-bit version can be used.

<OL><P><LI>Create a new project. On Form1 (the default form), place one command
   button (Command1).

<P><LI>In the Click event for the Command1 button, place this code:
<P>
<PRE>   Private Sub Command1_Click()
      y = Test(inc(1), inc(2), inc(3))
      Debug.Print y
   End Sub

</PRE><P><LI>In the General section for Form1, place these two code segments:
<P>
   Function Test(ParamArray z()) As Integer
<P><PRE>      Test = z(2)
</PRE>   End Function
<P>
   Public Function inc(y As Integer) As Integer
<P><PRE>      Static x As Integer
      x = x + 1
      inc = x + y
</PRE>   End Function

<P><LI>Run the program by pressing the F5 key, and click the Command1 button.
<P>
   The debug window prints out the number 4. If the arguments were
   evaluated from left to right, the same code would print out the number 6
   because x would be incremented twice before the third argument was
   evaluated in the inc function.
<P>
   If a set number of arguments are passed to the Test function, then the
   arguments are evaluated from left to right. This is illustrated by
   rewriting the function Test as follows:
<P>
   Function Test(z0, z1, z2) As Integer
<P><PRE>      Test = z2
</PRE>   End Function
<P>
   In this case, the debug window prints out 6.
<P>
   To fix the code, and still use a parameter array, you could change the
   code in the Click event of Command1 to evaluate the arguments first as
   in this example:
<P>
<PRE>   Private Sub Command1_Click()
      X1 = inc(1)
      X2 = inc(2)
      x3 = inc(3)
      y = Test(X1, X2, X3)
      Debug.Print y
   End Sub

</PRE></OL><h3>Steps to Reproduce Behavior When Using the Switch Function</h3>
 

<OL><P><LI>Create a new project. On Form1 (the default form), place one command
   button (Command1).

<P><LI>In the Click event for the Command1 button, place this code:
<P>
<PRE>   Private Sub Command1_Click()
      Test
   End Sub

</PRE><P><LI>In the General section for Form1, place these two code segments:
<P>
   Public Function inc(x As Integer, ByVal y As Integer) As Integer
<P><PRE>      x = x + 1
      inc = x
      Debug.Print "x: "; x; "evaluated at position"; y
</PRE>   End Function
<P>
   Public Sub Test()
<P><PRE>      Dim x As Integer
      x = -1
      y = Switch(False, inc(x, 1), False, inc(x, 2), True, inc(x, 3))
      Debug.Print y
<PRE></PRE>   End Sub

</PRE><P><LI>Run the program by pressing the F5 key, and click the Command1 button.
   From the output, you can see that inc(x,3) evaluates first, then
   inc(x,2) evaluates, and finally inc(x,1) evaluates.
</OL> 
<PRE>Keywords          : PrgOther VB4ALL VB4WIN vbwin GnrlVb kbprg
Technology        : kbvba
Version           : WINDOWS:4.0
Platform          : NT WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

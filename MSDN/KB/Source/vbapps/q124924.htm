

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: VB Procedure to Emulate Find Command </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q124924">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1995/01/16">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbahowto PgmHowto PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  You can create a Microsoft Visual Basic for Applications procedure that  emulates the behavior of the Microsoft Excel Find command. To do this, use  the Find and FindNext methods in a Visual Basic module.  The code in the  More Information  section...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QA01,QBS0,QATX,QAH4,QBVV,QAPN,QDNZ,QAMB,QAB9,QAVZ,QDMR,QA6A,QAYL,QAUD P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: VB Procedure to Emulate Find Command</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q124924</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can create a Microsoft Visual Basic for Applications procedure that 
emulates the behavior of the Microsoft Excel Find command. To do this, use 
the Find and FindNext methods in a Visual Basic module.
<P>
The code in the "More Information" section of this article allows you to
find all occurrences of a search string in the active worksheet without
changing the selection or the active cell. When the search text is located, 
the code displays a message box with the address of the cell that contains 
the search string. If the search text is not found, a "Search Value Not 
Found" message box is displayed.
<P>
NOTE: You can easily modify this code by replacing the MsgBox statements
with the code that you want to run whenever the search text is or is not
found.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Sample Visual Basic Procedure</h3>
 
<P>
<PRE>   Sub FindStrings()
       Dim firstCell, nextCell, stringToFind As String
       ' Show an input box and return the entry to a variable.
       stringToFind = _
           Application.InputBox("String to find?", "Search String")
       ' Set an object variable to evaluate the Find command.
       Set firstCell = Cells.Find(what:=stringToFind, lookat:=xlWhole, _
           searchdirection:=xlPrevious)
       ' If the string is not found, show this message box.
       If firstCell Is Nothing Then
           MsgBox "Search Value Not Found.", vbExclamation
       Else
           ' Otherwise, find the next occurrence of the search text.
           nextCell = _
               Cells.FindNext(after:=Range(firstCell.Address)).Address
           ' Show its address in a message box.
           MsgBox nextCell
           ' Continue finding the next occurrence as long as the address of
           ' the found cell is not the same as the first cell.
           Do While firstCell.Address &lt;&gt; nextCell
               nextCell = Cells.FindNext(after:=Range(nextCell)).Address
               MsgBox nextCell
           Loop
       End If
   End Sub

</PRE>If the range in which the search text is to be found is in a small portion 
of the worksheet, use the For...Each control structure instead of the Find 
method (For...Each requires less code). The advantage to the Find method is 
that it is faster than For...Each on large ranges such as an entire 
worksheet.
<P>
If the string that you are searching for is only a portion of the contents 
of a cell, use the "xlPart" constant for the lookat named argument of the 
Find method.
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q108892.htm">Q108892</A></B>
   TITLE     : XL: Cells.Find Returns Error When No Match Found

</PRE><h2>REFERENCES</h2>
 
<P>
"Visual Basic User's Guide," pages 148-149
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 7.00 8.00 XL97 XL98 XL7 XL5 5.00 FindNext Find <BR>
Searching<BR>
Keywords          : kbcode kbprg xlvbahowto PgmHowto PgmOthr<BR>
Version           : WINDOWS:5.0,5.0c,7.0,97; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

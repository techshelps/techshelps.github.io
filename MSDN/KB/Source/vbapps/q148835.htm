

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Retrieve Workgroup Information Under Win32 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148835">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1996/03/25">
<META NAME="Keywords" CONTENT="kbprg PgmApi">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  Using the Win32 application programming interface (API), you can retrieve network information, such as the user name, workgroup, domain, and computer name, about the current...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWO,QAY5,QBS0,QAB9,QACJ,QA1S,QDL9,QBWN,QBV8,QA7A,QA69,QBWP,QAVX,QAUJ,QARM P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Retrieve Workgroup Information Under Win32</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148835</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
Using the Win32 application programming interface (API), you can retrieve
network information, such as the user name, workgroup, domain, and computer
name, about the currently running computer when you are running Microsoft
Windows NT or Microsoft Windows 95.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NetWkstaGetInfo(), a Windows API, takes advantage of the Windows NT
security model and returns the computer, workgroup, and domain. Windows
95, however, can get the current user name with the network independent
function call WNetGetUser and can get the current computer name with the
function GetComputerName(). The code samples demonstrate the use of all
three.
<P>
The following example shows how to use Visual Basic and the Win32 API to
retrieve network information:

<OL><P><LI>Create a module and type the following lines in the Declarations
   section:
<P>
   NOTE: You may have some Microsoft Windows API functions defined in an
   existing Microsoft Access library; therefore, your declarations may be
   duplicates. If you receive a duplicate procedure name error message,
   remove or comment out the declarations statement in your code.
<P>
   NOTE: All Declare statements must be typed exactly as shown, including
   capitalization, because Win32 names are case-sensitive. To help
   eliminate errors by you or others who use your Declare statements,
   create Alias clauses for Declare statements that do not have an existing
   Alias. As long as the Alias is correctly spelled and capitalized, it
   does not matter how the function name is capitalized.
<P>
   NOTE: Make sure to click the Compile All command on the Run menu to
   verify that you do not receive any compilation errors.
<P>
<P><PRE>      Option Explicit
      Type WKSTA_INFO_101
<PRE></PRE>         wki101_platform_id As Long
         wki101_computername As Long
         wki101_langroup As Long
         wki101_ver_major As Long
         wki101_ver_minor As Long
         wki101_lanroot As Long
      End Type

      Type WKSTA_USER_INFO_1
         wkui1_username As Long
         wkui1_logon_domain As Long
         wkui1_logon_server As Long
         wkui1_oth_domains As Long
      End Type

      Declare Function WNetGetUser&amp; Lib "Mpr" Alias "WNetGetUserA" _
         (lpName As Any, ByVal lpUserName$, lpnLength&amp;)
      Declare Function NetWkstaGetInfo&amp; Lib "Netapi32" _
         (strServer As Any, ByVal lLevel&amp;, pbBuffer As Any)
      Declare Function NetWkstaUserGetInfo&amp; Lib "Netapi32" _
         (reserved As Any, ByVal lLevel&amp;, pbBuffer As Any)
      Declare Sub lstrcpyW Lib "Kernel32" (dest As Any, ByVal src As Any)
      Declare Sub lstrcpy Lib "Kernel32" (dest As Any, ByVal src As Any)
      Declare Sub RtlMoveMemory Lib "Kernel32" _
         (dest As Any, src As Any, ByVal size&amp;)
      Declare Function NetApiBufferFree&amp; Lib "Netapi32" (ByVal buffer&amp;)

</PRE><P><LI>Type the following procedure:
<P>
<P><PRE>      Function GetWorkstationInfo()
<PRE></PRE>         Dim ret As Long, buffer(512) As Byte, i As Integer
         Dim wk101 As WKSTA_INFO_101, pwk101 As Long
         Dim wk1 As WKSTA_USER_INFO_1, pwk1 As Long
         Dim cbusername As Long, username As String
         Dim computername As String, langroup As String, logondomain As _
            String

         ' Clear all of the display values.
         computername = "": langroup = "": username = "": logondomain = ""

         ' Windows 95 or NT - call WNetGetUser to get the name of the user.
         username = Space(256)
         cbusername = Len(username)
         ret = WNetGetUser(ByVal 0&amp;, username, cbusername)
         If ret = 0 Then
            ' Success - strip off the null.
            username = Left(username, InStr(username, Chr(0)) - 1)
         Else
            username = ""
         End If

      '================================================================
      ' The following section works only under Windows NT
      '================================================================

         'NT only - call NetWkstaGetInfo to get computer name and lan group
         ret = NetWkstaGetInfo(ByVal 0&amp;, 101, pwk101)
         RtlMoveMemory wk101, ByVal pwk101, Len(wk101)
         lstrcpyW buffer(0), wk101.wki101_computername
         ' Get every other byte from Unicode string.
         i = 0
         Do While buffer(i) &lt;&gt; 0
            computername = computername &amp; Chr(buffer(i))
            i = i + 2
         Loop
         lstrcpyW buffer(0), wk101.wki101_langroup
         i = 0
         Do While buffer(i) &lt;&gt; 0
            langroup = langroup &amp; Chr(buffer(i))
            i = i + 2
         Loop
         ret = NetApiBufferFree(pwk101)

         ' NT only - call NetWkstaUserGetInfo.
         ret = NetWkstaUserGetInfo(ByVal 0&amp;, 1, pwk1)
         RtlMoveMemory wk1, ByVal pwk1, Len(wk1)
         lstrcpyW buffer(0), wk1.wkui1_logon_domain
         i = 0
         Do While buffer(i) &lt;&gt; 0
            logondomain = logondomain &amp; Chr(buffer(i))
            i = i + 2
         Loop
         ret = NetApiBufferFree(pwk1)

      '================================================================
      'End NT-specific section
      '================================================================

         debug.print computername, langroup, username, logondomain
      End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
   and then press ENTER:
<P>
<P><PRE>      GetWorkstationInfo
</PRE><P>
   Note that your data is printed in the Debug Window.
<P>
</OL>The following example shows how to use Visual Basic and the Win32 API to
retrieve the current computer name under Windows 95:

<OL><P><LI>Create a module and type the following lines in the Declarations
   section:
<P>
<P><PRE>       Option Explicit
       Private Declare Function GetComputerName _
       Lib "kernel32" Alias "GetComputerNameA" ( _
       ByVal lpBuffer As String, nSize As Long) As Long
</PRE><P>
<P><PRE>       Private Const MAX_COMPUTERNAME_LENGTH As Long = 15&amp;
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>       Public Function CurrentMachineName() As String
       Dim lSize As Long
       Dim sBuffer As String
       sBuffer = Space$(MAX_COMPUTERNAME_LENGTH + 1)
       lSize = Len(sBuffer)
</PRE><P>
<PRE>          If GetComputerName(sBuffer, lSize) Then
              CurrentMachineName = Left$(sBuffer, lSize)
          End If

       End Function

</PRE><P><LI>To test this function, type the following line in the Debug window, and
   then press ENTER:
<P>
<P><PRE>       ?CurrentMachineName()
</PRE><P>
   Note that your data is printed to the Debug Window.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For an example of this article in Microsoft Access version 2.0, please see
the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q101676.htm">Q101676</A></B>
   TITLE:      ACC: How to Retrieve Windows for Workgroups User
               Information

</PRE></OL>Microsoft Win32 SDK, "Reference"
 
<PRE>Keywords          : kbprg PgmApi
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

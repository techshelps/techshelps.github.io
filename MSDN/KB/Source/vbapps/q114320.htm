

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Square Brackets in a Visual Basic Procedure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114320">
<META NAME="KBModify" CONTENT="1997/07/29">
<META NAME="KBCreate" CONTENT="1994/05/01">
<META NAME="Keywords" CONTENT="kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Square brackets ([]) are used in Visual Basic 3.0 so that the contents of the brackets are ignored when the code is run. This is useful when you are using OLE Automation statements because the brackets allow a manual override of the syntax checker....">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAIH,QAB9,QAPN,QAH4,QA5F,QAMA,QA4N,QBVV,QAPF,QBVP,QDO7,QBXT,QA5V,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Square Brackets in a Visual Basic Procedure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114320</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Programming System, Applications Edition,
   version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Square brackets ([]) are used in Visual Basic 3.0 so that the contents of
the brackets are ignored when the code is run. This is useful when you are
using OLE Automation statements because the brackets allow a manual
override of the syntax checker.
<P>
Microsoft Visual Basic Programming System, Applications Edition also uses a
syntax checker. When you use brackets in your procedure, they are sometimes
removed after you run the procedure. In most cases, this does not cause a
problem. However, if the statement needs to be recompiled, for example, if
you copy the statement that no longer contains the brackets, and paste it
to another location in a module, a syntax error appears when you run the
pasted statement.
<P>
In most cases, there is another way to reference an object or method with
the correct syntax without using brackets. The following is an example.
<P>
<P><h3>Example</h3>
 
<P>
The Microsoft Excel Name object conflicts with a reserved word.
<P>
The following statement works correctly in Visual Basic, Applications
Edition:
<P>
<PRE>    Dim xl as [Name]

</PRE>When you run the procedure that contains this statement, however, the
brackets are removed. To use this statement without brackets, and without
receiving an error message, use the following:
<P>
<PRE>    Dim xl as Excel.Name

</PRE><h2>MORE INFORMATION</h2>
 
<P>
In Visual Basic version 3.0, type declaration characters are not allowed in
procedures. However, they are allowed in Visual Basic, Applications
Edition. The following is the required syntax in Visual Basic 3.0:
<P>
<PRE>   Dim Word As Object
   Set Word = CreateObject("Word.Basic")
   MsgBox Word.[GetBookmark$](Word.[BookmarkName$](1))

</PRE>In Visual Basic, Applications Edition, you can use the following:
<P>
<PRE>   MsgBox = Word.GetBookmark$(Word.BookmarkName$(1))

</PRE>Note that in this example, the CreateObject function is used to create an
object-linking-and-embedding (OLE) Automation object using the Microsoft
Word for Windows macro language. When you call a function in the Microsoft
Word for Windows macro language, the brackets are generally not required,
as shown in the example above. However, there are at least two functions
that you must enclose in brackets in order to use in a Visual Basic,
Applications Edition macro. These are Language$() and Font$(). The
following is an example of how to use the Language$() function in a Visual
Basic, Applications Edition macro:
<P>
<PRE>   Dim Word As Object
   Set Word = CreateObject("Word.Basic")
   MsgBox Word.[Language$](0)

</PRE>When you run a Visual Basic, Applications Edition procedure that uses a
Microsoft Word for Windows function and you use the brackets, the brackets
are not removed after you run the commands.
<P>
Microsoft provides examples of Visual Basic procedures for illustration
only, without warranty either expressed or implied, including but not
limited to the implied warranties of merchantability and/or fitness for a
particular purpose. This Visual Basic procedure is provided "as is" and
Microsoft does not guarantee that it can be used in all situations.
Microsoft does not support modifications of this procedure to suit customer
requirements for a particular purpose. Note that a line that is preceded by
an apostrophe introduces a comment in the code--comments are provided to
explain what the code is doing at a particular point in the procedure. Note
also that an underscore character (_) indicates that code continues from
one line to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This Manual"
section in the "Document Conventions" section of the Visual Basic "User's
Guide."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: kbmacro wordbasic<BR>
Keywords          : kbcode kbprg<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

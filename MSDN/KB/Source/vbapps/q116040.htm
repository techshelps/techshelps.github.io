

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Run a Word Macro While Editing a Word Object in VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116040">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/06/09">
<META NAME="Keywords" CONTENT="IAPOLE vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article gives three examples to show you how to run a Word macro while editing a Word object in Visual Basic. You cannot run a Word macro directly by using the ToolsMacro command because you cannot run a Word macro while a Word object is activ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAIH,QBS0,QBWS,QBJZ,QAMA,QBXS,QAQT,QAPN,QAW6,QAY2,QAMN,QDO7,QAG2,QAUR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Run a Word Macro While Editing a Word Object in VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116040</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows version 3.0
</PRE>- Microsoft Word for Windows, version 6.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article gives three examples to show you how to run a Word macro while
editing a Word object in Visual Basic. You cannot run a Word macro directly
by using the ToolsMacro command because you cannot run a Word macro while a
Word object is activated in another application. When you attempt to run
the Word ToolsMacro command, you are doing the same thing as choosing
Macro... from the Word Tools menu. When acting as an in-place OLE server,
Word enables only those menu items that apply to the object that is being
edited in the OLE container application; the Macro... menu item is not one
of them.
<P>
For example, if you embed a Word object in a Microsoft Publisher version
2.0 publication, Word knows it wouldn't make sense to choose Save from the
File menu in Word to save the object. It is the container application's
(Publisher's) responsibility to save its own documents and all the objects
in them. In fact, when you choose Save from the File menu in Publisher
while editing a Word object, Publisher saves the object because OLE objects
cannot own the File menu. Therefore, menu items such as ToolsMacro are
disabled.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Below are three examples that show you how to run a Word macro while
editing a Word object in Visual Basic even though you can't use the
ToolsMacro command. The samples use Word code, Visual Basic code, or both
and they assume you have a macro called macFormatFont.
<P>
<P><h3>Example One: Placing a Button on the Word Toolbar</h3>
 
<P>
You can place a button on a toolbar to represent your macro. Then the user
can click the button to run your macro while the document they are editing
is in view. To create a button for your macro, follow these steps:

<OL><P><LI>Start Microsoft Word version 6.0.

<P><LI>Choose Customize... from the Tools menu.

<P><LI>Press ALT+T to select the Toolbars tab.

<P><LI>In the Categories list, scroll down to Macros and select "Macros."
   A list of macros will show to the right.

<P><LI>Click the name of the macro (macFormatFont), and drag it to one of the
   toolbars outside of the dialog on the main Word window. Drop it onto
   the toolbar. A selection of button images will be displayed.

<P><LI>Click the button image you want, and choose Assign. Then click the Close
   button.
<P>
</OL><h3>Example Two: Calling an Assigned Shortcut Key in Your Word Macro</h3>
 
<P>
You can assign a shortcut key to the macro. This will allow both your
program and the user to activate the macro with a shortcut key. For
example, you can assign the shortcut key CTRL+SHIFT+M to macFormatFont (see
Part One). Then activate it with Visual Basic code from a command button
click event procedure (see Part Two).
<P>
PART ONE -- Steps to Assign the Shortcut Key from Word:

<OL><P><LI>Start Microsoft Word version 6.0 for Windows.

<P><LI>Choose Customize... from the Tools menu.

<P><LI>Press ALT+K to select the Keyboard tab.

<P><LI>In the Categories list, scroll down to Macros and select "Macros." A
   list of macros will show to the right.

<P><LI>Select the name of the macro (macFormatFont).

<P><LI>Press ALT+N to go to the Press New Shortcut Key box.

<P><LI>Press CTRL+SHIFT+M to create the shortcut key.

<P><LI>Choose Assign to assign the key.
<P>
</OL>PART TWO -- Steps to Call the Shortcut Key from Visual Basic:

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a Command button (Command1) and one OLE 2.0 control (OLE1) to Form1.

<P><LI>Select the Create from File option in the Insert Object window.
   Then choose the Browse button, and locate a document. Next, select the
   Display As Icon option, and choose the OK button.

<P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>      Sub Command1_Click()
         Ole1.action = 7
         SendKeys "^+M"
      End Sub

</PRE><P><LI>Run the application and click the Command1 button to run your macro
   on the document while viewing and editing the document in Visual Basic.
<P>
</OL><h3>Example Three: Calling the Main Macro That Calls the Other Macros</h3>
 
<P>
This example creates a main macro that controls the others. It reads a file
that tells it which macro to run. Then it runs that macro. From the Visual
Basic side, Visual Basic creates the file that tells the main macro which
macro to run. Then the macro is run when the user presses the shortcut key
(CTRL+SHIFT+M) assigned to it.
<P>
This example has two parts. Part one gives the code for the Main macro
and sub-macros in Word. Part two gives the Visual Basic code.
<P>
PART ONE -- Main Macro in Word to Be Run by Pressing CTRL+SHIFT+M:

<OL><P><LI>Start Microsoft Word version 6.0 for Windows.

<P><LI>Choose Macro... from the Tools menu. Name the macro Main, and choose
   the Create button.

<P><LI>Add the following code to the Main macro:
<P>
<PRE>   Sub MAIN
      Open "C:\MACRO.DAT" for input as #1
      line input #1,a$
      Close #1
      Kill "C:\MACRO.DAT"
      Select case a$
         Case "macro1": call macro1
         Case "macro2": call  macro2
      End select
   End Sub

</PRE><P><LI>Choose Macro... from the Tools menu. Name the macro Macro1, and
   choose the Create button.

<P><LI>Add the following code to the Macro1 macro:
<P>
<PRE>   Sub MAIN
      msgbox "Successful run of macro1"
   End Sub

</PRE><P><LI>Choose Macro... from the Tools menu. Name the macro Macro2, and
   choose the Create button.

<P><LI>Add the following code to the Macro2 macro:
<P>
<PRE>   Sub MAIN
      msgbox "Successful run of macro2"
   End Sub

</PRE><P><LI>Close and save each of these global macros.
<P>
</OL>PART TWO: Visual Basic Code:

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a Command button (Command1) and an OLE 2.0 control (OLE1) to Form1.

<P><LI>Select the Create from File option in the Insert Object window. Then
   choose  the Browse button, and locate a document. Next, select the
   Display As Icon option, and choose the OK button.

<P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click()
      Open "C:\MACRO.DAT" for output as #1
      Print #1,"macro1"
      Close #1
      ole1.action = 7
      SendKeys ("^+M") ' This shortcut key must be assigned to Main macro
   End Sub

</PRE><P><LI>Run the application. Click the Command1 button to have it run the Main
   macro, which in turn runs the macro with the shortcut key already
   assigned.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information on this topic, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WORD/Q106282.htm">Q106282</A></B>
   TITLE     : Word Items Available When Word 6.0 Is in Server Mode
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: officeinterop w_VBApp W_Word WM_OLEOA OLE<BR>
Automation<BR>
Keywords          : IAPOLE vbwin GnrlVb kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:3.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

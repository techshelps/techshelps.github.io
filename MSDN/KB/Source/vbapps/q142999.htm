

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Tips for Debugging Visual Basic for Applications Code </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q142999">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1996/01/24">
<META NAME="Keywords" CONTENT="kbprg PgmErr kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article lists tips that can help you debug your Visual Basic for Applications (VBA) code. This article assumes that your code compiles correctly, but does not perform as you...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAB9,QAVX,QAGI,QAY5,QATL,QATK,QAYL,QAKD,QABH,QABI,QAPN,QBWS,QBV8,QAL3 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Tips for Debugging Visual Basic for Applications Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q142999</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article lists tips that can help you debug your Visual Basic for
Applications (VBA) code. This article assumes that your code compiles
correctly, but does not perform as you expect.
<P>
Debugging is a process you use to find and resolve errors, or bugs,
in your VBA code. There are three types of errors you may encounter:
compile-time errors, run-time errors, and logic errors. Logic errors
occur when the application doesn't perform as intended and produces
incorrect results. Microsoft Access provides debugging tools that enable
you to step through your code one line at a time to examine or monitor
the values of expressions and variables and to trace procedure calls.
<P>
The general procedure for debugging VBA code is to break larger
procedures into smaller sub-procedures to verify that the individual
steps in each sub-procedure work correctly, and then to combine the
sub-procedures one by one until the code works correctly.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are several different methods you can use to debug your VBA code.
The main ones are shown below.
<P>
<P><h3>Using the Debug Window</h3>
 
<P>
You can use the Immediate pane in the Debug Window to run individual
lines of VBA code or to check the values of variables. In the Debug
window, you can test and debug Function and Sub procedures, check the
value of a field, a control, a property setting, a variable, or an
expression; and display the result of an expression when the code is
running. For an example of how to use the Debug window, follow these
steps:

<OL><P><LI>Open the module containing your function in Design view.

<P><LI>On the View menu, click Debug Window.

<P><LI>Run your function in the Immediate pane of the Debug Window by typing
   the following line and pressing ENTER:
<P>
<P><PRE>      ?&lt;FunctionName&gt;()
</PRE><P>
   where &lt;FunctionName&gt; is the name of your function. Be sure to place
   all arguments expected by your function inside the parentheses.
<P>
</OL><h3>Use a Breakpoint to Suspend Execution of Code</h3>
 
<P>
When you suspend execution of VBA code, the code is still running, but
pauses between running statements. To make VBA pause execution of your
code, you can set a breakpoint. For example, if the first part of your
code runs correctly, but other parts do not, follow these sample steps
to find the part that does not run correctly:

<OL><P><LI>To set a breakpoint right after the part of your code that you know
   works correctly, move the insertion point to the first line of code
   where you want to set a breakpoint.

<P><LI>Click Toggle Breakpoint on the Debug menu (or the Run menu in version
   7.0.) The line appears in bold type, indicating that there is a
   breakpoint set at that line.

<P><LI>Run the function in the Debug window. When code execution reaches
   the breakpoint, processing is suspended and the breakpoint line is
   selected. You can then check the value of variables in the code.
<P>
   For example, to check the value of a variable called MyName, type the
   following in the Debug window, and then press ENTER:
<P>
<P><PRE>      ?MyName
</PRE><P>
<P><PRE>    The value of MyName appears in the Debug window. If the value is
    correct, check other variables. If the value is incorrect, check the
    previous lines of code to see where this variable is assigned an
    incorrect value.
</PRE><P>
</OL><h3>Using the Debug.Print Statement</h3>
 
<P>
You can view the results of an expression in the Debug window by entering
the Print method of the Debug object, followed by the expression. You can
display the Debug window anywhere in Microsoft Access 7.0 or 97 by
pressing CTRL+G. You can use a question mark (?) as shorthand for the
Print method in the Debug window.
<P>
Good places to position Debug.Print statements include the following:

<UL><LI>The beginning of functions, to check the arguments passed to the
   function.
<P>
   For example, to check the values of two arguments passed to the
   DoSomeCalcs() function, place the following sample Debug.Print
   statement at the beginning of the function as follows:
<P>
<P><PRE>      Function DoSomeCalcs(Arg1 as Single, Arg2 as Single)
</PRE><P>
<PRE>         Debug.Print "Arguments Passed: " &amp; Arg1 &amp; " and " &amp; Arg2

      End Function

   If the values of the arguments are not correct, the problem occurs
   before the function runs. You can also use the Debug.Print statement
   at the beginning of each function if you have a complex application and
   you're not sure which function might be causing a problem. This enables
   you to check the Debug window to see the order in which functions are
   called and to determine which function is last. In Microsoft Access 97,
   you can also view function or subroutine calls by clicking the Build
   button in the Debug window. In Microsoft Access 7.0, you can click
   Calls on the Tools menu to list the current function call stack and to
   show the order in which the functions are called.

</PRE><LI>Decision structures, to check that you are using the correct logic for
   the function. For example, the following code sample uses a Select
   Case statement to evaluate the value of a variable. The code also uses
   a Debug.Print statement to verify that it is doing what you expect:
<P>
<P><PRE>      Function DueDate (anyDate)
<PRE></PRE>         Dim Result as Variant
         Debug.Print "Function DueDate " &amp; anyDate
         If Not IsNull(anyDate) Then
         Result = DateSerial(Year(anyDate), Month(anyDate) + 1, 1)
         Debug.Print "Result: " &amp; Result
         Debug.Print "Weekday(Result): " &amp; Weekday(Result)
         Select Case Weekday(Result)
            Case 1  'Sunday
               Debug.Print "Case 1"
               DueDate = Result + 1
            Case 7:  'Saturday
               Debug.Print "Case 7"
               DueDate = Result + 2
            Case 6:  'Friday
               Debug.Print "Case 6"
               DueDate = Result - 1
            Case Else
               Debug.Print "Case Else"
               DueDate = Result
            End Select
         Else
            DueDate = "Date Missing"
         End If
      End Function

   Run this function in the Debug Window by typing the following line and
   then pressing ENTER:

      ?DueDate(#10/1/95#)

   Note that the following results appear in the Debug window:

      Function DueDate 10/1/95
      Result: 11/1/95
      Weekday(Result): 2
      Case Else
      11/1/95

   These results show that you are using the correct logic for this
   function. If you receive different results (the wrong case, for
   example), then you can check the values of other variables and
   expressions to determine where the problem is.

</PRE><LI>In loops, to check the values of variables. If you use a breakpoint to
   check the value of a variable in a loop, you cannot see how the value
   of the variable changes as the loop executes. However, if you include
   the statement Debug.Print MyName in your loop structure, the value of
   variable MyName appears in the Debug window each time the function
   cycles through the loop.
<P>
   This method is also a good way to verify that the loop is executing
   the number of times you expect. If the loop executes four times, you
   should see four values for the value in the Debug window.

<LI>Where clauses, to check the values of criteria in SQL statements. For
   example, the following sample function creates a dynaset from a SQL
   statement. If there is a problem in a SQL statement (such as in this
   function), it can be difficult to locate the problem. However, this
   function uses the Debug.Print statement to display the SQL statement
   as Microsoft Access sees it and uses it:
<P>
<P><PRE>      Function TestMe()
<PRE></PRE>         Dim db As Database, rs As Recordset
         Dim empnum As Long
         Dim strsql As String
         Set db = CurrentDb()
         empnum = 5
         strsql = "select * from orders where [employeeid]=empnum"
         Debug.Print strsql
         Set rs = db.OpenRecordset(strsql)
      End Function

   Run this function in the Debug window by typing the following line
   and then pressing ENTER:

      ?TestMe()

   Note that the following result appears:

      select * from orders where [employeeid]=empnum;

   This Where condition shows [employeeid] = empnum, not [employeeid] = 5,
   as you assigned it. The cause is that the variable empnum needs to be
   exposed outside the SQL string. To fix this particular problem, change
   the Where condition to concatenate the empnum variable, as follows:

      Function TestMe()
         Dim db As Database, rs As Recordset
         Dim empnum As Long
         Dim strsql As String
         Set db = CurrentDb()
         empnum = 5
         strsql = "select * from orders where [employeeid]=" &amp; empnum &amp; ";"
         Debug.Print strsql
         Set rs = db.OpenRecordset(strsql)
      End Function


   When you run the corrected function in the Debug window, note that the
   following statement appears:

      select * from orders where [employeeid]=5;

</PRE></OL><h3>Set a Watch Expression in Visual Basic for Applications Code</h3>
 
<P>
A watch expression is an expression that you monitor in the Debug window.
You can observe the values of the watch expressions you select in the
Watch pane. You can also perform an Instant Watch to see the value of an
expression that hasn't been specified as a Watch expression. To add a
Watch expression to the Watch pane, follow these steps:

<OL><P><LI>Open the Debug window by pressing CTRL+G.

<P><LI>On the Debug menu (or the Tools menu in version 7.0), click Add Watch.

<P><LI>In the Expression box, type a variable, property, function call, or
   other valid expression.

<P><LI>In the Context box, set the scope of the expression you are watching
   by selecting the Procedure name and the Module name.

<P><LI>In the Watch Type box, click the option to determine how you want to
   evaluate the expression.
<P>
</OL>In Microsoft Access 97, you can change the value of a variable on which
you set a watch. You can also restrict the scope used to watch variables
defined for a specific procedure or a specific module, or globally in the
code.
<P>
When the execution of your code is suspended, you can click Quick Watch
on the Debug menu in Microsoft Access 97 to check the value of an
expression that hasn't been defined as a Watch expression. You can also
select an expression in your code and click the Quick Watch for it. (In
Microsoft Access 7.0, you can use the Instant Watch command. You can also
click the Instant Watch button on the Visual Basic toolbar to create a
Watch expression from text you've selected in the Module window.)
<P>
<P><h3>Using the Calls Dialog Box to Trace Nested Procedures</h3>
 
<P>
The Calls dialog box displays a list of all active procedure calls.
These calls are the procedures in an application that are started but not
completed. You can use the Calls dialog box to trace the operation of an
application as it runs a series of procedures. You can view the Calls from
the Debug window by clicking the Build button.
<P>
The Calls dialog box lists all the active procedure calls in a series
of nested procedure calls. It places the earliest active procedure call
at the bottom of the list and adds subsequent procedure calls to the top.
<P>
You can use the Show button in the Calls dialog box to display the
statement that calls the next procedure listed in the Calls dialog box.
If you choose the current procedure in the Calls dialog box and then
click Show, VBA displays the current statement at which execution was
suspended.
<P>
<P><h3>Using the Locals Pane</h3>
 
<P>
The Locals pane in the Debug window has three columns: Expression, Value,
and Type (or Context in version 7.0). The Expression column begins with
the current module (for a standard module), or the current instance of a
class (for a class module). The expression column is organized as a
hierarchical tree of information starting from the current module to
display all of the module-level variables in the current module. The
Value column shows the values of the current module objects. You can
change the value of a module- level variable in the Debug window in
order to test the behavior of your module. The Type column shows the
type of the current module-level object.
<P>
Inspecting a selected variable's value in the Locals pane can be very
helpful in debugging your module, as can changing a variable's value in
the Locals pane Value column to observe what effect it has on other parts
of your module.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the Debug window, search the Help Index for
"Debug window."
<P>
For more information about debugging Visual Basic for Applications code,
search the Help Index for "debugging code."
 
<PRE>Keywords          : kbprg PgmErr kbfaq
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

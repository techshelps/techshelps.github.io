

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Example Using TreeView Control Drag-and-Drop Capabilities </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165993">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1997/03/27">
<META NAME="Keywords" CONTENT="IntpCstm kbprg PgmHowTo PgmObj MdlRcd FmrCdbeh">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article contains an annotated example that demonstrates how to use drag-and-drop functionality in the Microsoft TreeView control, version 5.0.  The Microsoft TreeView c...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGU,QAMN,QBXS,QA7O,QAB5,QAOE,QA9N,QACI,QBWS,QA2Q,QAFF,QA1S,QAG2,QBWU,QAPN P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Example Using TreeView Control Drag-and-Drop Capabilities</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165993</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
<LI>Microsoft Office Developer Edition 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article contains an annotated example that demonstrates how to use
drag-and-drop functionality in the Microsoft TreeView control, version 5.0.
<P>
The Microsoft TreeView control, version 5.0 ships with Microsoft Office 97
Developer Edition.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Microsoft TreeView control, version 5.0 features built-in drag-and-drop
functionality that was not available in earlier versions. It supports
drag- and-drop events, such as OLEStartDrag, OLEDragOver, OLECompleteDrag
and OLEDragDrop.
<P>
The following example creates a hierarchical list of employees in the
Northwind sample database. The TreeView control displays employees
according to whom they report to and enables you to drag employee names to
reorder the hierarchy and update the underlying table.
<P>
CAUTION: Following the steps in this example will modify the sample
database Northwind.mdb. You may want to back up the Northwind.mdb file
and perform these steps on a copy of the database.

<OL><P><LI>Start Microsoft Access 97 and open the sample database Northwind.mdb.

<P><LI>Create a new form not based on any table or query in Design view.

<P><LI>On the Insert menu, click ActiveX Control.

<P><LI>In the Insert ActiveX Control dialog box, select the Microsoft TreeView
   Control, version 5.0, and then click OK.

<P><LI>Set the following properties for the TreeView control:
<P>
<P><PRE>      Name: xTree
      Width: 3"
      Height" 2"
</PRE>
<P><LI>Double-click the TreeView control to set its custom properties on the
   General tab of the TreeCtrl Properties dialog box:
<P>
<P><PRE>      Style: 6 - tvwTreelinesPlusMinusText
      LineStyle: 1 - tvwRootLines
      OLEDragMode: 1 - ccOLEDragAutomatic
      OLEDropMode: 1 - ccOLEDropManual
</PRE><P>
   Click OK.

<P><LI>Save the form as TreeViewTest.

<P><LI>On the View menu, click Code.

<P><LI>Type the following procedures:
<P>
<P><PRE>      '==================================================================
      ' This procedure populates the TreeView control when the form opens
      '==================================================================
      Private Sub Form_Load()
      On Error GoTo ErrForm_Load
      Dim db As Database, rst As Recordset, nodCurrent As Node
      Dim objTree As TreeView, strText As String, nodRoot As Node
      Dim bk As String
</PRE><P>
<P><PRE>      Set db = CurrentDb
      ' Open the Employees table.
      Set rst = db.OpenRecordset("Employees", dbOpenDynaset, dbReadOnly)
      ' Create a reference to the TreeView Control.
      Set objTree = Me!xTree.Object
      ' Find the first employee who is a supervisor.
      rst.FindFirst "[ReportsTo] Is Null"
      ' Build the TreeView list of supervisors and their employees.
      Do Until rst.NoMatch
<PRE></PRE>         ' Extract the supervisor's name.
         strText = rst![LastName] &amp; (", " + rst![FirstName])
         ' Add a root level node to the tree for the supervisor.
         Set nodCurrent = objTree.Nodes.Add(, , "a" &amp; rst!EmployeeID, _
            strText)
         ' Use a placeholder to save this place in the recordset.
         bk = rst.Bookmark
         ' Run a recursive procedure to add all the child nodes for
         ' employees who report to this supervisor.
         AddChildren nodCurrent, rst
         ' Return to your placeholder.
         rst.Bookmark = bk
         ' Find the next supervisor.
         rst.FindNext "[ReportsTo] Is Null"
      Loop

      ExitForm_Load:
         Exit Sub
      ErrForm_Load:
         MsgBox Err.Description, vbCritical, "Form_Load"
         Resume ExitForm_Load
      End Sub

      '==================================================================
      ' This procedure adds child nodes to the tree for all employees who
      ' report to a particular supervisor, and calls itself recursively
      ' to add child nodes for all other employees they supervise.
      '
      ' Note that this procedure accepts the open Employees recordset by
      ' reference so you do not have to open a new recordset for each
      ' call.
      '==================================================================
      Sub AddChildren(nodBoss As Node, rst As Recordset)
      On Error GoTo ErrAddChildren
      Dim nodCurrent As Node
      Dim objTree As TreeView, strText As String, bk As String

      ' Create a reference to the TreeView control.
      Set objTree = Me!xTree.Object
      ' Find the first employee who reports to the supervisor for this
      ' node.
      rst.FindFirst "[ReportsTo] =" &amp; Mid(nodBoss.Key, 2)
      ' Build the list of employees who report to this supervisor.
      Do Until rst.NoMatch
         ' Extract the employee's name.
         strText = rst![LastName] &amp; (", " + rst![FirstName])
         ' Add as a child node to the tree.
         Set nodCurrent = objTree.Nodes.Add(nodBoss, tvwChild, "a" &amp; _
            rst!EmployeeID, strText)
         ' Save your place in the recordset.
         bk = rst.Bookmark
         ' Add any employees for whom the current node is a supervisor.
         AddChildren nodCurrent, rst
         ' Return to your place in the recordset and continue to search.
         rst.Bookmark = bk
         ' Find the next employee who reports to this supervisor.
         rst.FindNext "[ReportsTo]=" &amp; Mid(nodBoss.Key, 2)
      Loop

      ExitAddChildren:
         Exit Sub
      ErrAddChildren:
         MsgBox "Can't add child:  " &amp; Err.Description, vbCritical, _
            "AddChildren(nodBoss As Node) Error:"
         Resume ExitAddChildren
      End Sub

      '==================================================================
      'This procedure in the OLEStartDrag event of the TreeView control
      'clears the selected node so you can choose a new one.
      '==================================================================
      Private Sub xTree_OLEStartDrag(Data As Object, AllowedEffects As _
         Long)
      Me!xTree.Object.SelectedItem = Nothing
      End Sub

      '==================================================================
      'Use the OLEDragOver event of the TreeView control to select the
      'node to drag, and to highlight the target nodes where the drop will
      'occur when you release the mouse. This procedure sets the selected
      'node to drag once. After that, if a node is already selected, the
      'procedure assumes it was set during an earlier call in the dragging
      'process and it does not reset it.  The second half of this procedure
      'highlights the node you are dragging over.
      '==================================================================
      Private Sub xTree_OLEDragOver(Data As Object, Effect As Long, _
         Button As Integer, Shift As Integer, x As Single, y As Single, _
         State As Integer)
      Dim oTree As TreeView

      ' Create a reference to the TreeView control.
      Set oTree = Me!xTree.Object
      ' If no node is selected, select the first node you dragged over.
      If oTree.SelectedItem Is Nothing Then
         Set oTree.SelectedItem = oTree.HitTest(x, y)
      End If
      ' Highlight the node being dragged over as a potential drop target.
      Set oTree.DropHighlight = oTree.HitTest(x, y)
      End Sub

      '==================================================================
      'The OLEDragDrop event moves the selected node on the TreeView
      'control to its new location and changes the corresponding record in
      'the Employees table. The procedure first checks that the TreeView
      'has a selected node. If so, it continues to check if a drop target
      'node is highlighted. If no node is highlighted, then the user has
      'dragged the node off the tree and dropped it into a blank area, and
      'the procedure adds a branch to the root of the tree. If a node is
      'highlighted, the procedure modifies the Employee table's ReportTo
      'field accordingly and sets the selected node's parent property
      'to the node that has the drop highlight.
      '==================================================================
      Private Sub xTree_OLEDragDrop(Data As Object, Effect As Long, _
         Button As Integer, Shift As Integer, x As Single, y As Single)
      On Error GoTo ErrxTree_OLEDragDrop
      Dim oTree As TreeView, strKey As String, strText As String
      Dim nodNew As Node, nodDragged As Node
      Dim db As Database, rs As Recordset

      Set db = CurrentDb
      ' Open the Employees table for editing.
      Set rs = db.OpenRecordset("Employees", dbOpenDynaset)
      ' Create a reference to the TreeView control.
      Set oTree = Me!xTree.Object
      ' If nothing is selected for drag, do nothing.
      If oTree.SelectedItem Is Nothing Then
      Else
         ' Reference the selected node as the one being dragged.
         Set nodDragged = oTree.SelectedItem
         ' If the node was dragged to an empty space, update the Employees
         ' table and make this employee a root node.
         If oTree.DropHighlight Is Nothing Then
            ' Save the key and the text to use when you re-add the node.
            strKey = nodDragged.Key
            strText = nodDragged.Text
            ' Delete the current node for the employee.
            oTree.Nodes.Remove nodDragged.Index
            ' Locate the record in the Employees table and update it.
            rs.FindFirst "[EmployeeID]=" &amp; Mid(strKey, 2)
            rs.Edit
               rs![ReportsTo] = Null
            rs.Update
            ' Add this employee as a root node.
            Set nodNew = oTree.Nodes.Add(, , strKey, strText)
            ' Add all the child nodes for this employee.
            AddChildren nodNew, rs
         ' If you are not dropping the node on itself.
         ElseIf nodDragged.Index &lt;&gt; oTree.DropHighlight.Index Then
            ' Set the drop target as the selected node's parent.
            Set nodDragged.Parent = oTree.DropHighlight
            ' Locate the record in the Employees table and update it.
            rs.FindFirst "[EmployeeID]=" &amp; Mid(nodDragged.Key, 2)
            rs.Edit
               rs![ReportsTo] = Mid(oTree.DropHighlight.Key, 2)
            rs.Update
         End If
      End If
      ' Deselect the node
      Set nodDragged = Nothing
      ' Unhighlight the nodes.
      Set oTree.DropHighlight = Nothing
      ExitxTree_OLEDragDrop:
         Exit Sub
      ErrxTree_OLEDragDrop:
         ' If you create a circular branch.
         If Err.Number = 35614 Then
            MsgBox "A supervisor cannot report to a subordinate.", _
               vbCritical, "Move Cancelled"
         Else
            MsgBox "An error occurred while trying to move the node.  " &amp; _
            "Please try again." &amp; vbCrLf &amp; Error.Description
         End If
         Resume ExitxTree_OLEDragDrop
      End Sub

</PRE><P><LI>On the Debug menu, click "Compile and Save All Modules."

<P><LI>Close the form's class module and switch the form to Form view.
<P><PRE>    Practice dragging and dropping employee names in the TreeView control
    and note how both the tree and the Employees table are updated with the
    new information.
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information about using the TreeView control, search the
Help Index for "TreeView control," and see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q162523.htm">Q162523</A></B>
   TITLE     : Migrating from Data Outline Control to TreeView Control

</PRE></OL>For more information about using recursion in Microsoft Access, search the
Help Index for "recursive procedures."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: DragDrop StartDrag DragOver Recursive<BR>
Keywords          : IntpCstm kbprg PgmHowTo PgmObj MdlRcd FmrCdbeh<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

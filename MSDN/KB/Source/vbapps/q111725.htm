

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: FOR Behaves Differently in Visual Basic than in XLM Macro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q111725">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1994/02/16">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmLoop">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In the versions of Microsoft Visual Basic for Applications that ship with  Microsoft Excel versions 5.0 and later, FOR loops behave differently than  they do in the Microsoft Excel version 4.0 macro language.  The respective macro commands are as f...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAH4,QAA7,QAKD,QBWS,QBXS,QAYL,QAU3,QAMR,QBJZ,QA5F,QAMA,QBE7,QBE6 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: FOR Behaves Differently in Visual Basic than in XLM Macro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q111725</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the versions of Microsoft Visual Basic for Applications that ship with 
Microsoft Excel versions 5.0 and later, FOR loops behave differently than 
they do in the Microsoft Excel version 4.0 macro language.
<P>
The respective macro commands are as follows:
<P>
<PRE>   Visual Basic
   ------------

   For counter = startValue To endValue
   Next counter

   Microsoft Excel Version 4.0 Macro Commands
   ------------------------------------------

   =FOR("counter",startValue,endValue)
   =NEXT()

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>In Visual Basic, the number of iterations for the loop cannot be changed by 
changing the value of the variable used to set the ending value for the 
loop while the loop is in progress (this behavior is standard for most 
programming languages that use FOR loops). However, you can change the 
value of the variable in a Microsoft Excel version 4.0 style macro using 
the equivalent functions, FOR() and NEXT().
<P>
<P><h3>Microsoft Excel Version 4.0 Macro Example</h3>
 
<P>
In the following Excel 4.0 style macro, the loop is originally set to run
ten times. However, it will only run 5 times because the ending value is
modified during the loop. To test this behavior, enter the following on a
Microsoft Excel 4.0 macro sheet:
<P>
<PRE>   A1: y=10
   A2: =FOR("x",1,y)
   A3: y=5
   A4: =NEXT()
   A5: =ALERT(x)
   A6: =RETURN()

</PRE>To run the macro, select cell A1, click Macro on the Tools menu, and then 
click Run.
<P>
The ALERT() statement in A5 will display the value 6, which means that the
loop only ran 5 times, as opposed to the 10 times that the original value
of "y" was set for.
<P>
<P><h3>Sample Visual Basic Procedure</h3>
 
<P>
In the following Visual Basic macro, the loop is originally set to run 10 
times and it will run 10 times, even though the macro changes the value of 
the variable that is used to set the ending value of the loop.
<P>
To test this macro:

<OL><P><LI>Enter the following in a new Visual Basic module:
<P>
<PRE>      Sub MyLoop()
          Dim x, y As Integer

          y = 10
          For x = 1 To y
              y = 5
          Next x
          MsgBox x
      End Sub

</PRE><P><LI>Position the insertion point in the line that reads "Sub MyLoop()" and
   either press F5 or click Start on the Run menu.
<P>
</OL>The MsgBox statement in the above macro displays the value 11, which means
the loop ran through 10 times, even though we changed the value of the
variable used to set the ending value of the loop.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Visual Basic User's Guide," version 5.0, pages 143-147
<P>
For more information about FOR, choose Contents from the Help menu, select
Programming With Visual Basic, and then choose the Search button in Help
and type the following:
<P>
<PRE>   For
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 7.00a XL98 XL97 XL7 XL5<BR>
Keywords          : kbcode kbprg PgmLoop<BR>
Version           : WINDOWS:5.0,5.0c,7.0,7.0a,97; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

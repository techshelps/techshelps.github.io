

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Common Remote OLE Automation Errors </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141824">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1995/12/27">
<META NAME="Keywords" CONTENT="IAPOLE VB4ALL VB4WIN vbwin GnrlVb kberrmsg kblist kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Errors raised when working with the Remote OLE Automation feature of Visual Basic 4.0, Enterprise Edition often do not include a full error description. This article gives more detail on a number of the most common errors, including possible causes...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QAB4,QBS0,QA2K,QAKP,QARL,QANN,QBVV,QAPN,QBWS,QAH5,QAGU,QAGI,QAA1,QABI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Common Remote OLE Automation Errors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141824</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Enterprise Edition of Microsoft Visual Basic, 16-bit and 32-bit, for
   Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Errors raised when working with the Remote OLE Automation feature of Visual
Basic 4.0, Enterprise Edition often do not include a full error
description. This article gives more detail on a number of the most common
errors, including possible causes and resolutions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
-2147023143 (&amp;H800706d9)
<P><h3>There are no more endpoints available from the endpoint mapper</h3>
 
<P>
Common causes for this error are:

<UL><LI>The Automation Manager isn't running on the server machine. Double check
   to make sure the server has a running instance of the Automation
   Manager.

<LI>If your server is running Windows 95, then set The Remote Automation
   Connection Manager's Authentication Level to "No Authentication." This
   is the only available setting on Windows 95.

<LI>The protocol specified may not be installed correctly on both the client
   and server machines. Determine whether the problem persists with other
   protocols and/or reinstall, or ensure that the protocol used is
   installed correctly on both machines.

<LI>The protocol may suffer a transient failure, even though the protocol
   specified was installed correctly on both machines. Rebooting the system
   eliminates the problem. If the problem occurs frequently, you should
   change protocols.
<P>
</UL>-2147418111 (&amp;H80010001)
<P><h3>Call was rejected by callee</h3>
 
<P>
This error usually occurs when the server application is too busy to
respond to the client. When a call comes into the Automation Manager, it
will try to get the attention of the OLE thread for the target object. If
the thread refuses the request (normally because it is busy with another
request), the Automation Manager will pause and then try again. The
Automation Manager will continue retrying until it succeeds or times out.
<P>
VBA error 5
<P><h3>Illegal Procedure Call</h3>
 
<P>
Visual Basic maps several OLE errors to this single error message, so there
are many potential causes of this error. The most likely cause of this
problem is that the registry information on the client machine is wrong. Or
the registry information currently cached by the Visual Basic development
environment is wrong.
<P>
For speed, Visual Basic will cache certain TypeLib and registry
information. This can lead to problems in the development environment,
where you are frequently building and rebuilding (and reregistering)
classes.
<P>
To fix problems with the registry, shut down both the client, the server,
and also the Automation Manager, and ensure that their registry entries are
correct. For more information on cleaning the registry entries see the
section on cleaning Registry entries at the end of this article.
<P>
This error can also occur if an application calls the Error function after
getting an error. Error only understands the old 16-bit error codes and
does not know how to handle 32-bit error codes. It was included in Visual
Basic 4.0 to retain compatibility. Apps should use Err.Description to get
the true description string, and Err.Number to get the error code.
<P>
-2147023152 (&amp;H800706d0)
<P><h3>The RPC protocol sequence was not found</h3>
 
<P>
This can occur any time the client specifies a protocol that is not
supported by the client or server machines. Most frequently this error
occurs when trying to use Named Pipes to communicate with a Windows 95
server.
<P>
VBA error 429
<P><h3>Can't create object</h3>
 
<P>
This error, like VBA error 5, is a catch-all for a lot of problems and
could be caused by any of the situations listed above. Most frequently, the
problem is:

<UL><LI>The server is not registered on the client machine.
<LI>The server is not correctly registered on the remote computer.
<LI>Remote Automation is not correctly installed on the remote computer.
<LI>The Remote Automation proxy is not installed correctly on the client
   machine.
<P>
</UL>VBA error 70
<P><h3>Permission denied</h3>
 
<P>
This error occurs when the Automation Manager refuses to create an object
because of a security violation. Check the system security policy on the
server machine; if it is set to the Allow by Key (2) or Allow by ACL (3),
then make sure that the appropriate CLSID has the right subkey or ACL.
<P>
<P><h3>Winsock TSR not started</h3>
 
<P>
On Win 3.1 machines running LanMAN, the Winsock TSR must be started before
RPC can use TCP/IP. If the TSR is not started, a system modal dialog box
will appear when the client tries to connect to the server. To fix this,
run Sockets.exe before starting Windows.
<P>
<P><h3>Object does not support OLE Automation</h3>
 
<P>
This error can occur when:
<P>
(1) An application has a reference to an object on a remote computer,
and (2) is trying to pass a reference to local object as a parameter
of a method of the remote object, and (3) the Automation Manager is not
installed properly on the local
machine.
<P>
When a reference to a local object is passed to an application on another
computer, the local computer becomes a Remote Automation server, and the
Automation proxy must start the Automation Manager on the local machine. If
the Automation Manager is on the machine, try starting it with the command
line AUTMGR32 /REGSERVER to register it.
<P>
-2147220998 (&amp;H800401FA)
<PRE> Wrong OS or OS version for application
</PRE> 
<P>
The "Wrong OS version" error is caused by an incorrectly set InprocServer
key. Each public class in a Visual Basic server has an entry in the CLSID
section of the HKEY_CLASSES_ROOT registry key. Remote objects have their
InprocServer (or InprocServer32) subkey set to the automation proxy. The
automation proxy is Autprx32.dll for a 32-bit client on a 32-bit OS,
Autprx16.dll for a 16-bit client on a 32-bit OS, and Autprx.dll for a 16-
bit client on a 16-bit OS. This error can be raised when the InprocServer
key is set to Autprx.dll on a 32-bit system. Because of a bug in the 16-bit
Remote Automation Connection Manager on Windows 95, when an object is made
remote, the InprocServer key is set incorrectly in this manner. To fix this
problem, do one of the following:

<UL><LI>Manually edit the InprocServer key of each affected class so that it
   correctly points to Autprx16.dll.
<P>
   -or-

<LI>Use the 16-bit client registration tool (Clireg16.exe) to remote your
   server instead of RacMan16. CliReg16 correctly detects what OS it is
   running under and will set the InprocServer key accurately. CliReg16 can
   be run from the command line with this syntax:
<P>
<P><PRE>      clireg16 server.vbr -t server.tlb.
</PRE><P>
</UL>-2146959355 (&amp;H80080005)
<P><h3>Server Execution Failed</h3>
 
<P>
This error is caused by an incorrectly registered Autprx16.dll. Although
Setup Wizard-generated setup programs will register Autprx16.dll
completely, the Visual Basic 4.0 16-bit installation does not. To fix this
problem, unregister and reregister Autprx16.dll with Regsvr.exe (or
Regsvr16.exe).
<P>
<P><h3>Other Errors</h3>
 
<P>
Many errors encountered while working with Remote OLE Automation are
characterized by a decimal error number that is both negative and longer
than a usual error number. Errors that fit this description are most
commonly OLE errors that are not mapped to a specific Visual Basic error.
The corresponding text for an error number like this can be found by
searching for the hexadecimal equivalent of the number in the winerror.h
header file that is included with Visual C++ and the Windows SDK.
<P>
<P><h2>The Unregister and Reregister Method of Cleaning the Registry</h2>
 
<P>
Generally you can clean the registry entries for a specific server by
unregistering and reregistering the relevant program. However, the method
used to perform these registry operations varies according to the location
of the server, its bit-type, and whether it is an in-process or out-of-
process server. This section will give a brief description of the tools and
methods that can be used to clean the registry entries for a specific
application.
<P>
<P><h3>Server Exe on the Server Machine</h3>
 
<P>
All out-of-process servers created by Visual Basic recognize the command
line switches UNREGSERVER and REGSERVER. These switches can be used for
servers that are run locally or remotely. To clean the registry entries for
a server exe on the server machine:

<OL><P><LI>Run the server with the command line switch /UNREGSERVER.
</OL>2. Run the server with the command line switch /REGSERVER.
<P>
<P><h3>Server Exe on a Client Machine</h3>
 
<P>
If the server application doesn't reside physically on a client machine,
the CliRegXX tool should be used to unregister and reregister the server.
The .vbr file and the .tlb file for the relevant server are needed for both
operations. CliReg16 should be used for any 16-bit clients, regardless of
the bit-type of the OS, and CliReg32 should be used for all 32-bit clients.
To use the client registration tool to unregister and register a remote
server:

<OL><P><LI>Run CliRegXX -u server.vbr -t server.tlb.
</OL>2. Run CliRegXX server.vbr -t server.tlb. A dialog box will appear to
<PRE>   prompt for the name of the remote machine and the network protocol.

</PRE></OL><h3>Server DLL (must be local)</h3>
 
<P>
DLL servers do not recognize the UNREGSERVER and REGSERVER parameters. To
perform registry operations with in-process servers you must use the
REGSVR32.EXE tool. RegSvr32 will query the DLL for the registry information
needed and perform the operation specified (either a register or an
unregister). To use:

<OL><P><LI>Run RegSvr32 -u server.dll.

<P><LI>Run RegSvr32 server.dll.
</OL> 
<PRE>Keywords          : IAPOLE VB4ALL VB4WIN vbwin GnrlVb kberrmsg kblist kbprg
Technology        : kbole kbvba
Version           : WINDOWS: 4.0
Platform          : NT WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

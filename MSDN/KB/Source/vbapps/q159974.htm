

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Evaluate Numeric Expressions Stored as a String </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q159974">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1996/11/25">
<META NAME="Keywords" CONTENT="VB4ALL VB4WIN vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Given a string expression, the Val function returns the number contained in that string. However, if it encounters a character that is not a number or part of a number, it ignores the rest of the string. For example, Val( 2 ) returns the number 2, ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QATX,QAUD,QAKC,QAB9,QBC6,QAPN,QAKD,QADK,QABH,QBV4,QAG8,QBXS,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Evaluate Numeric Expressions Stored as a String</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q159974</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Given a string expression, the Val function returns the number contained in
that string. However, if it encounters a character that is not a number
or part of a number, it ignores the rest of the string. For example,
Val("2") returns the number 2, but Val("2+2") also returns the number 2,
and Val("(2+2)") returns the number 0.
<P>
This article describes how to obtain the actual value of a numeric
expression that is stored as a String by using the existing features in the
Excel Object Model.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In some instances, you might want to allow users to type in their own
numeric expression in a TextBox and then evaluate it. In other cases, it
might be necessary to read an ASCII file that contains a series of numeric
expressions and then produce another ASCII file containing the results of
those expressions. If this is the only purpose of your Visual Basic
application, it is probably best, for speed and efficiency, to write a
parser. However, for a simple and quick solution, you can use OLE
Automation and the Excel Object Library to accomplish these tasks.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a TextBox and a CommandButton to Form1.

<P><LI>Set the Text property of the TextBox to "".

<P><LI>Set the Caption property of the CommandButton to "Evaluate."

<P><LI>Add the following code to the Click event of the CommandButton:
<P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>          MsgBox MyVal(Text1.Text)
      End Sub

</PRE><P><LI>Add the following code to the General Declarations section of Form1:
<P>
<P><PRE>      Private Function MyVal(s As String) As Double
      Dim xl As Object
</PRE><P>
<PRE>          Set xl = CreateObject("excel.application")
          xl.Workbooks.Add

          xl.ActiveCell.Formula = "=" &amp; s
          MyVal = xl.ActiveCell.Value

          xl.ActiveWorkbook.Close savechanges:=False
          xl.Quit
          Set xl = Nothing

      End Function

</PRE><P><LI>Run the project by pressing the F5 key. Type a valid numeric expression
   in the TextBox and click the CommandButton to evaluate the expression.
</OL> 
<PRE>Keywords          : VB4ALL VB4WIN vbwin GnrlVb kbprg
Technology        : kbole kbvba
Version           : WINDOWS:4.0
Platform          : NT WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

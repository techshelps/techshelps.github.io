

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Check For a Running Instance of Word 95 From VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168751">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1997/05/20">
<META NAME="Keywords" CONTENT="APrgOther APrgWindow IAPThird VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Microsoft Word 95 does not appear in the Windows running objects table and does not use Visual Basic as its macro language. This makes Microsoft Word 95 difficult to detect from a Visual Basic application. This article illustrates a technique that ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIH,QBS0,QAH4,QAY5,QBWS,QBV8,QBTM,QBWQ,QBVV,QAMB,QAB9,QDL9,QBWO,QBWN,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Check For a Running Instance of Word 95 From VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168751</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
   on the following platforms: NT, Win95
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions
   for Windows, version 4.0
   on the following platforms: NT, Win95
<LI>Microsoft Word for Windows 95, versions 7.0, 7.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Microsoft Word 95 does not appear in the Windows running objects table and
does not use Visual Basic as its macro language. This makes Microsoft
Word 95 difficult to detect from a Visual Basic application. This article
illustrates a technique that involves looping through all Windows and
checking for the "Microsoft Word" sub-string at the beginning of the title
bar.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The recommended method for checking for an instance of a Microsoft Office
application is to execute GetObject and trap for error 429, which will be
returned if there is no running instance. Because Microsoft Word 95 has no
application object, this approach fails and the error 429 will always be
returned.
<P>
However, because Microsoft Word, exclusively, always begins its title bar
text with the "Microsoft Word" sub-string, the GetWindowText API function
can be applied to each running window to detect the presence of Microsoft
Word 95. The following code demonstrates this procedure and works whether
or not Microsoft Word is visible or has a document open. This technique can
also be applied to any application that uses a top-level window that starts
its title bar text with a known sub-string. The call syntax is demonstrated
below:
<P>
<PRE>   boolVariable = GetWordWindow(strTitleStart, hwnd)

</PRE>where:

<UL><LI>boolVariable is set to true for success and false for failure
  (no window found).

<LI>GetWordWindow is the Visual Basic function that wraps the API function
   GetWindowText.

<LI>strTitleStart is the sub-string sought. If the title of any top level
   window begins with this sub-string, the handle of the first such
   instance will be returned. An empty string will be converted by the
   function to "Microsoft Word." The function is not case-sensitive.

<LI>hwnd is the window handle. The handle of the last top-level window is
   returned in case of failure.
<P>
</UL><h3>Step-by-Step Example</h3>
 
<P>
The project in this example runs as a form containing no controls. Clicking
on the form itself results in the display of a message box either stating,
"I did not find MS Word," indicating that Microsoft Word is not running, or
"I found MS Word and its handle is," and displaying the window handle. This
example works for all versions of Word for Windows:

<OL><P><LI>Open a new Project. Form1 is created by default.

<P><LI>From the Project menu (Insert menu in Visual Basic 4), insert a new
   Module (Module1).

<P><LI>Copy the Form Code below to the General Declarations section of Form1.

<P><LI>Copy the Module Code below to the General Declarations section of
   Module1. Be sure each API Declare Function statement is entered
   on a separate line (line-continuation underscore not allowed by
   Visual Basic).

<P><LI>Take care to remove a duplicate entry of the 'Option Explicit' line for
   the case when your Tools/Option/Environment/Require Variable
   Declaration CheckBox has been selected.
<P>
<PRE>    'FORM CODE     ***********************************************

    Option Explicit
    Private Sub Form_Click()
    Dim hwnd As Long
        Select Case getWordWindow("", hwnd) 'call getWordWindow
        Case True       'Word is running . . .
            MsgBox "I found MS Word and its handle is " &amp; CStr(hwnd) &amp; "."
        Case Else       'Word is not running
            MsgBox "I did not find MS Word."
        End Select
    End Sub

    'MODULE CODE   ***********************************************

    Option Explicit

    Option Compare Text

    Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" _
       (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) _
       As Long
    Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, _
       ByVal wCmd As Long) As Long
    Declare Function GetTopWindow Lib "user32" (ByVal hwnd As Long) _
       As Long

    Public Const GW_HWNDNEXT = 2

    Function getWordWindow(appTitle As String, appHandle As Long) _
       As Boolean
    Dim dummyVariable As Long
    Dim lenTitle As Integer
    Dim winTitle As String * 256

        'initialize the function return as False
        getWordWindow = 0
        If appTitle = "" Then appTitle = "Microsoft Word"
        lenTitle = Len(appTitle)

        'Get the handle of the first child of the desktop window
        appHandle = GetTopWindow(0)

        'Loop through all top-level windows and search for the sub-string
        'in the Window title
        Do Until appHandle = 0
            dummyVariable = GetWindowText(appHandle, winTitle, 255)
            If Left(winTitle, lenTitle) = appTitle Then
                getWordWindow = -1
                Exit Function
            Else
                appHandle = GetWindow(appHandle, GW_HWNDNEXT)
            End If
        Loop
    End Function

</PRE></OL><h2>REFERENCES</h2>
 
<P>
Win32 Programmer's Reference Volume 3 (Microsoft Press)
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q72918.htm">Q72918</A></B>
   TITLE     : How VB Can Determine if a Specific Windows Program
               Is Running

   ARTICLE-ID: <B><A HREF="../vbapps/Q147659.htm">Q147659</A></B>
   TITLE     : How to Get a Window Handle Without Specifying an Exact Title
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: GetWindowText;GetWindow;GetTopWindow<BR>
Keywords          : APrgOther APrgWindow IAPThird VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg<BR>
Technology        : kbvba<BR>
Version           : WINDOWS:4.0 5.0 7.0 7.0a<BR>
Platform          : NT Win95 WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Using a Visual Basic Macro to Sort Arrays in Microsoft Excel </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q133135">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1995/07/25">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, there is no direct method for sorting an array of values with a Microsoft Visual Basic for Applications macro or procedure.  This article discusses two different algorithms that you can use to sort  arrays: Selection Sort and Bu...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAB6,QAH4,QBJZ,QBWS,QANF,QBVV,QBQU,QAY5,QAB9,QBV8,QAVZ,QAX6,QASV P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Using a Visual Basic Macro to Sort Arrays in Microsoft Excel</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q133135</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel, there is no direct method for sorting an array of
values with a Microsoft Visual Basic for Applications macro or procedure. 
This article discusses two different algorithms that you can use to sort 
arrays: Selection Sort and Bubble Sort.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Method 1: Selection Sort</h3>
 
<P>
To perform a Selection Sort of an array with 1...n elements, locate the
largest element from 1...n. If this is not element n, then exchange the
largest element with element n. Then, locate the largest element from 
1...n-1 and, if this is not element n-1, exchange the largest element with 
element n-1. Next, locate the largest element from 1...n-2 and, if this is 
not element n-2, exchange the largest element with element n-2, and so on. 
Below is an example of a Selection Sort with a Visual Basic Variant type 
array.

<OL><P><LI>Type the following in a module sheet:
<P>
<P><PRE>      Option Base 1
</PRE><P>
<P><PRE>      Function SelectionSort(TempArray As Variant)
<PRE></PRE>          Dim MaxVal As Variant
          Dim MaxIndex As Integer
          Dim i, j As Integer

          ' Step through the elements in the array starting with the
          ' last element in the array.
          For i = UBound(TempArray) To 1 Step -1

              ' Set MaxVal to the element in the array and save the
              ' index of this element as MaxIndex.
              MaxVal = TempArray(i)
              MaxIndex = i

              ' Loop through the remaining elements to see if any is
              ' larger than MaxVal. If it is then set this element
              ' to be the new MaxVal.
              For j = 1 To i
                  If TempArray(j) &gt; MaxVal Then
                      MaxVal = TempArray(j)
                      MaxIndex = j
                  End If
              Next j

              ' If the index of the largest element is not i, then
              ' exchange this element with element i.
              If MaxIndex &lt; i Then
                  TempArray(MaxIndex) = TempArray(i)
                  TempArray(i) = MaxVal
              End If
          Next i

      End Function

      Sub SelectionSortMyArray()
          Dim TheArray As Variant

          ' Create the array.
          TheArray = Array("one", "two", "three", "four", "five", "six", _
              "seven", "eight", "nine", "ten")

          ' Sort the Array and display the values in order.
          SelectionSort TheArray
          For i = 1 To UBound(TheArray)
              MsgBox TheArray(i)
          Next i

      End Sub

</PRE><P><LI>To run the macro, click Macro on the Tools menu. (In Microsoft Excel 97
   or Microsoft Excel 98, click the Tools menu, point to Macro, and then 
   click Macros.)

<P><LI>Select the SelectionSortMyArray macro, and click Run.
<P>
</OL><h3>Method 2: Bubble Sort</h3>
 
<P>
To perform a Bubble Sort, evaluate 1...n-1 elements in the array where you
compare each element with the one after it (element 1 is compared to
element 2, element 2 is compared to element 3, and so on). If an element is
larger than the element after it, then those two elements are exchanged.
Continue this process until there are no more exchanges of elements. Below
is an example of a Bubble Sort with a Visual Basic Variant type array.

<OL><P><LI>Type the following in a module sheet:
<P>
<P><PRE>      Option Base 1
</PRE><P>
<P><PRE>      Function BubbleSort(TempArray As Variant)
<PRE></PRE>          Dim Temp As Variant
          Dim i As Integer
          Dim NoExchanges As Integer

          ' Loop until no more "exchanges" are made.
          Do
              NoExchanges = True

              ' Loop through each element in the array.
              For i = 1 To UBound(TempArray) - 1

                  ' If the element is greater than the element
                  ' following it, exchange the two elements.
                  If TempArray(i) &gt; TempArray(i + 1) Then
                      NoExchanges = False
                      Temp = TempArray(i)
                      TempArray(i) = TempArray(i + 1)
                      TempArray(i + 1) = Temp
                  End If
              Next i
          Loop While Not (NoExchanges)

      End Function

      Sub BubbleSortMyArray()
          Dim TheArray As Variant

          ' Create the array.
          TheArray = Array(15, 8, 11, 7, 33, 4, 46, 19, 20, 27, 43, 25, 36)

          ' Sort the Array and display the values in order.
          BubbleSort TheArray
          For i = 1 To UBound(TheArray)
              MsgBox TheArray(i)
          Next i
      End Sub

</PRE><P><LI>To run the macro, click Macro on the Tools menu. (In Microsoft Excel 97
   or Microsoft Excel 98, click the Tools menu, point to Macro, and then 
   click Macros.)

<P><LI>Select the SelectionSortMyArray macro, and click Run.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
NOTE: Both of these examples sort in ascending order. To perform a
Selection Sort in descending order, change "&gt;" to "&lt;" in the following line
of the SelectionSort function:
<P>
<PRE>   If TempArray(j) &gt; MaxVal Then

</PRE></OL>To perform a Bubble Sort in descending order, change "&gt;" to a "&lt;" in the
following line of the BubbleSort function:
<P>
<PRE>   If TempArray(i) &gt; TempArray(i + 1) Then
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 8.00 XL98 XL97 XL7 XL5<BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS:5.0,5.0c,7.0,97; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

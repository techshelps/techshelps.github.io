

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Number of Times a Custom Function Runs in a Query </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q98788 ">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1993/05/13">
<META NAME="Keywords" CONTENT="kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  A custom function called from a query will run as follows:   - One time per query if the expression does not reference a field.   - One time per record if the expression does ref...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QAML,QAB9,QAY5,QA5V,QAPF,QBV8,QBS0,QBDM,QBWS,QAL3,QA5F,QAMA,QAH4 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Number of Times a Custom Function Runs in a Query</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q98788 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
A custom function called from a query will run as follows:

<UL><LI>One time per query if the expression does not reference a field.

<LI>One time per record if the expression does reference a field.

<LI>Two times per record if there are criteria on the expression.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
To optimize a query, Microsoft Access will not rerun a custom function
unless the value passed to it changes. If the function accepts a field as a
parameter, Microsoft Access must rerun the custom function for each record
because the data may change from record to record. If criteria are placed
on the result of the function, Microsoft Access must rerun the function
when applying the criteria.
<P>
The examples below (examples A, B, and C) demonstrate each of the three
scenarios, using a custom function designed to number the records in a
query.
<P>
NOTE: These examples are simplified to demonstrate the results you can
expect when you use custom functions in a query. Many variables can affect
the number of times Microsoft Access reruns a custom function. For example,
if you first minimize and them maximize Microsoft Access, the process of
repainting the screen also includes re-executing any custom function that
is part of the query result.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0
<P>
Complete the following steps to use examples A, B, and C:

<OL><P><LI>Create a new global module called RecordNumbers in the sample database
   Northwind.mdb (or NWIND.MDB in versions 1.x and 2.0)

<P><LI>Add the following lines to the module's Declarations section if they are
   not already there:
<P>
<P><PRE>      Option Explicit
      Global RecordNum
</PRE><P>
</OL>NOTE: In Microsoft Access version 2.0, the Employees table contains more
Employees. If you are performing the following examples in version 2.0,
expect more records to be returned.
<P>
<P><h3>Example A: An Expression that Calculates Only Once Per Query</h3>
 

<OL><P><LI>Add the following function to the global module you created in the
   previous procedure:
<P>
<P><PRE>      Function ShouldIncrement ()
<PRE></PRE>         RecordNum = RecordNum + 1
         ShouldIncrement = RecordNum
      End Function

</PRE><P><LI>Create a new query based on the Employees table. Drag the Last Name
   field to the query grid and add a column with the following expression:
<P>
<P><PRE>      RecordNumber: ShouldIncrement()
</PRE>
<P><LI>Run the query. Note that you receive the following result:
<P>
<PRE>      Last Name    RecordNumber
      -------------------------
      Davolio      1
      Fuller       1
      Leverling    1
      Peacock      1
      Buchanan     1
      Suyama       1
      King         1
      Callahan     1
      Dodsworth    1

</PRE></OL>Note that the function IncrementRecNum() is run only once.
<P>
<P><h3>Example B: An Expression that Calculates Once Per Record</h3>
 

<OL><P><LI>Add the function DoesIncrement() to the module RecordNumbers that you
   created in the first procedure:
<P>
<P><PRE>      Function DoesIncrement (AnyValue)
<PRE></PRE>         RecordNum = RecordNum + 1
         DoesIncrement = RecordNum
      End Function

</PRE><P><LI>Open the module RecordNumbers in Design view. On the View menu,
   click Debug Window (or Immediate window in versions 1.x and 2.0).
   Type the following statement to initialize the variable RecordNum:
<P>
<P><PRE>      RecordNum = 0
</PRE>
<P><LI>Create a new query based on the Employees table. Drag the Last
   Name field to the query grid and add a column with the following
   expression:
<P>
<P><PRE>      RecordNumber: DoesIncrement([EmployeeID])
</PRE><P>
<P><PRE>      NOTE: In versions 1.x and 2.0, there is a space in Employee ID.
</PRE>
<P><LI>Run the query. Note that you receive the following result:
<P>
<PRE>      Last Name    RecordNumber
      -------------------------
      Davolio      1
      Fuller       2
      Leverling    3
      Peacock      4
      Buchanan     5
      Suyama       6
      King         7
      Callahan     8
      Dodsworth    9

</PRE></OL><h3>Example C: An Expression that Calculates More Than Once Per Record</h3>
 

<OL><P><LI>Create a new query based on the Employees table. Drag the Last Name
   field to the query grid and add a column with the following expression:
<P>
<P><PRE>      RecordNumber: DoesIncrement([EmployeeID])
</PRE><P>
   NOTE: You will need to complete step 1 of example B in order to
   have the DoesIncrement() function available.

<P><LI>Open the module RecordNumbers in Design view. On the View menu,
   click Debug Window (or Immediate window in versions 1.x and 2.0).
   Type the following statement to initialize the variable RecordNum:
<P>
<P><PRE>      RecordNum = 0
</PRE>
<P><LI>Run the query. Note that you receive the following result:
<P>
<PRE>      Last Name    RecordNumber
      -------------------------
      Davolio      1
      Fuller       2
      Leverling    3
      Peacock      4
      Buchanan     5
      Suyama       6
      King         7
      Callahan     8
      Dodsworth    9

</PRE><P><LI>Repeat Step 2 in this example (example C).

<P><LI>Add the following criteria under RecordNumber:
<P>
<P><PRE>      &gt;=0
</PRE>
<P><LI>Run the query. Note that you now receive the following result:
<P>
<PRE>      Last Name    RecordNumber
      -------------------------
      Davolio      10
      Fuller       11
      Leverling    12
      Peacock      13
      Buchanan     14
      Suyama       15
      King         16
      Callahan     17
      Dodsworth    18

</PRE></OL>In this case, Microsoft Access runs the expression twice, once to create
the recordset and again to check the criteria you specified.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: top 20 limit counter<BR>
Keywords          : kbusage<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

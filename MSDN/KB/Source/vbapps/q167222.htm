

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Form_MyForm Referencing Breaks After Converting from 95 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167222">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1997/04/21">
<META NAME="Keywords" CONTENT="CnvProb kberrmsg kbprg PgmObj">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  When you run your code in Microsoft Access 97 after converting a database from Microsoft Access 7.0, you may receive the following error message:     Compile error: User-defined ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBXS,QAH4,QAPN,QA1S,QAUR,QDN9,QAI2,QBWS,QBVV,QAGB,QAU7,QANF,QAB4,QAAW,QAZV P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Form_MyForm Referencing Breaks After Converting from 95</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167222</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
When you run your code in Microsoft Access 97 after converting a database
from Microsoft Access 7.0, you may receive the following error message:
<P>
<PRE>   Compile error: User-defined type not defined.

</PRE><h2>CAUSE</h2>
 
<P>
You are referring to a code module of a form or report using the following
syntax in code, and the HasModule property of that form or report is set to
No:
<P>
<PRE>   Dim f as Form_Customers

   -or-

   Dim f as New Form_Customers

</PRE><h2>RESOLUTION</h2>
 
<P>
To resolve this issue, use one of the following methods:

<OL><P><LI>Manually set the HasModule property of the form(s) and/or report(s) you
   are referencing to Yes.

<P><LI>Use the following syntax instead:
<P>
<P><PRE>      Dim f as Form
</PRE><P>
<P><PRE>      Set f = Forms!Customers
</PRE><P>
   NOTE: Before the Set statement, you must programmatically check to
   see if the form is open. If it isn't, first open the form using the
   OpenForm method.

<P><LI>Use the following code to programmatically set the HasModule property of
   all forms and reports to Yes.
<P>
   NOTE: This will make all forms and reports non-lightweight objects,
   and therefore may make them load more slowly. If you know you do not
   need to reference all forms or reports with the above syntax, you may
   want to go back through and manually change the HasModule property to
   No for those objects.
<P>
<P><PRE>      Option Compare Database
      Option Explicit
</PRE><P>
<PRE>      Sub SetHasModuleTrue()

         On Error GoTo Err_SetHasModuleTrue

         Dim MyDb As Database
         Dim MyDoc As Document
         Dim bolObjectState As Boolean
         Dim strMessage As String

         Set MyDb = CurrentDb  ' Set the current dabatase.

         ' Run this section to set HasModule property to Yes for
         ' all the forms that don't already have HasModule set to Yes.

         ' Go through each form in the database.
         For Each MyDoc In MyDb.Containers("Forms").Documents
            ' Get the state of the form.
            bolObjectState = SysCmd(acSysCmdGetObjectState, acForm, _
               MyDoc.Name)
            If bolObjectState = 0 Then  ' If the form is not open,
               ' Open the form in design view.
               DoCmd.OpenForm MyDoc.Name, acDesign, , , , acHidden
               ' If the HasModule Property is No,
               If Not Forms(MyDoc.Name).HasModule Then
                  Forms(MyDoc.Name).HasModule = True  ' set HasModule to
                                                      ' Yes.

               DoCmd.Save acForm, MyDoc.Name ' Save the form.
               End If
               DoCmd.Close acForm, MyDoc.Name  ' Close the form.
            Else
               ' If the form is open but not in Design view,
               If Forms(MyDoc.Name).CurrentView = 1 Then
                  ' change the form to Design view.
                  DoCmd.OpenForm MyDoc.Name, acDesign
               End If
               ' If the HasModule Property is No,
               If Not Forms(MyDoc.Name).HasModule Then
                  Forms(MyDoc.Name).HasModule = True ' set HasModule to Yes
                  strMessage = "Form '" &amp; MyDoc.Name &amp; "' is already open."
                  strMessage = strMessage &amp; " The HasModule Propterty has"
                  strMessage = strMessage &amp; " been set to Yes. Would you"
                  strMessage = strMessage &amp; " like to save and close the"
                  strMessage = strMessage &amp; " form now?"
                  ' Ask users if they want to save and close a previously
                  ' opened form. If yes
                  If MsgBox(strMessage, vbYesNo + vbInformation) = _
                        vbYes Then
                     DoCmd.Save acForm, MyDoc.Name  ' save the form.
                     DoCmd.Close acForm, MyDoc.Name  'Close the form.
                  End If
               End If
            End If
         Next MyDoc ' Go to next form.

         ' Run this section to set HasModule property to Yes for
         ' all the Reports that don't already have HasModule set to Yes.
         DoCmd.Echo False
         ' Go through each report in the database.
         For Each MyDoc In MyDb.Containers("Reports").Documents
            ' Get the state of the report.
            bolObjectState = SysCmd(acSysCmdGetObjectState, acReport, _
                MyDoc.Name)
            If bolObjectState = 0 Then  'If the report is not open
               ' Open the report in Design view.
               DoCmd.OpenReport MyDoc.Name, acDesign
               ' If the HasModule Property is No,
               If Not Reports(MyDoc.Name).HasModule Then
                  ' set the HasModule to Yes.
                  Reports(MyDoc.Name).HasModule = True
                  DoCmd.Save acReport, MyDoc.Name  ' Save the report.
               End If
               DoCmd.Close acReport, MyDoc.Name  ' Close the report.
            Else
               ' If the report is already open, open it in Design view.
               DoCmd.OpenReport MyDoc.Name, acDesign
               ' If the HasModule Property is No,
               If Not Reports(MyDoc.Name).HasModule Then
                  ' set HasModule to Yes.
                  Reports(MyDoc.Name).HasModule = True
                  strMessage = "Form '" &amp; MyDoc.Name &amp; "' is already open."
                  strMessage = strMessage &amp; " The HasModule Propterty has"
                  strMessage = strMessage &amp; " been set to Yes. Would you"
                  strMessage = strMessage &amp; " like to save and close the"
                  strMessage = strMessage &amp; " report now?"
                  ' Ask users if they want to save and close a previously
                  ' opened report. If yes
                  If MsgBox(strMessage, vbYesNo + vbInformation) = _
                        vbYes Then
                     DoCmd.Save acReport, MyDoc.Name  ' save the report.
                     DoCmd.Close acReport, MyDoc.Name  'Close the report.
                  End If
               End If
            End If
         Next MyDoc ' Go to the next report.
         DoCmd.Echo True
      Exit_SetHasModuleTrue:
         Exit Sub
      Err_SetHasModuleTrue:
         DoCmd.Echo True
         MsgBox Err.Description
         Resume Exit_SetHasModuleTrue
      End Sub

</PRE></OL><h2>MORE INFORMATION</h2>
 
<P>
When you convert a Microsoft Access 7.0 database to Microsoft Access 97,
only forms or reports that contain code will have their HasModule property
set to Yes.
<P>
When you refer to a new instance of a form or report, you are actually
creating a new instance of that object's class module. In order to be able
to do that, the form or report has to have a class module to refer to. In
Microsoft Access 97 forms and reports do not have class modules if the
HasModule property is set to No. In Microsoft Access 7.0, a form or report
always has a class module.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create a module and type the following procedure:
<P>
<P><PRE>      Function TestNewInstance ()
<PRE></PRE>         Dim f as Form_Customers
      End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>       ?TestNewInstance()
</PRE><P>
   Note that you receive the error message mentioned in the "Symptoms"
   section.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about referencing forms or reports as described in
this article, search the Help Index for "multiple instances of form," or
ask the Microsoft Access 97 Office Assistant.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: predefined<BR>
Keywords          : CnvProb kberrmsg kbprg PgmObj<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbprb<BR>
Solution Type     : Info_Provided<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

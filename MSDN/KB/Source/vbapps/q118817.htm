

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Summary of Sample Applications on the ODK 1.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118817">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/07/31">
<META NAME="Keywords" CONTENT="IAPOLE vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The Microsoft Office Developer's Kit (ODK) includes several useful samples for Visual Basic Programmers. This article summarizes the sample applications included in the ODK.  MORE INFORMATION  ChartDem: Demonstrates the Microsoft Excel 5.0 Chart Ob...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QAIH,QAPN,QAW6,QAH4,QAMA,QA9Q,QA5F,QDKX,QAJH,QAF0 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Summary of Sample Applications on the ODK 1.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118817</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Professional Edition of Microsoft Visual Basic Programming System
   for Windows, version 3.0
<LI>The Microsoft Office Developer's Kit, version 1.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Microsoft Office Developer's Kit (ODK) includes several useful samples
for Visual Basic Programmers. This article summarizes the sample
applications included in the ODK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>ChartDem: Demonstrates the Microsoft Excel 5.0 Chart Objects</h3>
 
<P>
ChartDem uses a Microsoft Visual Basic version 3.0 interface with the OLE
control to display all of the objects related to Microsoft Excel charts.
The user can select objects by name from drop-down lists or enable a timer
that cycles through the objects.
<P>
The code for ChartDem demonstrates several OLE Automation techniques for
integrating Visual Basic version 3.0 with Visual Basic for applications:

<UL><LI>Navigating from the application object to each of the chart-related
   objects.

<LI>Calling Visual Basic Applications Edition procedures from a Visual
   Basic version 3.0 program, and using the names of those procedures as
   though they were function pointers.

<LI>Linking Microsoft Excel objects to a Visual Basic version 3.0 OLE
   control at run time.

<LI>Using the OLE control to display an object while changing the
   properties of the object through a hidden instance of the application
   object.

<LI>Writing code that is portable between Visual Basic version 3.0 and
   the Applications Edition of Visual Basic.
<P>
</UL>The application consists of two parts: a Visual Basic version 3.0 program,
which manages the user interface, and a workbook, which contains all of the
Visual Basic Applications Edition procedures used to change object
properties. You can copy most of these procedures to Visual Basic version
3.0 and run them without making any code changes.
<P>
<P><h3>Encore: An Integrated Solution Using OLE and Microsoft Office</h3>
 
<P>
Encore is a sample application developed using Microsoft Visual Basic for
applications and Microsoft Office. It is a forecasting tool for Encore
Musical Instruments, an international firm. By using OLE, Encore
demonstrates the ease in creating custom solutions among multiple
applications.
<P>
From Microsoft Excel, Encore uses OLE Automation Objects and Visual Basic
for Applications macros both to access sales-planning data in Microsoft
Project and to create and distribute forecast reports in Microsoft Word.
Another innovation of the Encore application is its use of pivot tables, a
new feature of Microsoft Excel 5.0 that allows you to summarize large
amounts of data using format and calculation methods of your choice.
<P>
Encore incorporates the functionality of Microsoft Excel version 5.0,
Microsoft Word version 6.0, and Microsoft Project version 4.0.
<P>
<P><h3>FindXL: A Utility that Locates Hidden Instances of Microsoft Excel</h3>
 
<P>
Controlling OLE objects in Microsoft Excel from Microsoft Visual Basic
version 3.0 is one of the many ways to use the OLE Automation capabilities
of Microsoft Office to create custom applications. While developing and
testing applications created in this way, a run-time error in Visual Basic
version 3.0 may leave a hidden instance of Microsoft Excel running,
invisible to the Task Manager. FindXL is a simple tool for locating such
hidden instances and making them visible.
<P>
Visual Basic version 3.0 Professional Edition contains a tool, WPS.EXE, for
finding and eliminating dynamic-link libraries and hidden executable files,
but that tool provides neither a graceful exit nor an opportunity for
examining the state of the hidden executable file. By making the hidden
instance of Microsoft Excel visible, FindXL allows you to look at the
property settings of the OLE objects at the time of the error.
<P>
The Visual Basic version 3.0 source code for FindXL demonstrates the use of
the GetObject function with the Microsoft Excel Application object.
<P>
<P><h3>Help Desk: Demonstrates OLE Between Visual Basic and Microsoft Excel</h3>
 
<P>
The Help Desk sample application is a Microsoft Visual Basic version 3.0
program that demonstrates OLE functionality by manipulating Microsoft Excel
5.0 Automation objects. It is a way to effectively manage software support.
<P>
With this application, you can manage the names of software systems,
information on technical service representatives using Help Desk, the names
and phone numbers of contacts for whom the system is developed, and details
of technical-service requests or calls about a system. An integral part of
the application is the call-reporting functionality provided by an embedded
Microsoft Excel 5.0 worksheet in which call data can be displayed and
charted.
<P>
Help Desk was built using Microsoft Visual Basic version 3.0 and
incorporates the functionality of Microsoft Excel version 5.0.
<P>
<P><h3>Invoice: Demonstrates OLE 2 Between Visual Basic 3.0 and Word 6.0</h3>
 
<P>
The Invoice sample application is a Microsoft Visual Basic version 3.0
program that demonstrates OLE functionality by manipulating Microsoft Word
version 6.0 Automation objects to print invoices. For a single invoice, a
form is printed using OLE Automation. The Microsoft Word Mail Merge feature
is used when printing multiple (or batch) invoices.
<P>
An innovation of the Invoice application is its use of form fields, a new
feature of Microsoft Word version 6.0 that allows you to print the invoice
information as a custom form or as a preprinted form.
<P>
Invoice was built using Microsoft Visual Basic version 3.0 and incorporates
the functionality of Microsoft Word version 6.0.
<P>
<P><h3>Mailing List: Demonstrates OLE Between Visual Basic 3.0 and Word 6.0</h3>
 
<P>
The Mailing List sample application is a Microsoft Visual Basic version 3.0
program that demonstrates OLE functionality by manipulating Microsoft Word
version 6.0 Automation objects.
<P>
With this application you can manage the names and addresses of
individuals, the names of mailing lists, and any association between them.
It enables you to easily perform mail merge operations using the data
records of individuals in a mailing list and a Microsoft Word version 6.0
document.
<P>
Mailing List was built using Microsoft Visual Basic version 3.0 and
incorporates the functionality of Microsoft Word version 6.0.
<P>
<P><h3>MenuDemo: Demonstrates Various Microsoft Excel Objects</h3>
 
<P>
MENUDEMO.XLS is a Microsoft Excel workbook that demonstrates manipulation
of several of the OLE Automation objects exposed by Microsoft Excel, using
Visual Basic, Applications Edition. Most of the procedures in the workbook
are excerpts from the object reference topics in "Programming Integrated
Solutions with Microsoft Office," Chapter 4, "Microsoft Excel Objects."
<P>
The workbook contains modules and worksheets illustrating the following
objects:

<UL><LI>MenuBar, Menu, and MenuItem objects: The wsExploreMenus worksheet
   presents a simple drill-down interface to the menu bars, menus, and
   menu items in Microsoft Excel. The worksheet also has buttons for
   creating and destroying a custom menu bar that has cascading
   submenus. The modMenus module contains code to generate the lists of
   objects and to add, activate, and delete the custom menu bar.

<LI>Listbox object: The interface on the wsExploreMenus worksheet shows
   the use of listboxes on a worksheet. The listboxes are linked by
   their OnAction procedures, contained in module modMenus. For example,
   when the user selects a menu bar from the first listbox, the second
   listbox is automatically filled with the menus belonging to that menu
   bar.

<LI>Areas object: Three sheets illustrate the use of the Areas object to
   obtain a list of the simple rectangular ranges within a selection of
   discontiguous cells. The worksheet wsAreas contains several
   discontiguous-named ranges, which can be selected using Goto (F5);
   pressing a button on the sheet causes a procedure in modAreas to
   iterate the Areas collection of the selection, fill the listbox on
   dialog-sheet dlgAreas, and display the dialog box.

<LI>Window object: The modWindowObject module contains a procedure that
   switches a window on a worksheet in and out of Formula display mode.

<LI>PageSetup object: The modPageSetup module contains a procedure that
   causes the PageSetup dialog box to set the range to be printed equal to
   the current selection.

<LI>Spinner object: The modSpinner module shows a set of functions that
   work together to display a spinner control to the right of a cell if:
<P>
<P><PRE>    - The user double-clicks the cell.
</PRE><P>
<P><PRE>    -and-
</PRE><P>
<P><PRE>    - The cell contains an integer from -32,000 to +32,000 (the range
      limits of the spinner control).
</PRE><P>
   The code demonstrates both setting OnEntry and OnDoubleClick properties
   and iterating the Spinners collection to find a specific named instance
   of the Spinner control.
<P>
</UL>MenuDemo incorporates the functionality of Microsoft Excel version 5.0.
<P>
<P><h3>Northwind Management System: An Integrated Solution Using Microsoft Office</h3>
 
<P>
The Northwind Traders Management System sample application demonstrates how
to program an integrated solution using the following applications:

<UL><LI>Microsoft Access
<LI>Microsoft Excel
<LI>Microsoft Mail
<LI>Microsoft Visual Basic
<LI>Microsoft Word
<P>
</UL>The Northwind Traders Management System provides a top-down view of the
Northwind Traders business data. It enables employees of this fictitious
company to keep track of important corporate data so they can make better
decisions about everything from manufacturing and inventory to product
marketing.
<P>
The data resides in a Microsoft Access database (NWIND.MDB) and is shared
with a Microsoft Excel workbook (NWIND.XLS). The sample application
displays and manipulates this data using OLE Automation objects and code
that resides in a Visual Basic application (NWIND.EXE). News articles are
displayed using Microsoft Word (NWIND.DOC) in an OLE Automation object.
<P>
The Northwind Traders Management System application was built using
Microsoft Visual Basic version 3.0 and incorporates the functionality of
Microsoft Excel version 5.0, XLODBC.XLA, and Microsoft Word version 6.0.
<P>
<P><h3>OLEDB: Demonstrates Storing and Retrieving OLE Objects in a Database</h3>
 
<P>
NOTE: This reference to OLEDB is just a sample named OLEDB and does not
have anything to do with OLE DB technology introduced by Microsoft.
<P>
The OLEDB sample application is a Microsoft Visual Basic version 3.0
program that demonstrates OLE functionality by manipulating data access
objects. OLEDB allows you to add, delete, view, and edit OLE objects in a
Microsoft Access database. The database can contain Word documents,
Microsoft Excel spreadsheets, wave files, bitmaps, text files, and so on.
<P>
OLEDB demonstrates the use of the Visual Basic GetChunk() and AppendChunk()
methods to store and retrieve large amounts of data in a Microsoft Access
binary field. The OLEDB.BAS file contains reusable Visual Basic routines
for storing and retrieving OLE objects, files, or any other data.
<P>
OLEDB was built using Microsoft Visual Basic version 3.0.
<P>
<P><h3>SetObjNm: A Single Function that Changes Object Names in Microsoft Excel</h3>
 
<P>
SETOBJNM.XLA is a simple but useful example of an add-in. Its purpose is to
make it easy to change the default name of a graphic object, such as a
button on a dialog sheet, from "Button 2" to "cmdOK" or whatever your
coding standards dictate. On installation, the add-in puts a toolbar button
on the Forms toolbar, using the ToolTip text "Set Object Name." Selecting a
graphic object and clicking the Set Object Name button displays the default
name of the object and allows you to change it.
<P>
The source file, SETOBJNM.XLS, demonstrates the following:

<UL><LI>Installing and uninstalling an add-in.

<LI>Searching a collection.

<LI>Displaying a simple dialog box.

<LI>Using object navigation paths to add a ToolbarButton object to a
   Toolbar object.

<LI>Storing and setting toolbar button faces.

<LI>Setting ToolTip text for a toolbar button.
<P>
</UL>A second workbook, SETOBJN1.XLS, contains code from the EditBox reference
section in "Programming Integrated Solutions with Microsoft Office,"
Chapter 4, "Microsoft Excel Objects." It demonstrates the same
functionality as the add-in, but uses an uncompiled workbook.
<P>
SetObjNm incorporates the functionality of Microsoft Excel version 5.0.
<P>
<P><h3>VisiBase: Demonstrates OLE Between Visual Basic 3.0 and Microsoft Word 6.0</h3>
 
<P>
The VisiBase sample application is a Microsoft Visual Basic version 3.0
program that demonstrates OLE functionality by manipulating Microsoft Word
version 6.0 Automation objects.
<P>
This application enables you to modify data about each employee in a
company, including a scanned photograph of the employee and a brief
biography. This data, along with the photo, is automatically inserted into
a Microsoft Word template, ready for publication in a company newsletter.
The same Visual Basic front end could be used, with minor modifications, to
automate the creation of security ID badges, a yearbook, and so on.
<P>
VisiBase was built using Microsoft Visual Basic version 3.0 and
incorporates the functionality of Microsoft Word version 6.0.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: examples programs<BR>
Keywords          : IAPOLE vbwin GnrlVb kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:3.00<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL98: ParamArrays Are Always Zero-Based </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q182647">
<META NAME="KBModify" CONTENT="1998/03/18">
<META NAME="KBCreate" CONTENT="1998/03/17">
<META NAME="Keywords" CONTENT="kbprg kbdta kbdtacode xlvbahowto xlvbainfo xl97vbmigrate">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you call a custom function created in Visual Basic for Applications from a formula in a worksheet cell, the function returns an incorrect result.  CAUSE =====  This will occur if the custom function being called accepts a ParamArray argument a...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAY5,QAB9,QBS0,QBV8,QAUD,QAGI,QAKD,QDO9,QAVX,QAVW,QAY2,QBE7,QBE6,QA28 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL98: ParamArrays Are Always Zero-Based</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 18, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q182647</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you call a custom function created in Visual Basic for Applications
from a formula in a worksheet cell, the function returns an incorrect
result.
<P>
<P><h2>CAUSE</h2>
 
<P>
This will occur if the custom function being called accepts a ParamArray
argument and assumes that the ParamArray is a one-based array (where the
first element in the array is element 1), rather than a zero-based array
(where the first element in the array is element 0).
<P>
<P><h2>WORKAROUND</h2>
 
<P>
In many cases, you should be able to work around this problem by decreasing
the index within your custom function by one. For example, if your function
looks as follows
<P>
<PRE>   Function MyFunc(ParamArray X())
       MyFunc = X(5)
   End Function

</PRE>you would decrease the index within the parentheses from 5 to 4.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design of Microsoft Excel 98 Macintosh Edition. The
behavior of earlier versions of Microsoft Excel is incorrect.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When you write a custom Visual Basic function in Microsoft Excel, the last
argument accepted by the function can be declared as a ParamArray. When you
do this, the function will accept one or more values and place them in the
specified variable as an array. The value(s) can then be used within the
function. For example, if you have the following function
<P>
<PRE>   Function Test(X As Integer, ParamArray Y())
       Test = "Hello"
   End Function

</PRE>when you enter the formula
<P>
<PRE>   =Test(6,7,8,9,10)

</PRE>in a cell, the first argument (6) will be used as the value of the variable
X. The remaining arguments (7, 8, 9, 10) will become elements in the array
Y().
<P>
In earlier versions of Microsoft Excel, if you call a custom function from
a formula in a worksheet cell, and if the function contains a ParamArray,
the ParamArray is a one-based array. That is, the first element in the
array is element 1. In Microsoft Excel 98 Macintosh Edition, the first
element in such an array is element 0. You can demonstrate the difference
by entering the following function in a Visual Basic module in Microsoft
Excel:
<P>
<PRE>   Function TestIndex(ParamArray T())
       TestIndex = T(3)
   End Function

</PRE>When you enter this formula:
<P>
<PRE>   =TestIndex(1,3,5,7,9)

</PRE>the formula will return a different value in Microsoft Excel 98 Macintosh
Edition than it does in earlier versions of Microsoft Excel, because the
array of values is zero-based, not one-based:
<P>
<PRE>     T() Element Numbers     Array
   Zero-Based    One-Based   Value
   -------------------------------
       0             1         1
       1             2         3
       2             3         5
       3             4         7
       4             5         9

</PRE>So, in Microsoft Excel 5.0, the formula returns the value 5. In Microsoft
Excel 98 Macintosh Edition, the formula returns 7.
<P>
Note that arrays declared by ParamArray are always zero-based if called
from another Visual Basic macro. The change in behavior between earlier
versions of Microsoft Excel and Microsoft Excel 98 Macintosh Edition only
applies when you call the function in question from a formula in a
worksheet cell.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL98<BR>
Keywords          : kbprg kbdta kbdtacode xlvbahowto xlvbainfo xl97vbmigrate<BR>
Version           : MACINTOSH:98<BR>
Platform          : MACINTOSH<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 18, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

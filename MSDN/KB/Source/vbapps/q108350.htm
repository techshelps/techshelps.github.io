

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Distinguishing Sheet Types with Visual Basic Macro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108350">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1993/12/08">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  You can use the Microsoft Visual Basic for Applications TypeName function  to return each type of sheet available in Microsoft Excel. Because the  Worksheet type can apply to worksheets, MS Excel 4.0 Macro sheets, or MS  Excel 4.0 International Mac...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAH4,QA01,QBE7,QBE6,QAP2 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Distinguishing Sheet Types with Visual Basic Macro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108350</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You can use the Microsoft Visual Basic for Applications TypeName function 
to return each type of sheet available in Microsoft Excel. Because the 
Worksheet type can apply to worksheets, MS Excel 4.0 Macro sheets, or MS 
Excel 4.0 International Macro sheets, you must use the Type property along 
with the TypeName function to return the specific type of worksheet.
<P>
The sample macro (Sub procedure) in the "More Information" section of this 
article displays the appropriate sheet name for each sheet:
<P>
<PRE>   Chart
   DialogSheet
   Module (except in Microsoft Excel 97 and Microsoft Excel 98)
   MS Excel 4.0 Macro Sheet
   MS Excel 4.0 International Macro Sheet
   Worksheet

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>The following Visual Basic code examples assume that you have a workbook
that contains one worksheet, one MS Excel 4.0 Macro sheet, one chart sheet,
one dialog sheet, and one Visual Basic module, in that order. The code
example is located in the Visual Basic module.
<P>
To run the macro, position the insertion point in the line that reads "Sub
Sheet_Type()" and click Start on the Run menu.
<P>
<PRE>   Option Explicit

   Sub Sheet_Type()
       ' Dimension variables.
       Dim X As Variant
       ' Iterate through the loop once for each sheet in the workbook.
       For Each X In ActiveWorkbook.Sheets

           ' If the sheet's TypeName is "Worksheet", then...
           If TypeName(X) = "Worksheet" Then
               ' Check for each Type (xlWorksheet, xlExcel4MacroSheet,
               ' xlExcel4IntlMacroSheet) and display the appropriate 
               ' message box.
               If X.Type = xlWorksheet Then
                   MsgBox "Worksheet"
               ElseIf X.Type = xlExcel4MacroSheet Then
                   MsgBox "MS Excel 4.0 Macro Sheet"
               ElseIf X.Type = xlExcel4IntlMacroSheet Then
                   MsgBox "MS Excel 4.0 International Macro Sheet"
               End If

           ' Otherwise, display a message box with the appropriate 
           ' TypeName.
           Else
               MsgBox TypeName(X)         ' Show sheet type in message box.
           End If
       Next                               ' Repeat the loop until finished.
   End Sub

</PRE>When you run the Sheet_Type subroutine, the messages you receive are:
<P>
<PRE>   Worksheet, MS Excel 4.0 Macro Sheet, Chart, DialogSheet, Module

</PRE>NOTE: In Microsoft Excel 97 and Microsoft Excel 98, you do not receive a 
message box for the module. This occurs because of the design of the Visual 
Basic Editor in these versions of Microsoft Excel.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00c 7.00 7.00a XL98 XL97 XL7 XL5<BR>
Keywords          : kbcode kbprg PgmOthr<BR>
Version           : WINDOWS:5.0,5.0c,7.0,97; MACINTOSH:5.0,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: Defined Names Are Case Sensitive in Microsoft Excel 97 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q160327">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/12/04">
<META NAME="Keywords" CONTENT="xlvbahowto xlvbainfo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you run a Visual Basic for Applications macro in Microsoft Excel 97, and your macro code reads the Name property of an item in the Names collection, the result may be slightly different than the result you  receive in earlier versions of Micro...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAVX,QBVP,QAVW,QAUJ,QARM,QAH4,QAGX,QAJQ,QBS0,QAPF,QBWD,QA4B P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: Defined Names Are Case Sensitive in Microsoft Excel 97</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q160327</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you run a Visual Basic for Applications macro in Microsoft Excel 97,
and your macro code reads the Name property of an item in the Names
collection, the result may be slightly different than the result you 
receive in earlier versions of Microsoft Excel. This behavior occurs 
because defined names are case sensitive in Microsoft Excel 97.
<P>
This article explains the new behavior and the problems it may cause.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without 
warranty either expressed or implied, including, but not limited to, the 
implied warranties of merchantability and/or fitness for a particular 
purpose. This article assumes that you are familiar with the programming 
language being demonstrated and the tools used to create and debug 
procedures. Microsoft support engineers can help explain the functionality 
of a particular procedure, but they will not modify these examples to 
provide added functionality or construct procedures to meet your specific 
needs. If you have limited programming experience, you may want to contact 
the Microsoft fee-based consulting line at (800) 936-5200. For more 
information about the support options available from Microsoft, please see 
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>When you define names in a workbook in Microsoft Excel, the workbook cannot
contain two or more defined names that differ from each by only the case of
some or all of their letters. For example, you cannot create the following
defined names in the same workbook:
<P>
<PRE>   Test
   test
   tEST
   TEST

</PRE>Although the names use different combinations of uppercase and lowercase
letters, the letters in each name are all the same. Therefore, Microsoft
Excel considers these four names to be identical. Defining a name in a
workbook when another identical name (except for the case) already exists
results in the elimination of the original name. For example, if you define
the name "test" (without the quotation marks), Microsoft Excel eliminates
the name "Test" (without the quotation marks) from the workbook.
<P>
In Microsoft Excel, you can check the name of a defined name by using
Visual Basic for Applications macro code similar to the following:
<P>
<PRE>   MsgBox ThisWorkbook.Names(5).Name

   MsgBox ThisWorkbook.Names("test").Name

</PRE>In Microsoft Excel 97, if you specify a name within the parentheses in the
sample code, the Name property returns a name that is identical (in terms
of case) to the name that is defined in the Define Name dialog box. In
earlier versions of Microsoft Excel, the Name property returns a name that
is identical (in terms of case) to the name that you specify in the
parentheses.
<P>
To demonstrate the difference in behavior, run the following subroutine:
<P>
<PRE>   Sub TestName()

       MyArray = Array("test", "Test", "tEST", "TEST")
       For Each xName In MyArray
           ThisWorkbook.Names.Add Name:=xName, RefersTo:="5"
           MsgBox ThisWorkbook.Names("test").Name
       Next xName

   End Sub

</PRE>The message boxes display different values, depending on the version of
Microsoft Excel that you are using.
<P>
<PRE>                  MsgBox Value in      MsgBox Value in
   Defined name   Microsoft Excel 97   Microsoft Excel 5.0, 7.0
   ------------------------------------------------------------

   test           test                 test
   Test           Test                 test
   tEST           tEST                 test
   TEST           TEST                 test

</PRE>This change in behavior may cause a problem if you compare the name that is
returned by a Name property to a string. For example, although the
following code always works in earlier versions of Microsoft Excel, it may
not work in Microsoft Excel 97:
<P>
<PRE>   MsgBox ThisWorkbook.Names("test").Name = "test"

</PRE>You can prevent problems from occurring by standardizing the case of the
name before you compare it. For example, the following code works correctly
in any version of Microsoft Excel:
<P>
<PRE>   MsgBox UCase(ThisWorkbook.Names("test").Name) = UCase("test")
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97<BR>
Keywords          : xlvbahowto xlvbainfo<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

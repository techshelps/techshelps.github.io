

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: All PageSetup Settings Are Recorded into Macro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109205">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1993/12/28">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, if you record a Microsoft Visual Basic for Applications  macro that includes a Page Setup command, all of the Page Setup settings  are recorded.  Because of this, you may find that running a recorded Visual Basic PageSetup funct...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QBVH,QBVP,QBS0,QAH4,QABA,QBVV,QBAO,QAY5,QBJZ,QAF8,QARJ,QAB9,QAFF,QBV8 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: All PageSetup Settings Are Recorded into Macro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109205</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft Excel, if you record a Microsoft Visual Basic for Applications 
macro that includes a Page Setup command, all of the Page Setup settings 
are recorded.
<P>
Because of this, you may find that running a recorded Visual Basic
PageSetup function may take an unusually long amount of time, up to two
minutes or more (depending on the speed of your computer). Also, the screen
may flicker or blink repeatedly while the function is being executed.
<P>
<P><h2>CAUSE</h2>
 
<P>
If you record a Page Setup in a Visual Basic macro, all the settings are 
recorded due to the way in which page setup information is returned to the 
macro recording system.
<P>
The flickering occurs due to the way in which the PageSetup function
updates the sheet's different Page Setup settings. The amount of flickering
is related to the number of Page Setup settings you change with the 
PageSetup function: changing more settings results in more flickering.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
After you record a Visual Basic PageSetup function, you will probably want
to eliminate unneeded settings from the PageSetup function.
<P>
To prevent the flickering, set the Application.ScreenUpdating property to
False before executing your PageSetup function. Then, when the PageSetup
function has completed, you can set the Application.ScreenUpdating property
back to True to reenable screen redraws.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>The first Visual Basic code example shows the results of recording a Visual
Basic PageSetup function.
<P>
The second Visual Basic code example shows one way in which you can prevent
the screen from flickering or blinking while a PageSetup function is being
executed.
<P>
<P><h3>Example One - Recording a Page Setup</h3>
 

<OL><P><LI>Create a new workbook.

<P><LI>Activate a worksheet in the workbook.

<P><LI>On the Tools menu, point to Record Macro, and click Record New Macro.
<P>
    In Microsoft Excel 97 and Microsoft Excel 98, click the Tools menu,
    point to Macro, and then click Record New Macro.

<P><LI>In the Record New Macro dialog box, select the Options button. In the
    language section, make sure that the "Visual Basic" option button is
    selected. (Ignore this step in Microsoft Excel 97 and Microsoft Excel
    98.)

<P><LI>In the "Store in" section, make sure the "This Workbook" option button
    is selected.

<P><LI>Click OK to begin recording.

<P><LI>On the File menu, click Page Setup.

<P><LI>In the Page Setup dialog box, click OK.

<P><LI>On the Tools menu, point to Record Macro, and then click Stop 
    Recording.

<P><LI>Activate the new Visual Basic module. Your recorded subroutine
    should appear similar to the following (comments have been added for
    explanation--they are not actually recorded).
<P>
<PRE>       Sub Macro1()
           With ActiveSheet.PageSetup            ' This is the first part.
               .PrintTitleRows = ""
               .PrintTitleColumns = ""
           End With
           ActiveSheet.PageSetup.PrintArea = ""  ' This is the second part.
           With ActiveSheet.PageSetup            ' This is the third part.
               .LeftHeader = ""
               .CenterHeader = "&amp;A"
               .RightHeader = ""
               .LeftFooter = ""
               .CenterFooter = "Page &amp;P"
               .RightFooter = ""
               .LeftMargin = Application.InchesToPoints(0.75)
               .RightMargin = Application.InchesToPoints(0.75)
               .TopMargin = Application.InchesToPoints(1)
               .BottomMargin = Application.InchesToPoints(1)
               .HeaderMargin = Application.InchesToPoints(0.5)
               .FooterMargin = Application.InchesToPoints(0.5)
               .PrintHeadings = False
               .PrintGridlines = True
               .PrintNotes = False
               .CenterHorizontally = False
               .CenterVertically = False
               .Orientation = xlPortrait
               .Draft = False
               ' On a Macintosh computer, omit the following line.
               .PaperSize = xlPaperLetter
               .FirstPageNumber = xlAutomatic
               .Order = xlDownThenOver
               .BlackAndWhite = False
               .Zoom = 100
           End With
       End Sub

</PRE></OL>When the PageSetup function is recorded, the settings are recorded in
three parts:

<OL><P><LI>The first part is a With-End With section which sets the PrintTitleRows
   and the PrintTitleColumns.

<P><LI>The second part sets the PrintArea.

<P><LI>The third part is a With-End With section, which sets all of the other
   settings.
<P>
</OL>If you do not actually want to change certain settings, such as .Draft, you
can remove those lines from the subroutine. For example, if you only want
to change the PrintTitleRows, the PrintArea, and the Orientation, you could
use the following:
<P>
<PRE>   Sub Macro1()
       With ActiveSheet.PageSetup
           .PrintTitleRows = "$1:$3"
           .PrintArea = "$A$4:$C$100"
           .Orientation = xlLandscape
       End With
   End Sub

</PRE></OL>Because the other settings do not need to be changed, it is not necessary 
to include them in the subroutine. However, you must remove them yourself.
<P>
Also, note that the entire PageSetup procedure can be incorporated into a
single With-End With section. It is not necessary for the PrintArea,
PrintTitleRows, or PrintTitleColumns settings to be changed separately from
the other settings; it is only recorded that way.
<P>
<P><h3>Example Two - Preventing Screen Flicker While PageSetup Executes</h3>
 
<P>
The following subroutine demonstrates one way in which you may prevent the 
screen from flickering while a PageSetup function is being executed.
<P>
<PRE>   Sub PreventScreenFlicker()

       ' This line turns off screen updating.
       Application.ScreenUpdating = False
       ' Apply each of the following properties to the active sheet's Page
       ' Setup.
       With ActiveSheet.PageSetup
           .PrintTitleRows = "$1:$3"          ' Set print title rows.
           .PrintTitleColumns = "$A:$C"       ' Set print title columns.
           .LeftHeader = ""                   ' Set the left header.
           ' More commands could appear before the End With. They are not
           ' shown here in order to keep the example short.
       End With                              ' End of With section.
       ' Re-enable screen updating. This line is optional; you may not need
       ' or want to re-enable screen updating.
       Application.ScreenUpdating = True
   End Sub

</PRE>The subroutine turns off screen updating just before executing the 
PageSetup function and then turns screen updating back on when the 
PageSetup function is complete.
<P>
If screen updating is not turned off, as each line in the With section
(.PrintTitleRows, .PrintTitleColumns, and so forth) is executed, the screen
may flicker slightly.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 7.00 8.00 XL97 XL98 XL7 XL5<BR>
Keywords          : kbcode kbprg PgmOthr<BR>
Version           : WINDOWS:5.0,7.0,97; MACINTOSH:5.0,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PPT: Sample Code to Extract Text from an Organization Chart </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161135">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/12/17">
<META NAME="Keywords" CONTENT="kbcode kbmacro kbprg kbdta kbdtacode kbpptvba">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The following sample Microsoft Visual Basic for Applications macro (Sub procedure) extracts the text from an Organization Chart in a PowerPoint slide and then transfers that text into a new Microsoft Word document. Once the text is in Word you can ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBO3,QBO4,QAWH,QAIH,QBS0,QAH4,QADP,QABI,QA2Q,QBWS,QAW6,QAPN,QABH,QAGF,QDKP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PPT: Sample Code to Extract Text from an Organization Chart</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161135</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft PowerPoint 98 Macintosh Edition
<LI>Microsoft PowerPoint 97 for Windows
<LI>Microsoft Word 97 for Windows
<LI>Microsoft Organization Chart for Windows 95, version 2.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following sample Microsoft Visual Basic for Applications macro (Sub
procedure) extracts the text from an Organization Chart in a PowerPoint
slide and then transfers that text into a new Microsoft Word document. Once
the text is in Word you can edit it as you would any text.
<P>
NOTE: The macro does not modify the original Organization Chart in any way.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Sample Visual Basic Procedure</h3>
 
<P>
<PRE>   Sub OrgMain()

      ' Variables.
      Dim ShapeType, WhatIsSelected, CurrentView As Integer
      Dim SlideCount, ObjectCount, SelectCount, i, x As Long
      Dim Total, NextAvailable, top, BoxCount, LastSlide As Long
      Dim WordRunning As Boolean
      Dim word As Object
      Dim StringTable(), OleObjectType, temp As String

      ' Keeps track of the number of text boxes in the chart.
      Total = 0
      BoxCount = 0

      ' Used for error trapping.
      On Error Resume Next
      Err.Clear

      ' Check the type of the item selected.
      WhatIsSelected = ActiveWindow.Selection.Type

      ' Check to see whether any objects are selected.
      If WhatIsSelected = ppSelectionNone Then
         ' No objects are selected, so end the macro.
         MsgBox "No Organization Chart selected. " _
            &amp; "Please select an Organization Chart and run " _
            &amp; "the macro again.", vbInformation
         End
      End If

      ' Check to see whether a slide is selected.
      If WhatIsSelected = ppSelectionSlides Then
         ' A slide is selected, so end the macro.
         MsgBox "A slide is selected. " _
            &amp; "Please select an Organization Chart and run " _
            &amp; "the macro again.", vbInformation
         End
      End If

      ' Count the selections.
      SelectCount = ActiveWindow.Selection.ShapeRange.Count

      ' If multiple objects selected, end the macro.
      If SelectCount &gt; 1 Then
         MsgBox "Too many objects selected. " _
            &amp; "Please select 1 Organization Chart and run " _
            &amp; "the macro again.", vbInformation
         End
      End If

      ' If the selection is not a shape, exit the macro.
      If WhatIsSelected &lt;&gt; ppSelectionShapes Then
         MsgBox "The object selected is not " _
            &amp; "an Organization Chart. " _
            &amp; "Please select an Organization Chart and run " _
            &amp; "the macro again.", vbInformation, _
            "Shape Check"
         End
      End If

      ' A shape is selected, so figure out what type of shape.
      ShapeType = ActiveWindow.Selection.ShapeRange.Type

      ' Check to see whether the shape is an embedded OLE object.
      ' If not, exit the macro.
      If ShapeType &lt;&gt; msoEmbeddedOLEObject Then
         MsgBox "The object selected is not " _
            &amp; "an Organization Chart. " _
            &amp; "Please select an Organization Chart and run " _
            &amp; "the macro again.", vbInformation, _
            "OLE Object Check"
         End
      End If

      ' Determine type of OLE object.
      OleObjectType = ActiveWindow.Selection.ShapeRange.OLEFormat.ProgID

      ' See whether the object selected is an organization chart.
      If OleObjectType &lt;&gt; "OrgPlusWOPX.4" And _
         OleObjectType &lt;&gt; "MSOrgchart.2" Then
         ' If not an organization, exit the macro.
         MsgBox "The object selected is not " _
            &amp; "an Organization Chart. " _
            &amp; "Please select an Organization Chart and run " _
            &amp; "the macro again.", vbInformation, _
            "OLE Object Class Check"
         End
      End If

      ' Copy the Organization chart.
      ActiveWindow.Selection.ShapeRange.Copy

      ' Count the number of slides.
      SlideCount = ActivePresentation.Slides.Count

      ' Add a new slide to the end of the presentation.
      ActivePresentation.Slides.Add (SlideCount + 1), ppLayoutBlank

      ' Save the current view.
      CurrentView = ActiveWindow.ViewType

      ' Switch to slide view if not there already.
      If CurrentView &lt;&gt; ppViewSlide Then
         ActiveWindow.ViewType = ppViewSlide
      End If

      ' Switch to the proper slide.
      LastSlide = ActivePresentation.Slides.Count
      ActiveWindow.View.GotoSlide Index:=LastSlide

      ' Paste the Organization chart to the temp slide.
      ActiveWindow.View.Paste

      ' Ungroup the Organization chart.
      ActiveWindow.Selection.ShapeRange.Ungroup.Select
      ActiveWindow.Selection.Unselect

      ' Count the Organization chart objects.
      With ActivePresentation.Slides(LastSlide).Shapes
         ObjectCount = .Count

         ' Check all of the objects for text.
         For x = ObjectCount To 1 Step -1

            ' See whether object has a text frame.
            If .Item(x).HasTextFrame Then
               ' See whether object has text.

               If .Item(x).TextFrame.HasText Then
                  ' Increase the size of the array
                  ' and save the contents.
                  ReDim Preserve StringTable(Total)
                  StringTable(Total) = .Item(x).TextFrame.TextRange.Text
                  Total = Total + 1
                  BoxCount = BoxCount + 1
               Else
                  ' See whether object has a fill.
                  If .Item(x).Fill.Visible = msoTrue Then
                     NextAvailable = Total - BoxCount

                     If BoxCount = 2 Or BoxCount = 3 Then
                        ' Swap first and third Total.
                        temp = StringTable(NextAvailable)
                        StringTable(NextAvailable) = StringTable(Total - 1)
                        StringTable(Total - 1) = temp
                     End If

                     If BoxCount &gt; 3 Then
                        top = 0

                        For i = BoxCount To 0 Step -1
                           ' Set temp = to last item in array.
                           temp = StringTable(top)
                           StringTable(top) = StringTable(i)
                           StringTable(i) = temp
                           top = top + 1

                           If top = i Then
                              Exit For
                           End If
                        Next i
                     End If

                     ' Add an extra Total to the end of the list.
                     ReDim Preserve StringTable(Total)
                     StringTable(Total) = ""
                     Total = Total + 1
                     BoxCount = 0

                  End If
               End If
            End If
         Next x

         ' Checks to see if Word is running.
         Set word = GetObject(, "Word.Application.8")

         If Err.Number &lt;&gt; 0 Then
            WordRunning = False
         Else
            WordRunning = True
         End If

         ' Reset the error variable.
         Err.Clear

         ' Create a Word object.
         If WordRunning = False Then
            Set word = CreateObject("Word.Application.8")
         End If

         If Err.Number &lt;&gt; 0 Then
            MsgBox "Unable to launch Word. " _
               &amp; "This Macro requires Microsoft Word 97. " _
               &amp; "Make sure Word is running correctly and " _
               &amp; "then attempt to run the macro again. " _
               , vbCritical _
               , "Failed to launch Word"
            End
         End If

         ' Creates a new Word document based on normal.
         word.Documents.Add

         ' Copy all the organization chart text to Word.
         For x = 0 To Total
            word.Selection.TypeText Text:=StringTable(x)
            word.Selection.TypeParagraph
         Next x

      End With

      ' Delete the temp slide.
      ActiveWindow.Selection.SlideRange.Delete

      ' Restore the current view.
      If ActiveWindow.ViewType &lt;&gt; CurrentView Then
         ActiveWindow.ViewType = CurrentView
      End If

      ' Make Word visible if not.
      If WordRunning = False Then
         word.Application.Visible = True
      End If

      ' A message indicating the macro is finished running.
      MsgBox "Organization Chart text extracted " _
         &amp; "to a Word document"

   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about creating Visual Basic for Applications macros,
click the Office Assistant in Microsoft PowerPoint, type "how to create a
macro," click Search, and then click to view "Create a macro in Visual
Basic Editor."
<P>
For more information about running Visual Basic for Applications macros,
click the Office Assistant in Microsoft PowerPoint, type "how to run a
macro," click Search, and then click to view "Run a macro."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If the Assistant is not able to answer your query, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176476.htm">Q176476</A></B>
   TITLE     : OFF: Office Assistant Not Answering Visual Basic Questions

</PRE>For more information about getting help with Visual Basic for Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 8.00 kbmacro ppt8 vba vbe<BR>
Keywords          : kbcode kbmacro kbprg kbdta kbdtacode kbpptvba<BR>
Version           : WINDOWS:97; MACINTOSH:98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Hardware          : MAC x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

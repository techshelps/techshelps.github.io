

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD97: OLE Automation Fails When Using "Word.Basic" Object </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q163729">
<META NAME="KBModify" CONTENT="1998/02/11">
<META NAME="KBCreate" CONTENT="1997/02/17">
<META NAME="Keywords" CONTENT="kbwordvba kbfile kbinterop kbmacro kbole">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Visual Basic for Applications includes a WordBasic Automation object (Word.Basic) that includes methods for all the WordBasic statements and functions available in Word versions 6.x and 7.x.  When you use a programming language that cannot call a V...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAIH,QAPN,QA5F,QAHE,QAB9,QACI,QA9Q,QA2K,QAMA,QBV8,QAGI,QATJ,QDO7,QAJP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD97: OLE Automation Fails When Using "Word.Basic" Object</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 11, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q163729</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic for Applications includes a WordBasic Automation object
(Word.Basic) that includes methods for all the WordBasic statements and
functions available in Word versions 6.x and 7.x.
<P>
When you use a programming language that cannot call a Visual Basic for
Applications or WordBasic instruction using named arguments, for example,
Microsoft Visual Basic 3.0, you must identify these arguments by position
using commas as placeholders.
<P>
To ensure the correct WordBasic command argument positioning when using
OLE Automation to interact with Visual Basic for Applications, use the
Position.hlp file for Word for Windows version 6.x.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Position.exe">Position.exe</A> <I>(size: 47167 bytes)</I> 
                  This file contains a Help file (POSITION.HLP). This file
                  is for Visual Basic version 3.0 programmers who want to
                  use OLE Automation to access WordBasic in versions of
                  Microsoft Word.

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
WordBasic statements or functions in Microsoft Word can take named
arguments. If your application does not support named arguments, and you
send WordBasic commands through OLE Automation, your application must
specify all the parameters to a WordBasic function in the proper order.
The same call in WordBasic may only require some of the parameters using
named arguments, and those parameters could be provided in any order.
<P>
For most WordBasic statements, the positioning of the arguments is
documented in the WordBasic Help topics or printed reference entries for
those statements. However, the arguments for some statements are not
listed in proper order, or the arguments are irrelevant or have no effect.
These arguments are not documented in WordBasic Help or in the printed
reference.
<P>
For example, the InsertIndex statement corresponds to the Index tab in the
Index and Tables dialog box. The InsertIndex statement takes a number of
arguments that have to do with other tabs in the dialog box, such as the
Table Of Contents tab. Because these arguments are irrelevant to inserting
an index, they are ignored, and are therefore not documented in WordBasic
Help or in the printed reference. But, as an OLE Automation programmer, you
need to be aware of these arguments so you can correctly specify arguments
by position.
<P>
NOTE: If your program was written to call WordBasic commands and you are
anticipating interacting with the Microsoft Word Visual Basic for
Applications language for all future development, it is recommended that
you convert your code from WordBasic to the Microsoft Word Visual Basic
for Applications commands.
<P>
For a listing of these statements and the correct order of the arguments,
look to the Position.txt text file. This file is included on the disk
included with the Word Developer's Kit (located in the Wrdbasic
directory).
<P>
For additional information, please see the following article(s) in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WORD/Q161547.htm">Q161547</A></B>
   TITLE     : How to Use OLE Automation with Word 6.0/7.0

   ARTICLE-ID: <B><A HREF="../WORD/Q105534.htm">Q105534</A></B>
   TITLE     : OLE: Visual Basic 3.0 Does Not Support Named Arguments

   ARTICLE-ID: <B><A HREF="../vbapps/Q112733.htm">Q112733</A></B>
   TITLE     : FILE: Help File for VB OLE Automation w/ Word for Windows

</PRE>For information about WordBasic statements and functions, see the
"Microsoft Word Developer's Kit" or WordBasic Help in Word version 6.0 or
Word for Windows 95.
<P>
For more information about converting WordBasic to Visual Basic, from the
Visual Basic for Applications Editor, click the Office Assistant, type
"WordBasic," click Search, and then click to view "Visual Basic
Equivalents for WordBasic Commands."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 word8 word97 8.0 8.0 vb vbe vba 6.0 7.0<BR>
winword word7 word95 fileprint<BR>
Keywords          : kbwordvba kbfile kbinterop kbmacro kbole<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 11, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

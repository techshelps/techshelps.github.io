

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Visual Basic Example to Play an AVI File </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114039">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/04/24">
<META NAME="Keywords" CONTENT="kbprg PgmOthr kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  It is possible to use Visual Basic for Applications to play an audio video interleaved (AVI) file from Microsoft Excel. You can reference an AVI file directly without inserting it as an object.  MORE INFORMATION  Microsoft provides examples of Visu...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAH4,QAYA,QDM6,QAI4,QAYS,QAY5,QAB9,QDL9,QBWQ,QBWO,QBWN,QAPF,QBV8 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Visual Basic Example to Play an AVI File</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114039</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is possible to use Visual Basic for Applications to play an audio
video interleaved (AVI) file from Microsoft Excel. You can reference
an AVI file directly without inserting it as an object.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h3>Microsoft Excel versions 7.0 and 97</h3>
 
<P>
In Microsoft Excel versions 7.0 and 97, the following Visual Basic Code
plays a Microsoft AVI file at a specified location and size on the active
window. This example assumes that the file Blastoff.avi file is stored in
the default folder (C:\Winvideo). This code does not require the full
Microsoft Video package in order to function properly.
<P>
Sample Code:
<P>
<PRE>'API and Constant Declarations
'The function declarations must each be typed on one line.

Declare Function mciSendString Lib "winmm" Alias "mciSendStringA" (ByVal _
   lpstrCommand As String, ByVal lpstrReturnStr As Any, ByVal wReturnLen _
   As Long, ByVal hCallBack As Long) As Long

Declare Function GetActiveWindow Lib "USER32" () As Integer

</PRE>Const WS_CHILD = &amp;h40000000
<P>
<PRE>Sub PlayAVIFile()

   'Dimension variables.
   Dim CmdStr As String, FileSpec As String
   Dim Ret As Integer, XLSHwnd As Integer

   'The name and location of the AVI file to play.
   FileSpec = "C:\WINVIDEO\BLASTOFF.AVI"

   'Get the active sheet's window handle.
   XLSHwnd = GetActiveWindow()

   'Opens the AVIVideo and creates a child window on the sheet
   'where the video will display. "Animation" is the device_id.
   CmdStr = ("open " &amp; FileSpec &amp; _
      " type AVIVideo alias animation parent " &amp; _
      LTrim$(Str$(XLSHwnd)) &amp; " style " &amp; LTrim$(Str$(WS_CHILD)))

   Ret = mciSendString(CmdStr, 0&amp;, 0, 0)

   'Put the AVI window at location 25, 120 relative to the
   'parent window (Microsoft Excel) with a size of 160 x 160.
   Ret = mciSendString("put animation window at 25 120 160 160", _
      0&amp;, 0, 0)

   'The wait tells the MCI command to complete before returning
   'control to the application.
   Ret = mciSendString("play animation wait", 0&amp;, 0, 0)

   'Close windows so they don't crash when you exit the application.
   Ret = mciSendString("close animation", 0&amp;, 0, 0)

End Sub

</PRE><h3>Microsoft Excel versions 5.0 and 5.0c</h3>
 
<P>
In Microsoft Excel version 5.0, the following Visual Basic Code plays a
Microsoft AVI file at a specified location and size on the active window.
This example assumes Microsoft Video for Windows is installed and
functioning properly with the BLASTOFF.AVI file stored in the default
directory (C:\WINVIDEO). This code does not require the full Microsoft
Video package in order to function properly. If the full package is not
installed, the runtime module must be properly installed in its place for
distribution, and the FileSpec variable must be modified accordingly.
<P>
Sample Code:
<P>
<PRE>'API and Constant Declarations
'The function declarations must each be typed on one line.

Declare Function mciSendString Lib "MMSYSTEM" (ByVal lpstrCommand _
   As String, ByVal lpstrReturnStr As Any, ByVal wReturnLen As _
   Any, ByVal hCallBack As Any) As Long

Declare Function GetActiveWindow Lib "USER" () As Integer

</PRE>Const WS_CHILD = &amp;h40000000
<P>
<PRE>Sub PlayAVIFile()

   'Dimension variables.
   Dim CmdStr As String, FileSpec As String
   Dim Ret As Integer, XLSHwnd As Integer

   'The name and location of the AVI file to play.
   FileSpec = "C:\WINVIDEO\BLASTOFF.AVI"

   'Get the active sheet's window handle.
   XLSHwnd = GetActiveWindow()

   'Opens the AVIVideo and creates a child window on the sheet
   'where the video will display. "Animation" is the device_id.
   CmdStr = ("open " &amp; FileSpec &amp; _
      " type AVIVideo alias animation parent " &amp; _
      LTrim$(Str$(XLSHwnd)) &amp; " style " &amp; LTrim$(Str$(WS_CHILD)))

   Ret = mciSendString(CmdStr, 0&amp;, 0, 0)

   'Put the AVI window at location 25, 120 relative to the
   'parent window (Microsoft Excel) with a size of 160 x 160.
   Ret = mciSendString("put animation window at 25 120 160 160", _
      0&amp;, 0, 0)

   'The wait tells the MCI command to complete before returning
   'control to the application.
   Ret = mciSendString("play animation wait", 0&amp;, 0, 0)

   'Close windows so they don't crash when you exit the application.
   Ret = mciSendString("close animation", 0&amp;, 0, 0)

End Sub


</PRE>For more information about the mciSendString function, see the "Microsoft
Video for Windows Development Kit", and the Microsoft Visual Basic 3.0
help topic under Win SDK.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00c 7.00 8.00 97<BR>
Keywords          : kbprg PgmOthr kbprg<BR>
Version           : 5.00 5.00c 7.00 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

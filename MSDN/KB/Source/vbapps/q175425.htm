

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MXL5: Running VBA Procedures from AppleScript </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q175425">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1997/10/20">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbahowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  AppleScript is a scripting language you can use to automate processes on a Macintosh computer. The commands and syntax used in AppleScript are much like a programming language and have the ability to control applications outside the Finder.  This a...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDNQ,QBVP,QBWS,QAUR,QBJZ,QAKD,QBS0,QAD7,QAH4,QAB9,QAAP,QAB4,QA01,QAH6,QAFF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>MXL5: Running VBA Procedures from AppleScript</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q175425</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
AppleScript is a scripting language you can use to automate processes on
a Macintosh computer. The commands and syntax used in AppleScript are much
like a programming language and have the ability to control applications
outside the Finder.
<P>
This article provides sample AppleScript scripts that demonstrate how to
call Microsoft Visual Basic for Applications Sub procedures (including
macros) and Function procedures.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to,
the implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the
functionality of a particular procedure, but they will not modify these
examples to provide added functionality or construct procedures to meet
your specific needs. If you have limited programming experience, you
may want to contact the Microsoft fee-based consulting line at (800)
936-5200. For more information about the support options available
from Microsoft, please see the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>AppleScript is manufactured by Apple Computer Inc., a vendor independent of
Microsoft; we make no warranty, implied or otherwise, regarding this
product's performance or reliability.
<P>
To call a Visual Basic procedure from an AppleScript script, you can use
Evaluate or Do Script, followed by the appropriate syntax for specifying
the name of the procedure (and possible arguments). Because there is not a
discernible difference between Evaluate and Do Script, Evaluate is used in
all sample scripts in this article.
<P>
NOTE: All examples provided in this article assume Microsoft Excel is
running and the sample procedure being called is contained in an open
workbook called "Workbook1."
<P>
<P><h3>Recording a Script That Launches a Microsoft Excel Macro</h3>
 
<P>
Creating the Macro:

<OL><P><LI>Start Microsoft Excel.

<P><LI>On the Insert menu, point to Macro, and then click Module.

<P><LI>Type the following in the module:
<P>
<PRE>      Sub Test_Recording()
         MsgBox "This is a Excel macro."
      End Sub

</PRE><P><LI>Activate Sheet1.

<P><LI>On the File menu, click Save.

<P><LI>Save the workbook as "Workbook1" (without the quotation marks).

<P><LI>Leave Excel open.
<P>
</OL>Recording the Script:

<OL><P><LI>Start AppleScript Editor.

<P><LI>If you do not have an untitled script window open, click New Script
    on the File menu.

<P><LI>Click Record.

<P><LI>On the Application menu, click Microsoft Excel.

<P><LI>On the Tools menu, click Macro.

<P><LI>In the list of macros, click Test_Recording, and then click Run.
<P>
    A message box appears displaying the message "This is a Microsoft
    Excel macro."

<P><LI>Click OK.

<P><LI>On the Application menu, click Script Editor.

<P><LI>Click Stop.
<P>
    The recorded script looks like the following:
<P>
       tell application "Microsoft Excel"
<PRE>          Activate
          Evaluate "Workbook1!Test_Recording()"
       end tell

    NOTE: To start Visual Basic procedures (including macros) from
    an AppleScript script, you must follow the name of the procedure with
    parentheses.

</PRE><P><LI>On the File menu, click Save.

<P><LI>Select a destination folder, type a name for your script in the
    Save Script As box, and then click Save.
<P>
</OL>Playing Back the Recorded Script:

<OL><P><LI>With the recorded script displayed in the Script Editor window,
   click Run.
<P>
   The Test_Recording macro runs, and the message box appears displaying
   the message "This is a Microsoft Excel macro."

<P><LI>Click OK.

<P><LI>On the Application menu, click Script Editor.
<P>
</OL><h3>Passing Arguments to a Visual Basic Procedure</h3>
 
<P>
In the preceding example, you created a script that calls a Visual Basic
macro. A Visual Basic macro is a public Sub procedure that does not accept
any arguments. However, you can pass arguments to Sub and Function
procedures.
<P>
As mentioned earlier in this article, you must follow the name of the
procedure with parentheses if you want to start it from an AppleScript
script. If you are passing arguments to a procedure, you place them between
the parentheses.
<P>
Passing a Single Value to a Sub Procedure:

<OL><P><LI>Open the workbook (Workbook1) that you created earlier in this article,
   and then activate Module1.

<P><LI>Type the following code in the module:
<P>
<PRE>      Sub Pass_1_Argument(x)

         Worksheets("Sheet1").Cells(1,1).Value = x

      End Sub

</PRE><P><LI>Activate Sheet1.

<P><LI>On the File menu, click Save.

<P><LI>Leave Microsoft Excel open. Start Script Editor and type the following
   in a new script window:
<P>
<P><PRE>      tell application "Microsoft Excel"
<PRE></PRE>         set myvalue to 10
         Activate
         Evaluate "Workbook1!Pass_1_Argument(" &amp; myvalue &amp; ")"
      end tell

   NOTE: In order to pass a variable to a Visual Basic procedure, you must
   concatenate the variable into the Evaluate or Do Script statement. If
   you want to pass a constant value to the procedure, you can place the
   value between the parentheses without using concatenation. If you
   want to pass a constant value, the Evaluate line becomes the following:

      Evaluate "Workbook1!Pass_1_Argument(10)

</PRE><P><LI>On the File menu, click Save.

<P><LI>Select a destination folder, type a name for your script in the
   Save Script As box, and then click Save.

<P><LI>Run the script.
<P>
   The script activates Microsoft Excel and places the value 10 in cell A1
   on Sheet1.
<P>
</OL><h3>Returning a Value from a Procedure to a Script</h3>
 
<P>
If you want to return a value from a Visual Basic Sub procedure, you will
be limited to a True Boolean value when the subroutine completes
successfully. However, if you are calling a function, you can return any
numerical, Boolean, or string value back to the AppleScript script.
Whether you are calling a Microsoft Excel Sub or Function procedure, the
value is returned to a predefined AppleScript variable named "result."
<P>
Returning a Value from a Function:

<OL><P><LI>Activate Microsoft Excel, and open the workbook (Workbook1) that you
   created earlier in this article.

<P><LI>Activate Module1 and type the following code:
<P>
<P><PRE>      Function Return_Function_Value(x) As Integer
</PRE><P>
<PRE>         Return_Function_Value = x * 2

      End Function

</PRE><P><LI>Leave Microsoft Excel open. Start Script Editor and type the following
   in a new script window:
<P>
<P><PRE>      tell application "Microsoft Excel"
<PRE></PRE>         Evaluate "Workbook1!Return_Function_Value(10)
         set myvalue to result + 1
         display dialog myvalue
      end tell

</PRE><P><LI>On the File menu, click Save.

<P><LI>Select a destination folder, type a name for your script in the
   Save Script As box, and then click Save.

<P><LI>Run the script.
<P>
   An AppleScript dialog box appears displaying the value 21.

<P><LI>Click OK.
<P>
</OL>Returning a Value from a Sub Procedure:

<OL><P><LI>Activate Microsoft Excel, and open the workbook (Workbook1) that you
   created earlier in this article.

<P><LI>Activate Module1, and type the following code:
<P>
<PRE>      Sub Return_Sub_Value()

         Sheets("Sheet1").Cells(1, 1).Value = 1

      End Sub

</PRE><P><LI>Leave Microsoft Excel open. Start Script Editor, and type the following
   in a new script window:
<P>
<P><PRE>      tell application "Microsoft Excel"
<PRE></PRE>         Evaluate "Workbook1!Return_Sub_Value()"
         if result then
            display dialog "Success"
         end if
      end tell

</PRE><P><LI>On the File menu, click Save.

<P><LI>Select a destination folder, type a name for your script in the
   Save Script As box, and then click Save.

<P><LI>Run the script.
<P>
   An AppleScript dialog box appears displaying "success".

<P><LI>Click OK.
<P>
</OL><h3>Error Trapping Values Returned from a Procedure</h3>
 
<P>
There are situations in which your Sub or Function procedure fails due to
user-intervention or a run-time error. This section discusses ways to
communicate back to your AppleScript script that an error occurred in the
Visual Basic procedure.
<P>
Error Trapping for a Sub Procedure:
<P>
Because a Sub procedure cannot explicitly pass a value back to its
AppleScript caller, you can work around it by having the procedure store a
value in a worksheet cell or a defined name in the workbook. Then, your
script can check the current value of the cell or defined name to see if an
error occurred. The following example uses a defined name to hold the
status of any error in the Sub procedure.

<OL><P><LI>Activate Microsoft Excel, and open the workbook (Workbook1) that you
    created earlier in this article.

<P><LI>On the Insert menu, point to Name, and then click Define.

<P><LI>Type "myerr" (without the quotation marks) in the Names in Workbook
    box.

<P><LI>Delete any text in the Refers To box, and then type ="ok" (including
    the quotation marks) in the Refers To box. Click OK.

<P><LI>Activate Module1, and type the following code:
<P>
<PRE>       Sub Return_Sub_Error()

          ThisWorkbook.Names("myerr").RefersTo = "ok"

          On Error GoTo handle:

          x = MsgBox(Prompt:="Click Yes for an error, otherwise click No" _
             , Buttons:=vbYesNo)
          If x = vbYes Then
             Error 1004      ' Generates a run-time error.
          End If

          Exit Sub

          handle:
          ThisWorkbook.Names("myerr").RefersTo = Err

       End Sub

</PRE><P><LI>Leave Microsoft Excel open. Start Script Editor, and type the following
    in a new script window:
<P>
       tell application "Microsoft Excel"
<PRE>          Activate
          Evaluate "Workbook1!Return_Sub_Error()"
          if not(Evaluate "Workbook1!myerr") = "ok" then
             set myerr to Evaluate ("Workbook1!myerr")
             set myerr to myerr as integer
             display dialog "An error occurred in the macro: " &amp; myerr
          else
             display dialog "No error."
          end if
       end tell

</PRE><P><LI>On the File menu, click Save.

<P><LI>Select a destination folder, type a name for your script in the
    Save Script As box, and then click Save.

<P><LI>Run the script.
<P>
    The script activates Microsoft Excel and displays a message box.

<P><LI>Click Yes.
<P>
    This creates an error condition in the Sub procedure and changes
    the value of the defined name "myerr." Then, an AppleScript
    dialog box appears displaying the message "An error occurred in the
    macro: 1004."

<P><LI>Click OK.
<P>
</OL>NOTE: If you click No in Step 10, the script displays a dialog box with
the message "No error."
<P>
Error Trapping for a Function:
<P>
Since a function can return a value to its caller, passing this information
back to a script is much easier than it is for a Sub procedure.

<OL><P><LI>Activate Microsoft Excel, and open the workbook (Workbook1) that you
   created earlier in this article.

<P><LI>Activate Module1, and type the following code:
<P>
<P><PRE>      Function Return_Function_Error () As Integer
</PRE><P>
<PRE>         On Error GoTo handle:

         x = MsgBox(Prompt:="Click Yes for an error, otherwise click No" _
             , Buttons:=vbYesNo)
         If x = vbYes Then
            Error 1004      ' Generates a run-time error.
         Else
            Return_Function_Error = 0
         End If

         Exit Function

         handle:
            Return_Function_Error = Err

      End Function

</PRE><P><LI>Leave Microsoft Excel open. Start Script Editor, and type the following
   in a new script window:
<P>
<P><PRE>      tell application "Microsoft Excel"
<PRE></PRE>         Activate
         Evaluate "Workbook1!Return_Function_Error()"
         if not (result = 0) then
            set myerr to result as integer
            display dialog "An error occurred in the macro: " &amp; myerr
         else
            display dialog "No error"
         end if

      end tell

</PRE><P><LI>On the File menu, click Save.

<P><LI>Select a destination folder, type a name for your script in the
   Save Script As box, and then click Save.

<P><LI>Run the script.
<P>
   The script activates Microsoft Excel and displays a message box.

<P><LI>Click Yes.
<P>
   This creates an error condition in the function, and the function
   value will be set to the value of the error. Then, an AppleScript
   dialog box displays the message "An error occurred in the macro: 1004."

<P><LI>Click OK.
<P>
</OL>NOTE: If you click No in step 7, the script displays a dialog box with
the message "No error."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: mac vbe vba<BR>
Keywords          : kbcode kbprg xlvbahowto<BR>
Version           : MACINTOSH:5.0,5.0a<BR>
Platform          : MACINTOSH<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

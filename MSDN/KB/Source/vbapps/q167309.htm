

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Sample Procedure to Fill a TreeView Control Recursively </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167309">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1997/04/22">
<META NAME="Keywords" CONTENT="IntpCstm kbprg PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article first explains recursive procedures, and how you can use them in Microsoft Access. Then, it gives an example that demonstrates a method for using a recursive pr...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7O,QAB5,QAGU,QAOE,QAMN,QAB9,QA1S,QAFI,QAGI,QAH6,QAD7,QA7N,QAUJ,QAHE,QDN9 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Sample Procedure to Fill a TreeView Control Recursively</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167309</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article first explains recursive procedures, and how you can use them
in Microsoft Access. Then, it gives an example that demonstrates a method
for using a recursive procedure to fill branches of a TreeView control with
data.
<P>
The TreeView control is available with the Microsoft Office 97 Developer
Edition Tools and the Microsoft Access Developer's Toolkit version 7.0.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The technique of recursion is defined as a procedure that calls itself in
the middle of its routine. Following is a short example of a recursive
function that returns the first file name that matches a user's input. The
function prompts for a path and file name, and then uses the Dir() function
to verify that the file exists. If the Dir() function returns an empty
string (""), the file does not exist and the recursive procedure calls
itself again. The second instance of the procedure prompts for a path and
file name again, tests the input, and passes the results back to the first
instance of the procedure. The following sample function continues to call
itself recursively until a user types a valid path and file name:
<P>
<PRE>   Function FirstFileMatch()
      Dim strFileName as String
      On Error Resume Next
      strFileName = Dir(InputBox("Enter a valid path and file name."))
      If strFileName = "" Then    ' Bad input. No Match.
         FirstFileMatch = FirstFileMatch()   '  Here is the recursive call.
      Else    ' This is the condition that ends this recursive loop.
         FirstFileMatch = strFileName   ' Return value to calling function.
      End If
   End Function

</PRE>The recursive procedure continues to call itself until some condition is
satisfied, in this case until the user's input matches a file name on the
hard drive. Once there is a match, the results are passed back to the
instance of the procedure that called it. Then, that instance of the
procedure passes results back to the previous instance, and so on, until
focus returns to the top level instance of the procedure.
<P>
Recursion is an elegant way to handle data structures, such as linked lists
and binary trees. It simplifies the logic and, in most cases, reduces the
number of programming lines in your code. Recursion is also an ideal method
for handling self-referencing tables. Self-referencing tables contain
records that are linked to other records in the same table. The Employees
table in the sample database Northwind.mdb is an excellent example of a
self-referencing table. The ReportsTo field in the Employees table contains
a number that corresponds to the EmployeeID field of the same table. To
find the supervisor for any employee, check the number in the employee's
ReportsTo field, and then find the employee with that same number in the
EmployeeID field. That supervisor also has a ReportsTo field that may
contain another employee's EmployeeID number. That employee, in turn, may
report to someone else, and so on, until you reach an employee who does not
report to anyone.
<P>
You can use a recursive procedure to display this chain of command in a
TreeView control. As the procedure adds each node (employee) to the
TreeView control, it calls another instance of itself to add child nodes
for all employees who report to that employee. As the procedure adds each
child node, it calls another instance of itself to add nodes for those
employees who report to that employee, and so on, until it reaches the
bottom of the chain. The example below is a recursive procedure that does
just that.
<P>
The AddBranch procedure below accepts five parameters:

<UL><LI>The first parameter, rst as Recordset, is the set of records the
   procedure will use to get its data.
<LI>The second parameter, strPointerField as String, is the name of the
   field that contains another record's PrimaryKey in the same table. In
   the Employees table, this parameter is the ReportsTo field.
<LI>The third parameter, strIDField as String, is the name of the PrimaryKey
   field.
<LI>The forth parameter, strTextField, is the name of the field to display
   in the TreeView control.
<LI>The last parameter, varReportToID As Variant, is optional. The procedure
   uses this parameter to start adding related branches to the existing
   nodes. You do not supply anything for this parameter; when it is blank,
   the procedure begins adding all nodes that have a Null value in the
   strPointerField parameter. As it adds those nodes to the TreeView
   control, the procedure automatically calls itself again and passes the
   varReportToID parameter to add only the related child branches under
   those nodes.
<P>
</UL>The AddBranch procedure is modular enough to use with any self-referencing
table. The procedure's performance is optimized by passing the Recordset
object by reference (ByRef) to each recursive instance, which reduces the
amount of memory the procedure needs to use, and eliminates the need to
open a new recordset with each call to a new instance of the procedure.
<P>
Follow these steps to fill a TreeView control with a hierarchical list of
employees using a recursive procedure. Employees are added to the tree
according to the EmployeeID in the ReportsTo field of the Employees table.
<P>
CAUTION: Following the steps in this example will modify the sample
database Northwind.mdb. You may want to back up the Northwind.mdb file
and perform these steps on a copy of the database.

<OL><P><LI>Open the sample database Northwind.mdb, and create a new form not based
   on any table or query in Design view.

<P><LI>On the Insert menu, click ActiveX Control (or Custom Control in
   version 7.0).

<P><LI>In Microsoft Access 97, select Microsoft TreeView Control, version 5.0
   in the Insert ActiveX Control dialog box, and then click OK.
<P>
   In Microsoft Access 7.0, select TreeView Control in the Insert OLE
   Custom Control dialog box, and then click OK.

<P><LI>Set the following properties for the TreeView control:
<P>
<P><PRE>      TreeView control:
<PRE></PRE>         Name: xTree
         Width: 4"
         Height: 3"

</PRE><P><LI>Double-click the TreeView control to invoke the TreeCtrl Properties
   dialog box. On the General tab, select 6 - tvwTreelinesPlusMinusText in
   the Style box, and then click OK.

<P><LI>On the View menu, click Code, and then type the following procedures:
<P>
<P><PRE>      '=================Load Event for the Form=======================
      'Initiates the routine to fill the TreeView control
      '===============================================================
      Private Sub Form_Load()
      Const strTableQueryName = "Employees"
      Dim db As Database, rst As Recordset
      Set db = CurrentDb
      Set rst = db.OpenRecordset(strTableQueryName, dbOpenDynaset, _
      dbReadOnly)
      AddBranch _
<PRE></PRE>         rst:=rst, _
         strPointerField:="ReportsTo", _
         strIDField:="EmployeeID", _
         strTextField:="LastName"
      End Sub

      '================= AddBranch Sub Procedure =========================
      '      Recursive Procedure to add branches to TreeView Control
      'Requires:
      '   ActiveX Control:  TreeView Control
      '              Name:  xTree
      'Parameters:
      '               rst:  Self-referencing Recordset containing the data
      '   strPointerField:  Name of field pointing to parent's primary key
      '        strIDField:  Name of parent's primary key field
      '      strTextField:  Name of field containing text to be displayed
      '===================================================================
      Sub AddBranch(rst As Recordset, strPointerField As String, _
                    strIDField As String, strTextField As String, _
                    Optional varReportToID As Variant)
      On Error GoTo errAddBranch
      Dim nodCurrent As Node, objTree As TreeView
      Dim strCriteria As String, strText As String, strKey As String
      Dim nodParent As Node, bk As String
      Set objTree = Me!xTree.Object
      If IsMissing(varReportToID) Then  ' Root Branch.
         strCriteria = strPointerField &amp; " Is Null"
      Else  ' Search for records pointing to parent.
         strCriteria = BuildCriteria(strPointerField, _
         rst.Fields(strPointerField).Type, _
         "=" &amp; varReportToID)
         Set nodParent = objTree.Nodes("a" &amp; varReportToID)
      End If
      ' Find the first emp to report to the boss node.
      rst.FindFirst strCriteria
      Do Until rst.NoMatch
         ' Create a string with LastName.
         strText = rst(strTextField)
         strKey = "a" &amp; rst(strIDField)
         If Not IsMissing(varReportToID) Then  'add new node to the parent
            Set nodCurrent = objTree.Nodes.Add(nodParent, _
            tvwChild, strKey, strText)
         Else    ' Add new node to the root.
            Set nodCurrent = objTree.Nodes.Add(, , strKey, _
            strText)
         End If
         ' Save your place in the recordset so we can pass by ref for
         ' speed.
         bk = rst.Bookmark
         ' Add employees who report to this node.
         AddBranch rst, strPointerField, strIDField, strTextField, _
         rst(strIDField)
         rst.Bookmark = bk     ' Return to last place and continue search.
         rst.FindNext strCriteria   ' Find next employee.
      Loop
      exitAddBranch:
      Exit Sub
      '--------------------------Error Trapping --------------------------
      errAddBranch:
      MsgBox "Can't add child:  " &amp; Err.Description, vbCritical, _
      "AddBranch Error:"
      Resume exitAddBranch
      End Sub

</PRE><P><LI>Save the form as frmEmployeeTree.

<P><LI>In Microsoft Access 97, click "Compile and Save All Modules" on the
   Debug menu.
<P>
   In Microsoft Access 7.0, click "Compile All Modules" on the Run menu.
   Then on the File menu, click "Save All Modules."

<P><LI>Switch the form to Form view. Double-click one or more names in the
   TreeView control to expand and collapse the branches in the employee
   hierarchy.
<P>
</OL><h3>Comments About the Code</h3>
 
<P>
The AddBranch procedure is a modular routine that you can use in your
database without any modifications. However, you must modify the procedure
in the OnLoad event of the form to customize it for your database:

<UL><LI>Change the constant strTableQueryName to the name of your own
   self-referencing table or query.
<LI>Change the strPointerField, strIDField, and strTextField parameters you
   pass to the AddBranch procedure to the names of fields in your table or
   query according to the following summary:
<P>
<P><PRE>      strPointerField:="&lt;Field name that points to a parent record&gt;"
      strIDField:="&lt;Name of the PrimaryKey Field&gt;"
      strTextField:="&lt;Field name whose data you want to display&gt;"
</PRE><P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about using the TreeView control, search the Help
Index for "TreeView control."
<P>
For more information about recursive procedures, please see the following
articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q132242.htm">Q132242</A></B>
   TITLE     : ACC2: Sample Function Using Recursion to Display Data Tree

   ARTICLE-ID: <B><A HREF="../vbapps/Q165993.htm">Q165993</A></B>
   TITLE     : ACC97: Example Using TreeView Control Drag-and-Drop
               Capabilities
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Recursion Directory Tree<BR>
Keywords          : IntpCstm kbprg PgmHowTo<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

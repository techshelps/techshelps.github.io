

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Passing Variables in Visual Basic for Applications Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140033">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1995/11/21">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you use a Microsoft Visual Basic for Applications macro or procedure,  you can retain the value of a variable by doing any of the following:   - Pass the variable to another workbook. (This way you can retain the    value of the variable, even...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAH4,QA01,QAH7,QAH6,QAD7,QAFF,QAKD,QBVP,QAJQ,QA4Q,QBS0,QDNM,QBXS,QAR2 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Passing Variables in Visual Basic for Applications Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140033</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for the Macintosh, version 5.0, 5.0a
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use a Microsoft Visual Basic for Applications macro or procedure, 
you can retain the value of a variable by doing any of the following:

<UL><LI>Pass the variable to another workbook. (This way you can retain the
   value of the variable, even if the original workbook is closed.)

<LI>Pass the variable as an argument within the same workbook. (You can do
   this without making the variable public.)

<LI>Define the variable as a public variable.
<P>
</UL>Each of these methods is discussed in more detail in the "More Information"
section of this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>To Pass a Variable to Another Workbook</h3>
 

<OL><P><LI>Type this code in a module sheet and save the workbook as Book1.xls:
<P>
<PRE>      Sub PassVarValues()

         ' Declare variables.
         Dim PassVar1 as Integer
         Dim PassVar2 as Integer

         ' Set the variable PassVar1 to equal 1234.
         PassVar1 = 1234

         ' Set the variable PassVar2 to equal 5678.
         PassVar2 = 5678

         ' Run the macro Receiver and pass the variables to the subroutine.
         ' On a Macintosh computer, you may need to omit the .xls file
         ' extension.
         Application.Run "Book2.xls!Receiver", PassVar1, PassVar2

      End Sub

</PRE><P><LI>Open a new workbook and type this code in a module sheet:
<P>
<PRE>      Sub Receiver(PassVar1 As Integer, PassVar2 As Integer)

         ' Declare variable.
         Dim Result1 as Integer

         ' Manipulate the variables.
         Result1 = PassVar1 + PassVar2

         ' Displays the value of the variable PassVar1 in a message box.
         MsgBox PassVar1

         ' Displays the value of the variable PassVar2 in a message box.
         MsgBox PassVar2

         ' Displays the value of the variable Result1 in a message box.
         MsgBox Result1

      End Sub

</PRE><P><LI>Save this workbook as Book2.xls.

<P><LI>To close Book1.xls and retain the values passed to Book2.xls, make the
   following changes:
<P>
   a. In Book1.xls, modify the PassVarValues macro to read as follows:
<P>
<PRE>         Sub PassVarValues()
   
            ' Declare variables.
            Dim PassVar1 as Integer
            Dim PassVar2 as Integer

            ' Set the variable PassVar1 to equal 1234.
            PassVar1 = 1234

            ' Set the variable PassVar2 to equal 5678.
            PassVar2 = 5678

            ' Run the macro Receiver and pass the variables to the 
            ' subroutine. 
            ' On a Macintosh computer, you may need to omit the .xls file 
            ' extension.
            Application.Run "Book2.xls!Receiver", PassVar1, PassVar2

            ' The following line is new:
            ActiveWorkbook.Close    ' Closes the workbook Book1.xls.

         End Sub

   b. In Book2.xls, modify the Receiver macro to read as follows:

         ' Set the passed variables to Public so MacroDisp macro can
         ' display the values passed to Receiver
         Public NewVar1, NewVar2, Result2

         Sub Receiver(PassVar1 As Integer, PassVar2 As Integer)

            ' Declare variable.
            Dim Result1 as Integer

            ' The following 2 code lines are new:

            ' Set NewVar1 equal to PassVar1, so we can retain the passed
            ' variable value.
            NewVar1 = PassVar1

            ' Set NewVar2 equal to PassVar2, so we can retain the passed
            ' variable value.
            NewVar2 = PassVar2

            ' The variables in the following four code lines have been 
            ' changed:

            ' Manipulate the variables.
            Result2 = NewVar1 + NewVar2

            ' Displays the value of the variable NewVar1 in a message box.
            MsgBox NewVar1

            ' Displays the value of the variable NewVar2 in a message box.
            MsgBox NewVar2

            ' Displays the value of the variable Result2 in a message box.
            MsgBox Result2

         End Sub

</PRE><P><LI>In Book2.xls, add the following macro to the module sheet:
<P>
<PRE>      Sub MacroDisp()

         ' Displays the value of variable NewVar1 in a message box.
         MsgBox NewVar1

         ' Displays the value of variable NewVar2 in a message box.
         MsgBox NewVar2

         ' Displays the value of variable Result2 in a message box.
         MsgBox Result2

      End Sub

</PRE><P><LI>On the Tools menu, click Macro, and run the PassVarValues macro.
<P>
   When you run the MacroDisp macro, the variables previously passed to the
   Receiver macro will be displayed by MacroDisp. This behavior occurs 
   because the variables are being retained by the public variables.
<P>
</OL><h3>To Pass the Variable as an Argument Within the Same Workbook</h3>
 
<P>
This example shows variable PassVar1 being passed to another module without
declaring it as Public. In this example it will be passed to a macro called
RecVar2 on Module2 macro sheet.

<OL><P><LI>Type this code on a module sheet named Module1 in a new workbook.
<P>
<PRE>      Sub PassVar2()

         ' Declare variable.
         Dim PassVar1 as Integer

         ' Set the variable PassVar1 to equal 14.
         PassVar1 = 14

         ' Run the macro RecVar2 in Module2 and pass it the variable
         ' PassVar1.
         Module2.RecVar2(PassVar1)

      End Sub

</PRE><P><LI>Type this code on a module sheet named Module2 in the same workbook
   where the code above resides, and then save the workbook as Book4.xls.
<P>
<PRE>      Sub RecVar2(PassVar1)

         ' Display the value of variable PassVar1 in a message box.
         MsgBox PassVar1

      End Sub

</PRE></OL><h3>To Define the Variable as a Public Variable</h3>
 
<P>
This example shows how PublicVar1 declared as Public can be accessed
without actually passing it into the macro RecVar in Module2. In this
example, a call to the macro RecVar in the Module2 macro sheet is made and 
the value of PublicVar1 is displayed.

<OL><P><LI>Type this code on a module sheet named Module1 in a new workbook:
<P>
<P><PRE>      ' Set the variable PublicVar1 public, so module2 will have access to 
      ' it.
      Public PublicVar1
</PRE><P>
<PRE>      Sub PublicVar()

         ' Set the variable PublicVar1 to equal 12.
         PublicVar1 = 12

         ' Run the macro RecVar on Module2 macro sheet.
         Module2.RecVar

      End Sub

</PRE><P><LI>Type this code on a module sheet named Module2 in the same workbook
   where the code above resides, then save the workbook as Book3.xls
<P>
<PRE>      Sub RecVar()

         ' Display the value of variable PublicVar1 in a message box
         MsgBox PublicVar1

      End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00<BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS: 5.0, 5.0c, 7.0, 97; MACINTOSH: 5.0, 5.0a, 98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

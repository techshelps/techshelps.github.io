

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: VB3: Navigate Excel Objects from Visual Basic 3.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112194">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/03/02">
<META NAME="Keywords" CONTENT="IAPOLE vbwin GnrlVb kbprg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article explains three methods you can use to navigate and access Excel Application objects:  1. Using longhand and default properties.  2. Using aliasing.  3. Using the Parent and Application methods of Excel version 5.0 objects    to access ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBVP,QBS0,QBQU,QDO5,QAPF,QBXS,QAJH V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: VB3: Navigate Excel Objects from Visual Basic 3.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112194</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:
<P>
- Standard and Professional Editions of Microsoft Visual Basic for
<PRE>  Windows, version 3.0
</PRE>- Microsoft Excel for Windows, version 5.0
 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article explains three methods you can use to navigate and access
Excel Application objects:

<OL><P><LI>Using longhand and default properties.

<P><LI>Using aliasing.

<P><LI>Using the Parent and Application methods of Excel version 5.0 objects
   to access any Excel object.
<P>
</OL><h2>MORE INFORMATION</h2>
 
<P>
Each object in Microsoft Excel version 5.0 exists somewhere in the
application's hierarchy of objects. You choose among these objects by
navigating down that application's hierarchy. At the top of this hierarchy
is the Application object. Whatever events or actions you assign to the
Application object affect the entire application. For example:
<P>
<PRE>   ' Close the application
   [Object].Application.Quit

</PRE></OL>Replace [Object] with any variable that points to any valid Excel
Application Object, which can be created from the following example:
<P>
<PRE>   ' MyObject represents [Object] and OLE1 represents an OLE control
   ' that contains an Excel Worksheet object.
   MyObject = OLE1.Object
   Set MyObject = CreateObject("Excel.Sheet")
   Set MyObject = GetObject("C:\EXCEL\EXAMPLES\SAMPLES.XLS")

</PRE>The Application object contains other large objects. For example, you can
use the following code to refer to the collection of Workbooks currently
loaded in Excel:
<P>
<PRE>   [Object].Application.Workbooks

</PRE>If you want to retrieve a single workbook from the collection, use the Item
method. For example, to refer to the first workbook:
<P>
<PRE>    [Object].Application.Workbooks.Item(1)

</PRE>To close the first workbook:
<P>
<PRE>   [Object].Application.Workbooks.Item(1).[Close]

</PRE><h3>Accessing Objects Using Longhand Reference or Default Properties</h3>
 
<P>
Each workbook contains a collection of worksheets, each worksheet contains
a collection of cells, and so on. (See the Excel documentation and Help
menu for specific details about Excel's object hierarchy.) In code,
referring to a specific cell could look like this:
<P>
<PRE>   ' Following refers to cell A1 on Sheet1 in the first workbook.
   ' Enter the following two lines as one, single line:
   [Object].Application.Workbooks.Item(1).
      WorkSheets.Item("Sheet1").Cells.Item(1,1)

</PRE>This reference can be lengthy and complex; however shortcuts are available.
Understanding the navigation operator (.) is fundamental to successful
object programming.
<P>
Short Cuts:
<P>
All objects have a default property and method. For collections the default
method is the Item method. For most objects the Name property is the
default property. This convention was implemented to simplify programming.
For example the previous sample can be simplified to:
<P>
<PRE>   [Object].Application.Workbooks(1).WorkSheets("Sheet1").Cells(1,1)

</PRE><h3>Accessing Objects by Aliasing Objects</h3>
 
<P>
You can use aliasing to simplify object programming. If you were to write a
lot of code that was manipulating Sheet1, for example, the syntax could
become lengthy. To prevent this, create an object that points to the lowest
common object. This is known as aliasing. Use the Set statement to create
an alias.
<P>
<PRE>   Dim Sheet1 as Object
   ' Alias Sheet1 to represent [Object]...WorkSheets("Sheet1")
   Set Sheet1 = [Object].Application.Workbooks(1).WorkSheets("Sheet1")
   ' Now just use the variable Sheet1 to refer to Sheet1.
   Sheet1.Cells(1,1).Value = "Title"
   Sheet1.Cells(1,2).Value = "ID"
   Sheet1.Cells(1,3).Value = "Cost"
   Sheet1.Cells(2,1).Value = "Phone"
   Sheet1.Cells(2,2).Value = 123413423
   Sheet1.Cells(2,3).Value = 89.95

</PRE><h3>Accessing Objects by Using Parent and Application Methods</h3>
 
<P>
The Parent and Application methods allow you to navigate back up the object
hierarchy. The Application method navigates back to the application object,
and the Parent method navigates up one level of the object hierarchy. All
the examples in this article started with [Object]. As long as [Object] is
a valid Excel object, all of those statements are also valid, regardless of
the context of [Object].
<P>
This is very helpful when programming the Excel object from Visual Basic
version 3.0. Excel exposes only the three objects that can be used as entry
points to Excel. These are:

<OL><P><LI>Excel.Application.

<P><LI>Excel.Sheet.

<P><LI>Excel.Chart.
<P>
</OL>Don't be confused by Excel.Application.5. Excel.Application will always
point to the latest version of Excel. Excel.Application.5 will point only
to Excel version 5.0.
<P>
There is no exposed Workbook object, so there's no way to access the
Workbook object directly. However, this is not a problem because the Parent
method of a Worksheet or Chart object returns the Workbook object. The
following example code illustrates this point.
<P>
NOTE: oleExcel is an OLE control that contains an Excel.Sheet object.
<P>
<PRE>   ' Declare object references:
   Dim Xlapp As object
   Dim XLWkb As object
   Dim XLWks As object
   Dim XLWksNew As object

   oleExcel.Action = 7   ' Activate OLE Object

   Set XLWks = oleExcel.Object   ' Alias Worksheet object
   Set XLWkb = XLWks.Parent      ' Alias WorkBook object
   Set Xlapp = XLWks.Application ' Alias Application object

   ' Add a new worksheet to the Workbook and name it:
   Set XLWksNew = XLWkb.Worksheets.add  ' Assign alias to new Worksheet
   XLWksNew.Name = "VB3 OLE Automation" &amp; XLWkb.Worksheets.count

   ' Make the 3rd Worksheet of the Workbook active:
   XLWkb.Worksheets(3).Activate

   ' Display the dialog for InsertPicture:
   Xlapp.dialogs(342).[Show]  ' xlDialogInsertPicture = 342

</PRE></OL><h2>REFERENCES</h2>
 

<UL><LI>Office Development Kit, Programming Integrated Solutions
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: officeinterop w_VBApp W_Excel WM_OLE OA OLE<BR>
Automation<BR>
Keywords          : IAPOLE vbwin GnrlVb kbprg kbfasttip<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:3.00<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

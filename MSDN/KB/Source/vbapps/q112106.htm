

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Use DAO to Assign or View Permissions </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112106">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1994/03/01">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo MdlDao ScrtPerm">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  In Microsoft Access version 7.0 for Windows 95 and Microsoft Access version 2.0, programmers can assign permissions to database objects programmatically using data access ob...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBXS,QAW6,QABO,QAGU,QBWG,QAZV,QAK7,QAY5,QAGI,QA1S,QBV8,QAPF,QDN9,QAB9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Use DAO to Assign or View Permissions</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112106</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 2.0, 7.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
In Microsoft Access version 7.0 for Windows 95 and Microsoft Access
version 2.0, programmers can assign permissions to database objects
programmatically using data access objects (DAO). Securing a database
involves several steps, including:

<OL><P><LI>Creating group accounts.

<P><LI>Creating user accounts.

<P><LI>Assigning users to groups.

<P><LI>Assigning permissions on database objects to users and groups.

<P><LI>Encrypting the database, if desired.
<P>
</OL>This article demonstrates the fourth step, assigning permissions on
database objects to users and groups.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications" manual.
<P>
NOTE: Visual Basic for Applications (used in Microsoft Access version 7.0
for Windows 95) is called Access Basic in version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To assign permissions for an object, you must reference the UserName and
Permissions properties of the object's document. All database objects can
be treated as documents in a container. For example, given the DB variable
assignment
<P>
<PRE>   Dim DB As Database
   Set DB = DBEngine.Workspaces(0).Databases(0)

</PRE></OL>a table called Table1 can be referred to using DAO as follows:
<P>
<PRE>   DB.Containers("Tables").Documents("Table1")

</PRE>However, it is usually easier to assign and work with object variables as
follows:
<P>
<PRE>   Dim DB as Database, DOC as Document
   Set DB = DBEngine.Workspaces(0).Databases(0)
   Set DOC = DB.Containers("Tables").Documents("Table1")

</PRE>You can directly reference the UserName and Permissions properties
of the Table1 document like this:
<P>
<PRE>   UserNameVariable = DOC.UserName
   PermissionsVariable = DOC.Permissions

   -or-

   DOC.UserName = "MyUser"
   DOC.Permissions = DB_SEC_FULLACCESS

</PRE><h3>Reading Permissions Information</h3>
 
<P>
To read the permissions that a given user has on an object, set
the UserName property of the document to the name of the user or group
you want to inquire on, and then read the value of the Permissions
property.
<P>
The following example shows how to read the permissions for the user John
on form MyMainForm:
<P>
<PRE>   Dim DB as Database, DOC as Document, HisPermissions as Long
   Set DB = DBEngine.Workspaces(0).Databases(0)
   Set DOC = DB.Containers("Forms").Documents("MyMainForm")
   DOC.UserName = "John"
   HisPermissions = DOC.Permissions

</PRE>This example shows how to read the permissions for the group Supervisors on
the report SalarySummary:
<P>
<PRE>   Dim DB as Database, DOC as Document, GroupPermissions as Long
   Set DB = DBEngine.Workspaces(0).Databases(0)
   Set DOC = DB.Containers("Reports").Documents("SalarySummary")
   DOC.UserName = "Supervisors"
   GroupPermissions = DOC.Permissions

</PRE>Note that whether you are inquiring on a group or a user, you still set the
UserName property. There is no GroupName property for a document.
<P>
<P><h3>Assigning Permissions Information</h3>
 
<P>
To assign permissions for a user on an object, set the UserName property
of the document to the name of the user or group, and then set the
Permissions property of the document to the appropriate value.
<P>
Generally, you should use the predefined constants when you are assigning
permissions. For a complete list of the predefined constants, search for
"Constants, Intrinsic," and then "Security Constants" using the Microsoft
Access Help menu.
<P>
The following example shows how to assign Full permissions for the user
Martha on the table Employees:
<P>
<PRE>   Dim DB as Database, DOC as Document
   Set DB = DBEngine.Workspaces(0).Databases(0)
   Set DOC = DB.Containers("Tables").Documents("Employees")
   DOC.UserName = "Martha"
   DOC.Permissions = DB_SEC_FULLACCESS

</PRE>The next example shows how to assign Open/Run and Modify Design permissions
for the group Developers on the form Customers:
<P>
<PRE>   Dim DB as Database, DOC as Document
   Set DB = DBEngine.Workspaces(0).Databases(0)
   Set DOC = DB.Containers("Forms").Documents("Customers")
   DOC.UserName = "Developers"
   DOC.Permissions = DB_SEC_FRMRPT_EXECUTE+DB_SEC_FRMRPT_WRITEDEF

</PRE><h3>Methods to Programmatically View and Assign Permissions</h3>
 
<P>
Method 1:
<P>
This method uses a sample subroutine called AssignPerms to update all the
objects in a database. To assign permissions for a user on all the objects
in a database, you can move through all the documents in all the
collections in the database. The following sample subroutine demonstrates
one way of moving through all the documents in a database and changing the
permissions on them:
<P>
<PRE>   Sub AssignPerms (GrpUsrName as String, NewPerm as Long)
      Dim DB as Database, I as Integer, J as Integer
      Set DB = DBEngine.Workspaces(0).Databases(0)

      For I = 0 to DB.Containers.Count - 1
         For J = 0 to DB.Containers(I).Documents.Count - 1
            DB.Containers(I).Documents(J).UserName = GrpUsrName
            DB.Containers(I).Documents(J).Permissions = NewPerm
         Next J
      Next I

  End Sub

</PRE>You can call this subroutine from within code, passing the group or user
name and the Permissions value you want to assign.
<P>
For example, to revoke all permissions on all objects from the Guests
group, call AssignPerms as follows:
<P>
<PRE>   AssignPerms "Guests", DB_SEC_NOACCESS

</PRE>To assign full permissions on all objects to the Managers account,
call AssignPerms as follows:
<P>
<PRE>   AssignPerms "Managers", DB_SEC_FULLACCESS

</PRE>Method 2:
<P>
This method uses two sample functions, GetPermissions() and
SetPermissions(), to display and assign the permissions for a user or
group on the database object you specify.
<P>
To create the sample functions, follow these steps:

<OL><P><LI>Type the following text in the Declarations section of a module:
<P>
   Option Compare Database
   Option Explicit
   Global Const SUCCESS_SUCCESS = 0

<P><LI>Type the following code in the module:
<P>
<PRE>   ' ****************************************
   ' FUNCTION: GetPermissions()
   '
   ' Inputs:  UserGrpName - name of a user or group account
   '          ObjClass    - name of an object container
   '          ObjName     - name of an object document
   '
   ' Returns: Value of Permissions property or error number
   '          that was generated.
   ' ****************************************
   Function GetPermissions&amp; (UserGrpName$, ObjClass$, ObjName$)

      On Error GoTo Err_GetPermissions

      ' Set DB to the current database, and set the DOC variable
      ' .. to the object specified in the arguments.
      Dim DB As Database, DOC As Document
      Set DB = DBEngine.Workspaces(0).Databases(0)
      Set DOC = DB.Containers(ObjClass).Documents(ObjName)

      ' Set the UserName property of the document to the
      ' .. user or group you want to obtain the permissions for.
      DOC.UserName = UserGrpName

      ' Get the permissions value.
      GetPermissions = DOC.Permissions

   Bye_GetPermissions:
      Exit Function

   Err_GetPermissions:
      ' If an error occurs, display the message and terminate the
      ' .. function, returning the error number.
      MsgBox Err &amp; " " &amp; Error$
      GetPermissions = Err
      Resume Bye_GetPermissions

   End Function

   ' ****************************************
   ' FUNCTION: SetPermissions()
   '
   ' Inputs:  UserGrpName - name of a user or group account
   '          ObjClass    - name of an object container
   '          ObjName     - name of an object document
   '          NewPerm     - new Permissions value
   '
   ' NewPerm will typically be set by adding together the constants
   ' predefined for the security options. For a list of the
   ' constants search Help on "Permissions Property."
   '
   ' Returns: SUCCESS_SUCCESS or the error number that was generated.
   ' ****************************************
   Function SetPermissions&amp; (UserGrpName$, ObjClass$, ObjName$,_
      NewPerm&amp;)

      On Error Goto Err_SetPermissions

      ' Set DB to the current database, and set the DOC variable
      ' to the object specified in the arguments.
      Dim DB As Database, DOC As Document
      Set DB = DBEngine.Workspaces(0).Databases(0)
      Set DOC = DB.Containers(ObjClass).Documents(ObjName)

      ' Set the UserName property of the document to the
      ' .. user or group you want to assign the permissions for.
      DOC.UserName = UserGrpName

      ' Set the permissions property to the value passed as
      ' .. an argument to the function.
      DOC.Permissions = NewPerm

      SetPermissions = SUCCESS_SUCCESS

   Bye_SetPermissions:
      Exit Function

   Err_SetPermissions:
      ' If an error occurs, display the message and terminate the
      ' .. function, returning the error number.
      MsgBox Err &amp; " " &amp; Error$
      SetPermissions = Err
      Resume Bye_SetPermissions

   End Function

</PRE></OL>These functions can be called anywhere you can use an expression in
Microsoft Access, including from within code, in the Field, Criteria, or
Update To row of a query, or the ControlSource property of a form or report
control.
<P>
The following example shows how to call the GetPermissions() function from
another function:
<P>
<PRE>   Dim ObjProp as Long
   ObjProp = GetPermissions("User1","Tables","Table1")

</PRE>This function call returns the permissions value for User1 on the table
object Table1.
<P>
The next example shows how to call the GetPermissions() function from the
ControlSource property of a control on a form or report with controls that
contain the user name, object class, and object name that you want to list
the permissions for:
<P>
<PRE>   ControlName: ObjProp
   ControlSource: =GetPermissions(Me!UsrName, Me!ObjClass, Me!ObjName)

</PRE>To assign full permissions for the Admins group to a table called
MyTable, you can call the SetPermissions() function as follows:
<P>
<PRE>   Dim RETVAL as Long
   RETVAL = SetPermissions("Admins","Tables","MyTable", DB_SEC_FULLACCESS)

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about using DAO to create group and user accounts,
and about how to assign users to group accounts, please see the following
articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q124240.htm">Q124240</A></B>
   TITLE     : ACC2: Only Admins Group Members Can List Groups They
               Belong To

   ARTICLE-ID: <B><A HREF="../vbapps/Q112063.htm">Q112063</A></B>
   TITLE     : ACC: How to Add a User to a Group with CreateUser Method
</PRE> 
<PRE>Keywords          : kbprg PgmHowTo MdlDao ScrtPerm
Version           : 2.0 7.0
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

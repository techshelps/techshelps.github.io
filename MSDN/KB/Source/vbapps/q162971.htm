

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Public Variables Are Not Seen on Modules for Sheet or UserForm </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162971">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/01/31">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  If you declare a public variable on a Visual Basic for Applications code module that is associated with an object, such as a UserForm or a Worksheet object, only the procedures in the code module in which you declare the variable can access the val...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAYL,QA01,QBS0,QBVP,QAKD,QBWS,QAPN,QA0K,QBVV,QAW6,QASR,QBJZ,QAKE P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Public Variables Are Not Seen on Modules for Sheet or UserForm</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162971</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If you declare a public variable on a Visual Basic for Applications code
module that is associated with an object, such as a UserForm or a Worksheet
object, only the procedures in the code module in which you declare the
variable can access the value the variable stores.
<P>
<P><h2>CAUSE</h2>
 
<P>
A variable that you declare with the Public statement in code modules that
are associated with an object, such as a UserForm and Worksheet object, is
available only to the module in which you declare it.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
If you want to access a public variable in all procedures in all modules of
a project, declare the variable on a general module. To insert a general
module in a project, click Module on the Insert menu.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design of Microsoft Excel 97.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
The following examples demonstrate the difference between declaring a
public variable in a general module and declaring a public variable in a
code module that is associated with an object.
<P>
<P><h3>Declaring a Public Variable in a Code Module Associated with an Object</h3>
 
<P>
The following example declares a public variable in a code module that is
associated with an object:

<OL><P><LI>Save and close any open workbooks, and then create a new workbook.

<P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>In the Project Explorer window, double-click Sheet1.
<P>
    This step displays the code module associated with Sheet1.

<P><LI>Type the following code in this module:
<P>
       Public gMyVar As Integer
<P>
       Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)
<P>
<PRE>          gMyVar = gMyVar + 1
          MsgBox gMyVar

       End Sub

</PRE><P><LI>On the Insert menu, click Module.
<P>
    This step inserts a general module into your project.

<P><LI>Type the following code in this module:
<P>
<PRE>        Sub General_Module()

           gMyVar = gMyVar + 1
           MsgBox gMyVar

        End Sub

</PRE><P><LI>Press ALT+F11 to switch to Microsoft Excel, and then click Sheet1.

<P><LI>Click any cell other than the current cell in Sheet1.
<P>
    A message box appears with the current value of the variable "gMyVar."

<P><LI>Click OK to dismiss the message box.

<P><LI>Repeat steps 8 and 9 several times until the value that is displayed in
    the message box is incremented to 5.

<P><LI>Run the General_Module macro.
<P>
    A message box that displays the value 1 appears. This is the value
    of gMyVar in the general module. The value is 1 because the
    General_Module macro can not access the public variable gMyVar that you
    declared in the code module associated with Sheet1.

<P><LI>Select a different cell in Sheet1.
<P>
    A message box that displays the current value of gMyVar from the code
    module associated with Sheet1 appears.
<P>
</OL><h3>Declaring a Public Variable in the General Module</h3>
 
<P>
The following example declares a public variable in the general module:

<OL><P><LI>Start the Visual Basic Editor.

<P><LI>Cut the following line
<P>
<P><PRE>      Public gMyVar As Integer
</PRE><P>
   from the module associated with Sheet1 and paste it into the general
   declarations section of the general module.

<P><LI>Switch to Microsoft Excel and click any cell other than the current
   cell in Sheet1.
<P>
   A message box that displays the current value of the variable gMyVar
   appears.

<P><LI>Click OK to dismiss the message box.

<P><LI>Repeat steps 3 and 4 several times until the value that is displayed in
   the message box is incremented to 5.

<P><LI>Run the General_Module macro.
<P>
   A message box that displays a value that is one more than the value
   that appears in step 5 appears. Because the variable gMyVar is a public
   variable that is declared on a general module, any module in the project
   can access its value.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the scope of variables, click the Office
Assistant in the Visual Basic Editor, type "scope," click Search, and then
click to view "Understanding Scope and Visibility."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Visual Basic for Applications Help is not installed on
your computer, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office
               Program or Component

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 XL97<BR>
Keywords          : kbprg<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

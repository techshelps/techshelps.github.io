

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Definition of DoEvents in Visual Basic for Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118468">
<META NAME="KBModify" CONTENT="1998/02/20">
<META NAME="KBCreate" CONTENT="1994/07/19">
<META NAME="Keywords" CONTENT="kbcode kbprg kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The DoEvents function surrenders execution of the macro so that the operating system can process other events. The DoEvents function passes control from the application to the operating system. Some instances in which DoEvents may be useful include...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDIR,QBVP,QBS0,QAH4,QAGI,QAB5,QAJH,QA7O,QAY5,QAOE,QAMN,QABI,QAB9,QAIH,QBVV P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Definition of DoEvents in Visual Basic for Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 20, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118468</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Programming System, Applications Edition,
   version 1.0
<LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The DoEvents function surrenders execution of the macro so that the
operating system can process other events. The DoEvents function passes
control from the application to the operating system. Some instances in
which DoEvents may be useful include the following:

<UL><LI>Hardware I/O
<LI>Delay Loops
<LI>Operating System Calls
<LI>DDE Deadlocking
<P>
</UL>This article also discusses potential problems associated with the DoEvents
function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Hardware I/O</h3>
 
<P>
If your code waits for an input from any I/O device, the DoEvents function
speeds up the application by multitasking. As a result, the computer does
not seems to pause or stop responding (hang) while the code is executing.
<P>
Example:
<P>
<PRE>   Open "com1" For Input As #1
   Input #1, x
   Do Until x = Chr(13)
   DoEvents
   '...
   '...
   Input #1, x
   Loop

</PRE><h3>Delay Loops</h3>
 
<P>
In a delay loop, the DoEvents function can allow the CPU operating system
to continue with any pending jobs.
<P>
Example:
<P>
<PRE>   X = Timer()
   Do While X + 10 &gt; Timer()
       DoEvents
   Loop

</PRE><h3>Operating System Calls</h3>
 
<P>
When Visual Basic calls the operating system, the operating system may
return the control even before processing the command completely. Doing so
may prevent any macro code that depends on an object generated by the call
from running. In the example below, the Shell function starts the Microsoft
Word application. If Word is not yet open, any effort to establish a DDE
link to it will halt the code. By using DoEvents, your procedure makes sure
that an operation, such as Shell, is completely executed before the next
macro statement is processed.
<P>
Example:
<P>
<PRE>   z% = Shell("WinWord Source.Doc",1)
   DoEvents
   ...
   ...

</PRE><h3>DDE Deadlocking</h3>
 
<P>
Consider a situation in which a Visual Basic macro calls an application
that is waiting for a second application to get some data. If the macro
does not give control to the second application, the result is a deadlock.
In DDE conversations between multiple applications, using DoEvents removes
the possibility of this type of deadlocking.
<P>
<P><h3>Problems Associated with DoEvents</h3>
 

<UL><LI>Using too many nested DoEvents statements may deplete the stack space
   and therefore generate an "Out of Stack Space" error message. This error
   is referring to the application stack space allocated to the Microsoft
   Excel application.

<LI>Make sure the procedure that has given up control with DoEvents is not
   executed again from a different part of your code before the first
   DoEvents call returns; this can cause unpredictable results.

<LI>Once DoEvents relinquishes control to the operating system, it is not
   possible to determine when Microsoft Excel will resume the control.
   After the operating system obtains control of the processor, it will
   process all pending events that are currently in the message queue (such
   as mouse clicks and keystrokes). This may be unsuitable for some real-
   time data acquisition applications.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about DoEvents, click the Search button in Help
and type:
<P>
<PRE>   doevents
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Sendkeys keystroke Wait XL98 XL97 XL7 XL5<BR>
Keywords          : kbcode kbprg kbusage<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 20, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

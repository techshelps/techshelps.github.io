

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: OLE Automation, Can't Use Named Arguments in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112813">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/03/22">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you use a Microsoft Visual Basic application, you cannot call a Microsoft Excel OLE automation object using named arguments. Instead, you must use arguments in their correct order, using commas as place holders even for omitted arguments.  NOT...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAPN,QAKJ,QAHE,QA9N,QA5F,QAMA,QA5B,QAUJ,QABB,QABA,QDO5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: OLE Automation, Can't Use Named Arguments in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112813</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use a Microsoft Visual Basic application, you cannot call a
Microsoft Excel OLE automation object using named arguments. Instead, you
must use arguments in their correct order, using commas as place holders
even for omitted arguments.
<P>
NOTE: You can used Named arguments if you are using Microsoft Visual Basic
version 4.0 and Microsoft Excel 97.
<P>
In Microsoft Excel Visual Basic for Applications, names are defined for
the arguments to their properties and methods. These names allow you to
list arguments in any order or omit preceding arguments.
<P>
The following is an instruction in Microsoft Excel Visual Basic for
Applications that pastes the entire contents of the clipboard on a
worksheet, into the current selection, skipping any blank cells that were
copied:
<P>
<PRE>   ' Using Named arguments
   Selection.PasteSpecial Paste:=xlAll, SkipBlanks:=True

</PRE>To use the same instruction in the Visual Basic Standard or
Professional Edition, use the following syntax
<P>
<PRE>   ' Using arguments in correct order, commas as place holders
   xl.Selection.PasteSpecial xlall, , True

</PRE>where xl is an object variable that refers to Microsoft Excel (the
complete Visual Basic Standard or Professional Edition code is
included below). The extra comma after the xlall value is a
place holder for the Operation argument.
<P>
NOTE: In Microsoft Excel, there are many symbolic constants defined
that are used for application-specific settings. These constants all
begin with the letters "xl", without quotes. For example, xlall in the
above example is used to paste all the contents of the clipboard with the
Paste.Special command.
<P>
These Microsoft Excel constants are available automatically in Microsoft
Excel Visual Basic for Applications. For the Standard or Professional
Editions of Visual Basic, you must either add the Microsoft Excel
constants file XLCONST.BAS to your project to use the constant by name as
in the above example, or you must use the numeric value of the constant.
The Microsoft Excel constants file includes the name of each constant
along with the value of that constant.
<P>
This constants file is included with the "Built-in Constants in Microsoft
Visual Basic for Applications" (WC0993) Application Note.
<P>
For more information about obtaining this application note, query on
the following words in the Microsoft Knowledge Base:
<P>
<PRE>   xlconst.bas and application and note

</PRE>To see a list of the Microsoft Excel constants, do the following:

<OL><P><LI>Insert or select a module sheet.

<P><LI>On the View menu, click Object Browser.

<P><LI>In the Libraries/Workbooks list, select Excel.

<P><LI>In the Objects/Modules list, select Constants.
<P>
</OL>The Methods/Properties list contains the Microsoft Excel constants.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures
for illustration only, without warranty either expressed or implied,
including, but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. The Visual Basic procedures in
this article are provided 'as is' and Microsoft does not guarantee that
they can be used in all situations. While Microsoft support engineers can
help explain the functionality of a particular macro, they will not modify
these examples to provide added functionality, nor will they help you
construct macros to meet your specific needs. If you have limited
programming experience, you may want to consult one of the Microsoft
Solution Providers. Solution Providers offer a wide range of fee-based
services, including creating custom macros. For more information about
Microsoft Solution Providers, call Microsoft Customer Information Service
at (800) 426-9400.
<P>
The syntax for the PasteSpecial method in Microsoft Excel Visual Basic for
Applications is the following:
<P>
<PRE>   object.PasteSpecial(Paste, Operation, SkipBlanks, Transpose)

</PRE></OL>where the named arguments are included in the parentheses.
<P>
In Visual Basic Standard or Professional Edition, if you want to
leave out an argument such as operation in the example above, you
must indicate the missing argument with a comma. Trailing commas at
the end of an instruction can be omitted. In the example above, it is
not necessary to add additional commas after the final argument
(SkipBlanks).
<P>
The following procedure in Visual Basic Standard or Professional
Edition opens the workbook TEST.XLS, selects the range A1:B6, copies
the cells to the clipboard, selects a new range, and pastes the entire
copied range (except for any blank cells) to this location.
<P>
<PRE>   Sub Form_Load ()
      ' Dimension variable xl as object type
      Dim xl As object
      ' Activate Microsoft Excel and assign to variable xl
      Set xl = GetObject(, "Excel.Application.5")
      ' Open workbook TEST.XLS
      xl.Workbooks.Open "c:\excel\test.xls"
      ' Select range A1:B6 on active worksheet
      xl.Activesheet.Range("A1:B6").Select
      ' Copy selection to clipboard
      xl.Selection.Copy
      ' Select cell A11
      xl.Activesheet.Range("A11").Select
      ' Paste contents of clipboard to active cell
      ' Skip blank cells in copy range
      xl.Selection.PasteSpecial xlall, , True
      Set xl = Nothing
   End Sub
</PRE> 
<PRE>Keywords          : kbprg PgmHowTo kbprg
Version           : 5.0 5.0c 7.0
Platform          : WINDOWS</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

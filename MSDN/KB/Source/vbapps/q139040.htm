

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Screen.ActiveForm Returns Main Form, Not Subform </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139040">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1995/11/01">
<META NAME="Keywords" CONTENT="kbusage SynFnc FmsHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  If the currently active control on the screen is in a subform, Screen.ActiveControl will correctly reference this control. Screen.ActiveForm, however, will reference the mai...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAOE,QAMN,QAY5,QA1S,QAB9,QBV8,QAUD,QDN7,QAMA,QDN9,QBS0,QAH4,QBXS P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Screen.ActiveForm Returns Main Form, Not Subform</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139040</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
If the currently active control on the screen is in a subform,
Screen.ActiveControl will correctly reference this control.
Screen.ActiveForm, however, will reference the main form and not the
subform the control is contained on.
<P>
<P><h2>CAUSE</h2>
 
<P>
A subform is not really a form, but a control (just like a text box or
command button) that appears on a form. Screen.ActiveForm will always
return the active form, not a subform control.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
You can use the Set_Screen_ActiveSubformControl function provided below to
determine what subform control contains the Screen.ActiveControl. This
function will set a global control variable Screen_ActiveSubformControl to
the currently active subform control on screen.
<P>
<PRE>   Syntax:

      Function Set_Screen_ActiveSubformControl()

   Return:

      True:  Screen_ActiveSubformControl was set to the subform control
             that contains Screen.ActiveControl.
      False: Screen.ActiveControl does not exist or is not in a subform.

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The following information describes how to create a module with the
Set_Screen_ActiveSubformControl() function. Further, information is
provided demonstrating how to use this function using the sample database
Northwind.mdb (or NWIND.MDB in 2.0).
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.

<OL><P><LI>Create a module and type the following lines in the Declarations
   section if they are not already there:
<P>
<P><PRE>      Option Explicit
      Dim Screen_ActiveSubformControl As Control
</PRE>
<P><LI>Type the following two procedures:
<P>
<P><PRE>      Function Set_Screen_ActiveSubformControl()
<PRE></PRE>         Dim frmActive As Form, ctlActive As Control
         Dim hWndParent As Long

         ' Clear the control variable.
         Set Screen_ActiveSubformControl = Nothing

         ' Assume a subform is not active.
         Set_Screen_ActiveSubformControl = False

         ' Get the active form and control.
         On Error Resume Next
         Set frmActive = Screen.ActiveForm
         Set ctlActive = Screen.ActiveControl
         If Err &lt;&gt; 0 Then Exit Function

         ' Get the unique window handle identifying the form
         ' .. the active control is on.
         hWndParent = ctlActive.Parent.Properties("hWnd")

         ' If the active form window handle is the same as the window
         ' handle of the form the active control is on, then we are on the
         ' mainform, so exit.
         If hWndParent = frmActive.hWnd Then Exit Function

         ' Find a subform control that has a window handle matching the
         ' .. window handle of the form the active control is on.
         Set_Screen_ActiveSubformControl = FindSubform(frmActive, _
             hWndParent)

      End Function

      Function FindSubform(frmSearch As Form, hWndFind As Long)
         Dim i As Integer
         On Error GoTo Err_FindSubForm

         ' Assume we will find a subform control with a window
         ' .. handle matching hWndFind.
         FindSubform = True

         ' Visit each control on the form frmSearch.
         For i = 0 To frmSearch.Count - 1
            ' If the control is a subform control...
            If TypeOf frmSearch(i) Is SubForm Then
               ' .. does the window handle match the one we are looking
               ' for?
            If frmSearch(i).Form.hWnd = hWndFind Then
               ' We found it! Set the global control variable and exit.
               Set Screen_ActiveSubformControl = frmSearch(i)
               Exit Function
            Else
               ' Otherwise, search this subform control (recursively)
               ' .. to see if it contains a sub-subform control
               ' .. with a window handle matching the one we are
               ' .. interested in.

               ' If we found a subform control, then exit.
               If FindSubform(frmSearch(i).Form, hWndFind) Then
                  Exit Function
               End If
            End If
         End If
      Next i

      Bye_FindSubform:
      ' If we didn't exit the function earlier, then there is no
      ' .. subform or sub-subform control on this form that has a window
      ' .. handle matching the one we are interested in, so return false.
      FindSubform = False
      Exit Function

      Err_FindSubForm:
         MsgBox Error$, 16, "FindSubform"
         Resume Bye_FindSubform
      End Function

</PRE></OL><h3>How To Use the Set_Screen_ActiveSubformControl() Function</h3>
 
<P>
The following information demonstrates how to use the
Set_Screen_ActiveSubformControl() function using the sample database
Northwind.mdb (or NWIND.MDB in 2.0).

<OL><P><LI>Open the sample database Northwind.mdb and follow the steps above
   to create the module containing the Set_Screen_ActiveSubformControl
   procedure.

<P><LI>Create a new macro called AutoKeys as followed:
<P>
<PRE>      Macro Name   Action
      -------------------
      {F2}         RunCode

      AutoKeys Actions
      --------------------------------------------
      RunCode
         Function Name: =DisplayActiveSubformName()

</PRE><P><LI>Add the following function to the module created in step 1:
<P>
<P><PRE>      Function DisplayActiveSubformName()
<PRE></PRE>         Dim Msg As String
         Dim CR As String
         CR = Chr$(13)  ' Carriage Return.

         If Set_Screen_ActiveSubformControl() = False Then
            Msg = "There is no active subform!"
         Else
            Msg = "Active Form Name = " &amp; Screen.ActiveForm.Name
            Msg = Msg &amp; CR
            Msg = Msg &amp; "Active ControlName = " &amp; Screen.ActiveControl.Name
            Msg = Msg &amp; CR
            Msg = Msg &amp; "Active Subform ControlName = "
            Msg = Msg &amp; Screen_ActiveSubformControl.Name
            Msg = Msg &amp; CR
            Msg = Msg &amp; "Active Subform Form Name = "
            Msg = Msg &amp; Screen_ActiveSubformControl.Form.Name
         End If

         MsgBox Msg

      End Function

</PRE><P><LI>Open the Customers form in Design view and press F11 to activate the
   Database window.

<P><LI>Drag the Orders form from the Database window to the bottom of the
   Customers form to create a subform control. This will enable you to
   test the function on a subform and a sub-subform.

<P><LI>Select the new subform control and set the following properties:
<P>
<P><PRE>      Name: Testing 123
      SourceObject: Orders
</PRE>
<P><LI>View the Customers form in Form view. Note that the Orders subform
   contains only orders for the current customer.

<P><LI>Set the focus to a control in the Customers form, the Orders form
   (subform), or the Orders Subform (sub-subform) and press the F2 key.
</OL> 
<PRE>Keywords          : kbusage SynFnc FmsHowTo
Version           : 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbprb
Solution Type     : kbcode</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

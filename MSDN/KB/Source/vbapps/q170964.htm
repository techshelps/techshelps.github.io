

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Improve String Concatenation Performance </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170964">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1997/07/02">
<META NAME="Keywords" CONTENT="VB4ALL VB4WIN vb5all vb5howto VBKBVBA vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When concatenating large strings on the order of 50kb or larger (for example, building an HTML table from a database), the length of time to complete can become quite long as the string gets larger. This article demonstrates an alternative to norma...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAMR,QAU3,QATX,QDL9,QBWQ,QBWO,QBWN,QAH4,QA26,QAVX,QABB,QAFF,QAY5,QBVP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Improve String Concatenation Performance</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170964</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
<LI>Microsoft Visual Basic Standard and Professional Editions for Windows,
   version 3.0
<LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When concatenating large strings on the order of 50kb or larger (for
example, building an HTML table from a database), the length of time to
complete can become quite long as the string gets larger. This article
demonstrates an alternative to normal concatenation that can improve
performance for large strings by 20 times or more.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When performing repeated concatenations of the type:
<P>
<PRE>   For I = 1 To N
     Dest = Dest &amp; Source
   Next N

</PRE>the length of time increases proportionally to N-squared. Thus, 1000
iterations will take about 100 times longer than 100 iterations. This is
because Visual Basic does not just add the Source characters to the end of
the Dest string; it also performs the following operations:

<OL><P><LI>Allocates temporary memory large enough to hold the result.

<P><LI>Copies Dest to the start of the temporary area.

<P><LI>Copies Source to the end of the temporary area.

<P><LI>De-allocates the old copy of Dest.

<P><LI>Allocates memory for Dest large enough to hold the result.

<P><LI>Copies the temporary data to Dest.
<P>
</OL>Steps 2 and 6 are very expensive and basically result in the entire
concatenated result being copied twice with additional overhead to allocate
and de-allocate memory.
<P>
This article details a method using the Mid$ statement and pre-allocating
memory in larger chunks to eliminate all but step 3 above for most of the
concatenation phase.
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this code "as is" without warranty of any kind,
either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Type the following code into a module:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      ' For 16-bit products, uncomment the next three lines by removing the
      ' single quotes and add a single quote to comment out the following
      ' three lines.
      '  Const ConcatStr = "ABC"
      '  Const ccIncrement = 15000
      '  Declare Function GetTickCount Lib "USER" () As Long
</PRE><P>
<PRE>         Const ConcatStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
         Const ccIncrement = 50000
         Private Declare Function GetTickCount Lib "KERNEL32" () As Long

      Dim ccOffset As Long

      Sub StdConcat(ByVal LoopCount As Long)
      Dim BigStr As String, I As Long, StartTick As Long
        StartTick = GetTickCount()
        For I = 1 To LoopCount
          BigStr = BigStr &amp; ConcatStr
        Next I
        Debug.Print LoopCount; "concatenations took";
        Debug.Print GetTickCount() - StartTick; "ticks"
      End Sub

      Sub Test_Concat()
        Debug.Print "Using standard concatenation"
        StdConcat 1000
        StdConcat 2000
        StdConcat 3000
        StdConcat 4000
        StdConcat 5000
        Debug.Print
        Debug.Print "Using pre-allocated storage and pseudo-concatenation"
        MidConcat 1000
        MidConcat 2000
        MidConcat 3000
        MidConcat 4000
        MidConcat 5000
      End Sub

      Sub Concat(Dest As String, Source As String)
      Dim L As Long
        L = Len(Source)
        If (ccOffset + L) &gt;= Len(Dest) Then
          If L &gt; ccIncrement Then
            Dest = Dest &amp; Space$(L)
          Else
            Dest = Dest &amp; Space$(ccIncrement)
          End If
        End If
        Mid$(Dest, ccOffset + 1, L) = Source
        ccOffset = ccOffset + L
      End Sub

      Sub MidConcat(ByVal LoopCount As Long)
      Dim BigStr As String, I As Long, StartTick As Long
        StartTick = GetTickCount()
        ccOffset = 0
        For I = 1 To LoopCount
          Concat BigStr, ConcatStr
        Next I
        BigStr = Left$(BigStr, ccOffset)
        Debug.Print LoopCount; "pseudo-concatenations took";
        Debug.Print GetTickCount() - StartTick; "ticks"
      End Sub

</PRE><P><LI>In the Debug/Immediate Window, type "Test_Concat" without the quotes,
   and hit the Enter key.
<P>
   The results will look similar to:
<P>
<P><PRE>      Using standard concatenation
       1000 concatenations took 2348 ticks
       2000 concatenations took 8954 ticks
       3000 concatenations took 20271 ticks
       4000 concatenations took 35103 ticks
       5000 concatenations took 54453 ticks
</PRE><P>
<P><PRE>      Using pre-allocated storage and pseudo-concatenation
       1000 pseudo-concatenations took 82 ticks
       2000 pseudo-concatenations took 124 ticks
       3000 pseudo-concatenations took 165 ticks
       4000 pseudo-concatenations took 247 ticks
       5000 pseudo-concatenations took 289 ticks
</PRE><P>
</OL><h3>Additional Information</h3>
 

<OL><P><LI>The code may take a couple of minutes to run.

<P><LI>GetTickCount returns the number of milliseconds since Windows
   was started. Thus, the output is in milliseconds.

<P><LI>Performance improvement ranges from almost 30 times for the
   1000-iteration case to almost 200 times for the 5000-iteration case.
   These times may vary depending on:
<P>
<P><PRE>    - The product used.
    - Your system configuration..
    - The size of ccIncrement (larger size favors MidConcat).
    - The number of iterations used (more iterations favors MidConcat).
    - The size of the resultant string (larger size favors MidConcat).
</OL></PRE> 
<PRE>Keywords          : VB4ALL VB4WIN vb5all vb5howto VBKBVBA vbwin GnrlVb kbprg
Technology        : kbvba
Version           : WINDOWS:1.0 1.1 2.0 3.0 4.0 5.0 7.0
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transferring an Array from VB 3.0 to a Microsoft Excel Sheet </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114258">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/04/27">
<META NAME="Keywords" CONTENT="IntpOthr kbinterop kbprg kbhowto kbcode kbinterop kbole">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article discusses how you can use Microsoft Excel version 5.0, Visual Basic version 3.0, and OLE automation to transfer the contents of an array from a Visual Basic application to a Microsoft Excel worksheet.  MORE INFORMATION  OLE Automation ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QAH4,QBJZ,QBXS,QA5F,QAMA,QAH6,QBWS,QAY2,QAIJ,QASP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Transferring an Array from VB 3.0 to a Microsoft Excel Sheet</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114258</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic, version 3.0
<LI>Microsoft Excel for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses how you can use Microsoft Excel version 5.0, Visual
Basic version 3.0, and OLE automation to transfer the contents of an array
from a Visual Basic application to a Microsoft Excel worksheet.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
OLE Automation allows you use a Visual Basic application to control another
application, such as Microsoft Excel. In order to manipulate the object of
another application, you need to identify it with a programmatic
identifier. Programmatic identifiers are registered in your system when you
install an application. The programmatic identifiers for Microsoft Excel
5.0 are listed in the following table.
<P>
<PRE>                              Represents this
   This identifier            Microsoft Excel 5.0 object
   -----------------------------------------------------

   Excel.Application.5        Application
   Excel.Sheet.5              Sheet
   Excel.Chart.5              Chart

</PRE>The following example demonstrates how to create a Visual Basic version 3.0
executable program that can be run from a Microsoft Excel Visual Basic
macro to transfer the contents of an array to the active worksheet in
Microsoft Excel.
<P>
Microsoft provides examples of Visual Basic procedures for
illustration only, without warranty either expressed or implied,
including but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. This Visual Basic procedure
is provided 'as is' and Microsoft does not guarantee that it can be
used in all situations. Microsoft does not support modifications of
this procedure to suit customer requirements for a particular purpose.
Note that a line that is preceded by an apostrophe introduces a
comment in the code--comments are provided to explain what the code is
doing at a particular point in the procedure. Note also that an
underscore character (_) indicates that code continues from one line
to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This
Manual" section in the "Document Conventions" section of the "Visual
Basic User's Guide."
<P>
<P><h3>Example</h3>
 

<OL><P><LI>Start Visual Basic version 3.0.

<P><LI>Enter the following code for the Click event for Form1:
<P>
<PRE>        '***** VISUAL BASIC 3.0 EXAMPLE PROCEDURE ********

        Sub Form_Click ()

        Dim XLApp As object
        Dim WBook As object
        Dim WSheet As object
        Dim TestArray() As Integer
        Dim i As Integer

           'Assuming Excel 5.0 is currently running, set XLApp to the
           'Excel 5.0 Application
           Set XLApp = GetObject(, "Excel.application.5")

           'Set WBook to the Activeworkbok in Excel
           Set WBook = XLApp.Activeworkbook

           'Set WSheet to the Activesheet in Excel
           Set WSheet = XLApp.Activesheet

           'Create a two dimensional array containing random values
           ReDim TestArray(1 To 10, 1 To 2) As Integer
           For i = 1 To 10
              TestArray(i, 1) = Rnd * 10
              TestArray(i, 2) = Rnd * 1000
           Next i

           'Transfer the values in TestArray to the range A1:B10 on the
           ' ActiveSheet in Excel
           For i = 1 To UBound(TestArray)
              WSheet.Range("A" &amp; i).Value = TestArray(i, 1)
              WSheet.Range("B" &amp; i).Value = TestArray(i, 2)
           Next i

            'Display the message that the transfer was complete and to
        close
            ' the form
            MsgBox "TestArray has been transferred to [" &amp; WBook.Name &amp; "]"
        &amp; _
            WSheet.Name &amp; "."

            Unload Form1
        End Sub

</PRE><P><LI>From the File menu, choose Make EXE File to compile the code.

<P><LI>Quit Visual Basic.

<P><LI>Start Microsoft Excel 5.0.

<P><LI>From the File menu, choose New.

<P><LI>From the Insert menu, choose Macro, and then choose Module.

<P><LI>Enter the following code on the Visual Basic module (Note this example
    assumes the .EXE file created in step 3 above is located on
    C:\VB\TEST.EXE):
<P>
<PRE>        '*****EXCEL 5.0 VISUAL BASIC MACRO EXAMPLE******

        Sub TransferArrayFromVBApp()

          'Start the VB application Test.Exe in a normal window with focus
           Shell "C:\vb\test.exe", 1

        End Sub

</PRE><P><LI>Select "Sheet1" in the active workbook.

<P><LI>From the Tools menu, choose Macro.

<P><LI>Select the TransferArrayFromVBApp macro, and then choose the Run
    button.

<P><LI>Form1 will appear. Click the form to start the transfer of the  array
    to the active worksheet ("Sheet1"). When the transfer is complete, a
    message box stating that the transfer is complete will appear. Choose
    OK.
<P>
</OL>There will be a  random sequence of numbers in the range A1:B10 on Sheet1;
these numbers were transferred by the Visual Basic program.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"Visual Basic User's Guide," version 5.0, Chapter 10
"Microsoft Visual Basic Programmer's Guide," version 3.0, Chapter 23
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 xl5 Excel W_Excel 3.00 3.0<BR>
Keywords          : IntpOthr kbinterop kbprg kbhowto kbcode kbinterop kbole<BR>
Version           : 5.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

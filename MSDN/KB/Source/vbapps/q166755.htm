

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: WE1183: "Customizing Menu Bars, Menus, and Menu Items" </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q166755">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1997/04/10">
<META NAME="Keywords" CONTENT="kbappnote kbfile kbprg kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The Application Note  Customizing Menu Bars, Menus, and Menu Items  (WE1183) is now available from Microsoft Product Support Services. This Application Note can help you learn techniques for writing Visual Basic for Applications code to customize m...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAF0,QAVI,QANS,QDKR,QAB5,QAFF,QAMN,QAOE,QA7O,QBXS,QBS0,QBJZ,QBWR,QAPF,QAEF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: WE1183: "Customizing Menu Bars, Menus, and Menu Items"</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q166755</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Application Note "Customizing Menu Bars, Menus, and Menu Items"
(WE1183) is now available from Microsoft Product Support Services. This
Application Note can help you learn techniques for writing Visual
Basic for Applications code to customize menus in Microsoft
Excel 97. This Application Note is meant to be used as a supplement to
Chapter 8 ("Menus and Toolbars") of the "Microsoft Office 97/Visual Basic
Programmer's Guide." This Application Note contains code examples you can
run. These code examples can be used with the following elements: menu
bars, menus, menu items, submenus, and shortcut menus.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can obtain this Application Note from the following sources:

<UL><LI>Microsoft's World Wide Web Site on the Internet
<LI>The Internet (Microsoft anonymous ftp server)
<LI>Microsoft Download Service (MSDL)
<LI>Microsoft Technical Support
<P>
</UL>For complete information, see the "To Obtain This Application Note" section
at the end of this article.
<P>
<P><h2>THE TEXT OF WE1183</h2>
 
<P>
<PRE>                             TABLE OF CONTENTS
                             =================

</PRE>Overview
<PRE>   Using the Examples in This Application Note

</PRE>Visual Basic for Applications Code Examples and Tips
<PRE>   Command Bars
   Control Constants
   Menu Bars
      Returning an ID for a Command Bar Control
      Saving the Active State (for Built-in or Customized Menu Bars)
      Creating a Custom Command Bar
      Displaying a Custom Command Bar
      Deleting a Custom Command Bar
      Hiding a Command Bar
      Displaying a Command Bar
      Restoring a Built-in Command Bar
   Menus
      Adding a Custom Menu Control to a Command Bar
      Disabling a Menu Control on a Command Bar
      Enabling a Menu Control on a Command Bar
      Deleting a Menu Control on a Command Bar
      Restoring a Menu Control on a Command Bar
   Menu Items
      Adding a Separator Bar to a Menu Control
      Creating a Custom Menu Item Control on a Menu
      Placing a Check Mark Next to a Menu Item Control
      Disabling a Menu Item Control on a Command Bar
      Enabling a Menu Item Control on a Command Bar
      Deleting a Menu Item Control on a Menu
      Restoring a Built-in Menu Item Control on a Menu
   Submenus
      Adding a Submenu
      Adding a Menu Item to a Submenu
      Disabling a Menu Item Control on a Submenu
      Deleting a Command on a Submenu
      Disabling a Submenu Control
      Deleting a Submenu Control
   Shortcut Menu Bars
      Creating a New Shortcut Menu Bar
   Shortcut Menus
      Creating a Menu Item on a Shortcut Menu Bar
      Disabling a Menu Item Control on a Shortcut Menu Bar
      Deleting a Menu Item on a Shortcut Menu Bar
      Deleting a Shortcut Menu Bar
      Restoring a Menu Item on Built-in Shortcut Menu Bar
   Submenus on Shortcut Menus
      Creating a New Submenu on a Shortcut Menu Bar
      Creating a Menu Item Control on a Submenu Located on a Shortcut Menu
      Bar
      Disabling a Submenu Item Control on a Shortcut Menu
      Deleting a Submenu Item Control on a Shortcut Menu
      Disabling a Submenu Control on a Shortcut Menu
      Deleting a Submenu Control on a Shortcut Menu

</PRE>Where to Find More Information
<PRE>   The Object Browser
   Microsoft Knowledge Base
      Using the Microsoft Knowledge Base on the World Wide Web
      Using the Microsoft Knowledge Base on The Microsoft Network

                                 OVERVIEW
                                 ========

</PRE>To perform many of the common tasks that are associated with customizing
menu bars and menus in Microsoft Excel 97 for Windows, use the Customize
dialog box (click Customize on the Tools menu). To perform more advanced
tasks, or to tailor menu bars and menus for a custom application, you may
want to create Visual Basic for Applications procedures.
<P>
For more information about using the Customize dialog box, click the Office
Assistant, type "customize menubar" (without the quotation marks), click
Search, and then click to view a topic.
<P>
This Application Note can help you learn techniques for writing Visual
Basic for Applications code for customizing menu bars, menus, menu items,
submenus, and shortcut menus.
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<PRE>                USING THE EXAMPLES IN THIS APPLICATION NOTE
                ===========================================

</PRE>The examples in this Application Note use Visual Basic for Applications
code in Microsoft Excel 97 to customize menus. To use the example macros,
follow these steps:

<OL><P><LI>In Microsoft Excel 97, open the Visual Basic Editor. To do this, point
   to Macros on the Tools menu and click Visual Basic Editor (or press
   ALT+F11).

<P><LI>In the Visual Basic Editor, insert a Visual Basic module sheet. To do
   this, click Module on the Insert menu.

<P><LI>Type one of the macro examples from this Application Note. If you
   downloaded this document from an online location, you can copy and paste
   the example directly into a module sheet. You can then run the example
   in the workbook.

<P><LI>To run a macro, point to Macro on the Tools menu, and then click Macros.
   In the Macro dialog box, click the macro name and click Run.
<P>
<PRE>           VISUAL BASIC FOR APPLICATIONS CODE EXAMPLES AND TIPS
           ====================================================

</PRE></OL><h3>Command Bars</h3>
 
<P>
In Microsoft Excel 97, menu bars and toolbars are referred to as the same
programmable object type, the CommandBar object. Within the CommandBar
object are the controls that you use to refer to menus, menu items,
submenus, and shortcut menus. With each control, you use a constant in the
Type argument to specify which type of control to use for the menu,
submenu, or menu item. For example, the MsoControlButton constant refers to
menu items on menus. This Application Note discusses customizing and
controlling command bar menus using Visual Basic for Applications.
<P>
<P><h3>Control Constants</h3>
 
<P>
The following is a list of the various control constants that specify the
type of graphical control to use for a particular menu bar control:
<P>
<PRE>MsoControlButton               MsoControlGraphicDropdown
MsoControlButtonDropdown       MsoControlGraphicPopup
MsoControlButtonPopup          MsoControlGrid
MsoControlComboBox             MsoControlLabel
MsoControlCustom               MsoControlOCXDropDown
MsoControlDropdown             MsoControlPopup
MsoControlEdit                 MsoControlSplitButtonMRUPopup
MsoControlExpandingGrid        MsoControlSplitButtonPopup
MsoControlGauge                MsoControlSplitDro pdown
MsoControlGenericDropdown      MsoControlSplitExpandingGrid
</PRE>MsoControlGraphicCombo
<P>
Manipulating menus in Microsoft Excel primarily involves using the
constants MsoControlButton (menu commands), MsoControlPopUp (menus), and
MsoBarPopup (shortcut menu bars). For a graphical explanation of each
constant, click the Office Assistant in the Visual Basic Editor, type
"property" (without the quotation marks), click Search, and then click to
view the "Type Property (Microsoft Office Reference)" topic.
<P>
<P><h3>Menu Bars</h3>
 
<P>
A menu bar, which is a kind of command bar, is the kind of object on which
you add menus, menu items, and submenus.
<P>
The Office Assistant in Microsoft Office Visual Basic Help can help you
find information about the topics in the following table.
<P>
<PRE>   For Information About This Topic              Search for
   -------------------------------------------------------------

   To add a new menu bar                         Add menubar
   To activate a created or built-in menu bar    Show menubar
   To delete a custom menu bar                   Delete menubar
   To determine whether a menu is built-in       Builtin menubar
   To restore all built-in menu bars, menus,     Restore menubar
   and menu items

</PRE>The built-in menu bars that are included in Microsoft Excel 97 are listed
in the following table.
<P>
<PRE>   Built-in Menu Bar             Description
   ------------------------------------------------------------------------

   Worksheet menu bar            The menu bar that appears when a worksheet
                                 is activated
   Chart menu bar                The menu bar that appears when a chart
                                 sheet or a chart object is selected

</PRE>Returning an ID for a Command Bar Control:
<P>
Each command bar control has a unique ID. To return an ID for a control,
use a macro.
<P>
This following example returns the ID for the Tools menu control on the
Chart menu bar:
<P>
<PRE>   Sub Id_Control ()
   Dim myId as Object
      set myId = CommandBars("Chart Menu Bar").Controls("Tools")
      MsgBox myId.Caption &amp; Chr(13) &amp; MyId.Id
   End Sub

</PRE>For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q159466.htm">Q159466</A></B>
   TITLE     : XL97: List of ID Numbers for Built-In Command Bar Controls

</PRE>Saving the Active State (for Built-in or Customized Menu Bars):
<P>
You may want to declare OriginalMenuBar a public variable so that a
subroutine can use it in an another subroutine, such as an Auto_Close
subroutine. Declaring and using the variable this way resets the user's
previous menu bar to its original state. The following sample macro resets
the menu bar:
<P>
<PRE>   Public OriginalMenuBar as Object

   Sub MenuBars_Capture()
      Set OriginalMenuBar = CommandBars.ActiveMenuBar
   End Sub

</PRE>The following sample macro recovers the captured menu bar:
<P>
<PRE>   Sub MenuBars_Recover()
      OriginalMenuBar.Visible = True
   End Sub

</PRE>Determining the Name of the Active Menu Bar:
<P>
The following sample macro returns the name of the active menu bar:
<P>
<PRE>   Sub MenuBars_GetName()
      MsgBox CommandBars.ActiveMenuBar.Name
   End Sub

</PRE>Creating a Custom Command Bar:
<P>
The following example creates a custom command bar named My Command Bar:
<P>
<PRE>   Sub MenuBar_Create()
      Application.CommandBars.Add Name:="My command bar"
   End Sub

</PRE>NOTE: The command bar is empty because no controls were added to it. It
does not appear until you display it.
<P>
Displaying a Custom Command Bar:
<P>
The following example creates and then displays a custom My Custom Bar menu
bar, and then replaces the built-in menu bar:
<P>
<PRE>   Sub MenuBar_Show()
   Dim myNewBar as Object
      ' Setting the menubar property to True replaces the built-in menu
      ' bar.
      Set myNewBar = CommandBars.Add (Name:="My Custom Bar", MenuBar:=True)
      ' You must first enable your custom menu bar before you make it
      ' visible.
      ' Enabling a menu bar adds it to the list of available menu bars on
      ' the Customize dialog box.
      MyNewBar.Enabled = True
      MyNewBar.Visible = True
   End Sub

</PRE>NOTE: The menu bar is empty because no controls were added to it. See the
"Menu Items" section for examples that add controls to menu bars.
<P>
Deleting a Custom Command Bar:
<P>
The following example deletes the custom menu bar named My Custom Bar that
you created in the previous example:
<P>
<PRE>   Sub MenuBar_Delete()
      CommandBars("My Custom Bar").Delete
   End Sub

</PRE>NOTE: You can only disable built-in command bars; you cannot delete them.
<P>
Hiding a Command Bar:
<P>
The following example hides the built-in Worksheet menu bar:
<P>
<PRE>   Sub MenuBar_Disable()
      CommandBars("Worksheet Menu Bar").Enabled = False
   End Sub

</PRE>Displaying a Command Bar:
<P>
The following example displays the built-in Worksheet menu bar:
<P>
<PRE>   Sub MenuBar_Display()
      CommandBars("Worksheet Menu Bar").Enabled = True
   End Sub

</PRE>Restoring a Built-in Command Bar:
<P>
Restoring a menu bar resets the default controls (menus and menu items).
The following example restores the built-in Worksheet menu bar:
<P>
<PRE>   Sub MenuBar_Restore()
      CommandBars("Worksheet Menu Bar").Reset
   End Sub

</PRE>NOTE: You can reset only built-in menu bars; you cannot reset a custom menu
bar.
<P>
<P><h3>Menus</h3>
 
<P>
You can add menus to a custom or built-in menu bar.
<P>
The Office Assistant in Microsoft Office Visual Basic Help can help you
find information about the topics in the following table.
<P>
<PRE>   For Information About This Topic              Search for
   ----------------------------------------------------------

   To add a menu to the worksheet menu bar       Add menu
   To delete a menu from the worksheet menu bar  Delete menu
   To restore a deleted built-in menu on the     Builtin menu
   worksheet menu bar
   To disable a menu on the worksheet menu bar   Disable menu

</PRE>Adding a Custom Menu Control to a Command Bar:
<P>
The following example adds the myMenu menu to the Worksheet menu bar:
<P>
<PRE>   Sub Menu_Create()
   Dim myMnu As Object
      Set myMnu = CommandBars("worksheet menu bar").Controls. _
         Add(Type:=msoControlPopup, before:=3)
      With myMnu
      ' The "&amp;" denotes a shortcut key assignment (Alt+M in this case).
         .Caption = "my&amp;Menu"
      End With
   End Sub

</PRE>Disabling a Menu Control on a Command Bar:
<P>
A menu that is disabled appears dimmed and is not available.
<P>
The following example disables the File menu:
<P>
<PRE>   Sub Menu_Disable()
      CommandBars("Worksheet menu bar").Controls("File").Enabled = False
   End Sub

</PRE>Enabling a Menu Control on a Command Bar:
<P>
The following example enables the File menu that you disabled in the
previous example:
<P>
<PRE>   Sub Menu_Enable()
      CommandBars("Worksheet menu bar").Controls("File").Enabled = True
   End Sub

</PRE>Deleting a Menu Control on a Command Bar:
<P>
The following example deletes the Help menu from the Worksheet menu bar:
<P>
<PRE>   Sub Menu_Delete()
      CommandBars("Worksheet menu bar").Controls("Help").Delete
   End Sub

</PRE>Restoring a Menu Control on a Command Bar:
<P>
To restore a menu control, you must know the identification (ID) number for
the control. To determine the ID number, see the "Returning an ID for a
Command Bar Control" section.
<P>
The following example restores the Help menu on the Worksheet menu bar:
<P>
<PRE>   Sub Menu_Restore()
   Dim myMnu As Object
      Set myMnu = CommandBars("Worksheet menu bar")
      ' Id 30010 refers to the Help menu control.
      myMnu.Controls.Add Type:=msoControlPopup, Id:=30010, before:=10
      myMnu.Reset
   End Sub

</PRE><h3>Menu Items</h3>
 
<P>
You can add menu item controls to or remove them from built-in or custom
menu controls on command bars. Each command bar control has a unique
identification number (ID). An ellipsis (...) that follows a menu item
caption denotes a menu item that opens a dialog box. Menu items with a
small, black arrow after the caption display one or more submenu items.
<P>
The Office Assistant in Microsoft Office Visual Basic Help can help you
find information about the topics in the following table.
<P>
<PRE>   For Information About This Topic              Search for
   ----------------------------------------------------------

   To add a menu item to an existing worksheet   Add menuitem
   menu
   To delete a menu item                         Delete menuitem
   To disable a custom menu item                 Disable menuitem

</PRE>Adding a Separator Bar to a Menu Control:
<P>
A separator bar is a horizontal line that separates menu commands on a
menu.
<P>
The following example adds a separator bar before the Worksheet command on
the Insert menu:
<P>
<PRE>   Sub menuItem_AddSeparator()
      CommandBars("Worksheet menu bar").Controls("Insert") _
      .Controls("Worksheet").BeginGroup = True
   End Sub

</PRE>NOTE: To remove a separator bar, set the BeginGroup property to False.
<P>
Creating a Custom Menu Item Control on a Menu:
<P>
The following example creates a new command called Custom1 on the Tools
menu of the Worksheet menu bar, and then runs the macro Code_Custom1 when
you click Custom1:
<P>
<PRE>   Sub menuItem_Create()
      With CommandBars("Worksheet menu bar").Controls("Tools")
         .Controls.Add(Type:=msoControlButton, Before:=1).Caption = _
         "Custom1"
         .Controls("Custom1").OnAction = "Code_Custom1"
      End With
   End Sub

</PRE>NOTE: This is the code that runs when you click Custom1.
<P>
<PRE>   Sub Code_Custom1()
      MsgBox "you clicked Custom1"
   End Sub

</PRE>Placing a Check Mark Next to a Menu Item Control:
<P>
The following example places a check mark next to the Custom1 command if it
is not selected and removes the check mark if it is selected:
<P>
<PRE>   Sub menuItem_checkMark()
   Dim myPopup as Object

      Set myPopup = CommandBars("Worksheet menu bar").Controls("Tools")
      If myPopup.Controls("Custom1").State = msoButtonDown Then
         ' Remove check mark next to menu item.
         myPopup.Controls("Custom1").State = msoButtonUp
         MsgBox "Custom1 is now unchecked"
         Else
           ' Add check mark next to menu item.
            myPopup.Controls("Custom1").State = msoButtonDown
            MsgBox "Custom1 is now checked"
       End If
      End Sub

</PRE>Disabling a Menu Item Control on a Command Bar:
<P>
Menu items that are disabled appear dimmed and are not available.
<P>
The following example disables the Custom1 menu item that you created on
the Tools menu:
<P>
<PRE>   Sub MenuItem_Disable()
   Dim myCmd as Object
      Set myCmd = CommandBars("Worksheet menu bar").Controls("Tools")
      myCmd.Controls("Custom1").Enabled = False
   End Sub

</PRE>Enabling a Menu Item Control on a Command Bar:
<P>
The following example enables the Custom1 menu item that you disabled in
the previous example:
<P>
<PRE>   Sub MenuItem_Enable()
   Dim myCmd as Object
      Set myCmd = CommandBars("Worksheet menu bar").Controls("Tools")
      myCmd.Controls("Custom1").Enabled = True
   End Sub

</PRE>Deleting a Menu Item Control on a Menu:
<P>
The following example deletes the Save menu item on the File menu:
<P>
<PRE>   Sub menuItem_Delete()
   Dim myCmd as Object
      Set myCmd = CommandBars("Worksheet menu bar").Controls("File")
      MyCmd.Controls("Save").Delete
   End Sub

</PRE>Restoring a Built-in Menu Item Control on a Menu:
<P>
To restore a menu item control, you must know the identification (ID)
number for the control. To determine the ID number, see the "Returning an
ID for a Command Bar Control" section.
<P>
The following example restores the Save menu item that you deleted in the
previous example:
<P>
<PRE>   Sub menuItem_Restore()
   Dim myCmd as Object
      Set myCmd = CommandBars("Worksheet menu bar").Controls("File")
      ' Id 3 refers to the Save menu item control.
      myCmd.Controls.Add Type:=msoControlButton, Id:= 3, Before:=5
   End Sub

</PRE><h3>Submenus</h3>
 
<P>
Submenus appear to the side of the parent menu when you click a menu item.
A menu item that is a submenu control has a small black arrow located at
the right end of the menu item name.
<P>
Adding a Submenu:
<P>
The following example adds a new submenu named NewSub to the Tools menu on
the Worksheet menu bar:
<P>
<PRE>   Sub SubMenu_Create()
   Dim newSub as Object
      Set newSub = CommandBars("Worksheet menu bar").Controls("Tools")
      With newSub
         .Controls.Add(Type:=msoControlPopup, Before:=1).Caption="NewSub"
      End With
   End Sub

</PRE>Adding a Menu Item to a Submenu:
<P>
This example adds a new menu item named SubItem1 to the NewSub submenu, and
then runs the Code_SubItem1 macro when you click SubItem1:
<P>
<PRE>   Sub SubMenu_AddItem()
   Dim newSubItem as Object
      Set newSubItem = CommandBars("Worksheet menu bar") _
      .Controls("Tools").Controls("NewSub")
      With newSubItem
         .Controls.Add(Type:=msoControlButton, Before:=1).Caption = _
         "SubItem1"
         .Controls("SubItem1").OnAction = "Code_SubItem1"
      End With
   End Sub

</PRE>The following is the macro code that runs when you click SubItem1:
<P>
<PRE>   Sub Code_SubItem1()
      MsgBox "you clicked SubItem1"
   End Sub

</PRE>Disabling a Menu Item Control on a Submenu:
<P>
Menu items that are disabled appear dimmed and are not available.
<P>
The following example disables the SubItem command that you created in the
previous example:
<P>
<PRE>   Sub SubMenu_DisableItem()
      CommandBars("Worksheet menu bar").Controls("Tools") _
      .Controls("NewSub").Controls("SubItem1").Enabled = False
   End Sub

</PRE>NOTE: To enable the disabled control, set the Enabled property to True.
<P>
Deleting a Command on a Submenu:
<P>
The following example deletes the SubItem1 command that you created on the
NewSub submenu:
<P>
<PRE>   Sub SubMenu_DeleteItem()
      CommandBars("Worksheet menu bar").Controls("Tools") _
      .Controls("NewSub").Controls("SubItem1").Delete
   End Sub

</PRE>Disabling a Submenu Control:
<P>
Submenus that are disabled appear dimmed and are not available.
<P>
The following example disables the NewSub submenu that you created on the
Tools menu:
<P>
<PRE>   Sub SubMenu_DisableSub()
      CommandBars("Worksheet menu bar").Controls("Tools") _
      .Controls("NewSub").Enabled = False
   End Sub

</PRE>NOTE: To enable the disabled control, set the Enabled property to True.
<P>
Deleting a Submenu Control:
<P>
The following example deletes the NewSub submenu that you created on the
Tools menu:
<P>
<PRE>   Sub SubMenu_DeleteSub()
      CommandBars("Worksheet menu bar").Controls("Tools") _
      .Controls("NewSub").Delete
   End Sub

</PRE><h3>Shortcut Menu Bars</h3>
 
<P>
Shortcut menu bars appear when you use the right mouse button to click a
specific Microsoft Excel object. Microsoft Excel has many shortcut menu
bars for which a variety of menus are available. You can also create custom
shortcut menu bars and customize the built-in menu bars. The only
difference between shortcut menus and other menu bars is that when you
create the shortcut menu using the Add method, you must specify the
msoBarPopUp constant as the Position argument. Use the ShowPopup method to
display shortcut menus, as demonstrated in the previous examples. You can
assign event procedures for user actions, for example, to display a
shortcut menu in response to a right-click event.
<P>
The shortcut menu bars that are available in Microsoft Excel are as
follows:
<P>
<PRE>   &amp;Wizard            Document                   Query and Pivot
   ActiveX Control    Excel Control              Query Layout
   AutoCalculate      Floor and Walls            Rotate Mode
   AutoFill           Formula Bar                Row
   Built-in Menus     Inactive Chart             Series
   Cell               Layout                     Shapes
   Chart              Nondefault Drag and Drop   System
   Column             Object/Plot                Title Bar (Charting)
   Connector          OLE Object                 Trendline
   Curve              Pictures Context           Menu WordArt Context Menu
   Curve Node         PivotTable Context Menu    Workbook Tabs
   Curve Segment      Plot Area                  XLM Cell
   Desktop            Ply
   Dialog             Query


</PRE>Creating a New Shortcut Menu Bar:
<P>
The following example creates a new shortcut menu bar called myShortcutBar:
<P>
<PRE>   Sub Shortcut_Create()
   Dim myShtCtBar as Object
      Set myShtCtBar = CommandBars.Add(Name:="myShortcutBar", _
      Position:=msoBarPopup)
      ' This displays the shortcut menu bar.
      ' 200, 200 refers to the screen position in pixels as x and y
   coordinates.
      myShtCtBar.ShowPopup 200,200
   End Sub

</PRE>NOTE: The shortcut menu bar appears empty because no controls (menu items
or submenus) have been added to it yet.
<P>
The constant msoBarPopup is used in the Position argument to denote a
shortcut menu bar.
<P>
<P><h3>Shortcut Menus</h3>
 
<P>
Creating a Menu Item on a Shortcut Menu Bar:
<P>
The following example creates a new menu command named Item1 on the
shortcut menu bar named myShortcutBar and runs the Code_Item1 macro when
you click Item1:
<P>
<PRE>   Sub Shortcut_AddItem()
   Dim myBar as Object
      Set myBar = CommandBars("myShortcutBar")
      With myBar
         .Controls.Add (Type:=msoControlButton, before:=1).Caption = _
         "Item1"
         .Controls("Item1").OnAction = "Code_Item1"
      End With
      myBar.ShowPopup 200,200
   End Sub

</PRE>The following is the macro that runs when you click Item1 on myShortcutBar:
<P>
<PRE>   Sub Code_Item1()
      MsgBox "you clicked Item1"
   End Sub

</PRE>Disabling a Menu Item Control on a Shortcut Menu Bar:
<P>
Menu items that are disabled appear dimmed and are not available.
<P>
The following example disables the Item1 command that you created in the
previous example:
<P>
<PRE>   Sub Shortcut_DisableItem()
      Set myBar = CommandBars("myShortcutBar")
      myBar.Controls("Item1").Enabled = False
      myBar.ShowPopup 200,200
   End Sub

</PRE>NOTE: To enable the disabled item, set the Enabled property to True.
<P>
Deleting a Menu Item on a Shortcut Menu Bar:
<P>
The following example deletes the menu command named Item1 on
myShortcutBar:
<P>
<PRE>   Sub Shortcut_DeleteItem()
      Set myBar = CommandBars("myShortcutBar")
      myBar.Controls("Item1").Delete
      myBar.ShowPopup 200,200
   End Sub

</PRE>Deleting a Shortcut Menu Bar:
<P>
Deleting the shortcut menu bar removes it and all of its items. You cannot
restore a deleted custom menu bar. To restore it, you must recreate it and
all of its menu items, submenus, and so on.
<P>
The following example deletes the shortcut menu myShortCutBar that you
created in a previous example:
<P>
<PRE>   Sub Shortcut_DeleteShortCutBar()
      CommandBars("MyShortCutBar").Delete
   End Sub

</PRE>Restoring a Menu Item on Built-in Shortcut Menu Bar:
<P>
You can restore default menu items on built-in menu bars. However, you
cannot restore custom menu items. To restore a built-in menu control, you
must know the identification (ID) number for the control. To determine the
ID number, see the "Returning an ID for a Command Bar Control" section.
<P>
The following example restores the Cut command on the worksheet Cell
shortcut menu bar:
<P>
<PRE>   Sub Shortcut_RestoreItem()
      ' Id 21 refers to the Help menu control.
      CommandBars("Cell").Controls.Add Type:=msoControlButton, Id:21,
   Before:=1
   End Sub

</PRE><h3>Submenus on Shortcut Menus</h3>
 
<P>
You can create submenus on shortcut menu bars. Submenus appear to the side
of the parent menu when you click a menu item control. A menu item that is
a submenu control has a small, black arrow located to the right of its
name.
<P>
Creating a New Submenu on a Shortcut Menu Bar:
<P>
The following example adds a new submenu named NewSub on the worksheet Cell
shortcut menu:
<P>
<PRE>   Sub ShortcutSub_Create()
      CommandBars("Cell").Controls.Add(Type:=msoControlPopup, before:=1) _
      .Caption = "NewSub"
       ' This displays the shortcut menu bar.
       ' 200, 200 refers to the screen position in pixels as x and y
       ' coordinates.
      CommandBars("Cell").ShowPopup 200, 200
   End Sub

</PRE>NOTE: The submenu is empty because no menu items have been added to it yet.
<P>
Creating a Menu Item Control on a Submenu Located on a Shortcut Menu Bar:
<P>
The following macro adds the command subItem1 to the submenu NewSub that
you created on the Cell shortcut menu, and then runs the Code_subItem1
macro when you click subItem1:
<P>
<PRE>   Sub ShortcutSub_AddItem()
   Dim newSubItem as Object
      Set newSubItem = CommandBars("Cell").Controls("NewSub")
      With newSubItem
         .Controls.Add(Type:=msoControlButton, before:=1).Caption =
          "subItem1"
         ' This will run the subItem1_Code macro when subItem1 is clicked.
         .Controls("subItem1").OnAction = "Code_subItem1"
      End With
      ' This displays the Cell shortcut menu bar.
      ' 200, 200 refers to the screen position in pixels as x and y
      ' coordinates
      CommandBars("Cell").ShowPopup 200, 200
   End Sub

</PRE>The following is the macro that runs when you click subItem1:
<P>
<PRE>   Sub subItem1_Code()
      MsgBox "you clicked subItem1"
   End Sub

</PRE>Disabling a Submenu Item Control on a Shortcut Menu
<P>
Menu items that are disabled appear dimmed and are not available.
<P>
The following example disables the command subItem1 on the NewSub submenu:
<P>
<PRE>   Sub ShortcutSub_DisableItem()
      CommandBars("Cell").Controls("NewSub") _
      .Controls("subItem1").Enabled = False
      ' This displays the Cell shortcut menu bar.
      ' 200, 200 refers to the screen position in pixels as x and y
      ' coordinates.
      CommandBars("Cell").ShowPopup 200, 200
   End Sub

</PRE>NOTE: To enable a disabled item, set the Enabled property to True.
<P>
Deleting a Submenu Item Control on a Shortcut Menu:
<P>
The following example deletes the command subItem1 on the NewSub submenu:
<P>
<PRE>   Sub ShortcutSub_DeleteItem()
      CommandBars("Cell").Controls("NewSub").Controls("subItem1").Delete
      ' This displays the Cell shortcut menu bar.
      ' 200, 200 refers to the screen position in pixels as x and y
      ' coordinates.
      CommandBars("Cell").ShowPopup 200, 200
   End Sub

</PRE>Disabling a Submenu Control on a Shortcut Menu:
<P>
Menu items that are disabled appear dimmed and are not available.
<P>
The following example disables the NewSub submenu on the Cell shortcut menu
bar:
<P>
<PRE>   Sub ShortcutSub_DisableSub()
      CommandBars("Cell").Controls("NewSub").Enabled = False
      ' This displays the Cell shortcut menu bar.
      ' 200, 200 refers to the screen position in pixels as x and y
      ' coordinates.
      CommandBars("Cell").ShowPopup 200, 200
   End Sub

</PRE>NOTE: To enable a disabled item, set the Enabled property to True.
<P>
Deleting a Submenu Control on a Shortcut Menu:
<P>
Deleting the submenu removes it and all of its items. You cannot restore a
deleted custom submenu. To restore it, you must recreate it and all of its
menu items, submenus, and so on.
<P>
The following example deletes the NewSub submenu that you created on the
Cell shortcut menu bar:
<P>
<PRE>   Sub ShortcutSub_DeleteSub()
      CommandBars("Cell").Controls("NewSub").Delete
      ' This displays the Cell shortcut menu bar.
      ' 200, 200 refers to the screen position in pixels as x and y
      ' coordinates.
      CommandBars("Cell").ShowPopup 200, 200
   End Sub

</PRE><h2>WHERE TO FIND MORE INFORMATION</h2>
 
<P>
<P><h3>The Object Browser</h3>
 
<P>
The Object Browser contains a complete list of all of the properties and
methods for a specific menu item. To find this information, switch to the
Visual Basic Editor (press ALT+F11), click Object Browser on the View menu
(or press F2), type the name of the control in the search box, and then
press ENTER or click Search.
<P>
For more information about using the Object Browser, click the Office
Assistant in the Visual Basic Editor, type "object browser" (without the
quotation marks), click Search, and then click to view the "Use the Object
Browser" topic.
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Excel Help is not installed on your
computer, please see the following article in the Microsoft Knowledge Base:
<P>
ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
<PRE>TITLE     : Office: How to Add/Remove a Single Office Program or Component

</PRE><h3>Microsoft Knowledge Base</h3>
 
<P>
The Microsoft Knowledge Base is a primary Microsoft product information
source for Microsoft Technical Support engineers. The Microsoft Knowledge
Base is also available to Microsoft customers. This comprehensive database
contains detailed articles with technical information about Microsoft
products, documented fix lists, documentation errors, and answers to
commonly asked technical support questions. These articles are available
through the World Wide Web, The Microsoft Network, CompuServe*, Genie(tm), 
and
the Microsoft Developer Network compact disc. You can also access the
Knowledge Base if you purchase a Microsoft TechNet compact disc
subscription.
<P>
Using the Microsoft Knowledge Base on the World Wide Web:
<P>
To connect to the Microsoft Knowledge Base on the Web, use the following
address
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/kb/">http://www.microsoft.com/kb/</A></B>

</PRE>and follow the detailed instructions on the page.
<P>
NOTE: Because the Microsoft Web site is constantly updated, the site
address may change without notice. If this occurs, link to the Microsoft
home page at the following address:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com">http://www.microsoft.com</A></B>

</PRE>Using the Microsoft Knowledge Base on The Microsoft Network:
<P>
To connect to the Microsoft Knowledge Base, use the following steps:

<OL><P><LI>On the Edit menu, click Go to.

<P><LI>Click Other Location.

<P><LI>When the prompt "Type a Go word for a particular service" appears, type
   "mssupport" (without the quotation marks).
<P>
</OL>NOTE: It may take a minute or more for the Microsoft Knowledge Base to
appear while it prepares the necessary files to run.

<OL><P><LI>Double-click MS Knowledge Base.
<P>
</OL> 
<P>
The disk and software contained on it, including any accompanying
documentation (the "Software"), are provided to you at no additional
charge. Microsoft Corporation owns all rights, title, and interest in and
to the Software. The user assumes the entire risk as to the accuracy and
the use of the Software.
<P>
COPYRIGHT NOTICE. Copyright (c) 1997 Microsoft Corporation. Microsoft 
and/or
its suppliers, One Microsoft Way, Redmond, Washington 98052-6399 U.S.A. All
rights reserved.
<P>
TRADEMARKS. Microsoft, Windows, Windows NT, MSN, The Microsoft Network
and/or other Microsoft products referenced herein are either trademarks or
registered trademarks of Microsoft. Other product and company names
mentioned herein may be the trademarks of their respective owners.
<P>
The names of companies, products, people, characters and/or data mentioned
herein are fictitious and are in no way intended to represent any real
individual, company, product or event, unless otherwise noted.
<P>
NO WARRANTY. THE SOFTWARE IS PROVIDED "AS-IS," WITHOUT WARRANTY OF ANY
KIND, AND ANY USE OF THIS SOFTWARE PRODUCT IS AT YOUR OWN RISK. TO THE
MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, MICROSOFT AND ITS SUPPLIERS
DISCLAIM ALL WARRANTIES AND CONDITIONS, EITHER EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES AND CONDITIONS OF
MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-
INFRINGEMENT, WITH REGARD TO THE SOFTWARE.
<P>
LIMITATION OF LIABILITY. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW,
IN NO EVENT SHALL MICROSOFT OR ITS SUPPLIERS BE LIABLE FOR ANY SPECIAL,
INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING,
WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF
MICROSOFT HAS BEEN ADVISED OF THE POSSIBLITY OF SUCH DAMAGES. BECAUSE SOME
STATES AND JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF
LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY
NOT APPLY. MICROSOFT'S ENTIRE LIABILITY AND YOUR EXCLUSIVE REMEDY UNDER
THIS EULA SHALL NOT EXCEED FIVE DOLLARS (US$5.00).
<P>
The following conditions also apply to your use of the Software:
<P>
The Software may be copied and distributed internally only, subject to the
following conditions:
All | text must be copied without modification and all pages must be
included;
If software is included, all files on the disk(s) |must be copied without
modification [the MS-DOS(R) utility diskcopy is appropriate for this
purpose];
All components of this Software must be distributed together; and
This Software may not be distributed to any third party.
<P>
If you are not a Microsoft Premier customer, Microsoft shall not provide
technical support for this Software.
<P>
The Software is provided with RESTRICTED RIGHTS.  Use, duplication, or
disclosure by the Government is subject to restrictions set forth in
subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer
Software clause at DFARS 252.227-7013 or subparagraphs (c)(1) and (2) of
the Commercial Computer Software-Restricted Rights at 48 CFR 52.227-19, as
applicable.  Manufacturer is Microsoft Corporation, One Microsoft Way,
Redmond, WA  98052-6399.  Any transfer of the Software must be accompanied
by this statement and may only be transferred if first approved by
Microsoft.
<P>
You agree that you will not export or re-export the Software to any
country, person, entity or end user subject to U.S.A. export restrictions,
and you are responsible for complying with all applicable U.S. and local
export laws in connection with the use of this Software.  You warrant and
represent that neither the U.S.A. Bureau of Export Administration nor any
other federal agency has suspended, revoked or denied you export
privileges.
<P>
This EULA is governed by the laws of the State of Washington, U.S.A.
<P>
 
<P>
<P><h2>TO OBTAIN THIS APPLICATION NOTE</h2>
 
<P>
The following file are available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/We1183.exe">We1183.exe</A> <I>(size: 58041 bytes)</I> 

</PRE></OL>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><LI>Application Notes are available by modem from the Microsoft Download
   Service (MSDL), which you can reach by calling (425) 936-6735. This
   service is available 24 hours a day, 7 days a week. The highest download
   speed available is 9600 bits per second (bps). For more information
   about using the MSDL, call (800) 936-4100 and follow the prompts. To
   obtain WE1183, download We1183.exe. We1183.exe is a compressed, self-
   extracting file. After you download WE1183, run it to extract the
   file(s) it contains.

<LI>If you are unable to access the sources listed above, you can have this
   Application Note mailed or faxed to you by calling Microsoft Technical
   Support Monday through Friday, 6:00 A.M. to 6:00 P.M. Pacific time at
   (425) 635-7070. If you are outside the United States, contact the
   Microsoft subsidiary for your area. To locate your subsidiary, see the
   Microsoft World Wide Offices Web site at:
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: appnote<BR>
Keywords          : kbappnote kbfile kbprg kbhowto<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

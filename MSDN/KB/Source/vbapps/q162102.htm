

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PPT: Introduction to Macro Programming in PowerPoint 97 and 98 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162102">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/01/13">
<META NAME="Keywords" CONTENT="kbcode kbmacro kbprg kbdta kbdtacode kbpptvba">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article walks you through the steps to create a simple Microsoft Visual Basic for Applications macro within Microsoft PowerPoint. The macro you create will add a slide to your presentation, set a background texture for a slide, set slide timin...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBS0,QDKP,QBVQ,QBWS,QBJZ,QAPN,QAJM,QA5V,QAUJ,QAMA,QAYL,QAMB,QAIB,QA5F P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PPT: Introduction to Macro Programming in PowerPoint 97 and 98</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162102</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft PowerPoint 98 Macintosh Edition
<LI>Microsoft PowerPoint 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article walks you through the steps to create a simple Microsoft
Visual Basic for Applications macro within Microsoft PowerPoint. The macro
you create will add a slide to your presentation, set a background texture
for a slide, set slide timings, and run a slide show.
<P>
This article is designed to introduce you to some of the tools and concepts
you need to become a macro programmer.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Create A New Presentation</h3>
 

<OL><P><LI>On the File menu, click New. This opens up the New Presentation dialog
   box.

<P><LI>Select the Blank Presentation icon on the General tab and click OK.
   This opens up the New Slide dialog box.

<P><LI>Select the Blank AutoLayout, located in the bottom right corner, and
   click OK.
<P>
</OL>You now have a blank presentation open, ready to create the macro.
<P>
<P><h3>Create a Macro</h3>
 

<OL><P><LI>On the Tools menu, point to Macro, and then click Macros. This opens
   up the Macro dialog box.

<P><LI>In the Macro name box, type in a name for your macro. The name must
   begin with a letter and can contain up to 80 characters. Visual Basic
   for Applications keywords are invalid names for macros. The name cannot
   contain any spaces. Programmers typically use an underscore character(_)
   to separate words.
<P>
   Don't worry about trying to remember all the rules for naming macros.
   If you enter an invalid macro name, PowerPoint will display a dialog
   box with a message similar to the following:
<P>
<P><PRE>      &lt;macro name&gt; is not a valid name for a macro
</PRE><P>
   If you see this message, just keep trying until you find a name that
   PowerPoint will accept.

<P><LI>Click the Create button. This opens the Visual Basic Editor. The Visual
   Basic Editor is an application where you can create, edit, and debug
   your macros.
<P>
</OL><h3>Add Code to a New Macro</h3>
 
<P>
You should now be looking at a flashing cursor within the Code Window.
The Code Window is where you actually type Visual Basic commands. A
recorded macro can also be viewed in the code window. For the most part,
the Code Window acts like a typical text editor, enabling you to cut,
copy, and paste text. However, there are some differences that make it
easier for you to create macros. The important differences are detailed
below.

<OL><P><LI>Type the following line of code between the Sub and End Sub:
<P>
<P><PRE>      Dim MySlide As Slide
</PRE><P>
   When you were typing in the code, you probably noticed some interesting
   things happen. After you hit the spacebar following the word as, a drop
   down list of the available data types appeared on your screen. This is
   just one of the ways the Visual Basic Editor makes programming a little
   easier.
<P>
   What does this code do?
<P>
<PRE>   Dim        Indicates to the Visual Basic Editor you are about to declare
              a variable. There are several other methods available to
              declare variables, but this article discusses only the Dim
              method.

   MySlide    Is the name you provide the variable. It is a good idea to
              give your variables meaningful descriptive names. X is an
              example of a poor variable name. Meaningful names make your
              code easier to read.

   As Slide   Specifies the type of data the variable will contain. In
              this case, MySlide will have the data type Slide.

</PRE><P><LI>Let's add some more code. Type the following line of code after the
   variable declaration:
<P>
<P><PRE>      Set MySlide = ActivePresentation.Slides.Add(1, ppLayoutTitle)
</PRE><P>
   This code adds a new slide to the active presentation. The slide
   created uses the Title Only auto layout. Lets take a closer look at
   this line of code.
<P>
<PRE>   Set MySlide              Assigns an object reference to a variable or
                            property. Using Set makes it easier to refer
                            to that same object later in your code.

   ActivePresentation       Tells the Visual Basic Editor you are referring
                            to the presentation that is open in the active
                            window.

   Add(1, ppLayoutTitle)    Creates a new slide and adds it to the
                            collection of slides in the presentation.
                            The Add method takes two parameters:

                            The first parameter, the slide index, is the
                            number 1 in this case. The slide index is the
                            position where PowerPoint creates the slide.
                            When the index is set to 1, PowerPoint creates
                            the new slide at the beginning of the
                            presentation.

                            The second parameter specifies the type of
                            AutoLayout.

   For more information on creating slides programmatically, search for
   "Add Slides" using the Help menu.

   For more information on the slide AutoLayouts available, search for
   "PpPlaceHolder Type" using the Help menu.

   TIP: When entering code, if the property and method list pops up, you
   can select the item you want and then press TAB, which adds
   the object to your command and leave the cursor on the same line.

   Your macro code should now look something like this:

      Sub YourMacro ()
         '
         ' Macro created 1/7/97 by You
         '
         Dim MySlide As Slide
         Set MySlide = ActivePresentation.Slides.Add(1, ppLayoutTitle)

      End Sub

   NOTE: The text following ' apostrophe (on the same line) is a comment.
   Comments are ignored by the Visual Basic Editor. They are added to the
   code to make it easier to understand what is going on in the code.

   Now that your macro actually does something, we can try running the
   macro.

</PRE></OL><h3>Run the Macro</h3>
 
<P>
There are several methods to run a macro. Only one method is described in
this article.

<OL><P><LI>Click Close and Return to Microsoft PowerPoint from the File menu. The
   Visual Basic Editor closes and you return to PowerPoint.

<P><LI>On the Tools menu, point to Macro, and then click Macros. This opens the
   Macro dialog box.

<P><LI>Select your macro from the list and then click the Run button.
<P>
</OL>PowerPoint adds a new slide to the beginning of your presentation. Now
let's add some more code.
<P>
<P><h3>View the Macro Code</h3>
 
<P>
Use the following steps to view the source code of a specific macro.

<OL><P><LI>On the Tools menu, point to Macro, and then click Macros. This brings
   up the Macro dialog box.

<P><LI>Click the macro you want to edit. The name of the macro should appear
   highlighted.

<P><LI>Click the Edit Button. This opens the macro within the Visual Basic
   Editor. The Visual Basic Editor is where you make corrections, remove
   unnecessary steps, or add instructions you can't record in PowerPoint.
<P>
</OL><h3>Add Some More Code</h3>
 
<P>
Now we are ready to add the rest of the commands to complete the macro.

<OL><P><LI>Add the next line of code to your macro:
<P>
<P><PRE>      ActiveWindow.ViewType = ppViewSlideSorter
</PRE><P>
   This changes the presentation to slide sorter view. We are doing this
   so we can select the entire slide.
<P>
   For more information on PowerPoint views, search for "views" using the
   Help menu.

<P><LI>Add the next line of code to your macro:
<P>
<P><PRE>      MySlide.Select
</PRE><P>
   This code selects the slide you created. MySlide is the object
   reference you created with the Dim statement.

<P><LI>Add the next section of code to your macro:
<P>
<P><PRE>      With ActiveWindow.Selection.SlideRange
<PRE></PRE>         .FollowMasterBackground = msoFalse
         .Background.Fill.PresetTextured msoTextureRecycledPaper
      End With

   These commands tell PowerPoint that this particular slide does not
   follow the master and then set the background preset texture to the
   recycled paper.

   The With statement allows you to group commands that have common
   references. Using With to group multiple commands can improve the
   performance of the macro as well as saving you a lot of typing.

   Without using the With statement the code would look like this:

      ActiveWindow.Selection.SlideRange.FollowMasterBackground = msoFalse
      ActiveWindow.Selection.SlideRange.Background.Fill.PresetTextured _
         msoTextureRecycledPaper

   The underscore in the second line is a continuation character. It tells
   the Visual Basic Editor that you could not fit the specific command on
   one line and are continuing the instruction on the next line.

   You can see the advantage of using With statements; less typing and
   faster code. The only downside to the With statement is it sometimes
   makes the code more difficult to read, especially, if you nest a With
   within another With statement.

</PRE><P><LI>Add the next line of code to your macro:
<P>
<P><PRE>      MySlide.Shapes.Title.TextFrame.TextRange.Text = "Look What I Did!"
</PRE><P>
   This command adds the text "Look What I Did!" into the title box of the
   slide you created.

<P><LI>Add the next section of code to your macro:
<P>
<P><PRE>      With ActivePresentation.Slides.Range.SlideShowTransition
<PRE></PRE>         .AdvanceTime = 5
         .EntryEffect = ppEffectCheckerboardAcross
      End With

   AdvanceTime    Specifies how long (in seconds) a particular
                  slide is visible when running a slide show.

   EntryEffect    Specifies the slide transition effect that runs just
                  prior to the slide appearing.

</PRE><P><LI>Add the last line of code to your macro:
<P>
<P><PRE>      ActivePresentation.SlideShowSettings.Run
</PRE><P>
   This code starts the slide show.
<P>
</OL><h3>The Complete Macro Code</h3>
 
<P>
<PRE>   Sub YourMacro()
      '
      ' Macro created &lt;Date&gt; by &lt;You&gt;
      '
      Dim MySlide As Slide

      ' Add a new slide to the presentation.
      Set MySlide = ActivePresentation.Slides.Add(1, ppLayoutTitle)

      ' Change the presentation to slide sorter view.
      ActiveWindow.ViewType = ppViewSlideSorter

      ' Select your slide.
      MySlide.Select

      ' Apply a preset texture to the slide.
      With ActiveWindow.Selection.SlideRange
         .FollowMasterBackground = msoFalse
         .Background.Fill.PresetTextured msoTextureRecycledPaper
      End With

      ' Add text into title of the slide.
      MySlide.Shapes.Title.TextFrame.TextRange.Text = "Look What I Did!"

      ' Set the slide timing and transition effect.
      With ActivePresentation.Slides.Range.SlideShowTransition
         .AdvanceTime = 5
         .EntryEffect = ppEffectCheckerboardAcross
      End With

      ' Start the slide show.
      ActivePresentation.SlideShowSettings.Run

   End Sub

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information about creating Visual Basic for Applications macros,
click the Office Assistant in Microsoft PowerPoint, type "how to create a
macro," click Search, and then click to view "Create a macro in Visual
Basic Editor."
<P>
For more information about running Visual Basic for Applications macros,
click the Office Assistant in Microsoft PowerPoint, type "how to run a
macro," click Search, and then click to view "Run a macro."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If the Assistant is not able to answer your query, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176476.htm">Q176476</A></B>
   TITLE     : OFF: Office Assistant Not Answering Visual Basic Questions

</PRE>For additional information about getting help with Visual Basic for
Applications, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 8.00 kbmacro kbpptvba ppt8 vba vbe 98 macppt<BR>
Keywords          : kbcode kbmacro kbprg kbdta kbdtacode kbpptvba<BR>
Version           : WINDOWS:97; MACINTOSH:98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Hardware          : MAC x86<BR>
Issue type        : kbref<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Introduction to Stand-Alone Class Module Programming </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q160007">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1996/11/26">
<META NAME="Keywords" CONTENT="kbprg kbusage PgmCM PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes how to conceptualize and implement stand-alone class modules in Microsoft Access 97. Microsoft Access introduced class modules in Microsoft Access 7.0...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAPN,QABO,QAO4,QAPF,QAB9,QAW6,QA1S,QAY5,QAGB,QDN9,QBXF,QBS0,QBSO,QA01 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Introduction to Stand-Alone Class Module Programming</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q160007</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes how to conceptualize and implement stand-alone class
modules in Microsoft Access 97. Microsoft Access introduced class modules
in Microsoft Access 7.0, where class modules behind forms and reports allow
you to create procedures that define custom methods and properties for the
object.
<P>
Microsoft Access 97 supports stand-alone class modules that allow you to
create an instance of a class that presents no user interface unless you
program it to do so.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Class modules have the following characteristics:

<UL><LI>The Initialize event
<LI>Your custom functionality
<LI>The Terminate event
<P>
</UL>Every class module has a lifetime, which is defined as the length of time
that the class continues to be referenced in your code.
<P>
<P><h3>The Initialize Event</h3>
 
<P>
The Initialize Event occurs when an instance of your class is created.
This is the event you want to use to set up your defaults and initialize
variables, for example.
<P>
<P><h3>Your Custom Functionality</h3>
 
<P>
You create Private variables, properties, and methods (functions) for
internal use in your class, and Public variables, properties, and methods
that you want to expose to the user implementing your class.
<P>
<P><h3>The Terminate Event</h3>
 
<P>
The Terminate Event occurs when an instance of your class is unloaded
explicitly, or a reference to the class falls out of scope.
<P>
<P><h3>Example of a Procedure That Uses a Class Module</h3>
 
<P>
Consider the following sample procedure that references a class module
named clsTest:
<P>
<PRE>   Function CreateClass1() As Boolean
      Dim cls As New clsTest
      Dim varResult As Variant
      MsgBox cls.ClassState, vbInformation, "Class Example"
      varResult = cls.AddInvoice("ALFKI")
      MsgBox cls.ClassState, vbInformation, "Class Example"
      Set cls = Nothing
      CreateClass1 = True
   End Function

</PRE>This example:

<UL><LI>Creates a new instance of the clsTest class object.
<LI>Calls the AddInvoice method of the class object and passes a valid
   Customer ID.
<LI>Unloads the class object by setting the cls object equal to Nothing.
<P>
</UL>The details of what this code accomplishes are not apparent from the code
sample. For example, you cannot determine what happens when the class
object is created, what the AddInvoice method does or what happens when you
close the class. That is the point of the class module programming
technique; you can hide the complexity of what occurs behind the scenes in
calls to the class object. There are many benefits to class-oriented
programming, which are revealed throughout this article.
<P>
<P><h3>Creating a Sample Class Module and Supporting Code</h3>
 
<P>
CAUTION: Following the steps in this example will modify the sample
database Northwind.mdb. You may want to back up the Northwind.mdb file
and perform these steps on a copy of the database.
<P>
Each time you create a class object, a trappable Initialize event occurs in
the class which is similar to the Open event of a form. The Initialize
event is where you program the things you want your class to do. For C++
programmers, this is similar to a "Constructor."
<P>
Follow these steps to create the clsTest class module example:

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>On the Insert menu, click Class Module.

<P><LI>Save the class module as clsTest.

<P><LI>Type the following lines in the Declarations section:
<P>
<P><PRE>     Private This_ClassState As String
     Private This_frm As Form
</PRE>
<P><LI>Select Class in the Object box of the module window. "Initialize" is
   automatically selected in the Procedure box.

<P><LI>Type the following procedure:
<P>
<P><PRE>     Private Sub Class_Initialize()
<PRE></PRE>        This_ClassState = "Initialized"
     End Sub

</PRE><P><LI>Type the following custom property function:
<P>
<P><PRE>     Public Property Get ClassState() As String
<PRE></PRE>        ClassState = This_ClassState
     End Property

</PRE></OL>The code in the Initialize event of clsTest sets the default value for a
read-only property named ClassState. ClassState returns the current status
of the class object to the caller. It has no functional purpose, but it
illustrates techniques you can use when you implement a class module.
<P>
The following procedure demonstrates how to retrieve the ClassState
property from the class object:
<P>
<PRE>   Function GetClass1State() As String
      Dim cls As New clsTest
      Dim varResult as String
      varResult = cls.ClassState
      Set cls = Nothing
      GetClass1State = varResult
   End Function

</PRE>This procedure returns "Initialized" from the class object, which
illustrates the concept you use when you plan the resulting functionality
of your class. You define what you want the class to do, and additionally
you consider how to implement the interface to your class. This is the same
concept as laying out a form so it is aesthetically pleasing to a user, but
in this case your target audience is someone who is programming with Visual
Basic for Applications.
<P>
Create a procedure to use as the AddInvoice method of the clsTest class
module. The code is similar to that in a standard module:

<OL><P><LI>Create the following in the procedure in the clsTest class module:
<P>
<P><PRE>      Function AddInvoice(custID As String) As Boolean
<PRE></PRE>         On Local Error GoTo AddInvoice_Err
         Dim Msg As String
         Dim lngOrderID As Long
         Dim varResult As Variant
         Set This_frm = Form_Orders
         This_frm.Modal = True
         This_frm.Visible = True
         DoCmd.GoToRecord acForm, This_frm.Name, acNewRec
         This_frm.CustomerID = custID
         varResult = This_frm.SetShipTo
         This_ClassState = "RecordActive=" &amp; CStr(This_frm.OrderID)
         AddInvoice = True
      AddInvoice_End:
         Exit Function
      AddInvoice_Err:
         Msg = "Error #: " &amp; Format$(Err.Number) &amp; vbCrLf
         Msg = Msg &amp; Err.Description
         Err.Raise vbObjectError, "clsTest.AddInvoice", Msg
         Resume AddInvoice_End
      End Function

   This procedure uses simple code techniques to open the Orders form, add
   a new record, and display the record for edits. There are many
   enhancements you can make to this code using data access objects (DAO).
   For example, you can modify the code to retrieve the customer’s last
   order and duplicate it without ever opening the Orders form. For
   illustrative purposes, this example uses the form itself to add a new
   record.

   Note that the error handling event uses the Raise method of the Err
   object. This allows the caller of the class to handle any errors instead
   of a user.

</PRE><P><LI>Save and close the clsTest class module.

<P><LI>Open the Orders form in Design view.

<P><LI>On the View menu, click Code, and then type the following procedure:
<P>
<P><PRE>      Public Function SetShipTo() As Boolean
<PRE></PRE>         Call CustomerID_AfterUpdate
         SetShipTo = True
      End Function

   This procedure in the class module of the Orders form is required to
   support the clsTest class module example. The procedure calls the
   AfterUpdate event of the CustomerID control. This is necessary in order
   to update the Ship To information on the form, which is triggered
   through the user interface when a user selects a Customer from the
   CustomerID list. Because the CreateClass1() sample procedure sets the
   value of CustomerID in code, this provides a way to trigger the
   AfterUpdate event and update the Ship To information.

</PRE><P><LI>Close and save the Orders form.
<P>
</OL>The class module also supports a Terminate event. This event triggers when
a class object falls out of scope, or when it is unloaded from memory by
setting its object variable equal to Nothing. The Terminate event is very
important because you use it to clean up any objects or references that the
class itself initiated. For C++ programmers, this is similar to a
"Destructor."
<P>
Follow these steps to create a Terminate event in the clsTest class module
that closes the Orders form and unloads the This_frm object variable:

<OL><P><LI>Open the clsTest class module in Design view.

<P><LI>Select Class in the Object box of the module window.

<P><LI>Select Terminate in the Procedure box of the module window.

<P><LI>Type the following procedure:
<P>
<P><PRE>     Private Sub Class_Terminate()
<PRE></PRE>        DoCmd.Close acForm, This_frm.Name
        Set This_frm = Nothing
        MsgBox "Class Terminated", vbInformation, "Class Example"
     End Sub

</PRE></OL><h3>Testing the Sample Class Module</h3>
 
<P>
Follow these steps to test the functionality of the clsTest class module:

<OL><P><LI>Create a new standard module and save it as Module1.

<P><LI>Type the following procedure:
<P>
<P><PRE>      Function CreateClass1() As Boolean
<PRE></PRE>         Dim cls As New clsTest
         Dim varResult As Variant
         MsgBox cls.ClassState, vbInformation, "Class Example"
         varResult = cls.AddInvoice("ALFKI")
         MsgBox cls.ClassState, vbInformation, "Class Example"
         Set cls = Nothing
         CreateClass1 = True
      End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>      ?CreateClass1()
</PRE><P>
   Note that the function does the following:
<P>
<P><PRE>    - Displays a message box indicating that the class has been
      Initialized.
    - Opens the Orders form and displays a blank invoice for CustomerID
      ALFKI.
    - Displays a message box indicating that the RecordActive=&lt;OrderId&gt;,
      where &lt;OrderID&gt; is the number automatically assigned to the new
      order.
    - Closes the Orders form.
    - Displays a message box indicating that the class has been Terminated.
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about class modules, search the Help Index for "class
modules," or ask the Microsoft Access 97 Office Assistant.
 
<PRE>Keywords          : kbprg kbusage PgmCM PgmHowTo
Version           : 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

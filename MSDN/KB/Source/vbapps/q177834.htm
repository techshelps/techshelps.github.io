

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Public Variables May Be Lost When You Copy a Worksheet </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177834">
<META NAME="KBModify" CONTENT="1998/02/05">
<META NAME="KBCreate" CONTENT="1997/12/08">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbainfo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In the versions of Microsoft Excel listed at the beginning of this article, public variables may unexpectedly lose their values. As a result, when you run a Microsoft Visual Basic for Applications procedure or macro that uses the public variables, ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBJZ,QBS0,QAYL,QBWS,QAH4,QBQU,QBVP,QA01,QA9N,QABI,QASB,QABH,QA0K,QAKD,QAFF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Public Variables May Be Lost When You Copy a Worksheet</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 5, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177834</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In the versions of Microsoft Excel listed at the beginning of this article,
public variables may unexpectedly lose their values. As a result, when you
run a Microsoft Visual Basic for Applications procedure or macro that uses
the public variables, the procedure or macro may not run correctly or may
return incorrect results. (See the "More Information" section of this
article for a demonstration of this problem.)
<P>
<P><h2>CAUSE</h2>
 
<P>
This problem may occur when the following conditions are true:

<UL><LI>In the Visual Basic Editor, the option to require variable declarations
   has been enabled by performing the following steps:
<P>
   1. On the Tools menu, click Options.
<P>
   2. Click the Editor tab.
<P>
   3. Select the Require Variable Declaration check box.
<P>
   4. Click OK.
<P>
<P><PRE>    -and-
</PRE>
<LI>You copied a worksheet, either by clicking Move Or Copy Sheet on the
   Edit menu or by running a Visual Basic procedure or macro that contains
   a line of code similar to the following:
<P>
<P><PRE>      Worksheets("Sheet1").Copy After:=Worksheets(Worksheets.Count)
</PRE><P>
   Or, you moved or copied a worksheet from another workbook into the
   workbook that contains the public variables.
<P>
</UL><h2>RESOLUTION</h2>
 
<P>
To prevent this problem from occurring, follow these steps:

<OL><P><LI>In the Visual Basic Editor, click Options on the Tools menu.

<P><LI>Click the Editor tab.

<P><LI>Click to clear the Require Variable Declaration check box.

<P><LI>Click OK.
<P>
</OL>After completing these steps, your public variables should retain their
values even when you copy a worksheet.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE></OL>In Visual Basic for Applications, you can create a public variable by
adding the word "Public" to a variable declaration at the top of a module.
<P>
Example:
<P>
<PRE>   Public X As Integer
   Public Y As String

   Sub Test()
       ' &lt;Your code goes here.&gt;
   End Sub

</PRE>Normally, public variables retain their values until you close the workbook 
in which they are contained. However, if the conditions listed in the 
"Cause" section of this article are true, the public variables may 
unexpectedly lose their values. The following steps demonstrate this 
problem. 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>In Microsoft Excel, create a new workbook.

<P><LI>On the Tools menu, point to Macro, and then click Visual Basic Editor.
   On the Insert menu, click Module.

<P><LI>Type the following code into the new module:
<P>
<P><PRE>      Public X As Integer
      Public Y As String
</PRE><P>
<PRE>      Sub CopySheet()
          Worksheets("Sheet1").Copy After:=Worksheets(Worksheets.Count)
      End Sub

      Sub SetVars()
          X = 5
          Y = "Hello!"
      End Sub

      Sub ShowVars()
          MsgBox X
          MsgBox Y
      End Sub

</PRE><P><LI>On the Tools menu, click Options. Click the Editor tab. Select the
   Require Variable Declaration check box, and then click OK.

<P><LI>On the File menu, click "Close and Return to Microsoft Excel."

<P><LI>On the Tools menu, point to Macro, and then click Macros. Select
   SetVars, and then click Run.
<P>
   The variables now contain the values 5 and "Hello!"

<P><LI>On the Tools menu, point to Macro, and then click Macros. Select
   ShowVars, and then click Run.
<P>
   Two message boxes appear containing the values 5 and "Hello!"

<P><LI>On the Tools menu, point to Macro, and then click Macros. Select
   CopySheet, and then click Run.
<P>
   Or, click Move Or Copy Sheet on the Edit menu. Select the Create A Copy
   check box. In the list, click "(move to end)", and then click OK.
<P>
   The worksheet Sheet1 is copied; the new worksheet, "Sheet1 (2)," appears
   at the end of the workbook.

<P><LI>On the Tools menu, point to Macro, and then click Macros. Select
   ShowVars, and then click Run.
<P>
   As before, two message boxes appear. However, the first message box
   contains the value zero (0), and the second message box is empty. This
   occurs because the act of copying the worksheet reinitialized the public
   variables.
<P>
   If you repeat these steps, but leave the Require Variable Declaration
   check box cleared in step 4, the public variables will correctly retain
   their values.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information about getting help with Visual Basic for
Applications, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 XL98 vba vbe<BR>
Keywords          : kbcode kbprg xlvbainfo<BR>
Version           : WINDOWS:97; MACINTOSH:98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbbug<BR>
Solution Type     : kbworkaround<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 5, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: How to Programmatically Create a Collection </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161215">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1996/12/18">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbahowto xlvbainfo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  New programming functionality in Microsoft Excel 97 allows you to create a collection. A collection is a predefined object that stores groups of related objects. A collection makes it easier to work with the object group. For example, you can use a...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QBS0,QAGU,QAH4,QBJZ,QAEF,QA01,QAW6,QAGB,QBVP,QAGC,QBWS,QAUJ,QA9N,QABO P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: How to Programmatically Create a Collection</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161215</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
New programming functionality in Microsoft Excel 97 allows you to create a
collection. A collection is a predefined object that stores groups of
related objects. A collection makes it easier to work with the object
group. For example, you can use a For Each looping structure to loop
through the collection. Each time the macro executes the loop it references
a different object in the collection until all objects in the collection
are referenced once.
<P>
This article includes a sample Visual Basic for Applications macro that
creates and references a collection.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
In general, declare an object as a new collection to create the collection.
After you create the Collection object, add items to the collection using
the Add method or remove items using the Remove method.

<OL><P><LI>Create a new workbook and start the Visual Basic Editor (press
    ALT+F11).

<P><LI>On the Insert menu, click Class Module.

<P><LI>In the class module, type the following declaration:
<P>
       Public EmployeeName As String
<P>
    You typically use a public variable in a class modules to define
    properties for the class.

<P><LI>If the Properties window is not visible, click Properties on the View
    menu.

<P><LI>If the Project Explorer window is not visible, click Project Explorer
    on the view menu.

<P><LI>In the Project Explorer, click the class module you inserted in the
    project in step 2.

<P><LI>In the Properties window, change the (Name) property of the class
    module to "EmpClass" (without the quotation marks).

<P><LI>On the Insert menu, click Module.

<P><LI>In this module, type the following code:
<P>
<PRE>       Sub MyCollection()
   
           Dim employees As New Collection   'Create the collection object.
           Dim num As Integer
   
           num = 0    'Counter for number of employees added to the 
                      'collection.
   
           Do
               Dim employee As New EmpClass    'Create new instance of the
                                               'EmpClass class.
               num = num + 1
   
               newname = InputBox("Enter new employee name" &amp; Chr(13) _
                   &amp; "or press Cancel to see list of employees.")
   
               If newname &lt;&gt; "" Then   'You did not press Cancel.
   
                   employee.EmployeeName = newname
                   employees.Add Item:=employee, key:=CStr(num)
   
                   Set employee = Nothing    'Clear the current reference
                                             'in preparation for next one.
   
               End If
   
           Loop Until newname = ""  'You pressed Cancel.
   
           For Each x In employees
               MsgBox x.EmployeeName 'Display the employee name.
           Next
   
           MsgBox employees.Count  'Current number of employees in 
</PRE></OL>collection.
<PRE>   
           For Each x In employees
               employees.Remove 1   'Remove each employee from the 
</PRE>collection.
<PRE>           Next
   
           MsgBox employees.Count 'Display a count of zero because
                                  'all employees were removed from the
                                  'collection.
   
       End Sub

</PRE><P><LI>Run the MyCollection macro.

<P><LI>When you are prompted, type any names, and then click Cancel to stop
<P><PRE>    typing names.
</PRE><P>
</OL>Message boxes that display each of the names you typed appear. Then, a
message box that displays a count of the names you typed appears. Another
message box with a count of zero appears because the last For Each loop
removes each employee from the collection.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the Add Method, click the Index tab in
Visual Basic for Applications Help, type the following text
<P>
<PRE>   add method

</PRE></OL>and then double-click the selected text to go to the "Add Method (Visual
Basic for Applications)" topic.
<P>
For more information about Collections, click the Index tab in
Visual Basic for Applications Help, type the following text
<P>
<PRE>   collections, described

</PRE>and then double-click the selected text to go to the "Collection Object"
topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 97 for Windows XL97<BR>
Keywords          : kbcode kbprg xlvbahowto xlvbainfo<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OL97: Creating Sequentially-Numbered Items in a Folder </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172796">
<META NAME="KBModify" CONTENT="1998/03/02">
<META NAME="KBCreate" CONTENT="1997/08/15">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provides an overview of possible solutions for sequentially numbering items in an Microsoft Outlook folder 97. Outlook does not provide a direct way of automatically incrementing a field value.  MORE INFORMATION  Microsoft provides pro...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVO,QAH4,QAFI,QAKC,QBC6,QA1S,QA7O,QA7N,QBUP,QAG8,QDNQ,QA4H,QBXS,QA5V,QASR P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OL97: Creating Sequentially-Numbered Items in a Folder</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172796</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Outlook 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an overview of possible solutions for sequentially
numbering items in an Microsoft Outlook folder 97. Outlook does not provide
a direct way of automatically incrementing a field value.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft Support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft Consult Line at (800) 936-5200. For more information about
the support options available from Microsoft, please see the following page
on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>Many database-oriented programs, such as Microsoft Access 97, provide a way
to create uniquely numbered items (or records). In database terminology,
this is typically referred to as a primary key.
<P>
There are several situations where you might want Outlook to sequentially
number items. A form that a helpdesk uses to track task requests is one
such example. Each task in a folder would have a unique task number for
tracking purposes.
<P>
Outlook does not provide a way of manually indexing fields in folders like
most database management systems (DBMS). Outlook stores items in MAPI
folders, and because these folders are designed to be flexible in terms of
what can be placed in them, they are "less structured" than a typical DBMS.
The folders are "self-indexing" based on various criteria, such as how
often a folder is accessed, and therefore do not have a primary key that
you can manually set.
<P>
<P><h3>Implementation Strategies</h3>
 
<P>
In all of the following scenarios, you have to create VBScript code with
event procedures for the form, typically Item_Open. VBScript code in the
Item_Open event keeps track of the auto-incrementing number, or ID, for the
items. You then store the number assigned to the last form item in some
designated location. Choosing the storage location is the main difference
between the following strategies.
<P>
Examples below auto-increment the ID number in the Mileage field, since the
Mileage field is available in all types of Outlook forms. In general, the
code placed in the Item_Open event needs to determine if the form is a new
form, or whether the form is an existing form. If it is a new form,
VBScript code needs to retrieve, increment, and store the ID in the Mileage
field. Then the code needs to update the number wherever the "last used" ID
is stored so that it is ready for the next new form. If the form is an
existing form, the VBScript code typically does nothing related to the ID
number.
<P>
<P><h3>Increment Number and Re-publishing the Form</h3>
 
<P>
This approach uses a published form to keep track of the ID number. Because
the Item_Open event executes when a new item is created or when an existing
item is opened, the VBScript code has to test to see whether the index
needs to be incremented.
<P>
The following is example code to provide a starting point for implementing
this type of solution. Since VBScript cannot use Outlook constants, the
constants are explicitly defined at the beginning of the code.
<P>
To implement this solution follow these steps:

<OL><P><LI>Open a new contact form and enter the following code in the VBScript
   editor. Then publish the form to the Contact folder, being sure to use
   the name in the third line of VBScript below (myFormName = "FormName").
<P>
<P><PRE>    olFolderRegistry = 3
    olFolderContacts = 10
    myFormName = "FormName"
</PRE><P>
<P><PRE>    Sub Item_Open()
    ' Set the Outlook NameSpace
    Set olns = Application.GetNameSpace("MAPI")
    ' Set the folder to the Contacts folder
    Set myFolder = olns.GetDefaultFolder(olFolderContacts)
    ' #1/1/4501# is Outlook's internal representation of an
    ' empty data value.
    If Item.LastModificationTime = #1/1/4501# Then
       ' Item is a brand new item
       MsgBox "New Item"
       If Item.Mileage = "" Then
<PRE></PRE>          ' We're creating the first item in the folder
          Item.Mileage = 1
       Else
          ' Increment the index in the Mileage field
          Item.Mileage = CStr(CInt(Item.Mileage) + 1)
       End If
       ' The following 3 lines re-publish the form to
       ' the Contacts folder with the new index number
       ' in the Mileage field.
       Set myForm = Item.FormDescription
       myForm.Name = myFormName
       myForm.PublishForm olFolderRegistry, myFolder
    Else
       ' Item is an existing item
       MsgBox "Existing Item, doing nothing"
    End If
    End Sub

</PRE><P><LI>Using your right mouse button, click the Contact folder and from the
   context-sensitive menu, click Properties.

<P><LI>Set the "When posting to this folder, use" option to the name of
   published form so that the form is the default form for the folder.

<P><LI>Set the view to one of Outlook's "table" views and then using the Field
   Chooser, drag the Mileage field to the column heading so you can easily
   see the values in that field.
<P>
</OL><h3>Use Microsoft Access 97 to Generate the Unique ID</h3>
 
<P>
You can use this method as part of a much larger data-synchronizing
solution between Outlook and Microsoft Access. For example, you store a
master copy of contact data in Microsoft Access.  In this case, you match
the Mileage field to a primary key field in Microsoft Access.
<P>
A custom Outlook contact form can have an Item_Open event in VBScript that
checks the Mileage field and then uses Data Access Objects (DAO) to
retrieve the information for the contact. If the Mileage field is empty,
this means the user created a new contact item and DAO code is used to
create a new contact record in the Microsoft Access database. This
automatically generates a unique ID for the record, and code can retrieve
and store this ID in the Outlook Mileage field.
<P>
<P><h3>Use an Item in a Folder</h3>
 
<P>
Instead of using a published form, an Outlook item can store the last-used
ID number. If you place the item in the same folder as the other numbered
items, one issue to consider is that someone might accidentally delete the
item storing the last-used number. To safeguard this, you can store the
item in a different folder.
<P>
<P><h3>Text File</h3>
 
<P>
Store the last-used number in a separate text file on the hard drive using
the FileSystemObject that is available with VBScript version 2.0.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about creating solutions with Microsoft Outlook 97,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     : OL97: How to Get Help Programming with Outlook

   Article-ID: <B><A HREF="../vbapps/Q170783.htm">Q170783</A></B>
   Title     : OL97: Q&amp;A: Questions about Customizing or
               Programming Outlook
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97 count<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

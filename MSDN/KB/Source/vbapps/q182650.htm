

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL98: No Automatic Type Coercion Between Variable Types </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q182650">
<META NAME="KBModify" CONTENT="1998/03/18">
<META NAME="KBCreate" CONTENT="1998/03/17">
<META NAME="Keywords" CONTENT="kberrmsg kbprg kbdta kbdtacode xlvbahowto xlvbainfo xl97vbmigrate">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you run a Visual Basic for Applications macro in Microsoft Excel 98 Macintosh Edition, you may receive the following error message:     Compile error:    ByRef argument type mismatch  CAUSE =====  This problem may occur if all of the following...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBVP,QAYL,QAKD,QBS0,QAH6,QAP2,QBE7,QBE6,QA4Q,QAD7,QAFF,QAY2,QAH7,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL98: No Automatic Type Coercion Between Variable Types</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 18, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q182650</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you run a Visual Basic for Applications macro in Microsoft Excel 98
Macintosh Edition, you may receive the following error message:
<P>
<PRE>   Compile error:
   ByRef argument type mismatch

</PRE><h2>CAUSE</h2>
 
<P>
This problem may occur if all of the following conditions are true:

<UL><LI>Within your code, one macro is executing another macro.
<P>
<P><PRE>    -and-
</PRE>
<LI>The first macro is attempting to pass a value to the second macro. The
   value in question is an element of an array declared as type Variant.
<P>
<P><PRE>    -and-
</PRE>
<LI>The second macro is set up to accept a value from the first macro, but
   of a type other than Variant (Integer or Long, for example).
<P>
</UL><h2>WORKAROUND</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
The following workarounds assume that you have a Visual Basic module that
contains two macros:
<P>
<PRE>   Sub Macro1()
       Dim X As Variant
       X = ActiveWorkbook.Sheets("Sheet1").Range("A1:A5")
       Macro2 X(1, 1)          ' X is an array of type Variant...
   End Sub

   Sub Macro2(Y As Integer)    ' ...but Macro2 expects an Integer.
       MsgBox Y
   End Sub

</PRE>When run, the first macro (Macro1) initializes an array named X, populates
the array, and then sends a value from the array to the second macro
(Macro2). Macro2 then displays the value in a message box. If you run
Macro1 without applying any of the following workarounds, you will receive
the error message mentioned in the "Symptoms" section.
<P>
<P><h3>Method 1</h3>
 
<P>
To prevent the problem from occurring, change how the second macro (Macro2)
accepts values. In this case, change the second macro to
<P>
<PRE>   Sub Macro2(Y As Variant)    ' Y is now a Variant, not an Integer.
       MsgBox Y
   End Sub

</PRE>to eliminate the problem, because an element from an array of type Variant
is being sent to a variable of type Variant.
<P>
<P><h3>Method 2</h3>
 
<P>
A second way to prevent the problem from occurring is to convert the value
to an Integer as you pass it to the second macro using the CInt function.
<P>
<PRE>   Sub Macro1()
       Dim X As Variant
       X = ActiveWorkbook.Sheets("Sheet1").Range("A1:A5")
       Macro2 CInt(X(1, 1))  ' Convert Variant X(1, 1) using Cint.
   End Sub

   Sub Macro2(Y As Integer)  ' Macro2 expects an Integer.
       MsgBox Y
   End Sub

</PRE><h3>Method 3</h3>
 
<P>
Another way to prevent the problem from occurring is to dimension a second
variable in the first macro. This second variable should be of the same
type as the value accepted by the second macro. The value from the array is
copied into the second variable, which is then sent to the second macro.
For example:
<P>
<PRE>   Sub Macro1()
       ' Z is the second variable. It is an Integer, just like Y.
       Dim X As Variant, Z As Integer

       X = ActiveWorkbook.Sheets("Sheet1").Range("A1:A5")
       Z = X(1, 1) ' Get the value from the array and put it in Z.
       Macro2 Z    ' This works correctly.
   End Sub

</PRE>Because Z is an Integer, the value of Z is received by Macro2 (which
expects an Integer) correctly.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design of Microsoft Excel 98 Macintosh Edition. The
behavior demonstrated by earlier versions of Microsoft Excel is actually
incorrect.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In earlier versions of Microsoft Excel, a value can be passed from an
element in an array of type Variant in one function to a variable of
another type in another function. This is called "automatic type coercion,"
because the value passed between functions is being forced (coerced) to
switch from one type (Variant) to another type (Integer, for example).
<P>
In Microsoft Excel 98 Macintosh Edition, automatic type coercion is not
supported. Because of this, you may need to ensure that your macros
consistently use the same types of variables when passing values from macro
to macro.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL98<BR>
Keywords          : kberrmsg kbprg kbdta kbdtacode xlvbahowto xlvbainfo xl97vbmigrate<BR>
Version           : MACINTOSH:98<BR>
Platform          : MACINTOSH<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 18, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

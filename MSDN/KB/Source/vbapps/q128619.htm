

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRJ: Using DDEExecute to Pass Arguments to MS Project Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128619">
<META NAME="KBModify" CONTENT="1997/11/24">
<META NAME="KBCreate" CONTENT="1995/04/05">
<META NAME="Keywords" CONTENT="kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  A macro that supports DDEExecute or an equivalent command can pass arguments to Microsoft Project macros. However, note that you cannot use OLE Automation to do pass arguments.  MORE INFORMATION  The Visual Basic, Applications Edition, Macro method...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAH6,QAD7,QAH7,QBVP,QATX,QAB9,QBV8,QAPN,QAHE,QAZ2,QBS0,QBII,QAYL,QAJQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRJ: Using DDEExecute to Pass Arguments to MS Project Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128619</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Project 98 for Windows
<LI>Microsoft Project for Windows 95, versions 4.1, 4.1a
<LI>Microsoft Project for Windows, version 4.0
<LI>Microsoft Project for the Macintosh, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
A macro that supports DDEExecute or an equivalent command can pass
arguments to Microsoft Project macros. However, note that you cannot use
OLE Automation to do pass arguments.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The Visual Basic, Applications Edition, Macro method does not accept
arguments. Therefore, a non-project macro cannot use OLE Automation to run
a Microsoft Project macro that requires arguments.
<P>
However, some applications support DDE commands that can be used to send a
command string to another application that also supports DDE. For example,
Microsoft Word, Microsoft Excel, Microsoft Project, and Microsoft Access
supply the DDEExecute command, and Microsoft Visual Basic has the
LinkExecute method. These DDE commands, or an equivalent DDE command, can
be used to run a Microsoft Project macro that requires arguments.
<P>
NOTE: The only macros that can send parameters via DDE are macros located
in the active macro library or in a library referenced by the active macro
library. The active macro library is GLOBAL.MPT or the active project (if
it contains macros). When a project is first opened or created, the active
macro library is GLOBAL.MPT.
<P>
<P><h3>Example 1</h3>
 
<P>
Assume that Microsoft Project is running, and that all macros in the
current session are in GLOBAL.MPT and each macro has a distinct name. The
Microsoft Excel macro, ExcelMacro1, passes the string "Plumbing" and the
long integer 48000 to the Microsoft Project macro, ProjectMacro1.
ProjectMacro1 uses these arguments to add a new task called "Plumbing" with
a duration of 48000 minutes.
<P>
<PRE>'This macro is in a Microsoft Project module in GLOBAL.MPT.
'It is called from the Microsoft Excel macro below.

Sub ProjectMacro1(sName As String, longMinutes As Long)

    'declare variables
    Dim T As Object

    'create a new task and set the name based on passed parameter "sName"
    Set T = ActiveProject.Tasks.Add (Name:=sName)

    'set new task's duration equal to passed parameter "longMinutes"
    T.Duration = longMinutes

End Sub

'This macro is in a Microsoft Excel module; when you run it,
'it calls the above Microsoft Project macro procedure.

Sub ExcelMacro1()

    'declare variables
    Dim channel As Integer, command As String

    'establish a DDE channel to Microsoft Project's system topic
    channel = DDEInitiate("winproj","system")

    'create a command string
    'double quotes are used to quote an item within a quoted string
    command = "ProjectMacro1 ""Plumbing"", 48000"

    'send command string to Microsoft Project
    DDEExecute channel, command

    'terminate DDE channel to Microsoft Project
    DDETerminate channel

End Sub

</PRE>The DDE command string that Microsoft Project sees is:
<P>
<PRE>    ProjectMacro1 "Plumbing", 48000

</PRE><h3>Example 2</h3>
 
<P>
This is the same as the above example, except that the Microsoft Excel
macro, ExcelMacro2, passes the values stored in cells A1 and B1 of the
active sheet to the above procedure "ProjectMacro1". The string "Plumbing"
is in cell A1 and the long integer 48000 is in cell B1.
<P>
<PRE>'This macro is in an Excel module; when run,
'it calls the above Microsoft Project macro.
'The worksheet containing this data must be
'active when the macro is run.

Sub ExcelMacro2()

    'declare variables
    Dim channel As Integer, command As String
    Dim stringX As String, longY As Long

    'store values in spreadsheet cells into variables
    stringX = Range("A1")
    longY = Range("B1")

    channel = DDEInitiate("winproj","system")

    'Chr(34) is the quote character.  It is used to concatenate
    'quotes around the stringX variable in the DDE command string.

    command = "ProjectMacro1 " &amp; Chr(34) &amp; stringX &amp; Chr(34) &amp; _
               ", " &amp; longY

    'The quote character could have been incorporated directly,
    'without the Chr function, as follows:

    'command = "ProjectMacro1 """ &amp; stringX &amp; """, " &amp; longY

    DDEExecute channel, command
    DDETerminate channel

End Sub

</PRE>The DDE command string that Microsoft Project sees is:
<P>
<PRE>    ProjectMacro1 "Plumbing", 48000
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: parameter function procedure value send 4.00<BR>
Keywords          : kbcode kbprg<BR>
Version           : 4.0 4.1 98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

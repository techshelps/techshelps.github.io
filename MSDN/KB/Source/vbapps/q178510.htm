

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Excel Automation: Method of Object '_Global' Failed </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q178510">
<META NAME="KBModify" CONTENT="1997/12/30">
<META NAME="KBCreate" CONTENT="1997/12/23">
<META NAME="Keywords" CONTENT="kberrmsg vb4win vb5all vb4all VBKBAutomation">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  While running code that uses Automation to control Microsoft Excel, one of the following errors may occur.  With Microsoft Excel 97, you receive the error:     Run-time error '1004':    Method '                ' of object '_Global' failed     -or- ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QAH4,QBS0,QAW6,QAYL,QAAP,QAB4,QAGI,QBWS,QDO5,QBXS,QA2K,QAYV,QAIJ P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Excel Automation: Method of Object '_Global' Failed</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q178510</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Learning, Professional, and Enterprise Editions
   for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions
   for Windows, version 4.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Visual Basic for Applications version 5.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
While running code that uses Automation to control Microsoft Excel, one of
the following errors may occur.
<P>
With Microsoft Excel 97, you receive the error:
<P>
<PRE>   Run-time error '1004':
   Method '&lt;name of method&gt;' of object '_Global' failed

   -or-

   Application-defined or object-defined error

</PRE>With Microsoft Excel 95, you receive the error:
<P>
<PRE>   Run-time error '-2147023174'
   OLE Automation error

</PRE><h2>CAUSE</h2>
 
<P>
Visual Basic has established a reference to Excel due to a line of code
that calls an Excel object, method, or property without qualifying it with
an Excel object variable. Visual Basic does not release this reference
until you end the program. This errant reference interferes with automation
code when the code is run more than once.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Modify the code so that each call to an Excel object, method, or property
is qualified with the appropriate object variable.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To automate Microsoft Excel, you establish an object variable that usually
refers to the Excel Application or Workbook object. Other object variables
can then be set to refer to a Worksheet, a Range, or other objects in the
Microsoft Excel object model. When you write code to use an Excel object,
method, or property, you should always precede the call with the
appropriate object variable. If you do not, Visual Basic establishes its
own reference to Excel. This reference may cause problems when trying to
run the automation code multiple times. Note that even if the line of code
begins with the object variable, there may be a call to an Excel object,
method, or property in the middle of the line of code that is not preceded
with an object variable.
<P>
The following steps illustrate how to reproduce this problem, and how to
correct it.
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 

<OL><P><LI>Start a new Standard EXE project in Visual Basic. Form1 is created by
   default.

<P><LI>Click References from the Project menu and check Microsoft Excel 8.0
   Object Library.

<P><LI>Place a CommandButton on Form1.

<P><LI>Copy the following code to the Code Window of Form1:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Private Sub Command1_Click()
<PRE></PRE>         Dim xlApp As Excel.Application
         Dim xlBook As Excel.Workbook
         Dim xlSheet As Excel.Worksheet
         Set xlApp = CreateObject("Excel.Application")
         Set xlBook = xlApp.Workbooks.Add
         Set xlSheet = xlBook.Worksheets("Sheet1")
         xlSheet.Range(Cells(1, 1), Cells(10, 2)).Value = "Hello"
         xlBook.Saved = True
         Set xlSheet = Nothing
         Set xlBook = Nothing
         xlApp.Quit
         Set xlApp = Nothing
      End Sub

</PRE><P><LI>On the Run menu, click Start or press the F5 key to start the program.

<P><LI>Click the CommandButton. No error occurs. However, a reference
   to Excel has been created and has not been released.

<P><LI>Click the CommandButton again and note that you receive one of the
   errors previously described.
<P>
   NOTE: The error occurs because the code refers to the Cell's method
   without preceding the call with the xlSheet object variable.

<P><LI>Stop the project and change the following line:
<P>
<P><PRE>      xlSheet.Range(Cells(1,1),Cells(10,2)).Value = "Hello"
</PRE><P>
   to:
<P>
<P><PRE>      xlSheet.Range(xlSheet.Cells(1,1),xlSheet.Cells(10,2)).Value = "Hello"
</PRE>
<P><LI>Run the program again. Note that you can run the code multiple times
   without error.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q167223.htm">Q167223</A></B>
   TITLE     : Microsoft Office 97 Automation Help File Available on MSL

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: activex automation OLE automation<BR>
Keywords          : kberrmsg vb4win vb5all vb4all VBKBAutomation<BR>
Technology        : kbvba<BR>
Version           : WINDOWS:4.0,5.0,7.0,7.0a,97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

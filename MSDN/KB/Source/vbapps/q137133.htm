

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WE1182: "Customizing Menu Bars, Menus, and Menu Items" </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q137133">
<META NAME="KBModify" CONTENT="1997/10/06">
<META NAME="KBCreate" CONTENT="1995/09/20">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo xlwin kbappnote kbcode kbfile kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The Application Note  Customizing Menu Bars, Menus, and Menu Items  (WE1182) is now available from Microsoft Product Support Services. This Application Note can help you learn some techniques for writing Visual Basic, Applications Edition, code for...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAF0,QAVI,QANS,QBS0,QBVP,QDKR,QAH4,QBWR,QBJZ,QAFF,QAJH,QBDM,QAMB,QABA,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WE1182: "Customizing Menu Bars, Menus, and Menu Items"</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 6, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q137133</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The Application Note "Customizing Menu Bars, Menus, and Menu Items"
(WE1182) is now available from Microsoft Product Support Services. This
Application Note can help you learn some techniques for writing
Visual Basic, Applications Edition, code for use with custom menus.
This Application Note is meant to be used as a supplement to Chapter
12 ("Menus and Toolbars") of the "Visual Basic User's Guide." The
Vba_mnu.xls file included with this Application Note contains code
examples you can run. These code examples can be used with the
following elements: menu bars, menu items, submenus, and shortcut
menus.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can obtain this Application Note from the following sources:

<UL><LI>Microsoft's World Wide Web Site on the Internet
<LI>The Internet (Microsoft anonymous ftp server)
<LI>The Microsoft Network (MSN)
<LI>Microsoft Download Service (MSDL)
<LI>Microsoft Product Support Services
<P>
</UL>For complete information, see the "To Obtain This Application Note" section
at the end of this article.
<P>
<P><h2>THE TEXT OF WE1182</h2>
 
<P>
 
<PRE>  Microsoft(R) Product Support Services Application Note (Text File)
         WE1182: CUSTOMIZING MENU BARS, MENUS, AND MENU ITEMS
</PRE> 
<PRE>                                                   Revision Date: 9/95
                                                       1 Disk Included

</PRE>The following information applies to Microsoft Excel, version 5.0,
5.0c.
<P>
 
<PRE> INFORMATION PROVIDED IN THIS DOCUMENT AND ANY SOFTWARE THAT MAY
 ACCOMPANY THIS DOCUMENT (collectively referred to as an Application
 Note) IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 PURPOSE. The user assumes the entire risk as to the accuracy and
 the use of this Application Note. This Application Note may be
 copied and distributed subject to the following conditions:  1) All
 text must be copied without modification and all pages must be
 included;  2) If software is included, all files on the disk(s)
 must be copied without modification (the MS-DOS(R)  utility
 diskcopy is appropriate for this purpose);  3) All components of
 this Application Note must be distributed together;  and  4) This
 Application Note may not be distributed for profit.

 Copyright (C) 1995 Microsoft Corporation.  All Rights Reserved.
 Microsoft, MS-DOS, Visual Basic and Windows are registered
 trademarks of Microsoft Corporation.
</PRE> 
<P>
<PRE>                           TABLE OF CONTENTS
                           =================

</PRE>Overview
<P>
How to Use the Examples in This Application Note
<PRE>   Using the Vba_mnu.xls File
      To install the Vba_mnu.xls file on your hard disk
      To use Vba_mnu.xls
   Using the Examples in the Text of This Application Note

</PRE>Visual Basic Code Examples and Tips
<PRE>   Menu Bars
      To save the active menu bar state (either built-in or
      customized)
   Menus
      To count the number of menus on the worksheet menu bar
   Menu Items
      To add a separator bar menu item
      To add a shortcut key to a menu item
      To assign a Help file to a menu item
   Submenus
      To add a submenu
      To delete a submenu
   Shortcut Menu Bars
   Shortcut Menus
      To add a menu item to the "Shortcut menu 1" menu bar
      To delete a menu item from a shortcut menu bar
      To restore a menu item on built-in shortcut menu bar

</PRE>Where to Find More Information
<PRE>   The Object Browser
   Microsoft Knowledge Base
   FastTips System



                               OVERVIEW
                               =========

</PRE>While many of the common tasks associated with customizing menu bars
and menus can be accomplished with the Menu Editor (with a module
sheet active, click Menu Editor on the Options menu), in order to get
further functionality from menu bars and menus, or to tailor them for
a custom-built application, you may want to create Visual Basic(R),
Applications Edition, procedures.
<P>
For more information about the Menu Editor, see pages 242-248 of the
"Visual Basic User's Guide."
<P>
This Application Note can help you learn some techniques for writing
Visual Basic, Applications Edition, code for use with custom menus.
This Application Note is meant to be used as a supplement to Chapter
12 ("Menus and Toolbars") of the "Visual Basic User's Guide." The
Vba_mnu.xls file included with this Application Note contains code
examples you can run. These code examples can be used with the
following elements: menu bars, menu items, submenus, and shortcut
menus.
<P>
Microsoft provides examples of Visual Basic procedures for
illustration only, without warranty either expressed or implied,
including but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. These Visual Basic procedures
are provided 'as is' and Microsoft does not guarantee that they can be
used in all situations. Microsoft does not support modifications of
these procedures to suit customer requirements for a particular
purpose.
<P>
<PRE>           HOW TO USE THE EXAMPLES IN THIS APPLICATION NOTE
           =================================================

</PRE><h2>USING THE VBA_MNU.XLS FILE</h2>
 
<P>
To use the Vba_mnu.xls file, copy it to a folder on your hard disk,
and open it in Microsoft Excel.
<P>
<P><h3>To install the Vba_mnu.xls file on your hard disk</h3>
 

<OL><P><LI>If you received a disk with this Application Note, insert the disk
   in the appropriate floppy disk drive. If you downloaded this
   Application Note from an online service, skip to step 2. This
   procedure assumes that you have already downloaded and extracted
   the compressed file.

<P><LI>Copy the Vba_mnu.xls file from the WE1182 disk (or from the folder
   to which you downloaded and extracted the We1182.exe file) to the
   appropriate folder on your hard disk.
<P>
</OL>For more information about copying files, see your Windows "User's
Guide" or Windows online Help.
<P>
<P><h3>To use Vba_mnu.xls</h3>
 

<OL><P><LI>Start Microsoft Excel, and click Open on the File menu.

<P><LI>Select the folder to which you installed the Vba_mnu.xls file,
   select Vba_mnu.xls, and click Open.

<P><LI>To run this example, click Menu Example on the Tools menu.

<P><LI>To quit the example, click Restore Menus on the ResetMenu menu.
<P>
</OL><h2>USING THE EXAMPLES IN THE TEXT OF THIS APPLICATION NOTE</h2>
 
<P>
The examples in the text portion of this Application Note demonstrate
ways you can use Visual Basic, Applications Edition, code to
accomplish basic tasks with menus.
<P>
<PRE>                  VISUAL BASIC CODE EXAMPLES AND TIPS
                  ===================================

</PRE></OL><h2>MENU BARS</h2>
 
<P>
Menu bars are the objects on which menus, menu items, and submenus are
built.
<P>
<PRE>                                            See this page of
                                            the "Visual Basic
 For information about this topic           User's Guide"
 ------------------------------------------------------------

 To add a new menu bar                      243-244, 250
 To activate a created or built-in menu bar 250
 To delete a custom menu bar                251
 To determine whether a menu is built-in    250
 To count the number of menu bars available 249
 To restore all built-in menu bars, menus,  251
 and menu items

</PRE>For a list of the built-in menu bars included in Microsoft Excel 5.0, see
page 244 of the "Visual Basic User's Guide." The following table lists the
menu bars that are included in Microsoft Excel 5.0 to maintain
compatibility with earlier versions of Microsoft Excel. These menu bars are
not listed in the "User's Guide." (To display these menus, click Options on
the Tools menu, and select Microsoft Excel version 4.0 menus on the General
tab.)
<P>
<PRE> Built in
 menu bar name          Description
 -------------------------------------------------------------

 Worksheet (XL4)        The menu bar that appears when a
                        Microsoft Excel 4.0 worksheet is active.

 Chart (XL4)            The menu bar that appears when a
                        Microsoft Excel 4.0 chart is active.

 Worksheet (XL4,        The menu bar that appears when you use
 Short)                 the right mouse button to click an object
                        in a Microsoft Excel 4.0 worksheet.

 Chart (XL4,            The menu bar that appears when you use
 Short)                 the right mouse button to click an object
                        in a Microsoft Excel 4.0 chart.

</PRE>For information about Constants to use with built-in menu bars, see
pages 249-250 of the "Visual Basic User's Guide." Constants that are
not included in the "User's Guide" are listed in the following table.
<P>
<PRE> This constant      Is associated with this menu bar
 ---------------------------------------------------

 xlWorksheet4       Worksheet (XL4)

 xlChart4           Chart (XL4)

 xlWorksheetShort   Worksheet (XL4, Short)

 xlShortChart       Chart (XL4, Short)

</PRE><h3>To save the active menu bar state (either built-in or customized)</h3>
 
<P>
You may want to declare "oldMenuBar" as a public variable so that
another subroutine can use it in an Auto_Close subroutine. Declaring
and using the variable this way will reset the user's previous menu
bar to its original state.
<P>
<PRE>   Public oldMenuBar

   Sub MenuBars_Ex4()
      oldMenuBar = ActiveMenuBar.Index()
   End Sub

</PRE><h3>To determine the name of the active menu bar</h3>
 
<P>
<PRE>   Sub MenuBars_Ex5()
      MsgBox ActiveMenuBar.Caption
   End Sub

</PRE><h2>MENUS</h2>
 
<P>
Menus are added to either a custom or built-in menu bar.
<P>
<PRE>                                             See this page of the
 For information about this topic            "Visual Basic User's Guide"
 -----------------------------------------------------------------------

 To add a menu to the worksheet menu bar      252

 To delete a menu from the worksheet menu     252
 bar

 To restore a deleted built-in menu on the    252
 worksheet menu bar

 To disable a menu on the worksheet menu      252
 bar

</PRE><h3>To count the number of menus on the worksheet menu bar</h3>
 
<P>
<PRE>   Sub Menu_Ex5()
      MsgBox MenuBars(xlWorksheet).Menus.Count
   End Sub

</PRE><h2>MENU ITEMS</h2>
 
<P>
Menu items can be added to or removed from either built-in or custom
menus. They usually have an access key, and many of the built-in menu
items contain a shortcut key. Menu items that have an ellipsis (...)
following the caption denote a menu item that opens a dialog box. Menu
items that have a small black arrow after the caption will display one
or more submenu items.
<PRE>                                             See this page of the
 For information about this topic            "Visual Basic User's Guide"
 -----------------------------------------------------------------------

 To add a menu item to an existing           253
 worksheet menu

 To delete a menu item                       253

 To disable a custom menu item               254

 NOTE: Built-in menu items cannot
 be disabled, only deleted.

 To add a check mark to a menu item          254

</PRE><h3>To add a separator bar menu item</h3>
 
<P>
To add a separator bar to a menu, use a hyphen in place of the caption
text of a menu item.
<P>
<PRE>   Sub menuitem_Ex4()
      MenuBars(xlWorksheet).Menus("&amp;Edit").MenuItems.Add _
         Caption:="-", Before:="Delete Sheet"
   End Sub

</PRE><h3>To add a shortcut key to a menu item</h3>
 
<P>
This macro adds a menu item called "Command1" with a CTRL+K shortcut
key to the Edit menu on the worksheet menu bar. It also specifies that
the "myShortCutExample" procedure is run when you press CTRL+K.
<P>
<PRE>   Sub menuItem_Ex5()
      With Application.MenuBars(xlWorksheet).Menus("&amp;Edit")
         .MenuItems.Add Caption:="Command&amp;1      Ctrl+K", _
         OnAction:="mnuShortCutKey", _
         StatusBar:="Short-cut key on a MenuItem"
         Application.OnKey "^k", "myShortCutExample"
      End With
   End Sub

</PRE><h3>To assign a Help file to a menu item</h3>
 
<P>
The following macro adds a menu item called "Visual Basic Help" to the
Help menu on the module sheet menu bar. The OnAction property runs the
Open_VisualBasic_Help macro, which opens the Help file.
<P>
Note: The StatusBar property is only available on Excel 5.0c and later.
<P>
<PRE>   Sub menuItem_Ex7()
     With Application.MenuBars(xlModule).Menus("&amp;Help")
       .MenuItems.Add _
         Caption:="Visual Basic Help", _
         OnAction:="Open_VisualBasic_Help", _
         Before:=1, _
         StatusBar:="Opens Excel Visual Basic Help"
     End With
   End Sub

</PRE>This macro opens the Contents topic of the Visual Basic Help file when
you select the "Visual Basic Help" menu item.
<P>
<PRE>   Sub Open_VisualBasic_Help()
      Application.Help Application.Path &amp; "\vba_xl.hlp", 65535
   End Sub

</PRE><h2>SUBMENUS</h2>
 
<P>
Submenus appear off to the side when a menu item is selected. A menu
item that has a submenu has a small black arrow located at the right
end of the menu item.
<P>
<P><h3>To add a submenu</h3>
 
<P>
This macro adds a menu item called "Command1" to the Edit menu (on the
worksheet menu bar). It then adds two submenu items to the Command1
menu item; both of these submenu items run a procedure called
"subMenuMacro."
<P>
<PRE>   Sub SubMenu_Ex1()
      With Application.MenuBars(xlWorksheet).Menus("&amp;Edit")
         .MenuItems.AddMenu Caption:="Command1"
         .MenuItems("Command1").MenuItems.Add _
            Caption:="Added SubMenu 1", _
            OnAction:="subMenuMacro"
         .MenuItems("Command1").MenuItems.Add _
            Caption:="Added SubMenu 2", _
            OnAction:="subMenuMacro"
      End With
   End Sub

</PRE>The subMenuMacro macro returns the caption text of the submenu when
either "Added SubMenu 1" or "Added SubMenu 2" is selected.
<P>
<PRE>   Sub subMenuMacro()
   Dim theSubMenu As String
   theSubMenu = Application.Caller
   With Application.MenuBars(xlWorksheet).Menus("Edit")
         MsgBox .MenuItems("Command1").MenuItems(theSubMenu).Caption
      End With
   End Sub

</PRE><h3>To delete a submenu</h3>
 
<P>
This macro deletes all of the submenus from the Fill menu item on the
Edit menu (on the worksheet menu bar).
<P>
<PRE>   Sub SubMenu_Ex2()

   Dim subMnuItm As Object

      For Each subMnuItm In
   Application.MenuBars(xlWorksheet).Menus("&amp;Edit"). _
         MenuItems("&amp;Fill").MenuItems
         subMnuItm.Delete
      Next subMnuItm

   End Sub

</PRE><h2>SHORTCUT MENU BARS</h2>
 
<P>
Shortcut menu bars appear when you use the right mouse button to click
a specific Microsoft Excel object. Microsoft Excel has three shortcut
menu bars that each have a variety of menus available. You cannot
create custom shortcut menu bars, although the built-in menu bars are
fully customizable. The following table lists all of the associated
menus that are available for each shortcut menu bar.
<P>
<PRE> Shortcut       Shortcut       Shortcut
 Menus 1        Menus 2        Menus 3
 -------------------------------------------

 Toolbar        Drawing        Chart Series
                Object
 Toolbar        Button         Chart Text
 Button
 Worksheet      Text Box       Chart Plot
 Cell                          Area
 Column         Dialog Sheet   Entire Chart
 Row                           Chart Axis
 Workbook Tab                  Chart
                               Gridline
 Macro Sheet                   Chart Floor
 Cell
 Title Bar                     Chart Legend
 Desktop
 Module
 Watch Pane
 Immediate
 Pane
 Debug Code
 Pane

</PRE><h2>SHORTCUT MENUS</h2>
 
<P>
<P><h3>To add a menu item to the "Shortcut menu 1" menu bar</h3>
 
<P>
This macro adds a menu item to the shortcut menu that is available
when the user is selecting a cell on a worksheet.
<P>
<PRE>   Sub ShortCut_Ex1()
      Application.MenuBars("Shortcut Menus 1") _
         .Menus("Worksheet Cell").MenuItems.Add _
         Caption:="Add 20%", _
         OnAction:="Add_Percent", _
         Before:=1
   End Sub

</PRE>The Add_Percent macro is run when the "Add 20%" menu item is selected
in the preceding shortcut menu bar example.
<P>
<PRE>   Sub Add_Percent()
      Dim temp As Variant
      temp = ActiveCell.Value
         If IsNumeric(temp) Then ActiveCell.Value = temp * 1.2
   End Sub

</PRE><h3>To delete a menu item from a shortcut menu bar</h3>
 
<P>
<PRE>    Sub Shortcut_Ex2()
       With Application.MenuBars("Shortcut Menus
    1").Menus("Worksheet Cell")
         .MenuItems("Clear Contents").Delete
       End With
    End Sub

</PRE><h3>To restore a menu item on built-in shortcut menu bar</h3>
 
<P>
This macro restores the "Clear Contents" menu item that was deleted in
the example above.
<P>
<PRE>    Sub Shortcut_Ex3()
      With Application.MenuBars("Shortcut Menus 1")
         .Menus("Worksheet Cell").MenuItems.Add _
         Caption:="Clear Contents", _
         Before:=8, _
         Restore:=True
     End With
    End Sub

</PRE><h2>WHERE TO FIND MORE INFORMATION</h2>
 
<P>
<P><h3>THE OBJECT BROWSER</h3>
 
<P>
A complete list of all of the properties and methods for a specific
menu item is available in the Object Browser. To find this
information, switch to a Visual Basic module, click Object Browser on
the View menu, and then select the name of the control you want from
the Excel Libraries/Workbooks list.
<P>
For more information about using the Object Browser, see pages 77-79
of the "Visual Basic User's Guide."
<P>
<P><h3>MICROSOFT KNOWLEDGE BASE</h3>
 
<P>
The Microsoft Knowledge Base is a primary Microsoft product information
source for Microsoft support engineers and is also available to Microsoft
customers. This comprehensive database contains more than 40,000 detailed
articles with technical information about Microsoft products, fix lists,
documentation errors, and answers to commonly asked technical support
questions. These articles are also available through The Microsoft Network,
the Microsoft TechNet CD-ROM, and the Microsoft Developer Network CD-ROM.
<P>
<P><h3>FASTTIPS SYSTEM</h3>
 
<P>
Microsoft FastTips is an automated, toll-free service that provides
technical information about key Microsoft products and is available 24
hours a day, 7 days a week in the United States and Canada. Using the
FastTips system, you can receive automated answers to common technical
problems and access popular articles from the Microsoft Knowledge
Base. This information is delivered over the phone through recorded
voice scripts, by fax, or through the U.S. mail.
<P>
<PRE>   Home Products FastTips                 (800) 936-4100
   Desktop Applications FastTips          (800) 936-4100
   Desktop Systems FastTips               (800) 936-4200
   Development Tools FastTips             (800) 936-4300
   Business Systems FastTips              (800) 936-4400
</PRE> 
<P>
<P><h2>TO OBTAIN THIS APPLICATION NOTE</h2>
 
<P>
The following file(s) are available for download from the Microsoft
Software Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/WE1182.EXE">WE1182.EXE</A> <I>(size: 66326 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE>If you are unable to access the source(s) listed above, you can have
this Application Note mailed to you by calling Microsoft Product Support
Services Monday through Friday, 6:00 A.M. to 6:00 P.M. Pacific time at
(425) 635-7070. If you are outside the United States, contact the Microsoft
subsidiary for your area. To locate your subsidiary, see the Microsoft
World Wide Offices Web site at:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/worldwide/default.htm">http://www.microsoft.com/worldwide/default.htm</A></B>
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00c appnote<BR>
Keywords          : kbprg PgmHowTo xlwin kbappnote kbcode kbfile kbprg<BR>
Version           : 5.00 5.00c<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 6, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

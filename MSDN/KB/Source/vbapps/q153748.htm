

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Call Functions from Microsoft Excel </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153748">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1996/07/17">
<META NAME="Keywords" CONTENT="AutoGnrl PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to call Microsoft Excel functions from within Microsoft Access using Automation.  This article assumes that you are familiar with Visual Basic ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QA1S,QAY5,QDN9,QAH4,QBMH,QAPN,QBV8,QAB9,QAGI,QBXS,QAFF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Call Functions from Microsoft Excel</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153748</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to call Microsoft Excel functions from
within Microsoft Access using Automation.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Excel offers some functions that are not available in Microsoft
Access, for example, statistical functions. You can access these functions
using Automation if you set a reference to the Microsoft Excel object
library.
<P>
To create a reference to the Microsoft Excel object library, follow these
steps:

<OL><P><LI>Open a module in Microsoft Access.

<P><LI>On the Tools menu, click References.

<P><LI>In the References box, select the Microsoft Excel Object Library
   appropriate for your version of Microsoft Excel, and then click OK.
<P>
   If you are using Microsoft Excel 5.0 or 7.0, select the Microsoft
   Excel 5.0 Object Library. If you are using Microsoft Excel 97, select
   the Microsoft Excel 8.0 Object Library.
<P>
</OL>Once the reference is created, you can use the Object Browser to view
all the Microsoft Excel objects, properties, and methods, including the
functions available through the Application object.
<P>
The following two sample subroutines use Microsoft Excel statistical
functions.
<P>
NOTE: Microsoft Excel does not automatically close after it has been
opened using Automation. The following functions use the Quit method to
close Microsoft Excel. For more information about quitting Microsoft
Excel, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q145770.htm">Q145770</A></B>
   TITLE     : ACC: Automation Does Not Close Microsoft Excel

</PRE></OL><h3>Example 1</h3>
 
<P>
The following function uses Automation to call the Microsoft Excel
Median() function. Half of the set of numbers fall below and half above
the median.
<P>
<PRE>   Sub xlMedian()
      Dim obj As Excel.Application
      Set obj = CreateObject("Excel.Application")
      MsgBox obj.Application.Median(1, 2, 5, 8, 12, 13)
      obj.Quit
      Set obj = Nothing
   End Sub

</PRE>The function displays 6.5 in a message box.
<P>
If you are using Microsoft Access 97 with Microsoft Excel 97, you can
simplify the code by calling the Microsoft Excel reference directly:
<P>
<PRE>   Sub xlMedian()
      MsgBox Excel.Application.Median(1, 2, 5, 8, 12, 13)
   End Sub

</PRE>NOTE: When you use this syntax, Microsoft Excel 97 remains in memory until
you reset your code or close your database. Note, too, that although this
syntax works with Microsoft Excel 7.0, Microsoft Excel 7.0 remains in
memory after you reset your code or close your database, and even after
you quit Microsoft Access. To conserve system resources, do not use this
syntax with Microsoft Excel 7.0.
<P>
<P><h3>Example 2</h3>
 
<P>
The following function uses Automation to call the Microsoft Excel
ChiInv() function, which returns the inverse or the one-tailed
probability of the Chi-Squared distribution:
<P>
<PRE>   Sub xlChiInv()
      Dim obj As Excel.Application
      Set obj = CreateObject("Excel.Application")
      MsgBox obj.Application.ChiInv(0.05, 10)
      obj.Quit
      Set obj = Nothing
   End Sub

</PRE>This function displays 18.3070290368475 in a message box.
<P>
If you are using Microsoft Access 97 with Microsoft Excel 97, you can
simplify the code by calling the Microsoft Excel reference directly:
<P>
<PRE>   Sub xlChiInv()
      MsgBox Excel.Application.ChiInv(0.05, 10)
   End Sub

</PRE>Refer to the NOTE in Example 1 for information about the ramifications of
using this syntax.
<P>
Microsoft Excel also uses add-ins. These are programs that include custom
functions and commands. If you need to use a function included in an
add-in program, you must first open the add-in. The following is an
example of using the LCM (Least Common Multiple) function:
<P>
<PRE>   Sub xlAddin()
      Dim obj As Excel.Application
      Set obj = CreateObject("Excel.Application")
      ' Opens the add-in, which is in the Analysis folder of the
      ' Microsoft Excel Library Directory.
      obj.workbooks.Open (obj.Application.librarypath &amp; _
       "\Analysis\atpvbaen.xla")
      ' Runs the AutoOpen macro in the add-in
      obj.workbooks("atpvbaen.xla").RunAutoMacros (xlAutoOpen)
      MsgBox obj.Application.Run("atpvbaen.xla!lcm", 5, 2)
      obj.Quit
      Set obj = Nothing
   End Sub

</PRE>This function displays 10 in a message box.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about using Automation, search for "Automation," and
then "Automation with Microsoft Access" using the Microsoft Access 97 Help
Index.
<P>
For more information about using the Object Browser, search for "Object
Browser," and then "Work with objects in Visual Basic using the Object
Browser" using the Microsoft Access 97 Help Index.
<P>
For more information about referencing type libraries, search for "Type
Libraries," and then "Set References to Type Libraries" using the
Microsoft Access 97 Help Index.
<P>
For more information about add-ins in Microsoft Excel, search for "add-in
programs" using the Microsoft Excel 97 Help Index.
 
<PRE>Keywords          : AutoGnrl PgmHowTo
Technology        : kbole
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

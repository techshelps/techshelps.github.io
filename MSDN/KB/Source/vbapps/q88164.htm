

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Introduction to Windows Programming for MS-DOS Programmer </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88164 ">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1992/08/19">
<META NAME="Keywords" CONTENT="kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article discusses some differences between programming in the MS-DOS environment and programming in the event-driven Windows environment.  MORE INFORMATION  For the purposes...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWN,QDL9,QBWQ,QBWO,QA1S,QAPN,QAH4,QDN9,QA5V,QAMA,QAW6,QBS0,QA5F,QAGB,QAB9 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Introduction to Windows Programming for MS-DOS Programmer</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88164 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article discusses some differences between programming in the MS-DOS
environment and programming in the event-driven Windows environment.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For the purposes of this discussion, consider the use of the term
"traditional programmer" as someone who has not programmed in Windows, but
who has experience programming in an MS-DOS environment.
<P>
As a traditional programmer, you may have become comfortable not only with
a particular programming style, but also with certain accepted
fundamentals, such as writing an instruction and expecting it to be
carried out in a controlled order. Visual Basic for Applications in
Microsoft Access for Windows 95 version 7.0 and 97 or Access Basic in
Microsoft Access 1.x and 2.0 makes good use of Windows, making Windows
programming easy to learn.
<P>
<P><h3>"One Entry, One Exit" vs. Event-Driven Programming</h3>
 
<P>
Consider the following pseudocode of a program designed to get user input,
to count all the records in a table, and to display the result in a box if
the user presses 1 or to exit if the user presses 2.
<P>
<PRE>   START PROGRAM

   LOOP WHILE TRUE
      GET KEYPRESS INTO X

      IF X IS "1"
         COUNT ALL RECORDS IN THE TABLE INTO Y
         DRAW BOX FROM ROW 10 COLUMN 5 TO ROW 12 COLUMN 7
         DISPLAY Y AT ROW 11 COLUMN 6

      IF X IS "2"
         EXIT LOOP

   END LOOP

   STOP PROGRAM

</PRE>The purpose of this program is to continuously loop until a key press of a
1 or 2 is detected. At that point, a decision is made to perform some sort
of operation or to ignore the key press and continue looping. The
programmer has full control over what happens.
<P>
The Windows programming model is event-driven and graphic object oriented.
In other words, programming in Windows involves creating objects and
modifying aspects (or properties) of those objects based on different
events. Consider the following sample program that presents two buttons to
the user. If the user chooses the Count button, the program counts the
records in the database and displays the result in a window. If the user
presses the Exit button, the program quits.
<P>
First, you create the necessary objects. Most of this phase of Visual
Basic for Applications or Access Basic programming is created graphically
with the Access Forms designer. The list of controls and properties below
defines a form that will be used to illustrate this.
<P>
<PRE>   Form: MasterForm
   ----------------------------
   Push Button: CountButton
       Caption: Count
       OnClick: =DisplayCount()
   Push Button: ExitButton
       Caption: Exit
       OnClick: =CloseProgram()
   Text Box: DisplayWindow

</PRE>NOTE: In Microsoft Access 1.x, the OnClick property is called OnPush.
<P>
You can then create the modules that the objects will invoke. In this
case, buttons are the only objects that will have the ability to invoke
procedures. The procedures shown below are pseudo-code examples. The first
procedure defined is the DisplayCount procedure:
<P>
<PRE>   PROCEDURE DisplayCount()

      COUNT ALL THE RECORDS IN THE TABLE INTO Y
      CHANGE THE DISPLAYWINDOW TEXT PROPERTY TO Y

   END PROCEDURE

</PRE>Notice that the code did not direct the resulting count to be displayed in
a box painted on the screen. Instead, the Text property of DisplayWindow
was changed to the resulting count value. The next procedure defined is
the CloseProgram procedure.
<P>
<PRE>   PROCEDURE CloseProgram

      CLOSE MASTERFORM

   END PROCEDURE

</PRE>Notice that this procedure does not provide an exit from some kind of loop
or other program structure. Instead, it closes the object that contains
the buttons and window.
<P>
At this point, you have a master form object containing two buttons, a
window, and a couple of coded procedures. They are in no special order;
they simply exist as part of the form. You may ask, "Where is the loop
that checks for button activity? Where is the command to invoke the
program?"
<P>
The answer is that these do not exist as you might expect them to. You
"run" the program by opening MasterForm. When you open the form, all the
control objects (that is, the buttons and so on) exist on the form,
waiting for something to happen. In this example, there is no flow of
control (no looping to check activity).
<P>
While the form is active, Windows constantly checks for events. When an
event occurs, the user's input is put in a queue and "waits in line" until
it is processed. For example, when you push the "Count" button, Windows
detects that the button object you placed on the form has been affected.
Windows sends a "Mouse Click" message to Microsoft Access. Microsoft
Access then translates the message and determines that the DisplayCount()
function should be called based on the "On Push" field of the command
button.
<P>
<P><h3>Advantages</h3>
 
<P>
The traditional programmer will find this new approach to programming a
bit challenging. There are a few things to learn and "unlearn," but there
are many advantages.
<P>
<P><h3>Windows Interface</h3>
 
<P>
The Windows interface has been regarded throughout the industry as being
very user-friendly. Familiar objects such as push buttons, radio buttons,
list boxes, and a wide variety of colors and screen fonts are generally
more appealing than standard ASCII text characters.
<P>
<P><h3>The Windows Standard</h3>
 
<P>
Because Visual Basic for Applications and Access Basic force you, to some
extent, into the Windows standard, others who are familiar with Windows
applications can immediately recognize the "look and feel" of your
application. This reduces the learning time because the user does not have
to learn entirely new interface controls and prompts.
<P>
<P><h3>Advantages Offered by the Windows Environment</h3>
 
<P>
You do not have to worry too much about different devices such as
monitors, printer drivers, and so on. The Windows operating environment
takes care of most device compatibility and user preference issues. In
addition, because Windows handles and processes events, you will find it
much easier to create and manage many aspects of an application.
 
<PRE>Keywords          : kbprg PgmOthr
Version           : 1.0 1.1 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

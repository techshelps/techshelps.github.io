

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: EnableCancelKey Property Ignored in Printing Procedure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151316">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1996/05/21">
<META NAME="Keywords" CONTENT="kbcode kbprg kbprint xlprint PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Microsoft Visual Basic for Applications in Microsoft Excel includes a  property, EnableCancelKey, that can trap or ignore attempts to interrupt a  procedure that is currently running. This property setting may be ignored  when you press CTRL+BREAK ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QADN,QAHC,QAGB,QAAP,QAB4,QAOX,QAPN,QA01,QAB9,QAH4,QAHB,QAGU,QBXS P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: EnableCancelKey Property Ignored in Printing Procedure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151316</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Microsoft Visual Basic for Applications in Microsoft Excel includes a 
property, EnableCancelKey, that can trap or ignore attempts to interrupt a 
procedure that is currently running. This property setting may be ignored 
when you press CTRL+BREAK or ESC (or COMMAND+PERIOD on the Macintosh).
<P>
<P><h2>CAUSE</h2>
 
<P>
The EnableCancelKey property will be ignored when you are printing within a
Visual Basic procedure.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
You cannot work around this issue.
<P>
NOTE: You can test to see if the printing was successful, but you cannot
stop the user from interrupting the printing. For an example of how to
accomplish this task with a macro, see the macro provided in the "More
Information" section of this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>Printing in a Visual Basic for Applications procedure is a function of
Microsoft Windows, not Microsoft Excel. Therefore, error trapping for user
interrupts would be ineffective because error trapping only applies for
Microsoft Excel actions. You can, however test to see if printing was
successful and take the appropriate steps. The following procedure traps
for user-interrupted or unsuccessful printing by assigning the Visual Basic
statement that performs the printing to a variable and testing the value of
the variable. Determining if the user interrupted the printing this way can
be tricky because the printing could also be unsuccessful for other
reasons, such as no default printer, a blank worksheet is active, and so
on. The following example procedure demonstrates in-line error handling
with user-interrupts disabled.
<P>
<P><h3>Handling Printing Errors Programmatically</h3>
 
<P>
<PRE>   ' This macro uses in-line error checking and assumes that the user
   ' does not have the ability to interrupt the macro.

   Sub InLinePrintHandling()
      Dim Printout_Successful As Boolean
      Dim response As Integer

      ' Because this macro is an example of In-Line error handling,
      ' it's assumed that errors are handled immediately after the
      ' line is executed.  Therefore, on every error we're resuming
      ' to the next line where there should be an IF test for
      ' possible errors.
      On Error Resume Next

      Application.EnableCancelKey = xlDisabled ' Disable user interrupts.

      Printout_Successful = False   ' Initialize the printing variable

      Do
         ' If there is some problem printing, Printout_Successful will
         'have a value of False.
         Printout_Successful = ActiveSheet.PrintOut

         If Not Printout_Successful Then

            ' Display a message box to ask the user if they would like to
            ' retry printing or to cancel printing.
            response = MsgBox("Printing failed due to your interruption " _
               &amp; "or some other problem. Do you want to Retry " &amp; _
               "printing or Cancel printing and continue with" &amp; _
               " the macro?", vbRetryCancel + vbCritical + _
               vbApplicationModal, "Print failure!")

            ' If you do not want to retry printing, exit the loop.
            If response = vbCancel Then Exit Do

         End If

      Loop Until Printout_Successful

   End Sub

</PRE>Run the macro above from a new worksheet that does not have any data. The
message box in the macro will appear because there will be a printing error
due to the fact there is nothing to print in your worksheet.
<P>
<P><h3>Trapping Escape Key with Error Handler</h3>
 
<P>
When a Visual Basic procedure is running, you can usually interrupt the
procedure by pressing CTRL+BREAK or ESC (or COMMAND+PERIOD on the 
Macintosh). If you allow your procedure to be interrupted, you can make
sure your procedure is notified so that it can close files, disconnect from
shared resources, or restore modified variables before returning control of
the application to the user.
<P>
You can trap user interrupts in your procedures by setting the
EnableCancelKey property to xlErrorHandler. With this property set, all
interrupts generate run-time error number 18, which you can trap using an
On Error statement. You can handle this error to halt the procedure and
exit the program. If you use the Resume statement to continue after a
trapped run-time error, however, the interrupt is ignored. You can also
ignore user interrupts completely by setting the EnableCancelKey property
to xlDisabled. To see an example of this, do the following:

<OL><P><LI>Enter the following in a new module sheet in a new workbook.
<P>
<PRE>      Sub Test_Esc()

         On Error GoTo handleCancel
         Application.EnableCancelKey = xlErrorHandler

         MsgBox "This may take a long time: press ESC to cancel"

         For x = 1 To 1000000    ' Do something 1,000,000 times (long!)
            ActiveSheet.Range("A1").Offset(x - 1, 0).Value = x
         Next x

         handleCancel:
            If Err = 18 Then         '18 is the error returned when the
               MsgBox "You canceled" 'EnableCancelKey property is set to
            End If                   'xlErrorHandler.

      End Sub

</PRE><P><LI>Activate Sheet1 in this workbook.

<P><LI>Run the Test_Esc macro.

<P><LI>Click OK in the message box informing you "This may take a long
   time..." and then press ESC.
<P>
</OL>Another message box will appear informing you that you canceled the
procedure.
<P>
For additional information, please see the following articles in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../URJump.htm">Q79488</A></B>
   TITLE     : Excel: ON.KEY Does Not Disable Macro Interruption
               with ESC Key

   ARTICLE-ID: <B><A HREF="../vbapps/Q146864.htm">Q146864</A></B>
   TITLE     : Error Trapping with Visual Basic for Applications

</PRE></OL>NOTE: You also cannot suppress the display of the printing dialog boxes by
using the DisplayAlerts property or ScreenUpdating property.
<P>
REFERENCES
 
<P>
"Visual Basic User's Guide," version 5.0, Chapter 9, "Advanced Error-
Handling Techniques"
<P>
For more information about the EnableCancelKey property, click Answer
Wizard on the Help menu and type:
<P>
<PRE>    EnableCancelKey
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 7.00a 8.00<BR>
Keywords          : kbcode kbprg kbprint xlprint PgmOthr<BR>
Version           : WINDOWS:5.0,5.0c,7.0,97; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

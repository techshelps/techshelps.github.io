

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: OnEntry Macro to Create a Running Total </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123578">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1994/12/05">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbahowto xlvbainfo xlformula PgmHowto PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, to avoid circular references when you create a running total in a cell, the total must be stored in a non-calculating part of the worksheet. This result can be achieved through a Microsoft Visual Basic for  Applications macro (S...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAWH,QBVP,QAH4,QADP,QBWS,QDNZ,QAKJ,QAGF,QAMB,QBJZ,QBDM,QAKD,QAFF,QAE5,QAUD P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: OnEntry Macro to Create a Running Total</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123578</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, versions 4.0, 4.0a, 5.0, 5.0c
<LI>Microsoft Excel 98 Macintosh Edition
<LI>Microsoft Excel for the Macintosh, versions 4.0, 5.0, 5.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel, to avoid circular references when you create a running
total in a cell, the total must be stored in a non-calculating part of the
worksheet. This result can be achieved through a Microsoft Visual Basic for 
Applications macro (Sub procedure). The sample macros in the "More 
Information" section of this article use cell notes or comments (in Excel 
97 and Excel 98) to store totals.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>To Create a Running Total in a Cell</h3>
 

<OL><P><LI>Enter the macro that applies to your version of Microsoft Excel. 
<P>
   Excel 97 and Excel 98
   ---------------------
<P>
   a. Start the Visual Basic Editor (press ALT+F11).
<P>
   b. On the Insert menu click Module.
<P>
<P><PRE>      This will insert a module into your project.
</PRE><P>
   c. Type the macros following step d into this module.
<P>
   d. After typing the macros, click "Close and Return to Microsoft Excel"
<P><PRE>      on the File menu.
</PRE><P>
<PRE>   ' The Auto_Open name forces this macro to run every time
   ' the workbook containing this macro is opened.
   Sub Auto_Open()
   '  Every time a cell's value is changed,
   '  the RunningTotal macro runs.
      Application.OnEntry = "RunningTotal"
   End Sub

   '----------------------------------------------------------
   ' This macro runs each time the value of a cell changes.
   ' It adds the current value of the cell to the value of the
   ' cell comment. Then it stores the new total in the cell comment.
   Sub RunningTotal()

   On Error GoTo errorhandler      ' Skip cells that have no comment.

      With Application.Caller

   '     Checks to see if the cell is a running total by
   '     checking to see if the first 4 characters of the cell
   '     comment are "RT= ". NOTE: there is a space after the equal
   '     sign.
         If Left(.Comment.Text, 4) = "RT= " Then

   '        Change the cell's value to the new value in the cell
   '        plus the old total stored in the cell comment.
            RT = .Value + Right(.Comment.Text, Len(.Comment.Text) - 4)
            .Value = RT

   '        Store the new total in the cell note.
            .Comment.Text Text:="RT= " &amp; RT
        End If
      End With

      Exit Sub      ' Skip over the errorhandler routine.

      errorhandler: ' End the procedure if no comment in the cell.
      Exit Sub

   End Sub

   '--------------------------------------------------------------
   ' This macro sets up a cell to be a running total cell.
   Sub SetComment()
      With ActiveCell
   '     Set comment to indicate that a running total is present.
   '     If the ActiveCell is empty, multiplying by 1 will
   '     return a 0.
         .AddComment
         .Comment.Text Text:="RT= " &amp; (ActiveCell * 1)
      End With
   End Sub

   Excel versions 5.0 and 7.0
   --------------------------

   a. On the Insert menu, point to Macro, and then click Module.

      This will insert a new module sheet into your workbook.

   b. Type the following macros into this module sheet:

      ' The Auto_Open name forces this macro to run every time
      ' the workbook containing this macro is opened.
      Sub Auto_Open()
      '  Every time a cell's value is changed,
      '  the RunningTotal macro runs.
         Application.OnEntry = "RunningTotal"
      End Sub

      ' This macro sets up a cell to be a running total cell.
      Sub SetNote()
         With ActiveCell
      '     Set note to indicate that a running total is present.
      '     If the ActiveCell is empty, multiplying by 1 will
      '     return a 0.
            .NoteText Text:="RT_" + (ActiveCell * 1)
         End With
      End Sub

      ' This macro runs each time the value of a cell changes.
      ' It adds the current value of the cell to the value of the
      ' cell note. Then it stores the new total in the cell note.
      Sub RunningTotal()
         With Application.Caller
      '     Checks to see if the cell is a running total by
      '     checking to see if the first 3 characters of the cell
      '     note are "RT_".
            If .NoteText(length:=3) = "RT_" Then
      '        Change the cell's value to the new value in the cell
      '        plus the old total stored in the cell note.
               .Value = .Value + .NoteText(start:=4)
      '        Store the new total in the cell note.
               .NoteText "RT_" + .Value
            End If
         End With
      End Sub

   Excel 4.0 Macro Code Example
   ----------------------------

   After you enter the macros, define Auto_Open, SetNote, and
   RunningTotal as command macros that refer to A1, A5, and A9
   respectively.

      A1: Auto_Open
      A2: =ON.ENTRY(,"RunningTotal")
      A3: =RETURN()
      A4:
      A5: SetNote
      A6: =NOTE("RT_"&amp;ACTIVE.CELL()*1)
      A7: =RETURN()
      A8:
      A9: RunningTotal
      A10: =IF(GET.NOTE(,,3)="RT_")
      A11: =   FORMULA(CALLER()+GET.NOTE(,4),CALLER())
      A12: =   NOTE("RT_"&amp;CALLER())
      A13: =END.IF()
      A14: =RETURN()

   Explanation of macro:

    - Cell A1 defines this cell as Auto_Open which causes this macro to
      run every time the macro sheet is opened.

    - Cell A2 runs the RunningTotal macro every time a cell's value is
      changed.

    - Cell A3 ends the Auto_Open macro.

    - Cell A5 contains the name of the macro that sets up a cell to be
      a running total cell.

    - Cell A6 sets the active cell's note to be "RT_" &amp; the value of
      the active cell.

    - Cell A7 ends the SetNote macro.

    - Cell A9 contains the macro that runs each time the value of a
      cell changes. It adds the current value of the cell to the value
      of the cell note. Then it stores the new total in the cell note.

    - Cell A10 checks to see if the cell is a running total by checking
      to see if the first 3 characters of the cell note are "RT_".

    - Cell A11 changes the cell's value to the new value in the cell
      and adds the old total stored in the cell note.

    - Cell A12 stores the new total in the cell note.

    - Cell A13 ends the IF() statement.

    - Cell A14 ends the RunningTotal macro.


</PRE><P><LI>Save and close your file, and then re-open it.
<P>
   The Auto_Open macro you typed will be executed when you open your file.

<P><LI>Select the cell that you want to contain the running total.

<P><LI>Follow the appropriate procedure below to run the SetNote (SetComment
   macro for Microsoft Excel 97) macro.
<P>
   Microsoft Excel 97
   ------------------
<P>
<P><PRE>      a. On the Tools menu point to Macro and then click Macros.
</PRE><P>
<P><PRE>      b. In the Macro dialog box click SetComment and then click Run.
</PRE><P>
   Microsoft Excel version 5.0 or 7.0
   ----------------------------------
<P>
<P><PRE>      a. On the Tools menu, click Macro.
</PRE><P>
<P><PRE>      b. From the Macro Name/Reference list, select the macro SetNote,
<PRE></PRE>         and then click Run.

   Microsoft Excel version 4.0
   ---------------------------

      a. On the Macro menu, click Run.

      b. Select the SetNote macro, and then click OK.


</PRE></OL><h3>To Remove a Running Total</h3>
 
<P>
To remove a running total, follow the appropriate procedure below for
your version of Microsoft Excel.
<P>
<PRE>   Excel 97 and Excel 98
   ---------------------

   1. Select the cell that contains the running total you want removed.

   2. Right-click the cell and click "Delete Comment" on the shortcut
      menu.

   Excel versions 5.0 and 7.0
   --------------------------

   1. Select the cell on the worksheet that contains the running total.

   2. On the Insert menu, click Note, and then click Delete.

   Excel version 4.0
   -----------------

   1. Select the cell on the worksheet that contains the running total.

   2. On the Formula menu, click Note, and then click Delete.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 4.00 4.00a 5.00 5.00c 7.00 8.00 continuous <BR>
cumulative<BR>
Keywords          : kbcode kbprg xlvbahowto xlvbainfo xlformula PgmHowto PgmOthr<BR>
Version           : WINDOWS:4.0,4.0a,5.0,5.0c,7.0,97<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL5: How to Manipulate Macro Operation With Key Strokes </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108357">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1993/12/08">
<META NAME="Keywords" CONTENT="kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, you can create a macro that performs different operations depending on which keys you press when you run the macro (for example, if you want your macro to perform one operation when you press the CTRL key and another if you don'...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAY5,QABH,QABI,QBS0,QALS,QAQT,QAMN,QDL9,QBWO,QBWN,QAB9,QABG,QBVV,QBVP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL5: How to Manipulate Macro Operation With Key Strokes</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108357</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel, you can create a macro that performs different
operations depending on which keys you press when you run the macro (for
example, if you want your macro to perform one operation when you press the
CTRL key and another if you don't press the CTRL key).
<P>
To control the operation of a macro, you can use one key (for example the
CTRL key) or a combination of keys (for example CTRL+ALT). Your macro will
test for the state of these keys (pressed or not pressed) to determine
which action to take.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To create a macro that responds to different key states, use an IF
function. The IF function allows you to control your macro based on the
results of calls it makes to the Windows environment. These calls to the
Windows environment allow the IF function to identify the state of the keys
you want to use. To return the key state of one or more keys, use the
Windows function, GetKeyState().
<P>
You can use the above procedure to change the operation of macros that are
already assigned to objects, buttons, menu commands, or hot keys.
<P>
NOTE: Making this kind of change will not affect the normal behavior of the
object to which the macro is assigned.
<P>
You can use any keys as long as they are not either of the following:

<UL><LI>The same keys that are used to start the macro.
<P>
   -or-

<LI>Keys that change how Microsoft Excel interacts with the object to
   which your macro is assigned.
<P>
</UL><h3>The GetKeyState() Function</h3>
 
<P>
The GetKeyState() function returns a number indicating the current state of
a specific key at the time the DLL call is made. A negative number
indicates that the key is pressed, a positive number indicates that the key
is not pressed.
<P>
The following GetKeyState() Visual Basic code is an example that returns
the current state of a key and takes action based on the key state
returned.
<P>
Microsoft provides examples of Visual Basic procedures for
illustration only, without warranty either expressed or implied,
including but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. This Visual Basic procedure
is provided 'as is' and Microsoft does not guarantee that it can be
used in all situations. Microsoft does not support modifications of
this procedure to suit customer requirements for a particular purpose.
Note that a line that is preceded by an apostrophe introduces a
comment in the code--comments are provided to explain what the code is
doing at a particular point in the procedure. Note also that an
underscore character (_) indicates that code continues from one line
to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This
Manual" section in the "Document Conventions" section of the "Visual
Basic User's Guide."
<P>
WARNING: The Declare Function statements listed in the following
macro are sensitive. If used incorrectly, these functions may
cause a general protection (GP) fault in Windows or cause serious
software problems.
<P>
<PRE>'Type the following two lines as a single line in the module
Declare Function GetKeyState Lib "USER" (ByVal nVirtKey As Integer) _
</PRE>As Integer
<P>
Const SHIFT_KEY = 16
Const CTRL_KEY = 17
Const ALT_KEY = 18
<P>
<PRE>Sub find_key()

   'Checks key states to see if both CTRL and ALT Keys are pressed
   If GetKeyState(CTRL_KEY) &lt; 0 And GetKeyState(ALT_KEY) &lt; 0 Then
     MsgBox "CTRL + ALT KEYS PRESSED"
   'Checks key states to see if only CTRL key is pressed
   ElseIf GetKeyState(CTRL_KEY) &lt; 0 Then
     MsgBox "CTRL KEY PRESSED"
   'Checks key states to see if only ALT key is pressed
   ElseIf GetKeyState(ALT_KEY) &lt; 0 Then
     MsgBox "ALT KEY PRESSED"
   'Checks key states to see if only SHIFT key is pressed
   ElseIf GetKeyState(SHIFT_KEY) &lt; 0 Then
     MsgBox "SHIFT KEY PRESSED"
   End If

End Sub

</PRE>The above example macro checks the state of the following keys or key
combinations: CTRL+ALT, CTRL, and ALT. The macro displays an alert box
describing the key or key combination that is pressed when you run the
macro.
<P>
The argument used to call the DLL function GetKeyState() is a number
indicating which key to test. The number used is the virtual key code
that the GetKeyState function uses to identify which key to test.
<P>
When you write your macro, you should be aware of the following:

<UL><LI>You should check for key state at the beginning of the macro. The
   GetKeyState() function returns the state of the key at the time the DLL
   function is called not at the time the macro is run. So, it is possible
   to miss the key state if you don't check for it right away.

<LI>The test you use for checking which key is pressed must follow correct
   programming logic.

<LI>Your macro should not check for too many key possibilities. The more
   possible key combinations you check for, the longer it takes your macro
   to find the right condition and, therefore, the greater the possibility
   that the key will no longer be pressed.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
"Microsoft Windows Software Developers Kit Reference," Volume 1, pages
1-30, 4-183
<P>
"Microsoft Windows Software Developers Kit Reference," Volume 2,
Appendix A
<P>
"Microsoft Quick C for Windows," pages 341, 935-938
<P>
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 call register keystate GPF<BR>
Keywords          : kbprg PgmOthr<BR>
Version           : 5.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

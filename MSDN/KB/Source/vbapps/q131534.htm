

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Simulate Parameters in an SQL Pass-Through Query </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q131534">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1995/06/13">
<META NAME="Keywords" CONTENT="kbusage ODBCSPT MdlDao">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates two sample user-defined Visual Basic for Applications functions that you can use to pass parameters to an SQL pass-through query.  This article ass...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QA1S,QBS0,QAY5,QAB9,QDN9,QAPN,QBV8,QAPF,QAD7,QAH6,QA5F,QAMA,QBXS,QAVX P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Simulate Parameters in an SQL Pass-Through Query</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q131534</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates two sample user-defined Visual Basic for
Applications functions that you can use to pass parameters to an SQL
pass-through query.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
An SQL pass-through query does not accept dynamic parameters as do other
Microsoft Access queries based on attached ODBC tables. This is so because
Microsoft Access does not process an SQL pass-through query; it sends the
literal commands (written in the syntax required by the SQL server)
directly to the server for processing.
<P>
To pass parameters to an SQL pass-through query, create a Visual Basic
function that builds and runs a QueryDef object using an SQL statement that
concatenates the parameter criteria as literal values. Examples 1 and 2
show you how to create the function.
<P>
<P><h3>Example 1</h3>
 
<P>
This sample function creates a QueryDef object that uses the "sp_addgroup"
system procedure from Microsoft SQL Server to add a new group. The new
group name is passed to the function and then concatenated into the SQL
statement for the QueryDef object. To create this sample function, follow
these steps:

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>      Function ParamSPT (NewGroup As String)
</PRE><P>
<PRE>         Dim MyDb As Database, MyQ As QueryDef
         Set MyDb = CurrentDB()

         ' Create a temporary QueryDef object that is not saved.
         Set MyQ = MyDb.CreateQueryDef("")

         ' Type a connect string using the appropriate values for your
         ' server.
         MyQ.connect = "ODBC;DSN=dsn1;UID=sa;PWD=;DATABASE=test"

         ' Set ReturnsRecords to false in order to use the Execute method.
         MyQ.returnsrecords = False

         ' Set the SQL property and concatenate the variables.
         MyQ.sql = "sp_addgroup" &amp; " " &amp; NewGroup

         Debug.Print MyQ.sql
         MyQ.Execute
         MyQ.Close
         MyDb.Close

      End Function

</PRE><P><LI>To run the sample function, type the following line in the Debug
   window (or the Immediate window in version 2.0), and then press ENTER:
<P>
<P><PRE>      ? ParamSPT("TESTERS")
</PRE><P>
   Note that the sample function displays the SQL statement sent to the
   SQL server for processing and creates a new group called TESTERS.
<P>
</OL><h3>Example 2</h3>
 
<P>
This sample Visual Basic function creates a QueryDef object that uses the
"sp_server_info" system procedure from Microsoft SQL Server to display
attributes about the server. The attribute's number is passed to the
function and then concatenated into the SQL statement for the QueryDef
object. To create this sample function, follow these steps:

<OL><P><LI>Create a module and type the following line in the Declarations section
   if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      Function ParamSPT2(MyParam As String)
</PRE><P>
<PRE>         Dim MyDb As Database, MyQry As QueryDef, MyRS  As Recordset
         Set MyDb = CurrentDB()
         Set MyQry = MyDb.CreateQueryDef("")

         ' Type a connect string using the appropriate values for your
         ' server.
         MyQry.connect = "ODBC;DSN=user1;UID=user1;PWD=user1;DATABASE=TEST"

         ' Set the SQL property and concatenate the variables.
         MyQry.SQL = "sp_server_info " &amp; MyParam

         MyQry.ReturnsRecords = True
         Set MyRS = MyQry.OpenRecordset()
         MyRS.MoveFirst

         Debug.Print MyRS!attribute_id, MyRS!attribute_name, _
            MyRS!attribute_value

         MyQry.Close
         MyRS.Close
         MyDb.Close

      End Function

</PRE><P><LI>To run this function, type the following line in the Debug window
   (or the Immediate window in version 2.0), and then press ENTER:
<P>
<P><PRE>      ? ParamSPT2("500")
</PRE><P>
   Note that this function displays the ID, name, and value for the
   specified attribute number.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the syntax for the SQL property of the SQL
pass-through query, see the documentation for your ODBC database server.
<P>
For more information about returning values from SQL stored procedures,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q128408.htm">Q128408</A></B>
   TITLE     : ACC: How to Return Values from SQL Stored Procedures

</PRE></OL>For more information about pass-through queries, search for "pass-through
query," and then "Send commands to an SQL database using a pass-through
query" using the Microsoft Access 97 Help menu.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: spt<BR>
Keywords          : kbusage ODBCSPT MdlDao<BR>
Version           : 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

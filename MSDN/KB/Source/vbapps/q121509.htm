

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Sample Function to Create a Running Sum on a Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q121509">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1994/10/06">
<META NAME="Keywords" CONTENT="kbusage PgmHowTo FmsHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes how to use a sample user-defined Visual Basic function to compute a running sum on a form.  This article assumes that you are familiar with Visual Basic fo...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAE5,QA1S,QA5V,QBS0,QAY5,QBWS,QA7O,QA7N,QDN9,QA5F,QAMA,QAH4,QBV8,QAB9,QDN0 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Sample Function to Create a Running Sum on a Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q121509</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes how to use a sample user-defined Visual Basic
function to compute a running sum on a form.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 2.0. For more information about Access Basic, please refer
to the "Building Applications" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
One way to compute a running sum on a form is to use the DSum() function.
For information about how to use the DSum() function to compute a running
sum on a form, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q103183.htm">Q103183</A></B>
   TITLE     : ACC: How to Create a Running Sum on a Form

</PRE>Using the method demonstrated in this article has the following advantages
over using the DSum() function:

<UL><LI>The method demonstrated in this article does not require a sequential ID
   field. A required sequential ID field limits you to computing a running
   sum using a single ordering of your records.

<LI>Using the method demonstrated in this article is significantly faster
   than using the DSum() function to compute a running sum.
<P>
</UL><h3>How to Create and Use the RunSum() Function</h3>
 

<OL><P><LI>Open the sample database Northwind.mdb (or NWIND.MDB in version 2.0).
   Create a new module, and type the following line in the Declarations
   section if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Enter the following code in the module.
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      Function RunSum (F As Form, KeyName As String, KeyValue, _
<PRE></PRE>        FieldToSum As String)
      '***********************************************************
      ' FUNCTION: RunSum()
      ' PURPOSE:  Compute a running sum on a form.
      ' PARAMETERS:
      '    F        - The form containing the previous value to
      '               retrieve.
      '    KeyName  - The name of the form's unique key field.
      '    KeyValue - The current record's key value.
      '    FieldToSum - The name of the field in the previous
      '                 record containing the value to retrieve.
      ' RETURNS:  A running sum of the field FieldToSum.
      ' EXAMPLE:  =RunSum(Form,"ID",[ID],"Amount")
      '***********************************************************
         Dim RS As Recordset
         Dim Result

         On Error GoTo Err_RunSum

         ' Get the form Recordset.
         Set RS = F.RecordsetClone

         ' Find the current record.
         Select Case RS.Fields(KeyName).Type
            ' Find using numeric data type key value?
            Case DB_INTEGER, DB_LONG, DB_CURRENCY, _
               DB_SINGLE, DB_DOUBLE, DB_BYTE
               RS.FindFirst "[" &amp; KeyName &amp; "] = " &amp; KeyValue
            ' Find using date data type key value?
            Case DB_DATE
               RS.FindFirst "[" &amp; KeyName &amp; "] = #" &amp; KeyValue &amp; "#"
            ' Find using text data type key value?
            Case DB_TEXT
               RS.FindFirst "[" &amp; KeyName &amp; "] = '" &amp; KeyValue &amp; "'"
            Case Else
               MsgBox "ERROR: Invalid key field data type!"
               GoTo Bye_RunSum
         End Select

         ' Compute the running sum.
         Do Until RS.BOF
            Result = Result + RS(FieldToSum)

            ' Move to the previous record.
            RS.MovePrevious
         Loop

      Bye_RunSum:
         RunSum = Result
         Exit Function

      Err_RunSum:
         Resume Bye_RunSum

      End Function

</PRE><P><LI>Create the following new query based on the Orders table and the
   Order Subtotals query. Save the query as qryOrders:
<P>
<P><PRE>      Query: qryOrders
      --------------------------------------------------------
      Type: select query
      Join: Orders.[OrderID] &lt;-&gt; [Order Subtotals].[OrderID]
</PRE><P>
<P><PRE>      NOTE: In version 2.0, there is a space in Order ID.
</PRE><P>
<P><PRE>      Field: OrderID
<PRE></PRE>         Table: Orders
         Sort: Ascending
      Field: Subtotal
         Table: Order Subtotals

</PRE><P><LI>Create a new form based on the qryOrders query using the Tabular
   Form Wizard. Include both fields on the form.

<P><LI>Add a text box with the following properties to the new form:
<P>
<P><PRE>      Name: RunningSum
      ControlSource: =RunSum([Form],"OrderID",[OrderID],"Subtotal")
      Format: Currency
</PRE><P>
   NOTE: In version 2.0, there is a space in Order ID.

<P><LI>Save the form and then view it in Form view.

<P><LI>Select different records using the record selector. Note that the
   Runningsum field shows an accumulated total based on the Subtotal
   field.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: total<BR>
Keywords          : kbusage PgmHowTo FmsHowTo<BR>
Version           : 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

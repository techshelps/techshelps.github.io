

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: Value Returned by VarType for Omitted Arguments Differs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q165103">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1997/03/12">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you call a custom Visual Basic for Applications function from a formula in a cell in a Microsoft Excel 97 worksheet, the VarType function may return different values for missing optional arguments than it does in earlier versions of Microsoft ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAY5,QAPN,QAHE,QAB9,QAUD,QAH4,QAGI,QAKD,QBV8,QAJQ,QDH6,QAYL,QANA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: Value Returned by VarType for Omitted Arguments Differs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q165103</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you call a custom Visual Basic for Applications function from a
formula in a cell in a Microsoft Excel 97 worksheet, the VarType function
may return different values for missing optional arguments than it does in
earlier versions of Microsoft Excel. The IsMissing and IsNull functions may
also return different results.
<P>
<P><h2>CAUSE</h2>
 
<P>
This problem occurs because the method Microsoft Excel 97 uses to send
argument from worksheet formulas to Visual Basic for Applications functions
is different from the method used by earlier versions of Microsoft Excel.
<P>
NOTE: This problem does not occur when you use a Visual Basic for
Applications subroutine to call a Visual Basic for Applications function.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
If the function uses the VarType, IsMissing, and/or IsNull functions to
check the status of a missing argument, it may be necessary to modify the
function to accommodate the change in behavior in Microsoft Excel 97.
<P>
For example, if your function contains a line of code that is similar to
the following
<P>
<PRE>   If VarType(X) = 10 Then

</PRE>change the line so that it accounts for a VarType of 1 (the default) in
Microsoft Excel 97, for example:
<P>
<PRE>   If (VarType(X) = 10 And Application.Version &lt; 8) Or (VarType(X) = 1 _
       And Application.Version = 8) Then

</PRE>This line of code accounts for the difference in behavior between Microsoft
Excel 97 and earlier versions of Microsoft Excel.
<P>
You can use similar methods to correct any lines of code that uses the
IsMissing and/or IsNull functions.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When you call a custom function from a formula in a worksheet cell, the
value that is returned by VarType for missing optional arguments differs
according to the version of Microsoft Excel that you are using. The values
that are returned by VarType for different versions of Microsoft Excel are
listed in the following table.
<P>
<PRE>                     VarType Value for
   Microsoft Excel   Missing Arguments   Corresponds to
   -------------------------------------------------------------------
   97                 1 (vbNull)         IsNull(&lt;variable&gt;) = True
                                         IsMissing(&lt;variable&gt;) = False

   5.0, 7.0          10 (vbError)        IsMissing(&lt;variable&gt;) = True
                                         IsNull(&lt;variable&gt;) = False

</PRE>NOTE: This difference does NOT apply when you use a Visual Basic for
Applications subroutine to call a custom function. If you omit arguments
when you use a Visual Basic for Applications subroutine to call a custom
function, the value that is returned by VarType for the missing arguments
is 10 in all versions of Microsoft Excel (versions 5.0, 7.0, and Microsoft
Excel 97).
<P>
The following example demonstrates the change in behavior for the VarType
function:

<OL><P><LI>Type the following Visual Basic for Applications code into a Visual
   Basic module in Microsoft Excel:
<P>
<P><PRE>      Function TestIsMissing(Optional A, Optional B)
<PRE></PRE>          TestIsMissing = "IsMissing = " &amp; IsMissing(A) &amp; ", " &amp; _
              IsMissing(B) &amp; Chr(10) &amp; "IsNull = " &amp; IsNull(A) &amp; ", " &amp; _
              IsNull(B) &amp; Chr(10) &amp; "VarType = " &amp; VarType(A) &amp; ", " &amp; _
              VarType(B)
      End Function

      Sub TestProc()
          MsgBox TestIsMissing(A:=1, B:=2)
          MsgBox TestIsMissing(B:=2)
          MsgBox TestIsMissing(A:=1)
          MsgBox TestIsMissing
      End Sub

</PRE><P><LI>In a worksheet in the same workbook, select cells A1:A4.

<P><LI>On the Format menu, click Cells. Then, click the Alignment tab. Click
   to select the Wrap Text check box. Then, click OK.

<P><LI>On the Format menu, point to Column and click Width. Type 25, and then
   click OK.

<P><LI>Type the following formulas:
<P>
<P><PRE>      A1: =TestIsMissing(1,2)
      A2: =TestIsMissing(,2)
      A3: =TestIsMissing(1,)
      A4: =TestIsMissing(,)
</PRE><P>
   Note that each formula uses a different set of arguments. Some of the
   arguments are not used in this example.
<P>
</OL>Depending on the version of Microsoft Excel you are using, the results
that are returned by the formulas are different. The results that are
returned are listed in the following table.
<P>
<PRE>   Cell  Microsoft Excel 97         Microsoft Excel 5.0, 7.0   Different
   ---------------------------------------------------------------------
   A1    IsMissing = False, False   IsMissing = False, False   No
         IsNull = False, False      IsNull = False, False      No
         VarType = 5, 5             VarType = 5, 5             No

   A2    IsMissing = False, False   IsMissing = True, False    Yes
         IsNull = True, False       IsNull = False, False      Yes
         VarType = 1, 5             VarType = 10, 5            Yes

   A3    IsMissing = False, False   IsMissing = False, True    Yes
         IsNull = False, True       IsNull = False, False      Yes
         VarType = 5, 1             VarType = 5, 10            Yes

   A4    IsMissing = False, False   IsMissing = True, True     Yes
         IsNull = True, True        IsNull = False, False      Yes
         VarType = 1, 1             VarType = 10, 10           Yes

</PRE></OL>Microsoft Excel 97 reports missing arguments as null values because the
value that is returned by VarType for these arguments is 1. In earlier
versions of Microsoft Excel, the missing arguments are reported as error
values because the value that is returned by VarType is 10.
<P>
If you run the TestProc macro, the four message boxes that appear are
identical in all versions of Microsoft Excel (5.0, 7.0, and Microsoft Excel
97). If you omit arguments when you call a Visual Basic for Applications
function from a macro, the value returned by VarType for the missing
arguments is always 10.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 XL97 xl97vbmigrate<BR>
Keywords          : kbprg<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

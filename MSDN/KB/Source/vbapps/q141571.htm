

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: How to Use "On Error" to Handle Errors in a Macro </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141571">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1995/12/20">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, you can use the On Error statement in a Microsoft  Visual Basic for Applications macro (Sub procedure) to trap errors and  direct procedure flow to the error-handling statements in a procedure. By  using error handling, you make...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAH4,QAKP,QAPN,QBVP,QAO4,QAB9,QAGB,QA2B,QAFF,QAZR,QAMB,QAIB,QBWS P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: How to Use "On Error" to Handle Errors in a Macro</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141571</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel 98 Macintosh Edition
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel, you can use the On Error statement in a Microsoft 
Visual Basic for Applications macro (Sub procedure) to trap errors and 
direct procedure flow to the error-handling statements in a procedure. By 
using error handling, you make your macros and your application easier to 
use by intercepting run-time errors before the user sees them.
<P>
This article describes how to use error-handling in a macro and provides 
several examples of error trapping macro code.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>The following is an example of the basic structure of a macro that uses
error-handling:
<P>
<PRE>   Sub MyMacro()

        On Error GoTo ErrorHandler
        . . .
        Exit Sub

   ErrorHandler:
        . . .
        Resume &lt;or Exit Sub&gt;
        . . .

   End Sub

</PRE>The example contains the following elements: an On Error statement (On
Error GoTo ErrorHandler) and a Resume statement. The error handler might 
contain an Error Statement and/or an Error function. Each of these elements 
is discussed in greater detail in later sections of this article.
<P>
Note that in this example an Exit Sub statement precedes the error handler 
label. By placing Exit Sub or Exit Function before the error handling 
routine, you prevent the error-handling code from being run when the macro 
runs without error.
<P>
<P><h3>On Error Statement</h3>
 
<P>
The On Error statement enables your application to handle errors that your 
macro encounters. If you do not use an On Error statement in your 
procedures, any run-time error that occurs is fatal: that is, Microsoft
Excel will generate a run-time error message and the macro will stop
running.
<P>
The following table outlines the On Error statement syntax and
describes each type of statement.
<P>
<PRE>   This On Error statement  Does the following
   --------------------------------------------------------------------

   On Error GoTo &lt;line&gt;
   Enables the error-handling routine that starts at &lt;line&gt;, which is
   any line label or line number. The specified line must be in the
   same procedure as the On Error statement.

   On Error Resume Next
   Specifies that when a run-time error occurs, control goes to the
   statement immediately following the statement where the error
   occurred. In other words, execution continues.

   On Error GoTo 0
   Disables any enabled error handler in the current procedure.

</PRE><h3>Resume Statement</h3>
 
<P>
Your error-handling routine will need to determine where macro control
should go when an error has occurred. To end the macro when an error
has occurred, place the error handling routine either immediately
before the End Sub (or End Function) statement or use the Exit Sub (or
Exit Function) statement. To return control to another location within
the macro, use the Resume statement.
<P>
<PRE>   This Resume
   statement      Does the following
   --------------------------------------------------------------------

   Resume [0]
   Resumes macro execution with the line that caused the error. [0] is
   an optional argument.

   Resume Next
   Resumes macro execution with the line following the line that caused
   the error.

   Resume &lt;line&gt;
   Resumes macro execution at the line number or line label specified
   by &lt;line&gt;.

</PRE>NOTE: A very common mistake in writing error handling routines is to
use a GoTo statement in the routine to specify where macro control
should go. Generally, it is not recommended that you use GoTo in an
error handling routine; you should use the Resume statement to resume
macro execution outside of the error handler.
<P>
<P><h3>Error Statement and Error Function</h3>
 
<P>
You can make your error-handling routine more effective by determining
what error has occurred. When a run-time error occurs, you can use the
Err function to determine the error number; the Error statement is used
to get the text that describes the error. For example, you can use the
following statement to display the description of the error that was
encountered:
<P>
<PRE>   MsgBox Err &amp; ": " &amp; Error(Err)

</PRE>If the error handling routine encountered the error 13 (a type mismatch
error), the following text would appear in a dialog box:
<P>
<PRE>   13: Type Mismatch

</PRE><h2>EXAMPLES OF MACROS THAT USE ERROR HANDLING</h2>
 
<P>
In these examples, the error handler may be called if there is no disk
in drive B, if the B:\XLFiles path cannot be located, or if there is no
Book1.xls file in the B:\XLFiles folder (directory).
<P>
<P><h3>Example 1--Basic Error Handling Macro</h3>
 
<P>
<PRE>   Sub MyMacro()

      Dim MyWorkbook As Workbook

      ' Run the Error handler "ErrHandler" when an error occurs.
      On Error GoTo Errhandler

      ChDrive "B:"
      ChDir "B:\"
      ChDir "B:\XLFiles"
      Workbooks.Open "Book1.xls"

      ' Disable the error handler.
      On Error GoTo 0

      Set MyWorkbook = ActiveWorkbook
      MsgBox "The destination workbook is " &amp; MyWorkbook.Name

      ' Exit the macro so that the error handler is not executed.
      Exit Sub

   Errhandler:

      ' If an error occurs, display a message and end the macro.
      MsgBox "An error has occurred. The macro will end."

   End Sub

</PRE>This example uses the On Error statement to display a message and end a
macro when an error occurs. If an error occurs in the macro, the error
handler displays the following error message and the macro execution is
halted:
<P>
<PRE>   An error has occurred. The macro will end.

</PRE>If the workbook Book1.xls is successfully opened, a message is
displayed, showing the destination workbook, and the macro ends because
there is an Exit Sub statement before the error handler label
"ErrHandler."
<P>
<P><h3>Example 2--Error Handling Macro That Displays a Specific Error Message</h3>
 
<P>
This next example is similar to the macro in Example 1; however, this
macro implements the Error statement and the Err function to show a
more descriptive error message when an error is encountered.
<P>
<PRE>   Sub MyMacro()

      Dim MyWorkbook As Workbook

      ' Run the Error handler "ErrHandler" when an error occurs.

      On Error GoTo Errhandler
      ChDrive "B:"
      ChDir "B:\"
      ChDir "B:\XLFiles"
      Workbooks.Open "Book1.xls"

      ' Disable the error handler.
      On Error GoTo 0

      Set MyWorkbook = ActiveWorkbook
      MsgBox "The destination workbook is " &amp; MyWorkbook.Name

      ' Exit the macro so that the error handler is not executed.
      Exit Sub

   Errhandler:

      Select Case Err

         Case 68, 75:    ' Error 68: "Device not available"
                         ' Error 75: "Path/File Access Error"
            MsgBox "There is an error reading drive B."

         Case 76:        ' Error 76: "Path not found"
            MsgBox "The specified path is not found."

         Case Else:      ' An error other than 68, 75 or 76 has occurred.
            ' Display the error number and the error text.
            MsgBox "Error # " &amp; Err &amp; " : " &amp; Error(Err)

      End Select

      ' End the macro.
   End Sub

</PRE>If an error occurs in the macro one of the following will occur:

<UL><LI>If the error is either 68 or 75, the message "There is an error
   reading drive B" will be displayed, and the macro will end.

<LI>If the error is 76, the message "The specified path is not found"
   will be displayed, and the macro will end.

<LI>If the error is an error other than 68, 75, or 76, the message
   "Error &lt;error number&gt;: &lt;error text&gt;" will be displayed and the macro
   will end.
<P>
</UL>If the Book1.xls workbook is successfully opened, then a message will
be displayed showing the destination workbook and the macro will end
because there is an Exit Sub statement before the error handler label
"ErrHandler."
<P>
<P><h3>Example 3--Macro that Uses the Resume Statement</h3>
 
<P>
This next example uses the Resume statement to resume macro execution
based on choices that the user makes when an error occurs.
<P>
<PRE>   Sub MyMacro()

   Dim Result as Integer
   Dim ErrMsg as String
   Dim MyWorkbook as Workbook

      ' Run the Error handler "ErrHandler" when an error occurs.
      On Error GoTo Errhandler

      ChDrive "B:"
      ChDir "B:\"
      ChDir "B:\XLfiles"

      Workbooks.Open "Book1.xls"

   NewWorkbook:

      ' Disable the error handler.
      On Error GoTo 0

      Set MyWorkbook = ActiveWorkbook
      MsgBox "The destination workbook is " &amp; MyWorkbook.Name

      ' Exit the macro so that the error handler is not executed.
      Exit Sub

   Errhandler:

      Select Case Err

         Case 68, 75:  ' Error 68: "Device not available"
                       ' Error 75: "Path/File access error
            ErrMsg =  "There is an error reading drive B. Please " &amp; _
               "insert a disk and then press OK to continue or " &amp; _
               "press Cancel to end this operation."

            Result = MsgBox(ErrMsg, vbOKCancel)

            ' Resume at the line where the error occurred if the user 
            ' clicks OK; otherwise end the macro.
            If Result = vbOK Then Resume

         Case 76:     ' Error 76: Path not found
            ErrMsg = "The disk in drive B does not have an XLFiles " &amp; _
               "directory. Please insert the correct disk."

            Result = MsgBox(ErrMsg, vbOKCancel)

            ' Resume at the line where the error occurred if the user 
            ' clicks OK; otherwise end the macro.
            If Result = vbOK Then Resume

         Case Else:   ' A different error occurred.

            ErrMsg = "An error has occurred opening " &amp; _
                 "B:\XLFiles\Book1.xls. Use the active workbook as " &amp; _
                 "the destination?"

            Result = MsgBox(ErrMsg, vbYesNo)

            ' Resume at the label "NewWorkbook" if the user clicks Yes;
            ' otherwise end the macro.
            If Result = vbYes Then Resume NewWorkbook

      End Select

   ' End the macro.
   End Sub

</PRE>If the workbook Book1.xls is successfully opened, a message will be 
displayed showing the destination workbook as Book1.xls and the macro will 
end because there is an Exit Sub statement before the error handler label 
"ErrHandler." If an error occurs in the macro, the error handler will do 
one of the following:

<UL><LI>If the error is either 68 or 75, then the following message is
   displayed:
<P>
<P><PRE>      There is an error reading drive B. Please insert a disk and then
      press OK to continue or press Cancel to end this operation.
</PRE><P>
   If the user clicks OK in this dialog box, the macro resumes at the
   line where the error occurred. If the user clicks Cancel, the macro
   will end.

<LI>If the error is 76, then the following message will be displayed:
<P>
<P><PRE>      The disk in drive B does not have an XLFiles directory. Please
      insert the correct disk.
</PRE><P>
   If the user clicks OK in this dialog box, the macro resumes at the
   line where the error occurred. If the user clicks Cancel, the macro
   will end.

<LI>If the error is an error other than 68, 75 or 76, then the following
   error message  is displayed:
<P>
<P><PRE>      An error has occurred opening B:\XLFiles\Book1.xls. Use the
      active workbook as the destination?
</PRE><P>
   If the user clicks Yes in the dialog box, the macro resumes at the
   line labeled "NewWorkbook." The currently active workbook is
   displayed as the destination workbook. If the user clicks No, the
   macro will end.
<P>
</UL><h3>Example 4--Centralizing Error Handling</h3>
 
<P>
You can reduce the length of overall code in your application by
centralizing the error handling. You can centralize error-handling by
creating one or more procedures that handle common errors.
<P>
The following is a procedure called ErrorHandling that will display a
message corresponding to the error number (ErrorValue) that was passed
to it and, where possible, allow the user to choose a button to specify
which action should be taken following the error. Based on the choice
that the user makes, the ErrorHandling procedure will return a value
(ReturnValue) for the course of action to the calling procedure. The
ReturnValue can be Err_Exit (exit the macro where the error occurred),
Err_Resume (resume at the line in the macro where the error occurred),
or Err_Resume_Next (resume at the line following the line in the macro
where the error occurred).
<P>
<PRE>   Public Const Err_Exit = 0
   Public Const Err_Resume = 1
   Public Const Err_Resume_Next = 2

   Sub ErrorHandling(ErrorValue As Integer, ReturnValue As Integer)

      Dim Result as Integer
      Dim ErrMsg as String
      Dim Choices as Integer

      Select Case ErrorValue

         Case 68:     ' Device  not available.

            ErrMsg = "The device you are trying to access is either " &amp; _
               "not online or does not exist. Retry?"
            Choices = vbOKCancel

         Case 75:     ' Path/File access error.

            ErrMsg = "There is an error accessing the path and/or " &amp; _
                 "file specified. Retry?"
            Choices = vbOKCancel

         Case 76:     ' Path not found.

            ErrMsg = "The path and/or file specified was not found. Retry?"
            Choices = vbOKCancel

         Case Else:   'An error other than 68, 75 or 76 has occurred

            ErrMsg = "An unrecognized error has occurred ( " &amp; _
               Error(Err) &amp; " ). The macro will end."
            MsgBox ErrMsg, vbOKOnly
            ReturnValue = Err_Exit
            Exit Sub

      End Select

      ' Display the error message.
      Result = MsgBox(ErrMsg, Choices)

      ' Determine the ReturnValue based on the user's choice from MsgBox.
      If Result = vbOK Then
         ReturnValue = Err_Resume
      Else
         ReturnValue = Err_Exit
      End If

   End Sub

</PRE>This next macro demonstrates how you could use the ErrorHandling
procedure when an error is encountered:
<P>
<PRE>   Sub MyMacro()

      Dim Action As Integer

      ' Run the Error handler "ErrHandler" when an error occurs.
      On Error GoTo Errhandler

      ChDrive "B:"
      ChDir "B:\"
      ChDir "B:\XLFiles"
      Workbooks.Open "Book1.xls"

      ' Exit the macro so that the error handler is not executed.
      Exit Sub

   Errhandler:

      ' Run the ErrorHandling macro to display the error and to
      ' return a value for Action which will determine the appropriate
      ' action to take (Resume the macro or end the macro)

      ErrorHandling Err, Action

      If Action = Err_Exit Then
         Exit Sub
      ElseIf Action = Err_Resume Then
         Resume
      Else
         Resume Next
      End If

   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
In Microsoft Excel 97, for more information about handling errors in a
macro, click the Index tab in the Microsoft Visual Basic for
Applications Help, type the following text:
<P>
<PRE>   On Error

</PRE>and then double-click the selected text to go to the "On Error Statement"
topic.
<P>
In Microsoft Excel 7.0, for more information about handling errors in a
macro, click the Index tab in Microsoft Excel Help, type the following
text
<P>
<PRE>   Error Trapping

</PRE>and then double-click the selected text to go to the "Error Trapping"
topic.
<P>
In Microsoft Excel 5.0, for more information about error trapping see
"Visual Basic User's Guide," "Handling Errors and Error Values"
<P>
For additional information about getting help with Visual Basic for
Applications, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 8.00 <BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS: 5.0, 5.0c, 7.0, 97; MACINTOSH: 5.0, 5.0a, 98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

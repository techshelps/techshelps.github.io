

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: How to Fill ListBox Control with Multiple Ranges </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161534">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/12/30">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbahowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article contains an example that fills the list of a ListBox control on a UserForm with data from multiple cell ranges.  MORE INFORMATION  You cannot use the RowSource property to bind a ListBox control to a worksheet when you want the list to...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVR,QDMR,QAHP,QAMN,QAB5,QBS0,QA7O,QAOE,QBVP,QAH4,QBE7,QBE6,QBCF,QDNZ,QAE1 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: How to Fill ListBox Control with Multiple Ranges</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161534</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article contains an example that fills the list of a ListBox
control on a UserForm with data from multiple cell ranges.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You cannot use the RowSource property to bind a ListBox control to a
worksheet when you want the list to draw from multiple ranges. You must
loop through the various ranges with a Visual Basic for Applications
procedure and add the items to the list one at a time.
<P>
The following examples populate a ListBox control as it is loaded by using 
the Initialize event for the UserForm.
<P>
Microsoft provides programming examples for illustration only, without 
warranty either expressed or implied, including, but not limited to, the 
implied warranties of merchantability and/or fitness for a particular 
purpose. This article assumes that you are familiar with the programming 
language being demonstrated and the tools used to create and debug 
procedures. Microsoft support engineers can help explain the functionality 
of a particular procedure, but they will not modify these examples to 
provide added functionality or construct procedures to meet your specific 
needs. If you have limited programming experience, you may want to contact 
the Microsoft fee-based consulting line at (800) 936-5200. For more 
information about the support options available from Microsoft, please see 
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Populating the ListBox Directly from Worksheet Cells</h3>
 
<P>
To populate the ListBox, follow these steps:

<OL><P><LI>Close and save any open workbooks and then create a new workbook.

<P><LI>On Sheet1, enter the following values:
<P>
<PRE>      A1: Planes        C1: Alpha
      A2: Trains        C2: Bravo
      A3: Automobiles   C3: Charlie

</PRE><P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>On the Insert menu, click UserForm.

<P><LI>Draw a ListBox control on the UserForm.

<P><LI>Double-click the UserForm to open the Code window for the UserForm.

<P><LI>In the module type the following code for the UserForm Initialize
   event:
<P>
<P><PRE>      Private Sub UserForm_Intialize()
<PRE></PRE>          Dim Lrange As Range
          Dim x As Variant

          'Set the range to loop through
          Set Lrange = Union(Sheet1.Range("A1:A3"), Sheet1.Range("C1:C3"))

          'Loops through the ranges
          For Each x In Lrange

              'Adds an item to the list
              Listbox1.AddItem x.Value

          Next x

      End Sub

</PRE><P><LI>Run the UserForm.
<P>
   The items in the ranges A1:A3 and C1:C3 on Sheet1 are added to the
   list in ListBox1.

<P><LI>Close the UserForm.
<P>
</OL><h3>Using an Array to Populate the ListBox</h3>
 
<P>
It is also possible to assign the contents of a Visual Basic array as the
list of a ListBox control. The following example reads the values from the
worksheet into an array, and then assigns the array to the ListBox control 
as the list:

<OL><P><LI>In the module, change the code for the UserForm Initialize event:
<P>
<P><PRE>      Private Sub UserForm_Initialize()
<PRE></PRE>          Dim Lrange As Range
          Dim Larray() As Variant
          Dim x As Variant
          Dim ctr As Integer

          'Set the range to loop through
          Set Lrange = Union(Sheet1.Range("A1:A3"), Sheet1.Range("C1:C3"))

          'Loops through the ranges
          For Each x In Lrange

              ReDim Preserve Larray(ctr)

              'Add an item to the array
              Larray(ctr) = x.Value

              ctr = ctr + 1

          Next x

          'Assign the array to the listbox
          ListBox1.List = LArray

      End Sub

</PRE><P><LI>Run the UserForm.
<P>
   The items in the ranges A1:A3 and C1:C3 on Sheet1 are read into an
   array and are then assigned to the list of ListBox1.

<P><LI>Close the UserForm.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For additional information about populating list boxes in earlier
versions of Microsoft Excel, please see the following article here
in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q153603.htm">Q153603</A></B>
   TITLE     : XL: Macro to Fill a List Box with Multiple Ranges

</PRE></OL>For more information about ListBox Controls, click the Office Assistant,
type "listbox", click Search, and then click to view "ListBox control"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 8.00 XL97<BR>
Keywords          : kbcode kbprg xlvbahowto<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

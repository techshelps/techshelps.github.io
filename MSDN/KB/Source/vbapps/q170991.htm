

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OL97: Programming With EntryIDs, StoreIDs, and GetItemFromID </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170991">
<META NAME="KBModify" CONTENT="1998/03/02">
<META NAME="KBCreate" CONTENT="1997/07/03">
<META NAME="Keywords" CONTENT="kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provides an example of using the GetItemFromID method in the Microsoft Outlook 97 object model.  MORE INFORMATION  Microsoft provides programming examples for illustration only, without warranty either expressed or implied, including, ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVO,QAPN,QBUP,QAFI,QBS0,QBXS,QAIF,QAYC,QANF,QAW6,QBXD,QA7O,QA7N,QAY2,QAPF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OL97: Programming With EntryIDs, StoreIDs, and GetItemFromID</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170991</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Outlook 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an example of using the GetItemFromID method in the
Microsoft Outlook 97 object model.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>A common use of the GetItemFromID method is to create a link, or
relationship, from one Outlook item to another. The Outlook Visual Basic
Help file (Vbaoutl.hlp) documents this method.
<P>
For more information on obtaining the Outlook Visual Basic Help file,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../OUTLOOK/Q166738.htm">Q166738</A></B>
   Title     : OL97: How to Install Visual Basic Help

</PRE>An example of when you might want to use the GetItemFromID method is if you
created contact items for all members of a family instead of just having
one contact item for the head of the household. You might want to create a
custom contact form so that you can create "links" between all members of
the family. This could be in the form of a list box on the custom contact
form that would automatically include a list of other members of the
family. Using the custom form, when you select a person from the list,
their contact item would automatically display.
<P>
In a solution like this, you would typically create the links between the
contact items by storing the related IDs with each contact. So each contact
item might have 20 user-defined fields that store the IDs of up to 20
related contacts. VBScript code uses these IDs to retrieve the names of the
other family members in order to populate the list and to retrieve the
other contact item when the user selects a name from the list.
<P>
Each Outlook item (contacts, messages, appointments, and such) has a field
called EntryID, which is a unique ID field generated by the messaging
storage system for use with the MAPI folders which store the item.
<P>
Each MAPI folder has a field called StoreID, a unique ID field for that
particular folder. Each folder also has an EntryID field.
<P>
When using the GetItemFromID method to retrieve an item based on its MAPI
IDs, you need to specify both the EntryID of the item and the StoreID of
the folder. Using the EntryID of the folder instead of the StoreID will
generate an error, which may vary depending on the type of folder you are
working with.
<P>
The following is a VBScript example which illustrates the use of the
GetItemFromID method. The code retrieves the StoreID from the default
Contacts folder, fills an array with the EntryIDs for all of the contacts
in the folder, and finally retrieves a specific contact item.
<P>
<PRE>   Sub OutlookEntryID()
   'The Outlook object library must be referenced
   Dim ol As Outlook.Application
   Dim olns As NameSpace
   Dim objFolder As Object
   Dim AllContacts As Object
   Dim Item As Object
   Dim I As Integer
   'If there are more than 500 contacts, change the following line:
   Dim EntryID(500) As String
   Dim StoreID As String
   Dim strFind As String
   ' Set the application object
   Set ol = New Outlook.Application
   ' Set the namespace object
   Set olns = ol.GetNamespace("MAPI")
   ' Set the default Contacts folder
   Set objFolder = olns.GetDefaultFolder(olFolderContacts)
   ' Get the StoreID, which is a property of the folder
   StoreID = objFolder.StoreID
   ' Set objAllContacts = the collection of all contacts
   Set AllContacts = objFolder.Items
   I = 0
   ' Loop to get all of the EntryIDs for the contacts
   For Each Item In AllContacts
      I = I + 1
      ' The EntryID is a property of the item
      EntryID(I) = Item.EntryID
   Next
   ' Randomly choose the 2nd Contact to retrieve
   ' In a larger solution, this might be the index from a listbox
   I = 2
   ' Both the StoreID and EntryID must be used to retrieve the item
   Set Item = olns.GetItemFromID(EntryID(I), StoreID)
   Item.Display
   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about creating solutions with Microsoft Outlook 97,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     : OL97: How to Get Help Programming with Outlook

   Article-ID: <B><A HREF="../vbapps/Q170783.htm">Q170783</A></B>
   Title     : OL97: Q&amp;A: Questions about Customizing or
               Programming Outlook
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97<BR>
Keywords          : kbcode<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

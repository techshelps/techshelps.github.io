

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Overflow Doesn't Occur Using Pentium Pro or Pentium II </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168610">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1997/05/15">
<META NAME="Keywords" CONTENT="RefsThird VB4ALL VB4WIN vb5all VBKB3rdParty vbwin GnrlVb kb3rdparty kbhw kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When converting a floating point value to an integer value on Intel Pentium Pro and Pentium II processors, a negative value much less than the smallest negative integer does not cause a  Run-Time Error '6': Overflow,  as would be expected. This pro...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QANO,QBC9,QBC8,QA4Q,QAKC,QAKD,QA19,QAAP,QAB4,QAB9,QDMR,QAY5,QBC6,QAKP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Overflow Doesn't Occur Using Pentium Pro or Pentium II</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168610</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
<LI>Microsoft Visual Basic for Applications included with:
   - Microsoft Office 97 for Windows
   - Microsoft Office for Windows 95, versions 7.0, 7.0a, 7.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When converting a floating point value to an integer value on Intel Pentium
Pro and Pentium II processors, a negative value much less than the smallest
negative integer does not cause a "Run-Time Error '6': Overflow," as would
be expected. This problem is actually caused by an erratum in the Pentium
Pro and Pentium II processors. The following code illustrates this problem:
<P>
<PRE>   Debug.Print CInt(-2.59615E+33)
   'Where -2.59615E+33 = -2,596,150,000,000,000,000,000,000,000,000,000

</PRE>Normally, this code will generate "Run-Time Error '6': Overflow." However,
on Pentium Pro and Pentium II processors, this code does not generate an
overflow.
<P>
For conversion to type Integer, the failure to report an overflow occurs
only when the value is in the range -1.84 x 10^19 to -2.60 x 10^33;
that is, between:
<P>
<PRE>   -18,400,000,000,000,000,000

   -and-

   -2,600,000,000,000,000,000,000,000,000,000,000

</PRE>Within the range above, fewer than one out of every 65,000 values is
affected.
<P>
For conversion to type Long, the failure to report an overflow occurs only
when the value is in the range -1.84 x 10^19 to -3.96 x 10^28;
that is, between:
<P>
<PRE>   -18,400,000,000,000,000,000

   -and-

   -39,600,000,000,000,000,000,000,000,000.

</PRE>Within the range above, fewer than one out of every 4,000,000,000 values is
affected.
<P>
For this problem to be relevant to the Visual Basic developer, the
application must meet the following conditions:

<UL><LI>Large negative numbers in the ranges given above could possibly be
   used by the application.

<LI>The application may attempt to convert those numbers to an Integer or
   a Long.

<LI>The application uses an On Error statement to catch the run-time error
   that would be caused by an overflow during the conversion.
<P>
</UL><h2>CAUSE</h2>
 
<P>
Intel Corporation has identified an erratum in the Pentium Pro and
Pentium II processors relating to the conversion of floating point values
to signed integer values when using the Floating Point Integer Store (FIST)
instruction available with these processors. The FIST instruction converts
floating point numbers to 16-, 32-, or 64-bit signed integers. Because the
range of a floating point number is larger than any of these formats, some
floating point numbers cannot be converted to integers. When attempting to
convert a floating point number that is too large to an integer, the
processor should signal an "Invalid Operation" exception. Visual Basic uses
this signal to report "Run-Time Error '6': Overflow." The erratum in the
Pentium Pro and Pentium II processors causes them to not signal the
"Invalid Operation" exception for certain numbers in the ranges given
above.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
An application may be affected by this problem if all three of the
conditions listed under the SYMPTOMS section above are met. In that case,
the application must be modified to explicitly test for large negative
values and raise the exception itself. This must be done at any point that
a floating point number, Single or Double, is converted to Integer or Long,
including the following situations:

<UL><LI>use of CInt or CLng.

<LI>implicit conversion by assigning to an Integer or Long variable.

<LI>implicit conversion by passing a value to an Integer or Long procedure
   parameter.
<P>
</UL>For conversion to either Integer or Long, the following line of code should
be added immediately before the conversion:
<P>
<PRE>   If FloatingPointValue &lt; -1E+18 Then Error 6

</PRE>For example:
<P>
<PRE>   Dim IntegerValue As Integer
   Dim FloatingPointValue As Single

   FloatingPointValue = -2.59615E+33
   If FloatingPointValue &lt; -1E+18 Then Error 6
   IntegerValue = FloatingPointValue

</PRE>This test and conversion may be encapsulated into a pair of functions, as
follows:
<P>
<PRE>   Public Function FloatToInt(Expression as Variant) As Integer
      If Expression &lt; -1E+18 Then Error 6
      FloatToInt = Expression
   End Function

   Public Function FloatToLong(Expression as Variant) As Long
      If Expression &lt; -1E+18 Then Error 6
      FloatToLong = Expression
   End Function

</PRE>Using the FloatToInt function above, the previous example becomes:
<P>
<PRE>   Dim IntegerValue As Integer
   Dim FloatingPointValue As Single

   FloatingPointValue = -2.59615E+33
   IntegerValue = FloatToInt(FloatingPointValue)

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed that this erratum in the processor affects the
Microsoft products listed at the beginning of this article. We are
researching this problem and will post new information here in the
Microsoft Knowledge Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For more details on this erratum in the Pentium Pro processor, refer to:
<P>
<PRE>   <B>http://developer.intel.com/design/pro/update/pprosu.htm</B>

</PRE>For more details on this erratum in the Pentium II processor, refer to:
<P>
<PRE>   <B>http://developer.intel.com/design/PentiumII/update/ppiisu.htm</B>

</PRE>Intel’s documentation on this erratum will note additional ranges of values
in which the "Invalid Operation" exception is not set. Visual Basic is not
affected by these additional value ranges and it will report the overflow
error correctly for them.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information on a similar problem that affected earlier
versions of Visual Basic, see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../VBWIN/Q126455.htm">Q126455</A></B>
   TITLE     : How to Avoid Rounding &amp; Overflow Probs on Pentium Processors
</PRE> 
<PRE>Keywords          : RefsThird VB4ALL VB4WIN vb5all VBKB3rdParty vbwin GnrlVb kb3rdparty kbhw kbprg
Technology        : kbvba
Version           : WINDOWS:4.0 5.0 7.0 7.0a 7.0b 97
Platform          : NT Win95 WINDOWS
Issue type        : kbprb</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

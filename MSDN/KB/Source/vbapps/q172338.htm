

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Use QueryPerformanceCounter to Time Code </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172338">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1997/08/01">
<META NAME="Keywords" CONTENT="APrgOther VB4ALL VB4WIN vb5all vb5howto VBKBWinAPI vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When timing code to identify performance bottlenecks, you want to use the highest resolution timer the system has to offer. This article describes how to use the QueryPerformanceCounter function to time application code.  MORE INFORMATION  Several ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAA7,QAJ5,QAVX,QDMP,QAU3,QAUM,QAMR,QACE,QAY5,QAFH,QDL9,QBWQ,QBWO,QBWN P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Use QueryPerformanceCounter to Time Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172338</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   32-bit only, for Windows, version 4.0
<LI>Microsoft Access versions 7.0, 97
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When timing code to identify performance bottlenecks, you want to use the
highest resolution timer the system has to offer. This article describes
how to use the QueryPerformanceCounter function to time application code.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Several timers of differing accuracy are offered by the operating system:
<P>
<PRE>Function                 Units                      Resolution
</PRE> 
<PRE>Now, Time, Timer         seconds                    1 second
GetTickCount             milliseconds               approx. 10 ms
TimeGetTime              milliseconds               approx. 10 ms
</PRE>QueryPerformanceCounter  QueryPerformanceFrequency  same
<P>
If your system supports a high-resolution counter, you can use
QueryPerformanceCounter and QueryPerformanceFrequency to do high-resolution
timings.
<P>
The following sample code compares the various counters:
<P>
WARNING: ANY USE BY YOU OF THE CODE PROVIDED IN THIS ARTICLE IS AT YOUR OWN
RISK. Microsoft provides this code "as is" without warranty of any kind,
either express or implied, including but not limited to the implied
warranties of merchantability and/or fitness for a particular purpose.
<P>
<P><h3>Step-by-Step Procedures</h3>
 

<OL><P><LI>Enter the following code into a Module. If you enter it into a class,
   form, or report module, make the declarations Private.
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Declare Function QueryPerformanceCounter Lib "Kernel32" _
<PRE></PRE>                                 (X As Currency) As Boolean
      Declare Function QueryPerformanceFrequency Lib "Kernel32" _
                                 (X As Currency) As Boolean
      Declare Function GetTickCount Lib "Kernel32" () As Long
      Declare Function timeGetTime Lib "winmm.dll" () As Long

      Sub Test_Timers()
      Dim Ctr1 As Currency, Ctr2 As Currency, Freq As Currency
      Dim Count1 As Long, Count2 As Long, Loops As Long
      '
      ' Time QueryPerformanceCounter
      '
        If QueryPerformanceCounter(Ctr1) Then
          QueryPerformanceCounter Ctr2
          Debug.Print "Start Value: "; Format$(Ctr1, "0.0000")
          Debug.Print "End Value: "; Format$(Ctr2, "0.0000")
          QueryPerformanceFrequency Freq
          Debug.Print "QueryPerformanceCounter minimum resolution: 1/" &amp; _
                      Freq * 10000; " sec"
          Debug.Print "API Overhead: "; (Ctr2 - Ctr1) / Freq; "seconds"
        Else
          Debug.Print "High-resolution counter not supported."
        End If
      '
      ' Time GetTickCount
      '
        Debug.Print
        Loops = 0
        Count1 = GetTickCount()
        Do
          Count2 = GetTickCount()
          Loops = Loops + 1
        Loop Until Count1 &lt;&gt; Count2
        Debug.Print "GetTickCount minimum resolution: "; _
                    (Count2 - Count1); "ms"
        Debug.Print "Took"; Loops; "loops"
      '
      ' Time timeGetTime
      '
        Debug.Print
        Loops = 0
        Count1 = timeGetTime()
        Do
          Count2 = timeGetTime()
          Loops = Loops + 1
        Loop Until Count1 &lt;&gt; Count2
        Debug.Print "timeGetTime minimum resolution: "; _
                    (Count2 - Count1); "ms"
        Debug.Print "Took"; Loops; "loops"
      End Sub

</PRE><P><LI>Run the function from the Debug/Immediate window. Your output should
   appear similar to the following:
<P>
<P><PRE>      Start Value: 3516284.3498
      End Value: 3516284.3521
      QueryPerformanceCounter minimum resolution: 1/1193182 sec
      API Overhead:  1.92761875388667E-05 seconds
</PRE><P>
<P><PRE>      GetTickCount minimum resolution:  10 ms
      Took 650 loops
</PRE><P>
<P><PRE>      timeGetTime minimum resolution:  10 ms
      Took 1565 loops
</PRE><P>
</OL>Multiple statements execute before either GetTickCount or timeGetTime
record a change. The actual number of loops will vary depending on the
background tasks the operating system is executing.
<P>
On the other hand, QueryPerformanceCounter changes value between successive
API calls, indicating its usefulness in high-resolution timing. The
resolution in this case is on the order of a microsecond. Because the
resolution is system-dependent, there are no standard units that it
measures. You have to divide the difference by the
QueryPerformanceFrequency to determine the number of seconds elapsed. In
the case above, the overhead for just calling the API is about 19
microseconds. This would have to be subtracted when timing other code as
follows:
<P>
<PRE>   Private Sub Time_Addition()
   Dim Ctr1 As Currency, Ctr2 As Currency, Freq As Currency
   Dim Overhead As Currency, A As Long, I As Long
     QueryPerformanceFrequency Freq
     QueryPerformanceCounter Ctr1
     QueryPerformanceCounter Ctr2
     Overhead = Ctr2 - Ctr1        ' determine API overhead
     QueryPerformanceCounter Ctr1  ' time loop
     For I = 1 To 100
       A = A + I
     Next I
     QueryPerformanceCounter Ctr2
     Debug.Print "("; Ctr1; "-"; Ctr2; "-"; Overhead; ") /"; Freq
     Debug.Print "100 additions took";
     Debug.Print (Ctr2 - Ctr1 - Overhead) / Freq; "seconds"
   End Sub

</PRE></OL>Sample output:
<P>
<PRE>   ( 3630876.6256 - 3630876.6388 - 0.0013 ) / 119.3182
   100 additions took 9.97333181358753E-05 seconds

</PRE>NOTE: Because currency variables are used, the values returned are 10000
times smaller than the actual counters. Because the calculation of seconds
involves a division operation, this factor is cancelled out.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Microsoft Developer Network; topics: timeGetTime GetTickCount
QueryPerformanceCounter QueryPerformanceFrequency
 
<PRE>Keywords          : APrgOther VB4ALL VB4WIN vb5all vb5howto VBKBWinAPI vbwin GnrlVb kbprg
Technology        : kbvba
Version           : WINDOWS:4.0 5.0 7.0 97
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD97: VBA Routines to Determine If Line or Document Is Empty </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181400">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1998/02/19">
<META NAME="Keywords" CONTENT="kbdta kbdtacode kbmacroexample word97 OffVBA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you write a Microsoft Visual Basic for Applications procedure, you may need to know whether or not the insertion point is positioned within an empty document or a blank document line. The sample procedures in this article determine whether the...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAKE,QAPN,QBXT,QA5V,QAIB,QAGB,QDIJ,QAEF,QAMB,QA5F,QAB9,QBVV,QAW6,QA6A P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD97: VBA Routines to Determine If Line or Document Is Empty</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181400</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you write a Microsoft Visual Basic for Applications procedure, you may
need to know whether or not the insertion point is positioned within an
empty document or a blank document line. The sample procedures in this
article determine whether the current line or document is empty and then
display a message regarding the current status.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>The following Visual Basic for Applications Sub procedure uses the
predefined bookmark, "\Line," in combination with the Empty function to
determine whether the current line is empty. Using this method will detect
text as well as inline objects (such as an inline graphic) or floating
objects anchored to the current line (such as a text box or drawing
object).
<P>
<PRE>   Sub IsLineEmpty()

      If ActiveDocument.Bookmarks("\Line").Empty Then
         MsgBox "The current line is empty."
      Else
         MsgBox "The current line is not empty."
      End If

   End Sub

</PRE>For more information about predefined bookmarks, click the Office Assistant
while in the Visual Basic Editor, type "Predefined Bookmarks," click
Search, and then click to view "Predefined Bookmarks."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If the Assistant is not able to answer your query, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176476.htm">Q176476</A></B>
   TITLE     : OFF: Office Assistant Not Answering Visual Basic Questions

</PRE>The following Visual Basic for Applications Sub and Function procedures use
the StoryRanges property to loop through the StoryRanges collection of the
active document. Using this method will detect text as well as inline
objects (such as an inline graphic) or floating objects anchored to the
current line (such as a text box or drawing object).
<P>
<PRE>   Sub YourMacro()

      ' Call the IsDocEmpty function.
      If IsDocEmpty() Then
         MsgBox "The document is empty."
      Else
         MsgBox "The document contains text, objects or empty lines."
      End If

   End Sub

   Function IsDocEmpty() As Boolean

      ' Initialize function to True.
      IsDocEmpty = True
      For Each astory In ActiveDocument.StoryRanges

         ' Check for text. If the length of the
         ' current story is greater than one, then
         ' there is either text or more than one
         ' empty line.
         If Len(astory.Text) &gt; 1 Then
            IsDocEmpty = False
         End If

         ' Check for Objects.
         ' Note: If there are no objects within
         ' the current story range, an error occurs.
         On Error Resume Next
         If astory.ShapeRange.Count &gt; 0 Then
            If Err = 0 Then
               IsDocEmpty = False
            Else
               On Error GoTo 0
            End If
         End If

         ' If something was found, then
         ' return to the calling routine with
         ' a value of False.
         If IsDocEmpty = False Then Exit Function

      Next

   End Function

</PRE>For more information about the StoryRanges property, click the Office
Assistant while in the Visual Basic Editor, type "StoryRanges Property,"
click Search, and then click to view "StoryRanges Property."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If the Assistant is not able to answer your query, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176476.htm">Q176476</A></B>
   TITLE     : OFF: Office Assistant Not Answering Visual Basic Questions

</PRE><h2>REFERENCES</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q173707.htm">Q173707</A></B>
   TITLE     : OFF97: How to Run Sample Code from Knowledge Base Articles

</PRE>For more information about getting help with Visual Basic for Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: In-Line routine routines<BR>
Keywords          : kbdta kbdtacode kbmacroexample word97 OffVBA<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

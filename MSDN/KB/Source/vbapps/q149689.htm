

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Visual Basic Macro Examples for Working with Arrays </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149689">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1996/04/09">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article contains sample Microsoft Visual Basic for Applications  procedures that you can use to work with several types of arrays.  MORE INFORMATION  Microsoft provides programming examples for illustration only, without warranty either expres...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALX,QAM9,QAH4,QBVP,QBS0,QBWS,QBJZ,QBCF,QAFF,QDMR,QAVX,QA01,QA50,QAVW,QAG2 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Visual Basic Macro Examples for Working with Arrays</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149689</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, version 5.x
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for the Macintosh, version 5.0, 5.0a
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article contains sample Microsoft Visual Basic for Applications 
procedures that you can use to work with several types of arrays.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>NOTE: In Visual Basic for Applications procedures, the words after the
apostrophe (') are comments.
<P>
<P><h3>To Fill an Array, and Then Copy It to a Worksheet</h3>
 

<OL><P><LI>Open a new workbook and insert a Visual Basic module sheet.

<P><LI>Type the following code on the module sheet.
<P>
<PRE>      Sub Sheet_Fill_Array()
         Dim myarray As Variant
         myarray = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
         Range("a1:a10").Value = Application.Transpose(myarray)
      End Sub

</PRE><P><LI>Select Sheet1.

<P><LI>On the Tools menu, Click Macro.

<P><LI>In the Macro dialog box, click Sheet_Fill_Array, and then click Run.
<P>
</OL><h3>To Take Values from a Worksheet and Fill the array</h3>
 

<OL><P><LI>Input values on Sheet1 in cells a1:a10.

<P><LI>On a Visual Basic module sheet, type the following code:
<P>
<PRE>      Sub from_sheet_make_array()
         Dim thisarray As Variant
         thisarray = Range("a1:a10").Value

         counter = 1                'looping structure to look at array
         While counter &lt;= UBound(thisarray)
            MsgBox thisarray(counter, 1)
            counter = counter + 1
         Wend
      End Sub

</PRE><P><LI>Select Sheet1.

<P><LI>On the Tools menu, click Macro.

<P><LI>In the Macro dialog box, click from_sheet_make_array, and then click
   Run.
<P>
</OL><h3>To Pass and Receive an Array</h3>
 

<OL><P><LI>On a module sheet, type the following code:
<P>
<PRE>      Sub pass_array()
         Dim thisarray As Variant
         thisarray = Selection.Value
         receive_array (thisarray)
      End Sub

      Sub receive_array(thisarray)
         counter = 1
         While counter &lt;= UBound(thisarray)
            MsgBox thisarray(counter, 1)
            counter = counter + 1
         Wend
      End Sub

</PRE><P><LI>Select Sheet1, and highlight the range A1:A10.

<P><LI>On the Tools menu, click Macro.

<P><LI>In the Macro dialog box, click pass_array, and then click Run.
<P>
</OL><h3>To Compare Two Arrays</h3>
 

<OL><P><LI>Create two named ranges on Sheet1. Name one "range1"(without the
   quotation marks) and the other "range2"(without the quotation marks).
<P>
   For example, highlight the cell range A1:A10 and name it range1;
   highlight the cell range B1:B10 and name it range2.

<P><LI>Type the following code on the module sheet.
<P>
<PRE>      Sub compare_two_array()
         Dim thisarray As Variant
         Dim thatarray As Variant

         thisarray = Range("range1").Value
         thatarray = Range("range2").Value
         counter = 1
         While counter &lt;= UBound(thisarray)
            x = thisarray(counter, 1)
            y = thatarray(counter, 1)
            If x = y Then
               MsgBox "yes"
            Else MsgBox "nope"
            End If
            counter = counter + 1
         Wend
      End Sub

</PRE><P><LI>Select Sheet2.

<P><LI>On the Tools menu, click Macro.

<P><LI>In the Macro dialog box, click compare_two_array, and then click Run.
<P>
   You will see one message box for every comparison.
<P>
</OL><h3>To Fill an Array</h3>
 

<OL><P><LI>Type the following code on a module sheet.
<P>
<P><PRE>      Function array_fill()
<PRE></PRE>         array_fill = Application.Transpose(Array(1, 2, 3))
      End Function

</PRE><P><LI>Highlight the range A1:A3 on a Sheet2 and type "=array_fill()"
   (without the quotation marks), and then press CTRL+SHIFT+ENTER. In
   Microsoft Excel for the Macintosh, press COMMAND+RETURN.
<P>
</OL><h3>To Fill an Array and Add up the Array</h3>
 

<OL><P><LI>On a module sheet, type the following code:
<P>
<P><PRE>      Function test(x As Object) As Integer
<PRE></PRE>         For Each mycell In x
            test = test + mycell.Value
         Next
      End Function

</PRE><P><LI>Select Sheet1 and highlight range A1:A10.

<P><LI>In cell A12 type "=test(cell_range)" (without the quotation marks),
   and then press CTRL+SHIFT+ENTER. In Microsoft Excel for the
   Macintosh, press COMMAND+RETURN.
<P>
</OL><h3>To Fill a Dynamic Array</h3>
 

<OL><P><LI>On a module sheet, type the following code:
<P>
<PRE>      Sub fill_array()

         Dim thisarray As Variant
         number_of_elements = 3     'number of elements in the array

        'must redim below to set size
         ReDim thisarray(1 To number_of_elements) As Integer
        'resizes this size of the array
         counter = 1
         fillmeup = 7
         For counter = 1 To number_of_elements
            thisarray(counter) = fillmeup
         Next counter

         counter = 1         'this loop shows what was filled in
         While counter &lt;= UBound(thisarray)
            MsgBox thisarray(counter)
            counter = counter + 1
         Wend

      End Sub

</PRE><P><LI>On the Tools menu, click Macro.

<P><LI>In the Macro dialog box, click fill_array, and then click Run.
<P>
</OL>NOTE: Changing the variable "number_of_elements" will determine the size
of the array.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 8.00 xl97 copy paste visual <BR>
basic editor<BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS: 5.0, 5.0c, 7.0, 97; MACINTOSH: 5.0, 5.0a, 98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

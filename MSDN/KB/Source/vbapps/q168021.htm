

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OL97: Programmatically Accessing Office Form Documents </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168021">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1997/05/05">
<META NAME="Keywords" CONTENT="kbcode">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provides an overview of how you can use Microsoft Visual Basic Scripting Edition (VBScript) or Microsoft Visual Basic for Applications to programmatically access Office components that are embedded in a Microsoft Outlook 97 Office Form...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAPN,QAIH,QAH4,QBVP,QBVO,QBWS,QDNQ,QAW6,QBJZ,QDH3,QAYC,QAM2,QAPF,QALZ P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OL97: Programmatically Accessing Office Form Documents</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168021</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Outlook 97
<LI>Microsoft Word 97 for Windows
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft PowerPoint 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an overview of how you can use Microsoft Visual Basic
Scripting Edition (VBScript) or Microsoft Visual Basic for Applications to
programmatically access Office components that are embedded in a Microsoft
Outlook 97 Office Form.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
With Outlook 97, you can create an Office Form that includes an embedded
Word document, Excel workbook, Excel chart, or PowerPoint presentation. You
typically would use these types of custom Outlook forms as part of a
solution that routes Office documents or shares (posts) Office documents in
a public folder.
<P>
<P><h3>Steps to Create an Office Form</h3>
 
<P>
To create an Office form follow these steps:

<OL><P><LI>Start Outlook.

<P><LI>On the File menu, click New and then click Office Document.

<P><LI>In the New Office Document box, click Microsoft Word Document
   (or other type of Office Form) and then click OK.

<P><LI>Click to select either "Post the document in this folder" or "Send the
   document to someone," depending on the type of Office form you want to
   create, and then click OK.
<P>
</OL>If you use Office forms as part of a custom solution, you can use VBScript
or Visual Basic for Applications to automatically initialize a form or to
transfer information between Outlook and the embedded Office document
object.
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE></OL>NOTE: Because each custom solution has different requirements in order to
achieve the desired end result, the methods outlined below are offered as a
starting point for achieving the end result, and should be implemented in a
way that best suits the solution's needs.
<P>
<P><h3>Using Events From Embedded Objects</h3>
 
<P>
When using Office Forms to create a custom solution, you may want to have
Visual Basic for Applications code in the embedded object automatically
run. An example of this is having code automatically calculate dates based
on today's date and insert those calculated dates into an embedded Excel
spreadsheet. To implement this, you create a Workbook_Open() event
procedure in the embedded spreadsheet and use Visual Basic for Applications
code to calculate the dates. Because the Workbook_Open() procedure is run
automatically when the Office Form opens, the code will execute every time
you open the Office Form.
<P>
NOTE: Word will not execute any auto macros or procedures (typically
AutoOpen or Document_Open) when a document is embedded in another program,
or container. You can, however, place a CommandButton on the Word document
object and create a click event procedure for the CommandButton. The user
will have to click the button to run the Visual Basic for Applications code
in the Word document. If this workaround is not appropriate for your
solution, you can use the GetObject method described below to automate the
Word document from VBScript.
<P>
<P><h3>Create an Auto Event for an Excel Spreadsheet</h3>
 
<P>
To create an auto event for an Excel spreadsheet use these steps:

<OL><P><LI>Follow the steps in the "Steps to Create an Office Form" section to
   create a new Office Form based on an Excel spreadsheet. It does not
   matter whether it is a post or message form.

<P><LI>On the item's Tools menu, click Design Outlook Form.

<P><LI>On the Tools menu, click Macro, and then click Visual Basic Editor.

<P><LI>In the Project Explorer window, double-click the ThisWorkbook
   object to open a code window for that object.

<P><LI>Enter the following Visual Basic for Applications code:
<P>
<PRE>      Sub Workbook_Open()
      MsgBox "Hello from Visual Basic for Applications!"
      End Sub

</PRE><P><LI>Close the Visual Basic Editor.

<P><LI>On the item's File menu, click Close. When prompted, save changes to the
   item to save it in your Inbox.

<P><LI>Double-click the item in the Inbox to open it. You should see
   the message "Hello from Visual Basic for Applications!".
<P>
</OL><h3>Using GetObject to Automate an Embedded Object</h3>
 
<P>
There may be circumstances where you want to use VBScript to put
information into the embedded object or set some attributes of the object.
An example of this is creating an Item_Open event in VBScript that
automatically inserts a list of your contacts and their addresses into a
Word Office Form document.
<P>
You can use the VBScript version 2.0 GetObject method to access the
embedded Office documents. The following sample VBScript 2.0 code will
automatically insert "This is from VBScript!" into the embedded Word
document in a Word Office Form. Because the code is in an Item_Open event,
the code runs automatically when the Office Form item opens.
<P>
<PRE>   Sub Item_Open()
      Set objWord = GetObject(, "Word.Application")
      ' Use Word methods to insert some sample text
      objWord.Selection.TypeText "This is from VBScript!"
   End Sub

</PRE></OL>NOTE: This functionality does not work with VBScript version 3.0 or older
versions of VBScript version 3.1. When using the GetObject function with
these versions, GetObject will launch another instance of the application
instead of using the existing instance. This problem has been fixed in an
update to VBScript 3.1 (VBscript.dll version 3.1.0.2430, file date
12/30/97), which is available for download at:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/scripting">http://www.microsoft.com/scripting</A></B>

</PRE>The following table lists various objects that you can use with the
GetObject method to access embedded objects. Once you have a reference to
the object, consult the object model documentation for that program to
manipulate that type of object.
<P>
<PRE>   Form Type                 Object Name*
   -----------------------   -----------------------------------------
   Word document             Word.Application or Word.Document
   Excel spreadsheet         Excel.Application or Excel.Sheet
   Excel chart               Excel.Application or Excel.Chart
   PowerPoint presentation   PowerPoint.Application or PowerPoint.Show

   * The object you choose depends on which methods and properties
     of the application's object model you need to use.

</PRE><h2>REFERENCES</h2>
 
<P>
For more information on obtaining VBScript version 2.0, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q167138.htm">Q167138</A></B>
   Title     : OL97: General Information About Using VBScript With Outlook

</PRE>For more information about creating solutions with Microsoft Outlook 97,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     : OL97: How to Get Help Programming with Outlook

   Article-ID: <B><A HREF="../vbapps/Q170783.htm">Q170783</A></B>
   Title     : OL97: Q&amp;A: Questions about Customizing or
               Programming Outlook
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97<BR>
Keywords          : kbcode<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

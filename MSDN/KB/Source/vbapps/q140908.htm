

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Create a Multiuser Custom Counter (95/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140908">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1995/12/07">
<META NAME="Keywords" CONTENT="kbusage PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  You can define a field as a data type AutoNumber in a Microsoft Access 7.0 or 97 table. When you define a field as an AutoNumber field, Microsoft Access automatically increments ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALX,QAM9,QBS0,QBJZ,QAKD,QA1S,QAKC,QA7O,QA7N,QBC6,QASR,QA59,QA5V,QAUR,QDN9 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Create a Multiuser Custom Counter (95/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140908</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access version 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
You can define a field as a data type AutoNumber in a Microsoft Access 7.0
or 97 table. When you define a field as an AutoNumber field, Microsoft
Access automatically increments the value of the field whenever a new
record is added to the table. You have no control over this value.
<P>
If you want to determine the value of the number assigned to each new
record, you may want to use a custom counter. For example, you may want to
use a counter that decrements or use a counter that steps according to some
value. This article demonstrates a sample user-defined Visual Basic for
Applications function that you can use to create a custom counter field.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following outline describes in general terms how to create a custom
counter. Later in this article, you will find a more detailed description
of how to do this.

<UL><LI>First, create a separate table that will maintain the next available
   custom counter. This table will have one field and one record, with
   the value of the next available counter in this one record.

<LI>Next, from within Visual Basic for Applications, open this counter
   table and retrieve the value stored there.

<LI>Next, increment the value retrieved and store the number back into the
   counter table.

<LI>Finally, close the counter table and use the value in an appropriate
   table as the next available counter.
<P>
</UL>In a single-user environment, you can accomplish the task described above
with macro actions. In a multiuser environment, however, you need Visual
Basic for Applications to handle the situation where the counter table is
locked by another user. Macro actions do not provide the error trapping
needed for lock handling in a multiuser environment.
<P>
The following sets of steps describe in detail how to create a custom-
counter function that returns an integer that increments by 10 each time
the function is called.
<P>
<P><h3>Creating the Table</h3>
 

<OL><P><LI>On the Insert menu, click Table.

<P><LI>In the New Table dialog box, click Design View, and then click OK.

<P><LI>Add a field to the table called Next Available Counter. Set the
   data type of the Next Available Counter field to Number. Leave the
   default Field Size as Long Integer.

<P><LI>On the Edit menu, click PrimaryKey to make the Next Available Counter
   field the primary key.

<P><LI>On the View menu, click Datasheet view.

<P><LI>Note that a dialog box prompts you to save the table. Save it as
   Counter Table.

<P><LI>In Datasheet view, type a value of 10 in the Next Available Counter
   field.

<P><LI>Close the table.
<P>
</OL><h3>Creating the Module</h3>
 

<OL><P><LI>On the Insert menu, click Module.

<P><LI>Add the following function to the module:
<P>
<P><PRE>      Function Next_Custom_Counter ()
<PRE></PRE>         On Error GoTo Next_Custom_Counter_Err

         Dim MyDB As Database
         Dim MyTable As Recordset
         Dim NextCounter As Long

         '=================================================================
         'Open table and get the current value of "Next Available Number,"
         'increment the value by 10, and save the value back into the table
         '=================================================================

          Set MyDB = CurrentDb
          Set MyTable = MyDB.OpenRecordset("Counter Table")

          MyTable.Edit
          NextCounter = MyTable("Next Available Counter")

         '=================================================================
         'The next line can be changed to conform to your custom counter
         'preferences. This example increments the value by 10 each time.
         '=================================================================

          MyTable("Next Available Counter") = NextCounter + 10
          MyTable.Update

          MsgBox "Next available counter value is " &amp; Str$(NextCounter)
          Next_Custom_Counter = NextCounter

          Exit Function

          '================================================================
          'The following error routine should be replaced with a custom
          'error routine. This example only resumes execution when an error
          'occurs. If a record locking error occurs this is fine; however,
          'any non-record locking error will result in an infinite loop.
          '================================================================

          Next_Custom_Counter_Err:
             Msgbox "Error " &amp; Err &amp; ": " &amp; Error$
             If Err &lt;&gt; 0 Then Resume
          End

      End Function

</PRE><P><LI>Save the module as "Custom Counter Demo."
<P>
</OL><h3>Creating the Form</h3>
 

<OL><P><LI>On the Insert menu, click Form.

<P><LI>In the New Form dialog box, click Design view, and then click OK.

<P><LI>Add a command button to the form.

<P><LI>Set the button's OnClick property as follows:
<P>
<P><PRE>      =Next_Custom_Counter()
</PRE>
<P><LI>Save the form as "Custom Counter Demo."
<P>
</OL><h3>Running the Function</h3>
 

<OL><P><LI>Switch the Custom Counter Demo form to Form view.

<P><LI>Click the command button. Note that a message box appears, displaying
   the value of the next counter.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about creating AutoNumber fields, search the Help
Index for "AutoNumber fields, creating," or ask the Microsoft Access 97
Office Assistant.
 
<PRE>Keywords          : kbusage PgmHowTo
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

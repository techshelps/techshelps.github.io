

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Can't Use Arguments to Call Sub When Another Procedure Running </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108814">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1993/12/19">
<META NAME="Keywords" CONTENT="kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  If you run a Microsoft Visual Basic Programming System, Applications Edition, sub procedure that has arguments when another Visual Basic procedure is running, you may receive the following error message:     Can't perform requested operation  CAUSE...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA01,QAFF,QAGI,QBWS,QAB9,QAPN,QA5D,QAH4,QAHE,QA5F,QAMA,QBXS,QANX,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Can't Use Arguments to Call Sub When Another Procedure Running</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108814</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows 95, version 7.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
If you run a Microsoft Visual Basic Programming System, Applications
Edition, sub procedure that has arguments when another Visual Basic
procedure is running, you may receive the following error message:
<P>
<PRE>   Can't perform requested operation

</PRE><h2>CAUSE</h2>
 
<P>
You cannot call a Visual Basic sub procedure that has arguments if a
Visual Basic procedure is running at the time. Take for example a
custom dialog box with a control button assigned to a Visual Basic
procedure with an argument. If you run the dialog box using the "Run
Dialog" toolbar button on the Forms toolbar, you can choose the button and
the procedure assigned to that button is run. However, if you show the
dialog box from another Visual Basic procedure, and you click the button
assigned to the procedure that has arguments, you receive the error message
above, because the first Visual Basic procedure is still running. When you
run the dialog box from the Visual Basic procedure, the calling procedure
is suspended while the dialog box is displayed.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Although you cannot call a Visual Basic sub procedure that has
arguments if a Visual Basic procedure is running, you can do either
of the following:

<UL><LI>Call a Visual Basic subroutine that does not have arguments while a
   Visual Basic procedure is running
<P>
   -or-

<LI>Model your macro code after the following example.
<P>
</UL>Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.

<OL><P><LI>Enter the following in a new module sheet:
<P>
</OL>Public DoneFlag As Integer, ArgFlag As Integer
<P>
<PRE>Sub MainMacro()
   ArgFlag = 0                           'initialize ArgFlag
   DoneFlag = 0                          'initialize DoneFlag
   DialogSheets("Dialog1").Show          'Show it initially

   'While the DoneFlag does not equal 1 (which will only occur if the
   'DoneButton is clicked), continue to loop through the Subroutine.

   Do
      If ArgFlag = 1 Then                 'if the ArgFlag is set, then
         HasArg ("Here is the Argument")  'Arg Sheet1 and
         ArgFlag = 0                      'reset the ArgFlag
         DialogSheets("Dialog1").Show     'Reshow it only after
      End If                              'having called the procedure
   Loop Until DoneFlag = 1                'that hid it
End Sub

Sub DoneButton_Click()
   DoneFlag = 1                          'set the DoneFlag
   DialogSheets("Dialog1").Hide          'hide the dialog box
End Sub

Sub ArgButton_Click()
   DoneFlag = 0                          'ensure DoneFlag set to 0
   ArgFlag = 1                         'set the ArgFlag
   DialogSheets("Dialog1").Hide          'hide the dialog box
End Sub

Sub HasArg(Arg As String)   'do not assign this macro to any button
</PRE></OL>MsgBox Arg
<PRE>End Sub

</PRE><P><LI>Insert a new dialog sheet and make sure it is named "Dialog1", without
   quotes.

<P><LI>Add two new buttons to the dialog sheet.

<P><LI>Change the text of one button to "PassArg", without quotes, and assign
   the ArgButton_Click macro to this button.

<P><LI>Change the text of the other button to "Done", without quotes, and
   assign the DoneButton_Click macro to this button.

<P><LI>Run the MainMacro subroutine.

<P><LI>The dialog box will appear – click the "PassArg" button.
<P>
</OL>The dialog box will hide itself and a message box will appear with "Here is
the Argument" displayed.

<OL><P><LI>Click OK in the message box.
<P>
</OL>The dialog box reappears. This will repeat itself as long as you click the
"PassArg" button on the dialog box.

<OL><P><LI>Click the "Done" button to dismiss the dialog box and stop the MainMacro
   subroutine.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the Show Method, choose the Search button
in Help and type:
<P>
<PRE>   dialog boxes: displaying for user input
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 7.00<BR>
Keywords          : kbprg PgmOthr<BR>
Version           : 5.00 5.00c 7.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

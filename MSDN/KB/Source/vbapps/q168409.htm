

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PPT97: How To Manipulate ActiveX Controls Through VBA Macros </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168409">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1997/05/12">
<META NAME="Keywords" CONTENT="kbcode kbmacro kbprg kbdta kbdtacode kbpptvba">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provides basic information about how to add code to an ActiveX control which you can insert on a form or on a slide. This article is organized into the following four sections:   - Adding an ActiveX Control to a Slide or a Form  - View...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAOE,QAMN,QBT6,QBV4,QAHP,QAMB,QAPN,QAHV,QBWS,QAH4,QATX,QBM8,QBS0 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PPT97: How To Manipulate ActiveX Controls Through VBA Macros</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168409</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft PowerPoint 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides basic information about how to add code to an ActiveX
control which you can insert on a form or on a slide. This article is
organized into the following four sections:

<UL><LI>Adding an ActiveX Control to a Slide or a Form
<LI>Viewing the Properties of an ActiveX Control
<LI>Writing an Event Handler for the ActiveX Control
<LI>Using an Event Handler to Control Another Control
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Adding an ActiveX Control to a Slide or a Form</h3>
 
<P>
Use the following steps to add a Text Box control to a slide.
<P>
NOTE: You can also use these steps to add a control to a form.

<OL><P><LI>Go to the slide where you want to insert the control.

<P><LI>On the View menu, point to Toolbars, and then click Control
   Toolbox.

<P><LI>Click the Text Box button on the Control Toolbox toolbar, and draw
   the control on your slide.
<P>
   To add a third-party control, click the More Controls button
   on the Control Toolbox toolbar, click the control you want to use,
   and then draw the control on your slide.
<P>
   The Text Box ActiveX control now appears on your slide.
<P>
</OL>NOTE: If a third-party control is on your computer but it does not appear
in the list of controls, it may not be registered. To register the control,
click Register Custom Control at the bottom of the list of controls (click
the More Controls button on the Control Toolbox toolbar) and then locate
the third-party control.
<P>
<P><h3>Viewing the Properties of an ActiveX Control</h3>
 
<P>
The behavior of an ActiveX control is modified by manipulating the
properties for the control. You can edit the control properties before
run-time (before your slide show runs) or during run-time (while the slide
show runs).
<P>
NOTE: You cannot edit some control properties during run-time.
<P>
Use the following steps to view the property sheet for a control. Any
changes you make to the property sheet are considered to be before
run-time changes.

<OL><P><LI>Right-click the Text Box control, and then click Properties.
<P>
   NOTE: In PowerPoint, the only controls that have a property
   sheet are those from MSForms: Check Box, Combo Box, Command Button,
   Frame, Image, Label, List Box, MultiPage, Option Button, Scroll
   Bar, Spin Button, Tab Strip, Text Box, and Toggle Button.

<P><LI>In the Properties window, click the Alphabetic tab, and locate the
   property you want to change. For example, find the property called
   Text. In the value box, type the text you want to use for the Text
   property. For example, type your name. You will see something like
   this in the Property window:
<P>
<PRE>      Text      &lt;Your Name&gt;

   and your name appears in the Text Box control on the slide.

   You can also change the properties using the Categorized tab. This
   view organizes the properties into distinct categories, such as
   appearance, behavior, font and so on.

</PRE><P><LI>Change any other properties you want and then look at the control
   to see how the property affects the control.
<P>
</OL>NOTE: To obtain help on a property, click the property and press
the F1 key. If Visual Basic Help is not installed on your computer,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q176476.htm">Q176476</A></B>
   TITLE     : OFF: Office Assistant Not Answering Visual Basic Questions

</PRE></OL><h3>Writing an Event Handler for the ActiveX Control</h3>
 
<P>
Code that changes the properties of an ActiveX Control is considered a run-
time change.
<P>
To add code to the control, use these steps:

<OL><P><LI>Right-click the control, and then click View Code.
<P>
   The Code window where you can add code for your control appears
   on the right side of the Visual Basic Editor.

<P><LI>In the Object drop-down list, click TextBox1.

<P><LI>In the Procedure drop-down list, click DblClick.
<P>
   A subroutine called TextBox1_DblClick appears in the Code window.
   Type the following code in the subroutine:
<P>
<P><PRE>      MsgBox "A double click event"
</PRE><P>
   The complete TextBox1_DblClick procedure should look similar to
   this:
<P>
<PRE>      Sub TextBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
         MsgBox "A double click event"
      End Sub

   NOTE: The line that begins "Sub TextBox1..." actually begins with the
   word "Private" in the Code window, but it was removed from this example
   to shorten the line length.

</PRE></OL>To run the code, use these steps:

<OL><P><LI>Start the slide show.

<P><LI>On the Slide Show menu, click View Show.

<P><LI>Double-click the Text Box control.
<P>
   The following message appears:
<P>
<P><PRE>      A double click event
</PRE><P>
</OL><h3>Using an Event Handler to Control Another Control</h3>
 
<P>
In some cases you may want to create a control that modifies the behavior
of another control. One example of this type of control is the New Slide
dialog box (on the Insert menu, click New Slide). In the New Slide dialog
box, when you select an AutoLayout, the text in the lower right corner of
the dialog box changes to reflect the selected AutoLayout. Each time you
choose a different AutoLayout, the text string updates to reflect the name
of the currently selected AutoLayout.
<P>
The following code example uses a command button to retrieve the title of a
slide and displays that title in a text box.

<OL><P><LI>Create a blank presentation.
<P>
<P><PRE>    a. On the File menu, click New, and then click the General tab.
</PRE><P>
<P><PRE>    b. Click the Blank Presentation icon and click OK.
</PRE><P>
<P><PRE>    c. Click the Title Only AutoLayout and click OK.
</PRE>
<P><LI>Type the following text in the Title placeholder:
<P>
<P><PRE>      This is a test.
</PRE>
<P><LI>Insert a Command Button control on the slide.
<P>
<P><PRE>     a. On the View menu, point to Toolbars, and then click Control
<PRE></PRE>        Toolbox.

     b. Click Command Button on the Control Toolbox toolbar, and draw
        the control on the slide.

</PRE><P><LI>Insert a Text Box control on the slide. Click the Text Box
   button on the Control Toolbox toolbar and draw the control on the
   slide, making sure it is large enough to hold the title.

<P><LI>Right-click the Text Box control, and then click Properties.
<P>
   At the top of the Properties window, you will see a list box that
   contains the following:
<P>
<P><PRE>      TextBox1 TextBox
</PRE><P>
   The first item, TextBox1, is the name of the control; the second
   item, TextBox, is the type of control.
<P>
   NOTE: If you want to change the name of a control, do this in the
   Property window. The property called, (Name), holds the name of the
   control.

<P><LI>Double-click the Command Button control.
<P>
   The Visual Basic Editor appears.

<P><LI>Type the following code in the Code window:
<P>
<P><PRE>      With Slide1
</PRE><P>
<PRE>         ' Check if any text is in the Text Box control.
         If TextBox1.Text = "" Then

            ' If no text in the Text Box control, add the text
            ' from the Title placeholder to the control.
            TextBox1.Text = .Shapes.Title.TextFrame.TextRange
         Else

            ' If text is already in the control, delete the text.
            TextBox1.Text = ""
         End If

      End With

   The completed code for the click event handler looks like this:

      Private Sub CommandButton1_Click()

         With Slide1

            ' Check if any text is in the Text Box control.
            If TextBox1.Text = "" Then

               ' If no text in the Text Box control, add the text
               ' from the title placeholder to the control.
               TextBox1.Text = .Shapes.Title.TextFrame.TextRange
            Else

               ' If text already in the control, delete the text.
               TextBox1.Text = ""
            End If

         End With

      End Sub

</PRE><P><LI>To run the code, start the slide show ,and then do the following:
<P>
<P><PRE>    a. On the Slide Show menu, click View Show.
</PRE><P>
<P><PRE>    b. Click the Command Button control. Remember, the event handler
       is for CommandButton1_Click. This is a handler for a single
       click event.
</PRE><P>
<P><PRE>       The first time you click the button the text from the title is
       copied into the Text Box control. The second time you click the
       button, the text in the Text Box control is deleted.
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about getting help with Visual Basic for Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.00 ppt8 97 ppt97 vba vbe visual basic<BR>
applications<BR>
Keywords          : kbcode kbmacro kbprg kbdta kbdtacode kbpptvba<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

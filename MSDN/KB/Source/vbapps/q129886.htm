

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Optimize OLE Calls in Visual Basic </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129886">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="IAPOLE PrgOptTips VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Because 32-Bit versions of Visual Basic make extensive use of Microsoft OLE Technologies, the correct use of object references can be crucial to the performance of a Visual Basic application.  MORE INFORMATION  First, you should read the Visual Bas...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAGI,QAPN,QA9Q,QAW6,QA5F,QAMA,QAI4,QAIF,QAU3,QAMR,QALY,QBXS,QBE7,QBE6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Optimize OLE Calls in Visual Basic</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129886</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions,
   for Windows, version 5.0
<LI>Professional and Enterprise Editions of Microsoft Visual Basic,
   16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Because 32-Bit versions of Visual Basic make extensive use of Microsoft OLE
Technologies, the correct use of object references can be crucial to the
performance of a Visual Basic application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
First, you should read the Visual Basic documentation on optimizing your
application. Visual Basic 4.0 users should refer to Chapter 27,
"Optimizing Your Application for Size and Speed," in the Visual Basic
"Programmer's Guide". Visual Basic 5.0 users should refer to the "Design
Performance and Compatibility" chapter of the "Programmer's Guide". These
chapters lay out details of many of the most useful size and speed
optimizations.
<P>
<P><h3>Use the Most Specific Object Available</h3>
 
<P>
In Visual Basic, accessing any object model typically requires the repeated
use of the Object.Property syntax. This chain of references can get quite
long:
<P>
<PRE>   DBEngine.Workspaces(0).Databases(0).RecordSet.Fields(0).Name

</PRE>Each dot (.) in this sequence represents an OLE lookup that is required in
order for Visual Basic to access the next element. If you put a statement
like the following into a loop, it can generate a large number of needless
lookups:
<P>
<PRE>      ' Assume Fields.Count = 10
      For I% = 0 To DBEngine.WorkSpaces(0).Database._
         RecordSet.Fields.Count - 1
            ' Five dots.
            Print DBEngine.WorkSpaces(0).Database.RecordSet.Fields(I%).Name
            ' Five Dots.
      Next
      ' This loop generates OLE calls for each dot (.)
      ' in the Print statement
      ' on each iteration of the loop.

</PRE>By using the most specific object type available, you can reduce the
overhead of this same loop significantly, as in this example:
<P>
<PRE>     Dim DB As Database
     Dim X As Fields
     Dim F As Field
       Set DB = DBEngine.Workspaces(0).OpenDatabase("biblio.mdb")
       'Object binding takes place at compile time
       Set X =   DBEngine.Workspaces(0).Databases(0).TableDefs(0).Fields
       'Four dots, only executed once.
       For Each F In X
         Print F.Name
         'One OLE call
       Next

</PRE><h3>Take Advantage of With Statement Blocks to Reduce Repeat References</h3>
 
<P>
To set multiple properties of a single object, you can use With...End With
to reduce the number of times the chain of references is invoked to set
your properties. In this case, you don't even have to have a temporary
object of the object type defined.
<P>
This set of assignments:
<P>
<PRE>   DBEngine.WorkSpaces(0).Database.RecordSet.Fields(0).Name = "NYSE"
   DBEngine.WorkSpaces(0).Database.RecordSet.Fields(0).Required = True
   DBEngine.WorkSpaces(0).Database.RecordSet.Fields(0).Size = 10
   DBEngine.WorkSpaces(0).Database.RecordSet.Fields(0).Type = dbText
   DBEngine.WorkSpaces(0).Database.RecordSet.Fields(0).Value = "MSFT"

</PRE>Can be optimized by reducing the dot references using the 'With' statement:
<P>
<PRE>   With DBEngine.WorkSpaces(0).Database.RecordSet.Fields(0)
      .Name = "NYSE"
      .Required = True
      .Size = 10
      .Type = dbText
      .Value = "MSFT"
   End With

</PRE>This reduces the number of OLE object lookups that must be done to execute
the assignments.
<P>
<P><h3>Minimize Cross-Process OLE Calls</h3>
 
<P>
InProcess OLE Automation calls will always be faster than Local Process
calls (such as automating Excel from Visual Basic for Windows). If you do
Local Process OLE automation, an early bound object (Dim X As
Excel.Application) rather than a late bound object (Dim X as object) can
cut the overhead significantly as only one cross process call is needed.
Use the 'With statement' and 'Specific Objects' suggestions above. Use In-
Process OLE Servers Instead of Out-of-Process OLE Servers
<P>
In-process OLE Servers (OLE servers created using the Make DLL menu option)
are significantly faster than out-of-process OLE Servers (OLE servers
created using the Make EXE menu option).
<P>
<P><h3>Use Server-Side Macros to Reduce Cross-Process Calls</h3>
 
<P>
Macro functions created on the Server side (for example, a WordBasic macro
created in Word and called from Visual Basic) require only a single
cross-process call but can perform multiple operations. This speeds up the
total execution time.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: optimize faster speedier quicker best optimal<BR>
Keywords          : IAPOLE PrgOptTips VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:4.0 5.0<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

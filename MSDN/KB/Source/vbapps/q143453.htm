

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Named Arguments Are Not Supported with DAO </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143453">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1996/02/01">
<META NAME="Keywords" CONTENT="kbcode kberrmsg kbprg xldao xl97vbmigrate">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you run a Microsoft Excel Visual Basic for Applications macro that uses Data Access Objects (DAO), you may receive one of the following error messages:     Compile Error:    Named Argument Not Found     -or-     Run-time error '438':    Object...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAHE,QBS0,QBVP,QAH6,QAUJ,QBVV,QAB4,QAAP,QAH4,QAPF,QAR4,QAGI,QBWS,QBSO P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Named Arguments Are Not Supported with DAO</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143453</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows 95, versions 7.0 and 7.0a
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you run a Microsoft Excel Visual Basic for Applications macro that
uses Data Access Objects (DAO), you may receive one of the following error
messages:
<P>
<PRE>   Compile Error:
   Named Argument Not Found

   -or-

   Run-time error '438':
   Object doesn't support this property or method

</PRE><h2>CAUSE</h2>
 
<P>
DAO versions 3.0 and 3.5, which are included with Microsoft Excel 7.0 and
97 respectively, do not fully support named arguments. In some cases, named
arguments will work without error, however, you should avoid using them.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this behavior, use positional arguments instead of named
arguments.
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
In a Visual Basic macro, when you call a Subroutine or Function, you can
supply arguments positionally, in the order in which they appear in the
definition of the procedure. Alternatively, you can supply the arguments by
name without regard to position. However, with DAO properties and methods,
Microsoft recommends that you use only positional arguments.
<P>
<P><h3>Example of the Problem</h3>
 
<P>
The DAO 3.5 OpenDatabase method uses the following syntax:
<P>
<PRE>   Set &lt;database&gt; = OpenDatabase(dbname, options, readonly, connect)

</PRE>If you use the OpenDatabase method by supplying named arguments in the
macro, you may receive one of the errors described in this article. For
example, when you run the following macro, the compile error "Named
Argument Not Found" appears:
<P>
<PRE>   Set DB = _
      OpenDatabase(dbname:= "C:\My Documents\DB1.MDB", readonly: = True)

</PRE><h3>Example of the Resolution</h3>
 
<P>
To correct the problem, use positional arguments. To do this, supply the
arguments for the method in the correct position, where each argument is
delimited by a comma, as shown in the following example:
<P>
<PRE>   Set DB = OpenDatabase("C:\My Documents\DB1.MDB", , True)

</PRE><h2>STATUS</h2>
 
<P>
This behavior is by design in Microsoft Excel 97.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about named arguments, click the Index tab in
Visual Basic for Applications Help, type the following text
<P>
<PRE>   named arguments

</PRE>click the Display button, and then double-click the "Understanding Named
Arguments and Optional Arguments" topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 8.0 8.00 parameter OpenRecordset<BR>
Keywords          : kbcode kberrmsg kbprg xldao xl97vbmigrate<BR>
Version           : WINDOWS:7.0,7.0a,97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

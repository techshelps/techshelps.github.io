

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Visual Basic Procedures for Julian Date Calculations </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q116281">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/06/15">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article describes how to convert between the serial date, normal date, and Julian date formats using Visual Basic, Applications Edition procedures.  MORE INFORMATION  Microsoft Excel normally stores date values as serial numbers. For example, ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACE,QBS0,QAUD,QAKC,QDJ9,QANF,QBVP,QAGJ,QBC6,QAYZ,QANE,QAKD,QAG8,QAFF,QATX P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Visual Basic Procedures for Julian Date Calculations</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q116281</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to convert between the serial date, normal date,
and Julian date formats using Visual Basic, Applications Edition
procedures.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Excel normally stores date values as serial numbers. For example,
January 1, 1994, is stored as the number 34335. The serial number 1,
represents January 1, 1900. All of these calculations are based on the 1900
date system.
<P>
Julian dates are used to show the number of days that have passed and/or
that are left in a given year. The format for a Julian date is the
following:
<P>
<PRE>   yyddd

</PRE>Where 'yy' is the year and 'ddd' is the day of the year. Below are examples
of serial, normal, and Julian date equivalents:
<P>
<PRE>   Serial date          Normal date          Julian date
   -----------          -----------          -----------

   34335                Jan-01-1994          94001
   34699                Dec-31-1994          94365

</PRE>The following Visual Basic procedures convert from Julian to Serial, Serial
to Julian, and Normal Date to Julian. The last two procedures show how to
find the day of the year for the current date and how many days are left in
the year.
<P>
Microsoft provides examples of Visual Basic procedures for illustration
only, without warranty either expressed or implied, including but not
limited to the implied warranties of merchantability and/or fitness for a
particular purpose. This Visual Basic procedure is provided 'as is' and
Microsoft does not guarantee that it can be used in all situations.
Microsoft does not support modifications of this procedure to suit customer
requirements for a particular purpose. Note that a line that is preceded by
an apostrophe introduces a comment in the code--comments are provided to
explain what the code is doing at a particular point in the procedure. Note
also that an underscore character (_) indicates that code continues from
one line to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line-
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This Manual"
section in the "Document Conventions" section of the "Visual Basic User's
Guide."
<P>
<PRE>'This procedure takes a Julian date (yyddd) entered in an Input Box
'and converts it to the appropriate serial date.
Sub JulianToSerial()
  'Holds the value of the string entered in the Input Box.
  Dim JulianDate As Long
  'The converted serial date value.
  Dim SerialDate As Date

  'Prompt for input and assign the value entered to the
  'JulianDate variable.
  JulianDate = Val(InputBox("Enter the Julian date (yyddd):"))

  'Convert the Julian date to a serial date.
  SerialDate = DateSerial(1900 + Int(JulianDate / 1000), 1, _
     JulianDate Mod 1000)

  'Display the new date in the normal date format.
   MsgBox "The equivalent date is " &amp; SerialDate
End Sub

'This procedure takes a serial date number entered in an Input Box
'and converts it to the appropriate Julian date and returns it as a
'string.
Sub SerialToJulian()
    Dim SerialDate As Date      'The serial date.
    Dim SerialYear As String    'The year of the serial date.
    Dim JulianDay As String
    Dim JulianDate As String    'The converted Julian date value

    'Prompt for input and assign the value entered to the
    'SerialDate variable.
    SerialDate = Val(InputBox("Enter the serial date to convert:"))

    'Assign SerialYear the year number
    SerialYear = Format(SerialDate, "yy")

    'Find the day number for SerialDate
    JulianDay = Format(Str(SerialDate - DateValue("1/1/" &amp; _
    Str(SerialYear)) + 1), "000")
    JulianDate = SerialYear &amp; JulianDay

    'Display the new date in the normal date format.
    MsgBox "The equivalent Julian date is " &amp; JulianDate
End Sub

'This procedure takes a normal date format (that is, 1/1/94) entered in
'an Input Box and converts it to the appropriate Julian date.
Sub NormalToJulian()
    Dim CRLF As String          'Carriage return/line feed.
    Dim NormalDate As Date      'The serial date.
    Dim DateYear As String      'The year of the serial date.
    Dim JulianDay As String
    Dim JulianDate As String    'The converted Julian date value

    'Assign CRLF the value of a carriage return and line feed.
    CRLF = Chr$(13)

    'Prompt for input and assign the value entered to the
    'NormalDate variable.
    NormalDate = DateValue(InputBox("Enter the date to convert:" &amp; _
    CRLF &amp; "Examples: " &amp; CRLF &amp; "1/1/94" &amp; CRLF &amp; "12/31/1994" _
    &amp; CRLF &amp; "Jan-05-94"))

    'Assign DateYear the year number
    DateYear = Format(NormalDate, "yy")

    'Find the day number for NormalDate
    JulianDay = Format(Str(NormalDate - DateValue("1/1/" &amp; _
    Str(DateYear)) + 1), "000")

    'Combine the year and day to get the value for JulianDate.
    JulianDate = DateYear &amp; JulianDay

    'Display the new date in the Julian date format.
    MsgBox "The equivalent Julian date is " &amp; JulianDate
End Sub

'This procedure will return the number of days that
'have passed since January 1 of the current year.
Sub DaysPassed()
    Dim DayOfYear As Integer          'Number of the current day

    DayOfYear = Int(((Now / 365.255) - (Year(Now) - 1900)) * 365.255)

    'Display the value of DayOfYear
    MsgBox "Day of the year:  " &amp; DayOfYear
End Sub

'This procedure will return the number of days left in the current
</PRE>year.
<PRE>Sub DaysLeft()
    Dim JanNextYear As Date         'January 1 of next year
    Dim JanCurrentYear As Date      'January 1 of current year
    Dim DayNum As Integer           'Number of the current day
    Dim DaysLeftInYear As Integer   'Days left in the current year

    JanNextYear = DateSerial(1 + Year(Now), 1, 1)
    JanCurrentYear = DateSerial(Year(Now), 1, 1)
    DayNum = Int(((Now / 365.255) - (Year(Now) - 1900)) * 365.255)
    DaysLeftInYear = JanNextYear - JanCurrentYear - DayNum

    'Display the value of DaysLeftInYear
    MsgBox "Days left in the year:  " &amp; DaysLeftInYear
End Sub


</PRE><h2>REFERENCES</h2>
 
<P>
For more information about the DateSerial function, choose the Search
button in Visual Basic Help, and type:
<P>
<PRE>   DateSerial
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 97 7.00 4.00 4.0a 5.00
<P>

Keywords          : kbprg PgmHowTo kbcode kbprg<BR>
Version           : 5.00 5.00c 7.00 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

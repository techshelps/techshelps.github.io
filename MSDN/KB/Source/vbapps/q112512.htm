

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>"Can't Assign Array..." Passing Argument to Subroutine </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112512">
<META NAME="KBModify" CONTENT="1997/07/29">
<META NAME="KBCreate" CONTENT="1994/03/10">
<META NAME="Keywords" CONTENT="kbcode kberrmsg kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Visual Basic Programming System, Applications Edition, if you pass an argument to a subroutine and the argument data type does not match the parameter data type defined in the subroutine, you receive the following error message:     Ca...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAFF,QAH6,QAMB,QAYL,QAH7,QAC2,QAD7,QAVX,QAVW,QAB4,QBE7,QBE6,QAPN,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>"Can't Assign Array..." Passing Argument to Subroutine</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112512</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Programming System, Applications Edition,
   version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft Visual Basic Programming System, Applications Edition, if you
pass an argument to a subroutine and the argument data type does not match
the parameter data type defined in the subroutine, you receive the
following error message:
<P>
<PRE>   Can't assign array of fixed-length string or user-defined type to
   Variant

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Variant is a special data type that can contain any kind of data. You can
determine how the data in a Variant is treated using the VarType or
TypeName function. When you declare a variable as Variant data type, you
can change the data type of the variable within a procedure. If the
contents of a Variant variable are digits, they may be either the string
representation of the digits or their actual value, depending on the
context.
<P>
However, when you are passing a variable to a subroutine, the data type
must match the data type of the subroutine parameter, even when the
variable you are passing or the parameter declared in the subroutine is
declared as Variant data type.
<P>
<P><h2>Visual Basic Example</h2>
 
<P>
When you run the procedure Run_Test below in a Visual Basic module in
Microsoft Excel version 5.0, you receive the error message described above:
<P>
Dim x() As Label
<P>
<PRE>Sub Run_Test()
   ' Pass variable x to Test subroutine
   Test x
End Sub

Sub Test(A As Variant)
     ' Resize array to one element
   ReDim A(0)
   ' Assign array value to label object on worksheet
   Set A(0)=ThisWorkbook.Worksheets("Sheet1").Labels.Add(10,10,75,16)
   ' Set name of label
   A(0).Name = "Label1"
   MsgBox TypeName(A(0))
End Sub

</PRE><h2>WORKAROUND</h2>
 
<P>
To avoid receiving this error message when you pass a variable to a
subroutine, you must define the variable you are passing to the subroutine
to be the same data type as the subroutine parameter.
<P>
To run the procedure in the above example without receiving the error
message, modify the procedure as in the following examples:
<P>
<P><h3>Example 1</h3>
 
<P>
Dim x() As Label
<P>
<PRE>Sub Run_Test()
   ' Pass variable x to Test subroutine
   Test x()
End Sub

Sub Test(A() As Label)
     ' Resize array to one element
   ReDim A(0)
   ' Assign array value to label object on worksheet
   Set A(0)=ThisWorkbook.Worksheets("Sheet1").Labels.Add(10,10,75,16)
   ' Set name of label
   A(0).Name = "Label1"
   MsgBox TypeName(A(0))
End Sub

</PRE><h3>Example 2</h3>
 
<P>
Dim x() As Variant
<P>
<PRE>Sub Run_Test()
   ' Resize array to two elements
   Redim x(1)
   ' Assign first element in array to label object on worksheet
   Set x(0)=ThisWorkbook.Worksheets("Sheet1").Labels.Add(10,10,75,16)
   ' Pass variable x to Test subroutine
   Test x
End Sub

Sub Test(A As Variant)
   ' Assign second element in array to label object on worksheet
   Set A(1)=ThisWorkbook.Worksheets("Sheet1").Labels.Add(10,10,75,16)
   ' Set name of label
   A(1).Name = "Label1"
   MsgBox TypeName(A(1))
End Sub

</PRE>Microsoft provides examples of Visual Basic procedures for illustration
only, without warranty either expressed or implied, including but not
limited to the implied warranties of merchantability and/or fitness for a
particular purpose. This Visual Basic procedure is provided 'as is' and
Microsoft does not guarantee that it can be used in all situations.
Microsoft does not support modifications of this procedure to suit customer
requirements for a particular purpose. Note that a line that is preceded by
an apostrophe introduces a comment in the code--comments are provided to
explain what the code is doing at a particular point in the procedure. Note
also that an underscore character (_) indicates that code continues from
one line to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This Manual"
section in the "Document Conventions" section of the "Visual Basic User's
Guide."
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the Dim statement, choose the Search button in
the Visual Basic Reference and type:
<P>
<PRE>    Dim
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: err msg<BR>
Keywords          : kbcode kberrmsg kbprg<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

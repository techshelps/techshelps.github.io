

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Retrieve Request Items Using DDERequest to MSQuery </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149581">
<META NAME="KBModify" CONTENT="1997/12/01">
<META NAME="KBCreate" CONTENT="1996/04/04">
<META NAME="Keywords" CONTENT="kbcode kbprg kbtool PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you use DDERequest statements to return request items from Microsoft Query, the data is always returned as an array. Because a number of DDERequest statements will return a single dimension array under some circumstances and a two dimension ar...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBI0,QAUD,QAGB,QBVP,QALW,QAZV,QA01,QA5V,QAGI,QAI5,QAKC,QAL3,QAB4,QADX,QAYY P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Retrieve Request Items Using DDERequest to MSQuery</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149581</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for the Macintosh, version 5.0
<LI>Microsoft Query for Windows, version 1.0
<LI>Microsoft Query for Windows 95, version 2.0
<LI>Microsoft Query 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you use DDERequest statements to return request items from Microsoft
Query, the data is always returned as an array. Because a number of
DDERequest statements will return a single dimension array under some
circumstances and a two dimension array under other circumstances, failure
to retrieve the data properly may result in Subscript Out Of Range errors.
<P>
This article identifies which DDERequest statements return each of the
following:

<UL><LI>Single Dimension Array Result of One Element Each

<LI>Two Dimension Column Array Result

<LI>Multiple-Dimension Array Result (That is, an array result that may be
   one dimension under certain circumstances and two dimensions under other
   circumstances.)

<LI>Special Case: Two Dimension Table Array Result
<P>
</UL>This article also describes how you can use DDERequest to return data from
Microsoft Query under each of these situations.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The code samples shown below assume that you are familiar with how to use
Microsoft Query. (See the "References" section below for places you can
refer to for more information about using Microsoft Query.)
<P>
Before you attempt to run any of these example subroutines, be sure that
Microsoft Query is open, and that you run the subroutine from an active
empty worksheet.
<P>
<P><h3>Sample Visual Basic Code</h3>
 
<P>
Microsoft provides programming examples for illustration only, without 
warranty either expressed or implied, including, but not limited to, the 
implied warranties of merchantability and/or fitness for a particular 
purpose. This article assumes that you are familiar with the programming 
language being demonstrated and the tools used to create and debug 
procedures. Microsoft support engineers can help explain the functionality 
of a particular procedure, but they will not modify these examples to 
provide added functionality or construct procedures to meet your specific 
needs. If you have limited programming experience, you may want to contact 
the Microsoft fee-based consulting line at (800) 936-5200. For more 
information about the support options available from Microsoft, please see 
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Single Dimension Array Result of One Element Each</h3>
 
<P>
The following DDERequest items will always return a one dimension, single
element array:

<UL><LI>NumRows--returns the number of Rows (records) in the query

<LI>NumCols--returns the number of Columns (fields) in the query

<LI>Query--returns the name of the active query
<P>
   Recest--returns a rough estimate of how many rows (records) can be
<P><PRE>      fetched at a time
</PRE>
<LI>ODBCSQLStatement--returns the ODBC SQL Statement used to access the
<P><PRE>      data
</PRE>
<LI>QueryDefinition--returns the SQL Statement used to access the data

<LI>DataSourceName--returns the name of the Data Source used by the active
<P><PRE>      query
</PRE>
<LI>ErrorText--returns the error text, if any, from the most recently
<P><PRE>      executed SQL statement
</PRE>
<LI>ConnectionString--returns the connection string used to connect to the
<P><PRE>      active window
</PRE>
<LI>NameSeparator--returns the single character used as the ODBC qualifier
<P><PRE>      name separator
</PRE>
<LI>TierType--returns a single digit indicating the type of data source

<LI>Database/source--returns all databases for the specified data source

<LI>Username/source/database--returns the user name (database owner) for
<P><PRE>      the specified data source and database
</PRE>
<LI>Topics--returns the names of the topics open on the System Channel
<P><PRE>      along with System
</PRE>
<LI>Status--returns Microsoft Query's Status
<P>
</UL>The following example shows how you can open a channel to Microsoft Query
using DDE, build your own query in Microsoft Query and exit to Microsoft
Excel, retrieve a one dimension array of data, display the results in a
message box, and close the channel.
<P>
<PRE>   Sub OneDimArray()
      ' Open a channel to Microsoft Query using DDE.
      Chan = DDEInitiate("MSQUERY", "System")

      ' Enable a user to build his or her own query in Microsoft Query and
      ' Exit Microsoft Query using "Return to Excel" on the File Menu.
      DDEExecute Chan, "[UserControl('&amp;Return to Excel',3,true)]"

      ' Return the request item desired. In this example you return
      ' the name of the Data Source in use by the active query.
      MsgBox DDERequest(Chan, "DataSourceName")(1)

      ' Exit Microsoft Query if this is the only Query open. If other
      ' queries are open and you want to close them all, use 
      ' "[Exit(True)]".
      DDEExecute Chan, "[Exit(False)]"

      ' Terminate the DDE channel.
      DDETerminate Chan
   End Sub

</PRE><h3>Two Dimension Column Array Result</h3>
 
<P>
The following DDERequest items will always return a two dimension, single
column (vertical array) result:

<UL><LI>Sources--returns all current data source connections available in the
<P><PRE>      Select Data Source dialog box
</PRE>
<LI>Logon--returns all remote databases available in the ODBC Data Sources
<P><PRE>      dialog box
</PRE>
<LI>Tables/source/user/database--returns all the Tables (both Database and
<P><PRE>      System) for the specified data source, user, and database
</PRE>
<LI>Users/source/database--returns the available users (Owners and
<P><PRE>      Databases) for the specified data source and database
</PRE>
<LI>FileExt--returns the File Extension for the currently connected Data
<P><PRE>      Source
</PRE><P>
</UL>The following example shows how you can open a channel to Microsoft Query
using DDE, build your own query in Microsoft Query and exit to Microsoft
Excel, retrieve a two dimension array of data, display the results in a
series of message boxes, and close the channel.
<P>
<PRE>   Sub TwoDimArray()
      ' Open a channel to Microsoft Query using DDE.
      Chan = DDEInitiate("MSQUERY", "System")

      ' Enable a user to build his or her own query in Microsoft Query and
      ' Exit Microsoft Query using "Return to Excel" on the File Menu.
      DDEExecute Chan, "[UserControl('&amp;Return to Excel',3,true)]"

      ' Return the request item desired. In this example you return
      ' the names of all remote databases available in the ODBC Data
      ' Sources.
      LogArray = DDERequest(Chan, "Logon")

      ' Determine how many elements are in the first dimension of the
      ' returned array. The second dimension of the array will always be
      ' one.
      LogLen = UBound(LogArray, 1)

      ' Set up a loop to display each database name.
      For i = 1 To LogLen

         ' Display each database name in a message box.
         MsgBox "Logon function - Returns the ODBC.INI Data Source" _
            &amp; "Connections" &amp; Chr(10) &amp; Chr(10) &amp; "Logon Connection " _
            &amp; i &amp; ": " &amp; LogArray(i, 1)

         ' Return to "For I" above until all database names have been
         ' displayed.
      Next i

      ' Exit Microsoft Query if this is the only Query open. If other
      ' queries are open and you want to close them all, use 
      ' "[Exit(True)]".
      DDEExecute Chan, "[Exit(False)]"

      ' Terminate the DDE channel.
      DDETerminate Chan

   End Sub

</PRE><h3>Multiple-Dimension Array Result</h3>
 
<P>
The following DDERequest items return a one dimension array if the
number of data items in the requested list is one, and a two dimension
array if the number of data items in the requested list is more than one.

<UL><LI>Logoff--returns all currently connected remote databases (those
<P><PRE>      currently open in Microsoft Query)
</PRE>
<LI>QueryDefinition/n--returns the SQL Statement parsed into an array of
<P><PRE>      "n" characters per element
</PRE>
<LI>ODBCSQLStatement/n--returns the ODBC SQL Statement parsed into an array
<P><PRE>      of "n" characters per element
</PRE><P>
</UL>The following example shows how you can open a channel to Microsoft Query
using DDE, build your own query in Microsoft Query and exit to Microsoft
Excel, retrieve the data, determine if the data is in a one or two
dimension array, display the results in a series of message boxes, and
close the channel.
<P>
<PRE>   Sub MultiDimArray()
      ' Open a channel to Microsoft Query using DDE.
      Chan = DDEInitiate("MSQUERY", "System")

      ' Enable a user to build his or her own query in Microsoft Query and
      ' Exit Microsoft Query using "Return to Excel" on the File Menu.
      DDEExecute Chan, "[UserControl('&amp;Return to Excel',3,true)]"

      ' Return the request item desired. In this example we are returning
      ' the names of all the currently connected remote databases.
      OffArray = DDERequest(Chan, "Logoff")

      ' Determine how many elements are in the first dimension of the 
      ' array. The second dimension of the array will always be one.
      OffLen = UBound(OffArray, 1)

      ' If the first dimension of the array contains only one element...
      If UBound(OffArray) = 1 Then

         ' Then display the database name in a message box.
         MsgBox "Logoff function - Returns the currently" _
            &amp; " connected database name" &amp; Chr(10) &amp; Chr(10) _
            &amp; "Database: " &amp; OffArray(1)

         ' However, if there is more than one value in the first dimension  
         ' of the array...
      Else

         ' Then loop through all of the values returned.
         For i = OffLen To 1 Step -1

            ' And display each one in a message box. In this case, we are
            ' displaying the most recently accessed database name first.
            MsgBox "Logoff function - Returns all currently" _
               &amp; " connected remote databases" _
               &amp; Chr(10) &amp; Chr(10) &amp; "Connected Database " _
               &amp; i &amp; ": " &amp; OffArray(i, 1)

            ' Return to "For I" above until all database names have been
            ' displayed.
         Next i

      ' End the Block If statement.
      End If

      ' Exit Microsoft Query if this is the only Query open. If other
      ' queries are open and you want to close them all, use 
      ' "[Exit(True)]".
      DDEExecute Chan, "[Exit(False)]"

      ' Terminate the DDE channel.
      DDETerminate Chan
   End Sub

</PRE><h3>Special Case: Two Dimension Table Array Result</h3>
 
<P>
The following DDERequest item will always return a two dimension array.

<UL><LI>FieldDef--returns a table describing the Field Name, Field Data Type,
<P><PRE>      Field Width, Field Precision (number of decimal places) and the SQL
      Data Type
</PRE><P>
</UL>At least one Request Item, FieldDef, always returns more than one element
in the first dimension of the array.
<P>
If there is only one row (record) in the FieldDef result, the first
dimension of the array returns a 5, the number of columns (fields) in the
array. If there are two or more records, the first dimension returns the
number of records (rows) and the second dimension returns the number of
columns.
<P>
If the result is a single record, you cannot determine the number of array
dimensions by counting the elements in the first dimension. If you
try to test the second dimension you can get a "subscript out of range"
error message.
<P>
To address this situation you can use the "On Error Resume Next" logic as
in the following example to open a channel to Microsoft Query, to build
your own query in Microsoft Query and exit to Microsoft Excel, to retrieve
the data, to determine if the data is in a one or two dimension array, to
insert the requested table into the active worksheet, and to close the
channel.
<P>
<PRE>   Sub TableArray()
      ' Open a channel to Microsoft Query using DDE.
      Chan = DDEInitiate("MSQUERY", "System")

      ' Enable a user to build his or her own query in Microsoft Query and
      ' Exit Microsoft Query using "Return to Excel" on the File Menu.
      DDEExecute Chan, "[UserControl(' &amp;Return to Excel' ,3,true)]"

      ' Return the request item desired. In this example we are returning
      ' a table of values that describe the attributes of the database data
      ' result.
      FieldArray = DDERequest(Chan, "FieldDef")

      ' Turn on error handling. In this case, you want to resume with the
      ' next line of code if an error is detected.
      On Error Resume Next

      ' You can now use "IsError" to test to see if trying to access the
      ' second dimension will produce an error.
      If IsError(Fieldcols = UBound(FieldArray, 2)) Then

      ' If you get an error, suspect that there is only one dimension
      ' in the array (other errors could also occur) and set the number
      ' of field rows to 1 and the field column count to 5. This code does
      ' not address any other error condition.
         Fieldrows = 1
         Fieldcols = UBound(FieldArray, 1)

         ' Once you pass this point, you want turn off the error
         ' handler (unless you want to write code to handle other
         ' potential errors)
         On Error GoTo 0

         ' If there was no error, then this is a two dimension array.
      Else
         ' Get the number of records from the first dimension.
         Fieldrows = UBound(FieldArray, 1)

         ' Get the number of columns from the second dimension.
         Fieldcols = UBound(FieldArray, 2)

         ' End the Block If statement.
      End If

      ' Resize the worksheet range for the number of rows and columns
      ' in the table and load the data onto the worksheet.
      Worksheets("Sheet1").Range("A1").Resize(Fieldrows, Fieldcols) = _
         FieldArray

      ' Exit Microsoft Query if this is the only Query open. If other
      ' queries are open and you want to close them all, use
      ' "[Exit(True)]".
      DDEExecute Chan, "[Exit(False)]"

      ' Terminate the DDE channel.
      DDETerminate Chan
   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
"Getting Started with Microsoft Office for Windows 95"
<P>
Microsoft Query Online Help
<P>
"Microsoft Query version 1.0 User's Guide," Chapter 9,"Using Dynamic Data
Exchange with Microsoft Query"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 1.00 2.00 5.0 5.0c 5.00 5.00a 5.00c 7.00<BR>
Keywords          : kbcode kbprg kbtool PgmHowto<BR>
Version           : WINDOWS:5.0,7.0,97; MACINTOSH:5.0<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

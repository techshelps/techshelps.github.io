

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Example Using a Callback Procedure with Balloons </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167842">
<META NAME="KBModify" CONTENT="1997/10/24">
<META NAME="KBCreate" CONTENT="1997/04/30">
<META NAME="Keywords" CONTENT="kbprg PgmObj">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to use the Callback property of a Balloon object to determine which check boxes a user selected, or which label or button a user clicked, and t...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QAC2,QA0P,QA0O,QABH,QABI,QAPN,QAB9,QDKX,QA1S,QDN9,QAKE,QAVS,QAHE,QA5D P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Example Using a Callback Procedure with Balloons</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 24, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167842</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to use the Callback property of a Balloon
object to determine which check boxes a user selected, or which label or
button a user clicked, and then to respond to that selection.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
NOTE: A demonstration of the technique used in this article can be seen
in the sample file, FrmSmp97.exe. For information about how to obtain
this sample file, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q175066.htm">Q175066</A></B>
   TITLE     : ACC97: Microsoft Access 97 Sample Forms Available on MSL

</PRE><h2>MORE INFORMATION</h2>
 
<P>
A balloon is the area in which the Microsoft Office Assistant displays
headings and text, similar to a message box. In addition to headings and
text, a balloon may contain other types of controls, such as check boxes,
buttons, and labels which are similar to option buttons.
<P>
To determine which label or button a user clicked, or which check boxes a
user selected in a balloon, you must create a Callback procedure and set
the balloon's Callback property to the name of that procedure. A Callback
procedure is a procedure that runs whenever a modeless balloon is
displayed.
<P>
To display a balloon with multiple buttons, labels, and check boxes, follow
these steps:

<OL><P><LI>Create a module and type the following line in the Declarations
   section if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>On the Tools menu, click References, and then click Microsoft Office 8.0
   Object Library to add it as a reference. If you do not see it in the
   list, search your hard drive for the file, MSO97.DLL.

<P><LI>Type the following procedure:
<P>
<PRE>      Sub OpenBalloon()
         Dim offBalloon As Office.Balloon
         Set offBalloon = Application.Assistant.NewBalloon
         With offBalloon
            ' Show the Office Assistant.
            .Parent.Visible = True

            ' Set the heading and text of the balloon.
            .Heading = "Welcome to the Microsoft Office 97 Assistant!"
            .Text = "Click one or more of the check boxes below, and " _
                   &amp; "also click either a label or a button."

            ' Make the balloon modeless.
            .Mode = msoModeModeless

            ' Display the Back, Next, and Close Buttons.
            ' To determine the constants for other buttons you can place
            ' on a balloon, view the Microsoft Office 8.0 Object library
            ' in the Object Browser.
            .Button = msoButtonSetBackNextClose

            ' Display two check boxes.
            .Checkboxes(1).Text = "Checkbox 1"
            .Checkboxes(2).Text = "Checkbox 2"

            ' Display two labels.
            .Labels(1).Text = "Label 1"
            .Labels(2).Text = "Label 2"

            ' Define which Callback procedure to run.
            .Callback = "WhichButton"
            .Show
         End With
      End Sub

</PRE><P><LI>Following is an example of a Callback procedure written to use with the
   procedure demonstrated above. Note that the Callback procedure accepts
   three arguments: bln, iBtn, and iPriv. All Callback procedures you
   write for use with balloons must accept these three arguments.
<P>
   The first argument, bln, defines the Balloon object that called the
   procedure. The second argument, iBtn, defines the value of the button
   or label the user clicked. Using the iBtn argument, you can determine
   which button or label the user clicked. The third argument, iPriv,
   defines the value that uniquely identifies the balloon that called the
   procedure. The difference between the bln and iPriv arguments is that
   a programmer can use the iPriv argument to uniquely identify which
   balloon called the procedure. This allows a programmer to write one
   Callback procedure to use with all balloons, rather than to write a
   separate Callback procedure for each Balloon.
<P>
   Type the following procedure:
<P>
<PRE>      Sub WhichButton(bln As Balloon, iBtn As Long, iPriv As Long)
         Dim cBox As Office.BalloonCheckbox

         bln.Close
         For Each cBox In bln.Checkboxes
            If cBox.Checked Then
               MsgBox "Selected " &amp; cBox.Item
            End If
         Next
         Select Case iBtn
            Case 1
               MsgBox "Clicked Label 1"
            Case 2
               MsgBox "Clicked Label 2"
            Case msoBalloonButtonBack
               MsgBox "Clicked Back Button"
            Case msoBalloonButtonClose
               MsgBox "Clicked Close Button"
            Case msoBalloonButtonNext
               MsgBox "Clicked Next Button"
         End Select
      End Sub

</PRE><P><LI>To test these procedures, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>       OpenBalloon
</PRE><P>
   Note that the Microsoft Office Assistant is displayed with a new balloon
   that contains multiple check boxes, labels, and buttons.

<P><LI>Click one or more of the check boxes and either a button or a label.
   Note that you receive message boxes indicating which check boxes you
   selected and which button or label you clicked.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using the Callback property with the Microsoft
Office Assistant, search the Help Index for "Callback property."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: asst<BR>
Keywords          : kbprg PgmObj<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 24, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: How To Add a Sheet After Last Sheet in a Single Action </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q107622">
<META NAME="KBModify" CONTENT="1997/12/01">
<META NAME="KBCreate" CONTENT="1993/11/23">
<META NAME="Keywords" CONTENT="kbprg PgmHowto PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In the versions of Microsoft Excel listed at the beginning of this article,  it is not possible to add a new sheet after the last sheet in the workbook  in a single action. For example, if you have a workbook that contains  Sheet1 and Sheet2 (in le...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAML,QBS0,QBVP,QBXV,QAH4,QAPF,QAPN,QADZ,QACI,QA9N,QDNM,QAXB,QAB4,QAGF,QAVZ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: How To Add a Sheet After Last Sheet in a Single Action</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q107622</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In the versions of Microsoft Excel listed at the beginning of this article, 
it is not possible to add a new sheet after the last sheet in the workbook 
in a single action. For example, if you have a workbook that contains 
Sheet1 and Sheet2 (in left-to-right sheet tab order), you cannot add a new 
sheet to the right of Sheet2.
<P>
This applies whether you add the new sheet manually, by using Visual Basic
code, or by using XLM macro code.
<P>
It is possible to add a new sheet to a workbook and make the sheet become
the last sheet in the workbook, but at least two separate actions are 
required to do this.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If your application requires that a new sheet be added or inserted after
the last sheet in the workbook, there are two ways that you can achieve
this task:
<P>
- If you manually add the new sheet to the workbook (by choosing the
<PRE>  appropriate item on the Insert menu, for example), you can drag the new
  sheet's tab to the right of all of the other sheet tabs. This makes the
  new sheet also become the last sheet in the workbook.

  -or-

</PRE>- If you are using a Visual Basic procedure to add the new sheet to the
<PRE>  workbook, you can use the Move method to move the new sheet to the proper
  location. The following example demonstrates using this method.

</PRE><h3>Visual Basic Code Example</h3>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>This sample Visual Basic code inserts a new sheet into a workbook and makes 
the new sheet become the last sheet in the workbook by moving it to the 
right of the rightmost sheet. This example assumes you have a workbook that 
contains at least one Visual Basic module and any number of other sheets.
<P>
To run the example, position the cursor in the line that reads "Sub 
AddNewSheet()" and either press F5 or click Start on the Run menu.
<P>
<PRE>   Sub AddNewSheet()

      Application.ScreenUpdating = False    ' Prevents screen refreshing.

      ' This line adds a new worksheet to the workbook. Alternatively, use:
      '
      ' DialogSheets.Add                    Adds a dialog sheet.
      ' Charts.Add                          Adds a chart sheet.
      ' Modules.Add                         Adds a Visual Basic module.
      ' Sheets.Add Type:=xlExcel4MacroSheet Adds an MS Excel 4.0 macro
      '                                     sheet.
      Worksheets.Add

      ' This line makes the new sheet (which is also the active sheet) the
      ' last sheet in the workbook.
      ActiveSheet.Move After:=Sheets(ActiveWorkbook.Sheets.Count)
      Application.ScreenUpdating = True     ' Enables screen refreshing.

   End Sub

</PRE>When you run the AddNewSheet Sub procedure, it will add a new sheet to the
active workbook and make the new sheet become the last sheet in the 
workbook.
<P>
If you try to add a new sheet after the last sheet in the workbook, all in
a single action, you will receive the following error message:
<P>
<PRE>   Add method of Sheet class failed

</PRE>For example, the following command will return an error message:
<P>
<PRE>   Worksheets.Add After:=Sheets(ActiveWorkbook.Sheets.Count)

</PRE>because it attempts to add a new sheet after the last sheet in the
workbook.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL7 XL5 7.00 5.00 5.0 5.0a 5.0c<BR>
Keywords          : kbprg PgmHowto PgmOthr<BR>
Version           : WINDOWS:5.0,5.0c,7.0; MACINTOSH:5.0,5.0a<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

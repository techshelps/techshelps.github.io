

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Functions for Calculating and Displaying Date/Time Values </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q88657 ">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1992/08/30">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  Because a date/time value is stored as a double-precision number, you may receive incorrect formatting results when you try to manipulate date/time values in an expression. This ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACE,QAGJ,QAFH,QAU3,QAMR,QAY5,QA1S,QALB,QADN,QBV8,QAB9,QAKD,QAML,QBS0,QDN9 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Functions for Calculating and Displaying Date/Time Values</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q88657 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
Because a date/time value is stored as a double-precision number, you may
receive incorrect formatting results when you try to manipulate date/time
values in an expression. This article demonstrates how to create
expressions and custom functions for displaying specific dates and
calculating time intervals.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Displaying Specific Dates</h3>
 
<P>
To display specific dates, you can use the DateSerial() function to
manipulate the day, month, and year portions of a date. For example, you
can use the following expressions in the ControlSource property of a text
box or in the Debug window (or the Immediate window in versions 1.x and
2.0) to return specific dates:

<UL><LI>The current month:
<P>
<P><PRE>      DateSerial(Year(Date()), Month(Date()), 1)
</PRE>
<LI>The next month:
<P>
<P><PRE>      DateSerial(Year(Date()), Month(Date()) + 1, 1)
</PRE>
<LI>The last day of the current month:
<P>
<P><PRE>      DateSerial(Year(Date()), Month(Date()) + 1, 0)
</PRE>
<LI>The last day of the next month:
<P>
<P><PRE>      DateSerial(Year(Date()), Month(Date()) + 2, 0)
</PRE>
<LI>The first day of the previous month:
<P><PRE>      DateSerial(Year(Date()), Month(Date())-1,1)
</PRE>
<LI>The last day of the previous month:
<P><PRE>      DateSerial(Year(Date()), Month(Date()),0)
</PRE>
<LI>The first day of the current quarter:
<P>
<P><PRE>      DateSerial(Year(Date()), Int((Month(Date()) - 1) / 3) * 3 + 1, 1)
</PRE>
<LI>The last day of the current quarter:
<P>
<P><PRE>      DateSerial(Year(Date()), Int((Month(Date()) - 1) / 3) * 3 + 4, 0)
</PRE>
<LI>The first day of the current week (assuming Sunday = day 1):
<P>
<P><PRE>      Date() - WeekDay(Date()) + 1
</PRE>
<LI>The last day of the current week:
<P>
<P><PRE>      Date() - WeekDay(Date()) + 7
</PRE>
<LI>The first day of the current week (using settings in Options dialog
   box):
<P>
<P><PRE>      Date() - WeekDay(Date(), 0) + 1
</PRE>
<LI>The last day of the current week:
<P>
<P><PRE>      Date() - WeekDay(Date(), 0) + 7
</PRE><P>
</UL>For information about calculating the fiscal year or fiscal month, please
see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q132101.htm">Q132101</A></B>
   TITLE     : ACC: How to Get the Fiscal Year/Month of a Particular Date

</PRE><h3>Calculating Time Intervals</h3>
 
<P>
Because a time value is stored as a fraction of a 24-hour day, you may
receive incorrect formatting results when you try to add, subtract,
multiply or divide time data greater than 24 hours.
<P>
For example, if you try to find the number of hours elapsed between two
dates by subtracting the values in Visual Basic, you may receive an
incorrect number. To demonstrate this, type the following code in the
Debug window (or Immediate window in version 2.0) and note that it
returns a value of 05:00 hours rather than the correct value of 53:00
hours:
<P>
<PRE>   StartDate=#6/1/93 8:00AM#
   EndDate=#6/3/93 1:00PM#
   ?Format(EndDate-StartDate,"hh:mm")

</PRE>To resolve formatting problems caused by time values greater than 24
hours, you can use the Int() and CSng() functions in Visual Basic to
separate a calculated time value into different variables for days,
hours, minutes, and seconds. For example, you can include the following
code fragment in a custom function to create separate time variables:
<P>
<PRE>   '-------------------------------------------------------------------
   ' This sample code separates a time interval into seven variables for
   ' the following values: days, hours, minutes, seconds, total time in
   ' hours, total time in minutes, and total time in seconds.
   '
   ' The interval argument is flexible; it can be a single value, an
   ' expression, or a field reference.
   '-------------------------------------------------------------------

   Dim totalhours As Long, totalminutes As Long, totalseconds As Long
   Dim days As Long, hours As Long, minutes As Long, seconds As Long
   Dim interval As Variant

   days = Int(CSng(interval))
   totalhours = Int(CSng(interval * 24))
   totalminutes = Int(CSng(interval * 1440))
   totalseconds = Int(CSng(interval * 86400))
   hours = totalhours Mod 24
   minutes = totalminutes Mod 60
   seconds = totalseconds Mod 60

</PRE>You can use the totalhours, totalminutes, and totalseconds variables to
display a time value as a single unit of time. The days, hours, minutes,
and seconds variables enable you to break down a time value into portions
of time. To display time values in different formats, you can concatenate
these variables as demonstrated in the following sample functions:

<UL><LI>The GetElapsedDays() function calculates the elapsed time between two
   date/time values and displays the result in days.

<LI>The GetElapsedTime() function calculates the elapsed time between time
   values and displays the result in days, hours, minutes, and seconds.

<LI>The GetTimeCardTotal() function sums a field of time values in a table
   and displays the total in hours and minutes.
<P>
</UL><h3>GetElapsedDays() Sample Function</h3>
 
<P>
To create the GetElapsedDays() function, follow these steps:

<OL><P><LI>Open the sample database Northwind.mdb.(or NWIND.MDB in versions 1.x
   and 2.0).

<P><LI>Create a module and type the following line in the Declarations
   section if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following function:
<P>
<P><PRE>      Function GetElapsedDays (interval)
<PRE></PRE>         Dim days As Long

         days = Int(CSng(interval))
         GetElapsedDays = days &amp; " Days "

      End Function

</PRE><P><LI>To test this function, create a new query based on the Orders table.

<P><LI>In the QBE grid, add the following fields.
<P>
<P><PRE>      In Microsoft Access version 7.0 and 97:
</PRE><P>
<PRE>         Field: ShippedDate
            Show: True
         Field: OrderDate
            Show: True
         Field: ElapsedTime: GetElapsedDays([ShippedDate]-[OrderDate])
            Show: True

      In Microsoft Access versions 1.x and 2.0:

         Field: Shipped Date
            Show: True
         Field: Order Date
            Show: True
         Field: ElapsedTime: GetElapsedDays([Shipped Date]-[Order Date])
            Show: True

</PRE><P><LI>Run the query. Note that the ElapsedTime column displays the number of
   days between the ShippedDate field (or Shipped Date in versions 1.x and
   2.0) and OrderDate field (or Order Date in versions 1.x and 2.0) for
   each record in the Orders table.
<P>
</OL><h3>GetElapsedTime() Sample Function</h3>
 
<P>
To create the GetElapsedTime() function, follow these steps:

<OL><P><LI>Create a new table with the following structure and save it as TimeLog.
<P>
<P><PRE>      Table: TimeLog
      -----------------------
      Field Name: StartTime
<PRE></PRE>         Data Type: Date/Time
         Format: General Date
      Field Name: EndTime
         Data Type: Date/Time
         Format: General Date

</PRE><P><LI>View the TimeLog table in Datasheet view, enter the following three
   records, and then close the table:
<P>
<PRE>      StartTime                 EndTime
      --------------------------------------------
      5/10/95 4:57:00  PM       5/15/95 2:38:00 AM
      5/11/95 10:17:31 AM       5/24/95 6:05:00 PM
      5/18/95 9:16:43  AM       5/19/95 5:03:00 PM

</PRE><P><LI>Create a module and type the following line in the Declarations
   section:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Enter the following function:
<P>
   NOTE: In the following sample code, an underscore (_) is used as a
   line-continuation character. Remove the underscore from the end of the
   line when re-creating this code in Access Basic.
<P>
<P><PRE>      Function GetElapsedTime (interval)
<PRE></PRE>         Dim totalhours As Long, totalminutes As Long, totalseconds As _
              Long
         Dim days As Long, hours As Long, Minutes As Long, Seconds As Long

         days = Int(CSng(interval))
         totalhours = Int(CSng(interval * 24))
         totalminutes = Int(CSng(interval * 1440))
         totalseconds = Int(CSng(interval * 86400))
         hours = totalhours Mod 24
         Minutes = totalminutes Mod 60
         Seconds = totalseconds Mod 60

      GetElapsedTime = days &amp; " Days " &amp; hours &amp; " Hours " &amp; Minutes &amp; _
         " Minutes " &amp; Seconds &amp; " Seconds "

      End Function

   NOTE: The GetElapsedTime function requires that you pass it a date and a 
   time.

</PRE><P><LI>To test this function, create a new report based on the TimeLog table
   using the AutoReport Wizard.

<P><LI>View the report in Design view.

<P><LI>Add an unbound text box to the TimeLog table's detail section and set
   its properties as follows:
<P>
<P><PRE>      Textbox:
<PRE></PRE>         Name: ElapsedTime
         ControlSource: =GetElapsedTime([EndTime]-[StartTime])
         Width: 3 inches

</PRE><P><LI>Preview the report. Note that each record displays the total elapsed
   time in days, hours, minutes, and seconds.
<P>
</OL><h3>GetTimeCardTotal() Sample Function</h3>
 
<P>
To create the GetTimeCardTotal() function, follow these steps:

<OL><P><LI>Create a new table with the following structure and save it as
   TimeCard.
<P>
<P><PRE>      Table: TimeCard
      -----------------------
      Field Name: Daily Hours
<PRE></PRE>         Data Type: Date/Time
         Format: Short Time

</PRE><P><LI>View the TimeCard table in Datasheet view, enter the following four
   records, and then close the table:
<P>
<P><PRE>      8:15
      7:37
      8:12
      8:03
</PRE>
<P><LI>Create a module and type the following line in the Declarations
   section if it's not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following function:
<P>
<P><PRE>      Function GetTimeCardTotal ()
<PRE></PRE>         Dim db As Database, rs As Recordset
         Dim totalhours As Long, totalminutes As Long
         Dim days As Long, hours As Long, minutes As Long
         Dim interval As Variant, j As Integer

         Set db = dbengine.workspaces(0).databases(0)
         Set rs = db.OpenRecordset("timecard")
         interval = #12:00:00 AM#
            While Not rs.EOF
               interval = interval + rs![Daily hours]
               rs.MoveNext
            Wend
         totalhours = Int(CSng(interval * 24))
         totalminutes = Int(CSng(interval * 1440))
         hours = totalhours Mod 24
         minutes = totalminutes Mod 60

      GetTimeCardTotal = totalhours &amp; " hours and " &amp; minutes &amp; " minutes"

      End Function

</PRE><P><LI>To test this function, type the following line in the Debug window (or
   Immediate window in version 1.x and 2.0), and then press ENTER:
<P>
<P><PRE>      ? GetTimeCardTotal ()
</PRE><P>
   Note that the Debug window displays 32 hours and 7 minutes.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about calculating date/time values, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q130514.htm">Q130514</A></B>
   TITLE     : ACC: Storing, Calculating, and Comparing Date/Time Data
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: fractional<BR>
Keywords          : kbprg PgmHowTo PgmOthr<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

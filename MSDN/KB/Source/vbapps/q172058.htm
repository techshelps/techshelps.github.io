

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Convert a Database Table into an Excel Spreadsheet </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q172058">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1997/07/28">
<META NAME="Keywords" CONTENT="VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article contains a code example that demonstrates how to convert a database table into an Excel spreadsheet by using data access objects and OLE automation.  MORE INFORMATION  The program below demonstrates how easy it is to create a flexible ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QBS0,QAW6,QAEF,QAZV,QAH4,QA5V,QBXS,QANF,QAMB,QA9N,QAY2,QAA1,QDO5 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Convert a Database Table into an Excel Spreadsheet</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q172058</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Professional and Enterprise Editions for
   Windows, versions 4.0, 5.0
<LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article contains a code example that demonstrates how to convert a
database table into an Excel spreadsheet by using data access objects
and OLE automation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The program below demonstrates how easy it is to create a flexible and
powerful program by integrating OLE automation with the data access
objects in Visual Basic for Windows. Specifically, the program provides
a method for converting a table that exists in a Microsoft Access database
into a Microsoft Excel version 5.0 and above spreadsheet.
<P>
To do this, you'll need an Excel Spreadsheet object to receive the data
from the table. This example uses OLE automation, so you'll need Excel
version 5.0 or above. The program creates a Recordset object of type
snapshot from the table you want to convert. The example uses the Titles
table from the BIBLIO.MDB database: the sample database that comes with
Visual Basic versions 4.0 and 5.0. After creating the snapshot, the program
uses a user-defined CopyFromRecordset method to fill a variant array from
the Recordset and uses this array to relay rows to Excel.
<P>
<P><h3>Steps to Create Example Program</h3>
 
<P>
The following steps are for the Visual Basic 4.0 IDE:

<OL><P><LI>Create a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a CommandButton (Command1) and label (Label1) to Form1.

<P><LI>Select References from the Tools menu. When the dialog box appears,
   select the "Microsoft Excel Object Library" and "Microsoft DAO Object
   Library" from the list of Available References. Click OK.

<P><LI>Place the following code in the General Declarations section of the
   form:
<P>
<P><PRE>      ' User defined type to help determine the
      ' starting cell in the range receiving the recordset
      Private Type ExlCell
<PRE></PRE>        row As Long
        col As Long
      End Type

      Private Sub CopyRecords(rs As Recordset, ws As Worksheet, _
       StartingCell As ExlCell)
        Dim SomeArray() As Variant
        Dim row As Long, col As Long
        Dim fd As Field

        ' You might want to check if rs is not empty
        rs.MoveLast
        ReDim SomeArray(rs.RecordCount + 1, rs.Fields.Count)
        ' Copy column headers to array
        col = 0
        For Each fd In rs.Fields
           SomeArray(0, col) = fd.Name
           col = col + 1
        Next
        ' Copy rs to some array
        rs.MoveFirst
        For row = 1 To rs.RecordCount - 1
            For col = 0 To rs.Fields.Count - 1
                SomeArray(row, col) = rs.Fields(col).Value
                ' Excel will be offended if you try setting one
                ' of its cells to a NULL
                If IsNull(SomeArray(row, col)) Then _
                 SomeArray(row, col) = ""
            Next
            rs.MoveNext
        Next
        ' The range should have the same number of
        ' rows and cols as in the recordset
        ws.Range(ws.Cells(StartingCell.row, StartingCell.col), _
         ws.Cells(StartingCell.row + rs.RecordCount + 1, _
         StartingCell.col + rs.Fields.Count)).Value = SomeArray

      End Sub

      Sub Form_Load()
        Label1.AutoSize = True
        Label1.Caption = "Ready"
        Label1.Refresh
      End Sub

      Sub Command1_Click()
        Dim oExcel as Object
        Dim objExlSht As Object           ' OLE automation object
        Dim stCell As ExlCell
        Dim db As Database         ' Database object
        Dim Sn As Recordset         ' Recordset to hold records

        MousePointer = vbHourglass   ' Change mousepointer
        Label1.Caption = "Creating Excel Object"
        Label1.Refresh
        Set oExcel = CreateObject("Excel.Application")
        oExcel.WorkBooks.Add
        Set objExlSht = oExcel.ActiveWorkbook.Sheets(1)
        ' Open the database:
        Label1.Caption = "Opening the database"
        Label1.Refresh
        Set db = OpenDatabase("BIBLIO.MDB")
        ' Set up Field names as Column names:
        Label1.Caption = "Creating SnapShot"
        Label1.Refresh
        Set Sn = db.OpenRecordset("Titles", dbOpenSnapshot)
        ' Start fill range at A1
        stCell.row = 1
        stCell.col = 1

        ' Place the fields across the top of the spreadsheet:
        Label1.Caption = "Adding field names to Spreadsheet"
        Label1.Refresh
        CopyRecords Sn, objExlSht, stCell
        ' Save the spreadsheet:
        Label1.Caption = "Saving Spreadsheet"
        Label1.Refresh
        objExlSht.SaveAs "C:\TITLES.XLS"
        ' Quit the excel object - removes Excel from memory!
        Label1.Caption = "Quitting Excel"
        Label1.Refresh
        objExlSht.Application.Quit
        ' Clean up:
        Label1.Caption = "Cleaning up"
        Label1.Refresh
        Set objExlSht = Nothing         ' Remove object variable.
        Set oExcel = Nothing            ' Remove object variable.
        Set Sn = Nothing         ' Remove snapshot object.
        Set db = Nothing         ' Remove database object.
        MousePointer = vbDefault  ' Restore mouse pointer.
        Label1.Caption = "Ready"
        Label1.Refresh
      End Sub

</PRE><P><LI>Press the F5 key to run the program. When you click the CommandButton,
   the data in the Titles table will be imported into an Excel spreadsheet.
   The label will update you on its progress.
<P></OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: Excel CopyFromRecordSet<BR>
Keywords          : VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:4.0 5.0 7.0 7.0a 97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

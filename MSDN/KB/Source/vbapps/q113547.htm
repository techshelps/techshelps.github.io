

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Trap Keystrokes That Leave a Control on a Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113547">
<META NAME="KBModify" CONTENT="1997/12/02">
<META NAME="KBCreate" CONTENT="1994/04/06">
<META NAME="Keywords" CONTENT="kbusage FmsHowTo FmsEvnt PgmPrcs">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes how to trap the ENTER, TAB, SHIFT+TAB, PAGE UP, and PAGE DOWN keys when they are pressed in a form and how to either replace the key's action with ano...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QAMN,QDN9,QA7O,QAB5,QAOE,QA5V,QAML,QBS0,QAPN,QAY5,QAUD,QAH4,QBXS,QA7H P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Trap Keystrokes That Leave a Control on a Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113547</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes how to trap the ENTER, TAB, SHIFT+TAB, PAGE UP, and
PAGE DOWN keys when they are pressed in a form and how to either replace
the key's action with another action or disable the action.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>In Microsoft Access 7.0 and 97</h3>
 
<P>
In Microsoft Access 7.0 and 97, the ability to trap keystrokes has been
greatly improved and enhanced. The KeyDown event is all you need to trap
the keystrokes; then, you can change the ones that leave the form to a
value of zero. This is demonstrated in the following sample Visual Basic
for Applications code segment:
<P>
<PRE>   Private Sub Text2_KeyDown(KeyCode As Integer, Shift As Integer)
       Select Case KeyCode
           ' If user presses TAB, ENTER, PAGE UP, PAGE DOWN
           Case 13, 9, 33, 34
               ' Disable the keystroke by setting it to 0
               KeyCode = 0
           Case Else
               Debug.Print KeyCode, Shift
       End Select
   End Sub

</PRE>Note: In Microsft Access 7.0 and Microsoft Access 97 controlling the tab order is much easier.  
If you are writing this code to control where the tab key moves next in a form, consider using the TabStop property or the Tab Order menu option.
<P>
<PRE>          To control the Tab Order for a form with the menus:
          ---------------------------------------------------

            Open the form in design view.

            On  the View menu click Tab Order. 

          To find more information about the TabStop property:
          ----------------------------------------------------

           On the Help menu click Contents and Index.

           In the Index tab type "tabstop" without the quotes.

</PRE><h3>In Microsoft Access 1.x and 2.0</h3>
 
<P>
The example below demonstrates how to use the GetKeyState() Windows
application programming interface (API) call to detect which key or key
combination is used to exit a control on a form. This technique can be used
to prevent a user from exiting a control, or to remap the key or key
combination to a different action:
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
</PRE><P>
<P><PRE>      Global Const VK_CONTROL = &amp;H11
      Global Const VK_SHIFT = &amp;H10
      Global Const VK_TAB = &amp;H9
      Global Const VK_RETURN = &amp;HD
      Global Const VK_PRIOR = &amp;H21  ' PGUP
<PRE></PRE>      Global Const VK_NEXT = &amp;H22   ' PGDN
      Declare Function GetKeyState% Lib "user.exe" (ByVal nKey%)

</PRE><P><LI>Type the following procedure:
<P>
<P><PRE>      Function CheckKey ()
<PRE></PRE>         Dim sControl As String
         Dim sShift As String

         ' Was the CTRL or SHIFT key used?
         If GetKeyState(VK_CONTROL) &lt; 0 Then sControl = "Ctrl+"
         If GetKeyState(VK_SHIFT) &lt; 0 Then sShift = "Shift+"

         ' Was the TAB key used?
         If GetKeyState(VK_TAB) &lt; 0 Then
            MsgBox "You pressed " &amp; sControl &amp; sShift &amp; "TAB!"
         End If

         ' Was the ENTER or RETURN key used?
         If GetKeyState(VK_RETURN) &lt; 0 Then
            MsgBox "You pressed " &amp; sControl &amp; sShift &amp; "ENTER!"
         End If

         ' Was the PAGE DOWN key used?
         If GetKeyState(VK_NEXT) &lt; 0 Then
            MsgBox "You pressed " &amp; sControl &amp; sShift &amp; "PGDN!"
         End If

         ' Was the PAGE UP key used?
         If GetKeyState(VK_PRIOR) &lt; 0 Then
            MsgBox "You pressed " &amp; sControl &amp; sShift &amp; "PGUP!"
         End If

      End Function

</PRE><P><LI>Open any form in Design view, and set any control's OnExit property to:
<P>
<P><PRE>      =CheckKey()
</PRE>
<P><LI>View the form in Form view, select the control you modified in step
   3, and then try to exit the control.
<P>
</OL>The next example demonstrates how to use the GetKeyState() Windows API call
in Microsoft Access 1.x to modify the ENTER key's action so that it adds
lines to a text box, rather than moving to the next control in the tab
order.
<P>
NOTE: In Microsoft Access 2.0 you can accomplish this by setting the
EnterKeyBehavior property of a control to New Line in Field.

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
      Global Const VK_RETURN = &amp;HD
      Declare Function GetKeyState% Lib "user.exe" (ByVal nKey%)
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>      Function MakeEnterAddLines()
<PRE></PRE>         If GetKeyState(VK_RETURN) &lt; 0 Then
            DoCmd CancelEvent
            SendKeys "^{ENTER}"
         End If
      End Function

</PRE><P><LI>Set the OnExit property of any text box control on any form to:
<P>
<P><PRE>      =MakeEnterAddLines()
</PRE>
<P><LI>View the form in Form view, move to the control you modified, and then
   press ENTER.
<P>
</OL>The next example demonstrates how to use the GetKeyState() Windows API call
to disable the PAGE UP and PAGE DOWN keys in a form:

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
      Global Const VK_PRIOR = &amp;H21  ' PGUP
<PRE></PRE>      Global Const VK_NEXT = &amp;H22   ' PGDN
      Declare Function GetKeyState% Lib "user.exe" (ByVal nKey%)

</PRE><P><LI>Type the following procedure:
<P>
<P><PRE>      Function DisablePGUP_PGDN()
<PRE></PRE>         If GetKeyState(VK_PRIOR) &lt; 0 Or GetKeyState(VK_NEXT) &lt; 0 Then
            DoCmd CancelEvent
         End If
      End Function

</PRE><P><LI>Set the OnExit properties of all the controls on any form where the PAGE
   UP and PAGE DOWN keys are to be disabled to:
<P>
<P><PRE>      =DisablePGUP_PGDN()
</PRE><P>
</OL>The next example demonstrates how to use the GetKeyState() Windows API
call to cause the TAB key, when it is pressed in the last control in the
last record in a subform, to navigate to the next control on the main
form:

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
      Global Const VK_TAB = &amp;H9
      Global Const VK_SHIFT = &amp;H10
      Declare Function GetKeyState% Lib "user.exe" (ByVal nKey%)
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>      Function TABtoMainForm(F As Form)
<PRE></PRE>         Dim DS As Dynaset
         On Error Goto Bye_TABtoMainForm
         ' Move to last record in form dynaset.
         Set DS = F.Dynaset
         DS.MoveLast
         ' See if the form record is the last record.
         If DS.Bookmark = F.Bookmark Then
            If GetKeyState(VK_TAB) &lt; 0 And Not _
            (GetKeyState(VK_SHIFT) &lt; 0) Then
               DoCmd CancelEvent
            SendKeys "^{TAB}"
         End If
      End If

      Bye_TABtoMainForm:
      End Function

</PRE><P><LI>Set the OnExit property of the last control in the subform to:
<P>
<P><PRE>      =TABtoMainForm(Form)
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: trapping<BR>
Keywords          : kbusage FmsHowTo FmsEvnt PgmPrcs<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD97: Writing Macro Code for VBA and WordBasic Branching </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q163618">
<META NAME="KBModify" CONTENT="1998/02/16">
<META NAME="KBCreate" CONTENT="1997/02/13">
<META NAME="Keywords" CONTENT="kbcode kbinterop kbole kbprg kbwordvba">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article includes sample Visual Basic code that demonstrates how to determine the version of Word for Windows currently installed when using OLE automation. Based on the version of Word, the code will conditionally branch to use WordBasic comma...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAIH,QA5F,QAH4,QAPN,QAW6,QAMA,QDO7,QAJH,QAFI,QAB9,QBXS,QAFF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD97: Writing Macro Code for VBA and WordBasic Branching</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 16, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q163618</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article includes sample Visual Basic code that demonstrates how to
determine the version of Word for Windows currently installed when using
OLE automation. Based on the version of Word, the code will conditionally
branch to use WordBasic commands if the version of Word is earlier than
Word 97. If the version of Word returned is equal to or greater than Word
97, the code will branch to use Visual Basic for Applications commands.
<P>
You may want to use this conditional branching if you are using more than
one version of Word on your computer.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In Microsoft Word 97 and later versions, WordBasic has been replaced with
Visual Basic for Applications. For backward compatibility, Visual Basic for
Applications contains a WordBasic object. To ensure that the WordBasic
command and arguments are positioned correctly, use the Position.hlp file
for Word for Windows version 6.x.
<P>
NOTE: If your programming language was written to call WordBasic commands
and you are anticipating interacting with the Microsoft Word Visual Basic
for Applications language for all future development needs, you should
convert your code from WordBasic to Microsoft Word Visual Basic for
Applications.
<P>
Microsoft provides examples of Visual Basic for Applications procedures
for illustration only, without warranty either expressed or implied,
including, but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. The Visual Basic procedures in
this article are provided 'as is' and Microsoft does not guarantee that
they can be used in all situations. While Microsoft support engineers can
help explain the functionality of a particular macro, they will not modify
these examples to provide added functionality, nor will they help you
construct macros to meet your specific needs. If you have limited
programming experience, you may want to consult one of the Microsoft
Solution Providers. Solution Providers offer a wide range of fee-based
services, including creating custom macros. For more information about
Microsoft Solution Providers, call Microsoft Customer Information Service
at (800) 426-9400.
<P>
<PRE>   ' ******************************************************************
   ' MODULE NAME: Coding For WordBasic or Visual Basic Based On Version
   ' DECLARATIONS SECTION
   ' ******************************************************************
   Dim oWordWB As Object
   Dim oWordVBA As Object

   ' The GetWordVersion routine creates a WordBasic object. It then
   ' determines the currently installed version of Word for Windows.
   ' If the version is earlier than Word 97, it branches to use a
   ' WordBasic Code" routine.
   ' If the version is Word 97 or later, it branches to use a Visual
   ' Basic for Applications routine. If Word is not currently installed,
   ' an error is trapped and the program displays a message and ends.

   Sub GetWordVersion ()
      ' *******************************************************
      ' PURPOSE: To determine the Word version and branch
      '          conditionally based on the version returned.
      '
      ' ARGUMENTS:
      '           oWordWB - WordBasic Object
      ' *******************************************************
      On Error GoTo NoWord
      Set oWOBJ = CreateObject("Word.basic")
      If Val(oWOBJ.AppInfo(2)) &lt; 8 Then
         ' If earlier than version 8, branch to WordBasic code.
         UseWordBasicCode
      Else
         ' If version 8 or later, branch to Visual Basic for
         ' Applications code.
         UseVBACode
      End If
   NoWord:
      If Err &lt;&gt; 0 then
         MsgBox "Word is not installed."
         End
      End If
   End Sub

      Sub UseVBACode ()
         ' *********************************************************
         ' PURPOSE: Used for Visual Basic For Applications commands.
         '
         ' ARGUMENTS:
         '           oWordWB  - WordBasic Object
         '           oWordVBA - Visual Basic for Applications Object
         ' *********************************************************
         ' Close the WordBasic Object that was used to determine the
         ' Word version.
         oWordWB.FileExit
         Set oWordWB = Nothing
         ' Create a Word Visual Basic For Applications object.
         Set oWordVBA = CreateObject("Word.Application")
         ' ***********************************************
         ' &lt; Visual Basic For Applications Commands Here &gt;
         ' ***********************************************
         ' When quitting an OLE session with Visual Basic For Applications,
         ' you must use the Quit command in combination with setting
         ' the OLE object to Nothing to clear the instance from memory.
         oWordVBA.Quit
         Set oWordVBA = Nothing
      End Sub

      Sub UseWordBasicCode ()
         ' *************************************
         ' PURPOSE: Used for WordBasic commands.
         '
         ' ARGUMENTS:
         '           oWordWB - WordBasic Object
         ' *************************************
         ' **************************
         ' &lt; WordBasic Commands Here&gt;
         ' **************************
         ' Close the instance of Word.
         oWordWB.FileExit
         ' Clear the Object from memory.
         Set oWordWB = Nothing
      End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: vb vbe vba<BR>
Keywords          : kbcode kbinterop kbole kbprg kbwordvba<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 16, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

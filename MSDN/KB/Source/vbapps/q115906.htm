

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Improving Performance of Macro That Has a Repetitive Function </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q115906">
<META NAME="KBModify" CONTENT="1997/07/29">
<META NAME="KBCreate" CONTENT="1994/06/06">
<META NAME="Keywords" CONTENT="kbcode kbprg kbusage">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In a Microsoft Visual Basic Programming System, Applications Edition macro, when you use the Format function to apply specific formatting to an expression, and you call this function repeatedly in the macro, the performance of the macro is slow rel...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBS0,QAB9,QDNG,QBV8,QAH4,QAYZ,QAMR,QAU3,QAKD,QAHH,QAKC,QBXT,QBXS,QBVP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Improving Performance of Macro That Has a Repetitive Function</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q115906</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Programming System, Applications Edition,
   version 1.0
<LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for the Macintosh, version 5.0
<LI>Microsoft Project for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In a Microsoft Visual Basic Programming System, Applications Edition macro,
when you use the Format function to apply specific formatting to an
expression, and you call this function repeatedly in the macro, the
performance of the macro is slow relative to a macro that uses another
function to perform the same action.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
You can decrease the amount of time required for a macro using the Format
function in a repetitive loop to run by using the Str function. It may be
beneficial to test each of the statements before deciding which function
will work faster in your macro. The following examples use the Now function
to compare the speed of using the Format function versus the Str function
to format a value.
<P>
Note that the Format function is more convenient for formatting a value
than the Str function. However, if you are using the Format function in a
loop, where the function is called repeatedly more than 100 times, the
macro may run faster when you use the Str function than when you use the
Format function.
<P>
Microsoft provides examples of Visual Basic procedures for illustration
only, without warranty either expressed or implied, including but not
limited to the implied warranties of merchantability and/or fitness for a
particular purpose. This Visual Basic procedure is provided "as is" and
Microsoft does not guarantee that it can be used in all situations.
Microsoft does not support modifications of this procedure to suit customer
requirements for a particular purpose. Note that a line that is preceded by
an apostrophe introduces a comment in the code--comments are provided to
explain what the code is doing at a particular point in the procedure. Note
also that an underscore character (_) indicates that code continues from
one line to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This Manual"
section in the "Document Conventions" section of the Visual Basic "User's
Guide."
<P>
<P><h3>Testing Performance of Str Function</h3>
 
<P>
<PRE>   Sub Test_Str_Function()
      Const Mult = 100000
      Dim i as Integer
      Dim sVar As String
      ' Dimension variable dTimer as Double data type
      Dim dTimer As Double
      ' Set value of dTimer to current computer time
      dTimer = Now
      ' Repeat formatting commands 3000 times
      For i = 1 To 3000
         ' Set value of sVar to 30
         ' Use Mid function to strip leading space added by Str
         ' (space is added for the sign of the value)
         sVar = Mid(Str(30), 2)
         ' Pad result with leading 0's
         sVar = String(4 - Len(sVar), "0") &amp; sVar
      Next
      ' Set value of dTimer to difference between start and end
      dTimer = Now - dTimer
      ' Display amount of time in seconds it took to process loop
      MsgBox Format(dTimer * Mult, "0.00000000")
   End Sub

</PRE><h3>Testing Performance of Format Function</h3>
 
<P>
<PRE>   Sub Test_Format_Function()
      Const Mult = 100000
      Dim i as Integer
      Dim sVar As String
      ' Dimension variable dTimer as Double data type
      Dim dTimer As Double
      dTimer = Now
      ' Repeat formatting commands 3000 times
      For i = 1 To 3000
         ' Format value 30 as 0030
         sVar = Format(30, "0000")
      Next
      ' Set value of dTimer to difference between start and end
      dTimer = Now - dTimer
      ' Display amount of time in seconds it took to process loop
      MsgBox Format(dTimer * Mult, "0.00000000")
   End Sub

</PRE><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can use the Format function in a Visual Basic module to format an
expression according to instructions contained in a format expression. For
example, you can format the number 100 as $100.00 using the following
Format function:
<P>
<PRE>   MyNum = Format(100,"$##.00")

</PRE>If you use the Format function without specifying a format, the Format
function provides the same functionality as the Str function. However, when
you use the Format function to format a positive number as a string, there
is no leading space reserved for the sign of the value; when you use the
Str function, a positive number that is formatted as a string value has a
leading space reserved for the sign of the value.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the Now Function, choose the Search button in
the Visual Basic Reference and type:
<P>
<PRE>    now

</PRE>For more information about the Format Function, choose the Search button in
the Visual Basic Reference and type:
<P>
<PRE>    format
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: efficient long length speed efficiency<BR>
Keywords          : kbcode kbprg kbusage<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

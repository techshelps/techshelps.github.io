

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: LibraryPath Includes Trailing Separator on Macintosh </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q176803">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1997/11/14">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbainfo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The LibraryPath property of the Application object in Microsoft Visual Basic for Applications works slightly differently in Microsoft Excel for Windows than it does in Microsoft Excel for the Macintosh. This article explains the differences and how...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QDO9,QDKX,QAPN,QAH4,QAFI,QDL9,QBWQ,QBWO,QBWN,QAVZ,QA5F,QAPF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: LibraryPath Includes Trailing Separator on Macintosh</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q176803</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The LibraryPath property of the Application object in Microsoft Visual
Basic for Applications works slightly differently in Microsoft Excel for
Windows than it does in Microsoft Excel for the Macintosh. This article
explains the differences and how to avoid problems when using the
LibraryPath property in your Visual Basic macros and procedures.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can use the LibraryPath property in Visual Basic macros and procedures
in Microsoft Excel to return the path to the Library folder. The Library
folder is the folder where most add-ins included with Microsoft Excel are
stored.
<P>
In Microsoft Excel for Windows, the LibraryPath property appears similar to
the following:
<P>
<PRE>   C:\Program Files\Microsoft Office\Office\Library

</PRE>Note that there is no trailing separator (in this case, a backslash) at the
end of the path.
<P>
However, in Microsoft Excel for the Macintosh, the LibraryPath property
appears similar to the following:
<P>
<PRE>   Macintosh HD:Microsoft Office:Microsoft Excel 5:Macro Library:

   -or-

   Macintosh HD:Microsoft Office 98:Office:Excel Add-Ins:

</PRE>Note that there is a trailing separator (in this case, a colon) at the end 
of the path. This may cause problems if you are writing code that is 
intended to work in both Microsoft Excel for Windows and Microsoft Excel 
for the Macintosh.
<P>
You can prevent problems from occurring by programmatically removing the 
trailing separator from the LibraryPath before you use it. The following 
example demonstrates one way in which this may be done. 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>Sample Visual Basic Procedure</h3>
 
<P>
<PRE>   Sub GetGoodLibraryPath()

      ' Store the LibraryPath in a variable.
      xLibraryPath = Application.LibraryPath

      ' If the LibraryPath ends in a colon...
      If Right(xLibraryPath, 1) = ":" Then

         ' ...remove the colon from the end of the path.
         xLibraryPath = Left(xLibraryPath, Len(xLibraryPath) - 1)

      End If

      ' Display the corrected LibraryPath.
      MsgBox "The application's LibraryPath is " &amp; xLibraryPath

   End Sub

</PRE>Once you have corrected the LibraryPath, you can use the PathSeparator
property to add either a backslash or a colon to the end of the path, and
then add a file name after the separator. Following is an example:
<P>
<PRE>   xFilePath = xLibraryPath &amp; Application.PathSeparator &amp; "Addin.xla"

</PRE>If you use the PathSeparator property when the LibraryPath has not been
corrected, you may receive an error message when you run the macro in
Microsoft Excel for the Macintosh.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information about getting help with Visual Basic for
Applications, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL5 XL7 XL97 XL98<BR>
Keywords          : kbcode kbprg xlvbainfo<BR>
Version           : MACINTOSH:5.0,5.0a,98; WINDOWS:5.0,5.0c,7.0,7.0a,97<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

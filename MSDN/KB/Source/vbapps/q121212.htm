

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Canceling OnTime Macro When Time Argument Is Volatile </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q121212">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/09/28">
<META NAME="Keywords" CONTENT="kbprg PgmEvnt PgmHowTo xlvbahowto xlvbainfo kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Visual Basic for Applications, canceling a recursive OnTime macro may be difficult when the earliestTime argument is volatile (for example, if you are using the current time).  WORKAROUND  In order to cancel an OnTime method, you must call anoth...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QAH4,QAYZ,QAYL,QBS0,QAGB,QAU3,QAMR,QAGC,QAHE,QAGI,QACE,QAFH,QBXS P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Canceling OnTime Macro When Time Argument Is Volatile</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q121212</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.00 5.00c 7.00 97 | 5.00
WINDOWS
kbprg kbcode
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Macintosh, version 5.0
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Visual Basic for Applications, canceling a recursive OnTime macro may be
difficult when the earliestTime argument is volatile (for example, if you
are using the current time).
<P>
<P><h2>WORKAROUND</h2>
 
<P>
In order to cancel an OnTime method, you must call another OnTime method to
set the schedule argument equal to False. However, note that this method
will not work if the time argument in the OnTime method is set with the Now
function.
<P>
To prepare the first OnTime method so you can cancel it later, create a
time variable and use this variable in both cases, as in the following
example:
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.

<OL><P><LI>Enter the following macro code into a module sheet in a new workbook.
<P>
   Dim TimeNow As Double
   Dim TimeStop As Double
   Dim TimeSet As Double
<P>
<PRE>   Sub RunMeFirst()
      TimeNow = Now
      TimeStop = TimeNow + TimeValue("00:00:59") 'this sets the time at
                                                 'which all macros will
                                                 'stop
      TimeSet = TimeNow + TimeValue("00:00:15")
      Set_OnTime
   End Sub

   Sub Set_OnTime()
      Application.OnTime TimeSet, "TestMacro"

      If TimeSet &gt; TimeStop Then  'compare the time to stop with the time
                                  'at which the TestMacro is scheduled to
                                  'run
         Application.OnTime TimeSet, "TestMacro", , False
      End If
   End Sub

   Sub TestMacro()
      ActiveCell.Value = 1
      ActiveCell.Offset(1, 0).Select
      TimeSet = TimeSet + TimeValue("00:00:15")
      Set_OnTime
   End Sub

</PRE><P><LI>Activate Sheet1 in your workbook.

<P><LI>Run the RunMeFirst macro.
<P>
</OL>The TimeStop variable is set to 59 seconds after you run the RunMeFirst
macro and the TimeSet variable is set to 15 seconds after you run the
RunMeFirst macro. Then, the Set_OnTime macro is called, which in-turn
checks to see if the TimeSet variable is greater than the TimeStop
variable. If it is, then all macros stop. If it is not, then the TestMacro
is called. The TestMacro will place a value of 1 in the active cell, select
the next cell down from the active cell, and then reset the TimeSet
variable to 15 seconds past its current value. The TestMacro then calls the
Set_OnTime macro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In order to cancel the first OnTime method, the second OnTime method must
have the same serial number for the time argument as the first OnTime
method. When you use a NOW function for the earliestTime argument, such as
<P>
<PRE>   Now + TimeValue("00:04:00")

</PRE></OL>Microsoft Excel uses the serial value of Now + TimeValue("00:04:00"). When
the second OnTime method is issued, the serial value of NOW will have
changed. Because the Now function is volatile, you cannot exactly duplicate
the earliestTime argument in the second OnTime method.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the OnTime function, choose the Search button in
Visual Basic Help and type:
<P>
<PRE>   ontime
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: XL97 97 7.00 5.00
<P>

Keywords          : kbprg PgmEvnt PgmHowTo xlvbahowto xlvbainfo kbcode kbprg<BR>
Version           : 5.00 5.00c 7.00 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

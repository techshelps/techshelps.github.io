

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OL97: How to Automate Outlook from Another Program </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168095">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1997/05/06">
<META NAME="Keywords" CONTENT="kbcode kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provides an overview of programming Microsoft Outlook 97 using automation from another program.  MORE INFORMATION  Microsoft provides programming examples for illustration only, without warranty either expressed or implied, including, ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVO,QAPN,QAW6,QBXS,QBUP,QAH4,QBS0,QAYC,QAPF,QDKX,QANF,QDH3,QA6A,QABA,QBVX P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>OL97: How to Automate Outlook from Another Program</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168095</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Outlook 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides an overview of programming Microsoft Outlook 97 using
automation from another program.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>Automation (formerly OLE Automation) allows one program to control another
program by either issuing commands or retrieving information
programmatically. You can use the code examples in this article in
Microsoft Word 97, Microsoft Excel 97, Microsoft Visual Basic, or any other
program that supports Automation.
<P>
<P><h3>Early vs. Late Binding</h3>
 
<P>
You can use either "early" or "late" binding to start an automation
session. Late binding uses either the GetObject or CreateObject command to
initialize Outlook. For example, the following code sets an object to the
Outlook program, which is the highest level object in the Outlook object
model. All automation code must first define an Outlook.Application object
in order to access any of the other Outlook objects below that.
<P>
<PRE>  Dim objOL as Object
  Set objOL = CreateObject("Outlook.Application")

</PRE>To use early binding, you first need to "Reference" the available Outlook
Object Library. To do this from Visual Basic (VB) or Visual Basic for
Applications, on the Visual Basic Editor Tools menu, click References.
Select "Microsoft Outlook 8.0 Object Library" from the list and click OK.
The object library file is Msoutl8.olb and by default installs to the
C:\Program Files\Microsoft Office\Office folder.
<P>
Once you reference the Outlook Object Library, you can use the following
syntax to start an Outlook session:
<P>
<PRE>  Set ol = New Outlook.Application

</PRE>Using early binding has two important advantages. First, code using early
binding runs faster than code using late binding (CreateObject/GetObject).
Second, because you reference the Outlook Object Library, you can get on-
line Outlook programming help using the object browser and Help system.
<P>
<P><h3>The Outlook Object Model</h3>
 
<P>
The Outlook object model provides all of the functionality necessary to
manipulate data stored in Outlook folders. However, there is limited
functionality available to control Outlook itself. For example, there is no
programming method to change the Options settings on the Tools menu, in
Outlook via the object model.
<P>
You can use the CommandBars object provided by Microsoft Office to execute
commands that are assigned to either toolbar buttons or menu items. For
example, you can use the CommandBars object to execute the Tools/Dial/New
Call command to bring up the New Call dialog box.
<P>
Most programming solutions need to interact with the data stored in
Outlook. Outlook stores all of it's information in Messaging Application
Programming Interface (MAPI) folders. Therefore, after you set an object
variable to Outlook.Application, you will commonly set a "Namespace" object
to MAPI:
<P>
<PRE>  Set ol = New Outlook.Application
  Set olns = ol.GetNamespace("MAPI")

</PRE>Once you set the NameSpace object, you are ready to set the next object to
a folder within the MAPI Namespace. One common way of doing this is by
specifying Outlook's "default" folders, which are the folders at the same
folder level as the Inbox that receives incoming mail. The following code
will set the objFolder object to the default Contacts folder:
<P>
<PRE>  Set ol = New Outlook.Application
  Set olns = ol.GetNamespace("MAPI")
  Set objFolder = olns.GetDefaultFolder(olFolderContacts)

</PRE>Once you are programmatically at the folder that contains the items you
wish to either use or create, you must use appropriate code to accomplish
your programming task. See the section below for some common programming
examples.
<P>
<P><h2>SAMPLE CODE FOR COMMON PROGRAMMING TASKS</h2>
 
<P>
<P><h3>Create a New Default Task Item</h3>
 
<P>
<PRE>   Sub CreateNewDefaultOutlookTask()
      Dim ol As Object
      Dim NewTask As Object
      ' Set the application object
      Set ol = New Outlook.Application
      ' You can only use CreateItem for default items
      ' Vbaoutl.hlp lists other Outlook constants to create other items
      Set NewTask = ol.CreateItem(olTaskItem)
      ' Display the new task form so the user can fill it out
      NewTask.Display
   End Sub

</PRE><h3>Create a New Task Using a Custom Form</h3>
 
<P>
<PRE>   Sub CreateNewContactFromCustomForm()
      Dim ol As Object
      Dim olns As Object
      Dim objFolder As Object
      Dim AllContacts As Object
      Dim NewContact As Object
      ' Set the application object
      Set ol = New Outlook.Application
      ' Set the namespace object
      Set olns = ol.GetNamespace("MAPI")
      ' Set the default Contacts folder
      Set objFolder = olns.GetDefaultFolder(olFolderContacts)
      ' Set objAllContacts = the collection of all contacts
      Set AllContacts = objFolder.Items
      ' Add a new contact the AllContacts collection using the
      '   "IPM.Contact.MyForm" form
      Set NewContact = AllContacts.Add("IPM.Contact.MyForm")
      ' Display the new contact form
      NewContact.Display
   End Sub

</PRE><h3>Sample Subroutine Loops Through All the Default Contacts</h3>
 
<P>
<PRE>   Sub GetOutlookContacts()
      Dim ol As Object
      Dim olns As Object
      Dim objFolder As Object
      Dim objAllContacts As Object
      Dim Contact As Object
      ' Set the application object
      Set ol = New Outlook.Application
      ' Set the namespace object
      Set olns = ol.GetNamespace("MAPI")
      ' Set the default Contacts folder
      Set objFolder = olns.GetDefaultFolder(olFolderContacts)
      ' Set objAllContacts = the collection of all contacts
      Set objAllContacts = objFolder.Items
      ' Loop through each contact
      For Each Contact In objAllContacts
         ' Display the Fullname field for the contact
         MsgBox Contact.FullName
      Next
   End Sub

</PRE><h3>Tips for Using the Help File</h3>
 
<P>
When you use the Vbaoutl.hlp help file, create a shortcut to the file on
your desktop or the Start menu. If you start this Help file from within
another program's Visual Basic Editor, you will not see the Help Contents
tab. Opening the Help file directly gives you more control when navigating
through the contents of the file.
<P>
For more information on how to install the Vbaoutl.hlp file, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID:   <B><A HREF="../OUTLOOK/Q166738.htm">Q166738</A></B>
   Title     :   OL97: How to Install Visual Basic Help

</PRE>If you're not sure if the Outlook object model supports something you're
trying to do, open the Vbaoutl.hlp help file and click the Find tab and
search for some keywords related to what you are trying to accomplish. If
you do not find a help topic, it is safe to assume the object model does
not support that feature.
<P>
<P><h3>Resources for Outlook Automation</h3>
 
<P>
There are many resources for learning how to program using Outlook. For
more information on available Outlook programming resources, please see the
following article in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID:   <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     :   OL97: How To Get Help Programming with Outlook

</PRE>The following list includes some important resources for automating
Outlook, located on the Microsoft Outlook Developer Forum:

<UL><LI>Microsoft Office 97 Developer Edition "Microsoft Office 97 Visual Basic
   Programmer's Guide," Chapter 5, "Microsoft Outlook Objects," 95-115,
   available on the Microsoft Web site:
<P>
<P><PRE>      <B><A HREF="http://www.microsoft.com/OfficeDev/Articles/Opg/005/005.htm">http://www.microsoft.com/OfficeDev/Articles/Opg/005/005.htm</A></B>
</PRE>
<LI>Microsoft Office 97 Developer Edition "Microsoft office 97 Object Model
   Guide," Chapter 7, "Object Model Diagrams," 4-33, available on the
   Microsoft Web site:
<P>
<P><PRE>      <B><A HREF="http://www.microsoft.com/OfficeDev/Articles/OMG/naug05ou.htm">http://www.microsoft.com/OfficeDev/Articles/OMG/naug05ou.htm</A></B>
</PRE>
<LI>The Microsoft Outlook 97 Automation Server Programming Model, available
   on the Microsoft Web site:
<P>
<P><PRE>      <B><A HREF="http://www.microsoft.com/OutlookDev/Articles/outprog.htm">http://www.microsoft.com/OutlookDev/Articles/outprog.htm</A></B>
</PRE><P>
   NOTE: Because the Microsoft Web site is constantly updated, the site
   address may change without notice. If this occurs, link to the Microsoft
   home page at the following address:
<P>
<P><PRE>      <B><A HREF="http://www.microsoft.com/">http://www.microsoft.com/</A></B>
</PRE><P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about creating solutions with Microsoft Outlook 97,
please see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   Article-ID: <B><A HREF="../vbapps/Q166368.htm">Q166368</A></B>
   Title     : OL97: How to Get Help Programming with Outlook

   Article-ID: <B><A HREF="../vbapps/Q170783.htm">Q170783</A></B>
   Title     : OL97: Q&amp;A: Questions about Customizing or
               Programming Outlook
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OutSol OutSol97
<P>

Keywords          : kbcode kbprg<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

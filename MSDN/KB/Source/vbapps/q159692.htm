

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: How to Create Command Bars Using Visual Basic Code </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q159692">
<META NAME="KBModify" CONTENT="1998/01/28">
<META NAME="KBCreate" CONTENT="1996/11/19">
<META NAME="Keywords" CONTENT="kbprg kbusage PgmObj UifCmdbar">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article contains examples that show you how to programmatically add and remove items on command bars, specifically a menu bar and a toolbar.  This article assumes that ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANS,QAF0,QBXS,QAB9,QA5D,QAPN,QA1S,QAY5,QAPF,QBV8,QBS0,QDN9,QAEF,QBWS,QAJD P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: How to Create Command Bars Using Visual Basic Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 28, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q159692</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article contains examples that show you how to programmatically add
and remove items on command bars, specifically a menu bar and a toolbar.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
NOTE: A demonstration of the techniques used in this article can be seen
in the sample file, FrmSmp97.exe. For information about how to obtain
this sample file, please see the following article in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q175066.htm">Q175066</A></B>
   TITLE     : ACC97: Microsoft Access 97 Sample Forms Available on MSL

</PRE><h2>MORE INFORMATION</h2>
 
<P>
In Microsoft Access 97, toolbars, shortcut menus, and menu bars are
combined into a single CommandBars collection which you can control
programmatically using Visual Basic for Applications. You can modify any
Microsoft Access built-in menu bars or toolbars, and you can create and
modify custom toolbars, menu bars and shortcut menus.
<P>
In order to program with command bars, you must set a reference to the
Microsoft Office 8.0 Object Library. To do so, open a module in Design view
and click References on the Tools menu. Click to select the box next to
Microsoft Office 8.0 Object Library. If you do not see that reference in
the Available References box, click Browse to search your hard drive for
the Mso97.dll file, which is installed by default into the C:\Program
Files\Microsoft Office\Office folder.
<P>
The following examples create command bars programmatically and assign
actions to their controls. Example 1 creates a floating toolbar. Example 2
creates a docked menu bar.
<P>
<P><h3>Example 1: Creating a Toolbar</h3>
 

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create a module and type the following procedures:
<P>
<P><PRE>      '****************************************************************
      ' This procedure creates a new toolbar.
      '****************************************************************
<PRE></PRE>      Sub AddNewCB()
         Dim CBar As CommandBar, CBarCtl As CommandBarControl
         On Error GoTo AddNewCB_Err

         ' Create a new floating toolbar and make it visible.
         Set CBar = CommandBars.Add(Name:="Sample Toolbar", Position:= _
            msoBarFloating)
         CBar.Visible = True

         ' Create a button with text on the bar and set some properties.
         Set CBarCtl = CBar.Controls.Add(Type:=msoControlButton)
         With CBarCtl
            .Caption = "Button"
            .Style = msoButtonCaption
            .TooltipText = "Display Message Box"
            .OnAction = "=MsgBox(""You pressed a toolbar button!"")"
         End With

         ' Create a button with an image on the bar and set some
         ' properties.
         Set CBarCtl = CBar.Controls.Add(Type:=msoControlButton)
         With CBarCtl
            .FaceId = 1000
            .Caption = "Toggle Button"
            .TooltipText = "Toggle First Button"
            .OnAction = "=ToggleButton()"
         End With

         ' Create a combo box control on the bar and set some properties.
         Set CBarCtl = CBar.Controls.Add(msoControlComboBox)
         With CBarCtl
            .Caption = "Drop Down"
            .Width = 100
            .AddItem "Create Button", 1
            .AddItem "Remove Button", 2
            .DropDownWidth = 100
            .OnAction = "=AddRemoveButton()"
         End With
         Exit Sub
         AddNewCB_Err:
         MsgBox "Error " &amp; Err.Number &amp; vbCr &amp; Err.Description
         Exit Sub
      End Sub

      '****************************************************************
      ' This procedure is called from a button on the toolbar.
      ' It toggles the Visible property of another button on the bar.
      '****************************************************************
      Function ToggleButton()
         Dim CBButton As CommandBarControl
         On Error GoTo ToggleButton_Err
         Set CBButton = CommandBars("Sample Toolbar").Controls(1)
         CBButton.Visible = Not CBButton.Visible
         Exit Function
         ToggleButton_Err:
         MsgBox "Error " &amp; Err.Number &amp; vbCr &amp; Err.Description
         Exit Function
      End Function

      '****************************************************************
      'This procedure is called from a combo box on the toolbar
      'It adds a button to the bar or removes it
      '****************************************************************
      Function AddRemoveButton()
         Dim CBar As CommandBar, CBCombo As CommandBarComboBox
         Dim CBNewButton As CommandBarButton
         On Error GoTo AddRemoveButton_Err
         Set CBar = CommandBars("Sample Toolbar")
         Set CBCombo = CBar.Controls(3)
         Select Case CBCombo.ListIndex
            'If Create Button is selected, create a button on the bar
            Case 1
               Set CBNewButton = CBar.Controls.Add(Type:=msoControlButton)
               With CBNewButton
                  .Caption = "New Button"
                  .Style = msoButtonCaption
                  .BeginGroup = True
                  .Tag = "New Button"
                  .OnAction = "=MsgBox(""This is a new button!"")"
               End With
            ' Find and remove the new button if it exists.
            Case 2
               Set CBNewButton = CBar.FindControl(Tag:="New Button")
               CBNewButton.Delete
         End Select
         Exit Function
         AddRemoveButton_Err:
         ' If the button does not exist.
         If Err.Number = 91 Then
            MsgBox "Cannot remove button that does not exist!"
            Exit Function
         Else
           MsgBox "Error " &amp; Err.Number &amp; vbCr &amp; Err.Description
           Exit Function
         End If
         End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>       AddNewCB
</PRE><P>
   Note that a floating toolbar appears on the screen.

<P><LI>Click the word "Button" on the toolbar and note the message box that
   appears.

<P><LI>Click the button with the light bulb image and note that Button
   disappears. Click it again and Button reappears.

<P><LI>Select Create Button in the combo box and note that a button called New
   Button is added to the toolbar. Select Remove Button in the combo box
   and note that New Button is removed from the toolbar.
<P>
</OL><h3>Example 2: Creating a Menu Bar</h3>
 

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create a module and type the following procedures:
<P>
<P><PRE>      '****************************************************************
      ' This procedure creates a new menu bar.
      '****************************************************************
<PRE></PRE>      Sub AddNewMB()
         Dim MBar As CommandBar, MBarCtl As CommandBarControl
         Dim MBarPopup As CommandBarPopup, MBarSubCtl as CommandBarControl
         On Error GoTo AddNewMB_Err

         ' Create a new menu bar and dock it on the left.
         Set MBar = CommandBars.Add(Name:="Sample Menu Bar", Position:= _
            msoBarLeft, MenuBar:=True, Temporary:=False)
         ' Make the menu bar visible.
         MBar.Visible = True
         ' Prevent users from undocking the menu bar.
         MBar.Protection = msoBarNoMove

         ' Create a popup control on the bar and set its caption.
         Set MBarCtl = MBar.Controls.Add(Type:=msoControlPopup)
         MBarCtl.Caption = "Displa&amp;y"

         ' Create 2 controls on the Display popup and set some properties.
         Set MBarSubCtl = MBarCtl.Controls.Add(Type:=msoControlButton)
         With MBarSubCtl
            .Style = msoButtonIconAndCaption
            .Caption = "E&amp;nable ClickMe"
            .FaceId = 59
            .OnAction = "=ToggleClickMe()"
            .Parameter = 1
            .BeginGroup = True
         End With
         Set MBarSubCtl = MBarCtl.Controls.Add(Type:=msoControlButton)
         With MBarSubCtl
            .Style = msoButtonIconAndCaption
            .Caption = "Di&amp;sable ClickMe"
            .FaceId = 276
            .OnAction = "=ToggleClickMe()"
            .Parameter = 2
            .BeginGroup = True
         End With

         ' Add another control to the menu bar.
         Set MBarCtl = MBar.Controls.Add(Type:=msoControlButton)
         With MBarCtl
            .BeginGroup = True
            .Caption = "&amp;ClickMe"
            .Style = msoButtonCaption
            .OnAction = "=MsgBox(""You clicked ClickMe"")"
         End With

         ' Add a control to make this menu bar invisible and bring back
         ' the system menu bar.
         Set MBarCtl = MBar.Controls.Add(Type:=msoControlButton)
         With MBarCtl
            .BeginGroup = True
            .Caption = "&amp;Show Northwind Menu Bar"
            .Style = msoButtonCaption
            .OnAction = "=SampleMenuDisable()"
         End With
         Exit Sub
         AddNewMB_Err:
         MsgBox "Error " &amp; Err.Number &amp; vbCr &amp; Err.Description
         Exit Sub
      End Sub

      '****************************************************************
      ' This procedure uses the Parameter property of a command bar
      ' control to execute a different action depending on which item
      ' you click on a popup menu.
      '****************************************************************
      Function ToggleClickMe()
         Dim MyMenu As CommandBar
         Dim MBarClickMe As CommandBarControl
         On Error GoTo ToggleClickMe_Err
         Set MyMenu = CommandBars("Sample Menu Bar")
         Set MBarClickMe = MyMenu.Controls(2)
         ' The ActionControl property of command bars returns the control
         ' whose OnAction property is running this procedure.
         With CommandBars.ActionControl
            Select Case .Parameter
               Case 1
                  MBarClickMe.Enabled = True
               Case 2
                  MBarClickMe.Enabled = False
            End Select
         End With
         Exit Function
         ToggleClickMe_Err:
         MsgBox "Error " &amp; Err.Number &amp; vbCr &amp; Err.Description
         Exit Function
      End Function

      '****************************************************************
      ' This function restores the original menu bar. Because there can
      ' only be one system menu bar, you must hide the sample menu bar
      ' when you want to bring back the previous system menu bar.
      '****************************************************************
      Function SampleMenuDisable()
         Application.CommandBars("Sample Menu Bar").Visible = False
         Application.CommandBars("NorthwindCustomMenuBar").Visible = True
      End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>      AddNewMB
</PRE><P>
   Note that a docked menu bar appears on the left side of the screen.

<P><LI>Click the ClickMe button on the menu and note the message box that
   appears.

<P><LI>Click the Display button, and then click Disable ClickMe. Note that the
   ClickMe button is dimmed.

<P><LI>Click the Display button, and then click Enable ClickMe. Note that the
   ClickMe button is enabled.

<P><LI>Click the Show Northwind Menu Bar button to restore the original system
   menu bar.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the methods and properties of command bars,
search the Help Index for "CommandBars collection," or ask the Microsoft
Access 97 Office Assistant.
<P>
For more information about the methods and properties of command bar
controls, search the Help Index for "CommandBarControls collection," or ask
the Microsoft Access 97 Office Assistant.
<P>
For more information on how to programmatically add and remove items on
command bars, please see the following article(s) in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q172300.htm">Q172300</A></B>
   TITLE     : ACC97: Command Bar Wizard Available on MSL
</PRE></OL> 
<PRE>Keywords          : kbprg kbusage PgmObj UifCmdbar
Version           : 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 28, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

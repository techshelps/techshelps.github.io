

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: Macro Examples Using OptionButton Controls on a UserForm </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q159705">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/11/19">
<META NAME="Keywords" CONTENT="kbcode kbprg xlvbahowto xlvbainfo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  There are two ways to group option buttons on a UserForm. To group the controls, do either of the following:   - Place the option buttons inside a Frame control.     -or-   - Use the GroupName property to create a group.  Both of these methods crea...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHP,QAH4,QAB5,QA7O,QAOE,QAMN,QABO,QBS0,QBWS,QAPN,QAFF,QAIB,QAIA,QA01,QBV8 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: Macro Examples Using OptionButton Controls on a UserForm</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q159705</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
There are two ways to group option buttons on a UserForm. To group the
controls, do either of the following:

<UL><LI>Place the option buttons inside a Frame control.
<P>
   -or-

<LI>Use the GroupName property to create a group.
<P>
</UL>Both of these methods create a group for the specified option buttons,
which makes each of the option buttons (within a group) mutually exclusive.
This means that when you click any option button in the group, all other
option buttons in the group are set to false.
<P>
Neither method is better than the other one. The method you use depends on
how you want to implement the project and whether you want to use a Frame
control for each group on the UserForm or use macro code.
<P>
This article contains macro examples that use both methods. This article
also contains an example that illustrates a third method that does not
require grouping of option buttons.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<P><h3>Using a Frame Control to Group Option Buttons</h3>
 
<P>
In this example, you create a UserForm that contains a CommandButton, and
three OptionButtons within a Frame control. The advantage of having the
option buttons within the frame is that the frame control creates a
collection of controls for the frame. This collection of option buttons in
the Frame control works well with the For Each...Next loop.

<OL><P><LI>Open a new workbook and start the Visual Basic Editor.

<P><LI>Insert a UserForm and module sheet into the project.

<P><LI>Draw a Frame control on the UserForm.

<P><LI>Draw three OptionButton controls on the Frame control.

<P><LI>Draw a CommandButton control on the UserForm (outside the Frame
    control).

<P><LI>On the module sheet you inserted in Step 2, add the following code:
<P>
<PRE>       Sub Frame_Options()
           UserForm1.Show
       End Sub

</PRE><P><LI>Double-click the CommandButton on the UserForm to display the code
    module that is associated with the UserForm.

<P><LI>On the code module, type the following code:
<P>
       Private Sub CommandButton1_Click()
<PRE>          For Each x in Frame1.Controls 'Loop through the option buttons
                                        'within the Frame
              If x.Value = True Then
                  MsgBox x.Caption        'Display the name of the selected
              End If                     'option button
          Next
       End Sub

</PRE><P><LI>Run the Frame_Options macro on the general module.
<P>
</OL>The UserForm is displayed with none of the option buttons selected.

<OL><P><LI>Click any one of the option buttons.

<P><LI>Click the command button.
<P>
</OL>A message box appears with the caption of the currently selected option
button.

<OL><P><LI>Close the UserForm.
<P>
</OL><h3>Using the GroupName Property to Create Option Button Groups</h3>
 
<P>
If you do not use a Frame control to group your option buttons, then it is
harder to programmatically determine which option button is the selected
option. You can set the GroupName property for a set of option buttons to
the same value. This ensures that if you click one option button the other
buttons are turned off (all option buttons in a group are mutually
exclusive). However, you must determine which option button is the one that
is turned on.

<OL><P><LI>Open a new workbook and start the Visual Basic Editor.

<P><LI>Insert a UserForm and a module sheet into the project.

<P><LI>Draw three OptionButton controls on the UserForm and set the GroupName
   property for each one to "mygroup1" (without the quotation marks).

<P><LI>Repeat Step 3 and use "mygroup2" (without the quotation marks) for the
   GroupName.
<P>
</OL>NOTE: The macro provided below does not address this second group. It
is added to the UserForm to illustrate how to programmatically identify
option buttons in specific groups (in this case, in "mygroup1").

<OL><P><LI>Draw a CommandButton control on the UserForm.

<P><LI>Double-click the CommandButton to display the code module associated
   with the UserForm, and type the following code for the command button
   click event:
<P>
<P><PRE>      Private Sub CommandButton1_Click()
</PRE><P>
<PRE>          'Loop through all of the controls in the userform.
          For Each x in UserForm1.Controls

              'Check for the string "Option" within the caption of each
              'control.
              If InStr(x.Caption, "Option") Then

                  'Check the group name.
                  If x.GroupName = "mygroup1" Then

                      'Check the status of the option button.
                      If x.Value = True Then

                          MsgBox x.Caption

                      End If
                  End If
              End If
          Next
      End Sub

</PRE><P><LI>On the module sheet you inserted into the project in Step 2,
   type the following code:
<P>
<PRE>      Sub No_Frame_Options()
          UserForm1.Show  'Displays the UserForm
      End Sub

</PRE><P><LI>Run the No_Frame_Options macro.
<P>
</OL>The UserForm appears.

<OL><P><LI>Click any of the first three option buttons (that you added in step 3)
   on the UserForm, and then click the command button.
<P>
</OL>A message box appears and displays the caption of the currently selected
option button from "mygroup1".

<OL><P><LI>Close the UserForm.
<P>
</OL><h3>Setting a Global Variable to the Name of the Selected Option</h3>
 
<P>
A third method for working with option buttons on a UserForm requires
neither a Frame control nor a common GroupName. This method uses macro
code, which is assigned to the Click event for each option button you
create on the UserForm, to set the value of a global variable to the name
of the selected option button. If you create multiple groups of option
buttons, you can use a different global variable for each group.

<OL><P><LI>Open a new workbook and start the Visual Basic Editor.

<P><LI>Insert a UserForm and a module sheet into the project.

<P><LI>Draw three OptionButton controls on the UserForm.

<P><LI>Draw a CommandButton control on the UserForm.

<P><LI>Double-click the "OptionButton1" control.
<P>
</OL>This step displays the code module that is associated with the UserForm.

<OL><P><LI>Type the following macro code on this module sheet:
<P>
       Private Sub OptionButton1_Click()
<PRE>           myoption = "option button 1"
       End Sub

</PRE><P><LI>Double-click the "OptionButton2" control.
<P>
</OL>This step displays the code module associated with the UserForm.

<OL><P><LI>Type the following macro code on this module sheet:
<P>
       Private Sub OptionButton2_Click()
<PRE>           myoption = "option button 2"
       End Sub

</PRE><P><LI>Double-click the "OptionButton3" control.
<P>
</OL>This step displays the code module that is associated with the UserForm.

<OL><P><LI>Type the following macro code on this module sheet:
<P>
<P><PRE>       Private Sub OptionButton3_Click()
<PRE></PRE>           myoption = "option button 3"
       End Sub

</PRE><P><LI>Double-click the CommandButton to display the code module that is
<P><PRE>    associated with the UserForm and type the following code for the
    command button click event:
</PRE><P>
<P><PRE>       Private Sub CommandButton1_Click()
<PRE></PRE>           MsgBox myoption   'display the current value of the global
                             'variable
       End Sub

</PRE><P><LI>On the code module that is associated with the UserForm click the
<P><PRE>    Object drop-down, click "(General)," and then click "(Declarations)" in
    the Procedure list. Type the following code in this section of the code
    module:
</PRE><P>
<P><PRE>       Dim myoption As String
</PRE>
<P><LI>In the General module you inserted into the project in Step 2, type
<P><PRE>    the following code:
</PRE><P>
<PRE>       Sub Show_UserForm()
           UserForm1.Show
       End Sub

</PRE><P><LI>Run the Show_UserForm macro.
<P>
</OL>Your UserForm appears.

<OL><P><LI>Click any one of the option buttons, and then click the command button.
<P>
</OL>A message box appears that displays the name of the selected option
button.

<OL><P><LI>Click OK in the message box, and then close the UserForm.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about grouping option buttons, click the Index tab in
Microsoft Excel Visual Basic Help, type the following text
<P>
<PRE>   groupname property

</PRE></OL>and then double-click the selected text to go to the "GroupName Property"
topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97<BR>
Keywords          : kbcode kbprg xlvbahowto xlvbainfo<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

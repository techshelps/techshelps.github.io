

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Visual Basic Example to Total Rows and Columns in an Array </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113940">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/04/20">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, you can use arrays to calculate and manipulate data in a worksheet. You can also use Visual Basic for Applications to store the values from a range of cells into a Visual Basic array.  The sample macro code in this article adds ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAH4,QAWH,QBVP,QDPB,QADP,QBFY,QABO,QDNZ,QAGF,QAPF,QA5V,QBJZ,QAE5,QDMR P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Visual Basic Example to Total Rows and Columns in an Array</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113940</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel, you can use arrays to calculate and manipulate data
in a worksheet. You can also use Visual Basic for Applications to store
the values from a range of cells into a Visual Basic array.
<P>
The sample macro code in this article adds an additional column and row
to a rectangular region of cells that will contain totals for each row
and column in that region.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following Visual Basic Code reads data from the current region of
cells surrounding the active cell on the active worksheet. The macro
stores the data within an array, then sums each row and column, placing
the output on the worksheet. The size of the array is determined by the
number of cells in the current region.
<P>
To run the macro:

<OL><P><LI>Highlight a cell or range of cells within the region you want to
   sum, on the Tools menu, point to Macro, and click Macros. (In
   versions earlier than 97, click Macro on the Tools menu.)

<P><LI>Select the TotalRowsAndColumns macro, and then click Run.
<P>
</OL>NOTE: This macro does not enter any formulas into your worksheet, so if
the numbers in the range being totaled change, you must run the macro
again.
<P>
<P><h3>Macro Example</h3>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
<PRE>Sub TotalRowsAndColumns()

' This macro assumes that you have selected any cell or group of
' cells within a rectangular region of cells that you would like to
' have totaled. The totals will appear in the row below and the
' column to the right of the current region.

</PRE></OL>Dim r As Integer
Dim c As Integer
Dim i As Integer
Dim j As Integer
Dim myArray As Variant
<P>
<PRE>' Declaring myArray as a Variant prepares it to receive a range of
' cells. At that point it is transformed automatically into an array
' with beginning subscript myArray(1,1).

'Refer to the region surrounding the current selection
</PRE>With Selection.CurrentRegion
<P>
r = .Rows.Count
c = .Columns.Count
<P>
<PRE>'resize for totals row and column and place into array
</PRE>myArray = .Resize(r + 1, c + 1)
<P>
<PRE>' The following 10 lines of macro code (including comments)
' are what is commonly referred to
' as a Nested Loop. The variable i keeps track of the row number,
' while j keeps track of the column number. Every time j cycles
' through the available columns, i gets incremented by one and j
' starts the cycle from one to c all over again.

</PRE>For i = 1 To r
<PRE>   For j = 1 To c
      'total for row i
      myArray(i, c + 1) = myArray(i, c + 1) + myArray(i, j)
      'total for column j
      myArray(r + 1, j) = myArray(r + 1, j) + myArray(i, j)
      'grand total
      myArray(r + 1, c + 1) = myArray(r + 1, c + 1) + myArray(i, j)
   Next j
</PRE>Next i
<P>
<PRE>' Return the array, which now contains an extra row and column
' for the totals, to the worksheet.

</PRE>.Resize(r + 1, c + 1) = myArray
<P>
End With
<P>
<PRE>End Sub

</PRE>To perform a similar operation to the one performed in this example, you
can modify the macro code. For example, to subtract, multiply, or divide
the values contained in the selected range of cells, you will need to
change the mathematical operator.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 7.00 8.00 97<BR>
Keywords          : kbprg PgmHowTo kbprg<BR>
Version           : 5.00 5.00c 7.00 97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

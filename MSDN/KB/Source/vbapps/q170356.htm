

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: Cannot Reference Excel 8.0 Object Library from VB 4.0x </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q170356">
<META NAME="KBModify" CONTENT="1998/03/12">
<META NAME="KBCreate" CONTENT="1997/06/18">
<META NAME="Keywords" CONTENT="IAPVBA VB4WIN vbwin kbenv kberrmsg kbinterop kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Microsoft Visual Basic 4.0x does not allow addition of the Microsoft Excel 8.0 Object Library via Tools/References when the Microsoft Excel 5.0 Object Library is listed there.  CAUSE =====  When adding a new version of an object (or type) library t...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAPN,QAW6,QBHQ,QDKX,QBWQ,QDL9,QBWO,QBWN,QBE7,QBE6,QDH3,QBFY,QAB3 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: Cannot Reference Excel 8.0 Object Library from VB 4.0x</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 12, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q170356</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Standard, Professional and Enterprise Editions
   for Windows, versions 4.0 and 4.0a, on the following platforms:
   NT, Win95
<LI>Microsoft Excel for Windows, versions 5.0, 5.0a, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows, version 8.0
<LI>Microsoft Office for Windows, versions 4.2, 4.2b, 4.2c, 4.3, 4.3c
<LI>Microsoft Office for Windows NT, version 4.2
<LI>Microsoft Office for Windows 95, versions 7.0, 7.0a, 7.0b
<LI>Microsoft Office 97 for Windows, version 8.0
<LI>Microsoft Project 98 for Windows
<LI>Microsoft Project for Windows 95, versions 4.1, 4.1a
<LI>Microsoft Project for Windows, version 4.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Microsoft Visual Basic 4.0x does not allow addition of the Microsoft Excel
8.0 Object Library via Tools/References when the Microsoft Excel 5.0 Object
Library is listed there.
<P>
<P><h2>CAUSE</h2>
 
<P>
When adding a new version of an object (or type) library to its
Tools/Reference list, Microsoft Visual Basic 4.0x, in spite of the
distinctly different version numbers of the old and new object libraries,
insists, via an internal string-comparison routine, that the new library's
Locale/Country ID (LCID) be identical to the old library's LCID. Because
the Microsoft Excel 5.0 Object Library has an LCID of 9 (English) and the
Microsoft Excel 8.0 Object Library has an LCID of 0 (Default Language),
this test fails; Microsoft Visual Basic 4.0x then displays the error:
<P>
<PRE>   "Object library's language setting incompatible with current project"

</PRE>and does not add the new library to the Tools/Reference list.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
There are two workarounds: one affects all newly created projects; the
other, the current project only.
<P>
NOTE 1: The underscore character (_) below is used as a
line-continuation character and should not be typed. There should
be no spaces between the character preceding the underscore and the
letter on the next line.
<P>
NOTE 2: The references below presume that the directory containing
Microsoft Office 97 for Windows is C:\OFFICE97 and that the pertinent
Microsoft Excel 8.0 Object Library file, EXCEL8.OLB, is located in
the directory C:\OFFICE97\OFFICE.
<P>
<P><h3>Method 1</h3>
 
<P>
This approach modifies Microsoft Visual Basic 4.0x's default project file
so that the Microsoft Excel 8.0 Object Library will be available to all
newly-created projects.

<OL><P><LI>In a text editor such as NOTEPAD.EXE, open the AUTO32LD.VBP project
   file, located in the Microsoft Visual Basic 4.0x directory. The file's
   contents will resemble the following:
<P>
   Object={F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.0#0; comdlg32.ocx
   Object={BDC217C8-ED16-11CD-956C-0000C04E4C0A}#1.0#0; tabctl32.ocx
   Object={3B7C8863-D78F-101B-B9B5-04021C009402}#1.0#0; richtx32.ocx
   Object={6B7E6392-850A-101B-AFC0-4210102A8DA7}#1.0#0; comctl32.ocx
   Object={FAEEE763-117E-101B-8933-08002B2F4F5A}#1.0#0; dblist32.ocx
   Object={00028C01-0000-0000-0000-000000000046}#1.0#0; DBGRID32.OCX
   Object={F6125AB1-8AB1-11CE-A77F-08002B2F4E98}#1.0#0; msrdc32.ocx
   Reference=*\G{BEF6E001-A874-101A-8BBA-00AA00300CAB}#2.0#0#C:\WINDOWS\_
<P><PRE>      SYSTEM32\OLEPRO32.DLL#Standard OLE Types
</PRE>   Reference=*\G{EE008642-64A8-11CE-920F-08002B369A33}#1.0#0#C:\WINDOWS\_
<P><PRE>      SYSTEM32\MSRDO32.dll#Microsoft Remote Data Object 1.0
</PRE>   Name="Project1"

<P><LI>Add the line below:
<P>
   Reference=*\G{00020813-0000-0000-C000-000000000046}#1.2#0#C:\OFFICE97\_
<P><PRE>      OFFICE\EXCEL8.OLB#Microsoft Excel 8.0 Object Library
</PRE><P>
   so that the file appears as follows:
<P>
   Object={F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.0#0; comdlg32.ocx
   Object={BDC217C8-ED16-11CD-956C-0000C04E4C0A}#1.0#0; tabctl32.ocx
   Object={3B7C8863-D78F-101B-B9B5-04021C009402}#1.0#0; richtx32.ocx
   Object={6B7E6392-850A-101B-AFC0-4210102A8DA7}#1.0#0; comctl32.ocx
   Object={FAEEE763-117E-101B-8933-08002B2F4F5A}#1.0#0; dblist32.ocx
   Object={00028C01-0000-0000-0000-000000000046}#1.0#0; DBGRID32.OCX
   Object={F6125AB1-8AB1-11CE-A77F-08002B2F4E98}#1.0#0; msrdc32.ocx
   Reference=*\G{BEF6E001-A874-101A-8BBA-00AA00300CAB}#2.0#0#C:\WINDOWS\_
<P><PRE>      SYSTEM32\OLEPRO32.DLL#Standard OLE Types
</PRE>   Reference=*\G{EE008642-64A8-11CE-920F-08002B369A33}#1.0#0#C:\WINDOWS\_
<P><PRE>      SYSTEM32\MSRDO32.dll#Microsoft Remote Data Object 1.0
</PRE>   Reference=*\G{00020813-0000-0000-C000-000000000046}#1.2#0#C:\OFFICE97\_
<P><PRE>      OFFICE\EXCEL8.OLB#Microsoft Excel 8.0 Object Library
</PRE>   Name="Project1"

<P><LI>Save the AUTO32LD.VBP file and close the text editor.

<P><LI>Start Microsoft Visual Basic 4.0x and select Tools, then References.

<P><LI>The Microsoft Excel 5.0 Object Library no longer appears in the list.
   Instead, the Microsoft Excel 8.0 Object Library is available and checked
   for use.
<P>
</OL><h3>Method 2</h3>
 
<P>
This technique modifies a given project's VBP file to include the Microsoft
Excel 8.0 Object Library just for that project.

<OL><P><LI>Save and close the project with the Microsoft Excel 5.0 Object Library
   reference.

<P><LI>In a text editor such as NOTEPAD.EXE, open the project's VBP file and
   change the reference to Microsoft Excel from:
<P>
   Reference=*\G{00020813-0000-0000-C000-000000000046}#1.0#9#C:\OFFICE97\_
<P><PRE>      OFFICE\XL5EN32.OLB#Microsoft Excel 5.0 Object Library
</PRE><P>
</OL>to:
<P>
<PRE>   Reference=*\G{00020813-0000-0000-C000-000000000046}#1.2#0#C:\OFFICE97\_
      OFFICE\EXCEL8.OLB#Microsoft Excel 8.0 Object Library

</PRE><P><LI>Save the project's VBP file and close the text editor.

<P><LI>Start Microsoft Visual Basic 4.0x, and then load and save the project.

<P><LI>Select Tools, then References. The Microsoft Excel 5.0 Object Library no
   longer appears in the list. Instead, the Microsoft Excel 8.0 Object
   Library is available and checked for use with this project. Newly-
   created projects will revert to the Microsoft Excel 5.0 Object Library.
<P>
</OL><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the versions of Microsoft
Visual Basic listed at the beginning of this article. We are researching
this problem and will post new information here in the Microsoft Knowledge
Base as it becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Visual Basic 4.0x requires LCID consistency for a given object
library's Globally Unique Identifier (GUID), even if the incoming object
library's version number is different from the existing object library's
version number. Both the Microsoft Excel 5.0 Object Library and the
Microsoft Excel 8.0 Object Library share the same GUID, so this arbitrary
LCID rule is enforced.
<P>
The behavior is particularly noticeable after installing Microsoft
Office 97 to a machine containing both Microsoft Visual Basic 4.0x and one
of the aforementioned earlier versions of Microsoft Office for Windows;
the Microsoft Excel 8.0 Object Library is conspicuously absent from
Microsoft Visual Basic 4.0x's Tools/Reference list, yet all of the other
Microsoft Office 97 Object Libraries are shown (namely, those for
Microsoft Office 8.0, Microsoft Access 8.0, Microsoft Binder 8.0,
Microsoft Graph 8.0, Microsoft PowerPoint 8.0, and Microsoft Word 8.0).
<P>
<P><h3>Steps to Reproduce Problem</h3>
 
<P>
NOTE: The following presumes that Microsoft Visual Basic 4.0x, Microsoft
Excel for Windows (5.0x or 7.0x), and Microsoft Excel 97 for Windows 8.0
have been installed.

<OL><P><LI>Start Microsoft Visual Basic 4.0x.

<P><LI>For the new, default project, select Tools, then References, and choose
   the Microsoft Excel 5.0 Object Library. Click OK.

<P><LI>On a Microsoft Visual Basic 4.0x form, create a CommandButton and type
   the code below into its click event:
<P>
<P><PRE>      Private Sub cmdMakeMyChart_Click()
<PRE></PRE>         Dim xlchart As Chart
         Set xl = CreateObject("Excel.Application")
         xl.Visible = True
         xl.Workbooks.Add
         xl.Range("a1").Value = 1
         xl.Range("a2").Value = 2
         xl.Range("a3").Value = 3
         xl.Range("a4").Formula = "=sum(a1:a3)"
         xl.Range("A1").CurrentRegion.Select
         Set xlchart = xl.Charts.Add()
         xlchart.Type = xl3DColumn
         'xlchart.ChartType = xlPyramidCol
      End Sub

</PRE><P><LI>Run the code, click the CommandButton, and observe the instantiation of
   Microsoft Excel for Windows (5.0x or 7.0x) as an OLE automation server.
   A three-dimensional column chart of four values is created.

<P><LI>Close Microsoft Excel without saving the resultant workbook.

<P><LI>Now, move the apostrophe in the above code so that:
<P>
<P><PRE>      xlchart.Type = xl3DColumn
      'xlchart.ChartType = xlPyramidCol
</PRE><P>
   becomes:
<P>
<P><PRE>      'xlchart.Type = xl3DColumn
      xlchart.ChartType = xlPyramidCol
</PRE><P>
</OL>Because the pyramid chart is unique to Microsoft Excel 97 for Windows, a
reference to the Microsoft Excel 8.0 Object Library is needed.

<OL><P><LI>Select Tools, then References, and note that even if you had done a
   complete install of Microsoft Office 97 for Windows (or Microsoft
   Excel 97 for Windows) subsequent to installing Microsoft Excel for
   Windows (5.0x or 7.0x) completely, the Microsoft Excel 8.0 Object
   Library is not listed (although the object libraries for Microsoft
   Office 8.0, Microsoft Access 8.0, Microsoft Binder 8.0, Microsoft
   Graph 8.0, Microsoft PowerPoint 8.0, and Microsoft Word 8.0 are listed).

<P><LI>Click Browse and navigate to Microsoft Office 97's OFFICE directory
   (typically C:\OFFICE97\OFFICE).

<P><LI>Double-click EXCEL8.OLB and note the error:
<P>
<P><PRE>      "Object library's language setting incompatible with current project"
</PRE>
<P><LI>Click OK. Deselecting "Microsoft Excel 5.0 Object Library" and trying
   to deselect "Visual Basic for Applications" does not allow EXCEL8.OLB to
   be added. The latter attempt produces the error:
<P>
<P><PRE>      "Can't remove control or reference: in use"
<P></BLOCKQUOTE>
</OL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: OLE object type library automation server registry<BR>
GUID LCID<BR>
Keywords          : IAPVBA VB4WIN vbwin kbenv kberrmsg kbinterop kbprg<BR>
Technology        : kbole kbvba<BR>
Version           : WINDOWS:4.2 4.3 5.0 7.0 8.0<BR>
Platform          : NT Win95 WINDOWS<BR>
Issue type        : kbbug<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 12, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

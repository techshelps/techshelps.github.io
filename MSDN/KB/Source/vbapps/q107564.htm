

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Not All Worksheet Functions Supported as Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q107564">
<META NAME="KBModify" CONTENT="1998/02/02">
<META NAME="KBCreate" CONTENT="1993/11/23">
<META NAME="Keywords" CONTENT="kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Visual Basic for Applications, not all Microsoft Excel worksheet functions are supported as methods of the Application object. If you attempt to use one of these worksheet functions with the Application object, you will receive the fol...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QBVP,QAY5,QAB9,QBV8,QAJQ,QAPN,QA5F,QAMA,QBWS,QANY,QAKM,QAW6,QA59,QAJH P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Not All Worksheet Functions Supported as Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 2, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q107564</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Visual Basic for Applications, not all Microsoft Excel
worksheet functions are supported as methods of the Application object. If
you attempt to use one of these worksheet functions with the Application
object, you will receive the following error message:
<P>
<PRE>   Run-Time Error '438':
   Object doesn't support this property or method

</PRE><h2>MORE INFORMATION</h2>
 
<P>
You can write Visual Basic procedures that call Microsoft Excel worksheet
functions. The worksheet functions that are available to Visual Basic
procedures are in the Application object, and are listed in the
Methods/Properties list for the Application object in the Visual Basic
Object Browser.
<P>
Most worksheet functions that are not available as methods of the
Application object have an equivalent Microsoft Visual Basic built-in
operator or function. For example, the Mod() worksheet function is not
available as a method of the Application object because there is an
equivalent Mod operator built-in to Visual Basic. This is by design, 
because a Visual Basic operator works faster than a Microsoft Excel
function in a Visual Basic module.
<P>
<P><h3>Microsoft Excel 97 and Microsoft Excel 98</h3>
 
<P>
NOTE: The following steps assume that you installed the Visual Basic Help
file.
<P>
To display a list of all the Microsoft Excel worksheet functions that are
available as methods of the Application object in Visual Basic, follow 
these steps:

<OL><P><LI>In the Visual Basic Editor, type "worksheet functions" (without the
   quotation marks) in the Microsoft Office Assistant, and then click 
   Search.

<P><LI>In the list of topics, click "List of Worksheet Functions Available to
   Visual Basic."
<P>
</OL>To locate the equivalent Visual Basic operator or function of a Microsoft
Excel worksheet function that is not available as an Application object
method, follow these steps:

<OL><P><LI>In the Visual Basic Editor, type the function or operator name in the
   Office Assistant, and then click Search. For example, type "Mod" 
   (without the quotation marks).

<P><LI>In the list of topics, click the topic for the function or operator. For
   example, click the "Mod Operator" topic.
<P>
</OL><h3>Microsoft Excel version 7.0</h3>
 
<P>
NOTE: The following steps assume that you installed the Visual Basic Help
file.
<P>
To display a list of all the Microsoft Excel worksheet functions available
as methods of the Application object in Visual Basic, follow these steps:

<OL><P><LI>Click the Index tab in Microsoft Excel Help, type "worksheet
   functions, using" (without the quotation marks), and then click Display.

<P><LI>In the list of topics, click "List of Worksheet Functions Available to
   Visual Basic," and then click Display.
<P>
</OL>To locate the equivalent Visual Basic operator or function of a Microsoft
Excel worksheet function that is not available as an Application object
method, follow these steps:

<OL><P><LI>Click the Contents tab in Microsoft Excel Help.

<P><LI>In the list of topics, click Microsoft Excel Visual Basic Reference, and
   click Open. Click Functions, and then click Open.

<P><LI>Click the letter of the operator or function that you want to use, and
   click Open.

<P><LI>Click the operator or function with the same name as the function you
   want to use, and click Display.
<P>
</OL><h3>Microsoft Excel version 5.x</h3>
 
<P>
To display a list of all the Microsoft Excel worksheet functions available
as methods of the Application object in Visual Basic, follow these steps:

<OL><P><LI>Click the Search button in Visual Basic Reference Help, type "worksheet
   functions" (without the quotation marks), and then click Show Topics.

<P><LI>In the list of topics, click "Using Worksheet Functions in Visual
   Basic," and then click Go To.
<P>
</OL>To locate the equivalent Visual Basic operator or function of a Microsoft
Excel worksheet function that is not available as an Application object
method, follow these steps:

<OL><P><LI>Click the Search button in Visual Basic Online Help and type:
<P>
<P><PRE>      programming language
</PRE>
<P><LI>Click Show Topics, and choose Go To.

<P><LI>Click the operator or function with the same name as the function you
   want to use.
<P>
</OL>The following table contains worksheet functions that are not available as
methods of the Application object. The Visual Basic Equivalent column lists
functions you can use that will produce the same (or similar) results that 
the functions return.
<P>
<PRE>   Microsoft Excel                   Visual Basic
   worksheet function                equivalent
   -------------------------------------------------------------------

   ABS()                             Abs function
   ATAN()                            Atn function
   CHAR()                            CHR function
   CODE()                            ASC function
   COS()                             Cos function
   DATE()                            DATESERIAL function
   ERROR.TYPE()                      ERR function
   EXACT()                           STRCOMP function
   EXP()                             Exp functin
   INDIRECT()                        No direct equivalent - use Range,
                                     Cells, Offset, or any other way of
                                     referencing cells.
   INFO()                            No direct equivalent - use the
                                     following:
                                     CURDIR function, the following
                                     Application properties (MEMORYTOTAL,
                                     MEMORYUSED, MEMORYFREE, VERSION,
                                     OPERATINGSYSTEM, CALCULATION, COUNT)
   ISBLANK()                         ISEMPTY function
   ISREF()                           TYPENAME function
   LEN()                             LEN function
   LOWER()                           LCASE function
   N()                               No equivalent (none needed)
   NA()                              No equivalent - use
                                     ActiveCell.Value = "#N/A"
   RAND()                            RND function
   RANDOMIZE()                       Randomize function
   SIN()                             Sin function
   SIGN()                            Sgn function
   SQR()                             Sqr function
   SQRT()                            Sqr function
   T()                               No equivalant (none needed)
   TAN()                             Tan function
   TODAY()                           DATE function
   TRUNC()                           FIX function
   TYPE()                            TYPENAME function
   UPPER()                           UCASE function
   VALUE()                           VAL function

</PRE></OL>NOTE: The Microsoft Excel worksheet function and the Visual Basic
equivalent operator or function are not always calculated the same way and
may give different results, even when they have the same name.
<P>
Using the Visual Basic equivalent operator or function is preferred for
increased speed and flexibility in calculations. Additionally, the Visual
Basic operator or function is available to all applications that use 
Microsoft Visual Basic for Applications.
<P>
Although it is recommended that you use the Visual Basic operators or
functions shown in the list above, there are alternative methods for using
the worksheet functions in a Visual Basic macro if necessary. As an 
example, you can use the ATAN worksheet in your Visual Basic macro using
the ExecuteExcel4Macro or Evaluate functions:
<P>
<PRE>   x = Application.ExecuteExcel4Macro("Atan(12)")

    -or-

   x = Application.Evaluate("Atan(12)")
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00c 7.00 8.00 application.worksheet<BR>
application.function XL97 XL98 XL7 XL5<BR>
Keywords          : kbprg PgmHowto<BR>
Version           : WINDOWS:5.0,5.0c,7.0,97; MACINTOSH:5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 2, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

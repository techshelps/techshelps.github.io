

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Turn Off "Break on All Errors" Option in Code </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q167855">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1997/04/30">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes a technique you can use to turn off the  Break on All Errors  option in Visual Basic for Applications code to prevent users from interrupting your err...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB4,QAAP,QAH4,QA1S,QAFV,QBV8,QAKP,QAB9,QAFK,QDN9,QBS0,QBVV,QAFF,QBWS,QAGI P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Turn Off "Break on All Errors" Option in Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q167855</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes a technique you can use to turn off the "Break on
All Errors" option in Visual Basic for Applications code to prevent users
from interrupting your error handling routines.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Even when your code contains error handling routines, if you share the
database with a user who has the "Break on All Errors" option turned on in
Microsoft Access, a run-time error causes your code to halt and open the
module containing the error. If you do not want users to handle your run-
time errors, you can create procedures that suspend the "Break on All
Errors" option while your code executes.
<P>
<P><h3>Sample Procedures to Suspend and Resume the "Break on All Errors" Option</h3>
 
<P>
You can use the following sample procedures in your own database to
temporarily suspend the "Break on All Errors" option. Note that these
procedures work whether or not the "Break on All Errors" option is set; you
can include them in your code as added protection against exposing run-time
errors:

<OL><P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Dim varOldBOAEOptions As Variant
</PRE>
<P><LI>Type the following procedures:
<P>
<P><PRE>      '-----------------------------------------------------------------
      ' Save the current setting for the "Break on All Errors" option
      ' Turn off the "Break on All Errors" option.
      '-----------------------------------------------------------------
      Public Sub SuspendBreaks()
      Select Case Application.SysCmd(acSysCmdAccessVer)
<PRE></PRE>         Case "7.0"
            varOldBOAEOptions = GetOption("Break On All Errors")
            SetOption "Break On All Errors", False
         Case "8.0"
            varOldBOAEOptions = GetOption("Error Trapping")
            SetOption "Error Trapping", 2
      End Select
      End Sub

      '-----------------------------------------------------------------
      ' Restore the "Break on All Errors" settings that were temporarily
      ' suspended by the SuspendBreaks procedure.
      '-----------------------------------------------------------------
      Public Sub ResumeBreaks()
      Select Case Application.SysCmd(acSysCmdAccessVer)
         Case "7.0"
            If Not IsEmpty(varOldBOAEOptions) Then _
               SetOption "Break On All Errors", varOldBOAEOptions
         Case "8.0"
            If Not IsEmpty(varOldBOAEOptions) Then _
               SetOption "Error Trapping", varOldBOAEOptions
      End Select
      End Sub

</PRE><P><LI>Save the module as basErrHandling.

<P><LI>When you want to ensure that the "Break on All Errors" option does not
   interrupt the execution of your code, call the SuspendBreaks procedure
   at the beginning of your code, and call the ResumeBreaks procedure at
   the end. For example:
<P>
<P><PRE>      Function MyCodeModule()
<PRE></PRE>         SuspendBreaks
         On Error GoTo MyCodeModule_Err
         ' Add your code here.
      MyCodeModule_Exit:
         ResumeBreaks
         Exit Function
      MyCodeModule_Err:
         ' Add your error handling routine here.
         Resume MyCodeModule_Exit
      End Function

</PRE></OL><h3>Example Showing Results of Different "Break on All Errors" Settings</h3>
 
<P>
The following example demonstrates what happens when your code containing
error handling routines runs with the Break on All Errors option turned on.

<OL><P><LI>Start Microsoft Access and create a new blank database called
   MyError.mdb.

<P><LI>Perform steps 1-3 in the previous section to create the procedures that
   suspend and resume the "Break on All Errors" option.

<P><LI>Create a new form not based on any table or query in Design view:
<P>
<P><PRE>      Form: frmTestErrors
      ----------------------------------------------------
      Caption: Test Error Handling
</PRE><P>
<P><PRE>      Text box:
<PRE></PRE>         Name: txtUName
      Text box:
         Name: txtPwd
      Command button:
         Name: cmdOK
         Caption: Without Turning Off Break On All Errors
         OnClick: [Event Procedure]
      Command button:
         Name: cmdOKBreakOff
         Caption: Turning Off Break On All Errors
         OnClick: [Event Procedure]
      Command button:
         Name: cmdCancel
         Caption: Cancel
         OnClick: [Event Procedure]

</PRE><P><LI>On the View menu, click Code, and then type the following procedures:
<P>
<P><PRE>      '---------------------------------------------------------------
      ' Test UserName and Password.
      ' Returns:
<PRE></PRE>      '   True if UserName and Password are valid.
      '   False if UserName and Password are invalid.
      ' Displays corresponding error message.
      '-------------------------------------------------------------
      Public Function ChkPwd(uid As String, strPwd As String)
         On Error GoTo badPwd
         Dim ws As Workspace
         Set ws = DBEngine.CreateWorkspace("TestPWD", uid, strPwd)
         MsgBox "Your password is correct, " &amp; uid
         ChkPwd = True
      exitChkPwd:
         Exit Function
      badPwd:
         MsgBox "Not the right UserName or Password, " &amp; uid &amp; _
                ", if that is your real name!"
         ChkPwd = False
         Resume exitChkPwd
      End Function

      Private Sub cmdOK_Click() ' Without "Break on All Errors" turned off.
         Call ChkPwd(Me![txtUName] &amp; "", Me![txtPwd] &amp; "")
      End Sub

      Private Sub cmdOKBreakOff_Click()
         SuspendBreaks  ' Turn off "Break on All Errors."
         Call ChkPwd(Me![txtUName] &amp; "", Me![txtPwd] &amp; "")
         ResumeBreaks   ' Reset "Break on All Errors."
      End Sub

      Private Sub cmdCancel_Click()
         DoCmd.Close
      End Sub

</PRE><P><LI>Save the frmTestErrors form and close it. On the Tools menu, click
   Options.

<P><LI>In the Options dialog box, click the Advanced tab (or the Module tab in
   version 7.0), and then click "Break on All Errors." Click OK.

<P><LI>Open the frmTestErrors form in Form view.

<P><LI>Type "User1" (without the quotation marks) in the txtUName box, and
   type "MyPassword" (without the quotation marks) in the txtPwd box.
   Click "Without Turning Off Break On All Errors," and note that you
   receive the following run-time error message, even though your code
   handles errors:
<P>
<P><PRE>      Run-time error '3029':
      Not a valid account name or password.
</PRE><P>
   Click End in response to the error message.

<P><LI>Click "Turning Off Break On All Errors." Note that your error
   handling routine produces the following message:
<P>
<P><PRE>      Not the right UserName or Password, User1, if that is your real
      name!
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about error handling, search the Help Index for "error
handling," or refer to your Microsoft Access manual "Building Applications
with Microsoft Access 97," Chapter 8, "Handling Run-Time Errors," pages 235-
254.
<P>
For more information about Break On All Errors, search the Help Index for
"GetOption method" or "SetOption method."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: BreakOnAllErrors BreakInClassModule<BR>
BreakOnUnhandledErrors<BR>
Keywords          : kbcode kbprg PgmHowTo<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Query by Form (QBF) Using Dynamic QueryDef (95/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q136062">
<META NAME="KBModify" CONTENT="1997/11/18">
<META NAME="KBCreate" CONTENT="1995/08/31">
<META NAME="Keywords" CONTENT="kbusage QryHowTo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to use a form to specify the criteria for a query that is dynamically built by a Visual Basic for Applications function. This technique is call...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBT6,QBV4,QAHP,QAPN,QAPF,QBS0,QA1S,QAB9,QAMB,QAIJ,QBWS,QA7O,QA5V,QA35,QAY5 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Query by Form (QBF) Using Dynamic QueryDef (95/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 18, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q136062</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to use a form to specify the criteria for a
query that is dynamically built by a Visual Basic for Applications
function. This technique is called query by form (QBF).
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
You can use the QBF method to specify the criteria for filtering an
existing query, but this method can become complex when you add more fields
to the form. For example, one such complication arises when you do not
enter a value in one of the form's criteria fields.
<P>
A more flexible QBF method is to use a Visual Basic function to
dynamically create the SQL statement for a query that is deleted and
recreated each time the function runs. This method avoids using an empty
criteria field as part of the query's WHERE condition.
<P>
<P><h3>Creating the Sample Visual Basic Function</h3>
 
<P>
Concatenating (joining) SQL statements in Visual Basic requires that you
"type cast" fields with special characters to instruct the Microsoft Jet
database engine what field data types you are using. The following type-
casting characters are used in this article:
<P>
<PRE>   Field Type       Type-Casting Character
   ------------------------------------------
   Text             Single quotation mark (')
   Date             Number sign (#)
   Numeric          None

</PRE>The following sample SQL statements demonstrate the use of type casting.
<P>
NOTE: In the following sample statements, an underscore (_) at the end of
a line is used as a line-continuation character. Remove the underscore
from the end of the line when re-creating these statements.
<P>
<PRE>   Text: "Select * from [Orders] where [ShipCity] = '" &amp; [Mycriteria] _
   &amp; "' ;"
   Date: "Select * from [Orders] where [OrderDate] = #"&amp; [Mycriteria] _
   &amp; "# ;"
   Numeric: "Select * from [Orders] where [EmployeeID] = "&amp; [Mycriteria] _
   &amp; ";"

</PRE>To create a sample function that uses the QBF technique to display the
records matching the specified criteria, follow these steps:

<OL><P><LI>Open the sample database Northwind.mdb and create a new, blank form
   based on the Orders table.

<P><LI>Add six text boxes to the form. Set the Name property of each text
   box as follows:
<P>
<P><PRE>      Text box 1:
<PRE></PRE>         Name: Customer ID
      Text box 2:
         Name: Ship City
      Text box 3:
         Name: Ship Country
      Text box 4:
         Name: Employee ID
      Text box 5:
         Name: Order Start Date
      Text box 6:
         Name: Order End Date

</PRE><P><LI>Add a command button to the form and set the following properties:
<P>
<P><PRE>      Name: cmdRunQuery
      Caption: Run Query
</PRE>
<P><LI>Type the following code for the command button's OnClick event
   procedure:
<P>
<P><PRE>      Private Sub cmdRunQuery_Click()
      Dim db As Database
      Dim QD As QueryDef
      Dim where As Variant
</PRE><P>
<P><PRE>      Set db = CurrentDb()
</PRE><P>
<P><PRE>      ' Delete the existing dynamic query; trap the error if the query does
      ' not exist.
      On Error Resume Next
      db.querydefs.Delete ("Dynamic_Query")
      On Error GoTo 0
</PRE><P>
<P><PRE>      ' Note the single quotation marks surrounding the text fields [Ship
      ' Country] and [CustomerID].
      ' Note that there are no type-casting characters surrounding the
      ' numeric field [EmployeeID].
</PRE><P>
<P><PRE>      where = Null
      where = where &amp; " AND [ShipCountry]= '" + Me![Ship Country] + "'"
      where = where &amp; " AND [CustomerID]= '" + Me![Customer Id] + "'"
      where = where &amp; " AND [EmployeeID]= " + Me![Employee Id]
</PRE><P>
<P><PRE>      'NOTE: In Microsoft Access 97, when you use the plus sign (+) in an
      'expression in which you are concatenating a variable of the numeric
      'data type, you must use parenthesis around the syntax, as in the
      'following example:
      '
<PRE></PRE>      '   where = where &amp; (" AND [EmployeeID]= " + Me![Employee Id])
      '
      'You must also use a conversion function to make sure that the proper
      'conversion (to either NULL or String) takes place.

      ' The following section evaluates the ShipCity criteria you enter.
      ' If the first or last character of the criteria is the wildcard
      ' character (*), then the function uses the "LIKE" operator in the
      ' SQL statement instead of "=". Also note the single quotation
      ' marks surrounding the text field [ShipCity].
      If Left(Me![Ship City],1) = "*" Or Right(Me![Ship City],1) = "*" Then
         where = where &amp; " AND [ShipCity] like '" + Me![Ship City] + "'"
      Else
         where = where &amp; " AND [ShipCity] = '" + Me![Ship City] + "'"
      End If

      ' Note the number signs (#) surrounding the date field [Order Date].
      If Not IsNull(Me![Order End Date]) Then
         where = where &amp; " AND [OrderDate] between #" + _
         Me![Order Start Date] + "# AND #" &amp; Me![Order End Date] &amp; "#"
      Else
         where = where &amp; " AND [OrderDate] &gt;= #" + Me![Order Start Date] _
         + " #"
      End If

      ' Remove the following MsgBox line if you do not want to display the
      ' SQL statement.
      ' NOTE: The Mid function is used in the following MsgBox function to
      ' remove the word AND that follows the first Where clause. If you do
      ' not use the Mid function, the SQL statement contains the word AND
      ' at the beginning of the WHERE clause, for example:
      '
      '   Select * from Orders where AND [CustomerID] = 'CACTU'

      MsgBox "Select * from Orders " &amp; (" where " + Mid(where, 6) &amp; ";")
      Set QD = db.CreateQueryDef("Dynamic_Query", _
      "Select * from orders " &amp; (" where " + Mid(where, 6) &amp; ";"))
      DoCmd.OpenQuery "Dynamic_Query"
      End Sub

</PRE><P><LI>View the form in Form view.

<P><LI>To run the query, enter the following sample criteria in the text boxes,
   and then click the command button:
<P>
<P><PRE>      Customer ID text box: CACTU
      Ship City text box: BU*
      Employee ID text box: 8
      Order Start Date text box: 1/1/94
</PRE><P>
</OL>NOTE: The method in this example has the following features:

<UL><LI>The AND operator is used to evaluate the text box criteria. For
   example, if you enter "BONAP" in the Customer ID text box and "1" in
   the Employee ID box, the resulting query displays records in which
   [CustomerID] = BONAP AND [EmployeeID] = 1.

<LI>If you enter an asterisk (*) at the beginning or end of a value in
   the Ship City text box, the asterisk is interpreted as a wildcard and
   the LIKE operator is used in the SQL statement. For example, if you
   enter "Sea*" in the Ship City text box, the resulting query displays
   records for which the ShipCity is Seattle.

<LI>If you enter a criteria in the Order Start Date text box, but not in
   the Order End Date box, the resulting query searches for everything
   after the specified start date instead of searching for a range of
   dates.

<LI>After you enter the criteria on the form and click the command
   button, the query is built and run. You can also use this function to
   print a report based on the query.

<LI>The SQL statement built for the dynamic query is displayed in
   a message box.

<LI>If you do not enter any criteria, the resulting query returns all
   records in the table.
<P>
</UL><h2>REFERENCES</h2>
 
<P>
For more information about the CreateQueryDef method, search for
"CreateQueryDef method" using the Microsoft Access 97 Help Index.
<P>
For more information about SQL, search for "SQL statements, writing and
Generating," and then "Build SQL Statements That Include Variables and
Controls" using the Microsoft Access 97 Help Index.
<P>
For more information about the QBF technique, search for "query by
form" using the Microsoft Access 97 Help Index. Or see the following
articles here in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q95931.htm">Q95931</A></B>
   TITLE     : ACC: How to Use the Query-by-Form (QBF) Technique

   ARTICLE-ID: <B><A HREF="../ACCESS/Q109334.htm">Q109334</A></B>
   TITLE     : ACC: How to Dynamically Create a Filter

   ARTICLE-ID: <B><A HREF="../ACCESS/Q117544.htm">Q117544</A></B>
   TITLE     : ACC2: Query by Form (QBF) Using Dynamic QueryDef
</PRE></OL> 
<PRE>Keywords          : kbusage QryHowTo
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 18, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

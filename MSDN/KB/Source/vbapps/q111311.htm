

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: CreateObject Function Starts Invisible Instance of Excel </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q111311">
<META NAME="KBModify" CONTENT="1998/01/16">
<META NAME="KBCreate" CONTENT="1994/02/09">
<META NAME="Keywords" CONTENT="kbprg kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you use the CreateObject function in a Visual Basic version 3.0 procedure to create a Microsoft Excel OLE Automation object, a new instance of Microsoft Excel starts, but you cannot see it.  For example, the following Visual Basic command star...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QBS0,QAIH,QAY5,QAPN,QAW6,QAB9,QAYL,QBV8,QDL9,QBXS,QBWO,QBWN,QAIJ,QBWS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: CreateObject Function Starts Invisible Instance of Excel</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 16, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q111311</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Visual Basic for Windows, version 3.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you use the CreateObject function in a Visual Basic version 3.0
procedure to create a Microsoft Excel OLE Automation object, a new
instance of Microsoft Excel starts, but you cannot see it.
<P>
For example, the following Visual Basic command starts a new instance
of Microsoft Excel, but you cannot see it, and it does not appear in
the Task List:
<P>
<PRE>   Set x = CreateObject("Excel.Application")

</PRE><h2>WORKAROUND</h2>
 
<P>
If you want to see Microsoft Excel when you use the CreateObject
function to access the application object, use the Visible property
as in the following example:
<P>
<PRE>   Sub Run_Excel
      Dim x As Object
      Set x = CreateObject("Excel.Application")
      x.Visible = true
   End Sub

</PRE><h2>MORE INFORMATION</h2>
 
<P>
When you use the CreateObject function to run Microsoft Excel, you
start a new hidden instance of Microsoft Excel. Because this new
instance uses memory and resources on your system, you should exit
the program within the same procedure that runs the instance. If you
don't exit the program in the procedure, the invisible instance runs
until you exit Microsoft Windows.
<P>
To free the memory used by the object variable assigned to the OLE
Automation object, set the variable equal to Nothing. The following
Visual Basic procedure uses the CreateObject function to start an
invisible instance of Microsoft Excel, quits the instance, and sets
the OLE Automation object variable equal to Nothing.
<P>
<PRE>   Sub Run_Excel
      ' Dimension variable x as Object type
      Dim x As Object
      ' Set x equal to Excel object
      Set x = CreateObject("Excel.Application")
      ' Make running instance of Excel visible
      x.Visible = true
      ' Insert desired Excel commands here
      ' Quit Microsoft Excel
      x.Quit
      ' Set x equal to nothing to free memory object was using
      Set x = Nothing
   End Sub

</PRE><h3>CreateObject Versus GetObject Functions</h3>
 
<P>
CreateObject and GetObject are two Visual Basic functions that you
can use to return an OLE Automation object. The CreateObject function
creates an OLE Automation object; the GetObject function retrieves an
OLE Automation object from a file. The way an application behaves
when you start it with one of these functions depends on the
application. For example, when you use the CreateObject function to
access a Microsoft Excel Application object, an invisible instance of
Microsoft Excel runs. When you use the CreateObject function to
access a Microsoft Word WordBasic object, a visible instance of
Microsoft Word runs.
<P>
Use the following list to determine the behavior of Microsoft Excel
when you use the CreateObject or GetObject function:
<P>
<PRE>Function                              Behavior
</PRE> 
<P>
<PRE>CreateObject("Excel.Application")     Always loads a new invisible instance

GetObject("", "Excel.Application")    Always loads a new visible instance

GetObject(, "Excel.Application")      Either returns an already running
                                      instance, or fails with error message
                                      "OLE Automation server cannot create
                                      object"

</PRE><h3>Microsoft Word for Windows</h3>
 
<P>
When you use the CreateObject function to access a Microsoft Word for
Windows WordBasic object, a new visible instance runs if Word for
Windows is not currently running. If you set the variable returned by
the CreateObject function equal to nothing in this case, Word for
Windows is closed. Otherwise, if Word for Windows is already running,
the CreateObject function uses the running instance. If you set the
variable returned by the CreateObject function equal to nothing in
this case, Word for Windows is not closed, because the instance was
running before you ran the procedure.
<P>
Note that in Word for Windows 95, version 7.0, an invisible instance is run
rather than a visible one.
<P>
The following Visual Basic procedure uses the CreateObject function
to access the Word for Windows WordBasic object, performs some Word
commands, and then sets the OLE Automation object variable equal to
Nothing.
<P>
<PRE>   Sub Run_Word ()
      ' Dimension variable word as Object type
      Dim word As Object
      ' Set word equal to Word for Windows object
      ' Start Word for Windows if not already running
      Set word = CreateObject("Word.Basic")
      ' Create new file
      word.FileNew
      ' Insert text in new file
      word.Insert "Some Text"
      ' Save file as TEXT.DOC
      word.FileSaveAs "text"
      ' Quit Word if it was not already running before this procedure ran
      ' Set word equal to nothing to free memory used for object variable
      Set word = Nothing
   End Sub

</PRE>NOTE: The above information applies both to Visual Basic version 3.0, and
Visual Basic for applications. However, because Microsoft Excel has an
object library, use the functions defined in that library when you access
Microsoft Excel objects in a Visual Basic, Applications Edition procedure,
rather than the GetObject or CreateObject function. Because Microsoft Word
for Windows does not have an object library, you must use the CreateObject
or GetObject function to access a Microsoft Word object in any version of
Visual Basic.
<P>
Microsoft provides examples of Visual Basic procedures for
illustration only, without warranty either expressed or implied,
including but not limited to the implied warranties of
merchantability and/or fitness for a particular purpose. This Visual
Basic procedure is provided 'as is' and Microsoft does not guarantee
that it can be used in all situations. Microsoft does not support
modifications of this procedure to suit customer requirements for a
particular purpose. Note that a line that is preceded by an
apostrophe introduces a comment in the code--comments are provided to
explain what the code is doing at a particular point in the
procedure. Note also that an underscore character (_) indicates that
code continues from one line to the next. You can type lines that
contain this character as one logical line or you can divide the
lines of code and include the line continuation character. For more
information about Visual Basic for Applications programming style,
see the "Programming Style in This Manual" section in the "Document
Conventions" section of the "Visual Basic User's Guide."
<P>
For more information on the GetObject function, query on the
following words in the Microsoft Knowledge Base:
<P>
<PRE>   ole and automation and getobject

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about the GetObject Function and the
CreateObject Function, choose the Search button in the Visual Basic
Reference and type:
<P>
<PRE>    OLE Automation
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg<BR>
KBSubcategory:
<P>

Additional query words: 7.00 5.00 officeinterop Word6 B_VBasic<BR>
Keywords          : kbprg kbprg<BR>
Version           : 5.00 5.00c 7.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 16, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Using Call Statement with Function Procedure </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114696">
<META NAME="KBModify" CONTENT="1997/07/29">
<META NAME="KBCreate" CONTENT="1994/05/10">
<META NAME="Keywords" CONTENT="kbcode kberrmsg kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In a Microsoft Visual Basic Programming System, Applications Edition, procedure, if you enter the Call statement followed by a Function procedure and the function name contains a type-declaration character, you receive the following error message: ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAB9,QAY5,QAB4,QBV8,QAIF,QBS0,QAUJ,QAPN,QAVX,QAVW,QAYL,QAUD,QAAP,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Error Using Call Statement with Function Procedure</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114696</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Programming System, Applications Edition,
   version 1.0
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In a Microsoft Visual Basic Programming System, Applications Edition,
procedure, if you enter the Call statement followed by a Function procedure
and the function name contains a type-declaration character, you receive
the following error message:
<P>
<PRE>   Expected: Identifier without type suffix or bracketed expression or .

</PRE>If you clear the Display Syntax Errors check box on the Module General tab
of the Options dialog box, or you ignore the above error message, you
receive a syntax error when you run the procedure that contains this Call
statement.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in the Microsoft products
listed at the beginning of this article. We are researching this problem
and will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>CAUSE</h2>
 
<P>
This problem occurs because when you use the Call statement to call a
Function procedure, the return value is discarded. If you call a Function
procedure as you would call a Sub procedure, using the Call statement, the
Function procedure name must follow the Sub procedure naming rules, and a
<PRE>Sub procedure name cannot contain a type-declaration character.

</PRE><h2>WORKAROUND</h2>
 
<P>
To avoid receiving this error message, or a syntax error when you run a
Function procedure, do either of the following:

<UL><LI>Do not use a type-declaration character in your function name. Instead,
   use the As keyword with the Function statement to declare the function
   return value type. The following example defines the value returned by
   the Test function as string type:
<P>
<P><PRE>      Function Test(x) as String
</PRE><P>
   -or-

<LI>Do not use the Call statement to run the function when the function name
   contains a type-declaration character.
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
A type-declaration character is a character that you can add to the end
of a variable name to indicate the data type of the variable. For
example, to declare a variable as string type, you can append the $
to the variable name as follows:
<P>
<PRE>   Name$ = "Chris"

</PRE>A function name can contain a type-declaration character; the function will
run when you call the function using the function name. For example, to
call the function Test$(), you can call the function in a procedure using
the following syntax without receiving an error message:
<P>
<PRE>   Test$

</PRE>However, when you use the Call statement to run a function, you receive the
above error message when you press ENTER at the end of the line that
contains the Call statement if the function name contains a type-
declaration character. For example, you receive the error message when you
press ENTER at the end of the following line of code:
<P>
<PRE>   Call Test$

</PRE><h2>REFERENCES</h2>
 
<P>
For a definition of the Type-Declaration Character, choose the Search
button in the Visual Basic Reference and type:
<P>
<PRE>   type-declaration character

</PRE>For more information about the Call statement, choose the Search button in
the Visual Basic Reference and type:
<P>
<PRE>   call
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: errmsg err msg<BR>
Keywords          : kbcode kberrmsg kbprg<BR>
Version           : 1.00<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

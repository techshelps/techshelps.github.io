

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Convert Between Julian Days and Dates </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162745">
<META NAME="KBModify" CONTENT="1998/03/17">
<META NAME="KBCreate" CONTENT="1997/01/27">
<META NAME="Keywords" CONTENT="kbprg kb2000">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article contains steps to create sample procedures for converting between a Julian day and a valid Microsoft Access date. You can change the Julian day format used in the ex...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QACE,QA1S,QAGJ,QDN9,QAUD,QBFH,QDNG,QAYV,QAY5,QAPF,QAB9,QAVX,QBV8,QBXT,QA5V P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Convert Between Julian Days and Dates</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 17, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162745</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article contains steps to create sample procedures for converting
between a Julian day and a valid Microsoft Access date. You can change the
Julian day format used in the examples into a format tailored to your
specific needs. Examples of conversion methods follow each sample
procedure.
<P>
For information about converting Julian days to dates in Microsoft Access
1.x and 2.0, please see the following article in the Microsoft Knowledge
Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q92816.htm">Q92816</A></B>
   TITLE     : ACC: Converting Julian Dates with Access Basic Code

</PRE>This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are many definitions of Julian days and Julian dates. The formal
definition of a Julian Date is not used in this article because of the
complex historical adoption of the Gregorian (modern) calendar. Instead, an
informal Julian day format is used and is defined as the ordinal day of a
year.
<P>
The informal Julian day is commonly used by government agencies and
contractors. The informal Julian day format used in this article is the
ordinal day of a year (for example, Julian day 032 represents February
1st, or the 32nd day of the year). Variations on informal Julian day
formats include using a preceding two-digit year (for example 96032 for
2/1/96) and separating the year with a dash (for example 96-032). Another,
less popular, Julian day format uses a one digit year (for example 6-032).
These additional formats do not uniquely identify the century or decade.
You should carefully consider the consequences when using these formats;
for example, the Julian day 00061 can be interpreted as 3/1/2000 or
3/2/1900.
<P>
The first sample function, CJulian2Date(), converts a Julian day to a date:

<OL><P><LI>Create a module and type the following line in the Declarations section
   if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>    ' *********************************************************************
    ' FUNCTION: CJulian2Date()
    '
    ' PURPOSE: Convert a Julian day to a date. The function works with
<PRE></PRE>    '          dates based on the Gregorian (modern) calendar.
    '
    ' ARGUMENTS:
    '    JulDay: The ordinal day of a year. Between 1 and 365 for all
    '            years, or between 1 and 366 for leap years.
    '
    '    YYYY: A three or four digit integer for a year that is within the
    '          range of valid Microsoft Access dates. If YYYY is omitted,
    '          then YYYY is assumed to be the year of the current system
    '          date.
    '
    ' RETURNS: A date for a valid Microsoft Access year and Julian day,
    '          or a Null value for an invalid Julian Day.
    ' *********************************************************************
    Function CJulian2Date (JulDay As Integer, Optional YYYY)
        If IsMissing(YYYY) Then YYYY = Year(Date)
        If Not IsNumeric(YYYY) Or YYYY \ 1 &lt;&gt; YYYY Or YYYY &lt; 100 Or YYYY _
        &gt; 9999 Then Exit Function
        If JulDay &gt; 0 And JulDay &lt; 366 Or JulDay = 366 And _
        YYYY Mod 4 = 0 And YYYY Mod 100 &lt;&gt; 0 Or YYYY Mod 400 = 0 Then _
             CJulian2Date = DateSerial(YYYY, 1, JulDay)
    End Function

</PRE><P><LI>To test this function, type the following line in the Debug window and
   then press ENTER:
<P>
<P><PRE>      ?CJulian2Date(32, 1996)
</PRE><P>
   Note that your system's date format for 2/1/96 is returned. If your
   system's date is in 1996 then CJulian2Date(32) will also return 2/1/96.

<P><LI>To convert a Julian date format like 96032 to a Microsoft Access date,
   type the following line in the Debug window, and then press ENTER:
<P>
<P><PRE>      ?CJulian2Date(96032 Mod 1000, 1900 + 96032 \ 1000)
</PRE><P>
   Note that your system's date format for 2/1/96 is returned. Replace 1900
   with 2000 if you are using this Julian date format for dates between
   1/1/2000 and 12/31/2999.

<P><LI>To convert a Julian date format like 96-032 to a Microsoft Access date,
   type the following line in the Debug window, and then press ENTER:
<P>
<P><PRE>      ?CJulian2Date(Right("96-032", 3), 1900 + Left("96-032", 2))
</PRE><P>
   Note that your system's date format for 2/1/96 is returned. Replace 1900
   with 2000 if you are using this Julian date format for dates between
   1/1/2000 and 12/31/2999.
<P>
</OL>The second sample function, CDate2Julian(), converts a date to a Julian
day:

<OL><P><LI>Create a module and type the following line in the Declarations section
   if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>    ' *********************************************************************
    ' FUNCTION: CDate2Julian()
    '
    ' PURPOSE: Convert a date to a Julian day. The function works with
<PRE></PRE>    '          dates based on the Gregorian (modern) calendar.
    '
    ' ARGUMENTS:
    '    MyDate: A valid Microsoft Access date.
    '
    ' RETURNS: A three digit Julian day as a string.
    ' *********************************************************************
    Function CDate2Julian(MyDate As Date) As String
        CDate2Julian = Format(MyDate - DateSerial(Year(MyDate) - 1, 12, _
        31), "000")
    End Function

</PRE><P><LI>To test this function, type the following line in the Debug window, and
   then press ENTER:
<P>
<P><PRE>      ?CDate2Julian(#3/1/1996#)
</PRE><P>
   Note that Julian day 061 is returned.

<P><LI>To convert a valid Microsoft Access date to a Julian date in a format
   like 96061 type the following line in the Debug window, and then press
   ENTER:
<P>
<P><PRE>      ?Year(#3/1/1996#) Mod 100 &amp; CDate2Julian(#3/1/1996#)
</PRE><P>
   Note that 96061 is returned.

<P><LI>To convert a valid Microsoft Access date to a Julian date in a format
   like 96-061 type the following line in the Debug window, and then press
   ENTER:
<P>
<P><PRE>      ?Year(#3/1/1996#) Mod 100 &amp; "-" &amp; CDate2Julian(#3/1/1996#)
</PRE><P>
   Note that 96-061 is returned.
</OL> 
<PRE>Keywords          : kbprg kb2000
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 17, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

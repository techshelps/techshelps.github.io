

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VBA: Scope of Variables in Visual Basic for Applications </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141693">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1995/12/21">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The scope of a variable is determined at the time the variable is declared. In Microsoft Visual Basic for Applications, the three scopes available for  variables are procedure, module, and public. The  More Information  section  of this article des...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYL,QAH4,QBVP,QBS0,QBJZ,QA01,QBWS,QAUJ,QAFF,QAB9,QBE7,QBE6,QAKD,QBFY,QACJ P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>VBA: Scope of Variables in Visual Basic for Applications</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141693</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic for Applications, versions 1.0, 5.0
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The scope of a variable is determined at the time the variable is declared.
In Microsoft Visual Basic for Applications, the three scopes available for 
variables are procedure, module, and public. The "More Information" section 
of this article describes each scope in detail.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Procedure (Local) Scope</h3>
 
<P>
A local variable with procedure scope is recognized only within the
procedure in which it is declared. A local variable can be declared with a
Dim or Static statement.
<P>
Dim:
<P>
When a local variable is declared with the Dim statement, the variable 
remains in existence only as long as the procedure in which it is declared 
is running. Usually, when the procedure is finished running, the values of 
the procedure's local variables are not preserved, and the memory allocated 
to those variables is released. The next time the procedure is executed, 
all of its local variables are reinitialized.
<P>
For example, in the following sample macros, "Example1" and "Example2," the 
variable X is declared in each of the modules. Each variable X is 
independent of the other--the variable is only recognized within its  
respective procedure.
<P>
<PRE>   Sub Example1()
      Dim X As Integer
      ' Local variable, not the same as X in Example2.
      X = 100
      MsgBox "The value of X is " &amp; X
   End Sub

   Sub Example2()
      Dim X As String
      ' Local variable, not the same as X in Example1.
      X = "Yes"
      MsgBox "The answer is " &amp; X
   End Sub

</PRE>Static:
<P>
A local variable declared with the Static statement remains in existence 
the entire time Visual Basic is running. The variable is reset when any of 
the following occur:

<UL><LI>The macro generates an untrapped run-time error.

<LI>Visual Basic is halted.

<LI>You quit Microsoft Excel.

<LI>You change the module.
<P>
</UL>For example, in the RunningTotal example, the Accumulate variable retains 
its value every time it is executed. The first time the module is run, if 
you enter the number 2, the message box will display the value "2." The 
next time the module is run, if the value 3 is entered, the message box 
will display the running total value to be 5.
<P>
<PRE>   Sub RunningTotal()
      Static Accumulate
      ' Local variable that will retain its value after the module
      ' has finished executing.
      num = Application.InputBox(prompt:="Enter a number: ", Type:=1)
      Accumulate = Accumulate + num
      MsgBox "The running total is " &amp; Accumulate
   End Sub

</PRE><h3>Module Scope</h3>
 
<P>
A variable that is recognized among all of the procedures on a module sheet
is called a "module-level" variable. A module-level variable is available
to all of the procedures in that module, but it is not available to
procedures in other modules. A module-level variable remains in existence
while Visual Basic is running until the module in which it is declared is
edited. Module-level variables can be declared with a Dim or Private
statement at the top of the module above the first procedure definition.
<P>
At the module level, there is no difference between Dim and Private. Note
that module-level variables cannot be declared within a procedure.
<P>
NOTE: If you use Private instead of Dim for module-level variables, your
code may be easier to read (that is, if you use Dim for local variables
only, and Private for module-level variables, the scope of a particular
variable will be more clear).
<P>
In the following example, two variables, A and B, are declared at the
module level. These two variables are available to any of the procedures on
the module sheet. The third variable, C, which is declared in the Example3
macro, is a local variable and is only available to that procedure.
<P>
Note that in Example4, when the macro tries to use the variable C, the
message box is empty. The message box is empty because C is a local
variable and is not available to Example4, whereas variables A and B are.
<P>
<PRE>   Dim A As Integer        ' Module-level variable.
   Private B As Integer    ' Module-level variable.

   Sub Example1()
       A = 100
       B = A + 1
   End Sub

   Sub Example2()
       MsgBox "The value of A is " &amp; A
       MsgBox "The value of B is " &amp; B
   End Sub

   Sub Example3()
        Dim C As Integer    ' Local variable.
        C = A + B
        MsgBox "The value of C is " &amp; C
   End Sub

   Sub Example4()
        MsgBox A
        ' The message box displays the value of A.
        MsgBox B
        ' The message box displays the value of B.
        MsgBox C
        ' The message box displays nothing because C was a local variable.
   End Sub

</PRE><h3>Public Scope</h3>
 
<P>
Public variables have the broadest scope of all variables. A public 
variable is recognized by every module in the active workbook. To make a 
public variable available to other workbooks, from a new workbook select 
the workbook containing the public variable in the Available References box 
of the References dialog box (from a module sheet, click References on the 
Tools menu).
<P>
A public variable, like a module-level variable, is declared at the top of
the module, above the first procedure definition. A public variable cannot
be declared within a procedure. A public variable is always declared with a
"Public" statement. A public variable may be declared in any module sheet.
<P>
It is possible for multiple module sheets to have public variables with the 
same name. To avoid confusion and possible errors, it is a good idea to use 
unique names or to precede each variable name with a module qualifier (for 
example, in a module named "Feb_Sales" you may want to precede all public 
variables with the letters "FS").
<P>
To create the macros:

<OL><P><LI>Create a new workbook and name it CDSales.xls.

<P><LI>In the CDSales.xls workbook, insert a module sheet. Name the module
   sheet CDSales.
<P>
   In Microsoft Excel 97 or Microsoft Excel 98 follow these steps to
   insert a new module sheet and name the module sheet:
<P>
   a. In the CDSales.xls workbook, point to Macro on the Tools menu, and
<P><PRE>      then click Visual Basic Editor.
</PRE><P>
   b. On the Insert menu, click Module.
<P>
   c. In Microsoft Excel 97, you can rename a module by activating the 
<P><PRE>      module, clicking to the right of "(Name)" in the Properties window 
      of the Visual Basic Editor, typing a new module name, and pressing 
      ENTER.
</PRE>
<P><LI>In the CDSales module sheet, type the following code:
<P>
<P><PRE>      Public SalesPrice As Integer
      Public UnitsSold As Integer
      Public CostPerUnit As Integer
      Private Markup As Long
</PRE><P>
<PRE>      Sub CDSales()
         Dim X as String
         SalesPrice = 12
         UnitsSold = 1000
         CostPerUnit = 5
         Markup = 1.05
         X = "yes"
         MsgBox "The Gross Profit for CD Sales is $" &amp; (SalesPrice _
            * UnitsSold) -(UnitsSold * CostPerUnit * Markup)
         ' Displays the value of 7000 as the gross profit.
      End Sub

</PRE><P><LI>Create a new workbook and name it VideoSales.xls.

<P><LI>In the VideoSales.xls workbook, insert a module sheet. Name the module
   sheet VideoSales.
<P>
   In Microsoft Excel 97 or Microsoft Excel 98 follow these steps to
   insert a new module sheet and name the module sheet:
<P>
   a. In the CDSales.xls workbook, point to Macro on the Tools menu, and
<P><PRE>      then click Visual Basic Editor.
</PRE><P>
   b. On the Insert menu, click Module.
<P>
   c. In Microsoft Excel 97, you can rename a module by activating the 
<P><PRE>      module, clicking to the right of "(Name)" in the Properties window 
      of the Visual Basic Editor, typing a new module name, and pressing 
      ENTER.
</PRE>
<P><LI>In the VideoSales module sheet, type the following code:
<P>
<P><PRE>      Public SalesPrice As Integer
      Public UnitsSold As Integer
      Public CostPerUnit As Integer
</PRE><P>
<PRE>      Sub VideoSales()
         SalesPrice = CDSales.SalesPrice * 1.05
         UnitsSold = CDSales.UnitsSold * 1.456
         CostPerUnit = CDSales.CostPerUnit * 1.75
         MsgBox "The Projected Gross Profit for video sales is $" &amp; _
            (SalesPrice * UnitsSold) - (UnitsSold * CostPerUnit)
         ' Displays the value of 5824 as the projected gross profit.
      End Sub

</PRE></OL>To Run the Sample Macros in Microsoft Excel 5.0, 7.0
 

<OL><P><LI>To Create a reference from the workbook VideoSales.xls to CDSales.xls,
   select the VideoSales module sheet in VideoSales.xls, and then click
   References on the Tools menu.

<P><LI>In the References dialog box, select the CDSales.xls check box, and
   click the OK button.

<P><LI>Run the CDSales macro and then run the VideoSales macro.
<P>
<P>
</OL><h3>To run the sample macros in Microsoft Excel 97, 98</h3>
 

<OL><P><LI>Rename the project name of the two workbooks so that they are unique
   by following these steps:
<P>
   a. In the Project Explorer pane in the Visual Basic Editor, look at the
<P><PRE>      projects that are listed. You should see entries similar to the
      following:
</PRE><P>
<PRE>            &lt;VBAProject&gt; (VideoSales.xls)
            &lt;VBAProject&gt; (CDSales.xls)
            &lt;VBAProject&gt; (Personal.xls)

      where &lt;VBAProject&gt; is the name of the project.

   b. Click the entry for VideoSales.xls.

   c. In the Properties pane, in the box to the right of "(Name)", type a 
      new, unique project name and press Enter.

      Note: Do not use a project name that you use in any other workbook.

   d. On the File menu, click Save &lt;bookname&gt;, where &lt;bookname&gt; is the 
      name of the workbook you modified.

</PRE><P><LI>To Create a reference from the workbook VideoSales.xls to CDSales.xls,
   select the VideoSales module sheet in VideoSales.xls, and then click
   References on the Tools menu.

<P><LI>In the References dialog box, select the check box of the project name 
   specified in step 1c, and then click OK.

<P><LI>Run the CDSales macro and then run the VideoSales macro.
<P>
</OL>Note that the VideoSales macro uses the public variables declared in the
CDSales module of CDSales.xls.
<P>
<P><h3>Example of Macro Failure When You Try to Access Local Variable</h3>
 
<P>
The following example tries to use the module-level variable,
CDSales.Markup or the local variable CDSales.X in the VideoSales module
sheet:
<P>
<PRE>   Sub VideoSales2()
       MsgBox CDSales.Markup
   End Sub

   Sub VideoSales3()
       MsgBox CDSales.X
   End Sub

</PRE></OL>In Microsoft Excel 5.0 or 7.0, the following error message appears when you 
run either of these procedures:
<P>
<PRE>   Member not defined

</PRE>In Microsoft Excel 97 or Microsoft Excel 98, the following error message 
appears when you run either of these procedures:
<P>
<PRE>   Compile error:
   Method or data member not found

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about scope, click the Index tab in Microsoft Excel
7.0 Help, type the following text
<P>
<PRE>   scope

</PRE>and then double-click the selected text to go to the "Understanding scope"
topic.
<P>
For more information about how long the value of a variable is retained,
click the Index tab in Microsoft Excel 7.0 Help, type the following text
<P>
<PRE>   variables, lifetime

</PRE>and then double-click the selected text to go to the "Lifetime of
variables" topic.
<P>
"Visual Basic User's Guide," version 5.0, Chapter 6, "Making Your Variables
Available Within Procedures, Modules, or Publicly"
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 7.00 5.00 5.00a 5.00c global<BR>
Keywords          : kbcode kbprg PgmOthr<BR>
Version           : WINDOWS:5.0,5.0a,5.0c,7.0; MACINTOSH:5.0,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL5: Visual Basic Procedure to Return Active Drive Letters </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q114943">
<META NAME="KBModify" CONTENT="1997/09/02">
<META NAME="KBCreate" CONTENT="1994/05/17">
<META NAME="Keywords" CONTENT="kbprg PgmApi kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel version 5.0, you can create a Visual Basic procedure that uses the Microsoft Windows API (application programming interface) Library to return the drive letters of active drives. Below is an example of Visual Basic code you can u...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAUD,QAC9,QAB9,QAH4,QBXT,QA5V,QAY5,QAIB,QBVP,QA5F,QAMA,QDL9,QBWO,QBWN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL5: Visual Basic Procedure to Return Active Drive Letters</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 2, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q114943</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel version 5.0, you can create a Visual Basic procedure
that uses the Microsoft Windows API (application programming interface)
Library to return the drive letters of active drives. Below is an example
of Visual Basic code you can use to accomplishing this task.
<P>
<P><h3>Sample Visual Basic Procedure</h3>
 
<P>
Microsoft provides examples of Visual Basic procedures for
illustration only, without warranty either expressed or implied,
including but not limited to the implied warranties of merchantability
and/or fitness for a particular purpose. This Visual Basic procedure
is provided 'as is' and Microsoft does not guarantee that it can be
used in all situations.  Microsoft does not support modifications of
this procedure to suit customer requirements for a particular purpose.
Note that a line that is preceded by an apostrophe introduces a
comment in the code--comments are provided to explain what the code is
doing at a particular point in the procedure. Note also that an
underscore character (_) indicates that code continues from one line
to the next. You can type lines that contain this character as one
logical line or you can divide the lines of code and include the line
continuation character. For more information about Visual Basic for
Applications programming style, see the "Programming Style in This
Manual" section in the "Document Conventions" section of the "Visual
Basic User's Guide."
<P>
WARNING: The Declare Function statements listed in the following
macro are very sensitive. If used incorrectly, these functions may
cause a general protection (GP) fault in Windows or cause serious
software problems.
<P>
<PRE>'The following Declare Function should be entered on one single line.
Declare Function GetDriveType Lib "KERNEL" _
    (ByVal nDrive As Integer) As Integer

'Declaration of Constants
</PRE>Const DRIVE_INVALID = 0
<P>
<PRE>' The function below returns an array of drive letters that can be
' assigned to a variant variable or used directly.

</PRE>Function UsedDrives() As Variant
<PRE>    Dim DriveNum As Integer
    Dim UsedDriveArray() As Variant
    Dim CurrentDrive As Integer
    Dim DriveCount As Integer
   'Initializes UsedDriveArray to have zero elements
    ReDim UsedDriveArray(0)
   'Initializes counter variable
    DriveCount = 0
   'Loops through all possible drives (0 = A:, 1 = B:, etc.)
    For DriveNum = 0 To 25
   'Returns DRIVE_INVALID if no drive connected to drive letter
        CurrentDrive = GetDriveType(DriveNum)
        If Not CurrentDrive = DRIVE_INVALID Then
   'Adds the drive letter to the array
            UsedDriveArray(DriveCount) = Chr$(DriveNum + 65) + ":"
            DriveCount = DriveCount + 1
   'Allocates one more array element for current active drive
            ReDim Preserve UsedDriveArray(UBound(UsedDriveArray) + 1)
        End If
    Next
    ReDim Preserve UsedDriveArray(UBound(UsedDriveArray) - 1)
   'Returns the array
    UsedDrives = UsedDriveArray
</PRE>End Function
<P>
<PRE>'The following sub will display a message box for each active drive

Sub DriveTest()
    Dim DriveArray As Variant
    DriveArray = UsedDrives()
    For x = LBound(DriveArray) To UBound(DriveArray)
        MsgBox DriveArray(x)
    Next
End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00c howto<BR>
Keywords          : kbprg PgmApi kbhowto kbprg<BR>
Version           : 5.00 5.00c<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 2, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Display Microsoft PowerPoint Slides on a Form </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q149088">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1996/03/27">
<META NAME="Keywords" CONTENT="AutoGnrl kbinterop IntpOleA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to display slides from Microsoft PowerPoint 7.0 or 97 on a form in Microsoft Access 7.0 or 97, respectively. This technique uses OLE Automation...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDKP,QBVQ,QAFF,QAPN,QAH4,QAGB,QBWS,QA1S,QAW6,QAV1,QAV0,QDN9,QAAP,QAB4,QAE1 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Display Microsoft PowerPoint Slides on a Form</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q149088</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to display slides from Microsoft PowerPoint
7.0 or 97 on a form in Microsoft Access 7.0 or 97, respectively. This
technique uses OLE Automation in Microsoft Access to open a PowerPoint
presentation and to link to the first slide. Viewing other slides is
accomplished by changing the SourceItem property, which enables you to
link to different slides.
<P>
NOTE: This OLE-linking approach is the most viable method for viewing
Microsoft PowerPoint slides on a form in Microsoft Access. It is not
possible to use Automation to run a Microsoft PowerPoint presentation
directly from an object frame control on a form.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
NOTE: You must have both Microsoft PowerPoint 7.0 or 97 and Microsoft
Access 7.0 or 97 installed on your computer in order to use this
technique. Also, you need to create a Microsoft PowerPoint presentation
(.ppt) in order to use the technique described in this article. In steps
7 and 9, replace the file name
<P>
<PRE>   C:\Msoffice\Powerpnt\Pptexample.ppt

</PRE>with the name and path of your file.
<P>
The following example creates a form with an unbound object frame
control and five command buttons for linking to a Microsoft PowerPoint
presentation (.ppt) and for navigating through its slides.
<P>
To display Microsoft PowerPoint slides on a form, follow these steps:

<OL><P><LI>Open Microsoft Access and create a new form in Design view.

<P><LI>Add the following five controls to the form:
<P>
       command button:
<PRE>          Name: insertShow
          Caption: Get Presentation
          Enabled: Yes

       command button:
          Name: frstSlide
          Caption: First Slide
          Enabled: No

       command button:
          Name: nextSlide
          Caption: Next Slide
          Enabled: No

       command button:
          Name: previousSlide
          Caption: Previous Slide
          Enabled: No

       command button:
          Name: lastSlide
          Caption: Last Slide
          Enabled: No

</PRE><P><LI>Add an unbound object frame control to the form. In the Insert Object
    box, click the Create New button, select Bitmap Image as the Object
    Type, and then click OK. In the Bitmap Image box, click "Exit &amp; Return
    to &lt;formname&gt;: Form" on the File menu. Note that the object frame
    appears as a blank space on the form.

<P><LI>Display the property sheet for the unbound object frame, and then set
    its properties as follows:
<P>
       Unbound Object Frame:
<PRE>          Name: pptFrame
          SizeMode: Zoom
          Enabled: Yes
          Locked: No

</PRE><P><LI>On the View menu, click Code to open the form module.

<P><LI>Add the following code to the General Declarations section:
<P>
       ' Initialize variables.
       Const FIRSTSLIDE = 256
       Dim pptobj As Object
       Dim slideindex As Long, slidecount As Long
<P>
    Add an error handling procedure:
<P>
<PRE>       Sub ErrHandler()

          Dim strError As String
          Dim errObj As Error
          strError = " "
          If DBEngine.Errors.Count &gt; 0 Then
             For Each errObj In DBEngine.Errors
                strError = strError &amp; Format$(errObj.Number)
                strError = strError &amp; " : " &amp; errObj.Description
                strError = strError &amp; " (" &amp; errObj.Source &amp; ") . "
                strError = strError &amp; Chr$(13) &amp; Chr$(10)
             Next
             MsgBox strError
          Else
             MsgBox "Error: " &amp; Err &amp; " " &amp; Error
          End If

       End Sub

</PRE><P><LI>Click Form in the Object list and click Load in the Procedure list,
    and then add the following code:
<P>
    NOTE: Replace the file name "C:\Msoffice\Powerpnt\Pptexample.ppt"
    with the name and path of your Power Point Presentation file.
<P>
       Private Sub Form_Load()
<PRE>          On Error GoTo Form_Load_Error
          Dim holder As Long, present As Object

          ' Start Microsoft Powerpoint and open an existing presentation.
          holder = Shell("c:\msoffice\powerpnt\powerpnt.exe")
          Set pptobj = CreateObject("PowerPoint.Application")
          Set present = pptobj.Presentations.Open _
             ("c:\msoffice\powerpnt\pptexample.ppt")

          ' Determine the number of slides in the presentation.
          slidecount = present.Slides.Count - 1 + FIRSTSLIDE

          ' Close the presentation. Use only 1 of the following lines
          'Office 97 Syntax
          pptobj.Presentations _
             ("c:\msoffice\powerpnt\pptexample.ppt").Close
          'Office 7.0 Syntax
          present.Close
          Set present = Nothing
          Exit Sub

       Form_Load_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Click Form in the Object list and click Unload in the Proclist, and
    then add the following code:
<P>
       Private Sub Form_Unload(Cancel As Integer)
       On Error GoTo Form_Unload_Error
<P>
<PRE>          ' Close Powerpoint.
          pptobj.Quit

       Exit Sub

       Form_Unload_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Click insertShow in the Object list and click Click in the Proc list,
    and then add the following code.
<P>
    NOTE: Replace the file name "C:\Msoffice\Powerpnt\Pptexample.ppt"
    with the name and path of your PowerPoint Presentation file.
<P>
       Private Sub insertShow_Click()
<PRE>          On Error GoTo insertShow_Click_Error

          ' Make object frame visible and enable "navigation" buttons.
          pptFrame.Visible = True
          frstslide.Enabled = True
          lastslide.Enabled = True
          nextslide.Enabled = True
          previousslide.Enabled = True

          ' Specify OLE Class, Type, SourceDoc, SourceItem and other
          ' properties.
          With pptFrame
             'Use only 1 of the followin lines of code
             .Class = "Microsoft Powerpoint Slide" 'Office 97 Syntax
             .Class = "powerpoint.slide.7" 'Office 7.0 syntax
             .OLETypeAllowed = acOLELinked
             .SourceDoc = "c:\msoffice\powerpnt\pptexample.ppt"
             .SourceItem = FIRSTSLIDE
             .Action = acOLECreateLink
          End With

          ' Set slide index to the first slide.
          slideindex = FIRSTSLIDE
          frstSlide.setfocus
          insertShow.enabled=false

          Exit sub

       insertShow_Click_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Click frstSlide in the Object list and click Click in the Proc list,
    and then add the following code:
<P>
       Private Sub frstSlide_Click()
<PRE>          On Error GoTo frstSlide_Click_Error

          ' Set SourceItem property to first slide and create a link.
          With pptFrame
             .SourceItem = FIRSTSLIDE
             .Action = acOLECreateLink
          End With

          slideindex = FIRSTSLIDE

          Exit Sub

       frstSlide_Click_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Click nextSlide in the Object list and click Click in the Proc list,
    and then add the following code:
<P>
       Private Sub nextSlide_Click()
<PRE>          On Error GoTo nextSlide_Click_Error

          ' Determine if current slide is last slide.
          If slideindex &lt; slidecount Then
             slideindex = slideindex + 1

             ' Set SourceItem property to next slide and create a link.
             With pptFrame
                .SourceItem = slideindex
                .Action = acOLECreateLink
             End With
          Else
             MsgBox "This is the last slide."
          End If

          Exit Sub

       nextSlide_Click_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Click previousSlide in the Object list and click Click in the Proc
    list, and then add the following code:
<P>
       Private Sub previousSlide_Click()
<PRE>          On Error GoTo previousSlide_Click_Error

          ' Determine if current slide is first slide.
          If slideindex &gt; FIRSTSLIDE Then
             slideindex = slideindex - 1

             ' Set SourceItem property to previous slide and create a link.
             With pptFrame
                .SourceItem = slideindex
                .Action = acOLECreateLink
             End With
          Else
             MsgBox "This is the first slide."
          End If

          Exit Sub

       previousSlide_Click_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Click lastSlide in the Object list and click Click in the Proc list,
    and then add the following code:
<P>
       Private Sub lastSlide_Click()
<PRE>          On Error GoTo lastSlide_Click_Error

          ' Set SourceItem property to previous slide and create a link.
          With pptFrame
             .SourceItem = slidecount
             .Action = acOLECreateLink
          End With

          slideindex = slidecount

          Exit Sub

       lastSlide_Click_Error:
          ErrHandler
          Exit Sub
       End Sub

</PRE><P><LI>Close and save the form module.

<P><LI>Switch the form to Form view, and then click the insertShow ("Get
    Presentation") button.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about using Microsoft PowerPoint for Windows 95
and Automation, please see the following article here in the Microsoft
Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q133789.htm">Q133789</A></B>
   TITLE     : WT1229: Getting Started Controlling PowerPoint
               Through OLE
</PRE></OL> 
<PRE>Keywords          : AutoGnrl kbinterop IntpOleA
Technology        : kbole
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

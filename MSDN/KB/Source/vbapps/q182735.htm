

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: How to Use the Query Before and AfterRefresh Events </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q182735">
<META NAME="KBModify" CONTENT="1998/03/19">
<META NAME="KBCreate" CONTENT="1998/03/19">
<META NAME="Keywords" CONTENT="xlquery xlvbahowto OffVBA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, you can automatically run a macro before or after updating (refreshing) worksheet query data. You can do this with the BeforeRefresh and AfterRefresh Visual Basic for Applications events. This article contains an example of how ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWS,QA01,QAH4,QBVP,QBJZ,QAPN,QAO4,QAA1,QAYY,QAXB,QBS0,QBI0,QDI2,QABI,QAGB P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: How to Use the Query Before and AfterRefresh Events</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 19, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q182735</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel, you can automatically run a macro before or after
updating (refreshing) worksheet query data. You can do this with the
BeforeRefresh and AfterRefresh Visual Basic for Applications events. This
article contains an example of how to use the two events to run a macro.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Before you can use the sample macro, retrieve data from Microsoft Query to
a Microsoft Excel worksheet. To create the sample data, follow these steps:

<OL><P><LI>On the Data menu, point to Get External Data, and then click Create
    New Query.

<P><LI>In the Choose Data Source dialog box, click &lt;New Data Source&gt;, clear
    the "Use the Query Wizard to create/edit queries" check box, and
    then click OK.

<P><LI>In the Create New Data Source dialog box, type "test" in the first
    box.

<P><LI>Click the drop-down for the second combo box, and then click
    Microsoft dBase Driver (*.dbf).

<P><LI>Click Connect.

<P><LI>In the ODBC dBase Setup dialog box, clear the Use Current Directory
    check box, and then click Select Directory.

<P><LI>In the Select Directory dialog box, locate the following folder:
<P>
       Program Files\Microsoft Office\Office
<P>
    The Customer.dbf, Employee.dbf, and Orders.dbf files should be listed
    in this folder. If they are not, run the Office Setup program and
    install them.

<P><LI>Click OK.

<P><LI>Click OK in the ODBC dBase Setup dialog box.

<P><LI>Click OK in the Create New Data Source dialog box.

<P><LI>Make sure the "test" data source is selected in the Choose Data
    Source dialog box, and then click OK.
<P>
    Microsoft Query is started and the Add Tables dialog box is displayed.

<P><LI>Click Customer.dbf, and then click Add.

<P><LI>Click Close.

<P><LI>Double-click the * listed in the Customer table.
<P>
    This step adds all the fields to the result set in the Data pane.

<P><LI>On the File menu, click Return Data to Microsoft Excel.
<P>
</OL>This creates the query table to use with the sample macro.
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE></OL>In this example you set up a Visual Basic for Applications macro that
responds to the BeforeRefresh or AfterRefresh event in a worksheet. To set
up the event handler, follow these steps:

<OL><P><LI>Switch to the worksheet that contains the data that is returned from
    Microsoft Query.

<P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>If the Project Explorer window is not visible, click Project Explorer
    on the View menu.

<P><LI>On the Insert menu, click Class Module.

<P><LI>Click in the code window for the Class Module and enter the following
    code:
<P>
      Public WithEvents qt As QueryTable
   
      Private Sub qt_BeforeRefresh(Cancel As Boolean)
   
<PRE>        ' Declare variables.
   
        Dim a As Integer
        Dim My_Prompt As String
   
         ' Initialize prompt text for message box.
         My_Prompt = "Data will be refreshed."
   
          ' Get YES or NO result from the message box
          a = MsgBox("Do you want to refresh the data now?", vbYesNoCancel)
   
          ' Check to see wheather YES or NO was selected.
          If a = vbNo Then
   
               ' Change prompt text for message box.
               My_Prompt = "Data will not be refreshed."
   
               ' Cancels the Query Refresh.
               Cancel = True
   
           End If
   
          ' Displays message box before refresh (or non-refresh) occurs.
          MsgBox My_Prompt
   
      End Sub

   NOTE: To use the AfterRefresh event you can replace the macro name
   "qt_BeforeRefresh(Cancel As Boolean)" with "qt_AfterRefresh(ByVal
   Success As Boolean)" in the above example. Also, you should change the
   message box text to an appropriate post Data Refresh message.

</PRE><P><LI>On the Insert menu, click Module.

<P><LI>Click in the Code window for the Module and enter the following code:
<P>
      Dim X As New Class1
   
<PRE>      Sub Initialize_It()
        Set X.qt = Thisworkbook.Sheets(1).QueryTables(1)
      End Sub

</PRE><P><LI>Switch to Microsoft Excel (ALT+F11).

<P><LI>Click any cell in the worksheet query data.

<P><LI>On the Tools menu, point to Macro, click Macros, and then run the
    Initialize_It macro.

<P><LI>On the Data menu, click Refresh Data.
<P>
</OL>The BeforeRefresh event should now run before the actual query data is
refreshed. If you used the AfterRefresh event, the event runs after the
actual query data has been refreshed.
<P>
NOTE: For the BeforeRefresh and AfterRefresh events to work, the
Initialize_It macro must be run anytime the workbook is opened. You may
want to use the name Auto_Open rather than Initialize_It. This will allow
the two events to automatically function as expected when you refresh the
query table data.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about using event handlers, click the Office
Assistant, type "events" (without quotation marks), click Search, and then
click to view the "Using events with Microsoft Excel objects" topic.
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Excel Help is not installed on your
computer, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office Program or
               Component
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 Event Query<BR>
Keywords          : xlquery xlvbahowto OffVBA<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 19, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

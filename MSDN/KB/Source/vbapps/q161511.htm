

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: Using AddItem Method When RowSource Is Data Bound </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q161511">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/12/26">
<META NAME="Keywords" CONTENT="kbcode kberrmsg kbprg xlvbahowto xlvbainfo">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you use the AddItem method to add an item to the list of a ListBox or ComboBox control, you may receive the following error message:     Run-time error '70':    Permission denied.  CAUSE =====  This problem occurs when both of the following co...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAHP,QBVR,QBS0,QBWS,QAH4,QBVP,QAMN,QA7O,QATX,QAOE,QAB5,QDMR,QAY2,QAMB P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: Using AddItem Method When RowSource Is Data Bound</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q161511</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you use the AddItem method to add an item to the list of a ListBox or
ComboBox control, you may receive the following error message:
<P>
<PRE>   Run-time error '70':
   Permission denied.

</PRE><h2>CAUSE</h2>
 
<P>
This problem occurs when both of the following conditions are true:

<UL><LI>You use the AddItem method to add an item to either a ListBox or
   ComboBox control.
<P>
   -and-

<LI>The ListBox or ComboBox control is data bound (the RowSource property
   is set to a range on a worksheet).
<P>
</UL><h2>RESOLUTION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
To add an item to a ListBox or ComboBox control during runtime, you can use
one of two methods, adding an item from a worksheet range, or adding an
item from a variable. Which method you use depends on how you add the item
to the list.
<P>
The examples in this article illustrate the two methods and assume you do
the following to set up a worksheet and a UserForm:

<OL><P><LI>Close and Save any open workbooks and create a new workbook.

<P><LI>Define the range A1:A3 in Sheet1 as "myrange" (without the quotation
   marks).

<P><LI>Type the following data in Sheet1:
<P>
<P><PRE>      A1: a
      A2: b
      A3: c
      A4: d
      A5: e
</PRE>
<P><LI>Start the Visual Basic Editor (press ALT+F11).

<P><LI>On the Insert menu, click UserForm.

<P><LI>Click the ListBox control in the Toolbox, and then add a ListBox to the
   UserForm.

<P><LI>If the Properties window is not visible, press F4.

<P><LI>Change the RowSource property of the ListBox control to
   "Sheet1!myrange" (without the quotation marks).

<P><LI>Add a CommandButton control to the UserForm.
<P>
</OL><h3>Adding an Item from a Worksheet Range</h3>
 
<P>
This example assumes you want to extend the range for the RowSource control
during run time. The following example macro increases the "myrange"
reference by one cell each time you click the CommandButton on the
UserForm, and updates the ListBox. To use the macro, do the following:

<OL><P><LI>Double-click the CommandButton on the UserForm to display the
   module associated with the UserForm.

<P><LI>Type the following code for the Click event of CommandButton1:
<P>
<P><PRE>      Private Sub CommandButton1_Click()
</PRE>   
<PRE>          Sheet1.Range("myrange").Resize _
              (Sheet1.Range("myrange").Rows.Count + 1, 1).Name _
              ="myrange"
   
          ListBox1.RowSource = "Sheet1!myrange"
   
      End Sub

</PRE><P><LI>Run the UserForm.
<P>
</OL>Initially, the ListBox displays only the items from A1:A3.

<OL><P><LI>Click the CommandButton once.
<P>
</OL>The ListBox displays the items from A1:A4.

<OL><P><LI>Close the UserForm.
<P>
</OL><h3>Adding an Item from a Variable</h3>
 

<OL><P><LI>Type the following code for the Click event of CommandButton1:
<P>
<P><PRE>      Private Sub CommandButton1_Click()
</PRE>   
<PRE>          Dim myarray
          Dim mystring as String
   
          'The List property returns a variant array.
          myarray = ListBox1.List
   
          'Clear the RowSource property during run time.
          'The ListBox no longer is bound to the defined name.
          ListBox1.RowSource = ""
   
          'Set the List property for the ListBox to the array.
          ListBox1.List() = myarray
   
          mystring = InputBox("Type a text string")

          'You can use the AddItem method because the ListBox is not
          'bound to the worksheet cells (referenced by the defined 
          'name).
          ListBox1.AddItem mystring
   
      End Sub
   
</PRE></OL>2. Run the UserForm.

<OL><P><LI>Click the CommandButton in the UserForm.

<P><LI>Type any text string in the InputBox and click OK.
<P>
</OL>The text you type in the InputBox is added to the ListBox.

<OL><P><LI>Close the UserForm.
<P>
</OL><h2>STATUS</h2>
 
<P>
This behavior is by design of Microsoft Excel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q161477.htm">Q161477</A></B>
   TITLE     : XL97: Error Using RemoveItem Method

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For more information about the List property, click the Index tab in Visual
Basic for Applications Help, type the following text
<P>
<PRE>   list property

</PRE>and then double-click the selected text to go to the "List Property" topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97<BR>
Keywords          : kbcode kberrmsg kbprg xlvbahowto xlvbainfo<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

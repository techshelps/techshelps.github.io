

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Parse City, State, and Zip Code into Separate Values </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q168798">
<META NAME="KBModify" CONTENT="1997/09/30">
<META NAME="KBCreate" CONTENT="1997/05/21">
<META NAME="Keywords" CONTENT="PrgOther VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article provides a procedure for parsing a single variable containing US City, State, and Zip Code information into three separate variables. The routine supports:   - Either 5- or 9-digit zip code.   - Multi-word state names (if preceded by a...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QALS,QBTQ,QAVT,QAH4,QDOG,QBS0,QATX,QDL9,QBWQ,QBWO,QBWN,QBBL,QA5B,QAZQ,QAYV P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Parse City, State, and Zip Code into Separate Values</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 30, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q168798</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Visual Basic Control Creation, Learning, Professional, and
   Enterprise Editions for Windows, version 5.0
<LI>Microsoft Visual Basic Standard, Professional, and Enterprise Editions,
   16-bit and 32-bit, for Windows, version 4.0
<LI>Microsoft Visual Basic Standard and Professional Editions for Windows,
   versions 2.0, 3.0
<LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Word 97 for Windows
<LI>Microsoft PowerPoint 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article provides a procedure for parsing a single variable containing
US City, State, and Zip Code information into three separate variables. The
routine supports:

<UL><LI>Either 5- or 9-digit zip code.

<LI>Multi-word state names (if preceded by a comma).

<LI>Any number of intermediate spaces.
<P>
</UL>Examples of supported inputs:
<P>
<PRE>   New York, New York, 99999
   New York, NY, 99999-9999
   New York, NY 99999-9999
   New York NY 99999

</PRE><h2>MORE INFORMATION</h2>
 
<P>
WARNING: ANY USE BY YOU OF THE CODE/MACRO PROVIDED IN THIS ARTICLE IS AT
YOUR OWN RISK. Microsoft provides this code/macro "as is" without warranty
of any kind, either express or implied, including but not limited to the
implied warranties of merchantability and/or fitness for a particular
purpose.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. For versions of BASIC that don't
support line-continuation characters, remove the underscore from the
end of the line and merge with the following line when re-creating this
code.
<P>
Fields are parsed in the following order if no commas are found in the
address:
<P>
<PRE>   Zip Code, State, City

</PRE>If at least one comma is present, it is presumed to be between City and
State, and the fields are parsed in a different order:
<P>
<PRE>   City, State, Zip Code

</PRE><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Enter the following code:
<P>
<P><PRE>      Function CutLastWord (ByVal S As String, Remainder As String) _
<PRE></PRE>         As String
      ' CutLastWord: returns the last word in S.
      ' Remainder: returns the rest.
      '
      ' Words are separated by spaces
      '
      Dim  I As Integer, P As Integer
        S = Trim$(S)
        P = 1
        For I = Len(S) To 1 Step -1
          If Mid$(S, I, 1) = " " Then
            P = I + 1
            Exit For
          End If
        Next I
        If P = 1 Then
          CutLastWord = S
          Remainder = ""
        Else
          CutLastWord = Mid$(S, P)
          Remainder = Trim$(Left$(S, P - 1))
        End If
      End Function

      Sub ParseCSZ (ByVal S As String, City As String, State As String, _
                    Zip As String)
      Dim P As Integer
      '
      ' Check for comma after city name
      '
        P = InStr(S, ",")
        If P &gt; 0 Then
          City = Trim$(Left$(S, P - 1))
          S = Trim$(Mid$(S, P + 1))
      '
      '   Check for comma after state
      '
          P = InStr(S, ",")
          If P &gt; 0 Then
            State = Trim$(Left$(S, P - 1))
            Zip = Trim$(Mid$(S, P + 1))
          Else                      ' No comma between state and zip
            Zip = CutLastWord(S, S)
            State = S
          End If
        Else                        ' No commas between city, state, or zip
          Zip = CutLastWord(S, S)
          State = CutLastWord(S, S)
          City = S
        End If
      '
      ' Clean up any dangling commas
      '
        If Right$(State, 1) = "," Then
          State = RTrim$(Left$(State, Len(State) - 1))
        End If
        If Right$(City, 1) = "," Then
          City = RTrim$(Left$(City, Len(City) - 1))
        End If
      End Sub

</PRE><P><LI>To test, create a form with four text boxes (txtAddress, txtCity,
   txtState, txtZip), and a command button. Add the following code:
<P>
<PRE>      Sub Command1_Click()
      Dim City As String, State As String, Zip As String
        ParseCSZ txtAddress, City, State, Zip
        txtCity = City
        txtState = State
        txtZip = Zip
      End Sub

</PRE><P><LI>Display the form, type an address into txtAddress, and click the command
   button. The other three fields should contain the parsed values.
</OL> 
<PRE>Keywords          : PrgOther VB4ALL VB4WIN vb5all vb5howto vbwin GnrlVb kbprg
Technology        : kbvba
Version           : WINDOWS:1.0 1.1 2.0 3.0 4.0 5.0 7.0 97
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 30, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

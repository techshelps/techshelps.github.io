

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL98: Using the SheetChange Event in Microsoft Excel 98 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q182701">
<META NAME="KBModify" CONTENT="1998/03/18">
<META NAME="KBCreate" CONTENT="1998/03/18">
<META NAME="Keywords" CONTENT="kbprg kbdta kbdtacode xlvbahowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT=" Article idea submitted by: Derek Phoenix   In Microsoft Excel 98 Macintosh Edition, you can use the SheetChange event in Visual Basic for Applications to automatically run a macro whenever you change the contents of any worksheet in the workbook. Th...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAFF,QBVP,QAPN,QBS0,QAO4,QBWS,QAKD,QAH4,QAUJ,QAPF,QDNZ,QAHE,QBJZ,QANY,QAKE V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL98: Using the SheetChange Event in Microsoft Excel 98</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 18, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q182701</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
Article idea submitted by: Derek Phoenix
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel 98 Macintosh Edition, you can use the SheetChange event
in Visual Basic for Applications to automatically run a macro whenever you
change the contents of any worksheet in the workbook. This article explains
how to use the SheetChange event and the SheetChange subroutine.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>How to Access the SheetChange Subroutine in the Visual Basic Editor</h3>
 
<P>
Each workbook has a single SheetChange event. To view or edit the
subroutine that uses the SheetChange event, follow these steps:

<OL><P><LI>On the Tools menu, point to Macro, and click Visual Basic Editor.

<P><LI>If the Project window is not visible, click Project Explorer on the
   View menu.
<P>
   In the list of workbooks in the Project window, a list that is similar
   to the following appears:
<P>
<P><PRE>      VBAProject (Book1)
<PRE></PRE>         Microsoft Excel Objects
            Sheet1 (Sheet1)
            Sheet2 (Sheet2)
            Sheet3 (Sheet3)
            ThisWorkbook

</PRE><P><LI>Double-click ThisWorkbook.

<P><LI>In the Code window, click Workbook in the Object list. Then, click
   SheetChange in the Procedure list.
<P>
</OL>A subroutine that is similar to the following appears:
<P>
<PRE>   Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As _
       Excel.Range)

       '&lt;code goes here&gt;

   End Sub

</PRE></OL>This is the SheetChange subroutine for the active workbook. Whenever the
SheetChange event occurs, this subroutine runs automatically.
<P>
NOTE: The first line of the subroutine (Private Sub... Excel.Range) should
be entered on a single line without an underscore (_) character.
<P>
<P><h3>What Are "Sh" and "Target"?</h3>
 
<P>
The SheetChange subroutine accepts two arguments. By default, these
arguments are Sh and Target.

<UL><LI>Sh represents the name of the worksheet that is changed. It signals the
   SheetChange subroutine to run. You can use this argument to determine
   the worksheet name, for example:
<P>
<P><PRE>      xWorksheetName = Sh.Name
</PRE>
<LI>Target represents the range of cells (or a single cell) that is changed.
   It signals the SheetChange subroutine to run. You can use this argument
   to determine the range of cells that changed, for example:
<P>
<P><PRE>      xChangedRange = Target.Address
</PRE><P>
</UL>Note that these arguments may be named differently; for example, you can
use SheetName and ChangedRange instead of Sh and Target. However, do not
completely remove the arguments from the subroutine. If you do, you may
receive the following error message:
<P>
<PRE>   Compile error:
   Event procedure does not match description of event having the same
   name

</PRE><h3>Using the SheetChange Subroutine</h3>
 
<P>
The SheetChange subroutine works like any other Visual Basic for
Applications subroutine in Microsoft Excel. You can use the Sh and Target
arguments to determine the worksheet and range of cells that changed, or to
determine the value of the changed cells. You can use these values to
perform other actions.
<P>
For example, the following subroutine opens a workbook when you type the
name into a cell in a worksheet in the active workbook:
<P>
<PRE>   Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As _
       Excel.Range)

       ' Substitute the name of your hard drive for "Macintosh HD".
       Workbooks.Open Filename:="Macintosh HD:Desktop Folder" &amp; _
                                 Target.Value

   End Sub

</PRE>Because Target represents the changed cell, Target.Value returns the value
in that cell. If the workbook for the name you typed exists in the My
Documents folder on drive C, it is opened.
<P>
This example subroutine only accepts values that are less than or equal to
100:
<P>
<PRE>   Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As _
       Excel.Range)

       If Target.Value &gt; 100 Then
           MsgBox "This value is too high! Try again."
           Target.Clear
           Target.Select
       End If

   End Sub

</PRE>If you type a value that is greater than 100 in a cell in the workbook, a
message box appears and the value is removed.
<P>
The following example subroutine runs another macro if you type a value in
cell A1 of Sheet1:
<P>
<PRE>   Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As _
       Excel.Range)

       If Sh.Name = "Sheet1" And Target.Address = "$A$1" Then
           RunOtherSub    ' This is the name of the macro to run.
       End If

   End Sub

   Sub RunOtherSub()
       MsgBox "You typed a value in Sheet1!$A$1."
   End Sub

</PRE>If any other cell in the workbook is changed, the subroutine does nothing.
<P>
For more information about the SheetChange event, click the Office
Assistant in the Visual Basic Editor, type "sheetchange," click Search, and
then click to view "SheetChange Event."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Help is not installed on your computer,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q179216.htm">Q179216</A></B>
   TITLE     : OFF98: How to Use the Microsoft Office Installer Program
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL98<BR>
Keywords          : kbprg kbdta kbdtacode xlvbahowto<BR>
Version           : MACINTOSH:98<BR>
Platform          : MACINTOSH<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 18, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

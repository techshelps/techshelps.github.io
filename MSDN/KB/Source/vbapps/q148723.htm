

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL:Can't Use PrintOut Method When Custom Dialog Box Is Visible </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q148723">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/03/20">
<META NAME="Keywords" CONTENT="kbcode kbprg kbprint xlprint PgmOthr kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel, you cannot use the PrintOut or the PrintPreview method  (to print a sheet or to view it in print preview) when a custom (Microsoft  Excel version 5.0 or 7.0) dialog box is visible. If you try to use the  PrintOut or the PrintPre...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAH4,QAFF,QA01,QAOX,QAPN,QBWS,QANX,QBJZ,QBXS,QBS0,QAK3,QAB9,QBXT,QA5V P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL:Can't Use PrintOut Method When Custom Dialog Box Is Visible</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q148723</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



<P><h3> </h3>
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel for Windows, version 5.0
<LI>Microsoft Excel for the Macintosh, version 5.0
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft Excel, you cannot use the PrintOut or the PrintPreview method 
(to print a sheet or to view it in print preview) when a custom (Microsoft 
Excel version 5.0 or 7.0) dialog box is visible. If you try to use the 
PrintOut or the PrintPreview method while a custom (Microsoft Excel version 
5.0 or 7.0) dialog box is visible, you receive one of the following error 
messages:
<P>
<PRE>   PrintOut Method of Worksheet class Failed

   -or-

   Run-time Error '1004':
   PrintOut Method of Sheets Class Failed

</PRE><h2>CAUSE</h2>
 
<P>
This problem occurs because of the way in which Microsoft Visual Basic for 
Applications code and custom dialog boxes interact with Microsoft Excel. 
For example, to use the PrintOut method to send a document called
"Sheet1" to your printer, you would normally use the follow command:
<P>
<PRE>   Worksheets("Sheet1").PrintOut

</PRE>However, when a custom (Microsoft Excel version 5.0 or 7.0) dialog box is 
visible on the screen, you receive one of the error messages mentioned in 
the "Symptoms" section of this article.
<P>
<P><h2>WORKAROUNDS</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>To work around this problem, use any of the following methods.
<P>
<P><h3>Method 1 (Excel 97 for Windows and Excel 98 Macintosh Edition Only)</h3>
 
<P>
Use a UserForm instead of a custom (Microsoft Excel version 5.0 or 7.0)
dialog sheet. For example, do the following:

<OL><P><LI>In a new workbook type "hello" (without the quotation marks) in
    cell A1 of Sheet1, and then start the Visual Basic Editor.

<P><LI>On the Insert menu, click UserForm.

<P><LI>Add a command button to the UserForm.

<P><LI>On the View menu, click Code to display the module sheet for the
    UserForm.
<P>
    On the UserForm1 (Code) module, you see the following code displayed:
<P>
       Private Sub CommandButton1_Click()
<P>
       End Sub

<P><LI>Modify this code to read:
<P>
       Private Sub CommandButton1_Click()
<P>
<PRE>          my_print_macro

       End Sub

</PRE><P><LI>On the Insert menu, click Module.
<P>
    This will insert a basic module sheet into your project.

<P><LI>On this module sheet, type the following code:
<P>
<PRE>       Sub Show_Form()

          UserForm1.Show                ' This displays the UserForm.

       End Sub

       '---------------------

       Sub my_print_macro()

          Sheets("sheet1").PrintOut     ' This prints Sheet1.

       End Sub

</PRE><P><LI>Run the Show_Form macro.
<P>
    The UserForm you created appears.

<P><LI>Click the command button on the UserForm.
<P>
    Sheet1 of your workbook prints.

<P><LI>Dismiss the UserForm.
<P>
</OL><h3>Method 2</h3>
 
<P>
You can use a method called tunneling to remove the custom (Microsoft Excel 
version 5.0 or 7.0) dialog box, perform your print action, and then 
redisplay the dialog box.
<P>
To use the PrintOut method, you must first hide or dismiss all custom
(Microsoft Excel version 5.0 or 7.0) dialog boxes.
<P>
The following Visual Basic code example uses tunneling to display a custom 
(Microsoft Excel version 5.0 or 7.0) dialog box, to hide the dialog box 
before it prints a worksheet, and to then redisplay the dialog box when the 
print operation is complete.
<P>
This example assumes that you have a (Microsoft Excel version 5.0 or
7.0) dialog sheet called "Dialog1" (without the quotation marks) and a
worksheet called "Sheet1" (without the quotation marks) that are located
in the same workbook, and that you have a macro module with the following 
macro. The dialog sheet must contain two buttons: DoneButton and 
PrintButton.
<P>
Before you run the macro, you need to assign the appropriate macros to
the DoneButton and the PrintButton. To do this, follow these steps:

<OL><P><LI>Activate the dialog sheet.

<P><LI>Select the DoneButton.

<P><LI>On the Tools menu, click Assign Macro. (In Microsoft Excel 97, right-
   click the DoneButton, and then click Assign Macro on the shortcut menu.)

<P><LI>In the Assign Macro dialog box, click the DoneButton_Click macro, and
   then click OK.
<P>
</OL>To assign the PrintButton_Click macro to the PrintButton, repeat steps 1
through 4 above and substitute PrintButton for DoneButton and
PrintButton_Click for DoneButton_Click.
<P>
To run the following example, position the insertion point in the line
that reads "Sub MainMacro()," and then press the F5 key.
<P>
<PRE>   '-----------------------------------------------------------------------
   Option Explicit
   Public DoneFlag As Integer, PrintFlag As Integer

   Sub MainMacro()
      PrintFlag = 0                         ' Initialize PrintFlag.
      DoneFlag = 0                          ' Initialize DoneFlag.
      DialogSheets("Dialog1").Show          ' Show it initially.

      ' While the DoneFlag does not equal 1 (which will only occur if the
      ' DoneButton is clicked), continue to loop through the Sub procedure.

      Do
         If PrintFlag = 1 Then              ' If the PrintFlag is set, then
            Worksheets("Sheet1"). PrintOut  ' print Sheet1 and
            PrintFlag = 0                   ' reset the PrintFlag.
            DialogSheets("Dialog1").Show    ' Reshow it only after
         End If                             ' having called the procedure
      Loop Until DoneFlag = 1               ' that hid it.
   End Sub

   Sub DoneButton_Click()
      DoneFlag = 1                          ' Set the DoneFlag.
      DialogSheets("Dialog1").Hide          ' Hide the dialog box.
   End Sub

   Sub PrintButton_Click()
      DoneFlag = 0                          ' Ensure DoneFlag set to 0.
      PrintFlag = 1                         ' Set the PrintFlag.
      DialogSheets("Dialog1").Hide          ' Hide the dialog box.
   End Sub
   '-----------------------------------------------------------------------

</PRE></OL>When you activate the DoneButton or the PrintButton button, the appropriate 
<PRE>Sub procedure (DoneButton_Click or PrintButton_Click) runs. Within each Sub 
</PRE>procedure, the Dialog1 dialog box is hidden and a flag (DoneFlag or 
PrintFlag) is set to 1. The MainMacro Sub procedure then resumes and loops 
back; if PrintFlag equals 1, the macro prints the worksheet and redisplays 
the dialog box; if DoneFlag equals 1, the macro exits the loop and ends the 
macro.
<P>
In this way, the PrintOut method is only executed if the Dialog1 dialog box 
is not visible on the screen, and the dialog box will reappear until you 
exit the loop by activating the DoneButton.
<P>
<P><h3>Method 3</h3>
 
<P>
This method provides another way to work around the behavior. Use the 
OnTime method to allow the macro that contains the 
DialogSheets("sheetname").Show to complete before you run the PrintOut
method.
<P>
The following sample procedures illustrate this workaround. When you use
this code, the print button dismisses the dialog box, and one second
later, the print macro runs. One second after the sheet prints, the dialog 
box appears again.
<P>
Note the following regarding the sample procedures:

<UL><LI>Sub ShowTheDialog can be much longer, but the .Show line should be
   the last line of the Sub procedure.

<LI>Sub PrintTheSheet is a macro attached to a button that has been set
   to have the "Dismiss" property.

<LI>Sub BackgroundPrint contains the actual PrintOut method.

<LI>Sub ShowTheDialog is an optional macro to bring the desired dialog box    
</UL>back.
<P>
<PRE>      '--------------------------------------------------------------------
      Sub ShowTheDialog()
         ' This portion of the macro could be much larger,
         ' setting variables and conditions prior to displaying the dialog
         ' box.
         ' The last line should be this:
         DialogSheets("Dialog1").Show
      End Sub

      Sub PrintTheSheet()
         ' This macro should be attached to a button with the Dismiss 
         ' property set and should contain only this line:
         Application.OnTime Now + TimeValue("00:00:01"), "BackgroundPrint"
      End Sub

      Sub BackgroundPrint()
         ' Like ShowTheDialog, this macro can be much larger,
         ' selecting areas, defining print ranges, or whatever before
         ' printing.
         ActiveSheet.PrintOut
         ' This line is optional; use it as the last line if you want the
         ' dialog box to reappear.
         Application.OnTime Now + TimeValue("00:00:01"), "RedisplayDialog"
      End Sub

      Sub RedisplayDialog()
         ' This optional macro recalls the dialog box without resetting any
         ' variable, and should contain only this line:
         DialogSheets("Dialog1").Show
      End Sub
      '--------------------------------------------------------------------

</PRE><h3>Method 4</h3>
 
<P>
This workaround checks to see if the Print button in the dialog box was
clicked. If the button was clicked, the macro prints after the dialog
box is dismissed.

<OL><P><LI>Rename a button on your (Microsoft Excel version 5.0 or 7.0) dialog
   sheet to "print" (without the quotation marks). 
<P>
   NOTE: Use the Name box on the Formula Bar to rename the button.

<P><LI>Assign the "Set_Flag" macro to this button.

<P><LI>Enter the following macros into a new module sheet in your workbook.
<P>
<P><PRE>      '-----------------------------------------------------------------
      ' Makes the variables case insensitive.
      Option Compare Text
</PRE><P>
<P><PRE>      ' Dimension a Public variable to determine which button is
      ' clicked in the dialog box.
      Dim Flag As String
</PRE><P>
<PRE>      Sub Show_Dialog()

         ' Sets Flag = to nothing.
         Flag = ""

         ' Shows Main dialog box.
         Do While DialogSheets("Main").Show

         ' Checks to see which button was clicked.
         Select Case Flag

         ' If clicked "Print," run Print_Macro.
         Case "Print"
             Print_Macro

         ' After Print_Macro runs, exit the routine.
         ' Ignore this line if you want to have
         ' the Main dialog box pop up again.
         Exit Sub

         ' If clicked "Other," run Other_Macro.
         Case "Other"
             Other_Macro

         ' If clicked any other button, exit the macro.
         Case Else
            Exit Sub
         End Select
         Loop
      End Sub

      Sub Set_Flag()

         ' Sets the variable Flag to the button that calls this macro.
         Flag = Application.Caller
      End Sub

      Sub Print_Macro()

         ' Print macro goes here.
         ' This code can be placed under Case "Print" above without
         ' having this Sub procedure.
         MsgBox "Your Print Macro here"
      End Sub

      Sub Other_Macro()

         ' Shows secondary dialog.
         ' This code can be placed under Case "Other" above without
         ' having this Sub procedure.
         DialogSheets("Other").Show
      End Sub
      '--------------------------------------------------------------------

</PRE><P><LI>Run the "Show_Dialog" macro.

<P><LI>Click the button in your custom dialog box that was assigned to the
   "Set_Flag" macro.

<P><LI>Click OK in your dialog box to dismiss the dialog box.
<P>
   The "Print_Macro" runs and "Your Print Macro here" message appears in a 
   message box.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the PrintOut method, click the Index tab in
Microsoft Excel Help, type the following text
<P>
<PRE>   printout

</PRE></OL>and then double-click the selected text to go to the "PrintOut Method"
topic.
<P>
For more information about the PrintPreview method, click the Index tab
in Microsoft Excel Help, type the following text
<P>
<PRE>   printpreview

</PRE>and then double-click the selected text to go to the "PrintPreview
Method" topic.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 8.00 xl97user fail<BR>
fails printing runtime run time chart<BR>
Keywords          : kbcode kbprg kbprint xlprint PgmOthr kbfaq<BR>
Version           : WINDOWS: 5.0, 7.0, 97; MACINTOSH: 5.0, 98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbprb<BR>
Solution Type     : kbworkaround<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Form and Report Modules Are Public by Default (95/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140464">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1995/11/30">
<META NAME="Keywords" CONTENT="kbprg MdlGnrl">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  Microsoft Access has set the scope of procedures in form and report modules to be as consistent with object-oriented programming as possible. Variables in Microsoft Access class ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QA1S,QAB9,QDN9,QBV8,QAY5,QBS0,QBJZ,QA01,QAPN,QAI2,QAKE,QAYL,QBWS,QA28 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Form and Report Modules Are Public by Default (95/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140464</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
Microsoft Access has set the scope of procedures in form and report modules
to be as consistent with object-oriented programming as possible. Variables
in Microsoft Access class modules can be declared public, in order to be
available to other objects in a database. You can refer to a form using a
pre-declared identifier without the form having to be loaded into the Forms
collection. This article shows examples of using pre-declared identifiers
to refer to objects in a class module.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following example demonstrates the scope of a function and a variable
in a form module:

<OL><P><LI>Create a new database called ScopeTest.

<P><LI>Create the following new form not based on any table or query and name
   it Form1. Add the following command button to the form:
<P>
<P><PRE>      Command button
      --------------
      Name: Command0
      Caption: Form1_SayHi
      OnClick: =Form1_SayHi()
</PRE>
<P><LI>On the View menu, click Code to display the form's module. Type the
   following line in the module's Declarations section:
<P>
<P><PRE>      Public Form1Var as string
</PRE>
<P><LI>Type the following function:
<P>
<P><PRE>      Function Form1_SayHi()
<PRE></PRE>         Form1Var = "Hi!"
         MsgBox Form1Var
      End Function

</PRE><P><LI>Create the following new form, not based on any table or query, and call
   it Form2. Place the following command button on the form:
<P>
<P><PRE>      Command button:
<PRE></PRE>         Name: Command0
         Caption: Form1_SayHi
         OnClick: [Event Procedure]

      Enter the following code in the event procedure for the OnClick
      property:

        [Form_Form1].Form1_SayHi

      Create another command button on the Form2 form:

         Name: Command1
         Caption: Form2_ShowVar
         OnClick: =Form2_ShowVar()

</PRE><P><LI>On the View menu, click Code to display the form's module. Type the
   following function in the module:
<P>
<P><PRE>      Function Form2_ShowVar()
<PRE></PRE>         MsgBox Form_Form1.Form1Var
      End Function

</PRE><P><LI>Close the module. Close form Form2.

<P><LI>Open form Form1 in Form view. Click the command button on Form1. Note
   that a message box with the text "Hi!" appears. This works because the
   function is in scope in Form1. Close form Form1.

<P><LI>Open form Form2. Click the command buttons on Form2. Note that the same
   message box appears because the function and the variable are both still
   in scope for Form2. Note also that Form1 does not have to be open in
   order for these references to work.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about scope, search the Help Index for "scoping
levels," or ask the Microsoft Access 97 Office Assistant.
<P>
For more information about class modules, search the Help Index for "class
modules," or ask the Microsoft Access 97 Office Assistant.
 
<PRE>Keywords          : kbprg MdlGnrl
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

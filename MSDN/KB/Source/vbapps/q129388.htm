

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: How Null String Pointers Behave in Visual Basic 4.0 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129388">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1995/04/25">
<META NAME="Keywords" CONTENT="APrg APrgOther VB4ALL VB4WIN vbwin GnrlVb kbprg">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Visual Basic version 4.0 recognizes two very different kinds of strings that look the same but act differently. One is a Null pointer string, the other is an empty string. You might code them in a public module as follows:     Public sNull As Strin...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QATX,QAH4,QAO3,QAO2,QAI4,QAJQ,QA5F,QAMA,QAH7,QAH6,QAD7,QDIJ,QAGB,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: How Null String Pointers Behave in Visual Basic 4.0</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129388</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic version 4.0 recognizes two very different kinds of strings
that look the same but act differently. One is a Null pointer string, the
other is an empty string. You might code them in a public module as
follows:
<P>
<PRE>   Public sNull As String
   Public Const sEmpty = ""

</PRE>If you look at these two strings in the Watch window, they look exactly the
same; both displayed as "". You can use them in almost the same contexts,
but internally they are very different.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Internally, sNull is a null pointer. It does not point to any memory
location and has a value of zero. In C, you would code it as:
<P>
<PRE>   const char *sNull = NULL;

</PRE>Internally, sEmpty is a pointer to an empty string. It is a valid pointer
to some memory location. In C, you would code it as:
<P>
<PRE>   const char sEmpty[] = "";

</PRE>All Visual Basic version 4.0 variables are set to zero (0) until
initialized. In previous versions of Visual Basic, uninitialized
variable-length strings were automatically set to an empty string ("").
Therefore, for compatibility with previous versions, you might think that
you must initialize string variables to empty strings. However, Visual
Basic version 4.0 strings are in the BSTR format where a null pointer is
defined to behave exactly as an empty string does. Therefore, in Visual
Basic version 4.0, you can leave the initial zero value of an uninitialized
strings alone because it will behave as if it were an empty string.
<P>
This means that sNull can now be passed to any Windows API function that
takes a Null pointer. This is something that was not possible in previous
versions of Visual Basic. For example, it can be passed to FindWindow,
which gets the handle of a window, given either its class name or its
title, or both. However for this to work, sNull must be passed ByVal.
<P>
In general, for FindWindow (or any other Windows API) to work, the Declare
statement must be written to pass the string ByVal As String or ByVal As
Any. If the string is passed by reference, a pointer to a BSTR would then
be passed, which is nothing but a pointer to a pointer to char. This will
not work as Windows APIs expect strings that are pointers to char.
<P>
NOTE: In Visual Basic version 4.0, sNull might also be expected to be
equivalent to:
<P>
<PRE>   Public Const sNull As String = 0&amp;

</PRE>However, Visual Basic does automatic numeric conversion on this and
converts it to zero (0), which is neither an empty string nor a null string
pointer.
<P>
<P><h3>Step-by-Step Example</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add the following code to the General Declarations section of Form1:
<P>
<P><PRE>      Const sEmpty = ""
      Dim sNull As String
</PRE><P>
<P><PRE>      Private Declare Function FindWindow Lib "user32" Alias _
<PRE></PRE>         "FindWindowA" (ByVal lpClassName As Any, ByVal _
         lpWindowName As Any) As Long

</PRE><P><LI>In the Form_Click event for Form1, add the following code:
<P>
<P><PRE>      Shell "Calc.exe", 1
      DoEvents
      x&amp; = FindWindow(sNull, "Calculator")
      'x&amp; = FindWindow(sEmpty, "Calculator")
      Debug.Print x&amp;
</PRE>
<P><LI>Press the F5 key to run the program. Click Form1, and view the Debug
   Window. A non-zero value will be printed. This is the handle of the
   Calculator program's Window.

<P><LI>As an experiment, change the following line from executed code into a
   comment:
<P>
<P><PRE>      x&amp; = FindWindow(sNull, "Calculator")
</PRE><P>
   And change the following line from a comment into executed code:
<P>
<P><PRE>      'x&amp; = FindWindow(sEmpty, "Calculator")
</PRE><P>
   Then run the program again. You will see a value of zero (0) printed in
   the Debug Window, indicating that FindWindow failed. This happens
   because sEmpty is not a null string pointer.
</OL> 
<PRE>Keywords          : APrg APrgOther VB4ALL VB4WIN vbwin GnrlVb kbprg
Technology        : kbvba
Version           : WINDOWS:4.0
Platform          : WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

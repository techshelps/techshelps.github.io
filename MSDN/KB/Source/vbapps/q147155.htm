

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Sample Function to Retrieve File Version Info (95/97) </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q147155">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1996/02/20">
<META NAME="Keywords" CONTENT="kbprg PgmApi PgmHowTo PgmFilM">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article contains a sample user-defined Visual Basic for Applications function that you can use to check the file version information stored within most files.  This art...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAY5,QA1S,QAB9,QBE7,QBE6,QAH4,QBV8,QDN9,QA2S,QAPF,QBT6,QBV4,QABH,QABI P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Sample Function to Retrieve File Version Info (95/97)</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q147155</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article contains a sample user-defined Visual Basic for Applications
function that you can use to check the file version information stored
within most files.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Most files used by Windows-based applications contain a version stamp. You
can check this version stamp by using Windows API calls within Visual Basic
for Applications.
<P>
The following example demonstrates a sample user-defined function that you
can use to check the version number (if available) of a file.
<P>
You may have some Microsoft Windows API functions defined in an existing
Microsoft Access library; therefore, your declarations may be duplicates.
If you receive a duplicate procedure name error message, remove or comment
out the declarations statement in your code.

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create a new module and add the following code to the Declarations
   section:
<P>
<P><PRE>      Type FileInfo
<PRE></PRE>         wLength            As Integer
         wValueLength       As Integer
         szKey              As String * 16
         dwSignature        As Long
         dwStrucVersion     As Long
         dwFileVersionMS    As Long
         dwFileVersionLS    As Long
      End Type

      ' NOTE: The following Declare statements are case sensitive.

      Declare Function GetFileVersionInfo&amp; Lib "Version" _
           Alias "GetFileVersionInfoA" (ByVal FileName$, _
           ByVal dwHandle&amp;, ByVal cbBuff&amp;, ByVal lpvData$)
      Declare Function GetFileVersionInfoSize&amp; Lib "Version" Alias _
           "GetFileVersionInfoSizeA" (ByVal FileName$, dwHandle&amp;)
      Declare Sub hmemcpy Lib "Kernel32" Alias "RtlMoveMemory" _
           (hpvDest As Any, hpvSource As Any, ByVal cbBytes&amp;)

</PRE><P><LI>Add the following two functions to the module:
<P>
<P><PRE>      Function LOWORD(x As Long) As Integer
<PRE></PRE>         LOWORD = x And &amp;HFFFF&amp;
         ' Low 16 bits contain Minor revision number.
      End Function

      Function HIWORD(x As Long) As Integer
         HIWORD = x \ &amp;HFFFF&amp;
         ' High 16 bits contain Major revision number.
      End Function

</PRE><P><LI>Save the module and create a new form.

<P><LI>Add a text box to the form and set its Name property to FName.

<P><LI>Add a command button to the form, and add the following code to the
   command button's OnClick event procedure:
<P>
<P><PRE>      Dim x As FileInfo
      Dim FileVer As String
      Dim FileName As String
      Dim dwHandle&amp;, BufSize&amp;, lpvData$, R&amp;
</PRE><P>
<P><PRE>      '*** Get Version Information If Available ****
      FileVer = ""
      FileName = Me![FName]
      BufSize&amp; = GetFileVersionInfoSize(FileName, dwHandle&amp;)
      If BufSize&amp; = 0 Then
<PRE></PRE>         MsgBox "Invalid File Name or no Version information available"
         Exit Sub
      End If
      lpvData$ = Space$(BufSize&amp;)
      R&amp; = GetFileVersionInfo(FileName, dwHandle&amp;, BufSize&amp;, lpvData$)
      hmemcpy x, ByVal lpvData$, Len(x)

      '**** Parse File Version Number ****
      FileVer = Trim$(Str$(HIWORD(x.dwFileVersionMS))) + "."
      FileVer = FileVer + Trim$(Str$(LOWORD(x.dwFileVersionMS))) + "."
      FileVer = FileVer + Trim$(Str$(HIWORD(x.dwFileVersionLS))) + "."
      FileVer = FileVer + Trim$(Str$(LOWORD(x.dwFileVersionLS)))

      MsgBox FileVer, 64, "Version of " &amp; FileName

</PRE><P><LI>To use the function, view the form in Form view and type a valid path
   and file name in the Fname text box. The following lines are examples of
   valid paths and file names:
<P>
<P><PRE>      c:\windows\system\user32.dll
      c:\msoffice\access\msaccess.exe
</PRE>
<P><LI>Click the command button to see the version displayed in a message box.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about declaring APIs, search the Help Index for
"Declare Statement," or ask the Microsoft Access 97 Office Assistant.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: api file<BR>
Keywords          : kbprg PgmApi PgmHowTo PgmFilM<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

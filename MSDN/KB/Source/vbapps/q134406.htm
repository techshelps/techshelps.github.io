

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Custom Function to Transpose Nonadjacent Range </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q134406">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1995/08/07">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Visual Basic for Applications, you can create a custom  function that will turn a nonadjacent selection of cells into an array.  This is beneficial with many of the built-in Microsoft Excel functions that  require a single range or an ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAG8,QAB9,QAYL,QAY5,QAY2,QAUD,QBS0,QBV8,QAWH,QDMR,QA4Q,QDL9,QBWQ,QBWO P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Custom Function to Transpose Nonadjacent Range</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q134406</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows 95, version 7.0
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Visual Basic for Applications, you can create a custom 
function that will turn a nonadjacent selection of cells into an array. 
This is beneficial with many of the built-in Microsoft Excel functions that 
require a single range or an array as input and the data on the worksheet 
is not contained in a contiguous range.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>This function takes any contiguous range of cells as its arguments.
Nonadjacent ranges are separated by commas.
<P>
<P><h3>Sample Visual Basic Procedure</h3>
 
<P>
<PRE>   Function MakeArray(ParamArray CellAddress()) As Variant

      ' Declaration of function variables.
      Dim Temp As Variant
      Dim TheArray() As Variant
      Dim Count As Integer, Ver as Integer
      Dim W As Integer, X As Integer, Y As Integer, Z As Integer

      ' Initialize the Count variable.
      Count = 1
      ' Set the variable Ver = 0 if the version of Microsoft Excel is
      ' greater than 8 (8 is Microsoft Excel 97 for Windows).
      If Left(Application.Version, Len(Application.Version) - 1) &gt;= 8 Then
         Ver = 0
      Else
         Ver = 1
      End If
      ' Set variable X from Ver to the total number of arguments in
      ' the CellAddress array.
      For X = Ver To UBound(CellAddress, 1)
         ' Temp equals the first element of the CellAddress array.
         Set Temp = CellAddress(X)

         ' Test Temp to see whether it is an array.
         If IsArray(Temp) Then

            ' If Temp is an array, set Y from 1 to the total number
            ' arguments in the Temp array's first dimension.
            For Y = 1 To UBound(Temp.Value, 1)

               ' If Temp is an array, set Z from 1 to the total number
               ' arguments in the Temp array's second dimension.
               For Z = 1 To UBound(Temp.Value, 2)

                  ' ReDimension TheArray, Preserving any existing
                  ' values, from 1 to Count.
                  ReDim Preserve TheArray(1 To Count)

                  ' TheArray, element Count equals Temp, element Y in the
                  ' first dimension by element Z in the second dimension.
                  TheArray(Count) = Temp(Y, Z).Value

                  ' Increment the Count variable by one.
                  Count = Count + 1
               Next Z

            Next Y
         ' If Temp is not an array, proceed from here.
         Else
            ' ReDimension TheArray, preserving any existing
            ' values, from 1 to Count.
            ReDim Preserve TheArray(1 To Count)

            ' TheArray element Count equals Temp.
            TheArray(Count) = Temp

            ' Increment the Count variable by one.
            Count = Count + 1

         ' End the block If statement.
         End If
      Next X
      ' Return TheArray to our function MakeArray.
      MakeArray = TheArray

   End Function

</PRE><h3>To Use This Example</h3>
 

<OL><P><LI>Enter the following information in a worksheet:
<P>
<PRE>      A1: 1   B1: 2   C1: &lt;empty&gt;   D1: 5
      A2: 3   B2: 4   C2: &lt;empty&gt;   D2: 6

</PRE><P><LI>On the worksheet, select cells A4:F4, and type the following formula:
<P>
<P><PRE>      =MakeArray(A1:B2,D1:D2)
</PRE><P>
   NOTE: The above formula must be entered as an array formula. To enter a
   formula as an array formula in Microsoft Excel for Windows, press
   CTRL+SHIFT+ENTER. In Microsoft Excel for the Macintosh, press
   COMMAND+ENTER.
<P>
</OL>The resulting formula will resemble the following example:
<P>
<PRE>   A4:1   B4:2   C4:3   D4:4   E4:5   F4:6
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 5.00 5.00a 5.00c 7.00 8.00 discontiguous <BR>
noncontiguous<BR>
Keywords          : kbcode kbprg PgmHowto<BR>
Version           : WINDOWS: 5.0,5.0c,7.0,97; MACINTOSH: 5.0,5.0a,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

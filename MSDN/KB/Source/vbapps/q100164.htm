

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Call Functions Using a String Variable </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q100164">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1993/06/16">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes how Visual Basic for Application or user-defined functions can be called when the function name is stored in a string variable. This method provides a func...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QA1S,QBS0,QBV8,QAB9,QDN9,QAGI,QAMA,QA5F,QAYL,QAD2,QAH4,QAIF,QBE7,QBE6 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Call Functions Using a String Variable</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q100164</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes how Visual Basic for Application or user-defined
functions can be called when the function name is stored in a string
variable. This method provides a functionality similar to that of pointers
to functions in other programming languages.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To allow significant programming flexibility, you can call a function in
Visual Basic for Applications when the function name is stored in a
variable. This technique is demonstrated in the following example:

<OL><P><LI>Create a new, blank database.

<P><LI>Create a module and type the following line in the Declarations section:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedures:
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. Remove the underscore
   from the end of the line when re-creating this code in Access Basic.
<P>
<P><PRE>      '------------------------------------------------------------------
      'GLOBAL DECLARATIONS SECTION
      '------------------------------------------------------------------
      Option Explicit
</PRE><P>
<P><PRE>      '------------------------------------------------------------------
      ' The CallMyArray() function creates an array of strings, then
      ' loops, using the Eval() function, to call each element of the
      ' array.
      '------------------------------------------------------------------
      Function CallMyArray ()
<PRE></PRE>         Dim MyArray$(), i as Integer, x as Integer

          For i = 0 To 2
             ReDim Preserve MyArray$(i)
             MyArray$(i) = "MyFunc" &amp; i &amp; "(" &amp; i &amp; ")"
          Next i

          For i = 0 To 2
              x = Eval(MyArray(i))
          Next i
      End Function

      '------------------------------------------------------------------
      '    The first function called by CallMyArray().
      '------------------------------------------------------------------
      Function MyFunc0 (nParam)
         MsgBox "This is function: " &amp; nParam
      End Function

      '------------------------------------------------------------------
      '    The second function called by CallMyArray().
      '------------------------------------------------------------------
      Function MyFunc1 (nParam)
         MsgBox "This is function: " &amp; nParam
      End Function

      '------------------------------------------------------------------
      '    The third function called by CallMyArray().
      '------------------------------------------------------------------
      Function MyFunc2 (nParam)
         MsgBox "This is function: " &amp; nParam
      End Function

</PRE><P><LI>Type the following line in the Debug Window (or Immediate Window
   in versions 1.x and 2.0):
<P>
<P><PRE>       ? CallMyArray()
</PRE><P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about the Eval() function, search for "eval," and then
"Eval function" using the Microsoft Access 97 Help Index.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: string eval<BR>
Keywords          : kbprg PgmHowTo PgmOthr<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

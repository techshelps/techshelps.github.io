

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: How to Use Collections to Manage Class Objects in VBA </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q160012">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1996/11/26">
<META NAME="Keywords" CONTENT="kbprg kbusage PgmCM PgmColl PgmHowTo PgmObj">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to use collections in Visual Basic for Applications to manage references to class objects in Microsoft Access 97. This technique allows your cl...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QABO,QAW6,QAH4,QA1S,QBJZ,QDN9,QAB9,QBS0,QAUR,QATX,QAGB,QAP2,QABB,QAY5 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: How to Use Collections to Manage Class Objects in VBA</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q160012</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to use collections in Visual Basic for
Applications to manage references to class objects in Microsoft Access 97.
This technique allows your class objects to persist, and allows you to
control the individual properties of those objects using the familiar
collection syntax used in Microsoft Access for implementing database access
objects (DAO) and other Microsoft Office Object models.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
In order to use collections to manage class objects, you must perform these
actions:

<UL><LI>Create an instance of the class
<LI>Set the properties and methods of the class
<LI>Add the class to a public collection
<LI>Unload the instance of the class
<P>
</UL>You might expect that unloading the instance of the class results in the
class being closed and terminated. However, the class object persists
because you add it to a collection, which then owns the reference to the
class. This is a very powerful technique that allows you to control object
references through a collection; the class object does not terminate until
you remove it from the collection.
<P>
The following example creates a class object and a form object, and then
manages both objects from a collection in a standard module.
<P>
<P><h3>Create a Class Module</h3>
 

<OL><P><LI>Create a new database called ClassTest.mdb.

<P><LI>On the Insert menu, click Class Module.

<P><LI>Save the class module as clsTest.

<P><LI>Type the following lines in the Declarations section:
<P>
<P><PRE>      Private This_ClassID As String
      Private This_frm As New Form_frmTest
</PRE>
<P><LI>Select Class in the Object box of the module window. "Initialize" is
   automatically selected in the Procedure box.

<P><LI>Type the following procedure:
<P>
<P><PRE>      Private Sub Class_Initialize()
<PRE></PRE>         On Local Error GoTo Class_Initialize_Err
         Dim Msg As String
         This_frm.Visible = True
         This_ClassID = "Initialized"
         This_frm.Caption = This_ClassID
         MsgBox "Class Initialized", vbInformation, "Class Example"
      Class_Initialize_End:
         Exit Sub
      Class_Initialize_Err:
         Msg = "Error #: " &amp; Format$(Err.Number) &amp; vbCrLf
         Msg = Msg &amp; Err.Description
         Err.Raise vbObjectError, "clsTest.Initialize (Private)", Msg
         Resume Class_Initialize_End
      End Sub

</PRE><P><LI>On the Insert menu, click Procedure.

<P><LI>In the Insert Procedure dialog box, type ClassID in the Name box and
   click Property in the Type box. Then type the following procedures:
<P>
<P><PRE>      Public Property Get ClassID() As Variant
<PRE></PRE>         ClassID = This_ClassID
      End Property

      Public Property Let ClassID(ByVal vNewValue As Variant)
         This_ClassID = vNewValue
         This_frm.ClassID = This_ClassID
         This_frm.Caption = This_ClassID
      End Property

</PRE><P><LI>Save and close the clsTest class module.
<P>
</OL><h3>Create a Form</h3>
 

<OL><P><LI>Create the following form not based on any table or query in Design
   view:
<P>
<P><PRE>      Form: frmTest
      -----------------
      Caption: TestForm
</PRE>
<P><LI>With the form still open in Design view, click Code on the View menu.

<P><LI>Type the following line in the Declarations section of the form's class
   module:
<P>
<P><PRE>      Dim This_ClassID As String
</PRE>
<P><LI>Add the following event procedure to the form's Unload property:
<P>
<P><PRE>      Private Sub Form_Unload(Cancel As Integer)
<PRE></PRE>         col.Remove This_ClassID
      End Sub

</PRE><P><LI>On the Insert menu, click Procedure.

<P><LI>In the Insert Procedure dialog box, type ClassID in the Name box and
   click Property in the Type box. Then type the following procedures. Note
   that the Get ClassID() function and vNewValue variable in this example
   are dimensioned as String instead of the default, which is Variant:
<P>
<P><PRE>      Public Property Get ClassID() As String
<PRE></PRE>         ClassID = This_ClassID
      End Property

      Public Property Let ClassID(ByVal vNewValue As String)
         This_ClassID = vNewValue
      End Property

</PRE><P><LI>Save and close the frmTest form.
<P>
</OL><h3>Create a Standard Module</h3>
 

<OL><P><LI>Create a new standard module and save it as Module1.

<P><LI>Type the following line in the Declarations section:
<P>
<P><PRE>      Public col As New Collection
</PRE>
<P><LI>Type the following procedure:
<P>
<P><PRE>      Function CreateClassTest() As String
<PRE></PRE>         ' Create an instance of the clsTest class module, which creates
         ' an instance of the frmTest form.
         Dim cls As New clsTest

         ' Create a unique identifier string and set it to the upper index
         ' of the Public col Collection plus one.
         Dim varClassId As String
         varClassId = "Key_" &amp; CStr(col.Count + 1)

         ' Set the clsTest class module's ClassID property to the value of
         ' varClassId, which in turn sets the frmTest.ClassId property to
         ' the same value. This is so the form has a method to track its
         ' relationship to the collection.
         cls.ClassID = varClassId

         ' Add the instance of the class object to the collection passing
         ' varClassId as the Key argument.
         col.Add cls, varClassId

         MsgBox "Created New Collection Item: " &amp; varClassId, _
              vbInformation, "Class Example"

         ' Unload the cls object variable.
         Set cls = Nothing

         ' Return the varClassId.
         CreateClassTest = varClassId
      End Function

</PRE><P><LI>Close and save the module.
<P>
</OL><h3>Test the Example</h3>
 
<P>
When you call the CreateClassTest() function multiple times, it opens
multiple instances of the frmTest form, each of which is unique and capable
of managing itself and its participation in the public collection. Each
form is aware of its Key position in the collection, and each one removes
itself from the collection when you close the form.
<P>
The following sample procedure creates three instances of the clsTest
class:

<OL><P><LI>Create a standard module and type the following procedure:
<P>
<P><PRE>      Function CreateThreeItems() As Boolean
<PRE></PRE>         Dim strKeys(1 To 3) As String
         Dim i As Integer
         For i = LBound(strKeys) To UBound(strKeys)
            strKeys(i) = CreateClassTest()
         Next i
         For i = LBound(strKeys) To UBound(strKeys)
            MsgBox col.Item(strKeys(i)).ClassID, vbInformation, _
              "Class Test"
         Next i
      End Function

</PRE><P><LI>To test this function, type the following line in the Debug window,
   and then press ENTER.
<P>
<P><PRE>      ?CreateThreeItems()
</PRE><P>
   Note that messages boxes are displayed each time the clsTest class
   module initializes, when each of three instances of the frmTest form is
   created, and again after all three instances of the form are open.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about class modules, search the Help Index for "class
modules," or ask the Microsoft Access 97 Office Assistant.
<P>
For more information about the properties and methods of the Collection
object, search the Help Index for "Collection object," or ask the Microsoft
Access 97 Office Assistant.
 
<PRE>Keywords          : kbprg kbusage PgmCM PgmColl PgmHowTo PgmObj
Version           : 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

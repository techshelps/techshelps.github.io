

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling MS Excel Macros and Functions from AppleScript </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q132437">
<META NAME="KBModify" CONTENT="1997/12/01">
<META NAME="KBCreate" CONTENT="1995/07/10">
<META NAME="Keywords" CONTENT="kbprg PgmHowto">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Apple Computer, Inc., has defined an English-like scripting language system for the Macintosh called  AppleScript.  This system is similar in power and flexibility to UNIX shell scripting, but it is much easier to use.  This article discusses the f...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAH4,QAB4,QDNQ,QAUD,QAKD,QAAP,QAPF,QBWS,QAB9,QALW,QBS0,QAJQ,QAGI,QBV8 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Calling MS Excel Macros and Functions from AppleScript</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 1, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q132437</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Macintosh, versions 4.0, 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Apple Computer, Inc., has defined an English-like scripting language system
for the Macintosh called "AppleScript." This system is similar in power and
flexibility to UNIX shell scripting, but it is much easier to use.
<P>
This article discusses the following topics:
<P>
SUMMARY
<UL><LI>OVERVIEW OF CALLING A MACRO WITH APPLESCRIPT
<LI>EXPLANATION OF "do script" AND "Evaluate"
<P>
</UL>SAMPLE CODE FOR CALLING MACROS
<UL><LI>SAMPLES FOR MICROSOFT EXCEL 4.0
<P><PRE>    - If the Macro Accepts an Argument
    - If the Macro Is Not Defined as a Command Macro
    - If the Macro Is in a Bound Sheet in a Workbook
    - If the Macro Is Defined on the Active Macro Sheet
    - If the Macro Sheet Containing the Macro Exists in the Current
      Working Folder and Another File of the Same Name Is Not Already Open
</PRE><LI>SAMPLES FOR MICROSOFT EXCEL 5.0
<P><PRE>    - Calling VB for Applications Subroutines and Functions
    - Calling Microsoft Excel 4.0 Style Macros
</UL></PRE>RETURNING VALUES WITH APPLESCRIPT
<UL><LI>RETURNING VALUES USING THE MICROSOFT EXCEL 4.0 MACRO LANGUAGE
<P><PRE>    - Returning the Boolean Value TRUE
    - Returning the Boolean Value FALSE
    - Syntax that Returns an Error message in Microsoft Excel
</PRE><LI>RETURNING VALUES USING VISUAL BASIC SUBROUTINES
<P><PRE>    - Macros
    - Functions
</UL></PRE>HANDLING ERRORS
<UL><LI>Ignoring Application Responses
<LI>Using the "try ... on error" Error Handler
<LI>Sample Code for Error Handling
</UL>MORE INFORMATION
<UL><LI>Explanation of the AppleScript Dictionary
<LI>Where to Get More Help About Using AppleScript with Microsoft Excel
<P>
</UL> 
<P>
<P><h2>OVERVIEW OF CALLING A MACRO WITH APPLESCRIPT</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>AppleScript is manufactured by Apple Computer, Inc., a vendor independent 
of Microsoft; we make no warranty, implied or otherwise, regarding this 
product's performance or reliability.
<P>
You can use the following commands (provided by Microsoft Excel to
AppleScript) in an AppleScript script, to call a macro contained in a
Microsoft Excel document
<P>
<PRE>   do script &lt;text expression&gt;

   -or-

   Evaluate &lt;text expression&gt;

</PRE>where &lt;text expression&gt; is a text string argument that Microsoft Excel will
evaluate in order to perform the requested action. In both cases, &lt;text
expression&gt; can be ALMOST any valid Microsoft Excel function or macro
expression.
<P>
<P><h2>EXPLANATION OF "do script" AND "Evaluate"</h2>
 
<P>
Both of the above commands have similar syntax and functionality with
respect to issuing stand-alone expressions. For example, the following two
statements have identical results:
<P>
<PRE>   do script "SUM(2,3)"
   Evaluate  "SUM(2,3)"

</PRE>In both cases, the value 5 is returned to the special AppleScript variable
called "result."
<P>
The following two commands also have identical results:
<P>
<PRE>   do script "select(\"r1c1:r1c3\")"
   Evaluate  "select(\"r1c1:r1c3\")"

</PRE>Each of these commands sets the selection on the active sheet to the cell
range "A1:C1."
<P>
NOTE: All cell references sent to Microsoft Excel from AppleScript must be
in R1C1 notation. Also note that quotation marks that are embedded within a
text string must be preceded by a backslash.
<P>
The syntax and limitations for the above two commands varies with respect
to calling a user-defined macro that exists within a Microsoft Excel
document. The SAMPLE CODE FOR CALLING MACROS section of this article
explains, in more detail, this difference in syntax.
<P>
<P><h2>SAMPLE CODE FOR CALLING MACROS</h2>
 
<P>
The following sections contain examples you can use to call Microsoft Excel
macros from AppleScript.
<P>
<P><h2>SAMPLES FOR MICROSOFT EXCEL 4.0</h2>
 
<P>
The following examples assume that the document containing the macro is
currently open in Microsoft Excel.
<P>
To run a macro, use a statement similar to the following
<P>
<PRE>   do script "macro1!test1()"

</PRE>where the macro has the defined name "test1" on the open macro sheet named
"macro1." The macro name, macro sheet name, exclamation point, and
parentheses are required.
<P>
<P><h3>If the Macro Accepts an Argument</h3>
 
<P>
Place the argument inside the parentheses, as in the following examples.
<P>
<PRE>   Example 1
   ---------

   This command passes the value 5 to the macro:

      do script "macro1!test1(5)"

   Example 2
   ---------

   This command runs the same macro described in Example 1, but passes the
   value 7 to the macro. The value 7 is contained in the AppleScript
   variable x:

      copy 7 to x
      do script "macro1!test1(" &amp; x &amp; ")"

</PRE><h3>If the Macro Is Not Defined as a Command Macro</h3>
 
<P>
To run a macro beginning at cell A1 of the macro sheet named "macro1," use
the following command:
<P>
<PRE>   do script "macro1!r1c1()"

</PRE>You do not need to define the macro as a command macro.
<P>
To pass arguments using this type of command, use the same syntax as
"Example 1" and "Example 2" in the "If the Macro Accepts an Argument"
section of this article (above).
<P>
<P><h3>If the Macro Is in a Bound Sheet in a Workbook</h3>
 
<P>
To run a macro that is in a bound sheet in a workbook, use the following
command
<P>
<PRE>   do script "[Workbook1]macro1!test1()"

</PRE>where the "macro1" macro sheet is a bound sheet within the workbook
"Workbook1."
<P>
NOTE: This syntax will result in an error if "macro1" is an unbound sheet.
In this case, use the syntax described under the "Examples for Microsoft
Excel 4.0" heading earlier in this article. To pass arguments with this
type of command, use the same syntax as "Example 1" and "Example 2" in the
"If the Macro Accepts an Argument" section of this article (above).
<P>
<P><h3>If the Macro Is Defined on the Active Macro Sheet</h3>
 
<P>
To run a macro named "test1" on the active macro sheet, use the following
command:
<P>
<PRE>   Evaluate "run(\"test1\")"

   -or-

   Evaluate "macro1!test1"

</PRE><h3>If the Macro Is Defined On An Open Macro Sheet</h3>
 
<P>
To run the macro "test1" when the sheet "macro1" is already open, use the
following command:
<P>
<PRE>   Evaluate "run(macro1!test1)"

</PRE>If the Macro Sheet Containing the Macro Exists in the Current
<P><h3>Working Folder and Another File of the Same Name is not Already Open</h3>
 
<P>
To run the macro named "test1" which is defined on the macro sheet named
"Macro1," use either of the following commands:
<P>
<PRE>   Evaluate "run(\"macro1!test1\")"

</PRE>To run the macro beginning at cell A1 on the macro sheet named "macro1,"
use either of the following commands:
<P>
<PRE>   Evaluate "run(\"macro1!r1c1\")"

   -or-

   Evaluate "macro1!r1c1"

</PRE>Note that if "macro1" is not open, Microsoft Excel will open it (provided
it exists in the current working folder).
<P>
To pass the value 5 to the macro, use either of the following commands:
<P>
<PRE>   Evaluate "run(macro1!test1(5))"

   -or-

   Evaluate "macro1!test1(5)"

</PRE>Note that the document "macro1" must already be open.
<P>
To run the macro beginning in cell A1 of the macro sheet "macro1" and pass
the value five (5) to the macro 14, use the following command:
<P>
<PRE>   Evaluate "macro1!r1c1(5)"

</PRE>Note that the macro sheet "macro1" must already be open.
<P>
<P><h2>SAMPLES FOR MICROSOFT EXCEL 5.0</h2>
 
<P>
<P><h3>Calling VB for Applications Subroutines and Functions</h3>
 
<P>
The syntax for calling Visual Basic, Applications Edition, subroutines and
functions created in Microsoft Excel 5.0 is similar to the syntax described
above for Microsoft Excel 4.0 macros, with the following exceptions:

<OL><P><LI>Even if the module sheet containing the subroutine or function is the
   active sheet, you must specify, at minimum, the module sheet name. For
   example:
<P>
<P><PRE>      do script "Module1!MySub()"
</PRE><P>
   If "MySub" is a unique identifier within its parent workbook, you can
   use the workbook name and exclude the module name as in the following
   example:
<P>
<P><PRE>      Evaluate "Workbook1!MySub()"
</PRE>
<P><LI>You must include parentheses, even if your subroutine or function does
   not accept any arguments.
<P>
</OL><h3>Calling Microsoft Excel 4.0-Style Macros</h3>
 
<P>
The syntax for calling a macro written in the Microsoft Excel 4.0 macro
language from AppleScript is essentially the same as it is in Microsoft
Excel 4.0 (for more information about this syntax, see the "Examples for
Microsoft Excel 4.0" section above); however, if the macro is not within
the active workbook, you must use the workbook name in the reference to the
macro as in the following example:
<P>
<PRE>   Evaluate "run(\"Workbook1!test1\")"

</PRE></OL>The above example assumes that the name for macro "test1" is defined as a
global name in "Workbook1." If this is not the case, then use syntax
similar to the following:
<P>
<PRE>   Evaluate "run(\"[Workbook1]Macro2!test2\")"

</PRE>The above will be especially necessary when two macros are defined with the
same name and exist within the same workbook. In the above examples,
"Workbook1" is the name of the workbook, and "Macro2" is a macro sheet
within that workbook that contains the macro named "test2."
<P>
<P><h2>RETURNING VALUES WITH APPLESCRIPT</h2>
 
<P>
<P><h2>RETURNING VALUES USING THE MICROSOFT EXCEL 4.0 MACRO LANGUAGE</h2>
 
<P>
It is recommended, but not required, that a Microsoft Excel macro invoked
from AppleScript return a value. If the macro ends with the RETURN()
function, but it does not return a value, an error will be returned to
AppleScript from Microsoft Excel. Error handling is described in a section
below. It may be desirable for your macro to return a value that your
AppleScript script can process.
<P>
The following examples include explanations of side effects that occur when
code is invoked from an AppleScript script.
<P>
<P><h3>Returning the Boolean Value TRUE</h3>
 
<P>
The following macro will display an alert message, and return the Boolean
value TRUE to AppleScript. This is also the value returned automatically by
a Visual Basic subroutine in Microsoft Excel 5.0 (described in more detail
below).
<P>
<PRE>   =ALERT("Run From AppleScript")
   =RETURN(TRUE)

</PRE>If your macro does not need to return a specific value other than TRUE, it
is recommended that TRUE be used as the return value to ensure consistency
with Microsoft Excel 5.0 Visual Basic subroutines. The value returned can
be any numeric, Boolean, or string expression.
<P>
The following macro will display an alert message and then cause an error
to be returned to the calling AppleScript script from Microsoft Excel:
<P>
<PRE>   =ALERT("Run From AppleScript")
   =RETURN()

</PRE>To handle this error condition, see the "Handling Errors" section later in
this article.
<P>
Returning the Boolean Value FALSE
 
<P>
To display the alert message, terminate normally, and cause the Boolean
value FALSE to be returned to AppleScript, use the following code:
<P>
<PRE>   =ALERT("Run From AppleScript")
   =HALT()

</PRE><h3>Syntax That Returns an Error Message in Microsoft Excel</h3>
 
<P>
The macro below will, after displaying the alert message, cause an error
message to be displayed in Microsoft Excel (requiring the user to interact
with the message). This message will state that no RETURN() or HALT() was
encountered. After the error message is dismissed, the Boolean value false
is returned to AppleScript (unless a time-out has occurred).
<P>
<PRE>   =ALERT("Run From AppleScript")

</PRE>The macro below will, after displaying the alert message, terminate
normally and return the Boolean value false to AppleScript. The command
ERROR(FALSE) disables the error message that Microsoft Excel would normally
display because it did not encounter a RETURN() or HALT() command in the
macro.
<P>
<PRE>   =ERROR(FALSE)
   =ALERT("Run From AppleScript")

</PRE><h2>RETURNING VALUES USING VISUAL BASIC FOR APPLICATIONS</h2>
 
<P>
<P><h3>Macros</h3>
 
<P>
A Visual Basic subroutine in Microsoft Excel 5.0 is only capable of
returning two values (the Boolean values TRUE and FALSE) to AppleScript.
The Boolean value TRUE is returned when the subroutine completes
successfully. The Boolean value FALSE is returned when the subroutine
terminates abnormally, due to a run-time error or a user interrupt.
<P>
<P><h3>Functions</h3>
 
<P>
A Visual Basic function can return any numeric, Boolean, or string
expression to AppleScript. If no value is explicitly returned by the
function, the real value zero (0.0) is returned. If the function terminates
abnormally, due to a run-time error, the Boolean value FALSE is returned to
AppleScript. All numeric data returned to AppleScript will be of the
AppleScript data type "real."
<P>
<P>
<P><h2>HANDLING ERRORS</h2>
 
<P>
The information in the above sections provides examples of macros that do
and do not generate errors in AppleScript. Should you find yourself in a
situation where you must use one of the forms that does generate an error,
AppleScript has some mechanisms in place for handling this event, without
causing your AppleScript script to terminate abnormally. The information
presented in this section describes commands that are specific to
AppleScript version 1.1; therefore, these commands may be different for
later versions of this product.
<P>
Microsoft Corporation has no control over the syntax or functionality of
the AppleScript commands described in this section. Microsoft Corporation
also makes no claims as to the validity of the commands described in this
section if you are using a scripting system other than AppleScript.
<P>
<P><h3>Ignoring Application Responses</h3>
 
<P>
Consult your AppleScript documentation for more information about the
ignoring (or considering) qualifier.
<P>
Example:
<P>
tell application "Microsoft Excel"
<PRE>   ignoring Application Responses
      do script "workbook1!mySub()"
   end ignoring
</PRE>end tell
<P>
The above example tells Microsoft Excel to execute a macro named "mySub"
contained in the document "workbook1." However, because AppleScript has
been instructed to ignore Application Responses, AppleScript will not wait
for Microsoft Excel to complete execution of the macro and return a value.
Any value returned by the macro will be ignored. Using this method, it is
possible for AppleScript to continue processing the rest of the script,
following the call to the macro, and may in fact complete execution of the
script before Microsoft Excel finishes executing the macro.
<P>
<P><h3>Using the "try ... on error" Error Handler</h3>
 
<P>
Consult your AppleScript documentation for more information about the "try"
statement error handler.
<P>
Example:
<P>
tell application "Microsoft Excel"
<PRE>   try
      do script "Macro1!myMacro()"
   on error myErrorText number myErrorNumber
      display dialog myErrorText &amp; return &amp; (myErrorNumber as string)
   end try
</PRE>end tell
<P>
The above example tells Microsoft Excel to execute a macro named "myMacro"
contained on the macro sheet "Macro1." This time, if an error occurs as the
result of executing the macro, the lines between "on error" and "end try"
are executed. Below is a description of what these lines do.
<P>
This line
<P>
<PRE>   on error myErrorText number myErrorNumber

</PRE>places a descriptive error message as a text string into the user-
defined AppleScript variable "myErrorText". It also places an error number
into the user-defined AppleScript variable "myErrorNumber".
<P>
This line
<P>
<PRE>   display dialog MyErrorText &amp; return &amp; (myErrorNumber as string)

</PRE>because it is contained within the "on error" clause of the
"try" statement, is only executed when an error results. In this example,
it displays the descriptive error message retrieved in step 1 on the first
line of a dialog box. It also displays the error number retrieved in step
1 on the last line of the same dialog box.
<P>
NOTES:

<UL><LI>The error number returned from Microsoft Excel when a macro
   terminates without returning an explicit value is -1708.

<LI>The "display dialog" command is an AppleScript command whose
   functionality is provided by a Scripting Addition. A Scripting Addition
   is an add-on to the AppleScript scripting environment. The scripting
   addition "display dialog" is provided by Apple Computer, Inc. It should
   be located within the Scripting Additions folder, which is located
   inside the Extensions folder inside your System Folder.
<P>
</UL><h3>Sample Code for Error Handling</h3>
 
<P>
The following example demonstrates how you can use error handling to ensure
smooth operation of a script that calls a Microsoft Excel 5.0 Visual Basic
subroutine. In this example, a macro named "RunFromAS" is saved within a
workbook file named "MacroBook." MacroBook is saved on the Desktop. The
script checks if MacroBook is open before calling the macro. If it is not
open, an attempt is made to open it. If it can not be opened, an error
message is displayed, but the script does not terminate abnormally. If
MacroBook is opened successfully or if it is already open, then an attempt
is made to run the macro "RunFromAS." If an error is encountered at this
point, a message is displayed, but the script does not terminate
abnormally.
<P>
<PRE>   tell application "Microsoft Excel"
      Activate
      set runIt to true
      if not (exists Workbook "MacroBook") then
         try
            Open "Macintosh HD:Desktop Folder:MacroBook"
         on error myErrorText
            set runIt to false
            display dialog myErrorText buttons "OK"
   default button 1
         end try
      end if

      if runIt then
         try
            do script "MacroBook!RunFromAS()"
         on error myErrorText
            display dialog myErrorText buttons "OK"
   default button 1
         end try
      end if
   end tell

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Explanation of the AppleScript Dictionary</h3>
 
<P>
Microsoft Excel contains an "aete" resource and the necessary Apple Event
capability to fulfill the scriptable level of AppleScript support. To use
the application-specific capabilities of Microsoft Excel with AppleScript,
open and examine the AppleScript dictionary supplied with Microsoft Excel.
<P>
To open the dictionary in Microsoft Excel using the Script Editor, do the
following:

<OL><P><LI>Start the Script Editor.

<P><LI>From the File Menu, choose Open Dictionary.

<P><LI>In the dialog box presented, switch to the folder containing Microsoft
   Excel.

<P><LI>Select Microsoft Excel and click the Open button.
<P>
</OL>The window presented will allow you to select an object or a class to view
its description. You can also click the bold suite names in order to view
an entire suite at one time. The descriptions shown in this window can be
used to create scripts within the Script Editor to control Microsoft Excel.
Note that certain suites may contain too much information to be displayed
at one time. In this case, select only a portion of the topics listed under
this suite's bold entry in the list. One example of such a suite is the
Core Suite from Microsoft Excel version 5.0.
<P>
<P><h3>Where to Get More Help About Using AppleScript with Microsoft Excel</h3>
 
<P>
More information on this topic may be available from Microsoft Information
Services.  Microsoft Information Services are available on the World Wide
Web by connecting to <B><A HREF="http://www.microsoft.com">http://www.microsoft.com.</A></B>  The FTP site is located at
ftp.microsoft.com.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"AppleScript Language Guide," version 1.0, Chapter 7-18,
"Considering and Ignoring Statements"
<P>
"AppleScript Language Guide," version 1.0, Chapter 9,
"Error Handlers"
<P>
For more information about AppleScript, choose the Search button in
Help and type:
<P>
<PRE>    AppleScript
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 4.00 5.00 Apple Script execute<BR>
Keywords          : kbprg PgmHowto<BR>
Version           : MACINTOSH:4.0,5.0<BR>
Platform          : MACINTOSH<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 1, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Using Automation to Send a Microsoft Exchange Message </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q153311">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1996/07/05">
<META NAME="Keywords" CONTENT="AutoGnrl kbinterop IntpOleA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article demonstrates how to create and send a Microsoft Exchange message using Automation.  This article assumes that you are familiar with Visual Basic for Application...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAEV,QAPN,QAYC,QA1S,QAH6,QAW6,QBXS,QDN9,QA6A,QA4S,QA4R,QAR2,QA2K,QAUJ,QAPF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Using Automation to Send a Microsoft Exchange Message</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q153311</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article demonstrates how to create and send a Microsoft Exchange
message using Automation.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: This article uses Microsoft Exchange, a product which must be
purchased and installed separately. The Microsoft Exchange component
which ships with Windows 95 will not work with this article.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft Access provides the SendObject method which enables you to send a
MAPI mail message. However, the SendObject method provides no way to attach
external files or set certain message properties, such as message
importance.
<P>
There are five main steps in sending a MAPI message through Automation:

<UL><LI>Initializing and logging onto the MAPI session
<LI>Creating a new message and adding it to the Outbox
<LI>Adding the recipients (To, CC, and BCC) and resolve names
<LI>Setting valid properties, such as text, subject, and importance
<LI>Sending the message
<P>
</UL>To programmatically send a Microsoft Exchange message, follow these steps:

<OL><P><LI>Create a folder on drive C named Examples. Create a sample text file
   named Customers.txt in the Examples folder.

<P><LI>Create a module and type the following line in the Declarations section
   if it is not already there:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>On the Tools menu, click References.

<P><LI>In the References box, select OLE/Messaging 1.0 Object Library, and
   click OK.
<P>
   NOTE: If this object library is not available in the References
   list, click the Browse button and search your Windows\System folder
   for the file Mdisp32.tlb.

<P><LI>Type the following procedure:
<P>
<P><PRE>    '--------------------------------------------------------------------
    ' This procedure sets an object variable to the MAPI Session object
    ' using the CreateObject() function. Then, it logs on to the session
    ' using a predefined profile. Once logged on, the procedure creates
    ' a new message and adds it to the Messages collection of the user's
    ' OutBox. Then, it creates two recipients (one on the TO: line and
    ' one on the CC: line) and adds both to the Recipients collection
    ' of the message. Next, it resolves the names of all recipients.
    ' Then, it attaches a sample file before filling in the Subject,
    ' Text, and Importance attributes of the message.
    '--------------------------------------------------------------------
     Sub SendMAPIMessage()
<PRE></PRE>        Dim MapiSession As Object
        Dim MapiMessage As Object
        Dim MapiRecipient As Object
        Dim MapiAttachment As Object
        Dim Recpt
        Dim errObj As Long
        Dim errMsg

        On Error GoTo MAPITrap
        ' Create the MAPI Session.
        Set MapiSession = CreateObject("Mapi.Session")

        ' Log on to the session. If the ProfileName argument is omitted,
        ' Microsoft Exchange prompts you for the profile to use. If the
        ' profile name is incorrect, you will receive a runtime error.
         MapiSession.Logon profilename:="Steven Buchanan"

        ' Add a message to the Outbox.
        Set MapiMessage = MapiSession.Outbox.Messages.Add

        ' Add the recipients of the message. Note, each recipient must be
        ' added separately to the Recipients collection of the Message
        ' object.

        With MapiMessage
            Set MapiRecipient = MapiMessage.Recipients.Add
            MapiRecipient.Name = "Nancy Davolio"
            MapiRecipient.Type = mapiTo
            Set MapiRecipient = MapiMessage.Recipients.Add
            MapiRecipient.Name = "Andrew Fuller"
            MapiRecipient.Type = mapiCc
            Set MapiRecipient = MapiMessage.Recipients.Add
            MapiRecipient.Name = "Michael Suyama"
            MapiRecipient.Type = mapiBcc

            ' Resolve each recipient's e-mail name.
            For Recpt = 0 To .Recipients.Count - 1
                .Recipients(Recpt).Resolve showdialog:=False
            Next

            ' Attach a file to the message.
            Set MapiAttachment = MapiMessage.Attachments.Add
            With MapiAttachment
                .Name = "Customers.txt"
                .Type = mapiFileData
                .Source = "C:\Examples\Customers.txt"
                .ReadFromFile filename:="C:\Examples\Customers.txt"
                .position = 2880
            End With

            ' Assign the text, subject, and importance of the message.
            .subject = "My Subject"
            .Text = "This is the text of my message." &amp; vbCrLf &amp; vbCrLf
            .importance = mapiHigh

            ' View the message in Microsoft Exchange before sending. Set
            ' the ShowDialog argument to False if you want to send the
            ' message without viewing it in Microsoft Exchange.
            .Send showdialog:=True
        End With
        Set MapiSession = Nothing  ' Clear the object variable.

     MAPIExit:
        Exit Sub

     MAPITrap:
        errObj = Err - vbObjectError  ' Strip out the OLE automation error.
        Select Case errObj
            Case 275                  ' User cancelled sending of message.
                Resume MAPIExit
            Case Else
                errMsg = MsgBox("Error " &amp; errObj &amp; " was returned.")
                Resume MAPIExit
            End Select
     End Sub

</PRE><P><LI>Be sure to replace both the Mapisession.Login Profilename and the
   MapiRecipient.name with valid e-mail names.

<P><LI>To test this procedure, type the following line in the Debug window,
   and then press ENTER:
<P>
<P><PRE>      SendMAPIMessage
</PRE><P>
   Note that Microsoft Exchange is invoked with the sample message ready to
   send.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about Automation, search the Help Index for
"Automation," or ask the Microsoft Access 97 Office Assistant.
<P>
For more information about referencing object libraries, search the Help
Index for "object libraries," or ask the Microsoft Access 97 Office
Assistant.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: mail<BR>
Keywords          : AutoGnrl kbinterop IntpOleA<BR>
Technology        : kbole<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

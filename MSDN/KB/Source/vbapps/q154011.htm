

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to List SQL Server Objects Using Automation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q154011">
<META NAME="KBModify" CONTENT="1997/08/28">
<META NAME="KBCreate" CONTENT="1996/07/25">
<META NAME="Keywords" CONTENT="AutoGnrl kbinterop IntpOleA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes how to use OLE Automation to list the objects that exist in a Microsoft SQL Server version 6.0 or 6.5 database.  This article assumes that you are fam...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABM,QAZV,QA1S,QAVX,QAPN,QAW6,QAPF,QDN9,QAY5,QAE1,QAOX,QBS0,QAA1,QAMA,QBV8 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to List SQL Server Objects Using Automation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 28, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q154011</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes how to use OLE Automation to list the objects that
exist in a Microsoft SQL Server version 6.0 or 6.5 database.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft SQL Server versions 6.0 and later expose a new object hierarchy
called the SQL Server Distributed Management Object Model (SQL-DMO). This
consists of a series of collections and objects similar to the Object model
of the Microsoft Jet database engine.
<P>
Microsoft Access Developers can make use of this functionality to query SQL
Server for table names, relationships, columns, and so on.
<P>
In order to use the SQL-DMO features, you must first install the
workstation installation of SQL Server to provide client utilities for
working with SQL Server. For more information about installing these
utilities, check your Microsoft SQL Server 6.0 or 6.5 documentation.
<P>
The following examples demonstrate how to list the databases, tables, or
columns in a Microsoft SQL Server 6.0 or 6.5 table using Visual Basic for
Application's code in Microsoft Access 97 or Microsoft Access 7.0.

<OL><P><LI>Install the Microsoft SQL Server 6.0 or 6.5 Workstation/Client
   Utilities.

<P><LI>Open Microsoft Access 97 or 7.0 and create a new module.

<P><LI>On the Tools menu, click References, and click to select "Microsoft
   SQL OLE Object Library." This option will be available after you install
   the workstation/client utilities for SQL Server.

<P><LI>Type the following lines in the Declarations section:
<P>
<P><PRE>      Option Explicit
      Public Const strServer = "YourServer"  ' Indicate your server.
<PRE></PRE>      Public Const strUser = "sa"            ' Indicate your user name.
      Public Const strPwd = ""               ' Indicate your password.

</PRE></OL><h3>Example 1</h3>
 
<P>
The following example demonstrates how to create a list of databases on a
Microsoft SQL Server Version 6.0 or 6.5:

<OL><P><LI>Create the following function:
<P>
<P><PRE>      Function EnumSQLDatabases() As Boolean
<PRE></PRE>         On Error GoTo EnumSQLDatabases_Err
         Dim objSQL As Object, objSQLdb As Object
         Dim strMsg As String
         Set objSQL = CreateObject("Sqlole.SQLServer")
         ' Connect to SQL server...
         objSQL.Connect strServer, strUser, strPwd
         ' Print server info.
         Debug.Print "------------------------------------------------"
         Debug.Print "SQL Server: " &amp; strServer
         Debug.Print "------------------------------------------------"
         For Each objSQLdb In objSQL.Databases
             ' Print database(s) name.
             Debug.Print "...Database: " &amp; objSQLdb.Name
         Next
         ' Disconnect from SQL server.
         objSQL.DisConnect
         EnumSQLDatabases = True
      EnumSQLDatabases_End:
         Exit Function
      EnumSQLDatabases_Err:
         ' Basic error handling.
         MsgBox Err.Description, vbInformation, "SQL OLE Automation"
         Resume EnumSQLDatabases_End
      End Function

</PRE><P><LI>Type the following line in the Debug window, and then press ENTER:
<P>
<P><PRE>      ?EnumSQLDatabases()
</PRE><P>
   Note the list of Databases contained on the SQL Server, for example:
<P>
<P><PRE>       ------------------------------------------------
       SQL Server: MyTestSQLServer
       ------------------------------------------------
       ...Database: pubs
       ......Tables:
       ..........authors
       ..........discounts
       ..........employee
       ..........jobs
       ..........pub_info
       ..........publishers
       ..........roysched
       ..........sales
       ..........stores
       ..........sysalternates
       ..........sysarticles
       ..........syscolumns
       ..........syscomments
       ..........sysconstraints
       ..........sysdepends
       ..........sysindexes
       ..........syskeys
       ..........syslogs
       ..........sysobjects
       ..........sysprocedures
       ..........sysprotects
       ..........syspublications
       ..........sysreferences
       ..........syssegments
       ..........syssubscriptions
       ..........systypes
       ..........sysusers
       ..........titleauthor
       ..........titles
       True
</PRE><P>
   Note that your output will be similar (depending on the installed
   databases in your SQL Server).
<P>
</OL><h3>Example 2</h3>
 
<P>
The following example demonstrates how to list the tables in a Microsoft
SQL Server version 6.0 or 6.5 database:

<OL><P><LI>Create the following Function:
<P>
<P><PRE>      Function EnumSQLTables() As Boolean
<PRE></PRE>         On Error GoTo EnumSQLTables_Err
         Dim objSQL As Object, objSQLdb As Object
         Dim objSQLtbl As Object
         Dim strMsg As String
         Set objSQL = CreateObject("Sqlole.SQLServer")
         ' Connect to SQL server...
         objSQL.Connect strServer, strUser, strPwd
         Debug.Print "------------------------------------------------"
         Debug.Print "SQL Server: " &amp; strServer
         Debug.Print "------------------------------------------------"
         For Each objSQLdb In objSQL.Databases
             ' Print database(s) name.
             Debug.Print "...Database: " &amp; objSQLdb.Name
             Debug.Print "......Tables: "
             For Each objSQLtbl In objSQLdb.Tables
                 ' Print table name(s).
                 Debug.Print ".........." &amp; objSQLtbl.Name
             Next
         Next
         ' Disconnect from SQL server...
         objSQL.DisConnect
         EnumSQLTables = True
      EnumSQLTables_End:
         Exit Function
      EnumSQLTables_Err:
         ' Basic error handling.
         MsgBox Err.Description, vbInformation, "SQL OLE Automation"
         Resume EnumSQLTables_End
      End Function

</PRE><P><LI>Type the following line in the Debug window, and then press ENTER:
<P>
<P><PRE>       ?EnumSQLTables()
</PRE><P>
   Note that you receive the list of tables in the Specified SQL Server
   Database, for example:
<P>
<P><PRE>       ------------------------------------------------
       SQL Server: MyTestSQLServer
       ------------------------------------------------
       ...Database: pubs
       ......Tables:
       ..........authors
       ..........discounts
       ..........employee
       ..........jobs
       ..........pub_info
       ..........publishers
       ..........roysched
       ..........sales
       ..........stores
       ..........sysalternates
       ..........sysarticles
       ..........syscolumns
       ..........syscomments
       ..........sysconstraints
       ..........sysdepends
       ..........sysindexes
       ..........syskeys
       ..........syslogs
       ..........sysobjects
       ..........sysprocedures
       ..........sysprotects
       ..........syspublications
       ..........sysreferences
       ..........syssegments
       ..........syssubscriptions
       ..........systypes
       ..........sysusers
       ..........titleauthor
       ..........titles
</PRE><P>
   Note that your output will be similar (depending on the installed
   databases in your SQL Server).
<P>
</OL><h3>Example 3</h3>
 
<P>
The following example demonstrates how to obtain a list of columns in a
Microsoft SQL Server Table:

<OL><P><LI>Create the following function:
<P>
<P><PRE>      Function EnumSQLColumns() As Boolean
<PRE></PRE>         On Error GoTo EnumSQLColumns_Err
         Dim objSQL As Object, objSQLdb As Object
         Dim objSQLtbl As Object, objSQLfld As Object
         Dim strMsg As String
         Set objSQL = CreateObject("Sqlole.SQLServer")
         ' Connect to SQL server...
         objSQL.Connect strServer, strUser, strPwd
         Debug.Print "------------------------------------------------"
         Debug.Print "SQL Server: " &amp; strServer
         Debug.Print "------------------------------------------------"
         For Each objSQLdb In objSQL.Databases
             ' Print database(s) name.
             Debug.Print "...Database: " &amp; objSQLdb.Name
             Debug.Print "......Tables: "
             For Each objSQLtbl In objSQLdb.Tables
                 ' Print table name(s).
                 Debug.Print ".........." &amp; objSQLtbl.Name
                 For Each objSQLfld In objSQLtbl.Columns
                     ' Print field name(s).
                     Debug.Print "............." &amp; objSQLfld.Name
                 Next
             Next
         Next
         ' Dis-connect from SQL server.
         objSQL.DisConnect
         EnumSQLColumns = True
      EnumSQLColumns_End:
         Exit Function
      EnumSQLColumns_Err:
         ' Basic error handling.
         MsgBox Err.Description, vbInformation, "SQL OLE Automation"
         Resume EnumSQLColumns_End
      End Function

</PRE><P><LI>Type the following line in the Debug window, and then press ENTER:
<P>
<P><PRE>       ?EnumSQLColumns()
</PRE><P>
   Note that you receive the list of columns in the specified Microsoft
   SQL Server Table, for example:
<P>
<P><PRE>       ------------------------------------------------
       SQL Server: MyTestSQLServer
       ------------------------------------------------
       ...Database: master
       ...Database: model
       ...Database: msdb
       ...Database: MyTestDB
       ...Database: pubs
       True
</PRE><P>
   Note that your output will be similar (depending on the installed
   databases in your SQL Server).
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about OLE functionality and automation, search the
Help Index for "Automation," or ask the Microsoft Access 97 Office
Assistant.
<P>
For further information about the SQL Server Distributed Management Object
Model (SQL-DMO), refer to the "Programming SQL Distributed Management
Objects" manual included with your SQL Server 6.0 documentation.
 
<PRE>Keywords          : AutoGnrl kbinterop IntpOleA
Technology        : kbole
Version           : 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 28, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD97: Retrieving Settings from Word Dialog Boxes Using OLE </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q159547">
<META NAME="KBModify" CONTENT="1998/02/11">
<META NAME="KBCreate" CONTENT="1996/11/15">
<META NAME="Keywords" CONTENT="kbwordvba kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article describes how to retrieve settings from Word dialog boxes using either Microsoft Visual Basic for Applications references or the GetObject function for OLE Automation.  MORE INFORMATION  Microsoft provides examples of Visual Basic for ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAIH,QBMH,QBS0,QAKJ,QDM0,QAPN,QAW6,QBJZ,QBWS,QABA,QBXS,QA01,QAKD,QAKE,QBVP P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD97: Retrieving Settings from Word Dialog Boxes Using OLE</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 11, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q159547</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to retrieve settings from Word dialog boxes
using either Microsoft Visual Basic for Applications references or the
GetObject function for OLE Automation.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
The preferred method for accessing Microsoft Word for Windows Object
properties is to add the Microsoft Word 8.0 Object Library as an available
reference. If you use an application that supports Visual Basic for
Applications references, such as Microsoft Excel 97, to make calls to Word,
your code can call Word directly without using the GetObject function.
<P>
To add Microsoft Word 8.0 Object Library in Microsoft Excel 97, follow
these steps:

<OL><P><LI>Start Microsoft Excel.

<P><LI>On the Tools menu, click References.

<P><LI>Under Available References, select Microsoft Word 8.0 Object Library.

<P><LI>Click OK.
<P>
</OL>The following example obtains the current setting for the Highlight option
on the View tab in Word. (To locate this option, click Options on the Tools
menu.)
<P>
<PRE>   Sub GetHighlightSetting()
      Set myDialog = Word.Application.Dialogs(wdDialogToolsOptionsView)
      x$ = myDialog.Highlight
      MsgBox x$
   End Sub

</PRE></OL>In the preceding example, the wdDialogToolsOptionsView constant is
referred to by name:
<P>
<PRE>   Word.Application.Dialogs(wdDialogToolsOptionsView)

</PRE>In the following example, reference is made to the wdDialogToolsOptionsView
constant by value:
<P>
<PRE>   wobj.Dialogs(204)

</PRE>For readability purposes, you can create a user-defined constant, set it to
equal the dialog value, and use it like a built-in constant. This also lets
you change the value in one place near the top of the macro, and have the
change effective throughout the macro.
<P>
For example:
<P>
<PRE>   'Define a constant and set it equal to the dialog value.
   Const wdMyDialogToolsOptionsView = 204
   'Use the constant in place of the actual number.
   Set myDialog = wobj.Dialogs(wdMyDialogToolsOptionsView)

</PRE>NOTE: When you use the Microsoft Word 8.0 Object Library as a reference,
you can specify the Word constants by name. However, when this library is
not available, you can only refer to the constant by its value. To obtain
the value of a Word constant, use the Object Browser.
<P>
The Object Browser enables you to browse through all available objects in
your project and see their properties, methods, and events. In addition,
you can see the procedures and constants that are available from object
libraries in your project. You can easily display Help as you browse. You
can use the Object Browser to find and use objects you create, as well as
objects from other applications.
<P>
To use the Object Browser, follow these steps:

<OL><P><LI>Open a module.

<P><LI>On the View menu, click Object Browser.

<P><LI>In the Search text box, type the constant name.

<P><LI>Click the Search button.
<P>
   Under Details you will see the constant description including the
   numeric and hexadecimal value.
<P>
</OL>For more information about the Object Browser, while in the Visual Basic
for Applications Editor click the Office Assistant, type "Object Browser"
(without the quotation marks), click Search, and then click to view "Object
Browser."
<P>
For more information about Built-in dialog box arguments, while in the
Visual Basic for Applications Editor click the Office Assistant, type
"Built-in dialog box arguments lists" (without the quotation marks), click
Search, and then click to view "Built-in dialog box arguments lists."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Visual Basic Help is not installed on your
computer, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office Program or
               Component

</PRE></OL>Below are two examples of how to obtain Word dialog box settings from
another application without adding the Microsoft Word 8.0 Object Library as
a reference.
<P>
The following example obtains the current setting for the Highlight option
on the View tab in Word. (To locate this option, click Options on the Tools
menu.)
<P>
<PRE>   Sub GetHighlightSetting()
      Const wdMyDialogToolsOptionsView = 204
      Dim Value As String
      Dim wobj As Object
      Dim myDialog As Object
      Set wobj = GetObject(, "Word.Application")
      Set myDialog = wobj.Dialogs(wdMyDialogToolsOptionsView)
      Value = myDialog.Highlight
      MsgBox Value
      wobj.Quit
      Set wobj = Nothing
      Set myDialog = Nothing
   End Sub

</PRE>The following example obtains the right indent of the current active
document.
<P>
<PRE>   Sub GetRightIndent()
      Const wdMyDialogFormatParagraph = 175
      Dim wobj As Object
      Dim myDialog As Object
      Set wobj = GetObject(, "Word.Application")
      Set myDialog = wobj.Dialogs(wdMyDialogFormatParagraph)
      MsgBox "Right indent = " &amp; myDialog.RightIndent
      wobj.Quit
      Set wobj = Nothing
      Set myDialog = Nothing
   End Sub

</PRE><h3>To Determine the Value of a Built-in Dialog Constant</h3>
 
<P>
To determine the value of a built-in dialog constant using the Object
Browser, follow these steps:

<OL><P><LI>Press ALT+F11 to start the Visual Basic for Applications Editor.

<P><LI>On the View menu, click Object Browser.

<P><LI>In the Project/Library drop-down list, click Word.

<P><LI>In the Search Text box type "wdDialog" (without the quotation marks).

<P><LI>Click the Search (binoculars) button. This returns a list of all built-
   in dialog constants.

<P><LI>Under Search Results, click to select the constant you want. The value
   of the constant is displayed near the bottom of the Object Browser
   window.
<P>
</OL><h2>REFERENCES</h2>
 
<P>
For more information about OLE Automation, while in the Visual Basic for
Applications Editor click the Office Assistant, type "GetObject" (without
the quotation marks), click Search, and then click to view "GetObject."
<P>
For information about how to do this in earlier versions of Word, please
see the following articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../WORD/Q105684.htm">Q105684</A></B>
   TITLE     : OLE Automation: Retrieving Word's Dialog Box Settings

   ARTICLE-ID: <B><A HREF="../vbapps/Q114347.htm">Q114347</A></B>
   TITLE     : How OLE Automation Objects Behave with GetObject &amp;
               CreateObject
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.0 8.00 vb vbe vba<BR>
Keywords          : kbwordvba kbfaq<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 11, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

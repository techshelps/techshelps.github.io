

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: VB3: Create Excel Chart with OLE Automation from VB </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q112417">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1994/03/08">
<META NAME="Keywords" CONTENT="IAPOLE vbwin GnrlVb kbprg kbfasttip">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article demonstrates how to insert data into a Microsoft Excel version 5.0 worksheet and create a chart by using OLE automation in a Visual Basic application.  MORE INFORMATION  There are five key points you need to keep in mind when creating ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAPN,QBS0,QDNX,QAW6,QDMR,QBC9,QBC8,QAQG,QANO,QA5V,QANF,QBOM,QAA7,QAH4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: VB3: Create Excel Chart with OLE Automation from VB</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q112417</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard and Professional Editions of Microsoft Visual Basic for
   Windows, version 3.0
<LI>Microsoft Excel, version 5.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article demonstrates how to insert data into a Microsoft Excel
version 5.0 worksheet and create a chart by using OLE automation in a
Visual Basic application.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
There are five key points you need to keep in mind when creating an Excel
chart in a Visual Basic program:

<OL><P><LI>A chart can be either on a Worksheet or a Chart sheet.

<P><LI>A chart on a Worksheet is a ChartObject.

<P><LI>A ChartObject has a Chart property, which is a Chart Object.

<P><LI>The data associated with the Chart is part of the SeriesCollection.

<P><LI>You can add a new data series with a Named Range.
<P>
</OL>NOTE: Complete definitions for these objects can be found in the Excel
documentation.
<P>
A Workbook has a Charts collection, which is the collection of all Chart
sheets in the workbook. All Charts on WorkSheets are part of that
WorkSheet's ChartObjects collection. Therefore to add a new Chart to a
Worksheet, you can use the Add method on the worksheet’s ChartObject
collection.
<P>
The SeriesCollection property of the Chart object contains the reference to
the data linked to the table. In the example below, you'll add two data
series -- each of which contains 10 data points -- by using the Add method
on the SeriesCollection object.
<P>
Although the example passes the Range of cells containing the data as a
named range, you could specify a Range in R1C1 notation.
<P>
<P><h3>Steps to Create Example Program</h3>
 

<OL><P><LI>Start a new project in Visual Basic. Form1 is created by default.

<P><LI>Add a command button (Command1) to Form1.

<P><LI>Add the following code to the Command1_Click event procedure:
<P>
<PRE>   Sub Command1_Click()
      Dim objXLsheet As Object ' Object reference to Excel Worksheet
      Dim objRange1 As Object  ' First series in the chart
      Dim objRange2 As Object  ' Second series in the chart
      Dim objChart1 As Object  ' Object reference to the chart we create

      Dim iRow As Integer ' Index variable for the current Row
      Dim iCol As Integer ' Index variable for the current Row

      Dim strTmpRange As String ' Temporarily hold Range in R1C1 notation

      Const cNumCols = 10 ' Number of points in each Series
      Const cNumRows = 2  ' Number of Series

      ' Create a Worksheet Object:
      Set objXLsheet = CreateObject("Excel.Sheet")
      Randomize Timer

      ' Insert Random data into Cells for the two Series:
      For iRow = 1 To cNumRows
         For iCol = 1 To cNumCols
            objXLsheet.Cells(iRow, iCol).Value = Int(Rnd * 50) + 1
         Next iCol
      Next iRow

      ' Insert Named Ranges:
      For iRow = 1 To cNumRows
         'VB3Line: Enter the following lines as one line
         strTmpRange = "R" &amp; iRow &amp; "C" &amp; Format$(1) &amp; ":R" &amp; iRow &amp;
            "C" &amp; Format$(cNumCols)
         'VB3Line: Enter the following lines as one line
         objXLsheet.Parent.Names.Add "Range" &amp; Format$(iRow),
            "=Sheet1!" &amp; strTmpRange
      Next iRow

      ' Add a ChartObject to the worksheet:
      Set objChart1 = objXLsheet.ChartObjects.Add(100, 100, 200, 200)

      ' Assign the Ranges created above as the individual series
      ' for the chart:
      For iRow = 1 To cNumRows
         objChart1.Chart.SeriesCollection.Add "Range" &amp; Format$(iRow)
      Next iRow

      ' Make Excel Visible:
      objXLsheet.application.Visible = True
      DoEvents

      ' Save the Worksheet to disk. The parent of a WorkSheet is WorkBook.
      objXLsheet.Parent.SaveAs "C:\VB\XLCHART.XLS"

      ' Close this instance of Excel:
      objXLsheet.application.Quit
   End Sub

</PRE><P><LI>Press the F5 key to run the program, and click the command button.
<P>
</OL>At this point, Excel starts, and it loads and displays the worksheet with
the newly-created chart. If you don’t already have a file name as specified
on the jXLSheet.Parent.SaveAs line of code, Excel saves the file and closes
itself down. If you already have a file with the same name, Excel brings up
a dialog asking you if you would like to overwrite the existing file.
 
<PRE>Keywords          : IAPOLE vbwin GnrlVb kbprg kbfasttip
Technology        : kbole kbvba
Version           : WINDOWS:3.00
Platform          : WINDOWS
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

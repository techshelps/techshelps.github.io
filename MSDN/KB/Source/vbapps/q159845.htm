

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: Parentheses Around Object May Dereference the Object </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q159845">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1996/11/22">
<META NAME="Keywords" CONTENT="kbcode kberrmsg kbprg xlvbainfo xl97vbmigrate">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel 97, you may receive a run-time error or unexpected results from your macro if you enclose the argument for a procedure in parentheses when a value is not returned from the procedure. You may receive one of the following error mes...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QBVP,QAYL,QAB4,QBVV,QAAP,QAUD,QAH4,QAKD,QAFF,QAIA,QAH7,QAH6,QAD7 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: Parentheses Around Object May Dereference the Object</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q159845</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
In Microsoft Excel 97, you may receive a run-time error or unexpected
results from your macro if you enclose the argument for a procedure in
parentheses when a value is not returned from the procedure. You may
receive one of the following error messages:
<P>
<PRE>   Run-time error '438':
   Object doesn't support this property or method

   -or-

   Run-time error '424':
   Object Required

</PRE><h2>CAUSE</h2>
 
<P>
You may receive one of these error messages if you enclose an object
variable with parentheses when passing the object variable to another
function or procedure. When an object variable is enclosed in parentheses
and a return value is not expected, the object variable is "dereferenced."
In other words, the Value property for the object is passed to the
procedure instead of the object itself. This can produce either a run-time
error or unexpected results.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To correct this problem, do not use parentheses around object variables
that are passed to a function or procedure when a return value is not
expected. Parentheses should only be used around object variables when a
return value is needed.
<P>
For example, this line produces an error in Microsoft Excel 97 because the
Worksheet object is dereferenced.
<P>
<PRE>   Worksheets.Add (Worksheets(1))

</PRE>Since parentheses are used around the argument, it is dereferenced; the
Value property of the Worksheet object is passed to the Add method rather
than the Worksheet object itself. The following line does not generate an
error since the argument is not enclosed in parentheses and, thus, the
Worksheet object is not dereferenced:
<P>
<PRE>   Worksheets.Add Worksheets(1)

</PRE><h2>STATUS</h2>
 
<P>
This is by design in Microsoft Excel 97.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This section describes several scenarios where your macro may fail or
behave unexpectedly due to dereferencing of an object variable.
<P>
<P><h3>Example 1</h3>
 
<P>
<PRE>   Sub AddWorksheet()
       Worksheets.Add (Worksheets(1))  ' -- This line generates error
   End Sub

</PRE>When this macro is run, the run-time error '438' is generated. When
Microsoft Excel attempts to dereference "Worksheets(1)", a macro error
occurs because the Worksheet object does not support the Value property.
<P>
<P><h3>Example 2</h3>
 
<P>
<PRE>   Sub Main()
       GetRangeValue (Range("Sheet1!A1"))
   End Sub

   Sub GetRangeValue (x)
       MsgBox x.Value   ' -- This line generates error
   End Sub

</PRE>When this macro is run, the run-time error '424' is generated. Microsoft
Excel successfully dereferences the Range object for "Sheet1!A1" and passes
the Value property of that Range object to the GetRangeValue procedure. The
variable that is passed to GetRangeValue is not an object variable;
instead, it could be a string or a double depending on the contents of the
cell Sheet1!A1. The MsgBox line then fails because "x" is not an object
variable.
<P>
<P><h3>Example 3</h3>
 
<P>
The example below simply demonstrates how you can visualize the difference
between an object that is dereferenced and one that is not.
<P>
<PRE>   Sub Test()
       MsgBox TypeName(Range("A1"))   ' -- NOT Dereferenced
       MsgBox TypeName((Range("A1"))) ' -- Dereferenced
   End Sub

</PRE>When you run this macro, the first MsgBox returns "Range" as the type of
the variable and the second MsgBox returns either "Double" or "String"
depending on the contents of cell A1 in the active worksheet.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about using parentheses in your macros, click the
Office Assistant in the Visual Basic Editor, type " parentheses," click
Search, and then click to view "Use Parentheses in Code."
<P>
NOTE: If the Assistant is hidden, click the Office Assistant button on the
Standard toolbar. If Microsoft Excel Help is not installed on your
computer, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../OFFICE/Q120802.htm">Q120802</A></B>
   TITLE     : Office: How to Add/Remove a Single Office Program or
               Component
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 8.00<BR>
Keywords          : kbcode kberrmsg kbprg xlvbainfo xl97vbmigrate<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

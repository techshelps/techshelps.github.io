

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL97: CreateObject and GetObject Work Differently </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q143461">
<META NAME="KBModify" CONTENT="1998/03/13">
<META NAME="KBCreate" CONTENT="1996/02/01">
<META NAME="Keywords" CONTENT="kbcode kbprg kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  The CreateObject and GetObject methods of Automation work differently in Microsoft Excel 97 than they do with earlier versions of Microsoft Excel.  This article explains the differences in behavior and offers some suggestions for making Automation ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAH4,QAPN,QBS0,QAW6,QBXS P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL97: CreateObject and GetObject Work Differently</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 13, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q143461</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The CreateObject and GetObject methods of Automation work differently in
Microsoft Excel 97 than they do with earlier versions of Microsoft Excel.
<P>
This article explains the differences in behavior and offers some
suggestions for making Automation code work with Microsoft Excel 97 and
earlier versions of Microsoft Excel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Behavior in Different Versions of Microsoft Excel</h3>
 
<P>
When you use CreateObject or GetObject in a macro to work with a Microsoft
Excel sheet object, such as "Excel.Sheet" or "Excel.Sheet.8," the type of
object the macro returns is different for different versions of Microsoft
Excel.
<P>
<PRE>   Version                    Type of object returned
   --------------------------------------------------

   Microsoft Excel 97         Workbook
   Microsoft Excel 5.0, 7.0   Worksheet

</PRE>Examples:
<P>
Microsoft provides examples of Visual Basic for Applications procedures for
illustration only, without warranty either expressed or implied, including,
but not limited to the implied warranties of merchantability and/or fitness
for a particular purpose. The Visual Basic procedures in this article are
provided 'as is' and Microsoft does not guarantee that they can be used in
all situations. While Microsoft support engineers can help explain the
functionality of a particular macro, they will not modify these examples to
provide added functionality, nor will they help you construct macros to
meet your specific needs. If you have limited programming experience, you
may want to consult one of the Microsoft Solution Providers. Solution
Providers offer a wide range of fee-based services, including creating
custom macros. For more information about Microsoft Solution Providers,
call Microsoft Customer Information Service at (800) 426-9400.
<P>
You can demonstrate the change in behavior by running the following Visual
Basic for Applications macro in Microsoft Excel or Microsoft Visual Basic,
version 4.0:
<P>
<PRE>   Sub ShowTypeName()

       Dim xlObj As Object
       Set xlObj = CreateObject("Excel.Sheet")
       MsgBox TypeName(xlObj)
       Set xlObj = Nothing

   End Sub

</PRE>In Microsoft Excel 97, when you run the macro, a message box that displays
"Workbook" appears. In earlier versions of Microsoft Excel, the message is
"Worksheet".
<P>
This change in behavior may cause a problem if your code uses properties
and methods that are specific to the type of object to which the macro
references.
<P>
This following macro works correctly with earlier versions of Microsoft
Excel, because the Parent property of xlObj (a Worksheet object) is a
Workbook object; and the Close method applies to workbooks:
<P>
<PRE>   Sub DemonstrateProblem()

       Dim xlObj As Object
       Set xlObj = CreateObject("Excel.Sheet")
       MsgBox TypeName(xlObj)
       xlObj.Parent.Close False
       Set xlObj = Nothing

   End Sub

</PRE>However, this macro fails when you run it in Microsoft Excel 97, because
the Parent property of xlObj (a Workbook object) is an Application object,
and the Close method does not apply to the Application. When you run the
macro, you receive the following error message:
<P>
<PRE>   Run-time error '438':
   Object doesn't support this property or method

</PRE>Making your Code Work in All Versions of Microsoft Excel
 
<P>
If you want to use Automation with Microsoft Excel, but you do not know
which version of Microsoft Excel is running, you can modify your code to
work correctly with any version of Microsoft Excel.
<P>
One way to do this is to check the version of Microsoft Excel from the
macro, and then store the version number in a variable. To do this, use the
following line of code:
<P>
<PRE>   ExcelVersion = Val(xlObj.Application.Version)

</PRE>where "xlObj" is the name of the Microsoft Excel object.
<P>
The value of "ExcelVersion" is either 5, 7, or 8 for Microsoft Excel 5.0,
7.0, or 97 respectively.
<P>
After you determine the version of Microsoft Excel you are using, modify
the macro to work correctly with that version of Microsoft Excel. For
example, you can make the macro in this article work correctly by adding a
few lines of code. The following example illustrates how to change the
macro:
<P>
<PRE>   Sub FixedProblem()

       'Dimension variables.
       Dim xlObj As Object, ExcelVersion As Integer
       Dim xlTemp As Object

       Set xlObj = CreateObject("Excel.Sheet")

       'This line guarantees that xlObj will remain viable when we switch
       'it to the active sheet.
       Set xlTemp = xlObj

       ExcelVersion = Val(xlObj.Application.Version)

       If ExcelVersion &gt;= 8 Then

          Set xlObj = xlObj.ActiveSheet   'Reset the xlObj object to refer
                                          'to the active sheet.
       End If

       'Code that works with the xlObj object goes here.

       Set xlTemp = Nothing   'Both object variables should be set to
       Set xlObj = Nothing    'Nothing.

   End Sub

</PRE>This macro works correctly with Microsoft Excel 5.0, 7.0, or Microsoft
Excel 97. The macro also works correctly when you run it from Microsoft
Visual Basic, Microsoft Word 97, or any other program (including Microsoft
Excel) that supports Visual Basic or Visual Basic for Applications.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: XL97 automate ole automation<BR>
Keywords          : kbcode kbprg kbfaq<BR>
Version           : WINDOWS:97<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 13, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

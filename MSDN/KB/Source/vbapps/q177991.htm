

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Limitations of Passing Arrays to Excel Using Automation </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q177991">
<META NAME="KBModify" CONTENT="1998/02/27">
<META NAME="KBCreate" CONTENT="1997/12/11">
<META NAME="Keywords" CONTENT="kbcode kbprg IntpOleA AutoGnrl OffVBA">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  This article discusses limitations in passing arrays to Microsoft Excel worksheets and macros using Automation. If these limitations are exceeded, you may receive run-time errors in your Automation code.  MORE INFORMATION  Microsoft provides progra...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVP,QAH6,QAD7,QAH7,QAB4,QABN,QAH4,QDO5,QBS0,QAPN,QAKC,QAAP,QBC6,QAHE,QAFF P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Limitations of Passing Arrays to Excel Using Automation</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 27, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q177991</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel for Windows, version 5.0c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses limitations in passing arrays to Microsoft Excel
worksheets and macros using Automation. If these limitations are exceeded,
you may receive run-time errors in your Automation code.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>When passing arrays to Microsoft Excel using Automation, the following
limitations apply, depending on the version of Excel and whether you are
passing the array to a worksheet range or as an argument to a macro. See
the appropriate footnotes following the table for details.
<P>
<PRE>   Version of          Passing Array to     Passing Array to
   Microsoft Excel     Worksheet Range      Macro (Procedure)
   ----------------------------------------------------------

   5.0                        A                B,C

   7.0 (Excel 95)             D                E,C,H

   8.0 (Excel 97)             F                G,H

</PRE><h3>Footnotes</h3>
 
<P>
A:
<P>
The maximum number of elements in the array is approximately 6550. If you
exceed this limit, you receive one or both of the following error messages:
<P>
<PRE>   Out of Memory
   1005: Unable to set the Value property of the Range class

</PRE>The maximum number of elements in the array that you can pass to Excel
using the Excel Transpose function is 4095. If you exceed this limit, you
receive the following error message:
<P>
<PRE>   Run-time error '1004':
   Transpose method of Application class failed

</PRE>B:
<P>
The maximum number of elements in the array is 4095. If you exceed this
limit, you may receive the following error message:
<P>
<PRE>   Run-time error '1004':
   Run method of Application class failed

</PRE>Note: When passing a multidimensional array, you may not receive an error
message, but the Excel macro will not run when the total number of elements
exceeds 4095.
<P>
C:
<P>
When defining the array parameter in the Excel macro, it must be defined as
a Variant variable or you will receive the following error message when you
attempt to run the macro using Automation:
<P>
<PRE>   Run-time error '1004':
   Cannot find macro &lt;macro name&gt;

</PRE>For example, suppose the name of your macro in Excel is AcceptArray. Here
is an example of how the array must be defined in the Excel macro:
<P>
<PRE>   Public Sub AcceptArray(ByVal myarray As Variant)
      ' You can pass the parameter either ByVal or ByRef.
      ' To determine the number of elements in the array, use
      ' the UBound function.
   End Sub

</PRE>D:
<P>
The maximum number of elements in the array is 5461. If you exceed this
limit, you receive one of the following error messages:
<P>
<PRE>   Run-time error '1004':
   Transpose method of Application class failed

   - or -

   Run-time error '1005':
   Unable to set the Value property of the Range class

</PRE>E:
<P>
The maximum number of elements in the array is 5461. If you exceed this
limit, you receive the following error message:
<P>
<PRE>   Run-time error '1004':
   Run method of Application class failed

</PRE>F:
<P>
The maximum number of elements in the array is limited by available memory
or the Excel worksheet maximum size (65536 rows X 256 columns). However,
the maximum number of elements in the array that you can pass to Excel
using the Excel Transpose function is 5461. If you exceed this limit, you
receive the following error message:
<P>
<PRE>   Run-time error '13':
   Type Mismatch

</PRE>G:
<P>
The maximum number of elements in the array is limited only by available
memory. Also, you do not have to define the parameter as a Variant variable
in the Excel macro. However, if you want to pass the array ByVal, you must
define the parameter as a Variant variable as in the example in footnote C
earlier in this article. You will get a run-time error 13, "Type Mismatch"
error, if you do not define the variable as a Variant.
<P>
H:
<P>
When passing an argument ByRef to an out-of-process Automation server, such
as Excel, marshalling of the data is done between the Automation controller
(or client) and server since they run in separate processes. This means
that when an array is passed to Excel using ByRef, a copy of the array is
sent to the address space of Excel. After the Excel procedure runs, a copy
of the array is passed back to the client. Although this does allow for
passing arguments using ByRef to an out-of-process server, it is not very
efficient. On the other hand, when using an in-process automation server (a
dynamic-link library (DLL)) and you pass an argument ByRef, this is very
efficient since no marshalling is done. The server is using the same array
in memory as the client. This is possible since the server runs in the same
address space as the client.
<P>
Because of marshalling with an out-of-process server such as Excel, it is
more efficient to pass the array ByVal instead of ByRef. This way, only one
copy is passed to Excel and Excel does not have to pass the copy back to
the client. To pass an array ByVal to an Excel macro, you must define the
parameter in the Excel macro as a Variant variable. See footnote C earlier
in this article for an example.
<P>
<P><h3>Sample Visual Basic Procedures</h3>
 
<P>
The following sample Microsoft Visual Basic for Applications Sub procedures
show how to pass arrays to Excel. The first two procedures show how to
populate a range of cells on a worksheet by passing an array to a worksheet
range. The third procedure shows how to pass an array to an Excel macro.
<P>
The following declarations are used with each example:
<P>
<PRE>   Option Explicit
   Private xlApp As Object
   Private xlBook As Object
   Private xlSheet As Object

</PRE>Passing a 1-Dimensional Array to a Worksheet Range:
<P>
<PRE>   Public Sub OneDimension()
      Const size = 5461
      Dim myarray(1 To size) As Integer
      Set xlApp = CreateObject("Excel.Application")
      xlApp.Visible = True
      Set xlBook = xlApp.Workbooks.Add
      Set xlSheet = xlBook.Worksheets("Sheet1")
      xlSheet.Cells(1, 1).Resize(size, 1).Value = _
         xlApp.Application.Transpose(myarray)
   End Sub

</PRE>Passing a 2-Dimensional Array to a Worksheet Range:
<P>
<PRE>   Public Sub TwoDimension()
      Const size = 2730
      Dim myarray(1 To size, 1 To 2) As Integer
      ' Number of elements = 2730 * 2 = 5460.
      Set xlApp = CreateObject("Excel.Application")
      xlApp.Visible = True
      Set xlBook = xlApp.Workbooks.Add
      Set xlSheet = xlBook.Worksheets("Sheet1")
      xlSheet.Cells(1, 1).Resize(size, 2).Value = myarray
   End Sub

</PRE>Passing an Array as an Argument to an Excel Macro:
<P>
<PRE>   Public Sub RunExcelMacro()
      Const size = 5461
      Dim myarray(1 To size) As Integer
      Set xlApp = CreateObject("Excel.Application")
      xlApp.Visible = True
      Set xlBook = xlApp.Workbooks.Open("C:\MyBook.xls")
      xlApp.Run "AcceptArray", myarray
   End Sub

</PRE>The AcceptArray procedure within a module inside C:\MyBook.xls resembles
the following:
<P>
<PRE>   Option Explicit

   Public Sub AcceptArray(ByVal myarray As Variant)
      MsgBox "Size of first dimension: " &amp; UBound(myarray, 1)
   End Sub

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about arrays and Excel, please see the following
articles in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../EXCEL/Q75376.htm">Q75376</A></B>
   TITLE     : XL: Maximum Array Size in Microsoft Excel

   ARTICLE-ID: <B><A HREF="../EXCEL/Q166342.htm">Q166342</A></B>
   TITLE     : XL97: Maximum Array Size in Microsoft Excel 97

   ARTICLE-ID: <B><A HREF="../VBWIN/Q153307.htm">Q153307</A></B>
   TITLE     : HOWTO: Call Microsoft Excel Macros that Take Parameters

   ARTICLE-ID: <B><A HREF="../VBWIN/Q153090.htm">Q153090</A></B>
   TITLE     : How To Pass a Visual Basic Array to an Excel Worksheet

</PRE>For more information about getting help with Visual Basic for Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 8.0 ole<BR>
Keywords          : kbcode kbprg IntpOleA AutoGnrl OffVBA<BR>
Version           : WINDOWS:5.0,5.0c,7.0,7.0a,97<BR>
Platform          : WINDOWS<BR>
Issue type        : kbinfo<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 27, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

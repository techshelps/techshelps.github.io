

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WD98: Incorrect Tab Settings Using WordBasic.FormatTabs </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q181290">
<META NAME="KBModify" CONTENT="1998/03/03">
<META NAME="KBCreate" CONTENT="1998/02/17">
<META NAME="Keywords" CONTENT="kbdta kbdtacode OffVBA macword98">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  When you use positional arguments instead of named arguments for the WordBasic.FormatTabs command, incorrect tab settings are made. For example, the following sample WordBasic code produces incorrect tab settings:     Sub TestTabs()       WordBasic...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Security" CONTENT="PUBLIC ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QA5F,QAIH,QAPN,QAHE,QABA,QACI,QAPF,QAH4,QAGB,QARP,QAMB,QAVZ,QAHT,QAEB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>WD98: Incorrect Tab Settings Using WordBasic.FormatTabs</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q181290</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Word 98 Macintosh Edition
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When you use positional arguments instead of named arguments for the
WordBasic.FormatTabs command, incorrect tab settings are made. For example,
the following sample WordBasic code produces incorrect tab settings:
<P>
<PRE>   Sub TestTabs()
      WordBasic.FormatTabs "2 in", , 3, 2, 1, 0, 0
   End Sub

</PRE>After running this example, a right tab with a period leader is set at 2
inches when the expected result would be a decimal tab with a hyphen leader
set at 2 inches.
<P>
<P><h2>WORKAROUND</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE>To work around this problem, use one of the following methods.
<P>
<P><h3>Method 1: Add an Extra Comma for the Positional Arguments</h3>
 
<P>
Correct the order of the arguments by adding an extra comma, as in the
following example:
<P>
<PRE>   WordBasic.FormatTabs "2 in",,,3,2,1,0,0

</PRE><h3>Method 2: Use Named Arguments</h3>
 
<P>
Modify the statement to use named arguments, as in the following example:
<P>
<PRE>   WordBasic.FormatTabs Position := "2 in", Align := 3, \
   Leader := 2, Set := 1

</PRE><h2>MORE INFORMATION</h2>
 
<P>
Following is the position order of the arguments for FormatTabs.
<P>
<PRE>   FormatTabs [.Position = text] [.DefTabs = text] [.Align = number]
   [.Leader = number] [.Set] [.Clear] [.ClearAll]

   .Position   Position of the tab stop in a text measurement.

   .DefTabs    Position for default tab stops in the document in points or
               a text measurement.

   .Align      Alignment of the tab stop:

                  0 (zero)    Left
                  1           Center
                  2           Right
                  3           Decimal
                  4           Bar

   .Leader     The leader character for the tab stop:

                  0 (zero)    None
                  1           Period
                  2           Hyphen
                  3           Underscore

   .Set        Sets the specified custom tab stop.

   .Clear      Clears the specified custom tab stop.

   .ClearAll   Clears all custom tab stops.

</PRE>In the versions of Word listed at the beginning of this article, WordBasic
has been replaced with Visual Basic for Applications. For backward
compatibility, Visual Basic for Applications contains a WordBasic object.
To ensure that the WordBasic command and arguments are positioned
correctly, use the Position.hlp file for Word for Windows version 6.x.
<P>
NOTE: If your programming language was written to call WordBasic commands,
and you are anticipating interacting with the Microsoft Word Visual Basic
for Applications language for all future development needs, you should
convert your code from WordBasic to Microsoft Word Visual Basic for
Applications.
<P>
For additional information, please see the following article in the
Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163618.htm">Q163618</A></B>
   TITLE     : WD97: Writing Macro Code for Word 97 and Word 7.x
               (Branching)

</PRE><h2>REFERENCES</h2>
 
<P>
For more information about getting help with Visual Basic for Applications,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q163435.htm">Q163435</A></B>
   TITLE     : VBA: Programming Resources for Visual Basic for
               Applications
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words:<BR>
Keywords          : kbdta kbdtacode OffVBA macword98<BR>
Version           : MACINTOSH:98<BR>
Platform          : MACINTOSH<BR>
Issue type        : kbprb<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

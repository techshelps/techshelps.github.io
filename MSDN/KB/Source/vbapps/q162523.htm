

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC97: Migrating from Data Outline Control to TreeView Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q162523">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1997/01/22">
<META NAME="Keywords" CONTENT="kbprg kbusage PgmObj kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  The Data Outline control is not included with the Microsoft Office 97 Developer Edition (ODE) as it is in the Microsoft Access Developer's Toolkit versions 2.0 and 7.0. The ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7O,QAB5,QAOE,QAMN,QAPN,QAIB,QAHV,QA1S,QAYY,QBCF,QDN9,QAPF,QAA3,QBWS,QBXS P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC97: Migrating from Data Outline Control to TreeView Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q162523</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access 97
<LI>Microsoft Office Developer Edition 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
The Data Outline control is not included with the Microsoft Office 97
Developer Edition (ODE) as it is in the Microsoft Access Developer's
Toolkit versions 2.0 and 7.0. The TreeView control enables you to display a
hierarchical list of items, and you can use it in your Microsoft Access 97
database as a replacement for the Data Outline control.
<P>
This article discusses some differences you may encounter when you use the
TreeView control in place of the Data Outline control. It covers the
following topics:

<UL><LI>How to Fill Levels with Data in the TreeView Control
<LI>How to Link Nodes in the TreeView Control
<LI>How to Associate a TreeView Node with a Form in Your Database
<LI>Distributing the TreeView Control with a Run-time Application
<LI>Differences in Event Models Between TreeView and Data Outline Controls
<LI>TreeView Control Performance
<LI>Limitations of the TreeView Control vs. the Data Outline Control
<P>
</UL>NOTE: In order to make it easier for you to upgrade a database that uses
the Data Outline control in Microsoft Access 97, you can obtain version
1.2 of the Data Outline control free from Microsoft's download services.
Version 1.2 of the Data Outline control works with Microsoft Access 97
databases. However, an updated Data Outline control will not be available
in future releases, and it is strongly recommended that you migrate to a
different control, such as the TreeView control, for all new development.
For information about downloading version 1.2 of the Data Outline control,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../ACCESS/Q162359.htm">Q162359</A></B>
   TITLE     : ACC97: Access 97 Data Outline ActiveX Control Available on
               MSL

</PRE>This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to the "Building
Applications with Microsoft Access 97" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Both the TreeView control and the Data Outline control can display
hierarchical data. However, the ways in which you populate the controls
with data are quite different. For example, many features of the Data
Outline control that you set in its property sheet must be set with Visual
Basic code in the TreeView control.
<P>
A key element in the TreeView control is the Node object in the Nodes
collection. You use the Nodes collection to create hierarchical levels in
the TreeView control.
<P>
<P><h3>How to Fill Levels with Data in the TreeView Control</h3>
 
<P>
You must use Visual Basic code to fill a level in the TreeView control
with data. In most cases, you open a RecordSet object and loop through the
records to create Nodes in the TreeView control. The following example
populates a TreeView control with a list of Customers in the Northwind
sample database.

<OL><P><LI>Start Microsoft Access and open the sample database Northwind.mdb

<P><LI>Create a new form not based on any table or query in Design view.

<P><LI>On the Insert menu, click ActiveX Control.

<P><LI>In the Insert ActiveX Control dialog box, select Microsoft TreeView
   Control, version 5.0, and then click OK.

<P><LI>Set the following properties for the TreeView control:
<P>
<P><PRE>      Name: axTreeView
      Width: 3"
      Height: 2"
</PRE>
<P><LI>Set the form's OnLoad property to the following event procedure:
<P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         Dim DB As Database, RS As RecordSet
         Set DB = CurrentDb

         ' Open a Recordset and loop through it to fill the TreeView
         ' control.
         Set RS = DB.OpenRecordset("Customers", dbOpenForwardOnly)
         Do Until RS.EOF
            Me!axTreeView.Nodes.Add , , RS!CustomerID, RS!CompanyName
            RS.MoveNext
         Loop
         RS.Close
      End Sub

</PRE><P><LI>Save the form as frmCustList and switch to Form view. Note that the
   TreeView control fills with a list of Customer names.
<P>
</OL><h3>How to Link Nodes in the TreeView Control</h3>
 
<P>
Each level in the Data Outline control has a LinkMasterFields property
that enables you to link each level in the form to the level above it. In
the TreeView control, you use the Key property of the Node object to link
one node to another.
<P>
You can set the Key property when you use the Add method of the Nodes
collection to add a level to the TreeView control. Then you reference that
key when you add new nodes to the TreeView control, and that is how
different levels are linked together. Following are some important tips
about using the Key property:

<UL><LI>The value of each Key property in the TreeView control must be unique.
   For example, the value of the Key property for a node in the second
   level of your control cannot duplicate the value of any keys you
   created anywhere else in the control. If you duplicate a key anywhere
   in your control, you receive the following trappable error:
<P>
<P><PRE>      Run-time error '35602':
      Key is not unique in collection
</PRE>
<LI>The Key property must contain some non-numeric data. If you use the
   primary key field of a table as the key for a node, and if that field
   is numeric, you can easily concatenate some text before or after the
   value to satisfy this requirement. If your key does not contain non-
   numeric data, you receive the following trappable error:
<P>
<P><PRE>      Run-time error '35603':
      Invalid key
</PRE>
<LI>The Key property is case-sensitive. For example, "ALFKI" is a different
   key than "alfki." You can easily resolve this case sensitivity by using
   the StrConv() function to explicitly convert all of your keys to the
   same case.
<P>
</UL>The following example builds on the form you created in the previous
section and creates three levels in the TreeView control showing
customers, orders, and order details. Note in the example how the letter
"t" and the StrConv() function are used when creating the second level to
satisfy the requirements of the Key property.

<OL><P><LI>Start Microsoft Access and open the sample database Northwind.mdb.

<P><LI>Open the frmCustList form in Design view.

<P><LI>Change the event procedure in the form's OnLoad property to the
   following:
<P>
<P><PRE>      Private Sub Form_Load()
<PRE></PRE>         Dim DB As Database, RS As RecordSet
         Dim strOrderKey As String
         Set DB = CurrentDb

         ' Fill Level 1 using CustomerID as the Key property.
         Set RS = DB.OpenRecordset("Customers", dbOpenForwardOnly)
         Do Until RS.EOF
            Me!axTreeView.Nodes.Add , , RS!CustomerID, RS!CompanyName
            RS.MoveNext
         Loop
         RS.Close

         ' Fill Level 2.
         Set RS = DB.OpenRecordset("Orders", dbOpenForwardOnly)
         Do Until RS.EOF
            ' Link to Level 1 by referencing the CustomerID key and set
            ' the node as a child node of Level 1. Use "t" and the
            ' StrConv() function in the new Key property for Level 2,
            ' because OrderID is a numeric field.
            strOrderKey = StrConv("t" &amp; RS!OrderID, vbLowerCase)
            Me!axTreeView.Nodes.Add RS!CustomerID, tvwChild, strOrderKey, _
               RS!OrderID &amp; "   " &amp; RS!OrderDate
            RS.MoveNext
         Loop
         RS.Close

         ' Fill Level 3.
         Set RS = DB.OpenRecordset("Order Details", dbOpenForwardOnly)
         Do Until RS.EOF
            ' Link to Level 2 by referencing the strOrderKey key and set
            ' the node as a child node of Level 2.
            strOrderKey = StrConv("t" &amp; RS!OrderID, vbLowerCase)
            Me!axTreeView.Nodes.Add strOrderKey, tvwChild, RS!ProductID, _
               RS!ProductID &amp; "   " &amp; Format(RS!UnitPrice, "Currency")
            RS.MoveNext
         Loop
         RS.Close
      End Sub

</PRE><P><LI>Save the form and switch to Form view. Double-click a customer's name
   to expand one level and see the order numbers and dates for that
   customer; double-click an order number to see the product number and
   unit price for each item in the order.
<P>
</OL><h3>How to Associate a TreeView Node with a Form in Your Database</h3>
 
<P>
Each level in the Data Outline control has a FormName property that you
can set to associate a particular form with a level in the control. In the
TreeView control, you can use the NodeClick event to reference the
currently selected node, and then use the Key property of the node in the
OpenForm method's Where condition to open a form to the correct record.
For example:
<P>
<PRE>   Private Sub axTreeView_NodeClick(ByVal Node As Object)
      DoCmd.OpenForm "Customers", , , "[CustomerID] = '" &amp; Node.Key &amp; "'"
   End Sub

</PRE></OL>You can also add the same functionality to a button on your form, as the
following example illustrates.
<P>
The following example builds on the form you created in the previous
sections. It uses the length of the Key value for the selected node to
determine whether to open the Customers, Orders, or Products form.

<OL><P><LI>Start Microsoft Access and open the sample database Northwind.mdb.

<P><LI>Open the frmCustList form in Design view.

<P><LI>Add a Command button to the form and set the following properties:
<P>
<P><PRE>      Name: cmdOpenForm
      Caption: View Details
      OnClick: [Event Procedure]
</PRE>
<P><LI>Set the OnClick property of the command button to the following event
   procedure:
<P>
<P><PRE>      Private Sub cmdOpenForm_Click()
<PRE></PRE>         Dim CurNode As Node
         Set CurNode = Me!axTreeView.SelectedItem
         On Error GoTo cmdOpenForm_Error
         ' Evaluate the Key value of the selected node.
         Select Case Len(CurNode.Key)
            ' All CustomerID keys are 5 characters long.
            Case 5
               DoCmd.OpenForm "Customers", , , "[CustomerID] = '" &amp; _
                  CurNode.Key &amp; "'"
            ' All OrderID keys are 6 characters long.
            Case 6
               DoCmd.OpenForm "Orders", , , "[OrderID] = " &amp; Mid _
                  (CurNode.Key, 2)
            ' Anything else must be an Order Detail record.
            Case Is &gt; 6
               ' Extract the ProductID from the node key to use in the
               ' Where condition when you open the Products form.
               Dim i As Integer
               i = InStr(CurNode.Key, "p")
               DoCmd.OpenForm "Products", , , "[ProductID] = " &amp; Mid _
                  (CurNode.Key, i + 1)
         End Select
         Exit Sub
      cmdOpenForm_Error:
         Select Case Err
            ' If error is because nothing is selected in TreeView.
            Case 91
               MsgBox "Please select an item in the TreeView control."
            Case Else
               MsgBox "Error: " &amp; Err &amp; vbCr &amp; Err.Description
         End Select
         Exit Sub
      End Sub

</PRE><P><LI>Save the form and switch to Form view. Select any node on any level in
   the TreeView control, and then click the View Details button to open the
   associated form to the correct record.
<P>
</OL>If an editable field on the form that is opened contains data that is
displayed in your TreeView control, you can write code to update the Text
property of the selected TreeView node if data changes on the form. For
example, if your TreeView control displays the CompanyName field from the
Customers table, you can add code to the AfterUpdate event of the
CompanyName field on the Customers form to update your TreeView node:
<P>
<PRE>   Forms!MyForm!MyTreeView.SelectedItem.Text = Forms!Customers!CompanyName

</PRE></OL>This method is faster than clearing and refilling the entire TreeView
control when only one record has changed.
<P>
Also, if a user can change a field that you are using in the Key property
of a node in your TreeView control, you must update that Key property. You
only have to update the parent node, and the change is automatically
propagated to all child nodes:
<P>
<PRE>   Forms!MyForm!MyTreeView.SelectedItem.Key = Forms!Customers!CustomerID

</PRE><h3>Distributing the TreeView Control with a Run-time Application</h3>
 
<P>
The TreeView control is contained in the Comctl32.ocx file, which
Microsoft Office 97 Developer Edition (ODE) sets up in your Windows System
folder. You must include this file when you redistribute an application
that contains the TreeView control.
<P>
When you include Comctl32.ocx in the List Of Files box in the Setup
Wizard, the Wizard searches for that file's dependency file, Comctl32.dep.
The dependency file tells the Setup Wizard what other support files need
to be included with the ActiveX control. If you have Comctl32.dep on your
hard drive, you will notice that the Setup Wizard automatically includes
Comcat.dll in the List Of Files box when you add Comctl32.ocx; Comcat.dll
is a required support file for Comctl32.ocx. If the Setup Wizard cannot
locate the Comctl32.dep file, you must manually add Comcat.dll to the list
of files you redistribute with your application.
<P>
<P><h3>Differences in Event Models Between TreeView and Data Outline Controls</h3>
 
<P>
The Data Outline and TreeView controls each support different event
models. As a result, you may have to rewrite portions of your code when
you migrate from the Data Outline control to the TreeView control. The
following table compares the events in the two controls and identifies
where no corresponding event is available.
<P>
<PRE>   Data Outline Control Event   TreeView Control Event
   ---------------------------------------------------
   AfterCollapse                Collapse
   AfterExpand                  Expand
   AfterFormClose               &lt;none&gt;
   AfterFormOpen                &lt;none&gt;
   AfterFormUpdate              &lt;none&gt;
   AfterMove                    &lt;none&gt;
   AfterRefresh                 &lt;none&gt;
   AfterRequery                 &lt;none&gt;
   AfterSelChange               NodeClick
   AfterStartup                 &lt;none&gt;
   DoKeyPress                   KeyPress
   DoRowClick                   &lt;none&gt;  (Closest events are Click and
                                         MouseDown)
   DoRowDblClick                &lt;none&gt;  (Closest event is DblClick)
   Enter                        Enter
   ErrorEvent                   &lt;none&gt;
   Exit                         Exit
   FailCollapse                 &lt;none&gt;
   FailExpand                   &lt;none&gt;
   FailFormOpen                 &lt;none&gt;
   FailFormUpdate               &lt;none&gt;
   FailMove                     &lt;none&gt;
   FailSelChange                &lt;none&gt;
   GotFocus                     GotFocus
   KeyDown                      KeyDown
   KeyUp                        KeyUp
   LostFocus                    LostFocus
   MouseDblDown                 &lt;none&gt;  (Closest event is DblClick)
   MouseDown                    MouseDown
   MouseUp                      MouseUp
   RequestCollapse              &lt;none&gt;  (Closest event is Collapse)
   RequestExpand                &lt;none&gt;  (Closest event is Expand)
   RequestFormOpen              &lt;none&gt;
   RequestFormUpdate            &lt;none&gt;
   RequestHelp                  &lt;none&gt;
   RequestMove                  &lt;none&gt;
   RequestSelChange             &lt;none&gt;
   Updated                      Updated
   &lt;none&gt;                       AfterLabelEdit
   &lt;none&gt;                       BeforeLabelEdit
   &lt;none&gt;                       MouseMove
   &lt;none&gt;                       OLECompleteDrag
   &lt;none&gt;                       OLEDragDrop
   &lt;none&gt;                       OLEDragOver
   &lt;none&gt;                       OLEGiveFeedback
   &lt;none&gt;                       OLESetData
   &lt;none&gt;                       OLEStartDrag

</PRE><h3>TreeView Control Performance</h3>
 
<P>
Filling TreeView nodes from an array is faster than filling them from a
Recordset object. However, it is common to use the TreeView control to
display data from a table or a query, so Recordset objects are used
frequently. You can improve the speed with which your TreeView fills with
data by using the DbOpenForwardOnly argument of the OpenRecordset method,
as shown in the examples in this article.
<P>
If you open and loop through Recordset objects to fill TreeView nodes with
data, it may take some time to open a form or to display TreeView control
data when you are working with large recordsets. In contrast, the Data
Outline control automatically binded to your data, which made it faster to
see data from large tables or queries.
<P>
<P><h3>Limitations of the TreeView Control vs. the Data Outline Control</h3>
 
<P>
The Data Outline control and the TreeView control are very different from
one another in many respects. Because the TreeView control can display
hierarchical data, it is the best choice among the ODE controls to replace
your Data Outline control; however, there are some features of the Data
Outline control that the TreeView control cannot emulate. For example:

<UL><LI>The TreeView control can only display one-to-one or one-to-many
   relationships between the levels in the control; the Data Outline
   control permits many-to-one relationships as well in its levels.

<LI>You cannot set font properties for each level of data in the TreeView
   control; however, you can select a single font for all levels in the
   control.

<LI>There is no DisplayWidths property in the TreeView control as there is
   in the Data Outline control, which can make it awkward to display two or
   more items of data in a single node. For example, if your TreeView node
<PRE>   displays CustomerID &amp; "   " &amp; CompanyName, the alignment of the data
   will be inconsistent if the size of the CustomerID field varies. You
   might see a node that looks like this:

      1   ABC Company
      27   A Second Company
      4   XYZ Company
      427   Northwind Traders

   You can compensate for this limitation by writing code to test the width
   of each field, and then pad with an appropriate number of spaces to
   properly align the columns.

</PRE></UL><h2>REFERENCES</h2>
 
<P>
For more information about using the TreeView control in Microsoft Access
97, search the Help Index for "TreeView control."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: ADT<BR>
Keywords          : kbprg kbusage PgmObj kbfaq<BR>
Version           : 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

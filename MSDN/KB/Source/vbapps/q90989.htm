

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Find If an Object Exists in a Database </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q90989 ">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1994/08/17">
<META NAME="Keywords" CONTENT="kbprg PgmHowTo PgmObj MdlDao">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article describes a sample user-defined function that you can use to check for the existence of an object in the current database before you create a new object (such as a t...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA1S,QDN9,QAH4,QAUJ,QAPN,QAW6,QAY5,QABM,QA5F,QAMA,QAGX,QAZV,QAHD,QBV8,QBS0 P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Find If an Object Exists in a Database</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q90989 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article describes a sample user-defined function that you can use to
check for the existence of an object in the current database before you
create a new object (such as a table, form, or report) in the database.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access versions 1.x and 2.0. For more information about Access Basic,
please refer to the "Introduction to Programming" manual in Microsoft
Access version 1.x or the "Building Applications" manual in Microsoft
Access version 2.0
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
To create the function, open a new module and enter the appropriate code
for your version of Microsoft Access.
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.
<P>
<PRE> Microsoft Access Versions 2.0, 7.0, and 97
 ------------------------------------------

  '********************************************************************
   'Declarations section of the module

  '********************************************************************

   Option Explicit

  '********************************************************************
   ' FUNCTION: ObjectExists_20()
   '
   ' PURPOSE:
   '    Determines whether the specified object exists in the
   '    current database.
   '
   ' ARGUMENTS:
   '    ObjectType - A string representing the object whose names are to
   '                 be retrieved. ObjectType can be one of the
   '                 following:
   '
   '                 Tables, Queries, Forms, Reports, Macros, Modules
   '
   '    ObjectName - A string representing the name of the specified
   '                 ObjectType.
   '
   ' RETURNS:
   '    True (-1), if the object exists.
   '    False (0), if the object does not exist.
   '
   ' NOTES:
   '    This function uses data access objects (DAO) to determine if
   '    the specified object exists in the current database.
   '
  '********************************************************************

   Function ObjectExists_20% (ObjectType$, ObjectName$)
   On Error Resume Next

   Dim Found_Object%, Find_Object As String, ObjectNum As Integer
   Dim DB As Database, T As TableDef
   Dim Q As QueryDef, C  As Container
   Dim Msg As String
   Found_Object% = -1
   Set DB = dbengine(0)(0)

   Select Case ObjectType$
   Case "Tables"
       Find_Object = DB.TableDefs(ObjectName$).Name

   Case "Queries"
       Find_Object = DB.QueryDefs(ObjectName$).Name

   Case Else
       If ObjectType$ = "Forms" Then
           ObjectNum = 1
       ElseIf ObjectType$ = "Modules" Then
           ObjectNum = 2
       ElseIf ObjectType$ = "Reports" Then
           ObjectNum = 4
       ElseIf ObjectType$ = "Macros" Then
           ObjectNum = 5
       Else
            Msg = "Object Name """ &amp; ObjectType &amp; """ is an invalid"
            Msg = Msg &amp; " argument to function ObjectExists_20!"
            MsgBox Msg, 16, "ObjectExists_20"
            Exit Function

       End If

       Set C = DB.Containers(ObjectNum)
       Find_Object = C.Documents(ObjectName$).Name

   End Select

   If Err = 3265 Or Find_Object = "" Then
       Found_Object% = 0
   End If

   ObjectExists_20% = Found_Object%

   End Function

</PRE><h3>Microsoft Access Version 1.x</h3>
 
<P>
NOTE: In the following sample code, an underscore (_) at the end of a line
is used as a line-continuation character. Remove the underscore from the
end of the line when re-creating this code in Access Basic.
<P>
<PRE> '********************************************************************
   'Declarations section of the module
 '********************************************************************

   Option Explicit

 '********************************************************************
   ' FUNCTION: ObjectExists_1x()
   '
   ' PURPOSE:
   '    Determines whether the specified object exists in the
   '    current database.
   '
   ' ARGUMENTS:
   '    ObjectType - A string representing the object whose names are to
   '                 be retrieved. ObjectType can be one of the
   '                 following:
   '
   '                 Tables, Queries, Forms, Reports, Macros, Modules
   '
   '    ObjectName - A string representing the name of the specified
   '                 ObjectType.
   '
   ' RETURNS:
   '    True (-1), if the object exists.
   '    False (0), if the object does not exist.
   '
   ' NOTES:
   '    This function uses information stored in the MSysObjects
   '    system table of the current database. The system tables
   '    are undocumented and are subject to change in future versions of
   '    Microsoft Access.
   '
 '********************************************************************
   Function ObjectExists_1x% (ObjectType As String, ObjectName As String)
      On Error Resume Next

      Dim db As Database
      Dim ss As Snapshot
      Dim SQL
      Dim Msg As String

      SQL = "Select Name, Type from MSysObjects Where Type="

      ObjectExists_1x% = 0

      Select Case ObjectType
         Case "Tables"
            SQL = SQL &amp; "1 And [Name] = '" &amp; ObjectName &amp; "'Order By _
                Name;"
      Case "Queries"
         SQL = SQL &amp; "5 And [Name] = '" &amp; ObjectName &amp; "'Order By Name;"
      Case "Forms"
         SQL = SQL &amp; "-32768 And [Name] = '" &amp; ObjectName &amp; "' Order By _
         Name;"
      Case "Reports"
         SQL = SQL &amp; "-32764 And [Name] = '" &amp; ObjectName &amp; "' Order By _
         Name;"
      Case "Macros"
         SQL = SQL &amp; "-32766 And [Name] = '" &amp; ObjectName &amp; "' Order By _
         Name;"
      Case "Modules"
         SQL = SQL &amp; "-32761 And [Name] = '" &amp; ObjectName &amp; "' Order By _
         Name;"
      Case Else
         Msg = "Object Name """ &amp; ObjectType &amp; """ is an invalid"
         Msg = Msg &amp; " argument to function ObjectExists_1x!"
         MsgBox Msg, 16, "ObjectExists_1x"
         Exit Function
      End Select

      Set db = CurrentDB()
      Set ss = db.CreateSnapshot(SQL)

      ss.MoveLast
      If ss.RecordCount &gt; 0 Then
         ObjectExists_1x% = -1
      End If

   End Function

</PRE><h3>How to Use the Function</h3>
 

<OL><P><LI>Open the module containing the function in Design view, and on the
   View menu, click Debug Window (or Immediate Window in version 2.0 or
   earlier).

<P><LI>If you are using Microsoft Access version 1.x, type the following line
   in the Immediate window, and then press ENTER:
<P>
<P><PRE>      ?ObjectExists_1x("Tables","Employees")
</PRE><P>
   If you are using Microsoft Access versions 2.0, 7.0, or 97, type the
   following line in the Debug window, (or Immediate window) and then
   press ENTER:
<P>
<P><PRE>      ?ObjectExists_20("Tables","Employees")
</PRE><P>
</OL>If a table named Employees exists in the current database, - 1 will be
returned. If no table named Employees exists, 0 will be returned.
 
<PRE>Keywords          : kbprg PgmHowTo PgmObj MdlDao
Version           : 1.0 1.10 2.0 7.0 97
Platform          : WINDOWS
Hardware          : x86
Issue type        : kbhowto</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

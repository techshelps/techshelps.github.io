

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: Do Not Define Functions in DLLs that Raise an Exception </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129944">
<META NAME="KBModify" CONTENT="1997/09/29">
<META NAME="KBCreate" CONTENT="1995/05/08">
<META NAME="Keywords" CONTENT="APrgOther VB4ALL VB4WIN vbwin">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Visual Basic does not provide the capability to return rich error information from a DLL.  MkTypLib doesn't support '[retval]' on members of a DLL. This means that you can't define 'Functions' in a DLL that also raises an exception. This is a restr...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBS0,QAAP,QAB4,QA5F,QAMA,QAUD,QBVV,QAPN V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: Do Not Define Functions in DLLs that Raise an Exception</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129944</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Standard, Professional, and Enterprise Editions of Microsoft
   Visual Basic, 16-bit and 32-bit, for Windows, version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Visual Basic does not provide the capability to return rich error
information from a DLL.
<P>
MkTypLib doesn't support '[retval]' on members of a DLL. This means that
you can't define 'Functions' in a DLL that also raises an exception. This
is a restriction in Visual Basic version 4.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Visual Basic version 3.0 allowed DLLs to specify the error string (but not
the help file or context) via the VBSetErrorMessage call. This call is
also supported for Visual Basic version 4.0 16-bit DLLs.
<P>
Visual Basic version 4.0 supports calling DLL members that return HResults.
If an error HResult is returned, Visual Basic version 4.0 maps the HResult
to an EB error if possible and raises an exception with the given EBerr or
HResult. If it is not possible, Visual Basic uses the HResult as is. The
restrictions on this solution are:

<UL><LI>mktyplib doesn't support '[retval]' on members of a DLL. This means that
   users can't define 'Functions' in a DLL that also raises an exception.

<LI>This functionality can only be defined using a TypeLib. It is not
   possible to define this entry point using a Declare statement. If a
   programmer were to do it, they would define the return type as being a
   long, and Visual Basic would not do the appropriate return-type checking
   to raise an exception for an error.

<LI>No rich error information is provided. The only thing that can be
   returned is an error number. Visual Basic attempts to map this error
   number to a known Visual Basic error. If possible, it fills in the
   description string appropriately. Otherwise, it leaves the error alone,
   and displays 'OLE Automation Error' as the error string.
<P>
</UL>NOTE: In the Visual Basic version 3.0 API, 'VBRuntimeError' also allows the
DLL to specify an error number with Visual Basic version 3.0 providing the
error string. The difference is that because Visual Basic version 4.0 is
built on separate components, Visual Basic for Applications in Visual
Basic version 4.0 doesn't know all of the errors that Visual Basic version
3.0 did. That is, Visual Basic for Applications doesn't know any of the
form-specific errors; however, it is not likely that these are used much by
DLL writers.
<P>
You can provide DLL-like functionality and be able to return exceptions
including rich-error information by:

<UL><LI>Implementing an OLE object whose members are the exposed functions.

<LI>Tagging the object as an 'AppObject' in the ODL. This tag causes Visual
   Basic for Applications to promote the object's members to be global
   functions that look and behave like standard DLL runtime functions.
<P>
</UL>Because the implementation is an OLE object, exceptions can be returned in
the same way that exceptions can be returned from any OLE object. The
problem with this solution is that it costly for the DLL developer because
the DLL developer has to implement a full-blown OLE Object for this to
work.
 
<PRE>Keywords          : APrgOther VB4ALL VB4WIN vbwin
Technology        : kbvba
Version           : WINDOWS:4.0
Platform          : WINDOWS
Issue type        : kbinfo</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

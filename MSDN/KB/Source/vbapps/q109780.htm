

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XL: Branching to Other Sections of Code with GoTo and Call </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109780">
<META NAME="KBModify" CONTENT="1998/02/03">
<META NAME="KBCreate" CONTENT="1994/01/09">
<META NAME="Keywords" CONTENT="kbcode kbprg PgmOthr">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  In Microsoft Excel versions 5.0 and later, you can use the GoTo and Call  statements to branch to other sections of a Microsoft Visual Basic for  Applications procedure.  NOTE: In earlier versions of Microsoft Excel, you can do this with the GOTO()...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QA01,QBVP,QAB9,QAH4,QAPN,QAFF,QAIF,QA4F,QAUD,QAH6,QBS0,QDOL,QAKC,QADX P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>XL: Branching to Other Sections of Code with GoTo and Call</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 3, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109780</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Excel for Windows, versions 5.0, 5.0c
<LI>Microsoft Excel for the Macintosh, versions 5.0, 5.0a
<LI>Microsoft Excel for Windows NT, version 5.0
<LI>Microsoft Excel for Windows 95, versions 7.0, 7.0a
<LI>Microsoft Excel 97 for Windows
<LI>Microsoft Excel 98 Macintosh Edition
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In Microsoft Excel versions 5.0 and later, you can use the GoTo and Call 
statements to branch to other sections of a Microsoft Visual Basic for 
Applications procedure.
<P>
NOTE: In earlier versions of Microsoft Excel, you can do this with the
GOTO() and RUN() functions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Microsoft provides programming examples for illustration only, without
warranty either expressed or implied, including, but not limited to, the
implied warranties of merchantability and/or fitness for a particular
purpose. This article assumes that you are familiar with the programming
language being demonstrated and the tools used to create and debug
procedures. Microsoft support engineers can help explain the functionality
of a particular procedure, but they will not modify these examples to
provide added functionality or construct procedures to meet your specific
needs. If you have limited programming experience, you may want to contact
the Microsoft fee-based consulting line at (800) 936-5200. For more
information about the support options available from Microsoft, please see
the following page on the World Wide Web:
<P>
<PRE>   <B><A HREF="http://www.microsoft.com/support/supportnet/refguide/default.asp">http://www.microsoft.com/support/supportnet/refguide/default.asp</A></B>

</PRE><h3>GoTo</h3>
 
<P>
The GoTo statement jumps to and executes the instructions at the specific 
line label and continues executing until the end of the program is reached.
<P>
<P><h3>Call</h3>
 
<P>
The Call statement runs a procedure and then returns to the line
immediately after the Call statement in the originating procedure. The Call
statement can also pass arguments of any declared data type to the called
procedure and can transfer control to a Sub procedure, Function procedure,
dynamic link library (DLL) procedure, or Macintosh code resource procedure.
<P>
The following examples demonstrate how to use GoTo and Call.
<P>
<P><h3>Example 1: The Difference Between Call and GoTo</h3>
 
<P>
The following Visual Basic procedure demonstrates the difference between
using the GoTo statement and the Call statement.
<P>
<PRE>   Sub One()
       MsgBox ("One()")       ' Displays message box.

       ' Sends control to Line10 below.
       ' The GoTo Line10 statement directs the program to branch to the
       ' line labeled "Line10:", the message box "unexecuted code" is
       ' skipped.
       GoTo Line10

       ' This message box is not displayed.
       MsgBox ("unexecuted code")

   Line10:

       ' Displays message box.
       MsgBox ("Line10 of One()")

       ' The "Call Two()" line executes the subroutine defined as "Two()",
       ' sends a message box indicating that the subprocedure is executing,
       ' then returns to Sub One executing the line immediately after the       
       ' Call statement.
       ' Call made to Sub procedure named two()
       Call Two

       ' Message box displayed.
       MsgBox ("back to One(); returning from Two()")

   End Sub

   Sub Two()
       ' Message box displayed.
       MsgBox ("Two()")
   End Sub

</PRE>NOTE: The sample code above does not pass any arguments.
<P>
<P><h3>Example 2: An Alternative to the Call Statement</h3>
 
<P>
The following Visual Basic code makes a call to a another Sub procedure
without using the Call statement.
<P>
<PRE>   Sub One()
       MsgBox ("One()")              ' Message box displayed.
       two                           ' Call made to Sub named two().
       MsgBox ("return from Two()")  ' Message box displayed.
   End Sub

   Sub Two()
       MsgBox ("Two()")              ' Message box displayed.
   End Sub

</PRE><h3>Example 3: Using GoTo for Conditional Branching</h3>
 
<P>
The following code shows how you can combine the If...Then...Else statement
with the GoTo statement to provide more branching options or to create the
ability to return to a specific location after the GoTo statement is 
executed.
<P>
<PRE>   Sub GetInput()

       Dim number as Integer ' Used for input variable.

       ' User input requested. Val() to turn input text into a number.
       number = Val(InputBox("Enter a 1 or a 2."))

       ' Condition that is evaluated based on user input.
       If number = 1 Or number = 2 Then
           GoTo Line1
       Else
           GoTo Line2
       End If

   Line1:
       MsgBox ("Great! You entered a " &amp; number &amp; ".")
       GoTo LastLine

   Line2:
       MsgBox ("Sorry, you must enter a 1 or a 2.")

   LastLine:
       MsgBox ("End of program.")
   End Sub
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 5.00 5.00a 5.00c 7.00 7.00a XL98 XL97 XL7 XL5<BR>
Keywords          : kbcode kbprg PgmOthr<BR>
Version           : WINDOWS:5.0,7.0,97; MACINTOSH:5.0,98<BR>
Platform          : MACINTOSH WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 3, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

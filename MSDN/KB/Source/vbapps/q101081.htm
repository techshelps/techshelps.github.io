

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: Referring to a Field in the Previous or Next Record </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q101081">
<META NAME="KBModify" CONTENT="1998/02/04">
<META NAME="KBCreate" CONTENT="1993/07/04">
<META NAME="Keywords" CONTENT="kbusage FmsHowTo kbfaq">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Advanced: Requires expert coding, interoperability, and multiuser skills.  This article describes two ways to obtain values from the previous or next record for use in calculations. The first method uses the Dlookup()function in an expression; the ...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA5V,QA7O,QA7N,QBT6,QAKD,QBV4,QA4H,QAY2,QDMH,QAHP,QA1S,QAUD,QAGY,QAY5,QAKC P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: Referring to a Field in the Previous or Next Record</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 4, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q101081</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 1.0, 1.1, 2.0, 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Advanced: Requires expert coding, interoperability, and multiuser skills.
<P>
This article describes two ways to obtain values from the previous or next
record for use in calculations. The first method uses the Dlookup()function
in an expression; the second method uses two user-defined functions.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Using Dlookup()</h3>
 
<P>
NOTE: This technique assumes you have a table with an ID field of a numeric
data type. And, the ID values are not missing any number in sequential
order. If your table does not meet these criteria, then you should use the
"Using Code" method described later in this article.
<P>
You can use the following sample Dlookup() expressions to obtain values
from a field in the previous or next record of a form, a report, or a
query.
<P>
In a Form:
<P>
To obtain a value from a field in the previous record, type the following
line for the text box's ControlSource property:
<P>
<PRE>   =DLookUp("[Field]","Table","[ID]=Forms![Form1]![ID]-1")

</PRE>To obtain a value from a field in the next record, type the following line
for the text box's ControlSource property:
<P>
<PRE>   =DLookUp("[Field]","Table","[ID]=Forms![Form1]![ID]+1")

</PRE>In a Report:
<P>
To obtain a value from a field in the previous record, type the following
line for the text box's ControlSource property:
<P>
<PRE>   =DLookUp("[Field]","Table","[ID]=Reports![Report1]![ID]-1")

</PRE>To obtain a value from a field in the next record, type the following line
for the text box's ControlSource property:
<P>
<PRE>   =DLookUp("[Field]","Table","[ID]=Reports![Report1]![ID]+1")

</PRE>In a Query:
<P>
To obtain a value from a field in the previous record, type the following
line in the Field row of the query grid:
<P>
<PRE>   Expr1: DLookUp("[Field1]","Table1","[ID]=" &amp; [ID]-1)

</PRE>To obtain a value from a field in the next record, type the following line
in the Field row of the query grid:
<P>
<PRE>   Expr1: DLookUp("[Field1]","Table1","[ID]=" &amp; [ID]+1)

</PRE>NOTE: In these sample expressions, the "-1" and "+1" indicate the previous
and next records. When the current record is the first record in the
recordset, the "-1" returns a null value because there is no previous
record. Likewise, when the current record is the last record in the
recordset, the "+1" returns a null. If you want to return a value from a
record other than the next or previous one, you can specify a different
number, for example, "-3" for the third previous record.
<P>
<P><h3>Using Code</h3>
 
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
NOTE: Visual Basic for Applications is called Access Basic in Microsoft
Access version 1.x and Microsoft Access version 2.0.
<P>
To retrieve a value in a field from the previous or next record in a form
using code, follow these steps:

<OL><P><LI>Create a new module and type the following line in the Declarations
   section:
<P>
<P><PRE>      Option Explicit
</PRE>
<P><LI>Type the following procedures:
<P>
   NOTE: In the following sample code, an underscore (_) at the end of a
   line is used as a line-continuation character. If you are using a
   version of Microsoft Access earlier than 7.0, remove the underscore
   from the end of the line when re-creating this code.
<P>
<P><PRE>      '*************************************************************
      ' FUNCTION: PrevRecVal()
      ' PURPOSE: Retrieve a value from a field in the previous form
<PRE></PRE>      '          record.
      ' PARAMETERS:
      '    F        - The form from which to get the previous value.
      '    KeyName  - The name of the form's unique key field.
      '    KeyValue - The current record's key value.
      '    FieldNameToGet - The name of the field in the previous
      '                     record from which to retrieve the value.
      ' RETURNS: The value in the field FieldNameToGet from the
      '          previous form record.
      ' EXAMPLE:
      '    =PrevRecVal(Form,"ID",[ID],"OdometerReading")
      '**************************************************************
         Function PrevRecVal (F As Form, KeyName As String, KeyValue, _
         FieldNameToGet As String)
            Dim RS As Recordset

         On Error GoTo Err_PrevRecVal

            ' The default value is zero.
            PrevRecVal = 0

            ' Get the form recordset.
            Set RS = F.RecordsetClone

            ' Find the current record.
            Select Case RS.Fields(KeyName).Type
               ' Find using numeric data type key value?
               Case DB_INTEGER, DB_LONG, DB_CURRENCY, DB_SINGLE, _
               DB_DOUBLE, DB_BYTE
                  RS.FindFirst "[" &amp; KeyName &amp; "] = " &amp; KeyValue
               ' Find using date data type key value?
               Case DB_DATE
                  RS.FindFirst "[" &amp; KeyName &amp; "] = #" &amp; KeyValue &amp; "#"
               ' Find using text data type key value?
               Case DB_TEXT
                  RS.FindFirst "[" &amp; KeyName &amp; "] = '" &amp; KeyValue &amp; "'"
               Case Else
                  MsgBox "ERROR: Invalid key field data type!"
                  Exit Function
            End Select

            ' Move to the previous record.
            RS.MovePrevious

            ' Return the result.
            PrevRecVal = RS(FieldNameToGet)

         Bye_PrevRecVal:
            Exit Function
         Err_PrevRecVal:
            Resume Bye_PrevRecVal
         End Function

      '*************************************************************
      ' FUNCTION: NextRecVal()
      ' PURPOSE: Retrieve a value from a field in the next form
      '          record.
      '**************************************************************
         Function NextRecVal (F As Form, KeyName As String, KeyValue, _
         FieldNameToGet As String)
            Dim RS As Recordset

         On Error GoTo Err_NextRecVal

            ' The default value is zero.
            NextRecVal = 0

            ' Get the form recordset.
            Set RS = F.RecordsetClone

            ' Find the current record.
            Select Case RS.Fields(KeyName).Type
               ' Find using numeric data type key value?
               Case DB_INTEGER, DB_LONG, DB_CURRENCY, DB_SINGLE, _
               DB_DOUBLE, DB_BYTE
                  RS.FindFirst "[" &amp; KeyName &amp; "] = " &amp; KeyValue
               ' Find using date data type key value?
               Case DB_DATE
                  RS.FindFirst "[" &amp; KeyName &amp; "] = #" &amp; KeyValue &amp; "#"
               ' Find using text data type key value?
               Case DB_TEXT
                  RS.FindFirst "[" &amp; KeyName &amp; "] = '" &amp; KeyValue &amp; "'"
               Case Else
                  MsgBox "ERROR: Invalid key field data type!"
                  Exit Function
            End Select

            ' Move to the next record.
            RS.MoveNext

            ' Return the result.
            NextRecVal = RS(FieldNameToGet)

         Bye_NextRecVal:
            Exit Function
         Err_NextRecVal:
            Resume Bye_NextRecVal
         End Function

</PRE></OL>The following example demonstrates how to use the PrevRecVal() function in
a form to create a mileage log. The custom function returns the previous
odometer reading which is used to calculate miles per gallon (MPG) for an
automobile. To use the PrevRecVal() function, follow these steps:

<OL><P><LI>Create the following new table, and then save it as Mileage Log:
<P>
<P><PRE>      Table: Mileage Log
      -----------------------------------------------------------
      Field Name: ID
<PRE></PRE>         Data Type : AutoNumber (Data Type: Counter in earlier versions)
         Indexed: Yes (No Duplicates)
      Field Name: Date
         Data Type : Date/Time
      Field Name: Odometer
         Data Type : Number
         FieldSize: Double
      Field Name: Gallons
         Data Type : Number
         FieldSize: Double
      Primary Key: ID

</PRE><P><LI>View the Mileage Log table in Datasheet view and enter the following
   sample data:
<P>
<PRE>      ID   Date      Odometer   Gallons
      ---------------------------------
      1    6/21/94   77917.8    10.2
      2    6/25/94   78254.7    9.6
      3    6/30/94   78582.3    10
      4    7/5/94    78918.4    10.4
      5    7/10/94   79223.4    9.4

</PRE><P><LI>Use the Form Wizard to create a new tabular form based on the Mileage
   Log table. Include all the Mileage Log table fields except the ID field.

<P><LI>View the form in Design view and add the following three text box
   controls to the form:
<P>
<P><PRE>      Text Box 1
      -----------------------------------------------------
      Name: PrevOdometer
      ControlSource: =PrevRecVal(Form,"ID",[ID],"Odometer")
      Format: Fixed
</PRE><P>
<P><PRE>      Text Box 2
      -----------------------------------------------------------------
      Name: MilesDriven
      ControlSource: =iif([PrevOdometer]=0,0,[Odometer]-[PrevOdometer])
      Format: Fixed
</PRE><P>
<P><PRE>      Text Box 3
      ---------------------------------------
      Name: MPG
      ControlSource: =[MilesDriven]/[Gallons]
      Format: Fixed
</PRE>
<P><LI>View the form in Form view. Note that the form displays the following
   information:
<P>
<PRE>      Date     Odometer   Gallons  PrevOdometer  MilesDriven  MPG
      -------------------------------------------------------------
      6/21/94  77917.8    10.2     0             0            0
      6/25/94  78254.7     9.6     77917.80      336.90       35.09
      6/30/94  78582.3    10.0     78254.70      327.60       32.76
      7/05/94  78918.4    10.4     78582.30      336.10       32.32
      7/10/94  79223.4     9.4     78918.40      305.00       32.45

</PRE></OL><h2>REFERENCES</h2>
 
<P>
For information about entering data automatically into a form using
values from the previous record, please see the following article in
the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../vbapps/Q136127.htm">Q136127</A></B>
   TITLE     : ACC: Fill Record w/Data from Prev. Record Automatically
               (95/97)
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: next running sum<BR>
Keywords          : kbusage FmsHowTo kbfaq<BR>
Version           : 1.0 1.1 2.0 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 4, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACC: How to Programmatically Change a Control Type </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q135381">
<META NAME="KBModify" CONTENT="1997/08/29">
<META NAME="KBCreate" CONTENT="1995/08/21">
<META NAME="Keywords" CONTENT="kbprg PgmObj">
<META NAME="KBArea" CONTENT="Support; KB; vbapps">
<META NAME="Description" CONTENT="  Moderate: Requires basic macro, coding, and interoperability skills.  This article demonstrates how you can programmatically change a control on a form to another type of control. Using the ControlType property in Visual Basic for Applications, you...">
<META NAME="Product" CONTENT="vbapps">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB5,QA7O,QAMN,QAOE,QBS0,QA1S,QBT6,QAPN,QBV4,QAHP,QDN9,QAI2,QAHV,QAP2,QABA P1 P2 P3 P4 P5 P6 T2 P7 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>ACC: How to Programmatically Change a Control Type</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q135381</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Access versions 7.0, 97
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Moderate: Requires basic macro, coding, and interoperability skills.
<P>
This article demonstrates how you can programmatically change a control on
a form to another type of control. Using the ControlType property in Visual
Basic for Applications, you can change a text box into a combo box, a
toggle button into an option button, and so on.
<P>
This article assumes that you are familiar with Visual Basic for
Applications and with creating Microsoft Access applications using the
programming tools provided with Microsoft Access. For more information
about Visual Basic for Applications, please refer to your version of the
"Building Applications with Microsoft Access" manual.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The method described in this article uses a custom Visual Basic function
(called from a command button on Form1) to change the ControlType property
of a text box (on Form2) to a combo box. Two forms are necessary because
the ControlType property is available only in a form's Design view. As a
result, you cannot change a control's type using Visual Basic while the
form that contains the control is open in Form view.
<P>
To programmatically change a form's control to another type of control,
follow these steps:

<OL><P><LI>Open the sample database Northwind.mdb.

<P><LI>Create new form not based on any table or query and name it Form1.

<P><LI>Add a command button to the Form1 form and set its properties as
   follows:
<P>
<P><PRE>      Name: Command0
      Caption: Change Control Type
</PRE>
<P><LI>Set the command button's OnClick property to [Event Procedure], click
   the Build button to the right of [Event Procedure], and then type the
   following text in the Form module:
<P>
<P><PRE>      Private Sub Command0_Click()
</PRE><P>
<PRE>         If Forms!Form2.CurrentView &lt;&gt; 0 Then DoCmd.OpenForm "Form2",_
         acDesign

         If Forms!Form2![CategoryName].ControlType = acComboBox Then
           Forms!Form2![CategoryName].ControlType = acTextBox
         Else
           Forms!Form2![CategoryName].ControlType = acComboBox
         End If

      End Sub

</PRE><P><LI>Close and save the Form1 form.

<P><LI>Make a copy of the Categories form and call it Form2.

<P><LI>Open the Form2 form in Form view.

<P><LI>Open the Form1 form in Form view and click the command button. Note that
   the Form2 form opens in Design view and that the CategoryName control
   changes from a text box to a combo box. When you click the Change
   Control Type button again on the Form1 form, the CategoryName control in
   the Form2 form changes back to a text box.
<P>
</OL>NOTE: When you change a control to another type of control, Microsoft
Access copies the appropriate property settings from the original control
to the new control. If a property exists for the original control but not
for the new control, Microsoft Access does not copy it. If a property
exists for the new control but not for the original control, Microsoft
Access sets the property to the default control for that type of control.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For more information about the ControlType property, search the Help Index
for "ControlType."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: morph morphing morphed<BR>
Keywords          : kbprg PgmObj<BR>
Version           : 7.0 97<BR>
Platform          : WINDOWS<BR>
Hardware          : x86<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

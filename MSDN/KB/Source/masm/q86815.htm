

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mixed C and MASM with MASM Main Language, No C Run-Time </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q86815 ">
<META NAME="KBModify" CONTENT="1995/08/17">
<META NAME="KBCreate" CONTENT="1992/07/19">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  The following steps should be used when doing mixed-language programming between the Microsoft Macro Assembler (MASM) and Microsoft C with MASM as the main language and when no C run-time will be used:  1. Include the statement        .MODEL       ...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGI,QAFR,QBFY,QAYA,QAEF,QAOX,QA7R,QAKD,QAPN,QAIF,QAHE,QBII,QA4Q,QAIJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Mixed C and MASM with MASM Main Language, No C Run-Time</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  August 17, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q86815 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.0, 5.1, 5.1a, 6.0,
   6.0a, 6.0b, and 6.1
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following steps should be used when doing mixed-language
programming between the Microsoft Macro Assembler (MASM) and Microsoft
C with MASM as the main language and when no C run-time will be used:

<OL><P><LI>Include the statement
<P>
<P><PRE>      .MODEL &lt;model&gt;
</PRE><P>
   in the assembly module to ensure that the modules use the same
   default segments. The &lt;model&gt; will be small, medium, compact, or
   large.

<P><LI>Use the END directive in the assembly module to specify the entry
   point.

<P><LI>Compile the C module with /Gs to avoid generation of calls to the
   stack checking routine.

<P><LI>If the C compiler is version 5.1, include the following statement
   in the C module to ensure that the startup code is not brought in:
<P>
<P><PRE>      int _acrtused = 0;
</PRE>
<P><LI>Assemble the assembly module with /Mx to preserve the case of
   nonlocal names. If MASM 6.0 or later is being used, use /Cx to
   preserve the case of nonlocal names.
<P>
</OL>Note that the only contributions to the stack segment come from the
assembly module.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following is a mixed-language sample. There is one C module and
one assembly module that must be compiled and then linked together. No
special link options are needed.
<P>
The sample declares two words, arg1 and arg2, converts them to
dollar-terminated strings, prints out their values to the screen, and
passes their addresses to a C routine. The C routine swaps the values
of arg1 and arg2. The values of arg1 and arg2 are printed out a second
time to show that they have been swapped.
<P>
NOTE: The EXTRN directive changed to EXTERN in MASM 6.1 All instances of
EXTRN should be changed to EXTERN in the sample code below if you are using
MASM version 6.1 or later.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: /Gs
*/

/* Uncomment the following line for C 5.1 to ensure that the startup
   code is not brought in:

      int _acrtused = 0;
*/

void ptrswap( int *ptr1, int *ptr2 )
</PRE></OL>{
<PRE>    int temp;

    temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
</PRE>}
<P>
 
<P>
; Assemble options needed: /Mx
<P>
<PRE>    .MODEL small

Display MACRO string              ; Print a "$" terminated string
    MOV ah, 9
    MOV dx, offset string
    INT 21h
    ENDM

    .STACK
    .DATA

arg1    DW 1234
arg2    DW 4321
</PRE>outstr1 DB "Arg1: ", "$"
outstr2 DB "Arg2: ", "$"
<PRE>newline DB 13, 10, "$"            ; Carriage return-linefeed
converted  DD ?                   ; Will contain arg1 or arg2 after
        DB "$"                    ;    they are converted

    .CODE

EXTRN   _ptrswap:proc             ; External C routine

cnvrt   PROC

; ********     Convert a word to a dollar-terminated string.    *******

    PUSH   bp                 ; Establish
    MOV    bp, sp             ; stack frame

    MOV    ax, [bp+4]         ; Get first argument off stack
    MOV    bx, offset converted
    MOV    cx, 10
    MOV    si, 3              ; Index for storing in converted
</PRE>nextdigit:
<PRE>    MOV    dx, 0
    DIV    cx                 ; Divide ax by cx
    ADD    dl, "0"            ; Convert to ASCII value
    MOV    [bx][si], dl       ; Save digit in converted
    DEC    si                 ; Decrement index
    CMP    si, 0FFFFh         ; Are we done?
    JNZ    nextdigit

    ADD    sp, 2              ; Destroy argument
    RET                       ; Return
cnvrt   ENDP
</PRE>; ********************************************************************
<P>
start:
<PRE>    MOV    ax, @data          ; Load the data
    MOV    ds, ax             ;    segment register

</PRE>; Print "Arg1: &lt;value&gt;"  where &lt;value&gt; is the value of arg1
<P>
<PRE>    Display outstr1           ; Use display macro
    MOV    ax, arg1
    PUSH   ax                 ; Push argument
    CALL   cnvrt              ; Call the convert procedure
    Display converted         ; Use display macro
    Display newline           ; Use display macro

</PRE>; Print "Arg2: &lt;value&gt;"  where &lt;value&gt; is the value of arg2
<P>
<PRE>    Display outstr2           ; Use display macro
    MOV    ax, arg2
    PUSH   ax                 ; Push argument
    CALL   cnvrt              ; Call the convert procedure
    Display converted         ; Use the display macro
    Display newline           ; Use the display macro
    Display newline           ; Use the display macro

</PRE>; Call the C module to swap the values of arg1 and arg2
<P>
<PRE>    MOV    bx, offset arg2
    PUSH   bx                 ; Push the 2nd argument
    MOV    bx, offset arg1
    PUSH   bx                 ; Push the 1st argument
    CALL   _ptrswap           ; Call the C routine

</PRE>; Print out arg1 again, to show that it has changed
<P>
<PRE>    Display outstr1           ; Use display macro
    MOV    ax, arg1
    PUSH   ax                 ; Push argument
    CALL   cnvrt              ; Call the convert procedure
    Display converted         ; Use display macro
    Display newline           ; Use display macro

</PRE>; Print out arg2 again, to show that it has changed
<P>
<PRE>    Display outstr2           ; Use display macro
    MOV    ax, arg2
    PUSH   ax                 ; Push argument
    CALL   cnvrt              ; Call the convert procedure
    Display converted         ; Use display macro
    Display newline           ; Use display macro

    MOV    ah, 4ch            ; Terminate program
    int    21h

    END    start              ; Specify entry point as _start
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf non-local 5.00 5.10 5.10a 6.00 6.00a<BR>
6.00b<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  August 17, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

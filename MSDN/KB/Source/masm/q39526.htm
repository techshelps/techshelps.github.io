

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Share a Structure Between C and Assembler Modules </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q39526 ">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1988/12/17">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  You may declare a type with STRUC directive in your MASM module with the same memory-storage template as the  struct  type declared in your C module. You also can declare the variable as external with WORD type if it is a near data, or DWORD type i...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QBFY,QAR0,QALG,QAPF,QAJQ,QA36,QAYV,QAYA,QBVV,QA7O,QA7N,QAUJ,QAIC,QAI4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Share a Structure Between C and Assembler Modules</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q39526 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.0, 5.1, 6.0, 6.0a,
   and 6.0b
<LI>Microsoft Macro Assembler for OS/2, versions 5.1, 6.0, 6.0a, and
   6.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
You may declare a type with STRUC directive in your MASM module with
the same memory-storage template as the "struct" type declared in your
C module. You also can declare the variable as external with WORD type
if it is a near data, or DWORD type if it is a far data.
<P>
In C, the structure may be packed on a 1, 2, or 4-byte boundary. The
2-byte boundary is the default. As a result, the template constructed
in your MASM module may not match the memory storage exactly, unless
pad bytes are specifically added to the template. See the example
below.
<P>
In MASM 5.10 and earlier, any template you may create in with the
STRUC directive has to have unique field names throughout the module.
The field names represent the offset relative to the beginning of the
structure. They do not have to be literally the same field names of
the structure defined in the C module.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample program below demonstrates this information. It consists
of a C module and an Assembler module.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

</PRE>struct sample {
<PRE>   char byte_1;
   unsigned int word_1;
   char byte_2;
   unsigned int word_2;
</PRE>} rec = {0x41, 0xffff, 0x42, 0xeeee};
<P>
<PRE>void proc_rec( void );

void main()
</PRE>{
<PRE>   proc_rec( );
</PRE>}
<P>
 
<P>
; Assemble options needed: /Mx (or /Cx with 6.0 and later)
<P>
<PRE>   .model small,c
   .data

</PRE>sample  STRUC
<PRE>   byte_1  db   ?      ; if dw is used, next padding byte is not needed.
   junk_1  db   ?      ; necessary padding, unused byte
   word_1  dw   ?
   byte_2  db   ?
   junk_2  db   ?      ; necessary padding, unused byte
   word_2  dw   ?
</PRE>sample  ENDS
<P>
<PRE>EXTRN      rec:word    ; can use EXTRN  rec:sample with 6.0 or later

   .code
PUBLIC     proc_rec

</PRE>proc_rec  PROC  near
<PRE>   MOV ax, rec.word_1
   MOV bx, rec.word_2
   MOV cl, rec.byte_1
   MOV ch, rec.byte_2
   RET
</PRE>proc_rec  ENDP
<PRE>        END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.00 5.10 6.00 6.00a 6.00b<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

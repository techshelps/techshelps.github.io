

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing a Pointer to a Structure from C to Assembly </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q62626 ">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1990/06/05">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  The code sample below illustrates how to pass a structure from a C module to an assembly module. This code makes it possible to access the structure fields within the assembly module using the  .  field operator.  Within the assembly module a struc...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAYZ,QAH4,QBFY,QAIC,QAH7,QAH6,QAD7,QBW7,QA7R,QAY2,QAI5,QA7O,QA7N,QAI4,QBWG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Passing a Pointer to a Structure from C to Assembly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q62626 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.1, 5.1a, 6.0,
   6.0a, and 6.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The code sample below illustrates how to pass a structure from a C
module to an assembly module. This code makes it possible to access
the structure fields within the assembly module using the "." field
operator.
<P>
Within the assembly module a structure is declared. This structure is
used as a template by the assembler to resolve accessing the fields of
the structure. The structure may be given any label name.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following is an example. Note that the syntax for accessing
structure members will be different with MASM 6.0 and later.
<P>
<P><h3>Sample Code:</h3>
 
<P>
<PRE>/* Compile options needed: none
*/

#include &lt;stdio.h&gt;

</PRE>struct node
{
<PRE>   int IntVar;
   char Array[5];
</PRE>};
<P>
struct node var;
extern void IncStruc( struct node * );
<P>
<PRE>void main()
</PRE>{
<PRE>   var.Array[0] = 'H';
   var.Array[2] = 'I';
   var.IntVar = 0x0b12;
   IncStruc( &amp;var );

/* Incremented values on returning to C */

   printf( "var.IntVar is now %x\n",  var.IntVar );
   printf( "var.Array[0] is now %c\n", var.Array[0] );
   printf( "var.Array[2] is now %c\n", var.Array[2] );
</PRE>}
<P>
 
<P>
; Assemble options needed: none
<P>
<PRE>;         OPTION OLDSTRUCTS      ; for MASM 5.1 behavior from MASM 6.0

         .model small, c

   delta STRUC
         IntVar DW ?
         Array  DB 5 dup (?)
   delta ENDS

         .code

</PRE>IncStruc PROC
<PRE>         PUSH   BP
         MOV    BP, SP

         MOV    bx, [bp+4]
         INC    [bx].IntVar
         INC    [bx].Array
         INC    [bx+2].Array

         POP    bp
         RET
</PRE>IncStruc ENDP
<P>
<PRE>         END

</PRE> 
<P>
<P>
<P>
 
<P>
The output is as follows:
<P>
<PRE>   var.IntVar is now b13
   var.Array[0] is now I
   var.Array[2] is now J
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.10 5.10a 6.00 6.00a 6.00b<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

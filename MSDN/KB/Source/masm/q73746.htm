

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCERR: MASM 6.0 Programmer's Guide Errors: Chapter 7 </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q73746 ">
<META NAME="KBModify" CONTENT="1997/07/31">
<META NAME="KBCreate" CONTENT="1991/07/07">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT=" The following is a list of documentation additions and corrections for chapter 7 of the  Microsoft Macro Assembler Programmer's Guide  version 6.0 manual. The section and page numbers are listed first, followed by a description of the addition or co...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAJQ,QBXT,QA5V,QAIB,QBWA,QAML,QAPF,QADN,QAHC,QAYA,QBVV,QBFN,QAB9,QBFY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DOCERR: MASM 6.0 Programmer's Guide Errors: Chapter 7</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 31, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q73746 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00b | 6.00 6.00a 6.00b
<PRE>MS-DOS           | OS/2
</PRE>kbref kbdocerr
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, version 6.0, 6.0a, and 6.0b
<LI>Microsoft Macro Assembler for OS/2, version 6.0, 6.0a, and 6.0b
</UL> 
<P>
The following is a list of documentation additions and corrections for
chapter 7 of the "Microsoft Macro Assembler Programmer's Guide"
version 6.0 manual. The section and page numbers are listed first,
followed by a description of the addition or correction.
<P>
<P><h3>Section 7.1, Page 167</h3>
 
<P>
The first paragraph of this section should read:
<P>
<PRE>   Jumps are the most direct method for changing program control from
   one location to another. At the processor level, jumps work by
   changing the value of the IP (Instruction Pointer) for near jumps,
   and by changing the values of the CS and IP registers for far
   jumps. The IP register is loaded with the offset of the target
   address and CS is loaded with the segment of the target address.
   The many forms of the jump instruction handle jumps based on
   conditions, flags, and bit settings.

</PRE><h3>Section 7.1.1.2, Page 169</h3>
 
<P>
The sample line
<P>
<PRE>   jmp ebx     ; FAR32 jump

</PRE>should read:
<P>
<PRE>   jmp ebx     ; NEAR32 jump

</PRE>In addition, replace FAR32 with NEAR32 in the sentence before the
above line.
<P>
<P><h3>Section 7.1.1.2, Page 170</h3>
 
<P>
The example shows the following TYPEDEF statement:
<P>
<PRE>   NPVOID  TYPEDEF NEAR PTR VOID

</PRE>Note that VOID is not a defined type. It acts as a placeholder and
improves program readability. In this case, the TYPEDEF is equivalent
to:
<P>
<PRE>   NPVOID  TYPEDEF NEAR PTR

</PRE><h3>Section 7.1.2.2, Page 173</h3>
 
<P>
Table 7.1, on page 173, uses the same character for the number zero
and the letter "O." This may cause some confusion when reading the
table. The "OF" indicates the overflow flag and does not represent the
hexadecimal number 0F.
<P>
<P><h3>Section 7.1.2.6, Page 176</h3>
 
<P>
In the sample code, the line
<P>
<PRE>  .IF  cx = 20

</PRE>should be:
<P>
<PRE>  .IF  cx == 20

</PRE><h3>Section 7.2, Page 177</h3>
 
<P>
The description of the LOOPE, LOOPZ, LOOPNE, and LOOPNZ states:
<P>
<PRE>   Loops while equal (or not equal). Checks CX and a condition. The
   loop ends when the condition is true. Set CX to a number out of
   range if you don't want to control the loop.

</PRE>It should read:
<P>
<PRE>   Loops while equal (or not equal). Checks CX and a condition
   (indicated by the zero flag). The loop continues while the
   condition is met and CX is not zero. Set CX to a number out of
   range if you don't want the CX count to control the loop.

</PRE><h3>Section 7.3.2, Page 187</h3>
 
<P>
The sample program contains a line that states:
<P>
<PRE>   mov sp, bp

</PRE>Because there are no local variables and the SP register is not
otherwise modified, this line is not needed.
<P>
<P><h3>Section 7.3.3.2, Page 191</h3>
 
<P>
This first paragraph states:
<P>
<PRE>   The parameters are separated from the reglist by a comma if there
   is a list of registers.

</PRE>According to the BNF grammar shown in Appendix B, the above statement
is incorrect. The comma is optional and is required only if the
parameters are placed on the next line.
<P>
For example,
<P>
<PRE>   myproc PROC FAR C PUBLIC USES di si, var1:word, arg1:VARARG

</PRE>is equivalent to:
<P>
<PRE>   myproc PROC FAR C PUBLIC USES di si var1:word, arg1:VARARG

</PRE>Note in the last case there is no comma following the SI register.
<P>
<P><h3>Section 7.3.3.3, Page 193</h3>
 
<P>
The sample program contains the line:
<P>
<PRE>   dec arg1

</PRE>It should read:
<P>
<PRE>   dec argcount

</PRE><h3>Section 7.3.6, Page 199</h3>
 
<P>
Page 199 shows two sample lines for declaring prototypes. They are:
<P>
<PRE>   addup  PROTO NEAR C argcount:WORD, arg2:WORD, arg3:WORD

   myproc PROTO FAR  C, argcount:WORD, arg2:VARARG

</PRE>The last prototype has a comma following the C language specifier
while the first prototype does not. The documentation fails to mention
that the comma is optional; therefore, both statements are correct.
<P>
<P><h3>Section 7.3.7.5, Page 202 and 203</h3>
 
<P>
In the first example, the code is missing a few steps. The following
is the corrected code:
<P>
<PRE>   .CODE
   mov      bx, pfunc                  ; pfunc is the Function Table
   mov      si, Num                    ; Num contains 0 or 2
   INVOKE   FUNCPTR PTR [bx+si], 1, 1  ; Selects proc1 or proc2

</PRE>The first paragraph on page 203 states:
<P>
<PRE>   You can also use ASSUME to accomplish the same task. The ASSUME
   statement associates the type PFUNC with the BX register.

</PRE>It should read:
<P>
<PRE>   You can also use ASSUME to accomplish the same task. In the sample
   below, the ASSUME statement associates the type FUNCPTR with the BX
   register.

</PRE>In the example that follows, add the following line after the ASSUME:
<P>
<PRE>   mov      bx, pFunc

</PRE>Change the INVOKE line to read:
<P>
<PRE>   INVOKE   [bx+si], 1, 1

</PRE><h3>Section 7.3.8.2, Page 205</h3>
 
<P>
Page 205 shows the epilogue code when &lt;LOADDS&gt; is specified on a PROC
line. One line states:
<P>
<PRE>   mov sp,bp

</PRE>It should read:
<P>
<PRE>   mov sp,bp      ; if localbytes is not 0

</PRE><h3>Section 7.4.1, Page 209</h3>
 
<P>
The sample code demonstrates how to print a message on the display
using a DOS interrupt call. It shows the following code:
<P>
<PRE>   .DATA
   msg BYTE "This writes to the screen",$
   .CODE
   mov dx,offset msg
   mov ah,09h
   int 21h

</PRE>It should read:
<P>
<PRE>   .DATA
   msg BYTE "This writes to the screen$"
   .CODE
   mov ax,SEG msg
   mov ds,ax
   mov dx,offset msg
   mov ah,09h
   int 21h

</PRE><h3>Section 7.4.2, Page 211</h3>
 
<P>
The last paragraph states:
<P>
<PRE>   To replace the address in the interrupt descriptor table with the
   address of your procedure, AL needs to be loaded with 04h and AH
   loaded with 35, the Get Interrupt Vector function. The Set
   Interrupt Vector function requires 25 in AH.

</PRE>The numbers 35 and 25 are presented in hexadecimal rather than
decimal. They should be written as 25h and 35h.
<P>
<P><h3>Section 7.4.2, Page 212</h3>
 
<P>
Change the line
<P>
<PRE>   .MODEL LARGE,C,DOS

</PRE>to:
<P>
<PRE>   .MODEL LARGE,C,OS_DOS

</PRE>Also, the last sentence on page 212 should read:
<P>
<PRE>   Before your program ends, you should restore the original address
   by loading DS and DX with the original interrupt address and using
   the DOS set vector function to store the original address at the
   correct location.
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00b<BR>
KBCategory: kbref kbdocerr<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 31, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: Operator "." and the Operator "*" </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q27835 ">
<META NAME="KBModify" CONTENT="1997/09/10">
<META NAME="KBCreate" CONTENT="1988/03/15">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  When using scaled indexed addressing in the following Microsoft Macro Assembler (MASM) 5.0, 5.1, or 5.1a instruction, the opcode generated is incorrect. Note that the variable  esi  is being used as an index into a structure and  eax  is the base. ...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAKM,QANY,QAR4,QAAP,QAKJ,QAH4,QAYA,QA28,QATJ,QAOE,QAL3,QAIJ,QBDM,QATX,QATS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: Operator "." and the Operator "*"</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q27835 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
5.00 5.10 5.10a | 5.10 5.10a
<PRE>MS-DOS          | OS/2
</PRE>kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.0, 5.1, and 5.1a
<LI>Microsoft Macro Assembler for OS/2, versions 5.1 and 5.1a
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When using scaled indexed addressing in the following Microsoft Macro
Assembler (MASM) 5.0, 5.1, or 5.1a instruction, the opcode generated is
incorrect. Note that the variable "esi" is being used as an index into a
structure and "eax" is the base.
<P>
<PRE>   mov eax,[eax.esi*2]

</PRE>The opcodes generated by MASM indicate that MASM is not using scaled
indexed addressing.  The code generated by MASM is effectively the same as:
<P>
<PRE>   mov eax,[eax+esi]

</PRE><h2>CAUSE</h2>
 
<P>
The problem occurs because the "." operator has a higher precedence than
the "*" operator. MASM turns:
<P>
<PRE>   [eax.esi*2]

</PRE>into
<P>
<PRE>   [(eax+esi)*2]

</PRE>as a result of the precedence. MASM evaluates "(eax+esi)" as a constant
instead of a register. Thus, the result of the constant expression
"(eax+esi)" is multiplied by two and the addressing mode is lost. This
results in MASM interpretting the operand as [eax+esi]
<P>
<P><h2>RESOLUTION</h2>
 
<P>
One workaround is to use the "+" operator which has lower precedence than
the "." operator and produces the correct result. Alternately parenthesis
can be used to give higher precedence to the "*" operator.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in MASM version 5.0, 5.1, and
5.1a. This problem was corrected in MASM version 6.0.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Under Microsoft MASM 6.0 the following error will be generated.
<P>
<PRE>   error A2026: constant expected

</PRE><h3>Sample Code</h3>
 
<P>
; Assemble options needed: none
<P>
.386
_TEXT SEGMENT PARA PUBLIC USE16 'CODE'
<PRE>  ASSUME cs:_TEXT
</PRE>start:
<PRE>  mov eax,[eax+esi*2]   ; This is the desired instruction
                        ; Note the use of "+" instead of "."
  mov eax,[eax.(esi*2)] ; This is also the desired instruction
                        ; Note the use of () around the "*"
  mov eax,[eax.esi*2]   ; This is the format that is misinterpreted
                        ; Under MASM 6.0 this generates an A2026
  mov eax,[eax+esi]     ; This is what is incorrectly generated
                        ; by MASM 5.0, 5.1, and 5.1a
  mov ax, 4C00h
  int 21h
</PRE>_TEXT ENDS
<P>
END start
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.00 5.10 5.10a buglist5.00 buglist5.10<BR>
buglist5.10a fixlist6.00<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubCategory: MLIss<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BUG: SIB MOV EAX,[EAX+EBP] Generates Incorrect Code </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q97110 ">
<META NAME="KBModify" CONTENT="1994/10/21">
<META NAME="KBCreate" CONTENT="1993/04/06">
<META NAME="Keywords" CONTENT="kbtool kbbuglist">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  An attempt to use scaled index base (SIB) indirect operands may fail. If EBP is used and the stack and data segments do not have the same base address, the generated code executes incorrectly. In addition, if EBP is used as the index register, it i...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QA2O,QABA,QA28,QATJ,QAYA,QAAP,QAM5,QAKM,QAEF,QAKP,QABG,QBW7,QAR4,QAI5 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>BUG: SIB MOV EAX,[EAX+EBP] Generates Incorrect Code</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 21, 1994</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q97110 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.0a, 6.0b,
   6.1, 6.1a, and 6.11
<LI>Microsoft Macro Assembler for OS/2, versions 6.0, 6.0a, and 6.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
An attempt to use scaled index base (SIB) indirect operands may fail.
If EBP is used and the stack and data segments do not have the same
base address, the generated code executes incorrectly. In addition, if
EBP is used as the index register, it is coded as the base register,
which generates an additional byte in the instruction encoding.
<P>
<P><h2>CAUSE</h2>
 
<P>
When the code does not use a scaling factor, the Microsoft Macro
Assembler (MASM) may reverse the base and index registers. When this
occurs, MASM incorrectly treats the first register as the index and
the second register as the base in an SIB indirect operand.
<P>
If the code uses EBP or ESP as the base register, the indirect operand
should access memory through the stack segment. When the code uses any
other register as the base register, the indirect operand should
access memory through the data segment. Because the assembler reverses
the base and index registers, it uses the index register to determine
the segment through which to access memory. However, the ESP register
can be used only as a base register. Therefore, the problem occurs
only when the code uses the EBP register.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, use a scaling factor to explicitly
indicate which register is the index register. The sample below
demonstrates this procedure.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in MASM versions 6.0,
6.0a, 6.0b, 6.1, 6.1a, and 6.11. We are researching this problem and
will post new information here in the Microsoft Knowledge Base as it
becomes available.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
When the code does not use a scaling factor, MASM should treat the
first register as the base and the second register as the index in an
SIB indirect operand. Note that the code must use the .386 or .486
directives to use an SIB indirect operand. One of these directives
must be present to demonstrate the problem above.
<P>
<P><h3>Sample Code</h3>
 
<P>
; Assemble options needed: /Zi
; Use Codeview to see the instructions generates by the assembler.
<P>
.MODEL small, C
<PRE>.386                      ; .386 must be used to show the problem
</PRE>.STACK 4096
<P>
.DATA
<P>
.CODE
<PRE>    .startup
    mov eax, [ebp+edi]    ;Incorrect
                          ;MOV AX,WORD PTR DS:[EDI+EBP]
    mov eax, [esi+ebp]    ;Incorrect
                          ;MOV AX,WORD PTR SS:[EBP+ESI]
    mov eax, [ebp][edi]   ;Incorrect
                          ;MOV AX,WORD PTR DS:[EDI+EBP]
    mov eax, [esi][ebp]   ;Incorrect
                          ;MOV AX,WORD PTR SS:[EBP+ESI]
    mov eax, [ebp+1*edi]  ;Correct
                          ;MOV AX,WORD PTR SS:[EBP+EDI]
    mov eax, [esi+1*ebp]  ;Correct
                          ;MOV AX,WORD PTR DS:[ESI+EBP]
    .exit 0
</PRE>END
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00b 6.10 6.10a indirection<BR>
32-bit buglist6.00a buglist6.00b buglist6.10 buglist6.10a buglist6.11<BR>
KBCategory: kbtool kbbuglist<BR>
KBSubCategory: MLIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 21, 1994</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

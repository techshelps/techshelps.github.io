

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chaining Interrupts Using MASM </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q104674">
<META NAME="KBModify" CONTENT="1995/01/06">
<META NAME="KBCreate" CONTENT="1993/09/27">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  Interrupt handlers in assembler may either stand alone or use the old interrupt handler for functions not covered by the new handler. Using the old handler is called chaining, and is needed for many MS-DOS and BIOS interrupts. A handler that does n...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADN,QAHC,QAHB,QAUD,QAGI,QAH4,QA7R,QAPN,QALW,QAB9,QAYA,QA9O,QAHE,QBSO,QAIF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Chaining Interrupts Using MASM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 6, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q104674</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.0a, 6.0b,
   6.1, 6.1a, and 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Interrupt handlers in assembler may either stand alone or use the old
interrupt handler for functions not covered by the new handler. Using
the old handler is called chaining, and is needed for many MS-DOS and
BIOS interrupts. A handler that does not chain uses an IRET (interrupt
return) statement rather than a normal return statement (RET, RETN,
RETF).
<P>
There are two ways to chain to an old interrupt handler:

<UL><LI>Jumps are used when the chain is the last thing in your new
   handler, and in this case your handler's IRET statement is never
   executed.
<P>
   -or-

<LI>Calling the old handler is done when you need to return to your
   handler for further processing after the original handler has
   finished. In this case, your return statement is very important.
<P>
</UL>The difference between IRET and RET is that IRET pops an extra 2
bytes off the stack (the flags register is popped). An interrupt call
always pushes the flags onto the stack before pushing on the far
return address. In general, hardware interrupt handlers use an IRET
statement while software interrupt handlers use a RETF 2 (far return)
statement.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Interrupt handlers that chain to Interrupt 21h are special cases
because they always chain to the old interrupt. If they didn't chain,
they would need to provide replacements for all of the MS-DOS
functions, which would essentially involve rewriting the operating
system. If the chaining is done at the end of the new handler using a
JMP instruction, no special return is needed. In fact, the return
statement in the new handler is never executed.
<P>
Most software interrupts, including interrupt 21h functions, set the
flags to particular values, and those values are used as part of the
returned information from the handler. The original values are not
restored from the stack when the interrupt returns. IRET is not used.
Instead, a RETF 2 statement is used to do a far return and pop 2 bytes
off the stack.
<P>
If an Interrupt 21h handler chains to the original handler using a
CALL statement, it must not use IRET. The system will probably hang if
you have an IRET in the handler because some functions may be called
repeatedly by MS-DOS until a certain flag is returned. Executing IRET
restores the prior values of the flags and destroys any values set by
the Interrupt 21h call. Thus, it appears as if the flags never get
set, so an infinite loop results.
<P>
If the code after the CALL in your Interrupt 21h handler modifies the
flags, you may need to put a PUSHF ... POPF around that code. The
sample code below creates a "do-nothing" replacement for Interrupt 21h
and illustrates these points. If the "RETF 2" is replaced with an
IRET, a system hang will result.
<P>
<P><h3>Sample Code</h3>
 
<P>
; assembly options needed: none
<PRE>   .MODEL tiny, pascal, os_dos
   .STACK
   .CODE
   .STARTUP

</PRE>FPFUNC  TYPEDEF FAR PTR
<PRE>Old_INT_21   FPFUNC  ?     ; Data in code segment
                           ; holds old interrupt address.

   jmp SetNewInterrupt     ; Skip the new handler.

New_INT_21 PROC    FAR
   ; May do some work here.
   ; If nothing needs to be done after the old
   ; handler is called, a jump can be used as follows:
   ;    jmp cs:Old_INT_21
   ; If the jump is used, the remaining code is not executed.
   cli                          ; Interrupts off.
   pushf
   call    cs:Old_INT_21        ; Call original handler.
   pushf
   ; Chance to do other things.
   popf
   retf 2
</PRE>New_INT_21 ENDP
<P>
SetNewInterrupt PROC
<PRE>   mov     ax, 3521h
   int     21h                     ; Get addr of Interrupt 21 handler.
   mov     WORD PTR cs:Old_INT_21[0], bx  ; Save offset of 21 handler.
   mov     WORD PTR cs:Old_INT_21[2], es  ; Save seg of 21 handler.

   push    ds
   mov     ax, cs
   mov     ds, ax                  ; Seg of new handler into ds.
   mov     dx, OFFSET New_INT_21   ; Offset of new handler into dx.
   mov     ax, 2521h
   int     21h                     ; Install new 21h handler.
   pop     ds                      ; Restore ds.

      ; calc paragraphs to retain
   mov     dx, OFFSET SetNewInterrupt
   mov     cl, 4
   shr     dx, cl
   inc     dx
   mov     ax, 3100h               ; Make new handler resident.
   int 21h

   .EXIT
</PRE>SetNewInterrupt ENDP
<P>
<PRE>   END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00b 6.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 6, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Implement a Function Pointer in MASM </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q34377 ">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1988/08/16">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  The following sample program illustrates how to implement a function pointer using the Microsoft Macro Assembler. It takes the address of the function (in this example, the address is loaded into ES:DX) and moves it into a 4-byte variable; it then ...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBV8,QA7R,QAH4,QAB9,QAGI,QAYA,QAB5,QAO3,QAO2,QAEF,QAC2,QAIF,QA4Q,QAUR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Implement a Function Pointer in MASM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q34377 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.0, 5.1, 5.1a, 6.0,
   6.0a, and 6.0b
<LI>Microsoft Macro Assembler for OS/2, versions 5.0, 5.1, 5.1a, 6.0,
   6.0a, and 6.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The following sample program illustrates how to implement a function
pointer using the Microsoft Macro Assembler. It takes the address of
the function (in this example, the address is loaded into ES:DX) and
moves it into a 4-byte variable; it then does a far call through the
pointer.
<P>
In this example, it may seem odd to call a function in this manner
because the function is defined locally and its name is known;
however, what if the name of the function was not known? What if you
were programming a device driver and all that was know was the entry
point of the function? Using the following technique, a name could be
given to the address of the function and the function could be called
like any other function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
This program illustrates how to implement a function pointer in MASM.
This code is similar to the code that the C compiler would generate
for a C program that used a pointer to a function.
<P>
<P><h3>Sample Code</h3>
 
<P>
; Assemble options needed: none
<P>
<PRE>   .model small

   .data
fptr dd 1 dup(?)   ; set aside four bytes for function address

   .code
</PRE>;
;  MACRO Definitions
;
FARCALL MACRO func_ptr
<PRE>   CALL dword ptr func_ptr  ; call by 4-byte far function reference
   ENDM

</PRE>DosExit MACRO
<PRE>   MOV  ax, 4C00h    ; ah = 4Ch ( dos exit interrupt) al = 0
   INT  21h
   ENDM
</PRE>;
;  FUNCTION Definition: function uses int 10h, function 07h to
<PRE>;                       initialize a window
;
   PUBLIC _ClrScr

</PRE>_ClrScr PROC FAR
<P>
<PRE>   PUSH bp          ; save bp
   MOV  bp, sp      ; get sp
   PUSH bx          ; save registers
   PUSH cx
   PUSH dx

   MOV ax, 0700h    ; ah = 7,  al = 0
   MOV bx, 0700h    ; bh = 7,  bl = 0
   XOR cx, cx       ; cx = 0
   MOV dx, 184Fh    ; dh = 24, dl = 79, decimal
   INT 10h

   MOV ax, 0200h    ; ah = 2, al = 0
   XOR bx, bx       ; bx = 0
   XOR dx, dx       ; dx = 0
   INT 10h

   XOR  ax, ax      ; function returns void
   POP  dx          ; restore registers
   POP  cx
   POP  bx

   MOV  sp, bp      ; reset sp
   POP  bp          ; restore bp
   RET              ; return
 _ClrScr ENDP

BEGIN:              ; main part of the program
;
</PRE>;  Get address of the function, put in es:dx
;
<PRE>   mov  dx, SEG _ClrScr
   mov  es, dx
   mov  dx, OFFSET _ClrScr
</PRE>;
;  Load function address into fptr
;
<PRE>   mov  WORD PTR fptr, dx    ; low word of fptr is the
                             ; offset of the function
   mov  WORD PTR fptr+2, es  ; high word of fptr is the
                             ; segment of the function
;
</PRE>;  Call the function via a function pointer
;
<PRE>   FARCALL fptr              ; call function. FARCALL is a macro
                             ; defined above
;
</PRE>;  Exit to DOS
;
<PRE>   DosExit                   ; Exit to DOS. DosExit is a macro
                             ; defined above

   END BEGIN
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.00 5.10 5.10a 6.00 6.00a 6.00b<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying Data for Debugging in MASM </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q85068 ">
<META NAME="KBModify" CONTENT="1995/01/06">
<META NAME="KBCreate" CONTENT="1992/05/31">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  It is sometimes helpful to be able to find out the contents of a register or memory location without using a debugger. The following two routines will print the value of the AX register to the screen in hexadecimal. The first routine accomplishes t...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA7R,QAEF,QAOX,QAYA,QAGI,QAM9,QALX,QAIJ,QAHC,QAA7,QADN,QAUR,QAKD,QBML,QBII V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Displaying Data for Debugging in MASM</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 6, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q85068 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.x, 6.0, 6.0a, and
   6.0b
<LI>Microsoft Macro Assembler for OS/2, versions 5.x, 6.0, 6.0a, and
   6.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
It is sometimes helpful to be able to find out the contents of a
register or memory location without using a debugger. The following
two routines will print the value of the AX register to the screen in
hexadecimal. The first routine accomplishes this by calling MS-DOS
Interrupt 21h. The second routine accomplishes the same thing by using
BIOS Interrupt 10h. Depending on what the program is doing, one of
these routines may be more suitable than the other.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code 1</h3>
 
<P>
; Assemble options needed: none
<P>
.MODEL small
<P>
.STACK
<P>
.CODE
<P>
Start:
<PRE>          mov ax, 0FFFFh     ; Load AX with something distinctive.
          call print_word    ; Print the contents of the AX register.

          mov ax, 4c00h      ; Prepare to exit.
          int 21h            ; Exit.


print_word PROC              ; MS-DOS version.
          push dx            ; Save all registers that are used.
          push cx
          push bx
          push ax

          mov dx, 4          ; Loop will print out 4 hex characters.
</PRE>nexthex:
<PRE>          push dx            ; Save the loop counter.
          mov cl, 4          ; Rotate register 4 bits.
          rol ax, cl
          push ax            ; Save current value in AX.

          and al, 0Fh        ; Mask off all but 4 lowest bits.
          cmp al, 10         ; Check to see if digit is 0-9.
          jl decimal         ; Digit is 0-9.
          add al, 7          ; Add 7 for Digits A-F.
</PRE>decimal:
<PRE>          add al, 30h        ; Add 30h to get ASCII character.

          mov dl, al
          mov ah, 02h        ; Prepare for interrupt.
          int 21h            ; Do MS-DOS call to print out value.

          pop ax             ; Restore value to AX.
          pop dx             ; Restore the loop counter.
          dec dx             ; Decrement loop counter.
          jnz nexthex        ; Loop back if there is another character
                             ; to print.

          pop ax             ; Restore all registers that were used.
          pop bx
          pop cx
          pop dx
          ret
</PRE>print_word ENDP
<P>
END Start
<P>
<P>
<P><h3>Sample Code 2</h3>
 
<P>
; Assemble options needed: none
<P>
.MODEL small
<P>
.STACK
<P>
.CODE
<P>
Start:
<PRE>          mov ax, 0FFFFh     ; Load AX with something distinctive.
          call print_word    ; Print the contents of the AX register.

          mov ax, 4c00h      ; Prepare to exit.
          int 21h            ; Exit.


print_word PROC              ; BIOS version.
          push dx            ; Save all registers that are used.
          push cx
          push bx
          push ax

          mov dx, 4          ; Loop will print out 4 hex characters.
</PRE>nexthex:
<PRE>          mov cl, 4          ; Rotate register 4 bits.
          rol ax, cl
          push ax            ; Save current value in AX.

          and al, 0Fh        ; Mask off all but 4 lowest bits.
          cmp al, 10         ; Check to see if digit is 0-9.
          jl decimal         ; Digit is 0-9.
          add al, 7          ; Add 7 for Digits A-F.
</PRE>decimal:
<PRE>          add al, 30h        ; Add 30h to get ASCII character.

          mov bx, 0003h      ; BH= Page 0, BL= Foreground Color.
          mov ah, 0Eh        ; Prepare for interrupt.
          int 10h            ; Do BIOS call to print out value.

          pop ax             ; Restore value to AX.
          dec dx             ; Decrement loop counter.
          jnz nexthex        ; Loop back if there is another character
                             ; to print.

          pop ax             ; Restore all registers that were used.
          pop bx
          pop cx
          pop dx
          ret
</PRE>print_word ENDP
<P>
END Start
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.00 5.10 5.10a 6.00 6.00a 6.00b<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 6, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Interrupt 21h, Function 3Fh to Read the Keyboard </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q113058">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1994/03/23">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  The  MS-DOS Programmer's Reference  (published by Microsoft Press) versions 5 and 6, as well as other MS-DOS programming reference books, state that Interrupt 21h, Function 0Ah (Buffer Keyboard Input) has been superseded by Function 3Fh (Read File ...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAUD,QAYA,QAH4,QAY5,QBFN,QANE,QAEF,QAJX,QADN,QADR,QBV8,QBDT,QAB9,QAYY,QAY2 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using Interrupt 21h, Function 3Fh to Read the Keyboard</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q113058</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler (MASM) for MS-DOS, versions 5.1, 6.0,
   6.1, and 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The "MS-DOS Programmer's Reference" (published by Microsoft Press) versions
5 and 6, as well as other MS-DOS programming reference books, state that
Interrupt 21h, Function 0Ah (Buffer Keyboard Input) has been superseded by
Function 3Fh (Read File or Device). Function 3Fh is more general purpose
and easier to use for some programming tasks, but may cause some apparently
unusual behavior when used to read from device 0 (stdin--the console or
keyboard).
<P>
Function 3Fh uses a system buffer when reading from a device and then
transfers the desired number of characters into a memory buffer specified
by the calling program. The buffer used by Function 3Fh is not the same as
that used by MS-DOS or by other functions that read from the keyboard
(Functions 01h, 06h, 07h, 08h, 0Ah, and 0Ch). Function 3Fh moves characters
from the input buffer to the program supplied data area either until the
requested number of characters have been read or, if reading from the
keyboard, until a carriage return is reached. When more characters than
requested are entered from the keyboard, the requested number are returned
to the program, but the input buffer is not flushed. This may cause
subsequent read operations to return with invalid or undesired data. This
can even occur between separate instances of program execution.
<P>
The sample shown below illustrates this, and shows how to clear the buffer
by reading until a linefeed character has been found.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The sample prompts for input, reads up to 10 characters, and displays the
characters read. If more than 10 characters are entered, only the first 10
will be displayed. If the program is then executed a second time, the
remaining characters (or the next 10, whichever is less) will be
immediately displayed. The prompt will be given but the program will not
wait for input.
<P>
If the commented lines following the label clearbuf are added into the
program, the input buffer will be cleared and the program will work as
expected. Note that the code to clear the buffer reads until it finds a
linefeed character (0Ah) rather than a carriage return (0Dh).
Experimentation shows that if the linefeed is left in the buffer, the
program will wait for another carriage return after running the loop, and
will not read any data the next time it is run. Function 3Fh does not
return the carriage return/linefeed (CR/LF) pair to the calling program
when reading multiple bytes, but does return them when reading 1 byte at a
time, and therefore both must be cleared as shown.
<P>
Also note that possible read and write errors are being ignored by this
code. Refer to "MS-DOS Programmer's Reference" for information on possible
errors and how to detect them.
<P>
The "MS-DOS Programmer's Reference" is available through Microsoft Press by
calling 1-(800)-MSPRESS.
<P>
<P><h2>REFERENCES</h2>
 
<P>
"MS-DOS Programmer's Reference," Version 5, Microsoft Press, 1991. Page
282.
<P>
"MS-DOS Programmer's Reference," Version 6, Microsoft Press, 1993. Pages
278-9.
<P>
<P><h3>Sample Code</h3>
 
<P>
; Assemble options needed:  none
.MODEL SMALL,C
.STACK
.DATA
<PRE>    mybuf BYTE 10 DUP (' ')
    pstring BYTE 0Dh,0Ah,"enter data: "
    ostring BYTE 0Dh,0Ah,"data entered: "

    abyte BYTE ?
</PRE>.CODE
<PRE>    .STARTUP
    ; prompt user
    mov bx, 1  ; stdout
    mov cx, LENGTHOF pstring
    mov dx, SEG pstring
    mov ds, dx
    mov dx, OFFSET pstring
    mov ah, 40h
    INT 21h
        ; ignore possible errors

    ; read data
    mov bx, 0  ; stdin
    mov cx, LENGTHOF mybuf
    mov dx, SEG mybuf
    mov ds, dx
    mov dx, OFFSET mybuf
    mov ah, 3Fh
    INT 21h
        ; ignore possible errors

    mov bx, 1  ; stdout
    mov cx, LENGTHOF ostring
    mov dx, SEG ostring
    mov ds, dx
    mov dx, OFFSET ostring
    mov ah, 40h
    INT 21h
        ; ignore possible errors

    mov bx, 1  ; stdout
    mov cx, LENGTHOF mybuf
    mov dx, SEG mybuf
    mov ds, dx
    mov dx, OFFSET mybuf
    mov ah, 40h
    INT 21h
        ; ignore possible errors

    ; clear buffer
</PRE>clearbuf:
<PRE>    mov bx, 0  ; stdin
    mov cx, 1
    mov dx, SEG abyte
    mov ds, dx
    mov dx, OFFSET abyte
    mov ah, 3Fh
    INT 21h
    mov al, abyte
    cmp al, 0Ah
    jne clearbuf

    .EXIT
</PRE>END
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.10 5.10a 6.00 6.00a 6.00b 6.10 6.10a<BR>
masm<BR>
assembly assembler DOS int<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

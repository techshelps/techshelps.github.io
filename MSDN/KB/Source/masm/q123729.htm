

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Command Line Arguments </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123729">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1994/12/07">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  In C, you access command line arguments via the argc and argv parameters in your main function. MASM doesn't have a similarly built-in feature in a main function, but there are two ways to get to the command line arguments for your program.  MORE I...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAB9,QBV8,QAH4,QAPN,QBXT,QA5V,QAIB,QAHE,QAVI,QBW7,QAI5,QAX1,QAUJ,QAHC,QBWG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Accessing Command Line Arguments</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123729</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.1, 6.0,
   6.1, and 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In C, you access command line arguments via the argc and argv parameters in
your main function. MASM doesn't have a similarly built-in feature in a
main function, but there are two ways to get to the command line arguments
for your program.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Method One</h3>
 
<P>
The first way to get the command line arguments for a MASM program is to
access the command tail in the Program Segment Prefix (PSP). The command
tail is one or more bytes of ASCII text representing a program's command
line arguments. When your program starts, the ds and es segment registers
initially point to the PSP. The byte value at PSP+80h is the length of the
command tail. Therefore, you can access the command tail length through
either ds:80h or es:80h. The command tail itself begins at PSP+81h.
<P>
The command tail is so named because it contains everything that appears in
the command line after the command name. The arguments are unformatted;
they appear exactly as the user typed them in, including any extra spaces.
It is up to you to parse the command string. Typically, if you use
COMMAND.COM to load the program, the first character of the command tail is
the space that separated the command name from the first argument. If your
program was called from another program, the command tail may not contain
the leading space.
<P>
NOTE: 80h-FFh in the PSP is the default Disk Transfer Area (DTA).
Therefore, if you use MS-DOS calls that use the DTA, such as file I/O, the
command line arguments will be overwritten. To avoid this problem, either
extract the command tail before you do anything else in your code or set up
a custom DTA.
<P>
<P><h3>Method Two</h3>
 
<P>
The second way to get the command line arguments for a MASM program is to
access the command line at the end of the environment block. The
environment block contains zero-terminated ASCII strings, each of which
represents the name and value of an environment variable. After the last
string in the environment block, there are two zero terminators instead of
one. These are followed by the full command line, including the command
name that was used to start your program. The segment for the environment
block can be found at offset 2Ch in the PSP. Therefore, you will need to
load this segment value into a segment register, such as es, and access the
environment block from there.
<P>
<P><h2>REFERENCE</h2>
 
<P>
For more information on the PSP and the command tail, please see the PSP
table in the "Microsoft Macro Assembler Reference."
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.10 6.00 6.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

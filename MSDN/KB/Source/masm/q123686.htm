

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Segment Ordering </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123686">
<META NAME="KBModify" CONTENT="1995/01/06">
<META NAME="KBCreate" CONTENT="1994/12/07">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  This article discusses the segment ordering directives and explains how to get segments into a desired order.  The GROUP directive does not control segment ordering. When you create a group by using the GROUP directive, you are telling the linker t...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QABO,QACI,QAY4,QAB6,QAH4,QAJQ,QAJP,QAMV,QADX,QBWP,QBBI,QAOE,QDMW,QDMU,QBVV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Controlling Segment Ordering</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 6, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123686</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.1, 6.0,
   6.1, and 6.11
<LI>Microsoft Macro Assembler for Windows NT, version 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses the segment ordering directives and explains how to
get segments into a desired order.
<P>
The GROUP directive does not control segment ordering. When you create a
group by using the GROUP directive, you are telling the linker to treat
multiple logical segments as one physical segment, known as a group.
Placing two logical segments into a group forms one physical segment in the
resulting executable that is composed of the two logical segments. However,
the logical segments are not placed in any specific order.
<P>
The segment ordering in an executable is determined by the segment ordering
directive you use. The three segment ordering directives are: .ALPHA, .SEQ,
and .DOSSEG. However, the linker can use only one segment ordering in a
given executable.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If you use the .ALPHA directive, the linker places segments into the
executable in alphabetical order. In this case, segment ABC would be placed
before segment DEF.
<P>
If you use the .SEQ directive or if you don't specify any of the
directives, the linker places segments into the executable in the order
they are encountered. Therefore, the linker makes the first segment it sees
in the first .OBJ file into the first segment in the executable. It makes
the next segment it sees in the first .OBJ into the second segment, and so
on. When there are no more segments in the first .OBJ file, the linker
processes the segment's second .OBJ file, and so on, until all .OBJ files
have been processed.
<P>
If you use the .DOSSEG directive, specify .MODEL, or link with any high
level language, such as C or FORTRAN, the linker places segments into the
executable according to the segment class and sequential order. The linker
looks at the segments class and if the class ends in CODE, the segment is
placed towards the beginning of the executable. If the segment has class
STACK or class BSS, the linker places it towards the end of the executable.
Segments with other classes are placed in the middle. If there are multiple
segments in any grouping of classes, the segments are placed in sequential
order within that grouping.
<P>
One frequently used method to get segments into a specific order is to use
the .SEQ or .DOSSEG ordering and specify all the segments at the top of
each source file or in a file that you include into each source file. For
example:
<P>
<PRE>   header SEGMENT para public 'NOT_REALLY_CODE'
   header ENDS
   driver_code SEGMENT para public 'CODE'
   driver_code ENDS
   install_code SEGMENT para public 'DATA'
   install_code ENDS

</PRE>If you use the .SEQ segment ordering directive, the linker will see these
empty segment declarations first and place the segments in this order. If
you use the .DOSSEG segment ordering directive, the linker will put
segments header and driver_code towards the beginning of the executable
because they both have class names that end in CODE. The linker then places
header before driver_code because it saw header first, so again you end up
with same segment ordering.
<P>
NOTE: For this technique to work, you must use a combine type of PUBLIC so
that segment declarations with the same name are treated as the same
segment.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.10 6.00 6.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 6, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

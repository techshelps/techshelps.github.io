

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Returning a Float from Assembly to C </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q117682">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1994/07/05">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  Returning floating-point values from an assembly module to a C module presents certain problems: Small- or medium-model C code expects AX to contain the address of a memory location that contains the return value, while compact- or large-model C co...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAUD,QBFY,QAKD,QAH6,QAC2,QALW,QAH7,QAD7,QAY2,QAVX,QAVW,QAR5,QAEF,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Returning a Float from Assembly to C</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q117682</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.0a, 6.1, 6.1a,
   and 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Returning floating-point values from an assembly module to a C module
presents certain problems: Small- or medium-model C code expects AX to
contain the address of a memory location that contains the return value,
while compact- or large-model C code expects DX:AX to contain the address
of this memory location. This is explained very briefly in the chapter on
mixed-language programming in the "MASM Programming Guide," but no examples
are provided there. In the "MORE INFORMATION" section, below, is sample
code that illustrates how to pass and return a floating-point value from
assembly code to C code.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following sample code shows two methods to return a floating-point
value from assembly code to C code. The first method (function Add1),
returns the address of a storage location set up by the assembly module.
This method is fairly straightforward. The sample uses large-model code, so
far pointers are used. If small- or medium-model code is selected, the
segment values are not needed.
<P>
There is a problem with this technique if the assembly module is contained
in a Windows DLL. The data segment in the DLL is not accessible by the
calling program, so returning the address as shown in Add1 does not work.
An alternative technique (function Add1Again) is also illustrated in the
sample code. In this method, the calling program passes an address of a
floating-point variable, and the function places the return data at that
address. The sample is intended to be built as an MS-DOS program (or a
QuickWin), but Add1Again can be used in a DLL.
<P>
<P><h3>Sample Build</h3>
 
<P>
<PRE>      rem MAKEFTST.BAT
      rem Batch program to build the test files
   cl /c /AL /Od /Zi floatstc.c
   ml /c /FPi /Zi floatsta.asm
      rem /FPi allows the MASM module to use the C floating point emulator
   link /CO floatstc + floatsta;
      rem Resulting program is FLOATSTC.EXE and can be test in CodeView
      rem if desired

</PRE><h3>Sample Code</h3>
 
<P>
<PRE>   ;assembly language routines
   .MODEL LARGE,C
   .8087

   PUBLIC Add1
   PUBLIC Add1Again

   .FARDATA
   temp REAL4 ?    ; temporary storage for return value

   .CODE

       ; procedure to return a float
   Add1 PROC USES es, y:REAL4
       ; y is the float passed from C
   ASSUME ES:SEG temp
       mov ax, SEG temp
       mov es, ax          ; load the far data segment
       fld DWORD PTR y     ; load the coprocessor
       fld1
       faddp ST(1),ST      ; add 1 to the value passed in
       fstp DWORD PTR es:temp  ; store the value to temporary storage
       mov dx, SEG temp        ; load DX:AX with the address of temp
       mov ax, OFFSET temp
           ; this is what the C module expects as a return value
       ret
   Add1 ENDP

       ; procedure to do the same things
       ; but return a value at the passed address
   Add1Again PROC USES es bx, y:REAL4, z:DWORD
       ; y is the float passed from C
       ;z is the address of a float in the C module
   ASSUME ES:NOTHING
       les bx, z       ; load ES:BX with the address of the return location
       fld DWORD PTR y
       fld1
       faddp st(1),st
       fstp DWORD PTR es:[bx]
           ; store the final value to the C modules data area
       ret
   Add1Again ENDP

   END

/****************************************
 * C module to test the assembly routines
 ****************************************/

   #include &lt;stdio.h&gt;

   float Add1(float i);
   void Add1Again(float i, float *j);

   float p = 10;
   float y = 0;
   float z = 0;

   void main()
   {
       y = Add1(p);
       printf("p = %f\t\ty = %f\n",p,y);
       Add1Again(p, &amp;z);
       printf("p = %f\t\tz = %f\n",p,z);
   }

</PRE><h2>REFERENCES</h2>
 
<P>
For additional information on returning floating-point values from a DLL,
please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE ID: <B><A HREF="../WIN16SDK/Q86081.htm">Q86081</A></B>
   TITLE     : PRB: DLL Function Returns Float or Double Value Incorrectly
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.00a 6.10 6.10a<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: No Stack Frame From CMACROS.INC cProc FORCEFRAME </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94943 ">
<META NAME="KBModify" CONTENT="1997/09/16">
<META NAME="KBCreate" CONTENT="1993/01/25">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  When an application includes the CMACROS.INC file and specifies the FORCEFRAME option with the cProc macro, the assembler does not generate a stack frame.  CAUSE =====  The code to determine that the application specifies the FORCEFRAME option was ...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAIB,QAB9,QAGI,QBBI,QAR4,QAMB,QAIA,QBXT,QA5V,QAUR,QAEF,QAC2,QBE7,QBE6 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: No Stack Frame From CMACROS.INC cProc FORCEFRAME</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 16, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94943 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
6.00 6.00a 6.00b 6.10 6.10a | 6.00 6.00a 6.00b
<PRE>MS-DOS                      | OS/2
</PRE>kbtool kbfixlist kbbuglist
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.0a, 6.0b,
   6.1, and 6.1a
<LI>Microsoft Macro Assembler for OS/2, versions 6.0, 6.0a, and 6.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When an application includes the CMACROS.INC file and specifies the
FORCEFRAME option with the cProc macro, the assembler does not
generate a stack frame.
<P>
<P><h2>CAUSE</h2>
 
<P>
The code to determine that the application specifies the FORCEFRAME
option was omitted from the cProc macro.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To correct this problem, add the following three lines to CMACROS.INC.
Modify version 5.3 to add the following lines before line 876 or
modify version 5.31 to add the following lines before line 1518.
<P>
<PRE>   ifidn &lt;x&gt;,&lt;FORCEFRAME&gt;
   ?ff=1
   endif

</PRE>Alternately, modify the application source code to remove the cProc
macro and in its place specify the PROC directive with the FORCEFRAME
argument.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a problem in CMACROS.INC versions
5.3 and 5.31 distributed with MASM versions 6.0, 6.0a, 6.0b, 6.1, and
6.1a. This problem was corrected in the CMACROS.INC distributed with
MASM for MS-DOS version 6.11.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The corrected CMACROS.INC file is as follows:
<P>
<PRE>   ifidn &lt;x&gt;,&lt;ATOMIC&gt;
   ?nx=1
   endif

   ifidn &lt;x&gt;,&lt;FORCEFRAME&gt;
   ?ff=1
   endif

   ifidn &lt;x&gt;,&lt;C&gt;
   ?pcc=0
   endif

</PRE>Comments in the CMACROS.INC file version 5.31 document the cProc macro as
follows:
<P>
<PRE>   cProc - define a 'c' procedure

   cProc is the procedure definition for procedures.

      format:
              cProc n,cf,a
      where:
              n       is the name of the procedure

              cf      controls certain definitions, and may be:
                      NEAR       proc is to be a near label
                      FAR        proc is to be a far label
                      PUBLIC     proc is to be defined as public
                      SMALL      call makeframe procedure
                      NODATA     don't create prolog code to setup DS
                      ATOMIC     don't link stack if not needed
                                 NODATA must be specified for ATOMIC
                      FORCEFRAME Force generation of a frame
                      C          proc is to be a C procedure
                      PLM        proc is to be a PL/M procedure
                      PASCAL     proc is to be a PL/M procedure
                      WIN        proc is to be a Windows procedure
                      NONWIN     proc isn't to be a Windows procedure

              a       is a list of registers that are to be saved whenever
                      the procedure is invoked.

                    makeframe procedure: If small is specified, then the
                    "makeframe procedure" is invoked instead of generating
                    normal prologues/epilogues

                    A call is performed to the makeframe procedure. The
                    call is followed by two bytes. the first byte is the
                    number of locals to allocate for the frame, the second
                    is the number of bytes of parameters. The makeframe
                    procedure will in turn call the cProc routine at the
                    address following the data bytes. When the cProc is
                    finished, it will do a near return to the makeframe
                    procedure to clean up the frame and exit.

                    Note that register parameters and makeframe are
                    incompatible and cannot be used together.

                    The makeframe procedure will save SI, DI, and also DS
                    if a far procedure. These registers will be removed
                    from the autosave list if specified.

</PRE>The following code example demonstrates this problem.
<P>
<P><h3>Sample Code</h3>
 
<P>
; Assemble options needed: none
<P>
INCLUDE cmacros.inc
<P>
sBegin code
assumes cs, code
assumes ds, data
<PRE>   cProc my_proc, &lt;FORCEFRAME, PUBLIC&gt;, &lt;&gt;
   cBegin my_proc      ; stack frame prologue code belongs here
   xor bx, bx
   cEnd                ; stack frame epilogue code belongs here
sEnd

</PRE>_text SEGMENT
start:
<PRE>   call my_proc
   mov ax, 4C00h
   int 21h
</PRE>_text ENDS
END start
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.30 6.00 6.00a 6.00b 6.10 6.10a buglist6.00a<BR>
buglist6.00b buglist6.10 buglist6.10a fixlist6.11<BR>
KBCategory: kbtool kbfixlist kbbuglist<BR>
KBSubCategory: MLIss<BR>
Solution Type     : kbfix<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 16, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Turning a 16-bit Protected Segment into a 32-bit Segment </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q123688">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1994/12/07">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  By default, 32-bit code created in MASM exists in 16-bit segments. This article shows by example how to use DPMI calls to change a 16-bit segment into a 32-bit segment.  NOTE: On a 386, almost no improvement in performance results from using 32-bit...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAGI,QAEF,QAYA,QAI4,QAY4,QAIF,QAY5,QATS,QASR,QABG,QBV8,QAK7,QAB9,QAPF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Turning a 16-bit Protected Segment into a 32-bit Segment</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q123688</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.1, and 6.11
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
By default, 32-bit code created in MASM exists in 16-bit segments. This
article shows by example how to use DPMI calls to change a 16-bit segment
into a 32-bit segment.
<P>
NOTE: On a 386, almost no improvement in performance results from using
32-bit code in a 32-bit segment over using 32-bit code in a 16-bit segment.
There may be slight performance improvement on a 486 due to the effects of
the 66h prefix byte on instruction pipelining.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The following code fragment uses DPMI calls to turn a 16-bit protected mode
segment into a 32-bit protected mode segment. A number of the instructions
are encoded using the DB directive because you need to generate USE16
instructions inside of a USE32 segment. The sample includes an interface
function so that you can call the 32-bit segment from a 16-bit C, C++, or
FORTRAN module.
<P>
NOTE: Your debugger may still report these segments to be 16-bit segments.
It all depends on what the debugger expects.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>   .MODEL large
   .386


   .CODE
   SwitchInterface PROC FAR16
      call FAR32 PTR Switch16bitTo32bit
      ret
   SwitchInterface ENDP


   CODE32 SEGMENT PARA PUBLIC USE32 'CODE'
   Switch16bitTo32bit PROC FAR32
      xor eax, eax                       ;zero set
      xor eax, DWORD PTR 0C08B0000h      ;zero clear for 32-bit
      jz Still16bit                      ;zero set for 16-bit
      ret

   Still16bit:
      DB 083h, 0ECh, 008h        ;sub sp, 8
      DB 08Ch, 0D0h              ;mov ax, ss
      DB 08Eh, 0C0h              ;mov es, ax
      DB 08Bh, 0FCh              ;mov di, sp

      DB 08Ch, 0CBh              ;mov bx, cs
      DB 0B8h, 00Bh, 0000h       ;mov ax, 000Bh
      int 31h

      DB 026h, 080h, 04Dh, 006h, 040h    ;or BYTE PTR es:[di+6], 40h
      DB 0B8h, 00Ch, 0000h       ;mov ax, 000Ch
      int 31h

   Now32bit:
      add sp, 8
      ret
   Switch16bitTo32bit ENDP
   CODE32 ENDS

   END
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 6.00 6.10<BR>
KBCategory: kbprg<BR>
KBSubcategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

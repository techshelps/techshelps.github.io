

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Span-Dependent Value Behavior Changes in N-Pass Assembly </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q80384 ">
<META NAME="KBModify" CONTENT="1995/02/21">
<META NAME="KBCreate" CONTENT="1992/01/28">
<META NAME="Keywords" CONTENT="kbtool kbprb">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  When the Microsoft Macro Assembler (MASM) assembles code that depends on the difference between the values of two labels (a span-dependent value), the results of an assembly by MASM versions 6.0 or later differs from the results produces by an earl...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH6,QAH7,QAD7,QAKD,QADK,QAH4,QAMB,QAC2,QABH,QAYV,QAB9,QA28,QATJ,QAKJ,QAFQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Span-Dependent Value Behavior Changes in N-Pass Assembly</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  February 21, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q80384 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 6.0, 6.0a, 6.0b,
   6.1, 6.1a, and 6.11
<LI>Microsoft Macro Assembler for OS/2, versions 6.0, 6.0a, 6.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When the Microsoft Macro Assembler (MASM) assembles code that depends
on the difference between the values of two labels (a span-dependent
value), the results of an assembly by MASM versions 6.0 or later
differs from the results produces by an earlier version of MASM.
<P>
Specifically, the difference occurs when the application uses a span-
dependent value in one of the following cases:

<UL><LI>In the expression for a preprocessor directive, like IF
<LI>In the expression for a predefined macro, like REPEAT or WHILE
<LI>In the arguments to a MACRO or TEXTEQU statement preceded by %
   (percent sign)
<P>
</UL><h2>CAUSE</h2>
 
<P>
MASM versions 5.1 and earlier are two-pass assemblers; MASM versions
6.0 and later are N-pass assemblers.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Avoid using a span-dependent value in a preprocessor directive or in a
predefined macro. If the code requires a span-dependent value, create
and review a listing file to determine that each span-dependent value
is evaluated as desired.
<P>
Avoid using the % operator with span-dependent values. The assembler
evaluates an expression containing the % operator on the first pass.
In many cases, the assembler produces the desired results when you
remove the % operator and delay expression evaluation to a later pass.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is under review and may or may not change in a future
release.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
MASM versions 5.1 and earlier are two-pass assemblers. The source file
is read twice to determine the size of the instructions and the
location of labels.
<P>
MASM versions 6.0 and later are N-pass assemblers. The assembler scans
the source until it can determine the size of all instructions and the
location of all labels. However, an N-pass assembler must determine
certain values on its first pass through the application code. These
values include expressions in preprocessor directives, expressions in
predefined macros, and arguments preceded by the % operator. If one of
these values is based on the difference between the values of two
labels, the results may differ from those generated by MASM versions
5.1 and earlier.
<P>
The difference occurs because the assembler evaluates expressions and
arguments based on the undetermined label locations available during
the first assembly pass that may change in a subsequent assembly pass.
Typically, the value changes when a forward reference occurs between
the two labels. Because the assembler adds padding bytes for the
forward reference and removes the padding in subsequent assembly
passes, the second label has a larger value during the first assembly
pass than in subsequent passes.
<P>
The code example below demonstrates this behavior. Specify the /Fl
assembler option switch to create a listing file. Review the listing
file to see how the assembler processes a span-dependent value.
<P>
The following information is part of the README.TXT file distributed
with MASM version 6.1:
<P>
<PRE>   Span-Dependent Expressions used in Macros
   -----------------------------------------

   MASM 6.1 evaluates macro expressions only on the first pass of assembly,
   but code and data are reevaluated on subsequent passes. Because of this,
   macro expressions which depend on the span between two addresses may not
   evaluate correctly. For example, the following code will not evaluate
   correctly:

      Label1:
         JMP Label2
      Label2:
         REPEAT Label2 - Label1  ; Evaluates incorrectly
         INC AX
      ENDM

   View the listing file to determine if a questionable macro expression
   was evaluated as desired.

   Span-Dependent Text Equates
   ---------------------------

   The TEXTEQU operator is evaluated on the first assembly pass. If TEXTEQU
   is used with an expression that depends on the difference between two
   addresses, the resulting constant may be incorrect. For example, the
   following code will not evaluate correctly:

      Label1:
         JMP Label2
      Label2:
         WrongNum TEXTEQU %Label2-Label1 ; WrongNum will be incorrect

</PRE><h3>Sample Code</h3>
 
<P>
; Assemble options needed in MASM 6.x: /c /Fl
<P>
<PRE>_text   SEGMENT para public 'CODE'
        ASSUME cs:_text
</PRE>start:
<PRE>        jmp SHORT forward
</PRE>forward:
<PRE>        mov ax, 4C00h
        int 21h
_text   ENDS

</PRE>count = offset forward - offset start
<P>
IF count LT 6
<PRE>   %OUT two-pass assembler   ; MASM 5.1 and earlier shows this message
ELSE
   %OUT n-pass assembler     ; MASM 6.0 and later shows this message
</PRE>ENDIF
<P>
<PRE>tst1    SEGMENT para public
</PRE>index = 0
<PRE>        WHILE index LT count
          DB 1          ; This will be repeated 10 times in MASM 6.x.
</PRE>index = index + 1
<PRE>        ENDM
tst1    ENDS

tst2    SEGMENT para public
        REPT count      ; This will be repeated 10 times in MASM 6.x,
          DB 1          ; twice in MASM 5.1.
        ENDM
tst2    ENDS

mac3    MACRO arg1
        macvar = arg1
        ENDM

tst3    SEGMENT para public
        mac3 %count     ; This will set macvar to 10 in MASM 6.x
tst3    ENDS            ; and to 2 in MASM 5.1.

txt4    TEXTEQU %count

tst4    SEGMENT para public
txtvar  DB txt4         ; This will set txtvar to 10 in MASM 6.x.
tst4    ENDS

</PRE>END start
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 6.00 6.00a 6.00b 6.10<BR>
KBCategory: kbtool kbprb<BR>
KBSubcategory: MLIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  February 21, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

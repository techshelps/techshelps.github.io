

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MASM Optimizations Not Recognized by Some Processors </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q69987 ">
<META NAME="KBModify" CONTENT="1995/01/23">
<META NAME="KBCreate" CONTENT="1991/03/08">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  For optimization reasons, MASM may generate the opcode 83 for logical AND, OR, and XOR instructions in some cases, rather than opcode 81. Unfortunately, opcode 83 was not documented by Intel for 80x86/8088 processors prior to the 80386. Therefore, ...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBVV,QALG,QAH4,QAJQ,QAI4,QAH7,QAH6,QAD7,QDIO,QDKW,QAPF,QDO7,QAIH,QDMW,QBXS V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>MASM Optimizations Not Recognized by Some Processors</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 23, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q69987 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler for MS-DOS, versions 5.1, 5.1a, 6.0,
   6.0a, 6.0b, 6.10, 6.10a, and 6.11
<LI>Microsoft Macro Assembler for OS/2, versions 5.1, 5.1a, 6.0, 6.0a,
   and 6.0b
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
For optimization reasons, MASM may generate the opcode 83 for logical
AND, OR, and XOR instructions in some cases, rather than opcode 81.
Unfortunately, opcode 83 was not documented by Intel for 80x86/8088
processors prior to the 80386. Therefore, some processors (such as the
NEC V25 and V35 controllers) and some in-circuit emulators for the
80x86 family do not support this opcode.
<P>
In the sample code below, "Listing 1" shows code that will cause the
83 opcode to be generated. "Listing 2" illustrates a way to work
around this situation for those who are using processors that do not
support this opcode and who are using versions of the assembler prior
to 6.0. Note that opcode 83 does work properly on all Intel 80x86/8088
processors, and its generation is by design.
<P>
The sign-extension optimization may be disabled in MASM 6.0 and later
with the OPTION directive. To override the default sign-extended
opcodes for AND, OR, and XOR, place the following line at the
beginning of the source file:
<P>
<PRE>   OPTION NOSIGNEXTEND

</PRE><h2>MORE INFORMATION</h2>
 
<P>
The opcode 83 takes advantage of the sign-extension feature available
on the Intel 80x86 processors. If the high byte of a word has all bits
set or all bits cleared, and the most significant bit of the low byte
is in the same state as the bits in the high byte, then the word may
be represented by one byte. The opcode 83 instructs the machine to
build the word by taking the byte and extending the sign bit (most
significant bit) of the byte into the rest of the word.
<P>
For example, if the word is FFF0h, the word may be represented by F0h.
By the same method, if the word is 000Fh, it may be stored as 0F.
<P>
The work-around for MASM versions prior to 6.0 shown below works
because pass one of the assembler does not know if the second operand
will meet the above criteria, and will generate the opcode 81. Zero is
defined as the number 0, so the operand value does not change.
<P>
<P><h3>Sample Code</h3>
 
<P>
;Listing 1:
<P>
.MODEL small
.DATA
val DW 0
<P>
.CODE
mine PROC
<PRE>    and val, 0FFF0h
</PRE>mine ENDP
END
<P>
;Listing 2:
<P>
.MODEL small
.DATA
val DW 0
<P>
.CODE
mine PROC
<PRE>    and val, ZERO + 0FFF0h
</PRE>mine ENDP
<P>
ZERO EQU 0
END
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: kbinf 5.10 5.10a 6.00 6.00a 6.00b 6.10 6.10a<BR>
KBCategory: kbprg<BR>
KBSubCategory: MASMLngIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 23, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

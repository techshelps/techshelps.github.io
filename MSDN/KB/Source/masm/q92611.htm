

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: MASM Generates Unexpected Prefix Bytes 66h, 67h </TITLE>

<!--STYLE_BEGIN-->
<LINK REL="STYLESHEET" HREF="/support/kbstyle.css" TYPE="text/css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q92611 ">
<META NAME="KBModify" CONTENT="1995/01/09">
<META NAME="KBCreate" CONTENT="1992/11/11">
<META NAME="Keywords" CONTENT="kbtool kbprb">
<META NAME="KBArea" CONTENT="Support; KB; masm">
<META NAME="Description" CONTENT="  When the .386, .386p, .486, or .486p directive is used in MASM, the source code listing or the mixed source and assembly code listing in the CodeView debugger may indicate that code for 32-bit instructions has been generated incorrectly. For exampl...">
<META NAME="Product" CONTENT="Macro Assembler">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAYA,QAY5,QAB9,QAEF,QDIO,QBV8,QDIR,QATX,QAIJ,QATS,QASR,QALG,QAYY,QABG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: MASM Generates Unexpected Prefix Bytes 66h, 67h</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 9, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q92611 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Macro Assembler (MASM) for MS-DOS, versions 5.0, 5.1,
   5.1a, 6.0, 6.0a, 6.0b
<LI>Microsoft Macro Assembler for OS/2, versions 5.1, 5.1a, 6.0, 6.0a,
   6.0b
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When the .386, .386p, .486, or .486p directive is used in MASM, the source
code listing or the mixed source and assembly code listing in the CodeView
debugger may indicate that code for 32-bit instructions has been generated
incorrectly. For example, when either of the following instructions is
assembled, the prefix bytes 66h and 67h may or may not appear before the
instruction opcode:
<P>
<PRE>      mov eax, [ebx]
      mov ax, [bx]

</PRE><h2>CAUSE</h2>
 
<P>
The 386 and 486 processors can operate with either 32-bit operations or 16-
bit operations as the default mode. The descriptor for each memory segment
controls the default mode for operations in the segment. In either mode, a
prefix byte (66h or 67h) at the beginning of an instruction overrides the
default mode for the current memory segment for a given instruction. In
other words, when the processor encounters a prefix byte on an instruction
in a 16-bit segment, the instruction executes as a 32-bit operation.
<P>
The condition described above occurs when the source code indicates that a
code segment is a 16-bit segment or a 32-bit segment, and the segment
loaded into memory is of the opposite type.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
When MASM assembles a file that uses full segment directives, it treats all
segments as 32-bit segments and all operations as 32-bit operations. To
change this treatment, specify the USE16 modifier for each SEGMENT
directive that describes a 16-bit segment. In MASM version 6.0 or later,
the OPTION SEGMENT:USE16 directive specifies that all segments are 16-bit
segments.
<P>
When MASM assembles a file that uses simplified segment declarations, it
treats all segments as 32-bit segments when a .386, .386p, .486, or .486p
processor directive precedes the .MODEL statement. If the processor
directive follows the .MODEL statement, MASM treats all segments as 16-bit
segments and all operations as 16-bit operations.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Note that to run code in 32-bit segments, the operating system with
which the application runs support 32-bit code segments. Most PC-based
operating systems, including MS-DOS version 5.0, Microsoft Windows
version 3.1, and OS/2 versions 1.x do not support 32-bit code
segments. Later versions of operating systems and MS-DOS extender
programs may provide this support.
<P>
For more information on the differences between 16-bit and 32-bit
segments, refer to chapter 16 of the "Intel 80386 Programmer's
Reference Manual" (1986 edition).
<P>
The following code samples demonstrate this problem when CodeView for
MS-DOS is used to debug these programs.
<P>
<P><h3>Sample Code</h3>
 
<P>
; Assembler options needed: /Zi
<P>
.386
<PRE>DOSSEG                           ; Force DOS segment order
DGROUP GROUP _DATA, STACK        ; Stack and data in DGROUP

</PRE>STACK SEGMENT PARA STACK 'STACK'
<PRE>    DB 100h DUP (?)              ; 256-byte stack
</PRE>STACK ENDS
<P>
_DATA SEGMENT WORD PUBLIC 'DATA' ; Data segment with string data
msg DB "Hello, world.", 13, 10, "$"
_DATA ENDS
<P>
_TEXT SEGMENT WORD PUBLIC 'CODE' ; Code segment
ASSUME cs:_TEXT, ds:DGROUP, ss:DGROUP
<P>
start:
<PRE>    mov ax, DGROUP               ; Initialize data segment
    mov ds, ax

    cli                          ; Turn off interrupts
    mov ss, ax                   ; Make SS and
    mov sp, OFFSET STACK         ;   SP relative to DGROUP
    sti                          ; SS now equals DS

    mov ah, 9h                   ; Request DOS Function 9
    mov dx, OFFSET msg           ; Load DX with offset of string
                                 ;   (segment already in DS)
    int 21h                      ; Display String to Standard Output

    mov ax, 4C00h                ; Exit functions with 0 in AL
    int 21h                      ; Terminate Process with Return Code

</PRE>_TEXT ENDS
<P>
<PRE>END start                        ; End with reference to first
                                 ;   executable statement (CS:IP)

</PRE><h3>Sample Code</h3>
 
<P>
; Assembler options needed: /Zi
<P>
.386
<PRE>.MODEL small, c                  ; Small model (could be any model)

.STACK 100h                      ; 256-byte stack

.DATA                            ; Data segment
</PRE>msg DB "Hello, world.", 13, 10, "$"
<P>
<PRE>.CODE                            ; Code segment
</PRE>start:
<PRE>    mov ax, DGROUP               ; Initialize data segment
    mov ds, ax

    cli                          ; Turn off interrupts
    mov ss, ax                   ; Make SS and
    mov sp, OFFSET STACK         ;   SP relative to DGROUP
    sti                          ; SS now equals DS

    mov ah, 9h                   ; Request DOS Function 9
    mov dx, OFFSET msg           ; Load DX with offset of string
                                 ;   (segment already in DS)
    int 21h                      ; Display String to Standard Output

    mov ax, 4C00h                ; Exit functions with 0 in AL
    int 21h                      ; Terminate Process with Return Code

END start                        ; End with reference to first
                                 ;   executable statement (CS:IP)
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 5.00 5.10 5.10a 6.00 6.00a 6.00b illegal<BR>
instruction hang<BR>
KBCategory: kbtool kbprb<BR>
KBSubCategory: MLIss<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 9, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

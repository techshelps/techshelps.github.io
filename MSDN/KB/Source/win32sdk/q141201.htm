

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOGEX Resource Template Differences from DIALOG Template </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q141201">
<META NAME="KBModify" CONTENT="1995/12/14">
<META NAME="KBCreate" CONTENT="1995/12/13">
<META NAME="Keywords" CONTENT="kbprg kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  When you create or modify a dialog template in memory, it is necessary to know the form of the DLGTEMPLATE and DLGITEMTEMPLATE structures. While these structures are well documented for DIALOG resources, they take a different form for DIALOGEX reso...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAMB,QA7O,QAOE,QAMN,QAB5,QAI4,QATX,QBCF,QA6E,QA01,QAIJ,QA4H,QABI,QA36,QAUJ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>DIALOGEX Resource Template Differences from DIALOG Template</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 14, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q141201</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK) for:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
When you create or modify a dialog template in memory, it is necessary to
know the form of the DLGTEMPLATE and DLGITEMTEMPLATE structures. While
these structures are well documented for DIALOG resources, they take a
different form for DIALOGEX resources, and are not well documented in the
SDK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
The extended DLGTEMPLATE structure, call it DLGTEMPLATEEX, has this form:
<P>
typedef struct tagDLGTEMPLATEEX{
<PRE>    WORD wDlgVer;           // use 1
    WORD wSignature;        // use 0xFFFF
    DWORD dwHelpID;         // Dialog's context help ID
    DWORD dwExStyle;        // Extended style
    DWORD dwStyle;          // Style
    WORD cDlgItems;         // Number of controls in dialog
    short x;                // Initial position, horizontal
    short y;                // Initial position, vertical
    short cx;               // Width
    short cy;               // Height
</PRE>} DLGTEMPLATEEX;
<P>
This is followed by menu name, class name, title, and font info if style
includes DS_SETFONT, which have the same form as documented in the SDK for
DLGTEMPLATE.
<P>
The extended DLGITEMTEMPLATE structure, call it DLGITEMTEMPLATEEX, has this
form:
<P>
typedef struct tagDLGITEMTEMPLATEEX{
<PRE>    DWORD dwHelpID;         // Context help ID for control
    DWORD dwExStyle;        // Control extended styles
    DWORD dwStyle;          // Style
    short x;                // Initial position, horizontal
    short y;                // Initial position, vertical
    short cx;               // Width
    short cy;               // Height
    DWORD dwID;             // Window ID
</PRE>} DLGITEMTEMPLATEEX;
<P>
This is followed by class name, title, and creation data for the control,
which have the same form as documented in the SDK for DLGITEMTEMPLATE.
<P>
<P><h3>Code Sample</h3>
 
<P>
The following code creates a DIALOGEX resource in memory with a button and
a custom control to which it passes creation data:
<P>
<PRE>/* allocate some memory */
</PRE>pdlgtemplate = p = (PWORD) LocalAlloc (LPTR, 1000);
<P>
<PRE>/* start to fill in the dlgtemplate information, addressing by WORDs */
</PRE>lStyle = DS_MODALFRAME | WS_POPUP | WS_VISIBLE | WS_CAPTION |
WS_SYSMENU| DS_SETFONT;
<PRE>*p++ = 1;          // DlgVer
*p++ = 0xFFFF;     // Signature
*p++ = 0;          // LOWORD HelpID
*p++ = 0;          // HIWORD HelpID
*p++ = 0;          // LOWORD (lExtendedStyle)
*p++ = 0;          // HIWORD (lExtendedStyle)
</PRE>*p++ = LOWORD (lStyle);
*p++ = HIWORD (lStyle);
<PRE>*p++ = 2;          // NumberOfItems
*p++ = 210;        // x
*p++ = 10;         // y
*p++ = 100;        // cx
*p++ = 100;        // cy
*p++ = 0;          // Menu
*p++ = 0;          // Class

/* copy the title of the dialog */
</PRE>nchar = nCopyAnsiToWideChar (p, TEXT("Dialog"));
p += nchar;
<P>
<PRE>/* Font information because of DS_SETFONT */
*p++ = 18;     // point size
</PRE>nchar = nCopyAnsiToWideChar (p, TEXT("Times New Roman"));  // Face name
p += nchar;
<P>
<PRE>/* make sure the first item starts on a DWORD boundary */
</PRE>p = lpwAlign (p);
<P>
<PRE>/* now start with the first item */
</PRE>lStyle = BS_PUSHBUTTON | WS_VISIBLE | WS_CHILD | WS_TABSTOP;
<PRE>*p++ = 0;          // LOWORD (lHelpID)
*p++ = 0;          // HIWORD (lHelpID)
*p++ = 0;          // LOWORD (lExtendedStyle)
*p++ = 0;          // HIWORD (lExtendedStyle)
</PRE>*p++ = LOWORD (lStyle);
*p++ = HIWORD (lStyle);
<PRE>*p++ = 10;         // x
*p++ = 60;         // y
*p++ = 80;         // cx
*p++ = 20;         // cy
*p++ = IDOK;       // LOWORD (Control ID)
*p++ = 0;      // HOWORD (Control ID)

/* fill in class i.d., this time by name */
char = nCopyAnsiToWideChar (p, TEXT("BUTTON"));
</PRE>p += nchar;
<P>
<PRE>/* copy the text of the first item */
</PRE>nchar = nCopyAnsiToWideChar (p, TEXT("OK"));
p += nchar;
<P>
*p++ = 0;  // advance pointer over nExtraStuff WORD
<P>
<PRE>/* make sure the second item starts on a DWORD boundary */
</PRE>p = lpwAlign (p);
<P>
lStyle = WS_VISIBLE | WS_CHILD;
<PRE>*p++ = 0;             // LOWORD (lHelpID)
*p++ = 0;             // HIWORD (lHelpID)
*p++ = 0;             // LOWORD (lExtendedStyle)
*p++ = 0;             // HIWORD (lExtendedStyle)
</PRE>*p++ = LOWORD (lStyle);
*p++ = HIWORD (lStyle);
<PRE>*p++ = 20;            // x
*p++ = 5;             // y
*p++ = 65;            // cx
*p++ = 45;            // cy
*p++ = 57;            // LOWORD (Control ID)
*p++ = 0;               // HOWORD (Control ID)

// The class name of the custom control
</PRE>nchar = nCopyAnsiToWideChar (p, TEXT("ACustomControl"));
p += nchar;
<P>
<PRE>/* copy the text of the second item, null terminate the string. */
</PRE>nchar = nCopyAnsiToWideChar (p, TEXT(""));
p += nchar;
<P>
*p++ = 8;  // number of bytes of extra data
<P>
<PRE>*p++ = 0xA1;   //extra data
</PRE>*p++ = 0xA2;
*p++ = 0xA3;
*p++ = 0xA4;
<P>
DialogBoxIndirect (ghInst, (LPDLGTEMPLATE) pdlgtemplate, hwnd,
(DLGPROC) About);
LocalFree (LocalHandle (pdlgtemplate));
<P>
<P>
<PRE>///////////////////////////////////////////////////////////////////////////
//
//
</PRE>Helper routines taken from the WIN32SDK DYNDLG sample
<PRE>///////////////////////////////////////////////////////////////////////////
//
//
</PRE>LPWORD lpwAlign ( LPWORD lpIn)
{
<PRE>  ULONG ul;

  ul = (ULONG) lpIn;
  ul +=3;
  ul &gt;&gt;=2;
  ul &lt;&lt;=2;
  return (LPWORD) ul;
</PRE>}
<P>
<PRE>int nCopyAnsiToWideChar (LPWORD lpWCStr, LPSTR lpAnsiIn)
</PRE>{
<PRE>  int nChar = 0;

  do {
    *lpWCStr++ = (WORD) *lpAnsiIn;
    nChar++;
  } while (*lpAnsiIn++);

  return nChar;
</PRE>}
<P>
<P><h2>REFERENCE</h2>
 
<P>
For further information on using Dialog templates, please see the SDK
documentation for the DLGTEMPLATE and DLGITEMTEMPLATE structures.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 kbinf<BR>
KBCategory: kbprg kbcode<BR>
KBSubcategory:<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 14, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Code that Works with Different International Formats </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q130056">
<META NAME="KBModify" CONTENT="1998/01/15">
<META NAME="KBCreate" CONTENT="1995/05/10">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Some European coutries like Germany use a different floating point format that doesn't include the decimal point (.). This has caused problems whtn the actual numbers use the decimal point format (xxx.xx) and the German version of Microsoft Excel i...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QDNG,QBTX,QATX,QDL9,QBWO,QBWN,QBC9,QBC8,QANO,QAWP,QAKC,QBWI,QBVP,QAR4,QBWQ V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Writing Code that Works with Different International Formats</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 15, 1998</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q130056</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10 1.20 | 3.50 1.20
<PRE>WINDOWS   | WINDOWS NT
</PRE>kbother
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1
<LI>Microsoft Win32 Software Development Kit (SDK) version 3.5
<LI>Microsoft Win32s version 1.2
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Some European coutries like Germany use a different floating point format
that doesn't include the decimal point (.). This has caused problems whtn
the actual numbers use the decimal point format (xxx.xx) and the German
version of Microsoft Excel is expecting a comma (xxx,xx).
<P>
Some developers have made the mistake of hard-coding formats or searching
for all periods and replacing them with commas. This is not good
programming practice.
<P>
Microsoft Excel uses the Control Panel Number Format for its separators.
So, regardless of what language version of Windows it runs on, it always
uses the correct separators. Microsoft recommends that you use the same
approach. Always use the separators defined in the number format of control
panel.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
All the international information is stored in the WIN.INI file under the
[intl] heading. The application should look for the value of "sDecimal."
It can query this value using the GetProfileString API. If the application
uses this approach, it will have the correct separator for all countries.
<P>
To avoid potential problems, never make assumptions about number formats,
currency formats (that is, don't hard-code the dollar symbol), date
formats, or time formats. These are different for different countries. Use
the settings from the Control Panel.
<P>
If an application does any text processing, such as sorting or
upper/lowercase conversions, it should use the Windows APIs and not
supply its own conversion tables and functions. For example, if an
application use APIs such as AnsiLower, it will work regardless of
language because it obtains the data from the language DLL.
<P>
To output floating point numbers in Windows, Microsoft recommends that you
use wsprintf. The concept of an "international format string" only has
meaning when the string is output to the user. Internal to the computer,
for all calculations and manipulations, the concept does not apply. Thus
the application can keep its floats in the native format and only convert
to strings before calling the wsprintf function.
<P>
There is no need to load conversions from float to string, and vice versa.
In other words, there is no need to write any functions such as
InterStringToFloat(), InterFloatToString(), and so on.
<P>
Here's a simple algorithm you could use.

<OL><P><LI>Convert your float to a string by using the _fcvt or _gcvt standard C
   functions.

<P><LI>Get the sThousand and sDecimal separators from the WIN.INI file by using
   the GetProfileString API.

<P><LI>Call wsprintf to output the converted string, using sThousand and
   sDecimal in the formatting string.
<P>
</OL>The following is an example of a mistake made by a developer who was not
thinking internationally:.
<P>
<PRE>   if language=English
      Output_English_Float ()
   else
      Output_International_Float ()

</PRE></OL>This is not correct. Think of English as just another language and write a
single Output_Float() function that covers all languages.
<P>
Also, for ease of localization, a developer should place all strings in the
resource file. This avoids having to search through all the C files looking
for strings to translate.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 1.20 3.10 3.50 localization kbinf foreign<BR>
KBCategory: kbother<BR>
KBSubcategory: KBIntlDev<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 15, 1998</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

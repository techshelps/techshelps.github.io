

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing a Custom Wordbreak Function in Edit Controls </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q109551">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1994/01/04">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  An application sends the EM_SETWORDBREAKPROC message to an edit control to replace the default wordwrap function with an application-defined wordwrap function. The default wordwrap function breaks a line in a multiline edit control (MLE) at a space...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHP,QAUD,QAY5,QDL9,QBWO,QBWN,QAB9,QA4Q,QAH6,QAH4,QBV8,QA6Y,QACI,QBXT,QA5V V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Providing a Custom Wordbreak Function in Edit Controls</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q109551</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
An application sends the EM_SETWORDBREAKPROC message to an edit control to
replace the default wordwrap function with an application-defined wordwrap
function. The default wordwrap function breaks a line in a multiline edit
control (MLE) at a space character. If an application needs to change this
functionality (that is, to break at some character other than a space),
then the application must provide its own wordwrap (wordbreak) function.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
A wordwrap function scans a text buffer (which contains text to be sent to
the display), looking for the first word that does not fit on the current
display line. The wordwrap function places this word at the beginning of
the next line on the display.
<P>
A wordwrap function defines the point at which Windows should break a line
of text for multiline edit controls, usually at a space character that
separates two words. This can be changed so that the line in an MLE can be
broken at any character. For more information on the EM_SETWORDBREAKPROC
message, please refer to the Windows 3.1 SDK "Programmer's Reference,
Volume 3: Messages, Structures, and Macros" manual.
<P>
Below is sample code that demonstrates how to break a line in a multiline
edit control at the "~" (tilde) character (for example) instead of the
regular space (" ") character.
<P>
The sample code assumes that the edit control is a multiline edit control
and that it is a child control in a dialog box.
<P>
<P><h3>Sample Code</h3>
 
<P>
<PRE>//Prototype the application-defined wordbreakproc.
int CALLBACK WordBreakProc(LPSTR, int, int, int) ;

//Install wordbreakproc in the WM_INITDIALOG case.
  case WM_INITDIALOG:

    lpWrdBrkProc = MakeProcInstance(WordBreakProc, hInst);


    //Send the EM_SETWORDBREAKPROC message to the edit control
    //to install the new wordbreak procedure.
     SendDlgItemMessage(hDlg, ID_EDIT, EM_SETWORDBREAKPROC, 0,
                        (LPARAM)(EDITWORDBREAKPROC)lpWrdBrkProc) ;
     return (TRUE);

int FAR PASCAL WordBreakProc(LPSTR lpszEditText, int ichCurrent,
                             int cchEditText, int wActionCode)
{

   char FAR *lpCurrentChar;
   int  nIndex;
   int  nLastAction;

   switch (wActionCode) {

     case WB_ISDELIMITER:

     // Windows sends this code so that the wordbreak function can
     // check to see if the current character is the delimiter.
     // If so, return TRUE. This will cause a line break at the ~
     // character.

      if ( lpszEditText[ichCurrent] == '~' )
         return TRUE;
      else
         return FALSE;

      break;

     // Because we have replaced the default wordbreak procedure, our
     // wordbreak procedure must provide the other standard features in
     // edit controls.

     case WB_LEFT:

     // Windows sends this code when the user enters CTRL+LEFT ARROW.
     // The wordbreak function should scan the text buffer for the
     // beginning of the word from the current position and move the
     // caret to the beginning of the word.

         {
            BOOL bCharFound = FALSE;

            lpCurrentChar = lpszEditText + ichCurrent;
            nIndex = ichCurrent;

            while (nIndex &gt; 0  &amp;&amp;
                  (*(lpCurrentChar-1) != '~' &amp;&amp;
                   *(lpCurrentChar-1) != 0x0A) ||
                  !bCharFound )
            {
               lpCurrentChar = AnsiPrev(lpszEditText ,lpCurrentChar);
               nIndex--;

               if (*(lpCurrentChar) != '~' &amp;&amp;  *(lpCurrentChar) != 0x0A )

                  // We have found the last char in the word. Continue
                  // looking backwards till we find the first char of
                  // the word.
                 {
                   bCharFound = TRUE;

                   // We will consider a CR the start of a word.
                   if (*(lpCurrentChar) == 0x0D)
                       break;
                 }

            }
            return nIndex;

         }
      break;

     case WB_RIGHT:

     //Windows sends this code when the user enters CTRL+RIGHT ARROW.
     //The wordbreak function should scan the text buffer for the
     //beginning of the word from the current position and move the
     //caret to the end of the word.

      for (lpCurrentChar = lpszEditText+ichCurrent, nIndex = ichCurrent;
           nIndex &lt; cchEditText;
           nIndex++, lpCurrentChar=AnsiNext(lpCurrentChar))

       if ( *lpCurrentChar == '~' ) {
      lpCurrentChar=AnsiNext(lpCurrentChar);
         nIndex++;

         while ( *lpCurrentChar == '~' ) {
           lpCurrentChar=AnsiNext(lpCurrentChar);
           nIndex++;
          }

         return nIndex;
       }

       return cchEditText;
       break;

  }
</PRE>}
<P>
The wordwrap (wordbreak) function above needs to be exported in the .DEF
file of the application. The function can be modified and customized
according to the application's needs.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.00 3.10 3.50 3.51 4.00 95 multi-line<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: Customizing the TOOLBAR Control </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125683">
<META NAME="KBModify" CONTENT="1996/04/05">
<META NAME="KBCreate" CONTENT="1995/02/01">
<META NAME="Keywords" CONTENT="kbui kbcode kbfile">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The sample BARSDI demonstrates how to provide Customization features for the Toolbar Common Control. The Toolbar Common Control under Windows 95 provides Customization features that are useful when the user needs to change the toolbar control's but...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANS,QAF0,QAB5,QAMN,QAI4,QA7O,QAOE,QA5D,QA9N,QAGU,QARW,QAEF,QAUD,QAH4,QAJD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: Customizing the TOOLBAR Control</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  April 5, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125683</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
The sample BARSDI demonstrates how to provide Customization features for
the Toolbar Common Control. The Toolbar Common Control under Windows 95
provides Customization features that are useful when the user needs to
change the toolbar control's buttons dynamically (add, delete, interchange,
etc. buttons).
<P>
Download BARSDI.EXE, a self-extracting file, from the Microsoft Software
Library (MSL) on the following services:

<UL><LI>Microsoft Download Service (MSDL)
<P><PRE>      Dial (206) 936-6735 to connect to MSDL
      Download <A HREF="http://support.microsoft.com/download/support/mslfiles/BARSDI.EXE">BARSDI.EXE</A> <I>(size: 50255 bytes)</I> 
</PRE>
<LI>Internet (anonymous FTP)
<P><PRE>      ftp ftp.microsoft.com
      Change to the SOFTLIB\MSLFILES directory
      Get <A HREF="http://support.microsoft.com/download/support/mslfiles/BARSDI.EXE">BARSDI.EXE</A> <I>(size: 50255 bytes)</I> 
</PRE><P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
There are two ways the user can customize the toolbar:
<P>
First, the user can use the Drag Drop Customization process to delete or
change the position of buttons on the toolbar. This method does not allow
the user to add buttons to the toolbar dynamically.
<P>
The second method involves displaying the Customize dialog box through
which the user can add, remove, interchange buttons on the toolbar.
<P>
To provide Customization, the toolbar control has to be created with the
CCS_ADJUSTABLE style, and the parent of the toolbar control has to process
a series of TBN_XXXX notifications. The BARSDI sample implements both
methods of Customization.
<P>
<P><h3>Method 1: Drag Drop Customization</h3>
 
<P>
This method of toolbar customization allows the user to reposition
or delete buttons on the toolbar. The user initiates this operation
by holding down the SHIFT key and begins dragging a button. The toolbar
control handles all of the drag operations automatically, including
the cursor changes.
<P>
To delete a button, the user has to release the drag operation outside
the Toolbar control. The Toolbar control sends the TBN_QUERYDELETE
message to its parent window. The parent window can return TRUE to
allow the button to be deleted and FALSE to prevent the button from
being deleted.
<P>
If the application wants to do custom dragging, it has to process
the TBN_BEGINDRAG and TBN_ENDDRAG notifications itself and perform
the drag/drop process, which involves more coding.
<P>
<P><h3>Method 2: Customization Dialog Box</h3>
 
<P>
This method of customization allows users to add buttons to the toolbar
dynmacally in addition to deleting and rearranging buttons on the toolbar.
For example, if the toolbar has N total buttons, and displays only 10 of
those buttons initially, the bitmap that was used to create the toolbar,
should contian all N buttons (where N &gt; 10).
<P>
There are two ways in which the Toolbar control dislpays the customize
dialog box. The user can bring up the Customization dialog box by
double-clicking the left mouse button on the toolbar control or the
application can send the TB_CUSTOMIZE message to the toolbar control.
<P>
The Customize dialog box displayed by the Toolbar control has two list
boxes. One, on the left contains the list of N-10 Buttons that were not
displayed on the initial toolbar, and the one on the right will have the
currently displayed buttons on the toolbar. The toolbar control provides
the add, remove and other features in the Customize dialog box.
<P>
Here is a code sample that shows how the Customization feature is
implemented:
<P>
<P><h2>SAMPLE CODE</h2>
 
<P>
<PRE>// The initial set of toolbar buttons.

</PRE>TBBUTTON tbButton[] =
{
<PRE>    {0,   IDM_FILENEW,     TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {1,   IDM_FILEOPEN,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {2,   IDM_FILESAVE,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {3,   IDM_EDITCUT,     TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {0,   0,               TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0},
    {4,   IDM_EDITCOPY,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {5,   IDM_EDITPASTE,   TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {6,   IDM_FILEPRINT,   TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {0,   0,               TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0},
    {7,   IDM_ABOUT,       TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
};

// Buttons that can be added at a later stage.

</PRE>TBBUTTON tbButtonNew[] =
{
<PRE>    { 8,  IDM_ERASE,       TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    { 9,  IDM_PEN,         TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {10,  IDM_SELECT,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {11,  IDM_BRUSH,       TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {12,  IDM_AIRBRUSH,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {13,  IDM_FILL,        TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {14,  IDM_LINE,        TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {15,  IDM_EYEDROP,     TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {16,  IDM_ZOOM,        TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {17,  IDM_RECT,        TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {18,  IDM_FRAME,       TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
    {19,  IDM_OVAL,        TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0},
};

// The bitmap that is used to create the toolbar should have all
// tbButtonNew + tbButton buttons = 20 in this case.

// Use tbButtons array to create the initial toolbar control.

// Once the user starts to customize the toolbar, process the WM_NOTIFY
// message and the following notifications.
// The toolbar control sends a WM_NOTIFY message to the parent window
// during each process of the customization.

</PRE>LRESULT OnMsgNotify(HWND hwnd, UINT uMessage, WPARAM wparam, LPARAM lparam)
{
<PRE>    LPNMHDR         lpnmhdr;
    lpnmhdr =       (LPNMHDR)lparam;

// process the QUERYINSERT And QUERYDELETE notifications
// to allow the drag/drop operation to succeeed.
    if (lpnmhdr-&gt;code == TBN_QUERYINSERT)
        return TRUE;
    else if (lpnmhdr-&gt;code == TBN_QUERYDELETE)
        return TRUE;
    else if (lpnmhdr-&gt;code == TBN_GETBUTTONINFO)
// The user has brought up the customization dialog box,
// so provide the the control will button information to
// fill the listbox on the left side.
    {
        LPTBNOTIFY lpTbNotify = (LPTBNOTIFY)lparam;
        char  szBuffer [20];
        if (lpTbNotify-&gt;iItem &lt; 12) // 20 == the total number of buttons
        {                           // tbButton and tbButtonNew
                                    // Since initially we displayed
                                    // 8 buttons
                   // send back information about the rest of
                   // 12 buttons that can be added the toolbar.

            lpTbNotify-&gt;tbButton = tbButtonNew[lpTbNotify-&gt;iItem];

            LoadString(hInst,
                       NEWBUTTONIDS + lpTbNotify-&gt;iItem, // string
                                                         //ID == command ID
                       szBuffer,
                       sizeof(szBuffer));

            lstrcpy (lpTbNotify-&gt;pszText, szBuffer);
            lpTbNotify-&gt;cchText = sizeof (szBuffer);
            return TRUE;
        }
        else
        return 0;
    }
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00 BARSDI<BR>
KBCategory: kbui kbcode kbfile<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  April 5, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use of Polygon() Versus PolyPolygon() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q119164">
<META NAME="KBModify" CONTENT="1997/07/23">
<META NAME="KBCreate" CONTENT="1994/08/09">
<META NAME="Keywords" CONTENT="kb16bitonly">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Polygon() draws a polygon, while PolyPolygon() draws a series of polygons. Using multiple calls to Polygon() can offer better performance than using a single call to PolyPolygon(); this is because PolyPolygon() does not consider the polygons to be ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAK4,QAGI,QBCF,QAIF,QAJ5,QAY5,QAU3,QAM3,QAMR,QBCE,QA26,QAXQ,QAL2,QADX,QBWP V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Use of Polygon() Versus PolyPolygon()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 23, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q119164</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10 3.50
WINDOWS NT
kbgraphic
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.1 and 3.5
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Polygon() draws a polygon, while PolyPolygon() draws a series of polygons.
Using multiple calls to Polygon() can offer better performance than using a
single call to PolyPolygon(); this is because PolyPolygon() does not
consider the polygons to be independent, but considers them to be one
polygon with multiple disjointed edges. However, there are times when
PolyPolygon() is preferable, particularly if the number of polygons is
small.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
PolyPolygon() batches polygons in a single call, so there is less call
overhead than there is for multiple calls to Polygon(). However, to perform
one combined fill, PolyPolygon() has to work with all the edges in all of
the polygons simultaneously, resulting in sorting overhead. The overhead
involved in sorting becomes quite expensive when there are a lot of
polygons, causing a net loss of performance in comparison to Polygon().
<P>
GDI batches multiple Polygon() calls to be more efficient. Setting the
batch limit higher than the default of 10 with GdiSetBatchLimit() improves
performance even further. GDI and some drivers optimize convex polygons,
but will only optimize a single polygon drawn with either Polygon() or
PolyPolygon().
<P>
Because PolyPolygon() treats all edges as part of one big polygon, it also
draws every pixel to be filled exactly once; this may be a performance
advantage if a lot of overlapping polygons are drawn, because Polygon()
draws every pixel in each polygon only once, even where there is an
overlap.
<P>
PolyPolygon() considers all the polygons when applying the current fill
mode, as set by calling SetPolyFillMode(). Consequently, if any polygons
overlap, the result of one PolyPolygon() call may be different than the
result of the equivalent multiple Polygon() calls. If the polygons overlap
and the raster operation takes the destination pixel values into account,
or if you want the fill rule to be applied to overlapping areas, then it is
preferable to use PolyPolygon().
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50<BR>
KBCategory: kbgraphic<BR>
KBSubcategory: GdiDrw<BR>
Keywords            : kb16bitonly<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 23, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAMPLE: How to Use Paths to Create Text Effects </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128091">
<META NAME="KBModify" CONTENT="1997/07/03">
<META NAME="KBCreate" CONTENT="1995/03/26">
<META NAME="Keywords" CONTENT="GdiDrw kbcode kbfile kbsample">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article defines the term  path  for the purposes of this article, and it explains how you can get sample code (provided in TEXTFX.EXE, a self- extracting file) that shows by example how to use paths to draw text at varying angles, orientations...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QANO,QBC9,QBC8,QAIB,QA5V,QBXT,QATX,QAH4,QAMB,QAII,QACI,QAB7,QAFI,QBCF,QAYV V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>SAMPLE: How to Use Paths to Create Text Effects</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  July 3, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128091</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.1, 3.5, 3.51
   - Microsoft Windows 95 version 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article defines the term "path" for the purposes of this article, and
it explains how you can get sample code (provided in TEXTFX.EXE, a self-
extracting file) that shows by example how to use paths to draw text at
varying angles, orientations, and sizes. In addition, the sample code gives
useful routines for displaying path data.
<P>
The following file is available for download from the Microsoft Software
Library:
<P>
<PRE> ~ <A HREF="http://support.microsoft.com/download/support/mslfiles/Textfx.exe">Textfx.exe</A> <I>(size: 35097 bytes)</I> 

</PRE>For more information about downloading files from the Microsoft Software
Library, please see the following article in the Microsoft Knowledge Base:
<P>
<PRE>   ARTICLE-ID: <B><A HREF="../zMiscellaneous/Q119591.htm">Q119591</A></B>
   TITLE     : How to Obtain Microsoft Support Files from Online Services

</PRE><h2>MORE INFORMATION</h2>
 
<P>
A path is one or more figures (or shapes) that are filled, outlined, or
both filled and outlined. Computer-aided design (CAD) applications use
paths to create unique clipping regions, to draw outlines of irregular
shapes, and to fill the interiors of irregular shapes.
<P>
A path is associated with a Device Context (DC) but unlike other objects
associated with a DC, such as pens and brushes, a path has no default
object.
<P>
To create a path, you first call BeginPath(). Then use the drawing
functions in the table below to add to the path. Any drawing done using
these functions is recorded as part of the path. When you finish building
the path, call EndPath(). The new path can then be converted to a region by
using PathToRegion(), selected as a clipping region for a device context by
using SelectClipPath(), and rendered by using StrokePath() or FillPath().
In addition, as this sample illustrates, the path can be retrieved by using
GetPath() and manipulated programmatically.
<P>
NOTE: When you use TextOut or ExtTextOut in paths, the font selected into
the path's device context must be a true type font.
<P>
Functions supported in paths:
<P>
<PRE>AngleArc      LineTo         Polyline
Arc           MoveToEx       PolylineTo
ArcTo         Pie            PolyPolygon
Chord         PolyBezier     PolyPolyline
CloseFigure   PolyBezierTo   Rectangle
Ellipse       PolyDraw       RoundRect
ExtTextOut    Polygon        TextOut

</PRE>Functions not supported under Windows 95:
<P>
AngleArc
ArcTo
PolyDraw
<P>
Functions not supported in a path under Windows 95:
<P>
Arc
Chord
Ellipse
Pie
Rectangle
RoundRect
<P>
MORE INFORMATION
 
<P>
The following path functions are used in the TextFX sample:
<P>
BeginPath
EndPath
GetPath
FillPath
StrokePath
<P>
To use TextFX, run it, and then draw two lines into the client area (they
don't have to be straight). The first line appears as blue and the second
appears as red. These lines serve as guides for how the text will be
rendered. After completing the second line, the text "This is a test" will
be drawn so that it appears between the two guide lines.
<P>
To remap the text so that it appears between the two lines, TextFX first
breaks down the guide lines (which are composed of line segments) into
distinct adjacent points. The result is that the x,y position of each point
in the lines is adjacent to its neighboring points x,y position.
<P>
Next, the text "This is a test" is drawn into a device context as a path.
The points that make up the lines and curves in this path are then
retrieved from the device context by using the GetPath() function.
<P>
To reposition the points in the path data, the code must establish a
relationship between the relative position of the points in the original
text and the position defined by the guide lines. To establish this
relationship, the code calculates the x and y positions of each point in
the path data relative to the overall extent of the text string. The
relative x position is used to calculate a corresponding point on each of
the two the guide lines, while the relative y value is used as a weight to
determine how far along on a line between the two guide-line points the
remapped position should be.
<P>
For example, if the point in the upper left corner of the "T" in the string
"This is a test" is 2% of the total x extent of the string and 10% of the
total y extent, then TextFX would find the point in each guide line that
corresponds to 2% of the total number of points in that guide line. Then
TextFX would reposition the point in the path data representing the upper
left corner of the "T" so that it would be 10% of the way along an
imaginary line extending from the point on the top guide line to the point
on the bottom guide line.
<P>
Two different methods can be selected for drawing the remapped data, one
draws just the outline of the characters, while the other fills in the
characters.
<P>
To draw the outline of the characters, TextFX converts the remapped data
back into a path and uses StrokePath() to display the outlines. To do the
conversion, TextFX begins a new path, and then loops through the remapped
data and uses the vertex types returned from GetPath() to determine how to
draw the points. After drawing all the data, TextFX ends the path and calls
StrokePath().
<P>
To draw the solid characters, instead of using StrokePath(), TextFX uses
FillPath(). However, in order to get the interior areas of characters like
"O", "A", "D", and so on, TextFX sets the ROP2 code to R2_MERGEPENNOT
before calling FillPath(). This is done so that characters like "O" that
consist of two separate polygons (one representing the outer perimeter and
one representing the inner perimeter) will not be drawn as a solid blob. By
drawing the polygons with the R2_MERGEPENNOT code, the code ensures that
the second polygon will cancel the effects of the first in the area of the
inner polygon.
<P>
<P><h2>REFERENCES</h2>
 
<P>
For additional information on paths, please see the PATHS sample included
with the Win32 SDK.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: stones effects effect font fx<BR>
Keywords            : GdiDrw kbcode kbfile kbsample<BR>
Version             : 4.0 3.1 3.5 3.51<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  July 3, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Examine the Use of Process Memory Under Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q129599">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1995/04/30">
<META NAME="Keywords" CONTENT="W32s kbhowto kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Under Windows, tools such as HeapWalk and PWalk can be used to examine memory use of 16-bit code. However, these tools cannot be used to look at memory use of 32-bit code. This article discusses how to look at process memory use under Win32s.  MORE...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADK,QAI4,QAE1,QBFY,QBE7,QBE6,QAHE,QBWT,QALG,QAH4,QAC2,QAWH,QAOX,QBW6,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Examine the Use of Process Memory Under Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q129599</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
1.20 1.30 1.30a 1.30c
WINDOWS
kbprg kbhowto
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32s, versions 1.2,1.3, 1.30a, 1.30c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Under Windows, tools such as HeapWalk and PWalk can be used to examine
memory use of 16-bit code. However, these tools cannot be used to look at
memory use of 32-bit code. This article discusses how to look at process
memory use under Win32s.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
If you run the debug version of Win32s and kernel debugger WDEB386, you can
break into the debugger at any point by pressing CTRL+C and using debug
information from the Win32s VxD. Use the command .w32s to get the list of
information types available.
<P>
<PRE>   #.w32s
   W32S debug routines:

   A - General Info
   B - Print Free LS ranges
   C - Print RRD &amp; Section lists
   D - Print Modules list
   E - Toggle SwapOut trace
   F - Toggle PageFault trace
   G - Count present alias pages
   H - List RRD Commit List
   I - Toggle Virtual Alloc/Free trace
   J - Toggle Mapped Section trace
   K - List Locked Pages
   [ESC] Exit W32S Debug Routines

</PRE>Option C gives you information about the sparse memory usage.
<P>
The memory for .EXE and .DLL files is allocated in the sparse memory.
Here's an example printout using option C:
<P>
RRD List:
<PRE>Index      Start      Size       Owner      #Commits   CommSize   #PresPg
00000000   87AA0000   0000E000   00000000   - VIEW -   - VIEW -   - VIEW -
00000001   87A90000   00001000   00001F37   00000001   00001000   00000001
00000002   87A50000   00040000   00000000   00000000   00000000   00000000
00000003   87A40000   00002000   00000000   - VIEW -   - VIEW -   - VIEW -
00000004   87A30000   00009000   00000000   - VIEW -   - VIEW -   - VIEW -
00000005   87A20000   00002000   00000000   - VIEW -   - VIEW -   - VIEW -
00000006   87A10000   00002000   00000000   - VIEW -   - VIEW -   - VIEW -
00000007   87910000   00100000   00001F37   00000001   00001000   00000001
00000008   878F0000   00020000   00001F37   00000001   00020000   00000002
00000009   878C0000   00021000   00001F37   00000001   00021000   00000001
0000000A   878B0000   00005000   00000000   00000001   00005000   00000005
0000000B   87860000   00043000   00000000   00000001   00043000   00000031
0000000C   87830000   0002D000   00000000   00000001   0002D000   0000000C
0000000D   87810000   00011000   00000000   00000001   00011000   0000000E
0000000E   80869000   00001000   00001F37   00000001   00001000   00000000
0000000F   87800000   00002000   00001F37   00000001   00002000   00000001
00000010   80635000   00001000   00001F37   00000001   00001000   00000000
                      ========                         ========   ========
Total                 00229000                         000CD000   00000056

</PRE>Sections List:
<PRE>SecIndex   hFile      SecSize    #Ref       #Views     CommSize   #PresPg
00000001   00000004   00002000   00000000   00000001   00002000   00000001
00000002   00000005   00002000   00000000   00000001   00002000   00000001
00000003   00000006   00009000   00000000   00000001   00009000   00000003
00000004   00000007   00002000   00000000   00000001   00002000   00000001
00000005   00000008   0000E000   00000000   00000001   0000E000   00000001
                      ========                         ========   ========
Total                 0001D000                         0001D000   00000007

G. Total                                               000EA000   0000005D

</PRE>The Size column contains the reserved size and the CommSize column contains
the committed size. The addresses are zero-based (ring 0), not based on
0xffff0000 (ring 3). Therefore, you must add 0x10000 to the addresses you
see in the list in order to get the ring 3 addresses.
<P>
Option D gives you the list of modules and where they reside in memory.
These addresses are zero-based addresses as well, as is any information
that you get from the VxD.
<P>
Another way to get information indicating where things are placed in memory
is to set the verbose loader flag (0x20) in the Win32sDebug variable in the
[386Enh] section of the SYSTEM.INI file.
<P>
NOTE: Do not add the 0x, just write Win32sDebug=20. The loader then will
print in the debug terminal information about each loaded module. For
example:
<P>
Open file D:\WIN32APP\FREECELL\FREECELL.EXE in mode 0xa0
LELDR: allocating 0x11000
LELDR: Module D:\WIN32APP\FREECELL\FREECELL.EXE [1] loaded at 0x87820000
<PRE>LELDR: obj  1 loaded @ 0x87821000, 0x   5c00 bytes   .text,flags=0x60000020
LELDR: obj  2 loaded @ 0x87827000, 0x      0 bytes    .bss,flags=0xc0000080
LELDR: obj  3 loaded @ 0x87828000, 0x    200 bytes  .rdata,flags=0x40000040
LELDR: obj  4 loaded @ 0x87829000, 0x    a00 bytes   .data,flags=0xc0000040
LELDR: obj  5 loaded @ 0x8782a000, 0x   2400 bytes   .rsrc,flags=0x40000040
LELDR: obj  6 loaded @ 0x8782d000, 0x    200 bytes    .CRT,flags=0xc0000040
LELDR: obj  7 loaded @ 0x8782e000, 0x    a00 bytes  .idata,flags=0x40000040
LELDR: obj  8 loaded @ 0x8782f000, 0x   1e00 bytes  .reloc,flags=0x42000040
</PRE>File D:\WIN32APP\FREECELL\FREECELL.EXE is closed
<P>
The addresses here are ring 3 addresses.
<P>
<P><h2>REFERENCES</h2>
 
<P>
Please see the "Win32s Programmer's Reference" included in the Win32 SDK
for more information about the debugging features. This information is not
included in the version of the Win32s documentation distributed with Visual
C++.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbhowto<BR>
KBSubcategory: W32s<BR>
Additional reference words: 1.20 1.30 1.30a 1.30c<BR>
Keywords          : W32s kbhowto kbprg<BR>
Version           : 1.20 1.30 1.30a 1.30c<BR>
Platform          : WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

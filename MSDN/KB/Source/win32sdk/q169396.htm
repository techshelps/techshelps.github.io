

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIX: ADSI adscmd Sample Dump Option Fails </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q169396">
<META NAME="KBModify" CONTENT="1997/10/29">
<META NAME="KBCreate" CONTENT="1997/05/30">
<META NAME="Keywords" CONTENT="kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  The dump option in the adscmd sample provided with the ADSI 1.0 SDK does not work.  RESOLUTION  You can enable the dump option by replacing main.hxx and dump.cxx files with the code below.  STATUS ======  Microsoft has confirmed this to be a bug in...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAPN,QAW6,QAH4,QAUD,QAG1,QAI4,QA4Q,QAMA,QAAP,QAB4,QAPF,QBV8,QBWP,QA6A,QAR4 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>FIX: ADSI adscmd Sample Dump Option Fails</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 29, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q169396</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK) on the following
   platforms:
   - Alpha
   - Windows NT
   - Windows 95
   - x86
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
The dump option in the adscmd sample provided with the ADSI 1.0 SDK does
not work.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
You can enable the dump option by replacing main.hxx and dump.cxx files
with the code below.
<P>
<P><h2>STATUS</h2>
 
<P>
Microsoft has confirmed this to be a bug in the ADSI sample code released
with the ADSI 1.0 SDK.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Sample Code</h3>
 
<P>
Replace main.hxx with the following code:
<P>
<PRE>   //----------------------------------------------------------------------
   //
   //  Microsoft Active Directory 1.0 Sample Code
   //
   //  Copyright (C) Microsoft Corporation, 1996
   //
   //  File:       main.hxx
   //
   //  Contents:   Main include file for adscmd
   //
   //
   //----------------------------------------------------------------------

   //
   // ********* System Includes
   //

   #define UNICODE
   #define _UNICODE
   #define INC_OLE2

   #include &lt;windows.h&gt;

   //
   // ********* CRunTime Includes
   //

   #include &lt;stdlib.h&gt;
   #include &lt;limits.h&gt;
   #include &lt;io.h&gt;
   #include &lt;stdio.h&gt;

   //
   // *********  Public ADs includes
   //

   #include &lt;activeds.h&gt;

   //
   // *********  Useful macros
   //

   #define BAIL_ON_NULL(p)       \
        if (!(p)) {           \
                goto error;   \
        }

   #define BAIL_ON_FAILURE(hr)   \
        if (FAILED(hr)) {     \
                goto error;   \
        }

   #define FREE_INTERFACE(pInterface) \
        if (pInterface) {          \
            pInterface-&gt;Release(); \
            pInterface=NULL;       \
        }

   #define FREE_BSTR(bstr)            \
        if (bstr) {                \
            SysFreeString(bstr);   \
            bstr = NULL;           \
        }

   //
   // *********  Prototypes
   //

   void
   PrintUsage(
    void
    );

   int
   AnsiToUnicodeString(
    LPSTR pAnsi,
    LPWSTR pUnicode,
    DWORD StringLength
    );

   int
   UnicodeToAnsiString(
    LPWSTR pUnicode,
    LPSTR pAnsi,
    DWORD StringLength
    );

   LPWSTR
   AllocateUnicodeString(
    LPSTR  pAnsiString
    );

   void
   FreeUnicodeString(
    LPWSTR  pUnicodeString
    );

   HRESULT
   PrintVariantArray(
    VARIANT var
    );

   HRESULT
   PrintVariant(
    VARIANT varPropData
    );

   HRESULT
   PrintProperty(
    BSTR bstrPropName,
    HRESULT hRetVal,
    VARIANT varPropData
    );

   HRESULT
   GetPropertyList(
    IADs * pADs,
    VARIANT * pvar
    );

   //
   // Functions to dump contents of an object
   //

   int
   DoDump(
    char *AnsiADsPath
    ) ;

   HRESULT
   DumpObject(
    IADs * pADs
    );

   //
   // Functions to list objects within a container.
   //

   int
   DoList(
    char *AnsiADsPath
    ) ;

   HRESULT
   EnumObject(
    LPWSTR pszADsPath,
    LPWSTR * lppClassNames,
    DWORD dwClassNames
    ) ;


</PRE>Replace dump.cxx with the following code
<P>
<PRE>   //----------------------------------------------------------------------
   //
   //  Microsoft Active Directory 1.0 Sample Code
   //
   //  Copyright (C) Microsoft Corporation, 1996
   //
   //  File:       dump.cxx
   //
   //  Contents:   Functions for dumping the properties for an object.
   //
   //
   //----------------------------------------------------------------------

   #include "main.hxx"

   //
   // Given an ADsPath, bind to the object and call the DumpObject routine.
   //

   int
   DoDump(char *AnsiADsPath)
   {
    HRESULT hr = E_OUTOFMEMORY ;
    LPWSTR pszADsPath = NULL;
    IADs * pADs = NULL;

    //
    // Convert path to unicode and then bind to the object.
    //

    BAIL_ON_NULL(pszADsPath = AllocateUnicodeString(AnsiADsPath));

    hr = ADsGetObject(
                pszADsPath,
                IID_IADs,
                (void **)&amp;pADs
                );

    if (FAILED(hr)) {

        printf("Failed to bind to object: %S\n", pszADsPath) ;
    }
    else {

        //
        // Dump the object
        //

        hr = DumpObject(pADs);

        if (FAILED(hr)) {

            printf("Unable to read properties of: %S\n", pszADsPath) ;
        }

        pADs-&gt;Release();
    }

   error:

    FreeUnicodeString(pszADsPath);

    return (FAILED(hr) ? 1 : 0) ;
   }

   //
   // Given an ADs pointer, dump the contents of the object
   //

   HRESULT
   DumpObject(
    IADs * pADs
    )
   {
    HRESULT hr;
   HRESULT hrSA;
    IADs * pADsProp = NULL;
    VARIANT var;
   ZeroMemory(&amp;var,sizeof(var));
   VARIANT *   pvarPropName = NULL;
    DWORD i = 0;
   VARIANT varProperty;
    IDispatch * pDispatch = NULL;

    //
    // Access the schema for the object
    //

    hr = GetPropertyList(
                pADs,
                &amp;var);
    BAIL_ON_FAILURE(hr);

    //
    // List the Properties
   //
   hr = SafeArrayAccessData(var.parray, (void **) &amp;pvarPropName);
   BAIL_ON_FAILURE(hr);

   for (i = 0; i &lt; var.parray-&gt;rgsabound[0].cElements; i++){

      //
        // Get a property and print it out. The HRESULT is passed to
        // PrintProperty.
        //

        hr = pADs-&gt;Get(
                pvarPropName[i].bstrVal,
                &amp;varProperty
                );
      PrintProperty(
            pvarPropName[i].bstrVal,
            hr,
            varProperty
            );

   }

   hr = SafeArrayUnaccessData(var.parray);

   error:
   // Don't destroy hr in case we're here from BAIL_ON_FAILURE
   if(var.parray) hrSA = SafeArrayDestroy(var.parray);

   return(hr);
   }


   HRESULT
   GetPropertyList(
    IADs * pADs,
    VARIANT * pvar )
   {
    HRESULT hr= S_OK;
    BSTR bstrSchemaPath = NULL;
   IADsClass * pADsClass = NULL;

    hr = pADs-&gt;get_Schema(&amp;bstrSchemaPath);
    BAIL_ON_FAILURE(hr);

    hr = ADsGetObject(
                bstrSchemaPath,
                IID_IADsClass,
                (void **)&amp;pADsClass);
    BAIL_ON_FAILURE(hr);

   //Put SafeArray of bstr's into input variant struct
   hr = pADsClass-&gt;get_MandatoryProperties(pvar);
   BAIL_ON_FAILURE(hr);

   error:
    if (bstrSchemaPath) {
        SysFreeString(bstrSchemaPath);
    }

    if (pADsClass) {
        pADsClass-&gt;Release();
    }

    return(hr);
   }
</PRE> 
<PRE>Keywords          : kbcode
Platform          : NT WINDOWS
Solution Type     : kbfix</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
================================================================================<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 29, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

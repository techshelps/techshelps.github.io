

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: Can't Center Explorer-Style FileOpen Common Dialog Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q140722">
<META NAME="KBModify" CONTENT="1995/12/11">
<META NAME="KBCreate" CONTENT="1995/12/06">
<META NAME="Keywords" CONTENT="kbprg kbprb kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Generally, an application that attempts to alter the default behavior of a dialog box before it even comes up on the screen, would process the WM_INITDIALOG message. For common dialogs, this message is processed in the common dialog's hook procedur...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QAEB,QAIV,QAH4,QBBI,QAUD,QANX,QABB,QABA,QAI4,QAY5,QAGI,QAK3,QBSO,QDL9 V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: Can't Center Explorer-Style FileOpen Common Dialog Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 11, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q140722</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK) for Windows 95
   and Windows NT 3.51
</UL> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
Generally, an application that attempts to alter the default behavior of
a dialog box before it even comes up on the screen, would process the
WM_INITDIALOG message. For common dialogs, this message is processed in the
common dialog's hook procedure. However, attempting to center the new
Explorer-Style FileOpen Common Dialog in Windows 95 in the hook procedure's
WM_INITDIALOG case will result in an off-center dialog box.
<P>
<P><h2>CAUSE</h2>
 
<P>
This problem arises with the new Explorer-Style common dialog only when the
OFN_ENABLETEMPLATE flag is set in the OPENFILENAME structure, and a dialog
template is specified in lpTemplateName that includes the new controls that
you want to add to the dialog box.
<P>
Typically, the code to center a dialog box would first get the dimensions
of the dialog box by using GetWindowRect so it could be centered on the
screen appropriately. At WM_INITDIALOG time, the FileOpen dialog has not
been resized to accomodate the new controls specified in the lpTemplateName
member of the OPENFILENAME struct; therefore, GetWindowRect() returns the
dimensions of the original FileOpen dialog, not that of the actual
customized dialog that comes up on the screen. This then causes the dialog
box to come up a few pixels off-center.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
Call GetWindowRect() and the rest of the code to center the dialog box, in
the hook procedure's WM_NOTIFY case, with code set to CDN_INITDONE, a new
common dialog notification code for Windows 95. By this time, all the
controls have been added in, and the dialog has been resized accordingly.
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Here's how the Win32 SDK COMDLG32 sample can be modified to do this. Note
that COMMDLG creates the dialog specified by lpTemplateName as a child of
the standard FileOpen common dialog box. As a result, the hDlg passed to
the application's hook function will be the child of the standard FileOpen
dialog box. To get a handle to the standard dialog box from the hook
function, an application needs to call GetParent (hDlg).
<P>
<P><h3>Code Sample Modification of Win32 SDK COMDLG32 Sample</h3>
 
<P>
BOOL NEAR PASCAL TestNotify(HWND hDlg, LPOFNOTIFY pofn)
{
<PRE> switch (pofn-&gt;hdr.code)
 {

     case CDN_INITDONE:
     {
        CenterWindow (GetParent (hDlg), NULL);
        break;
     }

     :
     :
</PRE>}
<P>
<PRE>// center with respect to another window
// Specifying NULL for hwndParent centers hwndChild relative to the screen.
</PRE>BOOL CenterWindow(HWND hwndChild, HWND hwndParent)
{
<PRE>    RECT    rcChild, rcParent;
    int     cxChild, cyChild, cxParent, cyParent;
    int     cxScreen, cyScreen, xNew, yNew;
    HDC     hdc;

    // Get the Height and Width of the child window
    GetWindowRect(hwndChild, &amp;rcChild);
    cxChild = rcChild.right - rcChild.left;
    cyChild = rcChild.bottom - rcChild.top;


    if (hwndParent)
    {
    // Get the Height and Width of the parent window
       GetWindowRect(hwndParent, &amp;rcParent);
       cxParent = rcParent.right - rcParent.left;
       cyParent = rcParent.bottom - rcParent.top;
    }

    else
    {
       cxParent = GetSystemMetrics (SM_CXSCREEN);
       cyParent = GetSystemMetrics (SM_CYSCREEN);
       rcParent.left = 0;
       rcParent.top  = 0;
       rcParent.right = cxParent;
       rcParent.bottom= cyParent;
    }

    // Get the display limits
    hdc = GetDC(hwndChild);
    cxScreen = GetDeviceCaps(hdc, HORZRES);
    cyScreen = GetDeviceCaps(hdc, VERTRES);
    ReleaseDC(hwndChild, hdc);

    // Calculate new X position, then adjust for screen
    xNew = rcParent.left + ((cxParent - cxChild) / 2);
    if (xNew &lt; 0)
    {
        xNew = 0;
    }
    else if ((xNew + cxChild) &gt; cxScreen)
    {
        xNew = cxScreen - cxChild;
    }

    // Calculate new Y position, then adjust for screen
    yNew = rcParent.top  + ((cyParent - cyChild) / 2);
    if (yNew &lt; 0)
    {
        yNew = 0;
    }
    else if ((yNew + cyChild) &gt; cyScreen)
    {
        yNew = cyScreen - cyChild;
    }

    // Set it, and return
    return SetWindowPos(hwndChild,
                        NULL,
                        xNew, yNew,
                        0, 0,
                        SWP_NOSIZE | SWP_NOZORDER);
}
</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00<BR>
KBCategory: kbprg kbprb kbcode<BR>
KBSubcategory: UsrCmnDlg<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 11, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

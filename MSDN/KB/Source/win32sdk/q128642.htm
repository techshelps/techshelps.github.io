

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How To Change Hard Error Popup Handling in Windows NT </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128642">
<META NAME="KBModify" CONTENT="1996/12/16">
<META NAME="KBCreate" CONTENT="1995/04/05">
<META NAME="Keywords" CONTENT="kbprg kbcode kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  In an unattended environment, you may want to automatically dispatch hard error popups that require user intervention. This article gives you the code you need to change the hard error popup mode.  MORE INFORMATION  Windows NT allows the user to ch...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAAP,QAUD,QAB4,QAX3,QABE,QBWP,QA5W,QAKP,QAY5,QALW,QDMH,QAKD,QAPN,QAO4,QAAF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How To Change Hard Error Popup Handling in Windows NT</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  December 16, 1996</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128642</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT versions 3.5, 3.51, 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In an unattended environment, you may want to automatically dispatch hard
error popups that require user intervention. This article gives you the
code you need to change the hard error popup mode.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Windows NT allows the user to change the handling of hard error popups that
result from application and system errors. Such errors include no disk in
the drive and general protection (GP) faults.
<P>
Normally, these events cause a hard error popup to be displayed, which
requires user intervention to dispatch. This behavior can be modified so
that such errors are logged to the Windows NT event log. When the error is
logged to the event log, no user intervention is necessary, and the system
provides a default handler for the hard error. The user can examine the
event log to determine the cause of the hard error.
<P>
<P><h3>Registry Entry</h3>
 
<P>
The following registry entry controls the hard error popup handling in
Windows NT:
<P>
<PRE>   HKEY_LOCAL_MACHINE\
    SYSTEM\
    CurrentControlSet\
    Control\
    Windows\
    ErrorMode

</PRE><h3>Valid Modes</h3>
 
<P>
The following are valid values for ErrorMode:

<UL><LI>Mode 0
<P>
   This is the default operating mode that serializes the errors and waits
   for a response.

<LI>Mode 1
<P>
   If the error does not come from the system, this is the normal operating
   mode. If the error comes from the system, this logs the error to the
   event log and returns OK to the hard error. No intervention is required
   and the popup is not seen.

<LI>Mode 2
<P>
   This always logs the error to the event log and returns OK to the hard
   error. Popups are not seen.
<P>
</UL>In all modes, system-originated hard errors are logged to the system log.
To run an unattended server, use mode 2.
<P>
<P><h3>Sample Code to Change Hard Error Popup Mode</h3>
 
<P>
The following function changes the hard error popup mode. If the function
succeeds, the return value is TRUE. If the function fails, the return value
is FALSE.
<P>
BOOL SetGlobalErrorMode(
<PRE>    DWORD dwErrorMode   // specifies new ErrorMode value
    )
</PRE>{
<PRE>    HKEY hKey;
    LONG lRetCode;

    // make sure the value passed isn't out-of-bounds
    if (dwErrorMode &gt; 2) return FALSE;

    if(RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                    "SYSTEM\\CurrentControlSet\\Control\\Windows",
                    0,
                    KEY_SET_VALUE,
                    &amp;hKey) != ERROR_SUCCESS) return FALSE;

    lRetCode=RegSetValueEx(hKey,
                            "ErrorMode",
                            0,
                            REG_DWORD,
                            (CONST BYTE *) &amp;dwErrorMode,
                            sizeof(DWORD) );

    RegCloseKey(hKey);

    if (lRetCode != ERROR_SUCCESS) return FALSE;

    return TRUE;
</PRE>}
<P>
<P><h3>Sample Code to Obtain Hard Error Popup Mode</h3>
 
<P>
The following function obtains the hard error popup mode. If the function
succeeds, the return value is TRUE. If the function fails, the return value
is FALSE. If the function succeeds, dwErrorMode contains the error popup
mode. Otherwise, dwErrorMode is undefined.
<P>
BOOL GetGlobalErrorMode(
<PRE>    LPDWORD dwErrorMode // Pointer to a DWORD to place popup mode
    )
</PRE>{
<PRE>    HKEY hKey;
    LONG lRetCode;
    DWORD cbData=sizeof(DWORD);

    if(RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                    "SYSTEM\\CurrentControlSet\\Control\\Windows",
                    0,
                    KEY_QUERY_VALUE,
                    &amp;hKey) != ERROR_SUCCESS) return FALSE;

    lRetCode=RegQueryValueEx(hKey,
                            "ErrorMode",
                            0,
                            NULL,
                            (LPBYTE) dwErrorMode,
                            &amp;cbData );

    RegCloseKey(hKey);

    if (lRetCode != ERROR_SUCCESS) return FALSE;

    return TRUE;
</PRE>}
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbprg kbcode kbhowto<BR>
KBSubcategory: BseErrdebug BseMisc CodeSam<BR>
Additional reference words: 3.50 4.00
<P>


</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  December 16, 1996</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

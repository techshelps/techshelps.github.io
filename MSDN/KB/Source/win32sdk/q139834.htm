

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Add a Custom Tab to the Help Topics Dialog Box </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q139834">
<META NAME="KBModify" CONTENT="1995/11/20">
<META NAME="KBCreate" CONTENT="1995/11/16">
<META NAME="Keywords" CONTENT="kbtool kbdocerr kbhowto kbcode">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article discusses how to add a custom tab to the Help Topics dialog box. This option is only available in version 4.0 or later of the Help Compiler for Windows.  MORE INFORMATION  Create a Dialog Resource  To add a custom tab to the WinHelp He...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QA01,QARP,QA6A,QAUD,QAGI,QANX,QBV4,QAUR,QARW,QDL9,QBWO,QBWN,QDNN,QBVV,QAIM V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Add a Custom Tab to the Help Topics Dialog Box</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 20, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q139834</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API)
   included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article discusses how to add a custom tab to the Help Topics dialog
box. This option is only available in version 4.0 or later of the Help
Compiler for Windows.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Create a Dialog Resource</h3>
 
<P>
To add a custom tab to the WinHelp Help Topics dialog box, you must do
three things:

<OL><P><LI>Create a dialog template resource to display in the custom help tab.
   The dialog template that you create will be displayed over the top of
   the existing Help Tab dialog box. You do not need to worry about the
   size of the dialog frame; WinHelp will automatically resize it at
   display time to ensure that it fits.

<P><LI>Ensure that the dialog template that you create has no borders and
   includes the WS_CHILD and the DS_CONTROL styles. DS_CONTROL is a new
   style that ensures that the dialog box will get the focus when the tab
   is activated. DS_CONTROL is defined in Winuser.h file included with the
   Win32 SDK. The definition is as follows:
<P>
<PRE>   #define DS_CONTROL          0x0400L

</PRE><P><LI>Make the dialog box itself visible. On this last point, Help (Hcw.hlp)
   incorrectly suggests that the dialog box should be invisible. This is an
   error.  If you do not ensure that the dialog box is visible, you will
   not be able to see it when you click on the custom help tab.
<P>
</OL><h3>Write a DLL to Support the Dialog Resource</h3>
 
<P>
Once you have created the dialog resource, you must write a DLL to support
it. In addition to including the dialog box procedure, the DLL must export
the following function, prototyped as follows:
<P>
<PRE>   HWND WINAPI OpenTabDialog(HWND, DWORD, DWORD)

</PRE></OL>This function will be called automatically by WinHelp when the custom tab
is clicked; at which point, WinHelp passes the window handle of the tab
dialog box as the first parameter. This allows you to call CreateDialog()
from within the function. The remaining two parameters are reserved for
future use and can be ignored.
<P>
<P><h3>Example DLL</h3>
 
<P>
Here is an example of what this DLL might look like:
<P>
<PRE>#include &lt;windows.h&gt;
#include "resource.h"

</PRE>HINSTANCE hinst;  // Used by OpenTabDialog()
<P>
<PRE>/* DllMain exists solely for the purpose of obtaining the DLL instance
 * and storing it in a global variable used to call CreateDialog().
 */
</PRE>BOOL WINAPI DllMain (HINSTANCE hinstDll, DWORD fdwReason,
<PRE>  LPVOID lpReserved)
</PRE>{
<P>
<PRE>     switch (fdwReason){

          case DLL_PROCESS_ATTACH:
               hinst = hinstDll;
               break;
     }

     return (TRUE);
</PRE>}
<P>
BOOL WINAPI  DialogProc (HWND hDlg, UINT message, UINT wParam,
<PRE>  long lParam)
</PRE>{
<PRE>     . . .

     return FALSE;
</PRE>}
<P>
<PRE>/* This procedure is called by WINHLP32. Winhelp passes in its hwnd
 * so you can call Create Dialog. The instance handle for the DLL is
 * stored in a global variable that is initialized in LibMain.

</PRE>HWND WINAPI OpenTabDialog(HWND hwnd, DWORD dwReserved1, DWORD dwReserved2){
<P>
<P>
<PRE>     return (CreateDialog (hinst, MAKEINTRESOURCE(IDD_DIALOG1), hwnd,
  DialogProc));

</PRE>}
<P>
<P><h3>Modify the Help Project (.hpj) File</h3>
 
<P>
Once the DLL has been written, you must modify the Help project file (.hpj
file) to include the custom tab and link the DLL to it. If you are using
HCW, open your Contents file (.cnt file). (If you have not created one, you
must do so in order to use your custom tab.)  In the Contents dialog box,
follow these steps:

<OL><P><LI>Click the Tabs button to bring up the Custom Tabs dialog box.

<P><LI>Click the Add button to bring up the Add Tab dialog box.

<P><LI>Enter the name to appear on the tab in the Tab Name edit box.

<P><LI>Enter the name of your custom .dll file (and optionally the path) in the
   DLL File Name edit box.

<P><LI>Click OK twice to exit the dialog boxes.

<P><LI>On the File menu, click Save to save your changes.

<P><LI>Compile the .hpj file. When you use your help file, the custom tab
   should now be available to you.
<P>
</OL>If you do not wish to work with HCW, you can open your Contents file in a
text editor, and add the following line:
<P>
<PRE>   :Tab &lt;tab name&gt;=&lt;path to DLL&gt;

   :Tab mytab=c:\helptab\debug\helptab.dll

</PRE></OL>Once you make this change, you will need to save the file and recompile
your .hpj file.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00<BR>
KBCategory: kbtool kbdocerr kbhowto kbcode<BR>
KBSubcategory: tlshlp<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 20, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

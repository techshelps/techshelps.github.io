

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the C Run-Time </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q94248 ">
<META NAME="KBModify" CONTENT="1997/10/10">
<META NAME="KBCreate" CONTENT="1992/12/31">
<META NAME="Keywords" CONTENT="">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This document contains the following sections:     Section 1:  Three Forms of C Run-Time (CRT) Library Are Available    Section 2:  Using the CRT Libraries When Building a DLL    Section 3:  Using NTWIN32.MAK to Simplify the Build Process    Sectio...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QBFY,QAH4,QBC9,QBC8,QANO,QDNN,QBHQ,QAH6,QAH7,QAD7,QAIF,QAY5,QBWP,QAUD V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Using the C Run-Time</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 10, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q94248 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
3.10 3.50 3.51 | 4.00
<PRE>WINDOWS NT     | WINDOWS
</PRE>kbtool
<P>
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Software Development Kit (SDK), versions 3.1, 3.5,
   3.51, and 4.0
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This document contains the following sections:
<P>
<PRE>   Section 1:  Three Forms of C Run-Time (CRT) Library Are Available
   Section 2:  Using the CRT Libraries When Building a DLL
   Section 3:  Using NTWIN32.MAK to Simplify the Build Process
   Section 4:  Problems Encountered When Using Multiple CRT Libraries
   Section 5:  Mixing Library Types

</PRE><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Section 1:  Three Forms of C Run-Time (CRT) Libraries Are Available</h3>
 
<P>
There are three forms of the C Run-time library provided with the Win32
SDK:

<UL><LI>LIBC.LIB is a statically linked library for single-threaded programs.

<LI>LIBCMT.LIB is a statically linked library that supports multithreaded
   programs.

<LI>CRTDLL.LIB is an import library for CRTDLL.DLL that also supports
   multithreaded programs. CRTDLL.DLL itself is part of Windows NT.
<P>
</UL>Microsoft Visual C++ 32-bit edition contains these three forms as well,
however, the CRT in a DLL is named MSVCRT.LIB. The DLL is redistributable.
Its name depends on the version of VC++ (ie MSVCRT10.DLL or MSVCRT20.DLL).
Note however, that MSVCRT10.DLL is not supported on Win32s, while
CRTDLL.LIB is supported on Win32s. MSVCRT20.DLL comes in two versions: one
for Windows NT and the other for Win32s.
<P>
<P><h3>Section 2: Using the CRT Libraries When Building a DLL</h3>
 
<P>
When building a DLL which uses any of the C Run-time libraries, in order to
ensure that the CRT is properly initialized, either

<OL><P><LI>the initialization function must be named DllMain() and the entry point
   must be specified with the linker option -entry:_DllMainCRTStartup@12
<P>
   - or -

<P><LI>the DLL's entry point must explicitly call CRT_INIT() on process attach
   and process detach
<P>
</OL>This permits the C Run-time libraries to properly allocate and initialize C
Run-time data when a process or thread is attaching to the DLL, to properly
clean up C Run-time data when a process is detaching from the DLL, and for
global C++ objects in the DLL to be properly constructed and destructed.
<P>
The Win32 SDK samples all use the first method. Use them as an example.
Also refer to the Win32 Programmer's Reference for DllEntryPoint() and the
Visual C++ documentation for DllMain(). Note that DllMainCRTStartup() calls
CRT_INIT() and CRT_INIT() will call your application's DllMain(), if it
exists.
<P>
If you wish to use the second method and call the CRT initialization code
yourself, instead of using DllMainCRTStartup() and DllMain(), there are two
techniques:

<OL><P><LI>if there is no entry function which performs initialization code, simply
   specify CRT_INIT() as the entry point of the DLL. Assuming that you've
   included NTWIN32.MAK, which defines DLLENTRY as "@12", add the following
   option to the DLL's link line:
<P>
<P><PRE>      -entry:_CRT_INIT$(DLLENTRY)
</PRE><P>
   - or -

<P><LI>if you *do* have your own DLL entry point, do the following in the entry
   point:
<P>
   a. Use this prototype for CRT_INIT():
<P>
<P><PRE>       BOOL WINAPI _CRT_INIT(HINSTANCE hinstDLL, DWORD fdwReason,
<PRE></PRE>          LPVOID lpReserved);

      For information on CRT_INIT() return values, see the documentation
      DllEntryPoint; the same values are returned.

   b. On DLL_PROCESS_ATTACH and DLL_THREAD_ATTACH (see "DllEntryPoint" in
      the Win32 API reference for more information on these flags), call
      CRT_INIT(), first, before any C Run-time functions are called or any
      floating-point operations are performed.

   c. Call your own process/thread initialization/termination code.

   d. On DLL_PROCESS_DETACH and DLL_THREAD_DETACH, call CRT_INIT() last,
      after all C Run-time functions have been called and all floating-
      point operations are completed.

   Be sure to pass on to CRT_INIT() all of the parameters of the entry
   point; CRT_INIT() expects those parameters, so things may not work
   reliably if they are omitted (in particular, fdwReason is required to
   determine whether process initialization or termination is needed).

   Below is a skeleton sample entry point function that shows when and how
   to make these calls to CRT_INIT() in the DLL entry point:

    BOOL WINAPI DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason,
        LPVOID lpReserved)
    {
    if (fdwReason == DLL_PROCESS_ATTACH || fdwReason == DLL_THREAD_ATTACH)
        if (!_CRT_INIT(hinstDLL, fdwReason, lpReserved))
            return(FALSE);

    if (fdwReason == DLL_PROCESS_DETACH || fdwReason == DLL_THREAD_DETACH)
        if (!_CRT_INIT(hinstDLL, fdwReason, lpReserved))
            return(FALSE);
    return(TRUE);
    }

    NOTE that this is *not* necessary if you are using DllMain() and
    -entry:_DllMainCRTStartup@12.

</PRE></OL><h3>Section 3: Using NTWIN32.MAK to Simplify the Build Process</h3>
 
<P>
There are macros defined in NTWIN32.MAK that can be used to simplify your
makefiles and to ensure that they are properly built to avoid conflicts.
For this reason, Microsoft highly recommends using NTWIN32.MAK and the
macros therein.
<P>
For compilation, use:
<P>
<PRE>   $(cvarsdll)          for apps/DLLs using CRT in a DLL

</PRE>For linking, use one of the following:
<P>
<PRE>   $(conlibsdll)        for console apps/DLLs using CRT in a DLL
   $(guilibsdll)        for GUI apps using CRT in a DLL

</PRE><h3>Section 4: Problems Encountered When Using Multiple CRT Libraries</h3>
 
<P>
If an application that makes C Run-time calls links to a DLL that also
makes C Run-time calls, be aware that if they are both linked with one of
the statically-linked C Run-time libraries (LIBC.LIB or LIBCMT.LIB), the
.EXE and DLL will have separate copies of all C Run-time functions and
global variables. This means that C Run-time data cannot be shared between
the .EXE and the DLL. Some of the problems that can occur as a result are:

<UL><LI>Passing buffered stream handles from the .EXE/DLL to the other module
<LI>Allocating memory with a C Run-time call in the .EXE/DLL and
   reallocating or freeing it in the other module
<LI>Checking or setting the value of the global errno variable in the
   .EXE/DLL and expecting it to be the same in the other module. A related
   problem is calling perror() in the opposite module from where the C Run-
   time error occurred, since perror() uses errno.
<P>
</UL>To avoid these problems, link both the .EXE and DLL with CRTDLL.LIB or
MSVCRT.LIB, which allows both the .EXE and DLL to use the common set of
functions and data contained within CRT in a DLL, and C Run-time data such
as stream handles can then be shared by both the .EXE and DLL.
<P>
<P><h3>Section 5: Mixing Library Types</h3>
 
<P>
You can link your DLL with CRTDLL.LIB/MSVCRT.LIB regardless of what your
.EXE is linked with if you avoid mixing CRT data structures and passing
CRT file handles or CRT FILE* pointers to other modules.
<P>
When mixing library types adhere to the following:

<UL><LI>CRT file handles may only be operated on by the CRT module that created
   them.

<LI>CRT FILE* pointers may only be operated on by the CRT module that
   created them.

<LI>Memory allocated with the CRT function malloc() may only be freed or
   reallocated by the CRT module that allocated it.
<P>
</UL>To illustrate this, consider the following example:
<P>
<PRE>   - .EXE is linked with MSVCRT.LIB
   - DLL A is linked with LIBCMT.LIB
   - DLL B is linked with CRTDLL.LIB

   If the .EXE creates a CRT file handle using _create() or _open(), this
   file handle may only be passed to _lseek(), _read(), _write(), _close(),
   etc. in the .EXE file. Do not pass this CRT file handle to either DLL.
   Do not pass a CRT file handle obtained from either DLL to the other DLL
   or to the .EXE.

   If DLL A allocates a block of memory with malloc(), only DLL A may call
   free(), _expand(), or realloc() to operate on that block. You cannot
   call malloc() from DLL A and try to free that block from the .EXE or
   from DLL B.

   NOTE: If all three modules were linked with CRTDLL.LIB or all three were
   linked with MSVCRT.LIb, these restrictions would not apply.

</PRE>When linking DLLs with LIBC.LIB, be aware that if there is a possibility
that such a DLL will be called by a multithreaded program, the DLL will
not support multiple threads running in the DLL at the same time, which can
cause major problems. If there is a possibility that the DLL will be called
by multithreaded programs, be sure to link it with one of the libraries
that support multithreaded programs (LIBCMT.LIB, CRTDLL.LIB or MSVCRT.LIB).
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 4.00 95<BR>
KBCategory: kbtool<BR>
KBSubcategory: TlsMisc<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 10, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOWTO: Debug OLE Server Applications Using MSVC </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q151074">
<META NAME="KBModify" CONTENT="1997/10/07">
<META NAME="KBCreate" CONTENT="1996/05/16">
<META NAME="Keywords" CONTENT="LeTwoOth kbtshoot">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  An OLE client application involves interaction with other OLE server applications. This interaction could be with in-process or out-of-process servers. The client application may or may not have debugging information. These combinations make the de...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAH4,QAJH,QA9Q,QARL,QAVX,QAW6,QAI5,QBVX,QBWS,QAX6,QAHE,QA6A,QAY2,QAPN,QABG V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>HOWTO: Debug OLE Server Applications Using MSVC</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  October 7, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q151074</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:
<P>
<PRE>  - Microsoft OLE libraries included with:
    - Microsoft Windows NT, version 3.51
    - Microsoft Windows 95, version 4.0
</PRE> 
<P>
SUMMARY
 
<P>
An OLE client application involves interaction with other OLE server
applications. This interaction could be with in-process or out-of-process
servers. The client application may or may not have debugging information.
These combinations make the debugging process of an OLE application
complicated. This article presents some techniques that can be used for
debugging OLE-enabled applications.
<P>
MORE INFORMATION
 
<P>
<P><h3>Debugging an In-Process OLE Server Application</h3>
 
<P>
An OLE client application interacting with an in-process OLE server
application is simply loading an OLE server DLL in the client application
address space. To debug such an in-process server, standard DLL debugging
techniques can be used. For more information, please see the following
article in the Microsoft Knowledge Base:
<P>
<PRE>      ARTICLE-ID: <B><A HREF="../VISUALC/Q85221.htm">Q85221</A></B>
      TITLE     : Debugging a Dynamic-Link Library (DLL) in Windows

</PRE><h3>Debugging an Out-of-Process OLE Server Application</h3>
 
<P>
In an OLE client application interacting with an out-of-process OLE server
application, the debugging involves crossing process spaces, which makes it
much more difficult. Following are few techniques that can be used to debug
out-of-process OLE server applications:

<UL><LI>Setup a hardcoded breakpoint in the server, and when the breakpoint hits
   in the server code, the Microsoft Visual C++ (MSVC) debugger is
   launched. Then step through server code and add breakpoints at locations
   of interest in server code.
<P>
   Add the following line of code in the source code, where a hardcoded
   breakpoint is needed.
<P>
<P><PRE>      DebugBreak();
</PRE>
<LI>Setup a breakpoint in the container/client application, then step into
   the code where the server code is called. The action of stepping into
   the code causes a new version of the MVSC debugger to be launched with
   the Server debug information. Then you can step through the server code
   and add breakpoints at locations of interest in the server code. To
   configure this, check in the MSVC option, the Tool Option, the debug
   tab, the Just-in-time debugging, and the OLE RPC debugging checkboxes
   that need to be checked. This technique requires source code and a debug
   version of the client application as well. For more information, please
   see the following article in the Microsoft Knowledge Base:
<P>
<P><PRE>      ARTICLE-ID: <B><A HREF="../VISUALC/Q154116.htm">Q154116</A></B>
<PRE></PRE>      TITLE     : Tutorial: Debugging OLE Applications

</PRE><LI>Launch the server application from the client and then find the process
   id of the server application using PView. Launch the MSVC -p &lt;process
   ID&gt;. This launches the MSVC option that attaches itself to the running
   server application. However, this technique is not useful in debugging
   the startup code of the server application. For more information, please
   see the following article in the Microsoft Knowledge Base:
<P>
<P><PRE>      ARTICLE-ID: <B><A HREF="../VISUALC/Q120707.htm">Q120707</A></B>
<PRE></PRE>      TITLE     : How to Debug an Active Process in Visual C++ 2.0

</PRE><LI>If the server application has registered the ClassFactory object with
   the system as single use (CoRegisterClassObject with CLS_SINGLEUSE
   flag), you can run the server application from the MSVC option as stand
   alone. To simulate the server being launched from the container/client
   application, you need to specify the /Embedding /Automation program
   arguments as applicable in the MSVC debug options and run the server
   application as stand alone. The /Embedding and /Automation switches do
   the appropriate server initialization, and register the class factory as
   if launched from the container/client application. Because the server's
   class factory is single use and not already connected, when the
   container/client application tries to hook up to the server, the
   container connects to the running server application in the debugger,
   and debugging is easier. For more information, please see the following
   article in the Microsoft Knowledge Base:
<P>
<P><PRE>      ARTICLE-ID: <B><A HREF="../VISUALC/Q117558.htm">Q117558</A></B>
<PRE></PRE>      TITLE     : HOWTO: Debug OLE Applications

</PRE><LI>If the server application registers the ClassFactory object with the
   system as multiple use (CoRegisterClassObject with CLS_MULTIPLEUSE
   flag), run the server application from the MSVC option as stand alone.
   Since such servers register the ClassFactory on startup, you do not need
   to specify /Embedding /Automation program arguments in the MSVC debug
   options. When the container/client application tries to connect to the
   server, it connects to the instance of the server application in the
   debugger because the server's class factory is registered multiple use,
   and debugging is easier.
<P></UL>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: 3.50<BR>
Keywords          : LeTwoOth kbtshoot<BR>
Technology        : kbole<BR>
Version           : WINNT:3.51<BR>
Platform          : NT Win95 WINDOWS<BR>
Issue type        : kbhowto<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  October 7, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hot Versus Warm Links in a DDEML Server Application </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q108927">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1993/12/20">
<META NAME="Keywords" CONTENT="kbui">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  In message-based dynamic-data exchange (DDE), a server application can readily distinguish between a hot and a warm link as soon as it receives a request for an advise loop, via the WM_DDE_ADVISE message. This allows the server to send the appropri...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAGI,QAA7,QAH6,QAYY,QBE4,QARL,QBS2,QAJH,QAYV,QAY5,QAKD,QDL9,QBWO,QBWN,QAQI V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Hot Versus Warm Links in a DDEML Server Application</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q108927</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) versions 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
In message-based dynamic-data exchange (DDE), a server application can
readily distinguish between a hot and a warm link as soon as it receives a
request for an advise loop, via the WM_DDE_ADVISE message. This allows the
server to send the appropriate value in the data handle (for example, a
NULL or a valid data handle) to the client application whenever data
changes. In DDEML, there is no way to distinguish between these two links
when the server receives a request for an advise transaction.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Two applications engaged in a DDE conversation may establish one or more
links (or advise loops) so that the server application sends periodic
updates about the linked item/s to the client, typically when that
particular data item's value changes.
<P>
In a hot advise loop, the server immediately sends a data handle to the
changed data item value. In a warm advise loop, however, the server just
notifies the client that the data item value has changed, but does not send
the data handle until the client explicitly requests it.
<P>
In message-based DDE, a client requests the server for an update on an item
by posting the WM_DDE_ADVISE message to the server application. Upon
receipt of this message, the server application is able to distinguish
between a request for a hot advise loop and a warm advise loop via the
fDeferUpd bit of the DDEADVISE structure it received in the low-order word
of lParam.
<P>
A nonzero fDeferUpd value tells the server that it is a WARM advise loop.
This instructs the server to send a WM_DDE_DATA message with a NULL data
handle whenever the data item changes, and wait for the client to post a
WM_DDE_REQUEST before it sends the handle to the updated data.
<P>
A zero fDeferUpd value, however, indicates a HOT advise loop, which then
tells the server to send a WM_DDE_DATA message with the valid data handle
to the changed data item.
<P>
In DDEML, a client requests the server for a hot advise loop via the
XTYP_ADVSTART transaction type in a call to the DdeClientTransaction()
function. To request a warm advise loop, the client specifies an
XTYP_ADVSTART transaction or'ed with the XTYPF_NODATA flag. In both cases,
the DDEML passes the same XTYP_ADVSTART to the server callback function,
with no particular flags set, leaving the server with no means to
distinguish between a hot or warm advise request.
<P>
Note that DDEML internally remembers the type of advise loop established.
<P>
Once an advise loop is established, the server application calls the
DdePostAdvise() function whenever the value of the data item changes. In a
hot advise loop, this causes the DDEML to send the server an XTYP_ADVREQ
transaction to its callback function, where the server then returns a data
handle to the changed data item. The DDEML then sends the XTYP_ADVDATA
transaction to the client's callback function with the data handle.
<P>
In a warm advise loop, an XTYP_ADVREQ transaction is not sent to the
server's callback function when the data item changes on a call to
DdePostAdvise(). DDEML takes care of sending the XTYP_ADVDATA transaction
directly to the client's callback function, with the data handle set to
NULL. The server application does not send the handle to the changed data
item until the client issues an XTYP_REQUEST transaction to obtain this
data handle.
<P>
Because the type of advise loop (hot versus warm) is not known to the
server application, a good rule of thumb in writing server applications
that support advise loops is to return a data handle in response to both
the XTYP_ADVREQ and the XTYP_REQUEST transactions. This guarantees that a
data handle is returned for both hot and warm advise loops.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 3.51 4.00 95<BR>
KBCategory: kbui<BR>
KBSubcategory: UsrDde<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

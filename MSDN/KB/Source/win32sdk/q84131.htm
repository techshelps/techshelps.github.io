

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving Font Styles Using EnumFontFamilies() </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q84131 ">
<META NAME="KBModify" CONTENT="1995/11/02">
<META NAME="KBCreate" CONTENT="1992/04/29">
<META NAME="Keywords" CONTENT="kbgraphic">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Windows version 3.1 introduces the concept of a font style. In previous versions of Windows, a font could have the bold, italic, underline, and strikeout properties, which were supported by respective members in the LOGFONT and TEXTMETRIC structure...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QADF,QABF,QAUJ,QDL9,QBWO,QBWN,QBQU,QBWQ,QAY5,QABX,QARM,QBVR,QA3M V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>Retrieving Font Styles Using EnumFontFamilies()</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  November 2, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q84131 </B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) for Windows
   version 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT versions 3.5 and 3.51
    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Windows version 3.1 introduces the concept of a font style. In
previous versions of Windows, a font could have the bold, italic,
underline, and strikeout properties, which were supported by
respective members in the LOGFONT and TEXTMETRIC structures. Windows
3.1 also supports these properties, as well as a style name for
TrueType fonts. The article describes how to obtain the font style
name during font enumeration, using the EnumFontFamilies function. For
more information about obtaining style information without enumerating
the fonts, query on the following words in the Microsoft Knowledge
Base:
<P>
<PRE>   prod(winsdk) and getoutlinetextmetrics

</PRE><h2>MORE INFORMATION</h2>
 
<P>
In Windows 3.1, "style" refers to the weight and slant of a font.
Windows supports a wide range of weights in the lfWeight member of the
LOGFONT structure. (Two examples of weights are FW_BOLD, which is
defined as 700, and FW_THIN, which is defined as 100). Very few
applications, however, use any weights other than FW_BOLD and
FW_DONTCARE (defined as 0).
<P>
Windows 3.1 builds on the support presently in Windows for these
variations in weight and slant. Style names are NOT used in the
LOGFONT structure except when the fonts are enumerated with
EnumFontFamilies.
<P>
The ChooseFont dialog box in the common dialog boxes dynamic-link
library (COMMDLG.DLL) demonstrates how style names are used. The
ChooseFont dialog box has two list boxes: Font and Font Style. The
Font list box lists the face names for all fonts installed and the
Font Style list box lists the font styles for the currently selected
face. For example, if any non-TrueType font (such as MS Sans Serif) is
selected, the following styles appear in the Font Style list box:
<P>
<PRE>   Regular
   Bold
   Italic
   Bold Italic

</PRE>TrueType fonts may have these or more elaborate styles. For example,
the "Lucida Sans" face includes the following style names:
<P>
<PRE>   Regular
   Italic
   Demibold Roman
   Demibold Italic

</PRE>In the case of Lucida Sans with the style of Demibold Roman or
Demibold Italic, the lfWeight value is 600 (FW_DEMIBOLD).
<P>
In Windows 3.1, the EnumFontFamilies function can be used to obtain
the style name of a font during font enumeration. The EnumFontFamilies
function works in a manner very similar to the Windows 3.0 EnumFonts
function.
<P>
EnumFontFamilies is prototyped as:
<P>
<PRE>   int EnumFontFamilies(HDC hdc, LPCSTR lpszFamily,
                        FONTENUMPROC lpfnEnumProc, LPARAM lpData)

</PRE>The lpszFamily parameter points to a null-terminated string that
specifies the family name (or typeface name) of the desired fonts. If
this parameter is NULL, EnumFontFamilies selects and enumerates one
font of each available font family. For example, to enumerate all
fonts in the "Arial" family, lpszFamily points to a string buffer
containing "Arial."
<P>
The following table illustrates the meanings of the terms, "typeface
name," "font name," and "font style:"
<P>
<PRE>   Typeface Name  Font Name                    Font Style
   -------------  ---------                    ----------

   Arial          Arial                        Regular
                  Arial Bold                   Bold
                  Arial Italic                 Italic
                  Arial Bold Italic            Bold Italic

   Courier New    Courier New                  Regular
                  Courier New Bold             Bold
                  Courier New Italic           Italic
                  Courier New Bold Italic      Bold Italic

   Lucida Sans    Lucida Sans                  Regular
                  Lucida Sans Italic           Italic
                  Lucida Sans Demibold Roman   Demibold Roman
                  Lucida Sans Demibold Italic  Demibold Italic

   MS Sans Serif  MS Sans Serif                Regular
                  MS Sans Serif                Bold
                  MS Sans Serif                Italic
                  MS Sans Serif                Bold Italic

</PRE>The first three typefaces in the above table are TrueType faces, the
remaining typeface is MS Sans Serif. The typeface name is also
sometimes referred to as the family name.
<P>
When dealing with non-TrueType fonts, typeface name and font name are
the same. However, it is important to recognize the distinction when
dealing with a TrueType font.
<P>
For example, CreateFont takes a pointer to a string containing the
typeface name of the font to create. It is not valid to use Arial Bold
as this string because Arial is a TrueType font and Arial Bold is a
font name, not a typeface name.
<P>
If EnumFontFamilies is called with the lpszFamily parameter pointing
to a valid TrueType typeface name, the callback function, which is
specified in fntenmprc, will be called once for each font name for
that typeface name. For example, if EnumFontFamilies is called with
lpszFamily pointing to Lucida Sans, the callback function will be
called four times; once for each font name.
<P>
If the lpszFamily parameter points to the typeface name of a non-
TrueType font, such as MS Sans Serif, the callback will be called once
for each face size supported by the font. The number of face sizes
supported by the font can vary from font to font and from device to
device. Note that the callback is called for different sizes, not for
different styles. This behavior is identical to that found using the
EnumFonts function.
<P>
Remember that, because TrueType fonts are continuously scalable, there
is no reason for the callback function to be called for each size. If
the callback function was called for each size that a TrueType font
supported, the callback function would be called an infinite number of
times!
<P>
The EnumFontFamilies callback function is prototyped as follows:
<P>
<PRE>int CALLBACK EnumFontFamProc(LPNEWLOGFONT lpnlf,
                             LPNEWTEXTMETRIC lpntm,
                             int FontType, LPARAM lpData)

</PRE>The lpnlf parameter points to a LOGFONT structure that contains
information about the logical attributes of the font. If the typeface
being enumerated is a TrueType font [(nFontType | TRUETYPE_FONTTYPE)
is TRUE], this LOGFONT structure will have two additional members
appended to the end of the structure, as follows:
<P>
<PRE>   char   lfFullName[LF_FACESIZE*2];
   char   lfStyleName[LF_FACESIZE];

</PRE>It is important to remember that these two additional fields are used
*only* during enumeration with EnumFontFamilies and nowhere else in
Windows. The documentation for the EnumFontFamilies function on pages
266-268 of the "Microsoft Windows Software Development Kit:
Programmer's Reference, Volume 2: Functions" manual refers to the
NEWLOGFONT structure which contains the additional members listed
above. However, the NEWLOGFONT structure is not defined in the
WINDOWS.H header file. To address this situation, use the ENUMLOGFONT
structure which is defined in the WINDOWS.H file but is not listed in
the Windows SDK documentation.
<P>
To retrieve the style name and full name of a font without using
enumeration, use the GetOutlineTextMetrics function.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 4.00 95<BR>
KBCategory: kbgraphic<BR>
KBSubcategory: GdiTt<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  November 2, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Find the Version Number of Win32s </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q125014">
<META NAME="KBModify" CONTENT="1997/01/22">
<META NAME="KBCreate" CONTENT="1995/01/19">
<META NAME="Keywords" CONTENT="kbenv kbhowto">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  This article describes how to obtain the version number information for Win32s installed on a Windows 3.1 machine from one of the following places:   - From an end user perspective, on either Windows for Workgroups 3.11 or    Windows NT 3.5  - A 16...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QBWO,QAA1,QAGU,QDI2,QAKC,QDL9,QBWQ,QBWN,QAUD,QBC6,QAY2,QAY5,QAC1,QAYY V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Find the Version Number of Win32s</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  January 22, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q125014</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this articles applies to:

<UL><LI>Microsoft Win32s, versions 1.30, 1.30a, 1.30c
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
This article describes how to obtain the version number information for
Win32s installed on a Windows 3.1 machine from one of the following places:

<UL><LI>From an end user perspective, on either Windows for Workgroups 3.11 or
   Windows NT 3.5
<LI>A 16-bit application running on Windows 3.1
<LI>A 32-bit application running on Windows 3.1
<P>
</UL><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>From an End User Perspective</h3>
 
<P>
Because Win32s does not have a user interface, there is no obvious way to
get the version number information for Win32s that is installed on Windows
3.1. However, end users have the following two options:

<UL><LI>Read the &lt;windir&gt;\SYSTEM\WIN32S.INI file, which has an entry for version
   information. Because this .INI file can be updated by the Setup program
   of any Win32s application, this information is not completely reliable.

<LI>From File Manager on Windows for Workgroups 3.11 or Windows NT 3.5,
   select the WIN32S16.DLL and choose Properties from the File menu. This
   method yields a dialog box with version information on Win32s. Remember
   that WIN32S16.DLL is a 16-bit DLL; however, File Manager on Windows NT
   3.5 can still read this version resource information.
<P>
</UL><h3>Version Information</h3>
 
<P>
Win32s Release versions and corresponding build numbers:
<P>
<PRE>   Win32s Release #    Build #
   ----------------    -------
      1.1              1.1.88
      1.1a             1.1.89
      1.15             1.15.103
      1.15a            1.15.111
      1.2              1.2.123
      1.25             1.2.141
      1.25a            1.2.142
      1.30             1.2.159
      1.30a            1.2.166
      1.30c            1.2.172

</PRE>OLE versions shipped with corresponding Win32s versions:
<P>
<PRE>   Release #    OLE32    OLE16
   ---------    -----    -----
   1.2          2.02     2.02
   1.25         2.03     2.03
   1.25a        2.03a    2.03a
   1.30         2.03b    2.03a
   1.30a        2.03c    2.03b
   1.30c        2.03d    2.03b

</PRE><h3>From a 16-Bit Application</h3>
 
<P>
To get version number information for Win32s from a 16-bit application, use
the Win32s specific function, GetWin32sInfo(), which is documented in the
Win32s Programmer's Reference. This function is exported by the 16-bit
W32SYS.DLL file in Win32s 1.1 and later. The GetWin32sInfo() function fills
a specified structure with the information from Win32s VxD. Usually a 16-
bit Windows setup program should use this function to determine if Win32s
is already installed before continuing installation. Note that a 16-bit
program must use LoadLibrary and GetProcAddress to call the function
because the function did not exist in Win32s version 1.0.
<P>
The following example on using GetWin32sInfo() is extracted from the Win32s
Programmer's Reference:
<P>
<PRE>// Example of a 16-bit application that indicates whether Win32s is
// installed, and the version number if Win32s is loaded and VxD is
// functional.
//
// NOTE: There is no header file in the SDK which has a definition
// for the WIN32SINFO structure.  Include the following structure
// definition into the source code.

</PRE>typedef struct {
<PRE>    BYTE bMajor;
    BYTE bMinor;
    WORD wBuildNumber;
    BOOL fDebug;
</PRE>} WIN32SINFO, FAR * LPWIN32SINFO;
<P>
BOOL FAR PASCAL IsWin32sLoaded(LPSTR szVersion)
{
<PRE>    BOOL              fWin32sLoaded = FALSE;
    FARPROC           pfnInfo;
    HANDLE            hWin32sys;
    WIN32SINFO        Info;

    hWin32sys = LoadLibrary("W32SYS.DLL");

    if (hWin32sys &gt; HINSTANCE_ERROR) {
        pfnInfo = GetProcAddress(hWin32sys, "GETWIN32SINFO");
        if (pfnInfo) {
            // Win32s version 1.1 is installed
            if (!(*pfnInfo)((LPWIN32SINFO) &amp;Info)) {

                fWin32sLoaded = TRUE;
                wsprintf(szVersion, "%d.%d.%d.0",
                         Info.bMajor, Info.bMinor, Info.wBuildNumber);
            } else
                fWin32sLoaded = FALSE;    // Win32s VxD not loaded.
        } else {
            // Win32s version 1.0 is installed.
            fWin32sLoaded = TRUE;
            lstrcpy( szVersion, "1.0.0.0" );
        }
        FreeLibrary( hWin32sys );
    } else                                // Win32s not installed.
        fWin32sLoaded = FALSE;


    return fWin32sLoaded;
</PRE>}
<P>
<P><h3>From a 32-Bit Application</h3>
 
<P>
To determine if Win32s is installed, use the function GetVersion(); to then
get the version of Win32s use the function, GetVersionEx(). This function
fills a specified structure with version information of Win32s on Windows
3.1. The following is an example illustrating the use of this function:
<P>
<PRE>// Example of a 32-bit code that determines the operating system installed
// and the version number on all platforms: Windows NT, Windows 95, Win32s.

</PRE>typedef BOOL (*LPFNGETVERSIONEX) (LPOSVERSIONINFO);
<P>
BOOL IsWin32sLoaded(char *szVersion)
{
<PRE>  BOOL              fWin32sLoaded = FALSE;
  DWORD             dwGetVer;
  HMODULE           hKernel32;
  OSVERSIONINFO     ver;
  LPFNGETVERSIONEX    lpfnGetVersionEx;

  // First, check if Win32s is installed
  dwGetVer = GetVersion();
  if (!(dwGetVer &amp; 0x80000000))
  {
     //  Windows NT is loaded
     // Note, GetVersion will also return version number on Windows NT

     return;
  }
  else if (LOBYTE(LOWORD(dwVersion))&lt; 4)
  {
    // Win32s is loaded
    fWin32sLoaded = TRUE;
  }
  else {
     // Windows 95 is loaded
     // Note, GetVersion will also return version number on Windows 95

     return;
  }

  // Now, let's find the version number of Win32s
    hKernel32 = GetModuleHandle("Kernel32");
    if (hKernel32)
    {
        lpfnGetVersionEx = (LPFNGETVERSIONEX)GetProcAddress(hKernel32,
</PRE>"GetVersionExA");
<PRE>        if (lpfnGetVersionEx)
   {
           // Win32s version 1.15 or later is installed
           ver.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
           if (!(*lpfnGetVersionEx)((LPOSVERSIONINFO) &amp;ver))
             DisplayError("GetVersionEx");
           else
             wsprintf(szVersion, "%d.%d.%d - %s", ver.dwMajorVersion,
</PRE>ver.dwMinorVersion,
<PRE>                      ver.dwBuildNumber, PlatformName(ver.dwPlatformId));
   }
   else
   {
// This failure could mean several things
// 1. On an NT system, it indicates NT version 3.1 because GetVersionEx()
//    is only implemented on NT 3.5.
// 2. On Windows 3.1 system, it means either Win32s version 1.1 or 1.0 is
//    installed. You can distinguish between 1.1 and 1.0 in two ways:
// a. Get version info from WIN32S16.DLL like File Manager on NT does.
// b. Thunk to 16-bit side and call GetWin32sInfo.


   }
    }

 return (fWin32sLoaded);
</PRE>}
<P>
NOTE: In general, 32-bit applications that use Win32s should always ship
with the latest version of Win32s. Therefore the detection code above can
be greatly simplified if determination of previous versions of Win32s is
not needed.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
KBCategory: kbenv kbhowto<BR>
KBSubcategory: W32s<BR>
Additional reference words: 1.30 1.30a 1.30c win32s w32s win32 wfw<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  January 22, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

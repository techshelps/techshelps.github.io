

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Create Inheritable Win32 Handles in Windows 95 </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q118605">
<META NAME="KBModify" CONTENT="1995/09/25">
<META NAME="KBCreate" CONTENT="1994/07/25">
<META NAME="Keywords" CONTENT="kbprg">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Sometimes it is convenient for you to create an object such as a semaphore or file and then allow a child process to inherit the object's handle. This provides a means for two or more related processes to easily share an object.  Although Windows 9...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QBWP,QDL9,QBWN,QBWO,QAPN,QAW6,QBWQ,QAAD,QAK7,QBVV,QDNF,QDIT,QBXS,QAH7,QBXR V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>How to Create Inheritable Win32 Handles in Windows 95</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 25, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q118605</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows 95 version 4.0
</UL></PRE> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Sometimes it is convenient for you to create an object such as a semaphore
or file and then allow a child process to inherit the object's handle. This
provides a means for two or more related processes to easily share an
object.
<P>
Although Windows 95 does not have a security system such as the one in
Microsoft Windows NT, Win32 API functions that create objects still use the
SECURITY_ATTRIBUTES structure to determine whether the handle to the newly
created object can be inherited. This article shows how to initialize a
SECURITY_ATTRIBUTES structure to control whether an object handle can be
inherited.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
Win32 API functions that create objects require a SECURITY_ATTRIBUTES
parameter to give a newly created object access-control information and to
determine whether the handle to the object can be inherited.
<P>
The SECURITY_ATTRIBUTES structure contains the following members:
<P>
<PRE>    Type      Name
    ----      ----
    DWORD     nLength;
    LPVOID    lpSecurityDescriptor;
    BOOL      bInheritHandle;

</PRE>Secure Win32 operating systems such as Microsoft Windows NT use the
lpSecurityDescriptor member to enforce how and by which processes an object
is accessed. Because Windows 95 does not have a security system, it ignores
lpSecurityDescriptor. Like Microsoft Windows NT, Windows 95 uses the
bInheritHandle member to determine whether an object's handle can be
inherited by child processes.
<P>
To initialize a SECURITY_ATTRIBUTES structure so that a handle can be
inherited, set bInheritHandle to TRUE. The following code snippet shows how
to create a mutex with an inheritable handle:
<P>
<PRE>      // Set the length of the structure, allow the handle to be
      // inherited, and use the default security descriptor (which
      // Windows 95 will ignore, but Windows NT will use.) Then create
      // a named, initially unowned mutex whose handle can be
      // inherited.

   SECURITY_ATTRIBUTES sa;
   HANDLE              hMutex1;

   sa.nLength              = sizeof(sa);
   sa.bInheritHandle       = TRUE;
   sa.lpSecurityDescriptor = NULL;

   hMutex1 = CreateMutex(&amp;sa, FALSE, "MUTEX1");

</PRE>To prevent the handle from being inherited, set bInheritHandle to FALSE.
The following code example demonstrates creating a mutex with a
noninheritable handle:
<P>
<PRE>      // Set the length of the structure, do not allow the handle
      // to be inherited, and use the default security descriptor
      // (which Windows 95 will ignore, but Windows NT will use).
      // Create a named, initially unowned mutex whose handle cannot
      // be inherited.

   SECURITY_ATTRIBUTES sa;
   HANDLE              hMutex1;

   sa.nLength              = sizeof(sa);
   sa.bInheritHandle       = FALSE;
   sa.lpSecurityDescriptor = NULL;

   hMutex1 = CreateMutex(&amp;sa, FALSE, "MUTEX1");

</PRE>You can also prevent a handle to an object from being inherited by
specifying NULL in the call to Win32 object creation API function instead
of specifying a pointer to a SECURITY_ATTRIBUTES structure. This is
equivalent to setting bInheritHandle to FALSE and lpSecurityDescriptor to
NULL. For example:
<P>
<PRE>      // Use NULL instead of pointer to SECURITY_ATTRIBUTES
      // structure to create a named, initially unowned
      // mutex whose handle cannot be inherited. A NULL security
      // descriptor will be used by Windows NT, but ignored by
      // Windows 95.

   HANDLE hMutex1;
   hMutex1 = CreateMutex(NULL, FALSE, "MUTEX1");


</PRE><h3>Cross-Platform Compatibility Information</h3>
 
<P>
Keep in mind that while Windows 95 does not have a security system, Windows
NT does. Windows 95 ignores the lpSecurityDescriptor member of the
SECURITY_ATTRIBUTES, but Windows NT uses it. If access to the object needs
to be controlled in a specific way on Windows NT, then the
lpSecurityDescriptor should be initialized by calling the Win32 security
API functions.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 4.00<BR>
KBCategory: kbprg<BR>
KBSubcategory: BseSecurity<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 25, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>

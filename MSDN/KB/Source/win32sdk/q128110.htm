

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRB: CBS_SIMPLE ComboBox Repainting Problem </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q128110">
<META NAME="KBModify" CONTENT="1995/09/29">
<META NAME="KBCreate" CONTENT="1995/03/27">
<META NAME="Keywords" CONTENT="kbui kbcode kbprb">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  When a CBS_SIMPLE combo box has a WS_CLIPCHILDREN parent, the area below the edit control and left to the list box is not repainted correctly. This problem exists for 16-bit as well as 32-bit applications.  RESOLUTION  To work around this problem, ...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAHP,QBV3,QBVR,QA01,QAVX,QAVW,QAUD,QAK4,QAG9,QDL9,QBWO,QBWN,QAY5,QACI,QAEF V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>PRB: CBS_SIMPLE ComboBox Repainting Problem</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  September 29, 1995</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q128110</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
The information in this article applies to:

<UL><LI>Microsoft Windows Software Development Kit (SDK) version 3.1

<LI>Microsoft Win32 Application Programming Interface (API) included with:
<P>
<P><PRE>    - Microsoft Windows NT version 3.5
    - Microsoft Win32s version 1.2
</UL></PRE> 
<P>
<P><h2>SYMPTOMS</h2>
 
<P>
When a CBS_SIMPLE combo box has a WS_CLIPCHILDREN parent, the area below
the edit control and left to the list box is not repainted correctly. This
problem exists for 16-bit as well as 32-bit applications.
<P>
<P><h2>RESOLUTION</h2>
 
<P>
To work around this problem, subclass the combo box, calculate the blank
area, and then repaint to the desired color.
<P>
The following ComboBox subclass procedure is written for a 16-bit
application, but you can use the same idea in 32-bit applications.
<P>
<P><h3>Sample Code</h3>
 
<P>
LRESULT CALLBACK NewComboProc(
<PRE>      HWND hWnd,
      UINT uMessage,
      WPARAM uParam,
      LPARAM lParam)
</PRE>{
HDC myDC;
HPEN   hPen, hOldPen;
HBRUSH hBrush;
HBRUSH hOldBrush;
COLORREF myColor=RGB(255,255,255); //It can be any color. Here
<PRE>               //the area is painted white.

</PRE>HWND hEdit, hList;
RECT comboRect, editRect, listRect;
<PRE>char   *wndClassName="Edit";

</PRE>if (uMessage == WM_PAINT)
<PRE>  {
  CallWindowProc(lpfnOldComboProc, hWnd, uMessage, uParam,
                 lParam);
  myDC = GetDC(hWnd);
  hBrush = CreateSolidBrush(myColor);
  hPen   = CreatePen (PS_SOLID, 1, myColor);
  hOldBrush = SelectObject(myDC, hBrush) ;
  hOldPen   = SelectObject(myDC, hPen);

  //This code obtains the handle to the edit control of the
  //combobox.

  hEdit = GetWindow(hWnd, GW_CHILD);
  GetClassName (hEdit, wndClassName, 10);
  if (!lstrcmp (wndClassName, "Edit"))

    hList=GetWindow(hEdit, GW_HWNDNEXT);

  else
    {
    hList=hEdit;
    hEdit=GetWindow(hList, GW_HWNDNEXT);
    }

  //The dimensions of the Edit Control, ListBox control and
  //the Combobox are  calculated and then used
  //as the base dimensions for the Rectangle() routine.

  GetClientRect (hWnd, &amp;comboRect);
  GetClientRect (hEdit, &amp;editRect);
  GetClientRect (hList, &amp;listRect);
  Rectangle (myDC,
             comboRect.left,
             editRect.bottom,
             comboRect.right-listRect.right,
             comboRect.bottom);
  //Also paint the gap, if any exists, between the bottom
  //of the listbox and the bottom of the ComboBox rectangle.
  Rectangle (myDC,
             comboRect.right-listRect.right,
        editRect.bottom +
             listRect.bottom,
        comboRect.right,
        comboRect.bottom);

  DeleteObject(SelectObject(myDC, hOldBrush)) ;
  DeleteObject(SelectObject(myDC, hOldPen)) ;
  ReleaseDC(hWnd, myDC);
  return TRUE;
  }

</PRE>return CallWindowProc(lpfnOldComboProc, hWnd, uMessage, uParam,
<PRE> lParam);
</PRE>}
<P>
<P><h2>STATUS</h2>
 
<P>
This behavior is by design.
<P>
<P><h2>MORE INFORMAITON</h2>
 
<P>
<P><h3>Steps to Reproduce Behavior</h3>
 
<P>
To reproduce this behavior, use AppStudio to create a dialog with the
WS_CLIPCHILDREN style, put a CBS_SIMPLE combobox in the dialog, and click
the test button so you can test the dialog. Then move something on top of
the dialog, and move the object on top of the combobox away. You can then
see that area to the left of the listbox is not repainted correctly.
<P>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional reference words: 3.10 3.50 1.20<BR>
KBCategory: kbui kbcode kbprb<BR>
KBSubcategory: UsrCtl<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  September 29, 1995</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>



<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFO: The Windows 95 Rundll and Rundll32 Interface </TITLE>

<!--STYLE_BEGIN-->
<style>@import url(../../msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="../../msdn_ie3.css">
<!--STYLE_END-->

<META HTTP-EQUIV="CONTENT-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="ms.locale" CONTENT="EN-US">
<META NAME="Category" CONTENT="Support; KB Article">
<META NAME="KBID" CONTENT="Q164787">
<META NAME="KBModify" CONTENT="1997/03/27">
<META NAME="KBCreate" CONTENT="1997/03/06">
<META NAME="Keywords" CONTENT="BseDll BseMisc kbprg kbtool kbusage">
<META NAME="KBArea" CONTENT="Support; KB; win32sdk">
<META NAME="Description" CONTENT="  Windows 95 contains two command-line utility programs named Rundll.exe and Rundll32.exe that allow you to invoke a function exported from a DLL, either 16-bit or 32-bit. However, Rundll and Rundll32 programs do not allow you to call any exported fu...">
<META NAME="Product" CONTENT="Win32 SDK">
<META NAME="Platform" CONTENT="Windows">
<META NAME="Technology" CONTENT=" ">
<META NAME="Premium" CONTENT="support">

<META NAME="nyms" CONTENT="QAY5,QBWP,QBV8,QAB9,QDL9,QBWO,QBWN,QAGI,QBWQ,QBC9,QBC8,QANO,QBXT,QA5V,QAIB V02180118">
</HEAD>

<BODY BGCOLOR="#FFFFFF" LEFTMARGIN="0" RIGHTMARGIN="0" TOPMARGIN="0">


<!--DOCBODY_START-->
<BR>
<CENTER>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" VALIGN="top" WIDTH="90%">
	<TR>
		<TD VALIGN="top">
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<H1>INFO: The Windows 95 Rundll and Rundll32 Interface</H1>
			</FONT>
			<FONT FACE="verdana,arial,helvetica" SIZE="1">
			Last reviewed:  March 27, 1997</FONT><BR>
			<FONT FACE="verdana,arial,helvetica" SIZE="2">
			<B>Article ID: Q164787</B>
			</FONT>
		</TD>
	</TR>
	<TR>
	<TD>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>



 
 
The information in this article applies to:

<UL><LI>Microsoft Win32 Application Programming Interface (API) included with:
   - Microsoft Windows NT version 4.0
   - Microsoft Windows 95
</UL> 
<P>
<P><h2>SUMMARY</h2>
 
<P>
Windows 95 contains two command-line utility programs named Rundll.exe and
Rundll32.exe that allow you to invoke a function exported from a DLL,
either 16-bit or 32-bit. However, Rundll and Rundll32 programs do not
allow you to call any exported function from any DLL. For example, you can
not use these utility programs to call the Win32 API (Application
Programming Interface) calls exported from the system DLLs. The programs
only allow you to call functions from a DLL that are explicitly written to
be called by them. This article provides more details on the use of Rundll
and Rundll32 programs under Windows NT and Windows 95.
The Rundll and Rundll32 utility programs were originally designed only for
internal use at Microsoft. But the functionality provided by them is
sufficiently generic that they are now available for general use.
Note that Windows NT 4.0 ships only with the Rundll32 utility program and
supports only Rundll32.
<P>
<P><h2>MORE INFORMATION</h2>
 
<P>
<P><h3>Rundll vs. Rundll32</h3>
 
<P>
Rundll loads and runs 16-bit DLLs, whereas Rundll32 loads and runs 32-bit
DLLs.  If you pass the wrong type of DLL to Rundll or Rundll32, it may
fail to run without indicating any error messages.
<P>
<P><h3>Rundll command line</h3>
 
<P>
The command line for Rundll is as follows:
<P>
<PRE>   RUNDLL.EXE &lt;dllname&gt;,&lt;entrypoint&gt; &lt;optional arguments&gt;

</PRE>An example is as follows:
<P>
<PRE>   RUNDLL.EXE SETUPX.DLL,InstallHinfSection 132 C:\WINDOWS\INF\SHELL.INF

</PRE>There are 3 issues to consider carefully in the above command line:

<OL><P><LI>Rundll or Rundll32 search for the given DLL filename in the standard
   places (see the documentation for the LoadLibrary() function for
   details). It is recommended that you provide a full path to the DLL to
   ensure that the correct one is found. For best results, use the short
   file name instead of the long file name to ensure that no illegal
   characters will appear. Note in particular that this means a DLL in the
   "C:\Program Files" folder should be converted to its short name.
</OL>2. The &lt;dllname&gt; may not contain any spaces or commas or quotation marks.
<PRE>   This is a limitation in the Rundll command line parser.
</PRE></OL>3. In the above command line, the comma (,) between the &lt;dllname&gt; and the
<PRE>   &lt;entrypont&gt; function name is extremely important. If the comma
   separator is missing, Rundll or Rundll32 will fail without indicating
   any errors. In addition, there cannot be any white spaces in between
   the &lt;dllname&gt;, the comma, and the &lt;entrypoint&gt; function.

</PRE><h3>How Rundll Works</h3>
 
<P>
Rundll performs the following steps:

<OL><P><LI>It parses the command line.
</OL>2. It loads the specified DLL via LoadLibrary().
3. It obtains the address of the &lt;entrypoint&gt; function via
<PRE>   GetProcAddress().
</PRE></OL>4. It calls the &lt;entrypoint&gt; function, passing the command line tail which
<PRE>   is the &lt;optional arguments&gt;.
</PRE>5. When the &lt;entrypoint&gt; function returns, Rundll.exe unloads the DLL
<PRE>   and exits.

</PRE><h3>How to Write Your DLL</h3>
 
<P>
In your DLL, write the &lt;entrypoint&gt; function with the following prototype:
<P>
16-bit DLL:
<P>
<PRE>  void FAR PASCAL __loadds
  EntryPoint(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow);

</PRE>32-bit DLL:
<P>
<PRE>  void CALLBACK
  EntryPoint(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow);

</PRE>Again, there are 3 issues to consider with the EntryPoint function:

<OL><P><LI>Obviously, the name "EntryPoint" should be replaced with the actual
   name of your entry point function.  Note that the Rundll32's entry
   point is completely unrelated to the DllEntryPoint function in a 32-bit
   DLL which handles process and thread attach/detach notifications.

<P><LI>The entry point function for Rundll32 must be defined with the _stdcall
   calling convention (CALLBACK defaults to using the _stdcall attribute).
   If the _stdcall attribute is missing, then the function defaults to
   _cdecl calling convention and then Rundll32 will terminate abnormally
   after calling the function.

<P><LI>Since you must declare the function with _stdcall calling convention as
   described above, it follows that the Visual C++ compiler will actually
   export it as _EntryPoint@16 if the DLL is written in C or will use
   further name decoration if the DLL is written in C++.  So, be careful
   to use the correctly exported name in the command line for Rundll or
   Rundll32.  If you want to avoid using decorated names, use a .def file
   and export the entry point function by name.  Please refer to the
   product documentation and the following article for further information
   on name decoration when using Visual C++ compilers:
<P>
<P><PRE>     ARTICLE ID: <B><A HREF="../VISUALC/Q140485.htm">Q140485</A></B>
<PRE></PRE>     TITLE     : Exporting PASCAL-Like Symbols in 32-bit DLLs

</PRE></OL>The parameters to the Rundll entry point are as follows:
<P>
<PRE>   hwnd - window handle that should be used as the owner window for
          any windows your DLL creates
   hinst - your DLL's instance handle
   lpszCmdLine - ASCIIZ command line your DLL should parse
   nCmdShow - describes how your DLL's windows should be displayed

</PRE>In the following example:
<P>
<PRE>   RUNDLL.EXE SETUPX.DLL,InstallHinfSection 132 C:\WINDOWS\INF\SHELL.INF

</PRE>Rundll would call the InstallHinfSection() entrypoint function in
Setupx.dll and pass it the following parameters:
<P>
<PRE>   hwnd = (parent window handle)
   hinst = HINSTANCE of SETUPX.DLL
   lpszCmdLine = "132 C:\WINDOWS\INF\SHELL.INF"
   nCmdShow = (whatever the nCmdShow was passed to CreateProcess)

</PRE>Note that it is the &lt;entrypoint&gt; function (or InstallHinfSection() in the
above example) that has to parse its own command line (the lpszCmdLine
parameter above) and use the individual parameters as necessary.
Rundll.exe parses only up to the optional arguments passed to its command
line. The rest of the parsing is up to the &lt;entrypoint&gt; function.
<P>
<P><h3>Special Notes On Differences Between Windows 95 And Windows NT</h3>
 
<P>
On Windows NT, the behavior of Rundll32.exe is slightly different, in
order to accommodate UNICODE command lines.
<P>
Windows NT first attempts to GetProcAddress for &lt;EntryPoint&gt;W. If this
entry point is found, then the prototype is assumed to be:
<P>
<PRE>   void CALLBACK
   EntryPointW(HWND hwnd, HINSTANCE hinst, LPWSTR lpszCmdLine,
               int nCmdShow);

</PRE>This is the same as the ANSI EntryPoint, except that the lpszCmdLine
parameter is now a UNICODE string.
<P>
If the &lt;EntryPoint&gt;W entry point is not found, then Windows NT will
GetProcAddress for &lt;entrypoint&gt;A and for &lt;entrypoint&gt;. If either is found,
then it is considered an ANSI entry point and is treated the same way as
Windows 95.
Therefore, if you want your DLL to run on Windows 95 with ANSI support and
on Windows NT with UNICODE support, you should export two functions:
EntryPointW and EntryPoint. On Windows NT, the EntryPointW function will
be called with a UNICODE command line; on Windows 95, the EntryPoint
function will be called with an ANSI Command line.
<P><h2>REFERENCES</h2>
 
<P>
For an example on the usage of Rundll, refer to the following article on
how to launch a Control Panel Applet in Windows 95 using the Rundll
command line utility:
<P>
<PRE>   ARTICLE ID:<B><A HREF="../WIN32SDK/Q135068.htm">Q135068</A></B>
   TITLE     :How to Start a Control Panel Applet in Windows 95

</PRE>

	</FONT>
	</TD>
	</TR>
</TABLE>
<P>


<!--DOCBODY_END-->

<!--FOOTER_START-->
<table cellpadding=5 border=0 width="90%">
<tr>
<td>
	<HR WIDTH="90%">

<BLOCKQUOTE>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="1">
<SPAN STYLE="font-family:verdana,arial,helvetica; font-size:8pt">
Additional query words: win95 tools<BR>
Keywords            : BseDll BseMisc kbprg kbtool kbusage<BR>
Version             : 4.0<BR>
Platform            : NT WINDOWS<BR>

</SPAN>
</FONT>
<BR>
<BR>
THE INFORMATION PROVIDED IN THE MICROSOFT KNOWLEDGE BASE IS
PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND.  MICROSOFT DISCLAIMS
ALL WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING THE WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO
EVENT SHALL MICROSOFT CORPORATION OR ITS SUPPLIERS BE LIABLE FOR
ANY DAMAGES WHATSOEVER INCLUDING DIRECT, INDIRECT, INCIDENTAL,
CONSEQUENTIAL, LOSS OF BUSINESS PROFITS OR SPECIAL DAMAGES, EVEN IF
MICROSOFT CORPORATION OR ITS SUPPLIERS HAVE BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO NOT ALLOW THE EXCLUSION
OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES
SO THE FOREGOING LIMITATION MAY NOT APPLY.
</BLOCKQUOTE>
<P>
<center>
	<FONT FACE="Verdana,Arial,Helvetica" SIZE="1">
	Last reviewed:  March 27, 1997</FONT>
	<BR>
	<A HREF="../cpyright.htm" STYLE="font: bold 7pt Verdana,Arial,Helvetica">&copy; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A><BR>
	
</center>
</td>
</tr>
</table>

<!--FOOTER_END-->
</FONT>
</BODY>
</HTML>
